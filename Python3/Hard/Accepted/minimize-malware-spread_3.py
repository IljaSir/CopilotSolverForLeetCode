class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        # First, we will find the connected components of the graph.
        # The idea is to use a disjoint set to do this.
        n = len(graph)
        parent = list(range(n))
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        def union(x, y):
            parent[find(x)] = find(y)
        for i in range(n):
            for j in range(i+1, n):
                if graph[i][j] == 1:
                    union(i, j)
        # Now we have the disjoint set, we need to find the size of each connected component.
        # We also need to find the number of initial nodes in each connected component.
        size = [0] * n
        infected = [0] * n
        for i in range(n):
            size[find(i)] += 1
            if i in initial:
                infected[find(i)] += 1
        # Now we can find the answer.
        # If a connected component has only one initial node, then removing it will not affect the answer.
        # Otherwise, we remove the initial node with the largest connected component.
        ans = float('inf')
        for i in initial:
            root = find(i)
            if infected[root] == 1:
                if ans == float('inf'):
                    ans = i
                elif size[root] > size[find(ans)]:
                    ans = i
                elif size[root] == size[find(ans)] and i < ans:
                    ans = i
        if ans == float('inf'):
            return min(initial)
        return ans