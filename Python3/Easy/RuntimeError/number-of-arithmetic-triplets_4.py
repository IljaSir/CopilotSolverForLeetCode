class Solution:
    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:
        
        # 1. brute force: O(n^3)
        # 2. DP: O(n^2)
        # 3. Hashmap: O(n)
        # 4. 2 pointers: O(n)
        # 5. Binary search: O(nlogn)
        # 6. Sort: O(nlogn)
        # 7. Group: O(n)
        # 8. Count: O(n)
        # 9. Set: O(n)
        # 10. Bit manipulation: O(n)
        # 11. Math: O(n)
        # 12. Matrix: O(n)
        # 13. Stack: O(n)
        # 14. Queue: O(n)
        # 15. Linked list: O(n)
        # 16. Tree: O(n)
        # 17. Graph: O(n)
        # 18. Geometry: O(n)
        # 19. Random: O(n)
        # 20. Recursion: O(n)
        # 21. Memoization: O(n)
        # 22. Dynamic programming: O(n)
        # 23. Greedy: O(n)
        # 24. Backtracking: O(n)
        # 25. BFS: O(n)
        # 26. DFS: O(n)
        # 27. Sliding window: O(n)
        # 28. Two pointers: O(n)
        # 29. Binary search: O(n)
        # 30. Bit manipulation: O(n)
        # 31. Sort: O(n)
        # 32. Union find: O(n)
        # 33. Trie: O(n)
        # 34. Segment tree: O(n)
        # 35. Binary indexed tree: O(n)
        # 36. Topological sort: O(n)
        # 37. Line sweep: O(n)
        # 38. Minimax: O(n)
        # 39. Game theory: O(n)
        # 40. Hash: O(n)
        # 41. Hashmap: O(n)
        # 42. Hashset: O(n)
        # 43. Heap: O(n)
        # 44. Queue: O(n)
        # 45. Stack: O(n)
        # 46. Linked list: O(n)
        #