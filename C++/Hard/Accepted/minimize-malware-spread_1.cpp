class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        vector<int> color(n, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(i, c++, color, graph);
            }
        }
        vector<int> color_size(c, 0);
        for (int x : color) {
            color_size[x]++;
        }
        vector<int> infected(c, 0);
        for (int i : initial) {
            infected[color[i]]++;
        }
        int ans = INT_MAX;
        for (int i : initial) {
            int c = color[i];
            if (infected[c] == 1) {
                if (ans == INT_MAX) {
                    ans = i;
                } else if (color_size[c] > color_size[color[ans]]) {
                    ans = i;
                } else if (color_size[c] == color_size[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == INT_MAX) {
            for (int i : initial) {
                ans = min(ans, i);
            }
        }
        return ans;
    }
    void dfs(int node, int c, vector<int>& color, vector<vector<int>>& graph) {
        color[node] = c;
        for (int i = 0; i < graph.size(); ++i) {
            if (graph[node][i] == 1 && color[i] == -1) {
                dfs(i, c, color, graph);
            }
        }
    }
};