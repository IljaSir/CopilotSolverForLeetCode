class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        vector<int> infected(n, 0);
        vector<int> initial_infected(n, 0);
        for(int i: initial){
            infected[i] = 1;
            initial_infected[i] = 1;
        }
        vector<int> visited(n, 0);
        for(int i: initial){
            if(visited[i] == 0){
                queue<int> q;
                q.push(i);
                while(!q.empty()){
                    int v = q.front();
                    q.pop();
                    visited[v] = 1;
                    for(int j=0; j<n; j++){
                        if(graph[v][j] == 1 && infected[j] == 0 && visited[j] == 0){
                            q.push(j);
                            infected[j] = 1;
                        }
                    }
                }
            }
        }
        int max_infected = 0;
        int node = -1;
        for(int i: initial){
            int count = 0;
            for(int j=0; j<n; j++){
                if(graph[i][j] == 1 && infected[j] == 1){
                    count++;
                }
            }
            if(count > max_infected){
                max_infected = count;
                node = i;
            }else if(count == max_infected){
                if(i < node){
                    node = i;
                }
            }
        }
        if(node == -1){
            return *min_element(initial.begin(), initial.end());
        }
        return node;
    }
};