class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        vector<int> colors(n, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (colors[i] == -1) {
                dfs(graph, colors, i, c++);
            }
        }
        vector<int> colorSize(c);
        for (int color : colors) {
            colorSize[color]++;
        }
        vector<int> colorInitial(c);
        for (int node : initial) {
            colorInitial[colors[node]]++;
        }
        int ans = INT_MAX;
        for (int node : initial) {
            int color = colors[node];
            if (colorInitial[color] == 1) {
                if (ans == INT_MAX) {
                    ans = node;
                }
                else if (colorSize[color] > colorSize[colors[ans]]) {
                    ans = node;
                }
                else if (colorSize[color] == colorSize[colors[ans]] && node < ans) {
                    ans = node;
                }
            }
        }
        if (ans == INT_MAX) {
            for (int node : initial) {
                ans = min(ans, node);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& graph, vector<int>& colors, int node, int color) {
        colors[node] = color;
        for (int nei = 0; nei < graph.size(); ++nei) {
            if (graph[node][nei] == 1 && colors[nei] == -1) {
                dfs(graph, colors, nei, color);
            }
        }
    }
};