class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        vector<int> colors(n);
        int c = 0;
        for (int i=0; i < n; i++) {
            if (colors[i] == 0) {
                c++;
                dfs(graph, colors, i, c);
            }
        }
        vector<int> colorSize(c+1);
        vector<int> colorInitial(c+1);
        for (int i=0; i < n; i++) {
            colorSize[colors[i]]++;
        }
        for (auto i: initial) {
            colorInitial[colors[i]]++;
        }
        int ans = INT_MAX;
        for (auto i: initial) {
            int c = colors[i];
            if (colorInitial[c] == 1) {
                if (ans == INT_MAX) {
                    ans = i;
                } else if (colorSize[c] > colorSize[colors[ans]]) {
                    ans = i;
                } else if (colorSize[c] == colorSize[colors[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == INT_MAX) {
            for (auto i: initial) {
                ans = min(ans, i);
            }
        }
        return ans;
    }
    
    void dfs(vector<vector<int>>& graph, vector<int>& colors, int node, int c) {
        colors[node] = c;
        for (int i=0; i < graph.size(); i++) {
            if (graph[node][i] == 1 && colors[i] == 0) {
                dfs(graph, colors, i, c);
            }
        }
    }
};