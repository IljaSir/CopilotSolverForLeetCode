class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        // 1. find the connected components
        // 2. find the number of nodes in each connected component
        // 3. find the number of initial nodes in each connected component
        // 4. find the maximum number of initial nodes in a connected component
        // 5. find the connected component with the maximum number of initial nodes
        // 6. find the node with the smallest index in the connected component
        int n = graph.size();
        vector<int> component(n, 0);
        vector<int> size(n, 0);
        vector<int> initial_nodes(n, 0);
        int max_initial_nodes = 0;
        int max_initial_nodes_component = 0;
        int max_initial_nodes_component_node = 0;
        int component_count = 0;
        for (int i = 0; i < n; i++) {
            if (component[i] == 0) {
                component_count++;
                size[component_count] = 1;
                component[i] = component_count;
                dfs(i, graph, component, component_count, size);
            }
        }
        for (int i = 0; i < initial.size(); i++) {
            initial_nodes[component[initial[i]]]++;
        }
        for (int i = 1; i <= component_count; i++) {
            if (initial_nodes[i] > max_initial_nodes) {
                max_initial_nodes = initial_nodes[i];
                max_initial_nodes_component = i;
                max_initial_nodes_component_node = -1;
            } else if (initial_nodes[i] == max_initial_nodes) {
                for (int j = 0; j < n; j++) {
                    if (component[j] == i) {
                        if (max_initial_nodes_component_node == -1 || j < max_initial_nodes_component_node) {
                            max_initial_nodes_component_node = j;
                        }
                    }
                }
            }
        }
        if (max_initial_nodes == 1) {
            for (int i = 0; i < initial.size(); i++) {
                if (component[initial[i]] == max_initial_nodes_component) {
                    return initial[i];
                }
            }
        }
        return max_initial_nodes_component_node;
    }
};