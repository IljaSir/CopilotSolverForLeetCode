class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        int n = graph.size();
        vector<int> color(n, -1);
        for (int c = 0, i = 0; i < n; ++i) {
            if (color[i] < 0) {
                dfs(graph, color, i, c++);
            }
        }
        vector<int> colorSize(c, 0);
        for (int i = 0; i < n; ++i) {
            colorSize[color[i]]++;
        }
        vector<int> infected(c, 0);
        for (int i : initial) {
            infected[color[i]]++;
        }
        int ans = initial[0], ansSize = -1;
        for (int i : initial) {
            int c = color[i];
            if (infected[c] == 1) {
                if (ansSize < colorSize[c]) {
                    ansSize = colorSize[c];
                    ans = i;
                }
            }
        }
        if (ansSize == -1) {
            for (int i : initial) {
                ans = min(ans, i);
            }
        }
        return ans;
    }
    void dfs(const vector<vector<int>>& graph, vector<int>& color, int node, int c) {
        color[node] = c;
        for (int i = 0; i < graph.size(); ++i) {
            if (graph[node][i] == 1 && color[i] < 0) {
                dfs(graph, color, i, c);
            }
        }
    }
};