class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int[] size = new int[n];
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(graph, color, size, i, c++);
            }
        }
        int[] malware = new int[c];
        for (int node : initial) {
            malware[color[node]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int node : initial) {
            int c2 = color[node];
            if (malware[c2] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = node;
                } else if (size[c2] > size[color[ans]]) {
                    ans = node;
                } else if (size[c2] == size[color[ans]] && node < ans) {
                    ans = node;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int node : initial) {
                ans = Math.min(ans, node);
            }
        }
        return ans;
    }
    public void dfs(int[][] graph, int[] color, int[] size, int node, int c) {
        color[node] = c;
        size[c]++;
        for (int nei = 0; nei < graph.length; ++nei) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, size, nei, c);
            }
        }
    }
}