class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (colors[i] == -1)
                dfs(graph, colors, i, c++);

        int[] size = new int[c];
        for (int color: colors)
            size[color]++;

        int[] malwareCount = new int[c];
        for (int node: initial)
            malwareCount[colors[node]]++;

        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int color = colors[node];
            if (malwareCount[color] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[color] > size[colors[ans]])
                    ans = node;
                else if (size[color] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int node: initial)
                ans = Math.min(ans, node);
        }

        return ans;
    }

    public void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && colors[nei] == -1)
                dfs(graph, colors, nei, color);
    }
}