class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] parent = new int[n];
        Arrays.fill(parent, -1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[find(parent, i)]++;
        }
        int[] infected = new int[n];
        for (int i : initial) {
            infected[find(parent, i)]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int i : initial) {
            int root = find(parent, i);
            if (infected[root] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = i;
                } else if (count[root] > count[find(parent, ans)]) {
                    ans = i;
                } else if (count[root] == count[find(parent, ans)] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int i : initial) {
                ans = Math.min(ans, i);
            }
        }
        return ans;
    }
    
    private int find(int[] parent, int i) {
        if (parent[i] == -1) {
            return i;
        }
        return parent[i] = find(parent, parent[i]);
    }
    
    private void union(int[] parent, int i, int j) {
        int x = find(parent, i);
        int y = find(parent, j);
        if (x != y) {
            parent[x] = y;
        }
    }
}