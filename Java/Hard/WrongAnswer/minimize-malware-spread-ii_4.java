class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        
        int[] colorSize = new int[c];
        for (int i = 0; i < n; i++) {
            colorSize[color[i]]++;
        }
        
        int[] infected = new int[c];
        for (int i : initial) {
            infected[color[i]]++;
        }
        
        int ans = Integer.MAX_VALUE;
        for (int i : initial) {
            int nodeColor = color[i];
            if (infected[nodeColor] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = i;
                } else if (colorSize[nodeColor] > colorSize[color[ans]]) {
                    ans = i;
                } else if (colorSize[nodeColor] == colorSize[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        
        if (ans == Integer.MAX_VALUE) {
            for (int i : initial) {
                ans = Math.min(ans, i);
            }
        }
        
        return ans;
    }
    
    private void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; nei++) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, nei, c);
            }
        }
    }
}