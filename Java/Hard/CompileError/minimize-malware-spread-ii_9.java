class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int N = graph.length;
        int[] color = new int[N];
        Arrays.fill(color, -1);
        int[] size = new int[N];
        int C = 0;
        for (int node = 0; node < N; ++node)
            if (color[node] == -1) {
                dfs(graph, color, node, C);
                size[C] = count(color, C);
                C++;
            }

        // Find unique colors
        int[] colorCount = new int[N];
        for (int node: initial)
            colorCount[color[node]]++;

        // Answer
        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c = color[node];
            if (colorCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c] > size[color[ans]])
                    ans = node;
                else if (size[c] == size[color[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int node: initial)
                ans = Math.min(ans, node);

        return ans;
    }

    public void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && color[nei] == -1)
                dfs(graph, color, nei, c);
    }
}