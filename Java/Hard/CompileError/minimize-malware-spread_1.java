class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[find(parent, i)]++;
        }
        int[] infected = new int[n];
        for (int i : initial) {
            infected[find(parent, i)]++;
        }
        int ans = initial[0];
        for (int i = 0; i < initial.length; i++) {
            int node = initial[i];
            int root = find(parent, node);
            if (infected[root] == 1) {
                if (ans == initial[0] || count[root] > count[find(parent, ans)]) {
                    ans = node;
                } else if (count[root] == count[find(parent, ans)] && node < ans) {
                    ans = node;
                }
            }
        }
        return ans;
    }
    
    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
}