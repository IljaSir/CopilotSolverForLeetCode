Synthesizing 10/10 solutions

=======

        vector<int> res(nums.size());
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        vector<int> res(nums.size());
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; i--) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        vector<int> res(nums.size(), 0);
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            auto it = lower_bound(sorted.begin(), sorted.end(), nums[i]);
            res[i] = it - sorted.begin();
            sorted.insert(it, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            sorted.insert(sorted.begin() + index, nums[i]);
            res[i] = index;
        }
        return res;

=======

        vector<int> res(nums.size(), 0);
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; i--) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> idx(n, 0);
        for (int i = 0; i < n; i++) {
            idx[i] = i;
        }
        mergeSort(nums, idx, 0, n - 1, ans);
        return ans;
    }
    
    void mergeSort(vector<int>& nums, vector<int>& idx, int l, int r, vector<int>& ans) {
        if (l >= r) {
            return;
        }
        int mid = (l + r) / 2;
        mergeSort(nums, idx, l, mid, ans);
        mergeSort(nums, idx, mid + 1, r, ans);
        merge(nums, idx, l, mid, r, ans);
    }
    
    void merge(vector<int>& nums, vector<int>& idx, int l, int mid, int r, vector<int>& ans) {
        int i = l;
        int j = mid + 1;
        int k = 0;
        vector<int> tmp(r - l + 1, 0);
        while (i <= mid && j <= r) {
            if (nums[idx[i]] <= nums[idx[j]]) {
                tmp[k++] = idx[i];
                ans[idx[i]] += j - mid - 1;
                i++;
            } else {
                tmp[k++] = idx[j++];
            }
        }
        while (i <= mid) {
            tmp[k++] = idx[i];
            ans[idx[i]] += j - mid - 1;
            i++;
        }
        while (j <= r) {
            tmp[k++] = idx[j++];
        }
        for (int i = l, k = 0; i <= r; i++, k++) {
            idx[i] = tmp[k];
        }

=======

        vector<int> res(nums.size());
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        vector<int> res(nums.size(), 0);
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            auto it = lower_bound(sorted.begin(), sorted.end(), nums[i]);
            res[i] = it - sorted.begin();
            sorted.insert(it, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            sorted.insert(sorted.begin() + index, nums[i]);
            res[i] = index;
        }
        return res;

=======

        vector<int> res(nums.size(), 0);
        vector<int> sorted;
        for (int i = nums.size() - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; i--) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            res[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> idx(n, 0);
        for (int i = 0; i < n; i++) {
            idx[i] = i;
        }
        mergeSort(nums, idx, 0, n - 1, ans);
        return ans;
    }
    
    void mergeSort(vector<int>& nums, vector<int>& idx, int l, int r, vector<int>& ans) {
        if (l >= r) {
            return;
        }
        int mid = (l + r) / 2;
        mergeSort(nums, idx, l, mid, ans);
        mergeSort(nums, idx, mid + 1, r, ans);
        merge(nums, idx, l, mid, r, ans);
    }
    
    void merge(vector<int>& nums, vector<int>& idx, int l, int mid, int r, vector<int>& ans) {
        int i = l;
        int j = mid + 1;
        int k = 0;
        vector<int> tmp(r - l + 1, 0);
        while (i <= mid && j <= r) {
            if (nums[idx[i]] <= nums[idx[j]]) {
                tmp[k++] = idx[i];
                ans[idx[i]] += j - mid - 1;
                i++;
            } else {
                tmp[k++] = idx[j++];
            }
        }
        while (i <= mid) {
            tmp[k++] = idx[i];
            ans[idx[i]] += j - mid - 1;
            i++;
        }
        while (j <= r) {
            tmp[k++] = idx[j++];
        }
        for (int i = l, k = 0; i <= r; i++, k++) {
            idx[i] = tmp[k];
        }

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; --i) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            ans[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> sorted;
        for (int i = n - 1; i >= 0; i--) {
            int index = lower_bound(sorted.begin(), sorted.end(), nums[i]) - sorted.begin();
            ans[i] = index;
            sorted.insert(sorted.begin() + index, nums[i]);
        }
        return ans;

=======

        vector<int> res;
        int n = nums.size();
        if (n == 0) {
            return res;
        }
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({nums[i], i});
        }
        vector<int> count(n, 0);
        mergeSort(v, count);
        return count;
    }
    void mergeSort(vector<pair<int, int>>& v, vector<int>& count) {
        int n = v.size();
        if (n == 1) {
            return;
        }
        int mid = n / 2;
        vector<pair<int, int>> left(v.begin(), v.begin() + mid);
        vector<pair<int, int>> right(v.begin() + mid, v.end());
        mergeSort(left, count);
        mergeSort(right, count);
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < left.size() && j < right.size()) {
            if (left[i].first <= right[j].first) {
                v[k++] = left[i++];
            } else {
                count[left[i].second] += (left.size() - i);
                v[k++] = right[j++];
            }
        }
        while (i < left.size()) {
            v[k++] = left[i++];
        }
        while (j < right.size()) {
            v[k++] = right[j++];
        }
