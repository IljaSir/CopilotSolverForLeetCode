Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> dp(32, 0);
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 32; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int pre = 0, res = 0;
        for (int i = 30; i >= 0; i--) {
            int val = 1 << i;
            if (n & val) {
                n -= val;
                res += dp[i + 1];
                if (pre == 1) {
                    res -= 1;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            if (i == 0) {
                res += 1;
            }
        }
        return res;

=======

        vector<int> f(32);
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; i++) {
            f[i] = f[i - 1] + f[i - 2];
        }
        int res = 0;
        int k = 30;
        int pre_bit = 0;
        while (k >= 0) {
            if (n & (1 << k)) {
                res += f[k];
                if (pre_bit == 1) {
                    res--;
                    break;
                }
                pre_bit = 1;
            } else {
                pre_bit = 0;
            }
            k--;
        }
        return res + 1;

=======

        vector<int> dp(32, 0);
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 32; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int pre = 0;
        int res = 0;
        for (int i = 30; i >= 0; i--) {
            int val = 1 << i;
            if ((n & val) != 0) {
                n -= val;
                res += dp[i + 1];
                if (pre == 1) {
                    res -= 1;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            if (i == 0) {
                res += 1;
            }
        }
        return res;

=======

        int f[32] = {0};
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; i++) {
            f[i] = f[i-1] + f[i-2];
        }
        int ans = 0, k = 30, pre_bit = 0;
        while (k >= 0) {
            if (n & (1 << k)) {
                ans += f[k];
                if (pre_bit == 1) {
                    ans--;
                    break;
                }
                pre_bit = 1;
            } else {
                pre_bit = 0;
            }
            k--;
        }
        return ans + 1;

=======

        int f[31] = {0};
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 31; i++) {
            f[i] = f[i-1] + f[i-2];
        }
        int ans = 0, k = 30, pre_bit = 0;
        while (k >= 0) {
            if (n & (1 << k)) {
                ans += f[k];
                if (pre_bit == 1) {
                    ans--;
                    break;
                }
                pre_bit = 1;
            } else {
                pre_bit = 0;
            }
            k--;
        }
        return ans + 1;

=======

        int a = 1, b = 2, c;
        for (int i = 1; i < 32; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        int res = 0, pre_bit = 0;
        for (int i = 30; i >= 0; i--) {
            int bit = (n >> i) & 1;
            if (bit) {
                res += a;
                if (pre_bit) {
                    res--;
                    break;
                }
            }
            pre_bit = bit;
            if (i) a -= b, b -= a;
        }
        return res + 1;

=======

        int a = 1, b = 1, c = 0;
        for (int i = 1; i < 31; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        int res = 0, pre = 0;
        for (int i = 29; i >= 0; i--) {
            int val = 1 << i;
            if (n & val) {
                n -= val;
                res += b;
                if (pre == 1) {
                    res -= 1;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            if (i == 0) {
                res += 1;
            }
        }
        return res;

=======

        int a = 0, b = 1, c;
        for (int i = 31; i >= 0; i--) {
            if ((n >> i) & 1) {
                c = a + b;
                a = b;
                b = c;
                if ((n >> (i + 1)) & 1) {
                    break;
                }
            } else {
                a = b;
            }
        }
        return a + b;

=======

        return 0;
