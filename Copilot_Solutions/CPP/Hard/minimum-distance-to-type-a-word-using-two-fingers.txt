Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int dp[27][27][27][27];
        memset(dp, 0x3f, sizeof(dp));
        dp[0][0][0][0] = 0;
        for (int i = 0; i < word.size(); ++i) {
            int c = word[i] - 'A';
            for (int f1 = 0; f1 < 27; ++f1) {
                for (int f2 = 0; f2 < 27; ++f2) {
                    for (int f3 = 0; f3 < 27; ++f3) {
                        for (int f4 = 0; f4 < 27; ++f4) {
                            int cost = dp[f1][f2][f3][f4] + dist(f1, f2, c);
                            dp[c][f2][f3][f4] = min(dp[c][f2][f3][f4], cost);
                            dp[f1][c][f3][f4] = min(dp[f1][c][f3][f4], cost);
                            dp[f1][f2][c][f4] = min(dp[f1][f2][c][f4], cost);
                            dp[f1][f2][f3][c] = min(dp[f1][f2][f3][c], cost);
                        }
                    }
                }
            }
        }
        int ans = 0x3f3f3f3f;
        for (int f1 = 0; f1 < 27; ++f1) {
            for (int f2 = 0; f2 < 27; ++f2) {
                for (int f3 = 0; f3 < 27; ++f3) {
                    for (int f4 = 0; f4 < 27; ++f4) {
                        ans = min(ans, dp[f1][f2][f3][f4]);
                    }
                }
            }
        }
        return ans;

=======

        int n = word.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(27, vector<int>(27, INT_MAX)));
        dp[0][26][26] = 0;
        for (int i = 0; i < n - 1; i++) {
            for (int f1 = 0; f1 < 27; f1++) {
                for (int f2 = 0; f2 < 27; f2++) {
                    if (dp[i][f1][f2] == INT_MAX) continue;
                    int c1 = word[i] - 'A';
                    int c2 = word[i + 1] - 'A';
                    if (f1 == 26) {
                        dp[i + 1][c1][f2] = min(dp[i + 1][c1][f2], dp[i][f1][f2]);
                    } else {
                        dp[i + 1][c1][f2] = min(dp[i + 1][c1][f2], dp[i][f1][f2] + getDist(f1, c1));
                        dp[i + 1][f1][c2] = min(dp[i + 1][f1][c2], dp[i][f1][f2] + getDist(f2, c2));
                    }
                }
            }
        }
        int ans = INT_MAX;
        for (int f1 = 0; f1 < 27; f1++) {
            for (int f2 = 0; f2 < 27; f2++) {
                ans = min(ans, dp[n - 1][f1][f2]);
            }
        }
        return ans;

=======

        int n = word.size();
        int dp[n][26][26];
        memset(dp, 0x3f, sizeof(dp));
        dp[0][0][0] = 0;
        for (int i = 1; i < n; ++i) {
            int x1 = word[i - 1] - 'A';
            int x2 = word[i] - 'A';
            for (int j = 0; j < 26; ++j) {
                for (int k = 0; k < 26; ++k) {
                    dp[i][x2][j] = min(dp[i][x2][j], dp[i - 1][x1][k] + dist(x1, x2));
                    dp[i][j][x2] = min(dp[i][j][x2], dp[i - 1][k][x1] + dist(x1, x2));
                }
            }
        }
        int ans = 0x3f3f3f3f;
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < 26; ++j) {
                ans = min(ans, dp[n - 1][i][j]);
            }
        }
        return ans;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(27, INT_MAX));
        dp[0][26] = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < 26; ++j) {
                if (dp[i - 1][j] == INT_MAX) continue;
                dp[i][j] = min(dp[i][j], dp[i - 1][j] + dist(word[i - 1] - 'A', word[i] - 'A'));
                dp[i][word[i] - 'A'] = min(dp[i][word[i] - 'A'], dp[i - 1][j] + dist(j, word[i] - 'A'));
            }
        }
        return *min_element(dp[n - 1].begin(), dp[n - 1].end());

=======

        int n = word.size();
        int dp[26][26][n];
        memset(dp, 0x3f, sizeof(dp));
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < 26; ++j) {
                dp[i][j][0] = 0;
            }
        }
        for (int i = 1; i < n; ++i) {
            int x = word[i] - 'A';
            for (int j = 0; j < 26; ++j) {
                for (int k = 0; k < 26; ++k) {
                    dp[j][x][i] = min(dp[j][x][i], dp[j][k][i-1] + dist(k, x));
                    dp[x][k][i] = min(dp[x][k][i], dp[j][k][i-1] + dist(j, x));
                }
            }
        }
        int ans = 0x3f3f3f3f;
        for (int i = 0; i < 26; ++i) {
            for (int j = 0; j < 26; ++j) {
                ans = min(ans, dp[i][j][n-1]);
            }
        }
        return ans;

=======

        int dp[27][27];
        memset(dp, 0x3f, sizeof(dp));
        dp[0][0] = 0;
        for (char c : word) {
            int cur = c - 'A' + 1;
            int tdp[27][27];
            memset(tdp, 0x3f, sizeof(tdp));
            for (int i = 0; i < 27; i++) {
                for (int j = 0; j < 27; j++) {
                    if (dp[i][j] == 0x3f3f3f3f) continue;
                    int d1 = dist(i, cur);
                    int d2 = dist(j, cur);
                    tdp[cur][j] = min(tdp[cur][j], dp[i][j] + d1);
                    tdp[i][cur] = min(tdp[i][cur], dp[i][j] + d2);
                    tdp[i][j] = min(tdp[i][j], dp[i][j] + d1 + d2);
                }
            }
            memcpy(dp, tdp, sizeof(dp));
        }
        int ans = 0x3f3f3f3f;
        for (int i = 0; i < 27; i++) {
            for (int j = 0; j < 27; j++) {
                ans = min(ans, dp[i][j]);
            }
        }
        return ans;

=======

        int n = word.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(27, vector<int>(27, 10000)));
        int dist[26][26];
        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                dist[i][j] = abs(i / 6 - j / 6) + abs(i % 6 - j % 6);
            }
        }
        for (int i = 0; i < 27; i++) {
            for (int j = 0; j < 27; j++) {
                dp[0][i][j] = 0;
            }
        }
        for (int i = 1; i < n; i++) {
            int cur = word[i] - 'A';
            int pre = word[i - 1] - 'A';
            for (int j = 0; j < 27; j++) {
                for (int k = 0; k < 27; k++) {
                    if (j < 26) {
                        dp[i][cur][k] = min(dp[i][cur][k], dp[i - 1][j][k] + dist[j][cur]);
                    }
                    if (k < 26) {
                        dp[i][j][cur] = min(dp[i][j][cur], dp[i - 1][j][k] + dist[k][cur]);
                    }
                }
            }
        }
        int ans = 10000;
        for (int i = 0; i < 27; i++) {
            for (int j = 0; j < 27; j++) {
                ans = min(ans, dp[n - 1][i][j]);
            }
        }
        return ans;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(27, 0));
        int cost = 0;
        for (int i = 0; i < n; i++) {
            int c = word[i] - 'A';
            for (int j = 0; j < 27; j++) {
                int d = 0;
                if (j != 26) {
                    d = abs(j / 6 - c / 6) + abs(j % 6 - c % 6);
                }
                if (i == 0) {
                    dp[i][j] = d;
                } else {
                    dp[i][j] = min(dp[i - 1][j] + d, dp[i - 1][26] + d);
                    dp[i][26] = min(dp[i - 1][26] + cost, dp[i - 1][j] + cost);
                }
            }
            cost = dp[i][26];
        }
        return dp[n - 1][26];
