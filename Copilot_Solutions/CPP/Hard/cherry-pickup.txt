Synthesizing 10/10 solutions

=======

        int n = grid.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, INT_MIN)));
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); ++i) {
                for (int j = max(0, t - (n - 1)); j <= min(n - 1, t); ++j) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        dp[i][j][t] = INT_MIN;
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; ++pi) {
                        for (int pj = j - 1; pj <= j; ++pj) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, INT_MIN)));
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            for (int i = max(0, t - n + 1); i <= min(n - 1, t); ++i) {
                for (int j = max(0, t - n + 1); j <= min(n - 1, t); ++j) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; ++pi) {
                        for (int pj = j - 1; pj <= j; ++pj) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, -1)));
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * (n - 1); ++t) {
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); ++i) {
                for (int j = max(0, t - (n - 1)); j <= min(n - 1, t); ++j) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        dp[i][j][t] = -1;
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; ++pi) {
                        for (int pj = j - 1; pj <= j; ++pj) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = max(dp[i][j][t], dp[pi][pj][t - 1]);
                            }
                        }
                    }
                    if (dp[i][j][t] >= 0) {
                        dp[i][j][t] += val;
                    }
                }
            }
        }
        return max(dp[n - 1][n - 1][2 * (n - 1)], 0);

=======

        int n = grid.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, -1)));
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); ++i) {
                for (int j = max(0, t - (n - 1)); j <= min(n - 1, t); ++j) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        dp[i][j][t] = -1;
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; ++pi) {
                        for (int pj = j - 1; pj <= j; ++pj) {
                            if (pi >= 0 && pj >= 0 && dp[pi][pj][t - 1] >= 0) {
                                dp[i][j][t] = max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int t = 0; t <= 2 * n - 2; ++t) {
            ans = max(ans, dp[n - 1][n - 1][t]);
        }
        return max(ans, 0);

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, INT_MIN));
        dp[0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            vector<vector<int>> dp2(n, vector<int>(n, INT_MIN));
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); i++) {
                for (int p = max(0, t - (n - 1)); p <= min(n - 1, t); p++) {
                    int j = t - i, q = t - p;
                    if (grid[i][j] == -1 || grid[p][q] == -1) {
                        continue;
                    }
                    int val = grid[i][j];
                    if (i != p) {
                        val += grid[p][q];
                    }
                    for (int pi = i - 1; pi <= i; pi++) {
                        for (int pj = p - 1; pj <= p; pj++) {
                            if (pi >= 0 && pj >= 0) {
                                dp2[i][p] = max(dp2[i][p], dp[pi][pj] + val);
                            }
                        }
                    }
                }
            }
            dp = dp2;
        }
        return max(0, dp[n - 1][n - 1]);

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, INT_MIN));
        dp[0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            vector<vector<int>> dp2(n, vector<int>(n, INT_MIN));
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); ++i) {
                for (int p = max(0, t - (n - 1)); p <= min(n - 1, t); ++p) {
                    int j = t - i, q = t - p;
                    if (grid[i][j] == -1 || grid[p][q] == -1) {
                        continue;
                    }
                    int val = grid[i][j];
                    if (i != p) val += grid[p][q];
                    for (int di = -1; di <= 0; ++di) {
                        for (int dp = -1; dp <= 0; ++dp) {
                            if (i + di >= 0 && p + dp >= 0) {
                                dp2[i][p] = max(dp2[i][p], dp[i + di][p + dp] + val);
                            }
                        }
                    }
                }
            }
            dp = dp2;
        }
        return max(0, dp[n - 1][n - 1]);

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        dp[0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            vector<vector<int>> dp2(n, vector<int>(n, -1));
            for (int i = max(0, t - (n - 1)); i <= min(n - 1, t); ++i) {
                for (int p = max(0, t - (n - 1)); p <= min(n - 1, t); ++p) {
                    int j = t - i, q = t - p;
                    if (grid[i][j] == -1 || grid[p][q] == -1) {
                        continue;
                    }
                    int val = grid[i][j];
                    if (i != p) {
                        val += grid[p][q];
                    }
                    for (int pi = i - 1; pi <= i; ++pi) {
                        for (int pj = p - 1; pj <= p; ++pj) {
                            if (pi >= 0 && pj >= 0) {
                                dp2[i][p] = max(dp2[i][p], dp[pi][pj] + val);
                            }
                        }
                    }
                }
            }
            dp = dp2;
        }
        return max(dp[n - 1][n - 1], 0);

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        dp[0][0] = grid[0][0];
        for (int k = 1; k < 2 * n - 1; ++k) {
            vector<vector<int>> dp2(n, vector<int>(n, -1));
            for (int i = max(0, k - n + 1); i <= min(n - 1, k); ++i) {
                for (int p = max(0, k - n + 1); p <= min(n - 1, k); ++p) {
                    int j = k - i, q = k - p;
                    if (grid[i][j] == -1 || grid[p][q] == -1) {
                        continue;
                    }
                    int val = grid[i][j];
                    if (i != p) {
                        val += grid[p][q];
                    }
                    for (int di = -1; di <= 0; ++di) {
                        for (int dp = -1; dp <= 0; ++dp) {
                            if (i + di >= 0 && p + dp >= 0) {
                                dp2[i][p] = max(dp2[i][p], dp[i + di][p + dp] + val);
                            }
                        }
                    }
                }
            }
            dp = dp2;
        }
        return max(dp[n - 1][n - 1], 0);

=======

        int n = grid.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, -1)));
        return max(0, dfs(grid, dp, 0, 0, 0));

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        dp[0][0] = grid[0][0];
        for (int t = 1; t < 2 * n - 1; ++t) {
            vector<vector<int>> dp2(n, vector<int>(n, 0));
            for (int i = max(0, t - n + 1); i <= min(n - 1, t); ++i) {
                for (int p = max(0, t - n + 1); p <= min(n - 1, t); ++p) {
                    int j = t - i, q = t - p;
                    if (grid[i][j] == -1 || grid[p][q] == -1) {
                        dp2[i][p] = -1;
                        continue;
                    }
                    if (i > 0) dp2[i][p] = max(dp2[i][p], dp[i - 1][p]);
                    if (p > 0) dp2[i][p] = max(dp2[i][p], dp[i][p - 1]);
                    if (i > 0 && p > 0) dp2[i][p] = max(dp2[i][p], dp[i - 1][p - 1]);
                    if (dp2[i][p] >= 0) dp2[i][p] += grid[i][j];
                    if (i != p) dp2[i][p] += grid[p][q];
                }
            }
            dp = dp2;
        }
        return max(dp[n - 1][n - 1], 0);
