Synthesizing 10/10 solutions

=======

        int n = plantTime.size();
        vector<int> bloomTime(n);
        for (int i = 0; i < n; ++i) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        sort(bloomTime.begin(), bloomTime.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, plantTime[i]) + growTime[i];
            if (ans < bloomTime[i]) {
                ans = bloomTime[i];
            }
        }
        return ans;

=======

        int n = plantTime.size();
        vector<int> bloomTime(n);
        for (int i = 0; i < n; ++i) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        sort(bloomTime.begin(), bloomTime.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, bloomTime[i] + i);
        }
        return ans;

=======

        int n = plantTime.size();
        vector<int> bloomTime(n);
        for (int i = 0; i < n; i++) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        sort(plantTime.begin(), plantTime.end());
        sort(bloomTime.begin(), bloomTime.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, plantTime[i] + bloomTime[n - 1 - i]);
        }
        return ans;

=======

        int n = plantTime.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.push_back({plantTime[i], growTime[i]});
        }
        sort(v.begin(), v.end());
        int day = 0;
        for (int i = 0; i < n; ++i) {
            day = max(day, v[i].first) + v[i].second;
        }
        return day;

=======

        int n = plantTime.size();
        vector<int> v(n);
        for (int i = 0; i < n; ++i) {
            v[i] = plantTime[i] + growTime[i];
        }
        sort(v.begin(), v.end());
        int res = 0;
        for (int i = 0; i < n; ++i) {
            res = max(res, v[i] + i);
        }
        return res;

=======

        int n = plantTime.size();
        vector<int> bloom(n);
        for (int i = 0; i < n; i++) {
            bloom[i] = plantTime[i] + growTime[i];
        }
        sort(plantTime.begin(), plantTime.end());
        sort(bloom.begin(), bloom.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, plantTime[i] + bloom[n - i - 1]);
        }
        return ans;

=======

        int n = plantTime.size();
        vector<pair<int, int>> v(n);
        for (int i = 0; i < n; i++) {
            v[i] = {plantTime[i], growTime[i]};
        }
        sort(v.begin(), v.end());
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, v[i].first) + v[i].second;
        }
        return res;

=======

        int n = plantTime.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++){
            v.push_back({plantTime[i],growTime[i]});
        }
        sort(v.begin(),v.end());
        int ans = 0;
        for(int i=0;i<n;i++){
            ans = max(ans + v[i].first, v[i].second);
        }
        return ans;

=======

        int n = plantTime.size();
        if (n == 1) return plantTime[0] + growTime[0];
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.push_back({plantTime[i], growTime[i]});
        }
        sort(v.begin(), v.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, v[i].first + v[i].second);
            if (i < n - 1) {
                ans = max(ans, v[i].first + v[i + 1].first + v[i].second);
            }
        }
        return ans;

=======

        int n = plantTime.size();
        vector<int> bloom(n);
        vector<int> grow(n);
        for (int i = 0; i < n; i++) {
            bloom[i] = plantTime[i] + growTime[i];
            grow[i] = growTime[i];
        }
        sort(bloom.begin(), bloom.end());
        sort(grow.begin(), grow.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, bloom[i] + grow[n - 1 - i]);
        }
        return ans;
