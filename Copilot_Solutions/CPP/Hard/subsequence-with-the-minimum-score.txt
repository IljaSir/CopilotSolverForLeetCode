Synthesizing 10/10 solutions

=======

        int n = s.size();
        int m = t.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (s[i-1] == t[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (dp[i][j] == dp[i-1][j-1] + 1) {
                    res = max(res, dp[i-1][j-1] + 1);
                }
            }
        }
        return m - res;

=======

        int n = s.size(), m = t.size();
        int i = 0, j = 0;
        int res = 0;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                int tmp1 = i, tmp2 = j;
                while (i < n && j < m && s[i] == t[j]) {
                    ++i; ++j;
                }
                res += max(0, i - tmp1 - 1);
            } else {
                ++i;
            }
        }
        return res;

=======

        int n = s.length();
        int m = t.length();
        int i = 0, j = 0;
        int res = 0;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                int i0 = i;
                int j0 = j;
                while (i < n && s[i] == s[i0]) {
                    i++;
                }
                while (j < m && t[j] == t[j0]) {
                    j++;
                }
                res += max(0, j - j0 - i + i0);
            } else {
                i++;
            }
        }
        return res;

=======

        int ans = 0;
        vector<int> cnt(26, 0);
        for (auto c : s) {
            cnt[c - 'a']++;
        }
        for (auto c : t) {
            if (cnt[c - 'a'] > 0) {
                cnt[c - 'a']--;
            } else {
                ans++;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> l(n), r(n);
        l[0] = s[0] != t[0];
        r[n - 1] = s[n - 1] != t[n - 1];
        for (int i = 1; i < n; ++i) {
            l[i] = l[i - 1] + (s[i] != t[i]);
            r[n - i - 1] = r[n - i] + (s[n - i - 1] != t[n - i - 1]);
        }
        int ans = l[n - 1];
        for (int i = 0; i < n - 1; ++i) {
            ans = min(ans, l[i] + r[i + 1]);
        }
        return ans;

=======

        int n = s.size();
        int m = t.size();
        int ans = 0;
        int i = 0;
        int j = 0;
        int left = -1;
        int right = -1;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                if (left == -1) {
                    left = i;
                }
                right = i;
                ++i;
                ++j;
            } else {
                ++i;
            }
        }
        if (j == m) {
            ans = right - left + 1;
        }
        return ans;

=======

        int n = s.length();
        int m = t.length();
        int i = 0, j = 0;
        int ans = m;
        while(i < n && j < m) {
            if (s[i] == t[j]) {
                ans = min(ans, m - j);
                j++;
            }
            i++;
        }
        return ans;

=======

        int n = s.size();
        int m = t.size();
        vector<int> sc(n, 0);
        for (int i = 0; i < n; ++i) {
            if (s[i] != t[i]) {
                sc[i] = 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (sc[i] == 0) {
                continue;
            }
            int j = i;
            while (j < n && sc[j] == 1) {
                ++j;
            }
            ans = max(ans, j - i);
            i = j;
        }
        return ans;

=======

        int n = s.size();
        int m = t.size();
        vector<int> v(n, 0);
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (j < m && s[i] == t[j]) {
                v[i] = 1;
                ++j;
            }
        }
        int ans = 0;
        int l = 0, r = m - 1;
        while (l < m && t[l] != s[0]) ++l;
        while (r >= 0 && t[r] != s[n - 1]) --r;
        ans = max(ans, r - l + 1);
        for (int i = 1; i < n; ++i) {
            if (v[i] == 0) {
                ans = max(ans, i);
                continue;
            }
            while (l < m && t[l] != s[i]) ++l;
            while (r >= 0 && t[r] != s[i]) --r;
            ans = max(ans, r - l + 1);
        }
        return ans;

=======

        int n = s.size(), m = t.size();
        vector<int> dp(n + 1, 0);
        for (int i = 0; i < m; ++i) {
            int pre = 0;
            for (int j = 0; j < n; ++j) {
                int temp = dp[j + 1];
                if (s[j] == t[i]) {
                    dp[j + 1] = max(dp[j + 1], pre + 1);
                }
                pre = max(pre, temp);
            }
        }
        return n - *max_element(dp.begin(), dp.end());
