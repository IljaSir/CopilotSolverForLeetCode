Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> index(n);
        for (int i = 0; i < n; ++i) {
            index[i] = i;
        }
        sort(index.begin(), index.end(), [&](int a, int b) { return arr[a] < arr[b]; });
        for (int i = 0; i < n; ++i) {
            int a = index[i];
            for (int j = a + 1; j <= min(a + d, n - 1); ++j) {
                if (arr[j] >= arr[a]) {
                    break;
                }
                dp[a] = max(dp[a], dp[j] + 1);
            }
            for (int j = a - 1; j >= max(a - d, 0); --j) {
                if (arr[j] >= arr[a]) {
                    break;
                }
                dp[a] = max(dp[a], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> order(n);
        for (int i = 0; i < n; ++i) {
            order[i] = i;
        }
        sort(order.begin(), order.end(), [&arr](int a, int b) {
            return arr[a] < arr[b];
        });
        for (int i = 0; i < n; ++i) {
            int index = order[i];
            for (int j = index - 1; j >= max(0, index - d); --j) {
                if (arr[j] >= arr[index]) {
                    break;
                }
                dp[index] = max(dp[index], dp[j] + 1);
            }
            for (int j = index + 1; j <= min(n - 1, index + d); ++j) {
                if (arr[j] >= arr[index]) {
                    break;
                }
                dp[index] = max(dp[index], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> index(n);
        for (int i = 0; i < n; i++) {
            index[i] = i;
        }
        sort(index.begin(), index.end(), [&](int i, int j) {
            return arr[i] < arr[j];
        });
        for (int i = 0; i < n; i++) {
            int idx = index[i];
            for (int j = idx - 1; j >= max(0, idx - d); j--) {
                if (arr[j] >= arr[idx]) {
                    break;
                }
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
            for (int j = idx + 1; j <= min(n - 1, idx + d); j++) {
                if (arr[j] >= arr[idx]) {
                    break;
                }
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> order(n);
        iota(order.begin(), order.end(), 0);
        sort(order.begin(), order.end(), [&](int i, int j) {
            return arr[i] < arr[j];
        });
        for (int i : order) {
            for (int j = i + 1; j <= min(i + d, n - 1) && arr[j] < arr[i]; ++j) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
            for (int j = i - 1; j >= max(i - d, 0) && arr[j] < arr[i]; --j) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> order(n);
        iota(order.begin(), order.end(), 0);
        sort(order.begin(), order.end(), [&](int a, int b) {
            return arr[a] < arr[b];
        });
        int ans = 1;
        for (int i = 0; i < n; i++) {
            int idx = order[i];
            for (int j = idx - 1; j >= max(0, idx - d); j--) {
                if (arr[j] >= arr[idx]) break;
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
            for (int j = idx + 1; j <= min(n - 1, idx + d); j++) {
                if (arr[j] >= arr[idx]) break;
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
            ans = max(ans, dp[idx]);
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> index(n);
        for (int i = 0; i < n; i++) index[i] = i;
        sort(index.begin(), index.end(), [&](int i, int j){ return arr[i] < arr[j]; });
        for (int i = 0; i < n; i++) {
            int idx = index[i];
            for (int j = idx - 1; j >= max(0, idx - d); j--) {
                if (arr[j] >= arr[idx]) break;
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
            for (int j = idx + 1; j <= min(n - 1, idx + d); j++) {
                if (arr[j] >= arr[idx]) break;
                dp[idx] = max(dp[idx], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> sorted;
        for (int i = 0; i < n; ++i) {
            sorted.push_back(i);
        }
        sort(sorted.begin(), sorted.end(), [&arr](int i, int j) { return arr[i] < arr[j]; });
        for (auto &i: sorted) {
            for (int j = i + 1; j <= min(i + d, n - 1); ++j) {
                if (arr[j] >= arr[i]) {
                    break;
                }
                dp[i] = max(dp[i], dp[j] + 1);
            }
            for (int j = i - 1; j >= max(i - d, 0); --j) {
                if (arr[j] >= arr[i]) {
                    break;
                }
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        int ans = 0;
        for (auto &i: dp) {
            ans = max(ans, i);
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        vector<int> v(n);
        iota(v.begin(), v.end(), 0);
        sort(v.begin(), v.end(), [&](int a, int b) { return arr[a] < arr[b]; });
        for (int i = 0; i < n; ++i) {
            int x = v[i];
            for (int j = x + 1; j <= x + d && j < n; ++j) {
                if (arr[j] >= arr[x]) break;
                dp[j] = max(dp[j], dp[x] + 1);
            }
            for (int j = x - 1; j >= x - d && j >= 0; --j) {
                if (arr[j] >= arr[x]) break;
                dp[j] = max(dp[j], dp[x] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int N = arr.size();
        vector<int> dp(N, 1);
        vector<pair<int, int>> v;
        for (int i = 0; i < N; i++) {
            v.push_back({arr[i], i});
        }
        sort(v.begin(), v.end());
        for (auto p : v) {
            int i = p.second;
            for (int j = i - 1; j >= max(0, i - d); j--) {
                if (arr[j] >= arr[i]) break;
                dp[i] = max(dp[i], dp[j] + 1);
            }
            for (int j = i + 1; j <= min(N - 1, i + d); j++) {
                if (arr[j] >= arr[i]) break;
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = arr.size();
        int dp[n];
        for (int i = 0; i < n; i++) dp[i] = 1;
        vector<int> index;
        for (int i = 0; i < n; i++) {
            index.push_back(i);
        }
        sort(index.begin(), index.end(), [&arr](int i, int j) { return arr[i] < arr[j]; });
        for (int i = 0; i < n; i++) {
            int j = index[i];
            for (int k = j + 1; k <= min(j + d, n - 1); k++) {
                if (arr[k] >= arr[j]) break;
                dp[j] = max(dp[j], dp[k] + 1);
            }
            for (int k = j - 1; k >= max(j - d, 0); k--) {
                if (arr[k] >= arr[j]) break;
                dp[j] = max(dp[j], dp[k] + 1);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) ans = max(ans, dp[i]);
        return ans;
