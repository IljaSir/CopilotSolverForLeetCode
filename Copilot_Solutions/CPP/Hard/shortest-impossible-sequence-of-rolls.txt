Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = rolls.size();
        vector<int> dp(n + 1, n + 1);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int minv = n + 1;
            for (int j = i; j >= max(0, i - k + 1); --j) {
                minv = min(minv, rolls[j]);
                dp[i + 1] = min(dp[i + 1], dp[j] + minv);
            }
        }
        return dp[n];

=======

        int n = rolls.size();
        vector<int> dp(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1] + rolls[i-1];
        }
        int ans = n;
        for (int i = 0; i <= n-k; ++i) {
            ans = min(ans, n - (dp[i+k] - dp[i]));
        }
        return ans;

=======

        int n = rolls.size();
        int dp[n+1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i-1] + 1;
            int j = i - k;
            if (j >= 0 && rolls[i-1] == rolls[j]) {
                dp[i] = min(dp[i], dp[j] + 1);
            }
        }
        return dp[n];

=======

        int n = rolls.size();
        vector<int> dp(n + 1);
        vector<int> last(k + 1);
        int res = n + 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1] + 1;
            if (i >= k) {
                dp[i] = min(dp[i], dp[last[rolls[i - k]]] + 1);
            }
            last[rolls[i - 1]] = i;
            if (i >= k) {
                res = min(res, dp[i] - dp[i - k]);
            }
        }
        return res == n + 1 ? -1 : res;

=======

        int n = rolls.size();
        vector<int> cnt(k + 1, 0);
        int res = n + 1;
        int l = 0;
        for (int r = 0; r < n; ++r) {
            cnt[rolls[r]]++;
            while (cnt[rolls[r]] > 1) {
                cnt[rolls[l]]--;
                l++;
            }
            if (r - l + 1 == k) {
                res = min(res, r - l + 1);
            }
        }
        return res == n + 1 ? -1 : res;

=======

        int n = rolls.size();
        int res = n;
        vector<int> count(k+1, 0);
        for (int i = 0; i < n; i++) {
            count[rolls[i]]++;
            if (i >= k) {
                count[rolls[i-k]]--;
            }
            if (i >= k-1) {
                int max_count = 0;
                for (int j = 1; j <= k; j++) {
                    max_count = max(max_count, count[j]);
                }
                res = min(res, max_count + k - 1);
            }
        }
        return res;

=======

        int n = rolls.size();
        vector<int> dp(n, INT_MAX);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            int j = i - k + 1;
            if (j >= 0) {
                dp[i] = min(dp[i], dp[j] + 1);
            }
            for (int j = i + 1; j < n && rolls[j] == rolls[i]; j++) {
                dp[j] = dp[i];
            }
        }
        return dp[n - 1];

=======

        int n = rolls.size();
        vector<int> dp(1+n, 0);
        vector<int> cnt(k+1, 0);
        for (int i = 0; i < n; i++) {
            cnt[rolls[i]]++;
            dp[i+1] = dp[i] + 1;
            if (i >= k) {
                cnt[rolls[i-k]]--;
            }
            int j = 0;
            for (j = 1; j <= k; j++) {
                if (cnt[j] == 0) {
                    break;
                }
            }
            if (j > k) {
                dp[i+1] = min(dp[i+1], dp[i-k+1] + 1);
            }
        }
        return dp[n];
