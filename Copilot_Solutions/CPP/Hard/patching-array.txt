Synthesizing 10/10 solutions

=======

        int res = 0;
        long miss = 1;
        int i = 0;
        while (miss <= n) {
            if (i < nums.size() && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                res++;
            }
        }
        return res;

=======

        long miss = 1;
        int i = 0;
        int count = 0;
        while (miss <= n) {
            if (i < nums.size() && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        long long x = 1;
        int length = nums.size(), index = 0;
        while (x <= n) {
            if (index < length && nums[index] <= x) {
                x += nums[index];
                index++;
            } else {
                x *= 2;
                ans++;
            }
        }
        return ans;

=======

        long long miss = 1;
        int i = 0;
        int added = 0;
        while (miss <= n) {
            if (i < nums.size() && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                ++added;
            }
        }
        return added;

=======

        int i = 0, patch = 0;
        long long x = 1;
        while (x <= n) {
            if (i < nums.size() && nums[i] <= x) {
                x += nums[i++];
            } else {
                x += x;
                patch++;
            }
        }
        return patch;

=======

        int i = 0;
        long long sum = 0;
        int count = 0;
        while (sum < n) {
            if (i < nums.size() && nums[i] <= sum + 1) {
                sum += nums[i];
                i++;
            } else {
                sum += sum + 1;
                count++;
            }
        }
        return count;

=======

        int i = 0;
        long long sum = 0;
        int cnt = 0;
        while (sum < n) {
            if (i < nums.size() && nums[i] <= sum + 1) {
                sum += nums[i];
                i ++;
            } else {
                sum += sum + 1;
                cnt ++;
            }
        }
        return cnt;

=======

        int i = 0;
        int patches = 0;
        long long max = 0;
        while (max < n) {
            if (i < nums.size() && nums[i] <= max + 1) {
                max += nums[i];
                i++;
            } else {
                max += max + 1;
                patches++;
            }
        }
        return patches;

=======

        long long sum = 0;
        int count = 0;
        int i = 0;
        while(sum < n)
        {
            if(i < nums.size() && nums[i] <= sum + 1)
            {
                sum += nums[i++];
            }
            else
            {
                sum += sum + 1;
                count++;
            }
        }
        return count;

=======

        int i=0;
        long long sum=0;
        int ans=0;
        while(sum<n){
            if(i<nums.size() && sum+1>=nums[i]){
                sum+=nums[i];
                i++;
            }else{
                ans++;
                sum+=sum+1;
            }
        }
        return ans;
