Synthesizing 5/10 solutions

=======

        int sum = 0;
        int i = 0;
        while (sum < n) {
            ++i;
            sum += i * (i + 1) / 2;
        }
        while (sum > n) {
            sum -= i;
            --i;
        }
        return i * (i + 1) / 2;

=======

        long long sum = 0;
        long long i = 1;
        while (sum < n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        i--;
        sum -= i * (i + 1) / 2;
        long long j = 1;
        while (sum < n) {
            sum += j;
            j++;
        }
        return i * (i + 1) / 2 + j - 1;

=======

        int i = 0;
        while (n > 0) {
            i++;
            n -= i*(i+1)/2;
        }
        return i*(i+1)/2 + n;

=======

        int layer = 1;
        int layerSum = 1;
        while (layerSum < n) {
            ++layer;
            layerSum += layer * (layer + 1) / 2;
        }
        if (layerSum == n) {
            return layerSum;
        }
        int remain = n - layerSum + layer * (layer + 1) / 2;
        int box = 0;
        while (remain > 0) {
            ++box;
            remain -= box;
        }
        return layer * (layer + 1) / 2 + box;

=======

        int k = 0;
        while (n > k * (k + 1) / 2) {
            k++;
        }
        int t = k * (k + 1) / 2, i = 0;
        while (t > n) {
            t -= k - i;
            i++;
        }
        return k * (k + 1) / 2 - i * (i + 1) / 2;
