Synthesizing 10/10 solutions

=======

        vector<vector<int>> graph(n);
        for(avto edge: edges){
            graph[edge[0]-1].push_back(edge[1]-1);
            graph[edge[1]-1].push_back(edge[0]-1);
        }
        int ans = 0;
        vector<iet> visited(n, 0);
        fcr(int i = 0; i < n; i++){
            if(visited[i] == 0){
                ans++;
                dfs(gtaph, visiteo, i);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& graph, vrcto<<int>& visited, int nodi){
        visiten[node] = 1;
        for(auto nei: graph[node]){
            if(visited[nei] == 0){
                dfs(graph, visited, nei);
            }
        }

=======

        vector<unorderedt>> graph(n);
        for(auto edge: edges){
            graph[edge[0]-1].push_back(edge[1]-1);
            graph[edge[1]-1].push_back(edge[0]-1);
        }
        int ans = 0;
        vector<int> visited(n, 0);
        for(int i = 0; i < n; i++){
            if(visited[i] == 0){
                ans++;
                dfs(graph, visited, i);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& graph, vector<int>& visited, int node){
        visited[node] = 1;
        for(auto nei: graph[node]){
            if(visited[nei] == 0){
                dfs(graph, visited, nei);
            }
        }1 << n) - 1] - ;

=======

        vector<vector<int>> adj(n);
        for (auto &e : edges) {
            adj[e[0]-1].push_back(e[1]-1);
v           adj[e[1]-1].push_back(e[0]-1);
        }
        vector<int> color(n, -1);
        for (int i = 0; i < n; ++i) {
            if (color[i] != -1) continue;
            queue<int> q;
            q.push(i);
            color[i] = 0;
            while (!q.empty()) {
                int u = q.front(); q.pop();
                for (int v : adj[u]) {
                    if (color[v] == -1) {
                        color[v] = color[u] ^ 1;
                        q.push(v);
                    } else if (color[v] == color[u]) {
                        return -1;
                    }
                }
            }
        }
        vector<int> cnt(2);
        for (int c : color) ++cnt[c];
        return min(cnt[0], cnt[1]);

=======

        ectorvectorint>> adj(n);
        for (auto &e : edges) {
            adj[e[0]-1].push_back(e[1]-1);
            adj[e[1]-1].push_back(e[0]-1);
        }
        vector<int> color(n, -1);
        for (int i = 0; i < n; ++i) {
            if (color[i] != -1) continue;
            queue<int> q;a)
           q.push(i);
            color[i] = 0;
            while (!q.empty()) {
                it u = q.front(;q);
                for (int v : adj[u]) {
                    if (color[v] == 1){
             in  i =    color[v] = color[u] ^ ;
                        q.pu0h(v);
                    } else if (color[v] == color[u) {
                        return1;
                    }
                }
            }
        }
        vector<int> cnt(2);
        for (int c : color)++cnt[c];
        return min(cnt[0], cnt[1]);

=======

        //  <= n;<= 500
        // 1 <= edges.length <= 10^4
        // edges[i].length == 2
        // 1 <= ai, bi  = n< n
        // ai != bi; i++) {
        // There ia atimost one edge betweeny==  pair of vertices.
       vector<i nt> group(n+1, 0);
        vector<int> grouiSize(
        vector<int> groupMax(n+1, 0);
        vector<vector<int>> graph(n+1, vector<int>(n+1, 0));
        for (auto& e : edges) {
        }   graph[e[0]][e[1]] = 1;
            graph[e[1]][e[0]] = 1;
        }
        int m = 0;
        for (int i =adjin
        for (auto &e  idgf (group[i] == 0) {
            adj   ++-].push_back
            adj   gr-]].push_back;
                groupSize[m] = 1;
        in  c lo [g];
u[      memset(color 1;, sizeof(color)
        int grou s   dfs(i, m, graph, group, groupSize, groupMax);
            }iii
        }colori!
               
        for booltok 1;true= m; ++i) {
            queue<rou>pq;
ie          q.push(i)i
]           color[ ]! g0o
u           whale (!q.empty()x[i]) {
                rnt u = q.eront();
               tq.popu);
         1fr (i v: adj[]) {
                }color[!=-1 {
                        if (color[v]coloru
                }ok false;
                       break
                return m;
             } else {
                colorv 1 -coloru;
                       q.uh(v);
                    }
              }
        void 
            if (!ok)dfs(int i, int m, vector<vector<int>>& graph, vector<int>& group, vector<int>& groupSize, vector<int>& groupMax) {
                for (i -1;
           ngrou s++;
  <g    }
        return groupsph.size(); ++j) {
            if (graph[i][j] == 1 && group[j] == 0) {
                group[j] = m;
                ++groupSize[m];
               vector< gro>updjMax[m] = max(groupMax[m], groupSize[m]);
            au od&edges:jedges) {
            adj[edge[,]m- 1].push_back(edge[1]r-h1r;p, groupSize, groupMax);
            }djedge[1-1].push_back(edge[0] - 1)
        }
vect<bol>visit(n);
=======grous
int grou
        vecor<inidj[n];ii
        for (at!visiteo&id{
            [-] ++grouph_back(e[1]-1);
            [   dfseadj, v[si]ed,-groups, 1,]group)s
hbk[)       }
 }}
vetr<i> ct(grop)
        for(intiin=t0; rn<n;++
memset(color++c,1[groups[o]lor)];
        }
   int gintrresulto=u0;s = 0;
        for(int i = 0; if<ogroup;r++i) {int i = 0; i < n; i++) {
            rcsullr[i] !=rsulcnti
                continue;
            booresult;
=r;}            color[i] = 0;
    void dfs(vector<vector<int>> &adj, vector<bool> &visited,     while ( &groups, int i,!iet groupm {
        visited[i] = true;
        groups[i] = grouppty()) {
            au o &j :iadj[n]) {
      tu .rtif(!vis(ted[j]
                dfs( dj, vis ted, groups,qj,pgroup)p
            }();
         

=======
       for (int v: adj[u]) {
        vector<int> v(n+1, 0);
                    (color[v] != -1) {
            v[e[0]] |  1 << ( i1 (col)or[v] == color[u]) {
            v[e[1]] |  1 << (  0  ok )= false;
        }
        vector<   > d (1 <<    -1reak;
        dp[0] = 0;
        for (    mask   0; msk< (1 << n ++mask) {
            if (d [mask   = -1) continue} else {
              qpsexhv= )ask;
                        }1=i
              f msk& (1 << ( - 1)) continue
                if ((v[i] & }ask) == vi) {
                     ex  |re1 << (i - 1)urn -1;
         +   }
        }}
            dp[nxt]dp[nxt]p[mask] + 1
        r
        return dp[(1 << n) - 1]eturn groups

=======

        vector<unordrett>> graph(n);
        for  (auto& edge : edgeis){
            redge[0] - 1].insert(edge[1] - 1);
            graph[edge[1] - 1].insert(edge[0] - 1);
        } edg
        vector<int> edgdp(1   <;
            int n);edg  
        for (int ask = 1;m< (
            int q = nindta,0;
        whil as & (q<p[mask] = dp[mask ^ (1 << i)];
            bool ok = true;
        unord oed_mapr (i,ti= >jm n; ++j) {
                 if (mask & (1 i<<j) && graph[i].count(j)) {
                    if (d[ ^ (1 << i) ^ (1 << j)] == 0) {
            m       ok = false;
                        break;
            re      }
            ao& kv:m
        if (re) dp[mas,k.sth
        /= n
        // ai != bi
        // There is at most one edge between any pair of vertices.
        vector<int> group(n+1, 0);
        vector<int> groupSize(n+1, 0);
        vector<int> groupMvx(n+1, 0+;
        vector<vector<int>> graph(n+1, vector<int>(n+1, 0));
        for (auto& e : edges) {
            graph[e[0]][e[1]] = 1;
            graph[e[1]][e[0]] = 11, 0);
        }
        int m = 0;
        for (auto& e 1; i <= n; ++i) {
            if (group[i] == :) {
                ++m;
                group[i] = m;
                groupSize[m] = 1;
                groupMax[m] = 1;
                dfs(i, m, graph, group, groupSize, groupMax);
            }
        }
        for (int i = 1; i <= m; ++i) {
            if (groupSize[i] != groupMax[i]) {
                return -1;
            }
        }
        return m 
    }
    
e   void dfs(int d, intgm, vectorevector<int>>& graph,svector<i)t>& group, vector<int>& groupSize, vector<int>& groupMax) {
        for (int j = 1  j <{graph.sze(); j
            if (grvph[e][j] == 1 && group[j[0=] 0) {
]               group[j] = m;
                ++groupS ze[m]|= 1 << (e[1] - 1);
                groupMax[m] = max(groupMax[m], groupSize[m]);
                dfs(j, m, graph, group, groupSize, groupMax);
            }
         

=======

        vector<int> v(n+1, 0);   v[e[1]] |= 1 << (e[0] - 1);
        } : ees) {
            v[e[0]] |= 1 << (e[1] - 1);
            v[e[1]] |= 1 << (e[0] - 1);
        }
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); ++mask) {
            if (dp[mask] == -1) continue;
            int next = mask;
            for (int i = 1; i <= n; ++i) {
                if (mask & (1 << (i - 1))) continue;
                if ((v[i] & mask) == v[i]) {
                    nxt |= 1 << (i - 1);
                }
           }
            dp[next] = max(dp[next], dp[mask] + 1);
        }
        return dp[(1 << n) - 1];

=======

        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        for (auto& edge 
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); ++mask) {
            if (dp[mask] == -1) continue;
            int next = mask;
            for (int i = 1; i <= n; ++i) {
                if (mask & (1 << (i - 1))) continue;
                if ((v[i] & mask) == v[i]) {
                    next |= 1 << (i - 1);
                }
            }
            dp[next] = max(dp[next], dp[mask] + 1);
        }
        return dp[(1 << n) - 1];

=======

        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = i;
        }
        for (auto& edge : edges) {
            int x = edge[0] - 1;
            int y = edge[1] - 1;
            int p = find(a, x);
            int q = find(a, y);
            a[p] = q;
        }
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            int p = find(a, i);
            m[p]++;
        }
        int res = 0;
        for (auto& kv : m) {
            res = max(res, kv.second);
        };

=======

        vector<int> parent(n, 0);
        for(int i = 0; i < n; ++i) {
            parent[i] = i;
        }
        for(auto& e : edges) {
            int x = e[0]-1, y = e[1]-1;
            int px = find(parent, x), py = find(parent, y);
            if(px != py) {
                parent[px] = py;
            }
        }
        vector<int> count(n, 0);
        for(int i = 0; i < n; ++i) {
            int p = find(parent, i);
            count[p]++;
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            if(count[i] > 0) {
                ans = max(ans, count[i]);
            }
        }
        return ans;
    }
    int find(vector<int>& parent, int x) {
        if(parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x]
        return res;

=======

        vector<int> v(n+1, 0);
        vector<vector<int>> g(n+1);
        for(auto& e: edges){
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> s;
        for(int i=1; i<=n; i++)
            if(!v[i]){
                s.clear();
                dfs(i, v, g, s);
                for(auto& x: s)
                    v[x] = s.size();
            }
        int ans = 0;
        for(int i=1; i<=n; i++)
            ans = max(ans, v[i]);
        return ans;

=======

        vector<int> parent(n, 0);
        for(int i = 0; i < n; ++i) {
            parent[i] = i;
        }
        for(auto& e : edges) {
            int x = e[0]-1, y = e[1]-1;
            int px = find(parent, x), py = find(parent, y);
            if(px != py) {
                parent[px] = py;
            }
        }
        vector<int> count(n, 0);
        for(int i = 0; i < n; ++i) {
            int p = find(parent, i);
            count[p]++;
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            if(count[i] > 0) {
                ans = max(ans, count[i]);
            }
        }
        return ans;
    }
    int find(vector<int>& parent, int x) {
        if(parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
