Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s[i + k] == s[j + k]) {
                ++k;
            } else if (s[i + k] < s[j + k]) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substr(i);

=======

        int n = s.size();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s[i + k] == s[j + k]) {
                k++;
            } else if (s[i + k] < s[j + k]) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substr(i);

=======

        int n = s.size();
        int i = 0, j = 1, k = 0;
        while (i + k < n && j + k < n) {
            if (s[i + k] == s[j + k]) {
                k++;
            } else if (s[i + k] < s[j + k]) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substr(i);

=======

        int n = s.size();
        int i = 0, j = 1, k = 0;
        while (i + k < n && j + k < n) {
            if (s[i + k] == s[j + k]) {
                k++;
            } else {
                if (s[i + k] > s[j + k]) {
                    j = j + k + 1;
                } else {
                    i = max(i + k + 1, j);
                    j = i + 1;
                }
                k = 0;
            }
        }
        return s.substr(i);

=======

        int n = s.length();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s[i + k] == s[j + k]) {
                ++k;
            } else if (s[i + k] < s[j + k]) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substr(i);

=======

        const int n = s.size();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s[i + k] == s[j + k]) {
                ++k;
            } else if (s[i + k] < s[j + k]) {
                i = j;
                ++j;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substr(i);

=======

        int n = s.size();
        int i = 0, j = 1;
        while (j < n) {
            if (s[i] == s[j]) {
                i++;
                j++;
            } else if (s[i] < s[j]) {
                i = j;
                j++;
            } else {
                j++;
            }
        }
        return s.substr(i);

=======

        string ans = "";
        int n = s.size();
        int i = 0;
        while(i < n) {
            int j = i + 1, k = i;
            while(j < n && s[k] <= s[j]) {
                if(s[k] < s[j]) k = i;
                else ++k;
                ++j;
            }
            while(i <= k) {
                ans.push_back(s[i++]);
            }
        }
        return ans;

=======

        int len = s.size();
        int start = 0;
        int end = 1;
        int k = 0;
        while(end + k < len) {
            if (s[start + k] == s[end + k]) {
                k++;
            } else if (s[start + k] < s[end + k]) {
                start = end;
                end = start + 1;
                k = 0;
            } else {
                end += k + 1;
                k = 0;
            }
        }
        return s.substr(start);
