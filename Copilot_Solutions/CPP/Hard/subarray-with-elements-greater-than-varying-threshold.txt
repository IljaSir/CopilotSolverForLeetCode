Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int l = 1;
        int r = n;
        int ans = -1;
        while (l <= r) {
            int mid = (l + r) / 2;
            bool ok = false;
            long long sum = 0;
            for (int i = 0; i < mid; i++) {
                sum += nums[i];
            }
            if (sum > 1LL * mid * threshold) {
                ok = true;
            }
            for (int i = mid; i < n; i++) {
                sum += nums[i];
                sum -= nums[i - mid];
                if (sum > 1LL * mid * threshold) {
                    ok = true;
                    break;
                }
            }
            if (ok) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int l = 1, r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            int sum = 0;
            for (int i = 0; i < m; ++i) {
                sum += nums[i];
            }
            if (sum > threshold) {
                r = m;
                continue;
            }
            for (int i = m; i < n; ++i) {
                sum -= nums[i - m];
                sum += nums[i];
                if (sum > threshold) {
                    r = m;
                    break;
                }
            }
            if (sum <= threshold) {
                l = m + 1;
            }
        }
        return l > n ? -1 : l;

=======

        int l = 0, r = nums.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (valid(nums, m, threshold)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return (l == nums.size()) ? -1 : l;
    }
    
    bool valid(vector<int>& nums, int k, int threshold) {
        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > k * threshold) {
            return true;
        }
        for (int i = k; i < nums.size(); i++) {
            sum += nums[i] - nums[i - k];
            if (sum > k * threshold) {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if (sum <= threshold) return n;
        int left = 0, right = 0;
        sum = 0;
        while (right < n) {
            sum += nums[right];
            if (sum * n <= threshold * (right - left + 1)) {
                sum -= nums[left];
                left++;
            }
            right++;
        }
        return right - left;

=======

        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if(sum <= threshold) return -1;
        int k = 1;
        while(k <= n) {
            sum = 0;
            for(int i = 0; i < k; i++) {
                sum += nums[i];
            }
            if(sum > threshold) return k;
            for(int i = k; i < n; i++) {
                sum -= nums[i-k];
                sum += nums[i];
                if(sum > threshold) return k;
            }
            k++;
        }
        return -1;

=======

        int n = nums.size();
        int l = 1, r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (isValid(nums, mid, threshold)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return isValid(nums, l, threshold) ? l : -1;

=======

        int l = 0, r = nums.size();
        while (l < r) {
            int m = (l + r) / 2;
            if (validSubarraySize(nums, threshold, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l == nums.size() ? -1 : l;
    }
    bool validSubarraySize(vector<int>& nums, int threshold, int k) {
        long long sum = 0;
        for (int i = 0; i < k; ++i) {
            sum += nums[i];
        }
        if (sum > threshold * k) {
            return true;
        }
        for (int i = k; i < nums.size(); ++i) {
            sum += nums[i];
            sum -= nums[i - k];
            if (sum > threshold * k) {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > max) max = nums[i];
        }
        if (max <= threshold) return n;
        int min = 1;
        int max1 = n;
        while (min < max1) {
            int mid = (min + max1)/2;
            if (check(nums, threshold, mid)) {
                max1 = mid;
            } else {
                min = mid + 1;
            }
        }
        if (check(nums, threshold, min)) return min;
        return -1;
    }
    
    bool check(vector<int>& nums, int threshold, int k) {
        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > threshold * k) return true;
        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            if (sum > threshold * k) return true;
        }
        return false;

=======

        int i = 0, j = 0, sum = 0, n = nums.size(), k = 0;
        while (j < n) {
            sum += nums[j++];
            if (j - i > k) {
                sum -= nums[i++];
            }
            if (sum * k > threshold * (j - i)) {
                k = j - i;
            }
        }
        return k;
