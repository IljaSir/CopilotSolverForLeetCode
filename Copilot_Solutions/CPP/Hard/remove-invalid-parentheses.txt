Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int l = 0, r = 0;
        for (char c : s) {
            if (c == '(') l++;
            else if (c == ')') {
                if (l == 0) r++;
                else l--;
            }
        }
        // cout << l << " " << r << endl;
        vector<string> res;
        dfs(s, 0, l, r, res);
        return res;
    }
    void dfs(string s, int start, int l, int r, vector<string>& res) {
        if (l == 0 && r == 0) {
            if (isValid(s)) res.push_back(s);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (i > start && s[i] == s[i-1]) continue;
            if (r > 0 && s[i] == ')') {
                dfs(s.substr(0, i) + s.substr(i+1), i, l, r-1, res);
            } else if (l > 0 && s[i] == '(') {
                dfs(s.substr(0, i) + s.substr(i+1), i, l-1, r, res);
            }
        }
    }
    bool isValid(string s) {
        int cnt = 0;
        for (char c : s) {
            if (c == '(') cnt++;
            else if (c == ')') {
                if (cnt == 0) return false;
                cnt--;
            }
        }
        return cnt == 0;

=======

        int left = 0;
        int right = 0;
        for (char ch : s) {
            if (ch == '(') {
                ++left;
            } else if (ch == ')') {
                if (left > 0) {
                    --left;
                } else {
                    ++right;
                }
            }
        }
        vector<string> ans;
        dfs(s, 0, left, right, ans);
        return ans;
    }
    
    void dfs(const string &s, int start, int left, int right, vector<string> &ans) {
        if (left == 0 && right == 0) {
            if (isValid(s)) {
                ans.emplace_back(s);
            }
            return;
        }
        for (int i = start; i < s.size(); ++i) {
            if (i > start && s[i] == s[i - 1]) {
                continue;
            }
            if (s[i] == '(') {
                dfs(s.substr(0, i) + s.substr(i + 1), i, left - 1, right, ans);
            } else if (s[i] == ')') {
                dfs(s.substr(0, i) + s.substr(i + 1), i, left, right - 1, ans);
            }
        }
    }
    
    bool isValid(const string &s) {
        int left = 0;
        for (char ch : s) {
            if (ch == '(') {
                ++left;
            } else if (ch == ')') {
                if (left > 0) {
                    --left;
                } else {
                    return false;
                }
            }
        }
        return left == 0;

=======

        vector<string> res;
        if (s.empty()) {
            res.push_back("");
            return res;
        }
        queue<string> q;
        unordered_set<string> visited;
        q.push(s);
        visited.insert(s);
        bool found = false;
        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; i++) {
                string t = q.front();
                q.pop();
                if (isValid(t)) {
                    res.push_back(t);
                    found = true;
                }
                if (found) continue;
                for (int j = 0; j < t.size(); j++) {
                    if (t[j] != '(' && t[j] != ')') continue;
                    string str = t.substr(0, j) + t.substr(j + 1);
                    if (visited.count(str)) continue;
                    visited.insert(str);
                    q.push(str);
                }
            }
        }
        return res;
    }
    
    bool isValid(string s) {
        int cnt = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') cnt++;
            else if (s[i] == ')') {
                if (cnt == 0) return false;
                cnt--;
            }
        }
        return cnt == 0;

=======

        vector<string> res;
        if (s.empty()) {
            res.push_back("");
            return res;
        }
        unordered_set<string> visited;
        queue<string> q;
        q.push(s);
        bool found = false;
        while (!q.empty()) {
            auto t = q.front(); q.pop();
            if (isValid(t)) {
                res.push_back(t);
                found = true;
            }
            if (found) continue;
            for (int i = 0; i < t.size(); ++i) {
                if (t[i] != '(' && t[i] != ')') continue;
                string str = t.substr(0, i) + t.substr(i + 1);
                if (visited.count(str)) continue;
                q.push(str);
                visited.insert(str);
            }
        }
        return res;
    }
    bool isValid(string s) {
        int cnt = 0;
        for (auto c : s) {
            if (c == '(') ++cnt;
            if (c == ')' && cnt-- == 0) return false;
        }
        return cnt == 0;

=======

        vector<string> ans;
        int left = 0, right = 0;
        for (auto c : s) {
            if (c == '(') {
                left++;
            } else if (c == ')') {
                if (left > 0) {
                    left--;
                } else {
                    right++;
                }
            }
        }
        dfs(s, 0, left, right, ans);
        return ans;
    }
    void dfs(string s, int start, int left, int right, vector<string>& ans) {
        if (left == 0 && right == 0) {
            if (isValid(s)) {
                ans.push_back(s);
            }
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (i > start && s[i] == s[i - 1]) {
                continue;
            }
            if (s[i] == '(') {
                dfs(s.substr(0, i) + s.substr(i + 1), i, left - 1, right, ans);
            } else if (s[i] == ')') {
                dfs(s.substr(0, i) + s.substr(i + 1), i, left, right - 1, ans);
            }
        }
    }
    bool isValid(string s) {
        int cnt = 0;
        for (auto c : s) {
            if (c == '(') {
                cnt++;
            } else if (c == ')') {
                cnt--;
            }
            if (cnt < 0) {
                return false;
            }
        }
        return cnt == 0;

=======

        vector<string> res;
        if (s.empty()) return res;
        unordered_set<string> visited;
        queue<string> q;
        q.push(s);
        visited.insert(s);
        bool found = false;
        while (!q.empty()) {
            string t = q.front();
            q.pop();
            if (isValid(t)) {
                res.push_back(t);
                found = true;
            }
            if (found) continue;
            for (int i = 0; i < t.size(); ++i) {
                if (t[i] != '(' && t[i] != ')') continue;
                string str = t.substr(0, i) + t.substr(i + 1);
                if (visited.find(str) == visited.end()) {
                    q.push(str);
                    visited.insert(str);
                }
            }
        }
        return res;
    }
    
    bool isValid(string s) {
        int count = 0;
        for (char c : s) {
            if (c == '(') count++;
            if (c == ')') count--;
            if (count < 0) return false;
        }
        return count == 0;

=======

        vector<string> ans;
        queue<string> q;
        unordered_set<string> visited;
        q.push(s);
        bool found = false;
        while (!q.empty()) {
            string cur = q.front();
            q.pop();
            if (visited.count(cur)) {
                continue;
            }
            visited.insert(cur);
            if (isValid(cur)) {
                ans.push_back(cur);
                found = true;
            }
            if (found) {
                continue;
            }
            for (int i = 0; i < cur.length(); i++) {
                if (cur[i] != '(' && cur[i] != ')') {
                    continue;
                }
                string next = cur.substr(0, i) + cur.substr(i + 1);
                q.push(next);
            }
        }
        return ans;
    }
    bool isValid(string s) {
        int cnt = 0;
        for (char c : s) {
            if (c == '(') {
                cnt++;
            } else if (c == ')') {
                cnt--;
            }
            if (cnt < 0) {
                return false;
            }
        }
        return cnt == 0;

=======

        vector<string> res;
        queue<string> q;
        unordered_set<string> visited;
        q.push(s);
        visited.insert(s);
        bool found = false;
        while (!q.empty()) {
            auto str = q.front(); q.pop();
            if (isValid(str)) {
                res.push_back(str);
                found = true;
            }
            if (found) continue;
            for (int i = 0; i < str.size(); ++i) {
                if (str[i] != '(' && str[i] != ')') continue;
                string next = str.substr(0, i) + str.substr(i + 1);
                if (visited.count(next)) continue;
                q.push(next);
                visited.insert(next);
            }
        }
        return res;
    }
    bool isValid(string s) {
        int cnt = 0;
        for (char c : s) {
            if (c == '(') ++cnt;
            if (c == ')' && --cnt < 0) return false;
        }
        return cnt == 0;

=======

        vector<string> res;
        string path;
        int left = 0, right = 0;
        for (char& c : s) {
            if (c == '(') left++;
            else if (c == ')') {
                if (left > 0) left--;
                else right++;
            }
        }
        dfs(s, 0, left, right, 0, path, res);
        return res;
