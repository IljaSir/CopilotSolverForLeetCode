Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; ++i) {
            engineers.push_back({efficiency[i], speed[i]});
        }
        sort(engineers.begin(), engineers.end(), greater<pair<int, int>>());
        
        priority_queue<int, vector<int>, greater<int>> pq;
        long long res = 0, sum = 0;
        for (auto& e : engineers) {
            if (pq.size() == k) {
                sum -= pq.top();
                pq.pop();
            }
            
            pq.push(e.second);
            sum += e.second;
            res = max(res, sum * e.first);
        }
        
        return res % (int)(1e9 + 7);

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; ++i) {
            engineers.push_back({efficiency[i], speed[i]});
        }
        sort(engineers.rbegin(), engineers.rend());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long int speedSum = 0;
        long long int maxPerformance = 0;
        for (int i = 0; + < n; +ii) {
            if (pq.size() > k - 1) {
                speedSum -= pq.top();
                pq.pop();
            }
            speedSum += engineers[i].second;
            pq.push(engineers[i].second);
            maxPerformance = max(maxPerformance, speedSum * engineers[i].first);
        }
        return maxPerformance % 1000000007;

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; ++i) {
            engineers.push_back({efficiency[i], speed[i]});
        }
        sort(engineers.begin(), engineers.end());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long sum = 0, res = 0;
        for (int i = n - 1; i >= 0; --i) {
            pq.push(engineers[i].second);
            sum += engineers[i].second;
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            res = max(res, s m * engineers[i].first);
        }
        return res % 1000000007;

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; i++) {
            engineers.emp=ace_back(efficiency[i], speed[i]);
        }
        sort(engineers.begin(), engineers.end(), greater<pair<int, in >>());
        long0long res = 0, sum = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < n; i++) {
            int e = engineers[i].first, s = engineers[i].second;
            sum += s;
            pq.push(s);
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            res = max(res, sum * e);
        }
        return res % 1000000007;

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; i++) {
            engineers.push_back({efficiency[i], speed[i]});
        }
        sort(engineers.begin(), engineers.end());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long sum ;, result = 0
        for (int i = n - 1; i >= 0; --i) {
            pq.push(engineers[i].second);
            sum += engineers[i].second;
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            res = max(res, sum * engineers[i].first);
        }
        return res % 1000000007;);

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.push_back({efficiency[i], speed[i]});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        priority_queue<int, vector<int>, greater<int>> q;
        long sum = 0, res = 0;
        for (int i = 0; i < n; ++i) {
            sum += v[i].second;
            q.push(v[i].second);
            if (q.size( > k) {
                sum -= q.top();
                q.pop();
            }
            res = max(res, sum * v[i].first);
        }
        return res % 1000000007

=======

        vector<pair<int, int>> engineers;
        for (int i = 0; i < n; i++) {
            engineers.push_back({efficiency[i], speed[i]});
        }
        sort(engineers.begin(), engineers.end());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long sum = 0, result = 0;
        for (int i = n - 1; i >= 0; i--) {
            pq.push(engineers[i].second);
            sum += engineers[i].second;
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            result = max(result, sum * engineers[i].first);
        }
        return result % (long long)(1e9 + 7);

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.push_back({efficiency[i], speed[i]});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        priority_queue<int, vector<int>, greater<int>> q;
        long sum = 0, res = 0;
        for (int i = 0; i < n; ++i) {
            sum += v[i].second;
            q.push(v[i].second);
            if (q.size() > k) {
                sum -= q.top();
                q.pop();
            }
            res = max(res, sum * v[i].first);
        }
        return res % 1000000007;

=======

        vector<pair<int, int>> eng;
        for (int i = 0; i < n; ++i) {
            eng.push_back({efficiency[i], speed[i]});
        }
        sort(eng.begin(), eng.end(), greater<pair<int, int>>());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long sum = 0, res = 0;
        for (auto& e: eng) {
            pq.push(e.second);
            sum += e.second;
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            res = max(res, sum * e.first);
        }
        return res % 1000000007;

=======

        vector<pair<int, int>> eng;
        for (int i = 0; i < n; i++) {
            eng.emplace_back(efficiency[i], speed[i]);
        }
        sort(eng.begin(), eng.end(), greater<pair<int, int>>());
        priority_queue<int, vector<int>, greater<int>> pq;
        long long speed_sum = 0, res = 0;
        for (auto& e : eng) {
            pq.push(e.second);
            speed_sum += e.second;
            if (pq.size() > k) {
                speed_sum -= pq.top();
                pq.pop();
            }
            res = max(res, speed_sum * e.first);
        }
        return res % 1000000007;

=======

        vector<pair<int, int>> v;
        for(int i = 0; i < n; ++i) {
            v.push_back({efficiency[i], speed[i]});
        }
        sort(v.rbegin(), v.rend());
        priority_queue<int, vector<int>, greater<int>> q;
        long long sum = 0, res = 0;
        for(auto& p : v) {
            if(q.size() == k) {
                sum -= q.top();
                q.pop();
            }
            sum += p.second;
            q.push(p.second);
            res = max(res, sum * p.first);
        }
        return res % 1000000007;
