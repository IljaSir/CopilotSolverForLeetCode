Synthesizing 8/10 solutions

=======

        int MOD = 1e9 + 7;
        int n = locations.size();
        vector<vector<int>> dp(fuel + 1, vector<int>(n, 0));
        dp[0][start] = 1;
        for (int i = 1; i <= fuel; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j != k) {
                        dp[i][j] += dp[i - abs(locations[j] - locations[k])][k];
                        dp[i][j] %= MOD;
                    }
                }
            }
        }
        int ret = 0;
        for (int i = 0; i <= fuel; i++) {
            ret += dp[i][finish];
            ret %= MOD;
        }
        return ret;

=======

        const int MOD = 1e9 + 7;
        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1, 0));
        dp[start][0] = 1;
        for (int i = 0; i <= fuel; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j == k) continue;
                    int cost = abs(locations[j] - locations[k]);
                    if (i >= cost) {
                        dp[j][i] = (dp[j][i] + dp[k][i - cost]) % MOD;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= fuel; i++) {
            ans = (ans + dp[finish][i]) % MOD;
        }
        return ans;

=======

        int n = locations.size();
        int mod = 1e9 + 7;
        vector<vector<int>> dp(n, vector<int>(fuel + 1));
        dp[start][0] = 1;
        for (int i = 0; i < fuel; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j == k) continue;
                    int dist = abs(locations[j] - locations[k]);
                    if (i + dist <= fuel) {
                        dp[k][i + dist] = (dp[k][i + dist] + dp[j][i]) % mod;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i <= fuel; i++) {
            res = (res + dp[finish][i]) % mod;
        }
        return res;

=======

        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1));
        dp[start][0] = 1;
        int mod = 1e9 + 7;
        for (int i = 0; i <= fuel; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    if (j == k) continue;
                    int dis = abs(locations[j] - locations[k]);
                    if (dis <= i) {
                        dp[k][i] = (dp[k][i] + dp[j][i - dis]) % mod;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i <= fuel; ++i) {
            res = (res + dp[finish][i]) % mod;
        }
        return res;

=======

        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1));
        dp[finish][0] = 1;
        for (int i = 1; i <= fuel; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    if (j == k) continue;
                    dp[j][i] = (dp[j][i] + dp[k][i - 1]) % 1000000007;
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= fuel; ++i) {
            res = (res + dp[start][i] * (abs(locations[start] - locations[finish]) <= i ? 1 : 0)) % 1000000007;
        }
        return res;

=======

        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1));
        dp[start][0] = 1;
        for (int k = 1; k <= fuel; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (i == j) continue;
                    int dist = abs(locations[i] - locations[j]);
                    if (k >= dist) {
                        dp[i][k] += dp[j][k - dist];
                        dp[i][k] %= 1000000007;
                    }
                }
            }
        }
        int ans = 0;
        for (int k = 0; k <= fuel; ++k) {
            ans += dp[finish][k];
            ans %= 1000000007;
        }
        return ans;

=======

        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel + 1, 0));
        dp[start][fuel] = 1;
        int ans = 0;
        for (int i = fuel; i >= 0; i--) {
            for (int j = 0; j < n; j++) {
                if (dp[j][i] > 0) {
                    for (int k = 0; k < n; k++) {
                        if (k != j) {
                            int f = i - abs(locations[j] - locations[k]);
                            if (f >= 0) {
                                dp[k][f] += dp[j][i];
                                dp[k][f] %= 1000000007;
                                if (k == finish) {
                                    ans += dp[j][i];
                                    ans %= 1000000007;
                                }
                            }
                        }
                    }
                }
            }
        }
        return ans;

=======

        int n = locations.size();
        vector<vector<int>> dp(n, vector<int>(fuel+1, 0));
        dp[start][0] = 1;
        int res = 0;
        for (int i = 0; i <= fuel; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (j != k) {
                        int dist = abs(locations[j] - locations[k]);
                        if (i >= dist) {
                            dp[k][i] += dp[j][i-dist];
                            dp[k][i] %= 1000000007;
                        }
                    }
                }
            }
            res += dp[finish][i];
            res %= 1000000007;
        }
        return res;
