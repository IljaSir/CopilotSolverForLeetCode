Synthesizing 7/10 solutions (Duplicates hidden)

=======

        const int MOD = 1000000007;
        int dp[n + 1][2][3];
        memset(dp, 0, sizeof(dp));
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= 1; j++) {
                for (int k = 0; k <= 2; k++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i - 1][j][k]) % MOD;
                }
            }
            for (int k = 1; k <= 2; k++) {
                dp[i][1][0] = (dp[i][1][0] + dp[i - 1][0][k]) % MOD;
            }
            for (int j = 0; j <= 1; j++) {
                for (int k = 1; k <= 2; k++) {
                    dp[i][j][k] = dp[i - 1][j][k - 1];
                }
            }
        }
        int res = 0;
        for (int j = 0; j <= 1; j++) {
            for (int k = 0; k <= 2; k++) {
                res = (res + dp[n][j][k]) % MOD;
            }
        }
        return res;

=======

        int M = 1000000007;
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3)));
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 3; ++k) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][k]) % M;
                }
            }
            for (int k = 0; k < 3; ++k) {
                dp[i][1][0] = (dp[i][1][0] + dp[i-1][0][k]) % M;
            }
            for (int j = 0; j < 2; ++j) {
                dp[i][j][1] = dp[i-1][j][0];
            }
            for (int j = 0; j < 2; ++j) {
                dp[i][j][2] = dp[i-1][j][1];
            }
        }
        int res = 0;
        for (int j = 0; j < 2; ++j) {
            for (int k = 0; k < 3; ++k) {
                res = (res + dp[n][j][k]) % M;
            }
        }
        return res;

=======

        int M = 1000000007;
        long long dp[n+1][2][3];
        memset(dp, 0, sizeof(dp));
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][k]) % M;
                    if (j < 1) {
                        dp[i][j+1][0] = (dp[i][j+1][0] + dp[i-1][j][k]) % M;
                    }
                    if (k < 2) {
                        dp[i][j][k+1] = (dp[i][j][k+1] + dp[i-1][j][k]) % M;
                    }
                }
            }
        }
        long long ans = 0;
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                ans = (ans + dp[n][j][k]) % M;
            }
        }
        return ans;

=======

        int mod = 1000000007;
        int64_t dp[n + 1][2][3];
        memset(dp, 0, sizeof(dp));
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            // ending with P
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i - 1][j][k]) % mod;
                }
            }
            // ending with A
            for (int k = 0; k < 3; k++) {
                dp[i][1][0] = (dp[i][1][0] + dp[i - 1][0][k]) % mod;
            }
            // ending with L
            for (int j = 0; j < 2; j++) {
                for (int k = 1; k < 3; k++) {
                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k - 1]) % mod;
                }
            }
        }
        int64_t ans = 0;
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                ans = (ans + dp[n][j][k]) % mod;
            }
        }
        return ans;

=======

        int MOD = 1000000007;
        long long P[2], L[3], A[2];
        P[0] = L[0] = A[0] = 1;
        P[1] = L[1] = A[1] = 0;
        for(int i=2; i<=n; i++) {
            P[i%2] = ((P[(i-1)%2] + L[(i-1)%2])%MOD + A[(i-1)%2])%MOD;
            L[i%2] = (P[(i-1)%2] + P[(i-2)%2])%MOD;
            A[i%2] = ((P[(i-1)%2] + L[(i-1)%2])%MOD + A[(i-1)%2])%MOD;
        }
        return (P[n%2] + L[n%2] + A[n%2])%MOD;

=======

        vector<long> dp(n+1, 0);
        dp[0] = 1; // 0 absent
        dp[1] = 2; // 0 absent, 1 absent
        dp[2] = 4; // 0 absent, 1 absent, 2 absent
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];
            dp[i] %= 1000000007;
        }
        long res = dp[n];
        for (int i = 0; i < n; i++) {
            res += dp[i] * dp[n-1-i];
            res %= 1000000007;
        }
        return res;
