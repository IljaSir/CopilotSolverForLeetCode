Synthesizing 10/10 solutions

=======

        deque<int> dq;
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (!dq.empty() && dq.front() == i - k) {
                dq.pop_front();
            }
            while (!dq.empty() && nums[dq.back()] <= nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i >= k - 1) {
                res.push_back(nums[dq.front()]);
            }
        }
        return res;

=======

        vector<int> result;
        deque<int> q;
        for (int i = 0; i < nums.size(); i++) {
            while (!q.empty() && nums[q.back()] < nums[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
            if (i >= k - 1) {
                result.push_back(nums[q.front()]);
            }
        }
        return result;

=======

        vector<int> res;
        deque<int> dq;
        for (int i = 0; i < nums.size(); i++) {
            while (!dq.empty() && nums[dq.back()] <= nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i - dq.front() + 1 > k) {
                dq.pop_front();
            }
            
            if (i >= k - 1) {
                res.push_back(nums[dq.front()]);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> res;
        deque<int> q;
        for (int i = 0; i < n; ++i) {
            while (!q.empty() && nums[q.back()] < nums[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (i - q.front() == k) {
                q.pop_front();
            }
            if (i >= k - 1) {
                res.push_back(nums[q.front()]);
            }
        }
        return res;

=======

        vector<int> result;
        if (nums.size() == 0) {
            return result;
        }
        deque<int> dq;
        for (int i = 0; i < nums.size(); i++) {
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i - dq.front() + 1 > k) {
                dq.pop_front();
            }
            if (i + 1 >= k) {
                result.push_back(nums[dq.front()]);
            }
        }
        return result;

=======

        int n = nums.size();
        vector<int> res;
        deque<int> q;
        for (int i = 0; i < n; ++i) {
            if (!q.empty() && i - q.front() >= k) {
                q.pop_front();
            }
            while (!q.empty() && nums[q.back()] <= nums[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (i >= k - 1) {
                res.push_back(nums[q.front()]);
            }
        }
        return res;

=======

        vector<int> ans;
        deque<int> q;
        for(int i=0;i<k;i++){
            while(!q.empty() && nums[i]>=nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
        }
        ans.push_back(nums[q.front()]);
        for(int i=k;i<nums.size();i++){
            if(q.front()==i-k){
                q.pop_front();
            }
            while(!q.empty() && nums[i]>=nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
            ans.push_back(nums[q.front()]);
        }
        return ans;

=======

        vector<int> result;
        if (nums.size() == 0) return result;
        deque<int> dq;
        for (int i = 0; i < nums.size(); ++i) {
            if (dq.size() > 0 && dq.front() < i - k + 1) {
                dq.pop_front();
            }
            while (dq.size() > 0 && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i >= k - 1) {
                result.push_back(nums[dq.front()]);
            }
        }
        return result;

=======

        vector<int> result;
        if (nums.size() == 0) return result;
        deque<int> dq;
        dq.push_back(nums[0]);
        for (int i = 1; i < k; i++) {
            while (!dq.empty() && dq.back() < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(nums[i]);
        }
        result.push_back(dq.front());
        for (int i = k; i < nums.size(); i++) {
            if (dq.front() == nums[i - k]) {
                dq.pop_front();
            }
            while (!dq.empty() && dq.back() < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(nums[i]);
            result.push_back(dq.front());
        }
        return result;

=======

        vector<int> res;
        if (nums.empty() || k <= 0) return res;
        deque<int> dq;
        for (int i = 0; i < nums.size(); i++) {
            // remove the elements out of range
            while (!dq.empty() && dq.front() < i - k + 1) {
                dq.pop_front();
            }
            // remove the elements smaller than nums[i]
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i >= k - 1) {
                res.push_back(nums[dq.front()]);
            }
        }
        return res;
