Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> minRight(n);
        minRight[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            minRight[i] = min(minRight[i + 1], arr[i]);
        }
        int ans = 0, maxLeft = 0;
        for (int i = 0; i < n; ++i) {
            maxLeft = max(maxLeft, arr[i]);
            if (maxLeft <= minRight[i]) {
                ++ans;
            }
        }
        return ans;

=======

        int ans = 0;
        int maxVal = 0;
        for (int i = 0; i < arr.size(); i++) {
            maxVal = max(maxVal, arr[i]);
            if (maxVal == i) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> maxLeft(n, 0);
        vector<int> minRight(n, 0);
        maxLeft[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            maxLeft[i] = max(maxLeft[i-1], arr[i]);
        }
        minRight[n-1] = arr[n-1];
        for (int i = n-2; i >= 0; --i) {
            minRight[i] = min(minRight[i+1], arr[i]);
        }
        int ans = 1;
        for (int i = 0; i < n-1; ++i) {
            if (maxLeft[i] <= minRight[i+1]) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> maxn(n);
        maxn[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            maxn[i] = max(maxn[i-1], arr[i]);
        }
        int ans = 0;
        int minn = INT_MAX;
        for (int i = n-1; i >= 0; --i) {
            minn = min(minn, arr[i]);
            if (minn >= maxn[i]) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> maxs(n, arr[0]);
        for (int i = 1; i < n; i++) {
            maxs[i] = max(maxs[i - 1], arr[i]);
        }
        int ans = 1;
        for (int i = 0; i < n - 1; i++) {
            if (maxs[i] <= arr[i + 1]) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.size();
        int cnt = 0;
        int maxn = 0;
        for (int i = 0; i < n; ++i) {
            maxn = max(maxn, arr[i]);
            if (maxn == i) ++cnt;
        }
        return cnt;

=======

        int n = arr.size();
        int ans = 0;
        int maxVal = arr[0];
        for (int i = 0; i < n; ++i) {
            maxVal = max(maxVal, arr[i]);
            if (maxVal == i) {
                ans += 1;
            }
        }
        return ans;

=======

        int N = arr.size();
        int ans = 0;
        int maxVal = INT_MIN;
        for (int i = 0; i < N; ++i) {
            maxVal = max(maxVal, arr[i]);
            if (maxVal == i) {
                ++ans;
            }
        }
        return ans;

=======

        int n = arr.size();
        if (n == 1) return 1;
        vector<int> maxs(n, arr[0]);
        vector<int> mins(n, arr[n - 1]);
        for (int i = 1; i < n; i++) {
            maxs[i] = max(maxs[i - 1], arr[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            mins[i] = min(mins[i + 1], arr[i]);
        }
        int res = 0;
        for (int i = 0; i < n - 1; i++) {
            if (maxs[i] <= mins[i + 1]) res++;
        }
        return res + 1;

=======

        vector<int> v(arr);
        sort(v.begin(), v.end());
        int n = arr.size();
        int res = 0;
        int i = 0, j = 0;
        while (i < n && j < n) {
            if (arr[i] == v[j]) {
                ++res;
                i = j = j + 1;
            } else {
                ++i;
                ++j;
            }
        }
        return res;
