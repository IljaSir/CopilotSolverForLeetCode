Synthesizing 10/10 solutions

=======

        int n = weights.size();
        vector<long long> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + weights[i];
        }
        vector<vector<long long>> dp(k, vector<long long>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = sum[i + 1];
        }
        for (int i = 1; i < k; ++i) {
            for (int j = n - 1; j >= i; --j) {
                long long cur = sum[j + 1] - sum[i];
                int l = i - 1, r = j - 1;
                while (l < r) {
                    int mid = l + r + 1 >> 1;
                    if (dp[i - 1][mid] - dp[i - 1][i - 1] >= cur - (dp[i - 1][j] - dp[i - 1][mid])) {
                        l = mid;
                    } else {
                        r = mid - 1;
                    }
                }
                dp[i][j] = min(dp[i - 1][l] - dp[i - 1][i - 1] + cur, dp[i - 1][l + 1] - dp[i - 1][i - 1] + cur - (dp[i - 1][j] - dp[i - 1][l + 1]));
            }
        }
        return dp[k - 1][n - 1];
    }
    int minimumIncompatibility(vector<int>& nums, int k) {
        int n = nums.size();
        if (n % k) {
            return -1;
        }
        int m = n / k;
        sort(nums.begin(), nums.end());
        vector<int> cnt(1 << n);
        for (int i = 0; i < 1 << n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i >> j & 1) {
                    ++cnt[i];
                }
            }
        }
        vector<vector<int>> dp(1 << n, vector<int>(k + 1,

=======

        int n = weights.size();
        vector<long long> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + weights[i];
        }
        vector<vector<long long>> dp(k, vector<long long>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = sum[i + 1] * (i + 1) - sum[0];
        }
        for (int i = 1; i < k; ++i) {
            for (int j = i; j < n; ++j) {
                dp[i][j] = LLONG_MAX;
                for (int p = i - 1; p < j; ++p) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][p] + (sum[j + 1] - sum[p + 1]) * (j - p));
                }
            }
        }
        return dp[k - 1][n - 1];
    }
    int minimumIncompatibility(vector<int>& nums, int k) {
        int n = nums.size();
        if (n % k) return -1;
        unordered_map<int, int> cnt;
        for (int num : nums) {
            cnt[num]++;
            if (cnt[num] > k) return -1;
        }
        vector<int> weights;
        for (auto& [num, count] : cnt) {
            weights.push_back(num);
        }
        return putMarbles(weights, k);

=======

        int n = weights.size();
        vector<long long> preSum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + weights[i];
        }
        vector<vector<long long>> dp(n + 1, vector<long long>(k + 1, 0));
        for (int i = 0; i <= n; i++) {
            dp[i][1] = preSum[i];
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                long long minVal = INT_MAX;
                for (int p = 0; p < i; p++) {
                    minVal = min(minVal, max(dp[p][j - 1], preSum[i] - preSum[p]));
                }
                dp[i][j] = minVal;
            }
        }
        return dp[n][k];
    }
    int minimumIncompatibility(vector<int>& nums, int k) {
        int n = nums.size();
        if (n % k != 0) {
            return -1;
        }
        int m = n / k;
        map<int, int> cnt;
        for (int num : nums) {
            cnt[num]++;
            if (cnt[num] > k) {
                return -1;
            }
        }
        sort(nums.begin(), nums.end());
        vector<int> weights;
        for (int i = 0; i < n; i++) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                weights.push_back(nums[i]);
            }
        }
        return putMarbles(weights, k) - putMarbles(weights, 1);

=======

        int n = weights.size();
        vector<long long> sum(n+1);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + weights[i];
        }
        vector<vector<long long>> dp(n, vector<long long>(k+1, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[i][1] = sum[i+1];
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 2; j <= k; ++j) {
                for (int x = 0; x < i; ++x) {
                    dp[i][j] = min(dp[i][j], dp[x][j-1] + sum[i+1] - sum[x+1]);
                }
            }
        }
        return dp[n-1][k];

=======

        int n = weights.size();
        vector<long long> sums(n+1, 0);
        for (int i = 0; i < n; i++) {
            sums[i+1] = sums[i] + weights[i];
        }
        vector<vector<long long>> dp(k+1, vector<long long>(n+1, 0));
        for (int i = 1; i < n+1; i++) {
            dp[1][i] = sums[i];
        }
        for (int i = 2; i < k+1; i++) {
            for (int j = n; j >= i; j--) {
                dp[i][j] = INT_MAX;
                for (int p = i-1; p < j; p++) {
                    dp[i][j] = min(dp[i][j], max(dp[i-1][p], sums[j]-sums[p]));
                }
            }
        }
        return dp[k][n];
    }
    int minDifference(vector<int>& weights, int k) {
        int n = weights.size();
        if (k == 1) {
            return 0;
        }
        if (k == n) {
            return weights[n-1] - weights[0];
        }
        return putMarbles(weights, k);

=======

        int n = weights.size();
        vector<long long> prefixSum(n + 1);
        for (int i = 0; i < n; ++i) {
            prefixSum[i + 1] = prefixSum[i] + weights[i];
        }
        vector<vector<long long>> dp(k, vector<long long>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = prefixSum[i + 1] * 2 - prefixSum[0];
        }
        for (int i = 1; i < k; ++i) {
            for (int j = i; j < n; ++j) {
                for (int p = i - 1; p < j; ++p) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][p] + (prefixSum[j + 1] - prefixSum[p + 1]) * 2 - (prefixSum[p + 1] - prefixSum[i - 1]));
                }
            }
        }
        return dp[k - 1][n - 1];

=======

        long long n = weights.size();
        vector<long long> prefix(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + weights[i];
        }
        vector<vector<long long>> dp(k, vector<long long>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = prefix[i + 1];
        }
        for (int i = 1; i < k; ++i) {
            for (int j = i; j < n; ++j) {
                for (int p = i - 1; p < j; ++p) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][p] + prefix[j + 1] - prefix[p + 1]);
                }
            }
        }
        return dp[k - 1][n - 1];
    }
    int minimumIncompatibility(vector<int>& nums, int k) {
        int n = nums.size();
        if (n % k != 0) {
            return -1;
        }
        int m = n / k;
        sort(nums.begin(), nums.end());
        long long ans = 0;
        for (int i = 0; i < k; ++i) {
            vector<int> weights;
            for (int j = 0; j < m; ++j) {
                weights.push_back(nums[i * m + j]);
            }
            ans += putMarbles(weights, m);
        }
        return ans;

=======

        int n = weights.size();
        vector<long long> pre(n+1);
        for (int i = 0; i < n; ++i) pre[i+1] = pre[i] + weights[i];
        vector<vector<long long>> dp(k+1, vector<long long>(n+1, 1e18));
        for (int i = 0; i <= n; ++i) dp[1][i] = 0;
        for (int i = 2; i <= k; ++i) {
            for (int j = i; j <= n; ++j) {
                for (int l = i-1; l < j; ++l) {
                    dp[i][j] = min(dp[i][j], dp[i-1][l] + (pre[j]-pre[l])*(pre[j]-pre[l]));
                }
            }
        }
        return dp[k][n];
    }
    int minimumIncompatibility(vector<int>& weights, int k) {
        int n = weights.size();
        if (n%k) return -1;
        int m = n/k;
        sort(begin(weights), end(weights));
        int ans = 1e9;
        do {
            int cur = 0;
            for (int i = 0; i < n; i += m) {
                cur += weights[i+m-1] - weights[i];
            }
            ans = min(ans, cur);
        } while (next_permutation(begin(weights), end(weights)));
        return ans;

=======

        long long sum = 0;
        int n = weights.size();
        for (int i = 0; i < k; ++i) {
            sum += weights[i];
        }
        long long ans = sum;
        for (int i = k; i < n; ++i) {
            sum += weights[i] - weights[i - k];
            ans = min(ans, sum);
        }
        return ans;
    }
    long long putMarbles2(vector<int>& weights, int k) {
        int n = weights.size();
        vector<long long> sum(n + 1);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i - 1] + weights[i - 1];
        }
        vector<vector<long long>> dp(n + 1, vector<long long>(k + 1));
        for (int i = 1; i <= n; ++i) {
            dp[i][1] = sum[i];
        }
        for (int i = 1; i <= n; ++i) {
            for (int j = 2; j <= k; ++j) {
                dp[i][j] = INT_MAX;
                for (int k = 1; k <= i; ++k) {
                    dp[i][j] = min(dp[i][j], max(dp[k][j - 1], sum[i] - sum[k]));
                }
            }
        }
        return dp[n][k];
    }
    long long putMarbles3(vector<int>& weights, int k) {
        int n = weights.size();
        vector<long long> sum(n + 1);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i - 1] + weights[i - 1];
        }
        vector<vector<long long>> dp(n + 1, vector<long long>(k + 1));
        for (int i = 1; i <= n; ++i) {
            dp[i][1] = sum[i];
        }
        for (int i = 1; i <= n; ++i) {
            for (int j = 2; j <= k; ++j) {
                dp[i][j] = INT_MAX;
                for (int k = j - 1; k <= i; ++k

=======

        // 1. calculate sum of weights
        long long sum = 0;
        for (int w : weights) {
            sum += w;
        }
        // 2. calculate sum of weights for each bag
        vector<long long> sums(k, 0);
        for (int i = 0; i < weights.size(); ++i) {
            sums[i % k] += weights[i];
        }
        // 3. calculate cost for each bag
        vector<long long> costs(k, 0);
        for (int i = 0; i < k; ++i) {
            costs[i] = sums[i] * (i + 1);
        }
        // 4. calculate min cost
        long long minCost = sum;
        for (int i = 0; i < k; ++i) {
            minCost = min(minCost, costs[i]);
        }
        // 5. calculate max cost
        long long maxCost = 0;
        for (int i = 0; i < k; ++i) {
            maxCost = max(maxCost, costs[i]);
        }
        // 6. return the difference
        return maxCost - minCost;
