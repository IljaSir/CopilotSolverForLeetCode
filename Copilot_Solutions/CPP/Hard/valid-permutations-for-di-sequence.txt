Synthesizing 4/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s[i - 1] == 'I') {
                for (int j = 0; j < i; ++j) {
                    for (int k = j; k < i; ++k) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                }
            } else {
                for (int j = 0; j < i; ++j) {
                    for (int k = 0; k <= j; ++k) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= n; ++i) {
            ans = (ans + dp[n][i]) % 1000000007;
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s[i - 1] == 'D') {
                for (int j = i - 1; j >= 0; --j) {
                    dp[i][j] = (dp[i][j + 1] + dp[i - 1][j]) % int(1e9 + 7);
                }
            } else {
                for (int j = 0; j < i; ++j) {
                    dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % int(1e9 + 7);
                }
            }
        }
        return dp[n][n - 1];

=======

        int n = s.size();
        int M = 1000000007;
        vector<vector<long>> dp(n+1, vector<long>(n+1, 0));
        dp[0][0] = 1;
        for(int i=1;i<=n;i++){
            for(int j=0;j<=n;j++){
                if(s[i-1]=='D'){
                    for(int k=j;k<=n-1;k++){
                        dp[i][j] = (dp[i][j] + dp[i-1][k]) % M;
                    }
                }else{
                    for(int k=0;k<j;k++){
                        dp[i][j] = (dp[i][j] + dp[i-1][k]) % M;
                    }
                }
            }
        }
        long res = 0;
        for(int i=0;i<=n;i++){
            res = (res + dp[n][i]) % M;
        }
        return res;
