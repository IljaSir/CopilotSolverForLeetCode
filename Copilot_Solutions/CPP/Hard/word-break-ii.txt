Synthesizing 10/10 solutions

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        vector<vector<string>> dp(s.size() + 1);
        dp[0].push_back("");
        for (int i = 1; i <= s.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j].size() > 0 && dict.count(s.substr(j, i - j))) {
                    for (string str : dp[j]) {
                        dp[i].push_back(str + (str == "" ? "" : " ") + s.substr(j, i - j));
                    }
                }
            }
        }
        return dp[s.size()];

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        unordered_map<string, vector<string>> memo;
        return wordBreak(s, dict, memo);
    }
    
    vector<string> wordBreak(string s, unordered_set<string>& dict, unordered_map<string, vector<string>>& memo) {
        if (memo.count(s)) return memo[s];
        if (s.empty()) return {""};
        vector<string> res;
        for (int i = 1; i <= s.size(); ++i) {
            string word = s.substr(0, i);
            if (dict.count(word)) {
                vector<string> rem = wordBreak(s.substr(i), dict, memo);
                for (string str : rem) {
                    res.push_back(word + (str.empty() ? "" : " ") + str);
                }
            }
        }
        return memo[s] = res;

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        unordered_map<string, vector<string>> memo;
        return wordBreak(s, dict, memo);
    }
    
    vector<string> wordBreak(string s, unordered_set<string>& dict, unordered_map<string, vector<string>>& memo) {
        if (memo.count(s)) {
            return memo[s];
        }
        vector<string> res;
        if (dict.count(s)) {
            res.push_back(s);
        }
        for (int i = 1; i < s.size(); i++) {
            string word = s.substr(i);
            if (dict.count(word)) {
                string rem = s.substr(0, i);
                vector<string> remRes = wordBreak(rem, dict, memo);
                for (string str: remRes) {
                    res.push_back(str + " " + word);
                }
            }
        }
        memo[s] = res;
        return res;

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        unordered_map<string, vector<string>> memo;
        return helper(s, dict, memo);
    }

    vector<string> helper(string s, unordered_set<string>& dict, unordered_map<string, vector<string>>& memo) {
        if (memo.count(s)) return memo[s];
        if (s.empty()) return {""};

        vector<string> res;
        for (int i = 1; i <= s.size(); ++i) {
            string word = s.substr(0, i);
            if (dict.count(word)) {
                vector<string> rem = helper(s.substr(i), dict, memo);
                for (string str : rem) {
                    res.push_back(word + (str.empty() ? "" : " ") + str);
                }
            }
        }
        memo[s] = res;
        return res;

=======

        unordered_set<string> wordSet(wordDict.begin(), wordDict.end());
        unordered_map<string, vector<string>> memo;
        return helper(s, wordSet, memo);
    }
    
    vector<string> helper(string s, unordered_set<string>& wordSet, unordered_map<string, vector<string>>& memo) {
        if (memo.count(s)) return memo[s];
        if (s.empty()) return {""};
        
        vector<string> res;
        for (int i = 1; i <= s.size(); i++) {
            string word = s.substr(0, i);
            if (wordSet.count(word)) {
                vector<string> rem = helper(s.substr(i), wordSet, memo);
                for (string str : rem) {
                    res.push_back(word + (str.empty() ? "" : " ") + str);
                }
            }
        }
        memo[s] = res;
        return res;

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        vector<vector<string>> dp(s.size() + 1);
        dp[0].emplace_back("");
        for (int i = 1; i <= s.size(); ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (!dp[j].empty() && dict.count(s.substr(j, i - j))) {
                    for (auto &str : dp[j]) {
                        dp[i].emplace_back(str + (str.empty() ? "" : " ") + s.substr(j, i - j));
                    }
                }
            }
        }
        return dp[s.size()];

=======

        unordered_set<string> wordSet;
        for (auto word : wordDict) {
            wordSet.insert(word);
        }
        vector<bool> dp(s.size() + 1, false);
        dp[0] = true;
        for (int i = 1; i <= s.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordSet.find(s.substr(j, i - j)) != wordSet.end()) {
                    dp[i] = true;
                    break;
                }
            }
        }
        vector<string> res;
        if (dp[s.size()]) {
            vector<string> path;
            dfs(s, s.size(), wordSet, dp, path, res);
        }
        return res;
    }
    
    void dfs(string& s, int size, unordered_set<string>& wordSet, vector<bool>& dp, vector<string>& path, vector<string>& res) {
        if (size == 0) {
            string tmp = path.back();
            path.pop_back();
            for (int i = path.size() - 1; i >= 0; i--) {
                tmp += " " + path[i];
            }
            res.push_back(tmp);
            path.push_back(tmp);
            return;
        }
        for (int i = size - 1; i >= 0; i--) {
            if (dp[i] && wordSet.find(s.substr(i, size - i)) != wordSet.end()) {
                path.push_back(s.substr(i, size - i));
                dfs(s, i, wordSet, dp, path, res);
                path.pop_back();
            }
        }

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        int maxLen = 0;
        for (const string &word : wordDict) {
            maxLen = max(maxLen, (int)word.length());
        }
        vector<vector<string>> dp(s.length() + 1);
        dp[0].emplace_back();
        for (int i = 1; i <= s.length(); i++) {
            for (int j = i - 1; j >= 0 && i - j <= maxLen; j--) {
                if (dp[j].empty()) {
                    continue;
                }
                string word = s.substr(j, i - j);
                if (dict.count(word)) {
                    for (const string &prev : dp[j]) {
                        dp[i].emplace_back(prev + (prev.empty() ? "" : " ") + word);
                    }
                }
            }
        }
        return dp.back();

=======

        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        vector<string> res;
        vector<int> memo(s.size(), 0);
        dfs(s, dict, 0, "", res, memo);
        return res;
    }
    void dfs(string& s, unordered_set<string>& dict, int start, string out, vector<string>& res, vector<int>& memo) {
        if (start == s.size()) {
            res.push_back(out);
            return;
        }
        if (memo[start] == -1) return;
        for (int i = start; i < s.size(); ++i) {
            string t = s.substr(start, i - start + 1);
            if (dict.count(t)) {
                string tmp = out;
                if (out.size() > 0) {
                    out += " ";
                }
                out += t;
                dfs(s, dict, i + 1, out, res, memo);
                out = tmp;
            }
        }
        memo[start] = -1;

=======

        unordered_set<string> words;
        for (auto& word: wordDict) {
            words.insert(word);
        }
        vector<vector<int>> dp(s.size() + 1);
        dp[0].push_back(0);
        for (int i = 1; i <= s.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                if (dp[j].size() > 0 && words.find(s.substr(j, i - j)) != words.end()) {
                    dp[i].push_back(j);
                }
            }
        }
        vector<string> ans;
        if (dp[s.size()].size() > 0) {
            vector<string> path;
            dfs(s, s.size(), dp, path, ans);
        }
        return ans;
    }
    
    void dfs(string& s, int i, vector<vector<int>>& dp, vector<string>& path, vector<string>& ans) {
        if (i == 0) {
            string str;
            for (int i = path.size() - 1; i >= 0; --i) {
                str += path[i];
                if (i > 0) {
                    str += " ";
                }
            }
            ans.push_back(str);
            return;
        }
        for (auto j: dp[i]) {
            path.push_back(s.substr(j, i - j));
            dfs(s, j, dp, path, ans);
            path.pop_back();
        }
