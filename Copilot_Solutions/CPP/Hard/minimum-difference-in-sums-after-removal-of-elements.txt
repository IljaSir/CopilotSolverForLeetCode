Synthesizing 10/10 solutions

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long sum1 = 0, sum2 = 0;
        for (int i = 0; i < n; ++i) {
            sum1 += nums[i];
            sum2 += nums[n + i];
        }
        long long res = sum2 - sum1;
        for (int i = n; i < 2 * n; ++i) {
            sum1 += nums[i] - nums[i - n];
            sum2 -= nums[i] - nums[i - n];
            res = min(res, abs(sum1 - sum2));
        }
        return res;

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long sum = accumulate(nums.begin(), nums.end(), 0LL);
        long long ans = sum;
        for (int i = 0; i < n; ++i) {
            ans = min(ans, sum - 2LL * accumulate(nums.begin() + i, nums.begin() + i + n, 0LL));
        }
        return ans;

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        long long sumfirst = 0;
        long long sumsecond = 0;
        long long res = 1e18;
        for (int i = 0; i < n; i++) {
            sumfirst += nums[i];
            sumsecond += nums[n + i];
            res = min(res, (sum - sumfirst - sumsecond) - (sumfirst - sumsecond));
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size() / 3;
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        long long res = sum;
        for (int i = 0; i < n; i++) {
            sum -= nums[i];
            sum += nums[i + n];
            sum -= nums[i + n + n];
            res = min(res, abs(sum * 2));
        }
        return res;

=======

        long long sum = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        long long ans = sum;
        long long sum1 = 0;
        for (int i = 0; i < n; ++i) {
            sum1 += nums[i];
            long long sum2 = sum - sum1;
            ans = min(ans, abs(sum1 - sum2));
            if (i >= n / 2) {
                sum1 -= nums[i - n / 2];
            }
        }
        return ans;

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long ans = 1e18;
        for (int i = 0; i <= n; i++) {
            ans = min(ans, (long long)nums[n - 1 + i] - nums[i]);
        }
        return ans;

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long ans = 1e18;
        for (int i = 0; i <= n; ++i) {
            ans = min(ans, (long long)nums[n + i - 1] - nums[i]);
        }
        return ans;

=======

        int n = nums.size() / 3;
        sort(nums.begin(), nums.end());
        long long ans = 1e18;
        for (int i = 0; i <= n; ++i) {
            int j = i + n;
            int k = j + n;
            ans = min(ans, 1ll * nums[k - 1] - nums[j] + nums[j - 1] - nums[i]);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size() / 3;
        long long ans = 0x7fffffffffffffff;
        for (int i = 0; i < n; i++) {
            ans = min(ans, (long long)nums[n + i] - nums[i] + nums[2 * n + i] - nums[n + i]);
        }
        return ans;

=======

        int n = nums.size();
        int m = n/3;
        sort(nums.begin(), nums.end());
        long long ans = 1e18;
        for(int i = 0; i < m; i++){
            ans = min(ans, (long long)nums[n-1-i] - nums[i]);
            ans = min(ans, (long long)nums[n-1-i] - nums[i+m]);
        }
        return ans;
