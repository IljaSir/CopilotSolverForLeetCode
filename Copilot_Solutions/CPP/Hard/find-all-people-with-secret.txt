Synthesizing 8/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> graph(n);
        for (vector<int>& meeting: meetings) {
            graph[meeting[0]].push_back(meeting[1]);
            graph[meeting[1]].push_back(meeting[0]);
        }
        vector<int> res;
        vector<int> visited(n, 0);
        queue<int> q;
        q.push(firstPerson);
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            if (visited[cur] == 0) {
                res.push_back(cur);
                visited[cur] = 1;
                for (int& next: graph[cur]) {
                    q.push(next);
                }
            }
        }
        return res;

=======

        vector<vector<int>> graph(n);
        vector<int> inDegree(n, 0);
        for (auto m : meetings) {
            graph[m[0]].push_back(m[1]);
            graph[m[1]].push_back(m[0]);
            ++inDegree[m[0]];
            ++inDegree[m[1]];
        }
        vector<int> ans;
        queue<int> q;
        q.push(firstPerson);
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            ans.push_back(cur);
            for (auto next : graph[cur]) {
                if (--inDegree[next] == 0) {
                    q.push(next);
                }
            }
        }
        return ans;

=======

        vector<vector<int>> m(n);
        for (auto& v : meetings) {
            m[v[0]].push_back(v[1]);
            m[v[1]].push_back(v[0]);
        }
        vector<bool> visited(n);
        vector<int> ans;
        function<void(int)> dfs = [&](int i) {
            if (visited[i]) return;
            visited[i] = true;
            ans.push_back(i);
            for (int j : m[i]) dfs(j);
        };
        dfs(firstPerson);
        return ans;

=======

        vector<int> result;
        vector<int> visited(n, 0);
        vector<vector<int>> graph(n);
        for (int i = 0; i < meetings.size(); i++) {
            graph[meetings[i][0]].push_back(meetings[i][1]);
            graph[meetings[i][1]].push_back(meetings[i][0]);
        }
        queue<int> q;
        q.push(firstPerson);
        visited[firstPerson] = 1;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            result.push_back(node);
            for (int i = 0; i < graph[node].size(); i++) {
                if (visited[graph[node][i]] == 0) {
                    q.push(graph[node][i]);
                    visited[graph[node][i]] = 1;
                }
            }
        }
        return result;

=======

        vector<int> res;
        vector<int> time(n, INT_MAX);
        vector<bool> visited(n, false);
        time[firstPerson] = 0;
        for (int i = 0; i < meetings.size(); ++i) {
            int x = meetings[i][0], y = meetings[i][1], t = meetings[i][2];
            if (time[x] <= t && time[y] > t) {
                time[y] = t;
            }
            if (time[y] <= t && time[x] > t) {
                time[x] = t;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (time[i] != INT_MAX) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> result;
        vector<int> visited(n, 0);
        visited[firstPerson] = 1;
        result.push_back(firstPerson);
        int i = 0, j = 0;
        while (i < meetings.size()) {
            if (visited[meetings[i][0]] == 1 && visited[meetings[i][1]] == 0) {
                visited[meetings[i][1]] = 1;
                result.push_back(meetings[i][1]);
            } else if (visited[meetings[i][1]] == 1 && visited[meetings[i][0]] == 0) {
                visited[meetings[i][0]] = 1;
                result.push_back(meetings[i][0]);
            }
            i++;
        }
        return result;

=======

        vector<int> ans;
        vector<int> g[n];
        vector<int> indegree(n, 0);
        vector<int> times(n, 0);
        for (auto m: meetings) {
            g[m[0]].push_back(m[1]);
            g[m[1]].push_back(m[0]);
            indegree[m[0]]++;
            indegree[m[1]]++;
            times[m[0]] = max(times[m[0]], m[2]);
            times[m[1]] = max(times[m[1]], m[2]);
        }
        queue<int> q;
        q.push(firstPerson);
        vector<bool> visited(n, false);
        visited[firstPerson] = true;
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            ans.push_back(cur);
            for (auto next: g[cur]) {
                indegree[next]--;
                if (indegree[next] == 0 && times[next] >= times[cur] && !visited[next]) {
                    q.push(next);
                    visited[next] = true;
                }
            }
        }
        return ans;
