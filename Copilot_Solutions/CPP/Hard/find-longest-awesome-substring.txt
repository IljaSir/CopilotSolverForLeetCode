Synthesizing 10/10 solutions

=======

        vector<int> pos(1024, s.size());
        pos[0] = -1;
        int mask = 0, res = 0;
        for (int i = 0; i < s.size(); ++i) {
            mask ^= 1 << (s[i] - '0');
            for (int j = 0; j < 10; ++j) {
                res = max(res, i - pos[mask ^ (1 << j)]);
            }
            res = max(res, i - pos[mask]);
            pos[mask] = min(pos[mask], i);
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(1024, n);
        dp[0] = -1;
        int res = 0, mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= 1 << (s[i] - '0');
            res = max(res, i - dp[mask]);
            for (int j = 0; j < 10; j++) {
                res = max(res, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = min(dp[mask], i);
        }
        return res;

=======

        vector<int> pos(1024, s.size());
        pos[0] = -1;
        int mask = 0;
        int res = 0;
        for (int i = 0; i < s.size(); ++i) {
            mask ^= 1 << (s[i] - '0');
            res = max(res, i - pos[mask]);
            for (int j = 0; j < 10; ++j) {
                int t = mask ^ (1 << j);
                res = max(res, i - pos[t]);
            }
            pos[mask] = min(pos[mask], i);
        }
        return res;

=======

        int n = s.size();
        int res = 0;
        vector<int> pos(1024, n);
        pos[0] = -1;
        int mask = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= 1 << (s[i] - '0');
            for (int j = 0; j < 10; ++j) {
                res = max(res, i - pos[mask ^ (1 << j)]);
            }
            res = max(res, i - pos[mask]);
            pos[mask] = min(pos[mask], i);
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        vector<int> pos(1024, n);
        pos[0] = -1;
        int mask = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= (1 << (s[i] - '0'));
            ans = max(ans, i - pos[mask]);
            for (int j = 0; j < 10; ++j) {
                ans = max(ans, i - pos[mask ^ (1 << j)]);
            }
            pos[mask] = min(pos[mask], i);
        }
        return ans;

=======

        int n = s.length();
        vector<int> dp(1024, n);
        dp[0] = -1;
        int ans = 0, mask = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= 1 << (s[i] - '0');
            ans = max(ans, i - dp[mask]);
            for (int j = 0; j < 10; ++j) {
                ans = max(ans, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = min(dp[mask], i);
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        vector<int> pos(1024, n);
        pos[0] = -1;
        int state = 0;
        for (int i = 0; i < n; i++) {
            state ^= 1 << (s[i] - '0');
            for (int j = 0; j < 10; j++) {
                ans = max(ans, i - pos[state ^ (1 << j)]);
            }
            ans = max(ans, i - pos[state]);
            pos[state] = min(pos[state], i);
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n+1, 0);
        int res = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i-1] ^ (1 << (s[i-1] - '0'));
            res = max(res, i - 1);
            for (int j = 0; j < 10; j++) {
                res = max(res, i - 1 - (dp[i] ^ (1 << j)));
            }
            for (int j = 0; j < i; j++) {
                res = max(res, i - j - (dp[i] ^ dp[j]));
            }
        }
        return res;

=======

        int n = s.size();
        if (n < 2) return n;
        int res = 0;
        int dp[1024] = {0};
        for (int i = 0; i < 1024; ++i) dp[i] = n;
        dp[0] = -1;
        int mask = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= 1 << (s[i] - '0');
            res = max(res, i - dp[mask]);
            for (int j = 0; j < 10; ++j) {
                int tmp = mask ^ (1 << j);
                res = max(res, i - dp[tmp]);
            }
            dp[mask] = min(dp[mask], i);
        }
        return res;

=======

        int n = s.size();
        int m = 0;
        int l = 0;
        int r = 0;
        int t = 0;
        vector<int> v(1024, -2);
        v[0] = -1;
        for (int i = 0; i < n; i++) {
            t ^= (1 << (s[i] - '0'));
            if (v[t] == -2) {
                v[t] = i;
            }
            if (i - v[t] > m) {
                m = i - v[t];
                l = v[t];
                r = i;
            }
            for (int j = 0; j < 10; j++) {
                int t2 = t ^ (1 << j);
                if (v[t2] != -2) {
                    if (i - v[t2] > m) {
                        m = i - v[t2];
                        l = v[t2];
                        r = i;
                    }
                }
            }
        }
        return m;
