Synthesizing 10/10 solutions

=======

        long long ans = 0;
        int n = nums.size();
        vector<int> cnt(60, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    ++cnt[j];
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    cur += cnt[j];
                }
            }
            ans += cur - 1;
        }
        ans /= 2;
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    cur += n;
                } else {
                    cur += cnt[j];
                }
            }
            ans += cur - 1;
        }
        ans /= 2;
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    cur += n;
                } else {
                    cur += cnt[j];
                }
            }
            ans -= cur - 1;
        }
        ans /= 2;
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    cur += cnt[j];
                }
            }
            ans -= cur - 1;
        }
        ans /= 2;
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = 0; j < 60; ++j) {
                if ((nums[i] >> j) & 1) {
                    cur += cnt[j];
                }
            }

=======

        long long res = 0;
        int n = nums.size();
        vector<int> cnt(60, 0);
        for (int num : nums) {
            for (int i = 0; i < 60; ++i) {
                if (num & (1LL << i)) {
                    ++cnt[i];
                }
            }
        }
        for (int num : nums) {
            for (int i = 0; i < 60; ++i) {
                if (num & (1LL << i)) {
                    res += n - cnt[i];
                } else {
                    res += cnt[i];
                }
            }
        }
        return res / 2;

=======

        int n = nums.size();
        vector<int> v(60, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 60; ++j) {
                if (nums[i] & (1LL << j)) {
                    ++v[j];
                }
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            long long sum = 0;
            for (int j = 0; j < 60; ++j) {
                if (nums[i] & (1LL << j)) {
                    sum += n - v[j];
                } else {
                    sum += v[j];
                }
            }
            if (sum >= k) {
                ++ans;
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        vector<int> cnt(32, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 32; ++j) {
                if (nums[i] & (1 << j)) {
                    cnt[j]++;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            int or_cnt = 0, and_cnt = 0;
            for (int j = 0; j < 32; ++j) {
                if (x & (1 << j)) {
                    or_cnt += n - cnt[j];
                    and_cnt += cnt[j];
                } else {
                    or_cnt += cnt[j];
                }
            }
            if (or_cnt + and_cnt >= k * n) {
                ans += n;
            }
        }
        return ans;

=======

        int n = nums.size();
        int cnt[64] = {0};
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = 0; j < 64; j++) {
                if (x & (1LL << j)) {
                    cnt[j]++;
                }
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            long long s = 0;
            for (int j = 0; j < 64; j++) {
                if ((x & (1LL << j)) || (cnt[j] > 0)) {
                    s++;
                }
            }
            if (s >= k) {
                ans += n;
            } else {
                for (int j = i + 1; j < n; j++) {
                    int y = nums[j];
                    long long s = 0;
                    for (int k = 0; k < 64; k++) {
                        if ((x & (1LL << k)) || (y & (1LL << k)) || (cnt[k] > 0)) {
                            s++;
                        }
                    }
                    if (s >= k) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        vector<int> cnt(61, 0);
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            int c = 0;
            while (x) {
                c += (x & 1);
                x >>= 1;
            }
            cnt[c]++;
        }
        for (int i = 0; i < 61; ++i) {
            for (int j = 0; j < 61; ++j) {
                if (i + j >= k) {
                    ans += cnt[i] * cnt[j];
                }
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        int bits[32] = {0};
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 32; j++) {
                if (nums[i] & (1 << j)) {
                    bits[j]++;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = 0;
            for (int j = 0; j < 32; j++) {
                if (nums[i] & (1 << j)) {
                    x += bits[j];
                    y += n - bits[j];
                } else {
                    y += bits[j];
                }
            }
            ans += x * y;
        }
        return ans / 2;

=======

        long long result = 0;
        vector<int> setBits(32, 0);
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < 32; j++) {
                if ((nums[i] >> j) & 1) {
                    setBits[j]++;
                }
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            int cnt = 0;
            for (int j = 0; j < 32; j++) {
                if ((nums[i] >> j) & 1) {
                    cnt += setBits[j];
                } else {
                    cnt += (nums.size() - setBits[j]);
                }
            }
            if (cnt >= k) {
                result++;
            }
        }
        return result;

=======

        long long res = 0;
        int n = nums.size();
        int cnt[61] = {0};
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            for (int j = 0; j < 60; ++j) {
                if (num >> j & 1) {
                    cnt[j]++;
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            int sum = 0;
            for (int j = 0; j < 60; ++j) {
                if (num >> j & 1) {
                    sum += cnt[j];
                }
            }
            if (sum >= k) {
                res += n;
            } else {
                for (int j = 0; j < 60; ++j) {
                    if (num >> j & 1) {
                        res += cnt[j];
                    }
                }
            }
        }
        
        return res - n;

=======

        long long res = 0;
        int n = nums.size();
        vector<int> cnt(61);
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            for (int j = 0; j <= 60; ++j) {
                if (x & (1 << j)) {
                    ++cnt[j];
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            int tot = 0;
            for (int j = 0; j <= 60; ++j) {
                if (k & (1 << j)) {
                    tot += cnt[j];
                }
            }
            res += tot;
            for (int j = 0; j <= 60; ++j) {
                if (x & (1 << j)) {
                    res -= cnt[j];
                }
            }
        }
        return res >> 1;
