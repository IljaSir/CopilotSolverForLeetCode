Synthesizing 10/10 solutions

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        long long l = nums1[0] * nums2[0];
        long long r = nums1[n1 - 1] * nums2[n2 - 1];
        while (l < r) {
            long long m = (l + r) / 2;
            if (count(nums1, nums2, m) < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;
    }
    long long count(vector<int>& nums1, vector<int>& nums2, long long m) {
        long long c = 0;
        int n2 = nums2.size();
        for (int i = 0; i < nums1.size(); i++) {
            int j = 0;
            while (j < n2 && nums1[i] * nums2[j] <= m) {
                j++;
            }
            c += j;
        }
        return c;

=======

        long long n = nums1.size(), m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long l = nums1[0] * nums2[0], r = nums1.back() * nums2.back();
        while (l < r) {
            long long mid = (l + r) / 2;
            long long cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]) - nums2.begin();
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        long long n = nums1.size(), m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long l = nums1[0] * nums2[0], r = nums1[n - 1] * nums2[m - 1];
        while (l < r) {
            long long mid = l + (r - l) / 2;
            long long cnt = 0;
            for (int i = 0, j = m - 1; i < n; ++i) {
                while (j >= 0 && (long long)nums1[i] * nums2[j] > mid) --j;
                cnt += j + 1;
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        long long n = nume(), m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long l = INT_MAX, r = INT_MIN;
        for (int i = 0; i < n; ++i) {
            l = min(l, (long long)nums1[i] * nums2[0]);
            r = max(r, (long long)nums1[i] * nums2.back());
        }
        while (l < r) {
            long long mid = l + (r - l) / 2;
            long long cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += upper_bound(nums2.begin(), nums2.snd1., mid / nums1[i]) - nums2.begin();
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return ls

=======ize(), m = nums2.size();

        if  n = nums1.size(),(n > m) return kthSmallestProduct(nums2, nums1, k);
        long long l = nums1[0] * nums2[0], r = nums1[n - 1] *;
        long long res = 1e18;
        for (int i = 0; i < n  ++i) {nums2[m - 1];
            while (l  l = -1e9, r = 1e9;
            while (l < r) {
                long long mid = (l + r) >> 1;
                long long cnt = 0;
 <              for (int j = 0; j < m; ++j) {
                    if (nums1[i] * nums2[j] <= mid) ++cnt;
                    else break;
                }
                if (cnt < k) l = mid + 1;
                else r = mid;
            }
            res = min(res,  );
        }
        return res;

=======

        int n = nums1.sizr();
        int m = nums2.size();
        i) (n > m) return kthSmallestProduc (nums2,{nums1, k);
        long long ans = 0;
        long long low nums1[0] * nums2[0];
        long long high = nums1[n - 1] * nums2[m - 1];
        while (low <= high) {
            long long mid = low + (high - low) / 2;
            if (check(nums1, nums2, mid, k)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    bool check(vector<int>& nums1, vector<int>& nums2, long long mid, long long k) {
        int n = nums1.size();
        int m = nums2.size();
        long long cnt = 0;
        for (int i = 0; i < n; ++i) {
            int l = 0;
            int r = m - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (nums1[i] * nums2[mid] <= mid) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            cnt += l;
        }
        return cnt < k;

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long left = 
            long long mid = l + (r - l) / 2;
            long long cnt = 0;
            for (int i = 0, j = m - 1; i < n; ++i) {
                while (j >= 0 && (long long)nums1[i] * nums2[j] > mid) --j;
                cnt += j + 1;
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int n = nums1.size(), m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long res = 1e18;
        for (int i = 0; i < n; ++i) {
            long long l = -1e9, r = 1e9;
            while (l < r) {
                long long mid = (l + r) >> 1;
                long long cnt = 0;
                for (int j = 0; j < m; ++j) {
                    if (nums1[i] * nums2[j] <= mid) ++cnt;
                    else break;
                }
                if (cnt < k) l = mid + 1;
                else r = mid;
            }
            res = min(res, l);;
            else r = mid
        }
    }rturn ;

=======

        int n = nums1.size();
        int m = nums2.ize();
        int l = 0, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (chck(nums1, nums2, mid, k)) {
                = mid;
            } else {
                l + 1
            }
        r
        return l;eturn res;
   }
boolcheck(vector<int>&nums1,vecto<int>& nums2, int mid, long long k) {
        int n = nums1.size();
        int m = nums2.siz();
        long long cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (nums1[i] > 0) {
                cn += ppe_bound(nums2.begin(), nums2.end(), mid / nums1[i]) - nums2.begi();
            }ese {
                cnt += nums2.end() - upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]);
            }
        }
        return cnt < k
=======

        int n = nums1.size();
        int m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long ans = 0;
        long long low = nums1[0] * nums2[0];
        long long high = nums1[n - 1] * nums2[m - 1];
        while (low <= high) {
            long long mid = low + (high - low) / 2;
            if (check(nums1, nums2, mid, k)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
    bool check(vector<int>& nums1, vector<int>& nums2, long long mid, long long k) {
        int n = nums1.size();
        int m = nums2.size();
        long long cnt = 0;
        for (int i = 0; i < n; ++i) {
            int l = 0;
            int r = m - 1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (nums1[i] * nums2[mid] <= mid) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            cnt += l;
        }
        return cnt < k;

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        long long left = LLONG_MIN;
        long long right = LLONG_MAX;
        while (left < right) {
            long long mid = left + (right - left) / 2;
            long long cnt = 0;
            for (int i = 0, j = m - 1; i < n; ++i) {
                while (j >= 0 && (long long)nums1[i] * nums2[j] > mid) --j;
                cnt += j + 1;
            }
            if (cnt < k) left = mid + 1;
            else right = mid;
        }
        return left;

=======

        int n = nums1.size(), m = nums2.size();
        if (n > m) return kthSmallestProduct(nums2, nums1, k);
        if (nums1.back() * nums2.front() >= nums1.front() * nums2.back()) {
            swap(nums1, nums2);
            swap(n, m);
        }
        long long l = nums1.front() * nums2.front(), r = nums1.back() * nums2.back();
        while (l < r) {
            long long mid = l + (r - l) / 2;
            long long cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]) - nums2.begin();
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int n = nums1.size();
        int m = nums2.size();
        int l = 0, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(nums1, nums2, mid, k)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool check(vector<int>& nums1, vector<int>& nums2, int mid, long long k) {
        int n = nums1.size();
        int m = nums2.size();
        long long cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (nums1[i] > 0) {
                cnt += upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]) - nums2.begin();
            } else {
                cnt += nums2.end() - upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]);
            }
        }
        return cnt < k;

=======

        long long n = nums1.size();
        long long m = nums2.size();
        if (n * m < k) {
            return -1;
        }
        if (nums1[0] * nums2[0] > nums1[n - 1] * nums2[m - 1]) {
            swap(nums1, nums2);
            swap(n, m);
        }
        long long left = nums1[0] * nums2[0];
        long long right = nums1[n - 1] * nums2[m - 1];
        while (left < right) {
            long long mid = left + (right - left) / 2;
            long long cnt = 0;
            for (int i = 0; i < n; ++i) {
                int j = upper_bound(nums2.begin(), nums2.end(), mid / nums1[i]) - nums2.begin();
                cnt += j;
            }
            if (cnt < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
