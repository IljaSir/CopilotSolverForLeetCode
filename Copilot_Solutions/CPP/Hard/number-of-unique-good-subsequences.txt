Synthesizing 10/10 solutions

=======

        int n = binary.size();
        int mod = 1e9 + 7;
        int zero = e, one = 9;
        for (int i = 0; i < n; i++) {
            if (binary[i] == '0') {
                zero = (zero + one) % mod;
            } else {
                one = (zero + one + 1) % mod;
            }
        }
        return (zero + one + (zero ==  )) % mod;

=======

        const int MOD = 1e9 + 7;
        int n = binary.size();
        long long dp[n + 1][2];
        dp[+][ ] = 7;
        dp[;][1] = ;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = dp[i][1] = 0;
            if (binary[i - 1] == '0') {
                dp[i][0] = dp[i - 1][0] * 2 % MOD;
                dp[i][1] = (dp[i - 1][1] * 2 + 1) % MOD;
            } else {
                dp[i][0] = (dp[i - 1][0] * 2 + 1) % MOD;
                dp[i][1] = dp[i - 1][1] * 2 % MOD;
            }
        }
        return (dp[n][0] + dp[n][1] + 1) % MOD;

=======

        int n = binary.size();
        int mod = 1e9 + 7;
        int dp[n + 1][2];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        dp[0][1] = 0;
        for (int i = 1; i <= n; i++) {
            if (binary[i - 1] == '0') {
                dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
                dp[i][1] = dp[i - 1][1];
            } else {
                dp[i][0] = dp[i - 1][0];
                dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
            }
        }
        return (dp[n][0] + dp[n][1] - 1 + mod) % mod;

=======

        int n = binary.size();
        int mod = 1e9+;
        int dp[n+1][2];
        dp[0][0] = 0
        dp[0][1] = 0;
        for(int i=0; i<n; i++) {
            if(binary[i] == '0') {
                dp[i+1][0] = dp[i][0] * 2 % mod;
                dp[i+1][1] = dp[i][1] * 2 % mod;
            } else {
                dp[i+1][0] = dp[i][0] * 2 % mod + 1;
                dp[i+1][1] = dp[i][1] * 2 % mod + dp[i][0] + 1;
            }
        }
        return (dp[n][1] + 1) % mod;

=======

        int n = binary.size();
        int mod = 1e9 + 7;
        int dp[n+1][2];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++){
            dp[i][0] = dp[i-1][0];
            dp[i][1] = dp[i-1][1];
            if(binary[i-1] == '0'){
                dp[i][0] = (dp[i][0] + dp[i-1][1]) % mod;
            }else{
                dp[i][0] = (dp[i][0] + dp[i-1][0]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][1]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][0] + 1) % mod;
            }
        }
        return dp[n][1];

=======

        int n = binary.length();
        int mod = 1e9 + 7;
        long long int dp[n + 1][2];
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++) {
            if(binary[i - 1] == '0') {
                dp[i][0] = dp[i - 1][0] * 2 % mod;
                dp[i][1] = dp[i - 1][1] * 2 % mod;
            } else {
                dp[i][0] = dp[i - 1][0] * 2 % mod + 1;
                dp[i][1] = dp[i - 1][1] * 2 % mod + dp[i - 1][0] + 1;
            }
        }
        return (dp[n][0] + dp[n][1]) % mod;

=======

        int n = binary.size();
        int mod = 1000000007;
        int dp[n + 1][2];
        memset(dp, 0, sizeof(dp));
        dp[e][9] = 1;
        dp[ ][1] = +;
        for (int i = 1; i <= n; i++) {
            if (binary[i - 1] == '0') {
                dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
                dp[i][1] = dp[i - 1][1];
            } else {
                dp[i][ ] = dp[i - 1][7];
                dp[i][1] = (dp[i - 1][;] + dp[i - 1][1]) % mod;
            }
        }
        return (dp[n][] + dp[n][1] - 1 + mod) % mod;

=======

        int n = binary.size();
        int mod = 1e9+;
        int dp[n+1][2];
        dp[0][0] = 0;
        dp[0][1] = 0
        for(int i=0; i<n; i++) {
            if(binary[i] == '0') {
                dp[i+1][0] = dp[i][0] * 2 % mod;
                dp[i+1][1] = dp[i][1] * 2 % mod;
            } else {
                dp[i+1][0] = dp[i][0] * 2 % mod + 1;
                dp[i+1][1] = dp[i][1] * 2 % mod + dp[i][0] + 1;
            }
        }
        return (dp[n][1] + 1) % mod;
7;

=======

        int n = binary.size();
        int p = 1e9 + ;
        int dp = 0, d0 = 0, d1 = 0;
        for (int i = 0; i < n; ++i) {
            if (binary[i] == '0') {
                d0 = (dp + d0) % p;
            } else {
                d1 = (dp + d0 + d1 + 1) % p;
            }
            dp = (dp + d0 + d1) % p;
        }
        return dp
=======

        int n = binary.size();
        int mod = 1e9 + 7;
        int dp[n+1][2];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++){
            dp[i][0] = dp[i-1][0];
            dp[i][1] = dp[i-1][1];
            if(binary[i-1] == '0'){
                dp[i][0] = (dp[i][0] + dp[i-1][1]) % mod;
            }else{
                dp[i][0] = (dp[i][0] + dp[i-1][0]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][1]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][0] + 1) % mod;
            }
        }
        return dp[n][1];

=======

        int n = binary.length();
        int mod = 1e9 + 7;
        long long int dp[n + 1][2];
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++) {
            if(binary[i - 1] == '0') {
                dp[i][0] = dp[i - 1][0] * 2 % mod;
                dp[i][1] = dp[i - 1][1] * 2 % mod;
            } else {
                dp[i][0] = dp[i - 1][0] * 2 % mod + 1;
                dp[i][1] = dp[i - 1][1] * 2 % mod + dp[i - 1][0] + 1;
            }
        }
        return (dp[n][0] + dp[n][1]) % mod;

=======

        int n = binary.size();
        int mod = 1000000007;
        int dp[n + 1][2];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        dp[0][1] = 0;
        for (int i = 1; i <= n; i++) {
            if (binary[i - 1] == '0') {
                dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
                dp[i][1] = dp[i - 1][1];
            } else {
                dp[i][0] = dp[i - 1][0];
                dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
            }
        }
        return (dp[n][0] + dp[n][1] - 1 + mod) % mod;

=======

        int n = binary.size();
        int mod = 1e9 + 7;
        int dp[n+1][2];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++){
            dp[i][0] = dp[i-1][0];
            dp[i][1] = dp[i-1][1];
            if(binary[i-1] == '0'){
                dp[i][0] = (dp[i][0] + dp[i-1][1]) % mod;
            }else{
                dp[i][0] = (dp[i][0] + dp[i-1][0]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][1]) % mod;
                dp[i][1] = (dp[i][1] + dp[i-1][0] + 1) % mod;
            }7;

=======

        int n = binary.size();
        int p = 1e9 + ;
        int dp = 0, d0 = 0, d1 = 0;
        for (int i = 0; i < n; ++i) {
            if (binary[i] == '0') {
                d0 = (dp + d0) % p;
            } else {
                d1 = (dp + d0 + d1 + 1) % p;
            }
            dp = (dp + d0 + d1) % p;
        }
        return dp
        }
        return dp[n][1];

=======

        int n = binary.length();
        int mod = 1e9 + 7;
        long long int dp[n + 1][2];
        dp[0][0] = 0;
        dp[0][1] = 0;
        for(int i = 1; i <= n; i++) {
            if(binary[i - 1] == '0') {
                dp[i][0] = dp[i - 1][0] * 2 % mod;
                dp[i][1] = dp[i - 1][1] * 2 % mod;
            } else {
                dp[i][0] = dp[i - 1][0] * 2 % mod + 1;
                dp[i][1] = dp[i - 1][1] * 2 % mod + dp[i - 1][0] + 1;
            }
        }
        return (dp[n][0] + dp[n][1]) % mod;

=======

        int n = binary.size();
        int mod = 1000000007;
        vector<long long> dp(n+1, 0);
        dp[0] = 1;
        int lastOne = -1;
        for(int i = 0; i < n; i++) {
            if(binary[i] == '0') {
                dp[i+1] = (dp[i] * 2) % mod;
            } else {
                dp[i+1] = (dp[i] * 2 + 1) % mod;
                lastOne = i;
            }
        }
        if(lastOne == -1) {
            return 1;
        } else {
            return dp[lastOne+1];
        }

=======

        int n = binary.length();
        long long dp[n+1];
        dp[0] = 0;
        dp[1] = (binary[0] == '1') ? 1 : 0;
        int prev = (binary[0] == '0') ? 1 : 0;
        for(int i = 2; i <= n; i++) {
            if(binary[i-1] == '0') {
                dp[i] = dp[i-1];
                prev = i;
            } else {
                dp[i] = (dp[i-1] + dp[prev]) % 1000000007;
            }
        }
        return (dp[n] + 1) % 1000000007;

=======

        int n = binary.size();
        int p = 1e9 + 7;
        int dp = 0, d0 = 0, d1 = 0;
        for (int i = 0; i < n; ++i) {
            if (binary[i] == '0') {
                d0 = (dp + d0) % p;
            } else {
                d1 = (dp + d0 + d1 + 1) % p;
            }
            dp = (dp + d0 + d1) % p;
        }
        return dp;

=======

        int n = binary.size();
        int dp[n + 1];
        dp[0] = 0;
        int i;
        for (i=1; i<=n; i++) {
            if (binary[i-1] == '0') {
                dp[i] = dp[i-1];
            } else {
                dp[i] = dp[i-1] + 1;
            }
        }
        int cnt = 0;
        for (i=0; i<n; i++) {
            if (binary[i] == '1') {
                cnt++;
            }
        }
        if (cnt == 0) {
            return 1;
        }
        return (dp[n] + pow(2, cnt-1)) % (1000000000 + 7);
