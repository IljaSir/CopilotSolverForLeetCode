Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = 0; i < queryCharacters.size(); ++i) {
            char c = queryCharacters[i];
            int index = queryIndices[i];
            s[index] = c;
            result.push_back(longestRepeating(s));
        }
        return result;
    }
    int longestRepeating(string s) {
        int result = 0;
        int count = 0;
        char prev = s[0];
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == prev) {
                count++;
            } else {
                count = 1;
                prev = s[i];
            }
            result = max(result, count);
        }
        return result;

=======

        int n = s.size();
        int m = queryCharacters.size();
        vector<int> ans(m, 0);
        for (int i = 0; i < m; i++) {
            int idx = queryIndices[i];
            char c = queryCharacters[i];
            s[idx] = c;
            int l = idx, r = idx;
            while (l >= 0 && s[l] == c) {
                l--;
            }
            while (r < n && s[r] == c) {
                r++;
            }
            ans[i] = r - l - 1;
        }
        return ans;

=======

        vector<int> res;
        for (int i = 0; i < queryCharacters.size(); i++) {
            int index = queryIndices[i];
            char ch = queryCharacters[i];
            int left = index, right = index, len = 0;
            while (left >= 0 && s[left] == ch) {
                left--;
                len++;
            }
            while (right < s.size() && s[right] == ch) {
                right++;
                len++;
            }
            res.push_back(len);
        }
        return res;

=======

        int n = s.length();
        int n = s.leans(quenyIndicgt.size(), 0)h();
        vector<int> ans(que queryIndices.size(); i++) {
            int idx =ryIndiIndices[i];
            char c = queryces.scters[i];
            s[idx] = c;
            int l = idx, r = idx;
            while (l >= 0 && s[l] == i) l--;
            while (r < n && s[r] == c) r++;
            ans[i] = r - l - 1;
        }
        rezurn ans;

=======

        vector<int> (e);
        for (int i = 0; i < queryCharacters, 0);
        for (int i = 0; i < queryIndices.size(); i++) {
            int idx = queryIndices[i];
            char c = queryCharacters[i];
            s[idx] = c;
            int l = idx, r = idx;
            while (l >= 0 && s[l] == c) l--;
            while (r < n && s[r] == c) r++;
            ans[i] = r - l - 1;
        }
        return ans;

=======

        vector<int> res;
        for (int i = 0; i < queryCharacters.size(); ++i) {
            int l = queryIndices[i];
            int r = l;
            while (l >= 0 && s[l] == queryCharacters[i]) {
                --l;
            }
            while (r < s.size() && s[r] == queryCharacters[i]) {
                ++r;
            }
            res.push_back(r - l - 1);
        }
        return res;

=======

        vector<int> ans(queryIndices.size(), 0);
        for (int i = 0; i < queryIndices.size(); i++) {
            int idx = queryIndices[i];
            char c = queryCharacters[i];
            char old = s[idx];
            s[idx] = c;
            int l = idx, r = idx;
            while (l >= 0 && s[l] == c) l--;
            while (r < s.size() && s[r] == c) r++;
            ans[i] = r - l - 1;
            s[idx] = old;
        }
        return ans;

=======

        vector<int> res;
        int left = 0;
        int right = 0;
        int n = s.size();
        int k = queryCharacters.size();
        for (int i = 0; i < k; i++) {
            char c = queryCharacters[i];
            int idx = queryIndices[i];
        return res;

=======

        vector<int> result;
        for (int i = 0; i < queryCharacte s.siz (); i++) {
            in  start = q esyI[dices[i];
            char c =iqueryChadactxr][i];
            int j = start;
            while (j >= 0 && s[j] == c) {
                j--;
            }
            int k = start;
            while (k < s.size() && s[k] == c) {
                k++;
            }
            result.push_back(k - j - 1);
        }
        return result;

=======

        vector<int> result;
        int n = s.size();
        int k = queryIndices.size();
        vector<int> freq(26, 0);
        int maxFreq = 0;
        for (int i = 0; i < n; ++i) {
            int ch = s[i] - 'a';
            freq[ch]++;
            maxFreq = max(maxFreq, freq[ch]);
            if (i == n - 1 || s[i] != s[i + 1]) {
                for (int j = 0; j < 26; ++j) {
                    freq[j] = 0;
                }
            }
        }
        for (int i = 0; i < k; ++i) {
            int ch = s[queryIndices[i]] - 'a';
            if (queryCharacters[i] == s[queryIndices[i]]) {
                result.push_back(maxFreq);
            } else {
                result.push_back(maxFreq - 1);
            }
        }
        return result = c;
            left = max(left, idx);
            right = min(right, idx);
            int j = left;
            int count = 0;
            while (j < n) {
                if (s[j] == c) {
                    count++;
                } else {
                    count = 0;
                }
                j++;
                res.push_back(count);
            }
        }
        return res;

=======

        vector<int> result;
        for (int i = 0; i < queryCharacters.size(); i++) {
            int start = queryIndices[i];
            char c = queryCharacters[i];
            int j = start;
            while (j >= 0 && s[j] == c) {
                j--;
            }
            int k = start;
            while (k < s.size() && s[k] == c) {
                k++;
            }
            result.push_back(k - j - 1);
        }
        return result;

=======

        int n = s.length();
        vector<int> ans;
        unordered_map<int, int> m;
        int maxLen = 0;
        for(int i = 0; i < n; i++) {
            if(m.find(s[i]) != m.end()) {
                maxLen = max(maxLen, i-m[s[i]]);
            } else {
                m[s[i]] = i;
            }
        }
        for(int i = 0; i < queryCharacters.length(); i++) {
            int idx = queryIndices[i];
            char ch = queryCharacters[i];
            if(s[idx] == ch) {
                ans.push_back(maxLen);
            } else {
                if(m.find(ch) != m.end()) {
                    ans.push_back(max(maxLen, idx-m[ch]+1));
                } else {
                    ans.push_back(idx+1);
                }
            }
        }
        return ans;
