Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> res(n, -1);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] < nums[i]) {
                res[st.top()] = nums[i];
                st.pop();
            }
            st.push(i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n, -1);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] < nums[i]) {
                res[s.top()] = nums[i];
                s.pop();
            }
            s.push(i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] < nums[i]) {
                ans[s.top()] = nums[i];
                s.pop();
            }
            s.push(i);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> res(n, -1);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && nums[i] > nums[st.top()]) {
                res[st.top()] = nums[i];
                st.pop();
            }
            st.push(i);
        }
        return res;

=======

        stack<int> s;
        int n = nums.size();
        vector<int> res(n, -1);
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && s.top() <= nums[i]) s.pop();
            if (!s.empty()) res[i] = s.top();
            s.push(nums[i]);
        }
        return res;

=======

        vector<int> res(nums.size(), -1);
        stack<int> st;
        for (int i = nums.size() - 1; i >= 0; i--) {
            while (!st.empty() && nums[st.top()] <= nums[i]) {
                st.pop();
            }
            if (!st.empty()) {
                res[i] = nums[st.top()];
            }
            st.push(i);
        }
        return res;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int second = -1;
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[j] > nums[i]) {
                    if (second == -1) {
                        second = nums[j];
                    } else {
                        second = min(second, nums[j]);
                    }
                }
            }
            result.push_back(second);
        }
        return result;

=======

        stack<int> st;
        unordered_map<int, int> m;
        for (int i = nums.size() - 1; i >= 0; i--) {
            while (!st.empty() && st.top() <= nums[i])
                st.pop();
            if (st.empty())
                m[nums[i]] = -1;
            else
                m[nums[i]] = st.top();
            st.push(nums[i]);
        }
        vector<int> ans;
        for (int i = 0; i < nums.size(); i++)
            ans.push_back(m[nums[i]]);
        return ans;

=======

        vector<int> ans;
        ans.resize(nums.size());
        for (int i = 0; i < nums.size(); i++) {
            ans[i] = -1;
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[j] > nums[i]) {
                    ans[i] = nums[j];
                    break;
                }
            }
        }
        return ans;
