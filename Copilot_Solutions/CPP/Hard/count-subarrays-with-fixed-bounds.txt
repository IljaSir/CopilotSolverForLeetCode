Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> left(n, -1), right(n, n);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top();
            }
            s.push(i);
        }
        s = stack<int>();
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                ans += (long long)(i - left[i]) * (right[i] - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n), right(n);
        stack<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && nums[stk.top()] >= nums[i]) {
                stk.pop();
            }
            left[i] = stk.empty() ? -1 : stk.top();
            stk.push(i);
        }
        stk = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.empty() && nums[stk.top()] >= nums[i]) {
                stk.pop();
            }
            right[i] = stk.empty() ? n : stk.top();
            stk.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                ans += (i - left[i]) * (right[i] - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n);
        vector<int> right(n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] < nums[i]) {
                s.pop();
            }
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }
        s = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] < nums[i]) {
                s.pop();
            }
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            if (minK <= nums[i] && nums[i] <= maxK) {
                ans += (i - left[i]) * (right[i] - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top();
            }
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                ans += (i - left[i]) * (right[i] - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] > nums[i]) {
                right[st.top()] = i;
                st.pop();
            }
            if (!st.empty()) {
                left[i] = st.top();
            }
            st.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                ans += (long long)(i - left[i]) * (right[i] - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n);
        vector<int> right(n);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && nums[st.top()] >= nums[i]) {
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        while (!st.empty()) {
            st.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && nums[st.top()] >= nums[i]) {
                st.pop();
            }
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                long long l = i - left[i];
                long long r = right[i] - i;
                ans += l * r;
            }
        }
        return ans;

=======

        long long count = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int min = nums[i];
            int max = nums[i];
            for (int j = i; j < nums.size(); ++j) {
                if (nums[j] < min) min = nums[j];
                if (nums[j] > max) max = nums[j];
                if (min >= minK && max <= maxK) {
                    ++count;
                }
            }
        }
        return count;

=======

        int n = nums.size();
        vector<int> l(n);
        vector<int> r(n);
        for (int i = 0; i < n; ++i) {
            int j = i - 1;
            while (j >= 0 && nums[j] < nums[i]) j = l[j] - 1;
            l[i] = j + 1;
        }
        for (int i = n - 1; i >= 0; --i) {
            int j = i + 1;
            while (j < n && nums[j] < nums[i]) j = r[j] + 1;
            r[i] = j - 1;
        }
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                res += (long long)(i - l[i] + 1) * (r[i] - i + 1);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        for (int i = 0; i < n; i++) {
            int l = i - 1;
            int r = i + 1;
            while (l >= 0 && nums[l] >= minK && nums[l] <= maxK) {
                l--;
            }
            while (r < n && nums[r] >= minK && nums[r] <= maxK) {
                r++;
            }
            left[i] = i - l;
            right[i] = r - i;
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += left[i] * right[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= minK && nums[i] <= maxK) {
                cnt[i] = 1;
                if (i > 0) {
                    cnt[i] += cnt[i - 1];
                }
            }
            res += cnt[i];
        }
        return res;
