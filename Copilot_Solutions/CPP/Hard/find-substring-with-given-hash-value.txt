Synthesizing 10/10 solutions

=======

        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < s.size(); i++) {
            hash = (hash - p * (s[i - k] - 'a' + 1) % modulo + modulo) % modulo;
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.length();
        vector<int> p(n, 1);
        for (int i = 1; i < n; ++i) {
            p[i] = (p[i - 1] * power) % modulo;
        }
        vector<int> h(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            h[i + 1] = (h[i] + (s[i] - 'a' + 1) * p[i]) % modulo;
        }
        for (int i = 0; i + k <= n; ++i) {
            int curHash = (h[i + k] + modulo - h[i]) % modulo;
            if (curHash == (hashValue * p[i]) % modulo) {
                return s.substr(i, k);
            }
        }
        return "";

=======

        int n = s.size();
        int p = 1;
        for (int i = 0; i < k; ++i) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; ++i) {
            hash = (hash * power + s[i] - 'a') % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < n; ++i) {
            hash = (hash * power + s[i] - 'a' - (s[i - k] - 'a') * p) % modulo;
            if (hash < 0) {
                hash += modulo;
            }
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.size();
        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < n; i++) {
            hash = (hash * power - (s[i - k] - 'a' + 1) * p + (s[i] - 'a' + 1)) % modulo;
            if (hash < 0) {
                hash += modulo;
            }
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.size();
        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) return s.substr(0, k);
        for (int i = k; i < n; i++) {
            hash = (hash - (s[i - k] - 'a' + 1) * p % modulo + modulo) % modulo;
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
            if (hash == hashValue) return s.substr(i - k + 1, k);
        }
        return "";

=======

        int n = s.size();
        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < n; i++) {
            hash = (hash * power - (s[i - k] - 'a' + 1) * p + s[i] - 'a' + 1) % modulo;
            if (hash < 0) {
                hash += modulo;
            }
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.length();
        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < n; i++) {
            hash = (hash * power + s[i] - 'a' + 1 - p * (s[i - k] - 'a' + 1)) % modulo;
            if (hash < 0) {
                hash += modulo;
            }
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.size();
        int p = 1;
        int h = 0;
        for (int i = 0; i < k; ++i) {
            h = (h + (s[i] - 'a' + 1) * p) % modulo;
            p = (p * power) % modulo;
        }
        if (h == hashValue) return s.substr(0, k);
        for (int i = k; i < n; ++i) {
            h = (h - (s[i - k] - 'a' + 1) + modulo) % modulo;
            h = (h * power) % modulo;
            h = (h + (s[i] - 'a' + 1)) % modulo;
            if (h == hashValue) return s.substr(i - k + 1, k);
        }
        return "";

=======

        int n = s.length();
        int p = 1;
        for (int i = 0; i < k; ++i) {
            p = (p * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; ++i) {
            hash = (hash * power + s[i] - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substr(0, k);
        }
        for (int i = k; i < n; ++i) {
            hash = (hash * power + s[i] - 'a' + 1 - (s[i - k] - 'a' + 1) * p % modulo + modulo) % modulo;
            if (hash == hashValue) {
                return s.substr(i - k + 1, k);
            }
        }
        return "";

=======

        int n = s.size();
        long long p = 1;
        long long h = 0;
        for (int i = 0; i < k; ++i) {
            h = (h + (s[i] - 'a' + 1) * p) % modulo;
            p = p * power % modulo;
        }
        if (h == hashValue) return s.substr(0, k);
        for (int i = k; i < n; ++i) {
            h = (h - (s[i - k] - 'a' + 1)) * power % modulo;
            h = (h + modulo) % modulo;
            h = (h + (s[i] - 'a' + 1) * p) % modulo;
            if (h == hashValue) return s.substr(i - k + 1, k);
        }
        return "";
