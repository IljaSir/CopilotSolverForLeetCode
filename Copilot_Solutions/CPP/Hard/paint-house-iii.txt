Synthesizing 5/10 solutions (Duplicates hidden)

=======

        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n + 1, vector<int>(target + 1, INT_MAX)));
        for (int i = 0; i < m; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= target; k++) {
                    if (i == 0) {
                        if (k == 1) {
                            if (houses[i] == 0 || houses[i] == j) {
                                dp[i][j][k] = houses[i] == 0 ? cost[i][j - 1] : 0;
                            }
                        }
                    } else {
                        if (houses[i] == 0 || houses[i] == j) {
                            int curCost = houses[i] == 0 ? cost[i][j - 1] : 0;
                            for (int p = 1; p <= n; p++) {
                                if (j == p) {
                                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][p][k] + curCost);
                                } else {
                                    if (k > 1) {
                                        dp[i][j][k] = min(dp[i][j][k], dp[i - 1][p][k - 1] + curCost);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        int result = INT_MAX;
        for (int i = 1; i <= n; i++) {
            result = min(result, dp[m - 1][i][target]);
        }
        return result == INT_MAX ? -1 : result;

=======

        int kMax = 0x3f3f3f3f;
        vector<vector<vector<int>>> dp(m+1, vector<vector<int>>(n+1, vector<int>(target+1, kMax)));
        for (int i = 0; i <= n; i++) {
            dp[0][i][0] = 0;
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= target; k++) {
                    if (houses[i-1] == 0) {
                        for (int l = 1; l <= n; l++) {
                            if (l == j) {
                                dp[i][j][k] = min(dp[i][j][k], dp[i-1][l][k] + cost[i-1][j-1]);
                            } else {
                                dp[i][j][k] = min(dp[i][j][k], dp[i-1][l][k-1] + cost[i-1][j-1]);
                            }
                        }
                    } else {
                        if (houses[i-1] == j) {
                            dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k]);
                        } else {
                            dp[i][j][k] = min(dp[i][j][k], dp[i-1][j][k-1]);
                        }
                    }
                }
            }
        }
        int ans = kMax;
        for (int i = 1; i <= n; i++) {
            ans = min(ans, dp[m][i][target]);
        }
        return ans == kMax ? -1 : ans;
