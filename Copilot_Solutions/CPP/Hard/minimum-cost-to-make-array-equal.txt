Synthesizing 10/10 solutions

=======

        long long ans = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    ans += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    ans += cost[i - 1];
                }
            }
        }
        return ans;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i - 1]) {
                res += min(cost[i], cost[i - 1]);
                if (cost[i] < cost[i - 1]) {
                    nums[i] = nums[i - 1] + 1;
                } else {
                    nums[i - 1] = nums[i] + 1;
                }
            }
        }
        return res;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i - 1]) {
                res += min(cost[i], cost[i - 1]);
                if (cost[i - 1] < cost[i]) {
                    nums[i] = nums[i - 1] + 1;
                }
            }
        }
        return res;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    res += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    res += cost[i - 1];
                }
            }
        }
        return res;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    res += cost[i];
                    nums[i] = nums[i - 1] + 1;
                } else {
                    res += cost[i - 1];
                    nums[i - 1] = nums[i] + 1;
                }
            }
        }
        return res;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    res += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    res += cost[i - 1];
                }
            }
        }
        return res;

=======

        long long sum = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                if (cost[i] > cost[i + 1]) {
                    sum += cost[i + 1];
                    cost[i + 1] = cost[i];
                } else {
                    sum += cost[i];
                }
            }
        }
        return sum;

=======

        long long ans = 0;
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                ans += min(cost[i], cost[i + 1]);
                if (cost[i] < cost[i + 1]) {
                    nums[i + 1] = nums[i] + 1;
                } else {
                    nums[i] = nums[i + 1] + 1;
                }
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i-1]) {
                ans += min(cost[i], cost[i-1]);
                if (cost[i] < cost[i-1]) {
                    nums[i] = nums[i-1] + 1;
                } else {
                    nums[i-1] = nums[i] + 1;
                }
            }
        }
        return ans;

=======

        long long res = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > nums[i - 1]) continue;
            res += min(cost[i], cost[i - 1]);
            cost[i] = max(cost[i], cost[i - 1]);
            nums[i] = nums[i - 1];
        }
        return res;
