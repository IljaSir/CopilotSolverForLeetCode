Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (long long i = 1; i <= n; i *= 10) {
            long long divider = i * 10;
            count += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return count;

=======

        int res = 0;
        for (long long i = 1; i <= n; i *= 10) {
            long long divider = i * 10;
            res += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return res;

=======

        int ans = 0;
        for (long long i = 1; i <= n; i *= 10) {
            long long divider = i * 10;
            ans += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return ans;

=======

        int res = 0;
        for (long i = 1; i <= n; i *= 10) {
            long divider = i * 10;
            res += (n / divider) * i + min(max(n % divider - i + 1, 0L), i);
        }
        return res;

=======

        long long res = 0;
        for (long long i = 1; i <= n; i *= 10) {
            long long divider = i * 10;
            res += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return res;

=======

        if (n <= 0) return 0;
        int res = 0;
        for (long long m = 1; m <= n; m *= 10) {
            long long a = n / m, b = n % m;
            res += (a + 8) / 10 * m + (a % 10 == 1) * (b + 1);
        }
        return res;

=======

        long long int ans = 0;
        for (long long int i = 1; i <= n; i *= 10) {
            long long int divider = i * 10;
            ans += (n / divider) * i + min(max(n % divider - i + 1, 0LL), i);
        }
        return ans;

=======

        if (n <= 0) return 0;
        if (n < 10) return 1;
        int d = 1;
        while ((n / d) >= 10) d *= 10;
        int high = n / d;
        int low = n % d;
        if (high == 1) {
            return countDigitOne(d - 1) + countDigitOne(low) + low + 1;
        } else {
            return countDigitOne(d - 1) * high + countDigitOne(low) + d;
        }

=======

        int ans = 0;
        int base = 1;
        while (n >= base) {
            int cur = n % (base * 10) / base;
            int high = n / (base * 10);
            int low = n % base;
            if (cur == 0) {
                ans += high * base;
            } else if (cur == 1) {
                ans += high * base + low + 1;
            } else {
                ans += (high + 1) * base;
            }
            base *= 10;
        }
        return ans;
