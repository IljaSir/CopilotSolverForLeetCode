Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> dp(n, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = max(0, i-k); j < i; j++) {
                if (arr[i] <= arr[j]) {
                    dp[i] = min(dp[i], dp[j] + arr[j] - arr[i] + 1);
                } else {
                    dp[i] = min(dp[i], dp[j]);
                }
            }
        }
        return dp[n-1];

=======

        int n = arr.size();
        int dp[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i-1] + max(0, arr[i] - arr[i-1] + 1);
            if (i >= k) {
                dp[i] = min(dp[i], dp[i-k] + max(0, arr[i] - arr[i-k] + 1));
            }
        }
        return dp[n-1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        int sum = accumulate(arr.begin(), arr.end(), 0);
        int target = sum - k;
        if (target < 0) return -1;
        if (target == 0) return 0;
        int res = n;
        int l = 0, r = 0, cur = 0;
        while (r < n) {
            cur += arr[r];
            while (cur > target) {
                cur -= arr[l];
                l++;
            }
            if (cur == target) {
                res = min(res, n - (r - l + 1));
            }
            r++;
        }
        return res;
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());
        int l = 0, r = 0, cur = 0;
        int res = n;
        while (r < n) {
            cur += arr[r];
            while (cur > k) {
                cur -= arr[l];
                l++;
            }
            if (cur == k) {
                res = min(res, n - (r - l + 1));
            }
            r++;
        }
        return res;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            int diff = arr[i] - arr[i - 1];
            if (diff > 0) {
                continue;
            }
            int change = 1 - diff;
            arr[i] += change;
            dp[i] += change;
            if (i >= k) {
                dp[i] += dp[i - k];
            }
        }
        return accumulate(dp.begin(), dp.end(), 0);
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> sums;
        for (int i = 0; i < n; ++i) {
            int sum = arr[i];
            for (int j = i + 1; j < n; ++j) {
                sum += arr[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int ans = 1e9;
        for (int i = 0; i < sums.size(); ++i) {
            int sum = sums[i];
            int cnt = i + 1;
            if (sum > k) {
                continue;
            }
            int change = k - sum;
            if (change % cnt == 0) {
                int op = change / cnt;
                ans = min(ans, kIncreasing(arr, op));
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i-1];
            if (arr[i] > arr[i-1]) continue;
            dp[i] += arr[i-1] - arr[i] + 1;
            arr[i] = arr[i-1] + 1;
        }
        int ans = dp[n-1];
        for (int i = 1; i < n; i++) {
            if (i >= k) {
                int t = dp[i-1];
                t -= max(0, arr[i-k] - arr[i-1]);
                t += max(0, arr[i-k] - arr[i] + 1);
                ans = min(ans, t);
            }
            if (i + k < n) {
                int t = dp[i-1];
                t -= max(0, arr[i-1] - arr[i+k]);
                t += max(0, arr[i] - arr[i+k] - 1);
                ans = min(ans, t);
            }
        }
        return ans;
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        if (n == 1) return 0;
        int p = 0, q = 0;
        for (int i = 0; i < n; i++) {
            if (i < k) p += arr[i];
            else q += arr[i];
        }
        vector<int> left = {p};
        for (int i = k; i < n; i++) {
            p -= arr[i-k];
            p += arr[i];
            left.push_back(p);
        }
        vector<int> right = {q};
        for (int i = n-1; i >= k; i--) {
            q -= arr[i];
            q += arr[i-k];
            right.push_back(q);
        }
        reverse(right.begin(), right.end());
        vector<int> b(k+1, 0);
        for (int i = 0; i <= k; i++) {
            b[i] = left[i] + right[i];
        }
        sort(b.begin(), b.end());
        return kIncreasing(b, k);

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            int diff = arr[i] - arr[i - 1];
            if (diff > 0) {
                dp[i] = dp[i - 1];
            } else {
                int add = -diff;
                if (i - k >= 0) {
                    add = max(add, dp[i - k] + 1);
                }
                dp[i] = dp[i - 1] + add;
                arr[i] += add;
            }
        }
        return dp[n - 1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        if (k == 1) {
            return n - 1;
        }
        sort(arr.begin(), arr.end());
        vector<int> sum(n, 0);
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + arr[i];
        }
        int res = INT_MAX;
        for (int i = k - 1; i < n; i++) {
            int cur = 0;
            int l = i - k + 1;
            int r = i;
            int mid = (l + r) / 2;
            if (k % 2 == 0) {
                cur = (arr[mid] + arr[mid + 1]) * (mid - l + 1) - (sum[mid] - sum[l - 1]);
                cur += sum[r] - sum[mid + 1] - (arr[mid] + arr[mid + 1]) * (r - mid - 1);
            } else {
                cur = (arr[mid] * 2) * (mid - l + 1) - (sum[mid] - sum[l - 1]);
                cur += sum[r] - sum[mid + 1] - (arr[mid] * 2) * (r - mid - 1);
            }
            res = min(res, cur);
        }
        return res + kIncreasing(arr, k);

=======

        int n = arr.size();
        int ans = 0;
        for (int i = k; i < n; ++i) {
            if (arr[i] <= arr[i-k]) {
                ans += arr[i-k] - arr[i] + 1;
                arr[i] = arr[i-k] + 1;
            }
        }
        return ans;
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        int ans = 0;
        vector<int> diff;
        for (int i = 0; i < n-1; ++i) {
            diff.push_back(arr[i+1] - arr[i]);
        }
        sort(diff.begin(), diff.end());
        for (int i = 0; i < n-k; ++i) {
            ans += diff[i];
        }
        return ans + kIncreasing(arr, k);

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            dp[i] = max(0, arr[i] - arr[i - 1] + 1);
            if (i >= k) {
                dp[i] += dp[i - k];
            }
            arr[i] = max(arr[i], arr[i - 1] + 1);
        }
        return dp[n - 1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> pre(n + 1, 0);
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + arr[i];
        }
        int ans = INT_MAX;
        for (int i = 0; i + k <= n; i++) {
            int t = (k + 1) / 2;
            int mid = pre[i + t] - pre[i];
            int cnt = kIncreasing(arr, k);
            ans = min(ans, cnt + (pre[i + k] - pre[i + t]) - mid);
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i], dp[i - 1]);
            if (arr[i] > arr[i - 1]) continue;
            int diff = arr[i - 1] - arr[i] + 1;
            arr[i] += diff;
            dp[i] = max(dp[i], dp[max(0, i - k)] + diff);
        }
        return dp[n - 1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> a;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) continue;
            a.push_back(arr[i]);
        }
        int m = a.size();
        int ans = 1e9;
        for (int i = 0; i < m; i++) {
            vector<int> b;
            for (int j = i; j < m; j++) {
                b.push_back(a[j]);
                if (b.size() >= k) {
                    ans = min(ans, kIncreasing(b, k));
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for(int i = 1; i < n; i++) {
            dp[i] = dp[i-1];
            if(arr[i] > arr[i-1]) continue;
            int diff = arr[i-1] - arr[i] + 1;
            dp[i] += diff;
            arr[i] += diff;
            if(i >= k) arr[i-k] -= diff;
        }
        return dp[n-1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> sum(n+1, 0);
        for(int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + arr[i];
        }
        int res = INT_MAX;
        for(int i = k; i <= n; i++) {
            int l = i-k, r = i-1;
            int mid = (l+r)/2;
            int sum1 = sum[mid+1] - sum[l];
            int sum2 = sum[r+1] - sum[mid+1];
            int diff = sum2 - sum1;
            res = min(res, kIncreasing(arr, mid-l+1) + kIncreasing(arr, r-mid) + diff);
        }
        return res;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            if (arr[i] <= arr[i - 1] + k) {
                dp[i] = dp[i - 1];
            } else {
                int delta = arr[i] - arr[i - 1] - k;
                dp[i] = dp[i - 1] + delta;
                arr[i] -= delta;
            }
        }
        return dp[n - 1];
    }
    int minOperations(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + arr[i];
        }
        int ans = INT_MAX;
        for (int i = k; i <= n; i++) {
            int target = (i - k + 1) * k / 2;
            int cur = abs(sum[i] - sum[i - k] - target);
            ans = min(ans, cur + kIncreasing(arr, k));
        }
        return ans;
