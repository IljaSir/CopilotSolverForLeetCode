Synthesizing 10/10 solutions

=======

        if (n == 1) return 5;
        if (n == 2) return 10;
        if (n == 3) return 19;
        if (n == 4) return 35;
        int a = 1, e = 1, i = 1, o = 1, u = 1;
        int a2 = 0, e2 = 0, i2 = 0, o2 = 0, u2 = 0;
        int mod = 1000000007;
        for (int j = 1; j < n; j++) {
            a2 = (e + i + u) % mod;
            e2 = (a + i) % mod;
            i2 = (e + o) % mod;
            o2 = i % mod;
            u2 = (i + o) % mod;
            a = a2;
            e = e2;
            i = i2;
            o = o2;
            u = u2;
        }
        return (a + e + i + o + u) % mod;

=======

        int a = 1, e = 1, i = 1, o = 1, u = 1;
        int mod = 1e9 + 7;
        for (int j = 1; j < n; ++j) {
            int a1 = (e + i + u) % mod;
            int e1 = (a + i) % mod;
            int i1 = (e + o) % mod;
            int o1 = i;
            int u1 = (i + o) % mod;
            a = a1;
            e = e1;
            i = i1;
            o = o1;
            u = u1;
        }
        return (a + e + i + o + u) % mod;

=======

        long long mod = 1e9 + 7;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        for (int j = 1; j < n; j++) {
            long long a2 = e, e2 = (a + i) % mod,
                      i2 = (a + e + o + u) % mod,
                      o2 = (i + u) % mod, u2 = a;
            a = a2, e = e2, i = i2, o = o2, u = u2;
        }
        return (a + e + i + o + u) % mod;

=======

        const int M = 1000000007;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        for (int j = 2; j <= n; ++j) {
            long long na = (e + i + u) % M;
            long long ne = (a + i) % M;
            long long ni = (e + o) % M;
            long long no = i;
            long long nu = (i + o) % M;
            a = na;
            e = ne;
            i = ni;
            o = no;
            u = nu;
        }
        return (a + e + i + o + u) % M;

=======

        const int M = 1000000007;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        while (--n) {
            long long a2 = e, e2 = a + i, i2 = a + e + o + u, o2 = i + u, u2 = a;
            a = a2 % M, e = e2 % M, i = i2 % M, o = o2 % M, u = u2 % M;
        }
        return (a + e + i + o + u) % M;

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < 5; i++) dp[0][i] = 1;
        for (int i = 1; i < n; i++) {
            dp[i][0] = (dp[i-1][1] + dp[i-1][2] + dp[i-1][4]) % mod;
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % mod;
            dp[i][2] = (dp[i-1][1] + dp[i-1][3]) % mod;
            dp[i][3] = dp[i-1][2];
            dp[i][4] = (dp[i-1][2] + dp[i-1][3]) % mod;
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) ans = (ans + dp[n-1][i]) % mod;
        return ans;

=======

        long long int a = 1, e = 1, i = 1, o = 1, u = 1;
        long long int mod = 1000000007;
        for(int j=1; j<n; j++){
            long long int a1 = (e+i+u)%mod;
            long long int e1 = (a+i)%mod;
            long long int i1 = (e+o)%mod;
            long long int o1 = (i)%mod;
            long long int u1 = (i+o)%mod;
            a = a1;
            e = e1;
            i = i1;
            o = o1;
            u = u1;
        }
        return (a+e+i+o+u)%mod;

=======

        long long mod = 1e9 + 7;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        for (int j = 1; j < n; j++) {
            long long a2 = e, e2 = (a + i) % mod,
                      i2 = (a + e + o + u) % mod,
                      o2 = (i + u) % mod, u2 = a;
            a = a2, e = e2, i = i2, o = o2, u = u2;
        }
        return (a + e + i + o + u) % mod;

=======

        const int M = 1000000007;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        for (int j = 2; j <= n; ++j) {
            long lo

=======

        int a=1, e=1, i=1, o=1, u=1;
        int mod = 1000000007;
        for (int j=1; j<n; j++) {
            int new_a = (e + i + u) % mod;
            int new_e = (a + i) % mod;
            int new_i = (e + o) % mod;
            int new_o = i;
            int new_u = (i + o) % mod;
            a = new_a;
            e = new_e;
            i = new_i;
            o = new_o;
            u = new_u;
        }
        return (a + e + i + o + u) % mod;

=======

        // aeiou
        // 1, 2, 3, 4, 5
        // a -> e
        // e -> a, i
        // i -> a, e, o, u
        // o -> i, u
        // u -> a
        // a -> e, i, u
        // e -> i, o
        // i -> o
        // o -> i
        // u -> o, i
        // 1, 2, 3, 4, 5
        // 1 -> 2, 3, 5
        // 2 -> 1, 3
        // 3 -> 1, 2, 4, 5
        // 4 -> 3, 5
        // 5 -> 1, 3
        // a -> e, i, u
        // e -> a, i
        // i -> a, e, o, u
        // o -> i, u
        // u -> a
        // a -> e, i, u
        // e -> i, o
        // i -> o
        // o -> i
        // u -> o, i
        // 1, 2, 3, 4, 5
        // 1 -> 2, 3, 5
        // 2 -> 1, 3
        // 3 -> 1, 2, 4, 5
        // 4 -> 3, 5
        // 5 -> 1, 3
        // a -> e, i, u
        // e -> a, i
        // i -> a, e, o, u
        // o -> i, u
        // u -> a
        // a -> e, i, u
        // e -> i, o
        // i -> o
        // o -> i
        // u -> o, i
        // 1, 2, 3, 4, 5
        // 1 -> 2, 3, 5
        // 2 -> 1, 3
        // 3 -> 1, 2, 4, 5
        // 4 -> 3, 5
        //ng na = (e + i + u) % M;
            long long ne = (a + i) % M;
            long long ni = (e + o) % M;
            long long no = i;
            long long nu = (i + o) % M;
            a = na;
            e = ne;
            i = ni;
            o = no;
            u = nu;
        }
        return (a + e + i + o + u) % M;

=======

        const int M = 1000000007;
        long long a = 1, e = 1, i = 1, o = 1, u = 1;
        while (--n) {
            long long a2 = e, e2 = a + i, i2 = a + e + o + u, o2 = i + u, u2 = a;
            a = a2 % M, e = e2 % M, i = i2 % M, o = o2 % M, u = u2 % M;
        }
        return (a + e + i + o + u) % M;

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < 5; i++) dp[0][i] = 1;
        for (int i = 1; i < n; i++) {
            dp[i][0] = (dp[i-1][1] + dp[i-1][2] + dp[i-1][4]) % mod;
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % mod;
            dp[i][2] = (dp[i-1][1] + dp[i-1][3]) % mod;
            dp[i][3] = dp[i-1][2];
            dp[i][4] = (dp[i-1][2] + dp[i-1][3]) % mod;
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) ans = (ans + dp[n-1][i]) % mod;
        return ans;

=======

        long long int a = 1, e = 1, i = 1, o = 1, u = 1;
        long long int mod = 1000000007;
        for(int j=1; j<n; j++){
            long long int a1 = (e+i+u)%mod;
            long long int e1 = (a+i)%mod;
            long long int i1 = (e+o)%mod;
            long long int o1 = (i)%mod;
            long long int u1 = (i+o)%mod;
            a = a1;
            e = e1;
            i = i1;
            o = o1;
            u = u1;
        }
        return (a+e+i+o+u)%mod;

=======

        const int MOD = 1e9 + 7;
        vector<int> dp(5, 1);
        for (int i = 0; i < n - 1; ++i) {
            vector<int> temp(5, 0);
            temp[0] = (dp[1] + dp[2] + dp[4]) % MOD;
            temp[1] = (dp[0] + dp[2]) % MOD;
            temp[2] = (dp[1] + dp[3]) % MOD;
            temp[3] = dp[2];
            temp[4] = (dp[2] + dp[3]) % MOD;
            dp = temp;
        }
        int ans = 0;
        for (int i = 0; i < 5; ++i) {
            ans = (ans + dp[i]) % MOD;
        }
        return ans;

=======

        int a=1, e=1, i=1, o=1, u=1;
        int mod = 1000000007;
        for (int j=1; j<n; j++) {
            int new_a = (e + i + u) % mod;
            int new_e = (a + i) % mod;
            int new_i = (e + o) % mod;
            int new_o = i;
            int new_u = (i + o) % mod;
            a = new_a;
            e = new_e;
            i = new_i;
            o = new_o;
            u = new_u;
        }
        return (a + e + i + o + u) % mod;
