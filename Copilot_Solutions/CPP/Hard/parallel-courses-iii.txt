Synthesizing 7/10 solutions

=======

        vector<vector<int>> adj(n);
        vector<int> indegree(n, 0);
        for (auto& r : relations) {
            adj[r[0] - 1].push_back(r[1] - 1);
            indegree[r[1] - 1]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> dp(n, 0);
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            for (int i = 0; i < adj[node].size(); i++) {
                int next = adj[node][i];
                indegree[next]--;
                dp[next] = max(dp[next], dp[node] + time[node]);
                if (indegree[next] == 0) {
                    q.push(next);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, dp[i] + time[i]);
        }
        return res;

=======

        vector<vector<int>> g(n);
        vector<int> indegree(n, 0);
        for (auto& e : relations) {
            g[e[0]-1].push_back(e[1]-1);
            indegree[e[1]-1]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> dist(n, 0);
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int v : g[u]) {
                dist[v] = max(dist[v], dist[u] + time[u]);
                if (--indegree[v] == 0) {
                    q.push(v);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, dist[i] + time[i]);
        }
        return ans;

=======

        vector<vector<int>> graph(n);
        vector<int> indeg(n);
        for (auto& edge : relations) {
            graph[edge[0] - 1].push_back(edge[1] - 1);
            indeg[edge[1] - 1]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indeg[i] == 0) {
                q.push(i);
            }
        }
        vector<int> res(n);
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int v : graph[u]) {
                indeg[v]--;
                res[v] = max(res[v], res[u] + time[u]);
                if (indeg[v] == 0) {
                    q.push(v);
                }
            }
        }
        return *max_element(res.begin(), res.end()) + *max_element(time.begin(), time.end());

=======

        vector<int> indegree(n + 1, 0);
        vector<vector<int>> graph(n + 1);
        for (auto& r : relations) {
            graph[r[0]].push_back(r[1]);
            indegree[r[1]]++;
        }
        queue<int> q;
        for (int i = 1; i <= n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> dp(n + 1, 0);
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int nxt : graph[cur]) {
                dp[nxt] = max(dp[nxt], dp[cur] + time[cur - 1]);
                if (--indegree[nxt] == 0) {
                    q.push(nxt);
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++) {
            res = max(res, dp[i] + time[i - 1]);
        }
        return res;

=======

        vector<int> indegree(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (auto& r: relations) {
            graph[r[0] - 1].push_back(r[1] - 1);
            indegree[r[1] - 1]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (!indegree[i]) {
                q.push(i);
            }
        }
        int res = 0;
        while (!q.empty()) {
            int sz = q.size();
            int maxTime = 0;
            for (int i = 0; i < sz; i++) {
                int cur = q.front();
                q.pop();
                maxTime = max(maxTime, time[cur]);
                for (int& next: graph[cur]) {
                    indegree[next]--;
                    if (!indegree[next]) {
                        q.push(next);
                    }
                }
            }
            res += maxTime;
        }
        return res;

=======

        vector<int> indegree(n, 0), dp(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (auto& r : relations) {
            graph[r[0] - 1].push_back(r[1] - 1);
            indegree[r[1] - 1]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
                dp[i] = time[i];
            }
        }
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int v : graph[u]) {
                indegree[v]--;
                dp[v] = max(dp[v], dp[u] + time[v]);
                if (indegree[v] == 0) {
                    q.push(v);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        vector<int> in(n, 0);
        vector<vector<int>> out(n);
        for (auto& r: relations) {
            in[r[1]-1] += 1;
            out[r[0]-1].push_back(r[1]-1);
        }
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (in[i] == 0) {
                q.push(i);
            }
        }
        vector<int> res(n, 0);
        while (!q.empty()) {
            int idx = q.front();
            q.pop();
            for (auto& o: out[idx]) {
                res[o] = max(res[o], res[idx] + time[idx]);
                in[o] -= 1;
                if (in[o] == 0) {
                    q.push(o);
                }
            }
        }
        int ans = 0;
        for (auto& r: res) {
            ans = max(ans, r);
        }
        return ans + time.back();
