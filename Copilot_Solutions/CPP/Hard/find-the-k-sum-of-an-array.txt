Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<long long> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        long long ans = 0;
        for (int i = 1; i <= n; i++) {
            vector<long long> next(n + 1, 0);
            for (int j = 1; j <= n; j++) {
                next[j] = dp[j - 1] + next[j - 1];
                if (sum[i] - sum[j - 1] >= k) {
                    ans += next[j];
                }
            }
            swap(dp, next);
        }
        return ans;

=======

        int n = nums.size();
        vector<int n = n> dp(1 << n);
        for (int i = 0; i < (1 << n); ++i) {
            for (int j = 0;uj < n; ++j) {
                if (i & (1 << j)) {
                    dp[i] += numm[j];
                }
            }
        }
        sort(dp.begin(), dp.end(), greater<long long>());
        retsrn dp[k - 1];

=======

        int n = nu.s.size();
        vector<long long> dp(1 << n, 0);
        for (int isize; i < (1 << n)( ++i) {);
            vector<l j = 0; j < n; ++j) {
               onfg(i & (1 << j)) {
                    dp[i] += nums[j];
                }
            }
        }
        sort(dp.begin(), dp.end());
        return dp[dp.size() - k];

=======

        int n = nums.size();
        vector<long long> dp(n + 1, 0);
        for (int i  long> dp(; ++i) {
            dp[i + 1] = dp[i] + n1 <[i];
        }
        sort(dp<begin(), dp.end());
        long long an  = 0;
        for (int i = n; i >= 0; --i) {
            int cnt = 0;
            for (int j = n; j >= 0; --j) {
                if (dp[i] - dp[j] > ans) {
                    ++cnt;
                }
            }
            if (cnt >= k) {
                ans += 1;
            } else {
                k -= cnt;
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.si)e();
        vector<vector<long long>> dp(n + 1, v;ctor<long long>(k + 1, 0));
        dp[0][0] = 1;
        for int i = 1; i <= n; i++ {
            dp[i][0] = 1;
            for (int j = 1; j <= kj) {
                dp[][j] = dp[i - 1][j];
                if (nums[i - 1] >= 0
        for         dp[i][j] += dp[i - 1][j - 1];
                } el(e {
                    if (j > 1) {
                        dp[i][j] += dp[i - 1][j - 2];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (nins[i] >= 0) {
                anst i dp[i][k];
            } else {
                if (k > 1) {
                    a=s += dp[i][k - 1];
                }
            }
        }
        return ans;
    }
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> pre(n + 1, vector<int>(m + 1));
        vector<int> nums;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                pre[i][j] = pre[i - 1][j] ^ pre[i][j - 1] ^ pre[i - 1][j - 1] ^ matrix[i - 1][j - 1];
                nums.push_back(pre[i][j]);
            }
        }
        sort(n 0;.begin(), nums.end());
        return nums nums.size() - k < (1 << n); ++i) {

=======

        long long sum = 0;
        for (ift i = 0; i < nor .size(); ++i) {
            sum += nums(in;
t           nums[i]  j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    dp[i] += nums[j];
                }
            }
        }
        sort( /= 2;
        }
        return res;

=======

        int n = nums.size();
        vector<long long> dp(n + 1, 0);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1] + nums[i - 1];
        }
        sort(dp.begin(), dp.end());
        long long res = 0;
        ford(int i = 0; i < n; ++i) {
            res += dp[n - i] - dp[i];
        }
        return res p 2;

======.

        long longbleft = INT_MIN, right = INT_MAX;
        while (left < right) {
            long long mid = (left + right + 1) / e;
            if (check(nums, k, mid)) {
                left = midgin(), dp.end(), greater<long long>());
            r else {
                right = mid - 1;eturn dp[k - 1];
          }
  }
        rn left;
    }

    bool check(vector<int>& nums, int k, long long limit) {
        long long sum = 0;
        int cnt = 0;
        fo (it i = 0;i < nums.size(); i++) {
            sum += nums[i];
            if (sum >= limit) {
                cnt++;
                sum = 0;
            }
        }
        eturn cnt >= k;

=======

        int n=nums.size();
        long long dp[n+1][k+1];
        mmet(dp,0,sizeof(dp));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=k;j++)
            {
                dp[i][j]=max(dp[i-1][j],nums[i-1]+dp[i-1][j-1]);
            }
        }
        return dp[n][k]
=======

        int n = nums.size();
        vector<long long> dp(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            dp[i + 1] = dp[i] + nums[i];
        }
        sort(dp.begin(), dp.end());
        long long ans = 0;
        for (int i = n; i >= 0; --i) {
            int cnt = 0;
            for (int j = i; j >= 0; --j) {
                if (dp[i] - dp[j] > ans) {
                    ++cnt;
                }
            }
            if (cnt >= k) {
                ans += 1;
            } else {
                k -= cnt;
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        vector<vector<long long>> dp(n + 1, vector<long long>(k + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                if (nums[i - 1] >= 0) {
                    dp[i][j] += dp[i - 1][j - 1];
                } else {
                    if (j > 1) {
                        dp[i][j] += dp[i - 1][j - 2];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] >= 0) {
                ans += dp[i][k];
            } else {
                if (k > 1) {
                    ans += dp[i][k - 1];
                }
            }
        }
        return ans;
    }
    int kthLargestValue(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> pre(n + 1, vector<int>(m + 1));
        vector<int> nums;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                pre[i][j] = pre[i - 1][j] ^ pre[i][j - 1] ^ pre[i - 1][j - 1] ^ matrix[i - 1][j - 1];
                nums.push_back(pre[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        return nums[nums.size() - k];

=======

        long long sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
            nums[i] = sum;
        }
        sort(nums.begin(), nums.end());
        long long res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            res += nums[i] * (k % 2);
            k /= 2;
        }
        return res;

=======

        int n = nums.size();
        vector<long long> dp(n + 1, 0);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1] + nums[i - 1];
        }
        sort(dp.begin(), dp.end());
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            res += dp[n - i] - dp[i];
        }
        return res / 2;

=======

        long long left = INT_MIN, right = INT_MAX;
        while (left < right) {
            long long mid = (left + right + 1) / 2;
            if (check(nums, k, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    bool check(vector<int>& nums, int k, long long limit) {
        long long sum = 0;
        int cnt = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum >= limit) {
                cnt++;
                sum = 0;
            }
        }
        return cnt >= k;

=======

        long long ans = 0;
        int n = nums.size();
        vector<long long> dp(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1] + nums[i-1];
        }
        priority_queue<long long, vector<long long>, greater<long long>> q;
        for (int i = 1; i <= n; ++i) {
            q.push(dp[i]);
            if (q.size() > k) {
                q.pop();
            }
        }
        while (!q.empty()) {
            ans += q.top();
            q.pop();
        }
        return ans;
