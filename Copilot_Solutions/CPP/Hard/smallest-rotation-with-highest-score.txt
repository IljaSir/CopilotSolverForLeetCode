Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> change(n, 0);
        for (int i = 0; i < n; ++i) {
            change[(i - nums[i] + 1 + n) % n] -= 1;
        }
        int best = -n, ans = 0, now = 0;
        for (int i = 0; i < n; ++i) {
            now += change[i];
            if (now > best) {
                best = now;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> change(n);
        for (int i = 0; i < n; ++i) {
            change[(i - nums[i] + 1 + n) % n] -= 1;
        }
        int best = 0;
        int best_i = 0;
        int now = 0;
        for (int i = 0; i < n; ++i) {
            now += change[i];
            if (now > best) {
                best = now;
                best_i = i;
            }
        }
        return best_i;

=======

        int n = nums.size();
        vector<int> diff(n + 1, 0);
        for (int i = 0; i < n; i++) {
            diff[(i - nums[i] + 1 + n) % n]--;
            diff[(i + 1) % n]++;
            if (i >= nums[i]) {
                diff[0]--;
            }
        }
        int best = -n, ans = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            cur += diff[i];
            if (cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(n + 1);
        for (int i = 0; i < n; ++i) {
            int left = (i - nums[i] + 1 + n) % n;
            int right = (i + 1) % n;
            diff[left]--;
            diff[right]++;
            if (left > right) diff[0]--;
        }
        int best = -n, ans = 0, cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += diff[i];
            if (cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> changes(n, 0);
        for (int i = 0; i < n; ++i) {
            int left = (i - nums[i] + 1 + n) % n;
            int right = (i + 1) % n;
            --changes[left];
            ++changes[right];
            if (left > right) {
                --changes[0];
            }
        }
        int best = 0;
        int bestIdx = 0;
        int curr = 0;
        for (int i = 0; i < n; ++i) {
            curr += changes[i];
            if (curr > best) {
                best = curr;
                bestIdx = i;
            }
        }
        return bestIdx;

=======

        int n = nums.size();
        vector<int> diff(n);
        for (int i = 0; i < n; i++) {
            diff[(i - nums[i] + 1 + n) % n]--;
        }
        int best = 0, score = 0;
        for (int i = 0; i < n; i++) {
            score += diff[i];
            if (score > best) {
                best = score;
                k = i;
            }
        }
        return k;

=======

        int N = nums.size();
        vector<int> change(N, 0);
        for (int i = 0; i < N; ++i) {
            int left = (i - nums[i] + 1 + N) % N, right = (i + 1) % N;
            change[left]--;
            change[right]++;
            if (left > right) {
                change[0]--;
            }
        }
        int best = -N, ans = 0, now = 0;
        for (int i = 0; i < N; ++i) {
            now += change[i];
            if (now > best) {
                best = now;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            int l = (i - nums[i] + 1 + n) % n;
            int r = (i + 1) % n;
            score[l]--;
            score[r]++;
            if (l > r) {
                score[0]--;
            }
        }
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            score[i] += score[i - 1];
            if (score[i] > score[ans]) {
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(n+1, 0);
        for(int i = 0; i < n; i++) {
            diff[(i - nums[i] + 1 + n) % n]--;
            diff[(i + 1) % n]++;
            if(i - nums[i] + 1 < 0) diff[0]--;
        }
        int best = -n, ans = 0, cur = 0;
        for(int i = 0; i < n; i++) {
            cur += diff[i];
            if(cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> point(n, 0);
        for (int i = 0; i < n; ++i) {
            if (nums[i] <= i) {
                point[0] += 1;
                point[i - nums[i] + 1] -= 1;
            } else {
                point[i + 1] += 1;
                point[i - nums[i] + 1] -= 1;
            }
        }
        for (int i = 1; i < n; ++i) {
            point[i] += point[i - 1];
        }
        int max_point = 0;
        int max_index = 0;
        for (int i = 0; i < n; ++i) {
            if (point[i] > max_point) {
                max_point = point[i];
                max_index = i;
            }
        }
        return max_index;
