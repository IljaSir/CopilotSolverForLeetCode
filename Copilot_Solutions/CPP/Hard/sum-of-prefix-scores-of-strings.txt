Synthesizing 9/10 solutions

=======

        int n = words.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (words[i].size() > words[j].size() && words[i].substr(0, words[j].size()) == words[j]) {
                    ans[i] += ans[j] + 1;
                }
            }
        }
        return ans;

=======

        vector<int> result;
        for (int i = 0; i < words.size(); i++) {
            int score = 0;
            for (int j = 0; j < words.size(); j++) {
                if (i != j) {
                    if (words[j].find(words[i]) == 0) {
                        score++;
                    }
                }
            }
            result.push_back(score);
        }
        return result;

=======

        vector<int> res;
        for (int i = 0; i < words.size(); ++i) {
            int sum = 0;
            for (int j = 0; j < words[i].size(); ++j) {
                for (int k = i; k < words.size(); ++k) {
                    if (words[k].size() < j + 1) continue;
                    if (words[k].substr(0, j + 1) == words[i].substr(0, j + 1)) {
                        ++sum;
                    }
                }
            }
            res.push_back(sum);
        }
        return res;

=======

        vector<int> result(words.size());
        for (int i = 0; i < words.size(); ++i) {
            for (int j = 0; j < words[i].size(); ++j) {
                for (int k = 0; k < words.size(); ++k) {
                    if (words[k].find(words[i].substr(0, j + 1)) == 0) {
                        result[i]++;
                    }
                }
            }
        }
        return result;

=======

        int n = words.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j <= words[i].size(); ++j) {
                for (int k = 0; k < n; ++k) {
                    if (words[k].size() > j && words[k].substr(0, j) == words[i].substr(0, j)) {
                        ans[i] += 1;
                    }
                }
            }
        }
        return ans;

=======

        vector<int> ans(words.size(), 0);
        unordered_map<string, int> m;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words[i].size(); j++) {
                string substr = words[i].substr(0, j + 1);
                m[substr]++;
            }
        }
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words[i].size(); j++) {
                string substr = words[i].substr(0, j + 1);
                ans[i] += m[substr];
            }
        }
        return ans;

=======

        map<string, int> scores;
        for (int i = 0; i < words.size(); ++i) {
            for (int j = 0; j < words[i].size(); ++j) {
                string prefix = words[i].substr(0, j+1);
                scores[prefix]++;
            }
        }
        vector<int> ans;
        for (int i = 0; i < words.size(); ++i) {
            int score = 0;
            for (int j = 0; j < words[i].size(); ++j) {
                string prefix = words[i].substr(0, j+1);
                score += scores[prefix];
            }
            ans.push_back(score);
        }
        return ans;

=======

        unordered_map<string, int> prefixScores;
        for (string word : words) {
            for (int i = 0; i < word.size(); i++) {
                prefixScores[word.substr(0, i + 1)]++;
            }
        }
        vector<int> result;
        for (string word : words) {
            result.push_back(prefixScores[word]);
        }
        return result;

=======

        vector<int> ans;
        ans.reserve(words.size());
        unordered_map<string, int> prefix2cnt;
        for (auto& w : words) {
            string pre;
            for (auto c : w) {
                pre.push_back(c);
                prefix2cnt[pre]++;
            }
        }
        for (auto& w : words) {
            string pre;
            int sum = 0;
            for (auto c : w) {
                pre.push_back(c);
                sum += prefix2cnt[pre];
            }
            ans.push_back(sum);
        }
        return ans;
