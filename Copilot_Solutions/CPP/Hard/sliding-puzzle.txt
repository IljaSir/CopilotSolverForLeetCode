Synthesizing 7/10 solutions (Duplicates hidden)

=======

        string target = "123450";
        string start = "";
        for (auto row : board) {
            for (auto col : row) {
                start += to_string(col);
            }
        }
        if (start == target) return 0;
        unordered_set<string> visited;
        queue<string> q;
        q.push(start);
        visited.insert(start);
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                string cur = q.front();
                q.pop();
                int index = cur.find('0');
                int row = index / 3;
                int col = index % 3;
                for (auto& dir : dirs) {
                    int next_row = row + dir[0];
                    int next_col = col + dir[1];
                    if (next_row < 0 || next_row >= 2 || next_col < 0 || next_col >= 3) continue;
                    int next_index = next_row * 3 + next_col;
                    string next = cur;
                    swap(next[index], next[next_index]);
                    if (next == target) return step + 1;
                    if (visited.find(next) != visited.end()) continue;
                    visited.insert(next);
                    q.push(next);
                }
            }
            step++;
        }
        return -1;

=======

        // 把二维数组转换成一维数组
        string target = "123450";
        string start;
        for (auto& row : board) {
            for (auto& num : row) {
                start += to_string(num);
            }
        }
        // 用于存储每个状态下的下一步的所有状态
        vector<vector<int>> next_status = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        // 用于存储每个状态下的下一步的所有状态对应的移动方向
        vector<vector<char>> next_direction = {{'r'}, {'l', 'r'}, {'l'}, {'u', 'r'}, {'u', 'l', 'r'}, {'u', 'l'}};
        // 用于存储每个状态下的下一步的所有状态对应的移动步数
        vector<vector<int>> next_step = {{1}, {1, 1}, {1}, {1, 1}, {1, 1, 1}, {1, 1}};
        // 用于存储每个状态下的下一步的所有状态对应的移动方向
        vector<vector<char>> next_direction = {{'r'}, {'l', 'r'}, {'l'}, {'u', 'r'}, {'u', 'l', 'r'}, {'u', 'l'}};
        // 用于存储每个状态下的下一步的所有状态对应的移动步数
        vector<vector<int>> next_step = {{1}, {1, 1}, {1}, {1, 1}, {1, 1, 1}, {1, 1}};
        // 用于存储每个状态下的下一步的所有状态对应的移动方向
        vector<vector<char>> next_direction = {{'r'}, {'l', 'r'}, {'l'}, {'u', 'r'}, {'u', 'l', 'r'}, {'u', 'l'}};
        // 用于存储每个状态下的下一步的所有状态对应的移动

=======

        // BFS
        // 1. get start state
        // 2. get all possible next state
        // 3. get all next state
        // 4. if next state is target, return
        // 5. if next state is not visited, add it to queue
        // 6. if queue is empty, return -1
        // 7. if queue is not empty, goto 2.
        // 8. return -1
        string target = "123450";
        string start = "";
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                start += to_string(board[i][j]);
            }
        }
        if (start == target) return 0;
        
        unordered_set<string> visited;
        visited.insert(start);
        queue<string> q;
        q.push(start);
        
        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                string state = q.front();
                q.pop();
                vector<string> nextStates = getNextStates(state);
                for (auto nextState : nextStates) {
                    if (nextState == target) return steps + 1;
                    if (visited.find(nextState) == visited.end()) {
                        visited.insert(nextState);
                        q.push(nextState);
                    }
                }
            }
            steps++;
        }
        
        return -1;
