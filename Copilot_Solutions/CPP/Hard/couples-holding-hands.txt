Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = row.size();
        vector<int> pos(n);
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ++ans;
            int j = pos[y];
            swap(row[i + 1], row[j]);
            pos[row[i + 1]] = i + 1;
            pos[row[j]] = j;
        }
        return ans;

=======

        int n = row.size();
        vector<int> pos(n);
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        int res = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ++res;
            int pos_y = pos[y];
            swap(row[i + 1], row[pos_y]);
            pos[row[i + 1]] = i + 1;
            pos[y] = pos_y;
        }
        return res;

=======

        int n = row.size();
        vector<int> pos(n);
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int res = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i], y = x ^ 1;
            if (row[i + 1] == y) continue;
            res++;
            int j = pos[y];
            swap(row[i + 1], row[j]);
            pos[row[i + 1]] = i + 1;
            pos[row[j]] = j;
        }
        return res;

=======

        int n = row.size(), ans = 0;
        vector<int> pos(n);
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        for (int i = 0; i < n; i += 2) {
            int x = row[i], y = x ^ 1;
            if (row[i + 1] == y) continue;
            ++ans;
            int j = pos[y];
            swap(row[i + 1], row[j]);
            pos[row[i + 1]] = i + 1;
            pos[row[j]] = j;
        }
        return ans;

=======

        int n = row.size();
        vector<int> pos(n);
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int ret = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ret++;
            int j = pos[y];
            swap(row[i + 1], row[j]);
            pos[row[j]] = j;
        }
        return ret;

=======

        int n = row.size();
        int ans = 0;
        vector<int> pos(n);
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) continue;
            ++ans;
            int j = pos[y];
            swap(row[i + 1], row[j]);
            pos[row[i + 1]] = i + 1;
            pos[row[j]] = j;
        }
        return ans;

=======

        int n = row.size();
        int ans = 0;
        vector<int> pos(n);
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ans++;
            int pos_y = pos[y];
            swap(row[i + 1], row[pos_y]);
            pos[row[i + 1]] = i + 1;
            pos[row[pos_y]] = pos_y;
        }
        return ans;

=======

        int n = row.size();
        vector<int> pos(n);
        for (int i = 0; i < n; i++){
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2){
            int p = row[i] ^ 1;
            if (row[i + 1] == p){
                continue;
            }
            ans++;
            int j = pos[p];
            swap(row[i + 1], row[j]);
            pos[row[i + 1]] = i + 1;
            pos[row[j]] = j;
        }
        return ans;

=======

        int n = row.size();
        if (n == 2) return 0;
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) continue;
            ans++;
            for (int j = i + 2; j < n; ++j) {
                if (row[j] == y) {
                    row[j] = row[i + 1];
                    row[i + 1] = y;
                    break;
                }
            }
        }
        return ans;
