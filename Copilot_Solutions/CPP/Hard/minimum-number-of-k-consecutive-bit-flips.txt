Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> diff(n + 1);
        int ans = 0, revCnt = 0;
        for (int i = 0; i < n; ++i) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) return -1;
                ++ans;
                ++revCnt;
                --diff[i + k];
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                if (i + k > n) return -1;
                res++;
                for (int j = i; j < i + k; j++) {
                    nums[j] = nums[j] == 0 ? 1 : 0;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int flip = 0;
        for (int i = 0; i < n; ++i) {
            if (i >= k && nums[i - k] > 1) {
                flip ^= 1;
                nums[i - k] -= 2;
            }
            if (nums[i] == flip) {
                if (i + k > n) return -1;
                ++res;
                flip ^= 1;
                nums[i] += 2;
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0, revCnt = 0;
        vector<int> diff(n + 1);
        for (int i = 0; i < n; ++i) {
            revCnt ^= diff[i];
            if (nums[i] == revCnt) {
                if (i + k > n) {
                    return -1;
                }
                ++ans;
                revCnt ^= 1;
                diff[i + k] ^= 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int flip = 0;
        for (int i = 0; i < n; i++) {
            if (i >= k && nums[i - k] > 1) {
                flip ^= 1;
                nums[i - k] -= 2;
            }
            if (nums[i] == flip) {
                if (i + k > n) return -1;
                ans++;
                flip ^= 1;
                nums[i] += 2;
            }
        }
        return ans;

=======

        int res = 0, n = nums.size();
        vector<int> diff(n+1);
        int revCnt = 0;
        for (int i = 0; i < n; ++i) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) return -1;
                ++res;
                ++revCnt;
                --diff[i+k];
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> flip(n + 1);
        int res = 0, revCnt = 0;
        for (int i = 0; i < n; ++i) {
            revCnt ^= flip[i];
            if (nums[i] == revCnt) {
                if (i + k > n) return -1;
                ++res;
                revCnt ^= 1;
                flip[i + k] ^= 1;
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (i >= k && nums[i - k] > 1) {
                cnt ^= 1;
                nums[i - k] -= 2;
            }
            if (cnt == nums[i]) {
                if (i + k > n) return -1;
                ans++;
                cnt ^= 1;
                nums[i] += 2;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (q.size() && i - q.front() >= k) q.pop();
            if (q.size() % 2 == nums[i]) {
                if (i + k > n) return -1;
                ans++;
                q.push(i);
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        int flip = 0;
        int i = 0;
        while (i < n) {
            if (nums[i] == 0) {
                if (i + k > n) return -1;
                res++;
                flip = 1 - flip;
                for (int j = i; j < i + k; j++) {
                    nums[j] = 1 - nums[j];
                }
            }
            if (nums[i] == 1 && flip == 1) {
                if (i + k > n) return -1;
                res++;
                flip = 1 - flip;
                for (int j = i; j < i + k; j++) {
                    nums[j] = 1 - nums[j];
                }
            }
            i++;
        }
        return res;
