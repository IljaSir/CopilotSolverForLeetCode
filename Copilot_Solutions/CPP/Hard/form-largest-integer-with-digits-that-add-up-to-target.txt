Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<string> dp(target + 1, "0");
        for (int i = 1; i <= target; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (i >= cost[j] && dp[i - cost[j]] != "0") {
                    dp[i] = max(dp[i], to_string(j + 1) + dp[i - cost[j]]);
                }
            }
        }
        return dp[target];

=======

        vector<int> dp(target + 1, -1);
        dp[0] = 0;
        for (int i = 1; i <= target; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (i >= cost[j] && dp[i - cost[j]] >= 0) {
                    dp[i] = max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp.back() < 0) {
            return "0";
        }
        string ans;
        for (int i = 8, j = target; i >= 0; --i) {
            while (j >= cost[i] && dp[j] == dp[j - cost[i]] + 1) {
                ans += '1' + i;
                j -= cost[i];
            }
        }
        return ans;

=======

        vector<int> dp(target + 1, -1);
        dp[0] = 0;
        for (int i = 1; i <= target; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (i >= cost[j] && dp[i - cost[j]] != -1) {
                    dp[i] = max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp[target] == -1) return "0";
        string ans;
        for (int i = 8; i >= 0; --i) {
            while (target >= cost[i] && dp[target] == dp[target - cost[i]] + 1) {
                ans += (char)('1' + i);
                target -= cost[i];
            }
        }
        return ans;

=======

        vector<int> dp(target + 1, INT_MIN);
        dp[0] = 0;
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i >= cost[j]) {
                    dp[i] = max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        string ans;
        for (int i = 8; i >= 0; i--) {
            while (target >= cost[i] && dp[target] == dp[target - cost[i]] + 1) {
                ans += i + '1';
                target -= cost[i];
            }
        }
        return ans;

=======

        vector<int> dp(target + 1, INT_MIN);
        dp[0] = 0;
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i >= cost[j]) {
                    dp[i] = max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        string ans;
        for (int i = 8, j = target; i >= 0; i--) {
            int costi = cost[i];
            while (j >= costi && dp[j] == dp[j - costi] + 1) {
                ans += to_string(i + 1);
                j -= costi;
            }
        }
        return ans;

=======

        int n = cost.size();
        vector<int> dp(target+1, INT_MIN);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = cost[i]; j <= target; ++j) {
                dp[j] = max(dp[j], dp[j-cost[i]] + 1);
            }
        }
        if (dp[target] < 0) return "0";
        string res;
        for (int i = n-1, j = target; i >= 0; --i) {
            for (int k = 9; k > 0; --k) {
                int nj = j - k * cost[i];
                if (nj >= 0 && dp[nj] >= 0 && dp[nj] == dp[j] - 1) {
                    res += to_string(k);
                    j = nj;
                    break;
                }
            }
        }
        return res;

=======

        string res = "";
        vector<int> dp(target + 1, -1);
        dp[0] = 0;
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i >= cost[j] && dp[i - cost[j]] != -1) {
                    dp[i] = max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp[target] == -1) {
            return "0";
        }
        for (int i = 8; i >= 0; i--) {
            while (target >= cost[i] && dp[target] == dp[target - cost[i]] + 1) {
                res += to_string(i + 1);
                target -= cost[i];
            }
        }
        return res;

=======

        string ans = "0";
        vector<string> dp(target+1, "");
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i >= cost[j] && dp[i-cost[j]] != "-1") {
                    string temp = dp[i-cost[j]] + to_string(j+1);
                    if (temp.size() > dp[i].size()) {
                        dp[i] = temp;
                    } else if (temp.size() == dp[i].size()) {
                        dp[i] = max(dp[i], temp);
                    }
                }
            }
            if (dp[i].empty()) dp[i] = "-1";
        }
        return dp[target] == "-1" ? "0" : dp[target];

=======

        int m = cost.size();
        vector<int> dp(target + 1, -1);
        dp[0] = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = cost[i]; j <= target; ++j) {
                if (dp[j - cost[i]] >= 0) {
                    dp[j] = max(dp[j], dp[j - cost[i]] + 1);
                }
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        string ans;
        for (int i = m - 1, j = target; i >= 0; --i) {
            int k = cost[i];
            while (j >= k && dp[j] == dp[j - k] + 1) {
                ans += '1' + i;
                j -= k;
            }
        }
        return ans;
