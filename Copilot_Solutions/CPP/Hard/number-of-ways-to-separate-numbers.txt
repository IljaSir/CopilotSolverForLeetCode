Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = num.size();
        vector<long long> dp(n + 1, 0);
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (num[i] == '0') {
                dp[i] = 0;
            } else {
                dp[i] = dp[i + 1];
                long long x = 0;
                for (int j = i; j < n; j++) {
                    x = x * 10 + num[j] - '0';
                    if (x > 1000000000) break;
                    dp[i] += dp[j + 1];
                    dp[i] %= 1000000007;
                }
            }
        }
        return dp[0];

=======

        int n = num.size();
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1] * 10 % 1000000007;
            if (i > 1 && num[i - 2] != '0') {
                int x = num[i - 2] - '0';
                int y = num[i - 1] - '0';
                if (x * 10 + y <= 26) {
                    dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
                }
            }
        }
        return dp[n];

=======

        int n = num.size();
        vector<int> dp(n + 1);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            if (num[i] != '0') {
                dp[i + 1] = dp[i];
            }
            if (i > 0 && num[i - 1] != '0') {
                int v = (num[i - 1] - '0') * 10 + (num[i] - '0');
                if (v <= 26) {
                    dp[i + 1] = (dp[i + 1] + dp[i - 1]) % 1000000007;
                }
            }
        }
        return dp[n];
    }
    int numberOfCombinations(string num) {
        int n = num.size();
        vector<int> dp(n + 1);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            if (num[i] != '0') {
                dp[i + 1] = dp[i];
            }
            if (i > 0 && num[i - 1] != '0') {
                int v = (num[i - 1] - '0') * 10 + (num[i] - '0');
                if (v <= 26) {
                    dp[i + 1] = (dp[i + 1] + dp[i - 1]) % 1000000007;
                }
            }
        }
        return dp[n];

=======

        int n = num.size();
        vector<long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = i; j >= 1; j--) {
                int x = stoi(num.substr(j - 1, i - j + 1));
                if (x > 0 && x <= 26) {
                    dp[i] = (dp[i] + dp[j - 1]) % 1000000007;
                }
            }
        }
        return dp[n];
    }
    int numberOfWays(string num) {
        int n = num.size();
        vector<long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = i; j >= 1; j--) {
                int x = stoi(num.substr(j - 1, i - j + 1));
                if (x > 0 && x <= 26) {
                    dp[i] = (dp[i] + dp[j - 1]) % 1000000007;
                }
            }
        }
        return (dp[n] - 1 + 1000000007) % 1000000007;

=======

        int n = num.size();
        vector<int> dp(n + 1);
        dp[0] = 1;
        dp[1] = num[0] == '0' ? 0 : 1;
        for (int i = 2; i <= n; ++i) {
            if (num[i - 1] != '0') {
                dp[i] = dp[i - 1];
            }
            if (num[i - 2] != '0' && stoi(num.substr(i - 2, 2)) <= 26) {
                dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
            }
        }
        return dp[n];
    }
    int numberOfWays(string num) {
        int n = num.size();
        vector<int> dp(n + 1);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = i; j >= 1; --j) {
                string s = num.substr(j - 1, i - j + 1);
                if (s[0] == '0') {
                    break;
                }
                if (stoi(s) <= 26) {
                    dp[i] = (dp[i] + dp[j - 1]) % 1000000007;
                }
            }
        }
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            ans = (ans + (long long)dp[i] * numberOfCombinations(num.substr(i))) % 1000000007;
        }
        return ans;

=======

        int n = num.size();
        vector<int> dp(n + 1, 0);
        dp[n] = 1;
        for(int i = n - 1; i >= 0; i--) {
            if(num[i] == '0') {
                dp[i] = 0;
                continue;
            }
            dp[i] = dp[i + 1];
            if(i + 1 < n) {
                dp[i] += dp[i + 2];
                if(num[i] == '1' || (num[i] == '2' && num[i + 1] <= '6')) {
                    if(i + 2 < n) {
                        dp[i] += dp[i + 3];
                    } else {
                        dp[i] += 1;
                    }
                }
            }
            dp[i] %= 1000000007;
        }
        return dp[0];

=======

        int n = num.size();
        vector<int> dp(n + 1, 0);
        vector<int> count(n + 1, 0);
        dp[0] = 1;
        count[0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (num[j] != '0' && stol(num.substr(j, i - j)) <= 1000000000) {
                    dp[i] = (dp[i] + dp[j]) % 1000000007;
                    count[i] = (count[i] + count[j]) % 1000000007;
                } else {
                    break;
                }
            }
        }
        return count[n];

=======

        int n = num.size();
        long long int mod = 1e9 + 7;
        vector<long long int> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = (dp[i - 1] * 10) % mod;
        }
        vector<long long int> pre(n + 1, 0);
        pre[0] = 0;
        for (int i = 1; i <= n; i++) {
            pre[i] = (pre[i - 1] * 10 + 1) % mod;
        }
        vector<long long int> dp2(n + 1, 0);
        dp2[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                if (num[j - 1] == '0') {
                    break;
                }
                long long int x = stoll(num.substr(j - 1, i - j + 1));
                if (x > 1e9) {
                    break;
                }
                dp2[i] = (dp2[i] + dp[i - j] * pre[j]) % mod;
            }
        }
        return dp2[n];
    }
    int numberOfCombinations(string num) {
        int n = num.size();
        long long int mod = 1e9 + 7;
        vector<long long int> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = (dp[i - 1] * 10) % mod;
        }
        vector<long long int> pre(n + 1, 0);
        pre[0] = 0;
        for (int i = 1; i <= n; i++) {
            pre[i] = (pre[i - 1] * 10 + 1) % mod;
        }
        vector<long long int> dp2(n + 1, 0);
        dp2[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j

=======

        int n = num.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            if (num[i] != '0') {
                if (i > 0) {
                    dp[i] = dp[i - 1];
                }
                dp[i] = (dp[i] + 1) % 1000000007;
            }
            if (i > 0) {
                int x = (num[i - 1] - '0') * 10 + (num[i] - '0');
                if (x >= 10 && x <= 26) {
                    if (i > 1) {
                        dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
                    } else {
                        dp[i] = (dp[i] + 1) % 1000000007;
                    }
                }
            }
        }
        return dp[n - 1];
