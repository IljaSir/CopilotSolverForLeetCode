Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = stoneValue.size();
        vector<int> dp(n + 1, INT_MIN);
        dp[n] = 0;
        for (int i = n - 1; i >= 0; --i) {
            int sum = 0;
            for (int j = i; j < i + 3 && j < n; ++j) {
                sum += stoneValue[j];
                dp[i] = max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n + 1, INT_MIN);
        dp[n] = 0;
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = max(dp[i], sum - dp[j + 1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n);
        dp[n-1] = stoneValue[n-1];
        for (int i = n - 2; i >= 0; --i) {
            dp[i] = stoneValue[i];
            for (int j = i + 1; j < n && j <= i + 3; ++j) {
                dp[i] = max(dp[i], dp[j] - dp[i]);
            }
        }
        if (dp[0] > 0) return "Alice";
        else if (dp[0] < 0) return "Bob";
        else return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n, 0);
        dp[n-1] = stoneValue[n-1];
        for (int i = n-2; i >= 0; i--) {
            int sum = 0;
            dp[i] = INT_MIN;
            for (int j = i; j < i+3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = max(dp[i], sum - dp[j+1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n + 1);
        for (int i = n - 1; i >= 0; --i) {
            dp[i] = INT_MIN;
            for (int x = 0, k = 1; k <= 3 && i + k <= n; ++k) {
                x += stoneValue[i + k - 1];
                dp[i] = max(dp[i], x - dp[i + k]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n, 0);
        dp[n - 1] = stoneValue[n - 1];
        int sum = stoneValue[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            sum += stoneValue[i];
            dp[i] = sum - dp[i + 1];
            if (i + 2 < n) {
                dp[i] = max(dp[i], sum - dp[i + 2]);
            }
            if (i + 3 < n) {
                dp[i] = max(dp[i], sum - dp[i + 3]);
            }
        }
        if (dp[0] * 2 == sum) {
            return "Tie";
        } else if (dp[0] * 2 > sum) {
            return "Alice";
        } else {
            return "Bob";
        }

=======

        int n = stoneValue.size();
        vector<int> dp(n+1, 0);
        for (int i = n-1; i >= 0; i--) {
            dp[i] = INT_MIN;
            int sum = 0;
            for (int j = i; j < i+3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = max(dp[i], sum - dp[j+1]);
            }
        }
        if (dp[0] > 0) return "Alice";
        if (dp[0] < 0) return "Bob";
        return "Tie";

=======

        int n = stoneValue.size();
        vector<int> dp(n+1, 0);
        dp[n] = 0;
        for (int i = n-1; i >= 0; i--) {
            int sum = 0;
            dp[i] = INT_MIN;
            for (int j = i; j < i + 3 && j < n; j++) {
                sum += stoneValue[j];
                dp[i] = max(dp[i], sum - dp[j+1]);
            }
        }
        if (dp[0] == 0) return "Tie";
        return dp[0] > 0 ? "Alice" : "Bob";
