Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        int mod = 1000000007;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
            if (i < n - 1 && s[i] == s[i + 1]) {
                dp[i][i + 1] = 3;
            } else if (i < n - 1) {
                dp[i][i + 1] = 2;
            }
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i <= n - len; ++i) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] + 1) % mod;
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + mod) % mod;
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        int mod = 1e9+7;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 3;
            } else {
                dp[i][i + 1] = 2;
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n));
        vector<vector<int>> sum(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            sum[i][i] = 1;
        }
        for (int len = 2; len <= 5; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = sum[i + 1][j - 1] + 2;
                    if (len == 5) dp[i][j]++;
                } else {
                    dp[i][j] = sum[i + 1][j] + sum[i][j - 1] - sum[i + 1][j - 1];
                }
                sum[i][j] = dp[i][j] + sum[i][j - 1] + sum[i + 1][j] - sum[i + 1][j - 1];
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        int mod = 1000000007;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> sum(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
            sum[i][i] = 1;
        }
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j + i < n; ++j) {
                if (s[j] != s[j + i]) {
                    dp[j][j + i] = (sum[j][j + i - 1] - sum[j + 1][j + i] + mod) % mod;
                } else {
                    dp[j][j + i] = (sum[j][j + i - 1] + 1) % mod;
                    if (i >= 2) {
                        dp[j][j + i] = (dp[j][j + i] + dp[j + 1][j + i - 1] + 1) % mod;
                    }
                }
                sum[j][j + i] = (sum[j][j + i - 1] + dp[j][j + i]) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        for(int l=1; l<=5; l++) {
            for(int i=0; i+l<=n; i++) {
                int j = i+l-1;
                if(l==1) {
                    dp[i][j] = 1;
                } else if(l==2) {
                    if(s[i] == s[j]) {
                        dp[i][j] = 3;
                    } else {
                        dp[i][j] = 2;
                    }
                } else {
                    dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1];
                    if(s[i] == s[j]) {
                        dp[i][j] += dp[i+1][j-1] + 1;
                    }
                }
            }
        }
        return dp[0][n-1];
