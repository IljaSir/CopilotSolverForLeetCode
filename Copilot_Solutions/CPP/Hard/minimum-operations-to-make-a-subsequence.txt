Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_map<int, int> pos;
        for (int i = 0; i < target.size(); ++i) {
            pos[target[i]] = i;
        }
        vector<int> d;
        for (int val : arr) {
            if (pos.count(val)) {
                int idx = pos[val];
                auto it = lower_bound(d.begin(), d.end(), idx);
                if (it != d.end()) {
                    *it = idx;
                }
                else {
                    d.push_back(idx);
                }
            }
        }
        return target.size() - d.size();

=======

        int n = target.size();
        unordered_map<int, int> pos;
        for (int i = 0; i < n; ++i) {
            pos[target[i]] = i;
        }
        vector<int> d;
        for (int val : arr) {
            if (pos.count(val)) {
                int idx = pos[val];
                auto it = lower_bound(d.begin(), d.end(), idx);
                if (it != d.end()) {
                    *it = idx;
                } else {
                    d.push_back(idx);
                }
            }
        }
        return n - d.size();

=======

        unordered_map<int, int> pos;
        int n = target.size();
        for (int i = 0; i < n; ++i) {
            pos[target[i]] = i;
        }
        vector<int> d;
        for (int val: arr) {
            if (pos.count(val)) {
                int idx = pos[val];
                auto it = lower_bound(d.begin(), d.end(), idx);
                if (it != d.end()) {
                    *it = idx;
                } else {
                    d.push_back(idx);
                }
            }
        }
        return n - d.size();

=======

        unordered_map<int, int> m;
        for (int i = 0; i < target.size(); i++) {
            m[target[i]] = i;
        }
        vector<int> v;
        for (int i = 0; i < arr.size(); i++) {
            if (m.find(arr[i]) != m.end()) {
                v.push_back(m[arr[i]]);
            }
        }
        vector<int> dp(v.size(), 1);
        int res = 0;
        for (int i = 0; i < v.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (v[j] < v[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            res = max(res, dp[i]);
        }
        return target.size() - res;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < target.size(); i++) {
            m[target[i]] = i;
        }
        vector<int> t;
        for (int i = 0; i < arr.size(); i++) {
            if (m.count(arr[i])) {
                t.push_back(m[arr[i]]);
            }
        }
        vector<int> dp(t.size(), 1);
        int res = 1;
        for (int i = 1; i < t.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (t[j] < t[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            res = max(res, dp[i]);
        }
        return target.size() - res;

=======

        int n = target.size();
        unordered_map<int,int> pos;
        for(int i=0;i<n;i++){
            pos[target[i]] = i;
        }
        vector<int> d;
        for(int x:arr){
            if(pos.count(x)){
                int idx = pos[x];
                auto it = lower_bound(d.begin(),d.end(),idx);
                if(it!=d.end()){
                    *it = idx;
                }else{
                    d.push_back(idx);
                }
            }
        }
        return n-d.size();

=======

        unordered_map<int,int> m;
        for(int i=0; i<target.size(); i++)
            m[target[i]] = i;
        vector<int> v;
        for(int i=0; i<arr.size(); i++){
            if(m.find(arr[i]) != m.end())
                v.push_back(m[arr[i]]);
        }
        return target.size() - lengthOfLIS(v);
    }
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        vector<int> v;
        v.push_back(nums[0]);
        for(int i=1; i<nums.size(); i++){
            if(nums[i] > v.back())
                v.push_back(nums[i]);
            else{
                int pos = lower_bound(v.begin(), v.end(), nums[i]) - v.begin();
                v[pos] = nums[i];
            }
        }
        return v.size();
