Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = points.size();
        if (n < 3) return n;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            map<pair<int, int>, int> mp;
            int same = 0;
            int maxn = 0;
            for (int j = i + 1; j < n; j++) {
                int dx = points[i][0] - points[j][0];
                int dy = points[i][1] - points[j][1];
                if (dx == 0 && dy == 0) {
                    same++;
                    continue;
                }
                int d = gcd(dx, dy);
                dx /= d;
                dy /= d;
                mp[make_pair(dx, dy)]++;
                maxn = max(maxn, mp[make_pair(dx, dy)]);
            }
            ans = max(ans, maxn + same + 1);
        }
        return ans;
    }
    int gcd(int a, int b) {
        return b ? gcd(b, a % b) : a;

=======

        int n = points.size();
        if (n < 3) return n;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int duplicate = 1;
            unordered_map<string, int> m;
            for (int j = i + 1; j < n; j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    duplicate++;
                    continue;
                }
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];
                int d = gcd(dx, dy);
                m[to_string(dx / d) + "_" + to_string(dy / d)]++;
            }
            res = max(res, duplicate);
            for (auto it = m.begin(); it != m.end(); it++) {
                res = max(res, it->second + duplicate);
            }
        }
        return res;

=======

        int n = points.size();
        if (n < 3) return n;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x1 = points[i][0];
            int y1 = points[i][1];
            unordered_map<double, int> mp;
            int dup = 1;
            for (int j = i + 1; j < n; j++) {
                int x2 = points[j][0];
                int y2 = points[j][1];
                if (x1 == x2 && y1 == y2) {
                    dup++;
                    continue;
                }
                double k = x1 == x2 ? INT_MAX : (double)(y1 - y2) / (x1 - x2);
                mp[k]++;
            }
            int maxn = 0;
            for (auto& [_, val] : mp) {
                maxn = max(maxn, val);
            }
            ans = max(ans, maxn + dup);
        }
        return ans;

=======

        int n = points.size();
        if (n < 3) return n;
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            map<pair<int, int>, int> lines;
            int dup = 1;
            for (int j = i + 1; j < n; j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    dup++;
                    continue;
                }
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];
                int d = gcd(dx, dy);
                lines[make_pair(dx / d, dy / d)]++;
            }
            ans = max(ans, dup);
            for (auto it = lines.begin(); it != lines.end(); it++) {
                ans = max(ans, it->second + dup);
            }
        }
        return ans;

=======

        if (points.size() < 3) return points.size();
        int res = 0;
        for (int i = 0; i < points.size(); i++) {
            unordered_map<string, int> map;
            int same = 0;
            int maxn = 0;
            for (int j = i + 1; j < points.size(); j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    same++;
                    continue;
                }
                int x = points[j][0] - points[i][0];
                int y = points[j][1] - points[i][1];
                int gcdXY = gcd(x, y);
                x /= gcdXY;
                y /= gcdXY;
                string key = to_string(x) + "/" + to_string(y);
                map[key]++;
                maxn = max(maxn, map[key]);
            }
            res = max(res, maxn + same + 1);
        }
        return res;

=======

        int n = points.size();
        if (n < 3) return n;
        int result = 0;
        for (int i = 0; i < n; i++) {
            int duplicate = 1;
            unordered_map<double, int> count;
            for (int j = i + 1; j < n; j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    duplicate++;
                    continue;
                }
                double slope = points[i][0] == points[j][0] ? INT_MAX : 1.0 * (points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);
                count[slope]++;
            }
            result = max(result, duplicate);
            for (auto it = count.begin(); it != count.end(); it++) {
                result = max(result, it->second + duplicate);
            }
        }
        return result;

=======

        if (points.size() < 3) return points.size();
        int res = 0;
        for (int i = 0; i < points.size(); ++i) {
            int same = 1;
            unordered_map<string, int> m;
            for (int j = i + 1; j < points.size(); ++j) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    ++same;
                } else {
                    int x = points[i][0] - points[j][0];
                    int y = points[i][1] - points[j][1];
                    int d = gcd(x, y);
                    ++m[to_string(x / d) + "_" + to_string(y / d)];
                }
            }
            res = max(res, same);
            for (auto &p : m) {
                res = max(res, p.second + same);
            }
        }
        return res;

=======

        if (points.size() < 3) return points.size();
        int res = 0;
        for (int i = 0; i < points.size(); ++i) {
            unordered_map<int, int> mp;
            int same = 1;
            for (int j = i + 1; j < points.size(); ++j) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    ++same;
                } else {
                    int dx = points[i][0] - points[j][0];
                    int dy = points[i][1] - points[j][1];
                    int gcd = __gcd(dx, dy);
                    ++mp[(dx / gcd) * 10000 + dy / gcd];
                }
            }
            int local = 0;
            for (auto& m : mp) {
                local = max(local, m.second);
            }
            local += same;
            res = max(res, local);
        }
        return res;
