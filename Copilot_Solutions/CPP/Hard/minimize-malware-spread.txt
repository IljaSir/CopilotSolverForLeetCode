Synthesizing 6/10 solutions

=======

        int n = graph.size();
        vector<int> color(n, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        vector<int> colorSize(c);
        for (int x : color) {
            colorSize[x]++;
        }
        vector<int> infected(c);
        for (int x : initial) {
            infected[color[x]]++;
        }
        int ans = INT_MAX;
        for (int x : initial) {
            int c = color[x];
            if (infected[c] == 1) {
                if (ans == INT_MAX) {
                    ans = x;
                } else if (colorSize[c] > colorSize[color[ans]]) {
                    ans = x;
                } else if (colorSize[c] == colorSize[color[ans]] && x < ans) {
                    ans = x;
                }
            }
        }
        if (ans == INT_MAX) {
            for (int x : initial) {
                ans = min(ans, x);
            }
        }
        return ans;

=======

        int n = graph.size();
        vector<int> color(n, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(i, c++, color, graph);
            }
        }
        vector<int> color_size(c, 0);
        for (int x : color) {
            color_size[x]++;
        }
        vector<int> infected(c, 0);
        for (int i : initial) {
            infected[color[i]]++;
        }
        int ans = INT_MAX;
        for (int i : initial) {
            int c = color[i];
            if (infected[c] == 1) {
                if (ans == INT_MAX) {
                    ans = i;
                } else if (color_size[c] > color_size[color[ans]]) {
                    ans = i;
                } else if (color_size[c] == color_size[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == INT_MAX) {
            for (int i : initial) {
                ans = min(ans, i);
            }
        }
        return ans;
    }
    void dfs(int node, int c, vector<int>& color, vector<vector<int>>& graph) {
        color[node] = c;
        for (int i = 0; i < graph.size(); ++i) {
            if (graph[node][i] == 1 && color[i] == -1) {
                dfs(i, c, color, graph);
            }
        }

=======

        int n = graph.size();
        vector<int> color(n, -1);
        for (int c = 0, i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        vector<int> count(n);
        for (int c: color) {
            count[c]++;
        }
        vector<int> infected(n);
        for (int i: initial) {
            infected[color[i]]++;
        }
        int ans = INT_MAX;
        for (int i: initial) {
            int c = color[i];
            if (infected[c] == 1) {
                if (ans == INT_MAX) {
                    ans = i;
                } else if (count[c] > count[color[ans]]) {
                    ans = i;
                } else if (count[c] == count[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == INT_MAX) {
            for (int i: initial) {
                ans = min(ans, i);
            }
        }
        return ans;

=======

        int n = graph.size();
        vector<int> color(n, -1);
        for (int c = 0, i = 0; i < n; ++i)
            if (color[i] == -1)
                dfs(graph, color, c++, i);
        vector<int> size(n);
        for (int c: color)
            size[c]++;
        vector<int> malwareCount(n);
        for (int i: initial)
            malwareCount[color[i]]++;
        int ans = INT_MAX;
        for (int i: initial) {
            int c = color[i];
            if (malwareCount[c] == 1) {
                if (ans == INT_MAX)
                    ans = i;
                else if (size[c] > size[color[ans]])
                    ans = i;
                else if (size[c] == size[color[ans]] && i < ans)
                    ans = i;
            }
        }
        if (ans == INT_MAX)
            for (int i: initial)
                ans = min(ans, i);
        return ans;

=======

        int n = graph.size();
        vector<int> infected(n, 0);
        for (int i : initial) infected[i] = 1;
        vector<int> root(n);
        for (int i = 0; i < n; ++i) root[i] = i;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (graph[i][j] == 1) {
                    int rooti = find(root, i), rootj = find(root, j);
                    if (rooti != rootj) {
                        if (infected[rooti] == 1 && infected[rootj] == 1) continue;
                        if (infected[rooti] == 1) root[rootj] = rooti;
                        else if (infected[rootj] == 1) root[rooti] = rootj;
                        else root[rooti] = rootj;
                    }
                }
            }
        }
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; ++i) {
            int rooti = find(root, i);
            if (infected[rooti] == 1) cnt[rooti]++;
        }
        int ans = -1, ans_cnt = -1;
        for (int i : initial) {
            int rooti = find(root, i);
            if (cnt[rooti] > ans_cnt) {
                ans = i;
                ans_cnt = cnt[rooti];
            }
        }
        return ans;

=======

        int n = graph.size();
        vector<int> infected(n, 0);
        vector<int> initial_infected(n, 0);
        for(int i: initial){
            infected[i] = 1;
            initial_infected[i] = 1;
        }
        vector<int> visited(n, 0);
        for(int i: initial){
            if(visited[i] == 0){
                queue<int> q;
                q.push(i);
                while(!q.empty()){
                    int v = q.front();
                    q.pop();
                    visited[v] = 1;
                    for(int j=0; j<n; j++){
                        if(graph[v][j] == 1 && infected[j] == 0 && visited[j] == 0){
                            q.push(j);
                            infected[j] = 1;
                        }
                    }
                }
            }
        }
        int max_infected = 0;
        int node = -1;
        for(int i: initial){
            int count = 0;
            for(int j=0; j<n; j++){
                if(graph[i][j] == 1 && infected[j] == 1){
                    count++;
                }
            }
            if(count > max_infected){
                max_infected = count;
                node = i;
            }else if(count == max_infected){
                if(i < node){
                    node = i;
                }
            }
        }
        if(node == -1){
            return *min_element(initial.begin(), initial.end());
        }
        return node;
