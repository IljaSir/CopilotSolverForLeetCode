Synthesizing 10/10 solutions

=======

        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        backtrack(ans, board, 0);
        return ans.size();
    }
    void backtrack(vector<vector<string>>& ans, vector<string>& board, int row) {
        if (row == board.size()) {
            ans.push_back(board);
            return;
        }
        int n = board[row].size();
        for (int col = 0; col < n; col++) {
            if (!isValid(board, row, col)) {
                continue;
            }
            board[row][col] = 'Q';
            backtrack(ans, board, row + 1);
            board[row][col] = '.';
        }
    }
    bool isValid(vector<string>& board, int row, int col) {
        int n = board.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'Q' && (col == j || row + col == i + j || row - col == i - j)) {
                    return false;
                }
            }
        }
        return true;

=======

        int res = 0;
        vector<int> queens(n, -1);
        dfs(queens, 0, res);
        return res;
    }
    
    void dfs(vector<int> &queens, int row, int &res) {
        int n = queens.size();
        if (row == n) {
            res++;
            return;
        }
        for (int col = 0; col < n; ++col) {
            if (isValid(queens, row, col)) {
                queens[row] = col;
                dfs(queens, row + 1, res);
                queens[row] = -1;
            }
        }
    }
    
    bool isValid(vector<int> &queens, int row, int col) {
        for (int i = 0; i < row; ++i) {
            if (queens[i] == col || abs(row - i) == abs(col - queens[i])) {
                return false;
            }
        }
        return true;

=======

        int res = 0;
        vector<int> board(n, -1);
        dfs(board, 0, res);
        return res;
    }
    
    void dfs(vector<int>& board, int row, int& res) {
        if (row == board.size()) {
            res++;
            return;
        }
        for (int col = 0; col < board.size(); col++) {
            if (isValid(board, row, col)) {
                board[row] = col;
                dfs(board, row + 1, res);
                board[row] = -1;
            }
        }
    }
    
    bool isValid(vector<int>& board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (col == board[i] || abs(col - board[i]) == abs(row - i)) {
                return false;
            }
        }
        return true;

=======

        vector<int> board(n, -1);
        int cnt = 0;
        dfs(board, 0, cnt);
        return cnt;
    }
    
    void dfs(vector<int>& board, int row, int& cnt) {
        if (row == board.size()) {
            ++cnt;
            return;
        }
        for (int col = 0; col < board.size(); ++col) {
            if (isValid(board, row, col)) {
                board[row] = col;
                dfs(board, row + 1, cnt);
                board[row] = -1;
            }
        }
    }
    
    bool isValid(vector<int>& board, int row, int col) {
        for (int i = 0; i < row; ++i) {
            if (board[i] == col || abs(row - i) == abs(col - board[i])) {
                return false;
            }
        }
        return true;

=======

        int result = 0;
        vector<int> queens(n, -1);
        solve(queens, 0, result);
        return result;
    }
    
    void solve(vector<int>& queens, int row, int& result) {
        int n = queens.size();
        if (row == n) {
            result++;
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (isValid(queens, row, col)) {
                queens[row] = col;
                solve(queens, row + 1, result);
                queens[row] = -1;
            }
        }
    }
    
    bool isValid(vector<int>& queens, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (queens[i] == col || abs(queens[i] - col) == abs(i - row)) {
                return false;
            }
        }
        return true;

=======

        int ans = 0;
        vector<int> state(n, -1);
        dfs(state, 0, ans);
        return ans;
    }
    void dfs(vector<int>& state, int row, int& ans) {
        if (row == state.size()) {
            ans++;
            return;
        }
        for (int i = 0; i < state.size(); i++) {
            if (isValid(state, row, i)) {
                state[row] = i;
                dfs(state, row + 1, ans);
                state[row] = -1;
            }
        }
    }
    bool isValid(vector<int>& state, int row, int col) {
        for (int i = 0; i < state.size(); i++) {
            if (state[i] == col) return false;
            if (abs(i - row) == abs(state[i] - col)) return false;
        }
        return true;

=======

        int count = 0;
        vector<int> board(n, 0);
        backtrack(board, 0, count);
        return count;
    }

    void backtrack(vector<int>& board, int row, int& count) {
        if (row == board.size()) {
            count++;
            return;
        }

        for (int col = 0; col < board.size(); col++) {
            if (isValid(board, row, col)) {
                board[row] = col;
                backtrack(board, row + 1, count);
            }
        }
    }

    bool isValid(vector<int>& board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col || abs(board[i] - col) == abs(i - row)) {
                return false;
            }
        }
        return true;

=======

        vector<int> pos;
        int ret = 0;
        dfs(n, 0, pos, ret);
        return ret;
    }
    void dfs(int n, int row, vector<int>& pos, int& ret) {
        if (row == n) {
            ret++;
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(pos, row, col)) {
                pos.push_back(col);
                dfs(n, row + 1, pos, ret);
                pos.pop_back();
            }
        }
    }
    bool isValid(vector<int>& pos, int row, int col) {
        for (int i = 0; i < pos.size(); i++) {
            if (pos[i] == col || abs(row - i) == abs(col - pos[i])) {
                return false;
            }
        }
        return true;

=======

        int board[n][n];
        memset(board, 0, sizeof(board));
        int count = 0;
        solve(board, 0, n, count);
        return count;
    }
    
    bool isSafe(int board[][10], int row, int col, int n) {
        // check in left side
        for(int i = 0; i < col; i++) {
            if(board[row][i] == 1) {
                return false;
            }
        }
        
        // check in upper diagonal
        for(int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if(board[i][j] == 1) {
                return false;
            }
        }
        
        // check in lower diagonal
        for(int i = row, j = col; i < n && j >= 0; i++, j--) {
            if(board[i][j] == 1) {
                return false;
            }
        }
        return true;
    }
    
    void solve(int board[][10], int col, int n, int &count) {
        if(col == n) {
            count++;
            return;
        }
        
        for(int i = 0; i < n; i++) {
            if(isSafe(board, i, col, n)) {
                board[i][col] = 1;
                solve(board, col + 1, n, count);
                board[i][col] = 0;
            }
        }

=======

        int count = 0;
        vector<int> col(n, 0);
        vector<int> diag(2 * n, 0);
        vector<int> anti_diag(2 * n, 0);
        dfs(0, n, col, diag, anti_diag, count);
        return count;
    }
    
    void dfs(int row, int n, vector<int>& col, vector<int>& diag, vector<int>& anti_diag, int& count) {
        if (row == n) {
            count++;
            return;
        }
        for (int i = 0; i < n; i++) {
            if (col[i] == 0 && diag[row + i] == 0 && anti_diag[row - i + n] == 0) {
                col[i] = 1;
                diag[row + i] = 1;
                anti_diag[row - i + n] = 1;
                dfs(row + 1, n, col, diag, anti_diag, count);
                col[i] = 0;
                diag[row + i] = 0;
                anti_diag[row - i + n] = 0;
            }
        }
