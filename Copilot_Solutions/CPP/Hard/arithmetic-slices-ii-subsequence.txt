Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int ans = 0;
        vector<unordered_map<long long, int>> dp(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                long long diff = (long long)nums[i] - (long long)nums[j];
                int sum = 0;
                if (dp[j].count(diff)) {
                    sum += dp[j][diff];
                }
                dp[i][diff] += sum + 1;
                ans += sum;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<unordered_map<long long, int>> dp(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                long long diff = (long long)nums[i] - nums[j];
                int sum = 0;
                if (dp[j].count(diff)) sum = dp[j][diff];
                ans += sum;
                dp[i][diff] += sum + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<unordered_map<long, int>> dp(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                long diff = (long)nums[i] - nums[j];
                int sum = 0;
                if (dp[j].count(diff)) {
                    sum = dp[j][diff];
                }
                dp[i][diff] += sum + 1;
                res += sum;
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        vector<unordered_map<int, int>> dp(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                long diff = (long)nums[i] - nums[j];
                if (diff < INT_MIN || diff > INT_MAX) continue;
                int d = diff;
                int sum = 0;
                if (dp[j].count(d)) sum = dp[j][d];
                dp[i][d] += sum + 1;
                res += sum;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<unordered_map<long, int>> dp(n);
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                long diff = (long) nums[i] - nums[j];
                int sum = 0;
                if (dp[j].count(diff)) {
                    sum = dp[j][diff];
                }
                dp[i][diff] += sum + 1;
                ans += sum;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        vector<unordered_map<int, int>> dp(n);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                long long diff = (long long)nums[i] - nums[j];
                if (diff < INT_MIN || diff > INT_MAX) continue;
                int d = diff;
                int cnt = 0;
                if (dp[j].count(d)) cnt = dp[j][d];
                ans += cnt;
                dp[i][d] += cnt + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        vector<unordered_map<int, int>> dp(n);
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                long long diff = (long long)nums[i] - nums[j];
                if (diff < INT_MIN || diff > INT_MAX) continue;
                int d = diff;
                int cnt = 0;
                if (dp[j].count(d)) {
                    cnt = dp[j][d];
                }
                dp[i][d] += cnt + 1;
                ans += cnt;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        vector<unordered_map<long, int>> f(n);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                long d = (long)nums[i] - nums[j];
                int cnt = 0;
                if (f[j].count(d)) {
                    cnt = f[j][d];
                }
                f[i][d] += cnt + 1;
                ans += cnt;
            }
        }
        return ans;

=======

        int n = nums.size();
        if(n < 3) return 0;
        vector<unordered_map<long long, int>> dp(n);
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < i; ++j) {
                long long diff = (long long)nums[i] - nums[j];
                int cnt = dp[j].count(diff) ? dp[j][diff] : 0;
                ans += cnt;
                dp[i][diff] += cnt + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        if(n < 3) return 0;
        vector<unordered_map<long long, int>> dp(n);
        int ans = 0;
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                long long diff = (long long)nums[i] - nums[j];
                int cnt = 0;
                if(dp[j].count(diff)) cnt = dp[j][diff];
                dp[i][diff] += cnt + 1;
                ans += cnt;
            }
        }
        return ans;
