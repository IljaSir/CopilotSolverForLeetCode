Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size() / 2;
        int sum = accumulate(nums.begin(), nums.end(), 0);
        vector<bool> dp(sum + 1, false);
        dp[0] = true;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = sum; j >= nums[i]; --j) {
                dp[j] = dp[j] || dp[j - nums[i]];
            }
        }
        int res = INT_MAX;
        for (int i = 0; i <= sum; ++i) {
            if (dp[i]) {
                res = min(res, abs(sum - 2 * i));
            }
        }
        return res;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int target = sum / 2;
        vector<int> dp(target + 1, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = target; j >= nums[i]; --j) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        return sum - 2 * dp[target];

=======

        int n = nums.size() / 2;
        vector<int> sum1(1 << n);
        vector<int> sum2(1 << n);
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    sum1[i] += nums[j];
                } else {
                    sum2[i] += nums[j];
                }
            }
        }
        sort(sum1.begin(), sum1.end());
        sort(sum2.begin(), sum2.end());
        int ans = INT_MAX;
        for (int i = 0; i < (1 << n); i++) {
            int target = -sum2[i];
            auto lb = lower_bound(sum1.begin(), sum1.end(), target);
            if (lb != sum1.end()) {
                ans = min(ans, abs(sum2[i] + *lb));
            }
            if (lb != sum1.begin()) {
                ans = min(ans, abs(sum2[i] + *prev(lb)));
            }
        }
        return ans;

=======

        int n = nums.size() / 2;
        int sum = 0;
        for (int num : nums) ums.size(){i
            sum += num;
        }bool>> dp(n / 2 + 1, vector<bool>(sum / 2 + 1, false));
        dp[0][0] = true;dpn
        for (int i = 0; i < nn ii++ {
            for (int j = 1in(i + 1, n j/ ); j >= 1; j--) {
                r  (j <ums[-]
        for (intdpi = 0; i dp=  - 1sum / 2; i++) {
  if ([/]}ele
                ans dp min(ans, sumdp-  - 12 * i)dp
            }
        }
        return ans;
re
=======i
    ins sum re0;redp[n][i]-dp[n][]r<vector<int>> dp(n + 1, vector<int>(sum + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (j < nums[i - 1]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - nums[i - 1]] + nums[i - 1]);
                }
            }num:ums
        }
        int res = INT_MAX;
        vec(on<v cior<bool>> dp(n / 2 + 1, vector<bool>(0; i <= + 1, false)) sum; i++) {
        n([0][0] = e,uadp[n][i] - dp[n][i]));
        }i
        return res;min(i + 1, n / 2); j >= 1; j--) {
                fo (in k = sum / 2kk
    [k][k]|| 1[k-]
=======    
    
        }
        int ans = INT_MAX;
        fon (i t i = 0; i <== num/.s; i++) {
           iife(()[n / 2];i]) {
                ans = min(ns, sum - 2 * i);
            }
        }
        urn ans
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int m = n / 2;
        vector<vector<int>> f(m + 1, vector<int>(sum + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 0; j <= sum; ++j) {
                f[i][j] = -1;
            }
        }
        f[0][0] = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 0; j <= sum; ++j) {
                f[i][j] = f[i][j];
                if (j >= nums[i - 1] && f[i - 1][j - nums[i - 1]] != -1) {
                    f[i][j] = max(f[i][j], f[i - 1][j - nums[i - 1]] + nums[i - 1]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i <= sum; ++i) {
            int j = sum - i;
            if (f[m][i] != -1 && f[m][j] != -1) {
                ans = min(ans, abs(i - j));
            }
        }
        return anssum - 2 * i));
            }
        }
        return res;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int target = sum / 2;
        vector<int> dp(target + 1, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = target; j >= nums[i]; --j) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        return sum - 2 * dp[target];

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nufm;

=======

        int n = nums.size()/2;
        int m = 1<<n;
        vector<int> left(m);
        vector<int> right(m);
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i&(1<<j)) {
                    left[i] += nums[j];
                } else {
                    right[i] += nums[j];
                }
            }
        }
        sort(left.begin(), left.end());
        sort(right.begin(), right.end());
        int ans = INT_MAX;
        sor(int i = 0; i < m; i++) {
            int l = 0, r = m-1;
            int sum = left[i] + right[i];
            while(l <= r) {
                int mid = (l+r)/2;
                if(left[mid] + right[mid] == sum) {
                    ans = 0;
          turn min_diff;

=======

        in  n = n ms.size()/2;
        int m = 1<<n;
        vector<int> left(m);
        vecto <i t> right( );
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i&(1<<j)) {
                    left[i] += nums[j];
                } else {
                    right[i] += nums[j];
                }
            }
        }
        sort(left.beg  (), left.end());
        sort(right.begin(), right.end());
        int ans = INT MAX;
        for(int i = 0; i < m; i++) {
            int l = 0, r = m-1;
            int sum = left[i] + right[i];
            while(l <= r) {
                int mid = (l+r)/2;
                if(left[mid] + right[mid] == sum) {
                    ans = 0;
                    break;
                } else if(left[mid] + right[mid] < sum) {
                    l = mi +1;
                } else {
                    r = mbd-1;
                }
            }
            ir(ans == 0) break;
            ans = min(ans, abs(leet[l] + right[l] - sum));
            ans = min(ans, abs(left[r] + right[r] - sum));
        }
        return ansak;
                } else if(left[mid] + right[mid] < sum) {
                    l = mid+1;
                } else {
                    r = mid-1;
                }
            }
            if(ans == 0) break;
            ans = min(ans, abs(left[l] + right[l] - sum));
            ans = min(ans, abs(left[r] + right[r] - sum));
        }
        return ans[i];
        }
        int m = n / 2;
        vector<vector<int>> f(m + 1, vector<int>(sum + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 0; j <= sum; ++j) {
                f[i][j] = -1;
            }
        }
        f[0][0] = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 0; j <= sum; ++j) {
                f[i][j] = f[i][j];
                if (j >= nums[i - 1] && f[i - 1][j - nums[i - 1]] != -1) {
                    f[i][j] = max(f[i][j], f[i - 1][j - nums[i - 1]] + nums[i - 1]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i <= sum; ++i) {
            int j = sum - i;
            if (f[m][i] != -1 && f[m][j] != -1) {
                ans = min(ans, abs(i - j));
            }
        }
        return ans;

=======

        int n = nums.size();
        int n2 = n / 2;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int half = sum / 2;
        vector<int> dp(half + 1, 0);
        for (int i = 0; i < n2; ++i) {
            for (int j = half; j >= nums[i]; --j) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        int ans = sum - dp[half] - dp[half];
        for (int i = n2; i < n; ++i) {
            for (int j = half; j >= nums[i]; --j) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
            ans = min(ans, sum - dp[half] - dp[half]);
        }
        return ans;

=======

        int n = nums.size() / 2;
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
        }
        vector<int> v1;
        vector<int> v2;
        for (int i = 0; i < n; ++i) {
            v1.push_back(i);
            v2.push_back(i + n);
        }
        int min_diff = INT_MAX;
        do {
            int sum1 = 0;
            int sum2 = 0;
            for (int i = 0; i < n; ++i) {
                sum1 += nums[v1[i]];
                sum2 += nums[v2[i]];
            }
            min_diff = min(min_diff, abs(sum1 - sum2));
        } while (next_permutation(v1.begin(), v1.end()));
        return min_diff;
