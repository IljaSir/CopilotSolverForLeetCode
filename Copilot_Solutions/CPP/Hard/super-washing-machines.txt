Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = accumulate(machines.begin(), machines.end(), 0);
        int n = machines.size();
        if (sum % n != 0) return -1;
        int avg = sum / n;
        int ans = 0, cnt = 0;
        for (int num : machines) {
            num -= avg;
            cnt += num;
            ans = max(ans, max(abs(cnt), num));
        }
        return ans;

=======

        int sum = accumulate(machines.begin(), machines.end(), 0);
        int n = machines.size();
        if (sum % n != 0) return -1;
        int avg = sum / n;
        int ans = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            int diff = machines[i] - avg;
            cur += diff;
            ans = max(ans, max(abs(cur), diff));
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < machines.size(); i++) {
            sum += machines[i];
        }
        if (sum % machines.size() != 0) {
            return -1;
        }
        int avg = sum / machines.size();
        int ans = 0;
        int cur = 0;
        for (int i = 0; i < machines.size(); i++) {
            cur += machines[i] - avg;
            ans = max(ans, max(abs(cur), machines[i] - avg));
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < machines.size(); i++) {
            sum += machines[i];
        }
        if (sum % machines.size() != 0) {
            return -1;
        }
        int avg = sum / machines.size();
        int res = 0;
        int cur = 0;
        for (int i = 0; i < machines.size(); i++) {
            cur += machines[i] - avg;
            res = max(res, abs(cur));
            res = max(res, machines[i] - avg);
        }
        return res;

=======

        int sum = accumulate(machines.begin(), machines.end(), 0);
        int n = machines.size();
        if (sum % n) return -1;
        int avg = sum / n;
        int ans = 0, cnt = 0;
        for (int num : machines) {
            num -= avg;
            cnt += num;
            ans = max(ans, max(abs(cnt), num));
        }
        return ans;

=======

        int sum = 0;
        for (int m : machines) {
            sum += m;
        }
        if (sum % machines.size() != 0) {
            return -1;
        }
        int avg = sum / machines.size();
        int ans = 0;
        int cnt = 0;
        for (int m : machines) {
            cnt += m - avg;
            ans = max(ans, max(abs(cnt), m - avg));
        }
        return ans;

=======

        int sum = accumulate(machines.begin(), machines.end(), 0);
        if (sum % machines.size() != 0) return -1;
        int avg = sum / machines.size();
        int res = 0, cnt = 0;
        for (int load : machines) {
            cnt += load - avg;
            res = max(res, max(abs(cnt), load - avg));
        }
        return res;

=======

        int n = machines.size();
        int sum = accumulate(machines.begin(), machines.end(), 0);
        if(sum % n != 0) return -1;
        int avg = sum / n;
        int ans = 0, cur = 0;
        for(int i = 0; i < n; i++) {
            cur += machines[i] - avg;
            ans = max(ans, max(abs(cur), machines[i] - avg));
        }
        return ans;

=======

        int n = machines.size();
        if (n == 1) {
            return 0;
        }
        int total = 0;
        for (int machine : machines) {
            total += machine;
        }
        if (total % n != 0) {
            return -1;
        }
        int avg = total / n;
        int ans = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < n; ++i) {
            left += machines[i] - avg;
            right = max(left, right);
            ans = max(ans, max(abs(left), machines[i] - avg));
        }
        return ans;
