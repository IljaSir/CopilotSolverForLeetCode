Synthesizing 9/10 solutions

=======

        if (k > n * (n - 1) / 2 || k < 0) return 0;
        if (k == 0 || k == n * (n - 1) / 2) return 1;
        
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        dp[2][0] = 1;
        dp[2][1] = 1;
        for (int i = 3; i <= n; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                if (j >= i) dp[i][j] -= dp[i - 1][j - i];
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }
        }
        return dp[n][k];

=======

        int mod = 1000000007;
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                if (j >= i) dp[i][j] -= dp[i - 1][j - i];
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[n][k];

=======

        vector<vector<long>> dp(n + 1, vector<long>(k + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                if (j >= i) {
                    dp[i][j] -= dp[i - 1][j - i];
                }
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }
        }
        return dp[n][k];

=======

        vector<vector<int>> dp(n + 1, vector<int>(k + 1));
        dp[0][0] = 1;
        int mod = 1e9 + 7;
        for (int i = 1; i <= n; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                if (j >= i) {
                    dp[i][j] -= dp[i - 1][j - i];
                }
                dp[i][j] = (dp[i][j] % mod + mod) % mod;
            }
        }
        return dp[n][k];

=======

        vector<vector<int>> dp(n+1, vector<int>(k+1, 0));
        dp[0][0] = 1;
        int mod = 1e9+7;
        for (int i = 1; i <= n; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % mod;
                if (j >= i) dp[i][j] = (dp[i][j] - dp[i-1][j-i] + mod) % mod;
            }
        }
        return dp[n][k];

=======

        int dp[n+1][k+1];
        memset(dp, 0, sizeof(dp));
        dp[1][0] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                int sum = 0;
                for (int m = 0; m <= min(i-1, j); m++) {
                    sum += dp[i-1][j-m];
                    sum %= 1000000007;
                }
                dp[i][j] = sum;
            }
        }
        return dp[n][k];

=======

        if (k == 0) return 1;
        if (n == 1) return 0;
        if (k > n * (n - 1) / 2) return 0;
        if (k == n * (n - 1) / 2) return 1;
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                if (j == 0) {
                    dp[i][j] = 1;
                } else {
                    for (int m = 0; m <= min(j, i - 1); m++) {
                        dp[i][j] += dp[i - 1][j - m];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        return dp[n][k];

=======

        vector<vector<int>> dp(n+1, vector<int>(k+1));
        const int MOD = 1000000007;
        dp[1][0] = 1;
        for (int i=2; i<=n; i++) {
            dp[i][0] = 1;
            for (int j=1; j<=k; j++) {
                dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % MOD;
                if (j >= i) {
                    dp[i][j] = (dp[i][j] - dp[i-1][j-i] + MOD) % MOD;
                }
            }
        }
        return dp[n][k];

=======

        if (n == 1) return 1;
        vector<vector<long>> dp(n + 1, vector<long>(k + 1, 0));
        dp[2][0] = 1;
        for (int i = 3; i <= n; ++i) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                if (j >= i) dp[i][j] -= dp[i - 1][j - i];
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }
        }
        return dp[n][k];
