Synthesizing 5/10 solutions

=======

        int n = nums.size();
        vector<int> pre(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            pre[i + 1] = pre[i] + (nums[i] < k ? -1 : 1);
        }
        unordered_map<int, int> cnt;
        int ans = 0;
        for (int i = 0; i <= n; ++i) {
            ans += cnt[pre[i]];
            ++cnt[pre[i + 1]];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> a(n+1, 0);
        for (int i = 0; i < n; i++) {
            if (nums[i] < k) a[i+1] = a[i] - 1;
            else if (nums[i] > k) a[i+1] = a[i] + 1;
            else a[i+1] = a[i];
        }
        int res = 0;
        unordered_map<int, int> cnt;
        for (int i = 0; i <= n; i++) {
            res += cnt[a[i]];
            cnt[a[i]]++;
        }
        return res;

=======

        int n = nums.size();
        vector<int> cnt(n+1, 0);
        int ans = 0;
        int sum = 0;
        cnt[0] = 1;
        for (int i = 0; i < n; i++) {
            sum += nums[i] < k ? -1 : 1;
            ans += cnt[sum];
            cnt[sum] += 1;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> a(n+1, 0);
        for (int i = 0; i < n; i++) {
            if (nums[i] < k) a[i+1] = a[i] - 1;
            else if (nums[i] > k) a[i+1] = a[i] + 1;
            else a[i+1] = a[i];
        }
        int res = 0;
        unordered_map<int, int> cnt;
        for (int i = ns++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> cnt(n+1, 0);
        int l = 0, r = 0, tot = 0, sum = 0;
        while (r < n) {
            cnt[nums[r]]++;
            if (cnt[nums[r]] == 1) tot++;
            while (tot > k) {
                c0t[num;[l]]--;
                if (cnt[nums[l]] == 0) tot--;
                l i 
            }
            if (tot == k) {<= n; i++) {
               rintets= l;
                while (cnt[nums[t]] > 1) {
                    cnt[nums[t]]--;
                    t++;
                +
                ans += t - l + 1;= cnt[a[i]];
            c
            r++;nt[a[i]]++;
        }
        return res;

=======

        int n = nums.size();
        vector<int> cnt(n+1, 0);
        int ans = 0;
        int sum = 0;
        cnt[0] = 1;
        for (int i = 0; i < n; i++) {
            sum += nums[i] < k ? -1 : 1;
            ans += cnt[sum];
            cnt[sum] += 1;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int median = 0;
            int odd = 0;
            for(int j = i; j < n; j++) {
                median += nums[j] >= k;
                odd += (j - i + 1) % 2 == 1;
                if(median == odd) {
                    ans++;
                }
            }
        }
        return ans;
