Synthesizing 9/10 solutions

=======

        int n = favorite.size();
        vector<int> visited(n, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                int cnt = 0;
                int cur = i;
                while (visited[cur] == 0) {
                    cnt++;
                    visited[cur] = cnt;
                    cur = favorite[cur];
                }
                if (visited[cur] > 0) {
                    cnt -= visited[cur] - 1;
                }
                ans += cnt;
            }
        }
        return ans;

=======

        int n = favorite.size();
        vector<int> next(n, -1);
        for (int i = 0; i < n; ++i) {
            int j = i;
            while (next[j] == -1) {
                j = favorite[j];
            }
            int k = j;
            while (next[j] == -1) {
                next[j] = k;
                j = favorite[j];
            }
        }
        vector<int> dp(n);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (next[i] == i) {
                dp[i] = 1;
            } else if (next[i] > i) {
                dp[i] = dp[next[i]] + 1;
            } else {
                dp[i] = dp[next[i]];
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        int n = favorite.size();
        vector<int> f(n);
        for (int i = 0; i < n; ++i) {
            f[i] = favorite[i];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            for (int j = i; j != -1; j = f[j]) {
                cnt++;
                f[j] = -1;
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = favorite.size();
        vector<int> next(n, -1);
        vector<int> visited(n, 0);
        for (int i = 0; i < n; ++i) {
            if (visited[i]) continue;
            int j = i;
            while (next[j] == -1) {
                visited[j] = 1;
                next[j] = favorite[j];
                j = favorite[j];
            }
            if (next[j] != i) {
                int k = j;
                while (next[k] != j) {
                    next[k] = -1;
                    k = next[k];
                }
                next[k] = -1;
            }
        }
        return count(next.begin(), next.end(), -1);

=======

        int n = favorite.size();
        vector<vector<int>> g(n, vector<int>());
        vector<int> indegree(n, 0);
        for (int i = 0; i < n; i++) {
            g[favorite[i]].push_back(i);
            indegree[i]++;
        }
        queue<int> q;
        vector<int> visited(n, 0);
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
                visited[i] = 1;
            }
        }
        int ans = 0;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            ans++;
            for (int v : g[u]) {
                indegree[v]--;
                if (!visited[v] && indegree[v] == 0) {
                    q.push(v);
                    visited[v] = 1;
                }
            }
        }
        return ans;

=======

        int n = favorite.size();
        vector<int> visited(n, 0);
        vector<vector<int>> graph(n);
        for (int i = 0; i < n; ++i) {
            graph[favorite[i]].push_back(i);
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (visited[i] == 0) {
                res += dfs(graph, visited, i);
            }
        }
        return res;

=======

        int n = favorite.size();
        vector<int> visited(n, -1);
        vector<int> depth(n, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, dfs(i, favorite, visited, depth));
        }
        return ans;
    }
    
    int dfs(int i, vector<int>& favorite, vector<int>& visited, vector<int>& depth) {
        if (visited[i] == 1) return 0;
        if (visited[i] == 0) return depth[i];
        
        visited[i] = 0;
        depth[i] = 1 + dfs(favorite[i], favorite, visited, depth);
        visited[i] = 1;
        return depth[i];

=======

        int n = favorite.size();
        int res = 0;
        vector<int> dp(n, 1);
        for (int i = 0; i < n; ++i) {
            vector<bool> visited(n);
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = favorite[j];
            }
            if (j == i) {
                int len = 0;
                do {
                    visited[j] = false;
                    j = favorite[j];
                    ++len;
                } while (j != i);
                res += len;
                for (int k = 0; k < n; ++k) {
                    if (visited[k]) {
                        dp[k] = max(dp[k], len);
                    }
                }
            }
        }
        return res + *max_element(dp.begin(), dp.end());

=======

        int n = favorite.size();
        vector<int> next(n, -1);
        vector<bool> visited(n, false);
        for(int i = 0; i < n; i++){
            int cur = i;
            while(!visited[cur]){
                visited[cur] = true;
                cur = favorite[cur];
            }
            next[i] = cur;
        }
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for(int mask = 1; mask < (1 << n); mask++){
            int i = __builtin_ctz(mask);
            int t = mask ^ (1 << i);
            if(dp[t] >= 0 && next[i] != -1 && (t & (1 << next[i]))){
                dp[mask] = dp[t] + 1;
            }
            for(int j = i + 1; j < n; j++){
                if(mask & (1 << j)){
                    dp[mask] = max(dp[mask], dp[mask ^ (1 << j)]);
                }
            }
        }
        return dp[(1 << n) - 1];
