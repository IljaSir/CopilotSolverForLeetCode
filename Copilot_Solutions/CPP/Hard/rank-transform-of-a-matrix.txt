Synthesizing 10/10 solutions

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        vector<pair<int, pair<int, int>>> v;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                v.push_back({matrix[i][j], {i, j}});
            }
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < v.size(); ++i) {
            int x = v[i].second.first;
            int y = v[i].second.second;
            ans[x][y] = max(row[x], col[y]) + 1;
            row[x] = ans[x][y];
            col[y] = ans[x][y];
            while (i < v.size() - 1 && v[i].first == v[i + 1].first) {
                ++i;
                x = v[i].second.first;
                y = v[i].second.second;
                ans[x][y] = max(row[x], col[y]) + 1;
                row[x] = ans[x][y];
                col[y] = ans[x][y];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<int> rows(m, 0);
        vector<int> cols(n, 0);
        vector<pair<int, pair<int, int>>> v;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                v.push_back({matrix[i][j], {i, j}});
            }
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < v.size(); ++i) {
            int r = v[i].second.first;
            int c = v[i].second.second;
            int rank = max(rows[r], cols[c]) + 1;
            res[r][c] = rank;
            rows[r] = rank;
            cols[c] = rank;
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<int> rowMax(m, 0);
        vector<int> colMax(n, 0);
        vector<vector<pair<int, int>>> pos(50001);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                pos[matrix[i][j]].push_back({i, j});
            }
        }
        for (int i = 1; i < 50001; i++) {
            vector<int> rowRank(m, 0);
            vector<int> colRank(n, 0);
            for (auto p : pos[i]) {
                int r = p.first;
                int c = p.second;
                res[r][c] = max(rowRank[r], colRank[c]) + 1;
                rowRank[r] = res[r][c];
                colRank[c] = res[r][c];
            }
        }
        return res;

=======

        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<int> rowMax(m, 0), colMax(n, 0);
        vector<pair<int, int>> order;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                order.push_back({matrix[i][j], i * n + j});
            }
        }
        sort(order.begin(), order.end());
        for (auto& p : order) {
            int i = p.second / n, j = p.second % n;
            res[i][j] = max(rowMax[i], colMax[j]) + 1;
            rowMax[i] = colMax[j] = res[i][j];
        }
        return res;

=======

        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n));
        vector<int> row(m, 0), col(n, 0);
        vector<vector<pair<int, int>>> vals(100001);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                vals[matrix[i][j]].push_back({i, j});
            }
        }
        for (auto& p : vals) {
            vector<int> rank(m + n, 0);
            for (auto& v : p) {
                rank[v.first] = rank[m + v.second] = max(rank[v.first], rank[m + v.second]);
            }
            for (auto& v : p) {
                rank[v.first] = rank[m + v.second] = res[v.first][v.second] = max(rank[v.first], rank[m + v.second]) + 1;
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<vector<int>> row(m, vector<int>());
        vector<vector<int>> col(n, vector<int>());
        vector<int> maxRow(m, 0);
        vector<int> maxCol(n, 0);
        vector<vector<pair<int,int>>> v(m*n);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                v[i*n+j] = {{matrix[i][j], i}, {matrix[i][j], j}};
            }
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < m*n; i++) {
            int r = v[i][0].second;
            int c = v[i][1].second;
            res[r][c] = max(maxRow[r], maxCol[c]) + 1;
            maxRow[r] = maxCol[c] = res[r][c];
            for (int j = 0; j < row[r].size(); j++) {
                int c2 = row[r][j];
                maxCol[c2] = max(maxCol[c2], res[r][c]);
            }
            for (int j = 0; j < col[c].size(); j++) {
                int r2 = col[c][j];
                maxRow[r2] = max(maxRow[r2], res[r][c]);
            }
            row[r].push_back(c);
            col[c].push_back(r);
        }
        return res;

=======

        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> ans(m, vector<int>(n));
        vector<int> row(m), col(n);
        vector<vector<pair<int, int>>> v(m + n);
        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                v[i].emplace_back(matrix[i][j], j);
        for (int i = 0; i < m + n; ++i)
            sort(v[i].begin(), v[i].end());
        for (int i = 0; i < m + n; ++i) {
            vector<int> rank(n + m, 0);
            for (int j = 0; j < v[i].size(); ++j) {
                int x = v[i][j].second;
                if (x >= m) x -= m;
                else x += n;
                rank[x] = max(rank[x], rank[i] + 1);
            }
            for (int j = 0; j < v[i].size(); ++j) {
                int x = v[i][j].second;
                if (x >= m) {
                    x -= m;
                    ans[x][i - m] = rank[i];
                    col[i - m] = max(col[i - m], rank[i]);
                }
                else {
                    ans[i][x] = rank[i];
                    row[i] = max(row[i], rank[i]);
                }
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> ans(m, vector<int>(n));
        vector<vector<int>> pos(m + n);
        vector<int> rank(m + n);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                pos[i].push_back(j);
                pos[m + j].push_back(i);
            }
        }
        auto cmp = [&](int i, int j) { return matrix[i / n][i % n] < matrix[j / n][j % n]; };
        for (int i = 0; i < m + n; ++i) {
            sort(pos[i].begin(), pos[i].end(), cmp);
            for (int j = 0; j < pos[i].size(); ++j) {
                if (j == 0 || matrix[i / n][i % n] != matrix[pos[i][j] / n][pos[i][j] % n]) {
                    rank[i] = j + 1;
                }
                ans[pos[i][j] / n][pos[i][j] % n] = rank[i];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        vector<vector<pair<int, int>>> pos(10001);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                pos[matrix[i][j]].push_back({i, j});
            }
        }
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int v = 0; v <= 10000; v++) {
            vector<int> row(m, 0);
            vector<int> col(n, 0);
            for (auto& p: pos[v]) {
                int i = p.first;
                int j = p.second;
                ans[i][j] = max(row[i], col[j]) + 1;
                row[i] = ans[i][j];
                col[j] = ans[i][j];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<vector<int>> sorted(m * n);
        vector<int> rank(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                sorted[i * n + j] = {matrix[i][j], i, j};
            }
        }
        sort(sorted.begin(), sorted.end());
        for (int i = 0; i < m; i++) {
            vector<int> tmp(n, 0);
            for (int j = 0; j < n; j++) {
                tmp[j] = rank[j];
            }
            for (int j = 0; j < n; j++) {
                rank[j] = max(rank[j], tmp[j]);
            }
            int last = -1;
            for (int j = 0; j < n; j++) {
                if (last != -1 && matrix[i][j] != matrix[i][last]) {
                    for (int k = last; k < j; k++) {
                        rank[k] = max(rank[k], rank[j]);
                    }
                    last = j;
                }
                else if (last == -1) {
                    last = j;
                }
            }
            if (last != -1) {
                for (int k = last; k < n; k++) {
                    rank[k] = max(rank[k], rank[last]);
                }
            }
            for (int j = 0; j < n; j++) {
                res[i][j] = rank[j];
            }
        }
        for (int j = 0; j < n; j++) {
            rank[j] = 0;
        }
        for (int j = 0; j < n; j++) {
            vector<int> tmp(m, 0);
            for (int i = 0; i < m; i++) {
                tmp[i] = rank[i];
            }
            for (int i = 0; i < m; i++) {
                rank[i] = max(rank[i], tmp[i]);
            }
            int last = -1;
            for (int i = 0; i < m; i++) {
                if
