Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = 0;
        for (int k = 1; k * (k - 1) < 2 * n; ++k) {
            if ((n - (k * (k - 1) / 2)) % k == 0) {
                ++res;
            }
        }
        return res;

=======

        int ans = 1;
        for (int k = 2; k * (k - 1) / 2 <= n; ++k) {
            if ((n - (k * (k - 1) / 2)) % k == 0) {
                ans++;
            }
        }
        return ans;

=======

        int res = 0;
        for (int k = 1; k * (k - 1) < 2 * n; ++k) {
            if ((n - (k * (k - 1)) / 2) % k == 0) {
                ++res;
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            if ((n - i * (i - 1) / 2) % i == 0) {
                res++;
            }
        }
        return res;

=======

        int cnt = 0;
        for (int k = 1; k * (k - 1) / 2 < n; k++) {
            if ((n - k * (k - 1) / 2) % k == 0) {
                cnt++;
            }
        }
        return cnt;

=======

        int ans = 0;
        for(int i = 1; i * (i - 1) / 2 <= n; ++i) {
            if((n - i * (i - 1) / 2) % i == 0) {
                ++ans;
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 1; i <= n; ++i) {
            if ((2 * n - i * i + i) % (2 * i) == 0) {
                ++count;
            }
        }
        return count;

=======

        int result = 1;
        for(int i = 2; i <= sqrt(2 * n); i++) {
            if(((n - i * (i - 1) / 2) % i) == 0) {
                result++;
            }
        }
        return result;

=======

        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            int t = n - i;
            if (t % i == 0) {
                ans++;
            }
        }
        return ans;
