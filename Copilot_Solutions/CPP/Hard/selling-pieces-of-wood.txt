Synthesizing 9/10 solutions

=======

        vector<vector<long long>> dp(m + 1, vector<long long>(n + 1, 0));
        for (auto& p : prices) {
            for (int i = m; i >= p[0]; --i) {
                for (int j = n; j >= p[1]; --j) {
                    dp[i][j] = max(dp[i][j], dp[i - p[0]][j - p[1]] + p[2]);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (auto p : prices) {
            for (int i = p[0]; i <= m; ++i) {
                for (int j = p[1]; j <= n; ++j) {
                    dp[i][j] = max(dp[i][j], dp[i - p[0]][j - p[1]] + p[2]);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<long long>> dp(m+1, vector<long long>(n+1, 0));
        for (auto& p : prices) {
            for (int i = p[0]; i <= m; ++i) {
                for (int j = p[1]; j <= n; ++j) {
                    dp[i][j] = max(dp[i][j], dp[i-p[0]][j-p[1]] + p[2]);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<long long>> dp(m+1, vector<long long>(n+1, 0));
        for (auto& p : prices) {
            int h = p[0], w = p[1], price = p[2];
            for (int i = h; i <= m; ++i) {
                for (int j = w; j <= n; ++j) {
                    dp[i][j] = max(dp[i][j], dp[i-h][j-w] + price);
                }
            }
        }
        return dp[m][n];

=======

        int len = prices.size();
        vector<vector<long long>> dp(m+1, vector<long long>(n+1, 0));
        for (int i = 0; i < len; i++) {
            for (int j = prices[i][0]; j <= m; j++) {
                for (int k = prices[i][1]; k <= n; k++) {
                    dp[j][k] = max(dp[j][k], dp[j-prices[i][0]][k-prices[i][1]] + prices[i][2]);
                }
            }
        }
        return dp[m][n];

=======

        int N = prices.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (auto& p : prices) {
            for (int i = m; i >= p[0]; --i) {
                for (int j = n; j >= p[1]; --j) {
                    dp[i][j] = max(dp[i][j], dp[i - p[0]][j - p[1]] + p[2]);
                }
            }
        }
        return dp[m][n];

=======

        long long dp[m+1][n+1];
        for(int i=0;i<=m;i++)
            for(int j=0;j<=n;j++)
                dp[i][j]=0;
        for(auto& p:prices){
            for(int i=m;i>=p[0];i--){
                for(int j=n;j>=p[1];j--){
                    dp[i][j]=max(dp[i][j],dp[i-p[0]][j-p[1]]+p[2]);
                }
            }
        }
        return dp[m][n];

=======

        // sort the prices
        sort(prices.begin(), prices.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] * a[1] < b[0] * b[1];
        });
        // dp[i][j] is the max money can get by cutting a piece of wood with height i and width j
        vector<vector<long long>> dp(m + 1, vector<long long>(n + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = max(dp[i][j], (long long)i * j);
                for (auto& price : prices) {
                    if (i >= price[0] && j >= price[1]) {
                        dp[i][j] = max(dp[i][j], dp[i - price[0]][j - price[1]] + price[2]);
                    }
                }
            }
        }
        return dp[m][n];

=======

        return 0;
