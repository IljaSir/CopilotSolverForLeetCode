Synthesizing 9/10 solutions

=======

        int n = s.size();
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = s[0] == '*' ? 9 : s[0] == '0' ? 0 : 1;
        for (int i = 2; i <= n; ++i) {
            if (s[i - 1] == '*') {
                dp[i] = dp[i - 1] * 9;
                if (s[i - 2] == '1') dp[i] += dp[i - 2] * 9;
                if (s[i - 2] == '2') dp[i] += dp[i - 2] * 6;
                if (s[i - 2] == '*') dp[i] += dp[i - 2] * 15;
            } else {
                dp[i] = s[i - 1] != '0' ? dp[i - 1] : 0;
                if (s[i - 2] == '1') dp[i] += dp[i - 2];
                if (s[i - 2] == '2' && s[i - 1] <= '6') dp[i] += dp[i - 2];
                if (s[i - 2] == '*') dp[i] += dp[i - 2] * (s[i - 1] <= '6' ? 2 : 1);
            }
            dp[i] %= 1000000007;
        }
        return dp[n];

=======

        int n = s.size();
        int mod = 1e9 + 7;
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s[i - 1] == '*') {
                dp[i] = dp[i - 1] * 9;
                if (i > 1) {
                    if (s[i - 2] == '1') {
                        dp[i] += dp[i - 2] * 9;
                    } else if (s[i - 2] == '2') {
                        dp[i] += dp[i - 2] * 6;
                    } else if (s[i - 2] == '*') {
                        dp[i] += dp[i - 2] * 15;
                    }
                }
            } else {
                if (s[i - 1] != '0') {
                    dp[i] = dp[i - 1];
                }
                if (i > 1) {
                    if (s[i - 2] == '1') {
                        dp[i] += dp[i - 2];
                    } else if (s[i - 2] == '2' && s[i - 1] <= '6') {
                        dp[i] += dp[i - 2];
                    } else if (s[i - 2] == '*') {
                        dp[i] += dp[i - 2] * (s[i - 1] <= '6' ? 2 : 1);
                    }
                }
            }
            dp[i] %= mod;
        }
        return dp[n];

=======

        const int mod = 1e9 + 7;
        int n = s.size();
        vector<long long> dp(n + 1);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s[i - 1] == '*') {
                dp[i] = dp[i - 1] * 9;
                if (i >= 2) {
                    if (s[i - 2] == '1') {
                        dp[i] += dp[i - 2] * 9;
                    } else if (s[i - 2] == '2') {
                        dp[i] += dp[i - 2] * 6;
                    } else if (s[i - 2] == '*') {
                        dp[i] += dp[i - 2] * 15;
                    }
                }
            } else {
                dp[i] = s[i - 1] != '0' ? dp[i - 1] : 0;
                if (i >= 2) {
                    if (s[i - 2] == '1') {
                        dp[i] += dp[i - 2];
                    } else if (s[i - 2] == '2' && s[i - 1] <= '6') {
                        dp[i] += dp[i - 2];
                    } else if (s[i - 2] == '*') {
                        dp[i] += dp[i - 2] * (s[i - 1] <= '6' ? 2 : 1);
                    }
                }
            }
            dp[i] %= mod;
        }
        return dp[n];

=======

        int n = s.size();
        const int mod = 1e9 + 7;
        vector<long long> f(n + 1);
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s[i - 1] == '0') {
                if (i == 1 || s[i - 2] == '0' || s[i - 2] >= '3') {
                    return 0;
                }
                f[i] = f[i - 2];
            } else if (s[i - 1] == '*') {
                f[i] = 9 * f[i - 1];
                if (i > 1) {
                    if (s[i - 2] == '1') {
                        f[i] = (f[i] + 9 * f[i - 2]) % mod;
                    } else if (s[i - 2] == '2') {
                        f[i] = (f[i] + 6 * f[i - 2]) % mod;
                    } else if (s[i - 2] == '*') {
                        f[i] = (f[i] + 15 * f[i - 2]) % mod;
                    }
                }
            } else {
                f[i] = f[i - 1];
                if (i > 1 && s[i - 2] != '0') {
                    int ten = (s[i - 2] - '0') * 10;
                    int one = s[i - 1] - '0';
                    if (ten + one <= 26) {
                        f[i] = (f[i] + f[i - 2]) % mod;
                    }
                }
            }
        }
        return f[n];

=======

        int n = s.size();
        int mod = 1e9+7;
        vector<long> dp(n+1);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s[i-1] == '*') {
                dp[i] = 9 * dp[i-1];
                if (i > 1) {
                    if (s[i-2] == '1') {
                        dp[i] = (dp[i] + 9 * dp[i-2]) % mod;
                    } else if (s[i-2] == '2') {
                        dp[i] = (dp[i] + 6 * dp[i-2]) % mod;
                    } else if (s[i-2] == '*') {
                        dp[i] = (dp[i] + 15 * dp[i-2]) % mod;
                    }
                }
            } else {
                dp[i] = s[i-1] != '0' ? dp[i-1] : 0;
                if (i > 1) {
                    if (s[i-2] == '1') {
                        dp[i] = (dp[i] + dp[i-2]) % mod;
                    } else if (s[i-2] == '2' && s[i-1] <= '6') {
                        dp[i] = (dp[i] + dp[i-2]) % mod;
                    } else if (s[i-2] == '*') {
                        dp[i] = (dp[i] + (s[i-1] <= '6' ? 2 : 1) * dp[i-2]) % mod;
                    }
                }
            }
        }
        return dp[n];

=======

        int n = s.size();
        if (n == 0) return 0;
        int mod = 1e9 + 7;
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            char c = s[i - 1];
            if (c == '*') {
                // 1 digit
                dp[i] = 9 * dp[i - 1];
                // 2 digits
                if (i >= 2) {
                    if (s[i - 2] == '1') dp[i] = (dp[i] + 9 * dp[i - 2]) % mod;
                    else if (s[i - 2] == '2') dp[i] = (dp[i] + 6 * dp[i - 2]) % mod;
                    else if (s[i - 2] == '*') dp[i] = (dp[i] + 15 * dp[i - 2]) % mod;
                }
            } else {
                // 1 digit
                if (c != '0') dp[i] = dp[i - 1];
                // 2 digits
                if (i >= 2) {
                    if (s[i - 2] == '1' || (s[i - 2] == '2' && c <= '6')) dp[i] = (dp[i] + dp[i - 2]) % mod;
                    else if (s[i - 2] == '*') dp[i] = (dp[i] + (c <= '6' ? 2 : 1) * dp[i - 2]) % mod;
                }
            }
        }
        return dp[n];

=======

        int n = s.length();
        if (n == 0) return 0;
        if (s[0] == '0') return 0;
        int mod = 1000000007;
        vector<long long> dp(n+1, 0);
        dp[0] = 1;
        dp[1] = s[0] == '*' ? 9 : 1;
        for (int i = 2; i <= n; i++) {
            char c1 = s[i-2], c2 = s[i-1];
            if (c2 == '*') {
                dp[i] = 9 * dp[i-1];
            } else if (c2 != '0') {
                dp[i] = dp[i-1];
            }
            if (c1 == '*') {
                if (c2 == '*') {
                    dp[i] = (dp[i] + 15 * dp[i-2]) % mod;
                } else if (c2 <= '6') {
                    dp[i] = (dp[i] + 2 * dp[i-2]) % mod;
                } else {
                    dp[i] = (dp[i] + dp[i-2]) % mod;
                }
            } else if (c1 == '1') {
                if (c2 == '*') {
                    dp[i] = (dp[i] + 9 * dp[i-2]) % mod;
                } else {
                    dp[i] = (dp[i] + dp[i-2]) % mod;
                }
            } else if (c1 == '2') {
                if (c2 == '*') {
                    dp[i] = (dp[i] + 6 * dp[i-2]) % mod;
                } else if (c2 <= '6') {
                    dp[i] = (dp[i] + dp[i-2]) % mod;
                }
            }
        }
        return dp[n];

=======

        int n = s.size();
        vector<long> dp(n+1, 0);
        const int mod = 1e9 + 7;
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s[i-1] == '0') {
                if (i < 2 || (s[i-2] != '1' && s[i-2] != '2')) return 0;
                dp[i] = dp[i-2];
            } else if (s[i-1] == '*') {
                dp[i] = 9 * dp[i-1];
                if (i >= 2) {
                    if (s[i-2] == '1') {
                        dp[i] += 9 * dp[i-2];
                    } else if (s[i-2] == '2') {
                        dp[i] += 6 * dp[i-2];
                    } else if (s[i-2] == '*') {
                        dp[i] += 15 * dp[i-2];
                    }
                }
            } else {
                dp[i] = dp[i-1];
                if (i >= 2) {
                    if (s[i-2] == '1') {
                        dp[i] += dp[i-2];
                    } else if (s[i-2] == '2' && s[i-1] <= '6') {
                        dp[i] += dp[i-2];
                    } else if (s[i-2] == '*') {
                        if (s[i-1] <= '6') {
                            dp[i] += 2 * dp[i-2];
                        } else {
                            dp[i] += dp[i-2];
                        }
                    }
                }
            }
            dp[i] %= mod;
        }
        return dp[n];

=======

        int n = s.size();
        if (n == 0) return 0;
        int dp[n+1];
        dp[0] = 1;
        dp[1] = s[0] == '*'? 9 : s[0] == '0'? 0 : 1;
        for (int i = 1; i < n; i++) {
            if (s[i] == '*') {
                dp[i+1] = 9 * dp[i];
                if (s[i-1] == '1') {
                    dp[i+1] += 9 * dp[i-1];
                } else if (s[i-1] == '2') {
                    dp[i+1] += 6 * dp[i-1];
                } else if (s[i-1] == '*') {
                    dp[i+1] += 15 * dp[i-1];
                }
            } else {
                dp[i+1] = s[i] == '0'? 0 : dp[i];
                if (s[i-1] == '1') {
                    dp[i+1] += dp[i-1];
                } else if (s[i-1] == '2' && s[i] <= '6') {
                    dp[i+1] += dp[i-1];
                } else if (s[i-1] == '*') {
                    dp[i+1] += (s[i] <= '6'? 2 : 1) * dp[i-1];
                }
            }
            dp[i+1] %= 1000000007;
        }
        return dp[n];
