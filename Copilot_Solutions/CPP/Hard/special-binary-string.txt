Synthesizing 10/10 solutions

=======

        int count = 0, i = 0;
        vector<string> res;
        for (int j = 0; j < s.size(); ++j) {
            count += s[j] == '1' ? 1 : -1;
            if (count == 0) {
                res.push_back('1' + makeLargestSpecial(s.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        sort(res.begin(), res.end(), greater<string>());
        return accumulate(res.begin(), res.end(), string());

=======

        int count = 0, i = 0;
        vector<string> res;
        for (int j = 0; j < s.size(); ++j) {
            if (s[j] == '1') ++count;
            else --count;
            if (count == 0) {
                res.push_back('1' + makeLargestSpecial(s.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        sort(res.begin(), res.end(), greater<string>());
        string ans;
        for (auto a : res) ans += a;
        return ans;

=======

        int count = 0, i = 0;
        vector<string> res;
        for (int j = 0; j < s.size(); ++j) {
            count += (s[j] == '1' ? 1 : -1);
            if (count == 0) {
                res.push_back('1' + makeLargestSpecial(s.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        sort(res.begin(), res.end(), greater<string>());
        string t;
        for (auto r : res) t += r;
        return t;

=======

        int i = 0;
        vector<string> v;
        for (int j = 0; j < s.size(); ++j) {
            if (s[j] == '1') {
                ++i;
            } else {
                --i;
            }
            if (i == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(1 + i, j - i - 1)) + '0');
            }
        }
        sort(v.begin(), v.end(), greater<string>());
        string res;
        for (auto &s: v) {
            res += s;
        }
        return res;

=======

        int i = 0, cnt = 0;
        vector<string> v;
        for (int j = 0; j < s.length(); ++j) {
            if (s[j] == '1') cnt++;
            else cnt--;
            if (cnt == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        sort(v.begin(), v.end());
        reverse(v.begin(), v.end());
        string res = "";
        for (auto& x: v) res += x;
        return res;

=======

        int n = s.size();
        vector<string> parts;
        for (int i = 0, j = 0, bal = 0; i < n; ++i) {
            bal += s[i] == '1' ? 1 : -1;
            if (bal == 0) {
                parts.push_back('1' + makeLargestSpecial(s.substr(j + 1, i - j - 1)) + '0');
                j = i + 1;
            }
        }
        sort(parts.begin(), parts.end(), greater<string>());
        string ans;
        for (string& part : parts)
            ans += part;
        return ans;

=======

        int n = s.size();
        vector<string> v;
        int i = 0;
        int cnt = 0;
        while (i < n) {
            if (s[i] == '1') {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(i + 1, n - i - 2)) + '0');
                i = n;
            }
            i++;
        }
        sort(v.begin(), v.end());
        reverse(v.begin(), v.end());
        string res = "";
        for (auto s : v) {
            res += s;
        }
        return res;

=======

        vector<string> v;
        int n = s.length();
        int c = 0;
        int i = 0;
        for (int j = 0; j < n; ++j) {
            if (s[j] == '1') {
                ++c;
            } else {
                --c;
            }
            if (c == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(i + 1, j - i - 1)) + '0');
                i = j + 1;
            }
        }
        sort(v.begin(), v.end(), greater<string>());
        string r;
        for (auto x: v) {
            r += x;
        }
        return r;

=======

        int n = s.size();
        vector<string> v;
        int i = 0;
        int j = 0;
        int cnt = 0;
        while (i < n) {
            if (s[i] == '1') {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(j + 1, i - j - 1)) + '0');
                j = i + 1;
            }
            i++;
        }
        sort(v.begin(), v.end(), greater<string>());
        string res;
        for (auto& s : v) {
            res += s;
        }
        return res;

=======

        string ans = "";
        int i = 0;
        int j = 0;
        int c = 0;
        vector<string> v;
        while (i < s.size()) {
            if (s[i] == '1') c++;
            else c--;
            if (c == 0) {
                v.push_back('1' + makeLargestSpecial(s.substr(j + 1, i - j - 1)) + '0');
                j = i + 1;
            }
            i++;
        }
        sort(v.begin(), v.end());
        for (i = v.size() - 1; i >= 0; i--) ans += v[i];
        return ans;
