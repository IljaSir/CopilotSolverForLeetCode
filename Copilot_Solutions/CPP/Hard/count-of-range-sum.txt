Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<long long> sums(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sums[i + 1] = sums[i] + nums[i];
        }
        return countWhileMergeSort(sums, 0, n + 1, lower, upper);

=======

        int n = nums.size();
        vector<long> sum(n+1, 0);
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        return countWhileMergeSort(sum, 0, n+1, lower, upper);
    }
    int countWhileMergeSort(vector<long>& sum, int start, int end, int lower, int upper) {
        if (end - start <= 1) return 0;
        int mid = (start + end) / 2;
        int count = countWhileMergeSort(sum, start, mid, lower, upper) + countWhileMergeSort(sum, mid, end, lower, upper);
        int j = mid, k = mid, t = mid;
        vector<long> cache(end - start, 0);
        for (int i = start, r = 0; i < mid; i++, r++) {
            while (k < end && sum[k] - sum[i] < lower) k++;
            while (j < end && sum[j] - sum[i] <= upper) j++;
            while (t < end && sum[t] < sum[i]) cache[r++] = sum[t++];
            cache[r] = sum[i];
            count += j - k;
        }
        copy(cache.begin(), cache.begin() + t - start, sum.begin() + start);
        return count;

=======

        int n = nums.size();
        vector<long long> sums(n+1);
        for (int i = 0; i < n; i++) {
            sums[i+1] = sums[i] + nums[i];
        }
        return countWhileMergeSort(sums, 0, n+1, lower, upper);

=======

        int n = nums.size();
        vector<long long> presum(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            presum[i] = presum[i - 1] + nums[i - 1];
        }
        auto cmp = [](const pair<long long, int>& a, const pair<long long, int>& b) {
            return a.first < b.first;
        };
        set<pair<long long, int>, decltype(cmp)> s(cmp);
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            auto it1 = s.lower_bound({presum[i] - upper, 0});
            auto it2 = s.upper_bound({presum[i] - lower, 0});
            while (it1 != it2) {
                ans++;
                it1++;
            }
            s.insert({presum[i], i});
        }
        return ans;

=======

        int n = nums.size();
        long long sum = 0;
        multiset<long long> s;
        s.insert(0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            auto it = s.lower_bound(sum - upper);
            while (it != s.end() && *it <= sum - lower) {
                ++ans;
                ++it;
            }
            s.insert(sum);
        }
        return ans;

=======

        int n = nums.size();
        long long sum = 0;
        vector<long long> sums;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            sums.push_back(sum);
        }
        return mergeSort(sums, lower, upper, 0, n - 1);
    }
    int mergeSort(vector<long long>& sums, int lower, int upper, int left, int right) {
        if (left == right) {
            return sums[left] >= lower && sums[left] <= upper;
        }
        int mid = (left + right) >> 1;
        int n1 = mergeSort(sums, lower, upper, left, mid);
        int n2 = mergeSort(sums, lower, upper, mid + 1, right);
        int ret = n1 + n2;
        int i = left, l = mid + 1, r = mid + 1;
        while (i <= mid) {
            while (l <= right && sums[l] - sums[i] < lower) l++;
            while (r <= right && sums[r] - sums[i] <= upper) r++;
            ret += r - l;
            i++;
        }
        vector<long long> sorted(right - left + 1);
        int p1 = left, p2 = mid + 1, p = 0;
        while (p1 <= mid || p2 <= right) {
            long long v1 = p1 <= mid ? sums[p1] : INT64_MAX;
            long long v2 = p2 <= right ? sums[p2] : INT64_MAX;
            if (v1 < v2) {
                sorted[p++] = v1;
                p1++;
            } else {
                sorted[p++] = v2;
                p2++;
            }
        }
        for (int i = 0; i < sorted.size(); i++) {
            sums[left + i] = sorted[i];
        }
        return ret;

=======

        int n = nums.size();
        long long sum = 0;
        int res = 0;
        multiset<long long> s;
        s.insert(0);
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            res += distance(s.lower_bound(sum - upper), s.upper_bound(sum - lower));
            s.insert(sum);
        }
        return res;

=======

        vector<long> sums(nums.size()+1);
        for (int i=0; i<nums.size(); i++) {
            sums[i+1] = sums[i] + nums[i];
        }
        return countRangeSumRecursive(sums, 0, sums.size(), lower, upper);
