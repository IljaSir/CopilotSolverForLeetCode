Synthesizing 10/10 solutions

=======

        int res = 0;
        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 1; j < n; j++) {
                matrix[i][j] += matrix[i][j - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int cur = 0;
                for (int k = 0; k < m; k++) {
                    cur += matrix[k][j] - (i > 0 ? matrix[k][i - 1] : 0);
                    res += mp[cur - target];
                    mp[cur]++;
                }
            }
        }
        return res;

=======

        int n = matrix.size(), m = matrix[0].size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < m; j++) {
                matrix[i][j] += matrix[i][j-1];
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = i; j < m; j++) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int sum = 0;
                for (int k = 0; k < n; k++) {
                    sum += matrix[k][j] - (i > 0 ? matrix[k][i-1] : 0);
                    ans += mp[sum - target];
                    mp[sum]++;
                }
            }
        }
        return ans;

=======

        int n = matrix.size();
        int m = matrix[0].size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j < m; ++j) {
                matrix[i][j] += matrix[i][j-1];
            }
        }
        for (int i = 0; i < m; ++i) {
            for (int j = i; j < m; ++j) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int cur = 0;
                for (int k = 0; k < n; ++k) {
                    cur += matrix[k][j] - (i > 0 ? matrix[k][i-1] : 0);
                    res += mp[cur - target];
                    ++mp[cur];
                }
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int result = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 1; j < n; j++) {
                matrix[i][j] += matrix[i][j - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                unordered_map<int, int> map;
                map[0] = 1;
                int sum = 0;
                for (int k = 0; k < m; k++) {
                    sum += matrix[k][j] - (i > 0 ? matrix[k][i - 1] : 0);
                    result += map[sum - target];
                    map[sum]++;
                }
            }
        }
        return result;

=======

        int m = matrix.size(), n = matrix[0].size(), res = 0;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n);
            for (int j = i; j < m; j++) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int cur = 0;
                for (int k = 0; k < n; k++) {
                    sum[k] += matrix[j][k];
                    cur += sum[k];
                    res += mp[cur - target];
                    mp[cur]++;
                }
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            vector<int> sum(n, 0);
            for (int j = i; j < m; ++j) {
                for (int k = 0; k < n; ++k) {
                    sum[k] += matrix[j][k];
                }
                unordered_map<int, int> cnt;
                cnt[0] = 1;
                int s = 0;
                for (int k = 0; k < n; ++k) {
                    s += sum[k];
                    ans += cnt[s - target];
                    cnt[s]++;
                }
            }
        }
        return ans;

=======

        int rows = matrix.size();
        int cols = matrix[0].size();
        int res = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 1; j < cols; j++) {
                matrix[i][j] += matrix[i][j - 1];
            }
        }
        for (int i = 0; i < cols; i++) {
            for (int j = i; j < cols; j++) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int cur = 0;
                for (int k = 0; k < rows; k++) {
                    cur += matrix[k][j] - (i > 0 ? matrix[k][i - 1] : 0);
                    res += mp[cur - target];
                    mp[cur]++;
                }
            }
        }
        return res;

=======

        int n = matrix.size(), m = matrix[0].size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            vector<int> sum(m, 0);
            for (int j = i; j < n; j++) {
                for (int k = 0; k < m; k++) {
                    sum[k] += matrix[j][k];
                }
                unordered_map<int, int> mp;
                mp[0] = 1;
                int s = 0;
                for (int k = 0; k < m; k++) {
                    s += sum[k];
                    ans += mp[s - target];
                    mp[s]++;
                }
            }
        }
        return ans;

=======

        int result = 0;
        for (int i = 0; i < matrix.size(); i++) {
            vector<int> sum(matrix[0].size(), 0);
            for (int j = i; j < matrix.size(); j++) {
                for (int k = 0; k < matrix[0].size(); k++) {
                    sum[k] += matrix[j][k];
                }
                result += subArraySum(sum, target);
            }
        }
        return result;
    }
    
    int subArraySum(vector<int>& nums, int k) {
        int result = 0;
        unordered_map<int, int> map;
        map[0] = 1;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            result += map[sum - k];
            map[sum]++;
        }
        return result;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            dp[i][0] = matrix[i][0];
            for (int j = 1; j < n; ++j) {
                dp[i][j] = dp[i][j - 1] + matrix[i][j];
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                unordered_map<int, int> mp;
                mp[0] = 1;
                int sum = 0;
                for (int k = 0; k < m; ++k) {
                    sum += dp[k][j] - (i > 0 ? dp[k][i - 1] : 0);
                    if (mp.count(sum - target)) {
                        res += mp[sum - target];
                    }
                    mp[sum]++;
                }
            }
        }
        return res;
