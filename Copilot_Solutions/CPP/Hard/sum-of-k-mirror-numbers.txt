Synthesizing 5/10 solutions

=======

        vector<long long> nums;
        for (int i = 1; i < k; i++) {
            nums.push_back(i);
        }
        for (int i = 0; i < n; i++) {
            long long num = nums[i];
            long long next = num * k;
            nums.push_back(next);
            long long rev = 0;
            for (long long x = num; x > 0; x /= k) {
                rev = rev * k + x % k;
            }
            nums.push_back(next + rev);
        }
        return accumulate(nums.begin(), nums.begin() + n, 0LL);

=======

        vector<long long> res;
        for (int i = 1; i < k; ++i) {
            res.push_back(i);
        }
        while (res.size() < n) {
            int sz = res.size();
            for (int i = sz - 1; i >= 0; --i) {
                long long x = res[i];
                long long y = x;
                int cnt = 0;
                while (y > 0) {
                    cnt++;
                    y /= k;
                }
                y = x;
                while (cnt > 0) {
                    y = y * k + y % k;
                    cnt--;
                }
                res.push_back(y);
                if (res.size() == n) {
                    break;
                }
            }
        }
        long long sum = 0;
        for (long long x : res) {
            sum += x;
        }
        return sum;

=======

        long long ans = 0;
        vector<long long> v;
        v.push_back(1);
        for (int i = 2; i < k; ++i) {
            v.push_back(v.back() * k);
        }
        for (int i = 0; i < n; ++i) {
            ans += v[i];
        }
        return ans;

=======

        long long res = 0;
        for (int i = 1; i <= n; i++) {
            long long num = 0;
            int cnt = 0;
            while (cnt < i) {
                num = num * k + 1;
                cnt++;
            }
            res += num;
        }
        return res;

=======

        return 0;
