Synthesizing 5/10 solutions

=======

        int n = text.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            string s1 = text.substr(0, i + 1);
            string s2 = text.substr(n - i - 1, i + 1);
            if (s1 == s2) {
                ans += 2;
                text = text.substr(i + 1, n - 2 * (i + 1));
                n -= 2 * (i + 1);
                i = -1;
            }
        }
        if (n != 0) ans++;
        return ans;

=======

        int n = text.size();
        int i = 0, j = n - 1;
        int ans = 0;
        while (i <= j) {
            int k = 0;
            while (i + k <= j - k && text[i + k] == text[j - k]) {
                ++k;
            }
            if (k == 0) {
                ++ans;
                ++i;
                --j;
            } else {
                ans += 2;
                i += k;
                j -= k;
            }
        }
        return ans;

=======

        int n = text.size();
        int i = 0, j = n - 1;
        int ans = 0;
        while (i < j) {
            int k = 1;
            while (i + k <= j && text.substr(i, k) != text.substr(j - k + 1, k)) {
                k++;
            }
            ans += 2;
            i += k;
            j -= k;
        }
        if (i == j) {
            ans++;
        }
        return ans;

=======

        int n = text.size();
        if (n == 0) return 0;
        if (n == 1) return 1;
        string left = "";
        string right = "";
        for (int i = 0; i < n; i++) {
            left += text[i];
            right = text[n - 1 - i] + right;
            if (left == right) {
                return 2 + longestDecomposition(text.substr(i + 1, n - 2 * (i + 1)));
            }
        }
        return 1;

=======

        int n = text.size();
        int i = 0;
        int j = n-1;
        int res = 0;
        while (i < j) {
            int k = 0;
            while (i + k <= j - k && text[i + k] == text[j - k]) {
                k++;
            }
            if (k == 0) {
                i++;
                j--;
                res += 2;
            } else {
                i += k;
                j -= k;
            }
        }
        if (i == j) {
            res++;
        }
        return res;
