Synthesizing 4/10 solutions (Duplicates hidden)

=======

        int n = stickers.size();
        vector<vector<int>> cnt(n, vector<int>(26, 0));
        for (int i = 0; i < n; ++i) {
            for (char c : stickers[i]) {
                ++cnt[i][c - 'a'];
            }
        }
        int m = target.size();
        vector<vector<int>> dp(1 << m, vector<int>(26, 0));
        for (int i = 0; i < (1 << m); ++i) {
            for (int j = 0; j < m; ++j) {
                if ((i >> j) & 1) {
                    ++dp[i][target[j] - 'a'];
                }
            }
        }
        for (int i = 0; i < (1 << m); ++i) {
            for (int j = 0; j < n; ++j) {
                int nxt = i;
                for (int k = 0; k < 26; ++k) {
                    if (dp[i][k] < cnt[j][k]) {
                        nxt |= ((1 << m) - 1) ^ ((1 << (m - dp[i][k])) - 1);
                    }
                }
                if (nxt != i) {
                    for (int k = 0; k < 26; ++k) {
                        dp[nxt][k] = max(dp[nxt][k], dp[i][k] - cnt[j][k]);
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            ans += dp[(1 << m) - 1][target[i] - 'a'];
        }
        return ans == m ? -1 : ans;

=======

        int n = target.size();
        vector<int> dp(1<<n, -1);
        dp[0] = 0;
        for (int state = 0; state < (1<<n); state++) {
            if (dp[state] == -1) continue;
            for (string& sticker: stickers) {
                int now = state;
                for (char letter: sticker) {
                    for (int i = 0; i < n; i++) {
                        if (!(now>>i&1) && target[i] == letter) {
                            now |= 1<<i;
                            break;
                        }
                    }
                }
                if (dp[now] == -1 || dp[now] > dp[state] + 1) {
                    dp[now] = dp[state] + 1;
                }
            }
        }
        return dp[(1<<n)-1];

=======

        int n = stickers.size();
        vector<vector<int>> sticker(n, vector<int>(26, 0));
        for (int i = 0; i < n; ++i) {
            for (char c : stickers[i]) {
                ++sticker[i][c - 'a'];
            }
        }
        vector<int> dp(1 << target.size(), INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < dp.size(); ++i) {
            if (dp[i] == INT_MAX) continue;
            for (int j = 0; j < n; ++j) {
                int cur = i;
                for (int k = 0; k < target.size(); ++k) {
                    if ((cur >> k) & 1) continue;
                    if (sticker[j][target[k] - 'a'] == 0) continue;
                    cur |= (1 << k);
                }
                dp[cur] = min(dp[cur], dp[i] + 1);
            }
        }
        return dp.back() == INT_MAX ? -1 : dp.back();
