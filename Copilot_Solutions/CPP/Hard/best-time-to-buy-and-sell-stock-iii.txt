Synthesizing 10/10 solutions

=======

        int n = prices.size();
        int buy1 = INT_MAX, buy2 = INT_MAX;
        int sell1 = 0, sell2 = 0;
        for (int i = 0; i < n; i++) {
            buy1 = min(buy1, prices[i]);
            sell1 = max(sell1, prices[i] - buy1);
            buy2 = min(buy2, prices[i] - sell1);
            sell2 = max(sell2, prices[i] - buy2);
        }
        return sell2;

=======

        int n = prices.size();
        if (n < 2) return 0;
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        int minPrice = prices[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i - 1], prices[i] - minPrice);
            minPrice = min(minPrice, prices[i]);
        }
        int maxPrice = prices[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], maxPrice - prices[i]);
            maxPrice = max(maxPrice, prices[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, left[i] + right[i]);
        }
        return res;

=======

        int n = prices.size();
        if (n == 0) return 0;
        vector<int> dp(n, 0);
        int minPrice = prices[0];
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i - 1], prices[i] - minPrice);
            minPrice = min(minPrice, prices[i]);
        }
        int maxProfit = 0;
        int maxPrice = prices[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxProfit = max(maxProfit, maxPrice - prices[i] + dp[i]);
            maxPrice = max(maxPrice, prices[i]);
        }
        return maxProfit;

=======

        int n = prices.size();
        vector<int> f(n);
        int minPrice = prices[0];
        for (int i = 1; i < n; i++) {
            minPrice = min(minPrice, prices[i]);
            f[i] = max(f[i - 1], prices[i] - minPrice);
        }
        int maxPrice = prices[n - 1];
        int maxProfit = 0;
        for (int i = n - 2; i >= 0; i--) {
            maxPrice = max(maxPrice, prices[i]);
            maxProfit = max(maxProfit, maxPrice - prices[i] + f[i]);
        }
        return maxProfit;

=======

        int n = prices.size();
        vector<int> dp(n, 0);
        int min_price = prices[0];
        for (int i = 1; i < n; i++) {
            min_price = min(min_price, prices[i]);
            dp[i] = max(dp[i - 1], prices[i] - min_price);
        }
        int max_price = prices[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max_price = max(max_price, prices[i]);
            dp[i] = max(dp[i + 1], dp[i] + max_price - prices[i]);
        }
        return dp[0];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        int dp[n][3][2];
        dp[0][0][0] = 0;
        dp[0][0][1] = -prices[0];
        dp[0][1][0] = 0;
        dp[0][1][1] = -prices[0];
        dp[0][2][0] = 0;
        dp[0][2][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][0][0] = 0;
            dp[i][0][1] = max(dp[i-1][0][1], dp[i-1][0][0] - prices[i]);
            dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][0][1] + prices[i]);
            dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][1][0] - prices[i]);
            dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][1][1] + prices[i]);
        }
        return max(dp[n-1][0][0], max(dp[n-1][1][0], dp[n-1][2][0]));

=======

        int n = prices.size();
        if (n < 2) return 0;
        int dp[n][3][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j][0] = 0;
                dp[i][j][1] = 0;
            }
        }
        dp[0][1][1] = -prices[0];
        dp[0][2][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i]);
            dp[i][1][1] = max(dp[i-1][1][1], -prices[i]);
            dp[i][2][0] = max(dp[i-1][2][0], dp[i-1][2][1] + prices[i]);
            dp[i][2][1] = max(dp[i-1][2][1], dp[i-1][1][0] - prices[i]);
        }
        return max(dp[n-1][1][0], dp[n-1][2][0]);

=======

        int n = prices.size();
        if (n < 2) return 0;
        vector<int> dp(n);
        int minPrice = prices[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i - 1], prices[i] - minPrice);
            minPrice = min(minPrice, prices[i]);
        }
        int maxPrice = prices[n - 1];
        int res = dp[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            res = max(res, dp[i] + maxPrice - prices[i]);
            maxPrice = max(maxPrice, prices[i]);
        }
        return res;

=======

        int n = prices.size();
        vector<int> dp(n, 0);
        int minPrice = prices[0];
        int maxProfit = 0;
        for (int i = 1; i < n; ++i) {
            minPrice = min(minPrice, prices[i]);
            maxProfit = max(maxProfit, prices[i] - minPrice);
            dp[i] = maxProfit;
        }
        int maxPrice = prices[n - 1];
        maxProfit = 0;
        int ans = 0;
        for (int i = n - 2; i >= 0; --i) {
            maxPrice = max(maxPrice, prices[i]);
            maxProfit = max(maxProfit, maxPrice - prices[i]);
            ans = max(ans, dp[i] + maxProfit);
        }
        return ans;

=======

        int n = prices.size();
        if (n <= 1) return 0;
        int min = prices[0];
        int max = prices[n - 1];
        vector<int> profit(n, 0);
        for (int i = 1; i < n; i++) {
            min = std::min(min, prices[i]);
            profit[i] = std::max(profit[i - 1], prices[i] - min);
        }
        int maxProfit = profit[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max = std::max(max, prices[i]);
            maxProfit = std::max(maxProfit, profit[i] + max - prices[i]);
        }
        return maxProfit;
