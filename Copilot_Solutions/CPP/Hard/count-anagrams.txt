Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int count = 0;
        vector<string> words;
        string word = "";
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == ' ') {
                words.push_back(word);
                word = "";
            } else {
                word += s[i];
            }
        }
        words.push_back(word);
        for (int i = 0; i < words.size(); i++) {
            for (int j = i + 1; j < words.size(); j++) {
                if (isAnagram(words[i], words[j])) {
                    count++;
                }
            }
        }
        return count;
    }
    
    bool isAnagram(string s, string t) {
        if (s.size() != t.size()) {
            return false;
        }
        
        vector<int> sCount(26, 0);
        vector<int> tCount(26, 0);
        for (int i = 0; i < s.size(); i++) {
            sCount[s[i] - 'a']++;
            tCount[t[i] - 'a']++;
        }
        
        for (int i = 0; i < 26; i++) {
            if (sCount[i] != tCount[i]) {
                return false;
            }
        }
        
        return true;

=======

        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == ' ') {
                cnt++;
            }
        }
        int ans = 1;
        int mod = 1e9 + 7;
        for (int i = 0; i < cnt; i++) {
            ans = ans * (i + 1) % mod;
        }
        return ans;

=======

        int n = s.size();
        int res = 0;
        int mod = 1e9 + 7;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && s[j] != ' ') {
                j++;
            }
            int cnt = j - i;
            res = (res + (long long)cnt * (cnt + 1) / 2) % mod;
            i = j;
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        int mod = 1e9 + 7;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            int j = i;
            while (j < n && s[j] != ' ') {
                ++cnt;
                ++j;
            }
            ans = (ans + (cnt * (cnt - 1) / 2) % mod) % mod;
            i = j;
        }
        return ans;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int cnt[26] = {0};
            int j = i;
            while (j < n && s[j] != ' ') {
                cnt[s[j] - 'a']++;
                j++;
            }
            i = j;
            for (int k = 0; k < 26; k++) {
                ans += (cnt[k] * (cnt[k] - 1)) / 2;
            }
        }
        return ans;

=======

        int n = s.size();
        int mod = 1e9 + 7;
        vector<int> f(26, 0);
        for (char c : s) {
            if (c != ' ') {
                f[c - 'a']++;
            }
        }
        long long ans = 1;
        for (int i = 0; i < 26; i++) {
            ans = ans * f[i] % mod;
        }
        return ans;

=======

        int n = s.size();
        vector<int> fact(n + 1);
        fact[0] = 1;
        for(int i = 1; i <= n; i++) fact[i] = (i * 1LL * fact[i - 1]) % 1000000007;
        vector<int> cnt(26);
        int ans = 1;
        for(int i = 0; i < n; i++) {
            if(s[i] == ' ') {
                int curr = 0;
                for(int j = 0; j < 26; j++) curr += cnt[j] > 0;
                ans = (ans * 1LL * fact[curr]) % 1000000007;
                for(int j = 0; j < 26; j++) cnt[j] = 0;
            } else {
                cnt[s[i] - 'a']++;
            }
        }
        int curr = 0;
        for(int j = 0; j < 26; j++) curr += cnt[j] > 0;
        ans = (ans * 1LL * fact[curr]) % 1000000007;
        return ans;

=======

        int n = s.size();
        int mod = 1e9 + 7;
        vector<long long> dp(n, 0);
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                dp[i] = 1;
            } else {
                dp[i] = (dp[i - 1] * 26) % mod;
            }
        }
        long long ans = 0;
        unordered_map<string, int> cnt;
        string word = "";
        for (int i = 0; i < n; i++) {
            if (s[i] == ' ') {
                cnt[word]++;
                word = "";
            } else {
                word += s[i];
            }
        }
        cnt[word]++;
        for (auto& [_, v] : cnt) {
            ans = (ans + dp[v - 1]) % mod;
        }
        return ans;
