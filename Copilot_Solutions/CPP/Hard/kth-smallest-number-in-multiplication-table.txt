Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int l = 1, r = m * n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for (int i = 1; i <= m; i++) {
                cnt += min(mid / i, n);
            }
            if (cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int low = 1, high = m * n;
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;
            for (int i = 1; i <= m; i++) {
                count += min(mid / i, n);
            }
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int l = 1, r = m * n;
        while (l < r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int i = 1; i <= m; i++) {
                cnt += min(mid / i, n);
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int left = 1, right = m * n;
        while (left < right) {
            int mid = (left + right) / 2;
            int cnt = 0;
            for (int i = 1; i <= m; i++) {
                cnt += min(mid / i, n);
            }
            if (cnt < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int lo = 1, hi = m * n + 1;
        while (lo < hi) {
            int mi = lo + (hi - lo) / 2;
            if (enough(mi, m, n, k)) hi = mi;
            else lo = mi + 1;
        }
        return lo;
    }
    bool enough(int mi, int m, int n, int k) {
        int cnt = 0;
        for (int i = 1; i <= m; i++) {
            cnt += min(mi / i, n);
        }
        return cnt >= k;

=======

        int low = 1, high = m * n + 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;
            for (int i = 1; i <= m; i++) {
                count += min(mid / i, n);
            }
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int lo = 1;
        int hi = m * n;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int cnt = 0;
            for (int i = 1; i <= m; i++) {
                cnt += min(mid / i, n);
            }
            if (cnt < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        int l = 1;
        int r = m*n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for (int i = 1; i <= m; i++) {
                cnt += min(mid/i, n);
            }
            if (cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
