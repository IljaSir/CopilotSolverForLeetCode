Synthesizing 7/10 solutions (Duplicates hidden)

=======

        int n = nums1.size();
        vector<int> preSum1(n + 1), preSum2(n + 1);
        for (int i = 0; i < n; i++) {
            preSum1[i + 1] = preSum1[i] + nums1[i];
            preSum2[i + 1] = preSum2[i] + nums2[i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int l = i, r = n;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (preSum1[m + 1] - preSum1[i] == preSum2[m + 1] - preSum2[i]) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            res = max(res, preSum1[l] - preSum1[i] + preSum2[l]);
            res = max(res, preSum1[i] + preSum2[i]);
        }
        return res;

=======

        int m = nums1.size(), n = nums2.size();
        int i = 0, j = 0, sum1 = 0, sum2 = 0, res = 0;
        while (i < m || j < n) {
            if (i < m && (j == n || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < n && (i == m || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                res += max(sum1, sum2) + nums1[i];
                sum1 = sum2 = 0;
                i++; j++;
            }
        }
        return res + max(sum1, sum2);

=======

        int n = nums1.size();
        vector<int> dp1(n + 1), dp2(n + 1);
        dp1[0] = nums1[0];
        dp2[0] = nums2[0];
        for (int i = 1; i < n; ++i) {
            dp1[i] = dp1[i - 1] + nums1[i];
            dp2[i] = dp2[i - 1] + nums2[i];
        }
        int ans = max(dp1[n - 1], dp2[n - 1]);
        int l = 0, r = n - 1;
        while (l < n && r >= 0) {
            if (nums1[l] > nums2[r]) {
                ans = max(ans, dp1[l] + dp2[n - 1] - dp2[r]);
                ++l;
            } else {
                ans = max(ans, dp2[r] + dp1[n - 1] - dp1[l]);
                --r;
            }
        }
        return ans;

=======

        vector<int> v1;
        vector<int> v2;
        v1.push_back(nums1[0]);
        v2.push_back(nums2[0]);
        for(int i=1;i<nums1.size();i++){
            v1.push_back(v1.back()+nums1[i]);
            v2.push_back(v2.back()+nums2[i]);
        }
        int ans = max(v1.back(),v2.back());
        int i=0,j=0;
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]==nums2[j]){
                int k = i;
                while(k<nums1.size() && nums1[k]==nums1[i]) k++;
                int l = j;
                while(l<nums2.size() && nums2[l]==nums2[j]) l++;
                ans = max(ans, max(v1[k-1],v2[l-1])+max(v1.back()-v1[k-1],v2.back()-v2[l-1]));
                i=k;
                j=l;
            }else if(nums1[i]>nums2[j]){
                j++;
            }else{
                i++;
            }
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> dp(n, 0);
        int l = 0;
        int r = 0;
        int sum1 = 0;
        int sum2 = 0;
        while (l < n && r < n) {
            if (nums1[l] < nums2[r]) {
                sum1 += nums1[l];
                ++l;
            } else if (nums1[l] > nums2[r]) {
                sum2 += nums2[r];
                ++r;
            } else {
                dp[l] = max(sum1, sum2) + nums1[l];
                sum1 = sum2 = 0;
                ++l;
                ++r;
            }
        }
        while (l < n) {
            sum1 += nums1[l];
            ++l;
        }
        while (r < n) {
            sum2 += nums2[r];
            ++r;
        }
        for (int i = 0; i < n; ++i) {
            if (i) {
                dp[i] = max(dp[i], dp[i-1]);
            }
            if (i+1 < n) {
                dp[i] = max(dp[i], max(sum1, sum2));
            }
        }
        return dp[n-1];

=======

        return 0;
