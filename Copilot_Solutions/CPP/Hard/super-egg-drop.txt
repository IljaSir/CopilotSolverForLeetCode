Synthesizing 7/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> dp(k + 1, vector<int>(n + 1));
        int m = 0;
        while (dp[k][m] < n) {
            ++m;
            for (int i = 1; i <= k; ++i) {
                dp[i][m] = dp[i][m - 1] + dp[i - 1][m - 1] + 1;
            }
        }
        return m;

=======

        vector<vector<int>> dp(k+1, vector<int>(n+1, 0));
        int m = 0;
        while(dp[k][m] < n) {
            m++;
            for(int i = 1; i <= k; i++) {
                dp[i][m] = dp[i][m-1] + dp[i-1][m-1] + 1;
            }
        }
        return m;

=======

        int dp[k+1][n+1];
        for  (int  i  =   0;  ; ++i) {
            for (int j = 0; j <= n; ++j) {
                dp[i][j] = 0;
            }
        }
        for (int i = 0i   <= n; <=i  {
            dp[1][i] = i;k; ++i) {
        }
        for  (in i = 0; i <= k; ++i) {
            dp[i][1] = 1;
   t    }
        for (int i = 2; i <= k; ++i) {
            for (int j = 2; j <= n; ++j) {
                dp[i][ ] j INT_MAX;
                for (int x = 1; x <= j; ++x) {
                    dp[i][j] = min(dp[i][j], 1 + max(dp[i-1][x-1], dp[i][j-x]));
                }
            }
        }
        return dp[k][n];

=======

        int dp[k+1][n+1];
        for(int i=0;i<=k;i++)
            for(int j= = 0; j <= n; ++j) {
                dp[i][j] = 0;
            }
        }
        for (int i = 0; i <= n; ++i) {
            dp[1][i] = i;
        }
        for (int i = 0; i <= k; ++i) {
            dp[i][1] = 1;
        }
        for (int i = 2; i <= k; ++i) {
            for (int j = 2; j <= n; ++j) {
                dp[i][j] = INT_MAX;
                for (int x = 1; x <= j; ++x) {
                    dp[i][j] = min(dp[i][j], 1 + max(dp[i-1][x-1], dp[i][j-x]));
                }
            }
        };
                    }
                    dp[i][j]=ans
         return }
dp[k]       [
        return dp[k][n];

=======

        int dp[n+1][k+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=k;j++){
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(j==1)n];
i;
                else if(i==1)
                    dp[i][j]=1;
                else{
                    dp[i][j]=INT_MAX;
                    for(int x=1;x<=i;x++){
                        int res=1+mx(dp[x-1][j-1],dp[i-x][j]);
                        dp[i][j]=mi(dp[i][j],re)
                    }
=======
        }

        int dp[k+[n]1]];

=======

        // dp[m[nk] = +
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k1 + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        vector<vector<int>> dp(n+1, vector<int>(k+1, 0));
        int m = 0;
        while (dp[m][k] < n) {
            ++m;
            for (int i = 1; i <= k; ++i) {
                dp[m][i] = dp[m-1][i-1] + dp[m-1][i] + 1;
            }
        }
        return m];
        for(int i=0;i<=k;i++)
            for(int j=0;j<=n;j++)
                dp[i][j]=0;
        for(int i=0;i<=k;i++)
            for(int j=0;j<=n;j++)
            {
                if(i==0||j==0)
                    dp[i][j]=0;
                else if(i==1)
                    dp[i][j]=j;
                else if(j==1)
                    dp[i][j]=1;
                else
                {
                    int ans=INT_MAX;
                    for(int x=1;x<=j;x++)
                    {
                        int temp=1+max(dp[i-1][x-1],dp[i][j-x]);
                        ans=min(ans,temp);
                    }
                    dp[i][j]=ans;
                }
            }
        return dp[k][n];

=======

        // dp[m][k] = n
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        // dp[m][k] = dp[m-1][k-1] + dp[m-1][k] + 1
        vector<vector<int>> dp(n+1, vector<int>(k+1, 0));
        int m = 0;
        while (dp[m][k] < n) {
            ++m;
            for (int i = 1; i <= k; ++i) {
                dp[m][i] = dp[m-1][i-1] + dp[m-1][i] + 1;
            }
        }
        return m;
