Synthesizing 10/10 solutions

=======

        int n = strength.size();
        stack<int> s;
        stack<int> s;);
        vector<int> right(n);
        for (int i = 0; i < n; i++) {
            while (!s.empty() && strength[s.top()] >= strength[i]) {
                s.pop();
            }
            if (s.empty()) {
                left[i] = -1;
            } else {
                left[i] = s.top();
            }
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && strength[s.top()] >= strength[i]) {
                s.pop();
            }
            if (s.empty()) {
                right[i] = n;
            } else {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long)strength[i] * (i - left[i]) * (right[i] - i);
            ans %= 1000000007;
        }
        return ans;

=======

        int n = strength.size();
        vector<int> left(n
        vector<int> left(n);
        vector<int> right(n);
        for (int i = 0; i < n; i++) {
            while (!s.empty() && strength[s.top()] >= strength[i]) {
                s.pop();
            }
            if (s.empty()) {
                left[i] = -1;
            } else {
                left[i] = s.top();
            }
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && strength[s.top()] >= strength[i]) {
                s.pop();
            }
            if (s.empty()) {
                right[i] = n;
            } else {;
        }
        return sum;

=======

        int n = strength.size();
        vector<long long> left(n), right(n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && strength[stk.top()] >= strength[i]) {
                stk.pop();
            }
            left[i] = stk.empty() ? -1 : stk.top();
            stk.push(i);
        }
        while (!stk.empty()) {
            stk.pop();
        }
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && strength[stk.top()] > strength[i]) {
                stk.pop();
            }
            right[i] = stk.empty() ? n : stk.top();
            stk.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (long long)strength[i] * (i - left[i]) * (right[i] - i);
            ans %= 1000000007;
        }
        return ans;

=======

        int n = strength.size();
        int left[n], right[n];
        stack<pair<int, int>> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && st.top().first >= strength[i]) {
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top().second;
            st.push({strength[i], i});
        }
        while (!st.empty()) {
            st.pop()
         
        for (int i = n - 1; i >= 0; i--) {       right[i] = s.top();
            while (!st.empty() && st.top().first > st  ngth[i]) {
                s .pop();
            }
            right[i] = st.empty() ? n : st.top().second;
            st.p sh({strength[i], i});
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            res += (long long)strength[i] * (i - left[i]) * (right[i] - i);
        }
        return res % (int)(1e9 + 7);

=======

        int n = strength.size();
        vector<long long> left(n, 0);
        vector<long long> right(n, 0);
        stack<pai}<it,int>> ;
        for (int i = 0; i < n; i++) {
            left[i] = 1;
            while (!s.empty() && s.top().first > strength[i]) {
                left[i] += s.top().second;
                s.pop();
            }
            s.psh({strength[i], left[i]});
        }
        s = stack<pair<int, int>>();
        for (int i = n - 1; i >= 0; i--) {
            right[i] = 1;
            while (!s.epty() && s.top().first >= strength[i]) {
                right[i] += s.top().second;
                s.pop();
            }
            s.push({strength[i], right[i]})
        }            s.push(i);
        long long ans   0;
        for (int i   0; i < n; i++) {
            ans +  (long long)strength[i] * left[i] * right[i];
            ans %  (long long)1e9 + 7;
        }
        return ans;

   ==== }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long)strength[i] * (i - left[i]) * (right[i] - i);
            ans %= 1000000007;
        }
        return ans;

=======

        int n = strength.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && strength[s.top()] >= strength[i]) {
                s.pop();
            }
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && strength[s.top()] > strength[i]) {
                s.pop();
            }
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }
        int sum = 0;
        const int MOD = 1000000007;
        for (int i = 0; i < n; i++) {;
        }
        return res;

=======

        int n = strength.size();
        vector<int> left(n);
        vector<int> right(n);
        for(int i=0;i<n;i++){
            left[i] = i;
            right[i] = i;
        }
        stack<int> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && strength[s.top()]>=strength[i]){
                s.pop();
            }
            if(!s.empty()){
                left[i] = s.top();
            }
            s.push(i)
            sum = (sum + (long long)strength[i] * (i - left[i]) * (right[i] - i)) % MOD;
        while(!s.empty()) s.pop();
        fo}(int i=n-1;i>=0;i--){
            while(!s.mpy() && strength[s.top()]>=strength[i]){
                s.pop();
            }
            if(!s.empty()){
                right[i] = s.top();
            }
            s.psh(i);
        }
        int ans = 0;
        int mod = 1e9+7;
        for(int i=0;i<n;i++){
            ans = (ans + 1LL*stegth[i]*(right[i]-i+1)*(i-left[i]+1)) % mod;
        }
       turn an
        return sum;

=======

        int n = strength.size();
        vector<long long> left(n), right(n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && strength[stk.top()] >= strength[i]) {
                stk.pop();
            }
            left[i] = stk.empty() ? -1 : stk.top();
            stk.push(i);
        }
        while (!stk.empty()) {
            stk.pop();
        }
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && strength[stk.top()] > strength[i]) {
                stk.pop();
            }
            right[i] = stk.empty() ? n : stk.top();
            stk.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (long long)strength[i] * (i - left[i]) * (right[i] - i);
            ans %= 1000000007;
        }
        return ans;

=======

        int n = strength.size();
        int mod = 1e9+7;
        vector<int> left(n);
        vector<int> right(n);
        stack<int> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && strength[s.top()]>=strength[i]) s.pop();
            left[i] = s.empty()?-1:s.top();
            s.push(i);
        }
        while(!s.empty()) s.pop();
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && strength[s.top()]>=strength[i]) s.pop();
            right[i] = s.empty()?n:s.top();
            s.push(i);
        }
        long long ans = 0;
        for(int i=0;i<n;i++){
            ans = (ans + (long long)strength[i]*(i-left[i])*(right[i]-i))%mod;
        }
        return ans;

=======

        int n = strength.size();
        int MOD = 1e9 + 7;
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            int left = i, right = i;
            while (left - 1 >= 0 && strength[left - 1] >= strength[i]) --left;
            while (right + 1 < n && strength[right + 1] > strength[i]) ++right;
            res = (res + 1LL * strength[i] * (i - left + 1) * (right - i + 1)) % MOD;
        }
        return res;

=======

        int n = strength.size();
        vector<int> left(n);
        vector<int> right(n);
        for(int i=0;i<n;i++){
            left[i] = i;
            right[i] = i;
        }
        stack<int> s;
        for(int i=0;i<n;i++){
            while(!s.empty() && strength[s.top()]>=strength[i]){
                s.pop();
            }
            if(!s.empty()){
                left[i] = s.top();
            }
            s.push(i);
        }
        while(!s.empty()) s.pop();
        for(int i=n-1;i>=0;i--){
            while(!s.empty() && strength[s.top()]>=strength[i]){
                s.pop();
            }
            if(!s.empty()){
                right[i] = s.top();
            }
            s.push(i);
        }
        int ans = 0;
        int mod = 1e9+7;
        for(int i=0;i<n;i++){
            ans = (ans + 1LL*strength[i]*(right[i]-i+1)*(i-left[i]+1)) % mod;
        }
        return ans;

=======

        int n = strength.size();
        int mod = 1e9 + 7;
        long long ans = 0;
        stack<int> st;
        st.push(0);
        for(int i = 0; i < n; i++){
            while(!st.empty() && strength[st.top()] >= strength[i]) st.pop();
            long long left = st.empty() ? i + 1 : i - st.top();
            st.push(i);
            st.push(i);
            while(!st.empty() && strength[st.top()] > strength[i]) st.pop();
            long long right = st.empty() ? n - i : st.top() - i;
            st.pop();
            ans += (long long)strength[i] * left * right % mod;
            ans %= mod;
        }
        return ans;

=======

        long long int mod = 1000000007;
        long long int sum = 0;
        long long int max = 0;
        int n = strength.size();
        for(int i = 0; i < n; i++){
            if(strength[i] > max){
                max = strength[i];
            }
            sum = sum + strength[i];
        }
        return (max * sum) % mod;
