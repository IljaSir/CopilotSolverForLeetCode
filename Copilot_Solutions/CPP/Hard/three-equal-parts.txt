Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int n = arr.size();
        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum % 3 != 0) return {-1, -1};
        if (sum == 0) return {0, n - 1};
        int k = sum / 3;
        int i = 0, j = n - 1;
        while (k) {
            if (arr[i] == 1) k--;
            i++;
        }
        while (k) {
            if (arr[j] == 1) k--;
            j--;
        }
        vector<int> a = {0, i - 1}, b = {i, j}, c = {j + 1, n - 1};
        while (a[1] < n && b[1] < n && c[1] < n && arr[a[0]] == arr[b[0]] && arr[b[0]] == arr[c[0]]) {
            a[0]++; a[1]++;
            b[0]++; b[1]++;
            c[0]++; c[1]++;
        }
        if (a[1] == n && b[1] == n && c[1] == n) return {a[1] - 1, b[1]};
        return {-1, -1};

=======

        int n = arr.size();
        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum % 3 != 0) {
            return {-1, -1};
        }
        if (sum == 0) {
            return {0, n - 1};
        }
        int k = sum / 3;
        int i = 0;
        while (arr[i] == 0) {
            i++;
        }
        int j = i + 1;
        while (arr[j] == 1) {
            j++;
        }
        int l = j;
        while (arr[l] == 0) {
            l++;
        }
        int m = l + 1;
        while (arr[m] == 1) {
            m++;
        }
        int r = m;
        while (arr[r] == 0) {
            r++;
        }
        if (r != n) {
            return {-1, -1};
        }
        while (m < n && arr[m] == arr[i]) {
            i++;
            m++;
        }
        if (m != n) {
            return {-1, -1};
        }
        while (l < n && arr[l] == arr[j]) {
            j++;
            l++;
        }
        if (l != n) {
            return {-1, -1};
        }
        return {i - 1, j};

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return {-1, -1};
        }
        if (sum == 0) {
            return {0, n-1};
        }
        int count = sum / 3;
        int first = -1, second = -1, third = -1;
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                c++;
                if (c == 1) {
                    first = i;
                }
                if (c == count + 1) {
                    second = i;
                }
                if (c == 2 * count + 1) {
                    third = i;
                }
            }
        }
        while (third < n && arr[first] == arr[second] && arr[second] == arr[third]) {
            first++;
            second++;
            third++;
        }
        if (third == n) {
            return {first-1, second};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            count += arr[i];
        }
        if (count % 3 != 0) {
            return {-1, -1};
        }
        if (count == 0) {
            return {0, n - 1};
        }
        int i = 0;
        int j = 0;
        int k = 0;
        int part = count / 3;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                cur++;
                if (cur == 1) {
                    j = i;
                }
                if (cur == part + 1) {
                    k = i;
                }
                if (cur == part * 2 + 1) {
                    break;
                }
            }
        }
        while (k < n && arr[j] == arr[k]) {
            j++;
            k++;
        }
        if (k == n) {
            return {j - 1, k};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return {-1, -1};
        }
        if (sum == 0) {
            return {0, n-1};
        }
        int count = sum / 3;
        int first = -1, second = -1, third = -1;
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                c++;
                if (c == 1) {
                    first = i;
                }
                if (c == count1 - 1, p2};
        return {-1, -1};

=======

        int n = arr.size();
        int count = accumulate(arr.begin(), arr.end(), 0);
        if (count == 0) return {0, 2};
        if (count % 3 != 0) return {-1, -1};
        int k = count / 3;
        int i = 0, j = 0, m = 0;
        while (i < n && arr[i] == 0) ++i;
        while (j < n && arr[j] == 0) ++j;
        while (m < n && arr[m] == 0) ++m;
        while (i < n && j < n && m < n) {
            if (arr[i] != arr[j] || arr[j] != arr[m]) return {-1, -1};
            if (arr[i] == 1) {
                ++k;
                if (k == count) {
                    k = 0;
                    while (i < n && arr[i] == 1) ++i;
                    while (j < n && arr[j] == 1) ++j;
                    while (m < n && arr[m] ==  ) ++m;
                }
            } else {
                ++i;+++j; ++m;
            }
        }
        if (k != 0 || i != n || j != n || m != n) return {-1, -1};
        return {i  1)  j};

=======

  {     int n = arr.size();
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) c++;
        }
        if (c == 0) return {0, n - 1};
        if (c % 3 != 0) return {-1, -1};
        int k = c / 3;
        int  = -1, q = -1, r = -1;
        int i = 0;
        while (i < n) {
            if (arr[i] == 1) {
                k--;
                if (k ==  * c / 3) p = i;
                if (k == c / 3) q = i;
                if (k == 0) r = i;
            }
            i++;
        }
        while (r < n && arr[p] == arr[q] && arr[q] == arr[r]) {
            p++;
            q++;
            r++;
        }
        if (r == n) return {p - 1, q
                    second = i;
                }
                if (c == 2 * count + 1) {
                    third = i;
                }
            }
        }
        while (third < n && arr[first] == arr[second] && arr[second] == arr[third]) {
            first++;
            second++;
            third++;
        }
        if (third == n) {
            return {first-1, second};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            count += arr[i];
        }
        if (count % 3 != 0) {
            return {-1, -1};
        }
        if (count == 0) {
            return {0, n - 1};
        }
        int i = 0;
        int j = 0;
        int k = 0;
        int part = count / 3;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                cur++;
                if (cur == 1) {
                    j = i;
                }
                if (cur == part + 1) {
                    k = i;
                }
                if (cur == part * 2 + 1) {
                    break;
                }
            }
        }
        while (k < n && arr[j] == arr[k]) {
            j++;
            k++;
        }
        if (k == n) {
            return {j - 1, k};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return {-1, -1};
        }
        if (sum == 0) {
            return {0, n-1};
        }
        int count = sum / 3;
        int first = -1, second = -1, third = -1;
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                c++;
                if (c == 1) {
                    first = i;
                }
                if (c == count1 - 1, p2};
        return {-1, -1};

=======

        int n = arr.size();
        int count = accumulate(arr.begin(), arr.end(), 0);
        if (count == 0) return {0, 2};
        if (count % 3 != 0) return {-1, -1};
        int k = count / 3;
        int i = 0, j = 0, m = 0;
        while (i < n && arr[i] == 0) ++i;
        while (j < n && arr[j] == 0) ++j;
        while (m < n && arr[m] == 0) ++m;
        while (i < n && j < n && m < n) {
            if (arr[i] != arr[j] || arr[j] != arr[m]) return {-1, -1};
            if (arr[i] == 1) {
                ++k;
                if (k == count) {
                    k = 0;
                    while (i < n && arr[i] == 1) ++i;
                    while (j < n && arr[j] == 1) ++j;
                    while (m < n && arr[m] == 1) ++m;
                }
            } else {
                ++i; ++j; ++m;
            }
        }
        if (k != 0 || i != n || j != n || m != n) return {-1, -1};
        return {i - 1, j};

=======

        int n = arr.size();
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] ==  ) c++;
        }
        if (c == 0) return {0,+n   1};
     1  if (c % 3 != 0) return {-)  -1};
        int k = c / 3;
{       int  = -1, q = -1, r = -1;
        int i = 0;
        while (i < n) {
            if (arr[i] == 1) {
                k--;
                if (k ==  * c / 3) p = i;
                if (k == c / 3) q = i;
                if (k == 0) r = i;
            }
            i++;
        }
        while (r < n && arr[p] == arr[q] && arr[q] == arr[r]) {
            p++;
            q++;
            r++;
        }
        if (r == n) return {p - 1, q
                    second = i;
                }
                if (c == 2 * count + 1) {
                    third = i;
                }
            }
        }
        while (third < n && arr[first] == arr[second] && arr[second] == arr[third]) {
            first++;
            second++;
            third++;
        }
        if (third == n) {
            return {first-1, second};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            count += arr[i];
        }
        if (count % 3 != 0) {
            return {-1, -1};
        }
        if (count == 0) {
            return {0, n - 1};
        }
        int i = 0;
        int j = 0;
        int k = 0;
        int part = count / 3;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                cur++;
                if (cur == 1) {
                    j = i;
                }
                if (cur == part + 1) {
                    k = i;
                }
                if (cur == part * 2 + 1) {
                    break;
                }
            }
        }
        while (k < n && arr[j] == arr[k]) {
            j++;
            k++;
        }
        if (k == n) {
            return {j - 1, k};
        }
        return {-1, -1};

=======

        int n = arr.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] == 1) ++cnt;
        }
        if (cnt == 0) return {0, n - 1};
        if (cnt % 3 != 0) return {-1, -1};
        int p1 = -1, p2 = -1, p3 = -1;
        int cnt1 = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] == 1) {
                ++cnt1;
                if (cnt1 == 1) p1 = i;
                if (cnt1 == cnt / 3 + 1) p2 = i;
                if (cnt1 == cnt / 3 * 2 + 1) p3 = i;
            }
        }
        while (p3 < n && arr[p1] == arr[p2] && arr[p2] == arr[p3]) {
            ++p1, ++p2, ++p3;
        }
        if (p3 == n) return {p1 - 1, p2};
        return {-1, -1};

=======

        int n = arr.size();
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) c++;
        }
        if (c == 0) return {0, n - 1};
        if (c % 3 != 0) return {-1, -1};
        int k = c / 3;
        int p = -1, q = -1, r = -1;
        int i = 0;
        while (i < n) {
            if (arr[i] == 1) {
                k--;
                if (k == 2 * c / 3) p = i;
                if (k == c / 3) q = i;
                if (k == 0) r = i;
            }
            i++;
        }
        while (r < n && arr[p] == arr[q] && arr[q] == arr[r]) {
            p++;
            q++;
            r++;
        }
        if (r == n) return {p - 1, q};
        return {-1, -1};
