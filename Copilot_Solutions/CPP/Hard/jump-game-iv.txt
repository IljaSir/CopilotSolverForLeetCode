Synthesizing 10/10 solutions

=======

        int n = arr.size();
        if (n == 1) return 0;
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            m[arr[i]].push_back(i);
        }
        vector<int> dp(n, n);
        dp[0] = 0;
        queue<int> q;
        q.push(0);
        while (!q.empty()) {
            int i = q.front(); q.pop();
            if (i > 0 && dp[i-1] == n) {
                dp[i-1] = dp[i] + 1;
                q.push(i-1);
            }
            if (i < n - 1 && dp[i+1] == n) {
                dp[i+1] = dp[i] + 1;
                q.push(i+1);
            }
            for (int j : m[arr[i]]) {
                if (dp[j] == n) {
                    dp[j] = dp[i] + 1;
                    q.push(j);
                }
            }
            m[arr[i]].clear();
        }
        return dp[n-1];

=======

        int n = arr.size();
        if (n <= 1) return 0;
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            m[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                int i = q.front();
                q.pop();
                if (i == n - 1) return step;
                if (i - 1 >= 0 && !visited[i - 1]) {
                    q.push(i - 1);
                    visited[i - 1] = true;
                }
                if (i + 1 < n && !visited[i + 1]) {
                    q.push(i + 1);
                    visited[i + 1] = true;
                }
                for (int j : m[arr[i]]) {
                    if (j == i) continue;
                    if (!visited[j]) {
                        q.push(j);
                        visited[j] = true;
                    }
                }
                m[arr[i]].clear();
            }
            step++;
        }
        return -1;

=======

        int n = arr.size();
        if (n <= 1) return 0;
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            m[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int pos = q.front();
                q.pop();
                if (pos == n - 1) return step;
                if (pos - 1 >= 0 && !visited[pos - 1]) {
                    q.push(pos - 1);
                    visited[pos - 1] = true;
                }
                if (pos + 1 < n && !visited[pos + 1]) {
                    q.push(pos + 1);
                    visited[pos + 1] = true;
                }
                for (int next : m[arr[pos]]) {
                    if (next != pos && !visited[next]) {
                        q.push(next);
                        visited[next] = true;
                    }
                }
                m[arr[pos]].clear();
            }
            ++step;
        }
        return -1;

=======

        int n = arr.size();
        if (n == 1) return 0;
        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < n; i++) {
            mp[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int ans = 0;
        while (!q.empty()) {
            int sz = q.size();
            for (int i = 0; i < sz; i++) {
                int cur = q.front();
                q.pop();
                if (cur == n - 1) return ans;
                if (cur - 1 >= 0 && !visited[cur - 1]) {
                    q.push(cur - 1);
                    visited[cur - 1] = true;
                }
                if (cur + 1 < n && !visited[cur + 1]) {
                    q.push(cur + 1);
                    visited[cur + 1] = true;
                }
                for (int j: mp[arr[cur]]) {
                    if (j != cur && !visited[j]) {
                        q.push(j);
                        visited[j] = true;
                    }
                }
                mp[arr[cur]].clear();
            }
            ans++;
        }
        return -1;

=======

        int n = arr.size();
        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < n; ++i) {
            mp[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int res = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int cur = q.front();
                q.pop();
                if (cur == n - 1) {
                    return res;
                }
                if (cur - 1 >= 0 && !visited[cur - 1]) {
                    q.push(cur - 1);
                    visited[cur - 1] = true;
                }
                if (cur + 1 < n && !visited[cur + 1]) {
                    q.push(cur + 1);
                    visited[cur + 1] = true;
                }
                for (int next : mp[arr[cur]]) {
                    if (!visited[next]) {
                        q.push(next);
                        visited[next] = true;
                    }
                }
                mp[arr[cur]].clear();
            }
            ++res;
        }
        return res;

=======

        unordered_map<int, vector<int>> m;
        int n = arr.size();
        for (int i = 0; i < n; ++i) {
            m[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int curr = q.front();
                q.pop();
                if (curr == n - 1) return step;
                if (curr - 1 >= 0 && !visited[curr - 1]) {
                    visited[curr - 1] = true;
                    q.push(curr - 1);
                }
                if (curr + 1 < n && !visited[curr + 1]) {
                    visited[curr + 1] = true;
                    q.push(curr + 1);
                }
                for (int next : m[arr[curr]]) {
                    if (!visited[next]) {
                        visited[next] = true;
                        q.push(next);
                    }
                }
                m[arr[curr]].clear();
            }
            ++step;
        }
        return -1;

=======

        unordered_map<int, vector<int>> m;
        int n = arr.size();
        for (int i = 0; i < n; ++i) {
            m[arr[i]].push_back(i);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int cur = q.front();
                q.pop();
                if (cur == n - 1) {
                    return step;
                }
                if (cur - 1 >= 0 && !visited[cur - 1]) {
                    q.push(cur - 1);
                    visited[cur - 1] = true;
                }
                if (cur + 1 < n && !visited[cur + 1]) {
                    q.push(cur + 1);
                    visited[cur + 1] = true;
                }
                for (int next : m[arr[cur]]) {
                    if (!visited[next]) {
                        q.push(next);
                        visited[next] = true;
                    }
                }
                m[arr[cur]].clear();
            }
            step++;
        }
        return step;

=======

        unordered_map<int, vector<int>> pos;
        for (int i = 0; i < arr.size(); ++i) pos[arr[i]].push_back(i);
        queue<int> q;
        q.push(0);
        vector<bool> visited(arr.size(), false);
        visited[0] = true;
        int step = 0;
        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; ++i) {
                int cur = q.front();
                q.pop();
                if (cur == arr.size() - 1) return step;
                if (cur - 1 >= 0 && !visited[cur - 1]) {
                    q.push(cur - 1);
                    visited[cur - 1] = true;
                }
                if (cur + 1 < arr.size() && !visited[cur + 1]) {
                    q.push(cur + 1);
                    visited[cur + 1] = true;
                }
                for (int next : pos[arr[cur]]) {
                    if (!visited[next]) {
                        q.push(next);
                        visited[next] = true;
                    }
                }
                pos[arr[cur]].clear();
            }
            ++step;
        }
        return -1;

=======

        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < arr.size(); i++) {
            mp[arr[i]].push_back(i);
        }
        queue<int> q;
        vector<bool> vis(arr.size(), false);
        q.push(0);
        vis[0] = true;
        int step = 0;
        while (!q.empty()) {
            int sz = q.size();
            for (int i = 0; i < sz; i++) {
                int cur = q.front();
                q.pop();
                if (cur == arr.size() - 1) {
                    return step;
                }
                for (int j = cur - 1; j <= cur + 1; j++) {
                    if (j >= 0 && j < arr.size() && !vis[j]) {
                        q.push(j);
                        vis[j] = true;
                    }
                }
                for (int j = 0; j < mp[arr[cur]].size(); j++) {
                    int nxt = mp[arr[cur]][j];
                    if (!vis[nxt]) {
                        q.push(nxt);
                        vis[nxt] = true;
                    }
                }
                mp[arr[cur]].clear();
            }
            step++;
        }
        return -1;

=======

        int N = arr.size();
        unordered_map<int, vector<int>> idx;
        for (int i = 0; i < N; ++i) idx[arr[i]].push_back(i);
        vector<int> seen(N);
        queue<int> q;
        q.push(0);
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                int i = q.front(); q.pop();
                if (i == N - 1) return step;
                if (seen[i]) continue;
                seen[i] = 1;
                if (i - 1 >= 0 && !seen[i - 1]) q.push(i - 1);
                if (i + 1 < N && !seen[i + 1]) q.push(i + 1);
                for (int j : idx[arr[i]]) {
                    if (!seen[j]) q.push(j);
                }
                idx.erase(arr[i]);
            }
            ++step;
        }
        return -1;
