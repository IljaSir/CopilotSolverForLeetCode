Synthesizing 10/10 solutions

=======

        vector<vector<int>> graph(n + 1, vector<int>(n + 1, 0));
        vector<int> degree(n + 1, 0);
        for (auto& edge : edges) {
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        int ans = INT_MAX;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (graph[i][j] == 0) {
                    continue;
                }
                for (int k = j + 1; k <= n; k++) {
                    if (graph[i][k] == 0 || graph[j][k] == 0) {
                        continue;
                    }
                    ans = min(ans, degree[i] + degree[j] + degree[k] - 6);
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<int>> g(n);
        vector<int> deg(n);
        for (auto& e: edges) {
            g[e[0] - 1].push_back(e[1] - 1);
            g[e[1] - 1].push_back(e[0] - 1);
            deg[e[0] - 1]++;
            deg[e[1] - 1]++;
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i)
            for (int j = i + 1; j < n; ++j)
                for (int k = j + 1; k < n; ++k)
                    if (find(g[i].begin(), g[i].end(), j) != g[i].end() &&
                        find(g[i].begin(), g[i].end(), k) != g[i].end() &&
                        find(g[j].begin(), g[j].end(), k) != g[j].end())
                        ans = min(ans, deg[i] + deg[j] + deg[k] - 6);
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<int>> G(n);
        vector<int> degree(n);
        for (auto& e : edges) {
            G[e[0] - 1].push_back(e[1] - 1);
            G[e[1] - 1].push_back(e[0] - 1);
            degree[e[0] - 1]++;
            degree[e[1] - 1]++;
        }
        int minDegree = INT_MAX;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (G[i][j] && G[i][k] && G[j][k]) {
                        minDegree = min(minDegree, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return minDegree == INT_MAX ? -1 : minDegree;

=======

        vector<vector<int>> graph(n+1);
        vector<int> degree(n+1);
        for(auto& edge: edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        int ans = INT_MAX;
        for(int i = 1; i < n; i++){
            for(int j = i+1; j <= n; j++){
                int cnt = 0;
                for(int k = 1; k <= n; k++){
                    if(k == i || k == j) continue;
                    if(binary_search(graph[i].begin(), graph[i].end(), k) && binary_search(graph[j].begin(), graph[j].end(), k)){
                        cnt++;
                    }
                }
                if(cnt > 0){
                    ans = min(ans, degree[i] + degree[j] + cnt - 6);
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        vector<int> degrees(n + 1, 0);
        vector<vector<bool>> graph(n + 1, vector<bool>(n + 1, false));
        for (auto& e : edges) {
            degrees[e[0]]++;
            degrees[e[1]]++;
            graph[e[0]][e[1]] = true;
            graph[e[1]][e[0]] = true;
        }
        int ans = INT_MAX;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                for (int k = j + 1; k <= n; k++) {
                    if (graph[i][j] && graph[i][k] && graph[j][k]) {
                        ans = min(ans, degrees[i] + degrees[j] + degrees[k] - 6);
                    }
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<int>> adj(n+1);
        vector<int> degree(n+1);
        for(auto e:edges)
        {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
            degree[e[0]]++;
            degree[e[1]]++;
        }
        int ans=INT_MAX;
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<adj[i].size();j++)
            {
                for(int k=j+1;k<adj[i].size();k++)
                {
                    int a=adj[i][j];
                    int b=adj[i][k];
                    if(find(adj[a].begin(),adj[a].end(),b)!=adj[a].end())
                    {
                        ans=min(ans,degree[i]+degree[a]+degree[b]-6);
                    }
                }
            }
        }
        return ans==INT_MAX?-1:ans;

=======

        int ans = INT_MAX;
        vector<vector<int>> g(n+1);
        vector<int> degree(n+1, 0);
        for (auto& e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
            degree[e[0]]++;
            degree[e[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (i == j) continue;
                for (int k = 1; k <= n; k++) {
                    if (i == k || j == k) continue;
                    if (find(g[i].begin(), g[i].end(), j) != g[i].end() &&
                        find(g[i].begin(), g[i].end(), k) != g[i].end() &&
                        find(g[j].begin(), g[j].end(), k) != g[j].end()) {
                        ans = min(ans, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<int>> nodes(n+1);
        vector<int> degrees(n+1);
        for (auto& edge : edges) {
            nodes[edge[0]].push_back(edge[1]);
            nodes[edge[1]].push_back(edge[0]);
            degrees[edge[0]]++;
            degrees[edge[1]]++;
        }
        int ans = INT_MAX;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < nodes[i].size(); ++j) {
                for (int k = j+1; k < nodes[i].size(); ++k) {
                    int a = nodes[i][j];
                    int b = nodes[i][k];
                    if (find(nodes[a].begin(), nodes[a].end(), b) != nodes[a].end()) {
                        ans = min(ans, degrees[i] + degrees[a] + degrees[b] - 6);
                    }
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<int>> mat(n+1, vector<int>(n+1));
        vector<int> degree(n+1);
        for (auto& edge: edges) {
            int u = edge[0], v = edge[1];
            mat[u][v] = mat[v][u] = 1;
            degree[u]++;
            degree[v]++;
        }
        int ans = INT_MAX;
        for (int i = 1; i <= n; i++) {
            for (int j = i+1; j <= n; j++) {
                if (mat[i][j] == 0) continue;
                for (int k = j+1; k <= n; k++) {
                    if (mat[i][k] == 0 || mat[j][k] == 0) continue;
                    ans = min(ans, degree[i] + degree[j] + degree[k] - 6);
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int ans = INT_MAX;
        vector<vector<int>> g(n+1);
        vector<int> degree(n+1, 0);
        for(auto& e: edges) {
            degree[e[0]]++;
            degree[e[1]]++;
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        for(int i = 1; i <= n; i++) {
            for(int j = i+1; j <= n; j++) {
                for(int k = j+1; k <= n; k++) {
                    if(find(g[i].begin(), g[i].end(), j) != g[i].end() && find(g[j].begin(), g[j].end(), k) != g[j].end() && find(g[k].begin(), g[k].end(), i) != g[k].end()) {
                        ans = min(ans, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;
