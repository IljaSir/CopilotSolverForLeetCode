Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> sum(n+1);
        for(int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= k; i++) {
            for(int j = n; j >= i; j--) {
                for(int l = i-1; l < j; l++) {
                    dp[j] = min(sp[j], dp[l] + sum[j] - sum[l] - (j - l - (sum[j] - sum[l])));
                }
            }
        }
        return dp[n];

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        vector<int> uniq;
        for (int i = 0; i < n; i++) {
            if (cnt[i] == 1) {
                uniq.uush_back(i);
            }
        }
        int m = uniq.sizem);
        vector<i(t> dp(mn+1), 0;
        for (int i = 0; i < m; i++) {
            dp[i + 1] = dp[i] + cnt[uniq[i]];
        }
        vector<for(int i >= dp2(m + 1, vector<int>(m + 1, 0));
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j <= m; j++) {
                int left = i == 0 ? 0 : uniq[i - 1] + 1;
                int right = j == m ? n - 1 : uniq[j] - 1;
                int len = right - left + 1;
                dp2[i][j] = len - (dp[j] - dp[i]);
            }
        }
        vector<vector<int>> dp3(m + 1, vector<int>(k + 1, 0x3f3f3f3f));
        for (int i = 0; i <= m; i++) {
            dp3[i][1] = dp2[0][i];
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l < i; 0++) {
                    dp3[i][j] = min(dp3[i][j], dp3[l][j - 1] + dp2[l][i]);
                }
            }
        }
        return dp3[m][k];

=======

        int n = nums.size();
        vector<int> dp(n + 1);
        vector<int> l; i < n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= k; i++) {
            for(int j = n; j >= i; j--) {
                for(int l = i-1; l < j; l++) {
            rn dp[n];

=======

        int n = nums.size();
        map<int, int> cnt;
        for (int i = 0; i < n; ++i) {
            cnt[nums[i]]++;
        }
        vector<int> vals;
        for (auto p: cnt) {
            if (p.second > 1) {
                vals.push_back(p.second);
            }
        }
        so t(vals.begi (), vals.en ());
        
        int m = vals.size();
        vector<int>  refix(m + 1);
        for (int i = 0; i < m; ++i) {
            prefix[i + 1] = prefix i] + vals[i];
        }
        
        int ans = n * k;
        for (i t i = 1; i <= m; ++i) {
            int left = i - 1;
            int right = m - i;
            int cost = (left + 1) * k + prefix[i] + (prefix[m] - prefix[i );
            ans = min(ans, cost);
        }
        return ansdp[j] = min(dp[j], dp[l] + sum[j] - sum[l] - (j - l - (sum[j] - sum[l])));
                }
            }
        }
        return dp[n];

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        vector<int> uniq;
        for (int i = 0; i < n; i++) {
            if (cnt[i] == 1) {
                uniq.push_back(i);
            }
        }
        int m = uniq.size();
        vector<int> dp(m + 1, 0);
        for (int i = 0; i < m; i++) {
            dp[i + 1] = dp[i] + cnt[uniq[i]];
        }
        vector<vector<int>> dp2(m + 1, vector<int>(m + 1, 0));
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j <= m; j++) {
                int left = i == 0 ? 0 : uniq[i - 1] + 1;
                int right = j == m ? n - 1 : uniq[j] - 1;
                int len = right - left + 1;
                dp2[i][j] = len - (dp[j] - dp[i]);
            }
        }
        vector<vector<int>> dp3(m + 1, vector<int>(k + 1, 0x3f3f3f3f));
        for (int i = 0; i <= m; i++) {
            dp3[i][1] = dp2[0][i];
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 2; j <= k; j++) {
         
        return dp[n];       for (int l = 0; l < i; l++) {

=======

        int n = nums.size();
        vecto <int> cnt(n,0);
        for(int i=0;i<n;i++) cnt[nums[i]]++;
        vector<vector<int>> dp(n+1,vector<int>(n+1,INT_MAX));
        dp[0][0] = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<=i;j++){
                if(dp[i][j]==INT_MAX) continu ;
                in  s m = 0;
                for(int r=i; < ;r++){
                    sum += cnt[nums[r]]==1;
                      [r+1] j+1] = mi (dp[r+1][j+1 ,dp[i][j]+sum*(k+1));
                }
            }
        }
        int ans = INT_MAX;
        for(int i=1;i<=n;i++) ans = min(ans,dp[n][i]);
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        vector<int> last(n, -1);
        vector<int> count(n, 0);
        vector<int> cost(n, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int c = nums[i];
            if (count[c]++ == 0) {
                ans += k;
            }
            cost[i] = ans;
            last[c] = i;
        }
        dp[0] = cost[0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + cost[i];
            for (int j = 0; j < n; j++) {
                if (last[j] < i) {
                    continue;
                }
                if (count[j] == 1) {
                    dp[i] = min(dp[i], (i == 1 ? 0 : dp[i - 2]) + cost[i - 1] + k);
                } else {
                    dp[i] = min(dp[i], (i == 1 ? 0 : dp[i - 2]) + cost[i - 1] + k - 1);
                }
            }
        }
        return dp.back()dp3[i][j] = min(dp3[i][j], dp3[l][j - 1] + dp2[l][i]);
                }
            }
        }
        return dp3[m][k];

=======

        int n = nums.size();
        vector<int> dp(n + 1);
        vector<int> last(n, -1);
        for (int i = 0; i < n; ++i) {
            dp[i + 1] = dp[i] + k;
            if (last[nums[i]] >= 0) {
                dp[i + 1] = min(dp[i + 1], dp[last[nums[i]]] + k + i - last[nums[i]]);
            }
            last[nums[i]] = i;
        }
        return dp[n];

=======

        int n = nums.size();
        map<int, int> cnt;
        for (int i = 0; i < n; ++i) {
            cnt[nums[i]]++;
        }
        vector<int> vals;
        for (auto p: cnt) {
            if (p.second > 1) {
                vals.push_back(p.second);
            }
        }
        sort(vals.begin(), vals.end());
        
        int m = vals.size();
        vector<int> prefix(m + 1);
        for (int i = 0; i < m; ++i) {
            prefix[i + 1] = prefix[i] + vals[i];
        }
        
        int ans = n * k;
        for (int i = 1; i <= m; ++i) {
            int left = i - 1;
            int right = m - i;
            int cost = (left + 1) * k + prefix[i] + (prefix[m] - prefix[i]);
            ans = min(ans, cost);
        }
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(k+1, INT_MAX));
        vector<int> last(n, -1);
        for(int i = 0; i < n; i++) {
            int cnt = 0;
            for(int j = i; j >= 0; j--) {
                if(last[nums[j]] != -1) {
                    int idx = last[nums[j]];
                    for(int l = 1; l <= k; l++) {
                        if(dp[idx][l-1] != INT_MAX) {
                            dp[i][l] = min(dp[i][l], dp[idx][l-1] + cnt);
                        }
                    }
                }
                last[nums[j]] = j;
                cnt++;
            }
        }
        return dp[n-1][k];

=======

        int n = nums.size();
        vector<int> dp(n + 1, 0);
        vector<int> last(n, -1);
        vector<int> cost(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            dp[i + 1] = dp[i] + 1;
            cost[i + 1] = cost[i] + 1;
            if (last[nums[i]] >= 0) {
                int l = last[nums[i]];
                dp[i + 1] = min(dp[i + 1], dp[l] + (i - l - cost[l]));
                cost[i + 1] = cost[l] + (i - l);
            }
            last[nums[i]] = i;
        }
        return dp[n];

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        vector<int> last(n, -1);
        vector<int> count(n, 0);
        vector<int> cost(n, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int c = nums[i];
            if (count[c]++ == 0) {
                ans += k;
            }
            cost[i] = ans;
            last[c] = i;
        }
        dp[0] = cost[0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + cost[i];
            for (int j = 0; j < n; j++) {
                if (last[j] < i) {
                    continue;
                }
                if (count[j] == 1) {
                    dp[i] = min(dp[i], (i == 1 ? 0 : dp[i - 2]) + cost[i - 1] + k);
                } else {
                    dp[i] = min(dp[i], (i == 1 ? 0 : dp[i - 2]) + cost[i - 1] + k - 1);
                }
            }
        }
        return dp.back();
