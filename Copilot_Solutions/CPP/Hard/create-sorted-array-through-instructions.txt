Synthesizing 9/10 solutions

=======

        int n = instructions.size();
        int mod = 1000000007;
        vector<int> bit(100001, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int x = instructions[i];
            int left = get(bit, x - 1);
            int right = i - get(bit, x);
            ans = (ans + min(left, right)) % mod;
            update(bit, x, 1);
        }
        return ans;
    }
    
    void update(vector<int>& bit, int x, int delta) {
        int n = bit.size();
        for (int i = x; i < n; i += lowbit(i)) {
            bit[i] += delta;
        }
    }
    
    int get(vector<int>& bit, int x) {
        int res = 0;
        for (int i = x; i > 0; i -= lowbit(i)) {
            res += bit[i];
        }
        return res;

=======

        int n = instructions.size();
        int mod = 1e9 + 7;
        vector<int> tree(100001, 0);
        int res = 0;
        for (int i = 0; i < n; i++) {
            int left = sum(tree, instructions[i] - 1);
            int right = sum(tree, 100000) - sum(tree, instructions[i]);
            res = (res + min(left, right)) % mod;
            update(tree, instructions[i]);
        }
        return res;
    }
    int sum(vector<int>& tree, int i) {
        int res = 0;
        while (i > 0) {
            res += tree[i];
            i -= i & (-i);
        }
        return res;
    }
    void update(vector<int>& tree, int i) {
        while (i < 100001) {
            tree[i] += 1;
            i += i & (-i);
        }

=======

        int n = instructions.size();
        int mod = 1e9 + 7;
        vector<int> c(100001);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int x = instructions[i];
            int y = min(c[x - 1], i - c[x]);
            ans = (ans + y) % mod;
            for (int j = x; j <= 100000; j += j & -j) {
                c[j]++;
            }
        }
        return ans;

=======

        int n = instructions.size();
        int mod = 1e9 + 7;
        vector<int> nums;
        int cost = 0;
        for (int i = 0; i < n; ++i) {
            int pos = lower_bound(nums.begin(), nums.end(), instructions[i]) - nums.begin();
            cost = (cost + min(pos, (int)nums.size() - pos)) % mod;
            nums.insert(nums.begin() + pos, instructions[i]);
        }
        return cost;

=======

        int n = instructions.size();
        vector<int> bit(n + 1, 0);
        int res = 0;
        for (int i = 0; i < n; i++) {
            int x = instructions[i];
            res = (res + min(get(x - 1, bit), i - get(x, bit))) % 1000000007;
            update(x, bit);
        }
        return res;

=======

        const int M = 1e9 + 7;
        int n = instructions.size();
        vector<int> c(1e5 + 1);
        auto lowbit = [](int x) { return x & -x; };
        auto update = [&](int x, int v) {
            for (int i = x; i < c.size(); i += lowbit(i)) c[i] += v;
        };
        auto query = [&](int x) {
            int ret = 0;
            for (int i = x; i > 0; i -= lowbit(i)) ret += c[i];
            return ret;
        };
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int v = instructions[i];
            int left = query(v - 1);
            int right = i - query(v);
            ans = (ans + min(left, right)) % M;
            update(v, 1);
        }
        return ans;

=======

        int n = instructions.size();
        int mod = 1e9 + 7;
        vector<int> bit(1e5 + 1);
        auto lowbit = [](int x) { return x & -x; };
        auto add = [&](int x, int v) {
            for (; x < bit.size(); x += lowbit(x)) {
                bit[x] += v;
            }
        };
        auto query = [&](int x) {
            int res = 0;
            for (; x > 0; x -= lowbit(x)) {
                res += bit[x];
            }
            return res;
        };
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            int x = instructions[i];
            int left = query(x - 1);
            int right = i - query(x);
            res += min(left, right);
            add(x, 1);
        }
        return res % mod;

=======

        int n = instructions.size();
        vector<int> bit(n + 1, 0);
        auto lowbit = [](int x) { return x & (-x); };
        auto add = [&bit, &lowbit](int x, int v) {
            while (x <= bit.size()) {
                bit[x] += v;
                x += lowbit(x);
            }
        };
        auto sum = [&bit, &lowbit](int x) {
            int res = 0;
            while (x > 0) {
                res += bit[x];
                x -= lowbit(x);
            }
            return res;
        };
        int res = 0;
        for (int i = 0; i < n; i++) {
            int l = sum(instructions[i] - 1);
            int r = i - sum(instructions[i]);
            res = (res + min(l, r)) % 1000000007;
            add(instructions[i], 1);
        }
        return res;

=======

        int n = instructions.size();
        vector<int> num(100002, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = (ans + min(get(num, instructions[i] - 1), i - get(num, instructions[i]))) % 1000000007;
            update(num, instructions[i]);
        }
        return ans;
    }
    
    int get(vector<int>& num, int i) {
        int sum = 0;
        while (i > 0) {
            sum += num[i];
            i -= lowbit(i);
        }
        return sum;
    }
    
    void update(vector<int>& num, int i) {
        while (i < num.size()) {
            num[i]++;
            i += lowbit(i);
        }
