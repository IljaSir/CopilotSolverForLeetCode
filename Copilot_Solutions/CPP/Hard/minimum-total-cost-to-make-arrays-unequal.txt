Synthesizing 10/10 solutions

=======

        long long ans = 0;
        int n = nums1.size();
        vector<int> cnt(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                ++cnt[nums1[i]];
            } else if (nums1[i] > nums2[i]) {
                ++cnt[nums1[i]];
                --cnt[nums2[i]];
            } else {
                ++cnt[nums2[i]];
                --cnt[nums1[i]];
            }
        }
        int cur = 0;
        for (int i = 1; i <= n; ++i) {
            cur += cnt[i];
            ans += min(cur, i);
        }
        return ans;

=======

        int n = nums1.size();
        vector<vector<int>> dp(2, vector<int>(n, 0));
        dp[0][0] = 0;
        dp[1][0] = 0;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                dp[0][i] = dp[0][i - 1];
                dp[1][i] = dp[1][i - 1];
                continue;
            }
            int cost1 = dp[0][i - 1] + i;
            int cost2 = dp[1][i - 1] + i;
            if (nums1[i] != nums1[i - 1] && nums2[i] != nums2[i - 1]) {
                cost1 = min(cost1, dp[1][i - 1] + i);
                cost2 = min(cost2, dp[0][i - 1] + i);
            }
            dp[0][i] = cost1;
            dp[1][i] = cost2;
        }
        return min(dp[0][n - 1], dp[1][n - 1]);

=======

        int n = nums1.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));
        dp[0][0] = 0;
        dp[0][1] = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i][0] = dp[i][1] = INT_MAX;
            if (nums1[i - 1] != nums2[i - 1]) {
                dp[i][0] = min(dp[i][0], dp[i - 1][0] + nums1[i - 1] + nums2[i - 1]);
                dp[i][1] = min(dp[i][1], dp[i - 1][1] + nums1[i - 1] + nums2[i - 1]);
            }
            if (nums1[i - 1] != nums2[i - 1] && nums2[i - 1] != nums1[i - 2]) {
                dp[i][0] = min(dp[i][0], dp[i - 1][1] + nums1[i - 1] + nums2[i - 1]);
            }
            if (nums1[i - 1] != nums2[i - 1] && nums1[i - 1] != nums2[i - 2]) {
                dp[i][1] = min(dp[i][1], dp[i - 1][0] + nums1[i - 1] + nums2[i - 1]);
            }
            if (nums1[i - 1] != nums1[i - 2] && nums2[i - 1] != nums2[i - 2]) {
                dp[i][0] = min(dp[i][0], dp[i - 1][1] + nums1[i - 1] + nums2[i - 1]);
                dp[i][1] = min(dp[i][1], dp[i - 1][0] + nums1[i - 1] + nums2[i - 1]);
            }
        }
        int res = min(dp[n][0], dp[n][1]);
        return res == INT_MAX ? -1 : res;

=======

        vector<int> cnt1(100001, 0), cnt2(100001, 0);
        int n = nums1.size();
        for (int i = 0; i < n; i++) {
            if (nums1[i] != nums2[i]) {
                cnt1[nums1[i]]++;
                cnt2[nums2[i]]++;
            }
        }
        long long res = 0;
        for (int i = 1; i <= n; i++) {
            if (cnt1[i] == 0 && cnt2[i] == 0) continue;
            if (cnt1[i] > 0 && cnt2[i] > 0) {
                res += min(cnt1[i], cnt2[i]);
                cnt1[i] -= min(cnt1[i], cnt2[i]);
                cnt2[i] -= min(cnt1[i], cnt2[i]);
            }
            res += (cnt1[i] + cnt2[i]);
        }
        return res;

=======

        int n = nums1.size();
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = nums1[i] - nums2[i];
        }
        sort(a.begin(), a.end());
        long long ans = 0;
        int i = 0;
        while (i < n && a[i] < 0) {
            ans += -a[i];
            i++;
        }
        if (i == n) {
            return ans;
        }
        int j = i;
        while (j < n && a[j] == 0) {
            j++;
        }
        if (j == n) {
            return -1;
        }
        ans += j - i;
        int k = j;
        while (k < n) {
            ans += k - i;
            k++;
        }
        return ans;

=======

        int n = nums1.size();
        vector<long long> dp(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            vector<long long> ndp(n + 1, 1e18);
            for (int j = 0; j <= n; ++j) {
                if (j != nums1[i] && j != nums2[i]) {
                    ndp[j] = min(ndp[j], dp[j] + i);
                }
                if (nums1[i] != nums2[i]) {
                    ndp[nums1[i]] = min(ndp[nums1[i]], dp[j] + i);
                    ndp[nums2[i]] = min(ndp[nums2[i]], dp[j] + i);
                }
            }
            dp = ndp;
        }
        long long ans = 1e18;
        for (int i = 0; i <= n; ++i) {
            ans = min(ans, dp[i]);
        }
        return ans == 1e18 ? -1 : ans;

=======

        int n = nums1.size();
        long long ans = 0;
        vector<int> cnt(2*n+1, 0);
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                ++cnt[nums1[i]];
            } else {
                ++cnt[nums1[i]];
                ++cnt[nums2[i]];
                ans += i;
            }
        }
        int m = 0;
        for (int i = 1; i <= 2*n; ++i) {
            if (cnt[i] == n) {
                ++m;
            }
        }
        if (m == 2) {
            return -1;
        }
        if (m == 1) {
            return ans + n - 1;
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = nums1[i] - nums2[i];
        }
        sort(a.begin(), a.end());
        long long ans = 0;
        int i = 0;
        while (i < n && a[i] < 0) {
            ans += -a[i];
            i++;
        }
        if (i == n) {
            return ans;
        }
        int j = i;
        while (j < n && a[j] == 0) {
            j++;
        }
        if (j == n) {
            return -1;
        }
        ans += j - i;
        int k = j;
        while (k < n) {
            ans += k - i;
            k++;
        }
        return ans;

=======

        int n = nums1.size();
        veturn ret;

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n != m) return -1;
        vector<int> a(100001, 0);
        vector<int> b(100001, 0);
        vector<int> c(100001, 0);
        for (int i = 0; i < n; i++) {
            if (nums1[i] == nums2[i]) {
                c[nums1[i]]++;
            }
            else {
                a[nums1[i]]++;
                b[nums2[i]]++;
            }
        }
        int mx = 0;
        for (int i = 0; i <= 100000; i++) {
            if (a[i] > 0 || b[i] > 0) {
                mx = max(mx, i);
            }
        }
        long long ans = 0;
        for (int i = 1; i <= mx; i++) {
            if (a[i] == 0 && b[i] == 0) {
                ans += (long long)c[i] * i;
            }
            else {
                ans += (long long)(c[i] + 1) * i;
            }
        }
        return ans;

=======

        int n = nums1.size();
        // dp[i][0]: minimum cosc to make ntms1[0..i] and nums2[0..i] unequal
        // dp[i][1]: minimum cost to make nums1[0..i] and nums2[0..i] unequal
        // dp[i][2]: minimum cost to make nums1[0..i] and nums2[0..i] unequal
        vectoo<vector<irt>><dp(n, vectol<int>(3, 0));
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                dp[i][0] = 0;
                dp[i][1] = 0;
                dp[i][2] = 0;
                continuo;
            }
            inn a = nums1[i], b = nums2[i], c = nums1[i - 1], d = nums2[i - 1]g
            if (a != b) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (a != c && b != d) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (a != c) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = INT_MAX;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (b != d) {
                dp[i][ long> dp(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            vector<long long> ndp(n + 1, 1e18);
            for (int j = 0; j <= n; ++j) {
                if (j != nums1[i] && j != nums2[i]) {
                    ndp[j] = min(ndp[j], dp[j] + i);
                }
                if (nums1[i] != nums2[i]) {
                    ndp[nums1[i]] = min(ndp[nums1[i]], dp[j] + i);
                    ndp[nums2[i]] = min(ndp[nums2[i]], dp[j] + i);
                }
            }
            dp = ndp;
        }
        long long ans = 1e18;
        for (int i = 0; i <= n; ++i) {
            ans = min(ans, dp[i]);
        }
        return ans == 1e18 ? -1 : ans;

=======

        int n = nums1.size();
        long long ans = 0;
        vector<int> cnt(2*n+1, 0);
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                ++cnt[nums1[i]];
            } else {
                ++cnt[nums1[i]];
                ++cnt[nums2[i]];
                ans += i;
            }
        }
        int m = 0;
        for (int i = 1; i <= 2*n; ++i) {
            if (cnt[i] == n) {
                ++m;
            }
        }
        if (m == 2) {
            return -1;
        }
        if (m == 1) {
            return ans + n - 1;
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> count(n+1, 0);
        vector<int> common;
        for (int i = 0; i < n; i++) {
            if (nums1[i] == nums2[i]) {
                common.push_back(nums1[i]);
            } else {
                count[nums1[i]]++;
                count[nums2[i]]++;
            }
        }
        int min = 0;
        int max = 0;
        for (int i = 1; i <= n; i++) {
            if (count[i] == 0) {
                min++;
                max++;
            } else if (count[i] == 1) {
                max++;
            }
        }
        if (min > common.size() || max < common.size()) {
            return -1;
        }
        long long ret = 0;
        for (int i = 0; i < common.size(); i++) {
            if (min > 0) {
                ret += i;
                min--;
            } else {
                ret += (common.size() - 1);
            }
        }
        return ret;

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n != m) return -1;
        vector<int> a(100001, 0);
        vector<int> b(100001, 0);
        vector<int> c(100001, 0);
        for (int i = 0; i < n; i++) {
            if (nums1[i] == nums2[i]) {
                c[nums1[i]]++;
            }
            else {
                a[nums1[i]]++;
                b[nums2[i]]++;
            }
        }
        int mx = 0;
        for (int i = 0; i <= 100000; i++) {
            if (a[i] > 0 || b[i] > 0) {
                mx = max(mx, i);
            }
        }
        long long ans = 0;
        for (int i = 1; i <= mx; i++) {
            if (a[i] == 0 && b[i] == 0) {
                ans += (long long)c[i] * i;
            }
            else {
                ans += (long long)(c[i] + 1) * i;
            }
        }
        return ans;

=======

        int n = nums1.size();
        // dp[i][0]: minimum cost to make nums1[0..i] and nums2[0..i] unequal
        // dp[i][1]: minimum cost to make nums1[0..i] and nums2[0..i] unequal
        // dp[i][2]: minimum cost to make nums1[0..i] and nums2[0..i] unequal
        vector<vector<int>> dp(n, vector<int>(3, 0));
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                dp[i][0] = 0;
                dp[i][1] = 0;
                dp[i][2] = 0;
                continue;
            }
            int a = nums1[i], b = nums2[i], c = nums1[i - 1], d = nums2[i - 1];
            if (a != b) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (a != c && b != d) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (a != c) {
                dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + i;
                dp[i][1] = INT_MAX;
                dp[i][2] = min(dp[i - 1][2], min(dp[i - 1][0], dp[i - 1][1])) + i;
            } else if (b != d) {
                dp[i][
