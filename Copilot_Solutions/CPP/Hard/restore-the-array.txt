Synthesizing 4/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<long long> dp(n + 1, 0);
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == '0') continue;
            long long sum = 0;
            for (int j = i; j < n; j++) {
                sum = sum * 10 + (s[j] - '0');
                if (sum > k) break;
                dp[i] = (dp[i] + dp[j + 1]) % 1000000007;
            }
        }
        return dp[0];

=======

        int n = s.length();
        int mod = 1e9 + 7;
        vector<long> dp(n + 1, 0);
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == '0') {
                continue;
            }
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + (s[j] - '0');
                if (num > k) {
                    break;
                }
                dp[i] = (dp[i] + dp[j + 1]) % mod;
            }
        }
        return dp[0];

=======

        int n = s.length();
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') continue;
            long long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s[j] - '0';
                if (num > k) break;
                dp[j+1] = (dp[j+1] + dp[i]) % 1000000007;
            }
        }
        return dp[n];
