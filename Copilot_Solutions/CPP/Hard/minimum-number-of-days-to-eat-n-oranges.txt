Synthesizing 10/10 solutions

=======

        if (n <= 1) return n;
        if (n % 2 == 0) return 1 + minDays(n / 2);
        if (n % 3 == 0) return 1 + minDays(n / 3);
        return 1 + minDays(n - 1);

=======

        if (n <= 1) return n;
        if (n % 2 == 0) return minDays(n / 2) + 1;
        if (n % 3 == 0) return minDays(n / 3) + 1;
        return minDays(n - 1) + 1;

=======

        if (n <= 1) return n;
        return 1 + min(n % 2 + minDays(n / 2), n % 3 + minDays(n / 3));

=======

        if (n == 1) {
            return 1;
        }
        if (n == 2) {
            return 2;
        }
        if (n == 3) {
            return 2;
        }
        if (n == 4) {
            return 3;
        }
        if (n == 5) {
            return 4;
        }
        if (n == 6) {
            return 3;
        }
        if (n == 7) {
            return 4;
        }
        if (n == 8) {
            return 4;
        }
        if (n == 9) {
            return 3;
        }
        if (n == 10) {
            return 4;
        }
        if (n == 11) {
            return 5;
        }
        if (n == 12) {
            return 4;
        }
        if (n == 13) {
            return 5;
        }
        if (n == 14) {
            return 5;
        }
        if (n == 15) {
            return 4;
        }
        if (n == 16) {
            return 5;
        }
        if (n == 17) {
            return 6;
        }
        if (n == 18) {
            return 5;
        }
        if (n == 19) {
            return 6;
        }
        if (n == 20) {
            return 5;
        }
        if (n == 21) {
            return 6;
        }
        if (n == 22) {
            return 6;
        }
        if (n == 23) {
            return 7;
        }
        if (n == 24) {
            return 5;
        }
        if (n == 25) {
            return 6;
        }
        if (n == 26) {
            return 6;
        }
        if (n == 27) {
            return 5;
        }
        if (n == 28) {
            return 6;
        }
        if (n == 29) {
            return 7;
        }
        if (n == 30) {
            return 6;
        }
        if (n == 31) {
            return 7;
        }
        if (

=======

        if(n == 1) return 1;
        if(n % 2 == 0) return 1 + minDays(n / 2);
        if(n % 3 == 0) return 1 + minDays(n / 3);
        return 1 + minDays(n - 1);

=======

        unordered_map<int, int> dp;
        return minDays(n, dp);

=======

        unordered_map<int, int> cache;
        return dfs(n, cache);

=======

        unordered_map<int, int> cache;
        return helper(n, cache);

=======

        vector<int> dp(n+1, -1);
        return dfs(n, dp);

=======

        queue<int> q;
        unordered_set<int> visited;
        q.push(n);
        visited.insert(n);
        int depth = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int cur = q.front();
                q.pop();
                if (cur == 0) return depth;
                if (cur % 3 == 0 && !visited.count(cur / 3)) {
                    q.push(cur / 3);
                    visited.insert(cur / 3);
                }
                if (cur % 2 == 0 && !visited.count(cur / 2)) {
                    q.push(cur / 2);
                    visited.insert(cur / 2);
                }
                if (!visited.count(cur - 1)) {
                    q.push(cur - 1);
                    visited.insert(cur - 1);
                }
            }
            depth++;
        }
        return depth;
