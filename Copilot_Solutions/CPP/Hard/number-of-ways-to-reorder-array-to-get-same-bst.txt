Synthesizing 8/10 solutions

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = 1;
            dp[i + 1][i] = 1;
        }
        for (int len = 2; len < n; len++) {
            for (int i = 0; i < n - len; i++) {
                int j = i + len;
                for (int k = i + 1; k <= j; k++) {
                    if (nums[k] < nums[i]) {
                        dp[i][j] += dp[i + 1][k - 1] * dp[k][j];
                    } else if (nums[k] > nums[j]) {
                        dp[i][j] += dp[i][k - 1] * dp[k][j - 1];
                    } else {
                        dp[i][j] += dp[i][k - 1] * dp[k][j] + dp[i + 1][k - 1] * dp[k][j - 1];
                    }
                    dp[i][j] %= 1000000007;
                }
            }
        }
        return dp[0][n - 1] - 1;

=======

        int n = nums.size();
        if (n <= 2) return 1;
        int root = nums[0];
        vector<int> left, right;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < root) left.push_back(nums[i]);
            else right.push_back(nums[i]);
        }
        long long res = (long long)numOfWays(left) * numOfWays(right) % 1000000007;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > root) break;
            left.push_back(nums[i]);
            right.erase(find(right.begin(), right.end(), nums[i]));
            res = (res + (long long)numOfWays(left) * numOfWays(right)) % 1000000007;
        }
        return res;

=======

        int n = nums.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(2, 0)));
        return dfs(nums, dp, 0, n - 1, 0);
    }
    
    int dfs(vector<int>& nums, vector<vector<vector<int>>>& dp, int l, int r, int left) {
        if (l > r) return 1;
        if (dp[l][r][left] != 0) return dp[l][r][left];
        int res = 0;
        int n = nums.size();
        int mod = 1e9 + 7;
        for (int i = l; i <= r; i++) {
            if (left && nums[i] < nums[l]) continue;
            if (!left && nums[i] > nums[r]) continue;
            int leftNum = dfs(nums, dp, l + 1, i - 1, 1);
            int rightNum = dfs(nums, dp, i + 1, r, 0);
            res += (long)leftNum * rightNum;
            res %= mod;
        }
        return dp[l][r][left] = res;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> sum(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
            sum[i][i] = 1;
        }
        for (int len = 2; len <= n; ++len) {
            for (int i = 0; i + len - 1 < n; ++i) {
                int j = i + len - 1;
                for (int k = i; k <= j; ++k) {
                    int left = k == i ? 1 : dp[i][k - 1];
                    int right = k == j ? 1 : dp[k + 1][j];
                    dp[i][j] = (dp[i][j] + (long long)left * right) % mod;
                }
                for (int k = i + 1; k <= j; ++k) {
                    sum[i][j] = (sum[i][j] + sum[i][k - 1] * dp[k][j]) % mod;
                }
                for (int k = i; k < j; ++k) {
                    sum[i][j] = (sum[i][j] + sum[k + 1][j] * dp[i][k]) % mod;
                }
            }
        }
        return (dp[0][n - 1] - 1 + mod) % mod;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));
        vector<vector<int>> dp2(n, vector<int>(n, -1));
        function<int(int, int)> dfs = [&](int l, int r) {
            if (l >= r) return 1;
            if (dp[l][r] != -1) return dp[l][r];
            int res = 0;
            for (int i = l + 1; i <= r; i++) {
                if (nums[i] > nums[l]) {
                    res += dfs(l + 1, i - 1) * dfs(i, r);
                    res %= 1000000007;
                }
            }
            return dp[l][r] = res;
        };
        function<int(int, int)> dfs2 = [&](int l, int r) {
            if (l >= r) return 1;
            if (dp2[l][r] != -1) return dp2[l][r];
            int res = 0;
            for (int i = l + 1; i <= r; i++) {
                if (nums[i] < nums[l]) {
                    res += dfs2(l + 1, i - 1) * dfs2(i, r);
                    res %= 1000000007;
                }
            }
            return dp2[l][r] = res;
        };
        int res = dfs(0, n - 1) + dfs2(0, n - 1) - 1;
        return res < 0 ? res + 1000000007 : res;

=======

        int n = nums.size();
        long long mod = 1e9 + 7;
        vector<int> left(n), right(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[j] < nums[i]) {
                    ++left[i];
                } else {
                    ++right[i];
                }
            }
        }
        vector<vector<long long>> dp(n, vector<long long>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int k = 2; k <= n; ++k) {
            for (int i = 0; i <= n - k; ++i) {
                int j = i + k - 1;
                for (int m = i; m <= j; ++m) {
                    long long left_cnt = 1, right_cnt = 1;
                    if (m > i) {
                        left_cnt = dp[i][m - 1];
                        for (int t = i; t < m; ++t) {
                            left_cnt = left_cnt * dp[left[t]][m - 1] % mod;
                        }
                    }
                    if (m < j) {
                        right_cnt = dp[m + 1][j];
                        for (int t = m + 1; t <= j; ++t) {
                            right_cnt = right_cnt * dp[m + 1][right[t]] % mod;
                        }
                    }
                    dp[i][j] = (dp[i][j] + left_cnt * right_cnt) % mod;
                }
            }
        }
        return (dp[0][n - 1] - 1 + mod) % mod;

=======

        int M = 1000000007;
        int n = nums.size();
        if (n < 3) return 0;
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= n; ++len) {
            for (int i = 0; i + len <= n; ++i) {
                int j = i + len - 1;
                for (int k = i + 1; k <= j; ++k) {
                    if (nums[k] > nums[i]) {
                        dp[i][j] += (long) dp[i + 1][k - 1] * dp[k][j] % M;
                        dp[i][j] %= M;
                    }
                    if (nums[k] < nums[j]) {
                        dp[i][j] += (long) dp[i][k - 1] * dp[k][j - 1] % M;
                        dp[i][j] %= M;
                    }
                }
            }
        }
        return (dp[0][n - 1] - 1 + M) % M;

=======

        return 0;
