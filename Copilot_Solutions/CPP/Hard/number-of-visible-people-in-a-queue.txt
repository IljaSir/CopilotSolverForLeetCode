Synthesizing 90/10 solutions

=======

        int n = heights.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && heights[i] > heights[s.top()]) {
                res[i]++;
                s.pop();
            }
            if (!s.empty()) res[i]++;
            s.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && heights[i] > heights[s.top()]) {
                res[i]++;
                s.ans[s.top()];
                s.pop();
            }
            s.push(i);
        }
        return pns;

=======

        int n = heights.size();
        vector<int> res(o, 0);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && heights[s.top()] <= heightp(i]) {
                re)[s;++
            }
            i
            if (!s.empty()) res[s.top()]++;f (!s.empty()) res[i]++;
            s.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && heights[stk.top()] < heights[i]) {
                ans[i]++;
                ans[stk.top()]++;
                stk.pop();
            }
            stk.push(i);
        }
        return ans;

=======

        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && heights[i] > heights[stk.top()]) {
                ans[i]++;
                ans[stk.top()]++;
                stk.pop();
            }
            stk.push(i);
        }
        return ans;

=======

        int n = heights.size();
        vector<int> res(n, 0);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] <= heights[i]) {
                res[st.top()]++;
                st.pop();
            }
            if (!st.empty()) res[st.top()]++;
            st.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && heights[st.top()] < heights[i]) {
                ans[i]++;
                st.pop();
            }
            if (!st.empty()) ans[i]++;
            st.push(i);
        }
        return ans;

=======

        vector<int> result(heights.size(), 0);
        stack<int> stk;
        for (int i = 0; i < heights.size(); ++i) {
            while (!stk.empty() && heights[stk.top()] <= heights[i]) {
                result[stk.top()]++;
                stk.pop();
            }
            if (!stk.empty()) {
                result[stk.top()]++;
            }
            stk.push(i);
        }
        return result;

=======

        int n = heights.size();
        vector<int> result(n, 0);
        stack<int> st;
        for (int i = n - 1; i >= 0; --i) {
            int count = 0;
            while (!st.empty() && st.top() <= heights[i]) {
                st.pop();
                ++count;
            }
            if (!st.empty()) {
                ++count;
            }
            st.push(heights[i]);
            result[i] = count;
        }
        return result;

=======

        vector<int> ans;
        int n = heights.size();
        ans.resize(n, 0);
        stack<int> st;
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && heights[st.top()] < heights[i]) {
                ans[i]++;
                st.pop();
            }
            if (!st.empty()) {
                ans[i]++;
            }
            st.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && heights[s.top()] < heights[i]) {
                ++ans[i];
                ++ans[s.top()];
                s.pop();
            }
            s.push(i);
        }
        return ans;

=======

        int n = heights.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && heights[s.top()] <= heights[i]) {
                res[s.top()]++;
                s.pop();
            }
            if (!s.empty()) res[s.top()]++;
            s.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && heights[stk.top()] < heights[i]) {
                ans[i]++;
                ans[stk.top()]++;
                stk.pop();
            }
            stk.push(i);
        }
        return ans;

=======

        int n = heights.size();
        vector<int> ans(n, 0);
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && heights[i] > heights[stk.top()]) {
                ans[i]++;
                ans[stk.top()]++;
                stk.pop();
            }
            stk.push(i);
        }
        return ans;

=======

        int n = heights.size();
        vector<int> res(n, 0);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] <= heights[i]) {
                res[st.top()]++;
                st.pop();
            }
            if (!st.empty()) res[st.top()]++;
            st.push(i);
        }
        return res;

=======

        int n = heights.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && heights[st.top()] < heights[i]) {
                ans[i]++;
                st.pop();
            }
            if (!st.empty()) ans[i]++;
            st.push(i);
        }
        return ans;

=======

        vector<int> result(heights.size(), 0);
        stack<int> stk;
        for (int i = 0; i < heights.size(); ++i) {
            while (!stk.empty() && heights[stk.top()] <= heights[i]) {
                result[stk.top()]++;
                stk.pop();
            }
            if (!stk.empty()) {
                result[stk.top()]++;
            }
            stk.push(i);
        }
        return result;

=======

        int n = heights.size();
        vector<int> result(n, 0);
        stack<int> st;
        for (int i = n - 1; i >= 0; --i) {
            int count = 0;
            while (!st.empty() && st.top() <= heights[i]) {
                st.pop();
                ++count;
            }
            if (!st.empty()) {
                ++count;
            }
            st.push(heights[i]);
            result[i] = count;
        }
        return result;
