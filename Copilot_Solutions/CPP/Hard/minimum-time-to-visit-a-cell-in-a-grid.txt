Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        while (!q.empty()) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int t = max(dp[x][y], grid[nx][ny]);
                if (t < dp[nx][ny]) {
                    dp[nx][ny] = t;
                    q.push({nx, ny});
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
        dist[0][0] = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<int> dx = {0, 0, -1, 1};
        vector<int> dy = {-1, 1, 0, 0};
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int cost = max(dist[x][y], grid[nx][ny]);
                if (cost < dist[nx][ny]) {
                    dist[nx][ny] = cost;
                    q.push({nx, ny});
                }
            }
        }
        return dist[m - 1][n - 1];

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
        dist[0][0] = 0;
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, 0, 0});
        while (!pq.empty()) {
            auto [d, x, y] = pq.top(); pq.pop();
            if (d > dist[x][y]) continue;
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int nd = max(d, grid[nx][ny]);
                if (nd < dist[nx][ny]) {
                    dist[nx][ny] = nd;
                    pq.push({nd, nx, ny});
                }
            }
        }
        return dist[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, 0, 0});
        vector<int> dx = {0, 1, 0, -1};
        vector<int> dy = {1, 0, -1, 0};
        while (!pq.empty()) {
            auto [t, x, y] = pq.top();
            pq.pop();
            if (dp[x][y] < t) continue;
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int nt = max(t, grid[nx][ny]);
                if (dp[nx][ny] <= nt) continue;
                dp[nx][ny] = nt;
                pq.push({nt, nx, ny});
            }
        }
        return dp[m - 1][n - 1] == INT_MAX ? -1 : dp[m - 1][n - 1];

=======

        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        dist[0][0] = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (int i = 0; i < 4; ++i) {
                int nx = x + "2011"[i] - '1';
                int ny = y + "1120"[i] - '1';
                if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                    int d = max(dist[x][y], grid[nx][ny]);
                    if (d < dist[nx][ny]) {
                        dist[nx][ny] = d;
                        q.push({nx, ny});
                    }
                }
            }
        }
        return dist[n - 1][m - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
        pq.push({0, {0, 0}});
        while (!pq.empty()) {
            auto [time, pos] = pq.top();
            pq.pop();
            int i = pos.first;
            int j = pos.second;
            if (i == m - 1 && j == n - 1) {
                return time;
            }
            if (visited[i][j]) {
                continue;
            }
            visited[i][j] = 1;
            if (i - 1 >= 0 && !visited[i - 1][j]) {
                pq.push({max(time, grid[i - 1][j]), {i - 1, j}});
            }
            if (i + 1 < m && !visited[i + 1][j]) {
                pq.push({max(time, grid[i + 1][j]), {i + 1, j}});
            }
            if (j - 1 >= 0 && !visited[i][j - 1]) {
                pq.push({max(time, grid[i][j - 1]), {i, j - 1}});
            }
            if (j + 1 < n && !visited[i][j + 1]) {
                pq.push({max(time, grid[i][j + 1]), {i, j + 1}});
            }
        }
        return -1;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 1e9));
        dp[0][0] = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        while(!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for(int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int t = max(dp[x][y], grid[nx][ny]);
                if(t < dp[nx][ny]) {
                    dp[nx][ny] = t;
                    q.push({nx, ny});
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size(), n = grid[0].size();
        int maxTime = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                maxTime = max(maxTime, grid[i][j]);
            }
        }
        int left = 0, right = maxTime;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(grid, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int n = grid.size();
        int m = grid[0].size();
        int t = 0;
        vector<vector<int>> dp(n, vector<int>(m, INT_MAX));
        dp[0][0] = 0;
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int x = p.first;
            int y = p.second;
            if (x - 1 >= 0) {
                int t1 = max(dp[x][y], grid[x - 1][y]);
                if (t1 < dp[x - 1][y]) {
                    dp[x - 1][y] = t1;
                    q.push({x - 1, y});
                }
            }
            if (x + 1 < n) {
                int t1 = max(dp[x][y], grid[x + 1][y]);
                if (t1 < dp[x + 1][y]) {
                    dp[x + 1][y] = t1;
                    q.push({x + 1, y});
                }
            }
            if (y - 1 >= 0) {
                int t1 = max(dp[x][y], grid[x][y - 1]);
                if (t1 < dp[x][y - 1]) {
                    dp[x][y - 1] = t1;
                    q.push({x, y - 1});
                }
            }
            if (y + 1 < m) {
                int t1 = max(dp[x][y], grid[x][y + 1]);
                if (t1 < dp[x][y + 1]) {
                    dp[x][y + 1] = t1;
                    q.push({x, y + 1});
                }
            }
        }
        return dp[n - 1][m - 1] == INT_MAX ? -1 : dp[n - 1][m - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        int dir[4][2] = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        
        vector<vector<int>> visited(m, vector<int>(n, 0));
        visited[0][0] = 1;
        
        queue<pair<int, int>> q;
        q.push({0, 0});
        
        int ans = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if (x == m - 1 && y == n - 1) return ans;
                
                for (int j = 0; j < 4; ++j) {
                    int nx = x + dir[j][0];
                    int ny = y + dir[j][1];
                    if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny] || grid[nx][ny] > ans + 1) continue;
                    q.push({nx, ny});
                    visited[nx][ny] = 1;
                }
            }
            ++ans;
        }
        return -1;
