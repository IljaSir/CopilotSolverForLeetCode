Synthesizing 9/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    if (grid[i][j] == 1) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);
                    } else {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j]);
                    }
                }
                if (j > 0) {
                    if (grid[i][j] == 1) {
                        dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);
                    } else {
                        dp[i][j] = min(dp[i][j], dp[i][j - 1]);
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dp[i][j] = INT_MAX;
                } else {
                    if (i > 0) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j]);
                    }
                    if (j > 0) {
                        dp[i][j] = min(dp[i][j], dp[i][j - 1]);
                    }
                    if (grid[i][j] == 1) {
                        if (i > 0) {
                            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);
                        }
                        if (j > 0) {
                            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);
                        }
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j]);
                }
                if (j > 0) {
                    dp[i][j] = min(dp[i][j], dp[i][j - 1]);
                }
                if (grid[i][j]) {
                    dp[i][j]++;
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + (grid[i - 1][j] == 1));
                }
                if (j > 0) {
                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + (grid[i][j - 1] == 1));
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        dp[0][0] = 0;
        for (int i = 1; i < m; i++) {
            dp[i][0] = grid[i][0] == 1 ? dp[i-1][0] + 1 : dp[i-1][0];
        }
        for (int i = 1; i < n; i++) {
            dp[0][i] = grid[0][i] == 1 ? dp[0][i-1] + 1 : dp[0][i-1];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;
                } else {
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[m-1][n-1];

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 1e9));
        dp[0][0] = grid[0][0] == 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + (grid[i][j] == 1));
                }
                if (j > 0) {
                    dp[i][j] = min(dp[i][j], dp[i][j - 1] + (grid[i][j] == 1));
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        memset(dp, 0, sizeof(dp));
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    dp[i][j] = INT_MAX;
                }
                if(i == 0 && j == 0) {
                    dp[i][j] = 0;
                }
                if(i > 0) {
                    dp[i][j] = min(dp[i][j], dp[i-1][j]);
                }
                if(j > 0) {
                    dp[i][j] = min(dp[i][j], dp[i][j-1]);
                }
                if(dp[i][j] != INT_MAX) {
                    dp[i][j]++;
                }
            }
        }
        return dp[m-1][n-1];

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        dp[0][0] = 0;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (auto [dx, dy] : dir) {
                int nx = x + dx, ny = y + dy;
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    if (grid[nx][ny] == 1) {
                        if (dp[x][y] + 1 < dp[nx][ny]) {
                            dp[nx][ny] = dp[x][y] + 1;
                            q.push({nx, ny});
                        }
                    } else {
                        if (dp[x][y] < dp[nx][ny]) {
                            dp[nx][ny] = dp[x][y];
                            q.push({nx, ny});
                        }
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        queue<pair<int, int>> q;
        vector<int> dir = {0, 1, 0, -1, 0};
        q.push({0, 0});
        dp[0][0] = 0;
        while (!q.empty()) {
            int x = q.front().first, y = q.front().second;
            q.pop();
            for (int k = 0; k < 4; ++k) {
                int nx = x + dir[k], ny = y + dir[k + 1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int cost = dp[x][y] + grid[nx][ny];
                if (cost < dp[nx][ny]) {
                    dp[nx][ny] = cost;
                    q.push({nx, ny});
                }
            }
        }
        return dp[m - 1][n - 1];
