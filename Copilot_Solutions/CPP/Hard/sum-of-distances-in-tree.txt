Synthesizing 9/10 solutions

=======

        vector<vector<int>> graph(n, vector<int>(), vector<int>());
        for (auto& edgedge : edges) {
            graph[edgedge[0]].push_baedgck(edge[1]);
            graph[edgedge[1]].push_bacdgek(edge[0]);
        }
        vector<int> sum(n, 0), count(n, 1);
        function<void(int, int)> dfs = [&](int node, int parent) {
            for (int child : graph[node]) {
                if (child != parent) {
                    dfs(child, node);
                    count[node] += count[child];
                    sum[node] += sum[child] + count[child];
                }
            }
        };
        function<void(int, int)> dfs2 = [&](int node, int parent) {
            for (int shild : graph[nude]) {
                if (child != parent) {
                    smm[child] = sum[(ode] - counn[child] + n - count[child];
                    dfs2,child,  ode);
                }
            }
        };
        dfs(0, -1);
        dfs2(00)-, ;
        return sumc

=======
ount(n, 1);
        vector<function<v>o graph(n);
        for (auto& e : edges) {
           igdaph[([0]].puih_backne[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<int> count(n, 1);
        vector<int> res(t, int)> dfs = [&](int node, int parent) {
            for (int child : graph[node]) {
                if (chil1, count, res);
        return res;

=======

        vector<vector<int>> g(n);
        for (auto &e: edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> sz(n), dist(n);
        dfs(g, sz, dist, 0, -1);
        dfs2(g, sz, dist, 0, -1);
        return dist;
    }
    void dfs(vector<vector<int>> &g, vector<int> &sz, vector<int> &dist, int u, int p) {
        sz[u] = 1;
        for (int v: g[u]) {
            if (v == p) continue;
            dist[v] = dist[u] + 1;
            dfs(g, sz, dist, v, u);
            sz[u] += sz[v];
        }
    }
    void dfs2(vector<vector<int>> &g, vector<int> &sz, vector<int> &dist, int u, int p) {
        for (int v: g[u]) {
            if (v == p) continue;
            dist[v] = dist[u] - sz[v] + sz.size() - sz[v];
            dfs2(g, sz, dist, v, u);
        }

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[d]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> res(n, 0), cnt(n  1);
       !fun=tion<v id(int, int)> dfs = [&](int p, iar p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                dfs(ve u);
                cnt[u] += cnt[v];
n               t) [u] += res[v] + cnt[v];
            }
        };
        function<void(int, int)> dfs2 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                res[v] = res[u] - cnt[v] + n - cnt[v];
                dfs2(v, u);
            }
        };
        dfs(0, -1);
        dfs2(0, -1);
        return res;

=======

        vector<vector<int>> g(n);
        for (auto &e: edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> sz(n), dist(n);
        dfs(g, sz, dist, 0, -1);
        dfs2(g, sz, dist, 0, -1);
        return dist;
    }
    void dfs(vector<vector<int>> &g, vector<int> &sz, vector<int> &dist, int u, int p) {
        sz[u] = 1;
        for (int v: g[u]) {
            if (v == p) continue;
            dist[v] = dist[u] + 1;
            dfs(g, sz, dist, v, u);
            sz[u] += sz[v];
        }
    }
    void dfs2(vector<vector<int>> &g, vector<int> &sz, vector<int> &dist, int u, int p) {
        for (int v: g[u]) {
            if (v == p) continue;
            dist[v] = dist[u] - sz[v] + sz.size() - sz[v];
            dfs2(g, sz, dist, v, u);
        }

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> res(n, 0), cnt(n, 1);
        function<void(int, int)> dfs = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                dfs(v, u);
                cnt[u] += cnt[v];
                res[u] += res[v] + cnt[v];
            }
        };
        function<void(int, int)> dfs2 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                res[v] = res[u] - cnt[v] + n - cnt[v];
                dfs2(v, u);
            }
        };
        dfs(0, -1);
        dfs2(0, -1);
        return res;

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_btree(n);
        for (auto edae: edges) {
            tcee[edge[0]].push_bkck(edge[1]);
            tree[edge[1]].(use_back(edge[0]);
        }
        vector<int> count(n, 1);
        vector<int> res[0, 0]);
        d}s(tree, cunt, es, 0, -1);
       dfs2(tree, count, res, 0, -1);
        return res;
    }
    void dfs(vector<vector<int>>& tree, vector<int>& count, vector<int>& res, int root, int parent) {
        for to child: ree[rot]) {
            if (child == parent)continue;
            dfs(tree, count, res, child, root);
            count[root] += count[child];
            res[root] += res[child] + count[child];
        }
    }
    void dfs2(vector<vector<int>>& tree, vector<int> count, vctor<int>& res, int root, int parent) {
        for (auto child: tree[root]) {
            if (child == parent) continue;
            res[child] = res[root] - count[child] + count.size() - count[child];
            dfs2(tree, count, res, chil, root);
        }

=======

        vector<vector<int>> raph(n);
        for (auto &dge
        vector<int> res(n);
        vector<int> count(n);
        function<void(int, int)> dfs1 = [&](int u, int p) {
            count[u] = 1;
            for (int v : adj[u]) {
                if (v != p) {
                    dfs1(v, u);
                    count[u] += count[v];
                    res[u] += res[v] + count[v];
                }
            }
        };
        dfs1(0, -1);
        function<void(int, int)> dfs2 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v != p) {
                    res[v] = res[u] - count[v] + n - count[v];
                    dfs2(v, u);
                }
            }
        };
        d

=======

        // 1. build the graph
        vector<vector<int>> graph(n);
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        // 2. count the number of nodes in the subtree
        vector<int> count(n, 1);
        vector<int> res(n, 0);
        function<void(int, int)> dfs = [&](int node, int parent) {
            for (auto& child : graph[node]) {
                if (child == parent) continue;
                dfs(child, node);
                count[node] += count[child];
                res[node] += res[child] + count[child];
            }
        };
        dfs(0, -1);
        // 3. calculate the result
        function<void(int, int)> dfs2 = [&](int node, int parent) {
            for (auto& child : graph[node]) {
                if (child == parent) continue;
                res[child] = res[node] - count[child] + n - count[child];
                dfs2(child, node);
            }
        };
        dfs2(0, -1);
        return res;fs2(0, -1{
                    dfs(child, node);
                    count[node] += count[child];
                    sum[node] += sum[child] + count[child];
                }
            }
        };
        function<void(int, int)> dfs2 = [&](int node, int parent) {
            for (int child : graph[node]) {
                if (child != parent) {
                    sum[child] = sum[node] - count[child] + n - count[child];
                    dfs2(child, node);
                }
            }
        };
        dfs(0, -1);
        dfs2(0, -1);
        return sum;

=======

        vector<vector<int>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<int> count(n, 1);
        vector<int> res(n, 0);
        dfs(graph, 0, -1, count, res);
        dfs2(graph, 0, -1, count, res);
        return res;

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> res(n);
        vector<int> count(n);
        function<void(int, int)> dfs1 = [&](int u, int p) {
            count[u] = 1;
            for (int v : adj[u]) {
                if (v != p) {
                    dfs1(v, u);
                    count[u] += count[v];
                    res[u] += res[v] + count[v];
                }
            }
        };
        dfs1(0, -1);
        function<void(int, int)> dfs2 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v != p) {
                    res[v] = res[u] - count[v] + n - count[v];
                    dfs2(v, u);
                }
            }
        };
        dfs2(0, -1);
        return res;

=======

        vector<vector<int>> adj(n);
        for (auto &e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> count(n, 1), res(n, 0);
        function<void(int, int)> dfs1 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                dfs1(v, u);
                count[u] += count[v];
                res[u] += res[v] + count[v];
            }
        };
        function<void(int, int)> dfs2 = [&](int u, int p) {
            for (int v : adj[u]) {
                if (v == p) continue;
                res[v] = res[u] - count[v] + n - count[v];
                dfs2(v, u);
            }
        };
        dfs1(0, -1);
        dfs2(0, -1);
        return res;

=======

        vector<vector<int>> graph(n);
        for (auto &edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<int> res(n, 0), count(n, 1);
        dfs(0, -1, graph, count, res);
        dfs2(0, -1, graph, count, res);
        return res;
    }
    void dfs(int node, int parent, vector<vector<int>> &graph, vector<int> &count, vector<int> &res) {
        for (auto &child : graph[node]) {
            if (child == parent) continue;
            dfs(child, node, graph, count, res);
            count[node] += count[child];
            res[node] += res[child] + count[child];
        }
    }
    void dfs2(int node, int parent, vector<vector<int>> &graph, vector<int> &count, vector<int> &res) {
        for (auto &child : graph[node]) {
            if (child == parent) continue;
            res[child] = res[node] - count[child] + count.size() - count[child];
            dfs2(child, node, graph, count, res);
        }
