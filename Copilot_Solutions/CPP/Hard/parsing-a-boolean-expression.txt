Synthesizing 7/10 solutions

=======

        stack<char> s;
        for (char c : expression) {
            if (c == ')') {
                vector<bool> v;
                while (s.top() != '(') {
                    if (s.top() == 't') v.push_back(true);
                    else if (s.top() == 'f') v.push_back(false);
                    s.pop();
                }
                s.pop();
                char op = s.top();
                s.pop();
                bool r = false;
                if (op == '&') r = true;
                for (bool b : v) {
                    if (op == '&') r = r && b;
                    else if (op == '|') r = r || b;
                    else if (op == '!') r = !b;
                }
                s.push(r ? 't' : 'f');
            }
            else s.push(c);
        }
        return s.top() == 't';

=======

        int i = 0;
        return parseBoolExpr(expression, i);
    }
    bool parseBoolExpr(string& expression, int& i) {
        char op = expression[i++];
        if (op == 't') return true;
        if (op == 'f') return false;
        if (op == '!') {
            bool v = parseBoolExpr(expression, i);
            i++;
            return !v;
        }
        vector<bool> v;
        while (i < expression.size()) {
            if (expression[i] == ')') {
                i++;
                break;
            }
            if (expression[i] == ',') {
                i++;
                continue;
            }
            v.push_back(parseBoolExpr(expression, i));
        }
        if (op == '&') {
            for (auto& x: v)
                if (!x) return false;
            return true;
        }
        if (op == '|') {
            for (auto& x: v)
                if (x) return true;
            return false;
        }
        return false;

=======

        return parseBoolExpr(expression, 0, expression.size() - 1);
    }
    
    bool parseBoolExpr(string& expression, int start, int end) {
        if (expression[start] == 't') {
            return true;
        } else if (expression[start] == 'f') {
            return false;
        } else if (expression[start] == '!') {
            return !parseBoolExpr(expression, start + 2, end - 1);
        } else {
            bool result = expression[start] == '&';
            int i = start + 2;
            while (i < end) {
                int j = i + 1;
                int depth = 0;
                while (j <= end) {
                    if (expression[j] == '(') {
                        depth++;
                    } else if (expression[j] == ')') {
                        depth--;
                    }
                    if (depth == 0) {
                        break;
                    }
                    j++;
                }
                bool value = parseBoolExpr(expression, i, j);
                if (expression[start] == '&') {
                    result &= value;
                } else {
                    result |= value;
                }
                i = j + 2;
            }
            return result;
        }

=======

        stack<char> s;
        for (char c : expression) {
            if (c != ')') {
                s.push(c);
            }
            else {
                string tmp;
                while (s.top() != '(') {
                    tmp = s.top() + tmp;
                    s.pop();
                }
                s.pop();
                char op = s.top();
                s.pop();
                bool res = (op == '&') ? true : false;
                for (int i = 0; i < tmp.length(); i++) {
                    if (tmp[i] == ',') {
                        continue;
                    }
                    else if (tmp[i] == 't') {
                        if (op == '&') {
                            res &= true;
                        }
                        else if (op == '|') {
                            res |= true;
                        }
                        else {
                            res = !true;
                        }
                    }
                    else if (tmp[i] == 'f') {
                        if (op == '&') {
                            res &= false;
                        }
                        else if (op == '|') {
                            res |= false;
                        }
                        else {
                            res = !false;
                        }
                    }
                    else {
                        res = parseBoolExpr(tmp);
                        break;
                    }
                }
                s.push(res ? 't' : 'f');
            }
        }
        return s.top() == 't';

=======

        stack<char> s;
        for (char c : expression) {
            if (c == ')') {
                bool t = s.top() == 't';
                s.pop(); // pop t or f
                s.pop(); // pop & or |
                while (s.top() != '(') {
                    bool cur = s.top() == 't';
                    s.pop();
                    if (s.top() == '&') t &= cur;
                    else t |= cur;
                }
                s.pop(); // pop (
                s.push(t ? 't' : 'f');
            } else if (c != ',') {
                s.push(c);
            }
        }
        return s.top() == 't';

=======

        return parse(expression);
    }
    
    bool parse(string expr) {
        if (expr == "t") return true;
        if (expr == "f") return false;
        if (expr[0] == '!') return !parse(expr.substr(2, expr.size()-3));
        if (expr[0] == '&') {
            int i = 2;
            bool res = true;
            while (i < expr.size()) {
                int j = i;
                int cnt = 0;
                while (j < expr.size()) {
                    if (expr[j] == '(') cnt++;
                    if (expr[j] == ')') cnt--;
                    if (cnt == 0) break;
                    j++;
                }
                res = res && parse(expr.substr(i, j-i+1));
                i = j+2;
            }
            return res;
        }
        if (expr[0] == '|') {
            int i = 2;
            bool res = false;
            while (i < expr.size()) {
                int j = i;
                int cnt = 0;
                while (j < expr.size()) {
                    if (expr[j] == '(') cnt++;
                    if (expr[j] == ')') cnt--;
                    if (cnt == 0) break;
                    j++;
                }
                res = res || parse(expr.substr(i, j-i+1));
                i = j+2;
            }
            return res;
        }
        return false;

=======

        string str;
        for (int i = 0; i < expression.size(); i++) {
            if (expression[i] != ' ') {
                str += expression[i];
            }
        }
        return parseBoolExpr(str);
    }
    bool parseBoolExpr(string expression) {
        if (expression == "t") {
            return true;
        }
        if (expression == "f") {
            return false;
        }
        if (expression[0] == '!') {
            return !parseBoolExpr(expression.substr(2, expression.size() - 3));
        }
        if (expression[0] == '|') {
            int count = 0;
            for (int i = 2; i < expression.size(); i++) {
                if (expression[i] == '(') {
                    count++;
                }
                if (expression[i] == ')') {
                    count--;
                }
                if (expression[i] == ',' && count == 0) {
                    if (parseBoolExpr(expression.substr(2, i - 2)) || parseBoolExpr(expression.substr(i + 1, expression.size() - i - 2))) {
                        return true;
                    }
                }
            }
            return false;
        }
        if (expression[0] == '&') {
            int count = 0;
            for (int i = 2; i < expression.size(); i++) {
                if (expression[i] == '(') {
                    count++;
                }
                if (expression[i] == ')') {
                    count--;
                }
                if (expression[i] == ',' && count == 0) {
                    if (parseBoolExpr(expression.substr(2, i - 2)) && parseBoolExpr(expression.substr(i + 1, expression.size() - i - 2))) {
                        return true;
                    }
                }
            }
            return false;
        }
        return false;
