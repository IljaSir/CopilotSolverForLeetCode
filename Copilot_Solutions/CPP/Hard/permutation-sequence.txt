Synthesizing 10/10 solutions

=======

        string s(n, '0');
        for (int i = 0; i < n; ++i) {
            s[i] += i + 1;
        }
        for (int i = 1; i < k; ++i) {
            next_permutation(s.begin(), s.end());
        }
        return s;

=======

        vector<int> nums;
        int fact = 1;
        for (int i = 1; i <= n; i++) {
            nums.push_back(i);
            fact *= i;
        }
        k--;
        string ans;
        for (int i = 0; i < n; i++) {
            fact = fact / (n - i);
            int index = k / fact;
            k = k % fact;
            ans.push_back(nums[index] + '0');
            nums.erase(nums.begin() + index);
        }
        return ans;

=======

        vector<int> nums(n, 0);
        for (int i = 0; i < n; ++i) nums[i] = i + 1;
        for (int i = 1; i < k; ++i) nextPermutation(nums);
        string res;
        for (int i = 0; i < n; ++i) res += to_string(nums[i]);
        return res;
    }
    void nextPermutation(vector<int>& nums) {
        int n = nums.size(), i = n - 2, j = n - 1;
        while (i >= 0 && nums[i] >= nums[i + 1]) --i;
        if (i >= 0) {
            while (j >= 0 && nums[j] <= nums[i]) --j;
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());

=======

        vector<int> nums(n, 0);
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        while (--k) {
            nextPermutation(nums);
        }
        string res;
        for (int i = 0; i < n; i++) {
            res += to_string(nums[i]);
        }
        return res;
    }
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int i = n - 2;
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums[i], nums[j]);
        }
        reverse(nums.begin() + i + 1, nums.end());

=======

        string result;
        vector<int> nums;
        for (int i = 1; i <= n; ++i) {
            nums.push_back(i);
        }
        int factorial = 1;
        for (int i = 1; i < n; ++i) {
            factorial *= i;
        }
        --k;
        for (int i = 0; i < n; ++i) {
            int index = k / factorial;
            result += to_string(nums[index]);
            nums.erase(nums.begin() + index);
            if (n - 1 - i > 0) {
                factorial /= n - 1 - i;
            }
            k -= index * factorial;
        }
        return result;

=======

        vector<int> nums(n);
        iota(nums.begin(), nums.end(), 1);
        int fac = 1;
        for (int i = 2; i < n; ++i) {
            fac *= i;
        }
        string ans;
        for (int i = n - 1; i >= 0; --i) {
            int idx = (k - 1) / fac;
            ans.push_back(nums[idx] + '0');
            nums.erase(nums.begin() + idx);
            if (i > 0) {
                k = k % fac;
                fac /= i;
            }
        }
        return ans;

=======

        string s(n, '0');
        for (int i = 1; i <= n; ++i) {
            s[i-1] = i + '0';
        }
        for (int i = 1; i < k; ++i) {
            next_permutation(s.begin(), s.end());
        }
        return s;

=======

        int f = 1;
        for (int i = 1; i <= n; i++) {
            f *= i;
        }
        vector<int> v;
        for (int i = 1; i <= n; i++) {
            v.push_back(i);
        }
        string ret;
        k--;
        while (n > 0) {
            int i = k / (f / n);
            ret += to_string(v[i]);
            v.erase(v.begin() + i);
            k %= f / n;
            f /= n;
            n--;
        }
        return ret;

=======

        string res;
        vector<int> nums(n+1, 1);
        for (int i = 1; i <= n; i++) {
            nums[i] = nums[i-1] * i;
        }
        vector<int> visited(n+1, 0);
        for (int i = 1; i <= n; i++) {
            int index = (k-1) / nums[n-i] + 1;
            k = k - (index-1) * nums[n-i];
            int cnt = 0;
            for (int j = 1; j <= n; j++) {
                if (visited[j] == 0) {
                    cnt++;
                    if (cnt == index) {
                        res += to_string(j);
                        visited[j] = 1;
                        break;
                    }
                }
            }
        }
        return res;

=======

        string result = "";
        vector<int> nums(n);
        int i, j, t, f = 1;
        for (i = 0; i < n; i++) {
            nums[i] = i + 1;
            f *= i + 1;
        }
        for (i = 0; i < n; i++) {
            f /= n - i;
            t = (k - 1) / f;
            k = k - t * f;
            result += to_string(nums[t]);
            for (j = t; j < n - i - 1; j++) {
                nums[j] = nums[j + 1];
            }
        }
        return result;
