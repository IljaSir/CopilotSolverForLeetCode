Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long long ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = i + 1; j < nums1.size(); ++j) {
                if (nums1[i] > nums1[j]) continue;
                for (int k = j + 1; k < nums1.size(); ++k) {
                    if (nums1[j] > nums1[k]) continue;
                    if (nums2[i] < nums2[j] && nums2[j] < nums2[k]) ++ans;
                }
            }
        }
        return ans;

=======

        int n = nums1.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k]) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums1.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (nums1[i] < nums1[j] && nums1[j] < nums1[k]) {
                        if (nums2[i] < nums2[j] && nums2[j] < nums2[k]) {
                            ++ans;
                        }
                    }
                }
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums1.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k]) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        long long res = 0;
        int n = nums1.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums2[i] > nums2[j]) continue;
                int k = j + 1;
                while (k < n && nums1[k] < nums1[i]) ++k;
                while (k < n && nums1[k] > nums1[j]) ++k;
                res += k - j - 1;
            }
        }
        return res;

=======

        long long res = 0;
        int n = nums1.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k]) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n = nums1.size();
        vector<vector<int>> c1(n), c2(n);
        for (int i = 0; i < n; i++) {
            c1[nums1[i]].push_back(i);
            c2[nums2[i]].push_back(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x = nums1[i], y = nums1[j];
                if (x > y) swap(x, y);
                int l = lower_bound(c2[x].begin(), c2[x].end(), i) - c2[x].begin();
                int r = upper_bound(c2[y].begin(), c2[y].end(), j) - c2[y].begin();
                ans += r - l;
            }
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> cnt1(n), cnt2(n);
        for (int i = 0; i < n; ++i) {
            ++cnt1[nums1[i]];
            ++cnt2[nums2[i]];
        }
        for (int i = 1; i < n; ++i) {
            cnt1[i] += cnt1[i - 1];
            cnt2[i] += cnt2[i - 1];
        }
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k]) {
                        res += 1LL * cnt1[nums1[i] - 1] * cnt2[nums2[k]] - 1LL * cnt1[nums1[j]] * cnt2[nums2[j] - 1];
                    }
                }
            }
        }
        return res;

=======

        long long n = nums1.size();
        vector<int> pos1(n, -1);
        vector<int> pos2(n, -1);
        for (int i = 0; i < n; ++i) {
            pos1[nums1[i]] = i;
            pos2[nums2[i]] = i;
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    if (pos2[nums1[i]] < pos2[nums1[j]] && pos2[nums1[j]] < pos2[nums1[k]]) {
                        ans++;
                    }
                }
            }
        }
        return ans;
