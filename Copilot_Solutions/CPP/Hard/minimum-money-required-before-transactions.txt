Synthesizing 10/10 solutions

=======

        long long res = 0;
        sort(transactions.begin(), transactions.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] - a[1] > b[0] - b[1];
        });
        for (int i = 0; i < transactions.size(); i++) {
            if (res < transactions[i][0]) {
                res = transactions[i][0];
            }
            res += transactions[i][1];
        }
        return res;

=======

        sort(transactions.begin(), transactions.end(), [](const vector<int>& x, const vector<int>& y) {
            return x[0] - x[1] > y[0] - y[1];
        });
        long long res = 0;
        for (auto& t : transactions) {
            res += t[0] - t[1];
            res = max(res, (long long)t[0]);
        }
        return res;

=======

        long long ans = 0;
        sort(transactions.begin(), transactions.end(), [](const vector<int>& a, const vector<int>& b){
            return a[0] - a[1] > b[0] - b[1];
        });
        for (auto& t: transactions) {
            ans = max((long long)t[0], ans + t[1]);
        }
        return ans;

=======

        long long ans = 0;
        sort(transactions.begin(), transactions.end(), [](vector<int> a, vector<int> b) {
            return a[0] - a[1] > b[0] - b[1];
        });
        for (int i = 0; i < transactions.size(); i++) {
            ans += transactions[i][0];
        }
        long long sum = 0;
        for (int i = 0; i < transactions.size(); i++) {
            sum += transactions[i][1];
            ans = min(ans, sum);
        }
        return ans;

=======

        long long sum = 0;
        sort(transactions.begin(), transactions.end(), [](vector<int> &a, vector<int> &b){return a[0] - a[1] > b[0] - b[1];});
        for (int i = 0; i < transactions.size(); ++i) {
            sum += transactions[i][0];
        }
        for (int i = 0; i < transactions.size(); ++i) {
            sum -= transactions[i][1];
            if (sum < 0) {
                sum += transactions[i][0];
                break;
            }
        }
        return sum;

=======

        long long sum = 0;
        for (auto &t : transactions) {
            sum += t[0];
        }
        sort(transactions.begin(), transactions.end(), [](auto &a, auto &b) {
            return a[0] - a[1] < b[0] - b[1];
        });
        long long minSum = 0;
        for (auto &t : transactions) {
            if (minSum < t[0]) {
                minSum = t[0];
            }
            minSum -= t[1];
        }
        return sum - minSum;

=======

        long long res = 0;
        for (auto& t : transactions) {
            res += t[0];
        }
        sort(transactions.begin(), transactions.end(), [](const auto& a, const auto& b) {
            return a[0] - a[1] < b[0] - b[1];
        });
        for (int i = 0; i < transactions.size(); ++i) {
            if (res < transactions[i][0]) {
                res = transactions[i][0];
            }
            res -= transactions[i][0] - transactions[i][1];
        }
        return res;

=======

        long long sum = 0;
        for (auto &x : transactions) {
            sum += x[0];
        }
        sort(transactions.begin(), transactions.end(), [](auto &a, auto &b) {
            return a[0] - a[1] < b[0] - b[1];
        });
        long long ret = 0;
        for (auto &x : transactions) {
            if (sum < x[0]) {
                ret += x[0] - sum;
                sum = x[0];
            }
            sum -= x[1];
        }
        return ret;

=======

        long long sum = 0;
        sort(transactions.begin(), transactions.end());
        for (auto x : transactions) {
            sum += x[0];
        }
        long long ans = sum;
        for (int i = 0; i < transactions.size(); ++i) {
            sum -= transactions[i][0];
            ans = min(ans, sum + transactions[i][1]);
        }
        return ans;

=======

        vector<pair<int,int>> v;
        for(auto& t:transactions){
            v.emplace_back(t[0],t[1]);
        }
        sort(v.begin(),v.end());
        long long ans=0;
        for(auto& t:v){
            ans+=t.first;
            ans=max(ans,(long long)t.first+t.second);
        }
        return ans;
