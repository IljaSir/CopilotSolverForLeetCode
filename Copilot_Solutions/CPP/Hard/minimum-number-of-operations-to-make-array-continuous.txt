Synthesizing 9/10 solutions

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int res = n;
        for (int i = 0, j = 0; i < n; i++) {
            while (j < n && nums[j] - nums[i] < n) j++;
            if (j - i == n - 1 && nums[j - 1] - nums[i] == n - 1) res = min(res, n - j + i);
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = n;
        for (int i = 0, j = 0; j < n; ++j) {
            while (nums[j] - nums[i] >= n) ++i;
            ans = min(ans, n - (j - i + 1));
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int i = 0, j = 0, res = n;
        while (j < n) {
            if (nums[j] - nums[i] < n) {
                res = min(res, j - i + 1);
                ++j;
            } else {
                ++i;
            }
        }
        return n - res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int l = 0, r = 0;
        int res = n;
        while (r < n) {
            while (r < n && nums[r] - nums[l] < n) {
                r++;
            }
            if (r == n && nums[r-1] - nums[l] == n-1) {
                return 0;
            }
            if (r - l == n-1) {
                res = min(res, n - (r - l));
            }
            l++;
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int l = 0, r = 0, ans = n;
        while (r < n) {
            while (r < n && nums[r] - nums[l] < n) {
                ++r;
            }
            ans = min(ans, n - (r - l));
            ++l;
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = n - 1;
        int l = 0, r = 0;
        while (r < n) {
            while (r < n && nums[r] - nums[l] < n) {
                r++;
            }
            ans = min(ans, n - (r - l));
            l++;
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int res = n;
        for(int i = 0; i < n; ++i){
            int j = upper_bound(nums.begin(), nums.end(), nums[i] + n - 1) - nums.begin();
            res = min(res, n - (j - i));
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = n - 1;
        int i = 1;
        int j = 0;
        while (i < n) {
            while (i < n && nums[i] == nums[i - 1]) {
                ++i;
            }
            while (j < n && nums[i] - nums[j] >= n) {
                ++j;
            }
            ans = min(ans, n - (i - j));
            ++i;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int start = 0, end = 0;
        int res = n;
        while (end < n) {
            while (end < n && nums[end] - nums[start] < n) {
                end++;
            }
            if (end == n) break;
            res = min(res, n - (end - start));
            start++;
        }
        return res;
