Synthesizing 7/10 solutions (Duplicates hidden)

=======

        const int MOD = 1e9 + 7;
        vector<long long> dp(maxValue + 1, 1);
        for (int i = 2; i <= n; ++i) {
            vector<long long> ndp(maxValue + 1);
            for (int j = 1; j <= maxValue; ++j) {
                ndp[j] = dp[j];
                for (int k = 2 * j; k <= maxValue; k += j) {
                    ndp[j] += dp[k];
                    if (ndp[j] >= MOD) {
                        ndp[j] -= MOD;
                    }
                }
            }
            dp = ndp;
        }
        long long ans = 0;
        for (int i = 1; i <= maxValue; ++i) {
            ans += dp[i];
            if (ans >= MOD) {
                ans -= MOD;
            }
        }
        return ans;

=======

        int mod = 1e9 + 7;
        vector<int> dp(maxValue + 1, 0);
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            vector<int> dp2(maxValue + 1, 0);
            for (int j = 1; j <= maxValue; j++) {
                for (int k = 1; k * j <= maxValue; k++) {
                    dp2[k * j] = (dp2[k * j] + dp[j]) % mod;
                }
            }
            dp = move(dp2);
        }
        int res = 0;
        for (int i = 1; i <= maxValue; i++) {
            res = (res + dp[i]) % mod;
        }
        return res;

=======

        int MOD = 1e9 + 7;
        vector<long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= maxValue; ++i) {
            for (int j = n; j >= 1; --j) {
                dp[j] = (dp[j] + dp[j - 1] * i) % MOD;
            }
        }
        return dp[n];
