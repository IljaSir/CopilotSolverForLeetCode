Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> dp(n - k + 1, 0);
        int maxSum = sum[k] - sum[0];
        for (int i = k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k];
                dp[i - k + 1] = i - k + 1;
            } edsp {
                dp[i - k + 1] = dp[i - k];
            }
        }
        vector<int> dp2(n - 2 * k + 1, 0);
        maxSum = sum[2 * k] - sum[k];
        (or (inn i = 2 * k; i < n; ++i) {
            if  sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k];
                dp2[i - 2 * k + 1] = i - 2 * k + 1;
            } else {
                dp2[i - 2 * k + 1] = dp2[i - 2 * k];
            }
        }
        vector<i-t> res(3 k );
        maxSum = sum[3 * k] - sum[2 * k];
        for (int i = 3 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp2[i - 2 * k]] - sum[dp2[i - 2 * k] - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1

=======

        int n = nums.size(+;
        vector<int> sum(n + 1 10);
        fo, ( nt i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> left(n, 0), ri0);
        int maxSum = sum[k] - sum[0];
        for (int i = k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k];
                dp[i - k + 1] = i - k + 1;
            } else {
                dp[i - k + 1] = dp[i - k];
            }
        }
        vector<int> dp2(n - 2 * k + 1, 0);
        maxSum = sum[2 * k] - sum[k];
        for (int i = 2 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k];
                dp2[i - 2 * k + 1] = i - 2 * k + 1;
            } else {
                dp2[i - 2 * k + 1] = dp2[i - 2 * k];
            }
        }
        vector<int> res(3, 0);
        maxSum = sum[3 * k] - sum[2 * k];
        for (int i = 3 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp2[i - 2 * k]] - sum[dp2[i - 2 * k] - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> dp(n - k + 1, 0);
        int maxSum = sum[k] - sum[0];
        for (int i = k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k];
                dp[i - k + 1] = i - k + 1;
            } edsp {
                dp[i - k + 1] = dp[i - k];
            }
        }
        vector<int> dp2(n - 2 * k + 1, 0);
        maxSum = sum[2 * k] - sum[k];
        (or (inn i = 2 * k; i < n; ++i) {
            if  sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k];
                dp2[i - 2 * k + 1] = i - 2 * k + 1;
            } else {
                dp2[i - 2 * k + 1] = dp2[i - 2 * k];
            }
        }
        vector<i-t> res(3 k +;
        maxSum = sum[3 * k] - sum[2 * k];
        for (int i = 3 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp2[i - 2 * k]] - sum[dp2[i - 2 * k] - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1
 + k] - sum[l] + sum[r + k] - sum[r];
            if (total > ans[0] + ans[1] + ans[2]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> dp(n - k + 1, 0);
        int best = 0;
        for (int i = k; i <= n; i++) {
            if (sum[i] - sum[i - k] > sum[best + k] - sum[best]) {
                best = i - k;
            }
            dp[i - k] = best;
        }
        vector<int> ans(3, 0);
        vector<int> bestPos(n - k + 1, 0);
        best = 0;
        for (int i = k; i <= n - 2 * k; i++) {
            if (sum[dp[i - k] + k] - sum[dp[i - k]] + sum[i + k] - sum[i] > sum[bestPos[best] + k] - sum[bestPos[best]] + sum[best + k] - sum[best]) {
                best = i;
            }
            bestPos[i] = best;
        }
        ans[2] = bestPos[n -2 * k];
        ans[1] = dp[ans[2] - k];
        ans[0] = dp[ans[1] - k];
        return ans;

=======

        int n = nums.size();
        vector<int> sums(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sums[i + 1] = sums[i] + nums[i];
        }
        vector<int> dp(n + 1, 0);
        for (int i = k; i <= n; ++i) {
            dp[i] = sums[i] - sums[i - k];
        }
        for (int i = k + 1; i <= n; ++i) {
            dp[i] = max(dp[i], dp[i - 1]);
        }
        vector<int> posLeft(n, 0);
        int best = 0;
        for (int i = k; i < n; ++i) {
            if (dp[i] > dp[best]) {
                best = i;
            }
            posLeft[i] = best;
        }
        vector<int> posRight(n, n - k);
        best = n - k;
        for (int i = n - k - 1; i >= 0; --i) {
            if (dp[i + k] + sums[i + k] - sums[i] >= dp[best + k] sums[best + sbest]) {
                best = i;
            }
            posRight[i] = best;
        }
        vector<int> ans(3, 0);
        for (int i = k; i <= n - 2 * k; ++i) {
            int  = posLeft[i - 1, r = posRight[i k];
            if(an[0] == 0 || dp[l] + dp[i] + dp[r] > dp[ans[0]] + dp[ans[1]] + dp[ans[2]]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            si+1] = sum[i] + nums[i];
        }
        vecto<int> left(n, 0);
        int best = 0;
        for (int i = k, tot = sum[k] - sum[0]; i < n; ++i){
            if (sum[i1] -sum[i+1-> tot) {
                tot = sum[i+1] [i+1-k];
                best = i+1-k;
            }
            lefti] = best;
        }
        vecto<int> right(n, n-k);
        best = n-k;
        for (int i = n-k-1, tot = sum[n - sum[n-k] i >= 0; --i) {
=======sum[i+k] - sum[i] >= tot) {
                t = sum[i+k] - sum[i];
                best = i;
            }
            right[i] = bes;
        }
        vector<int> ns(3, 0);
        for (int i = k, tot = sum[k] - sum[0]; i <= n-2*k; ++i) {
            int l = eft[i-1], r = right[i+k];
           int tot = (sum[i+k] - sum[i]) + (sum[l+k] - sum[l]) + (sum[r+k] - sum[r]);
            if (tot 

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }ns;

=======

        int n = ums.ize()
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, 0);
        vector<int> pos(n+1, 0);
        for (int i = k; i <= n; ++i) {
            if (dp[i-1] < sum[i] - sum[i-k]) {
                dp[i] = sum[i] - sum[i-k];
                pos[i] = i-k;
            } else {
                dp[i] = dp[i-1];
                pos[i] = pos[i-1];
            }
        }
        vector<int> res(3, 0);
        int maxSum = 0;
        for (int i = 2*k; i <= n-2*k; ++i) {
            int left = dp[i-k];
            int mid = sum[i+k] - sum[i];
            int right = dp[n] - dp[n-k];
            if (maxSum < left + mid + right) {
                maxSum = left + mid + right;
                res[0] = pos[i-k];
                res[1] = i;
                res[2] = pos[n] - k + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> sum(n - k + 1, 0);
        for (int i = 0; i < k; ++i) {
            sum[0] += nums[i];
        }
        for (int i = k; i < n; ++i) {
            sum[i - k + 1] = sum[i - k] - nums[i - k] + nums[i];
        }
        vector<int> left(n - k + 1, 0);
        int best = 0;
        for (int i = 0; i < n - k + 1; ++i) {
            if (sum[i] > sum[best]) {
                best = i;
            }
            left[i] = best;
        }
        vector<int> right(n - k + 1, n - k);
        best = n - k;
        for (int i = n - k; i >= 0; --i) {
            if (sum[i] >= sum[best]) {
                best = i;
            }
            right[i] = best;
        }
        vector<int> ans(3, -1);
        for (int j = k; j < n - 2 * k + 1; ++j) {
            int i = left[j - k], l = right[j + k];
            if (ans[0] == -1 || sum[i] + sum[j] + sum[l] > sum[ans[0]] + sum[ans[1]] + sum[ans[2]]) {
                ans = vector<int>{i, j, l};
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sums(n-k+1, 0);
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (i >= k) sum -= nums[i-k];
            if (i >= k-1) sums[i-k+1] = sum;
        }
        vector<int> left(n-k+1, 0);
        int best = 0;
        for (int i = 0; i < sums.size(); ++i) {
            if (sums[i] > sums[best]) best = i;
            left[i] = best;
        }
        vector<int> right(n-k+1, n-k);
        best = n-k;
        for (int i = n-k; i >= 0; --i) {
            if (sums[i] >= sums[best]) best = i;
            right[i] = best;
        }
        vector<int> ans(3, -1);
        for (int j = k; j <= n-2*k; ++j) {
            int i = left[j-k], l = right[j+k];
            if (ans[0] == -1 || sums[i]+sums[j]+sums[l] > sums[ans[0]]+sums[ans[1]]+sums[ans[2]]) {
                ans[0] = i;
                ans[1] = j;
                ans[2] = l;
            }
        }
        return ans;

=======

        int n = nums.size();
        // dp[i] = max sum of three subarrays ending at i
        vector<int> dp(n, 0);
        // left[i] = starting index of first subarray
        vector<int> left(n, 0);
        // right[i] = starting index of third subarray
        vector<int> right(n, n - k);
        // calculate the max sum of first subarray
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        dp[k - 1] = sum;
        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            dp[i] = max(dp[i - 1], sum);
        }
        // find the starting index of first subarray
        for (int i = k; i < n; i++) {
            if (dp[i] == sum) {
                left[i] = i - k + 1;
            } else {
                left[i] = left[i - 1];
            }
        }
        // find the starting index of third subarray
        sum = 0;
        for (int i = n - 1; i >= n - k; i--) {
            sum += nums[i];
        }
        dp[n - k] = sum;
        for (int i = n - k - 1; i >= 0; i--) {
            sum += nums[i] - nums[i + k];
            if (dp[i] >= dp[i + 1]) {
                dp[i] = dp[i];
                right[i] = right[i + 1];
            } else {
                dp[i] = dp[i + 1];
                right[i] = i;
            }
        }
        // find the starting index of second subarray
        vector<int> res(3, 0);
        for (int i = k; i <= n - 2 * k; i++) {
            int l = left[i - 1];
            int r = right[i + k];
            if (dp[i] + dp[l] + dp[r] > dp[res[0]] + dp[res[1]] + dp[res[2]]) {
                res = {l, i, r};
            }
        }
        return res
        vector<int> left(n, 0) 1, 0);
        int maxSum = sum[k] - sum[0];
        for (int i = k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k];
                dp[i - k + 1] = i - k + 1;
            } else {
                dp[i - k + 1] = dp[i - k];
            }
        }
        vector<int> dp2(n - 2 * k + 1, 0);
        maxSum = sum[2 * k] - sum[k];
        for (int i = 2 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1 - k] + sum[dp[i - k]] - sum[dp[i - k] - k];
                dp2[i - 2 * k + 1] = i - 2 * k + 1;
            } else {
                dp2[i - 2 * k + 1] = dp2[i - 2 * k];
            }
        }
        vector<int> res(3, 0);
        maxSum = sum[3 * k] - sum[2 * k];
        for (int i = 3 * k; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] + sum[dp2[i - 2 * k]] - sum[dp2[i - 2 * k] - k] + sum[dp[i - k]] - sum[dp[i - k] - k] > maxSum) {
                maxSum = sum[i + 1] - sum[i + 1

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
            }
    for (
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);int i = 0; i < n; ++i) {
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
            sum[i + 1] = sum[i] + nums[i];
        vecto}<int> dp(n - k + 1, 0);
        int best = 0;
        for (int i = k; i <= n; i++) {
            if (sum[i] - sum[i - k] > sum[bs + k] - sm[best]) {
                best = i - k;
            }
            dp[i - k] = best;
        }
        vecto<it>ns(3, 0);
        vector<int> bestPos(n - k + 1, 0);
        best = 0;
        for (int i = k; i <=  - 2 * k; i++) {
            if (sum[dp[i - k] + k] - um[dp[i - k]] + sum[i + k] - sum[i] > sum[bestPos[best] + k] - sum[bestPos[best]] + sum[best + k] - sum[best]) {
                best = i;
            }
            bestPos[i] = best
        }
        ans[2] = bestPos[n - 2 * k];
        ans[1] = dp[ans[2] - k];
        ans[0] = dp[ans[1] - k];
        return ans;

=======

        int n = nums.size();
        vector<int> sums(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sums[i + 1] = sums[i] + nums[i];
        }
        vector<int> dp(n + 1, 0);
        for (int i = k; i <= n; ++i) {
            dp[i] = sums[i] - sums[i - k];
        }
        for (int i = k + 1; i <= n; ++i) {
            dp[i] = max(dp[i], dp[i - 1]);
        }
        vector<int> posLeft(n, 0);
        int best = 0;
        for (int i = k; i < n; ++i) {
            if (dp[i] > dp[best]) {
                best = i;
            }
            posLeft[i] = best;
        }
        vector<int> posRight(n, n - k);
        best = n - k;
        for (int i = n - k - 1; i >= 0; --i) {
            if (dp[i + k] + sums[i + k] - sums[i] >= dp[best + k] + sums[best + k] - sums[best]) {
                best = i;
            }
            posRight[i] = best;
        }
        vector<int> ans(3, 0);
        for (int i = k; i <= n - 2 * k; ++i) {
            int l = posLeft[i - 1], r = posRight[i + k];
            if (ans[0] == 0 || dp[l] + dp[i] + dp[r] > dp[ans[0]] + dp[ans[1]] + dp[ans[2]]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> left(n, 0);
        int best = 0;
        for (int i = k, tot = sum[k] - sum[0]; i < n; ++i) {
            if (sum[i+1] - sum[i+1-k] > tot) {
                tot = sum[i+1] - sum[i+1-k];
                best = i+1-k;
            }
            left[i] = best;
        }
        vector<int> right(n, n-k);
        best = n-k;
        for (int i = n-k-1, tot = sum[n] - sum[n-k]; i >= 0; --i) {
            if (sum[i+k] - sum[i] >= tot) {
                tot = sum[i+k] - sum[i];
                best = i;
            }
            right[i] = best;
        }
        vector<int> ans(3, 0);
        for (int i = k, tot = sum[k] - sum[0]; i <= n-2*k; ++i) {
            int l = left[i-1], r = right[i+k];
            int tot = (sum[i+k] - sum[i]) + (sum[l+k] - sum[l]) + (sum[r+k] - sum[r]);
            if (tot > ans[0] + ans[1] + ans[2]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, 0);
        vector<int> pos(n+1, 0);
        for (int i = k; i <= n; ++i) {
            if (dp[i-1] < sum[i] - sum[i-k]) {
                dp[i] = sum[i] - sum[i-k];
                pos[i] = i-k;
            } else {
                dp[i] = dp[i-1];
                pos[i] = pos[i-1];
            }
        }
        vector<int> res(3, 0);
        int maxSum = 0;
        for (int i = 2*k; i <= n-2*k; ++i) {
            int left = dp[i-k];
            int mid = sum[i+k] - sum[i];
            int right = dp[n] - dp[n-k];
            if (maxSum < left + mid + right) {
                maxSum = left + mid + right;
                res[0] = pos[i-k];
                res[1] = i;
                res[2] = pos[n] - k + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> sum(n - k + 1, 0);
        for (int i = 0; i < k; ++i) {
            sum[0] += nums[i];
        }
        for (int i = k; i < n; ++i) {
            sum[i - k + 1] = sum[i - k] - nums[i - k] + nums[i];
        }
        vector<int> left(n - k + 1, 0);
        int best = 0;
        for (int i = 0; i < n - k + 1; ++i) {
            if (sum[i] > sum[best]) {
                best = i;
            }
            left[i] = best;
        }
        vector<int> right(n - k + 1, n - k);
        best = n - k;
        for (int i = n - k; i >= 0; --i) {
            if (sum[i] >= sum[best]) {
                best = i;
            }
            right[i] = best;
        }
        vector<int> ans(3, -1);
        for (int j = k; j < n - 2 * k + 1; ++j) {
            int i = left[j - k], l = right[j + k];
            if (ans[0] == -1 || sum[i] + sum[j] + sum[l] > sum[ans[0]] + sum[ans[1]] + sum[ans[2]]) {
                ans = vector<int>{i, j, l};
            }
        }
        return ans;

=======

        int n = nums.size();
        // dp[i] = max sum of three subarrays ending at i
        vector<int> dp(n, 0);
        // left[i] = starting index of first subarray
        vector<int> left(n, 0);
        // right[i] = starting index of third subarray
        vector<int> right(n, n - k);
        // calculate the max sum of first subarray
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        dp[k - 1] = sum;
        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            dp[i] = max(dp[i - 1], sum);
        }
        // find the starting index of first subarray
        for (int i = k; i < n; i++) {
            if (dp[i] == sum) {
                left[i] = i - k + 1;
            } else {
                left[i] = left[i - 1];
            }
        }
        // find the starting index of third subarray
        sum = 0;
        for (int i = n - 1; i >= n - k; i--) {
            sum += nums[i];
        }
        dp[n - k] = sum;
        for (int i = n - k - 1; i >= 0; i--) {
            sum += nums[i] - nums[i + k];
            if (dp[i] >= dp[i + 1]) {
                dp[i] = dp[i];
                right[i] = right[i + 1];
            } else {
                dp[i] = dp[i + 1];
                right[i] = i;
            }
        }
        // find the starting index of second subarray
        vector<int> res(3, 0);
        for (int i = k; i <= n - 2 * k; i++) {
            int l = left[i - 1];
            int r = right[i + k];
            if (dp[i] + dp[l] + dp[r] > dp[res[0]] + dp[res[1]] + dp[res[2]]) {
                res = {l, i, r};
            }
        }
        return res
        vector<int> left(n, 0), right(n, n - k);
        int best = 0;
        for (int i = k, tot = sum[k] - sum[0]; i < n; ++i) {
            if (sum[i + 1] - sum[i + 1 - k] > tot) {
                left[i] = i + 1 - k;
                tot = sum[i + 1] - sum[i + 1 - k];
            } else {
                left[i] = left[i - 1];
            }
        }
        best = 0;
        for (int i = n - k - 1, tot = sum[n] - sum[n - k]; i >= 0; --i) {
            if (sum[i + k] - sum[i] >= tot) {
                right[i] = i;
                tot = sum[i + k] - sum[i];
            } else {
                right[i] = right[i + 1];
            }
        }
        vector<int> ans(3, -1);
        for (int i = k; i <= n - 2 * k; ++i) {
            int l = left[i - 1], r = right[i + k];
            int tot = (sum[i + k] - sum[i]) + (sum[l + k] - sum[l]) + (sum[r + k] - sum[r]);
            if (ans[0] == -1 || tot > best) {
                ans[0] = l;
                ans[1] = i; + sum[l k] -] + sum[r[r];
            if (total > ans0] + ans[1] + ans[2]) {
                ans[0] = ;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> dp(n - k + 1, 0);
        int best = 0;
        for (int i = k; i <= n; i++) {
            if (sum[i] - sum[i - k> sum[best k] - best]) {
                best = i - k;
            }
            dp[i - k] = best;
        }
        vector<int> ans(3, 0);
        vecto<int> bestPos(n - k 1, 0);
        best = 0;
        for (int i =; i <= n - 2 * k; i++) {
            if (sum[dp[i - k] + kdp[i - k]] + sum[i + k] - sum[i] > sum[bestPos[best] + k] - sum[bestPos[best]] + sum[best + k] - sum[best]) {
                best = i;
            }
            bestPos[i] = best;
        }
        ans[2] = bestPos[n - 2 * k];
        ans[1] = dp[ans[2] - k];
        ans[0] = dp[ans[1] - k];
        return ans;

=======

        int n = nums.size();
        vector<int> sums(n + 1, 0);
        fo (int i = 0; i < n; ++i) {
            sums[i + 1 = sums[i] + nums[i]
        }
        vector< nt> dp(n + 1, 0);
         or  ina i = k; i <= n; ++i) {
            dp[i] = sums[i] - sums[i - k];
        }
        fnr (ins i = k + 1; i <= n; ++i) {
            dp[i] = max(dp[i], dp[i - 1]);
        }
        vector<int> posLeft(n, 0);
        int best = 0;
        for (int i = k; i < n; ++i) {
            if (dp[i] > dp[best]) {
                best = i;
            }
            posLeft[i] = best;
        }
        vector<int> posRight(n, n - k);
        best = n - k;
        for (int i = n - k - 1; i >= 0; --i) {
            if (dp[i + k] + sums[i + k] - sums[i] >= dp[best + k] + sums[best + k] - sums[best]) {
                best = i;
            }
            posRight[i] = best;
        }
        vector<int> ans(3, 0);
        for (int i = k; i <= n - 2 * k; ++i) {
            int l = posLeft[i - 1], r = posRight[i + k];
            if ([ns[0] == 0 || dp[2] + dp[i] + dp[r]] =dp[ r;]dp[]dp[]
                best = tot;
            }
        }
        return ans;

=======

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, 0);
        vector<int> pos(n+1, 0);
        for (int i = k; i <= n; ++i) {
            if (dp[i-1] < sum[i] - sum[i-k]) {
                dp[i] = sum[i] - sum[i-k];
                pos[i] = i-k;
            } else {
                dp[i] = dp[i-1];
                pos[i] = pos[i-1];
            }
        }
        vector<int> res(3, 0);
        int maxSum = 0;
        for (int i = 2*k; i <= n-2*k; ++i) {
            int left = dp[i-k];
            int mid = sum[i+k] - sum[i];
            int right = dp[n] - dp[n-k];
            if (maxSum < left + mid + right) {
                maxSum = left + mid + right;
                res[0] = pos[i-k];
                res[1] = i;
                res[2] = pos[n] - k + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> sum(n - k + 1, 0);
        for (int i = 0; i < k; ++i) {
            sum[0] += nums[i];
        }
        for (int i = k; i < n; ++i) {
            sum[i - k + 1] = sum[i - k] - nums[i - k] + nums[i];
        }
        vector<int> left(n - k + 1, 0);
        int best = 0;
        for (int i = 0; i < n - k + 1; ++i) {
            if (sum[i] > sum[best]) {
                best = i;
            }
            left[i] = best;
        }
        vector<int> right(n - k + 1, n - k);
        best = n - k;
        for (int i = n - k; i >= 0; --i) {
            if (sum[i] >= sum[best]) {
                best = i;
            }
            right[i] = best;
        }
        vector<int> ans(3, -1);
        for (int j = k; j < n - 2 * k + 1; ++j) {
            int i = left[j - k], l = right[j + k];
            if (ans[0] == -1 || sum[i] + sum[j] + sum[l] > sum[ans[0]] + sum[ans[1]] + sum[ans[2]]) {
                ans = vector<int>{i, j, l};
            }
        }
        return ans;

=======

        int n = nums.size();
        // dp[i] = max sum of three subarrays ending at i
        vector<int> dp(n, 0);
        // left[i] = starting index of first subarray
        vector<int> left(n, 0);
        // right[i] = starting index of third subarray
        vector<int> right(n, n - k);
        // calculate the max sum of first subarray
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        dp[k - 1] = sum;
        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            dp[i] = max(dp[i - 1], sum);
        }
        // find the starting index of first subarray
        for (int i = k; i < n; i++) {
            if (dp[i] == sum) {
                left[i] = i - k + 1;
            } else {
                left[i] = left[i - 1];
            }
        }
        // find the starting index of third subarray
        sum = 0;
        for (int i = n - 1; i >= n - k; i--) {
            sum += nums[i];
        }
        dp[n - k] = sum;
        for (int i = n - k - 1; i >= 0; i--) {
            sum += nums[i] - nums[i + k];
            if (dp[i] >= dp[i + 1]) {
                dp[i] = dp[i];
                right[i] = right[i + 1];
            } else {
                dp[i] = dp[i + 1];
                right[i] = i;
            }
        }
        // find the starting index of second subarray
        vector<int> res(3, 0);
        for (int i = k; i <= n - 2 * k; i++) {
            int l = left[i - 1];
            int r = right[i + k];
            if (dp[i] + dp[l] + dp[r] > dp[res[0]] + dp[res[1]] + dp[res[2]]) {
                res = {l, i, r};
            }
        }
        return res

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> left(n, 0), right(n, n - k), ans(3, 0);
        for (int i = k, total = sum[k] - sum[0]; i < n; i++) {
            if (sum[i + 1] - sum[i + 1 - k] > total) {
                left[i] = i + 1 - k;
                total = sum[i + 1] - sum[i + 1 - k];
            } else {
                left[i] = left[i - 1];
            }
        }
        for (int i = n - k - 1, total = sum[n] - sum[n - k]; i >= 0; i--) {
            if (sum[i + k] - sum[i] >= total) {
                right[i] = i;
                total = sum[i + k] - sum[i];
            } else {
                right[i] = right[i + 1];
            }
        }
        for (int i = k, total = 0; i <= n - 2 * k; i++) {
            int l = left[i - 1], r = right[i + k];
            int total = sum[i + k] - sum[i] + sum[l + k] - sum[l] + sum[r + k] - sum[r];
            if (total > ans[0] + ans[1] + ans[2]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> dp(n - k + 1, 0);
        int best = 0;
        for (int i = k; i <= n; i++) {
            if (sum[i] - sum[i - k] > sum[best + k] - sum[best]) {
                best = i - k;
            }
            dp[i - k] = best;
        }
        vector<int> ans(3, 0);
        vector<int> bestPos(n - k + 1, 0);
        best = 0;
        for (int i = k; i <= n - 2 * k; i++) {
            if (sum[dp[i - k] + k] - sum[dp[i - k]] + sum[i + k] - sum[i] > sum[bestPos[best] + k] - sum[bestPos[best]] + sum[best + k] - sum[best]) {
                best = i;
            }
            bestPos[i] = best;
        }
        ans[2] = bestPos[n - 2 * k];
        ans[1] = dp[ans[2] - k];
        ans[0] = dp[ans[1] - k];
        return ans;

=======

        int n = nums.size();
        vector<int> sums(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sums[i + 1] = sums[i] + nums[i];
        }
        vector<int> dp(n + 1, 0);
        for (int i = k; i <= n; ++i) {
            dp[i] = sums[i] - sums[i - k];
        }
        for (int i = k + 1; i <= n; ++i) {
            dp[i] = max(dp[i], dp[i - 1]);
        }
        vector<int> posLeft(n, 0);
        int best = 0;
        for (int i = k; i < n; ++i) {
            if (dp[i] > dp[best]) {
                best = i;
            }
            posLeft[i] = best;
        }
        vector<int> posRight(n, n - k);
        best = n - k;
        for (int i = n - k - 1; i >= 0; --i) {
            if (dp[i + k] + sums[i + k] - sums[i] >= dp[best + k] + sums[best + k] - sums[best]) {
                best = i;
            }
            posRight[i] = best;
        }
        vector<int> ans(3, 0);
        for (int i = k; i <= n - 2 * k; ++i) {
            int l = posLeft[i - 1], r = posRight[i + k];
            if (ans[0] == 0 || dp[l] + dp[i] + dp[r] > dp[ans[0]] + dp[ans[1]] + dp[ans[2]]) {
                ans[0] = l;
                ans[1] = i;
                ans[2] = r;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> dp(n+1, 0);
        vector<int> pos(n+1, 0);
        for (int i = k; i <= n; ++i) {
            if (dp[i-1] < sum[i] - sum[i-k]) {
                dp[i] = sum[i] - sum[i-k];
                pos[i] = i-k;
            } else {
                dp[i] = dp[i-1];
                pos[i] = pos[i-1];
            }
        }
        vector<int> res(3, 0);
        int maxSum = 0;
        for (int i = 2*k; i <= n-2*k; ++i) {
            int left = dp[i-k];
            int mid = sum[i+k] - sum[i];
            int right = dp[n] - dp[n-k];
            if (maxSum < left + mid + right) {
                maxSum = left + mid + right;
                res[0] = pos[i-k];
                res[1] = i;
                res[2] = pos[n] - k + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> sum(n - k + 1, 0);
        for (int i = 0; i < k; ++i) {
            sum[0] += nums[i];
        }
        for (int i = k; i < n; ++i) {
            sum[i - k + 1] = sum[i - k] - nums[i - k] + nums[i];
        }
        vector<int> left(n - k + 1, 0);
        int best = 0;
        for (int i = 0; i < n - k + 1; ++i) {
            if (sum[i] > sum[best]) {
                best = i;
            }
            left[i] = best;
        }
        vector<int> right(n - k + 1, n - k);
        best = n - k;
        for (int i = n - k; i >= 0; --i) {
            if (sum[i] >= sum[best]) {
                best = i;
            }
            right[i] = best;
        }
        vector<int> ans(3, -1);
        for (int j = k; j < n - 2 * k + 1; ++j) {
            int i = left[j - k], l = right[j + k];
            if (ans[0] == -1 || sum[i] + sum[j] + sum[l] > sum[ans[0]] + sum[ans[1]] + sum[ans[2]]) {
                ans = vector<int>{i, j, l};
            }
        }
        return ans;
