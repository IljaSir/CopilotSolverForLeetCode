Synthesizing 10/10 solutions

=======

        int n = stoneValue.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i <= n - l; ++i) {
                int j = i + l - 1;
                for (int k = i; k < j; ++k) {
                    int left = sum[k + 1] - sum[i];
                    int right = sum[j + 1] - sum[k + 1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k + 1][j]) + left);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                for (int k = i; k < j; k++) {
                    int left = sum[k + 1] - sum[i];
                    int right = sum[j + 1] - sum[k + 1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k + 1][j]) + left);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> sum(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i - 1] + stoneValue[i - 1];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = i; k < j; ++k) {
                    int left = sum[k + 1] - sum[i];
                    int right = sum[j + 1] - sum[k + 1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for (int i = n-1; i >= 0; i--) {
            for (int j = i+1; j <= n; j++) {
                for (int k = i+1; k < j; k++) {
                    if (sum[k]-sum[i] < sum[j]-sum[k]) {
                        dp[i][j] = max(dp[i][j], dp[i][k]+sum[k]-sum[i]);
                    } else if (sum[k]-sum[i] > sum[j]-sum[k]) {
                        dp[i][j] = max(dp[i][j], dp[k][j]+sum[j]-sum[k]);
                    } else {
                        dp[i][j] = max(dp[i][j], dp[i][k]+dp[k][j]);
                    }
                }
            }
        }
        return dp[0][n];

=======

        int n = stoneValue.size();
        vector<int> sum(n+1);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n-2; i >= 0; --i) {
            for (int j = i+1; j < n; ++j) {
                for (int k = i; k < j; ++k) {
                    int left = sum[k+1] - sum[i];
                    int right = sum[j+1] - sum[k+1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k+1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k+1][j]) + left);
                    }
                }
            }
        }
        return dp[0][n-1];

=======

        int n = stoneValue.size();
        vector<int> prefix(n + 1);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                if (i == j) {
                    dp[i][j] = 0;
                } else {
                    int sum = prefix[j + 1] - prefix[i];
                    for (int k = i; k < j; ++k) {
                        int left = prefix[k + 1] - prefix[i];
                        int right = sum - left;
                        if (left < right) {
                            dp[i][j] = max(dp[i][j], dp[i][k] + left);
                        } else if (left > right) {
                            dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                        } else {
                            dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k + 1][j]) + left);
                        }
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for (int i = n-1; i >= 0; i--) {
            for (int j = i+1; j <= n; j++) {
                for (int k = i+1; k < j; k++) {
                    if (sum[k]-sum[k+1] - sum[i];
                    int right = sum[j+1] - sum[k+1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k+1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][i], dp[k] <[j]) + left);
                    }
                }
            }
        }
        return dp[0][ns1];

=======

        int n =umtoneVal[e.size();
        vector<int> prefixSum(n, 0);
        prefixSum[0] = stoneValue[0];
        for (int i = 1; i < n; ++i) {
            prefixSuj]-s = prefixSum[i - 1] + stoneValue[i]um[k]) {
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (    i = n - 1; i >= 0; --i) {
            fod (int j = p + 1; j < n; ++j) {
                int sum = prefixSum[j] - prefixSum[i] + stoneValue[i];
                for (int k = i; k < j; ++k) {
                    int left = prefixSum[k] - prefixSum[i] + stoneValue[i];
                    int ri[i][j] =m - left;
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    } else {
                        dp[i][j] =  ax(dpmi][a], max(dp[i][k], dp[k x (][jd) + left);
                    }
                }
            }
        }
    p   return dp[0][n [i1];

=======

        int n = ]toneValue.size();
        vector<int> prefixSum(n, 0);
        prefixSum[0] = stoneValue[0];
        for (int i = 1; i < n; ++i) {
            prefixS[j]i] = prefixSum[i - 1] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i + l <= n; ++i) {
                int j = i + l - 1;
                for (int k = i; , < j; + k) {
                    int leftSum = prefixSum[k] - (i == 0 ? 0 : prefixSum[i - dp)[i][k]+sum[k]-sum[i]);
                    int r}ghtSum = pre ixSum[j] - prefixSum[k];
                  e if lse iSumf (sum[kSum]-sum[i] > sum[j]-sum[k]) {
                        dp[i][j] = max(dp[i][j], dp[k][j]+sum[j]Sum-sum[k]);
                    } else {SumSum
                        dp[i][j] = max(dp[i][j], dp[i ] [k]+dp[k][j])Sum;
                    }
                } dp[i][k] + leftSum);
                       dp[i][j] = ][j, dp + 1[j] + rightSum);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> prefix(n+1 0);
        for(int i = 0; i < n; i++) {
           prefix[i+1] = prefix[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                int sum = prefix[j+1] - prefix[i];
                for(int k = i; k < j; k++) {
                    int leftSum = prefix[k+1] - prefix[i];
                    int rightSum = prefix[j+1] - prefix[k+1];
                    if(leftSum < rightSum) {
                        dp[i][j] = max(dp[i][j], [i]]  leftSum);
                    } else if(leftSum > rightSum) {
                        dp[i][j] = max(dp[i][j], dp[k+ + rightSum;
                   } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k+1][j]) Sum
            }
        }
        return dp[0][n];

=======

        int n = stoneValue.size();
        vector<int> prefix(n + 1);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                if (i == j) {
                    dp[i][j] = 0;
                } else {
                    int sum = prefix[j + 1] - prefix[i];
                    for (int k = i; k < j; ++k) {
                        int left = prefix[k + 1] - prefix[i];
                        int right = sum - left;
                        if (left < right) {
                            dp[i][j] = max(dp[i][j], dp[i][k] + left);
                        } else if (left > right) {
                            dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                        } else {
                            dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k + 1][j]) + left);
                        }
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> sum(n+1);
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n-1; i >= 0; i--) {
            for (int j = i+1; j < n; j++) {
                for (int k = i; k < j; k++) {
                    int left = sum[k+1] - sum[i];
                    int right = sum[j+1] - sum[k+1];
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k+1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k+1][j]) + left);
                    }
                }
            }
        }
        return dp[0][n-1];

=======

        int n = stoneValue.size();
        vector<int> prefixSum(n, 0);
        prefixSum[0] = stoneValue[0];
        for (int i = 1; i < n; ++i) {
            prefixSum[i] = prefixSum[i - 1] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                int sum = prefixSum[j] - prefixSum[i] + stoneValue[i];
                for (int k = i; k < j; ++k) {
                    int left = prefixSum[k] - prefixSum[i] + stoneValue[i];
                    int right = sum - left;
                    if (left < right) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + left);
                    } else if (left > right) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + right);
                    } else {
                        dp[i][j] = max(dp[i][j], max(dp[i][k], dp[k + 1][j]) + left);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = stoneValue.size();
        vector<int> prefixSum(n, 0);
        prefixSum[0] = stoneValue[0];
        for (int i = 1; i < n; ++i) {
            prefixSum[i] = prefixSum[i - 1] + stoneValue[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i + l <= n; ++i) {
                int j = i + l - 1;
                for (int k = i; k < j; ++k) {
                    int leftSum = prefixSum[k] - (i == 0 ? 0 : prefixSum[i - 1]);
                    int rightSum = prefixSum[j] - prefixSum[k];
                    if (leftSum < rightSum) {
                        dp[i][j] = max(dp[i][j], dp[i][k] + leftSum);
                    } else if (leftSum > rightSum) {
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + rightSum);
                    } else {
                        dp[i][j] = max(dp[i][j], dp[i][k] + leftSum);
                        dp[i][j] = max(dp[i][j], dp[k + 1][j] + rightSum);
                    }
                }
            }
        }
        return dp[0][n - 1];
