Synthesizing 10/10 solutions

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = INT_MAX;
                for (int k = 0; k < n; k++) {
                    if (j == k) {
                        continue;
                    }
                    dp[i][j] = min(dp[i][j], dp[i-1][k] + grid[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[n-1][i]);
        }
        return ans;

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = INT_MAX;
                for (int k = 0; k < n; k++) {
                    if (j == k) continue;
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j]);
                }
            }
        }
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            res = min(res, dp[n - 1][i]);
        }
        return res;

=======

        int n = grid.size();
        vector<vector<int>> dp = grid;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = INT_MAX;
                for (int k = 0; k < n; k++) {
                    if (k == j) continue;
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = grid.size();
        int ans = INT_MAX;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int minPath = INT_MAX;
                for (int k = 0; k < n; ++k) {
                    if (k == j) continue;
                    minPath = min(minPath, grid[i - 1][k]);
                }
                grid[i][j] += minPath;
            }
        }
        for (int i = 0; i < n; ++i) {
            ans = min(ans, grid[n - 1][i]);
        }
        return ans;

=======

        int n = grid.size();
        int ans = INT_MAX;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int minval = INT_MAX;
                for (int k = 0; k < n; ++k) {
                    if (k == j) continue;
                    minval = min(minval, grid[i - 1][k]);
                }
                grid[i][j] += minval;
            }
        }
        for (int j = 0; j < n; ++j) {
            ans = min(ans, grid[n - 1][j]);
        }
        return ans;

=======

        int n = grid.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = grid[i][j];
                if (i > 0) {
                    dp[i][j] += dp[i - 1][j];
                    if (j > 0) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + grid[i][j]);
                    }
                    if (j < n - 1) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][j + 1] + grid[i][j]);
                    }
                    if (i == n - 1) {
                        if (j == 0) {
                            dp[i][j] = min(dp[i][j], dp[i][j + 1]);
                        } else if (j == n - 1) {
                            dp[i][j] = min(dp[i][j], dp[i][j - 1]);
                        } else {
                            dp[i][j] = min(dp[i][j], min(dp[i][j - 1], dp[i][j + 1]));
                        }
                    }
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = grid.size();
        vector<int> dp = grid[0];
        for (int i = 1; i < n; ++i) {
            vector<int> ndp(n, INT_MAX);
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k)
                    if (j != k) ndp[j] = min(ndp[j], dp[k]);
                ndp[j] += grid[i][j];
            }
            dp = ndp;
        }
        return *min_element(dp.begin(), dp.end());

=======

        int n = grid.size();
        if (n == 1)
            return grid[0][0];
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++)
            dp[0][i] = grid[0][i];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int minSum = INT_MAX;
                for (int k = 0; k < n; k++) {
                    if (k == j)
                        continue;
                    minSum = min(minSum, dp[i-1][k]);
                }
                dp[i][j] = minSum + grid[i][j];
            }
        }
        int minSum = INT_MAX;
        for (int i = 0; i < n; i++)
            minSum = min(minSum, dp[n-1][i]);
        return minSum;

=======

        int n = grid.size();
        int res = INT_MAX;
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (k == j) continue;
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j]);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            res = min(res, dp[n - 1][i]);
        }
        return res;

=======

        int n = grid.size();
        if (n == 1) return grid[0][0];

        int min1, min2;
        for (int i = 1; i < n; i++) {
            min1 = min2 = INT_MAX;
            for (int j = 0; j < n; j++) {
                if (grid[i - 1][j] < min1) {
                    min2 = min1;
                    min1 = grid[i - 1][j];
                } else if (grid[i - 1][j] < min2) {
                    min2 = grid[i - 1][j];
                }
            }
            for (int j = 0; j < n; j++) {
                if (grid[i - 1][j] == min1) {
                    grid[i][j] += min2;
                } else {
                    grid[i][j] += min1;
                }
            }
        }

        int ans = INT_MAX;
        for (int j = 0; j < n; j++) {
            ans = min(ans, grid[n - 1][j]);
        }
        return ans;
