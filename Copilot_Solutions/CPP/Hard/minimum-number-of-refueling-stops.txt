Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = stations.size();
        vector<long long> dp(n + 1);
        dp[0] = startFuel;
        for (int i = 0; i < n; ++i) {
            for (int t = i; t >= 0 && dp[t] >= stations[i][0]; --t) {
                dp[t + 1] = max(dp[t + 1], dp[t] + stations[i][1]);
            }
        }
        for (int i = 0; i <= n; ++i) {
            if (dp[i] >= target) {
                return i;
            }
        }
        return -1;

=======

        int n = stations.size();
        vector<long> dp(n + 1);
        dp[0] = startFuel;
        for (int i = 0; i < n; ++i) {
            for (int t = i; t >= 0 && dp[t] >= stations[i][0]; --t) {
                dp[t + 1] = max(dp[t + 1], dp[t] + stations[i][1]);
            }
        }
        for (int i = 0; i <= n; ++i) {
            if (dp[i] >= target) {
                return i;
            }
        }
        return -1;

=======

        int n = stations.size();
        vector<long long> dp(n + 1, 0);
        dp[0] = startFuel;
        for (int i = 0; i < n; ++i) {
            for (int t = i; t >= 0 && dp[t] >= stations[i][0]; --t) {
                dp[t + 1] = max(dp[t + 1], dp[t] + stations[i][1]);
            }
        }
        for (int i = 0; i <= n; ++i) {
            if (dp[i] >= target) {
                return i;
            }
        }
        return -1;

=======

        int n = stations.size();
        vector<int> dp(n+1, 0);
        dp[0] = startFuel;
        for (int i = 0; i < n; i++) {
            for (int t = i; t >= 0; t--) {
                if (dp[t] >= stations[i][0]) {
                    dp[t+1] = max(dp[t+1], dp[t] + stations[i][1]);
                }
            }
        }
        for (int i = 0; i <= n; i++) {
            if (dp[i] >= target) return i;
        }
        return -1;

=======

        priority_queue<int> pq;
        int N = stations.size();
        int i = 0;
        int res = 0;
        int cur = startFuel;
        while (cur < target) {
            while (i < N && stations[i][0] <= cur) {
                pq.push(stations[i][1]);
                i++;
            }
            if (pq.empty()) {
                return -1;
            }
            cur += pq.top();
            pq.pop();
            res++;
        }
        return res;

=======

        int cur = startFuel;
        int index = 0;
        int count = 0;
        while (cur < target) {
            int max = 0;
            int maxIndex = -1;
            for (int i = index; i < stations.size(); i++) {
                if (stations[i][0] > cur) break;
                if (stations[i][1] > max) {
                    max = stations[i][1];
                    maxIndex = i;
                }
            }
            if (max == 0) return -1;
            count++;
            cur += max;
            index = maxIndex + 1;
        }
        return count;
