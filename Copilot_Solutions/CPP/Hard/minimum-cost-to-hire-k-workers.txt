Synthesizing 10/10 solutions

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; ++i) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        priority_queue<int> pq;
        int qsum = 0;
        double ans = DBL_MAX;
        for (auto worker: workers) {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, worker.first * qsum);
            }
        }
        return ans;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; ++i) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        double ans = DBL_MAX, qsum = 0;
        priority_queue<int> q;
        for (auto worker: workers) {
            q.push(worker.second);
            qsum += worker.second;
            if (q.size() > k) {
                qsum -= q.top();
                q.pop();
            }
            if (q.size() == k) ans = min(ans, qsum * worker.first);
        }
        return ans;

=======

        vector<pair<double, int>> workers;
        for (int i = 0; i < quality.size(); ++i) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        priority_queue<int> pq;
        int qsum = 0;
        double ans = DBL_MAX;
        for (auto worker: workers) {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, qsum * worker.first);
            }
        }
        return ans;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; ++i) {
            workers.emplace_back((double) wage[i] / quality[i], quality[i]);
        }
        sort(workers.begin(), workers.end());
        double ans = DBL_MAX, qsum = 0;
        priority_queue<int> pq;
        for (auto worker: workers) {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, qsum * worker.first);
            }
        }
        return ans;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; i++) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        double ans = DBL_MAX, qsum = 0;
        priority_queue<int> pq;
        for (auto worker: workers) {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, qsum * worker.first);
            }
        }
        return ans;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; i++) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        priority_queue<int> pq;
        int sum = 0;
        double res = 1e9;
        for (auto& worker : workers) {
            pq.push(worker.second);
            sum += worker.second;
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                res = min(res, sum * worker.first);
            }
        }
        return res;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; i++) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        double ans = 1e9;
        int sumq = 0;
        priority_queue<int> pq;
        for (auto worker : workers) {
            pq.push(worker.second);
            sumq += worker.second;
            if (pq.size() > k) {
                sumq -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, sumq * worker.first);
            }
        }
        return ans;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; i++) {
            workers.emplace_back((double)wage[i] / quality[i], quality[i]);
        }
        sort(workers.begin(), workers.end());
        double ans = DBL_MAX, qsum = 0;
        priority_queue<int> pq;
        for (auto& worker: workers) {
            qsum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                qsum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                ans = min(ans, qsum * worker.first);
            }
        }
        return ans;

=======

        vector<pair<double, int>> workers;
        for (int i = 0; i < quality.size(); i++) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }
        sort(workers.begin(), workers.end());
        int sumq = 0;
        double res = DBL_MAX;
        priority_queue<int> pq;
        for (auto worker : workers) {
            sumq += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                sumq -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                res = min(res, sumq * worker.first);
            }
        }
        return res;

=======

        int n = quality.size();
        vector<pair<double, int>> workers;
        for (int i = 0; i < n; i++) {
            workers.emplace_back(wage[i] * 1.0 / quality[i], quality[i]);
        }
        sort(workers.begin(), workers.end());
        double res = 1e9;
        int sum = 0;
        priority_queue<int> pq;
        for (auto& worker : workers) {
            sum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
                res = min(res, sum * worker.first);
            }
        }
        return res;
