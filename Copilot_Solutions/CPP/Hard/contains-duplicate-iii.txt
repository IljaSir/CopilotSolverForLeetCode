Synthesizing 9/10 solutions

=======

        set<int> window;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) window.erase(nums[i - indexDiff - 1]);
            auto pos = window.lower_bound(nums[i] - valueDiff);
            if (pos != window.end() && *pos - nums[i] <= valueDiff) return true;
            window.insert(nums[i]);
        }
        return false;

=======

        set<long long> st;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) st.erase(nums[i - indexDiff - 1]);
            auto it = st.lower_bound((long long)nums[i] - valueDiff);
            if (it != st.end() && *it - nums[i] <= valueDiff) return true;
            st.insert(nums[i]);
        }
        return false;

=======

        set<int> s;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) s.erase(nums[i - indexDiff - 1]);
            auto pos = s.lower_bound(nums[i] - valueDiff);
            if (pos != s.end() && *pos - nums[i] <= valueDiff) return true;
            s.insert(nums[i]);
        }
        return false;

=======

        set<long> st;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) st.erase(nums[i - indexDiff - 1]);
            auto it = st.lower_bound((long)nums[i] - valueDiff);
            if (it != st.end() && *it - nums[i] <= valueDiff) return true;
            st.insert(nums[i]);
        }
        return false;

=======

        set<long long> st;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) st.erase(nums[i - indexDiff - 1]);
            auto pos = st.lower_bound((long long)nums[i] - valueDiff);
            if (pos != st.end() && *pos - nums[i] <= valueDiff) return true;
            st.insert(nums[i]);
        }
        return false;

=======

        multiset<long> s;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (i > indexDiff) {
                s.erase(s.find(nums[i - indexDiff - 1]));
            }
            auto it = s.lower_bound((long)nums[i] - valueDiff);
            if (it != s.end() && *it <= (long)nums[i] + valueDiff) {
                return true;
            }
            s.insert(nums[i]);
        }
        return false;

=======

        multiset<long> st;
        for (int i = 0; i < nums.size(); i++) {
            if (i > indexDiff) st.erase(st.find(nums[i - indexDiff - 1]));
            auto it = st.lower_bound((long)nums[i] - valueDiff);
            if (it != st.end() && *it <= (long)nums[i] + valueDiff) return true;
            st.insert(nums[i]);
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        multiset<long long> s;
        for (int i = 0; i < n; i++) {
            if (i > indexDiff) s.erase(s.find(nums[i - indexDiff - 1]));
            auto it = s.lower_bound((long long)nums[i] - valueDiff);
            if (it != s.end() && *it - nums[i] <= valueDiff) return true;
            s.insert(nums[i]);
        }
        return false;

=======

        if (indexDiff < 0 || valueDiff < 0) return false;
        unordered_set<long> window;
        for (int i = 0; i < nums.size(); ++i) {
            if (i > indexDiff) window.erase(nums[i - indexDiff - 1]);
            auto pos = window.lower_bound((long)nums[i] - valueDiff);
            if (pos != window.end() && *pos - nums[i] <= valueDiff) return true;
            window.insert(nums[i]);
        }
        return false;
