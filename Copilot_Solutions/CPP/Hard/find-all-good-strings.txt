Synthesizing 3/10 solutions

=======

        int len = evil.size();
        vector<int> next(len, 0);
        for (int i = 1, j = 0; i < len; ++i) {
            while (j > 0 && evil[i] != evil[j]) {
                j = next[j - 1];
            }
            if (evil[i] == evil[j]) {
                ++j;
            }
            next[i] = j;
        }

        vector<vector<int>> dp(n + 1, vector<int>(len, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < len; ++j) {
                int k = j;
                while (k > 0 && evil[k] != s1[i - 1]) {
                    k = next[k - 1];
                }
                if (evil[k] == s1[i - 1]) {
                    ++k;
                }
                dp[i][k] = (dp[i][k] + dp[i - 1][j]) % 1000000007;
            }

            for (int j = 0; j < len; ++j) {
                int k = j;
                while (k > 0 && evil[k] != s2[i - 1]) {
                    k = next[k - 1];
                }
                if (evil[k] == s2[i - 1]) {
                    ++k;
                }
                dp[i][k] = (dp[i][k] - dp[i - 1][j] + 1000000007) % 1000000007;
            }

            for (int j = 1; j < len; ++j) {
                dp[i][j] = (dp[i][j] + dp[i][j - 1]) % 1000000007;
            }
        }

        int res = 0;
        for (int i = 0; i < len; ++i) {
            res = (res + dp[n][i]) % 1000000007;
        }
        return res;

=======

        int i, j, k;
        int m = evil.size();
        vector<vector<int>> next(m+1, vector<int>(26, -1));
        for (i = 0; i < 26; ++i) {
            next[0][i] = 0;
        }
        for (i = 0; i < m; ++i) {
            for (j = 0; j < 26; ++j) {
                next[i+1][j] = next[next[i][j]][j];
            }
            next[i+1][evil[i]-'a'] = i+1;
        }
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        dp[0][0] = 1;
        for (i = 0; i < n; ++i) {
            for (j = 0; j < m; ++j) {
                if (dp[i][j] == 0) continue;
                for (k = (i == 0 ? s1[i]-'a'+1 : 0); k <= (i == n-1 ? s2[i]-'a'-1 : 25); ++k) {
                    dp[i+1][next[j][k]] = (dp[i+1][next[j][k]] + dp[i][j]) % 1000000007;
                }
            }
        }
        int ans = 0;
        for (i = 0; i < m; ++i) {
            ans = (ans + dp[n][i]) % 1000000007;
        }
        for (i = 0; i < n; ++i) {
            for (j = (i == 0 ? s1[i]-'a' : 0); j <= (i == n-1 ? s2[i]-'a' : 25); ++j) {
                if (next[m][j] == m) {
                    ans = (ans + dp[i][m]) % 1000000007;
                }
            }
        }
        return ans;

=======

        // dp[i][j][k] = number of good strings with prefix i and evil string of length j
        // and the last character of the prefix is k
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k] + ... + dp[i - 1][j - evil.size()][k]
        // dp[i][j][k] = dp[i -
