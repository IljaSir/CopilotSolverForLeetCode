Synthesizing 10/10 solutions

=======

        int sum = 0;
        vector<int> count(10, 0);
        for (int i = 0; i < digits.size(); i++) {
            sum += digits[i];
            count[digits[i]]++;
        }
        if (sum % 3 == 1) {
            if (count[1] > 0) {
                count[1]--;
            } else if (count[4] > 0) {
                count[4]--;
            } else if (count[7] > 0) {
                count[7]--;
            } else if (count[2] > 1) {
                count[2] -= 2;
            } else if (count[2] > 0 && count[5] > 0) {
                count[2]--;
                count[5]--;
            } else if (count[2] > 0 && count[8] > 0) {
                count[2]--;
                count[8]--;
            } else if (count[5] > 1) {
                count[5] -= 2;
            } else if (count[5] > 0 && count[8] > 0) {
                count[5]--;
                count[8]--;
            } else if (count[8] > 2) {
                count[8] -= 3;
            } else {
                return "";
            }
        } else if (sum % 3 == 2) {
            if (count[2] > 0) {
                count[2]--;
            } else if (count[5] > 0) {
                count[5]--;
            } else if (count[8] > 0) {
                count[8]--;
            } else if (count[1] > 1) {
                count[1] -= 2;
            } else if (count[1] > 0 && count[4] > 0) {
                count[1]--;
                count[4]--;
            } else if (count[1] > 0 && count[7] > 0) {
                count[1]--;
                count[7]--;
            } else if (count[4] > 1) {
                count[4] -= 2;
            } else if (count[4] > 0 && count[7] > 0) {
                count[4]--;
                count

=======

        sort(digits.begin(), digits.end(), greater<int>());
        int sum = accumulate(digits.begin(), digits.end(), 0);
        if (sum % 3 == 1) {
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 1) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 2) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 2) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
        } else if (sum % 3 == 2) {
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 2) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 1) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
            for (int i = 0; i < digits.size(); i++) {
                if (digits[i] % 3 == 1) {
                    digits.erase(digits.begin() + i);
                    break;
                }
            }
        }
        string res = "";
        for (int i = 0; i < digits.size(); i++) {
            res += to_string(digits[i]);
        }
        return res;

=======

        int sum = 0;
        int count[10] = {0};
        for (int i = 0; i < digits.size(); i++) {
            sum += digits[i];
            count[digits[i]]++;
        }
        if (sum % 3 == 1) {
            if (count[1] > 0) {
                count[1]--;
            } else if (count[4] > 0) {
                count[4]--;
            } else if (count[7] > 0) {
                count[7]--;
            } else if (count[2] > 1) {
                count[2] -= 2;
            } else if (count[5] > 1) {
                count[5] -= 2;
            } else if (count[8] > 1) {
                count[8] -= 2;
            } else if (count[2] > 0 && count[5] > 0) {
                count[2]--;
                count[5]--;
            } else if (count[2] > 0 && count[8] > 0) {
                count[2]--;
                count[8]--;
            } else if (count[5] > 0 && count[8] > 0) {
                count[5]--;
                count[8]--;
            } else {
                return "";
            }
        } else if (sum % 3 == 2) {
            if (count[2] > 0) {
                count[2]--;
            } else if (count[5] > 0) {
                count[5]--;
            } else if (count[8] > 0) {
                count[8]--;
            } else if (count[1] > 1) {
                count[1] -= 2;
            } else if (count[4] > 1) {
                count[4] -= 2;
            } else if (count[7] > 1) {
                count[7] -= 2;
            } else if (count[1] > 0 && count[4] > 0) {
                count[1]--;
                count[4]--;
            } else if (count[1] > 0 && count[7] > 0) {
                count[1]--;
                count[7]--;
            } else if (count[

=======

        int sum = 0;
        vector<int> cnt(10, 0);
        for (int i = 0; i < digits.size(); ++i) {
            cnt[digits[i]]++;
            sum += digits[i];
        }
        if (sum == 0) {
            return "0";
        }
        int mod = sum % 3;
        if (mod == 0) {
            return build(cnt);
        }
        if (mod == 1) {
            if (cnt[1] > 0) {
                cnt[1]--;
            } else if (cnt[4] > 0) {
                cnt[4]--;
            } else if (cnt[7] > 0) {
                cnt[7]--;
            } else if (cnt[2] > 1) {
                cnt[2] -= 2;
            } else if (cnt[5] > 1) {
                cnt[5] -= 2;
            } else if (cnt[8] > 1) {
                cnt[8] -= 2;
            } else if (cnt[2] > 0 && cnt[5] > 0) {
                cnt[2]--;
                cnt[5]--;
            } else if (cnt[2] > 0 && cnt[8] > 0) {
                cnt[2]--;
                cnt[8]--;
            } else if (cnt[5] > 0 && cnt[8] > 0) {
                cnt[5]--;
                cnt[8]--;
            } else {
                return "";
            }
        } else {
            if (cnt[2] > 0) {
                cnt[2]--;
            } else if (cnt[5] > 0) {
                cnt[5]--;
            } else if (cnt[8] > 0) {
                cnt[8]--;
            } else if (cnt[1] > 1) {
                cnt[1] -= 2;
            } else if (cnt[4] > 1) {
                cnt[4] -= 2;
            } else if (cnt[7] > 1) {
                cnt[7] -= 2;
            } else if (cnt[1] > 0 && cnt[4] > 0) {
                cnt[1]--;
                cnt[4]--;
            } else if (cnt[1]

=======

        vector<int> count(10, 0);
        int sum = 0;
        for (auto d : digits) {
            count[d]++;
            sum += d;
        }
        if (sum % 3 == 1) {
            if (count[1] > 0) {
                count[1]--;
            } else if (count[4] > 0) {
                count[4]--;
            } else if (count[7] > 0) {
                count[7]--;
            } else if (count[2] > 1) {
                count[2] -= 2;
            } else if (count[2] > 0 && count[5] > 0) {
                count[2] -= 1;
                count[5] -= 1;
            } else if (count[2] > 0 && count[8] > 0) {
                count[2] -= 1;
                count[8] -= 1;
            } else if (count[5] > 1) {
                count[5] -= 2;
            } else if (count[5] > 0 && count[8] > 0) {
                count[5] -= 1;
                count[8] -= 1;
            } else if (count[8] > 2) {
                count[8] -= 3;
            } else {
                return "";
            }
        } else if (sum % 3 == 2) {
            if (count[2] > 0) {
                count[2]--;
            } else if (count[5] > 0) {
                count[5]--;
            } else if (count[8] > 0) {
                count[8]--;
            } else if (count[1] > 1) {
                count[1] -= 2;
            } else if (count[1] > 0 && count[4] > 0) {
                count[1] -= 1;
                count[4] -= 1;
            } else if (count[1] > 0 && count[7] > 0) {
                count[1] -= 1;
                count[7] -= 1;
            } else if (count[4] > 1) {
                count[4] -= 2;

=======

        int sum = 0;
        vector<int> cnt(10, 0);
        for (int d : digits) {
            sum += d;
            cnt[d]++;
        }
        if (sum % 3 == 1) {
            if (cnt[1] > 0) {
                cnt[1]--;
            } else if (cnt[4] > 0) {
                cnt[4]--;
            } else if (cnt[7] > 0) {
                cnt[7]--;
            } else if (cnt[2] > 1) {
                cnt[2] -= 2;
            } else if (cnt[5] > 0 && cnt[2] > 0) {
                cnt[2]--;
                cnt[5]--;
            } else if (cnt[8] > 0 && cnt[2] > 0) {
                cnt[2]--;
                cnt[8]--;
            } else if (cnt[5] > 1) {
                cnt[5] -= 2;
            } else if (cnt[8] > 0 && cnt[5] > 0) {
                cnt[5]--;
                cnt[8]--;
            } else if (cnt[8] > 2) {
                cnt[8] -= 3;
            } else {
                return "";
            }
        } else if (sum % 3 == 2) {
            if (cnt[2] > 0) {
                cnt[2]--;
            } else if (cnt[5] > 0) {
                cnt[5]--;
            } else if (cnt[8] > 0) {
                cnt[8]--;
            } else if (cnt[1] > 1) {
                cnt[1] -= 2;
            } else if (cnt[1] > 0 && cnt[4] > 0) {
                cnt[1]--;
                cnt[4]--;
            } else if (cnt[1] > 0 && cnt[7] > 0) {
                cnt[1]--;
                cnt[7]--;
            } else if (cnt[4] > 1) {
                cnt[4] -= 2;
            } else if (cnt[4] > 0 && cnt[7] > 0) {
                cnt[4]--;
                cnt[7]--;
            } else if (cnt[7]

=======

        int sum = 0;
        vector<int> remainders[3];
        for (int i = 0; i < digits.size(); i++) {
            sum += digits[i];
            remainders[digits[i] % 3].push_back(digits[i]);
        }
        int remainder = sum % 3;
        if (remainder == 1) {
            if (remainders[1].size() > 0) {
                remove(remainders[1].begin(), remainders[1].end(), *min_element(remainders[1].begin(), remainders[1].end()));
            } else if (remainders[2].size() > 1) {
                remove(remainders[2].begin(), remainders[2].end(), *min_element(remainders[2].begin(), remainders[2].end()));
                remove(remainders[2].begin(), remainders[2].end(), *min_element(remainders[2].begin(), remainders[2].end()));
            } else {
                return "";
            }
        } else if (remainder == 2) {
            if (remainders[2].size() > 0) {
                remove(remainders[2].begin(), remainders[2].end(), *min_element(remainders[2].begin(), remainders[2].end()));
            } else if (remainders[1].size() > 1) {
                remove(remainders[1].begin(), remainders[1].end(), *min_element(remainders[1].begin(), remainders[1].end()));
                remove(remainders[1].begin(), remainders[1].end(), *min_element(remainders[1].begin(), remainders[1].end()));
            } else {
                return "";
            }
        }
        string result = "";
        for (int i = 2; i >= 0; i--) {
            for (int j = 0; j < remainders[i].size(); j++) {
                result += remainders[i][j] + '0';
            }
        }
        sort(result.begin(), result.end(), greater<int>());
        if (result[0] == '0') {
            return "0";
        }
        return result;

=======

        vector<int> count(10,0);
        int sum=0;
        for(int i:digits){
            count[i]++;
            sum+=i;
        }
        if(sum%3==1){
            if(count[1]>0) count[1]--;
            else if(count[4]>0) count[4]--;
            else if(count[7]>0) count[7]--;
            else if(count[2]>1) count[2]-=2;
            else if(count[2]>0 && count[5]>0) count[2]--,count[5]--;
            else if(count[2]>0 && count[8]>0) count[2]--,count[8]--;
            else if(count[5]>1) count[5]-=2;
            else if(count[5]>0 && count[8]>0) count[5]--,count[8]--;
            else if(count[8]>1) count[8]-=2;
            else return "";
        }else if(sum%3==2){
            if(count[2]>0) count[2]--;
            else if(count[5]>0) count[5]--;
            else if(count[8]>0) count[8]--;
            else if(count[1]>1) count[1]-=2;
            else if(count[1]>0 && count[4]>0) count[1]--,count[4]--;
            else if(count[1]>0 && count[7]>0) count[1]--,count[7]--;
            else if(count[4]>1) count[4]-=2;
            else if(count[4]>0 && count[7]>0) count[4]--,count[7]--;
            else if(count[7]>1) count[7]-=2;
            else return "";
        }
        string res="";
        for(int i=9;i>=0;i--){
            while(count[i]--){
                res+=to_string(i);
            }
        }
        if(res.size()>0 && res[0]=='0') return "0";
        return res;

=======

        vector<int> sum(3, 0);
        int total = 0;
        for (auto d : digits) {
            sum[d % 3]++;
            total += d;
        }
        if (total % 3 == 1) {
            if (sum[1]) sum[1]--;
            else {
                sum[2] -= 2;
            }
        }
        if (total % 3 == 2) {
            if (sum[2]) sum[2]--;
            else {
                sum[1] -= 2;
            }
        }
        if (sum[0] == digits.size()) return "0";
        string ret;
        for (int i = 9; i >= 0; i--) {
            if (i % 3 == 0) {
                while (sum[0]--) {
                    ret += to_string(i);
                }
            } else if (i % 3 == 1) {
                while (sum[1]--) {
                    ret += to_string(i);
                }
            } else {
                while (sum[2]--) {
                    ret += to_string(i);
                }
            }
        }
        return ret;

=======

        int sum = 0;
        string ans = "";
        vector<int> count(10,0);
        for(auto x:digits){
            sum += x;
            count[x]++;
        }
        if(sum%3==1){
            if(count[1]>0) count[1]--;
            else if(count[4]>0) count[4]--;
            else if(count[7]>0) count[7]--;
            else if(count[2]>1) count[2]-=2;
            else if(count[5]>1) count[5]-=2;
            else if(count[8]>1) count[8]-=2;
            else if(count[2]>0 && count[5]>0) count[2]--,count[5]--;
            else if(count[2]>0 && count[8]>0) count[2]--,count[8]--;
            else if(count[5]>0 && count[8]>0) count[5]--,count[8]--;
            else return "";
        }
        if(sum%3==2){
            if(count[2]>0) count[2]--;
            else if(count[5]>0) count[5]--;
            else if(count[8]>0) count[8]--;
            else if(count[1]>1) count[1]-=2;
            else if(count[4]>1) count[4]-=2;
            else if(count[7]>1) count[7]-=2;
            else if(count[1]>0 && count[4]>0) count[1]--,count[4]--;
            else if(count[1]>0 && count[7]>0) count[1]--,count[7]--;
            else if(count[4]>0 && count[7]>0) count[4]--,count[7]--;
            else return "";
        }
        for(int i=9;i>=0;i--){
            while(count[i]--){
                ans += to_string(i);
            }
        }
        if(ans.size()>0 && ans[0]=='0') return "0";
        return ans;
