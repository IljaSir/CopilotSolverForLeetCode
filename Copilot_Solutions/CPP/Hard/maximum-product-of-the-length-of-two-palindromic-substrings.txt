Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = 1;
                }
            }
        }
        long long ans = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (dp[0][i] && dp[i + 1][j - 1] && dp[j][n - 1]) {
                    ans = max(ans, (long long)(i + 1) * (long long)(n - j));
                }
                if (dp[0][i] && dp[i][j] && dp[j + 1][n - 1]) {
                    ans = max(ans, (long long)(i + 1) * (long long)(n - j - 1));
                }
            }
        }
        return ans;

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1] == 1) {
                    dp[i][j] = 1;
                }
            }
        }
        int maxLen = 0;
        int maxLenIdx = -1;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (dp[i][j]) {
                    if (maxLen < j - i + 1) {
                        maxLen = j - i + 1;
                        maxLenIdx = i;
                    }
                }
            }
        }
        int maxLen2 = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (dp[i][j] && maxLenIdx + maxLen - 1 < i || maxLenIdx > j) {
                    maxLen2 = max(maxLen2, j - i + 1);
                }
            }
        }
        return maxLen * maxLen2;

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
            }
        }
        for (int i = 2; i < n; i++) {
            for (int j = 0; j + i < n; j++) {
                if (s[j] == s[j + i] && dp[j + 1][j + i - 1] == 1) {
                    dp[j][j + i] = 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = n - 1;
            while (l < i && r > i) {
                if (dp[l][i - 1] == 1 && dp[i + 1][r] == 1) {
                    ans = max(ans, (i - l) * (r - i));
                    break;
                }
                if (dp[l][i - 1] == 0) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> left(n, 0), right(n, 0);
        for (int i = 0, j = n - 1; i < n; i++, j--) {
            int l = i, r = i;
            while (l >= 0 && r < n && s[l] == s[r]) {
                left[i] = r - l + 1;
                l--;
                r++;
            }
            l = i, r = i + 1;
            while (l >= 0 && r < n && s[l] == s[r]) {
                left[i] = max(left[i], r - l + 1);
                l--;
                r++;
            }
            l = j, r = j;
            while (l >= 0 && r < n && s[l] == s[r]) {
                right[j] = r - l + 1;
                l--;
                r++;
            }
            l = j, r = j + 1;
            while (l >= 0 && r < n && s[l] == s[r]) {
                right[j] = max(right[j], r - l + 1);
                l--;
                r++;
            }
        }
        long long res = 0;
        for (int i = 0; i < n - 1; i++) {
            res = max(res, (long long)left[i] * right[i + 1]);
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < n; i++) {
            int mask = 0;
            for (int j = i; j < n; j++) {
                mask ^= 1 << (s[j] - 'a');
                if ((mask & (mask - 1)) == 0) {
                    dp[mask] = j - i + 1;
                }
            }
        }
        for (int i = 0; i < 26; i++) {
            for (int mask = 0; mask < (1 << 26); mask++) {
                if (mask & (1 << i)) {
                    dp[mask] = max(dp[mask], dp[mask ^ (1 << i)]);
                }
            }
        }
        long long ans = 0;
        for (int mask = 0; mask < (1 << 26); mask++) {
            if (dp[mask] * dp[((1 << 26) - 1) ^ mask] > ans) {
                ans = dp[mask] * dp[((1 << 26) - 1) ^ mask];
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(1 << n);
        for (int mask = 0; mask < (1 << n); mask++) {
            string t;
            for (int i = 0; i < n; i++) {
                if (mask & (1 << i)) {
                    t += s[i];
                }
            }
            if (t == string(t.rbegin(), t.rend())) {
                dp[mask] = t.size();
            }
        }
        long long ans = 1;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] * dp[((1 << n) - 1) ^ mask] > ans) {
                ans = dp[mask] * dp[((1 << n) - 1) ^ mask];
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(1 << n);
        for (int mask = 0; mask < (1 << n); mask++) {
            string t;
            for (int i = 0; i < n; i++) {
                if (mask & (1 << i)) {
                    t += s[i];
                }
            }
            if (t == string(t.rbegin(), t.rend())) {
                dp[mask] = t.size();
            }
        }
        long long ans = 1;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] * dp[((1 << n) - 1) ^ mask] > ans) {
                ans = dp[mask] * dp[((1 << n) - 1) ^ mask];
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> left(n, 0), right(n, 0);
        for (int i = 0, j = n - 1; i < n; i++, j--) {
            int l = i, r = i;
            while (l >= 0 && r < n && s[l] == s[r]) {
                left[i] = r - l + 1;
                l--;
                r++;
            }
            l = i, r = i + 1;
            while (l >= 0 && r < n && s[l] == s[r]) {
                left[i] = max(left[i], r - l + 1);
                l--;
                r++;
            }
            l = j, r = j;
            while (l >= 0 && r < n && s[l] == s[r]) {
                right[j] = r - l + 1;
                l--;
                r++;
            }
            l = j, r = j + 1;
            while (l >= 0 && r < n && s[l] == s[r]) {
                right[j] = max(right[j], r - l + 1);
                l--;
                r++;
            }
        }
        long long res = 0;
        for (int i = 0; i < n - 1; i++) {)len);
            }
        }
        return ans;

=======

        int n = s.size(;
        vector<int> ft(n, 0), right(, 0
        for (int i = 0, j = n - 1, len = 0; i < n; ++i, --j) {
            left[i] = (i > 0 ? left[i - 1] : 0) | (1 << (s[i] - 'a'));
            right[j] = (j < n - 1 ? right[j + 1] : 0) | (1 << (s[j] - 'a'));
        }
        long long ans = 0;
        for (int i = 0; i < n - 1; ++i) {
            int len1 = i + 1;
            if (len1 & 1 && (left[i] == right[0])) {
                for (int j = i + 1; j < n; ++j) {
                    int len2 = n - j;
                    if (len2 & 1 && (left[j - 1] == right[j])) {
                        ans = max(ans, (long long)len1 * len2);
                    }
                }
            res = max(res, (long long)left[i] * right[i + 1]);
        }
        return res;

=======

        int n = s.size();
        vector<long long> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            dp[i] = 1 << (s[i] - 'a');
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                if (dp[i] & dp[j]) {
                    ans = max(ans, (long long) (j - i + 1) * (j - i + 1));
                }
                dp[j] |= dp[i];
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(26, 0);
        for (int i = 0; i < n; i++) {
            dp[s[i] - 'a'] |= (1 << i);
        }
        long long ans = 0;
        for (int i = 0; i < 26; i++) {
            for (int j = i + 1; j < 26; j++) {
                int x = dp[i], y = dp[j];
                if (x & y) continue;
                int len = __builtin_popcount(x) * __builtin_popcount(y);
                ans = max(ans, (long long)len);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> left(n, 0), right(n, 0);
        for (int i = 0, j = n - 1, len = 0; i < n; ++i, --j) {
            left[i] = (i > 0 ? left[i - 1] : 0) | (1 << (s[i] - 'a'));
            right[j] = (j < n - 1 ? right[j + 1] : 0) | (1 << (s[j] - 'a'));
        }
        long long ans = 0;
        for (int i = 0; i < n - 1; ++i) {
            int len1 = i + 1;
            if (len1 & 1 && (left[i] == right[0])) {
                for (int j = i + 1; j < n; ++j) {
                    int len2 = n - j;
                    if (len2 & 1 && (left[j - 1] == right[j])) {
                        ans = max(ans, (long long)len1 * len2);
                    }
                }
            }
        }
        return ans;

=======

        int n = s.size();
        vector<long long> dp(n, 0);
        vector<long long> dp2(n, 0);
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) {
                    dp[j] = 1;
                } else if (i + 1 == j) {
                    dp[j] = s[i] == s[j] ? 3 : 0;
                } else if (s[i] == s[j]) {
                    dp[j] = dp[j - 1] == 0 ? 0 : dp[j - 1] + 2;
                } else {
                    dp[j] = 0;
                }
                ans = max(ans, dp[j] * dp2[j]);
            }
            dp2 = dp;
        }
        return ans;
