Synthesizing 3/10 solutions

=======

        int n = parents.size();
        vector<vector<int>> children(n);
        int root;
        for (int i = 0; i < n; ++i) {
            if (parents[i] == -1) {
                root = i;
            } else {
                children[parents[i]].push_back(i);
            }
        }
        vector<vector<int>> q(n);
        for (int i = 0; i < queries.size(); ++i) {
            q[queries[i][0]].push_back(i);
        }
        vector<int> ans(queries.size());
        vector<int> trie(2 * n);
        vector<int> cnt(2 * n);
        int trie_size = 1;
        function<void(int)> dfs = [&](int u) {
            for (auto& idx : q[u]) {
                int val = queries[idx][1];
                int cur = 0;
                for (int i = 17; i >= 0; --i) {
                    int bit = (val >> i) & 1;
                    if (cnt[trie[cur ^ bit]]) {
                        cur ^= bit;
                    }
                    cur = trie[cur];
                }
                ans[idx] = val ^ cur;
            }
            int t = trie_size++;
            for (int i = 17; i >= 0; --i) {
                int bit = (u >> i) & 1;
                trie[trie_size] = trie[t ^ bit];
                cnt[trie_size] = cnt[t ^ bit];
                trie[t ^ bit] = trie_size;
                t = trie_size++;
            }
            cnt[t] = 1;
            for (auto& v : children[u]) {
                dfs(v);
            }
            for (int i = 17; i >= 0; --i) {
                int bit = (u >> i) & 1;
                trie[t ^ bit] = trie[trie[t ^ bit]];
                t = trie[t];
            }
            --cnt[t];
        };
        dfs(root);
        return ans;

=======

        int n = parents.size();
        vector<vector<int>> children(n);
        int root = 0;
        for (int i = 0; i < n; i++) {
            if (parents[i] == -1) {
                root = i;
            } else {
                children[parents[i]].push_back(i);
            }
        }
        vector<int> ans(queries.size());
        vector<int> node2idx(n);
        vector<int> node2val(n);
        unordered_map<int, vector<int>> node2queryIdx;
        for (int i = 0; i < queries.size(); i++) {
            int node = queries[i][0];
            int val = queries[i][1];
            node2queryIdx[node].push_back(i);
            node2val[node] = val;
        }
        dfs(root, children, node2idx, node2val, node2queryIdx, ans);
        return ans;
    }
    int dfs(int node, vector<vector<int>>& children, vector<int>& node2idx, vector<int>& node2val, unordered_map<int, vector<int>>& node2queryIdx, vector<int>& ans) {
        int idx = node2idx[node] = node2idx[parents[node]] + 1;
        int val = node2val[node];
        int maxDiff = 0;
        for (int i = 0, j = 31; i < 32; i++, j--) {
            if (val & (1 << i)) {
                int idx = node2idx[node] - (1 << j);
                if (idx >= 0) {
                    maxDiff = max(maxDiff, val ^ (1 << i));
                }
            }
        }
        for (int child : children[node]) {
            maxDiff = max(maxDiff, dfs(child, children, node2idx, node2val, node2queryIdx, ans));
        }
        for (int queryIdx : node2queryIdx[node]) {
            ans[queryIdx] = maxDiff;
        }
        return maxDiff;

=======

        int n = parents.size();
        vector<vector<int>> g(n);
        vector<int> root;
        for (int i = 0; i < n; ++i) {
            if (parents[i] == -1) {
                root.push_back(i);
            } else {
                g[parents[i]].push_back(i);
            }
        }
        vector<int> ans(queries.size());
        vector<int> depth(n);
        vector<vector<int>> dp(n, vector<int>(21));
        for (int i = 0; i < n; ++i) {
            dp[i][0] = parents[i];
            if (parents[i] != -1) {
                depth[i] = depth[parents[i]] + 1;
            }
            for (int j = 1; j < 21; ++j) {
                if (dp[i][j - 1] != -1) {
                    dp[i][j] = dp[dp[i][j - 1]][j - 1];
                } else {
                    dp[i][j] = -1;
                }
            }
        }
        vector<int> order;
        function<void(int)> dfs = [&](int u) {
            order.push_back(u);
            for (int v : g[u]) {
                dfs(v);
            }
        };
        for (int i : root) {
            dfs(i);
        }
        vector<int> p(n);
        iota(p.begin(), p.end(), 0);
        sort(p.begin(), p.end(), [&](int i, int j) {
            return depth[i] > depth[j];
        });
        vector<int> cur(n);
        for (int i = 0; i < queries.size(); ++i) {
            int u = queries[i][0], val = queries[i][1];
            cur[u] = val;
        }
        for (int i : order) {
            int u = p[i];
            if (parents[u] != -1) {
                cur[parents[u]] = max(cur[parents[u]], cur[u]);
            }
            for (int j = 0; j < 21; ++j) {
                if (dp[u][j] != -1) {
                    cur[dp[u][j]] = max(cur[dp[u][j]], cur[u]);
                }
            }
        }
        for (int i = 0; i < queries.size
