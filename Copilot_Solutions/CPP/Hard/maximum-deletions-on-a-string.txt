Synthesizing 10/10 solutions

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (s[j] == s[j - i]) {
                    dp[j - i][j] = dp[j - i + 1][j - 1] + 2;
                } else {
                    dp[j - i][j] = max(dp[j - i + 1][j], dp[j - i][j - 1]);
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s[i] == s[i + 1] ? 1 : 2;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                dp[i][j] = 1 + dp[i + 1][j];
                if (s[i] == s[i + 1]) {
                    dp[i][j] = min(dp[i][j], 1 + dp[i + 2][j]);
                }
                for (int k = i + 2; k <= j; k++) {
                    if (s[i] == s[k]) {
                        dp[i][j] = min(dp[i][j], dp[i + 1][k - 1] + dp[k + 1][j]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (s[i - 1] == s[j - 1] && i != j) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return n - dp[n][n];

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                }
                else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
    int maximumDeletions(string s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, deleteString(s.substr(0, i)) + deleteString(s.substr(i)));
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 1; i >= 0; --i) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; ++j) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.size();
        vector<int> dp(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1] + 1;
            for (int j = 1; j * 2 <= i; ++j) {
                if (s.substr(0, j) == s.substr(j, j)) {
                    dp[i] = min(dp[i], dp[j] + dp[i - j]);
                }
            }
        }
        return dp[n];

=======

        int n = s.length();
        vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = 1 + dp[i - 1];
            for (int j = 1; j <= i / 2; j++) {
                if (i % j == 0) {
                    bool flag = true;
                    for (int k = j; k < i; k++) {
                        if (s[k] != s[k - j]) {
                            flag = false;
                            break;
                        }
                    }
                    if (flag) {
                        dp[i] = min(dp[i], 1 + dp[i / j]);
                    }
                }
            }
        }
        return dp[n];

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; ++i) dp[i][i] = 1;
        for(int i = n - 1; i >= 0; --i) {
            for(int j = i + 1; j < n; ++j) {
                if(s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.size();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s[i] == s[i + 1] ? 2 : 1;
        }
        for (int len = 2; len < n; len++) {
            for (int i = 0; i + len < n; i++) {
                int j = i + len;
                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);
                if (s[i] == s[j]) {
                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.length();
        int dp[n+1][n+1];
        for(int i=0;i<=n;i++) {
            for(int j=0;j<=n;j++) {
                dp[i][j] = 0;
            }
        }
        for(int i=1;i<=n;i++) {
            for(int j=i+1;j<=n;j++) {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                if(s[i-1] == s[j-1]) {
                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]+1);
                }
            }
        }
        return dp[n][n];
    }
    int maximumDeletions(string s) {
        int n = s.length();
        int dp[n+1][n+1];
        for(int i=0;i<=n;i++) {
            for(int j=0;j<=n;j++) {
                dp[i][j] = 0;
            }
        }
        for(int i=1;i<=n;i++) {
            for(int j=i+1;j<=n;j++) {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                if(s[i-1] == s[j-1]) {
                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]+1);
                }
            }
        }
        return n - 2*dp[n][n];
