Synthesizing 10/10 solutions

=======

        int n = ideas.size();
        unordered_set<string> s;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                string a = ideas[i];
                string b = ideas[j];
                swap(a[0], b[0]);
                if (s.find(a) == s.end() && s.find(b) == s.end()) {
                    s.insert(a + " " + b);
                }
            }
        }
        return s.size();

=======

        unordered_set<string> st;
        int n = ideas.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                string a = ideas[i], b = ideas[j];
                swap(a[0], b[0]);
                if (st.find(a) == st.end() && st.find(b) == st.end()) {
                    st.insert(a + " " + b);
                }
            }
        }
        return st.size();

=======

        long long n = ideas.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                string s1 = ideas[i];
                string s2 = ideas[j];
                swap(s1[0], s2[0]);
                if (s1 != ideas[i] && s2 != ideas[j]) ans++;
            }
        }
        return ans;

=======

        int len = ideas.size();
        long long ans = 0;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                string s1 = ideas[i], s2 = ideas[j];
                swap(s1[0], s2[0]);
                if (find(ideas.begin(), ideas.end(), s1) == ideas.end() &&
                    find(ideas.begin(), ideas.end(), s2) == ideas.end()) {
                    ans++;
                }
            }
        }
        return ans;

=======

        long long result = 0;
        unordered_set<string> seen;
        for (int i = 0; i < ideas.size(); ++i) {
            for (int j = i + 1; j < ideas.size(); ++j) {
                string newIdea = ideas[j];
                newIdea[0] = ideas[i][0];
                string newIdea2 = ideas[i];
                newIdea2[0] = ideas[j][0];
                if (seen.find(newIdea) == seen.end() && seen.find(newIdea2) == seen.end()) {
                    result++;
                }
            }
            seen.insert(ideas[i]);
        }
        return result;

=======

        long long ans = 0;
        for(int i=0;i<ideas.size();i++){
            for(int j=i+1;j<ideas.size();j++){
                string idea1 = ideas[i];
                string idea2 = ideas[j];
                int n = idea1.size();
                int m = idea2.size();
                char temp = idea1[0];
                idea1[0] = idea2[0];
                idea2[0] = temp;
                if(find(ideas.begin(),ideas.end(),idea1) == ideas.end() && find(ideas.begin(),ideas.end(),idea2) == ideas.end()){
                    ans++;
                }
            }
        }
        return ans;

=======

        long long n = ideas.size();
        long long res = 0;
        unordered_set<string> us;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                string s = ideas[i];
                s[0] = ideas[j][0];
                if (us.find(s) == us.end()) {
                    us.insert(s);
                    res++;
                }
                s = ideas[j];
                s[0] = ideas[i][0];
                if (us.find(s) == us.end()) {
                    us.insert(s);
                    res++;
                }
            }
        }
        return res;

=======

        long long n = ideas.size();
        long long ans = 0;
        unordered_set<string> s;
        for (auto i : ideas) {
            s.insert(i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                string s1 = ideas[i], s2 = ideas[j];
                char c1 = s1[0], c2 = s2[0];
                s1[0] = c2;
                s2[0] = c1;
                if (s.find(s1) == s.end() && s.find(s2) == s.end()) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = ideas.size();
        unordered_map<string, int> m;
        for (auto& x : ideas) m[x] = 1;
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                string a = ideas[i], b = ideas[j];
                swap(a[0], b[0]);
                if (m[a] == 0 && m[b] == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        long long res = 0;
        unordered_map<string, int> m;
        for (auto& s : ideas) {
            m[s]++;
        }
        for (auto& [s1, cnt1] : m) {
            for (auto& [s2, cnt2] : m) {
                if (s1 != s2) {
                    string s3 = s2;
                    s3[0] = s1[0];
                    string s4 = s1;
                    s4[0] = s2[0];
                    if (m.find(s3) == m.end() && m.find(s4) == m.end()) {
                        res += cnt1 * cnt2;
                    }
                }
            }
        }
        return res;
