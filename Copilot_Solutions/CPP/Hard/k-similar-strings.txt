Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s1.size();
        vector<vector<int>> g(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (s1[i] == s2[j] && s1[j] == s2[i]) {
                    g[i].push_back(j);
                    g[j].push_back(i);
                }
            }
        }
        queue<string> q;
        q.push(s1);
        unordered_set<string> visited;
        visited.insert(s1);
        int step = 0;
        while (!q.empty()) {
            int sz = q.size();
            while (sz--) {
                auto t = q.front();
                q.pop();
                if (t == s2) return step;
                int i = 0;
                while (t[i] == s2[i]) ++i;
                for (int j : g[i]) {
                    swap(t[i], t[j]);
                    if (!visited.count(t)) {
                        visited.insert(t);
                        q.push(t);
                    }
                    swap(t[i], t[j]);
                }
            }
            ++step;
        }
        return -1;

=======

        queue<string> q;
        q.push(s1);
        unordered_set<string> visited;
        visited.insert(s1);
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                string cur = q.front();
                q.pop();
                if (cur == s2) {
                    return step;
                }
                int i = 0;
                while (cur[i] == s2[i]) {
                    i++;
                }
                for (int j = i + 1; j < cur.size(); j++) {
                    if (cur[j] == s2[j] || cur[j] != s2[i]) {
                        continue;
                    }
                    swap(cur[i], cur[j]);
                    if (visited.count(cur) == 0) {
                        q.push(cur);
                        visited.insert(cur);
                    }
                    swap(cur[i], cur[j]);
                }
            }
            step++;
        }
        return -1;

=======

        int n = s1.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                dp[i][j] = (s1[i] == s2[j]);
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) {
                    continue;
                }
                if (dp[i][j]) {
                    for (int k = 0; k < n; ++k) {
                        if (k == i || k == j) {
                            continue;
                        }
                        dp[i][k] = max(dp[i][k], dp[j][k]);
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) {
                    continue;
                }
                if (dp[i][j]) {
                    ans += 1;
                }
            }
        }
        return ans;

=======

        int n = s1.size();
        vector<vector<int>> dp(1<<n, vector<int>(n, n));
        for (int i = 0; i < n; i++) {
            if (s1[i] == s2[i]) {
                dp[1<<i][i] = 0;
            }
        }
        for (int mask = 1; mask < (1<<n); mask++) {
            int x = -1, y = -1;
            for (int i = 0; i < n; i++) {
                if (!(mask & (1<<i))) {
                    continue;
                }
                if (x == -1) {
                    x = i;
                } else {
                    y = i;
                    break;
                }
            }
            for (int i = 0; i < n; i++) {
                if (s1[x] != s2[i] || s1[y] != s2[i]) {
                    continue;
                }
                dp[mask][i] = min(dp[mask][i], dp[mask^(1<<x)^(1<<y)][y] + 1);
            }
            for (int i = 0; i < n; i++) {
                if (s1[i] != s2[i]) {
                    continue;
                }
                dp[mask][i] = min(dp[mask][i], dp[mask^(1<<i)][i]);
            }
        }
        int ans = n;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[(1<<n)-1][i]);
        }
        return ans;

=======

        int n = s1.length();
        vector<int> p(n);
        for (int i = 0; i < n; ++i) {
            p[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            if (s1[i] == s2[i]) {
                continue;
            }
            for (int j = i + 1; j < n; ++j) {
                if (s1[j] == s2[i]) {
                    swap(p[i], p[j]);
                    break;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (s1[i] == s2[i]) {
                continue;
            }
            if (p[i] == i) {
                continue;
            }
            swap(s1[i], s1[p[i]]);
            swap(p[i], p[p[i]]);
            ++res;
        }
        return res;

=======

        int n = s1.size();
        vector<vector<int>> next(n, vector<int>(n, n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (s1[i] == s2[j]) {
                    next[i][j] = j;
                }
            }
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    next[j][k] = min(next[j][k], next[j][i]);
                }
            }
        }
        vector<vector<int>> dp(n, vector<int>(1 << n, n));
        dp[0][1] = 0;
        for (int i = 0; i < (1 << n); ++i) {
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    for (int k = 0; k < n; ++k) {
                        if (!(i & (1 << k))) {
                            int t = next[j][k];
                            if (t < n) {
                                dp[k][i | (1 << k)] = min(dp[k][i | (1 << k)], dp[j][i] + (t != k));
                            }
                        }
                    }
                }
            }
        }
        return dp[n - 1][(1 << n) - 1];

=======

        int n = s1.size();
        vector<int> f(n, 0);
        vector<int> g(n, 0);
        for (int i = 0; i < n; ++i) {
            f[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (s1[i] == s2[j]) {
                    break;
                }
            }
            g[i] = j;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int j = i;
            for (; j < n; ++j) {
                if (f[j] == g[j]) {
                    break;
                }
            }
            if (j == n) {
                return ans + 1;
            }
            if (f[j] == g[i]) {
                swap(f[j], f[i]);
                ++ans;
            }
        }
        return ans;

=======

        int n = s1.size();
        vector<vector<int>> dp(1<<n, vector<int>(n, n));
        for (int i = 0; i < n; i++) {
            if (s1[i] == s2[i]) {
                dp[1<<i][i] = 0;
            }
        }
        for (int mask = 1; mask < (1<<n); mask++) {
            int x = -1, y = -1;
            for (int i = 0; i < n; i++) {
                if (!(mask & (1<<i))) {
                    continue;
                }
                if (x == -1) {
                    x = i;
                } else {
                    y = i;
                    break;
                }
            }
            for (int i = 0; i < n; i++) {
                if (s1[x] != s2[i] || s1[y] != s2[i]) {
                    continue;
                }
                dp[mask][i] = min(dp[mask][i], dp[mask^(1<<x)^(1<<y)][y] + 1);
            }
            for (int i = 0; i < n; i++) {
                if (s1[i] != s2[i]) {
                    continue;
                }
                dp[mask][i] = min(dp[mask][i], dp[mask^(1<<i)][i]);
            }
        }
        int ans = n;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[(1<<n)-1][i]);
        }
        return ans;

=======

        int n = s1.size();
        vector<int> f(n, 0);
        vector<int> g(n, 0);
        for (int i = 0; i < n; ++i) {
            f[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (s1[i] == s2[j]) {
                    break;
                }
            }
            g[i] = j;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int j = i;
            for (; j < n; ++j) {
                if (f[j] == g[j]) {
                    break;
                }
            }
            if (j == n) {
                return ans + 1;
            }
            if (f[j] == g[i]) {
                swap(f[j], f[i]);
                ++ans;
            }
        }
        return ans;
