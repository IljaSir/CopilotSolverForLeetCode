Synthesizing 4/10 solutions (Duplicates hidden)

=======

        int n = floor.length();
        vector<int> dp(n + 1, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (floor[i] == '1') {
                ans++;
            }
            dp[i + 1] = dp[i] + (floor[i] == '1' ? 1 : -1);
        }
        int m = 0;
        for (int i = 0; i < n; i++) {
            int l = i, r = n;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (dp[mid + 1] - dp[i] <= numCarpets * carpetLen) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            m = max(m, l - i);
        }
        return ans - m;

=======

        int n = floor.size();
        vector<int> c(n);
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            if (floor[i] == '1') {
                sum++;
            }
            c[i] = sum;
        }
        vector<vector<int>> dp(n, vector<int>(numCarpets + 1, INT_MAX));
        for (int i = carpetLen - 1; i < n; ++i) {
            dp[i][1] = c[i] - (i >= carpetLen ? c[i - carpetLen] : 0);
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= numCarpets; ++j) {
                if (j > (i + 1) / carpetLen) {
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j]);
                }
                if (i >= carpetLen && j >= 2) {
                    dp[i][j] = min(dp[i][j], dp[i - carpetLen][j - 1] + c[i] - c[i - carpetLen]);
                }
            }
        }
        return dp[n - 1][numCarpets];
