Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }
    bool isSpecial(int n) {
        int mask = 0;
        while (n) {
            int d = n % 10;
            if (mask & (1 << d)) {
                return false;
            }
            mask |= (1 << d);
            n /= 10;
        }
        return true;

=======

        int cnt = 0;
        for (int i = 1; i <= n; ++i) {
            if (isSpecial(i)) {
                ++cnt;
            }
        }
        return cnt;
    }
    
    bool isSpecial(int n) {
        int a, b, c;
        if (n < 10) {
            return true;
        } else if (n < 100) {
            a = n / 10;
            b = n % 10;
            return a != b;
        } else if (n < 1000) {
            a = n / 100;
            b = n % 100 / 10;
            c = n % 10;
            return a != b && a != c && b != c;
        } else if (n < 10000) {
            a = n / 1000;
            b = n % 1000 / 100;
            c = n % 100 / 10;
            int d = n % 10;
            return a != b && a != c && a != d && b != c && b != d && c != d;
        } else if (n < 100000) {
            a = n / 10000;
            b = n % 10000 / 1000;
            c = n % 1000 / 100;
            int d = n % 100 / 10;
            int e = n % 10;
            return a != b && a != c && a != d && a != e && b != c && b != d && b != e && c != d && c != e && d != e;
        } else {
            a = n / 100000;
            b = n % 100000 / 10000;
            c = n % 10000 / 1000;
            int d = n % 1000 / 100;
            int e = n % 100 / 10;
            int f = n % 10;
            return a != b && a != c && a != d && a != e && a != f && b != c && b != d && b != e && b != f && c != d && c != e && c != f && d != e && d != f && e != f;
        }

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int num = i;
            int digit[10] = {0};
            while (num > 0) {
                int d = num % 10;
                if (digit[d] == 1) {
                    break;
                }
                digit[d] = 1;
                num /= 10;
            }
            if (num == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int j = i;
            int digits = 0;
            int mask = 0;
            while (j > 0) {
                int digit = j % 10;
                if ((mask >> digit) & 1) {
                    break;
                }
                mask |= 1 << digit;
                digits++;
                j /= 10;
            }
            if (j == 0 && digits == __builtin_popcount(mask)) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            int num = i;
            int bit[10] = {0};
            while (num > 0) {
                int d = num % 10;
                if (bit[d] == 1) {
                    break;
                }
                bit[d] = 1;
                num /= 10;
            }
            if (num == 0) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int x = i;
            bool flag = true;
            unordered_set<int> s;
            while (x) {
                int r = x % 10;
                if (s.find(r) != s.end()) {
                    flag = false;
                    break;
                }
                s.insert(r);
                x /= 10;
            }
            if (flag) count++;
        }
        return count;

=======

        int a = 0, b = 0, c = 0;
        for (int i = 1; i <= n; i++) {
            if (i < 10) {
                a++;
            } else if (i < 100) {
                b++;
            } else if (i < 1000) {
                c++;
            }
        }
        return a + b + c;

=======

        int count = 0;
        for(int i = 1; i <= n; i++){
            int x = i;
            int digits[10] = {0};
            while(x > 0){
                digits[x % 10]++;
                x = x / 10;
            }
            int flag = 1;
            for(int j = 0; j < 10; j++){
                if(digits[j] > 1){
                    flag = 0;
                    break;
                }
            }
            if(flag == 1){
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int num = i;
            bool flag = true;
            unordered_map<int, int> m;
            while (num) {
                m[num % 10]++;
                if (m[num % 10] > 1) {
                    flag = false;
                    break;
                }
                num /= 10;
            }
            if (flag) count++;
        }
        return count;

=======

        int d, i, j, k, m, r, t, w, x;
        int a[10];
        for (i = 0; i < 10; i++)
            a[i] = 0;
        m = 0;
        for (i = 1; i <= n; i++) {
            t = i;
            while (t > 0) {
                d = t % 10;
                a[d]++;
                t = t / 10;
            }
            for (j = 0; j < 10; j++) {
                if (a[j] > 1)
                    break;
            }
            if (j == 10)
                m++;
            for (k = 0; k < 10; k++)
                a[k] = 0;
        }
        return m;
