Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = nums1.size();
        int dp[n][2];
        dp[0][0] = 0;
        dp[0][1] = 1;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = dp[i][1] = INT_MAX;
            if (nums1[i] > nums1[i-1] && nums2[i] > nums2[i-1]) {
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][1] + 1;
            }
            if (nums1[i] > nums2[i-1] && nums2[i] > nums1[i-1]) {
                dp[i][0] = min(dp[i][0], dp[i-1][1]);
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1);
            }
        }
        return min(dp[n-1][0], dp[n-1][1]);

=======

        int n = nums1.size();
        vector<int> keep(n, INT_MAX), swap(n, INT_MAX);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                keep[i] = min(keep[i], swap[i - 1]);
                swap[i] = min(swap[i], keep[i - 1] + 1);
            }
        }
        return min(keep[n - 1], swap[n - 1]);

=======

        int n = nums1.size();
        vector<int> keep(n, INT_MAX), swap(n, INT_MAX);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                keep[i] = min(keep[i], swap[i - 1]);
                swap[i] = min(swap[i], keep[i - 1] + 1);
            }
        }
        return min(keep[n - 1], swap[n - 1]);

=======

        int n = nums1.size();
        vector<vector<int>> dp(n, vector<int>(2, 0));
        dp[0][0] = 0;
        dp[0][1] = 1;
        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i][1] = n;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                dp[i][0] = min(dp[i][0], dp[i - 1][0]);
                dp[i][1] = min(dp[i][1], dp[i - 1][1] + 1);
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                dp[i][0] = min(dp[i][0], dp[i - 1][1]);
                dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1);
            }
        }
        return min(dp[n - 1][0], dp[n - 1][1]);
 no_swap[n - 1]);

=======

        int n = nums1.size();
        vector<int>dp(, INT_MAX);
        vectr<int> swap(n, INTMAX);
        dp[0] = 0;
        [0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] > nums1[i - 1] && nums2i] > ums2[i - 1]) {
                dp[i] = dp[i - 1];
                swap[i] = swap[i + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                dp[i] = min(dp[i], swap[i - 1]);
                swap[i] = min(swap[i], dp[i - 1] + 1);
            }
        }
        return min(dp[n - 1], swap[n - 1]);

=======

        int n = nums1.size();
        vector<int> keep(n, 0), swap(n, 0);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            keep[i] = swap[i] = INT_MAX;
            if (nums1[i] > nums1[i-1] && nums2[i] > nums2[i-1]) {
                keep[i] = keep[i-1];
                swap[i] = swap[i-1] + 1;
            }
            if (nums1[i] > nums2[i-1] && nums2[i] > nums1[i-1]) {
                keep[i] = min(keep[i], swap[i-1]);
                swap[i] = min(swap[i], keep[i-1] + 1);
            }
        }
        return min(keep[n-1], swap[n-1]);

=======

        int n = nums1.size();
        int no_swap = 0;
        int swap = 1;
        for (int i = 1; i < n; i++) {
            int no_swap_tmp = INT_MAX;
            int swap_tmp = INT_MAX;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                no_swap_tmp = min(no_swap_tmp, no_swap);
                swap_tmp = min(swap_tmp, swap + 1);
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                no_swap_tmp = min(no_swap_tmp, swap);
                swap_tmp = min(swap_tmp, no_swap + 1);
            }
            no_swap = no_swap_tmp;
            swap = swap_tmp;
        }
        return min(no_swap, swap
=======

        int n = nums1.size();
        vector<int> swap(n, n);
        vector<int> no_swap(n, n);
        swap[0] = 1;
        no_swap[0] = 0;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                no_swap[i] = no_swap[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                no_swap[i] = min(no_swap[i], swap[i - 1]);
                swap[i] = min(swap[i], no_swap[i - 1] + 1);
            }
        }
        return min(swap[n - 1], no_swap[n - 1]);

=======

        int n = nums1.size();
        vector<int> dp(n, INT_MAX);
        vector<int> swap(n, INT_MAX);
        dp[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                dp[i] = dp[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                dp[i] = min(dp[i], swap[i - 1]);
                swap[i] = min(swap[i], dp[i - 1] + 1);
            }
        }
        return min(dp[n - 1], swap[n - 1]);

=======

        int n = nums1.size();
        vector<int> keep(n, 0), swap(n, 0);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            keep[i] = swap[i] = INT_MAX;
            if (nums1[i] > nums1[i-1] && nums2[i] > nums2[i-1]) {
                keep[i] = keep[i-1];
                swap[i] = swap[i-1] + 1;
            }
            if (nums1[i] > nums2[i-1] && nums2[i] > nums1[i-1]) {
                keep[i] = min(keep[i], swap[i-1]);
                swap[i] = min(swap[i], keep[i-1] + 1);
            }
        }
        return min(keep[n-1], swap[n-1]);

=======

        int n = nums1.size();
        int no_swap = 0;
        int swap = 1;
        for (int i = 1; i < n; i++) {
            int no_swap_tmp = INT_MAX;
            int swap_tmp = INT_MAX;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                no_swap_tmp = min(no_swap_tmp, no_swap);
                swap_tmp = min(swap_tmp, swap + 1);
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                no_swap_tmp = min(no_swap_tmp, swap);
                swap_tmp = min(swap_tmp, no_swap + 1);
            }
            no_swap = no_swap_tmp;
            swap = swap_tmp;
        }
        return min(no_swap, swap);
