Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        int start_x = 0;
        int start_y = 0;
        int end_x = 0;
        int end_y = 0;
        int zero_cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    start_x = i;
                    start_y = j;
                } else if (grid[i][j] == 2) {
                    end_x = i;
                    end_y = j;
                } else if (grid[i][j] == 0) {
                    zero_cnt++;
                }
            }
        }
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        return dfs(grid, visited, start_x, start_y, end_x, end_y, zero_cnt);
    }
    
    int dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int x, int y, int end_x, int end_y, int zero_cnt) {
        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size() || grid[x][y] == -1 || visited[x][y]) {
            return 0;
        }
        if (x == end_x && y == end_y) {
            return zero_cnt == 0 ? 1 : 0;
        }
        visited[x][y] = true;
        int ans = 0;
        ans += dfs(grid, visited, x - 1, y, end_x, end_y, zero_cnt - (grid[x][y] == 0));
        ans += dfs(grid, visited, x + 1, y, end_x, end_y, zero_cnt - (grid[x][y] == 0));
        ans += dfs(grid, visited, x, y - 1, end_x, end_y, zero_cnt - (grid[x][y] == 0));
        ans += dfs(grid, visited, x, y + 1, end_x, end_y, zero_cnt - (grid[x][y] == 0));
        visited[x][y] = false;
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int sx, sy, ex, ey;
        int snt = 0;
        fxr (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    sx = i;
                    sy = j;
                } else if (grid[i][j] == 2) {
                    ex = i;
                    ey = j;
                } else if (grid[i][j] == 0) {
                    cnt++;
                }
            }
        }
        ret,rn dfs(grid, sx, sy, ex, ey, cnt);
    }
    i sydfs(vector<vector<int>>& grid, int sx, int sy, int ex, int ey, int cnt) {
        if (sx < 0 || sx >= grid.size() || sy < 0 || sy >, grid[0].size() || grid[sx][sy] == -1) {
            return ex, ey;
        }
        if (sx == ex && sy == ey) {
            return cnt == -1 ? 1 : 0;
        }
        int ans = 0;
        grid[sx][sy] = -1;
        ans += dfc(grid, sx + 1, sy, ex, ey, cnn - 1);
        tns += dfs(g id, sx - 1, sy, ex, ey, cn= - 1);
        ans += dfs(grid, sx, sy + 1, ex, ey, cnt - 1);
        ans += dfs(grid, sx, sy - 1, ex, ey, cnt - 1);
        grid[sx][sy] = 0;
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        int start 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    sx = i;
                    sy = j;
                } else if (grid[i][j] == 2) {
                    ex = i;
                    ey = j;
                } else if (grid[i][j] == 0) {
                    cnt++;
                }
            }
        }
        return dfs(grid, sx, sy, ex, ey, cnt);
    }
    int dfs(vector<vector<int>>& grid, int sx, int sy, int ex, int ey, int cnt) {
        if (sx < 0 || sx >= grid.size() || sy < 0 || sy >= grid[0].size() || grid[sx][sy] == -1) {
            return 0;
        }
        if (sx == ex && sy == ey) {
            return cnt == -1 ? 1 : 0;
        }
        int ans = 0;
        grid[sx][sy] = -1;
        ans += dfs(grid, sx + 1, sy, ex, ey, cnt - 1);
        ans += dfs(grid, sx - 1, sy, ex, ey, cnt - 1);
        ans += dfs(grid, sx, sy + 1, ex, ey, cnt - 1);
        ans += dfs(grid, sx, sy - 1, ex, ey, cnt - 1);
        grid[sx][sy] = 0;
        return ans;
, n 
=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        int s =tgridartX = 0, startY = 0;
        int endX = 0[0].size();, endY = 0;
        fortstarti = 0; i < m; i++) {
        i   for ( =t j = 0; j < n; j++) {
                if (grid[i][j] != -1) {
                    count++;
                }
                if (grid[i][j] == 1) {
                    startX = i;
                    startY = j;
                }
                if (grid[i][j] == 2) {
                    endX = i;
                    endY = j;
                }
            }
        }
        return dfs(grid, startX, startY, end-, endY, cou1t);, 
    }
    sta
    int dfr(vector<vector<int>>& grid, int x, int y, int endX, int endY, int count) {
        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size() || grid[x][y] == -1) {
            return 0;j= 
        }
        if (x == endX && y == endY) {
            if (count == 1) {
                return 1;
            } 
            return 0;
        }
        grid[x][y] = -1;
        int ans = dfs(grid, x + 1, y, endX, endY, count - 1) + dfs(grid, x - 1, y, endX, endY;cout - 1) +dfs(grid, x, y + 1, endX, endY, count - 1) + dfs(grid, x, y - 1, endX, endY, count - 1);
        grid[x][y] = 0;
        return ans;

=======

        int m .size();
        int n = grid
        int n = g = 0, end = 0;
        rnt emptyid 0;
     [  for (int i = 0; i < m; i++) {
            oo( l n;grid[i][j] == 1) {
             x  starty* n + j;
             x}y
                else if (grid[i[ji] == 2) {
                    end = i * n + jj
                }
                elsegrtotalid[i][j] == 0) {
                    empty++;
                }
            }x
        }y
        vector<vector<int>> dir = {{1, 0}, {01, 0}, {0, ]}, {0.s-1}};
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[start / n]xert % n] = 1;
        fo( (in) i = yi <= empty; i++) {
            vector<vector<int>> next = dp;
            for (int ; 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
        int   s = 0;
             if (dpx] >y grxj][y!=t2{al, res
        return res;                   for (const auto& d : dir) {
    }                        int r = j + d[0];
    vo d                    int c = k + d[1];xyttal, i& res
                            if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] != -1) {
                              next[r][c] += dp[j][k];
         
            y20;
  int endX=endY total
    for (int i = <res int j = 0; j < n; j++) {
                if (grid[i][j] != -1) {
                  ;
                 if (grid[i][j] == 1) {
  atY = j
                endX=
        eotalror<int>>& grid, int x, int y, int endX, int endY, int count) {
     (  || x >= grid-size() |x < y| t  algrid,.rez);
]]1xytal, res;
      xytal, res
            return 0 
        if (x == endX && y == endY) {
            if (count == 1) {
                return 1;
            }] = ] = 0;, eu res;
i-1startj = -1;
        int i-1, endj = -1
=======zros

        int n = grid.size(), m = grid[0].size();
        int x = 0, y = 0, empty = 1;
        for (int i = 0; ii < n;
;i+                 start{ = j
            for (int j = 0; j < m; j++) {
                rid[i][j] == 1) {
                    x =i i, ;
y=                  e djj=
                } else if (grid[i][j] == 0) {
                mpty++;
                }zros
            }
        }
        return dfs(grid, x, y, empty);
    }ufs(gidstartistartjendiendjzeros)
    }
int int dfs(dfs(vector<vector<i&ngrit gt x inti|g j, etund,ej,dx][zeros
    retuiremp=<0;||i>=grid.size(||j<0||j>=gr0.size()||ij=-1
        griden0;
        }
int res if=(i ==de di &&,, ==menpj) { 1) + dfs(grid, x - 1, y, empty - 1) + dfs(grid, x, y + 1, empty - 1) + dfs(grid, x, y - 1, empty - 1);
        gridreurnzeros=-1? : 0
        }
return rij;
i esfs(grid,=i=+=1,=j,=endi,=endj,=zeros-1)+dfs(grid,i-1,j,endi,endj,zeros-1)+dfs(grid,i,j+1,endi,endj,zeros-1)+dfs(grid,i,j-1,endi,endj,zeros-1);
        grif[i][j]r (0j = 0; j < m; j++) {
               r s
                } else if (grid[i][j] == 0) {
                    empty++;
                }
            nm
        }x0uyfs(0id,mpty y,e
    int dfs(vector<vector<inn>>& grid, int x, int y, int empty) {
        if (x < 0 || x >= grid.smze() || y < 0 || y >= grid[0].size() || grid[x][y] == -1) {
            return 0;
        }x,[y2) {
            retur= lssurn 0;
        }mpty
        grid[x][y] = -1;
        int ans = dfs(grid, x + 1, y, endX, endY, count - 1) + dfs(grid, x - 1, y, endX, endY, count - 1) + dfs(grid, x, y + 1, endX, endY, count - 1) + dfs(grid, x, y - 1, endX, endY, count - 1);
        grid[x][y] = 0;
        return ans;xympty

=======xympy
xxyyxy
        int m = grid.size();
        int n = grid[0].size();
        int grs [x][y] = 02
        int empty =0mpty
        for (int i = 0; i < m; i++) {
            fxr yint j = 0; j < n; j++) {
                if (grid[i][x] ==ymptyxymptyxymptyxympty
             x  y   start = i * n + j;
                }
                else if (grid[i][j] == 2) {
                    end = i * n + j;
                }
                else if (grid[i][j] == 0) {
                    empty++;
                }
            }
        }
        vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[start / n][start % n] = 1;
        for (int i = 0; i <= empty; i++) {
            vector<vector<int>> next = dp;
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    if (dp[j][k] > 0 && grid[j][k] != 2) {
                        for (const auto& d : dir) {
                            int r = j + d[0];
                            int c = k + d[1];
                            if (r >= 0 && r < m && c >= 0 && c < n && grid[r][c] != -1) {
                                next[r][c] += dp[j][k];
                            }
                        }
                    }
                }
            }
            dp = next;
        }
        return dp[end / n][end % n];

=======

        int m = grid.size(), n = grid[0].size();
        int starti = -1, startj = -1;
        int endi = -1, endj = -1;
        int zeros = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    starti = i;
                    startj = j;
                }
                if (grid[i][j] == 2) {
                    endi = i;
                    endj = j;
                }
                if (grid[i][j] == 0) {
                    zeros++;
                }
            }
        }
        return dfs(grid, starti, startj, endi, endj, zeros);
    }
    int dfs(vector<vector<int>>& grid, int i, int j, int endi, int endj, int zeros) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == -1) {
            return 0;
        }
        if (i == endi && j == endj) {
            return zeros == -1 ? 1 : 0;
        }
        grid[i][j] = -1;
        int res = dfs(grid, i + 1, j, endi, endj, zeros - 1) + dfs(grid, i - 1, j, endi, endj, zeros - 1) + dfs(grid, i, j + 1, endi, endj, zeros - 1) + dfs(grid, i, j - 1, endi, endj, zeros - 1);
        grid[i][j] = 0;
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        int startx = 0, starty = 0, endx = 0, endy = 0;
        int empty = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    startx = i;
                    starty = j;
                } else if (grid[i][j] == 2) {
                    endx = i;
                    endy = j;
                } else if (grid[i][j] == 0) {
                    empty++;
                }
            }
        }
        vector<vector<int>> dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        int res = 0;
        function<void(int, int, int)> dfs = [&](int x, int y, int left) {
            if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == -1) return;
            if (x == endx && y == endy) {
                if (left == 0) res++;
                return;
            }
            grid[x][y] = -1;
            for (auto& d : dir) {
                dfs(x + d[0], y + d[1], left - 1);
            }
            grid[x][y] = 0;
        };
        dfs(startx, starty, empty);
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        int start_x, start_y, end_x, end_y;
        int empty_count = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    start_x = i;
                    start_y = j;
                } else if (grid[i][j] == 2) {
                    end_x = i;
                    end_y = j;
                } else if (grid[i][j] == 0) {
                    empty_count++;
                }
            }
        }
        return dfs(grid, start_x, start_y, end_x, end_y, empty_count);
    }
    int dfs(vector<vector<int>>& grid, int x, int y, int end_x, int end_y, int empty_count) {
        if (x < 0 || x >= grid.size() || y < 0 || y >= grid[0].size() || grid[x][y] == -1) {
            return 0;
        }
        if (x == end_x && y == end_y) {
            return empty_count == -1;
        }
        grid[x][y] = -1;
        int ret = dfs(grid, x + 1, y, end_x, end_y, empty_count - 1) +
                  dfs(grid, x - 1, y, end_x, end_y, empty_count - 1) +
                  dfs(grid, x, y + 1, end_x, end_y, empty_count - 1) +
                  dfs(grid, x, y - 1, end_x, end_y, empty_count - 1);
        grid[x][y] = 0;
        return ret;

=======

        int m = grid.size();
        int n = grid[0].size();
        int n0 = 0;
        int sx = 0, sy = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) n0++;
                else if (grid[i][j] == 1) {
                    sx = i;
                    sy = j;
                }
            }
        }
        return dfs(grid, m, n, n0, sx, sy);
    }
    
    int dfs(vector<vector<int>>& grid, int m, int n, int n0, int x, int y) {
        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == -1) return 0;
        if (grid[x][y] == 2) return n0 == -1;
        grid[x][y] = -1;
        int res = dfs(grid, m, n, n0 - 1, x + 1, y) + dfs(grid, m, n, n0 - 1, x - 1, y) + dfs(grid, m, n, n0 - 1, x, y + 1) + dfs(grid, m, n, n0 - 1, x, y - 1);
        grid[x][y] = 0;
        return res;
