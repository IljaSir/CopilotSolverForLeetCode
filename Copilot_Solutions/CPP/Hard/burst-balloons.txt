Synthesizing 10/10 solutions

=======

        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int len = 1; len <= n; ++len) {
            for (int i = 1; i <= n - len + 1; ++i) {
                int j = i + len - 1;
                for (int k = i; k <= j; ++k) {
                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k + 1][j] + nums[i - 1] * nums[k] * nums[j + 1]);
                }
            }
        }
        return dp[1][n];

=======

        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int len = 1; len <= n; len++) {
            for (int i = 0; i + len <= n; i++) {
                int j = i + len - 1;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = max(dp[i][j], dp[i][k-1] + dp[k+1][j] + nums[i-1]*nums[k]*nums[j+1]);
                }
            }
        }
        return dp[1][n-2];

=======

        int n = nums.size();
        nums.insert(nums.begin(), 1);
        nums.insert(nums.end(), 1);
        vector<vector<int>> dp(n + 2, vector<int>(n + 2));
        for (int len = 1; len <= n; ++len) {
            for (int l = 1; l <= n - len + 1; ++l) {
                int r = l + len - 1;
                for (int i = l; i <= r; ++i) {
                    dp[l][r] = max(dp[l][r], dp[l][i - 1] + dp[i + 1][r] + nums[l - 1] * nums[i] * nums[r + 1]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        vector<int> a(n + 2);
        a[0] = a[n + 1] = 1;
        for (int i = 0; i < n; ++i) {
            a[i + 1] = nums[i];
        }

        vector<vector<int>> dp(n + 2, vector<int>(n + 2));
        for (int len = 1; len <= n; ++len) {
            for (int left = 1; left <= n - len + 1; ++left) {
                int right = left + len - 1;
                for (int i = left; i <= right; ++i) {
                    dp[left][right] = max(dp[left][right],
                        a[left - 1] * a[i] * a[right + 1] + dp[left][i - 1] + dp[i + 1][right]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        vector<int> val(n + 2, 1);
        for (int i = 0; i < n; ++i) {
            val[i + 1] = nums[i];
        }
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int len = 1; len <= n; ++len) {
            for (int i = 1; i <= n - len + 1; ++i) {
                int j = i + len - 1;
                for (int k = i; k <= j; ++k) {
                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k + 1][j] + val[i - 1] * val[k] * val[j + 1]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        vector<int> val(n + 2);
        val[0] = val[n + 1] = 1;
        for (int i = 1; i <= n; ++i) {
            val[i] = nums[i - 1];
        }
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int i = n; i > 0; --i) {
            for (int j = i; j <= n + 1; ++j) {
                for (int k = i; k <= j; ++k) {
                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + val[i - 1] * val[k] * val[j + 1] + dp[k + 1][j]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        vector<int> a(n + 2);
        a[0] = a[n + 1] = 1;
        for (int i = 1; i <= n; i++) a[i] = nums[i - 1];
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int len = 1; len <= n; len++) {
            for (int i = 1; i + len - 1 <= n; i++) {
                int j = i + len - 1;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = max(dp[i][j], dp[i][k - 1] + a[i - 1] * a[k] * a[j + 1] + dp[k + 1][j]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        int dp[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = 0;
            }
        }
        for (int k = 1; k <= n; k++) {
            for (int i = 0; i < n - k + 1; i++) {
                int j = i + k - 1;
                for (int x = i; x <= j; x++) {
                    int left = 1, right = 1;
                    if (i != 0) {
                        left = nums[i - 1];
                    }
                    if (j != n - 1) {
                        right = nums[j + 1];
                    }
                    int before = 0, after = 0;
                    if (i != x) {
                        before = dp[i][x - 1];
                    }
                    if (j != x) {
                        after = dp[x + 1][j];
                    }
                    dp[i][j] = max(dp[i][j], before + left * nums[x] * right + after);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = nums.size();
        vector<int> a(n+2);
        a[0] = a[n+1] = 1;
        for (int i = 0; i < n; ++i) {
            a[i+1] = nums[i];
        }
        vector<vector<int>> dp(n+2, vector<int>(n+2, 0));
        for (int len = 1; len <= n; ++len) {
            for (int i = 1; i <= n-len+1; ++i) {
                int j = i + len - 1;
                for (int k = i; k <= j; ++k) {
                    dp[i][j] = max(dp[i][j], dp[i][k-1] + dp[k+1][j] + a[i-1]*a[k]*a[j+1]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.size();
        vector<int> val(n + 2);
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        val[0] = val[n + 1] = 1;
        for (int i = 1; i <= n; i++) {
            val[i] = nums[i - 1];
        }
        for (int len = 1; len <= n; len++) {
            for (int l = 1; l + len - 1 <= n; l++) {
                int r = l + len - 1;
                for (int k = l; k <= r; k++) {
                    dp[l][r] = max(dp[l][r], dp[l][k - 1] + val[l - 1] * val[k] * val[r + 1] + dp[k + 1][r]);
                }
            }
        }
        return dp[1][n];
