Synthesizing 8/10 solutions

=======

        int count = 0;
        long long product = 1;
        for (int i = left; i <= right; i++) {
            product *= i;
            while (product % 10 == 0) {
                product /= 10;
                count++;
            }
            product %= 10000000000;
        }
        string result = to_string(product);
        if (product >= 100000) {
            result = to_string(product / 100000) + "..." + to_string(product % 100000);
        }
        result += "e" + to_string(count);
        return result;

=======

        int num = 1;
        for (int i = left; i <= right; ++i) {
            num *= i;
        }
        int count = 0;
        while (num % 10 == 0) {
            num /= 10;
            ++count;
        }
        string num_str = to_string(num);
        int len = num_str.size();
        if (len <= 10) {
            return num_str + "e" + to_string(count);
        }
        else {
            return num_str.substr(0, 5) + "..." + num_str.substr(len - 5, 5) + "e" + to_string(count);
        }

=======

        int product = 1;
        for (int i = left; i <= right; ++i) {
            product *= i;
        }
        int count = 0;
        int temp = product;
        while (temp % 10 == 0) {
            ++count;
            temp /= 10;
        }
        int d = 0;
        temp = product;
        while (temp > 0) {
            ++d;
            temp /= 10;
        }
        if (d <= 10) {
            return to_string(product) + "e" + to_string(count);
        }
        else {
            return to_string(product / pow(10, d - 5)) + "..." + to_string(product % (int)pow(10, 5)) + "e" + to_string(count);
        }

=======

        long long product = 1;
        for (int i = left; i <= right; ++i) {
            product *= i;
        }
        string s = to_string(product);
        int n = s.size();
        int count = 0;
        int i = n - 1;
        while (i >= 0 && s[i] == '0') {
            ++count;
            --i;
        }
        if (n - count > 10) {
            string pre = s.substr(0, 5);
            string suf = s.substr(n - count - 5, 5);
            return pre + "..." + suf + "e" + to_string(count);
        }
        else {
            return s.substr(0, n - count) + "e" + to_string(count);
        }

=======

        long long int n = 1;
        for (int i = left; i <= right; i++) {
            n *= i;
            while (n % 10 == 0)
                n /= 10;
            n %= 100000;
        }
        string s = to_string(n);
        while (s.size() < 5)
            s = "0" + s;
        int cnt = 0;
        while (right > 0) {
            right /= 10;
            cnt++;
        }
        return s + "e" + to_string(cnt);

=======

        long long product = 1;
        for (int i = left; i <= right; i++) {
            product *= i;
        }
        string productStr = to_string(product);
        int tailZeros = 0;
        for (int i = productStr.size() - 1; i >= 0; i--) {
            if (productStr[i] == '0') {
                tailZeros++;
            } else {
                break;
            }
        }
        int digits = productStr.size() - tailZeros;
        if (digits > 10) {
            productStr = productStr.substr(0, 5) + "..." + productStr.substr(productStr.size() - 5, 5);
        }
        return productStr + "e" + to_string(tailZeros);

=======

        int n = right - left + 1;
        int c = 0;
        for (int i = left; i <= right; i++) {
            while (i % 10 == 0) {
                c++;
                i /= 10;
            }
        }
        string pre = to_string(left), suf = to_string(right);
        if (pre.size() + suf.size() > 10) {
            pre = pre.substr(0, 5);
            suf = suf.substr(suf.size() - 5);
        }
        if (c > 0) {
            pre += "...";
        }
        return pre + suf + "e" + to_string(c);

=======

        long long int product = 1;
        for(int i = left; i <= right; i++){
            product *= i;
        }
        string s = to_string(product);
        int n = s.length();
        int i = n - 1;
        while(i >= 0 && s[i] == '0'){
            i--;
        }
        int count = n - i - 1;
        string pre = s.substr(0, 5);
        string suf = s.substr(n - 5, 5);
        string e = "e" + to_string(count);
        return pre + "..." + suf + e;
