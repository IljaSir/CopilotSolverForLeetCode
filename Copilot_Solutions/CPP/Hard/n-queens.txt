Synthesizing 10/10 solutions

=======

        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        solve(ans, board, 0, n);
        return ans;
    }
    void solve(vector<vector<string>>& ans, vector<string>& board, int row, int n) {
        if (row == n) {
            ans.push_back(board);
            return;
        }
        for (int col = 0; col < n; col++) {
            if (check(board, row, col, n)) {
                board[row][col] = 'Q';
                solve(ans, board, row + 1, n);
                board[row][col] = '.';
            }
        }
    }
    bool check(vector<string>& board, int row, int col, int n) {
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') return false;
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }
        return true;

=======

        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        solve(ans, board, 0, n);
        return ans;
    }
    void solve(vector<vector<string>>& ans, vector<string>& board, int row, int n) {
        if (row == n) {
            ans.push_back(board);
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(board, row, col, n)) {
                board[row][col] = 'Q';
                solve(ans, board, row + 1, n);
                board[row][col] = '.';
            }
        }
    }
    bool isValid(vector<string>& board, int row, int col, int n) {
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> board(n, string(n, '.'));
        solveNQueens(res, board, 0);
        return res;
    }
    void solveNQueens(vector<vector<string>>& res, vector<string>& board, int row) {
        if (row == board.size()) {
            res.push_back(board);
            return;
        }
        int n = board[row].size();
        for (int col = 0; col < n; col++) {
            if (!isValid(board, row, col)) {
                continue;
            }
            board[row][col] = 'Q';
            solveNQueens(res, board, row + 1);
            board[row][col] = '.';
        }
    }
    bool isValid(vector<string>& board, int row, int col) {
        int n = board.size();
        for (int i = 0; i < n; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        return true;

=======

        vector<vector<string>> result;
        vector<string> board(n, string(n, '.'));
        solve(result, board, 0, n);
        return result;
    }
    
    void solve(vector<vector<string>> &result, vector<string> &board, int row, int n) {
        if (row == n) {
            result.push_back(board);
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (isValid(board, row, col, n)) {
                board[row][col] = 'Q';
                solve(result, board, row + 1, n);
                board[row][col] = '.';
            }
        }
    }
    
    bool isValid(vector<string> &board, int row, int col, int n) {
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        
        return true;

=======

        vector<vector<string>> result;
        vector<string> board(n, string(n, '.'));
        backtrack(result, board, 0, n);
        return result;
    }
    
    void backtrack(vector<vector<string>> &result, vector<string> &board, int row, int &n) {
        if (row == n) {
            result.push_back(board);
            return;
        }
        
        for (int col = 0; col < n; ++col) {
            if (isValid(board, row, col)) {
                board[row][col] = 'Q';
                backtrack(result, board, row + 1, n);
                board[row][col] = '.';
            }
        }
    }
    
    bool isValid(vector<string> &board, int row, int col) {
        int n = board.size();
        for (int i = 0; i < n; ++i) {
            if (board[i][col] == 'Q') return false;
        }
        
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; --i, ++j) {
            if (board[i][j] == 'Q') return false;
        }
        
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {
            if (board[i][j] == 'Q') return false;
        }
        
        return true;

=======

        vector<vector<string>> res;
        vector<string> board(n, string(n, '.'));
        dfs(res, board, 0, n);
        return res;
    }

    void dfs(vector<vector<string>>& res, vector<string>& board, int row, int n) {
        if (row == n) {
            res.push_back(board);
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(board, row, col, n)) {
                board[row][col] = 'Q';
                dfs(res, board, row + 1, n);
                board[row][col] = '.';
            }
        }
    }

    bool isValid(vector<string>& board, int row, int col, int n) {
        for (int i = 0; i < n; i++) {
            if (board[i][col] == 'Q') return false;
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') return false;
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 'Q') return false;
        }
        return true;

=======

        vector<vector<string>> result;
        vector<string> board(n, string(n, '.'));
        solveNQueens(0, board, result);
        return result;
    }
    
    void solveNQueens(int row, vector<string>& board, vector<vector<string>>& result) {
        if (row == board.size()) {
            result.push_back(board);
            return;
        }
        for (int col = 0; col < board.size(); ++col) {
            if (isValid(board, row, col)) {
                board[row][col] = 'Q';
                solveNQueens(row + 1, board, result);
                board[row][col] = '.';
            }
        }
    }
    
    bool isValid(vector<string>& board, int row, int col) {
        for (int i = 0; i < board.size(); ++i) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.size(); --i, ++j) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        return true;

=======

        vector<vector<string>> result;
        vector<string> temp(n, string(n, '.'));
        solveNQueens(result, temp, n, 0);
        return result;
    }
    void solveNQueens(vector<vector<string>> &result, vector<string> &temp, int n, int row) {
        if (row == n) {
            result.push_back(temp);
            return;
        }
        for (int col = 0; col < n; col++) {
            if (isValid(temp, row, col, n)) {
                temp[row][col] = 'Q';
                solveNQueens(result, temp, n, row + 1);
                temp[row][col] = '.';
            }
        }
    }
    bool isValid(vector<string> &temp, int row, int col, int n) {
        for (int i = 0; i < row; i++) {
            if (temp[i][col] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (temp[i][j] == 'Q') {
                return false;
            }
        }
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (temp[i][j] == 'Q') {
                return false;
            }
        }
        return true;

=======

        vector<vector<string>> res;
        vector<int> col(n, 0);
        vector<int> diag(2*n, 0);
        vector<int> antiDiag(2*n, 0);
        vector<string> board(n, string(n, '.'));
        backtrack(res, board, 0, col, diag, antiDiag);
        return res;
    }
    
    void backtrack(vector<vector<string>>& res, vector<string>& board, int row, vector<int>& col, vector<int>& diag, vector<int>& antiDiag){
        int n = board.size();
        if(row == n){
            res.push_back(board);
            return;
        }
        for(int i = 0; i < n; i++){
            if(col[i] == 0 && diag[row+i] == 0 && antiDiag[row-i+n] == 0){
                col[i] = diag[row+i] = antiDiag[row-i+n] = 1;
                board[row][i] = 'Q';
                backtrack(res, board, row+1, col, diag, antiDiag);
                board[row][i] = '.';
                col[i] = diag[row+i] = antiDiag[row-i+n] = 0;
            }
        }

=======

        vector<vector<string>> res;
        vector<int> row(n, -1);
        dfs(n, 0, row, res);
        return res;
    }
    
    void dfs(int n, int cur, vector<int>& row, vector<vector<string>>& res) {
        if (cur == n) {
            vector<string> board(n, string(n, '.'));
            for (int i = 0; i < n; ++i) {
                board[i][row[i]] = 'Q';
            }
            res.push_back(board);
            return;
        }
        for (int i = 0; i < n; ++i) {
            if (isValid(cur, i, row)) {
                row[cur] = i;
                dfs(n, cur + 1, row, res);
                row[cur] = -1;
            }
        }
    }
    
    bool isValid(int x, int y, vector<int>& row) {
        for (int i = 0; i < x; ++i) {
            if (y == row[i] || abs(x - i) == abs(y - row[i])) {
                return false;
            }
        }
        return true;
