Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == ' ') i++;
        if (i < n && (s[i] == '+' || s[i] == '-')) i++;
        bool isNum = false;
        while (i < n && isdigit(s[i])) {
            i++;
            isNum = true;
        }
        if (i < n && s[i] == '.') {
            i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        if (isNum && i < n && (s[i] == 'e' || s[i] == 'E')) {
            i++;
            isNum = false;
            if (i < n && (s[i] == '+' || s[i] == '-')) i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        while (i < n && s[i] == ' ') i++;
        return isNum && i == n;

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == ' ') i++;
        if (i < n && (s[i] == '+' || s[i] == '-')) i++;
        bool isNum = false;
        while (i < n && isdigit(s[i])) {
            i++;
            isNum = true;
        }
        if (i < n && s[i] == '.') {
            i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        if (i < n && (s[i] == 'e' || s[i] == 'E')) {
            if (!isNum) return false;
            i++;
            isNum = false;
            if (i < n && (s[i] == '+' || s[i] == '-')) i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        while (i < n && s[i] == ' ') i++;
        return isNum && i == n;

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == ' ') ++i;
        if (i < n && (s[i] == '+' || s[i] == '-')) ++i;
        bool isNum = false;
        while (i < n && isdigit(s[i])) {
            ++i;
            isNum = true;
        }
        if (i < n && s[i] == '.') {
            ++i;
            while (i < n && isdigit(s[i])) {
                ++i;
                isNum = true;
            }
        }
        if (isNum && i < n && (s[i] == 'e' || s[i] == 'E')) {
            ++i;
            isNum = false;
            if (i < n && (s[i] == '+' || s[i] == '-')) ++i;
            while (i < n && isdigit(s[i])) {
                ++i;
                isNum = true;
            }
        }
        while (i < n && s[i] == ' ') ++i;
        return isNum && i == n;

=======

        int n = s.length();
        int i = 0;
        while (i < n && s[i] == ' ') i++;
        if (i < n && (s[i] == '+' || s[i] == '-')) i++;
        bool isNum = false;
        while (i < n && isdigit(s[i])) {
            i++;
            isNum = true;
        }
        if (i < n && s[i] == '.') {
            i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        if (i < n && (s[i] == 'e' || s[i] == 'E')) {
            if (!isNum) return false;
            i++;
            isNum = false;
            if (i < n && (s[i] == '+' || s[i] == '-')) i++;
            while (i < n && isdigit(s[i])) {
                i++;
                isNum = true;
            }
        }
        while (i < n && s[i] == ' ') i++;
        return isNum && i == n;

=======

        int n = s.size();
        int i = 0;
        while (s[i] == ' ') {
            ++i;
        }
        if (s[i] == '+' || s[i] == '-') {
            ++i;
        }
        bool num = false;
        bool dot = false;
        bool exp = false;
        while (i < n) {
            if (isdigit(s[i])) {
                num = true;
            } else if (s[i] == '.') {
                if (dot || exp) {
                    return false;
                }
                dot = true;
            } else if (s[i] == 'e' || s[i] == 'E') {
                if (exp || !num) {
                    return false;
                }
                exp = true;
                num = false;
            } else if (s[i] == '+' || s[i] == '-') {
                if (s[i - 1] != 'e' && s[i - 1] != 'E') {
                    return false;
                }
            } else if (s[i] == ' ') {
                break;
            } else {
                return false;
            }
            ++i;
        }
        while (s[i] == ' ') {
            ++i;
        }
        return num && i == n;

=======

        int i = 0;
        int len = s.length();
        // skip whitespace
        while (i < len && s[i] == ' ') {
            i++;
        }
        // skip sign
        if (i < len && (s[i] == '+' || s[i] == '-')) {
            i++;
        }
        // check digits
        bool isDigit = false;
        while (i < len && isdigit(s[i])) {
            i++;
            isDigit = true;
        }
        // check dot
        if (i < len && s[i] == '.') {
            i++;
            while (i < len && isdigit(s[i])) {
                i++;
                isDigit = true;
            }
        }
        // check e
        if (isDigit && i < len && (s[i] == 'e' || s[i] == 'E')) {
            i++;
            isDigit = false;
            if (i < len && (s[i] == '+' || s[i] == '-')) {
                i++;
            }
            while (i < len && isdigit(s[i])) {
                i++;
                isDigit = true;
            }
        }
        // skip whitespace
        while (i < len && s[i] == ' ') {
            i++;
        }
        return isDigit && i == len;

=======

        int len = s.size();
        int i = 0;
        // skip leading spaces
        while (i < len && s[i] == ' ') {
            i++;
        }
        // skip leading sign
        if (s[i] == '-' || s[i] == '+') {
            i++;
        }
        // skip leading zeros
        while (i < len && s[i] == '0') {
            i++;
        }
        // check numbers
        bool hasNum = false;
        while (i < len && isdigit(s[i])) {
            i++;
            hasNum = true;
        }
        // check dot
        bool hasDot = false;
        if (i < len && s[i] == '.') {
            i++;
            hasDot = true;
            // skip trailing zeros
            while (i < len && s[i] == '0') {
                i++;
            }
            // check numbers
            while (i < len && isdigit(s[i])) {
                i++;
                hasNum = true;
            }
        }
        // check exponent
        if (i < len && (s[i] == 'e' || s[i] == 'E')) {
            i++;
            if (i < len && (s[i] == '-' || s[i] == '+')) {
                i++;
            }
            // check numbers
            bool hasExpNum = false;
            while (i < len && isdigit(s[i])) {
                i++;
                hasExpNum = true;
            }
            if (!hasExpNum) {
                return false;
            }
        }
        // skip trailing spaces
        while (i < len && s[i] == ' ') {
            i++;
        }
        return hasNum && i == len;

=======

        int n = s.length();
        bool num = false; // either a digit or dot
        bool numAfterE = true; // if num is true, then numAfterE is true
        bool e = false;
        bool sign = false; // either a plus or minus
        for(int i=0; i<n; i++){
            if(s[i] >= '0' && s[i] <= '9'){
                num = true;
                numAfterE = true;
            }
            else if(s[i] == 'e' || s[i] == 'E'){
                if(e || !num) return false;
                numAfterE = false;
                e = true;
            }
            else if(s[i] == '+' || s[i] == '-'){
                if(sign || num || i > 0 && s[i-1] != 'e' && s[i-1] != 'E') return false;
                sign = true;
            }
            else if(s[i] == '.'){
                if(e || num && s[i-1] == 'e' && s[i-1] == 'E' || num && i > 0 && s[i-1] == '.') return false;
                num = true;
            }
            else return false;
        }
        
        return num && numAfterE;
