Synthesizing 10/10 solutions

=======

        int n = words.size();
        vector<vector<int>> overlap(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    int m = min(words[i].size(), words[j].size());
                    for (int k = m; k >= 0; --k) {
                        if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                            overlap[i][j] = k;
                            break;
                        }
                    }
                }
            }
        }
        vector<vector<int>> dp(1 << n, vector<int>(n, INT_MAX / 2));
        vector<vector<int>> parent(1 << n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            dp[1 << i][i] = words[i].size();
        }
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) {
                    continue;
                }
                int pmask = mask ^ (1 << bit);
                for (int i = 0; i < n; ++i) {
                    if (dp[pmask][i] + overlap[i][bit] < dp[mask][bit]) {
                        dp[mask][bit] = dp[pmask][i] + overlap[i][bit];
                        parent[mask][bit] = i;
                    }
                }
            }
        }
        vector<int> perm(n);
        int t = (1 << n) - 1;
        iota(perm.begin(), perm.end(), 0);
        int last = min_element(dp.back().begin(), dp.back().end()) - dp.back().begin();
        string res = words[last];
        for (int mask = t; mask; mask = t) {
            int i = parent[mask][last];
            int bit = last;
            t = mask ^ (1 << bit);
            res = words[i].substr(0, words[i].size() - overlap[i][bit]) + res;
            last = i;
        }
        return res;

=======

        int n = words.size();
        vector<vector<int>> overlap(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                for (int k = min(words[i].size(), words[j].size()); k >= 0; --k) {
                    if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                        overlap[i][j] = k;
                        break;
                    }
                }
            }
        }
        vector<vector<string>> dp(1 << n, vector<string>(n));
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) continue;
                int pmask = mask ^ (1 << bit);
                if (pmask == 0) {
                    dp[mask][bit] = words[bit];
                } else {
                    for (int i = 0; i < n; ++i) {
                        if (dp[pmask][i].empty()) continue;
                        string cand = dp[pmask][i] + words[bit].substr(overlap[i][bit]);
                        if (dp[mask][bit].empty() || cand.size() < dp[mask][bit].size()) {
                            dp[mask][bit] = cand;
                        }
                    }
                }
            }
        }
        string ans;
        for (string cand : dp[(1 << n) - 1]) {
            if (ans.empty() || cand.size() < ans.size()) ans = cand;
        }
        return ans;

=======

        int n = words.size();
        vector<vector<int>> overlap(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    for (int k = min(words[i].size(), words[j].size()); k >= 0; --k) {
                        if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                            overlap[i][j] = k;
                            break;
                        }
                    }
                }
            }
        }
        vector<vector<string>> dp(1 << n, vector<string>(n));
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) continue;
                int pmask = mask ^ (1 << bit);
                if (pmask == 0) {
                    dp[mask][bit] = words[bit];
                } else {
                    for (int i = 0; i < n; ++i) {
                        if (dp[pmask][i].size() > 0 && dp[mask][bit].size() < dp[pmask][i].size() + words[bit].size() - overlap[i][bit]) {
                            dp[mask][bit] = dp[pmask][i] + words[bit].substr(overlap[i][bit]);
                        }
                    }
                }
            }
        }
        string res = dp[(1 << n) - 1][0];
        for (int i = 1; i < n; ++i) {
            if (res.size() > dp[(1 << n) - 1][i].size()) {
                res = dp[(1 << n) - 1][i];
            }
        }
        return res;

=======

        int n = words.size();
        vector<vector<int>> overlap(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    int m = min(words[i].size(), words[j].size());
                    for (int k = m; k >= 0; --k) {
                        if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                            overlap[i][j] = k;
                            break;
                        }
                    }
                }
            }
        }
        vector<vector<string>> dp(1 << n, vector<string>(n));
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) continue;
                int pmask = mask ^ (1 << bit);
                if (pmask == 0) {
                    dp[mask][bit] = words[bit];
                } else {
                    for (int i = 0; i < n; ++i) {
                        if (dp[pmask][i].empty()) continue;
                        string t = dp[pmask][i] + words[bit].substr(overlap[i][bit]);
                        if (dp[mask][bit].empty() || t.size() < dp[mask][bit].size()) {
                            dp[mask][bit] = t;
                        }
                    }
                }
            }
        }
        string res;
        for (string& s : dp.back()) {
            if (res.empty() || s.size() < res.size()) {
                res = s;
            }
        }
        return res;

=======

        int n = words.size();
        vector<vector<int>> g(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                g[i][j] = overlap(words[i], words[j]);
            }
        }
        vector<vector<string>> dp(1 << n, vector<string>(n));
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) continue;
                int pmask = mask ^ (1 << bit);
                if (pmask == 0) {
                    dp[mask][bit] = words[bit];
                } else {
                    for (int i = 0; i < n; ++i) {
                        if (dp[pmask][i].empty()) continue;
                        string t = dp[pmask][i] + words[bit].substr(g[i][bit]);
                        if (dp[mask][bit].empty() || t.length() < dp[mask][bit].length()) {
                            dp[mask][bit] = t;
                        }
                    }
                }
            }
        }
        string res;
        for (int i = 0; i < n; ++i) {
            if (res.empty() || dp[(1 << n) - 1][i].length() < res.length()) {
                res = dp[(1 << n) - 1][i];
            }
        }
        return res;

=======

        int n = words.size();
        vector<vector<int>> overlap(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                for (int k = min(words[i].size(), words[j].size()); k >= 0; --k) {
                    if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                        overlap[i][j] = k;
                        break;
                    }
                }
            }
        }
        vector<vector<string>> dp(1 << n, vector<string>(n));
        for (int mask = 1; mask < (1 << n); ++mask) {
            for (int bit = 0; bit < n; ++bit) {
                if (!(mask & (1 << bit))) continue;
                int pmask = mask ^ (1 << bit);
                if (pmask == 0) {
                    dp[mask][bit] = words[bit];
                } else {
                    for (int i = 0; i < n; ++i) {
                        if (dp[pmask][i].empty() || overlap[i][bit] == 0) continue;
                        string cand = dp[pmask][i] + words[bit].substr(overlap[i][bit]);
                        if (dp[mask][bit].empty() || cand.size() < dp[mask][bit].size()) {
                            dp[mask][bit] = cand;
                        }
                    }
                }
            }
        }
        string ans;
        for (int i = 0; i < n; ++i) {
            if (ans.empty() || dp[(1 << n) - 1][i].size() < ans.size()) {
                ans = dp[(1 << n) - 1][i];
            }
        }
        return ans;

=======

        int n = words.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int k = 0;
                for (k = 0; k < min(words[i].size(), words[j].size()); k++) {
                    if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {
                        dp[i][j] = k;
                    }
                }
            }
        }
        vector<vector<int>> path(n, vector<int>(1 << n, -1));
        vector<vector<int>> dp2(n, vector<int>(1 << n, 0));
        for (int i = 0; i < n; i++) {
            dp2[i][1 << i] = words[i].size();
        }
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    for (int k = 0; k < n; k++) {
                        if (j != k && i & (1 << k)) {
                            int tmp = dp2[j][i ^ (1 << j)] + words[j].size() - dp[k][j];
                            if (tmp > dp2[k][i]) {
                                dp2[k][i] = tmp;
                                path[k][i] = j;
                            }
                        }
                    }
                }
            }
        }
        int last = 0;
        int max_len = 0;
        for (int i = 0; i < n; i++) {
            if (dp2[i][(1 << n) - 1] > max_len) {
                max_len = dp2[i][(1 << n) - 1];
                last = i;
            }
        }
        string ans;
        int tmp = (1 << n) - 1;
        while (last != -1) {
            ans = words[last].substr(words[last].size() - dp[path[last][tmp]][last]) + ans;
            int tmp2 = path[last][tmp];
            tmp ^= (1 << last);

=======

        int n = words.size();
        vector<vector<string>> dp(n, vector<string>(n, ""));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                string w1 = words[i], w2 = words[j];
                int len = min(w1.size(), w2.size());
                for (int k = len; k >= 0; --k) {
                    if (w1.substr(w1.size() - k) == w2.substr(0, k)) {
                        dp[i][j] = w2.substr(k);
                        break;
                    }
                }
            }
        }
        vector<vector<string>> dp2(1 << n, vector<string>(n, ""));
        for (int i = 0; i < n; ++i) {
            dp2[1 << i][i] = words[i];
        }
        for (int i = 0; i < (1 << n); ++i) {
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) continue;
                for (int k = 0; k < n; ++k) {
                    if (i & (1 << k)) continue;
                    string s = dp2[i][j] + dp[j][k];
                    if (dp2[i | (1 << k)][k] == "" || dp2[i | (1 << k)][k].size() > s.size()) {
                        dp2[i | (1 << k)][k] = s;
                    }
                }
            }
        }
        int minLen = INT_MAX, minIdx = 0;
        for (int i = 0; i < n; ++i) {
            if (minLen > dp2[(1 << n) - 1][i].size()) {
                minLen = dp2[(1 << n) - 1][i].size();
                minIdx = i;
            }
        }
        return dp2[(1 << n) - 1][minIdx];

=======

        int n = words.size();
        // dp[i][j] means the shortest superstring of words in i, ending with j
        vector<vector<string>> dp(1<<n, vector<string>(n, ""));
        // overlap[i][j] means the overlap between words[i] and words[j]
        vector<vector<int>> overlap(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int m = min(words[i].size(), words[j].size());
                for (int k = m; k >= 0; k--) {
                    if (words[i].substr(words[i].size()-k) == words[j].substr(0, k)) {
                        overlap[i][j] = k;
                        break;
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) dp[1<<i][i] = words[i];
        for (int i = 0; i < 1<<n; i++) {
            for (int j = 0; j < n; j++) {
                if ((i&(1<<j)) == 0) continue;
                for (int k = 0; k < n; k++) {
                    if ((i&(1<<k)) > 0 || overlap[j][k] == 0) continue;
                    string s = dp[i|(1<<k)][k];
                    if (dp[i][j].size() + s.size() - overlap[j][k] < dp[i|(1<<k)][j].size() || dp[i|(1<<k)][j] == "") {
                        dp[i|(1<<k)][j] = dp[i][j] + s.substr(overlap[j][k]);
                    }
                }
            }
        }
        string res = dp[(1<<n)-1][0];
        for (int i = 0; i < n; i++) {
            if (dp[(1<<n)-1][i].size() < res.size()) res = dp[(1<<n)-1][i];
        }
        return res;

=======

        return "";
