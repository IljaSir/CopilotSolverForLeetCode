Synthesizing 10/10 solutions

=======

        int n = s.size();
        long long ans = 0;
        int mx = 0;
        for (int i = n - 1; i >= 0; --i) {
            mx = max(mx, 0);
            if (s[i] == s[n - 1]) {
                ++mx;
            }
            ans += mx;
        }
        return ans;

=======

        int n = s.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            int j = i, k = n - 1;
            while (j < n && s[j] == s[k]) {
                ++j;
                --k;
            }
            ans += (j - i);
            i = j - 1;
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n);
        int k = 0;
        for (int i = 1; i < n; ++i) {
            while (k > 0 && s[i] != s[k]) {
                k = dp[k - 1];
            }
            if (s[i] == s[k]) {
                ++k;
            }
            dp[i] = k;
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += dp[i];
        }
        return ans;

=======

        int n = s.length();
        long long ans = 0;
        int mx = 0;
        for (int i = n - 1; i >= 0; i--) {
            mx = max(mx, s[i] - 'a');
            ans += mx;
        }
        return ans;

=======

        int n = s.length();
        vector<int> dp(n);
        int i = 0, j = 1;
        while (j < n) {
            if (s[i] == s[j]) {
                dp[j] = i + 1;
                i++;
                j++;
            } else {
                if (i == 0) {
                    j++;
                } else {
                    i = dp[i - 1];
                }
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dp[i];
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n + 1, 0);
        for (int i = n - 1; i >= 0; i--) {
            int j = i + 1, k = n - 1;
            while (j < n && s[i] == s[j]) {
                dp[i] = max(dp[i], dp[j] + 1);
                j++;
            }
            while (k > i && s[i] == s[k]) {
                dp[i] = max(dp[i], dp[k] + 1);
                k--;
            }
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            res += dp[i];
        }
        return res;

=======

        long long sum = 0;
        for (int i = 0; i < s.length(); i++) {
            sum += s.length() - i;
        }
        return sum;

=======

        int n = s.size();
        long long ans = 0;
        for (int i = 0, j = n - 1; i < n; i++, j--) {
            ans += j - max(s.find(s[i], i + 1), s.rfind(s[j], j - 1));
        }
        return ans;

=======

        int n = s.length();
        int score = 0;
        int maxScore = 0;
        for(int i = n - 1; i >= 0; i--){
            if(s[i] == s[n - 1]){
                score++;
            }
            else{
                score = 0;
            }
            maxScore = max(maxScore, score);
        }
        return (long long)maxScore * n + (long long)(n - 1) * n / 2;

=======

        long long n = s.size();
        long long s1 = 0;
        long long s2 = 0;
        for (long long i = 0; i < n; i++) {
            s1 += s[i] * (n - i);
            s2 += s[i] * (i + 1);
        }
        return s1 - s2;
