Synthesizing 1/10 solutions

=======

      int n = boxes.size();
      vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n)));
      return dfs(boxes, dp, 0, n - 1, 0);
    }
    int dfs(vector<int>& boxes, vector<vector<vector<int>>>& dp, int l, int r, int k) {
      if (l > r) return 0;
      if (dp[l][r][k] > 0) return dp[l][r][k];
      while (r > l && boxes[r] == boxes[r - 1]) {
        r--;
        k++;
      }
      dp[l][r][k] = dfs(boxes, dp, l, r - 1, 0) + (k + 1) * (k + 1);
      for (int i = l; i < r; i++) {
        if (boxes[i] == boxes[r]) {
          dp[l][r][k] = max(dp[l][r][k], dfs(boxes, dp, l, i, k + 1) + dfs(boxes, dp, i + 1, r - 1, 0));
        }
      }
      return dp[l][r][k];
