Synthesizing 6/10 solutions

=======

        int n = password.size();
        int lower = 1, upper = 1, digit = 1;
        vector<int> v;
        for (int i = 0; i < n;) {
            if (islower(password[i])) lower = 0;
            if (isupper(password[i])) upper = 0;
            if (isdigit(password[i])) digit = 0;
            int j = i;
            while (i < n && password[i] == password[j]) i++;
            if (i - j >= 3) v.push_back(i - j);
        }
        int missing = lower + upper + digit;
        if (n < 6) {
            return max(missing, 6 - n);
        } else if (n <= 20) {
            return max(missing, check(v));
        } else {
            int del = n - 20;
            int need = check(v);
            if (del >= need) return del;
            else {
                int ans = 0;
                for (int i = 0; i < v.size(); i++) {
                    if (del >= v[i] - 2) {
                        del -= v[i] - 2;
                        v[i] = 2;
                    } else if (del >= v[i] % 3) {
                        v[i] -= del;
                        del = 0;
                    }
                    if (v[i] >= 3) ans++;
                }
                return n - 20 + max(missing, ans);
            }
        }
    }
    
    int check(vector<int>& v) {
        int ans = 0;
        for (int i = 0; i < v.size(); i++) {
            ans += v[i] / 3;
        }
        return ans;

=======

        int n = password.size();
        int add = max(6 - n, 0), del = max(n - 20, 0);
        int lower = 1, upper = 1, digit = 1;
        for (char c : password) {
            if (isdigit(c)) digit = 0;
            else if (islower(c)) lower = 0;
            else if (isupper(c)) upper = 0;
        }
        int missing = (lower + upper + digit);
        if (n < 6) {
            return max(missing, add);
        } else {
            int change = 0;
            vector<int> v;
            for (int i = 0, j = 0; i < n; i = j) {
                while (j < n && password[i] == password[j]) j++;
                if (j - i >= 3) {
                    v.push_back(j - i);
                    change += j - i - 2;
                }
            }
            if (n <= 20) {
                return max(missing, change);
            } else {
                int need_del = n - 20;
                change -= min(need_del, del);
                for (int k = 1; k < 3; k++) {
                    for (int i = 0; i < v.size() && need_del > 0; i++) {
                        if (v[i] < 3 || v[i] % 3 != (k - 1)) continue;
                        v[i] -= min(need_del, k);
                        need_del -= k;
                    }
                }
                change -= need_del / 3;
                return n - 20 + max(missing, change);
            }
        }

=======

        int len = password.length();
        int need = 0;
        if (len < 6) {
            need = 6 - len;
        } else if (len > 20) {
            need = len - 20;
        }
        int lower = 0, upper = 0, digit = 0;
        int rep = 0;
        for (int i = 0; i < len; i++) {
            if (password[i] >= 'a' && password[i] <= 'z') {
                lower = 1;
            } else if (password[i] >= 'A' && password[i] <= 'Z') {
                upper = 1;
            } else if (password[i] >= '0' && password[i] <= '9') {
                digit = 1;
            }
            int j = i;
            while (j < len && password[j] == password[i]) {
                j++;
            }
            int count = j - i;
            if (count >= 3) {
                rep += count / 3;
            }
            i = j - 1;
        }
        int missing = 3 - (lower + upper + digit);
        if (len <= 20) {
            return max(need, missing);
        } else {
            int del = len - 20;
            if (del <= rep) {
                return del + max(need, missing);
            } else {
                return del - rep + max(need, missing);
            }
        }

=======

        int n = password.size();
        int need = 3;
        if (n > 5) need--;
        if (n > 8) need--;
        int lower = 1, upper = 1, digit = 1;
        for (char c : password) {
            if (islower(c)) lower = 0;
            if (isupper(c)) upper = 0;
            if (isdigit(c)) digit = 0;
        }
        int missing = (lower + upper + digit);
        if (n < 6) {
            return max(need, missing);
        }
        int one = 0, two = 0;
        for (int i = 0, j; i < n; i = j) {
            for (j = i; j < n && password[i] == password[j]; j++);
            int len = j - i;
            if (len >= 3) {
                one += len / 3;
                if (len % 3 == 0) two++;
            }
        }
        if (n <= 20) {
            return max(need, missing) + one;
        }
        int del = n - 20;
        one -= min(del, one);
        two -= min(max(del - one, 0), two * 2) / 2;
        three -= min(max(del - one - 2 * two, 0), three * 3) / 3;
        return del + max(need, missing) + one + two + three;

=======

        int n = password.size();
        int upper = 1, lower = 1, digit = 1, total = 0;
        for (char c : password) {
            if (isdigit(c)) {
                digit = 0;
            } else if (islower(c)) {
                lower = 0;
            } else if (isupper(c)) {
                upper = 0;
            }
        }
        int missing = upper + lower + digit;
        if (n < 6) {
            return max(6 - n, missing);
        } else {
            int one = 0, two = 0;
            for (int i = 2, j = 0; i < n; i++, j++) {
                if (password[i] == password[i - 1] && password[i - 1] == password[i - 2]) {
                    int len = 2;
                    while (i < n && password[i] == password[i - 1]) {
                        i++;
                        len++;
                    }
                    total += len / 3;
                    if (len % 3 == 0) {
                        one++;
                    } else if (len % 3 == 1) {
                        two++;
                    }
                }
            }
            if (n > 20) {
                int del = n - 20;
                total -= min(del, one);
                total -= min(max(del - one, 0), two * 2) / 2;
                total -= max(del - one - 2 * two, 0) / 3;
                return del + max(missing, total);
            } else {
                return max(6 - n, missing) + total;
            }
        }

=======

        int ans = 0;
        int n = password.size();
        int needType = 3;
        if (n < 6) {
            ans = max(6 - n, needType);
        }
        int lower = 1, upper = 1, digit = 1;
        vector<int> repeat;
        for (int i = 0, j = 0; i < n; i = j) {
            while (j < n && password[i] == password[j]) {
                j++;
            }
            if (password[i] >= 'a' && password[i] <= 'z') {
                lower = 0;
            }
            if (password[i] >= 'A' && password[i] <= 'Z') {
                upper = 0;
            }
            if (password[i] >= '0' && password[i] <= '9') {
                digit = 0;
            }
            if (j - i >= 3) {
                repeat.push_back(j - i);
            }
        }
        needType = lower + upper + digit;
        if (n <= 20) {
            ans = max(needType, ans);
            int one = 0, two = 0;
            for (int k: repeat) {
                one += k / 3;
                if (k % 3 == 0) {
                    two++;
                }
            }
            ans += max(one - two, 0);
        } else {
            int del = n - 20;
            ans += del;
            int i = 0;
            while (i < repeat.size() && del) {
                int need = (repeat[i] % 3 == 0) ? 1 : 0;
                if (del >= need) {
                    if (repeat[i] - need < 3) {
                        one--;
                    }
                    repeat[i] -= need;
                    del -= need;
                } else {
                    i++;
                }
            }
            i = 0;
            while (i < repeat.size() && del) {
                if (del >= 2) {
                    if (repeat[i] < 3) {
                        one--;
                    }
                    repeat[i] -= 2;
                    del -= 2;
                } else {
                    i++;
                }
            }
            int need = max(needType, del);
            ans += need;
            int two =
