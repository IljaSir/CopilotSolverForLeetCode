Synthesizing 9/10 solutions

=======

        int n = graph.size();
        vector<vector<int>> dist(n, vector<int>(1 << n, INT_MAX));
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            dist[i][1 << i] = 0;
            q.emplace(i, 1 << i);
        }
        int ans = 0;
        while (!q.empty()) {
            auto [u, mask] = q.front();
            q.pop();
            if (mask == (1 << n) - 1) {
                ans = dist[u][mask];
                break;
            }
            for (int v : graph[u]) {
                int mask_v = mask | (1 << v);
                if (dist[v][mask_v] == INT_MAX) {
                    dist[v][mask_v] = dist[u][mask] + 1;
                    q.emplace(v, mask_v);
                }
            }
        }
        return ans;

=======

        int n = graph.size();
        vector<vector<int>> dp(n, vector<int>(1 << n, INT_MAX));
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            dp[i][1 << i] = 0;
            q.push({i, 1 << i});
        }
        int res = 0;
        while (!q.empty()) {
            auto [node, state] = q.front(); q.pop();
            if (state == (1 << n) - 1) {
                res = dp[node][state];
                break;
            }
            for (int nei : graph[node]) {
                int nstate = state | (1 << nei);
                if (dp[nei][nstate] > dp[node][state] + 1) {
                    dp[nei][nstate] = dp[node][state] + 1;
                    q.push({nei, nstate});
                }
            }
        }
        return res;

=======

        int n = graph.size();
        queue<tuple<int, int, int>> q;
        for (int i = 0; i < n; ++i) {
            q.push({i, 1 << i, 0});
        }
        vector<vector<bool>> seen(n, vector<bool>(1 << n));
        while (!q.empty()) {
            auto [u, mask, dist] = q.front();
            q.pop();
            if (mask == (1 << n) - 1) {
                return dist;
            }
            if (seen[u][mask]) {
                continue;
            }
            seen[u][mask] = true;
            for (int v : graph[u]) {
                q.push({v, mask | (1 << v), dist + 1});
            }
        }
        return 0;

=======

        int n = graph.size();
        queue<tuple<int, int, int>> q;
        vector<vector<int>> visited(n, vector<int>(1 << n));
        for (int i = 0; i < n; i++) {
            q.emplace(i, 1 << i, 0);
            visited[i][1 << i] = 1;
        }
        int ans = 0;
        while (!q.empty()) {
            auto [u, mask, dist] = q.front();
            q.pop();
            if (mask == (1 << n) - 1) {
                ans = dist;
                break;
            }
            for (int v : graph[u]) {
                int mask_v = mask | (1 << v);
                if (!visited[v][mask_v]) {
                    q.emplace(v, mask_v, dist + 1);
                    visited[v][mask_v] = 1;
                }
            }
        }
        return ans;

=======

        int n = graph.size();
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; i++) {
            for (int j : graph[i]) {
                dist[i][j] = 1;
            }
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        vector<vector<int>> dp(1 << n, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; i++) {
            dp[1 << i][i] = 0;
        }
        for (int mask = 1; mask < (1 << n); mask++) {
            for (int i = 0; i < n; i++) {
                if (!(mask & (1 << i))) {
                    continue;
                }
                for (int j = 0; j < n; j++) {
                    if (mask & (1 << j)) {
                        continue;
                    }
                    dp[mask | (1 << j)][j] = min(dp[mask | (1 << j)][j], dp[mask][i] + dist[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[(1 << n) - 1][i]);
        }
        return ans;

=======

        int n = graph.size();
        queue<tuple<int, int, int>> q;
        vector<vector<int>> vis(n, vector<int>(1<<n));
        for (int i = 0; i < n; i++) {
            q.emplace(i, 1<<i, 0);
            vis[i][1<<i] = true;
        }
        while (!q.empty()) {
            auto [u, mask, d] = q.front();
            q.pop();
            if (mask == (1<<n) - 1) return d;
            for (int v : graph[u]) {
                int mask2 = mask | (1<<v);
                if (!vis[v][mask2]) {
                    vis[v][mask2] = true;
                    q.emplace(v, mask2, d + 1);
                }
            }
        }
        return 0;

=======

        int n = graph.size();
        vector<vector<int>> dist(n, vector<int>(1<<n, INT_MAX));
        queue<pair<int, int>> q;
        for(int i = 0; i < n; i++) {
            q.emplace(i, 1<<i);
            dist[i][1<<i] = 0;
        }
        int res = 0;
        while(!q.empty()) {
            auto [u, mask] = q.front(); q.pop();
            if(mask == (1<<n)-1) {
                res = dist[u][mask];
                break;
            }
            for(int v: graph[u]) {
                int mask_v = mask | (1<<v);
                if(dist[v][mask_v] == INT_MAX) {
                    dist[v][mask_v] = dist[u][mask] + 1;
                    q.emplace(v, mask_v);
                }
            }
        }
        return res;

=======

        int n = graph.size();
        int ans = 0;
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(n, vector<bool>(1 << n, false));
        for (int i = 0; i < n; i++) {
            q.push({i, 1 << i});
            visited[i][1 << i] = true;
        }
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto [node, state] = q.front();
                q.pop();
                if (state == (1 << n) - 1) {
                    return ans;
                }
                for (int next : graph[node]) {
                    int nextState = state | (1 << next);
                    if (visited[next][nextState]) {
                        continue;
                    }
                    q.push({next, nextState});
                    visited[next][nextState] = true;
                }
            }
            ans++;
        }
        return ans;

=======

        int n = graph.size();
        vector<vector<int>> dp(1<<n, vector<int>(n, 1e9));
        for (int i = 0; i < n; i++) {
            dp[1 << i][i] = 0;
        }
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                for (int k : graph[j]) {
                    dp[i | (1 << k)][k] = min(dp[i | (1 << k)][k], dp[i][j] + 1);
                }
            }
        }
        int ans = 1e9;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[(1 << n) - 1][i]);
        }
        return ans;
