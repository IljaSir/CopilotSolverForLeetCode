Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int cur = 1;
        k = k - 1;
        while (k > 0) {
            int steps = calSteps(n, cur, cur + 1);
            if (steps <= k) {
                cur += 1;
                k -= steps;
            } else {
                cur *= 10;
                k -= 1;
            }
        }
        return cur;
    }
    
    int calSteps(int n, long n1, long n2) {
        int steps = 0;
        while (n1 <= n) {
            steps += min(n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;

=======

        int cur = 1;
        k = k - 1;
        while (k > 0) {
            long long steps = 0, first = cur, last = cur + 1;
            while (first <= n) {
                steps += min((long long)n + 1, last) - first;
                first *= 10;
                last *= 10;
            }
            if (steps <= k) {
                cur += 1;
                k -= steps;
            } else {
                cur *= 10;
                k -= 1;
            }
        }
        return cur;

=======

        int cur = 1;
        k = k - 1;
        while (k > 0) {
            int steps = calSteps(n, cur, cur + 1);
            if (steps <= k) {
                k -= steps;
                cur += 1;
            } else {
                k -= 1;
                cur *= 10;
            }
        }
        return cur;
    }
    
    int calSteps(int n, long n1, long n2) {
        int steps = 0;
        while (n1 <= n) {
            steps += min((long)n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;

=======

        int cur = 1;
        k--;
        while (k > 0) {
            long long steps = 0, first = cur, last = cur + 1;
            while (first <= n) {
                steps += min((long long)n + 1, last) - first;
                first *= 10;
                last *= 10;
            }
            if (steps <= k) {
                cur++;
                k -= steps;
            } else {
                cur *= 10;
                k--;
            }
        }
        return cur;

=======

        int curr = 1;
        k = k - 1;
        while (k > 0) {
            int steps = calSteps(n, curr, curr+1);
            if (steps <= k) {
                curr += 1;
                k -= steps;
            } else {
                curr *= 10;
                k -= 1;
            }
        }
        return curr;
    }
    
    int calSteps(int n, long n1, long n2) {
        int steps = 0;
        while (n1 <= n) {
            steps += min(n+1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return steps;

=======

        int cur = 1;
        --k;
        while (k > 0) {
            long long step = 0, first = cur, last = cur + 1;
            while (first <= n) {
                step += min((long long)n + 1, last) - first;
                first *= 10;
                last *= 10;
            }
            if (step <= k) {
                ++cur;
                k -= step;
            } else {
                cur *= 10;
                --k;
            }
        }
        return cur;

=======

        int curr = 1;
        k = k - 1;
        while (k > 0) {
            long long steps = getStep(n, curr, curr + 1);
            if (steps <= k) {
                curr += 1;
                k -= steps;
            } else {
                curr *= 10;
                k -= 1;
            }
        }
        return curr;
    }
    long long getStep(int n, long long n1, long long n2) {
        long long step = 0;
        while (n1 <= n) {
            step += min((long long)n + 1, n2) - n1;
            n1 *= 10;
            n2 *= 10;
        }
        return step;
