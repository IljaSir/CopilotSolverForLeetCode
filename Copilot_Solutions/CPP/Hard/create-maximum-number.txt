Synthesizing 6/10 solutions (Duplicates hidden)

=======

        int m = nums1.size(), n = nums2.size();
        vector<int> ans(k, 0);
        for (int i = max(0, k - n); i <= min(k, m); i++) {
            vector<int> candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);
            if (greater(candidate, 0, ans, 0)) ans = candidate;
        }
        return ans;
    }
    vector<int> merge(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> ans(k, 0);
        for (int i = 0, j = 0, r = 0; r < k; r++)
            ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];
        return ans;
    }
    bool greater(vector<int>& nums1, int i, vector<int>& nums2, int j) {
        while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) {
            i++;
            j++;
        }
        return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);
    }
    vector<int> maxArray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans(k, 0);
        for (int i = 0, j = 0; i < n; i++) {
            while (n - i + j > k && j > 0 && ans[j - 1] < nums[i]) j--;
            if (j < k) ans[j++] = nums[i];
        }
        return ans;

=======

        vector<int> res(k, 0);
        int m = nums1.size(), n = nums2.size();
        for (int i = max(0, k - n); i <= min(k, m); i++) {
            vector<int> candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);
            if (greater(candidate, 0, res, 0)) res = candidate;
        }
        return res;
    }
    
    vector<int> merge(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> res(k, 0);
        for (int i = 0, j = 0, r = 0; r < k; r++)
            res[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];
        return res;
    }
    
    vector<int> maxArray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> res(k, 0);
        for (int i = 0, j = 0; i < n; i++) {
            while (n - i + j > k && j > 0 && res[j - 1] < nums[i]) j--;
            if (j < k) res[j++] = nums[i];
        }
        return res;
    }
    
    bool greater(vector<int>& nums1, int i, vector<int>& nums2, int j) {
        while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) {
            i++;
            j++;
        }
        return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);

=======

        vector<int> res;
        int m = nums1.size(), n = nums2.size();
        for (int i = max(0, k - n); i <= min(k, m); ++i) {
            vector<int> tmp1 = maxArray(nums1, i);
            vector<int> tmp2 = maxArray(nums2, k - i);
            vector<int> tmp(k, 0);
            merge(tmp1, tmp2, tmp);
            if (greater(tmp, 0, res, 0)) res.swap(tmp);
        }
        return res;

=======

        vector<int> ans;
        int m = nums1.size();
        int n = nums2.size();
        for (int i = max(0, k - n); i <= min(k, m); i++) {
            vector<int> candidate = merge(maxArray(nums1, i), maxArray(nums2, k - i), k);
            if (compare(candidate, 0, ans, 0) > 0) {
                ans.swap(candidate);
            }
        }
        return ans;
    }
    vector<int> merge(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> ans(k);
        for (int i = 0, j = 0, r = 0; r < k; r++) {
            ans[r] = compare(nums1, i, nums2, j) > 0 ? nums1[i++] : nums2[j++];
        }
        return ans;
    }
    vector<int> maxArray(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> ans(k);
        for (int i = 0, j = 0; i < n; i++) {
            while (n - i + j > k && j > 0 && ans[j - 1] < nums[i]) {
                j--;
            }
            if (j < k) {
                ans[j++] = nums[i];
            }
        }
        return ans;
    }
    int compare(vector<int>& nums1, int i, vector<int>& nums2, int j) {
        int m = nums1.size(), n = nums2.size();
        while (i < m && j < n && nums1[i] == nums2[j]) {
            i++;
            j++;
        }
        return j == n ? (i == m ? 0 : 1) : (i == m ? -1 : nums1[i] - nums2[j]);

=======

        vector<int> ans;
        for (int i = 0; i <= k; i++) {
            if (i <= nums1.size() && k - i <= nums2.size()) {
                vector<int> tmp = merge(maxNumber(nums1, i), maxNumber(nums2, k - i));
                if (greater(tmp, 0, ans, 0)) {
                    ans.swap(tmp);
                }
            }
        }
        return ans;
    }

    vector<int> merge(vector<int> nums1, vector<int> nums2) {
        vector<int> ans;
        while (!nums1.empty() || !nums2.empty()) {
            vector<int>& now = greater(nums1, 0, nums2, 0) ? nums1 : nums2;
            ans.push_back(now[0]);
            now.erase(now.begin());
        }
        return ans;
    }

    bool greater(vector<int>& nums1, int i, vector<int>& nums2, int j) {
        while (i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]) {
            i++;
            j++;
        }
        return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);
    }

    vector<int> maxNumber(vector<int>& nums, int k) {
        vector<int> ans;
        int drop = nums.size() - k;
        for (int i = 0; i < nums.size(); i++) {
            while (!ans.empty() && ans.back() < nums[i] && drop > 0) {
                ans.pop_back();
                drop--;
            }
            ans.push_back(nums[i]);
        }
        ans.resize(k);
        return ans;
