Synthesizing 10/10 solutions

=======

        int n = s.size();
        int l = 0, r = n - 1;
        while (l < n && s[l] == '0') l++;
        while (r >= 0 && s[r] == '0') r--;
        if (l > r) return 0;
        int ans = r - l + 1;
        for (int i = l; i <= r; i++) {
            if (s[i] == '1') {
                ans += 2;
            }
        }
        return ans;

=======

        int n = s.size();
        int left = 0, right = n - 1;
        while (left < n && s[left] == '0') left++;
        while (right >= 0 && s[right] == '0') right--;
        if (left > right) return 0;
        int res = 2;
        for (int i = left + 1; i <= right; i++) {
            if (s[i] == '1') res += 2;
            else res++;
        }
        return res;

=======

        int n = s.size();
        int l = 0, r = n-1;
        while (l < n && s[l] == '0') l++;
        while (r >= 0 && s[r] == '0') r--;
        if (l == n) return 0;
        int ans = 0;
        for (int i = l; i <= r; i++) {
            if (s[i] == '0') {
                ans++;
            } else {
                ans += 2;
            }
        }
        return ans - 1;

=======

        int n = s.size();
        int i = 0;
        int j = n - 1;
        while (i < n && s[i] == '0') i++;
        while (j >= 0 && s[j] == '0') j--;
        if (i >= j) return 0;
        int ans = 2;
        for (int k = i; k <= j; k++) {
            if (s[k] == '1') {
                ans += 2;
                while (k <= j && s[k] == '1') k++;
            }
        }
        return ans;

=======

        int n = s.length();
        int l = 0;
        int r = n - 1;
        while (l < n && s[l] == '0') ++l;
        while (r >= 0 && s[r] == '0') --r;
        if (l == n) return 0;
        if (l == r) return 1;
        int ans = 0;
        for (int i = l; i <= r; ++i) {
            if (s[i] == '1') ++ans;
        }
        return ans + 2;

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                ans += 2;
            }
        }
        ans -= 2;
        return max(ans, 0);

=======

        int i = 0, j = s.length() - 1;
        int ans = 0;
        while (i < j) {
            while (i < j && s[i] == '0') i++;
            while (i < j && s[j] == '0') j--;
            if (i < j) {
                ans += 2;
                i++;
                j--;
            }
        }
        if (i == j && s[i] == '1') ans++;
        return ans;

=======

        int n = s.size();
        int l = 0;
        int r = n - 1;
        int ans = 0;
        while (l < n && s[l] == '0') {
            l++;
        }
        while (r >= 0 && s[r] == '0') {
            r--;
        }
        if (l == n || r == -1) {
            return 0;
        }
        ans = 2;
        for (int i = l; i <= r; i++) {
            if (s[i] == '1') {
                ans += 2;
                while (i <= r && s[i] == '1') {
                    i++;
                }
                i--;
            }
        }
        return ans;

=======

        int n = s.length();
        int l = 0;
        int r = n - 1;
        while (l < n && s[l] == '0') ++l;
        while (r >= 0 && s[r] == '0') --r;
        if (l == n) return 0;
        if (l == r) return 1;
        int ans = 0;
        for (int i = l; i <= r; ++i) {
            if (s[i] == '1') ++ans;
        }
        return ans + 2;

=======

        int n = s.size();
        int l = 0;
        int r = n - 1;
        int ans = 0;
        while (l < n && s[l] == '0') {
            l++;
        }
        while (r >= 0 && s[r] == '0') {
            r--;
        }
        if (l == n || r == -1) {
            return 0;
        }
        ans = 2;
        for (int i = l; i <= r; i++) {
            if (s[i] == '1') {
                ans += 2;
                while (i <= r && s[i] == '1') {
                    i++;
                }
                i--;
            }
        }
        return ans;

=======

        int n = s.size();
        int i = 0, j = n - 1;
        int res = 0;
        while (i < n && s[i] == '0') {
            ++i;
        }
        while (j >= 0 && s[j] == '0') {
            --j;
        }
        if (i == n) {
            return 0;
        }
        if (i == j) {
            return 1;
        }
        if (i + 1 == j) {
            return 2;
        }
        while (i < j) {
            while (i < j && s[i] == '0') {
                ++i;
            }
            while (i < j && s[j] == '0') {
                --j;
            }
            if (i == j) {
                break;
            }
            res += 2;
            ++i;
            --j;
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        int left = 0, right = n - 1;
        while (left <= right) {
            if (s[left] == '0') {
                ans++;
                left++;
            } else {
                if (s[right] == '1') {
                    ans++;
                    right--;
                } else {
                    ans += 2;
                    left++;
                    right--;
                }
            }
        }
        return ans;
