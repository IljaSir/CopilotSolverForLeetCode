Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> left(n/2), right(n - n/2);
        for (int i = 0; i < n/2; ++i) {
            left[i] = nums[i];
        }
        for (int i = 0; i < n - n/2; ++i) {
            right[i] = nums[i + n/2];
        }
        vector<int> leftSum, rightSum;
        sumSubseq(left, leftSum);
        sumSubseq(right, rightSum);
        sort(rightSum.begin(), rightSum.end());
        int ans = abs(goal);
        for (int sum : leftSum) {
            int target = goal - sum;
            auto lb = lower_bound(rightSum.begin(), rightSum.end(), target);
            if (lb != rightSum.end()) {
                ans = min(ans, abs(target - *lb));
            }
            if (lb != rightSum.begin()) {
                ans = min(ans, abs(target - *prev(lb)));
            }
        }
        return ans;
    }

    void sumSubseq(vector<int>& nums, vector<int>& sum) {
        int n = nums.size();
        int m = 1 << n;
        for (int i = 0; i < m; ++i) {
            int cur = 0;
            for (int j = 0; j < n; ++j) {
                if ((i >> j) & 1) {
                    cur += nums[j];
                }
            }
            sum.push_back(cur);
        }

=======

        int n = nums.size();
        vector<int> a(n/2), b(n - n/2);
        for (int i = 0; i < n/2; i++) a[i] = nums[i];
        for (int i = n/2; i < n; i++) b[i - n/2] = nums[i];
        vector<int> sa = subsum(a), sb = subsum(b);
        sort(sb.begin(), sb.end());
        int res = abs(goal);
        for (int x : sa) {
            int t = goal - x;
            auto it = lower_bound(sb.begin(), sb.end(), t);
            if (it != sb.end()) res = min(res, abs(x + *it - goal));
            if (it != sb.begin()) res = min(res, abs(x + *prev(it) - goal));
        }
        return res;
    }
    vector<int> subsum(vector<int>& a) {
        int n = a.size();
        vector<int> res(1 << n);
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (i >> j & 1) res[i] += a[j];
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> left(n/2);
        vector<int> right(n-n/2);
        for (int i = 0; i < n/2; i++) {
            left[i] = nums[i];
        }
        for (int i = n/2; i < n; i++) {
            right[i-n/2] = nums[i];
        }
        vector<int> leftSum;
        vector<int> rightSum;
        getSum(left, 0, 0, leftSum);
        getSum(right, 0, 0, rightSum);
        sort(leftSum.begin(), leftSum.end());
        sort(rightSum.begin(), rightSum.end());
        int ans = INT_MAX;
        for (int i = 0; i < leftSum.size(); i++) {
            int x = leftSum[i];
            int y = rightSum[0];
            int l = 0;
            int r = rightSum.size()-1;
            while (l < r) {
                int mid = (l+r)/2;
                if (rightSum[mid] <= goal-x) l = mid+1;
                else r = mid;
            }
            if (abs(x+y-goal) < ans) ans = abs(x+y-goal);
            if (r > 0) {
                if (abs(x+rightSum[r-1]-goal) < ans) ans = abs(x+rightSum[r-1]-goal);
            }
            if (r < rightSum.size()) {
                if (abs(x+rightSum[r]-goal) < ans) ans = abs(x+rightSum[r]-goal);
            }
        }
        for (int i = 0; i < rightSum.size(); i++) {
            int x = rightSum[i];
            int y = leftSum[0];
            int l = 0;
            int r = leftSum.size()-1;
            while (l < r) {
                int mid = (l+r)/2;
                if (leftSum[mid] <= goal-x) l = mid+1;
                else r = mid;
            }
            if (abs(x+y-goal) < ans) ans = abs(x+y-goal);
            if (r > 0) {
                if (abs(x+leftSum[r-1]-goal) < ans) ans = abs(x+leftSum[r-1]-goal);

=======

        int n = nums.size();
        int m = n / 2;
        vector<int> left, right;
        for (int i = 0; i < (1 << m); i++) {
            int sum = 0;
            for (int j = 0; j < m; j++) {
                if (i & (1 << j)) {
                    sum += nums[j];
                }
            }
            left.push_back(sum);
        }
        for (int i = 0; i < (1 << (n - m)); i++) {
            int sum = 0;
            for (int j = 0; j < n - m; j++) {
                if (i & (1 << j)) {
                    sum += nums[j + m];
                }
            }
            right.push_back(sum);
        }
        sort(left.begin(), left.end());
        sort(right.begin(), right.end());
        int ans = abs(goal);
        for (int x : left) {
            int y = goal - x;
            auto it = lower_bound(right.begin(), right.end(), y);
            if (it != right.end()) {
                ans = min(ans, abs(x + *it - goal));
            }
            if (it != right.begin()) {
                ans = min(ans, abs(x + *prev(it) - goal));
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> v1, v2;
        for (int i = 0; i < (1 << n / 2); ++i) {
            int sum = 0;
            for (int j = 0; j < n / 2; ++j) {
                if (i >> j & 1) {
                    sum += nums[j];
                }
            }
            v1.push_back(sum);
        }
        for (int i = 0; i < (1 << n - n / 2); ++i) {
            int sum = 0;
            for (int j = 0; j < n - n / 2; ++j) {
                if (i >> j & 1) {
                    sum += nums[n / 2 + j];
                }
            }
            v2.push_back(sum);
        }
        sort(v2.begin(), v2.end());
        int ans = INT_MAX;
        for (int x : v1) {
            int left = 0, right = v2.size() - 1;
            while (left <= right) {
                int mid = (left + right) / 2;
                if (v2[mid] + x >= goal) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            if (left < v2.size()) {
                ans = min(ans, abs(v2[left] + x - goal));
            }
            if (right >= 0) {
                ans = min(ans, abs(v2[right] + x - goal));
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> l(n/2), r(n-n/2);
        for(int i = 0; i < n/2; ++i) l[i] = nums[i];
        for(int i = n/2; i < n; ++i) r[i-n/2] = nums[i];
        vector<int> ls, rs;
        for(int i = 0; i < (1<<l.size()); ++i) {
            int sum = 0;
            for(int j = 0; j < l.size(); ++j) {
                if(i & (1<<j)) sum += l[j];
            }
            ls.push_back(sum);
        }
        for(int i = 0; i < (1<<r.size()); ++i) {
            int sum = 0;
            for(int j = 0; j < r.size(); ++j) {
                if(i & (1<<j)) sum += r[j];
            }
            rs.push_back(sum);
        }
        sort(ls.begin(), ls.end());
        sort(rs.begin(), rs.end());
        int ans = INT_MAX;
        for(int i = 0; i < ls.size(); ++i) {
            int sum = ls[i];
            int j = lower_bound(rs.begin(), rs.end(), goal-sum) - rs.begin();
            if(j < rs.size()) ans = min(ans, abs(sum+rs[j]-goal));
            if(j > 0) ans = min(ans, abs(sum+rs[j-1]-goal));
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n/2, 0);
        vector<int> right(n - n/2, 0);
        for(int i = 0; i < n/2; ++i) {
            left[i] = nums[i];
        }
        for(int i = n/2; i < n; ++i) {
            right[i - n/2] = nums[i];
        }
        vector<int> leftSum = getSubSum(left);
        vector<int> rightSum = getSubSum(right);
        sort(leftSum.begin(), leftSum.end());
        sort(rightSum.begin(), rightSum.end());
        int ans = abs(goal);
        int i = 0;
        int j = rightSum.size() - 1;
        while(i < leftSum.size() && j >= 0) {
            ans = min(ans, abs(leftSum[i] + rightSum[j] - goal));
            if(leftSum[i] + rightSum[j] > goal) {
                --j;
            } else {
                ++i;
            }
        }
        return ans;
    }
    vector<int> getSubSum(vector<int>& nums) {
        int n = nums.size();
        int m = 1 << n;
        vector<int> ans;
        for(int i = 0; i < m; ++i) {
            int sum = 0;
            for(int j = 0; j < n; ++j) {
                if(i & (1 << j)) {
                    sum += nums[j];
                }
            }
            ans.push_back(sum);
        }
        return ans;

=======

        int n = nums.size();
        int m = n / 2;
        int n1 = n - m;
        vector<int> a, b;
        for (int i = 0; i < (1 << m); i++) {
            int sum = 0;
            for (int j = 0; j < m; j++) {
                if (i & (1 << j)) {
                    sum += nums[j];
                }
            }
            a.push_back(sum);
        }
        for (int i = 0; i < (1 << n1); i++) {
            int sum = 0;
            for (int j = 0; j < n1; j++) {
                if (i & (1 << j)) {
                    sum += nums[j + m];
                }
            }
            b.push_back(sum);
        }
        sort(b.begin(), b.end());
        int res = abs(goal);
        for (auto x : a) {
            int l = 0, r = b.size() - 1;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (b[mid] + x == goal) {
                    return 0;
                } else if (b[mid] + x < goal) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            if (l < b.size()) {
                res = min(res, abs(goal - (b[l] + x)));
            }
            if (r >= 0) {
                res = min(res, abs(goal - (b[r] + x)));
            }
        }
        return res;

=======

        int n = nums.size();
        int m = n/2;
        n -= m;
        vector<int> sum1(1<<n);
        vector<int> sum2(1<<m);
        for(int i = 0; i < (1<<n); i++) {
            for(int j = 0; j < n; j++) {
                if(i & (1<<j)) {
                    sum1[i] += nums[j];
                }
            }
        }
        for(int i = 0; i < (1<<m); i++) {
            for(int j = 0; j < m; j++) {
                if(i & (1<<j)) {
                    sum2[i] += nums[j+n];
                }
            }
        }
        sort(sum2.begin(), sum2.end());
        int ans = INT_MAX;
        for(int i = 0; i < (1<<n); i++) {
            int val = goal - sum1[i];
            int idx = lower_bound(sum2.begin(), sum2.end(), val) - sum2.begin();
            if(idx < (1<<m)) {
                ans = min(ans, abs(val - sum2[idx]));
            }
            if(idx > 0) {
                ans = min(ans, abs(val - sum2[idx-1]));
            }
        }
        return ans;

=======

        int n = nums.size();
        int m = n/2;
        vector<int> a(nums.begin(), nums.begin()+m);
        vector<int> b(nums.begin()+m, nums.end());
        vector<int> sa = get(a);
        vector<int> sb = get(b);
        sort(sb.begin(), sb.end());
        int ans = abs(goal);
        for(auto x: sa) {
            int t = goal - x;
            auto it = lower_bound(sb.begin(), sb.end(), t);
            if(it != sb.end()) ans = min(ans, abs(x + *it - goal));
            if(it != sb.begin()) ans = min(ans, abs(x + *prev(it) - goal));
        }
        return ans;
    }
    vector<int> get(vector<int>& a) {
        int n = a.size();
        vector<int> ans(1 << n);
        for(int i = 0; i < (1 << n); i++) {
            for(int j = 0; j < n; j++) {
                if(i & (1 << j)) ans[i] += a[j];
            }
        }
        return ans;
