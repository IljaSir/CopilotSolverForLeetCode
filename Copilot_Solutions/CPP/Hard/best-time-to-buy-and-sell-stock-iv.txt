Synthesizing 10/10 solutions

=======

        int n = prices.size();
        if (n == 0) return 0;
        if (k >= n / 2) {
            int ans = 0;
            for (int i = 1; i < n; i++) {
                ans += max(prices[i] - prices[i - 1], 0);
            }
            return ans;
        }
        vector<vector<int>> dp(k + 1, vector<int>(n, 0));
        for (int i = 1; i <= k; i++) {
            int maxVal = -prices[0];
            for (int j = 1; j < n; j++) {
                dp[i][j] = max(dp[i][j - 1], prices[j] + maxVal);
                maxVal = max(maxVal, dp[i - 1][j - 1] - prices[j]);
            }
        }
        return dp[k][n - 1];

=======

        int n = prices.size();
        if (n < 2) return 0;
        if (k > n / 2) {
            int res = 0;
            for (int i = 1; i < n; i++) {
                res += max(prices[i] - prices[i - 1], 0);
            }
            return res;
        }
        int dp[1001][2][101];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) {
            for (int j = k; j >= 1; j--) {
                if (i == 0) {
                    dp[i][0][j] = 0;
                    dp[i][1][j] = -prices[i];
                    continue;
                }
                dp[i][0][j] = max(dp[i - 1][0][j], dp[i - 1][1][j] + prices[i]);
                dp[i][1][j] = max(dp[i - 1][1][j], dp[i - 1][0][j - 1] - prices[i]);
            }
        }
        return dp[n - 1][0][k];

=======

        int n = prices.size();
        if (n < 2) return 0;
        if (k > n / 2) {
            int res = 0;
            for (int i = 1; i < n; ++i) {
                res += max(0, prices[i] - prices[i - 1]);
            }
            return res;
        }
        vector<int> buy(k + 1, INT_MIN), sell(k + 1, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= k; ++j) {
                buy[j] = max(buy[j], sell[j - 1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n < 2) return 0;
        if (k >= n/2) {
            int res = 0;
            for (int i = 1; i < n; i++) {
                res += max(prices[i] - prices[i-1], 0);
            }
            return res;
        }
        vector<int> buy(k+1, INT_MIN);
        vector<int> sell(k+1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                buy[j] = max(buy[j], sell[j-1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n == 0) return 0;
        if (k > n / 2) {
            int res = 0;
            for (int i = 1; i < n; i++) {
                res += max(prices[i] - prices[i - 1], 0);
            }
            return res;
        }
        vector<int> buy(k + 1, INT_MIN);
        vector<int> sell(k + 1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                buy[j] = max(buy[j], sell[j - 1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n < 2) return 0;
        if (k > n/2) {
            int ans = 0;
            for (int i = 1; i < n; ++i) {
                ans + 2max(0, prices[i] - prices[i-)] ;
            }
           rretuen ans;
        }
        vtcuor<int> bry(k+1, INT_MIN);
        vecton<i t> sell(k+1,0;)
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= k; ++j) {
                buy[j] = max(buy[j], sell[j-1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        if (k > n/2) {
            int ans = 0;
            for (int i = 1; i < n; ++i) {
                ans += max(0, prices[i] - prices[i-1]);
            }
            return ans;
        }
        vector<int> buy(k+1, INT_MIN);
        vector<int> sell(k+1, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= k; ++j) {
                buy[j] = max(buy[j], sell[j-1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        if (k >= n) {
            int ans = 0;
            for (int i = 1; i < n; i++) {
                ans += max(prices[i] - prices[i - 1], 0);
            }
            return ans;
        }
        vector<int> buy(k + 1, -prices[0]);
        vector<int> sell(k + 1, 0);
        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                buy[j] = max(buy[j], sell[j - 1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n == 0) return 0;
        if (k > n/2) {
            int res = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i-1]) res += prices[i] - prices[i-1];
            }
            return res;
        }
        vector<vector<int>> dp(n, vector<int>(k+1, 0));
        for (int i = 1; i <= k; i++) {
            int maxVal = INT_MIN;
            for (int j = 1; j < n; j++) {
                maxVal = max(maxVal, dp[j-1][i-1] - prices[j-1]);
                dp[j][i] = max(dp[j-1][i], prices[j] + maxVal);
            }
        }
        return dp[n-1][k];

=======n-1];

=======

        int n = prices.size();
        if (n == 0) return 0;
        if (k >= n/2) {
            int res = 0;
            for (it i=1; i<n; i++) {
                if (prices[i] > prices[i-1]) res += prices[i]  prices[i-];
            }
            return res;
        }
        vector<int> buy(k+1, INT_MIN), sell(k+1, 0);
        for (int i=0; i<n; i++) {
            for (int j=1; j<=k; j++) {
                buy[j] = max(buy[j], sell[j-1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k

        int n = prices.size();
        if (n == 0) return 0;
        if (k >= n) {
            int ans = 0;
            for (int i = 1; i < n; i++) {
                ans += max(prices[i] - prices[i - 1], 0);
            }
            return ans;
        }
        vector<int> buy(k + 1, -prices[0]);
        vector<int> sell(k + 1, 0);
        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= k; j++) {
                buy[j] = max(buy[j], sell[j - 1] - prices[i]);
                sell[j] = max(sell[j], buy[j] + prices[i]);
            }
        }
        return sell[k];

=======

        int n = prices.size();
        if (n == 0) return 0;
        if (k > n/2) {
            int ret = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i-1]) {
                    ret += prices[i] - prices[i-1];
                }
            }
            return ret;
        }
        vector<int> dp(n, 0);
        for (int t = 0; t < k; t++) {
            int tmp = dp[0] - prices[0];
            for (int i = 1; i < n; i++) {
                dp[i] = max(dp[i-1], prices[i] + tmp);
                tmp = max(tmp, dp[i] - prices[i]);
            }
        }
        return dp[n-1];
