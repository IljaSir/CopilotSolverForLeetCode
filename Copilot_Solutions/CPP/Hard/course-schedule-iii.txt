Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(courses.begin(), courses.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int time = 0;
        for (auto& c : courses) {
            if (time + c[0] <= c[1]) {
                time += c[0];
                pq.push(c[0]);
            } else if (!pq.empty() && pq.top() > c[0]) {
                time += c[0] - pq.top();
                pq.pop();
                pq.push(c[0]);
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int time = 0;
        for (auto& c : courses) {
            time += c[0];
            pq.push(c[0]);
            if (time > c[1]) {
                time -= pq.top();
                pq.pop();
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int time = 0;
        for (const auto& c : courses) {
            if (time + c[0] <= c[1]) {
                time += c[0];
                pq.push(c[0]);
            } else if (!pq.empty() && pq.top() > c[0]) {
                time += c[0] - pq.top();
                pq.pop();
                pq.push(c[0]);
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](auto& a, auto& b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int time = 0;
        for (auto& c : courses) {
            time += c[0];
            pq.push(c[0]);
            if (time > c[1]) {
                time -= pq.top();
                pq.pop();
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int cur = 0;
        for (auto& c : courses) {
            if (cur + c[0] <= c[1]) {
                pq.push(c[0]);
                cur += c[0];
            } else if (!pq.empty() && pq.top() > c[0]) {
                cur += c[0] - pq.top();
                pq.pop();
                pq.push(c[0]);
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](vector<int> a, vector<int> b) {
            return a[1] < b[1];
        });
        priority_queue<int> q;
        int time = 0;
        for (auto c : courses) {
            q.push(c[0]);
            time += c[0];
            if (time > c[1]) {
                time -= q.top();
                q.pop();
            }
        }
        return q.size();

=======

        sort(courses.begin(), courses.end(), [](vector<int> &a, vector<int> &b) {
            return a[1] < b[1];
        });
        priority_queue<int> pq;
        int cur = 0;
        for (auto &course : courses) {
            cur += course[0];
            pq.push(course[0]);
            if (cur > course[1]) {
                cur -= pq.top();
                pq.pop();
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        int n = courses.size();
        priority_queue<int> pq;
        int time = 0;
        for (int i = 0; i < n; i++) {
            pq.push(courses[i][0]);
            time += courses[i][0];
            if (time > courses[i][1]) {
                time -= pq.top();
                pq.pop();
            }
        }
        return pq.size();

=======

        sort(courses.begin(), courses.end(), [](vector<int> a, vector<int> b) { return a[1] < b[1]; });
        priority_queue<int, vector<int>, less<int>> pq;
        int cur = 0, cnt = 0;
        for (auto course: courses) {
            if (cur + course[0] <= course[1]) {
                cur += course[0];
                pq.push(course[0]);
                cnt++;
            }
            else if (!pq.empty() && pq.top() > course[0]) {
                cur = cur - pq.top() + course[0];
                pq.pop();
                pq.push(course[0]);
            }
        }
        return cnt;
