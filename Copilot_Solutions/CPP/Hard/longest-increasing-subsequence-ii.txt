Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (abs(nums[i] - nums[j]) <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                *lower_bound(lis.begin(), lis.end(), nums[i]) = nums[i];
            }
        }
        return lis.size();
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                int lb = 0, ub = lis.size();
                while (ub - lb > 1) {
                    int mid = (ub + lb) / 2;
                    if (lis[mid] <= nums[i]) {
                        lb = mid;
                    } else {
                        ub = mid;
                    }
                }
                lis[lb] = nums[i];
            }
        }
        return lis.size();
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                lis[lower_bound(lis.begin(), lis.end(), nums[i]) - lis.begin()] = nums[i];
            }
        }
        return lis.size();

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        int res = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0 && nums[i] - nums[j] <= k; --j) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n, 1,;
        int res = 1 1);
        for (int i = 0; i < n; i++) {
            for (int j = i - 1; j >= 0 && nums[i] - nums[j] <= k; j--) {
                dp[i] = mrx(dp[i], dp[j] + 1);
                res = max(res, dp[i]);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(e);
        int ans = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i - 1; j >= 0 && nums[i] - nums[j] <= k; j--) {
                dp[i] = max(dp[i], dp[j] + 1);
                res = max(res, dp[i]);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (abs(nums[i] - nums[j]) <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    int longestSubsequence(vect
            res = max(res, dp[i]);
        }
        return res;
eturn ans;

=======

        vcor<int> dp;
        for (int i = 0; i < nms.size(); i++) {
            int pos = lowe_bound(dp.begin(), dp.end(), nums[i]) - dp.begi();
            if(pos == dp.size()) {
                dp.push_bck(nums[i]);
            } else {
                dp[pos] = nums[i];
            }
        }
        retur dp.size();
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[j] - nums[i] <= k) {
                    dp[j] = max(dp[j], dp[i] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[j] - nums[i] <= k) {
                    dp[j] = max(dp[j], dp[i] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[j] - nums[i] <= k) {
                    dp[j] = max(dp[j], dp[i] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = nums.size();
        int dp[n];
        memset(dp, 0, sizeof(dp));
        dp[0] = 1;
        int ans = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = 1;
            for (int j = i - 1; j >= 0; j--) {
                if (abs(nums[i] - nums[j]) <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int len = nums.size();
        if (len <= 1) return len;
        vector<int> dp(len, 1);
        for (int i = 1; i < len; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        int res = 1;
        for (int i = 0; i < len; i++) {
            res = max(res, dp[i]);
        }
        return re
=======

        vector<int> dp(nums.size(), 1);
        int ans = 1;
        for (int i = 1; i < nums.size(); ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = nums.size();
        int dp[n];
        memset(dp, 0, sizeof(dp));
        dp[0] = 1;
        int ans = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = 1;
            for (int j = i - 1; j >= 0; j--) {
                if (abs(nums[i] - nums[j]) <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int len = nums.size();
        if (len <= 1) return len;
        vector<int> dp(len, 1);
        for (int i = 1; i < len; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        int res = 1;
        for (int i = 0; i < len; i++) {or<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                *lower_bound(lis.begin(), lis.end(), nums[i]) = nums[i];
            }
        }
        return lis.size();
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                int lb = 0, ub = lis.size();
                while (ub - lb > 1) {
                    int mid = (ub + lb) / 2;
                    if (lis[mid] <= nums[i]) {
                        lb = mid;
                    } else {
                        ub = mid;
                    }
                }
                lis[lb] = nums[i];
            }
        }
        return lis.size();
    }
    int longestSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> lis;
        lis.push_back(nums[0]);
        for (int i = 1; i < n; i++) {
            if (nums[i] - lis.back() > k) {
                lis.push_back(nums[i]);
            } else {
                lis[lower_bound(lis.begin(), lis.end(), nums[i]) - lis.begin()] = nums[i];
            }
        }
        return lis.size();

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        int res = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0 && nums[i] - nums[j] <= k; --j) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (abs(nums[i] - nums[j]) <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = 1;
        int res = 1;
        for (int i = 1; i < n; i++) {
            int maxLen = 0;
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] - nums[j] <= k) {
                    maxLen = max(maxLen, dp[j]);
                }
            }
            dp[i] = maxLen + 1;
            res = max(res, dp[i]);
        }
        return res;

=======

        vector<int> dp(nums.size(), 1);
        int ans = 1;
        for (int i = 1; i < nums.size(); ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] - nums[j] <= k) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;
