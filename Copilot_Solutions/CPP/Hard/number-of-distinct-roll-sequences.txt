Synthesizing 8/10 solutions

=======

        const int mod = 1e9 + 7;
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(7, vector<int>(7, 0)));
        for (int i = 1; i <= 6; ++i) {
            dp[1][i][0] = 1;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= 6; ++j) {
                for (int k = 1; k <= 6; ++k) {
                    for (int p = 1; p <= 6; ++p) {
                        if (gcd(j, p) == 1) {
                            dp[i][j][k] += dp[i - 1][p][j];
                            dp[i][j][k] %= mod;
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= 6; ++i) {
            for (int j = 1; j <= 6; ++j) {
                ans += dp[n][i][j];
                ans %= mod;
            }
        }
        return ans;
    }
    int gcd(int a, int b) {
        if (a < b) {
            swap(a, b);
        }
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(n + 1, vector<int>(7, 0));
        for (int i = 1; i <= 6; ++i) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= 6; ++j) {
                for (int k = 1; k <= 6; ++k) {
                    if (j == k) continue;
                    if (__gcd(j, k) == 1) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % mod;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= 6; ++i) {
            ans = (ans + dp[n][i]) % mod;
        }
        return ans;

=======

        int MOD = 1e9 + 7;
        vector<vector<int>> dp(n + 1, vector<int>(6, 0));
        for (int i = 0; i < 6; ++i) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = 0; j < 6; ++j) {
                for (int k = 0; k < 6; ++k) {
                    if (gcd(j + 1, k + 1) == 1) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % MOD;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 6; ++i) {
            ans = (ans + dp[n][i]) % MOD;
        }
        return ans;

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(n + 1, vector<int>(7));
        for (int i = 1; i <= 6; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (j == k) {
                        continue;
                    }
                    if (j % k == 0) {
                        continue;
                    }
                    dp[i][j] = (dp[i][j] + dp[i - 1][k]) % mod;
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= 6; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        return ans;

=======

        int mod = 1e9 + 7;
        vector<vector<long>> dp(n + 1, vector<long>(6, 0));
        for (int i = 0; i < 6; ++i) dp[1][i] = 1;
        for (int i = 2; i <= n; ++i) {
            for (int j = 0; j < 6; ++j) {
                for (int k = 0; k < 6; ++k) {
                    if (gcd(j + 1, k + 1) == 1) dp[i][j] = (dp[i][j] + dp[i - 1][k]) % mod;
                }
            }
        }
        long ans = 0;
        for (int i = 0; i < 6; ++i) ans = (ans + dp[n][i]) % mod;
        return ans;
    }
    int gcd(int a, int b) {
        if (a < b) swap(a, b);
        while (b) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;

=======

        int mod = 1e9 + 7;
        vector<vector<long>> dp(n + 1, vector<long>(6, 0));
        for (int i = 0; i < 6; ++i) dp[1][i] = 1;
        for (int i = 2; i <= n; ++i) {
            for (int j = 0; j < 6; ++j) {
                for (int k = 0; k < 6; ++k) {
                    if (j != k && __gcd(j + 1, k + 1) == 1) {
                        dp[i][j] += dp[i - 1][k];
                        dp[i][j] %= mod;
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 0; i < 6; ++i) {
            ans += dp[n][i];
            ans %= mod;
        }
        return ans;

=======

        int MOD = 1000000007;
        vector<vector<long long>> dp(n + 1, vector<long long>(7, 0));
        for (int i = 1; i <= 6; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (j == k) {
                        continue;
                    }
                    if (__gcd(j, k) == 1) {
                        dp[i][j] += dp[i - 1][k];
                        dp[i][j] %= MOD;
                    }
                }
            }
        }
        long long ans = 0;
        for (int i = 1; i <= 6; i++) {
            ans += dp[n][i];
            ans %= MOD;
        }
        return ans;

=======

        if (n == 1) return 6;
        if (n == 2) return 22;
        vector<vector<int>> dp(n + 1, vector<int>(6, 0));
        for (int i = 0; i < 6; i++) dp[1][i] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 6; j++) {
                for (int k = 0; k < 6; k++) {
                    if (j != k && abs(j - k) > 1) {
                        dp[i][j] += dp[i - 1][k];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 6; i++) {
            res += dp[n][i];
            res %= 1000000007;
        }
        return res;
