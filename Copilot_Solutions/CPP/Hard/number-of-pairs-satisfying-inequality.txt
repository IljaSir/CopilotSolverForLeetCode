Synthesizing 10/10 solutions

=======

        long long ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                if (i < j && nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff) {
                    ans++;
                }
            }
        }
        return ans;

=======

        long long res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = i + 1; j < nums1.size(); j++) {
                if (nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums1.size();
        vector<int> v(n);
        for (int i = 0; i < n; ++i) {
            v[i] = nums1[i] - nums2[i];
        }
        sort(v.begin(), v.end());
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            int j = upper_bound(v.begin(), v.end(), v[i] - diff) - v.begin();
            ans += i - j;
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> cnt(20001, 0);
        for (int i = 0; i < n; i++) {
            cnt[nums1[i] - nums2[i] + 10000]++;
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            res += cnt[nums1[i] - nums2[i] - diff + 10000];
        }
        return res;

=======

        int n = nums1.size();
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int l = i, r = n - 1;
            while (l <= r) {
                int mid = (l + r) >> 1;
                if (nums1[i] - nums1[mid] <= nums2[i] - nums2[mid] + diff) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            ans += n - l;
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> cnt(n + 1, 0);
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = n;
            while (l < r) {
                int mid = (l + r) >> 1;
                if (nums1[i] - nums2[i] > nums1[mid] - nums2[mid] + diff) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            ans += i - l;
            l = 0, r = n;
            while (l < r) {
                int mid = (l + r) >> 1;
                if (nums1[i] - nums2[i] >= nums1[mid] - nums2[mid] + diff) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            cnt[l]++;
        }
        for (int i = 0; i < n; i++) {
            ans += cnt[i] * (cnt[i] - 1) / 2;
        }
        return ans;

=======

        long long ans = 0;
        int n = nums1.size();
        vector<int> cnt(20001, 0);
        for (int i = 0; i < n; i++) {
            int l = nums1[i] - nums2[i] + diff;
            int r = nums1[i] - nums2[i] + 10000;
            if (l > 0) {
                ans += cnt[l];
            }
            cnt[nums1[i] - nums2[i] + 10000]++;
        }
        return ans;

=======

        long long n = nums1.size();
        long long ans = 0;
        for(int i = 0; i < n; i++) {
            int x = nums1[i] - nums2[i] + diff;
            int y = nums1[i] - nums2[i] - diff;
            ans += upper_bound(nums1.begin(), nums1.end(), x) - lower_bound(nums1.begin(), nums1.end(), y);
            if (nums1[i] >= y && nums1[i] <= x) ans--;
        }
        return ans;

=======

        long long ans = 0;
        int n = nums1.size();
        vector<int> cnt(20005, 0);
        for (int i = 0; i < n; ++i) {
            int cur = nums1[i] - nums2[i] + diff;
            if (cur > 0) {
                ans += cnt[cur];
            }
            int cur2 = nums1[i] - nums2[i] - diff;
            if (cur2 > 0) {
                ++cnt[cur2];
            }
        }
        return ans;

=======

        // Sort nums1 and nums2
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        
        // Find the number of pairs
        long long ans = 0;
        int n = nums1.size();
        for (int i = 0; i < n; i++) {
            int j = lower_bound(nums2.begin(), nums2.end(), nums1[i] - diff) - nums2.begin();
            ans += j;
        }
        
        return ans;
