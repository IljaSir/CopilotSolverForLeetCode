Synthesizing 5/10 solutions (Duplicates hidden)

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                row[i] += grid[i][j];
                col[j] += grid[i][j];
            }
        }
        int stampSize = stampHeight * stampWidth;
        int total = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) {
                    total += 1;
                }
            }
        }
        int cnt = 0;
        while (cnt < total) {
            int prev = cnt;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (row[i] == stampWidth && col[j] == stampHeight) {
                        for (int ii = i; ii < i + stampHeight; ii++) {
                            for (int jj = j; jj < j + stampWidth; jj++) {
                                if (grid[ii][jj]) {
                                    row[ii] -= 1;
                                    col[jj] -= 1;
                                    grid[ii][jj] = 0;
                                    cnt += 1;
                                }
                            }
                        }
                    }
                }
            }
            if (cnt == prev) {
                return false;
            }
        }
        return true;

=======

        int m = grid.size();
        int n = grid[0].size();
        int total = m * n;
        vector<vector<int>> dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    queue<pair<int, int>> q;
                    q.push({i, j});
                    while (!q.empty()) {
                        auto [x, y] = q.front();
                        q.pop();
                        for (auto &dir : dirs) {
                            int nx = x + dir[0];
                            int ny = y + dir[1];
                            if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 0) {
                                q.push({nx, ny});
                                grid[nx][ny] = 1;
                                total--;
                            }
                        }
                    }
                }
            }
        }
        return total == 0;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        vector<vector<int>> dir{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int cnt = 0;
        bool flag = true;
        while(flag){
            flag = false;
            for(int i = 0; i < m; i++){
                for(int j = 0; j < n; j++){
                    if(vis[i][j]) continue;
                    int k = 0;
                    while(k < stampHeight && i + k < m){
                        int l = 0;
                        while(l < stampWidth && j + l < n && (grid[i + k][j + l] == 1 || vis[i + k][j + l] == 1)){
                            l++;
                        }
                        if(l < stampWidth) break;
                        k++;
                    }
                    if(k == stampHeight){
                        flag = true;
                        for(int x = 0; x < stampHeight; x++){
                            for(int y = 0; y < stampWidth; y++){
                                vis[i + x][j + y] = 1;
                                if(grid[i + x][j + y] == 0) cnt++;
                            }
                        }
                    }
                }
            }
        }
        return cnt == m * n;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> count(m*n, 0);
        for(int i=0; i<m; ++i){
            for(int j=0; j<n; ++j){
                count[i*n+j] = grid[i][j];
            }
        }
        vector<int> target = count;
        for(int i=0; i<m; ++i){
            for(int j=0; j<n; ++j){
                target[i*n+j] = 1;
            }
        }
        queue<int> q;
        for(int i=0; i<m; ++i){
            for(int j=0; j<n; ++j){
                if(grid[i][j] == 0){
                    q.push(i*n+j);
                }
            }
        }
        while(!q.empty()){
            int cur = q.front();
            q.pop();
            int i = cur/n;
            int j = cur%n;
            for(int x=max(0, i-stampHeight+1); x<=min(m-stampHeight, i); ++x){
                for(int y=max(0, j-stampWidth+1); y<=min(n-stampWidth, j); ++y){
                    bool flag = true;
                    for(int r=0; r<stampHeight; ++r){
                        for(int c=0; c<stampWidth; ++c){
                            if(grid[x+r][y+c] == 0){
                                flag = false;
                                break;
                            }
                        }
                    }
                    if(flag){
                        for(int r=0; r<stampHeight; ++r){
                            for(int c=0; c<stampWidth; ++c){
                                grid[x+r][y+c] = 0;
                                count[(x+r)*n+y+c] = 1;
                            }
                        }
                        for(int r=0; r<m; ++r){
                            for(int c=0; c<n; ++c){
                                if(count[r*n+c] == 0){
                                    q.push(r*n+c);
                                }
                            }
                        }
                    }
                }
            }
        }
        return count == target;
