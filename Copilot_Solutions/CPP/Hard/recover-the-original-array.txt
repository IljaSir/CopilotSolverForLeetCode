Synthesizing 10/10 solutions

=======

        int n = nums.size() / 2;
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        for (int i = 0; i < n; ++i) {
            ans[i] = nums[i] + nums[n + i];
            ans[i] /= 2;
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int k = (nums[n / 2] - nums[n / 2 - 1]) / 2;
        vector<int> ans;
        for (int i = 0; i < n; i += 2) {
            ans.push_back(nums[i] + k);
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int k = nums[n / 2] - nums[n / 2 - 1];
        vector<int> ans(n / 2);
        for (int i = 0; i < n / 2; ++i) {
            ans[i] = nums[i] + k;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size(), k = nums[n / 2] - nums[n / 2 - 1];
        vector<int> ans(n / 2);
        for (int i = 0; i < n / 2; ++i) {
            ans[i] = nums[i] + k;
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int k = (nums[n/2] - nums[n/2-1])/2;
        vector<int> res;
        for (int i = 0; i < n; i += 2) {
            res.push_back(nums[i] - k);
        }
        return res;

=======

        int n = nums.size() / 2;
        sort(nums.begin(), nums.end());
        int k = nums[n] - nums[n-1];
        vector<int> arr;
        for (int i = 0; i < n; i++) {
            arr.push_back(nums[i] + k);
        }
        return arr;

=======

        int n = nums.size();
        std::sort(nums.begin(), nums.end());
        int k = (nums[n/2] - nums[n/2 - 1]) / 2;
        for (int i = 0; i < n; i++) {
            nums[i] -= k;
        }
        return nums;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> res(n/2);
        int k = nums[n/2] - nums[n/2 - 1];
        for(int i = 0; i < n/2; i++){
            res[i] = nums[i] + k;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int k = 0;
        for (int i = 0; i < n; i += 2) {
            k += nums[i + 1] - nums[i];
        }
        k /= n / 2;
        vector<int> ans;
        for (int i = 0; i < n; i += 2) {
            ans.push_back(nums[i] + k);
        }
        return ans;

=======

        int n = nums.size() / 2;
        vector<int> ans(n);
        sort(nums.begin(), nums.end());
        int diff = nums[n] - nums[n-1];
        ans[0] = (nums[n-1] + nums[n]) / 2;
        for (int i = 1; i < n; ++i) {
            ans[i] = ans[i-1] + diff;
        }
        return ans;
