Synthesizing 10/10 solutions

=======

        vector<string> res;
        for (auto& word : words) {
            if (exist(board, word)) {
                res.push_back(word);
            }
        }
        return res;
    }
    bool exist(vector<vector<char>>& board, string word) {
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (board[i][j] == word[0]) {
                    if (find(board, word, i, j, 0)) return true;
                }
            }
        }
        return false;

=======

        vector<string> res;
        unordered_map<char, vector<pair<int, int>>> m;
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[i].size(); ++j) {
                m[board[i][j]].push_back({i, j});
            }
        }
        for (auto& word : words) {
            if (m.count(word[0]) > 0) {
                for (auto& p : m[word[0]]) {
                    if (dfs(board, word, p.first, p.second, 0)) {
                        res.push_back(word);
                        break;
                    }
                }
            }
        }
        return res;

=======

        vector<string> result;
        unordered_set<string> wordSet(words.begin(), words.end());
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                string word;
                findWords(board, wordSet, i, j, word, result);
            }
        }
        return result;
    }
    
    void findWords(vector<vector<char>>& board, unordered_set<string>& wordSet, int i, int j, string& word, vector<string>& result) {
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] == '#') {
            return;
        }
        word += board[i][j];
        if (wordSet.find(word) == wordSet.end()) {
            word.pop_back();
            return;
        }
        if (wordSet.find(word) != wordSet.end()) {
            result.push_back(word);
            wordSet.erase(word);
        }
        char c = board[i][j];
        board[i][j] = '#';
        findWords(board, wordSet, i - 1, j, word, result);
        findWords(board, wordSet, i + 1, j, word, result);
        findWords(board, wordSet, i, j - 1, word, result);
        findWords(board, wordSet, i, j + 1, word, result);
        board[i][j] = c;
        word.pop_back();

=======

        int m = board.size();
        int n = board[0].size();
        vector<string> res;
        for (auto& word : words) {
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (board[i][j] == word[0]) {
                        if (dfs(board, word, i, j, 0)) {
                            res.push_back(word);
                        }
                    }
                }
            }
        }
        return res;

=======

        vector<string> res;
        if (board.empty() || board[0].empty()) return res;
        int m = board.size(), n = board[0].size();
        unordered_set<string> dict(words.begin(), words.end());
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        string path;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                dfs(board, dict, visited, path, i, j, res);
            }
        }
        return res;

=======

        vector<string> res;
        if (board.empty() || board[0].empty()) return res;
        int m = board.size(), n = board[0].size();
        for (auto &word : words) {
            bool found = false;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (dfs(board, word, i, j, 0)) {
                        found = true;
                        break;
                    }
                }
                if (found) break;
            }
            if (found) res.push_back(word);
        }
        return res;
    }
    bool dfs(vector<vector<char>>& board, string &word, int i, int j, int k) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[k]) return false;
        if (k == word.size() - 1) return true;
        char tmp = board[i][j];
        board[i][j] = '*';
        bool res = dfs(board, word, i + 1, j, k + 1) || dfs(board, word, i - 1, j, k + 1) || dfs(board, word, i, j + 1, k + 1) || dfs(board, word, i, j - 1, k + 1);
        board[i][j] = tmp;
        return res;

=======

        vector<string> result;
        if (board.size() == 0 || board[0].size() == 0) {
            return result;
        }
        Trie trie;
        for (auto word : words) {
            trie.insert(word);
        }
        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dfs(board, i, j, "", trie, visited, result);
            }
        }
        return result;

=======

        vector<string> ans;
        if (board.empty()) return ans;
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (auto &word: words) {
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (word[0] == board[i][j] && dfs(board, visited, word, i, j, 0)) {
                        ans.push_back(word);
                        break;
                    }
                }
            }
        }
        return ans;
    }
    bool dfs(vector<vector<char>>& board, vector<vector<bool>>& visited, string &word, int i, int j, int k) {
        if (k == word.size()) return true;
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size()) return false;
        if (visited[i][j] || word[k] != board[i][j]) return false;
        visited[i][j] = true;
        if (dfs(board, visited, word, i - 1, j, k + 1) || dfs(board, visited, word, i + 1, j, k + 1) || dfs(board, visited, word, i, j - 1, k + 1) || dfs(board, visited, word, i, j + 1, k + 1)) {
            return true;
        }
        visited[i][j] = false;
        return false;

=======

        vector<string> res;
        if (board.empty() || board[0].empty()) return res;
        int m = board.size(), n = board[0].size();
        unordered_set<string> st;
        for (auto& word : words) {
            st.insert(word);
        }
        unordered_set<string> visited;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                string word;
                dfs(board, i, j, word, visited, st, res);
            }
        }
        return res;
    }
    void dfs(vector<vector<char>>& board, int i, int j, string& word, unordered_set<string>& visited, unordered_set<string>& st, vector<string>& res) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size()) return;
        word += board[i][j];
        if (visited.count(word)) {
            word.pop_back();
            return;
        }
        visited.insert(word);
        if (st.count(word)) {
            res.push_back(word);
        }
        dfs(board, i + 1, j, word, visited, st, res);
        dfs(board, i - 1, j, word, visited, st, res);
        dfs(board, i, j + 1, word, visited, st, res);
        dfs(board, i, j - 1, word, visited, st, res);
        word.pop_back();

=======

        vector<string> result;
        if (words.empty()) return result;
        Trie trie;
        for (auto& word : words) trie.insert(word);
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                dfs(board, i, j, visited, trie, "", result);
            }
        }
        return result;
    }

    void dfs(vector<vector<char>>& board, int i, int j, vector<vector<bool>>& visited, Trie& trie, string word, vector<string>& result) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j]) return;
        word += board[i][j];
        if (!trie.startsWith(word)) return;
        if (trie.search(word)) result.push_back(word);
        visited[i][j] = true;
        dfs(board, i - 1, j, visited, trie, word, result);
        dfs(board, i + 1, j, visited, trie, word, result);
        dfs(board, i, j - 1, visited, trie, word, result);
        dfs(board, i, j + 1, visited, trie, word, result);
        visited[i][j] = false;
