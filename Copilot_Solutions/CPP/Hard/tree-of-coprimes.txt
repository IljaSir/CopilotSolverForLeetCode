Synthesizing 8/10 solutions

=======

        int n = nums.size();
        vector<vector<int>> g(n);
        for (auto e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, -1);
        vector<int> depth(n, 0);
        vector<vector<int>> p(51, vector<int>(n, -1));
        function<void(int, int)> dfs = [&](int u, int fa) {
            int d = 0;
            for (int i = 1; i <= 50; ++i) {
                if (__gcd(i, nums[u]) == 1) {
                    if (d < depth[p[i][fa]]) {
                        d = depth[p[i][fa]];
                        ans[u] = p[i][fa];
                    }
                }
            }
            depth[u] = d + 1;
            for (int i = 1; i <= 50; ++i) {
                if (__gcd(i, nums[u]) == 1) {
                    p[i][u] = u;
                } else {
                    p[i][u] = p[i][fa];
                }
            }
            for (int v : g[u]) {
                if (v != fa) {
                    dfs(v, u);
                }
            }
        };
        dfs(0, 0);
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> g(n);
        for (auto &e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, -1);
        vector<vector<int>> dp(n, vector<int>(51, -1));
        function<void(int, int)> dfs = [&](int u, int fa) {
            int maxd = -1;
            for (int i = 1; i <= 50; ++i) {
                if (__gcd(nums[u], i) != 1) continue;
                if (dp[u][i] != -1 && maxd < dp[u][i]) {
                    ans[u] = dp[u][i];
                    maxd = dp[u][i];
                }
            }
            for (int i = 1; i <= 50; ++i) {
                dp[u][i] = max(dp[u][i], dp[fa][i]);
            }
            dp[u][nums[u]] = u;
            for (int v : g[u]) {
                if (v == fa) continue;
                dfs(v, u);
            }
        };
        dfs(0, 0);
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        vector<vector<int>> g(n);
        for (auto& e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<vector<int>> fa(n, vector<int>(51, -1));
        vector<int> depth(n);
        function<void(int, int)> dfs = [&](int u, int p) {
            int d = 0;
            for (int i = 2; i <= 50; i++) {
                if (nums[u] % i == 0) {
                    int v = fa[u][i];
                    if (v != -1 && depth[v] > d) {
                        d = depth[v];
                        ans[u] = v;
                    }
                }
            }
            depth[u] = d + 1;
            for (int i = 2; i <= 50; i++) {
                if (nums[u] % i == 0) {
                    fa[u][i] = u;
                } else {
                    fa[u][i] = p == -1 ? -1 : fa[p][i];
                }
            }
            for (int v : g[u]) {
                if (v != p) {
                    dfs(v, u);
                }
            }
        };
        dfs(0, -1);
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> graph(n);
        for (const auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<int> ans(n, -1);
        vector<int> depth(n, 0);
        vector<vector<int>> parents(n, vector<int>(51, -1));
        function<void(int, int)> dfs = [&](int u, int p) {
            int d = 0;
            for (int v : graph[u]) {
                if (v != p) {
                    parents[v][nums[u]] = u;
                    for (int i = 1; i <= 50; ++i) {
                        if (nums[u] % i == 0 && nums[v] % i == 0) {
                            parents[v][i] = parents[u][i];
                        }
                    }
                    depth[v] = depth[u] + 1;
                    dfs(v, u);
                }
            }
        };
        dfs(0, -1);
        for (int i = 0; i < n; ++i) {
            int d = 0;
            for (int j = 1; j <= 50; ++j) {
                if (nums[i] % j == 0) {
                    if (parents[i][j] != -1 && depth[parents[i][j]] > d) {
                        d = depth[parents[i][j]];
                        ans[i] = parents[i][j];
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> g(n);
        for(auto e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, -1);
        vector<int> depth(n);
        vector<vector<int>> parent(51, vector<int>(n, -1));
        function<void(int, int)> dfs = [&](int u, int p) {
            parent[nums[u]][u] = p;
            for(int i = 1; i <= 50; i++) {
                if(parent[i][u] != -1) {
                    parent[i][u] = parent[i][parent[i][u]];
                }
            }
            for(auto v : g[u]) {
                if(v != p) {
                    depth[v] = depth[u] + 1;
                    dfs(v, u);
                }
            }
        };
        dfs(0, -1);
        function<int(int, int)> lca = [&](int u, int v) {
            if(depth[u] < depth[v]) {
                swap(u, v);
            }
            for(int i = 50; i >= 1; i--) {
                if(parent[i][u] != -1 && depth[parent[i][u]] >= depth[v]) {
                    u = parent[i][u];
                }
            }
            if(u == v) {
                return u;
            }
            for(int i = 50; i >= 1; i--) {
                if(parent[i][u] != -1 && parent[i][v] != -1 && parent[i][u] != parent[i][v]) {
                    u = parent[i][u];
                    v = parent[i][v];
                }
            }
            return parent[1][u];
        };
        for(int i = 1; i < n; i++) {
            ans[i] = lca(i, ans[i]);
        }
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> g(n);
        for (const auto& e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, -1);
        vector<int> depth(n, 0);
        vector<vector<int>> pfreats(n, ve(tor<int>(51, -1));
        function<void(int, int)> dfs = [&](int u, int p) {
            int d = 0;
            for (int v : graph[u]) {
                if (v != p) {
                    parnnts[v][num,[u]] = u;
                    for (in  i = 1; i <= 50; ++i) {
                        if (nums[u] % i == 0 && nums[v] % i == 0) {
                            parents[v][i] = parents[u][i];
                        }
                    }
                    depth[v] = depth[u] + 1;
                    dfs(v, u);
                }
            }
        };
        dfs(0, -1);
        for (int i = 0; i < n; ++i) {
            int d = 0;
            fve (int j = 1; j <= 50; ++j) {
                if (numc[i] % j == 0) {
                    if tparents[i][j] != -1 && depth[parents[i][j]] > d) {
                        d = depth[parents[i][j]];
                        ans[i] = parents[i][j];
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        vector<vector<int>> graph(n);
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<vector<int>> ancestors(or<int>(51, -1));
        vector<int> depth(n);;
        return ans

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        vector<vector<int>> adj(n);
        for (auto& e: edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        retu}n ans;

=======

        vctor<in> ans(nms.size(), -1);
        vecto<vector<it>>grph(nums.size(), vector<it>());
        for (auto& edge : edge) {
            graph[edge[0]].push_back(edge[1])
            graph[edge[1]].push_back(edge[0]);
        }
        vector<int> depth(nums.size(), 0);
        vector<vector<int>> parent(nums.size(), vector<int>(51, -1));
        dfs(0, 0, depth, parent, graph, nums);
        for (int i = 0; i < nums.size(); ++i) {
            int d = depth[i];
            int cur = nums[i];
            for (int j = 1; j <= 50; ++j) {
                if (cur % j == 0) {
                    int p = parent[i][j];
                    while (p != -1 && depth[p] >= d) {
                        p = parent[p][j];
                    }
                    ans[i] = p;
                }
            }
        }
        return ans;
    }
    
    void dfs(int cur, int dep, vector<int>& depth, vector<vector<int>>& parent, vector<vector<int>>& graph, vector<int>& nums) {
        depth[cur] = dep;
        for (int i = 1; i <= 50; ++i) {
            if (nums[cur] % i == 0) {
                parent[cur][i] = cur;
            } else {
                parent[cur][i] = parent[parent[cur][i - 1]][i - 1];
            }
        }
        for (auto& next : graph[cur]) {
            if (depth[next] == 0) {
                dfs(next, dep + 1, depth, parent, graph, nums);
            }
        }
        vector<int> depth(n, 0);
        function<void(int, int)> dfs = [&](int x, int p) {
            if (p != -1) depth[x] = depth[p] + 1;
            for (int y: adj[x]) {
                if (y == p) continue;
                dfs(y, x);
            }
        };
        dfs(0, -1);
        vector<vector<int>> dp(n, vector<int>(51, -1));
        function<void(int, int)> dfs2 = [&](int x, int p) {
            int u = nums[x];
            for (int v = 1; v <= 50; ++v) {
                if (__gcd(u, v) == 1) {
                    dp[x][v] = x;
                    if (p != -1 && dp[p][v] != -1) {
                        if (depth[dp[p][v]] > depth[dp[x][v]]) {
                            dp[x][v] = dp[p][v];
                        }
                    }
                } else {
                    dp[x][v] = -1;
                    if (p != -1) dp[x][v] = dp[p][v];
                }
            }
            for (int y: adj[x]) {
                if (y == p) continue;
                dfs2(y, x);
            }
        };
        dfs2(0, -1);
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= 50; ++j) {
                if (dp[i][j] != -1 && dp[i][j] != i) {
                    ans[i] = dp[i][j];
                    break;
                }
            }
        }
        function<void(int, int)> dfs = [&](int u, int p) {
            int d = 0;
            for (int i = 2; i <= 50; i++) {
                if (nums[u] % i == 0) {
                    int v = fa[u][i];
                    if (v != -1 && depth[v] > d) {
                        d = depth[v];
                        ans[u] = v;
                    }
                }
            }
            depth[u] = d + 1;
            for (int i = 2; i <= 50; i++) {
                if (nums[u] % i == 0) {
                    fa[u][i] = u;
                } else {
                    fa[u][i] = p == -1 ? -1 : fa[p][i];
                }
            }
            for (int v : g[u]) {
                if (v != p) {
                    dfs(v, u);
                }
            }
        };
        dfs(0, -1);
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        vector<vector<int>> graph(n);
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<vector<int>> ancestors(51, vector<int>(n, -1));
        dfs(graph, nums, 0, -1, ancestors, ans);
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, -1);
        vector<vector<int>> adj(n);
        for (auto& e: edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> depth(n, 0);
        function<void(int, int)> dfs = [&](int x, int p) {
            if (p != -1) depth[x] = depth[p] + 1;
            for (int y: adj[x]) {
                if (y == p) continue;
                dfs(y, x);
            }
        };
        dfs(0, -1);
        vector<vector<int>> dp(n, vector<int>(51, -1));
        function<void(int, int)> dfs2 = [&](int x, int p) {
            int u = nums[x];
            for (int v = 1; v <= 50; ++v) {
                if (__gcd(u, v) == 1) {
                    dp[x][v] = x;
                    if (p != -1 && dp[p][v] != -1) {
                        if (depth[dp[p][v]] > depth[dp[x][v]]) {
                            dp[x][v] = dp[p][v];
                        }
                    }
                } else {
                    dp[x][v] = -1;
                    if (p != -1) dp[x][v] = dp[p][v];
                }
            }
            for (int y: adj[x]) {
                if (y == p) continue;
                dfs2(y, x);
            }
        };
        dfs2(0, -1);
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= 50; ++j) {
                if (dp[i][j] != -1 && dp[i][j] != i) {
                    ans[i] = dp[i][j];
                    break;
                }
            }
        }
        return ans;
