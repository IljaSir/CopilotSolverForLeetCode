Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int x = nums[i] ^ nums[j];
                if (x >= low && x <= high) {
                    ans += 1;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x = nums[i] ^ nums[j];
                if (low <= x && x <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                int x = nums[i] ^ nums[j];
                if (low <= x && x <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                int x = nums[i] ^ nums[j];
                if (x >= low && x <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                int x = nums[i] ^ nums[j];
                if (low <= x && x <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i+1; j < n; ++j) {
                int x = nums[i] ^ nums[j];
                if (x >= low && x <= high) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.size(), res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int xor_ = nums[i] ^ nums[j];
                if (xor_ >= low && xor_ <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                int xorValue = nums[i] ^ nums[j];
                if (xorValue >= low && xorValue <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                int x = nums[i]^nums[j];
                if(x >= low && x <= high){
                    res ++;
                }
            }
        }
        return res;
