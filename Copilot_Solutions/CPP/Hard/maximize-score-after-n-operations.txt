Synthesizing 8/10 solutions

=======

        int n = nums.size() / 2;
        vector<vector<int>> dp(n + 1, vector<int>(1 << (2 * n), -1));
        dp[0][0] = 0;
        for (int i = 0; i < n; ++i) {
            for (int mask = 0; mask < (1 << (2 * n)); ++mask) {
                if (dp[i][mask] == -1) continue;
                for (int j = 0; j < 2 * n; ++j) {
                    if (mask & (1 << j)) continue;
                    for (int k = j + 1; k < 2 * n; ++k) {
                        if (mask & (1 << k)) continue;
                        int nmask = mask | (1 << j) | (1 << k);
                        dp[i + 1][nmask] = max(dp[i + 1][nmask], dp[i][mask] + (i + 1) * __gcd(nums[j], nums[k]));
                    }
                }
            }
        }
        return dp[n][(1 << (2 * n)) - 1];

=======

        int n = nums.size() / 2;
        vector<vector<int>> dp(n + 1, vector<int>(1 << n, 0));
        for (int i = 1; i <= n; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                if (__builtin_popcount(mask) != i) continue;
                for (int j = 0; j < n; j++) {
                    if ((mask >> j) & 1) {
                        for (int k = j + 1; k < n; k++) {
                            if ((mask >> k) & 1) {
                                int nmask = mask ^ (1 << j) ^ (1 << k);
                                dp[i][mask] = max(dp[i][mask], dp[i - 1][nmask] + i * __gcd(nums[j], nums[k + n]));
                            }
                        }
                    }
                }
            }
        }
        return dp[n][(1 << n) - 1];

=======

        int n = nums.size();
        vector<vector<int>> dp(n / 2 + 1, vector<int>(1 << n, 0));
        for (int i = 1; i <= n / 2; ++i) {
            for (int mask = 0; mask < (1 << n); ++mask) {
                if (__builtin_popcount(mask) == 2 * i) {
                    for (int j = 0; j < n; ++j) {
                        if ((mask >> j) & 1) {
                            for (int k = j + 1; k < n; ++k) {
                                if ((mask >> k) & 1) {
                                    dp[i][mask] = max(dp[i][mask], dp[i - 1][mask ^ (1 << j) ^ (1 << k)] + i * __gcd(nums[j], nums[k]));
                                }
                            }
                        }
                    }
                }
            }
        }
        return dp[n / 2][(1 << n) - 1];

=======

        int n = nums.size();
        vector<vector<int>> dp(n / 2 + 1, vector<int>(1 << n, 0));
        for (int i = 1; i <= n / 2; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                if (__builtin_popcount(mask) != 2 * i) continue;
                for (int j = 0; j < n; j++) {
                    for (int k = j + 1; k < n; k++) {
                        if ((mask >> j & 1) && (mask >> k & 1)) {
                            dp[i][mask] = max(dp[i][mask], dp[i - 1][mask ^ (1 << j) ^ (1 << k)] + i * __gcd(nums[j], nums[k]));
                        }
                    }
                }
            }
        }
        return dp[n / 2][(1 << n) - 1];

=======

        int n = nums.size() / 2;
        vector<vector<int>> dp(n+1, vector<int>(1<<n, 0));
        for (int i = 1; i <= n; i++) {
            for (int mask = 0; mask < (1<<n); mask++) {
                int cnt = __builtin_popcount(mask);
                if (cnt != i) continue;
                for (int j = 0; j < n; j++) {
                    if ((mask>>j)&1) {
                        for (int k = j+1; k < n; k++) {
                            if ((mask>>k)&1) {
                                int nmask = mask ^ (1<<j) ^ (1<<k);
                                dp[i][mask] = max(dp[i][mask], i * __gcd(nums[j], nums[k]) + dp[i-1][nmask]);
                            }
                        }
                    }
                }
            }
        }
        return dp[n][(1<<n)-1];

=======

        int n = nums.size();
        vector<vector<int>> dp(n/2+1, vector<int>(1 << n, 0));
        for (int i = 1; i <= n/2; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                if (__builtin_popcount(mask) != 2*i) continue;
                for (int j = 0; j < n; j++) {
                    if ((mask >> j) & 1) {
                        for (int k = j+1; k < n; k++) {
                            if ((mask >> k) & 1) {
                                int mask2 = mask ^ (1 << j) ^ (1 << k);
                                dp[i][mask] = max(dp[i][mask], i * __gcd(nums[j], nums[k]) + dp[i-1][mask2]);
                            }
                        }
                    }
                }
            }
        }
        return dp[n/2][(1 << n) - 1];

=======

        int n = nums.size();
        int dp[1 << n];
        memset(dp, 0, sizeof(dp));
        for (int mask = 1; mask < (1 << n); mask++) {
            int bits = __builtin_popcount(mask);
            if (bits & 1) continue;
            for (int i = 0; i < n; i++) {
                if (mask & (1 << i)) {
                    for (int j = i + 1; j < n; j++) {
                        if (mask & (1 << j)) {
                            int newMask = mask ^ (1 << i) ^ (1 << j);
                            dp[mask] = max(dp[mask], dp[newMask] + bits / 2 * __gcd(nums[i], nums[j]));
                        }
                    }
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < (1 << n); i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) cnt++;
            }
            if (cnt % 2 == 1) continue;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    for (int k = j + 1; k < n; k++) {
                        if (i & (1 << k)) {
                            dp[i] = max(dp[i], dp[i - (1 << j) - (1 << k)] + (cnt / 2) * __gcd(nums[j], nums[k]));
                        }
                    }
                }
            }
        }
        return dp[(1 << n) - 1];
