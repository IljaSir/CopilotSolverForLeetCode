Synthesizing 7/10 solutions

=======

        int n = corridor.size();
        int mod = 1e9 + 7;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (corridor[i] == 'S') cnt++;
        }
        if (cnt % 2 == 1) return 0;
        int ans = 1;
        for (int i = 0; i < n; i++) {
            if (corridor[i] == 'S') {
                int j = i;
                while (j < n && corridor[j] == 'S') j++;
                int k = j - i;
                if (i == 0 || j == n) {
                    ans = (long long)ans * (k + 1) % mod;
                } else {
                    ans = (long long)ans * k % mod;
                }
                i = j - 1;
            }
        }
        return ans;

=======

        int n = corridor.size();
        int mod = 1000000007;
        int dp[n][2];
        dp[0][0] = 1;
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            if (corridor[i] == 'P') {
                dp[i][0] = dp[i - 1][0];
                dp[i][1] = dp[i - 1][1];
            } else {
                dp[i][0] = dp[i - 1][0] + dp[i - 1][1];
                dp[i][1] = dp[i - 1][0];
                dp[i][0] %= mod;
                dp[i][1] %= mod;
            }
        }
        return dp[n - 1][0];

=======

        int n = corridor.size();
        int mod = 1e9+7;
        int dp[n+1][2];
        dp[0][0] = 1;
        dp[0][1] = 0;
        for (int i = 1; i <= n; i++) {
            if (corridor[i-1] == 'S') {
                dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % mod;
                dp[i][1] = dp[i-1][0];
            } else {
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][1];
            }
        }
        return dp[n][0];

=======

        int mod = 1e9+7;
        int n = corridor.length();
        vector<vector<long long>> dp(n+1, vector<long long>(2, 0));
        dp[0][0] = 1;
        for (int i = 0; i < n; ++i) {
            if (corridor[i] == 'S') {
                dp[i+1][0] = (dp[i+1][0] + dp[i][0] + dp[i][1]) % mod;
                dp[i+1][1] = dp[i][0];
            } else {
                dp[i+1][0] = dp[i][0];
                dp[i+1][1] = dp[i][1];
            }
        }
        return (dp[n][0] + dp[n][1]) % mod;

=======

        int n = corridor.length();
        int M = 1e9 + 7;
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        int j = 0;
        int k = 0;
        for(int i = 1; i < n; i++) {
            if(corridor[i] == 'S') {
                if(corridor[i - 1] == 'S') {
                    dp[i + 1] = dp[i] + dp[i - 1];
                }
                else {
                    dp[i + 1] = dp[i];
                }
            }
            else {
                if(corridor[i - 1] == 'S') {
                    dp[i + 1] = dp[i - 1];
                }
                else {
                    dp[i + 1] = 0;
                }
            }
            dp[i + 1] = dp[i + 1] % M;
        }
        return dp[n];

=======

        int n = corridor.size();
        int mod = 1e9+7;
        int dp0 = 1, dp1 = 0;
        for(int i = 0; i < n; i++) {
            if(corridor[i] == 'S') {
                dp1 = (dp1 + dp0) % mod;
            }
            else {
                dp0 = (dp0 + dp1) % mod;
            }
        }
        return dp0 - 1;

=======

        int n = corridor.size();
        int mod = 1e9 + 7;
        vector<long long> dp(n, 0);
        int cur = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (corridor[i] == 'S') {
                cur++;
            } else {
                cnt++;
            }
            if (i == 0) {
                dp[i] = 1;
            } else {
                dp[i] = cur * dp[i - 1] % mod;
                if (cnt >= 2) {
                    dp[i] = (dp[i] + (cnt - 1) * dp[i - 1] % mod) % mod;
                }
            }
        }
        return dp[n - 1];
