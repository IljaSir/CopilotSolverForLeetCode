Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(tasks.begin(), tasks.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        int res = 0, cur = 0;
        for (auto& t : tasks) {
            res = max(res, cur + t[1]);
            cur += t[0];
        }
        return res;

=======

        sort(tasks.begin(), tasks.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        int energy = 0;
        for (auto& task : tasks) {
            energy = max(energy + task[0], task[1]);
        }
        return energy;

=======

        sort(tasks.begin(), tasks.end(), [](const vector<int>& a, const vector<int>& b) { return a[1] - a[0] > b[1] - b[0]; });
        int res = 0;
        for (auto& task : tasks) {
            res = max(res + task[0], task[1]);
        }
        return res;

=======

        int n = tasks.size();
        sort(tasks.begin(), tasks.end(), [](vector<int> &a, vector<int> &b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += tasks[i][0];
        }
        int tmp = 0;
        for (int i = 0; i < n; i++) {
            tmp += tasks[i][0];
            res = min(res, max(tmp, tasks[i][1]));
        }
        return res;

=======

        int n = tasks.size();
        sort(tasks.begin(), tasks.end(), [](auto& a, auto& b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res + tasks[i][0], tasks[i][1]);
        }
        return res;

=======

        int n = tasks.size();
        sort(tasks.begin(), tasks.end(), [](auto& a, auto& b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans + tasks[i][0], tasks[i][1]);
        }
        return ans;

=======

        sort(tasks.begin(), tasks.end(), [](const vector<int> &a, const vector<int> &b) {return a[1] - a[0] > b[1] - b[0];});
        int ans = 0;
        for (const auto &t : tasks) {
            ans = max(ans + t[0], t[1]);
        }
        return ans;

=======

        int res = 0;
        sort(tasks.begin(), tasks.end(), [](auto& a, auto& b) {return a[1] - a[0] > b[1] - b[0];});
        for (auto& t : tasks) {
            res = max(res + t[0], t[1]);
        }
        return res;

=======

        int n = tasks.size();
        int ans = 0;
        sort(tasks.begin(), tasks.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] - a[0] > b[1] - b[0];
        });
        for (int i = 0; i < n; ++i) {
            ans += tasks[i][0];
        }
        for (int i = 0; i < n; ++i) {
            if (ans < tasks[i][1]) {
                ans = tasks[i][1];
            }
            ans -= tasks[i][0];
        }
        return ans;
