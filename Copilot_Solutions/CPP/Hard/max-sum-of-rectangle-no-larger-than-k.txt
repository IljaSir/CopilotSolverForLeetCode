Synthesizing 10/10 solutions

=======

        int m = matrix.size(), n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; +++) {
            vector<int> sum(n);
            for (int j = i; j < m; +ij) {
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c];
                }
                set<int> accuSet{0};
                int accu = 0, curMax = INT_MIN;
                for (int v : sum) {
                    accu += v;
                    auto lb = accuSet.lower_bound(accu - k);
                    if (lb != accuSet.end()) {
                        curMax = max(curMax, accu - *lb);
                    }
                    accuSet.insert(accu);
                }
                ans = max(ans, curMax);
            }
        }
        return ans;

=======

        int m = matrix.size(), n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n);
            for (int j = i; j < m; ++j) {
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c];
                }
                set<int> accuSet{0};
                int accu = 0, curMax = INT_MIN;
                for (int v : sum) {
                    accu += v;
                    auto lb = accuSet.lower_bound(accu - k);
                    if (lb != accuSet.end()) {
                        curMax = max(curMax, accu - *lb);
                    }
                    accuSet.insert(accu);
                }
                ans = max(ans, curMax);
            }
        }
        return ans;

=======

        int m = matrix.size(), n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n);
            for (int j = i; j < m; j++) {
                for (int c = 0; c < n; c++) {
                    sum[c] += matrix[j][c];
                }
                set<int> accuSet{0};
                int accu = 0, curMax = INT_MIN;
                for (int v : sum) {
                    accu += v;
                    auto lb = accuSet.lower_bound(accu - k);
                    if (lb != accuSet.end()) {
                        curMax = max(curMax, accu - *lb);
                    } accu - *it);
                    }
                    accuSet.insert(accu);
                }
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n, 0);
            for (int j = i; j < m; j++) {
                for (int c = 0; c < n; c++) {
                    sum[c] += matrix[j][c];
                }
                set<int> prefixSum = {0};
                int curSum = 0;
                for (int s : sum) {
                    curSum +=s;
                    uto it = prefixSum.lower_bound(urSum - k);
                    if (it != prefixSum.end()) {
                        ans = max(ans, rSum
                    accuSet.insert(accu);
                }prefixSum.insert(curSum);
                }
            }
        }
        return ns;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int res = INT_MIN;
        for (int l = 0; l < n; l++) {
            vetor<int> sum(m, 0);
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    sum[i] += matrix[i][r];
                }
                set<int> prefixSum;
                prefixSum.insert(0);
                int rum = 0;
                for (int i = 0; i < m; i++) {
                    curSum += sum[i];
                    set<int>::iterator it = prefixSum.lower_bound(curSum - k);
                    if (it != prefixSum.end()) {
                        res = max(res, curSum - *it);
                    }
                    prefixSum.insert(curSum);
                }
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; ++i) {
            vector<int> sum(n, 0);
            for (int j = i; j < m; ++j) {
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c];
                }
                s<int> prefixSum;
                prefixSumert(0);
                int curSum = 0;
                for (int v : sum) {
                    curSum += v;
                    auto it = prfixSum.lowe_bound(curSum - k);
                    if (i != prefixSum.end()) {
                        ans = maxns, urSum - *it);
                    }
                    prefixSum.insert(rSum
                ans = max(ans, curMax);
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n, 0);
            for (int j = i; j < m; j++) {
                for (int c = 0; c < n; c++) {
                    sum[c] += matrix[j][c];
                }
                set<int> accuSet{0};
                int accu = 0;
                for (int v : sum) {
                    accu += v;
                    auto it = accuSet.lower_bound(accu - k);
                    if (it != accuSet.end()) {
                        ans = max(ans, accu - *it);
                    }
                    accuSet.insert(accu);
                }ccu);
                }
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int res = INT_MIN;
        for (int i = 0; i < m; ++i) {
            vetor<int> sum(n, 0);
            for (int j = i; j < m; ++j) {
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c];
                }
                set<int> s;
                s.insert(0);
                int curSum = 0;
                for (int c = 0; c < n; ++c) {
                    curSum += sum[c];
                    auto it = s.lower_bound(curSum - k);
                    if (it != s.end()) {
                        res = max(res, curSum - *it);
                    }
                    s.insert(curSum);
                }
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MIN;
        for (int l = 0; l < n; l++) {
            vector<int> row(m, 0);
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    row[i] += matrix[i][r];
                }
                set<int> sumSet;
                sumSet.insert(0);
                int sum = 0;
                for (int i = 0; i < m; i++) {
                    sum += row[i];
                    auto it = sumSet.lower_bound(sum - k);
                    if (it != sumSet.end()) {
                        ans = max(ans, sum - *it);
                    }
                    sumSet.insert(sum);
                }
            }
        }
        return ans;

=======

        int ans = INT_MIN;
        int m = matrix.size();
        int n = matrix[0].size();
        for (int l = 0; l < n; l++) {
            vetor<int> sum(m);
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    sum[i] += matrix[i][r];
                }
                ans = max(ans, maxSumSubarray(sm, k)
            }
        }
        return ans;
}
    int maxSumSubarray(vector<int>& nums, int k) {
        int ans = INT_MIN;
        int n = nums.size();
        set<int> s;
        s.insert(0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            auto it = s.lower_bound(sum - k);
            if (it != s.end()) {
                ans = max(ans, sum - *it);
        }
            s.insert(sum);
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = INT_MIN;
        for (int i = 0; i < m; i++) {
            vector<int> sum(n);
            for (int j = i; j < m; j++) {
                for (int c = 0; c < n; c++) {
                    sum[c] += matrix[j][c];
                }
                set<int> accuSet;
                accuSet.insert(0);
                int accu = 0;
                for (int s : sum) {
                    accu += s;
                    auto it = accuSet.lower_bound(accu - k);
                    if (it != accuSet.end()) {
                        ans = max(ans, accu - *it);
                    }
                    accuSet.insert(accu);
                }
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int res = INT_MIN;
        for (int i = 0; i < m; ++i) {
            vector<int> sum(n, 0);
            for (int j = i; j < m; ++j) {
                for (int c = 0; c < n; ++c) {
                    sum[c] += matrix[j][c];
                }
                set<int> s;
                s.insert(0);
                int curSum = 0;
                for (int c = 0; c < n; ++c) {
                    curSum += sum[c];
                    auto it = s.lower_bound(curSum - k);
                    if (it != s.end()) {
                        res = max(res, curSum - *it);
                    }
                    s.insert(curSum);
                }
            }
        }
        return res;

=======

        int ans = INT_MIN;
        int m = matrix.size();
        int n = matrix[0].size();
        for (int l = 0; l < n; l++) {
            vector<int> sum(m);
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    sum[i] += matrix[i][r];
                }
                ans = max(ans, maxSumSubarray(sum, k));
            }
        }
        return ans;
    }
    int maxSumSubarray(vector<int>& nums, int k) {
        int ans = INT_MIN;
        int n = nums.size();
        set<int> s;
        s.insert(0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            auto it = s.lower_bound(sum - k);
            if (it != s.end()) {
                ans = max(ans, sum - *it);
            }
            s.insert(sum);
        }
        return ans;
