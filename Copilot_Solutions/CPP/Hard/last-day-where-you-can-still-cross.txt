Synthesizing 9/10 solutions

=======

        int n = cells.size();
        vector<int> parent(row * col + 1, 0);
        for (int i = 1; i <= row * col; i++) {
            parent[i] = i;
        }
        vector<vector<int>> grid(row, vector<int>(col, 0));
        int res = 0;
        for (int i = 0; i < n; i++) {
            int x = cells[i][0] - 1;
            int y = cells[i][1] - 1;
            grid[x][y] = 1;
            if (x == 0) {
                Union(x * col + y + 1, 0, parent);
            }
            if (x == row - 1) {
                Union(x * col + y + 1, row * col + 1, parent);
            }
            int dir[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
            for (int j = 0; j < 4; j++) {
                int nx = x + dir[j][0];
                int ny = y + dir[j][1];
                if (nx >= 0 && nx < row && ny >= 0 && ny < col && grid[nx][ny] == 1) {
                    Union(x * col + y + 1, nx * col + ny + 1, parent);
                }
            }
            if (Find(0, parent) == Find(row * col + 1, parent)) {
                res = i + 1;
            }
        }
        return res;
    }
    int Find(int x, vector<int>& parent) {
        if (parent[x] != x) {
            parent[x] = Find(parent[x], parent);
        }
        return parent[x];
    }
    void Union(int x, int y, vector<int>& parent) {
        int fx = Find(x, parent);
        int fy = Find(y, parent);
        if (fx != fy) {
            parent[fx] = fy;
        }

=======

        int n = cells.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(row, col, cells, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l + 1;
    }
    bool check(int row, int col, vector<vector<int>>& cells, int mid) {
        vector<vector<int>> grid(row, vector<int>(col, 0));
        vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int i = 0; i <= mid; i++) {
            grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
        }
        queue<pair<int, int>> q;
        for (int i = 0; i < col; i++) {
            if (grid[0][i] == 0) {
                q.push({0, i});
            }
        }
        while (!q.empty()) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for (auto& d : dir) {
                int nx = x + d[0];
                int ny = y + d[1];
                if (nx >= 0 && nx < row && ny >= 0 && ny < col && grid[nx][ny] == 0) {
                    grid[nx][ny] = 1;
                    q.push({nx, ny});
                }
            }
        }
        for (int i = 0; i < col; i++) {
            if (grid[row - 1][i] == 0) {
                return true;
            }
        }
        return false;

=======

        vector<vector<int>> grid(row, vector<int>(col, 0));
        vector<vector<bool>> visited(row, vector<bool>(col, false));
        int res = 0;
        for (int i = 0; i < cells.size(); i++) {
            int r = cells[i][0] - 1;
            int c = cells[i][1] - 1;
            grid[r][c] = 1;
            if (check(grid, visited, r, c, row, col)) {
                res = i + 1;
            }
        }
        return res;
    }
    
    bool check(vector<vector<int>>& grid, vector<vector<bool>>& visited, int r, int c, int row, int col) {
        visited.assign(row, vector<bool>(col, false));
        queue<pair<int, int>> q;
        q.push({0, c});
        visited[0][c] = true;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                if (x == row - 1) {
                    return true;
                }
                if (x > 0 && !visited[x - 1][y] && grid[x - 1][y] == 0) {
                    q.push({x - 1, y});
                    visited[x - 1][y] = true;
                }
                if (x < row - 1 && !visited[x + 1][y] && grid[x + 1][y] == 0) {
                    q.push({x + 1, y});
                    visited[x + 1][y] = true;
                }
                if (y > 0 && !visited[x][y - 1] && grid[x][y - 1] == 0) {
                    q.push({x, y - 1});
                    visited[x][y - 1] = true;
                }
                if (y < col - 1 && !visited[x][y + 1] && grid[x][y + 1] == 0) {
                    q.push({x, y + 1});
                    visited[x][y + 1] = true;
                }
            }
        }

=======

        int n = cells.size();
        vector<vector<int>> grid(row, vector<int>(col, 0));
        vector<vector<int>> parent(row * col, vector<int>(2, 0));
        for (int i = 0; i < row * col; i++) {
            parent[i][0] = i;
        }
        for (int i = 0; i < n; i++) {
            int x = cells[i][0] - 1;
            int y = cells[i][1] - 1;
            grid[x][y] = 1;
            int p = x * col + y;
            if (p < col) {
                parent[p][1] = 1;
            }
            if (x > 0 && grid[x - 1][y] == 1) {
                int q = (x - 1) * col + y;
                int p1 = find(parent, p);
                int q1 = find(parent, q);
                if (p1 != q1) {
                    parent[p1][0] = q1;
                    if (parent[p1][1] == 1 || parent[q1][1] == 1) {
                        parent[q1][1] = 1;
                    }
                }
            }
            if (x < row - 1 && grid[x + 1][y] == 1) {
                int q = (x + 1) * col + y;
                int p1 = find(parent, p);
                int q1 = find(parent, q);
                if (p1 != q1) {
                    parent[p1][0] = q1;
                    if (parent[p1][1] == 1 || parent[q1][1] == 1) {
                        parent[q1][1] = 1;
                    }
                }
            }
            if (y > 0 && grid[x][y - 1] == 1) {
                int q = x * col + y - 1;
                int p1 = find(parent, p);
                int q1 = find(parent, q);
                if (p1 != q1) {
                    parent[p1][0] = q1;
                    if (parent[p1][1] == 1 || parent[q1][1] == 1) {
                        parent[q1][1] = 1

=======

        int n = cells.size();
        vector<int> p(row * col + 1, 0);
        iota(p.begin(), p.end(), 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int x = cells[i][0] - 1;
            int y = cells[i][1] - 1;
            int id = x * col + y;
            p[id] = id;
            if (x > 0 && p[id - col] != id - col) {
                p[find(id, p)] = find(id - col, p);
            }
            if (x < row - 1 && p[id + col] != id + col) {
                p[find(id, p)] = find(id + col, p);
            }
            if (y > 0 && p[id - 1] != id - 1) {
                p[find(id, p)] = find(id - 1, p);
            }
            if (y < col - 1 && p[id + 1] != id + 1) {
                p[find(id, p)] = find(id + 1, p);
            }
            if (find(0, p) == find(row * col - 1, p)) {
                ans = i + 1;
            }
        }
        return ans;

=======

        vector<vector<int>> grid(row, vector<int>(col, 0));
        int days = cells.size();
        int low = 0, high = days;
        while (low < high) {
            int mid = low + (high - low) / 2;
            for (int i = 0; i < mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            }
            if (canCross(grid)) {
                low = mid + 1;
            } else {
                high = mid;
            }
            for (int i = 0; i < mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 0;
            }
        }
        return low;

=======

        int n = cells.size();
        vector<vector<int>> g(row, vector<int>(col, 0));
        vector<vector<int>> f(row, vector<int>(col, 0));
        vector<int> dx = {0, 0, 1, -1};
        vector<int> dy = {1, -1, 0, 0};
        auto valid = [&](int x, int y) {
            return x >= 0 && x < row && y >= 0 && y < col;
        };
        auto dfs = [&](int x, int y) {
            if (f[x][y]) return f[x][y];
            f[x][y] = 1;
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (valid(nx, ny) && g[nx][ny] && g[nx][ny] <= g[x][y])
                    f[x][y] = max(f[x][y], dfs(nx, ny) + 1);
            }
            return f[x][y];
        };
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            g[cells[i][0] - 1][cells[i][1] - 1] = i + 1;
            for (int j = 0; j < row; ++j)
                for (int k = 0; k < col; ++k)
                    f[j][k] = 0;
            if (dfs(0, 0) >= row) ans = i + 1;
        }
        return ans;

=======

        int n = cells.size();
        vector<int> p(n);
        iota(p.begin(), p.end(), 0);
        vector<vector<int>> g(row * col);
        vector<int> in(row * col);
        vector<int> out(row * col);
        function<int(int)> find = [&](int x) {
            return p[x] == x ? x : p[x] = find(p[x]);
        };
        function<void(int, int)> merge = [&](int x, int y) {
            x = find(x);
            y = find(y);
            if (x != y) {
                p[x] = y;
            }
        };
        auto addEdge = [&](int x, int y) {
            g[x].push_back(y);
            ++in[y];
            ++out[x];
        };
        for (int i = 0; i < n; ++i) {
            int x = cells[i][0] - 1, y = cells[i][1] - 1;
            int u = x * col + y;
            if (x > 0) {
                int v = (x - 1) * col + y;
                if (find(u) != find(v)) {
                    addEdge(u, v);
                    addEdge(v, u);
                    merge(u, v);
                }
            }
            if (x + 1 < row) {
                int v = (x + 1) * col + y;
                if (find(u) != find(v)) {
                    addEdge(u, v);
                    addEdge(v, u);
                    merge(u, v);
                }
            }
            if (y > 0) {
                int v = x * col + (y - 1);
                if (find(u) != find(v)) {
                    addEdge(u, v);
                    addEdge(v, u);
                    merge(u, v);
                }
            }
            if (y + 1 < col) {
                int v = x * col + (y + 1);
                if (find(u) != find(v)) {
                    addEdge(u, v);
                    addEdge(v, u);
                    merge(u, v);
                }
            }
        }
        vector<int> q;
        for (int i = 0; i < row * col; ++i) {
            if (in[i] == 0) {
                q.push_back(i);

=======

        int n = cells.size();
        vector<vector<int>> grid(row, vector<int>(col, 0));
        vector<int> parent(n, -1);
        vector<int> rank(n, 0);
        vector<int> dir = {0, 1, 0, -1, 0};
        for (int i = 0; i < n; i++) {
            int r = cells[i][0] - 1;
            int c = cells[i][1] - 1;
            grid[r][c] = 1;
            int id = r * col + c;
            parent[id] = id;
            for (int j = 0; j < 4; j++) {
                int nr = r + dir[j];
                int nc = c + dir[j + 1];
                if (nr >= 0 && nr < row && nc >= 0 && nc < col && grid[nr][nc] == 1) {
                    int nid = nr * col + nc;
                    union_(parent, rank, id, nid);
                }
            }
            if (r == 0) {
                for (int j = 0; j < col; j++) {
                    if (grid[0][j] == 1) {
                        union_(parent, rank, 0, j);
                    }
                }
            }
            if (r == row - 1) {
                for (int j = 0; j < col; j++) {
                    if (grid[row - 1][j] == 1) {
                        union_(parent, rank, id, (row - 1) * col + j);
                    }
                }
            }
            if (find(parent, 0) == find(parent, (row - 1) * col + col - 1)) {
                return n - i - 1;
            }
        }
        return 0;
