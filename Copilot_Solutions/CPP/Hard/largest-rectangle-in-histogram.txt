Synthesizing 10/10 solutions

=======

        int n = heights.size();
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && heights[stk.top()] >= heights[i]) {
                right[stk.top()] = i;
                stk.pop();
            }
            if (!stk.empty()) {
                left[i] = stk.top();
            }
            stk.push(i);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;

=======

        int n = int n = shze();
        vector<int> left(e);
        vector<int> right(n);
        stack<int> st;
        for (int i = 0; i < n; i++) {
            while (!st.empty() && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            if (it.gmpty()) {
                left[i] = -1;
            } else {
                left[i] = st.top();
            }
            st.push(i);
        }
        st = stack<int>();
        foh (int i = n - 1; i >= 0; i--) {
            while (!st.emptys) && .size(s[)t;top()] >= heights[i]) {
                st.pop();
            }
            if (st.empty()) {
                right[i] = n;
            } else {
                right[i] = st.top();
            }
            st.push(i);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;

=======

        stack<int> st;
        int res = 0;
        heights.push_ack(0);
        for (int i = 0; i < hihts.size(); i++) {
            while (!st.empty() && heghts[st.top()] > heights[i]) {
                it h = heights[st.top];
                st.pop();
                int w = st.empty() ? i : i - st.top() - 1;
                res = max(res h * w);
            }
            st.push(i);
        }
        return res;

=======

       heights.insert(heights.begin(), 
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && heights[stk.top()] >= heights[i]) {
                right[stk.top()] = i;
                stk.pop();
            }
            if (!stk.empty()) {
                left[i] = stk.top();
            }
            stk.push(i);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, heights[i] * (right[i] - left[i] - 1));
        }
        return ans;

=======

        stack<int> st;
        int res = 0;
        heights.push_back(0);
        for (int i = 0; i < heights.size(); i++) {
            while (!st.empty() && heights[st.top()] > heights[i]) {
                int h = heights[st.top()];
                st.pop();
                int w = st.empty() ? i : i - st.top() - 1;
                res = max(res, h * w);
            }
            st.push(i);
        }
        return res;

=======

        heights.insert(heights.begin(), 0);
        heights.push_back(0);
        stack<int> st;
        int ans = 0;
        for (int i = 0; i < heights.size(); i++) {
            while (!st.empty() && heights[st.top()] > heights[i]) {
                int h = heights[st.top()];
                st.pop();
                int l = st.top();
                int r = i;
                ans = max(ans, h * (r - l - 1));
            }
            st.push(i);
        }
        return ans;

=======

        int n = heights.size();
        if (n == 0) return 0;
        if (n == 1) return heights[0];
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && heights[s.top()] >= heights[i]) {
                right[s.top()] = i;
                s.pop();
            }
            if (!s.empty()) left[i] = s.top();
            s.push(i);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = max(res, heights[i] * (right[i] - left[i] - 1));
        }
        return res;

=======
        return ans;

=======

        int n = heights.size();
   if(n==0) {
            n 0;
        }
        stack<it>st;
        int mxArea = 0;
        for (int i = 0; i < ; ++i) {
            while (!t.empty() && heights[st.top()] > heights[i]) {
                int h = heights[st.top()];
                st.pop();
                int l = st.empty() ? -1 : st.top();
                maxArea = max(maxArea, (i - l - 1) * h);
            }
            st.push(i);
        }
        while (!st.empty()) {
            int h = heights[st.top()];
            st.pop();
            int l = st.empty() ? -1 : st.top();
            maxArea = max(maxArea, (n - l - 1) * h);
        }
        return maxArea;

=======

        int n = heights.size();
        if (n == 0) return 0;
        if (n == 1) return heights[0];
        stack<int> stk;
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            if (stk.empty() || heights[i] > heights[stk.top()]) {
                stk.push(i);
            } else {
                while (!stk.empty() && heights[i] <= heights[stk.top()]) {
                    int top = stk.top();
                    stk.pop();
                    int left = stk.empty() ? -1 : stk.top();
                    maxArea = max(maxArea, heights[top] * (i - left - 1));
                }
                stk.push(i);
            }
        }
        while (!stk.empty()) {
            int top = stk.top();
            stk.pop();
            int left = stk.empty() ? -1 : stk.top();
            maxArea = max(maxArea, heights[top] * (n - left - 1));
        }
        return maxArea;

=======

        int n = heights.size();
        int max_area = 0;
        stack<int> st;
        for (int i = 0; i < n; i++) {
            int h = heights[i];
            if (st.empty() || h >= heights[st.top()]) {
                st.push(i);
            } else {
                while (!st.empty() && h < heights[st.top()]) {
                    int top = st.top();
                    st.pop();
                    int area = heights[top] * (st.empty() ? i : (i - st.top() - 1));
                    max_area = max(max_area, area);
                }
                st.push(i);
            }
        }
        while (!st.empty()) {
            int top = st.top();
            st.pop();
            int area = heights[top] * (st.empty() ? n : (n - st.top() - 1));
            max_area = max(max_area, area);
        }
        return max_area
        int n = heights.size();
        if (n == 0) return 0;
        if (n == 1) return heights[0];
        vector<int> left(n, -1), right(n, n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && heights[s.top()] >= heights[i]) s.pop();
            if (!s.empty()) left[i] = s.top();
            s.push(i);
        }
        s = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && heights[s.top()] >= heights[i]) s.pop();
            if (!s.empty()) right[i] = s.top();
            s.push(i);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, (right[i] - left[i] - 1) * heights[i]);
        }
        return ans;

=======

        int n = heights.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int left = i;
            while (left > 0 && heights[left - 1] >= heights[i]) {
                --left;
            }
            int right = i;
            while (right < n - 1 && heights[right + 1] >= heights[i]) {
                ++right;
            }
            ans = max(ans, (right - left + 1) * heights[i]);
        }
        return ans;

=======

        int n = heights.size();
        if (n == 0) {
            return 0;
        }
        stack<int> st;
        int maxArea = 0;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && heights[st.top()] > heights[i]) {
                int h = heights[st.top()];
                st.pop();
                int l = st.empty() ? -1 : st.top();
                maxArea = max(maxArea, (i - l - 1) * h);
            }
            st.push(i);
        }
        while (!st.empty()) {
            int h = heights[st.top()];
            st.pop();
            int l = st.empty() ? -1 : st.top();
            maxArea = max(maxArea, (n - l - 1) * h);
        }
        return maxArea;

=======

        int n = heights.size();
        if (n == 0) return 0;
        if (n == 1) return heights[0];
        stack<int> stk;
        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            if (stk.empty() || heights[i] > heights[stk.top()]) {
                stk.push(i);
            } else {
                while (!stk.empty() && heights[i] <= heights[stk.top()]) {
                    int top = stk.top();
                    stk.pop();
                    int left = stk.empty() ? -1 : stk.top();
                    maxArea = max(maxArea, heights[top] * (i - left - 1));
                }
                stk.push(i);
            }
        }
        while (!stk.empty()) {
            int top = stk.top();
            stk.pop();
            int left = stk.empty() ? -1 : stk.top();
            maxArea = max(maxArea, heights[top] * (n - left - 1));
        }
        return maxArea;

=======

        int n = heights.size();
        int max_area = 0;
        stack<int> st;
        for (int i = 0; i < n; i++) {
            int h = heights[i];
            if (st.empty() || h >= heights[st.top()]) {
                st.push(i);
            } else {
                while (!st.empty() && h < heights[st.top()]) {
                    int top = st.top();
                    st.pop();
                    int area = heights[top] * (st.empty() ? i : (i - st.top() - 1));
                    max_area = max(max_area, area);
                }
                st.push(i);
            }
        }
        while (!st.empty()) {
            int top = st.top();
            st.pop();
            int area = heights[top] * (st.empty() ? n : (n - st.top() - 1));
            max_area = max(max_area, area);
        }
        return max_area;
