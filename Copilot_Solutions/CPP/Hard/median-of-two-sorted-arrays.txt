Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> nums3;
        nums3.reserve(nums1.size() + nums2.size());
        nums3.insert(nums3.end(), nums1.begin(), nums1.end());
        nums3.insert(nums3.end(), nums2.begin(), nums2.end());
        sort(nums3.begin(), nums3.end());
        int size = nums3.size();
        if (size % 2 == 1) {
            return nums3[size/2];
        } else {
            return (nums3[size/2 - 1] + nums3[size/2]) / 2.0;
        }

=======

        int m = nums1.size(), n = nums2.size();
        if (m > n) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && nums2[j - 1] > nums1[i]) {
                iMin = i + 1; // i is too small
            } else if (i > iMin && nums1[i - 1] > nums2[j]) {
                iMax = i - 1; // i is too big
            } else { // i is perfect
                int maxLeft = 0;
                if (i == 0) { maxLeft = nums2[j - 1]; }
                else if (j == 0) { maxLeft = nums1[i - 1]; }
                else { maxLeft = max(nums1[i - 1], nums2[j - 1]); }
                if ((m + n) % 2 == 1) { return maxLeft; }

                int minRight = 0;
                if (i == m) { minRight = nums2[j]; }
                else if (j == n) { minRight = nums1[i]; }
                else { minRight = min(nums2[j], nums1[i]); }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        if (n1 > n2) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int k = (n1 + n2 + 1) / 2;
        int left = 0, right = n1;
        while (left < right) {
            int m1 = left + (right - left) / 2;
            int m2 = k - m1;
            if (nums1[m1] < nums2[m2 - 1]) {
                left = m1 + 1;
            } else {
                right = m1;
            }
        }
        int m1 = left;
        int m2 = k - left;
        int c1 = max(m1 <= 0 ? INT_MIN : nums1[m1 - 1],
                     m2 <= 0 ? INT_MIN : nums2[m2 - 1]);
        if ((n1 + n2) % 2 == 1) {
            return c1;
        }
        int c2 = min(m1 >= n1 ? INT_MAX : nums1[m1],
                     m2 >= n2 ? INT_MAX : nums2[m2]);
        return (c1 + c2) * 0.5;

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n > m) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int left = 0;
        int right = n;
        while (left <= right) {
            int i = (left + right) / 2;
            int j = (n + m + 1) / 2 - i;
            if (i < n && nums2[j - 1] > nums1[i]) {
                left = i + 1;
            } else if (i > 0 && nums1[i - 1] > nums2[j]) {
                right = i - 1;
            } else {
                int maxLeft = 0;
                if (i == 0) {
                    maxLeft = nums2[j - 1];
                } else if (j == 0) {
                    maxLeft = nums1[i - 1];
                } else {
                    maxLeft = max(nums1[i - 1], nums2[j - 1]);
                }
                if ((n + m) % 2 == 1) {
                    return maxLeft;
                }
                int minRight = 0;
                if (i == n) {
                    minRight = nums2[j];
                } else if (j == m) {
                    minRight = nums1[i];
                } else {
                    minRight = min(nums1[i], nums2[j]);
                }
                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;

=======

        nums1.insert(nums1.end(), nums2.begin(), nums2.end());
        sort(nums1.begin(), nums1.end());
        int len = nums1.size();
        if (len % 2 == 1) {
            return nums1[len / 2];
        } else {
            return (nums1[len / 2] + nums1[len / 2 - 1]) / 2.0;
        }

=======

        int n = nums1.size();
        int m = nums2.size();
        if (n > m) return findMedianSortedArrays(nums2, nums1);
        int lo = 0, hi = n;
        while (lo <= hi) {
            int cut1 = (lo + hi) / 2;
            int cut2 = (n + m + 1) / 2 - cut1;
            int l1 = (cut1 == 0) ? INT_MIN : nums1[cut1 - 1];
            int l2 = (cut2 == 0) ? INT_MIN : nums2[cut2 - 1];
            int r1 = (cut1 == n) ? INT_MAX : nums1[cut1];
            int r2 = (cut2 == m) ? INT_MAX : nums2[cut2];
            if (l1 <= r2 && l2 <= r1) {
                if ((n + m) % 2 == 0) return (max(l1, l2) + min(r1, r2)) / 2.0;
                else return max(l1, l2);
            } else if (l1 > r2) hi = cut1 - 1;
            else lo = cut1 + 1;
        }
        return 0.0;

=======

        int m = nums1.size();
        int n = nums2.size();
        int total = m + n;
        if (total & 0x1) {
            return getKth(nums1, 0, m, nums2, 0, n, total / 2 + 1);
        } else {
            return (getKth(nums1, 0, m, nums2, 0, n, total / 2) + getKth(nums1, 0, m, nums2, 0, n, total / 2 + 1)) / 2.0;
        }
    }

    double getKth(vector<int>& nums1, int start1, int len1, vector<int>& nums2, int start2, int len2, int k) {
        if (len1 > len2) {
            return getKth(nums2, start2, len2, nums1, start1, len1, k);
        }
        if (len1 == 0) {
            return nums2[start2 + k - 1];
        }
        if (k == 1) {
            return min(nums1[start1], nums2[start2]);
        }
        int i = start1 + min(len1, k / 2) - 1;
        int j = start2 + min(len2, k / 2) - 1;
        if (nums1[i] > nums2[j]) {
            return getKth(nums1, start1, len1, nums2, j + 1, len2 - min(len2, k / 2), k - min(len2, k / 2));
        } else {
            return getKth(nums1, i + 1, len1 - min(len1, k / 2), nums2, start2, len2, k - min(len1, k / 2));
        }

=======

        int n = nums1.size() + nums2.size();
        if (n % 2 == 1) {
            return findKth(nums1, nums2, n / 2 + 1);
        } else {
            return (findKth(nums1, nums2, n / 2) + findKth(nums1, nums2, n / 2 + 1)) / 2.0;
        }
    }
    int findKth(vector<int>& nums1, vector<int>& nums2, int k) {
        int m = nums1.size(), n = nums2.size();
        int i = 0, j = 0;
        while (true) {
            if (i == m) {
                return nums2[j + k - 1];
            }
            if (j == n) {
                return nums1[i + k - 1];
            }
            if (k == 1) {
                return min(nums1[i], nums2[j]);
            }
            int mid = k / 2;
            int newI = min(i + mid, m) - 1;
            int newJ = min(j + mid, n) - 1;
            int pivot1 = nums1[newI], pivot2 = nums2[newJ];
            if (pivot1 <= pivot2) {
                k -= (newI - i + 1);
                i = newI + 1;
            } else {
                k -= (newJ - j + 1);
                j = newJ + 1;
            }
        }
        return 0;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int n = n1 + n2;
        vector<int> nums(n);
        int i1 = 0, i2 = 0;
        for (int i = 0; i < n; ++i) {
            if (i1 < n1 && i2 < n2) {
                if (nums1[i1] < nums2[i2]) {
                    nums[i] = nums1[i1];
                    ++i1;
                } else {
                    nums[i] = nums2[i2];
                    ++i2;
                }
            } else if (i1 < n1) {
                nums[i] = nums1[i1];
                ++i1;
            } else {
                nums[i] = nums2[i2];
                ++i2;
            }
        }
        if (n % 2 == 0) {
            return (nums[n/2-1] + nums[n/2]) / 2.0;
        } else {
            return nums[n/2];
        }
