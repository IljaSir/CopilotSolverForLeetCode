Synthesizing 10/10 solutions

=======

        int m = grid.size(), n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j]) {
                    int k = 1;
                    while (i + k < m && j + k < n && j - k >= 0 && grid[i + k][j] && grid[i + k][j + k] && grid[i + k][j - k]) {
                        ++k;
                    }
                    res += k - 1;
                    k = 1;
                    while (i + k < m && j + k < n && j - k >= 0 && grid[i + k][j] && grid[i + k][j + k] && grid[i + k][j - k]) {
                        ++k;
                    }
                    res += k - 1;
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                int h = 1;
                while (i+h < m && j-h >= 0 && j+h < n) {
                    if (grid[i+h][j-h] == 0 || grid[i+h][j+h] == 0) break;
                    ++h;
                    ++res;
                }
            }
        }
        return res;
    }
    int countInversePyramids(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                int h = 1;
                while (i-h >= 0 && j-h >= 0 && j+h < n) {
                    if (grid[i-h][j-h] == 0 || grid[i-h][j+h] == 0) break;
                    ++h;
                    ++res;
                }
            }
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                for (int h = 1; i + h < m && j - h >= 0 && j + h < n; ++h) {
                    if (grid[i + h][j - h] == 0 || grid[i + h][j + h] == 0) break;
                    ++res;
                }
                for (int h = 1; i - h >= 0 && j - h >= 0 && j + h < n; ++h) {
                    if (grid[i - h][j - h] == 0 || grid[i - h][j + h] == 0) break;
                    ++res;
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int r = 0; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                if (grid[r][c] == 1) {
                    int h = 1;
                    while (r + h < m && c - h >= 0 && c + h < n) {
                        if (grid[r + h][c - h] == 1 && grid[r + h][c + h] == 1) {
                            ++h;
                        } else {
                            break;
                        }
                    }
                    res += h - 1;
                }
            }
        }
        for (int r = 0; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                if (grid[r][c] == 1) {
                    int h = 1;
                    while (r - h >= 0 && c - h >= 0 && c + h < n) {
                        if (grid[r - h][c - h] == 1 && grid[r - h][c + h] == 1) {
                            ++h;
                        } else {
                            break;
                        }
                    }
                    res += h - 1;
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    int k = 1;
                    while(i + k < m && j - k >= 0 && j + k < n) {
                        if(grid[i + k][j - k] == 1 && grid[i + k][j + k] == 1) {
                            k++;
                        } else {
                            break;
                        }
                    }
                    res += k - 1;
                }
            }
        }
        return res;
    }
    int countInversePyramids(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) {
                    int k = 1;
                    while(i - k >= 0 && j - k >= 0 && j + k < n) {
                        if(grid[i - k][j - k] == 1 && grid[i - k][j + k] == 1) {
                            k++;
                        } else {
                            break;
                        }
                    }
                    res += k - 1;
                }
            }
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> up(m, vector<int>(n)), down(m, vector<int>(n)), left(m, vector<int>(n)), right(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                up[i][j] = (i == 0 ? 0 : up[i - 1][j]) + 1;
                left[i][j] = (j == 0 ? 0 : left[i][j - 1]) + 1;
            }
        }
        for (int i = m - 1; i >= 0; --i) {
            for (int j = n - 1; j >= 0; --j) {
                if (grid[i][j] == 0) continue;
                down[i][j] = (i == m - 1 ? 0 : down[i + 1][j]) + 1;
                right[i][j] = (j == n - 1 ? 0 : right[i][j + 1]) + 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) continue;
                int h = min(up[i][j], down[i][j]);
                for (int k = 1; k < h; ++k) {
                    if (left[i - k][j] >= k + 1 && right[i - k][j] >= k + 1) ++ans;
                    if (left[i + k][j] >= k + 1 && right[i + k][j] >= k + 1) ++ans;
                }
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    if (i > 0 && j > 0) {
                        dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    res += dp[i][j];
                }
            }
        }
        return res;
    }
    
    int countFertilePyramids(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    if (i > 0 && j > 0) {
                        dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    res += dp[i][j];
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    if (i > 0 && j < n - 1) {
                        dp[i][j] = min(dp[i - 1][j + 1], min(dp[i - 1][j], dp[i][j + 1])) + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    res += dp[i][j];
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        vector<vector<int>> row(m, vector<int>(n, 0));
        vector<vector<int>> col(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j]) {
                    row[i][j] = j ? row[i][j - 1] + 1 : 1;
                    col[i][j] = i ? col[i - 1][j] + 1 : 1;
                }
            }
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j]) {
                    int h = 1;
                    while (i + h < m && j - h >= 0 && j + h < n && col[i + h][j] >= h + 1 && row[i + h][j - h] >= h + 1 && row[i + h][j + h] >= h + 1) {
                        ++h;
                    }
                    ans += h - 1;
                    h = 1;
                    while (i - h >= 0 && j - h >= 0 && j + h < n && col[i][j] >= h + 1 && row[i][j - h] >= h + 1 && row[i][j + h] >= h + 1) {
                        ++h;
                    }
                    ans += h - 1;
                }
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        // pyramids
        for (int r = 0; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                int h = 1;
                while (r + h < m && c - h >= 0 && c + h < n && grid[r + h][c - h] && grid[r + h][c + h]) {
                    ++h;
                }
                if (h > 1) {
                    ans += h - 1;
                }
            }
        }
        // inverse pyramids
        for (int r = m - 1; r >= 0; --r) {
            for (int c = 0; c < n; ++c) {
                int h = 1;
                while (r - h >= 0 && c - h >= 0 && c + h < n && grid[r - h][c - h] && grid[r - h][c + h]) {
                    ++h;
                }
                if (h > 1) {
                    ans += h - 1;
                }
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int cnt = 0;
        // check pyramid
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == 1) {
                    int h = 1;
                    while (r + h < m && c - h >= 0 && c + h < n) {
                        if (grid[r + h][c - h] == 0 || grid[r + h][c + h] == 0) {
                            break;
                        }
                        h++;
                    }
                    if (h > 1) {
                        cnt += h - 1;
                    }
                }
            }
        }
        // check inverse pyramid
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (grid[r][c] == 1) {
                    int h = 1;
                    while (r - h >= 0 && c - h >= 0 && c + h < n) {
                        if (grid[r - h][c - h] == 0 || grid[r - h][c + h] == 0) {
                            break;
                        }
                        h++;
                    }
                    if (h > 1) {
                        cnt += h - 1;
                    }
                }
            }
        }
        return cnt;
