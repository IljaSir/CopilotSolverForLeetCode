Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        vector<int> dp2(n, 1);
        for (int i = n - 2; i >= 0; --i) {
            for (int j = n - 1; j > i; --j) {
                if (nums[j] < nums[i]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (dp[i] > 1 && dp2[i] > 1) {
                res = max(res, dp[i] + dp2[i] - 1);
            }
        }
        return n - res;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        vector<int> dp2(n, 1);
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[j] < nums[i]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] > 1 && dp2[i] > 1) {
                ans = max(ans, dp[i] + dp2[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        vector<int> dp2(n, 1);
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (dp[i] > 1 && dp2[i] > 1) {
                ans = max(ans, dp[i] + dp2[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.size();
        vector<int> inc(n, 1), dec(n, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    inc[i] = max(inc[i], inc[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    dec[i] = max(dec[i], dec[j] + 1);
                }
            }
        }
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if (inc[i] > 1 && dec[i] > 1) {
                ans = max(ans, inc[i] + dec[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.size();
        vector<int> lis(n, 1), lds(n, 1);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) lis[i] = max(lis[i], lis[j] + 1);
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            for (int j = n - 1; j > i; --j) {
                if (nums[j] < nums[i]) lds[i] = max(lds[i], lds[j] + 1);
            }
        }
        int ans = INT_MAX;
        for (int i = 1; i < n - 1; ++i) {
            if (lis[i] >= 2 && lds[i] >= 2) ans = min(ans, n - lis[i] - lds[i] + 1);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp1(n, 1);
        vector<int> dp2(n, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    dp1[i] = max(dp1[i], dp1[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; --i) {
            for (int j = n - 1; j > i; --j) {
                if (nums[j] < nums[i]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (dp1[i] > 1 && dp2[i] > 1) {
                res = max(res, dp1[i] + dp2[i] - 1);
            }
        }
        return n - res;

=======

        int n = nums.size();
        vector<int> f(n);
        vector<int> g(n);
        for (int i = 0; i < n; ++i) {
            f[i] = 1;
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    f[i] = max(f[i], f[j] + 1);
                }
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            g[i] = 1;
            for (int j = n - 1; j > i; --j) {
                if (nums[j] < nums[i]) {
                    g[i] = max(g[i], g[j] + 1);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (f[i] > 1 && g[i] > 1) {
                ans = max(ans, f[i] + g[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.size();
        int dp1[n], dp2[n];
        for(int i = 0; i < n; i++) {
            dp1[i] = dp2[i] = 1;
        }
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[j] < nums[i]) {
                    dp1[i] = max(dp1[i], dp1[j] + 1);
                }
            }
        }
        for(int i = n - 2; i >= 0; i--) {
            for(int j = n - 1; j > i; j--) {
                if(nums[j] < nums[i]) {
                    dp2[i] = max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int res = 0;
        for(int i = 0; i < n; i++) {
            if(dp1[i] > 1 && dp2[i] > 1) {
                res = max(res, dp1[i] + dp2[i] - 1);
            }
        }
        return n - res;

=======

        vector<int> left(nums.size());
        vector<int> right(nums.size());
        for(int i = 0; i < nums.size(); i++){
            left[i] = 1;
            for(int j = 0; j < i; j++){
                if(nums[i] > nums[j]){
                    left[i] = max(left[i], left[j] + 1);
                }
            }
        }
        for(int i = nums.size() - 1; i >= 0; i--){
            right[i] = 1;
            for(int j = nums.size() - 1; j > i; j--){
                if(nums[i] > nums[j]){
                    right[i] = max(right[i], right[j] + 1);
                }
            }
        }
        int result = 0;
        for(int i = 0; i < nums.size(); i++){
            if(left[i] > 1 && right[i] > 1){
                result = max(result, left[i] + right[i] - 1);
            }
        }
        return nums.size() - result;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            int maxLen = 0;
            for (int j = 0; j < i; ++j) {
                if (nums[j] < nums[i]) {
                    maxLen = max(maxLen, dp[j]);
                }
            }
            dp[i] = maxLen + 1;
        }
        vector<int> dp2(n, 0);
        for (int i = n - 1; i >= 0; --i) {
            int maxLen = 0;
            for (int j = n - 1; j > i; --j) {
                if (nums[j] < nums[i]) {
                    maxLen = max(maxLen, dp2[j]);
                }
            }
            dp2[i] = maxLen + 1;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (dp[i] > 1 && dp2[i] > 1) {
                ans = max(ans, dp[i] + dp2[i] - 1);
            }
        }
        return n - ans;
