Synthesizing 10/10 solutions

=======

        int i = 0, j = 0, sum1 = 0, sum2 = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = max(sum1, sum2) + nums1[i];
                ++i, ++j;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i++];
        }
        while (j < nums2.size()) {
            sum2 += nums2[j++];
        }
        return max(sum1, sum2) % 1000000007;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0;
        int j = 0;
        int sum1 = 0;
        int sum2 = 0;
        int sum = 0;
        while (i < n1 && j < n2) {
            if (nums1[i] == nums2[j]) {
                sum += nums1[i];
                sum1 = sum2 = sum;
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else {
                sum2 += nums2[j];
                j++;
            }
        }
        while (i < n1) {
            sum1 += nums1[i];
            i++;
        }
        while (j < n2) {
            sum2 += nums2[j];
            j++;
        }
        return max(sum1, sum2) % 1000000007;

=======

        int m = nums1.size(), n = nums2.size(), i = 0, j = 0, sum1 = 0, sum2 = 0;
        while (i < m || j < n) {
            if (i < m && (j == n || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < n && (i == m || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = max(sum1, sum2) + nums1[i];
                i++;
                j++;
            }
        }
        return max(sum1, sum2) % 1000000007;

=======

        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0;
        int res = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                res += nums1[i] + max(sum1, sum2);
                i++, j++;
                sum1 = 0, sum2 = 0;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i++];
        }
        while (j < nums2.size()) {
            sum2 += nums2[j++];
        }
        return res + max(sum1, sum2);
    }
    int maxSum(vector<int>& nums1, vector<int>& nums2) {
        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0;
        int res = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                res += nums1[i] + max(sum1, sum2);
                i++, j++;
                sum1 = 0, sum2 = 0;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i++];
        }
        while (j < nums2.size()) {
            sum2 += nums2[j++];
        }
        return res + max(sum1, sum2);

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0;
        while (i < n1 && j < n2) {
            if (nums1[i] == nums2[j]) {
                sum1 += nums1[i];
                sum2 += nums2[j];
                sum1 = max(sum1, sum2);
                sum2 = sum1;
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else {
                sum2 += nums2[j];
                j++;
            }
        }
        while (i < n1) {
            sum1 += nums1[i];
            i++;
        }
        while (j < n2) {
            sum2 += nums2[j];
            j++;
        }
        return max(sum1, sum2) % 1000000007;

=======

        int n = nums1.size(), m = nums2.size();
        int i = 0, j = 0;
        long long sum1 = 0, sum2 = 0, ans = 0;
        while (i < n && j < m) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                ans += max(sum1, sum2) + nums1[i];
                sum1 = sum2 = 0;
                i++;
                j++;
            }
        }
        while (i < n) {
            sum1 += nums1[i++];
        }
        while (j < m) {
            sum2 += nums2[j++];
        }
        ans += max(sum1, sum2);
        return ans % 1000000007;

=======

        long long sum1 = 0;
        long long sum2 = 0;
        long long sum = 0;
        int i = 0;
        int j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] == nums2[j]) {
                sum += max(sum1, sum2) + nums1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else {
                sum2 += nums2[j];
                j++;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i];
            i++;
        }
        while (j < nums2.size()) {
            sum2 += nums2[j];
            j++;
        }
        sum += max(sum1, sum2);
        return sum % (1000000000 + 7);

=======

        int i = 0, j = 0;
        int sum1 = 0, sum2 = 0;
        int ans = 0;
        int mod = 1e9 + 7;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j];
                j++;
            } else {
                ans += max(sum1, sum2) + nums1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i];
            i++;
        }
        while (j < nums2.size()) {
            sum2 += nums2[j];
            j++;
        }
        ans += max(sum1, sum2);
        return ans % mod;

=======

        int MOD = 1e9 + 7;
        long long sum1 = 0, sum2 = 0;
        int i = 0, j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] == nums2[j]) {
                sum1 = sum2 = max(sum1, sum2) + nums1[i];
                ++i;
                ++j;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                ++i;
            } else {
                sum2 += nums2[j];
                ++j;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i];
            ++i;
        }
        while (j < nums2.size()) {
            sum2 += nums2[j];
            ++j;
        }
        return max(sum1, sum2) % MOD;

=======

        int i = 0, j = 0;
        long long int sum1 = 0, sum2 = 0, ans = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] == nums2[j]) {
                ans += max(sum1, sum2) + nums1[i];
                sum1 = sum2 = 0;
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else {
                sum2 += nums2[j];
                j++;
            }
        }
        while (i < nums1.size()) {
            sum1 += nums1[i];
            i++;
        }
        while (j < nums2.size()) {
            sum2 += nums2[j];
            j++;
        }
        ans += max(sum1, sum2);
        return ans % 1000000007;
