Synthesizing 6/10 solutions (Duplicates hidden)

=======

        int m = str1.size();
        int n = str2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (str1[i - 1] == str2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        string ans;
        int i = m, j = n;
        while (i > 0 && j > 0) {
            if (str1[i - 1] == str2[j - 1]) {
                ans.push_back(str1[i - 1]);
                --i;
                --j;
            } else {
                if (dp[i - 1][j] > dp[i][j - 1]) {
                    ans.push_back(str1[i - 1]);
                    --i;
                } else {
                    ans.push_back(str2[j - 1]);
                    --j;
                }
            }
        }
        while (i > 0) {
            ans.push_back(str1[i - 1]);
            --i;
        }
        while (j > 0) {
            ans.push_back(str2[j - 1]);
            --j;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int n = str1.size();
        int m = str2.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (str1[i - 1] == str2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        string ans;
        int i = n;
        int j = m;
        while (i > 0 && j > 0) {
            if (str1[i - 1] == str2[j - 1]) {
                ans.push_back(str1[i - 1]);
                i--;
                j--;
            } else {
                if (dp[i - 1][j] > dp[i][j - 1]) {
                    ans.push_back(str1[i - 1]);
                    i--;
                } else {
                    ans.push_back(str2[j - 1]);
                    j--;
                }
            }
        }
        while (i > 0) {
            ans.push_back(str1[i - 1]);
            i--;
        }
        while (j > 0) {
            ans.push_back(str2[j - 1]);
            j--;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int m = str1.size();
        int n = str2.size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (str1[i-1] == str2[j-1]) {
                    dp[i][j] = 1 + dp[i-1][j-1];
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        int i = m, j = n;
        string ans;
        while (i > 0 && j > 0) {
            if (str1[i-1] == str2[j-1]) {
                ans += str1[i-1];
                i--;
                j--;
            } else {
                if (dp[i-1][j] > dp[i][j-1]) {
                    ans += str1[i-1];
                    i--;
                } else {
                    ans += str2[j-1];
                    j--;
                }
            }
        }
        while (i > 0) {
            ans += str1[i-1];
            i--;
        }
        while (j > 0) {
            ans += str2[j-1];
            j--;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int l1 = str1.length();
        int l2 = str2.length();
        vector<vector<int>> dp(l1+1, vector<int>(l2+1, 0));
        for (int i = 1; i <= l1; i++) {
            for (int j = 1; j <= l2; j++) {
                if (str1[i-1] == str2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        string res;
        int i = l1;
        int j = l2;
        while (i > 0 && j > 0) {
            if (str1[i-1] == str2[j-1]) {
                res.push_back(str1[i-1]);
                i--;
                j--;
            } else {
                if (dp[i-1][j] > dp[i][j-1]) {
                    res.push_back(str1[i-1]);
                    i--;
                } else {
                    res.push_back(str2[j-1]);
                    j--;
                }
            }
        }
        while (i > 0) {
            res.push_back(str1[i-1]);
            i--;
        }
        while (j > 0) {
            res.push_back(str2[j-1]);
            j--;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int len1 = str1.size();
        int len2 = str2.size();
        vector<vector<int>> dp(len1+1, vector<int>(len2+1, 0));
        for (int i=1; i<=len1; ++i) {
            for (int j=1; j<=len2; ++j) {
                if (str1[i-1] == str2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        int i = len1, j = len2;
        string res;
        while (i>0 && j>0) {
            if (str1[i-1] == str2[j-1]) {
                res.push_back(str1[i-1]);
                --i;
                --j;
            } else {
                if (dp[i-1][j] > dp[i][j-1]) {
                    res.push_back(str1[i-1]);
                    --i;
                } else {
                    res.push_back(str2[j-1]);
                    --j;
                }
            }
        }
        while (i>0) {
            res.push_back(str1[i-1]);
            --i;
        }
        while (j>0) {
            res.push_back(str2[j-1]);
            --j;
        }
        reverse(res.begin(), res.end());
        return res;
