Synthesizing 10/10 solutions

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(d, vector<int>(n, INT_MAX));
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; ++i) {
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int maxd = jobDifficulty[j];
                for (int k = j; k >= i; --k) {
                    maxd = max(maxd, jobDifficulty[k]);
                    if (dp[i - 1][k - 1] != INT_MAX) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + maxd);
                    }
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(d, vector<int>(n, INT_MAX));
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; ++i) {
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int max_diff = jobDifficulty[j];
                for (int k = j; k >= i; --k) {
                    max_diff = max(max_diff, jobDifficulty[k]);
                    if (dp[i - 1][k - 1] != INT_MAX) {
                        dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + max_diff);
                    }
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(d, vector<int>(n, INT_MAX));
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; ++i) {
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int maxd = jobDifficulty[j];
                for (int k = j; k >= i; --k) {
                    maxd = max(maxd, jobDifficulty[k]);
                    dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + maxd);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(d, vector<int>(n, INT_MAX));
        dp[0][0] = jobDifficulty[0];
        for (int j = 1; j < n; ++j) {
            dp[0][j] = max(dp[0][j-1], jobDifficulty[j]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int maxd = jobDifficulty[j];
                for (int k = j; k >= i; --k) {
                    maxd = max(maxd, jobDifficulty[k]);
                    dp[i][j] = min(dp[i][j], dp[i-1][k-1] + maxd);
                }
            }
        }
        return dp[d-1][n-1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(d, vector<int>(n, 0));
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; ++i) {
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int curMax = jobDifficulty[j];
                dp[i][j] = INT_MAX;
                for (int k = j; k >= i; --k) {
                    curMax = max(curMax, jobDifficulty[k]);
                    dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + curMax);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(n, vector<int>(d + 1, INT_MAX));
        dp[0][1] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[i][1] = max(jobDifficulty[i], dp[i - 1][1]);
        }
        for (int i = 1; i < n; i++) {
            for (int j = 2; j <= d && j <= i + 1; j++) {
                int maxd = jobDifficulty[i];
                for (int k = i; k >= j - 1; k--) {
                    maxd = max(maxd, jobDifficulty[k]);
                    if (dp[k - 1][j - 1] != INT_MAX) {
                        dp[i][j] = min(dp[i][j], dp[k - 1][j - 1] + maxd);
                    }
                }
            }
        }
        return dp[n - 1][d];

=======

        int n = jobDifficulty.size();
        if (d > n) return -1;
        vector<vector<int>> dp(d, vector<int>(n, 0));
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; ++i) {
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; ++i) {
            for (int j = i; j < n; ++j) {
                int maxd = jobDifficulty[j];
                dp[i][j] = INT_MAX;
                for (int k = j; k >= i; --k) {
                    maxd = max(maxd, jobDifficulty[k]);
                    dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + maxd);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(n + 1, vector<int>(d + 1, 0x7fffffff));
        dp[0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            int maxd = 0;
            for (int j = i; j >= 1; --j) {
                maxd = max(maxd, jobDifficulty[j - 1]);
                for (int k = 1; k <= min(j, d); ++k) {
                    dp[i][k] = min(dp[i][k], dp[j - 1][k - 1] + maxd);
                }
            }
        }
        return dp[n][d];

=======

        int n = jobDifficulty.size();
        if (n < d) {
            return -1;
        }
        vector<vector<int>> dp(n, vector<int>(d + 1, 1e9));
        dp[0][1] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[i][1] = max(dp[i - 1][1], jobDifficulty[i]);
        }
        for (int i = 1; i < n; i++) {
            for (int j = 2; j <= min(i + 1, d); j++) {
                int maxDiff = 0;
                for (int k = i; k >= 0; k--) {
                    maxDiff = max(maxDiff, jobDifficulty[k]);
                    dp[i][j] = min(dp[i][j], dp[k - 1][j - 1] + maxDiff);
                }
            }
        }
        return dp[n - 1][d];

=======

        int n = jobDifficulty.size();
        if (n < d) return -1;
        vector<vector<int>> dp(n, vector<int>(d, 0));
        int maxv = jobDifficulty[0];
        for (int i = 0; i < d; i++) {
            maxv = max(maxv, jobDifficulty[i]);
            dp[i][i] = maxv;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < min(i, d-1); j++) {
                int maxv = jobDifficulty[i];
                for (int k = i-1; k >= j; k--) {
                    maxv = max(maxv, jobDifficulty[k]);
                    dp[i][j] = max(dp[i][j], dp[k-1][j-1] + maxv);
                }
            }
        }
        return dp[n-1][d-1];
