Synthesizing 10/10 solutions (Duplicates hidden)

=======

        string s = to_string(n);
        int k = s.size();
        int ans = 0;
        for (int i = 1; i < k; ++i) {
            ans += pow(digits.size(), i);
        }
        for (int i = 0; i < k; ++i) {
            bool same = false;
            for (auto &d : digits) {
                if (d[0] < s[i]) {
                    ans += pow(digits.size(), k - i - 1);
                } else if (d[0] == s[i]) {
                    same = true;
                }
            }
            if (!same) {
                return ans;
            }
        }
        return ans + 1;

=======

        string s = to_string(n);
        int k = s.size();
        vector<int> dp(k+1);
        dp[k] = 1;
        for (int i = k-1; i >= 0; --i) {
            int si = s[i] - '0';
            for (string &d : digits) {
                if (stoi(d) < si) dp[i] += pow(digits.size(), k-i-1);
                else if (stoi(d) == si) dp[i] += dp[i+1];
            }
        }
        for (int i = 1; i < k; ++i) dp[0] += pow(digits.size(), i);
        return dp[0];

=======

        string s = to_string(n);
        int k = s.size();
        vector<int> dp(k+1);
        dp[k] = 1;
        for (int i = k-1; i >= 0; i--) {
            int si = s[i] - '0';
            for (string& d : digits) {
                if (stoi(d) < si) dp[i] += pow(digits.size(), k-i-1);
                else if (stoi(d) == si) dp[i] += dp[i+1];
            }
        }
        for (int i = 1; i < k; i++) dp[0] += pow(digits.size(), i);
        return dp[0];

=======

        string s = to_string(n);
        int k = s.size();
        vector<int> dp(k+1);
        dp[k] = 1;
        for (int i = k - 1; i >= 0; --i) {
            int si = s[i] - '0';
            for (auto &d : digits) {
                if (stoi(d) < si) {
                    dp[i] += pow(digits.size(), k - i - 1);
                } else if (stoi(d) == si) {
                    dp[i] += dp[i + 1];
                }
            }
        }
        for (int i = 1; i < k; ++i) {
            dp[0] += pow(digits.size(), i);
        }
        return dp[0];

=======

        string s = to_string(n);
        int k = s.size();
        int m = digits.size();
        vector<int> dp(k+1);
        dp[k] = 1;
        for (int i = k - 1; i >= 0; i--) {
            int si = s[i] - '0';
            for (string d : digits) {
                if (stoi(d) < si) {
                    dp[i] += pow(m, k - i - 1);
                } else if (stoi(d) == si) {
                    dp[i] += dp[i + 1];
                }
            }
        }
        for (int i = 1; i < k; i++) {
            dp[0] += pow(m, i);
        }
        return dp[0];

=======

        string s = to_string(n);
        int m = s.size();
        int k = digits.size();
        vector<int> dp(m + 1, 0);
        dp[m] = 1;
        for (int i = m - 1; i >= 0; --i) {
            int si = s[i] - '0';
            for (int j = 0; j < k; ++j) {
                int dj = digits[j][0] - '0';
                if (dj < si) {
                    dp[i] += pow(k, m - i - 1);
                } else if (dj == si) {
                    dp[i] += dp[i + 1];
                }
            }
        }
        for (int i = 1; i < m; ++i) {
            dp[0] += pow(k, i);
        }
        return dp[0];

=======

        string s = to_string(n);
        int m = s.size();
        int k = digits.size();
        vector<int> dp(m+1);
        dp[m] = 1;
        for (int i = m-1; i >= 0; --i) {
            int si = s[i] - '0';
            for (string &d: digits) {
                if (stoi(d) < si) {
                    dp[i] += pow(k, m-i-1);
                } else if (stoi(d) == si) {
                    dp[i] += dp[i+1];
                }
            }
        }
        for (int i = 1; i < m; ++i) {
            dp[0] += pow(k, i);
        }
        return dp[0];

=======

        string s = to_string(n);
        int len = s.length();
        int ret = 0;
        for (int i = 1; i < len; i++) {
            ret += pow(digits.size(), i);
        }
        for (int i = 0; i < len; i++) {
            bool flag = false;
            for (string& digit : digits) {
                if (digit[0] < s[i]) {
                    ret += pow(digits.size(), len - i - 1);
                } else if (digit[0] == s[i]) {
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                return ret;
            }
        }
        return ret + 1;

=======

        int len = 0, temp = n;
        while (temp > 0) {
            len++;
            temp /= 10;
        }
        int ans = 0;
        for (int i = 1; i < len; i++) {
            ans += pow(digits.size(), i);
        }
        for (int i = 0; i < len; i++) {
            int digit = n / pow(10, len - i - 1);
            int count = 0;
            for (string d : digits) {
                if (stoi(d) < digit) {
                    count++;
                }
            }
            ans += count * pow(digits.size(), len - i - 1);
            if (count == 0) {
                return ans;
            }
            n %= (int)pow(10, len - i - 1);
        }
        return ans + 1;
