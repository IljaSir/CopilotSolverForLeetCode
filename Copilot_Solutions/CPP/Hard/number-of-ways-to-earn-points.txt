Synthesizing 10/10 solutions

=======

        int n = types.size();
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int k = 1; j - k * types[i][1] >= 0 && k <= types[i][0]; ++k) {
                    dp[j] = (dp[j] + dp[j - k * types[i][1]]) % 1000000007;
                }
            }
        }
        return dp[target];

=======

        int n = types.size();
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for(int i=1; i<=n; i++){
            for(int j=0; j<=target; j++){
                dp[i][j] = dp[i-1][j];
                for(int k=1; k<=types[i-1][0]; k++){
                    if(j-k*types[i-1][1] >= 0){
                        dp[i][j] = (dp[i][j] + dp[i-1][j-k*types[i-1][1]]) % 1000000007;
                    }else{
                        break;
                    }
                }
            }
        }
        return dp[n][target];

=======

        int n = types.size();
        vector<vector<int>> dp(n+1, vector<int>(target+1));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= target; j++) {
                dp[i][j] = dp[i-1][j];
                for (int k = 1; k <= types[i-1][0] && k*types[i-1][1] <= j; k++) {
                    dp[i][j] += dp[i-1][j-k*types[i-1][1]];
                    dp[i][j] %= 1000000007;
                }
            }
        }
        return dp[n][target];

=======

        int n = types.size();
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            int count = types[i][0];
            int marks = types[i][1];
            for (int j = 1; j <= count; ++j) {
                for (int k = target; k >= marks; --k) {
                    dp[k] += dp[k - marks];
                    dp[k] %= 1000000007;
                }
            }
        }
        return dp[target];

=======

        int n = types.size();
        vector<int> dp(target+1, 0);
        dp[0] = 1;
        for (int i=0; i<n; i++) {
            for (int j=types[i][0]; j<=target; j++) {
                dp[j] = (dp[j] + dp[j-types[i][0]]) % 1000000007;
            }
        }
        return dp[target];

=======

        vector<vector<int>> dp(target+1, vector<int>(types.size()));
        for (int i = 0; i < types.size(); ++i) {
            for (int j = 0; j <= target; ++j) {
                if (j == 0) {
                    dp[j][i] = 1;
                } else {
                    int cur = 0;
                    for (int k = 0; k <= types[i][0]; ++k) {
                        if (j >= k * types[i][1]) {
                            cur = (cur + dp[j-k*types[i][1]][i]) % 1000000007;
                        }
                    }
                    dp[j][i] = cur;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < types.size(); ++i) {
            ans = (ans + dp[target][i]) % 1000000007;
        }
        return ans;

=======

        int mod = 1e9 + 7;
        vector<int> dp(target + 1, 0);
        dp[0] = 1;
        
        for (auto& type: types) {
            for (int i = type[1]; i <= target; i++) {
                dp[i] = (dp[i] + dp[i - type[1]]) % mod;
            }
        }
        return dp[target];

=======

        const int mod = 1e9 + 7;
        vector<int> dp(target+1, 0);
        dp[0] = 1;
        for (auto &t : types) {
            int count = t[0], mark = t[1];
            for (int i = mark; i <= target; ++i) {
                dp[i] = (dp[i] + (long long)dp[i-mark] * count) % mod;
            }
        }
        return dp[target];

=======

        const int M = 1000000007;
        vector<int> dp(target+1, 0);
        dp[0] = 1;
        for (auto &t : types) {
            for (int i = t[1]; i <= target; ++i) {
                dp[i] = (dp[i] + (long long)dp[i-t[1]] * t[0]) % M;
            }
        }
        return dp[target];

=======

        int n = types.size();
        int m = target;
        int mod = 1e9 + 7;
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        // dp[i][j] = number of ways to reach j with first i types of questions
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                for (int k = 0; k <= types[i - 1][0]; k++) {
                    if (j - k * types[i - 1][1] >= 0) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - k * types[i - 1][1]]) % mod;
                    } else {
                        break;
                    }
                }
            }
        }
        return dp[n][m];
