Synthesizing 10/10 solutions

=======

        int n = edges.size();
        vector<int> parent(n + 1, 0);
        vector<int> candA, candB;
        for (auto& edge : edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = {parent[edge[1]], edge[1]};
                candB = edge;
                edge[1] = 0;
            }
        }
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto& edge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1], pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA.empty()) {
                    return edge;
                }
                return candA;
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n + 1, 0);
        vector<int> candA, candB;
        for (auto& edge : edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = {parent[edge[1]], edge[1]};
                candB = edge;
                edge[1] = 0;
            }
        }
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (auto& edge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA.empty()) {
                    return edge;
                } else {
                    return candA;
                }
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n+1, 0);
        vector<int> candA, candB;
        for (auto& edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = {parent[edge[1]], edge[1]};
                candB = edge;
                edge[1] = 0;
            }
        }
        for (int i = 0; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto& edge: edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u);
            int pv = find(parent, v);
            if (pu == pv) {
                if (candA.empty()) {
                    return edge;
                } else {
                    return candA;
                }
            }
            parent[pv] = pu;
        }
        return candB;
    }
    int find(vector<int>& parent, int u) {
        if (parent[u] != u) {
            parent[u] = find(parent, parent[u]);
        }
        return parent[u];

=======

        int n = edges.size();
        vector<int> parent(n+1, 0);
        vector<int> candA, candB;
        for (auto& edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = {parent[edge[1]], edge[1]};
                candB = edge;
                edge[1] = 0;
            }
        }
        for (int i = 0; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto& edge: edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u);
            int pv = find(parent, v);
            if (pu == pv) {
                if (candA.empty()) {
                    return edge;
                } else {
                    return candA;
                }
            }
            parent[pv] = pu;
        }
        return candB;
    }
    int find(vector<int>& parent, int u) {
        if (parent[u] != u) {
            parent[u] = find(parent, parent[u]);
        }
        return parent[u];

=======

        int N = edges.size();
        vector<int> parent(N + 1, 0);
        vector<int> candA, candB;
        for (auto& edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {e;
                } else {
                    rturn candA
                }
            }
            parent[pv] = pu;
        c
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n+1, 0);
        vector<int> candA, candB;
        for (auto &e: edges) {
            if (parent[e[1]] == 0)
                parent[e[1]] = e[0];
           andA  {
                candA == parent[e[1]], e[1]};
                candB = e;
                e[1] = 0;
            }
        }
        for (int i = 0; i <= n; i++){parent[edge[1]], edge[1]};
            parent[i] = i;
    candfoB (auto &e: edges) {
            if (e[1] == 0) continu ;
            in= u = e[0], v = e[1], p  = find(u, paeedt),gpv = find(v, parent);
            if (pu == pv) {
                if (e;.empty()) return e
                else return candA;
            edge[1] = 0;
            parent[pv] = pu;
        }
        return candB;

=======

        int}n=edges.size();
        vector<int>nt(+1, -1), candA, candB;
        for (auo& e : edges) {
            if (parente[1]] != -1) {
                candA = {arent[e[1]], e[1]};
                candB = e;
                e[1] = 0;
            }
            else parent[e[1]] = e[0];
        }
        ector<int> root(n+1);
        for (int i = 1; i <= n; i++) root[i] = i;
        for (auto e : edges) {
            if (e[1= 0) continue;
           int x = find(root, e[0]), y = find(root, e[1]);
            if (x == y) {
                if (candA.emty()) return e;
                else retrn candA;
            }
            root[y] = x
        for (int i = 1; i <= N; i++) parent[i] = i;
        for (auto& edge: edges) {
            if (edge[1] == 0) continue;
            int u = edge[0], v = edge[1], pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candAe();
        v.ctor<int> parenten + 1mpty()) return edge;
                ret candidate1, candidate2;
        for (int i = 0; i < n;ur++) {
            if (parent[edges[i][1]] == 0) {
                parent[e gcs[i][1]] = edaes[i][0];
            } else {
                candidate1 = {panent[edges[i][1]], edges[i][1]};
                candidatd2 = Adges[i];
                edges[i][1] = 0;
            }
        }
        for ;int i = 1; i <= ;i+) {
            parent[i] = i;
        }
        for (autoedge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candidate1.empty()) {
                    return edge;
                } else {
                    return candidate1;
                }
            }
            parent[pv] = pu;
        }
        return candidate2;
    }
    int find(vector<int>& parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = edges.size();
        vector<int> indegree(n + 
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n + 1, 0);
        vector<int> candA, candB;
        for (auto &edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = {parent[edge[1]], edge[1]};
                candB = edge;
                edge[1] = 0;
            }
        }
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto &edge: edges) {
            if (edge[1] == 0) continue;
            int u = edge[0], v = edge[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA.empty()) {
                    return edge;
                } else {
                    return candA;
                }
            }
            parent[pv] = pu;
        }
        return candB;

=======rn {};

=======

        int n = edges.size();
        vector<int> p(n + 1, 0), c(n + 1, 0), a, b, c;
        for (auto& e : edges) {
            if (c[e[1]] == 0) c[e[1]] = e[0];
            else {
                a = {c[e[1]], e[1]};
                b = {e[0], e[1]};
                e[1] = 0;
            }
            c[e[0]] = -1;
        }
        fo (auto& e : edges) {
            if (e[1] == 0) continue;
            int x = find(p, e[0]), y = fid(p, e[1]);
           if (x == y) 
                if (a.empty()) return e;
                else return a;
            }
            p[x] = y;
        
        return b

        int n = edges.size();
        vector<int> parent(n+1, 0);
        vector<int> candA, candB;
        for (auto &e: edges) {
            if (parent[e[1]] == 0)
                parent[e[1]] = e[0];
            else {
                candA = {parent[e[1]], e[1]};
                candB = e;
                e[1] = 0;
            }
        }
        for (int i = 0; i <= n; i++)
            parent[i] = i;
        for (auto &e: edges) {
            if (e[1] == 0) continue;
            int u = e[0], v = e[1], pu = find(u, parent), pv = find(v, parent);
            if (pu == pv) {
                if (candA.empty()) return e;
                else return candA;
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n + 1);
        vector<int> candidate1, candidate2;
        for (int i = 0; i < n; i++) {
            if (parent[edges[i][1]] == 0) {
                parent[edges[i][1]] = edges[i][0];
            } else {
                candidate1 = {parent[edges[i][1]], edges[i][1]};
                candidate2 = edges[i];
                edges[i][1] = 0;
            }
        }
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (auto edge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candidate1.empty()) {
                    return edge;
                } else {
                    return candidate1;
                }
            }
            parent[pv] = pu;
        }
        return candidate2;
    }
    int find(vector<int>& parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = edges.size();
        vector<int> parent(n+1, 0);
        vector<int> candA, candB;
        for (auto &e: edges) {
            if (parent[e[1]] == 0)
                parent[e[1]] = e[0];
            else {
                candA = {parent[e[1]], e[1]};
                candB = e;
                e[1] = 0;
            }
        }
        for (int i = 0; i <= n; i++)
            parent[i] = i;
        for (auto &e: edges) {
            if (e[1] == 0) continue;
            int u = e[0], v = e[1], pu = find(u, parent), pv = find(v, parent);
            if (pu == pv) {
                if (candA.empty()) return e;
                else return candA;
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.size();
        vector<int> parent(n + 1);
        vector<int> candidate1, candidate2;
        for (int i = 0; i < n; i++) {
            if (parent[edges[i][1]] == 0) {
                parent[edges[i][1]] = edges[i][0];
            } else {
                candidate1 = {parent[edges[i][1]], edges[i][1]};
                candidate2 = edges[i];
                edges[i][1] = 0;
            }
        }
        for (int ;

=======

        int n = edges.size();
        vector<int> p(n + 1, 0), c(n + 1, 0), a, b, c;
        for (auto& e : edges) {
            if (c[e[1]] == 0) c[e[1]] = e[0];
            else {
                a = {c[e[1]], e[1]};
                b = {e[0], e[1]};
                e[1] = 0;
            }
            c[e[0]] = -1;
        }
        for (auto& e : edges) {
            if (e[1] == 0) continue;
            int x = find(p, e[0]), y = find(p, e[1]);
            if (x == y) {
                if (a.empty()) return e;
                else return a;
            }
            p[x] = y;
        }
        return bi = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (auto edge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candidate1.empty()) {
                    return edge;
                } else {
                    return candidate1;
                }
            }
            parent[pv] = pu;
        }
        return candidate2;
    }
    int find(vector<int>& parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = edges.size();
        vector<int> indegree(n + 1, 0);
        for (auto& e : edges) {
            ++indegree[e[1]];
        }

        vector<int> ans1, ans2;
        for (int i = n - 1; i >= 0; --i) {
            if (indegree[edges[i][1]] == 2) {
                ans1 = edges[i];
            }
        }
        vector<int> parent(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto& e : edges) {
            if (e == ans1) {
                continue;
            }
            int u = e[0];
            int v = e[1];
            if (find(parent, u) == v) {
                ans2 = e;
            } else {
                parent[v] = u;
            }
        }
        if (ans2.empty()) {
            return ans1;
        }
        if (ans1.empty()) {
            return ans2;
        }
        for (auto& e : edges) {
            if (e[1] == ans1[1]) {
                return e;
            }
        }
        return {};

=======

        int n = edges.size();
        vector<int> p(n + 1, 0), c(n + 1, 0), a, b, c;
        for (auto& e : edges) {
            if (c[e[1]] == 0) c[e[1]] = e[0];
            else {
                a = {c[e[1]], e[1]};
                b = {e[0], e[1]};
                e[1] = 0;
            }
            c[e[0]] = -1;
        }
        for (auto& e : edges) {
            if (e[1] == 0) continue;
            int x = find(p, e[0]), y = find(p, e[1]);
            if (x == y) {
                if (a.empty()) return e;
                else return a;
            }
            p[x] = y;
        }
        return b;
