Synthesizing 7/10 solutions (Duplicates hidden)

=======

        long long num = stoll(n);
        long long ans = num - 1;
        for (int m = log(num) / log(2); m >= 2; m--) {
            long long k = pow(num, 1.0 / (m - 1));
            long long mul = 1, sum = 1;
            for (int i = 1; i < m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == num) {
                ans = k;
                break;
            }
        }
        return to_string(ans);

=======

        long long num = stoll(n);
        int max_len = log(num) / log(2);
        for (int len = max_len; len > 1; len--) {
            long long base = pow(num, 1.0 / (len - 1));
            long long sum = 1;
            long long cur = 1;
            for (int i = 1; i < len; i++) {
                cur *= base;
                sum += cur;
            }
            if (sum == num) {
                return to_string(base);
            }
        }
        return to_string(num - 1);

=======

        int64_t num = stol(n);
        int64_t max_base = log(num+1)/log(2);
        for (int64_t base = max_base; base > 1; base--) {
            int64_t k = pow(num, 1.0/(base-1));
            int64_t sum = 1, cur = 1;
            for (int i = 1; i < base; i++) {
                cur *= k;
                sum += cur;
            }
            if (sum == num) {
                return to_string(k);
            }
        }
        return to_string(num-1);
