Synthesizing 10/10 solutions

=======

        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end()) return 0;
        unordered_set<string> q1{beginWord};
        unordered_set<string> q2{endWord};
        int len = 1;
        while (!q1.empty() && !q2.empty()) {
            if (q1.size() > q2.size()) swap(q1, q2);
            unordered_set<string> q;
            for (string word : q1) {
                for (int i = 0; i < word.size(); ++i) {
                    char ch = word[i];
                    for (int j = 0; j < 26; ++j) {
                        word[i] = 'a' + j;
                        if (q2.find(word) != q2.end()) return len + 1;
                        if (dict.find(word) != dict.end()) {
                            q.insert(word);
                            dict.erase(word);
                        }
                    }
                    word[i] = ch;
                }
            }
            ++len;
            swap(q, q1);
        }
        return 0;

=======

        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end()) return 0;
        unordered_set<string> q1{beginWord};
        unordered_set<string> q2{endWord};
        int len = 1;
        while (!q1.empty() && !q2.empty()) {
            if (q1.size() > q2.size()) swap(q1, q2);
            unordered_set<string> q;
            for (auto word : q1) {
                dict.erase(word);
                for (int i = 0; i < word.size(); ++i) {
                    char ch = word[i];
                    for (int j = 0; j < 26; ++j) {
                        word[i] = 'a' + j;
                        if (q2.find(word) != q2.end()) return len + 1;
                        if (dict.find(word) != dict.end()) {
                            q.insert(word);
                            dict.erase(word);
                        }
                    }
                    word[i] = ch;
                }
            }
            swap(q, q1);
            ++len;
        }
        return 0;

=======

        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) {
            return 0;
        }
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        int length = 1;
        int strLen = beginWord.length();
        while (!beginSet.empty() && !endSet.empty()) {
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
            }
            unordered_set<string> tempSet;
            for (string word : beginSet) {
                wordSet.erase(word);
                for (int i = 0; i < strLen; ++i) {
                    char ch = word[i];
                    for (int j = 'a'; j <= 'z'; ++j) {
                        word[i] = j;
                        if (endSet.find(word) != endSet.end()) {
                            return length + 1;
                        }
                        if (wordSet.find(word) != wordSet.end()) {
                            tempSet.insert(word);
                            wordSet.erase(word);
                        }
                    }
                    word[i] = ch;
                }
            }
            swap(beginSet, tempSet);
            ++length;
        }
        return 0;

=======

        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) {
            return 0;
        }
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        int len = 1;
        int strLen = beginWord.length();
        unordered_set<string> visited;
        while (!beginSet.empty() && !endSet.empty()) {
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
            }
            unordered_set<string> tempSet;
            for (string word : beginSet) {
                visited.insert(word);
                string newWord = word;
                for (int i = 0; i < strLen; i++) {
                    char originChar = newWord[i];
                    for (char j = 'a'; j <= 'z'; j++) {
                        newWord[i] = j;
                        if (endSet.find(newWord) != endSet.end()) {
                            return len + 1;
                        }
                        if (wordSet.find(newWord) != wordSet.end() && visited.find(newWord) == visited.end()) {
                            tempSet.insert(newWord);
                        }
                    }
                    newWord[i] = originChar;
                }
            }
            len++;
            swap(beginSet, tempSet);
        }
        return 0;

=======

        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (!dict.count(endWord)) {
            return 0;
        }
        dict.erase(beginWord);
        dict.erase(endWord);
        unordered_set<string> q1{beginWord};
        unordered_set<string> q2{endWord};
        int step = 0;
        while (!q1.empty() && !q2.empty()) {
            ++step;
            if (q1.size() > q2.size()) {
                swap(q1, q2);
            }
            unordered_set<string> q;
            for (const string& word : q1) {
                string cur = word;
                for (int i = 0; i < cur.size(); ++i) {
                    char origin = cur[i];
                    for (int j = 0; j < 26; ++j) {
                        cur[i] = 'a' + j;
                        if (q2.count(cur)) {
                            return step + 1;
                        }
                        if (!dict.count(cur)) {
                            continue;
                        }
                        dict.erase(cur);
                        q.insert(cur);
                    }
                    cur[i] = origin;
                }
            }
            swap(q, q1);
        }
        return 0;

=======

        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (!wordSet.count(endWord)) return 0;
        unordered_set<string> q1{beginWord};
        unordered_set<string> q2{endWord};
        int step = 1;
        int len = beginWord.length();
        while (!q1.empty() && !q2.empty()) {
            if (q1.size() > q2.size()) {
                swap(q1, q2);
            }
            unordered_set<string> q;
            for (string w : q1) {
                wordSet.erase(w);
                for (int i = 0; i < len; ++i) {
                    char ch = w[i];
                    for (int j = 'a'; j <= 'z'; ++j) {
                        w[i] = j;
                        if (q2.count(w)) return step + 1;
                        if (!wordSet.count(w)) continue;
                        wordSet.erase(w);
                        q.insert(w);
                    }
                    w[i] = ch;
                }
            }
            swap(q, q1);
            ++step;
        }
        return 0;

=======

        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) return 0;
        unordered_set<string> beginSet{beginWord};
        unordered_set<string> endSet{endWord};
        int level = 1;
        while (!beginSet.empty() && !endSet.empty()) {
            if (beginSet.size() > endSet.size()) {
                swap(beginSet, endSet);
            }
            unordered_set<string> nextSet;
            for (auto word : beginSet) {
                wordSet.erase(word);
            }
            for (auto word : beginSet) {
                for (int i = 0; i < word.size(); i++) {
                    char ch = word[i];
                    for (int j = 0; j < 26; j++) {
                        word[i] = 'a' + j;
                        if (endSet.find(word) != endSet.end()) {
                            return level + 1;
                        }
                        if (wordSet.find(word) != wordSet.end()) {
                            nextSet.insert(word);
                            wordSet.erase(word);
                        }
                    }
                    word[i] = ch;
                }
            }
            swap(beginSet, nextSet);
            level++;
        }
        return 0;

=======

        unordered_set<string> wordSet(wordList.begin(), wordList.end());
        if (wordSet.find(endWord) == wordSet.end()) return 0;
        queue<string> q;
        q.push(beginWord);
        int ans = 0;
        while (!q.empty()) {
            ans++;
            int sz = q.size();
            for (int i = 0; i < sz; i++) {
                string word = q.front();
                q.pop();
                if (word == endWord) return ans;
                for (int j = 0; j < word.size(); j++) {
                    char ch = word[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        if (c == ch) continue;
                        word[j] = c;
                        if (wordSet.find(word) != wordSet.end()) {
                            q.push(word);
                            wordSet.erase(word);
                        }
                    }
                    word[j] = ch;
                }
            }
        }
        return 0;

=======

        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end())
            return 0;
        unordered_set<string> visited;
        queue<string> q;
        q.push(beginWord);
        int len = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                string cur = q.front();
                q.pop();
                if (cur == endWord)
                    return len;
                for (int j = 0; j < cur.size(); j++) {
                    char c = cur[j];
                    for (int k = 0; k < 26; k++) {
                        cur[j] = 'a' + k;
                        if (dict.find(cur) != dict.end() && visited.find(cur) == visited.end()) {
                            q.push(cur);
                            visited.insert(cur);
                        }
                    }
                    cur[j] = c;
                }
            }
            len++;
        }
        return 0;

=======

        std::unordered_set<string> word_set(wordList.begin(), wordList.end());
        if (word_set.find(endWord) == word_set.end()) {
            return 0;
        }
        std::unordered_set<string> begin_set;
        begin_set.insert(beginWord);
        std::unordered_set<string> end_set;
        end_set.insert(endWord);
        int n = beginWord.size();
        int step = 1;
        while (!begin_set.empty() && !end_set.empty()) {
            if (begin_set.size() > end_set.size()) {
                std::swap(begin_set, end_set);
            }
            std::unordered_set<string> temp_set;
            for (const string& word : begin_set) {
                for (int i = 0; i < n; ++i) {
                    string new_word = word;
                    for (char ch = 'a'; ch <= 'z'; ++ch) {
                        new_word[i] = ch;
                        if (end_set.find(new_word) != end_set.end()) {
                            return step + 1;
                        }
                        if (word_set.find(new_word) != word_set.end()) {
                            temp_set.insert(new_word);
                            word_set.erase(new_word);
                        }
                    }
                }
            }
            ++step;
            std::swap(begin_set, temp_set);
        }
        return 0;
