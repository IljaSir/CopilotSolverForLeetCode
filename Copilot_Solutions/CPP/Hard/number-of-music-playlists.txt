Synthesizing 10/10 solutions

=======

        vector<vector<long>> dp(goal + 1, vector<long>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1)) % 1000000007;
                if (j > k) {
                    dp[i][j] = (dp[i][j] + (dp[i - 1][j] * (j - k)) % 1000000007) % 1000000007;
                }
            }
        }
        return dp[goal][n];

=======

        int MOD = 1e9 + 7;
        vector<vector<long>> dp(goal + 1, vector<long>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1) + dp[i - 1][j] * max(j - k, 0);
                dp[i][j] %= MOD;
            }
        }
        return dp[goal][n];

=======

        int MOD = 1e9 + 7;
        vector<vector<long long>> dp(goal + 1, vector<long long>(n + 1));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1);
                dp[i][j] += dp[i - 1][j] * max(j - k, 0);
                dp[i][j] %= MOD;
            }
        }
        return dp[goal][n];

=======

        const int MOD = 1e9 + 7;
        vector<vector<long>> dp(goal + 1, vector<long>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1) + dp[i - 1][j] * max(j - k, 0);
                dp[i][j] %= MOD;
            }
        }
        return dp[goal][n];

=======

        vector<vector<long>> dp(goal+1, vector<long>(n+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i-1][j-1] * (n-j+1) + dp[i-1][j] * max(j-k, 0);
                dp[i][j] %= 1000000007;
            }
        }
        return dp[goal][n];

=======

        vector<vector<long long>> dp(goal+1, vector<long long>(n+1));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i-1][j-1] * (n - j + 1)) % 1000000007;
                if (j > k) {
                    dp[i][j] = (dp[i][j] + dp[i-1][j] * (j - k)) % 1000000007;
                }
            }
        }
        return dp[goal][n];

=======

        long long mod = 1000000007;
        vector<vector<long long>> dp(goal + 1, vector<long long>(n + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1)) % mod;
                if (j > k) {
                    dp[i][j] = (dp[i][j] + (dp[i - 1][j] * (j - k)) % mod) % mod;
                }
            }
        }
        return dp[goal][n];

=======

        long long dp[101][101] = {0};
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1) + dp[i - 1][j] * max(j - k, 0);
                dp[i][j] %= 1000000007;
            }
        }
        return dp[goal][n];

=======

        vector<vector<int>> dp(goal + 1, vector<int>(n + 1, 0));
        dp[0][0] = 1;
        for(int i = 1; i <= goal; ++i) {
            for(int j = 1; j <= n; ++j) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - (j - 1))) % 1000000007;
                if(j > k) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j] * (j - k)) % 1000000007;
                }
            }
        }
        return dp[goal][n];

=======

        vector<vector<int>> dp(n+1, vector<int>(goal+1,0));
        dp[0][0] = 1;
        for(int i=1; i<=n; i++) {
            for(int j=i; j<=goal; j++) {
                dp[i][j] = (dp[i-1][j-1] * (n-i+1) + dp[i][j-1] * max(i-k,0)) % 1000000007;
            }
        }
        return dp[n][goal];
