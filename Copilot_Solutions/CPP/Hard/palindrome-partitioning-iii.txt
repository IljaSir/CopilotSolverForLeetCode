Synthesizing 3/10 solutions (Duplicates hidden)

=======

        int n = s.length();
        vector<vector<int>> cost(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int l = i, r = j;
                while (l < r) {
                    cost[i][j] += s[l] != s[r];
                    ++l, --r;
                }
            }
        }
        
        vector<vector<int>> dp(n, vector<int>(k + 1, n));
        for (int i = 0; i < n; ++i) {
            dp[i][1] = cost[0][i];
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 2; j <= k; ++j) {
                for (int p = i; p >= 0; --p) {
                    dp[i][j] = min(dp[i][j], dp[p][j - 1] + cost[p + 1][i]);
                }
            }
        }
        return dp[n - 1][k];

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i >= j) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i + 1][j - 1];
                    if (s[i] != s[j]) {
                        dp[i][j]++;
                    }
                }
            }
        }
        vector<vector<int>> f(n + 1, vector<int>(k + 1, INT_MAX / 2));
        f[0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= k; ++j) {
                for (int p = 0; p < i; ++p) {
                    f[i][j] = min(f[i][j], f[p][j - 1] + dp[p][i - 1]);
                }
            }
        }
        return f[n][k];
