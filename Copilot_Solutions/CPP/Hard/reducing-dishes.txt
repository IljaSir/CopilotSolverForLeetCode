Synthesizing 10/10 solutions

=======

        sort(satisfaction.begin(), satisfaction.end());
        int res = 0, sum = 0;
        for (int i = satisfaction.size() - 1; i >= 0 && satisfaction[i] > -sum; --i) {
            sum += satisfaction[i];
            res += sum;
        }
        return res;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int ans = 0, sum = 0;
        for (int i = satisfaction.size() - 1; i >= 0 && satisfaction[i] > -sum; i--) {
            sum += satisfaction[i];
            ans += sum;
        }
        return ans;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int sum = 0;
        int ans = 0;
        for (int i = satisfaction.size() - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum <= 0) {
                break;
            }
            ans += sum;
        }
        return ans;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int sum = 0, ans = 0;
        for (int i = satisfaction.size() - 1; i >= 0 && satisfaction[i] > -sum; --i) {
            sum += satisfaction[i];
            ans += sum;
        }
        return ans;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size();
        int ans = 0, sum = 0;
        for (int i = n - 1; i >= 0; --i) {
            sum += satisfaction[i];
            if (sum > 0) ans += sum;
            else break;
        }
        return ans;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size();
        int sum = 0;
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > 0) {
                res += sum;
            } else {
                break;
            }
        }
        return res;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size();
        int sum = 0;
        int ans = 0;
        for (int i = n - 1; i >= 0; --i) {
            sum += satisfaction[i];
            if (sum > 0) {
                ans += sum;
            } else {
                break;
            }
        }
        return ans;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size();
        int sum = 0;
        int res = 0;
        for (int i = n - 1; i >= 0; --i) {
            sum += satisfaction[i];
            if (sum > 0) {
                res += sum;
            } else {
                break;
            }
        }
        return res;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int n = satisfaction.size();
        int sum = 0, cur = 0;
        for (int i = n - 1; i >= 0; --i) {
            cur += satisfaction[i];
            if (cur > 0) {
                sum += cur;
            } else {
                break;
            }
        }
        return sum;

=======

        sort(satisfaction.begin(), satisfaction.end());
        int maxSum = 0;
        int n = satisfaction.size();
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            int t = 1;
            for (int j = i; j < n; j++) {
                sum += t * satisfaction[j];
                t++;
            }
            if (maxSum < sum) {
                maxSum = sum;
            } else {
                break;
            }
        }
        return maxSum;
