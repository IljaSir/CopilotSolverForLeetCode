Synthesizing 10/10 solutions

=======

        int ans = INT_MIN;
        deque<int> q;
        for (int i = 0; i < points.size(); i++) {
            while (!q.empty() && points[i][0] - points[q.front()][0] > k) {
                q.pop_front();
            }
            if (!q.empty()) {
                ans = max(ans, points[i][0] + points[i][1] + points[q.front()][1] - points[q.front()][0]);
            }
            while (!q.empty() && points[i][1] - points[i][0] >= points[q.back()][1] - points[q.back()][0]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<int> dq;
        for (int i = 0; i < n; i++) {
            while (!dq.empty() && points[i][0] - points[dq.front()][0] > k) {
                dq.pop_front();
            }
            if (!dq.empty()) {
                ans = max(ans, points[i][0] + points[i][1] + points[dq.front()][1] - points[dq.front()][0]);
            }
            while (!dq.empty() && points[i][0] + points[i][1] - points[dq.back()][0] > points[dq.back()][0] + points[dq.back()][1]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<int> dq;
        for (int i = 0; i < n; i++) {
            while (!dq.empty() && points[i][0] - points[dq.front()][0] > k) dq.pop_front();
            if (!dq.empty()) ans = max(ans, points[i][0] + points[i][1] + points[dq.front()][1] - points[dq.front()][0]);
            while (!dq.empty() && points[i][0] + points[i][1] - points[dq.back()][0] > points[i][0] + points[i][1] - points[dq.back()][1]) dq.pop_back();
            dq.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<int> dq;
        for (int i = 0; i < n; ++i) {
            while (!dq.empty() && points[i][0] - points[dq.front()][0] > k) {
                dq.pop_front();
            }
            if (!dq.empty()) {
                ans = max(ans, points[i][0] + points[i][1] + points[dq.front()][1] - points[dq.front()][0]);
            }
            while (!dq.empty() && points[i][0] + points[i][1] > points[dq.back()][0] + points[dq.back()][1]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<int> q;
        for (int i = 0; i < n; i++) {
            while (!q.empty() && points[i][0] - points[q.front()][0] > k) {
                q.pop_front();
            }
            if (!q.empty()) {
                ans = max(ans, points[i][0] + points[i][1] + points[q.front()][1] - points[q.front()][0]);
            }
            while (!q.empty() && points[i][0] + points[i][1] - points[q.back()][0] > points[q.back()][0] + points[q.back()][1]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<int> dq;
        dq.push_back(0);
        for (int i = 1; i < n; ++i) {
            while (!dq.empty() && points[i][0] - points[dq.front()][0] > k) {
                dq.pop_front();
            }
            if (!dq.empty()) {
                ans = max(ans, points[i][1] + points[i][0] + points[dq.front()][1] - points[dq.front()][0]);
            }
            while (!dq.empty() && points[i][1] - points[i][0] >= points[dq.back()][1] - points[dq.back()][0]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return ans;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<pair<int, int>> dq;
        for (int i = 0; i < n; i++) {
            while (!dq.empty() && points[i][0] - dq.front().first > k) {
                dq.pop_front();
            }
            if (!dq.empty()) {
                ans = max(ans, dq.front().second + points[i][1] + points[i][0]);
            }
            while (!dq.empty() && dq.back().second - points[i][0] <= points[i][1]) {
                dq.pop_back();
            }
            dq.push_back({points[i][0], points[i][1] - points[i][0]});
        }
        return ans;

=======

        int n = points.size();
        deque<int> q;
        int ret = INT_MIN;
        for (int i = 0; i < n; i++) {
            while (!q.empty() && points[i][0] - points[q.front()][0] > k) {
                q.pop_front();
            }
            if (!q.empty()) {
                ret = max(ret, points[i][0] + points[i][1] + points[q.front()][1] - points[q.front()][0]);
            }
            while (!q.empty() && points[i][0] + points[i][1] - points[q.back()][0] > points[q.back()][0] + points[q.back()][1]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ret;

=======

        int n = points.size();
        int ans = INT_MIN;
        deque<pair<int, int>> q;
        for (int i = 0; i < n; ++i) {
            int x = points[i][0];
            int y = points[i][1];
            while (!q.empty() && x - q.front().first > k) {
                q.pop_front();
            }
            if (!q.empty()) {
                ans = max(ans, x + y + q.front().second);
            }
            while (!q.empty() && y - x > q.back().second) {
                q.pop_back();
            }
            q.push_back({x, y - x});
        }
        return ans;

=======

        int n = points.size();
        int res = INT_MIN;
        deque<pair<int, int>> dq; // {y - x, x}
        for (int i = 0; i < n; ++i) {
            int x = points[i][0];
            int y = points[i][1];
            while (!dq.empty() && x - dq.front().second > k) {
                dq.pop_front();
            }
            if (!dq.empty()) {
                res = max(res, x + y + dq.front().first);
            }
            while (!dq.empty() && y - x >= dq.back().first) {
                dq.pop_back();
            }
            dq.push_back({y - x, x});
        }
        return res;
