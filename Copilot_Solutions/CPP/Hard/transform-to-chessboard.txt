Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = board.size();
        vector<int> rows(n), cols(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                rows[i] = (rows[i] << 1) | board[i][j];
                cols[j] = (cols[j] << 1) | board[i][j];
            }
        }
        int rowSum = accumulate(rows.begin(), rows.end(), 0);
        int colSum = accumulate(cols.begin(), cols.end(), 0);
        if (rowSum != n / 2 * n && rowSum != (n + 1) / 2 * n) {
            return -1;
        }
        if (colSum != n / 2 * n && colSum != (n + 1) / 2 * n) {
            return -1;
        }
        if (n % 2 == 1) {
            if (rows[n / 2] % 2 == 1) {
                for (int i = 0; i < n; ++i) {
                    rows[i] ^= 1 << n / 2;
                }
            }
            if (cols[n / 2] % 2 == 1) {
                for (int i = 0; i < n; ++i) {
                    cols[i] ^= 1 << n / 2;
                }
            }
        }
        int rowSwap = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (rows[i] % 2 == 1) {
                    rowSwap += 1;
                }
            } else {
                if (rows[i] % 2 == 0) {
                    rowSwap += 1;
                }
            }
        }
        int colSwap = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (cols[i] % 2 == 1) {
                    colSwap += 1;
                }
            } else {
                if (cols[i] % 2 == 0) {
                    colSwap += 1;
                }
            }
        }
        if (n %

=======

        int n = board.size();
        vector<int> rows(n), cols(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                rows[i] = (rows[i] << 1) | board[i][j];
                cols[j] = (cols[j] << 1) | board[i][j];
            }
        }
        int r1 = rows[0], c1 = cols[0], cnt_r1 = 0, cnt_c1 = 0, cnt_r0 = 0, cnt_c0 = 0;
        for (int i = 0; i < n; ++i) {
            if (rows[i] != r1) ++cnt_r1;
            else ++cnt_r0;
            if (cols[i] != c1) ++cnt_c1;
            else ++cnt_c0;
        }
        if (abs(cnt_r1 - cnt_r0) > 1 || abs(cnt_c1 - cnt_c0) > 1) return -1;
        if (n & 1) {
            if (cnt_r1 & 1) c1 ^= (1 << (n - 1));
            if (cnt_c1 & 1) r1 ^= (1 << (n - 1));
        }
        else {
            if (cnt_r1 & 1) {
                if (cnt_c1 & 1) return -1;
                c1 ^= (1 << (n - 1));
            }
            else if (cnt_c1 & 1) r1 ^= (1 << (n - 1));
        }
        int cnt_r = 0, cnt_c = 0;
        for (int i = 0; i < n; ++i) {
            if (rows[i] != r1) {
                if ((rows[i] ^ r1) != ((1 << n) - 1)) return -1;
                ++cnt_r;
            }
            if (cols[i] != c1) {
                if ((cols[i] ^ c1) != ((1 << n) - 1)) return -1;
                ++cnt_c;
            }
        }
        return (cnt_r + cnt_c) / 2;

=======

        int n = board.size();
        vector<int> row(n), col(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                row[i] = (row[i] << 1) | board[i][j];
                col[j] = (col[j] << 1) | board[i][j];
            }
        }
        int rowSum = accumulate(row.begin(), row.end(), 0);
        int colSum = accumulate(col.begin(), col.end(), 0);
        if (rowSum < n / 2 || rowSum > (n + 1) / 2) {
            return -1;
        }
        if (colSum < n / 2 || colSum > (n + 1) / 2) {
            return -1;
        }
        int rowDiff = 0;
        for (int i = 0; i < n; ++i) {
            if (row[i] != (i % 2 ? row[0] : (row[0] ^ ((1 << n) - 1)))) {
                rowDiff++;
            }
        }
        int colDiff = 0;
        for (int j = 0; j < n; ++j) {
            if (col[j] != (j % 2 ? col[0] : (col[0] ^ ((1 << n) - 1)))) {
                colDiff++;
            }
        }
        if (n % 2 == 1) {
            if (rowDiff % 2 == 1) {
                rowDiff = n - rowDiff;
            }
            if (colDiff % 2 == 1) {
                colDiff = n - colDiff;
            }
        }
        else {
            rowDiff = min(n - rowDiff, rowDiff);
            colDiff = min(n - colDiff, colDiff);
        }
        return (rowDiff + colDiff) / 2;

=======

        int n = board.size();
        vector<int> rows(n), cols(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rows[i] = (rows[i] << 1) | board[i][j];
                cols[j] = (cols[j] << 1) | board[i][j];
            }
        }
        int r0 = rows[0], c0 = cols[0], cnt = 0;
        for (int i = 0; i < n; i++) {
            cnt += (rows[i] ^ r0) & 1;
            cnt += (cols[i] ^ c0) & 1;
        }
        if (cnt > 2) return -1;
        if (cnt == 1 && (r0 ^ c0 ^ 1) & 1) return -1;
        int r1 = 0, c1 = 0;
        for (int i = 0; i < n; i++) {
            r1 += (rows[i] ^ r0 ^ (i & 1)) & 1;
            c1 += (cols[i] ^ c0 ^ (i & 1)) & 1;
        }
        if (n & 1) {
            if (r1 & 1) r1 = n - r1;
            if (c1 & 1) c1 = n - c1;
        } else {
            r1 = min(r1, n - r1);
            c1 = min(c1, n - c1);
        }
        return (r1 + c1) / 2;

=======

        int n = board.size();
        int rowSum = 0, colSum = 0, rowSwap = 0, colSwap = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if ((board[0][0] ^ board[0][j] ^ board[i][0] ^ board[i][j]) == 1) {
                    return -1;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            rowSum += board[0][i];
            colSum += board[i][0];
            rowSwap += board[i][0] == i % 2;
            colSwap += board[0][i] == i % 2;
        }
        if (rowSum < n / 2 || rowSum > (n + 1) / 2) {
            return -1;
        }
        if (colSum < n / 2 || colSum > (n + 1) / 2) {
            return -1;
        }
        if (n % 2 == 1) {
            if (colSwap % 2 == 1) {
                colSwap = n - colSwap;
            }
            if (rowSwap % 2 == 1) {
                rowSwap = n - rowSwap;
            }
        } else {
            colSwap = min(colSwap, n - colSwap);
            rowSwap = min(rowSwap, n - rowSwap);
        }
        return (colSwap + rowSwap) / 2;

=======

        int n = board.size();
        int rowSum = 0, colSum = 0, rowSwap = 0, colSwap = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if ((board[0][0] ^ board[0][j] ^ board[i][0] ^ board[i][j]) == 1) {
                    return -1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            rowSum += board[0][i];
            colSum += board[i][0];
            rowSwap += board[i][0] == (i % 2);
            colSwap += board[0][i] == (i % 2);
        }
        if (rowSum < n / 2 || rowSum > (n + 1) / 2) {
            return -1;
        }
        if (colSum < n / 2 || colSum > (n + 1) / 2) {
            return -1;
        }
        if (n % 2 == 1) {
            if (colSwap % 2 == 1) {
                colSwap = n - colSwap;
            }
            if (rowSwap % 2 == 1) {
                rowSwap = n - rowSwap;
            }
        } else {
            colSwap = min(n - colSwap, colSwap);
            rowSwap = min(n - rowSwap, rowSwap);
        }
        return (colSwap + rowSwap) / 2;

=======

        int n = board.size();
        int row0 = 0, row1 = 0, col0 = 0, col1 = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) {
                    return -1;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            row0 += board[0][i] == i % 2;
            row1 += board[0][i] == (i + 1) % 2;
            col0 += board[i][0] == i % 2;
            col1 += board[i][0] == (i + 1) % 2;
        }
        if (n / 2 > row0 || row0 > (n + 1) / 2) {
            return -1;
        }
        if (n / 2 > row1 || row1 > (n + 1) / 2) {
            return -1;
        }
        if (n / 2 > col0 || col0 > (n + 1) / 2) {
            return -1;
        }
        if (n / 2 > col1 || col1 > (n + 1) / 2) {
            return -1;
        }
        if (n % 2) {
            if (col0 % 2) {
                col0 = n - col0;
            }
            if (row0 % 2) {
                row0 = n - row0;
            }
        } else {
            col0 = min(n - col0, col0);
            row0 = min(n - row0, row0);
        }
        return (col0 + row0) / 2;

=======

        int n = board.size();
        int row = 0;
        int col = 0;
        int rowSwap = 0;
        int colSwap = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if ((board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) == 1) {
                    return -1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            row += board[0][i];
            col += board[i][0];
            rowSwap += (board[i][0] == i % 2);
            colSwap += (board[0][i] == i % 2);
        }
        if (row < n / 2 || row > (n + 1) / 2) {
            return -1;
        }
        if (col < n / 2 || col > (n + 1) / 2) {
            return -1;
        }
        if (n % 2 == 1) {
            if (colSwap % 2 == 1) {
                colSwap = n - colSwap;
            }
            if (rowSwap % 2 == 1) {
                rowSwap = n - rowSwap;
            }
        }
        else {
            colSwap = min(n - colSwap, colSwap);
            rowSwap = min(n - rowSwap, rowSwap);
        }
        return (colSwap + rowSwap) / 2;
