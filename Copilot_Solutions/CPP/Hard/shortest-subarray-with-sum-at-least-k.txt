Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> sums(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sums[i+1] = sums[i] + nums[i];
        }
        deque<int> dq;
        int ans = INT_MAX;
        for (int i = 0; i < n+1; ++i) {
            while (!dq.empty() && sums[i] <= sums[dq.back()]) {
                dq.pop_back();
            }
            while (!dq.empty() && sums[i] - sums[dq.front()] >= k) {
                ans = min(ans, i - dq.front());
                dq.pop_front();
            }
            dq.push_back(i);
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        vector<int> prefix(n + 1);
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        deque<int> q;
        int ans = n + 1;
        for (int i = 0; i < n + 1; i++) {
            while (q.size() && prefix[i] - prefix[q.front()] >= k) {
                ans = min(ans, i - q.front());
                q.pop_front();
            }
            while (q.size() && prefix[i] <= prefix[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans == n + 1 ? -1 : ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) sum[i + 1] = sum[i] + nums[i];
        deque<int> q;
        int res = INT_MAX;
        for (int i = 0; i < sum.size(); i++) {
            while (!q.empty() && sum[i] - sum[q.front()] >= k) {
                res = min(res, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && sum[i] <= sum[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = nums.size();
        vector<int> prefix(n+1);
        for (int i = 0; i < n; i++) {
            prefix[i+1] = prefix[i] + nums[i];
        }
        deque<int> q;
        int res = n+1;
        for (int i = 0; i < n+1; i++) {
            while (!q.empty() && prefix[i] - prefix[q.front()] >= k) {
                res = min(res, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && prefix[i] <= prefix[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return res == n+1 ? -1 : res;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = dp[i-1] + nums[i];
        }
        int ans = INT_MAX;
        deque<int> q;
        for (int i = 0; i < n; ++i) {
            while (!q.empty() && dp[i] - dp[q.front()] >= k) {
                ans = min(ans, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && dp[i] < dp[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans != INT_MAX ? ans : -1;

=======

        int n = nums.size();
        int ans = n + 1;
        vector<int> sum(n + 1);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        deque<int> q;
        for (int i = 0; i <= n; i++) {
            while (!q.empty() && sum[i] - sum[q.front()] >= k) {
                ans = min(ans, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && sum[i] <= sum[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans == n + 1 ? -1 : ans;

=======

        int n = nums.size();
        vector<long> presum(n+1, 0);
        for(int i = 1; i <= n; i++) {
            presum[i] = presum[i-1] + nums[i-1];
        }
        deque<int> dq;
        int ans = INT_MAX;
        for(int i = 0; i <= n; i++) {
            while(!dq.empty() && presum[i] <= presum[dq.back()]) {
                dq.pop_back();
            }
            while(!dq.empty() && presum[i] >= presum[dq.front()] + k) {
                ans = min(ans, i - dq.front());
                dq.pop_front();
            }
            dq.push_back(i);
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        int ans = INT_MAX;
        vector<int> sum(n+1, 0);
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        deque<int> q;
        for (int i = 0; i <= n; i++) {
            while (!q.empty() && sum[i] - sum[q.front()] >= k) {
                ans = min(ans, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && sum[i] <= sum[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        if (n == 0) return -1;
        vector<long long> sums(n+1, 0);
        for (int i = 0; i < n; i++) {
            sums[i+1] = sums[i] + nums[i];
        }
        deque<int> q;
        int ans = INT_MAX;
        for (int i = 0; i <= n; i++) {
            while (!q.empty() && sums[i] - sums[q.front()] >= k) {
                ans = min(ans, i - q.front());
                q.pop_front();
            }
            while (!q.empty() && sums[i] <= sums[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        vector<int> cumSum(n+1,0);
        for (int i=1; i<=n; i++) {
            cumSum[i] = cumSum[i-1] + nums[i-1];
        }
        deque<int> dq;
        int ans = n + 1;
        for (int i=0; i<=n; i++) {
            while (!dq.empty() && cumSum[i] - cumSum[dq.front()] >= k) {
                ans = min(ans, i - dq.front());
                dq.pop_front();
            }
            while (!dq.empty() && cumSum[i] <= cumSum[dq.back()]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return ans == n + 1 ? -1 : ans;
