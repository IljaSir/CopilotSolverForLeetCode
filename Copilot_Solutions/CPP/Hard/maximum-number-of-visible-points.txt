Synthesizing 10/10 solutions

=======

        vector<double> angles;
        int origin = 0;
        for (auto& p : points) {
            if (p[0] == location[0] && p[1] == location[1]) {
                ++origin;
            } else {
                angles.push_back(atan2(p[1] - location[1], p[0] - location[0]) * 180 / M_PI);
            }
        }
        sort(angles.begin(), angles.end());
        int n = angles.size();
        for (auto& a : angles) {
            a += 360;
        }
        copy(angles.begin(), angles.end(), back_inserter(angles));
        int res = 0;
        int i = 0;
        for (int j = 0; j < angles.size(); ++j) {
            while (angles[j] - angles[i] > angle) {
                ++i;
            }
            res = max(res, j - i + 1);
        }
        return res + origin;

=======

        vector<double> angles;
        int samePoint = 0;
        for (auto& point : points) {
            if (point[0] == location[0] && point[1] == location[1]) {
                samePoint++;
                continue;
            }
            angles.push_back(atan2(point[1] - location[1], point[0] - location[0]) * 180 / M_PI);
        }
        sort(angles.begin(), angles.end());
        int n = angles.size();
        for (int i = 0; i < n; i++) {
            angles.push_back(angles[i] + 360);
        }
        int ans = samePoint;
        int i = 0;
        for (int j = 0; j < angles.size(); j++) {
            while (angles[j] - angles[i] > angle) {
                i++;
            }
            ans = max(ans, j - i + 1 + samePoint);
        }
        return ans;

=======

        vector<double> angles;
        int samePoints = 0;
        for (auto p : points) {
            if (p[0] == location[0] && p[1] == location[1]) {
                samePoints++;
                continue;
            }
            double a = atan2(p[1] - location[1], p[0] - location[0]) * 180 / M_PI;
            angles.push_back(a);
            angles.push_back(a + 360);
        }
        sort(angles.begin(), angles.end());
        int i = 0, j = 0, n = angles.size(), res = samePoints;
        while (j < n) {
            while (j < n && angles[j] - angles[i] <= angle) {
                res = max(res, j - i + 1);
                j++;
            }
            i++;
        }
        return res;

=======

        int count = 0;
        vector<double> angles;
        for (auto point : points) {
            if (point[0] == location[0] && point[1] == location[1]) {
                count++;
            } else {
                angles.push_back(atan2(point[1] - location[1], point[0] - location[0]) * 180 / M_PI);
            }
        }
        sort(angles.begin(), angles.end());
        int n = angles.size();
        for (int i = 0; i < n; i++) {
            angles.push_back(angles[i] + 360);
        }
        int res = 0;
        int l = 0;
        for (int r = 0; r < angles.size(); r++) {
            while (angles[r] - angles[l] > angle) {
                l++;
            }
            res = max(res, r - l + 1);
        }
        return res + count;

=======

        int x = location[0], y = location[1];
        vector<double> angles;
        int same = 0;
        for (auto& p : points) {
            if (p[0] == x && p[1] == y) {
                same++;
                continue;
            }
            angles.push_back(atan2(p[1] - y, p[0] - x) * 180 / M_PI);
        }
        sort(angles.begin(), angles.end());
        int n = angles.size();
        for (int i = 0; i < n; i++) {
            angles.push_back(angles[i] + 360);
        }
        int ans = same;
        int j = 0;
        for (int i = 0; i < n; i++) {
            while (j < angles.size() && angles[j] - angles[i] <= angle) {
                j++;
            }
            ans = max(ans, j - i + same);
        }
        return ans;

=======

        int count = 0;
        vector<double> angles;
        for (auto &p: points) {
            if (p[0] == location[0] && p[1] == location[1]) {
                count++;
            } else {
                angles.push_back(atan2(p[1] - location[1], p[0] - location[0]) * 180 / M_PI);
            }
        }
        sort(angles.begin(), angles.end());
        int n = angles.size();
        for (int i = 0; i < n; i++) {
            angles.push_back(angles[i] + 360);
        }
        int i = 0, j = 0, res = 0;
        while (j < angles.size()) {
            if (angles[j] - angles[i] <= angle) {
                res = max(res, j - i + 1);
                j++;
            } else {
                i++;
            }
        }
        return res + count;

=======

        int n = points.size();
        vector<double> angles;
        int same = 0;
        for (int i = 0; i < n; i++) {
            int x = points[i][0] - location[0];
            int y = points[i][1] - location[1];
            if (x == 0 && y == 0) {
                same++;
                continue;
            }
            angles.push_back(atan2(y, x) * 180 / M_PI);
        }
        sort(angles.begin(), angles.end());
        int m = angles.size();
        for (int i = 0; i < m; i++) {
            angles.push_back(angles[i] + 360);
        }
        int res = 0;
        int start = 0;
        for (int i = 0; i < m; i++) {
            while (angles[start] - angles[i] <= angle) {
                start++;
            }
            res = max(res, start - i);
        }
        return res + same;

=======

        int n = points.size();
        vector<double> angles;
        int extra = 0;
        for (auto &p : points) {
            if (p[0] == location[0] && p[1] == location[1]) {
                extra++;
            } else {
                angles.push_back(atan2(p[1] - location[1], p[0] - location[0]) * 180 / M_PI);
            }
        }
        sort(angles.begin(), angles.end());
        int m = angles.size();
        for (int i = 0; i < m; i++) {
            angles.push_back(angles[i] + 360);
        }
        int ans = 0;
        int i = 0;
        for (int j = 0; j < angles.size(); j++) {
            while (angles[j] - angles[i] > angle) {
                i++;
            }
            ans = max(ans, j - i + 1);
        }
        return ans + extra;

=======

        int n = points.size();
        vector<double> angles(n);
        int extra = 0;
        for (int i = 0; i < n; ++i) {
            if (points[i][0] == location[0] && points[i][1] == location[1]) {
                ++extra;
                continue;
            }
            angles[i] = atan2(points[i][1] - location[1], points[i][0] - location[0]) * 180 / M_PI;
            if (angles[i] < 0) angles[i] += 360;
        }
        sort(angles.begin(), angles.end());
        int ans = 1;
        int i = 0, j = 0;
        while (i < n) {
            while (j < n && angles[j] - angles[i] <= angle) ++j;
            ans = max(ans, j - i);
            ++i;
        }
        return ans + extra;

=======

        int n = points.size();
        int x = location[0], y = location[1];
        vector<double> v;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (points[i][0] == x && points[i][1] == y) {
                cnt++;
            } else {
                double a = atan2(points[i][1] - y, points[i][0] - x) * 180.0 / acos(-1.0);
                v.push_back(a);
            }
        }
        int m = v.size();
        sort(v.begin(), v.end());
        for (int i = 0; i < m; i++) {
            v.push_back(v[i] + 360);
        }
        int ans = cnt;
        for (int i = 0, j = 0; i < m; i++) {
            while (j - i < m && v[j] - v[i] <= angle) {
                j++;
            }
            ans = max(ans, j - i + cnt);
        }
        return ans;
