Synthesizing 8/10 solutions

=======

        int n = pairs.size();
        vector<vector<int>> adj(n);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (pairs[i][1] == pairs[j][0]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<int> vis(n);
        vector<vector<int>> ans;
        vector<int> path;
        dfs(0, vis, adj, ans, path, pairs);
        return ans;
    }
    void dfs(int u, vector<int> &vis, vector<vector<int>> &adj, vector<vector<int>> &ans, vector<int> &path, vector<vector<int>> &pairs) {
        vis[u] = 1;
        path.push_back(u);
        if (path.size() == pairs.size()) {
            ans.push_back(path);
            vis[u] = 0;
            path.pop_back();
            return;
        }
        for (int v : adj[u]) {
            if (!vis[v]) {
                dfs(v, vis, adj, ans, path, pairs);
            }
        }
        vis[u] = 0;
        path.pop_back();

=======

        vector<vector<int>> res;
        int n = pairs.size();
        sort(pairs.begin(), pairs.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        vector<int> visited(n, 0);
        for (int i = 0; i < n; ++i) {
            if (visited[i] == 0) {
                vector<int> a;
                a.push_back(pairs[i][0]);
                a.push_back(pairs[i][1]);
                res.push_back(a);
                visited[i] = 1;
                for (int j = i + 1; j < n; ++j) {
                    if (visited[j] == 0 && pairs[j][0] == a[1]) {
                        a[1] = pairs[j][1];
                        res.push_back(a);
                        visited[j] = 1;
                    }
                }
            }
        }
        return res;

=======

        vector<vector<int>> res;
        sort(pairs.begin(), pairs.end(), [](auto a, auto b){return a[1] < b[1];});
        res.push_back(pairs[0]);
        for(int i = 1; i < pairs.size(); i++){
            if(res.back()[1] == pairs[i][0]){
                res.push_back(pairs[i]);
            }
        }
        return res;

=======

        vector<vector<int>> ans;
        vector<vector<int>> g(100001);
        for (auto& p : pairs) {
            g[p[0]].push_back(p[1]);
            g[p[1]].push_back(p[0]);
        }
        vector<int> vis(100001, 0);
        function<void(int)> dfs = [&](int u) {
            vis[u] = 1;
            for (int v : g[u]) {
                if (!vis[v]) {
                    ans.push_back({u, v});
                    dfs(v);
                }
            }
        };
        dfs(pairs[0][0]);
        return ans;

=======

        int n = pairs.size();
        vector<vector<int>> res;
        vector<int> temp;
        sort(pairs.begin(), pairs.end(), [](vector<int> a, vector<int> b) {
            return a[1] < b[1];
        });
        temp.push_back(pairs[0][0]);
        temp.push_back(pairs[0][1]);
        res.push_back(temp);
        temp.clear();
        for (int i = 1; i < n; i++) {
            if (pairs[i][0] == res[i - 1][1]) {
                temp.push_back(pairs[i][0]);
                temp.push_back(pairs[i][1]);
                res.push_back(temp);
                temp.clear();
            }
            else {
                temp.push_back(pairs[i][1]);
                temp.push_back(pairs[i][0]);
                res.push_back(temp);
                temp.clear();
            }
        }
        return res;

=======

        vector<vector<int>> res;
        vector<int> temp;
        for(int i = 0; i < pairs.size(); ++i) {
            if(pairs[i][0] > pairs[i][1]) {
                swap(pairs[i][0], pairs[i][1]);
            }
        }
        sort(pairs.begin(), pairs.end(), [](vector<int>& a, vector<int>& b) {
            return a[0] < b[0];
        });
        for(int i = 0; i < pairs.size(); ++i) {
            if(temp.empty()) {
                temp.push_back(pairs[i][0]);
                temp.push_back(pairs[i][1]);
            } else {
                if(temp.back() == pairs[i][0]) {
                    temp.push_back(pairs[i][1]);
                } else {
                    res.push_back(temp);
                    temp.clear();
                    temp.push_back(pairs[i][0]);
                    temp.push_back(pairs[i][1]);
                }
            }
        }
        res.push_back(temp);
        return res;

=======

        vector<vector<int>> result;
        int n = pairs.size();
        int i = 0;
        while (i < n) {
            result.push_back(pairs[i]);
            if (i + 1 < n) {
                if (pairs[i][1] == pairs[i + 1][0]) {
                    i++;
                } else if (pairs[i][1] == pairs[i + 1][1]) {
                    swap(pairs[i + 1][0], pairs[i + 1][1]);
                    i++;
                } else if (pairs[i][0] == pairs[i + 1][0]) {
                    swap(pairs[i][0], pairs[i][1]);
                    i++;
                } else if (pairs[i][0] == pairs[i + 1][1]) {
                    swap(pairs[i][0], pairs[i][1]);
                    swap(pairs[i + 1][0], pairs[i + 1][1]);
                    i++;
                } else {
                    i++;
                }
            } else {
                i++;
            }
        }
        return result;

=======

        vector<vector<int>> ans;
        return ans;
