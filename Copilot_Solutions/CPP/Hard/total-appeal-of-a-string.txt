Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.length();
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int count[26] = {0};
            for (int j = i; j < n; j++) {
                if (count[s[j]-'a'] == 0) {
                    ans++;
                    count[s[j]-'a']++;
                }
            }
        }
        return ans;

=======

        int len = s.length();
        long long res = 0;
        for (int i = 0; i < len; ++i) {
            set<char> st;
            for (int j = i; j < len; ++j) {
                st.insert(s[j]);
                res += st.size();
            }
        }
        return res;

=======

        int n = s.length();
        vector<vector<int>> dp(n,vector<int>(26,0));
        for(int i=0;i<n;i++){
            dp[i][s[i]-'a']++;
            if(i>0){
                for(int j=0;j<26;j++){
                    dp[i][j]+=dp[i-1][j];
                }
            }
        }
        long long ans = 0;
        for(int i=0;i<n;i++){
            int cnt = 0;
            for(int j=0;j<26;j++){
                if(dp[i][j]>0){
                    cnt++;
                }
            }
            ans+=cnt*(i+1);
        }
        return ans;

=======

        int n = s.size();
        long long res = 0;
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; ++i) {
            int ch = s[i] - 'a';
            cnt[ch]++;
            int tmp = 0;
            for (int j = 0; j < 26; ++j) {
                if (cnt[j] > 0) {
                    tmp++;
                }
            }
            res += tmp;
        }
        return res;

=======

        long long sum = 0;
        long long n = s.size();
        long long count[26] = {0};
        for (long long i = 0; i < n; i++) {
            count[s[i] - 'a']++;
            sum += count[s[i] - 'a'] * (i + 1);
        }
        return sum;

=======

        long long result = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            int count[26] = {0};
            int k = 0;
            for (int j = i; j < n; j++) {
                int index = s[j] - 'a';
                if (count[index] == 0) {
                    count[index] = 1;
                    k++;
                }
                result += k;
            }
        }
        return result;

=======

        long long n = s.size();
        long long ans = 0;
        long long cnt[26] = {0};
        for (long long i = 0; i < n; i++) {
            long long sum = 0;
            memset(cnt, 0, sizeof(cnt));
            for (long long j = i; j < n; j++) {
                if (cnt[s[j] - 'a'] == 0) {
                    sum++;
                }
                cnt[s[j] - 'a']++;
                ans += sum;
            }
        }
        return ans;

=======

        long long sum = 0;
        for (int i = 0; i < s.size(); i++) {
            int j = i;
            int count = 0;
            vector<bool> seen(26, false);
            while (j < s.size()) {
                if (!seen[s[j] - 'a']) {
                    count++;
                    seen[s[j] - 'a'] = true;
                }
                sum += count;
                j++;
            }
        }
        return sum;

=======

        int n = s.length();
        int i = 0;
        long long ans = 0;
        while (i < n) {
            int j = i;
            int cnt = 0;
            bitset<26> bs;
            while (j < n) {
                if (!bs[s[j] - 'a']) {
                    bs[s[j] - 'a'] = 1;
                    cnt++;
                }
                ans += cnt;
                j++;
            }
            i++;
        }
        return ans;
