Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(events.begin(), events.end());
        int n = events.size();
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        for (int i = 1; i <= n; i++) {
            int start = events[i - 1][0], end = events[i - 1][1], value = events[i - 1][2];
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                auto it = upper_bound(events.begin(), events.begin() + i - 1, vector<int>{end, 0, 0});
                if (it != events.begin()) {
                    dp[i][j] = max(dp[i][j], dp[it - events.begin()][j - 1] + value);
                }
            }
        }
        return dp[n][k];

=======

        sort(events.begin(), events.end());
        int n = events.size();
        vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= k; ++i) {
            int maxVal = 0;
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = max(dp[i][j - 1], maxVal);
                int l = j, r = n, mid;
                while (l < r) {
                    mid = (l + r) / 2;
                    if (events[mid][0] <= events[j - 1][1]) {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                }
                maxVal = max(maxVal, dp[i - 1][j - 1] + events[j - 1][2]);
                if (l <= n) {
                    dp[i][l] = max(dp[i][l], maxVal);
                }
            }
        }
        int res = 0;
        for (int j = 1; j <= n; ++j) {
            res = max(res, dp[k][j]);
        }
        return res;

=======

        sort(events.begin(), events.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[1] < b[1];
        });
        int n = events.size();
        vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                int l = 0, r = i - 1;
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (events[mid][1] < events[i - 1][0]) {
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                dp[i][j] = max(dp[i][j], dp[l][j - 1] + events[i - 1][2]);
            }
        }
        return dp[n][k];

=======

        int n = events.size();
        sort(events.begin(), events.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        vector<vector<int>> dp(n, vector<int>(k + 1, 0));
        dp[0][1] = events[0][2];
        for (int i = 1; i < n; ++i) {
            for (int j = 1; j <= k; ++j) {
                dp[i][j] = max(dp[i][j], dp[i - 1][j]);
                int l = 0, r = i - 1;
                while (l <= r) {
                    int m = l + (r - l) / 2;
                    if (events[m][1] < events[i][0]) {
                        l = m + 1;
                    } else {
                        r = m - 1;
                    }
                }
                dp[i][j] = max(dp[i][j], dp[l - 1][j - 1] + events[i][2]);
            }
        }
        int res = 0;
        for (int j = 1; j <= k; ++j) {
            res = max(res, dp[n - 1][j]);
        }
        return res;

=======

        sort(events.begin(), events.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        vector<vector<int>> dp(events.size() + 1, vector<int>(k + 1, 0));
        for (int i = 1; i <= events.size(); ++i) {
            for (int j = 1; j <= k; ++j) {
                int left = 0, right = i - 1;
                while (left < right) {
                    int mid = left + (right - left) / 2;
                    if (events[mid][1] < events[i - 1][0]) {
                        left = mid + 1;
                    } else {
                        right = mid;
                    }
                }
                dp[i][j] = max(dp[i - 1][j], dp[left][j - 1] + events[i - 1][2]);
            }
        }
        return dp[events.size()][k];

=======

        int n = events.size();
        sort(events.begin(), events.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        vector<int> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            dp[i] = events[i][2];
        }
        for (int i = 1; i < k; ++i) {
            vector<int> dp2(n, 0);
            for (int j = 0; j < n; ++j) {
                int start = events[j][0];
                int end = events[j][1];
                int value = events[j][2];
                int l = 0;
                int r = j;
                while (l < r) {
                    int mid = (l + r) / 2;
                    if (events[mid][1] < start) {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                }
                int prev = 0;
                if (l > 0) {
                    prev = dp[l - 1];
                }
                dp2[j] = max(dp2[j], prev + value);
                if (j > 0) {
                    dp2[j] = max(dp2[j], dp2[j - 1]);
                }
            }
            dp = dp2;
        }
        return dp[n - 1];

=======

        sort(events.begin(), events.end());
        vector<int> dp(events.size(), 0);
        dp[0] = events[0][2];
        for (int i = 1; i < events.size(); i++) {
            dp[i] = events[i][2];
            for (int j = 0; j < i; j++) {
                if (events[j][1] < events[i][0]) {
                    dp[i] = max(dp[i], dp[j] + events[i][2]);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        sort(events.begin(), events.end());
        int n = events.size();
        vector<vector<int>> dp(n, vector<int>(k+1, 0));
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int st = events[i][0];
            int ed = events[i][1];
            int val = events[i][2];
            dp[i][1] = val;
            for(int j = i-1; j >= 0; j--) {
                if(events[j][1] < st) {
                    for(int l = 1; l <= k; l++) {
                        dp[i][l] = max(dp[i][l], dp[j][l-1] + val);
                    }
                }
            }
            for(int j = 1; j <= k; j++) {
                dp[i][j] = max(dp[i][j], dp[i][j-1]);
                ans = max(ans, dp[i][j]);
            }
        }
        return ans;
