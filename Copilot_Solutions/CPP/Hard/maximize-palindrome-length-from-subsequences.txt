Synthesizing 10/10 solutions

=======

        string s = word1 + word2;
        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; ++i) {
            dp[i][i + 1] = (s[i] == s[i + 1]) ? 2 : 0;
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i + len - 1 < n; ++i) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (dp[0][i] + dp[i + 1][j] + dp[j + 1][n - 1] == j - i) {
                    ans = max(ans, j - i + 1);
                }
            }
        }
        return ans;

=======

        string word = word1 + word2;
        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; ++i) {
            dp[i][i + 1] = word[i] == word[i + 1] ? 2 : 1;
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i + len <= n; ++i) {
                int j = i + len - 1;
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                if (word[i] == word[j]) {
                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            res = max(res, dp[i][n - 1]);
        }
        return res;

=======

        string word = word1 + word2;
        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (word[i] == word[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (dp[i][j] == j - i + 1) {
                    res = max(res, dp[i][j]);
                }
            }
        }
        return res;

=======

        string s = word1 + word2;
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = n - 1; i >= 0; i--){
            dp[i][i] = 1;
            for(int j = i + 1; j < n; j++){
                if(s[i] == s[j]){
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                }else{
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < word1.size(); i++){
            for(int j = word1.size(); j < n; j++){
                if(s[i] == s[j]){
                    ans = max(ans, dp[i + 1][j - 1] + 2);
                }
            }
        }
        return ans;

=======

        string s = word1 + word2;
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++) dp[i][i] = 1;
        int ans = 0;
        for(int i = n - 1; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                if(s[i] == s[j]) dp[i][j] = dp[i+1][j-1] + 2;
                else dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(s[i] == s[j]) ans = max(ans, dp[i+1][j-1] + 2);
            }
        }
        return ans;

=======

        int n = word1.size(), m = word2.size();
        string s = word1 + word2;
        vector<vector<int>> dp(n + m, vector<int>(n + m, 0));
        for (int i = 0; i < n + m; ++i) {
            dp[i][i] = 1;
        }
        for (int i = n + m - 1; i >= 0; --i) {
            for (int j = i + 1; j < n + m; ++j) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (word1[i] == word2[j]) {
                    ans = max(ans, dp[i][n + j] + dp[n + j + 1][n + m - 1]);
                }
            }
        }
        return ans;

=======

        string s = word1 + word2;
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++)
            dp[i][i] = 1;
        for(int i = n - 1; i >= 0; i--){
            for(int j = i + 1; j < n; j++){
                if(s[i] == s[j])
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                else
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
            }
        }
        int ans = dp[0][n - 1];
        int cnt[26] = {0};
        for(char c : word1)
            cnt[c - 'a']++;
        for(char c : word2)
            cnt[c - 'a']++;
        for(int i = 0; i < 26; i++)
            ans -= cnt[i] & 1;
        return ans;

=======

        int n = word1.size();
        int m = word2.size();
        string s = word1 + word2;
        int N = s.size();
        vector<vector<int>> dp(N, vector<int>(N, 0));
        int res = 0;
        for (int i = N - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < N; j++) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = m; j < N; j++) {
                if (s[i] == s[j]) {
                    res = max(res, dp[i + 1][j - 1] + 2);
                }
            }
        }
        return res;

=======

        int n1 = word1.size(), n2 = word2.size();
        vector<vector<int>> dp(n1 + n2 + 1, vector<int>(n1 + n2 + 1, 0));
        for (int i = 0; i < n1; ++i) {
            for (int j = 0; j < n2; ++j) {
                if (word1[i] == word2[j]) {
                    dp[i + 1][n1 + 1 + j] = dp[i][n1 + j] + 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= n1 + n2; ++i) {
            for (int j = 0; j <= n1 + n2; ++j) {
                if (i == 0 || j == 0 || i == n1 + n2 || j == n1 + n2) {
                    ans = max(ans, dp[i][j]);
                }
                else if ((i <= n1 && j > n1) || (i > n1 && j <= n1)) {
                    ans = max(ans, dp[i][j] * 2);
                }
            }
        }
        return ans;

=======

        int n = word1.length();
        int m = word2.length();
        string s = word1 + word2;
        int ans = 0;
        vector<vector<int>> dp(n+m, vector<int>(n+m, 0));
        for (int i = n+m-1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i+1; j < n+m; j++) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i+1][j-1] + 2;
                } else {
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1]);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = n; j < n+m; j++) {
                if (s[i] == s[j]) {
                    ans = max(ans, dp[i+1][j-1] + 2);
                }
            }
        }
        return ans;
