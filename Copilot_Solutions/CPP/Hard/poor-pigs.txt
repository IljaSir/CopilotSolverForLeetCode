Synthesizing 10/10 solutions

=======

        int pigs = 0;
        while (pow(minutesToTest / minutesToDie + 1, pigs) < buckets) {
            pigs++;
        }
        return pigs;

=======

        return ceil(log(buckets) / log(minutesToTest / minutesToDie + 1));

=======

        int base = minutesToTest / minutesToDie + 1;
        int res = 0;
        while (pow(base, res) < buckets) {
            res++;
        }
        return res;

=======

        int pigs = 0;
        int base = minutesToTest / minutesToDie + 1;
        while (pow(base, pigs) < buckets) {
            pigs++;
        }
        return pigs;

=======

        int times = minutesToTest / minutesToDie;
        int pigs = 0;
        while (pow(times + 1, pigs) < buckets) {
            ++pigs;
        }
        return pigs;

=======

        int pigs = 0;
        while (pow(minutesToTest/minutesToDie + 1, pigs) < buckets) pigs++;
        return pigs;

=======

        int pigs = 0;
        int states = minutesToTest / minutesToDie + 1;
        while (pow(states, pigs) < buckets) pigs++;
        return pigs;

=======

        int n = minutesToTest / minutesToDie;
        int m = 0;
        while (pow(n + 1, m) < buckets) {
            m++;
        }
        return m;

=======

        int test = minutesToTest / minutesToDie;
        int pig = 0;
        while (pow(test + 1, pig) < buckets) {
            pig++;
        }
        return pig;

=======

        int k = minutesToTest / minutesToDie;
        int pigs = 0;
        while (pow(k + 1, pigs) < buckets) pigs++;
        return pigs;
