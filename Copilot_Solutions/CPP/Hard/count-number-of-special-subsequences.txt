Synthesizing 10/10 solutions

=======

        long long a = 0, b = 0, c = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                a = 2 * a + 1;
            } else if (nums[i] == 1) {
                b = 2 * b + a;
            } else {
                c = 2 * c + b;
            }
        }
        return c % 1000000007;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(3, 0));
        if (nums[0] == 0) dp[0][0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] == 0) {
                dp[i][0] = (dp[i-1][0] * 2 + 1) % 1000000007;
                dp[i][1] = dp[i-1][1];
                dp[i][2] = dp[i-1][2];
            } else if (nums[i] == 1) {
                dp[i][0] = dp[i-1][0];
                dp[i][1] = (dp[i-1][1] * 2 + dp[i-1][0]) % 1000000007;
                dp[i][2] = dp[i-1][2];
            } else {
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][1];
                dp[i][2] = (dp[i-1][2] * 2 + dp[i-1][1]) % 1000000007;
            }
        }
        return dp[n-1][2];

=======

        const int mod = 1e9 + 7;
        long long dp[3] = {0};
        for (int i = 0; i < nums.size(); i++) {
            dp[nums[i]] = (dp[nums[i]] + dp[nums[i]] + (nums[i] == 0 ? 1 : 0)) % mod;
        }
        return dp[2];

=======

        int n = nums.size();
        int mod = 1000000007;
        vector<int> dp(3);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                dp[0] = (dp[0] * 2) % mod;
            } else if (nums[i] == 1) {
                dp[1] = (dp[0] + 2 * dp[1]) % mod;
            } else {
                dp[2] = (dp[1] + 2 * dp[2]) % mod;
            }
        }
        return dp[2];

=======

        long long int dp[3] = {0};
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == 0){
                dp[0] = (dp[0] * 2) % 1000000007 + 1;
            }else if(nums[i] == 1){
                dp[1] = (dp[1] * 2 + dp[0]) % 1000000007;
            }else{
                dp[2] = (dp[2] * 2 + dp[1]) % 1000000007;
            }
        }
        return dp[2];

=======

        int n = nums.size();
        int M = 1e9 + 7;
        vector<int> dp(3, 0);
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                dp[0] = 2 * dp[0] + 1;
            }
            if (nums[i] == 1) {
                dp[1] = 2 * dp[1] + dp[0];
            }
            if (nums[i] == 2) {
                dp[2] = 2 * dp[2] + dp[1];
            }
            for (int j = 0; j < 3; j++) {
                dp[j] %= M;
            }
        }
        return dp[2];

=======

        int n = nums.size();
        int mod = 1e9+7;
        vector<long> dp(3,0);
        for(int i=0;i<n;i++){
            if(nums[i]==0){
                dp[0] = (dp[0]*2+1)%mod;
            }else if(nums[i]==1){
                dp[1] = (dp[1]*2+dp[0])%mod;
            }else{
                dp[2] = (dp[2]*2+dp[1])%mod;
            }
        }
        return dp[2];

=======

        long long f[3] = {0};
        int mod = 1e9 + 7;
        for (int i = 0; i < nums.size(); i++) {
            f[nums[i]] = (f[nums[i]] + f[nums[i] - 1] + 1) % mod;
        }
        return f[2];

=======

        int n = nums.size();
        long long int dp[3] = {0};
        for(int i = 0; i < n; i++) {
            dp[nums[i]] = dp[nums[i]] + 1 + dp[nums[i] - 1];
            dp[nums[i]] %= 1000000007;
        }
        return dp[2];

=======

        int mod = 1e9 + 7;
        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(3, 0));
        // dp[i][j] = number of special subsequences ending with j in nums[0...i]
        dp[0][nums[0]] = 1;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = dp[i - 1][0];
            dp[i][1] = dp[i - 1][1];
            dp[i][2] = dp[i - 1][2];
            if (nums[i] == 0) {
                dp[i][0] = (dp[i][0] + 1 + dp[i - 1][0]) % mod;
            } else if (nums[i] == 1) {
                dp[i][1] = (dp[i][1] + dp[i - 1][0] + dp[i - 1][1]) % mod;
            } else {
                dp[i][2] = (dp[i][2] + dp[i - 1][1] + dp[i - 1][2]) % mod;
            }
        }
        return dp[n - 1][2];
