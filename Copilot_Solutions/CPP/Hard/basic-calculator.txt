Synthesizing 10/10 solutions

=======

        stack<int> ops;
        ops.push(1);
        int sign = 1;
        int ret = 0;
        int n = s.size();
        int i = 0;
        while (i < n) {
            if (s[i] == ' ') {
                i++;
            } else if (s[i] == '+') {
                sign = ops.top();
                i++;
            } else if (s[i] == '-') {
                sign = -ops.top();
                i++;
            } else if (s[i] == '(') {
                ops.push(sign);
                i++;
            } else if (s[i] == ')') {
                ops.pop();
                i++;
            } else {
                long num = 0;
                while (i < n && s[i] >= '0' && s[i] <= '9') {
                    num = num * 10 + s[i] - '0';
                    i++;
                }
                ret += sign * num;
            }
        }
        return ret;

=======

        stack<int> st;
        int res = 0;
        int sign = 1;
        int n = s.size();
        for (int i = 0; i < n; i++) {
            if (isdigit(s[i])) {
                int num = 0;
                while (i < n && isdigit(s[i])) {
                    num = num * 10 + (s[i] - '0');
                    i++;
                }
                res += sign * num;
                i--;
            } else if (s[i] == '+') {
                sign = 1;
            } else if (s[i] == '-') {
                sign = -1;
            } else if (s[i] == '(') {
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            } else if (s[i] == ')') {
                res = res * st.top();
                st.pop();
                res += st.top();
                st.pop();
            }
        }
        return res;

=======

        stack<int> st;
        int res = 0;
        int sign = 1;
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            if (isdigit(s[i])) {
                int num = 0;
                while (i < n && isdigit(s[i])) {
                    num = num * 10 + (s[i] - '0');
                    ++i;
                }
                res += sign * num;
                --i;
            } else if (s[i] == '+') {
                sign = 1;
            } else if (s[i] == '-') {
                sign = -1;
            } else if (s[i] == '(') {
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            } else if (s[i] == ')') {
                res = st.top() * res + st.top();
                st.pop();
                st.pop();
            }
        }
        return res;

=======

        int res = 0;
        int sign = 1;
        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == ' ') continue;
            if (s[i] == '+') {
                sign = 1;
            } else if (s[i] == '-') {
                sign = -1;
            } else if (s[i] == '(') {
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            } else if (s[i] == ')') {
                res = st.top() * res;
                st.pop();
                res += st.top();
                st.pop();
            } else {
                int num = 0;
                while (i < s.size() && isdigit(s[i])) {
                    num = num * 10 + s[i] - '0';
                    i++;
                }
                res += sign * num;
                i--;
            }
        }
        return res;

=======

        int n = s.size();
        int res = 0;
        int sign = 1;
        int num = 0;
        stack<int> st;
        for (int i = 0; i < n; i++) {
            if (isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
            } else if (s[i] == '+') {
                res += sign * num;
                sign = 1;
                num = 0;
            } else if (s[i] == '-') {
                res += sign * num;
                sign = -1;
                num = 0;
            } else if (s[i] == '(') {
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            } else if (s[i] == ')') {
                res += sign * num;
                res *= st.top();
                st.pop();
                res += st.top();
                st.pop();
                num = 0;
            }
        }
        res += sign * num;
        return res;

=======

        int n = s.size();
        stack<int> st;
        int res = 0;
        int num = 0;
        int sign = 1;
        for(int i = 0; i < n; i++){
            char c = s[i];
            if(c == ' ') continue;
            if(isdigit(c)){
                num = num * 10 + (c - '0');
            }else if(c == '+'){
                res += sign * num;
                num = 0;
                sign = 1;
            }else if(c == '-'){
                res += sign * num;
                num = 0;
                sign = -1;
            }else if(c == '('){
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            }else if(c == ')'){
                res += sign * num;
                num = 0;
                res *= st.top();
                st.pop();
                res += st.top();
                st.pop();
            }
        }
        if(num != 0) res += sign * num;
        return res;

=======

        stack<int> stk;
        int sign = 1;
        int ans = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            if (s[i] == ' ') continue;
            if (s[i] == '+') {
                sign = 1;
            } else if (s[i] == '-') {
                sign = -1;
            } else if (s[i] == '(') {
                stk.push(ans);
                stk.push(sign);
                ans = 0;
                sign = 1;
            } else if (s[i] == ')') {
                ans = ans * stk.top();
                stk.pop();
                ans += stk.top();
                stk.pop();
            } else {
                int num = 0;
                while (i < n && isdigit(s[i])) {
                    num = num * 10 + s[i] - '0';
                    i++;
                }
                i--;
                ans += sign * num;
            }
        }
        return ans;

=======

        stack<int> st;
        int num = 0;
        char op = '+';
        for(int i = 0; i < s.length(); i++) {
            if(isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
            }
            if(!isdigit(s[i]) && s[i] != ' ' || i == s.length() - 1) {
                if(op == '+') {
                    st.push(num);
                }
                else if(op == '-') {
                    st.push(-num);
                }
                else if(op == '*') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp * num);
                }
                else if(op == '/') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp / num);
                }
                op = s[i];
                num = 0;
            }
        }
        int ans = 0;
        while(!st.empty()) {
            ans += st.top();
            st.pop();
        }
        return ans;

=======

        int n = s.size();
        vector<int> ops(n, 0);
        int sign = 1;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '+') {
                sign = 1;
            } else if (s[i] == '-') {
                sign = -1;
            } else if (s[i] == '(') {
                ops[i] = sign;
            } else if (s[i] == ')') {
                ops[i] = -sign;
            }
        }
        int num = 0;
        for (int i = 0; i < n; i++) {
            if (isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
            }
            if (!isdigit(s[i]) && !isspace(s[i]) || i == n - 1) {
                res += ops[i] * num;
                num = 0;
            }
        }
        return res;

=======

        return 0;
