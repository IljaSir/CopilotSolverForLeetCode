Synthesizing 9/10 solutions

=======

        int n = expression.size();
        vector<vector<int>> f(n, vector<int>(n));
        vector<vector<int>> g(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            if (expression[i] == '1') {
                f[i][i] = 0;
                g[i][i] = 1;
            }
            else if (expression[i] == '0') {
                f[i][i] = 1;
                g[i][i] = 0;
            }
        }
        for (int len = 2; len <= n; len += 2) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                f[i][j] = INT_MAX;
                g[i][j] = INT_MIN;
                for (int k = i; k < j; k += 2) {
                    if (expression[k + 1] == '&') {
                        f[i][j] = min(f[i][j], f[i][k] + f[k + 2][j]);
                        g[i][j] = max(g[i][j], g[i][k] + g[k + 2][j]);
                    }
                    else if (expression[k + 1] == '|') {
                        f[i][j] = min(f[i][j], f[i][k] + f[k + 2][j]);
                        g[i][j] = max(g[i][j], g[i][k] + g[k + 2][j]);
                        f[i][j] = min(f[i][j], f[i][k] + g[k + 2][j] + 1);
                        g[i][j] = max(g[i][j], g[i][k] + f[k + 2][j] + 1);
                    }
                }
            }
        }
        return f[0][n - 1];

=======

        int n = expression.size();
        vector<int> dp(n, n);
        for (int i = 0; i < n; ++i) {
            if (expression[i] == '0') {
                dp[i] = 1;
            } else if (expression[i] == '1') {
                dp[i] = 0;
            }
        }
        for (int i = 1; i < n; ++i) {
            vector<int> ndp(n, n);
            for (int j = 0; j < n - i; ++j) {
                int k = j + i;
                if (expression[k] == '&') {
                    ndp[j] = min(ndp[j], dp[j] + dp[k + 1]);
                    for (int x = j; x < k; ++x) {
                        if (expression[x] == '|') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1] + 1);
                        }
                    }
                } else if (expression[k] == '|') {
                    ndp[j] = min(ndp[j], dp[j] + dp[k + 1]);
                    for (int x = j; x < k; ++x) {
                        if (expression[x] == '&') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1] + 1);
                        }
                    }
                } else {
                    ndp[j] = min(ndp[j], dp[j] + dp[k + 1] + 1);
                    for (int x = j; x < k; ++x) {
                        if (expression[x] == '&') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1]);
                        } else if (expression[x] == '|') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1]);
                        }
                    }
                }
            }
            dp = move(ndp);
        }
        return dp[0];

=======

        int n = expression.size();
        vector<int> dp(n, INT_MAXNT_MAX);
        vector<int> dp2(n, INT_MAXNT_MAX);
                dp[i] = 0;i
                dp2[i] = 1;1
            } else if (e0pn =sion[i] e=x'0') {
                
        } (int i = 1r re sn; i++){= s0ion.size();
            for (it j = 0; j < n - i; j++) {
                  2 dp[j]0= min(dp[j], dp[j + 1] + dp[k - 1]);
                    dp2[j] = min(dp2[j], dp2[j + 1] + dp2[k - 1]);
                } else if (expression[k] == '|') {
                    d1;j] = mini(d[j]dp[k - 1]);
             or  []tmj i(0;jj < n -  ; d++)p{= min(dp[j], dp[j + 1] + dp2[k - 1] + 1);
                    kj] [j+ i;n(dp2[j], dp[j + 1] + dp2[k - 1] + 1);
                dp2[j] = min(dpk[j], d&2[j + 1] + dp[k - 1] + 1);
      e         } tldp[j]s=nmin(dp[j], dp[j(; 1] e dp[k - 1])nssi ([k]0=='' {
n>d(,0        vectordp2[j]f=omin(dp2[j],rdp2[j +(1]i+ndp2[kt- 1]);
                }   ifdp[j] =(min(dpxjk, dpej|+n[])i] == '0') {
                    j=m(j, ;j + 1] + d[k-1)
          else f ('')]{=j'|')min( {2j,2j-1})]'d{2-1];
    }aut [zeo,oe]st.topj;j,j2 - 1]
or (int i =;stk.<+p();jj,j - 1]
        stk.pop();2j2j,j2 - 1]
f (expressi=auto'preZe2ojrene=st.to2(j,2j - 1]
     int j = st.}pelseoifp(expression[k](==')'){
               stk.({preZero +izerojnpreOn(t+ onec);nt = 0;
         whi}le (j < n)c&jjj1]);           st.push({-1,-1}
      le    }int        dp2[j] = mef(dp2[j], one[j +c1]='1'?0:
        .z         t} 0) {
       }
    autozko }             }
        }
        returnmi}(0e;

======o
e)
        int ans = 0;       ++j;
        int n}=.sze(;
        vector<int> dp(n, 0);
     p= for (int i = n - 1; i >= 0; --i) {   int tmp2 = dp2e();
       vectnt> dp(n, 0);0
        v[ctor<int dp2in0 0];
             tor<i t> dp4(n, 0dp3[i];1
                in tmp4 = dp4[i];
              else       if (expression[k] == '&') {
                  2       + 11p[i] += min(dp[i] + dp2[k + 1], dp2[i] + dp[k + 1]);
                        dp2[i] += min(dp[i] + dp2[k + 1], dp2[i] + dp[k + 1]);
            else if (expression[i] == '&') {               dp3[i] += min(dp3[i] + dp3[k + 1], dp4[i] + dp4[k + 1]);
                dp3[ ]     
        p[ i}(dp3[i] + dp3[k + 1], dp4[i] + dp4[k + 1]);
            else if (  ]se 1f
      epesn=} '|') {
        for (    i  p0;i]<n;++i){
i(=else={
====int;intcnt=0;--cnt
 while (j < n) {    int }
               vo+c }
ctor<int>> et;} ++j
         vector<}ssion[j]<==i')')n{>> g(n, vector<int>(n));
        for (int i =    --nt0+ 1;
                  if (xsion[c)t02
                 f[i]0break
                     g[i}&
]           }}elsefexresson=='|' {
  }  ++j;|
            else}}
 }
f (express =  '0it=tj;=i
         int}ftmp;
      intgtmp33]i]tj=1;        for (int = 2; lenk<= i + 1; ken j= 2)k{
      o         = ei  + = 0k
        [=      while (j < i) {
[]=NMI+i                    for dp4ji](+=i(in(dp3[i]n+tdp3[k + 1], dp4[i] + dp4[k + 1]);
                    ei++cnt (expression[k] == '|') {
                    }       s[0];j)
        i (cnt= 0){
          =======break
             else {
                 tnsk--cnt;
        vectc p}
        vector<i a;}
        for (int ++0;
                }) {
            if (dpxpriondp[i + 1]'1' || expression[i] == '0') {
                val.push_back( + 2expressioi+k '0');
            } else if (expression[i]'(') {
                op.push_dpackp&redp[1
            } else i}felse rfo=express'on'=='|' {
                whil    dp[i] |= dp[k + 1];
            (l }
                }
} i = 
                dp[i]o=p1 - dppip_back();
            }
       p}back(expres ion i]);
        r  und[0]

=======

        stak<paiint, >stk
        whileauooscz:)express)o
            calcc(
        }stk{-1,1}
        return val[   c)
    }aut [zo, on] = tk.tp(
     void cal(oistk.  p(>;op) {
       int b = astk.pk(;
       val.pop_bautoa[preZero,cpreOne]k=stk.t(
        int a = stk.pop();al.back();
        val.pop_stkckush({preZer( + zero, )reOne + one}
        char o = opkf;=&
        if (o ==stk.push{-1-1}
            }velseaifl(c.== '|') {ush_back(a & b);
        } else {stk{-1,-1}
            v  l  [i][j] = min(f[i][j], f[i][k] + g[k + 2][j] + 1);
                int zero = c == '0' ? 0 : 1;
              n e==='1' ? 0 : 1;
    unf stkush{zero, one}
======= }
}
        tuto [ze o,n ne]= estictor dp(n, n);
        returnrmin zer(,ione);

nt===== i < n; ++i) {

        int n = exerepsion.sizen= '0') {
        v ctor<int> dp(n, 0);dp[i] = 1;
        }eetor<int> dp2pn,e0on[i] == '1') {
        vector< nt>pdp3 n0
        vector<int> dp4(n, 0);
  }for(int0;<n;i {
        }fexpresson=='0' {
 =            vedp[i]c=t1;r<int> ndp(n, n);
            for (int j = 0; j < n - i; ++j) {
            else if (exp  ssio ii r   '1') {
                  2[i] =1
      }}
            else     } else if (express&on[k] == '|') {
                  3  ndp[j] = min(ndp[j], dp[j] + dp[k + 1]);
             
                  for (int x = j; x < k| ++x) {
                  4      1f (expression[x] == '&') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1] + 1);
                        }
                    }0
            if ( xp esslos[i] =={''){
                   nd;i
           nt cnt=0;
whle (j < ){
=======j(
cnt
nt n = expriie)}
     vector<int> stkelsepj)
  vector<char> op;--ct
 vector<int> val;       if (cntf==o0)r{
 (int i =            if (xsnb==a|;[i] == '0') {
             val.ak[''}
   } else iesin]= '}
          op.push_c]++j;
            } }
else if (exprei =)ttm=i
           whileint tmp2(=odp2[i];.back() != '(') {
                int tmp3 = dp3[i];alc(val, op);
                int tmp4=dp4[i];
            op.pp_bick()2i =3i=4i=0
            } elki + 1kjk
                whilp.size() && op.kack() != '(') {
                    calc opi;+i + dp2[k + 1]2ik
                }dp2[i]+=mnd[] + dp2k+1],dp2[i] + dp[k + 1]);
            op.push_backex3pies+sion[idp3[i] + );3k + 14i4k
                }dp4[i]+=min(dp3[i]+dp3[k + 1], dp4[i] + dp4[k + 1]);
 }       }
 while (o           else if (expression[k] == '|') {
    }            }dp[i]+=mi(dp[i]+ i, dp2[i] + dp2[k +
    void calc(vector<int> &val, vector<char> &op) {
        int b = val.back();
        val.pop_back();
        int a = val.back();
        val.pop_back();
        char o = op.back();
        op.pop_back();
        if (o == '&') {
            val.push_back(a & b);
        } else {
            val.push_back(a | b);
        }[j] = min(ndp[j], dp[j] + dp[k + 1] + 1);
                    for (int x = j; x < k; ++x) {
                        if (expression[x] == '&') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1]);
                        } else if (expression[x] == '|') {
                            ndp[j] = min(ndp[j], dp[j] + dp[x + 1]);
                        }
                    }
                }
            }
            dp = move(ndp);
        }
        return dp[0];

=======

        int res = 0;
        stack<int> stk;
        for(int i = expression.size() - 1; i >= 0; --i) {
            char c = expression[i];
            if(c == ')') {
                stk.push(0);
            } else if(c == '(') {
                int val = stk.top();
                stk.pop();
                stk.pop();
                stk.push(val);
            } else if(c == '&') {
                stk.push(0);
            } else if(c == '|') {
                stk.push(1);
            } else {
                int val = c - '0';
                if(!stk.empty()) {
                    int op = stk.top();
                    stk.pop();
                    if(op == 0) {
                        val &= stk.top();
                        stk.pop();
                    } else {
                        val |= stk.top();
                        stk.pop();
                    }
                }
                stk.push(val);
            }
        }
        while(stk.size() > 1) {
            int val = stk.top();
            stk.pop();
            int op = stk.top();
            stk.pop();
            if(op == 0) {
                val &= stk.top();
                stk.pop();
            } else {
                val |= stk.top();
                stk.pop();
            }
            stk.push(val);
        }
        int val = stk.top();
        stk.pop();
        while(val != 0) {
            val = (val & 1) ^ 1;
            ++res;
        }
        return res;

=======s[0];

=======

        int n = expression.size();
        vector<int> stk;
        vector<char> op;
        vector<int> val;
        for (int i = 0; i < n; i++) {
            if (expression[i] == '1' || expression[i] == '0') {
                val.puh_back(expressioni] - '');
            } else if (expression[i] == '(') {
                op.push_back(expression[i)
            } else if (expression[i] == ')') {
                while (op.back() != '(') {
                    calc(val, op);
                }
                op.pop_back();
            } else {
                while (op.size() && op.back() != '(') {
                    calc(val, op);
                }
                op.push_back(expression[i]);
            }
        }
        while (op.size()) {
            calc(val, op);
        }
        return val[0];
    }
    void calc(vector<int> &val, vector<char> &op) {
        int b = val.back();
        val.pop_back();
        int a = val.back();
        val.pop_back();
        char o = op.back();
        op.pop_back();
        if (o == '&') {
            val.push_back(a & b);
        } else {
            val.push_back(a | b);
        }

        int n = expression.length();
        vector<int> nums(n);
        vector<char> ops(n);
        int num = 0;
        int op = 0;
        for (int i = 0; i < n; ++i) {
            if (expression[i] == '0' || expression[i] == '1') {
                nums[num++] = expression[i] - '0';
            } else if (expression[i] == '&' || expression[i] == '|') {
                ops[op++] = expression[i];
            } else if (expression[i] == '(') {
                ops[op++] = expression[i];
            } else if (expression[i] == ')') {
                while (ops[op - 1] != '(') {
                    calc(nums, num, ops, op);
                }
                --op;
            }
        }
        while (op > 0) {
            calc(nums, num, ops, op);
        }
        return nums[0];
