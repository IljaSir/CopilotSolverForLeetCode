Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long long res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] & 1) {
                if (i + 1 < nums.size() && nums[i + 1] & 1) {
                    ++i;
                }
                ++res;
            }
        }
        return res;

=======

        long long ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] % 2 == 0) {
                nums[i] /= 2;
                --i;
            } else {
                ++ans;
            }
        }
        return ans;

=======

        long long ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] & 1) {
                if (i < nums.size() - 1 && nums[i + 1] & 1) {
                    i++;
                }
                ans++;
            }
        }
        return ans;

=======

        long long res = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] & 1) {
                res++;
                if (i + 1 < nums.size() && nums[i + 1] & 1) {
                    nums[i + 1]++;
                    res++;
                }
            }
        }
        return res;

=======

        long long ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] & 1) {
                if (i == nums.size() - 1) {
                    ++ans;
                } else if (nums[i + 1] & 1) {
                    ++ans;
                    ++i;
                } else {
                    ++ans;
                }
            }
        }
        return ans;

=======

        long long result = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] % 2 == 0) {
                continue;
            }
            if (i < nums.size() - 1 && nums[i + 1] % 2 == 0) {
                ++i;
            }
            ++result;
        }
        return result;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                ans++;
                if (i + 1 < n && nums[i + 1] % 2 == 1) {
                    i++;
                }
            }
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; ++i) {
            if(nums[i] & 1) {
                if(i == n - 1) {
                    ans += 1;
                } else {
                    nums[i + 1] += 1;
                    ans += 2;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int dp[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            if (i > 0 && nums[i] > nums[i-1]) {
                dp[i] = dp[i-1] + 1;
            }
            ans = max(ans, dp[i]);
        }
        return n - ans;
