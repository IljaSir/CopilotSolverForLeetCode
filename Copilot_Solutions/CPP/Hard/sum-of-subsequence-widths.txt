Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int mod = 1e9 + 7;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> pows(n);
        pows[0] = 1;
        for (int i = 1; i < n; i++) {
            pows[i] = pows[i - 1] * 2 % mod;
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            res = (res + (long long)nums[i] * (pows[i] - pows[n - i - 1])) % mod;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        long long ans = 0, p = 1;
        for (int i = 0; i < n; ++i) {
            ans = (ans + nums[i] * p - nums[n - 1 - i] * p) % 1000000007;
            p = p * 2 % 1000000007;
        }
        return (ans + 1000000007) % 1000000007;

=======

        const int mod = 1e9 + 7;
        sort(nums.begin(), nums.end());
        vector<int> pow2(nums.size(), 1);
        for (int i = 1; i < nums.size(); i++) {
            pow2[i] = pow2[i - 1] * 2 % mod;
        }
        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            res = (res + (pow2[i] - pow2[nums.size() - 1 - i]) * nums[i]) % mod;
        }
        return (res + mod) % mod;

=======

        const int MOD = 1000000007;
        sort(nums.begin(), nums.end());
        vector<int> pow2(nums.size(), 1);
        for (int i = 1; i < nums.size(); ++i) {
            pow2[i] = (pow2[i - 1] << 1) % MOD;
        }
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            ans = (ans + (pow2[i] - pow2[nums.size() - i - 1]) * nums[i]) % MOD;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        long long res = 0, c = 1;
        const int MOD = 1e9 + 7;
        for (int i = 0; i < n; i++) {
            res = (res + nums[i] * c - nums[n - 1 - i] * c) % MOD;
            c = c * 2 % MOD;
        }
        return (res + MOD) % MOD;

=======

        const int MOD = 1e9 + 7;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        long long ans = 0;
        long long p = 1;
        for (int i = 0; i < n; i++) {
            ans = (ans + nums[i] * p - nums[n - 1 - i] * p) % MOD;
            p = p * 2 % MOD;
        }
        return (ans + MOD) % MOD;

=======

        int n = nums.size();
        int mod = 1e9+7;
        sort(nums.begin(), nums.end());
        long long ans = 0, p = 1;
        for (int i = 0; i < n; ++i) {
            ans = (ans + nums[i] * p - nums[n - 1 - i] * p) % mod;
            p = p * 2 % mod;
        }
        return (ans + mod) % mod;

=======

        int n = nums.size();
        int mod = 1000000007;
        sort(nums.begin(), nums.end());
        long long ans = 0;
        long long pow = 1;
        for (int i = 0; i < n; i++) {
            ans = (ans + nums[i] * pow - nums[n - i - 1] * pow) % mod;
            pow = pow * 2 % mod;
        }
        return (ans + mod) % mod;

=======

        int n = nums.size();
        int mod = 1e9+7;
        sort(nums.begin(), nums.end());
        long long ans = 0;
        long long pow2 = 1;
        for (int i = 0; i < n; ++i) {
            ans = (ans + (nums[i] - nums[n-1-i]) * pow2) % mod;
            pow2 = pow2 * 2 % mod;
        }
        return (ans + mod) % mod;
