Synthesizing 10/10 solutions

=======

        int n = distance.size();
        if (n <= 3) return false;
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i - 1] <= distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) return true;
        }
        return false;

=======

        int n = distance.size();
        if (n <= 3) return false;
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] <= distance[i - 3] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) return true;
        }
        return false;

=======

        int n = distance.size();
        if (n <= 3) return false;
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i - 3] >= distance[i - 1] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) return true;
        }
        return false;

=======

        int n = distance.size();
        if (n <= 3) return false;
        for (int i = 3; i < n; ++i) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i - 3] >= distance[i - 1] && distance[i - 1] + distance[i - 5] >= distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
        }
        return false;

=======

        int n = distance.size();
        if (n <= 3) {
            return false;
        }
        for (int i = 3; i < n; ++i) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                return true;
            }
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] <= distance[i - 3] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) {
                return true;
            }
        }
        return false;

=======

        int n = distance.size();
        for (int i = 3; i < n; i++) {
            // fourth line crosses first line and onward
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3])
                return true;
            // fifth line meets first line and onward
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2])
                return true;
            // sixth line crosses first line and onward
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3] && distance[i - 1] <= distance[i - 3])
                return true;
        }
        return false;

=======

        int len = distance.size();
        if (len <= 3) return false;
        for (int i = 3; i < len; i++) {
            if (distance[i] >= distance[i-2] && distance[i-1] <= distance[i-3]) return true;
            if (i >= 4 && distance[i-1] == distance[i-3] && distance[i] + distance[i-4] >= distance[i-2]) return true;
            if (i >= 5 && distance[i-2] > distance[i-4] && distance[i] + distance[i-4] >= distance[i-2] && distance[i-1] <= distance[i-3] && distance[i-1] + distance[i-5] >= distance[i-3]) return true;
        }
        return false;

=======

        int n = distance.size();
        if (n < 3) return false;
        for (int i = 3; i < n; ++i) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i - 3] >= distance[i - 1] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) return true;
        }
        return false;

=======

        int x = 0, y = 0;
        int dx = 0, dy = 1;
        int n = distance.size();
        for (int i = 0; i < n; i++) {
            int nx = x + dx * distance[i];
            int ny = y + dy * distance[i];
            if (dx == 0 && (ny < y || ny > y + distance[i])) return true;
            if (dy == 0 && (nx < x || nx > x + distance[i])) return true;
            if (i + 1 < n && nx == x && ny == y + distance[i + 1]) return true;
            if (i + 2 < n && nx == x + distance[i + 2] && ny == y + distance[i + 1]) return true;
            x = nx;
            y = ny;
            swap(dx, dy);
            dy = -dy;
        }
        return false;

=======

        int n = distance.size();
        if (n < 4) return false;
        int i = 3;
        while (i < n && distance[i] > distance[i - 2]) {
            i++;
        }
        if (i < n) {
            if (distance[i] >= distance[i - 2] - distance[i - 4]) {
                distance[i - 1] -= distance[i - 3];
            }
            i++;
        }
        while (i < n && distance[i] < distance[i - 2]) {
            i++;
        }
        return i < n;
