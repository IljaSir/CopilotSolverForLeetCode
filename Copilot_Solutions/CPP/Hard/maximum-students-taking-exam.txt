Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = seats.size(), n = seats[0].size();
        vector<int> dp(1 << n, -1);
        dp[0] = 0;
        for (int i = 0; i < m; ++i) {
            vector<int> ndp(1 << n, -1);
            for (int j = 0; j < (1 << n); ++j) {
                if (dp[j] == -1) continue;
                bool valid = true;
                for (int k = 0; k < n; ++k) {
                    if (((j >> k) & 1) && seats[i][k] == '#') {
                        valid = false;
                        break;
                    }
                    if (k > 0 && ((j >> k) & 1) && ((j >> (k - 1)) & 1)) {
                        valid = false;
                        break;
                    }
                }
                if (!valid) continue;
                for (int k = 0; k < (1 << n); ++k) {
                    bool valid = true;
                    for (int p = 0; p < n; ++p) {
                        if (((k >> p) & 1) && seats[i][p] == '#') {
                            valid = false;
                            break;
                        }
                        if (p > 0 && ((k >> p) & 1) && ((k >> (p - 1)) & 1)) {
                            valid = false;
                            break;
                        }
                        if (p < n - 1 && ((k >> p) & 1) && ((k >> (p + 1)) & 1)) {
                            valid = false;
                            break;
                        }
                        if (((j >> p) & 1) && ((k >> p) & 1)) {
                            valid = false;
                            break;
                        }
                    }
                    if (!valid) continue;
                    ndp[k] = max(ndp[k], dp[j] + __builtin_popcount(k));
                }
            }
            dp = ndp;
        }
        return *max_element(dp.begin(), dp.end());

=======

        int m = seats.size(), n = seats[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(1 << n, -1));
        dp[0][0] = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < 1 << n; ++j) {
                if (dp[i][j] == -1) continue;
                for (int k = 0; k < 1 << n; ++k) {
                    if (isValid(j, k, n, seats[i])) {
                        dp[i + 1][k] = max(dp[i + 1][k], dp[i][j] + __builtin_popcount(k));
                    }
                }
            }
        }
        return *max_element(dp[m].begin(), dp[m].end());

=======

        int m = seats.size(), n = seats[0].size();
        vector<vector<int>> dp(m, vector<int>(1 << n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < (1 << n); ++j) {
                if (check(j, seats, i, n)) {
                    if (i == 0) {
                        dp[i][j] = __builtin_popcount(j);
                    } else {
                        for (int k = 0; k < (1 << n); ++k) {
                            if (check(k, seats, i - 1, n) && (j & k) == 0) {
                                dp[i][j] = max(dp[i][j], dp[i - 1][k] + __builtin_popcount(j));
                            }
                        }
                    }
                }
            }
        }
        return *max_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = seats.size(), n = seats[0].size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < m; i++) {
            vector<int> ndp(1 << n, 0);
            for (int j = 0; j < (1 << n); j++) {
                if (check(seats[i], j, n)) {
                    for (int k = 0; k < (1 << n); k++) {
                        if ((j & k) == 0) {
                            ndp[j] = max(ndp[j], dp[k] + __builtin_popcount(j));
                        }
                    }
                }
            }
            dp = ndp;
        }
        return *max_element(dp.begin(), dp.end());

=======

        int m = seats.size(), n = seats[0].size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < m; i++) {
            vector<int> next(1 << n, 0);
            for (int j = 0; j < (1 << n); j++) {
                if (valid(seats[i], j)) {
                    for (int k = 0; k < (1 << n); k++) {
                        if (!(j & k)) {
                            next[j] = max(next[j], dp[k] + __builtin_popcount(j));
                        }
                    }
                }
            }
            dp = next;
        }
        return *max_element(dp.begin(), dp.end());

=======

        int m = seats.size();
        int n = seats[0].size();
        vector<vector<int>> dp(m, vector<int>(1 << n, -1));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (seats[i][j] == '#') {
                    for (int k = 0; k < (1 << n); k++) {
                        if (k & (1 << j)) {
                            dp[i][k] = -1;
                        }
                    }
                }
            }
        }
        return dfs(seats, dp, 0, 0, 0);
    }
    
    int dfs(vector<vector<char>>& seats, vector<vector<int>>& dp, int i, int j, int mask) {
        if (i >= seats.size()) {
            return 0;
        }
        if (dp[i][mask] != -1) {
            return dp[i][mask];
        }
        int ans = 0;
        int n = seats[0].size();
        int cur = 0;
        int next = 0;
        for (int k = 0; k < n; k++) {
            if (mask & (1 << k)) {
                cur++;
            }
            if (j & (1 << k)) {
                next++;
            }
        }
        ans = max(ans, cur + dfs(seats, dp, i + 1, 0, j));
        if (i < seats.size() - 1) {
            ans = max(ans, cur + dfs(seats, dp, i + 2, 0, j));
        }
        if (next != cur) {
            ans = max(ans, cur + dfs(seats, dp, i + 1, j, mask));
            if (i < seats.size() - 1) {
                ans = max(ans, cur + dfs(seats, dp, i + 2, j, mask));
            }
        }
        dp[i][mask] = ans;
        return ans;

=======

        int m = seats.size();
        int n = seats[0].size();
        vector<vector<int>> dp(m, vector<int>(1 << n, -1));
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (seats[i][j] == '#') continue;
                for (int k = 0; k < (1 << n); ++k) {
                    if (dp[i][k] == -1) continue;
                    bool ok = true;
                    for (int t = 0; t < n; ++t) {
                        if ((k & (1 << t)) && (j == t || j == t - 1 || j == t + 1)) {
                            ok = false;
                            break;
                        }
                    }
                    if (!ok) continue;
                    int mask = k | (1 << j);
                    dp[i + 1][mask] = max(dp[i + 1][mask], dp[i][k] + __builtin_popcount(mask));
                    ans = max(ans, dp[i + 1][mask]);
                }
            }
        }
        return ans;

=======

        int m = seats.size();
        int n = seats[0].size();
        vector<vector<int>> f(m, vector<int>(1<<n, -1));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (seats[i][j] == '#') {
                    for (int k = 0; k < (1<<n); k++) {
                        if (k & (1<<j)) {
                            f[i][k] = -1;
                        }
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < (1<<n); j++) {
                if (f[i][j] == -1) continue;
                if (i == 0) {
                    f[i][j] = __builtin_popcount(j);
                } else {
                    for (int k = 0; k < (1<<n); k++) {
                        if (f[i-1][k] == -1) continue;
                        if ((j & k) == 0 && (j & (k << 1)) == 0 && (j & (k >> 1)) == 0) {
                            f[i][j] = max(f[i][j], f[i-1][k] + __builtin_popcount(j));
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < (1<<n); i++) {
            ans = max(ans, f[m-1][i]);
        }
        return ans;

=======

        int m = seats.size();
        int n = seats[0].size();
        int max_mask = (1 << n);
        int dp[m][max_mask];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < max_mask; j++) {
                if (check(j, seats, i, n)) {
                    if (i == 0) {
                        dp[i][j] = __builtin_popcount(j);
                    } else {
                        for (int k = 0; k < max_mask; k++) {
                            if (check(k, seats, i - 1, n) && (j & k) == 0) {
                                dp[i][j] = max(dp[i][j], dp[i - 1][k] + __builtin_popcount(j));
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < max_mask; i++) {
            ans = max(ans, dp[m - 1][i]);
        }
        return ans;
    }
    bool check(int mask, vector<vector<char>>& seats, int row, int n) {
        for (int i = 0; i < n; i++) {
            if (seats[row][i] == '#') {
                if (mask & (1 << i)) {
                    return false;
                }
            }
        }
        return true;
