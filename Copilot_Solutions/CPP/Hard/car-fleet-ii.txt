Synthesizing 9/10 solutions

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> st;
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i][0], s = cars[i][1];
            while (!st.empty()) {
                int j = st.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                if ((s2 >= s) || (res[j] > 0 && (p2 - p) / (s - s2) >= res[j])) {
                    st.pop();
                } else {
                    break;
                }
            }
            if (!st.empty()) {
                int j = st.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                res[i] = (p2 - p) / (s - s2);
            }
            st.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i][0], s = cars[i][1];
            while (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s2 >= s || (ans[j] >= 0 && (p2 - p) / (s - s2) >= ans[j])) {
                    s.pop();
                } else {
                    break;
                }
            }
            if (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                ans[i] = (double)(p2 - p) / (s - s2);
            }
            s.push(i);
        }
        return ans;

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty()) {
                int j = s.top();
                if (cars[i][1] <= cars[j][1] || (res[j] > 0 && (cars[j][0] - cars[i][0]) / (double)(cars[i][1] - cars[j][1]) >= res[j]))
                    s.pop();
                else
                    break;
            }
            if (!s.empty()) {
                int j = s.top();
                res[i] = (cars[j][0] - cars[i][0]) / (double)(cars[i][1] - cars[j][1]);
            }
            s.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && (cars[i][1] <= cars[s.top()][1] || (res[s.top()] > 0 && (cars[s.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[s.top()][1]) >= res[s.top()]))) {
                s.pop();
            }
            if (!s.empty()) {
                res[i] = (cars[s.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[s.top()][1]);
            }
            s.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty()) {
                int j = s.top();
                if (cars[i][1] <= cars[j][1] || (ans[j] > 0 && (cars[j][0] - cars[i][0]) / (double)(cars[i][1] - cars[j][1]) >= ans[j])) {
                    s.pop();
                } else {
                    break;
                }
            }
            if (!s.empty()) {
                int j = s.top();
                ans[i] = (cars[j][0] - cars[i][0]) / (double)(cars[i][1] - cars[j][1]);
            }
            s.push(i);
        }
        return ans;

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && (res[st.top()] == -1 || (cars[st.top()][1] - cars[i][1]) * (cars[i][0] - cars[st.top()][0]) >= (cars[i][1] - cars[st.top()][1]) * (cars[st.top()][0] - cars[st.top()][0]))) {
                st.pop();
            }
            if (!st.empty()) {
                res[i] = 1.0 * (cars[st.top()][0] - cars[i][0]) / (cars[i][1] - cars[st.top()][1]);
            }
            st.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            int p = cars[i][0], s = cars[i][1];
            while (!st.empty()) {
                int j = st.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s <= s2 || (ans[j] > 0 && (p2 - p) / (double)(s - s2) >= ans[j])) {
                    st.pop();
                } else {
                    break;
                }
            }
            if (!st.empty()) {
                int j = st.top();
                ans[i] = (cars[j][0] - cars[i][0]) / (double)(cars[i][1] - cars[j][1]);
            }
            st.push(i);
        }
        return ans;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && (cars[i][1] <= cars[st.top()][1] || (ans[st.top()] > 0 && (cars[st.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[st.top()][1]) >= ans[st.top()]))) {
                st.pop();
            }
            if (!st.empty()) {
                ans[i] = (cars[st.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[st.top()][1]);
            }
            st.push(i);
        }
        return ans;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            int p1 = cars[i][0], s1 = cars[i][1];
            while (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s1 <= s2 || (ans[j] > 0 && (p2 - p1) / (double)(s1 - s2) >= ans[j])) {
                    s.pop();
                } else {
                    break;
                }
            }
            if (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                ans[i] = (p2 - p1) / (double)(s1 - s2);
            }
            s.push(i);
        }
        return ans;

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && (cars[i][1] <= cars[s.top()][1] || (res[s.top()] > 0 && (cars[s.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[s.top()][1]) >= res[s.top()]))) {
                s.pop();
            }
            if (!s.empty()) {
                res[i] = (cars[s.top()][0] - cars[i][0]) / (double)(cars[i][1] - cars[s.top()][1]);
            }
            s.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> res(n, -1);
        stack<int> st;
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && (res[st.top()] == -1 || (cars[st.top()][1] - cars[i][1]) * (cars[i][0] - cars[st.top()][0]) >= (cars[i][1] - cars[st.top()][1]) * (cars[st.top()][0] - cars[st.top()][0]))) {
                st.pop();
            }
            if (!st.empty()) {
                res[i] = 1.0 * (cars[st.top()][0] - cars[i][0]) / (cars[i][1] - cars[st.top()][1]);
            }
            st.push(i);
        }
        return res;

=======

        int n = cars.size();
        vector<double> ans(n, -1);
        stack<int> s;
        for (int i = n - 1; i >= 0; --i) {
            int p1 = cars[i][0], s1 = cars[i][1];
            while (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s1 <= s2 || (ans[j] > 0 && (p2 - p1) / (double)(s1 - s2) >= ans[j])) {
                    s.pop();
                } else {
                    break;
                }
            }
            if (!s.empty()) {
                int j = s.top();
                int p2 = cars[j][0], s2 = cars[j][1];
                ans[i] = (p2 - p1) / (double)(s1 - s2);
            }
            s.push(i);
        }
        return ans;
