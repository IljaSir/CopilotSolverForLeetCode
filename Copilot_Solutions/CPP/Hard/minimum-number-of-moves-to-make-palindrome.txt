Synthesizing 10/10 solutions

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n / 2; i++) {
            int l = i;
            int r = n - 1 - i;
            if (s[l] == s[r]) {
                continue;
            }
            int j = r;
            for (; j > l; j--) {
                if (s[j] == s[l]) {
                    break;
                }
            }
            for (int k = j; k < r; k++) {
                swap(s[k], s[k + 1]);
                ans++;
            }
        }
        return ans;

=======

        int l = 0, r = s.size() - 1;
        int count = 0;
        while (l < r) {
            if (s[l] != s[r]) {
                if (s[l] < s[r]) {
                    s[l+1] = s[l+1] + s[l];
                    s[l] = s[l+1] - s[l];
                    s[l+1] = s[l+1] - s[l];
                    count++;
                } else {
                    s[r-1] = s[r-1] + s[r];
                    s[r] = s[r-1] - s[r];
                    s[r-1] = s[r-1] - s[r];
                    count++;
                }
            } else {
                l++;
                r--;
            }
        }
        return count;

=======

        int len = s.length();
        int i = 0;
        int j = len - 1;
        int count = 0;
        while (i < j) {
            if (s[i] != s[j]) {
                count++;
                if (s[i] > s[j]) {
                    s[j] = s[i];
                } else {
                    s[i] = s[j];
                }
            }
            i++;
            j--;
        }
        return count;

=======

        int len = s.length();
        int count = 0;
        for (int i = 0; i < len / 2; i++) {
            int j = len - i - 1;
            if (s[i] != s[j]) {
                int k = j - 1;
                while (k > i && s[i] != s[k]) {
                    k--;
                }
                if (k == i) {
                    count += 1;
                } else {
                    count += j - k;
                    while (k < j) {
                        swap(s[k], s[k + 1]);
                        k++;
                    }
                }
            }
        }
        return count;

=======

        int n = s.size();
        int l = 0, r = n - 1;
        int cnt = 0;
        while(l < r) {
            if(s[l] != s[r]) {
                cnt++;
            }
            l++;
            r--;
        }
        return cnt;

=======

        int i = 0, j = s.size() - 1;
        int ret = 0;
        while (i < j) {
            ret += abs(s[i] - s[j]);
            i++;
            j--;
        }
        return ret;

=======

        int n = s.size();
        int l = 0, r = n-1;
        int ans = 0;
        while(l < r){
            if(s[l] != s[r]){
                ans++;
                if(s[l] > s[r]){
                    char c = s[l];
                    s[l] = s[r];
                    s[r] = c;
                }
            }
            l++;
            r--;
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        for(int i = 0; i < n/2; ++i)
        {
            int j = n - 1 - i;
            if(s[i] == s[j]) continue;
            int cnt = 0;
            for(int k = i; k < j; ++k)
            {
                if(s[k] == s[j]) { cnt = k - i; break; }
            }
            for(int k = j; k > i; --k)
            {
                if(s[k] == s[i]) { cnt = min(cnt, j - k); break; }
            }
            ans += cnt;
            s[i + cnt] = s[i];
        }
        return ans;

=======

        int n = s.size();
        int res = 0;
        int i = 0, j = n-1;
        while(i < j) {
            if(s[i] != s[j]) {
                int k = j;
                while(k > i && s[k] != s[i]) k--;
                if(k == i) {
                    res++;
                    i++;
                    j--;
                } else {
                    while(k < j) {
                        swap(s[k], s[k+1]);
                        k++;
                        res++;
                    }
                    i++;
                    j--;
                }
            } else {
                i++;
                j--;
            }
        }
        return res;

=======

        int n = s.size();
        int mid = n/2;
        int cnt = 0;
        for(int i=0; i<mid; i++){
            int j = n-i-1;
            if(s[i] == s[j]) continue;
            cnt++;
            if(s[i] > s[j]) swap(s[i], s[j]);
            if(s[i] == 'a' && s[j] == 'z') continue;
            if(s[i] == 'a') s[j]--;
            else s[i]--;
        }
        return cnt;
