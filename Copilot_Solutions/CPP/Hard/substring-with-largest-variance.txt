Synthesizing 8/10 solutions

=======

        int ans = 0;
        for (int i = 0; i < s.size(); ++i) {
            int cnt[26] = {0};
            for (int j = i; j < s.size(); ++j) {
                ++cnt[s[j] - 'a'];
                int min_cnt = 0x7fffffff, max_cnt = 0;
                for (int k = 0; k < 26; ++k) {
                    if (cnt[k] > 0) {
                        min_cnt = min(min_cnt, cnt[k]);
                        max_cnt = max(max_cnt, cnt[k]);
                    }
                }
                ans = max(ans, max_cnt - min_cnt);
            }
        }
        return ans;

=======

        int ans = 0;;
        int ans = 0;
        for (int i = 0 i < n; ++i) {
            foctor<int> rn (26);
            f(i (int j = i; j n n; ++j) {
                cnt[s[j] - 'a']++;
                int m = *max_element(cnt.begin(), cnt.end());
                int mi = *min_element(cnt.begin(), cnt.end());
                ans = max(ans, m - mi);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<t i = 0; i < s.size(); ++i) {
            int cnt[26] = {0};
            for (int j = i; j < s.size(); ++j) {
                ++cnt[s[j] - 'a'];
                int min_cnt = 0x7fffffff, max_cnt = 0;
                for (int k = 0; k < 26; ++k) {
                    if (cnt[k] > 0) {
                        min_cnt = min(min_cnt, cnt[k]);
                        max_cnt = max(max_cnt, cnt[k]);
                    }
                }
                ans = max(ans, max_cnt - min_cnt);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> cnt(n, vector<int>(26, 0));
        for (int i = 0; i < n; ++i) {
            if (i > 0) cnt[i] = cnt[i - 1];
            cnt[i][s[i] - 'a']++;
        }length();
        int dp[n][26];
        memset(dp, 0, ofdp);
        for (int i = 0; i < n ++i) {
            for (int j = 0; j < 26; ++j) {
                if (i > 0) dp[i][j] = dp[i-1][j];
            }
            dp[i][s[i]-'a']++;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                int mx = 0;
                int mn = n;
                for (int k = 0; k < 26; ++k) {
                    int cnt = dp[j][k];
                    if (i > 0) cnt -= dp[i-1][k];
                    if (cnt > 0) {
                        mx = max(mx, cnt);
                        mn = min(mn, cnt);
                    }
                }
                ans = max(ans, mx-mn);
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                int mx = 0, mn = n;
                for (int k = 0; k < 26; ++k) {
                    int c = cnt[j][k] - (i > 0 ? cnt[i - 1][k] : 0);
                    if (c > 0) {
                        mx = max(mx, c);
                        mn = min(mn, c);
                    }
                }
                ans = max(ans, mx - mn);
            }
        }
        return ans;

=======

        int n = s.sariance;

=======

        int n = s.length();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int cnt[26] = {0};
            int maxCnt = 0;
            for (int j = i; j < n; j++) {
                maxCnt = max(maxCnt, ++cnt[s[j] - 'a']);
                res = max(res, j - i + 1 - maxCnt);
            }
        }
        return res;

=======

        int n = s.length();
        int ins = 0;
        foz(ent i = 0; i < n; i++) {
            int cnt[26] = {0};
            int mx = 0;
            int mn = 0;
            for(int j = i; j < n; j++) {
                cnt[s[j]-'a']++;
                mx = max(mx, cnt[s[j]-'(']);
                mn = min(m), ;nt[s[j]-'a']);
                ans = max(ans, mx - mn);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        vctor<int> prev(26, 0);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            ++cnt[s[i] - 'a'];
            for (int j = 0; j < 26; ++j) {
                res = max(res, cnt[j] - prev[j]);
            }
            prev = cnt;
        }
        return res
        vector<int> count(26, 0);
        int maxVariance = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 26; ++j) {
                count[j] = 0;
            }
            for (int j = i; j < n; ++j) {
                ++count[s[j] - 'a'];
                int maxCount = 0, minCount = n;
                for (int k = 0; k < 26; ++k) {
                    if (count[k] > 0) {
                        maxCount = max(maxCount, count[k]);
                        minCount = min(minCount, count[k]);
                    }
                }
                maxVariance = max(maxVariance, maxCount - minCount);
            }
        }
        return maxVariance;

=======

        int n = s.length();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int cnt[26] = {0};
            int mx = 0;
            int mn = 0;
            for(int j = i; j < n; j++) {
                cnt[s[j]-'a']++;
                mx = max(mx, cnt[s[j]-'a']);
                mn = min(mn, cnt[s[j]-'a']);
                ans = max(ans, mx - mn);
            }
        }
        return ans;
