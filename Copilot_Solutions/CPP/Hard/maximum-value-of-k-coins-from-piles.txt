Synthesizing 10/10 solutions

=======

        vector<int> v;
        for (int i = 0; i < piles.size(); ++i) {
            for (int j = 0; j < piles[i].size(); ++j) {
                v.push_back(piles[i][j]);
            }
        }
        sort(v.begin(), v.end());
        int res = 0;
        for (int i = v.size() - 2; i >= 0 && k > 0; i -= 2, --k) {
            res += v[i];
        }
        return res;

=======

        int n = piles.size();
        vector<int> coins;
        for (int i = 0; i < n; i++) {
            int m = piles[i].size();
            for (int j = 0; j < m; j++) {
                coins.push_back(piles[i][j]);
            }
        }
        sort(coins.begin(), coins.end());
        int ans = 0;
        for (int i = coins.size() - 2; i >= coins.size() - k; i -= 2) {
            ans += coins[i];
        }
        return ans;

=======

        int n = piles.size();
        vector<int> coins;
        for (int i = 0; i < n; i++) {
            int m = piles[i].size();
            sort(piles[i].begin(), piles[i].end());
            for (int j = m - 2; j >= 0; j -= 2)
                coins.push_back(piles[i][j]);
        }
        sort(coins.begin(), coins.end());
        int ans = 0;
        for (int i = coins.size() - 1; i >= coins.size() - k; i--)
            ans += coins[i];
        return ans;

=======

        int n = piles.size();
        int m = piles[0].size();
        vector<int> coins;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                coins.push_back(piles[i][j]);
            }
        }
        sort(coins.begin(), coins.end());
        int ans = 0;
        for (int i = 1; i <= k; i++) {
            ans += coins[coins.size() - i * 2];
        }
        return ans;

=======

        vector<int> coins;
        for (auto& p : piles) {
            for (auto c : p) {
                coins.push_back(c);
            }
        }
        sort(coins.begin(), coins.end());
        int sum = 0;
        for (int i = coins.size() - 2; i >= coins.size() - k; i -= 2) {
            sum += coins[i];
        }
        return sum;

=======

        int n = piles.size();
        int m = piles[0].size();
        vector<int> v;
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                v.push_back(piles[i][j]);
            }
        }
        sort(v.begin(), v.end());
        int sum = 0;
        for(int i=n*m-2; i>=n*m-k; i-=2) {
            sum += v[i];
        }
        return sum;

=======

        vector<int> v;
        for (auto& p : piles) {
            sort(p.begin(), p.end(), greater<int>());
            for (int i = 1; i < p.size(); i += 2)
                v.push_back(p[i]);
        }
        sort(v.begin(), v.end(), greater<int>());
        int res = 0;
        for (int i = 0; i < k; ++i)
            res += v[i];
        return res;

=======

        int n = piles.size();
        int m = piles[0].size();
        sort(piles.begin(), piles.end());
        int i = 0;
        int j = m - 1;
        int sum = 0;
        while (k > 0) {
            sum += piles[i][j];
            j--;
            k--;
            if (k > 0) {
                sum += piles[n - i - 1][j];
                j--;
                k--;
            }
            if (j < 0) {
                i++;
                j = m - 1;
            }
        }
        return sum;

=======

        int n = piles.size();
        int m = piles[0].size();
        int res = 0;
        vector<int> arr;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr.push_back(piles[i][j]);
            }
        }
        sort(arr.begin(), arr.end());
        int i = arr.size() - 2;
        while (k > 0) {
            res += arr[i];
            i -= 2;
            k--;
        }
        return res;

=======

        vector<int> v;
        for (auto& p: piles) {
            for (auto c: p) v.push_back(c);
        }
        sort(v.begin(), v.end());
        int n = v.size();
        int i = n - 2;
        int ans = 0;
        while (k--) {
            ans += v[i];
            i -= 2;
        }
        return ans;
