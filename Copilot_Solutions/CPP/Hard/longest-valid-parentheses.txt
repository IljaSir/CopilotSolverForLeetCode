Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (s[i] == ')') {
                if (s[i - 1] == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                ans = max(ans, dp[i]);
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (s[i] == ')') {
                if (s[i - 1] == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                ans = max(ans, dp[i]);
            }
        }
        return ans;

=======

        int n = s.size();
        stack<int> st;
        st.push(-1);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                st.push(i);
            } else {
                st.pop();
                if (st.empty()) {
                    st.push(i);
                } else {
                    res = max(res, i - st.top());
                }
            }
        }
        return res;

=======

        stack<int> st;
        int maxans = 0;
        st.push(-1);
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else {
                st.pop();
                if (st.empty()) {
                    st.push(i);
                } else {
                    maxans = max(maxans, i - st.top());
                }
            }
        }
        return maxans;

=======

        int n = s.size();
        if (n < 2) return 0;
        vector<int> dp(n, 0);
        int res = 0;
        for (int i = 1; i < n; i++) {
            if (s[i] == ')') {
                if (s[i - 1] == '(') {
                    dp[i] = (i - 2 >= 0 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] - 1 >= 0 && s[i - dp[i - 1] - 1] == '(') {
                    dp[i] = dp[i - 1] + 2 + (i - dp[i - 1] - 2 >= 0 ? dp[i - dp[i - 1] - 2] : 0);
                }
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        stack<int> stk;
        int maxLen = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                stk.push(i);
            } else {
                if (!stk.empty() && s[stk.top()] == '(') {
                    stk.pop();
                    maxLen = max(maxLen, i - (stk.empty() ? -1 : stk.top()));
                } else {
                    stk.push(i);
                }
            }
        }
        return maxLen;

=======

        int n = s.length();
        if (n == 0) return 0;
        vector<int> dp(n, 0);
        int res = 0;
        for (int i = 1; i < n; i++) {
            if (s[i] == ')') {
                if (s[i-1] == '(') {
                    dp[i] = (i > 1 ? dp[i-2] : 0) + 2;
                } else {
                    if (i - dp[i-1] > 0 && s[i-dp[i-1]-1] == '(') {
                        dp[i] = dp[i-1] + ((i-dp[i-1]) > 1 ? dp[i-dp[i-1]-2] : 0) + 2;
                    }
                }
                res = max(res, dp[i]);
            }
        }
        return res;

=======

        int n = s.size();
        if (n == 0) {
            return 0;
        }
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (s[i] == ')') {
                if (s[i - 1] == '(') {
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(') {
                    dp[i] = dp[i - 1] + (i - dp[i - 1] >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                ans = max(ans, dp[i]);
            }
        }
        return ans;

=======

        int n = s.size();
        if (n == 0) return 0;
        stack<int> stk;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                stk.push(i);
            } else {
                if (stk.empty()) {
                    stk.push(i);
                } else {
                    if (s[stk.top()] == '(') {
                        stk.pop();
                        res = max(res, i - (stk.empty() ? -1 : stk.top()));
                    } else {
                        stk.push(i);
                    }
                }
            }
        }
        return res;

=======

        int n = s.size();
        if (n == 0) return 0;
        int dp[n+1];
        dp[0] = 0;
        dp[1] = 0;
        for (int i = 2; i <= n; ++i) {
            if (s[i-1] == '(') {
                dp[i] = 0;
            } else {
                if (s[i-2] == '(') {
                    dp[i] = dp[i-2] + 2;
                } else {
                    int match = i - dp[i-1] - 2;
                    if (match >= 0 && s[match] == '(') {
                        dp[i] = dp[i-1] + 2 + dp[match];
                    } else {
                        dp[i] = 0;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i <= n; ++i) {
            res = max(res, dp[i]);
        }
        return res;
