Synthesizing 10/10 solutions

=======

        int n = values.size();
        vector<vector<pair<int, int>>> g(n);
        for (auto& e : edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, -1));
        dp[0][0] = values[0];
        int res = 0;
        for (int t = 1; t <= maxTime; ++t) {
            for (int i = 0; i < n; ++i) {
                for (auto& e : g[i]) {
                    int j = e.first, w = e.second;
                    if (t - w >= 0 && dp[j][t - w] != -1) {
                        dp[i][t] = max(dp[i][t], dp[j][t - w] + values[i]);
                        res = max(res, dp[i][t]);
                    }
                }
            }
        }
        return res;

=======

        int n = values.size();
        vector<vector<pair<int, int>>> g(n);
        for (auto& e : edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, -1));
        return dfs(g, dp, values, 0, maxTime);
    }
    int dfs(vector<vector<pair<int, int>>>& g, vector<vector<int>>& dp, vector<int>& values, int u, int t) {
        if (dp[u][t] != -1) return dp[u][t];
        int ans = 0;
        for (auto& p : g[u]) {
            int v = p.first, w = p.second;
            if (t >= w) ans = max(ans, dfs(g, dp, values, v, t - w));
        }
        return dp[u][t] = ans + values[u];

=======

        int n = values.size();
        vector<vector<pair<int, int>>> g(n);
        for (auto& e : edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, -1));
        dp[0][0] = values[0];
        int res = 0;
        for (int i = 0; i < maxTime; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dp[j][i] == -1) continue;
                for (auto& p : g[j]) {
                    int k = p.first, t = p.second;
                    dp[k][i + t] = max(dp[k][i + t], dp[j][i] + values[k]);
                    res = max(res, dp[k][i + t]);
                }
            }
        }
        return res;

=======

        int n = values.size();
        vector<vector<pair<int, int>>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back({e[1], e[2]});
            adj[e[1]].push_back({e[0], e[2]});
        }
        vector<int> dp(n, INT_MIN);
        dp[0] = values[0];
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            auto [u, t] = q.front();
            q.pop();
            for (auto [v, w] : adj[u]) {
                if (t + w > maxTime) continue;
                if (dp[v] < dp[u] + values[v]) {
                    dp[v] = dp[u] + values[v];
                    q.push({v, t + w});
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = values.size();
        vector<vector<pair<int, int>>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].emplace_back(e[1], e[2]);
            graph[e[1]].emplace_back(e[0], e[2]);
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, INT_MIN));
        dp[0][0] = values[0];
        int res = 0;
        for (int t = 1; t <= maxTime; ++t) {
            for (int i = 0; i < n; ++i) {
                for (auto& [j, time] : graph[i]) {
                    if (t >= time && dp[j][t - time] != INT_MIN) {
                        dp[i][t] = max(dp[i][t], dp[j][t - time] + values[i]);
                        if (i == 0) res = max(res, dp[i][t]);
                    }
                }
            }
        }
        return res;

=======

        int n = values.size();
        vector<vector<pair<int, int>>> graph(n);
        for (auto& edge: edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, INT_MIN));
        dp[0][0] = values[0];
        for (int t = 0; t < maxTime; t++) {
            for (int i = 0; i < n; i++) {
                if (dp[i][t] == INT_MIN) continue;
                for (auto& edge: graph[i]) {
                    int j = edge.first, w = edge.second;
                    if (t + w > maxTime) continue;
                    dp[j][t + w] = max(dp[j][t + w], dp[i][t] + values[j]);
                }
            }
        }
        return *max_element(dp[0].begin(), dp[0].end());

=======

        vector<vector<pair<int, int>>> g(values.size());
        for (auto &e: edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<vector<int>> dp(values.size(), vector<int>(maxTime + 1));
        dp[0][0] = values[0];
        int ans = 0;
        for (int i = 0; i <= maxTime; ++i) {
            for (int j = 0; j < values.size(); ++j) {
                for (auto &e: g[j]) {
                    if (i + e.second > maxTime) continue;
                    dp[e.first][i + e.second] = max(dp[e.first][i + e.second], dp[j][i] + values[e.first]);
                    ans = max(ans, dp[e.first][i + e.second]);
                }
            }
        }
        return ans;

=======

        int n = values.size();
        vector<vector<pair<int, int>>> g(n, vector<pair<int, int>>());
        for (auto& e : edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, -1));
        int ans = 0;
        function<int(int, int)> dfs = [&](int u, int t) {
            if (dp[u][t] != -1) return dp[u][t];
            dp[u][t] = values[u];
            for (auto [v, w] : g[u]) {
                if (t - w >= 0) {
                    dp[u][t] = max(dp[u][t], dfs(v, t - w) + values[u]);
                }
            }
            return dp[u][t];
        };
        for (int i = 0; i < n; ++i) {
            ans = max(ans, dfs(i, maxTime));
        }
        return ans;

=======

        int n = values.size();
        vector<vector<vector<int>>> g(n);
        for (auto& e : edges) {
            int u = e[0], v = e[1], w = e[2];
            g[u].push_back({v, w});
            g[v].push_back({u, w});
        }
        
        vector<vector<int>> dp(n, vector<int>(maxTime + 1, -1));
        dp[0][0] = values[0];
        for (int t = 0; t <= maxTime; ++t) {
            for (int u = 0; u < n; ++u) {
                if (dp[u][t] == -1) continue;
                for (auto& e : g[u]) {
                    int v = e[0], w = e[1];
                    if (t + w > maxTime) continue;
                    dp[v][t + w] = max(dp[v][t + w], dp[u][t] + values[v]);
                }
            }
        }
        
        int ans = 0;
        for (int t = 0; t <= maxTime; ++t) {
            ans = max(ans, dp[0][t]);
        }
        return ans;

=======

        int n = values.size();
        vector<vector<pair<int, int>>> graph(n);
        vector<vector<int>> dp(n, vector<int>(maxTime+1, INT_MIN));
        for (auto& e : edges) {
            graph[e[0]].push_back({e[1], e[2]});
            graph[e[1]].push_back({e[0], e[2]});
        }
        dp[0][0] = values[0];
        int ans = values[0];
        for (int t = 1; t <= maxTime; ++t) {
            for (int i = 0; i < n; ++i) {
                dp[i][t] = dp[i][t-1];
                for (auto& e : graph[i]) {
                    if (t >= e.second) {
                        dp[i][t] = max(dp[i][t], dp[e.first][t-e.second]);
                    }
                }
                if (dp[i][t] != INT_MIN) {
                    dp[i][t] += values[i];
                    ans = max(ans, dp[i][t]);
                }
            }
        }
        return ans;
