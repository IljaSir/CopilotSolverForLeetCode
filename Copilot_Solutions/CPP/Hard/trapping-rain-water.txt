Synthesizing 10/10 solutions

=======

        int n = height.size();
        if (n == 0) return 0;
        vector<int> left(n), right(n);
        left[0] = height[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i - 1], height[i]);
        }
        right[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], height[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += min(left[i], right[i]) - height[i];
        }
        return ans;

=======

        int n = height.size();
        if (n == 0) return 0;
        vector<int> left(n), right(n);
        left[0] = height[0];
        for (int i = 1; i < n; ++i) {
            left[i] = max(left[i - 1], height[i]);
        }
        right[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = max(right[i + 1], height[i]);
        }
        int ans = 0;
        for (int i = 1; i < n - 1; ++i) {
            ans += min(left[i], right[i]) - height[i];
        }
        return ans;

=======

        int n = height.size();
        if (n < 3) return 0;
        vector<int> left(n), right(n);
        left[0] = height[0];
        for (int i = 1; i < n; ++i) {
            left[i] = max(left[i-1], height[i]);
        }
        right[n-1] = height[n-1];
        for (int i = n-2; i >= 0; --i) {
            right[i] = max(right[i+1], height[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += min(left[i], right[i]) - height[i];
        }
        return ans;

=======

        int n = height.size();
        if (n == 0) return 0;
        vector<int> left_max(n), right_max(n);
        left_max[0] = height[0];
        for (int i = 1; i < n; ++i) {
            left_max[i] = max(left_max[i - 1], height[i]);
        }
        right_max[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right_max[i] = max(right_max[i + 1], height[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += min(left_max[i], right_max[i]) - height[i];
        }
        return ans;

=======

        int n = height.size();
        if (n <= 2) return 0;
        vector<int> left(n, 0), right(n, 0);
        left[0] = height[0];
        for (int i = 1; i < n; ++i) {
            left[i] = max(left[i - 1], height[i]);
        }
        right[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = max(right[i + 1], height[i]);
        }
        int water = 0;
        for (int i = 0; i < n; ++i) {
            water += min(left[i], right[i]) - height[i];
        }
        return water;

=======

        int n = height.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        int ans = 0;
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i - 1], height[i - 1]);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], height[i + 1]);
        }
        for (int i = 0; i < n; i++) {
            int h = min(left[i], right[i]);
            if (h > height[i]) {
                ans += h - height[i];
            }
        }
        return ans;

=======

        int n = height.size();
        if (n <= 2) return 0;
        int left = 0, right = n - 1;
        int leftMax = 0, rightMax = 0;
        int res = 0;
        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    res += leftMax - height[left];
                }
                left++;
            } else {
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    res += rightMax - height[right];
                }
                right--;
            }
        }
        return res;

=======

        int n = height.size();
        if (n < 3) return 0;
        int ans = 0;
        int left = 0, right = n - 1;
        int left_max = 0, right_max = 0;
        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= left_max) left_max = height[left];
                else ans += left_max - height[left];
                left++;
            } else {
                if (height[right] >= right_max) right_max = height[right];
                else ans += right_max - height[right];
                right--;
            }
        }
        return ans;

=======

        int n = height.size();
        if(n == 0) return 0;
        int left = 0, right = n-1;
        int leftmax = height[left], rightmax = height[right];
        int res = 0;
        while(left < right) {
            leftmax = max(leftmax, height[left]);
            rightmax = max(rightmax, height[right]);
            if(leftmax < rightmax) {
                res += leftmax - height[left];
                left++;
            } else {
                res += rightmax - height[right];
                right--;
            }
        }
        return res;

=======

        int n = height.size();
        if (n == 0)
            return 0;
        int maxh = height[0];
        int maxl[n];
        int maxr[n];
        for (int i = 0; i < n; i++) {
            maxl[i] = maxh;
            maxh = max(maxh, height[i]);
        }
        maxh = height[n - 1];
        for (int i = n - 1; i >= 0; i--) {
            maxr[i] = maxh;
            maxh = max(maxh, height[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += max(0, min(maxl[i], maxr[i]) - height[i]);
        }
        return ans;
