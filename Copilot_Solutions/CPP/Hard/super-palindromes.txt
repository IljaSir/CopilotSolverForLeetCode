Synthesizing 8/10 solutions

=======

        long long L = stoll(left);
        long long R = stoll(right);
        int magic = 100000;
        int ans = 0;
        for (int k = 1; k < magic; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 2; i >= 0; --i)
                s += s[i];
            long long v = stoll(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                ans++;
        }
        for (int k = 1; k < magic; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 1; i >= 0; --i)
                s += s[i];
            long long v = stoll(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                ans++;
        }
        return ans;

=======

        long long l = stoll(left), r = stoll(right);
        int res = 0;
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 2; i >= 0; --i) {
                s += s[i];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ++res;
        }
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 1; i >= 0; --i) {
                s += s[i];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ++res;
        }
        return res;

=======

        long long l = stoll(left);
        long long r = stoll(right);
        int res = 0;
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 2; i >= 0; --i) {
                s += s[i];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindrome(v)) {
                ++res;
            }
        }
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 1; i >= 0; --i) {
                s += s[i];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindrome(v)) {
                ++res;
            }
        }
        return res;
    }
    bool isPalindrome(long long n) {
        string s = to_string(n);
        int l = 0, r = s.size() - 1;
        while (l < r) {
            if (s[l] != s[r]) {
                return false;
            }
            ++l;
            --r;
        }
        return true;

=======

        long long l = stoll(left), r = stoll(right);
        int res = 0;
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k), t = s;
            reverse(t.begin(), t.end());
            long long v = stoll(s + t);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ++res;
        }
        for (int k = 1; k < 100000; ++k) {
            string s = to_string(k), t = s;
            reverse(t.begin(), t.end());
            long long v = stoll(s + t.substr(1));
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ++res;
        }
        return res;

=======

        long long L = stoll(left), R = stoll(right);
        int MAGIC = 100000;
        vector<long long> candidates;
        // Count odd length;
        for (int k = 1; k < MAGIC; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 2; i >= 0; --i)
                s += s[i];
            long long v = stoll(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                candidates.push_back(v);
        }
        // Count even length;
        for (int k = 1; k < MAGIC; ++k) {
            string s = to_string(k);
            for (int i = s.size() - 1; i >= 0; --i)
                s += s[i];
            long long v = stoll(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                candidates.push_back(v);
        }
        return candidates.size();

=======

        // 1 <= left.length, right.length <= 18
        // left and right cannot have leading zeros.
        // left and right represent integers in the range [1, 10^18 - 1].
        // left is less than or equal to right.
        long long l = stoll(left);
        long long r = stoll(right);
        int count = 0;
        for (long long i = 1; i * i <= r; i++) {
            long long p = i * i;
            if (p >= l && isPalindrome(p) && isPalindrome(i)) {
                count++;
            }
            long long j = i;
            long long q = j * 10;
            while (j > 0) {
                q += j % 10;
                j /= 10;
                p = q * q;
                if (p >= l && p <= r && isPalindrome(p)) {
                    count++;
                }
            }
        }
        return count;
    }
    bool isPalindrome(long long x) {
        long long y = 0;
        long long t = x;
        while (t > 0) {
            y = y * 10 + t % 10;
            t /= 10;
        }
        return x == y;

=======

        long long l = stoll(left);
        long long r = stoll(right);
        int res = 0;
        for (long long i = 1; i <= 100000; ++i) {
            string s = to_string(i);
            for (int j = s.size() - 2; j >= 0; --j) {
                s += s[j];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindrome(v)) {
                ++res;
            }
        }
        for (long long i = 1; i <= 100000; ++i) {
            string s = to_string(i);
            for (int j = s.size() - 1; j >= 0; --j) {
                s += s[j];
            }
            long long v = stoll(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindrome(v)) {
                ++res;
            }
        }
        return res;

=======

        int64_t l = stoll(left), r = stoll(right);
        int64_t lo = sqrt(l), hi = sqrt(r);
        int64_t ans = 0;
        for (int64_t i = lo; i <= hi; ++i) {
            int64_t p = i;
            for (int64_t j = i / 10; j > 0; j /= 10) {
                p = p * 10 + j % 10;
            }
            p *= p;
            if (p >= l && p <= r && isPalindromic(p)) {
                ++ans;
            }
        }
        for (int64_t i = lo; i <= hi; ++i) {
            int64_t p = i;
            for (int64_t j = i; j > 0; j /= 10) {
                p = p * 10 + j % 10;
            }
            p *= p;
            if (p >= l && p <= r && isPalindromic(p)) {
                ++ans;
            }
        }
        return ans;
    }
    bool isPalindromic(int64_t n) {
        int64_t m = 0;
        for (int64_t i = n; i > 0; i /= 10) {
            m = m * 10 + i % 10;
        }
        return n == m;
