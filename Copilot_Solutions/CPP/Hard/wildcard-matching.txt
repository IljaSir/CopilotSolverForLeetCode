Synthesizing 10/10 solutions

=======

        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;
        for (int i = 1; i <= n; ++i) {
            if (p[i - 1] == '*') {
                dp[0][i] = dp[0][i - 1];
            }
        }
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else if (p[j - 1] == '?' || s[i - 1] == p[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        return dp[m][n];

=======

        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;
        for (int i = 1; i <= n; i++) {
            if (p[i - 1] == '*') {
                dp[0][i] = dp[0][i - 1];
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                } else if (s[i - 1] == p[j - 1] || p[j - 1] == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        return dp[m][n];

=======

        int n = s.size(), m = p.size();
        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));
        dp[0][0] = true;
        for (int i = 1; i <= m; ++i) {
            dp[0][i] = dp[0][i - 1] && p[i - 1] == '*';
        }
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
                } else if (p[j - 1] == '?' || s[i - 1] == p[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        return dp[n][m];

=======

        int n = s.size(), m = p.size();
        vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));
        dp[0][0] = true;
        for (int i = 1; i <= m; ++i) {
            dp[0][i] = dp[0][i - 1] & (p[i - 1] == '*');
        }
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i - 1][j] | dp[i][j - 1];
                } else {
                    dp[i][j] = (p[j - 1] == '?' || p[j - 1] == s[i - 1]) && dp[i - 1][j - 1];
                }
            }
        }
        return dp[n][m];

=======

        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;
        for (int j = 1; j <= n; j++) {
            if (p[j - 1] == '*') {
                dp[0][j] = true;
            } else {
                break;
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else if (p[j - 1] == '?' || p[j - 1] == s[i - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        return dp[m][n];

=======

        int i = 0, j = 0, match = 0, startIdx = -1;
        while (i < s.length()) {
            if (j < p.length() && (p[j] == '?' || p[j] == s[i])) {
                i++;
                j++;
            } else if (j < p.length() && p[j] == '*') {
                startIdx = j;
                match = i;
                j++;
            } else if (startIdx != -1) {
                j = startIdx + 1;
                match++;
                i = match;
            } else {
                return false;
            }
        }
        while (j < p.length() && p[j] == '*') {
            j++;
        }
        return j == p.length();

=======

        int sLen = s.size(), pLen = p.size();
        int i = 0, j = 0;
        int iStar = -1, jStar = -1;
        while (i < sLen) {
            if (j < pLen && (s[i] == p[j] || p[j] == '?')) {
                i++;
                j++;
            } else if (j < pLen && p[j] == '*') {
                iStar = i;
                jStar = j;
                j++;
            } else if (iStar >= 0) {
                iStar++;
                i = iStar;
                j = jStar + 1;
            } else {
                return false;
            }
        }
        while (j < pLen && p[j] == '*') {
            j++;
        }
        return j == pLen;

=======

        int sLen = s.length();
        int pLen = p.length();
        int sIndex = 0;
        int pIndex = 0;
        int sStar = -1;
        int pStar = -1;
        while (sIndex < sLen) {
            if (pIndex < pLen && (s[sIndex] == p[pIndex] || p[pIndex] == '?')) {
                ++sIndex;
                ++pIndex;
            } else if (pIndex < pLen && p[pIndex] == '*') {
                sStar = sIndex;
                pStar = pIndex;
                ++pIndex;
            } else if (sStar != -1) {
                sIndex = ++sStar;
                pIndex = pStar + 1;
            } else {
                return false;
            }
        }
        while (pIndex < pLen && p[pIndex] == '*') {
            ++pIndex;
        }
        return pIndex == pLen;

=======

        int sLen = s.size();
        int pLen = p.size();
        int sIndex = 0;
        int pIndex = 0;
        int starIndex = -1;
        int matchIndex = 0;
        while (sIndex < sLen) {
            if (pIndex < pLen && (p[pIndex] == '?' || s[sIndex] == p[pIndex])) {
                sIndex++;
                pIndex++;
            } else if (pIndex < pLen && p[pIndex] == '*') {
                starIndex = pIndex;
                matchIndex = sIndex;
                pIndex++;
            } else if (starIndex != -1) {
                pIndex = starIndex + 1;
                matchIndex++;
                sIndex = matchIndex;
            } else {
                return false;
            }
        }
        while (pIndex < pLen && p[pIndex] == '*') {
            pIndex++;
        }
        return pIndex == pLen;

=======

        int sLen = s.length();
        int pLen = p.length();
        int sIdx = 0;
        int pIdx = 0;
        int starIdx = -1;
        int sTmpIdx = -1;
        while (sIdx < sLen) {
            if (pIdx < pLen && (p[pIdx] == '?' || p[pIdx] == s[sIdx])) {
                sIdx++;
                pIdx++;
            } else if (pIdx < pLen && p[pIdx] == '*') {
                starIdx = pIdx;
                pIdx++;
                sTmpIdx = sIdx;
            } else if (starIdx != -1) {
                pIdx = starIdx + 1;
                sTmpIdx++;
                sIdx = sTmpIdx;
            } else {
                return false;
            }
        }
        while (pIdx < pLen && p[pIdx] == '*') {
            pIdx++;
        }
        return pIdx == pLen;
