Synthesizing 8/10 solutions

=======

        int n = pieces.size();
        vector<int> x(n), y(n);
        for (int i = 0; i < n; ++i) {
            x[i] = positions[i][0];
            y[i] = positions[i][1];
        }
        int ans = 0;
        vector<int> dx = {-1, 1, 0, 0, -1, -1, 1, 1};
        vector<int> dy = {0, 0, -1, 1, -1, 1, -1, 1};
        for (int i = 0; i < (1 << n); ++i) {
            vector<vector<int>> f(9, vector<int>(9, 0));
            for (int j = 0; j < n; ++j) {
                if (i >> j & 1) {
                    f[x[j]][y[j]] = 1;
                    if (pieces[j] == "rook") {
                        for (int k = 0; k < 4; ++k) {
                            int tx = x[j] + dx[k];
                            int ty = y[j] + dy[k];
                            while (tx >= 1 && tx <= 8 && ty >= 1 && ty <= 8) {
                                f[tx][ty] = 1;
                                tx += dx[k];
                                ty += dy[k];
                            }
                        }
                    } else if (pieces[j] == "queen") {
                        for (int k = 0; k < 8; ++k) {
                            int tx = x[j] + dx[k];
                            int ty = y[j] + dy[k];
                            while (tx >= 1 && tx <= 8 && ty >= 1 && ty <= 8) {
                                f[tx][ty] = 1;
                                tx += dx[k];
                                ty += dy[k];
                            }
                        }
                    } else {
                        for (int k = 0; k < 4; ++k) {
                            int tx = x[j] + dx[k + 4];
                            int ty = y[j] + dy[k + 4];
                            if (tx >= 1 && tx <= 8 && ty >= 1 && ty <= 8) {
                                f[tx][ty] = 1;
                            }
                        }
                    }

=======

        int n = pieces.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (pieces[i] == "rook") {
                ans += 15;
            } else if (pieces[i] == "queen") {
                ans += 22;
            } else {
                ans += 12;
            }
        }
        return ans;

=======

        int n = pieces.size();
        vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
        vector<int> x(n), y(n);
        for (int i = 0; i < n; ++i) {
            x[i] = positions[i][0];
            y[i] = positions[i][1];
        }
        int ans = 0;
        for (int i = 0; i < (1 << n); ++i) {
            vector<vector<int>> vis(9, vector<int>(9));
            for (int j = 0; j < n; ++j) {
                if ((i >> j) & 1) {
                    if (pieces[j] == "rook") {
                        for (int k = 0; k < 4; ++k) {
                            int nx = x[j] + dir[k][0], ny = y[j] + dir[k][1];
                            while (nx >= 1 && nx <= 8 && ny >= 1 && ny <= 8) {
                                ++vis[nx][ny];
                                nx += dir[k][0], ny += dir[k][1];
                            }
                        }
                    } else if (pieces[j] == "bishop") {
                        for (int k = 4; k < 8; ++k) {
                            int nx = x[j] + dir[k][0], ny = y[j] + dir[k][1];
                            while (nx >= 1 && nx <= 8 && ny >= 1 && ny <= 8) {
                                ++vis[nx][ny];
                                nx += dir[k][0], ny += dir[k][1];
                            }
                        }
                    } else {
                        for (int k = 0; k < 8; ++k) {
                            int nx = x[j] + dir[k][0], ny = y[j] + dir[k][1];
                            while (nx >= 1 && nx <= 8 && ny >= 1 && ny <= 8) {
                                ++vis[nx][ny];
                                nx += dir[k][0], ny += dir[k][1];
                            }
                        }
                    }
                }
            }
            int cnt =

=======

        int res = 0;
        for (int i = 0; i < pieces.size(); ++i) {
            res += count(pieces, positions, i);
        }
        return res;
    }
    
    int count(vector<string>& pieces, vector<vector<int>>& positions, int idx) {
        int res = 0;
        for (int i = 0; i < positions.size(); ++i) {
            if (i == idx) continue;
            if (pieces[i] == "rook" && (positions[i][0] == positions[idx][0] || positions[i][1] == positions[idx][1])) {
                return 0;
            }
            if (pieces[i] == "bishop" && abs(positions[i][0] - positions[idx][0]) == abs(positions[i][1] - positions[idx][1])) {
                return 0;
            }
            if (pieces[i] == "queen" && (positions[i][0] == positions[idx][0] || positions[i][1] == positions[idx][1] || abs(positions[i][0] - positions[idx][0]) == abs(positions[i][1] - positions[idx][1]))) {
                return 0;
            }
        }
        if (pieces[idx] == "rook") {
            res = 14;
        } else if (pieces[idx] == "bishop") {
            res = 11;
        } else {
            res = 21;
        }
        for (int i = 0; i < positions.size(); ++i) {
            if (i == idx) continue;
            if (pieces[i] == "rook" && positions[i][0] == positions[idx][0]) {
                res--;
            }
            if (pieces[i] == "rook" && positions[i][1] == positions[idx][1]) {
                res--;
            }
            if (pieces[i] == "bishop" && abs(positions[i][0] - positions[idx][0]) == abs(positions[i][1] - positions[idx][1])) {
                res--;
            }
            if (pieces[i] == "queen" && positions[i][0] == positions[idx][0]) {
                res--;
            }
            if (pieces[i] == "queen" && positions[i][1] == positions[idx][1]) {
                res--;
            }
            if (pieces[i

=======

        int n = pieces.size();
        int ans = 0;
        vector<vector<int>> v(8, vector<int>(8, 0));
        for (int i = 0; i < n; ++i) {
            v[positions[i][0] - 1][positions[i][1] - 1] = 1;
        }
        for (int i = 0; i < n; ++i) {
            if (pieces[i] == "rook") {
                int x = positions[i][0] - 1;
                int y = positions[i][1] - 1;
                int cnt = 0;
                for (int j = x - 1; j >= 0; --j) {
                    if (v[j][y] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (int j = x + 1; j < 8; ++j) {
                    if (v[j][y] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (int j = y - 1; j >= 0; --j) {
                    if (v[x][j] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (int j = y + 1; j < 8; ++j) {
                    if (v[x][j] == 1) {
                        break;
                    }
                    ++cnt;
                }
                ans += cnt;
            } else if (pieces[i] == "queen") {
                int x = positions[i][0] - 1;
                int y = positions[i][1] - 1;
                int cnt = 0;
                for (int j = x - 1; j >= 0; --j) {
                    if (v[j][y] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (int j = x + 1; j < 8; ++j) {
                    if (v[j][y] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (int j = y - 1; j >= 0; --j) {
                    if (v[x][j] == 1) {
                        break;
                    }
                    ++cnt;
                }
                for (

=======

        int n = pieces.size();
        int res = 0;
        vector<vector<int>> dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {-1, -1}, {1, 1}, {1, -1}, {-1, 1}};
        vector<vector<int>> used(8, vector<int>(8, 0));
        for (int i = 0; i < n; ++i) {
            used[positions[i][0] - 1][positions[i][1] - 1] = 1;
        }
        vector<vector<int>> dp(8, vector<int>(8, 0));
        for (int i = 0; i < n; ++i) {
            if (pieces[i] == "rook") {
                for (int j = 0; j < 4; ++j) {
                    int x = positions[i][0] - 1, y = positions[i][1] - 1;
                    while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                        dp[x][y] = 1;
                        x += dirs[j][0];
                        y += dirs[j][1];
                    }
                }
            } else if (pieces[i] == "bishop") {
                for (int j = 4; j < 8; ++j) {
                    int x = positions[i][0] - 1, y = positions[i][1] - 1;
                    while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                        dp[x][y] = 1;
                        x += dirs[j][0];
                        y += dirs[j][1];
                    }
                }
            } else {
                for (int j = 0; j < 8; ++j) {
                    int x = positions[i][0] - 1, y = positions[i][1] - 1;
                    while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                        dp[x][y] = 1;
                        x += dirs[j][0];
                        y += dirs[j][1];
                    }
                }
            }
        }
        for (int i = 0; i < 8;

=======

        return 0;

=======

        int ans = 0;
        int n = pieces.size();
        int m = 1 << n;
        for (int i = 0; i < m; i++) {
            vector<int> cnt(8, 0);
            for (int j = 0; j < n; j++) {
                if ((i >> j) & 1) {
                    cnt[positions[j][0] - 1]++;
                    cnt[positions[j][1] + 7]++;
                    if (pieces[j] == "bishop") {
                        cnt[positions[j][0] - positions[j][1] + 15]++;
                        cnt[positions[j][0] + positions[j][1]]++;
                    }
                    if (pieces[j] == "queen") {
                        cnt[positions[j][0] - positions[j][1] + 15]++;
                        cnt[positions[j][0] + positions[j][1]]++;
                        cnt[positions[j][0] - 1]++;
                        cnt[positions[j][1] + 7]++;
                    }
                }
            }
            bool flag = true;
            for (int j = 0; j < 8; j++) {
                if (cnt[j] > 1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ans++;
            }
        }
        return ans;
