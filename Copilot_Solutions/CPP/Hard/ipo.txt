Synthesizing 10/10 solutions

=======

        int n = profits.size();
        vector<pair<int, int>> projects;
        for (int i = 0; i < n; ++i) {
            projects.emplace_back(capital[i], profits[i]);
        }
        sort(projects.begin(), projects.end());
        priority_queue<int> pq;
        int i = 0;
        while (k--) {
            while (i < n && projects[i].first <= w) {
                pq.push(projects[i++].second);
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        int n = profits.size();
        vector<pair<int, int>> p(n);
        for (int i = 0; i < n; ++i) {
            p[i] = {capital[i], profits[i]};
        }
        sort(p.begin(), p.end());
        priority_queue<int> q;
        int i = 0;
        while (i < n && p[i].first <= w) {
            q.push(p[i].second);
            ++i;
        }
        while (k--) {
            if (q.empty()) {
                break;
            }
            w += q.top();
            q.pop();
            while (i < n && p[i].first <= w) {
                q.push(p[i].second);
                ++i;
            }
        }
        return w;

=======

        vector<pair<int, int>> projects;
        for (int i = 0; i < profits.size(); ++i) {
            projects.emplace_back(capital[i], profits[i]);
        }
        sort(projects.begin(), projects.end());
        priority_queue<int> pq;
        int j = 0;
        for (int i = 0; i < k; ++i) {
            while (j < projects.size() && projects[j].first <= w) {
                pq.push(projects[j].second);
                ++j;
            }
            if (!pq.empty()) {
                w += pq.top();
                pq.pop();
            }
        }
        return w;

=======

        int n = profits.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.emplace_back(capital[i], profits[i]);
        }
        sort(v.begin(), v.end());
        priority_queue<int> pq;
        for (int i = 0, j = 0; i < k; ++i) {
            for (; j < n && v[j].first <= w; ++j) {
                pq.push(v[j].second);
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        int n = profits.size();
        vector<pair<int, int>> p(n);
        for (int i = 0; i < n; i++) {
            p[i] = {capital[i], profits[i]};
        }
        sort(p.begin(), p.end());
        priority_queue<int> pq;
        int i = 0;
        while (k--) {
            while (i < n && p[i].first <= w) {
                pq.push(p[i++].second);
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < profits.size(); i++) {
            v.push_back(make_pair(capital[i], profits[i]));
        }
        sort(v.begin(), v.end());
        priority_queue<int> pq;
        int j = 0;
        for (int i = 0; i < k; i++) {
            while (j < v.size() && v[j].first <= w) {
                pq.push(v[j].second);
                j++;
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        int n = profits.size();
        vector<pair<int, int>> arr;
        for (int i = 0; i < n; ++i) {
            arr.push_back({capital[i], profits[i]});
        }
        sort(arr.begin(), arr.end());
        priority_queue<int> pq;
        int i = 0;
        while (k--) {
            while (i < n && arr[i].first <= w) {
                pq.push(arr[i++].second);
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        vector<pair<int, int>> p;
        for (int i = 0; i < profits.size(); i++) {
            p.push_back({capital[i], profits[i]});
        }
        sort(p.begin(), p.end());
        priority_queue<int> q;
        int i = 0;
        while (k--) {
            while (i < p.size() && p[i].first <= w) {
                q.push(p[i].second);
                i++;
            }
            if (q.empty()) break;
            w += q.top();
            q.pop();
        }
        return w;

=======

        auto n = profits.size();
        vector<pair<int, int>> arr(n);
        for (int i = 0; i < n; i++) {
            arr[i] = {capital[i], profits[i]};
        }
        sort(arr.begin(), arr.end());
        priority_queue<int> pq;
        int i = 0;
        while (k--) {
            while (i < n && arr[i].first <= w) {
                pq.push(arr[i].second);
                i++;
            }
            if (pq.empty()) {
                break;
            }
            w += pq.top();
            pq.pop();
        }
        return w;

=======

        // priority_queue<int> pq;
        // for (int i = 0; i < k; ++i) {
        //     for (int j = 0; j < profits.size(); ++j) {
        //         if (capital[j] <= w) {
        //             pq.push(profits[j]);
        //             capital[j] = INT_MAX;
        //         }
        //     }
        //     if (pq.empty()) return w;
        //     w += pq.top();
        //     pq.pop();
        // }
        // return w;
        priority_queue<int> pq;
        vector<pair<int, int>> v;
        for (int i = 0; i < profits.size(); ++i) {
            v.push_back({capital[i], profits[i]});
        }
        sort(v.begin(), v.end());
        int i = 0;
        for (int j = 0; j < k; ++j) {
            while (i < v.size() && v[i].first <= w) {
                pq.push(v[i].second);
                ++i;
            }
            if (pq.empty()) return w;
            w += pq.top();
            pq.pop();
        }
        return w;
