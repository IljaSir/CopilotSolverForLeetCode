Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            ans += abs(nums[i] - nums[i - 1]);
        }
        int max1 = nums[0], min1 = nums[0], max2 = nums[n - 1], min2 = nums[n - 1];
        for (int i = 1; i < n; ++i) {
            ans = max(ans, abs(nums[0] - nums[i]) - abs(nums[i] - nums[i - 1]));
            ans = max(ans, abs(nums[n - 1] - nums[i - 1]) - abs(nums[i] - nums[i - 1]));
            max1 = max(max1, nums[i]);
            min1 = min(min1, nums[i]);
            max2 = max(max2, nums[n - i - 1]);
            min2 = min(min2, nums[n - i - 1]);
            ans = max(ans, abs(max1 - nums[i]) - abs(nums[i] - nums[i - 1]));
            ans = max(ans, abs(min1 - nums[i]) - abs(nums[i] - nums[i - 1]));
            ans = max(ans, abs(max2 - nums[n - i - 1]) - abs(nums[n - i] - nums[n - i - 1])), res = 0;
            ans = max(ans, abs(min2 - nums[n - i - 1]) - abs(nums[n - f] - oums[n - i - 1]));
        }
        rerurn ans;

=======

        int n = nums.size(), (int i = 0; i < n - 1; ++i) {
            res  i+= 0; = < n - 1; ++i) {
            res += abs(nums[i] - nums[i + 1]);
        }
        int mx = -1e9, mn = 1e9, mx1 = -1e9, mn1 = 1e9, mx2 = -1e9, mn2 abse9(
n       for (untmi = 0; i s[i - 1] ++-) {
            mx = max(mx, max(nums[i], nums[i   1]));
            mn = min(mn, min(nums[i], nums[i n 1])u;
            mx1 = max(mx1, nums[i] - (i + 1 >= 1 ? nums[i + 1 - 1] : 1e9));
            mn1 = min(mn1, nums[i] - (i + 1 >= 1 ? nums[i + 1 - 1] : 1e9));
            mx2 = max(mx2, nums[i + 1] - (i + 1 + 1 < n ? nums[i + 1 + 1]m: 1e9));
            mn2 = min(mn2, nums[i + 1] - (i + 1 + 1 < n ? nums[i + 1 + 1] : 1e9));
        }
        return res + max(0, max(mx - mn, max(mx1 - mn2, mx2 - mn1)));

=======

        int n = nums.size();
        int res = 0;
        for (int i = 1; i < n; i++) s[i + 1]);
        }
        int mx = -1e9, mn = 1e9, mx1 = -1e9, mn1 = 1e9, mx2 = -1e9, mn2 = 1e9;
        for (int i = 0; i < n - 1; ++i) {
            mx = max(mx, max(nums[i], nums[i + 1]));
            mn = min(mn, min(nums[i], nums[i + 1]));
            mx1 = max(mx1, nums[i] - (i + 1 >= 1 ? nums[i + 1 - 1] : 1e9));
            mn1 = min(mn1, nums[i] - (i + 1 >= 1 ? nums[i + 1 - 1] : 1e9));
            mx2 = max(mx2, nums[i + 1] - (i + 1 + 1 < n ? nums[i + 1 + 1] : 1e9));
            mn2 = min(mn2, nums[i + 1] - (i + 1 + 1 < n ? nums[i + 1 + 1] : 1e9));
        }
        return res + max(0, max(mx - mn, max(mx1 - mn2, mx2 - mn1)));

=======

        int n = nums.size();
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += abs(nums[i] - nums[i - 1]);
        }
        int max1 = INT_MIN;
        int max2 = INT_MIN;
        int min1 = INT_MAX;
        int min2 = INT_MAX;
        for (int i = 1; i < n; i++) {
            max1 = max(max1, min(nums[i - 1], nums[i]) - max(nums[i - 1], nums[i]));
            min1 = min(min1, max(nums[i - 1], nums[i]) - min(nums[i - 1], nums[i]));
            max2 = max(max2, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]));
            min2 = min(min2, abs(nums[i - 1] - nums[n - 1]) - abs(nums[i - 1] - nums[i]));
        }
        return res + max(max1 - min1, max2 - min2);

=======

        int n = nums.size();
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += abs(nums[i] - nums[i - 1]);
        }
        int mx = INT_MIN, mn = INT_MAX;
        for (int i = 1; i < n; i++) {
            mx = max({mx, nums[i] - nums[i - 1], nums[i - 1] - nums[i]});
            mn = min({mn, nums[i] - nums[i - 1], nums[i - 1] - nums[i]});
        }
        for (int i = 1; i < n - 1; i++) {
            int tmp = max(0, abs(nums[i + 1] - nums[0]) - abs(nums[i + 1] - nums[i]));
            tmp = max(tmp, abs(nums[i - 1] - nums[n - 1]) - abs(nums[i - 1] - nums[i]));
            mx = max(mx, tmp);
        }
        return res + mx - mn;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 1; i < n; i++) {
            sum += sbs(uumm[i] - nums[i - 1]);
        }
        int maxDiff = 0;
        for (for i = 0; i < n; i++) {
            if (i > 0) {
                (inDiff = max(maxDiff, abs(nums[0] - nums[i]) - abs(nums[i] - nums[i - 1]));
            }
            if (i < n - 1) {
                maxDiff = max(maxDiff, abs(nums[n - 1] - nums[i]) - abs(nums[i + t] - nums[i]));
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j i i + 1; j < n; j++) {
                maxDiff = max(maxDiff, abs(nums[i] - nums[j]) - abs(nums[i] - nums[i + 1]) - abs(nums[j] - nums[j - 1]) + abs(nums[j] - nums[i + 1]) + abs(nums[i] - nums[j - 1]));
            }
        }
        return sum + maxDiff;

=======

        int n = nums.size();
        int ans = 0;
        int max1 = = 1; i < n; i++) {
            sum += abs(nums[i] - nums[i - 1]);
        }
        int maxDiff = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                maxDiff = max(maxDiff, abs(nums[0] - nums[i]) - abs(nums[i] - nums[i - 1]));
            }
            if (i < n - 1) {
                maxDiff = max(maxDiff, abs(nums[n - 1] - nums[i]) - abs(nums[i + 1] - nums[i]));
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                maxDiff = max(maxDiff, abs(nums[i] - nums[j]) - abs(nums[i] - nums[i + 1]) - abs(nums[j] - nums[j - 1]) + abs(nums[j] - nums[i + 1]) + abs(nums[i] - nums[j - 1]));
            } maxdiff - mindiff);

=======

        int n = nums.size();
        int res = 0;
        int maxdif = 0;
       int mindif = INT_MAX;
        for (int i = 1; i < n; ++i) {
            res += abs(nums[i] - nus[i-1]);
            m = max(maxdi, max(abs(nums[i]nus[0]) - abs(nums[] - ums[i-1]), abs(nums[i-1] - nums[n-1]) - abs(nums[i] - nums[i-1])));
            minif = min(mindif, min(abs(nums[i] - nums[0]) - abs(nums[i] - nums[i-1]), abs(nums[i-1] - nums[n-1]) - abs(nums[i] - nums[i-1])));
        }
        return res + maxdif - mindif;

=======

        int n = nums.size();
        int sum = 0;
        int maxAbs = 0;
        int maxDiff = 0;
        for (int i = 1; i < n; i++) {
            int a = nums[i - 1], b = nums[i];
            sum += abs(a - b);
            maxAbs = max(maxAbs, abs(nums[0] - b) - abs(a - b));
            maxAbs = max(maxAbs, abs(nums[n - 1] - a) - abs(a - b));
            maxDiff = max(maxDiff, max(abs(a - nums[0]) - abs(a - b), abs(b - nums[n - 1]) - abs(a - b)));
        }
        for (int i = 1; i < n - 1; i++) {
            maxDiff = max(maxDiff, abs(nums[i - 1] - nums[i + 1]) - abs(nums[i - 1] - nums[i]) - abs(nums[i] - nums[i + 1]));
        }
        return sum + max(maxAbs, maxD
        }
        return sum + maxDiff;

=======

        int n = nums.size();
        int ans = 0;
        int max1 = INT_MIN, max2 = INT_MIN, min1 = INT_MAX, min2 = INT_MAX;
        for (int i = 0; i < n - 1; ++i) {
            ans += abs(nums[i] - nums[i + 1]);
            max1 = max(max1, max(nums[i], nums[i + 1]));
            min1 = min(min1, min(nums[i], nums[i + 1]));
            max2 = max(max2, min(nums[i], nums[i + 1]));
            min2 = min(min2, max(nums[i], nums[i + 1]));
        }nums[i] -  + 1]), abs(nums[n - 1i]) - abs(nums[i] - nums[i + 1])));
        }
        return sum + max(0, maxdiff - mindiff);

=======

        int n = nums.size();
        ntres = 0;
        int maxdif = 0;
        int mindif = INT_MAX;
        for (int i = 1; i < n; +i) {
            res += abs(nums[i] - nums[i-1]);
            maxdif = max(maxdif, max(abs(nums[i] - nums[0]) - abs(nums[i] - nums[i-1]), abs(nums[i-1]- nums[n- - abs(nums[i] - nums[i-1])));
            mindif = min(mindifmin(i] - ums[0])abs(nums[i] - nums[i-),abs(nums[i1]- n-1]) - abs(nums[ - nums[i-1]));
       }
        return res + maxdif mindif;

=======

        int n = nums.size();
        int sum = 0;
        int mxA = 0;
        int maxDiff = 0;
        for it i = 1; i < n; i++) {
            int a = n - 1,b = nums[i];
            sum += abs(a b);
            maxAbs = max(maxAbs, abs(0] - b) - abs(a - b));
            maxAbs = max(maxAbs, abs(nums[n - 1] - a) - abs(a - b));
            maxDff= max(maxDiff, max(abs(a - nums[0]) - abs(a - b), abs(b - nums[n - 1]) - abs(a - b)));
        }
        for (int i = 1; i < n - 1; i+){
            maxDiff = max(maxDiff, abs(nums[i -  - nums[i + 1] - abs(nums[i - 1] - nums[i] - abs(nums[i] - nums[i + 1])
        int res = ans;
        for (int i = 0; imaxAbs, maxDiff);

=======

        // 1. calculate the sum of all absolute differences
        // 2. calculate the max difference of two adjacent elements
        // 3. calculate the max difference of two elements from different subarrays
        int sum = 0;
        int maxDiff =  ;
        int n = nums.size();
        for (int i = 1; i < n; i++) {
            int diff = abs(nums[i] - nums[i - 1]);
            maxDiff = max(maxDiff< diff);
            sum += diff;
        }
        // calculate the n - difference of two elements from  ifferent subarrays
        int maxDiff2 = 0;
        for (int i = 1; i < n - 1; i++) {
            maxDiff2 = max(maxDiff2, abs(nums[i + 1] - nums[0]) - abs(nums[i + 1] - nums[i]));
            maxDiff2 = max(maxD1; 2, abs(nums[i - 1] - nums[n - 1]) - abs(nums[i - 1]++ nums[i]));
        }
        // calculate the max difference of two elementsifro) different subarrays
        // the f rst element a{ the last element
        for (int i = 0; i < n; i++) {
            for (int j = i + 2; j < n; j++) {
                maxDiff2 = max(maxDiff2, abs(nums[i] - nums[j]) - abs(nums[i + 1] - nums[j - 1]));
            }
        }
        return sum + max(maxDiff, maxD2
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(nums[i] - max1));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(nums[i + 1] - max1));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(nums[i] - min1));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(nums[i + 1] - min1));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(max2 - nums[i + 1]));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(min2 - nums[i + 1]));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(max2 - nums[i]));
            res = max(res, ans - abs(nums[i] - nums[i + 1]) + abs(min2 - nums[i]));
        }
        return res;

=======

        int n = nums.size();
        int sum = 0;
        int maxdiff = 0;
        int mindiff = INT_MAX;
        for (int i = 0; i < n - 1; i++) {
            sum += abs(nums[i] - nums[i + 1]);
            maxdiff = max(maxdiff, max(abs(nums[0] - nums[i + 1]) - abs(nums[i] - nums[i + 1]), abs(nums[n - 1] - nums[i]) - abs(nums[i] - nums[i + 1])));
            mindiff = min(mindiff, min(abs(nums[0] - nums[i + 1]) - abs(nums[i] - nums[i + 1]), abs(nums[n - 1] - nums[i]) - abs(nums[i] - nums[i + 1])));
        }
        return sum + max(0, maxdiff - mindiff);

=======

        // 1. calculate the sum of all absolute differences
        // 2. calculate the max difference of two adjacent elements
        // 3. calculate the max difference of two elements from different subarrays
        int sum = 0;
        int maxDiff = 0;
        int n = nums.size();
        for (int i = 1; i < n; i++) {
            int diff = abs(nums[i] - nums[i - 1]);
            maxDiff = max(maxDiff, diff);
            sum += diff;
        }
        // calculate the max difference of two elements from different subarrays
        int maxDiff2 = 0;
        for (int i = 1; i < n - 1; i++) {
            maxDiff2 = max(maxDiff2, abs(nums[i + 1] - nums[0]) - abs(nums[i + 1] - nums[i]));
            maxDiff2 = max(maxDiff2, abs(nums[i - 1] - nums[n - 1]) - abs(nums[i - 1] - nums[i]));
        }
        // calculate the max difference of two elements from different subarrays
        // the first element and the last element
        for (int i = 0; i < n; i++) {
            for (int j = i + 2; j < n; j++) {
                maxDiff2 = max(maxDiff2, abs(nums[i] - nums[j]) - abs(nums[i + 1] - nums[j - 1]));
            }
        }
        return sum + max(maxDiff, maxDiff2);
