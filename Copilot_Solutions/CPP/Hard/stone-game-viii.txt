Synthesizing 9/10 solutions

=======

        int n = stones.size();
        vector<int> dp(n);
        dp[n - 1] = stones[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + stones[i];
        }
        int ans = dp[0];
        for (int i = 1; i < n - 1; i++) {
            ans = max(ans, dp[i] - ans);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> dp(n);
        dp[n - 1] = stones[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            dp[i] = dp[i + 1] + stones[i];
        }
        int ans = dp[0];
        for (int i = 1; i < n - 1; ++i) {
            ans = max(ans, dp[i] - ans);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> sums(n);
        sums[0] = stones[0];
        for (int i = 1; i < n; ++i) {
            sums[i] = sums[i - 1] + stones[i];
        }
        int dp = sums[n - 1];
        for (int i = n - 2; i > 0; --i) {
            dp = max(dp, sums[i] - dp);
        }
        return dp;

=======

        int n = stones.size();
        vector<int> prefixSum(n);
        prefixSum[0] = stones[0];
        for (int i = 1; i < n; ++i) {
            prefixSum[i] = prefixSum[i - 1] + stones[i];
        }
        int dp = prefixSum[n - 1];
        int ans = dp;
        for (int i = n - 2; i > 0; --i) {
            dp = max(dp, prefixSum[i] - dp);
            ans = max(ans, dp);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> dp(n);
        dp[n-1] = stones[n-1];
        for (int i = n-2; i >= 0; --i) {
            dp[i] = dp[i+1] + stones[i];
        }
        int ans = dp[1];
        for (int i = 2; i < n; ++i) {
            ans = max(ans, dp[i] - ans);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> ps(n);
        ps[0] = stones[0];
        for (int i = 1; i < n; i++) {
            ps[i] = ps[i - 1] + stones[i];
        }
        int ans = ps[n - 1];
        for (int i = n - 2; i > 0; i--) {
            ans = max(ans, ps[i] - ans);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> dp(n, 0);
        dp[n-1] = stones[n-1];
        for (int i = n-2; i >= 0; --i) {
            dp[i] = dp[i+1] + stones[i];
        }
        int ans = dp[0];
        for (int i = 1; i < n-1; ++i) {
            ans = max(ans, dp[i] - ans);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> pre(n);
        pre[0] = stones[0];
        for (int i = 1; i < n; ++i) pre[i] = pre[i - 1] + stones[i];
        int res = pre[n - 1];
        for (int i = n - 2; i > 0; --i) {
            res = max(res, pre[i] - res);
        }
        return res;

=======

        int n = stones.size();
        vector<int> s(n+1, 0);
        for (int i = 0; i < n; ++i) {
            s[i+1] = s[i] + stones[i];
        }
        int dp = s[n];
        int res = dp;
        for (int i = n-1; i > 1; --i) {
            dp = max(dp, s[i]);
            res = max(res, dp - s[i-1]);
        }
        return res;
