Synthesizing 10/10 solutions

=======

        map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        set<int> s;
        for (auto it = m.begin(); it != m.end(); it++) {
            s.insert(it->second);
        }
        return m.size() == s.size();

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        unordered_set<int> s;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (s.find(it->second) != s.end()) {
                return false;
            }
            s.insert(it->second);
        }
        return true;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            if (m.find(arr[i]) == m.end()) {
                m[arr[i]] = 1;
            } else {
                m[arr[i]]++;
            }
        }
        unordered_set<int> s;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (s.find(it->second) == s.end()) {
                s.insert(it->second);
            } else {
                return false;
            }
        }
        return true;

=======

        unordered_map<int, int> m;
        for (auto x : arr) {
            m[x]++;
        }
        unordered_set<int> s;
        for (auto x : m) {
            if (s.find(x.second) != s.end()) {
                return false;
            }
            s.insert(x.second);
        }
        return true;

=======

        unordered_map<int, int> m;
        for (auto x: arr) m[x]++;
        unordered_set<int> s;
        for (auto x: m) {
            if (s.count(x.second)) return false;
            s.insert(x.second);
        }
        return true;

=======

        map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto i = m.begin(); i != m.end(); i++) {
            v.push_back(i->second);
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < v.size() - 1; i++) {
            if (v[i] == v[i + 1]) {
                return false;
            }
        }
        return true;

=======

        std::unordered_map<int, int> m;
        for (auto i : arr) {
            ++m[i];
        }
        std::unordered_set<int> s;
        for (auto i : m) {
            if (s.find(i.second) != s.end()) {
                return false;
            }
            s.insert(i.second);
        }
        return true;

=======

        map<int, int> count;
        map<int, int> freq;
        for (int i = 0; i < arr.size(); i++) {
            count[arr[i]]++;
        }
        for (auto it = count.begin(); it != count.end(); it++) {
            freq[it->second]++;
        }
        for (auto it = freq.begin(); it != freq.end(); it++) {
            if (it->second > 1) {
                return false;
            }
        }
        return true;

=======

        map<int, int> m;
        for(int i : arr) {
            m[i]++;
        }
        set<int> s;
        for(auto it=m.begin(); it!=m.end(); it++) {
            s.insert(it->second);
        }
        return s.size() == m.size();

=======

        unordered_map<int, int> occ;
        for (int i = 0; i < arr.size(); i++) {
            occ[arr[i]]++;
        }
        unordered_map<int, int> times;
        for (auto p : occ) {
            times[p.second]++;
        }
        for (auto p : times) {
            if (p.second > 1) return false;
        }
        return true;
