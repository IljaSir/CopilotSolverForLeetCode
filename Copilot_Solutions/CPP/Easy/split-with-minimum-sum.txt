Synthesizing 9/10 solutions

=======

        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int splitWithMinSum(int num) {
        int sum = splitNum(num);
        int num1 = 0;
        int num2 = 0;
        int minSum = sum;
        int minNum1 = 0;
        int minNum2 = 0;
        for (int i = 1; i < sum; i++) {
            if (sum % i == 0) {
                num1 = i;
                num2 = sum / i;
                if (num1 + num2 < minSum) {
                    minSum = num1 + num2;
                    minNum1 = num1;
                    minNum2 = num2;
                }
            }
        }
        return minNum1 + minNum2;
    }
    int minSumOfDigits(vector<int>& nums) {
        int minSum = INT_MAX;
        for (auto num : nums) {
            int sum = splitWithMinSum(num);
            if (sum < minSum) {
                minSum = sum;
            }
        }
        return minSum % 2;

=======

        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int splitNum2(int num) {
        int sum = 0;
        int cnt[10] = {0};
        while (num > 0) {
            cnt[num % 10]++;
            num /= 10;
        }
        for (int i = 0; i < 10; i++) {
            sum += i * cnt[i];
        }
        return sum;
    }
    int splitNum3(int num) {
        int sum = 0;
        int cnt[10] = {0};
        while (num > 0) {
            cnt[num % 10]++;
            num /= 10;
        }
        for (int i = 9; i >= 0; i--) {
            if (cnt[i] > 0) {
                sum += i * cnt[i];
                cnt[i]--;
                break;
            }
        }
        for (int i = 0; i < 10; i++) {
            sum += i * cnt[i];
        }
        return sum;
    }
    int splitNum4(int num) {
        int sum = 0;
        int cnt[10] = {0};
        while (num > 0) {
            cnt[num % 10]++;
            num /= 10;
        }
        int idx = 0;
        while (cnt[idx] == 0) {
            idx++;
        }
        cnt[idx]--;
        for (int i = 9; i >= 0; i--) {
            if (cnt[i] > 0) {
                sum += i * cnt[i];
                cnt[i]--;
                break;
            }
        }
        for (int i = 0; i < 10; i++) {
            sum += i * cnt[i];
        }
        return sum;

=======

        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int splitNum2(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        return sum1 + sum2;
    }
    int splitNum3(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;
    }
    int splitNum4(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;
    }
    int splitNum5(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;
    }
    int splitNum6(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;
    }
    int splitNum7(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;
    }
    int splitNum8(int num1, int num2) {
        int sum1 = splitNum(num1);
        int sum2 = splitNum(num2);
        int sum3 = splitNum(num1 + num2);
        return (sum1 + sum2) - sum3;

=======

        int res = 0;
        while (num) {
            res += num % 10;
            num /= 10;
        }
        return res;
    }
    int split(int num) {
        int res = 0;
        while (num) {
            res += num % 10;
            num /= 10;
        }
        return res;
    }
    int minSumOfLengths(vector<int>& arr, int target) {
        int n = arr.size();
        int sum = 0;
        int l = 0;
        int minlen = INT_MAX;
        vector<int> dp(n, INT_MAX);
        for (int r = 0; r < n; r++) {
            sum += arr[r];
            while (sum > target) {
                sum -= arr[l++];
            }
            if (sum == target) {
                if (l > 0 && dp[l-1] != INT_MAX) {
                    minlen = min(minlen, r-l+1+dp[l-1]);
                }
                dp[r] = min(dp[r], r-l+1);
            }
            if (r > 0) {
                dp[r] = min(dp[r], dp[r-1]);
            }
        }
        return minlen == INT_MAX ? -1 : minlen;
    }
    int minSumOfLengths(vector<int>& arr, int target) {
        int n = arr.size();
        int sum = 0;
        int l = 0;
        int minlen = INT_MAX;
        vector<int> dp(n, INT_MAX);
        for (int r = 0; r < n; r++) {
            sum += arr[r];
            while (sum > target) {
                sum -= arr[l++];
            }
            if (sum == target) {
                if (l > 0 && dp[l-1] != INT_MAX) {
                    minlen = min(minlen, r-l+1+dp[l-1]);
                }
                dp[r] = min(dp[r], r-l+1);
            }
            if (r > 0) {
                dp[r] = min(dp[r], dp[r-1]);
            }
        }
        return minlen == INT_MAX ? -1 : minlen;

=======

        int sum = 0;
        while (num) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int minSum(int num) {
        int n = num;
        int sum = splitNum(num);
        int sum1 = 0;
        int sum2 = 0;
        while (n) {
            int d = n % 10;
            n /= 10;
            if (d == 0) continue;
            if (sum1 == 0) {
                sum1 = d;
            } else {
                if (sum1 * 10 + d <= sum2) {
                    sum1 = sum1 * 10 + d;
                } else {
                    sum2 = sum2 * 10 + d;
                }
            }
        }
        return sum1 + sum2;

=======

        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            sum += i;
        }
        return sum;
    }
    int splitNum2(int num) {
        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            if (i > 0) {
                sum++;
            }
        }
        return sum;
    }
    int splitNum3(int num) {
        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            if (i > 0) {
                sum += i;
            }
        }
        return sum;
    }
    int splitNum4(int num) {
        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            if (i > 0) {
                sum += i;
            }
        }
        return sum;
    }
    int splitNum5(int num) {
        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            if (i > 0) {
                sum += i;
            }
        }
        return sum;
    }
    int splitNum6(int num) {
        vector<int> digits(10, 0);
        int sum = 0;
        while (num) {
            digits[num % 10]++;
            num /= 10;
        }
        for (auto i : digits) {
            if (i > 0) {
                sum += i;
            }
        }
        return sum;

=======

        int sum = 0;
        while (num) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int split(int num, int i, int sum, int sum1, int sum2, vector<int> &digits) {
        if (i == 10) {
            return sum1 + sum2;
        }
        if (digits[i] == 0) {
            return split(num, i + 1, sum, sum1, sum2, digits);
        }
        if (sum1 + sum2 == sum) {
            return split(num, i + 1, sum, sum1, sum2, digits);
        }
        if (sum1 + sum2 > sum) {
            return 2 * sum;
        }
        int res = 2 * sum;
        int cnt = digits[i];
        for (int j = 0; j <= cnt; j++) {
            digits[i] -= j;
            res = min(res, split(num, i + 1, sum, sum1 + j * i, sum2 + (cnt - j) * i, digits));
            digits[i] += j;
        }
        return res;
    }
    int splitNum(string &num) {
        int sum = 0;
        for (int i = 0; i < num.size(); i++) {
            sum += num[i] - '0';
        }
        return sum;
    }
    int split(string &num, int i, int sum, int sum1, int sum2, vector<int> &digits) {
        if (i == num.size()) {
            return sum1 + sum2;
        }
        if (digits[num[i] - '0'] == 0) {
            return split(num, i + 1, sum, sum1, sum2, digits);
        }
        if (sum1 + sum2 == sum) {
            return split(num, i + 1, sum, sum1, sum2, digits);
        }
        if (sum1 + sum2 > sum) {
            return 2 * sum;
        }
        int res = 2 * sum;
        int cnt = digits[num[i] - '0'];
        for (int j = 0; j <= cnt; j++) {
            digits[num[i] - '0'] -= j;

=======

        int minSum = INT_MAX;
        for (int i = 1; i <= num / 2; i++) {
            int sum = calcSum(i, num - i);
            if (sum < minSum) {
                minSum = sum;
            }
        }
        return minSum;
    }
    
    int calcSum(int num1, int num2) {
        int sum = 0;
        while (num1) {
            sum += num1 % 10;
            num1 /= 10;
        }
        while (num2) {
            sum += num2 % 10;
            num2 /= 10;
        }
        return sum;
    }
    
    int splitNum2(int num) {
        int minSum = INT_MAX;
        for (int i = 1; i <= num / 2; i++) {
            int sum = calcSum2(i, num - i);
            if (sum < minSum) {
                minSum = sum;
            }
        }
        return minSum;
    }
    
    int calcSum2(int num1, int num2) {
        int sum = 0;
        int digits[10] = {0};
        while (num1) {
            digits[num1 % 10]++;
            num1 /= 10;
        }
        while (num2) {
            digits[num2 % 10]++;
            num2 /= 10;
        }
        for (int i = 0; i < 10; i++) {
            sum += digits[i];
        }
        return sum;
    }
    
    int splitNum3(int num) {
        int minSum = INT_MAX;
        for (int i = 1; i <= num / 2; i++) {
            int sum = calcSum3(i, num - i);
            if (sum < minSum) {
                minSum = sum;
            }
        }
        return minSum;
    }
    
    int calcSum3(int num1, int num2) {
        int sum = 0;
        int digits[10] = {0};
        while (num1) {
            digits[num1 % 10]++;
            num1 /= 10;
        }
        while (num2) {
            digits[num2 % 10]++;
            num2 /= 10;
        }
        for (int i = 0; i < 10;

=======

        int sum = 0;
        while (num) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int split(int num, int idx, int sum, int &minSum) {
        if (idx == 0) {
            int num2 = sum - num;
            minSum = min(minSum, num + num2);
            return 0;
        }
        int n = num % 10;
        num /= 10;
        int res = 0;
        for (int i = 0; i <= n; ++i) {
            res += split(num, idx - 1, sum - i, minSum);
        }
        return res;
    }
    int splitWithMinimumSum(int num) {
        int minSum = INT_MAX;
        int idx = 0;
        int num1 = num;
        while (num1) {
            num1 /= 10;
            ++idx;
        }
        split(num, idx, splitNum(num), minSum);
        return minSum;
