Synthesizing 10/10 solutions

=======

        if (strs.size() == 0) return "";
        string prefix = strs[0];
        for (int i = 1; i < strs.size(); i++) {
            while (strs[i].find(prefix) != 0) {
                prefix = prefix.substr(0, prefix.size() - 1);
                if (prefix.empty()) return "";
            }
        }
        return prefix;

=======

        int n = strs.size();
        if (n == 0) return "";
        if (n == 1) return strs[0];
        string prefix = strs[0];
        for (int i = 1; i < n; i++) {
            int j = 0;
            for (; j < prefix.length() && j < strs[i].length(); j++) {
                if (prefix[j] != strs[i][j]) break;
            }
            prefix = prefix.substr(0, j);
        }
        return prefix;

=======

        if (strs.size() == 0) return "";
        string prefix = strs[0];
        for (int i = 1; i < strs.size(); i++) {
            int j = 0;
            while (j < prefix.length() && j < strs[i].length() && prefix[j] == strs[i][j]) {
                j++;
            }
            prefix = prefix.substr(0, j);
        }
        return prefix;

=======

        string prefix = "";
        if (strs.size() == 0) return prefix;
        for (int i = 0; i < strs[0].size(); ++i) {
            char c = strs[0][i];
            for (int j = 1; j < strs.size(); ++j) {
                if (i == strs[j].size() || strs[j][i] != c) {
                    return prefix;
                }
            }
            prefix += c;
        }
        return prefix;

=======

        if (strs.size() == 0) return "";
        string ans = "";
        for (int i = 0; i < strs[0].size(); i++) {
            char c = strs[0][i];
            for (int j = 1; j < strs.size(); j++) {
                if (i >= strs[j].size() || strs[j][i] != c) {
                    return ans;
                }
            }
            ans += c;
        }
        return ans;

=======

        if (strs.empty()) return "";
        string prefix = strs[0];
        for (int i = 1; i < strs.size(); i++) {
            int j = 0;
            while (j < strs[i].size() && j < prefix.size() && strs[i][j] == prefix[j]) j++;
            prefix = prefix.substr(0, j);
            if (prefix.empty()) return "";
        }
        return prefix;

=======

        if (strs.size() == 0) return "";
        if (strs.size() == 1) return strs[0];
        int i = 0;
        for (; i < strs[0].size(); ++i) {
            for (int j = 1; j < strs.size(); ++j) {
                if (i >= strs[j].size() || strs[j][i] != strs[0][i]) {
                    return strs[0].substr(0, i);
                }
            }
        }
        return strs[0].substr(0, i);

=======

        string ans = "";
        if (strs.size() == 0) return ans;
        if (strs.size() == 1) return strs[0];
        int minLen = strs[0].size();
        for (int i = 1; i < strs.size(); i++) {
            minLen = min(minLen, (int)strs[i].size());
        }
        for (int i = 0; i < minLen; i++) {
            for (int j = 1; j < strs.size(); j++) {
                if (strs[j][i] != strs[0][i]) {
                    return ans;
                }
            }
            ans += strs[0][i];
        }
        return ans;

=======

        string result;
        if (strs.size() == 0) return result;
        if (strs.size() == 1) return strs[0];
        int minLen = INT_MAX;
        for (auto s : strs) {
            minLen = min(minLen, (int)s.size());
        }
        for (int i = 0; i < minLen; i++) {
            char c = strs[0][i];
            for (int j = 1; j < strs.size(); j++) {
                if (strs[j][i] != c) {
                    return result;
                }
            }
            result.push_back(c);
        }
        return result;

=======

        string res = "";
        int i = 0, j = 0;
        while (i < strs.size() && j < strs[i].size()) {
            char ch = strs[i][j];
            for (int k = i; k < strs.size(); k++) {
                if (j >= strs[k].size() || strs[k][j] != ch) {
                    return res;
                }
            }
            res += ch;
            j++;
        }
        return res;
