Synthesizing 10/10 solutions

=======

        int last = -1, ans = 0;
        for (int i = 0; i < 32; ++i) {
            if ((n >> i) & 1) {
                if (last >= 0) {
                    ans = max(ans, i - last);
                }
                last = i;
            }
        }
        return ans;

=======

        int last = -1, ans = 0;
        for (int i = 0; i < 32; ++i) {
            if (n >> i & 1) {
                if (last >= 0)
                    ans = max(ans, i - last);
                last = i;
            }
        }
        return ans;

=======

        int ans = 0;
        int prev = -1;
        for (int i = 0; i < 32; ++i) {
            if (n & (1 << i)) {
                if (prev != -1) {
                    ans = max(ans, i - prev);
                }
                prev = i;
            }
        }
        return ans;

=======

        int max = 0;
        int last = -1;
        for (int i = 0; i < 32; i++) {
            if ((n & (1 << i)) != 0) {
                if (last >= 0) {
                    max = std::max(max, i - last);
                }
                last = i;
            }
        }
        return max;

=======

        int last = -1, max = 0;
        for (int i = 0; i < 32; ++i) {
            if ((n & (1 << i)) != 0) {
                if (last != -1) {
                    max = std::max(max, i - last);
                }
                last = i;
            }
        }
        return max;

=======

        int max = 0;
        int prev = -1;
        int curr = 0;
        while (n > 0) {
            if (n & 1) {
                if (prev > -1) {
                    curr = curr - prev;
                    if (curr > max) {
                        max = curr;
                    }
                }
                prev = curr;
            }
            curr++;
            n >>= 1;
        }
        return max;

=======

        int max = 0;
        int prev = -1;
        for(int i = 0; i < 32; i++){
            if(n & (1 << i)){
                if(prev != -1){
                    if(i - prev > max){
                        max = i - prev;
                    }
                }
                prev = i;
            }
        }
        return max;

=======

        int maxGap = 0;
        int currentGap = 0;
        bool foundOne = false;
        while (n != 0) {
            if (n & 1) {
                if (foundOne) {
                    if (currentGap > maxGap) {
                        maxGap = currentGap;
                    }
                } else {
                    foundOne = true;
                }
                currentGap = 1;
            } else {
                if (foundOne) {
                    currentGap++;
                }
            }
            n = n >> 1;
        }
        return maxGap;

=======

        int max = 0;
        int count = -1;
        while(n){
            if(n&1){
                if(count!=-1){
                    if(count>max){
                        max = count;
                    }
                }
                count = 1;
            }else{
                if(count!=-1){
                    count++;
                }
            }
            n = n>>1;
        }
        return max;

=======

        int ret = 0;
        int p = 0;
        int q = 0;
        bool flag = false;
        while (n > 0) {
            if (n & 1) {
                if (flag) {
                    ret = max(ret, q - p);
                } else {
                    flag = true;
                }
                p = q;
            }
            n >>= 1;
            q++;
        }
        return ret;
