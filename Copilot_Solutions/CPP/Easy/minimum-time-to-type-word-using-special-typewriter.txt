Synthesizing 10/10 solutions

=======

        int ans = 0;
        char c = 'a';
        for (char w : word) {
            ans += min(abs(w - c), 26 - abs(w - c)) + 1;
            c = w;
        }
        return ans;

=======

        int ans = 0;
        char prev = 'a';
        for (char c : word) {
            int diff = abs(c - prev);
            ans += min(diff, 26 - diff) + 1;
            prev = c;
        }
        return ans;

=======

        int ans = word.size();
        char cur = 'a';
        for (auto c : word) {
            int diff = abs(c - cur);
            ans += min(diff, 26 - diff);
            cur = c;
        }
        return ans;

=======

        int ans = 0;
        char cur = 'a';
        for (auto c : word) {
            ans += min(abs(c - cur), 26 - abs(c - cur));
            ans++;
            cur = c;
        }
        return ans;

=======

        int res = 0;
        char cur = 'a';
        for (auto c : word) {
            int d = abs(cur - c);
            res += min(d, 26 - d) + 1;
            cur = c;
        }
        return res;

=======

        int n = word.size();
        int res = n;
        char cur = 'a';
        for (int i = 0; i < n; ++i) {
            int d = abs(cur - word[i]);
            res += min(d, 26 - d);
            cur = word[i];
        }
        return res;

=======

        int n = word.size();
        int res = 0;
        char cur = 'a';
        for (int i = 0; i < n; i++) {
            int d = abs(word[i] - cur);
            res += min(d, 26 - d) + 1;
            cur = word[i];
        }
        return res;

=======

        int n = word.size();
        int res = 0;
        char cur = 'a';
        for (int i = 0; i < n; i++) {
            int diff = abs(cur - word[i]);
            res += min(diff, 26 - diff);
            cur = word[i];
            res++;
        }
        return res;

=======

        int n = word.size();
        int ans = n;
        char last = 'a';
        for (int i = 0; i < n; i++) {
            int dist = abs(word[i] - last);
            ans += min(dist, 26 - dist);
            last = word[i];
        }
        return ans;

=======

        int ans = 0;
        int pos = 0;
        for (char c : word) {
            int idx = c - 'a';
            ans += min(abs(idx - pos), 26 - abs(idx - pos)) + 1;
            pos = idx;
        }
        return ans;
