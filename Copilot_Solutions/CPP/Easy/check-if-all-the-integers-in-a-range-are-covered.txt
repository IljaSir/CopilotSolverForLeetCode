Synthesizing 10/10 solutions

=======

        vector<int> v(51, 0);
        for(int i = 0; i < ranges.size(); i++){
            for(int j = ranges[i][0]; j <= ranges[i][1]; j++){
                v[j] = 1;
            }
        }
        for(int i = left; i <= right; i++){
            if(v[i] == 0) return false;
        }
        return true;

=======

        int n = ranges.size();
        vector<int> v(52, 0);
        for (int i = 0; i < n; i++) {
            for (int j = ranges[i][0]; j <= ranges[i][1]; j++) {
                v[j]++;
            }
        }
        for (int i = left; i <= right; i++) {
            if (v[i] == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> cover(52, 0);
        for (auto& r : ranges) {
            cover[r[0]]++;
            cover[r[1] + 1]--;
        }
        for (int i = 1; i <= 50; i++) {
            cover[i] += cover[i - 1];
        }
        for (int i = left; i <= right; i++) {
            if (cover[i] == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> a(52, 0);
        for (auto r : ranges) {
            a[r[0]]++;
            a[r[1] + 1]--;
        }
        for (int i = 1; i <= 50; i++) {
            a[i] += a[i - 1];
        }
        for (int i = left; i <= right; i++) {
            if (a[i] == 0) return false;
        }
        return true;

=======

        int n = ranges.size();
        vector<bool> covered(52, false);
        for (int i = 0; i < n; i++) {
            for (int j = ranges[i][0]; j <= ranges[i][1]; j++) {
                covered[j] = true;
            }
        }
        for (int i = left; i <= right; i++) {
            if (!covered[i]) return false;
        }
        return true;

=======

        vector<int> covered(52, 0);
        for (auto v : ranges) {
            for (int i = v[0]; i <= v[1]; ++i) {
                covered[i] = 1;
            }
        }
        for (int i = left; i <= right; ++i) {
            if (covered[i] == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> v(52,0);
        for(auto r:ranges){
            v[r[0]]++;
            v[r[1]+1]--;
        }
        int sum = 0;
        for(int i = 1;i<=50;i++){
            sum += v[i];
            if(i>=left && i<=right && sum<=0) return false;
        }
        return true;

=======

        vector<int> c(52, 0);
        for (auto &r : ranges) {
            for (int i = r[0]; i <= r[1]; ++i) {
                c[i]++;
            }
        }
        for (int i = left; i <= right; ++i) {
            if (c[i] == 0) return false;
        }
        return true;

=======

        vector<int> vec(52, 0);
        for(auto &range : ranges){
            vec[range[0]]++;
            vec[range[1]+1]--;
        }
        int sum = 0;
        for(int i = 1; i < 52; i++){
            sum += vec[i];
            if(i >= left && i <= right && sum <= 0){
                return false;
            }
        }
        return true;

=======

        vector<int> v(52,0);
        for (auto &r : ranges) {
            v[r[0]]++;
            v[r[1]+1]--;
        }
        for (int i = 1; i < v.size(); i++) {
            v[i] += v[i-1];
        }
        for (int i = left; i <= right; i++) {
            if (v[i] == 0) return false;
        }
        return true;
