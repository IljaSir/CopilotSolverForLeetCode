Synthesizing 10/10 solutions

=======

        if (nums.size() == 0) return 0;
        int maxLen = 1;
        int curLen = 1;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > nums[i - 1]) {
                curLen++;
            } else {
                curLen = 1;
            }
            maxLen = max(maxLen, curLen);
        }
        return maxLen;

=======

        int n = nums.size();
        if (n == 0) {
            return 0;
        }
        int maxLen = 1;
        int curLen = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i-1]) {
                curLen++;
            } else {
                maxLen = max(maxLen, curLen);
                curLen = 1;
            }
        }
        maxLen = max(maxLen, curLen);
        return maxLen;

=======

        int n = nums.size();
        if (n <= 1) return n;
        int ans = 1;
        int cnt = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) {
                ++cnt;
            } else {
                ans = max(ans, cnt);
                cnt = 1;
            }
        }
        ans = max(ans, cnt);
        return ans;

=======

        int n = nums.size();
        if (n == 0) return 0;
        int res = 1;
        int cur = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) {
                ++cur;
            } else {
                res = max(res, cur);
                cur = 1;
            }
        }
        res = max(res, cur);
        return res;

=======

        if (nums.size() == 0) return 0;
        int maxLen = 1;
        int curLen = 1;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] < nums[i + 1]) {
                curLen++;
            } else {
                maxLen = max(maxLen, curLen);
                curLen = 1;
            }
        }
        return max(maxLen, curLen);

=======

        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; ) {
            int j = i + 1;
            while (j < n && nums[j] > nums[j - 1]) ++j;
            ans = max(ans, j - i);
            i = j;
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0) return 0;
        int ans = 1;
        int start = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] <= nums[i - 1]) {
                ans = max(ans, i - start);
                start = i;
            }
        }
        ans = max(ans, n - start);
        return ans;

=======

        int n = nums.size();
        if (n <= 1) return n;
        int res = 1;
        int curr = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                curr++;
            } else {
                res = max(res, curr);
                curr = 1;
            }
        }
        res = max(res, curr);
        return res;

=======

        int n = nums.size();
        if (n <= 1) return n;
        
        int maxLen = 1;
        int curLen = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i-1] < nums[i]) {
                curLen++;
            } else {
                curLen = 1;
            }
            maxLen = max(maxLen, curLen);
        }
        return maxLen;

=======

        int len = nums.size();
        int maxLen = 0;
        int count = 0;
        for (int i=0; i<len; i++) {
            if (i == 0) {
                maxLen = 1;
                count = 1;
            } else {
                if (nums[i] > nums[i-1]) {
                    count++;
                    maxLen = max(maxLen, count);
                } else {
                    count = 1;
                }
            }
        }
        return maxLen;
