Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                j++;
            }
        }
        for (int i = j; i < n; i++) {
            nums[i] = 0;
        }

=======

        int n = nums.size();
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
        }
        for (; j < n; j++) {
            nums[j] = 0;
        }

=======

        int n = nums.size();
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
        }
        while (j < n) {
            nums[j++] = 0;
        }

=======

        int n = nums.size();
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
        }
        for (int i = j; i < n; i++) {
            nums[i] = 0;
        }

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                nums[i - count] = nums[i];
            }
        }
        for (int i = nums.size() - count; i < nums.size(); i++) {
            nums[i] = 0;
        }

=======

        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            if (nums[j] != 0) {
                swap(nums[i++], nums[j]);
            }
        }

=======

        int i = 0, j = 0;
        while (i < nums.size()) {
            if (nums[i] != 0) {
                nums[j++] = nums[i];
            }
            i++;
        }
        while (j < nums.size()) {
            nums[j++] = 0;
        }

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        while (i < n) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                j++;
            }
            i++;
        }
        while (j < n) {
            nums[j] = 0;
            j++;
        }

=======

        int n = nums.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && nums[i] != 0) {
                i++;
            }
            j = max(i, j);
            while (j < n && nums[j] == 0) {
                j++;
            }
            if (i < n && j < n) {
                swap(nums[i], nums[j]);
            }
        }

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        while(i < n && j < n) {
            if (nums[i] == 0) {
                if (nums[j] != 0) {
                    swap(nums[i], nums[j]);
                    i++;
                }
                j++;
            } else {
                i++;
                j++;
            }
        }
