Synthesizing 10/10 solutions

=======

        int res = 0;
        vector<int> charCount(26, 0);
        for (auto c : chars) {
            charCount[c - 'a']++;
        }
        for (auto word : words) {
            vector<int> wordCount(26, 0);
            for (auto c : word) {
                wordCount[c - 'a']++;
            }
            bool isGood = true;
            for (int i = 0; i < 26; i++) {
                if (wordCount[i] > charCount[i]) {
                    isGood = false;
                    break;
                }
            }
            if (isGood) {
                res += word.size();
            }
        }
        return res;

=======

        int res = 0;
        vector<int> charCount(26, 0);
        for (char c : chars) {
            charCount[c - 'a']++;
        }
        for (string& word : words) {
            vector<int> wordCount(26, 0);
            bool canForm = true;
            for (char c : word) {
                wordCount[c - 'a']++;
                if (wordCount[c - 'a'] > charCount[c - 'a']) {
                    canForm = false;
                    break;
                }
            }
            if (canForm) {
                res += word.size();
            }
        }
        return res;

=======

        int n = words.size();
        int m = chars.size();
        vector<int> cnt(26, 0);
        for (int i = 0; i < m; ++i) {
            ++cnt[chars[i] - 'a'];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            vector<int> tmp = cnt;
            int j = 0;
            for (; j < words[i].size(); ++j) {
                if (tmp[words[i][j] - 'a'] == 0) {
                    break;
                }
                --tmp[words[i][j] - 'a'];
            }
            if (j == words[i].size()) {
                res += j;
            }
        }
        return res;

=======

        int a[26] = {0};
        for (auto c : chars) {
            a[c - 'a']++;
        }
        int ans = 0;
        for (auto word : words) {
            int b[26] = {0};
            bool ok = true;
            for (auto c : word) {
                b[c - 'a']++;
                if (b[c - 'a'] > a[c - 'a']) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                ans += word.length();
            }
        }
        return ans;

=======

        int cnt[26] = {0};
        for (char c : chars) {
            cnt[c - 'a']++;
        }
        int ans = 0;
        for (string& w : words) {
            int c[26] = {0};
            bool ok = true;
            for (char c : w) {
                if (++c[c - 'a'] > cnt[c - 'a']) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                ans += w.size();
            }
        }
        return ans;

=======

        int res = 0;
        int c[26] = {0};
        for (char ch : chars) {
            c[ch - 'a']++;
        }
        for (string word : words) {
            int d[26] = {0};
            bool flag = true;
            for (char ch : word) {
                d[ch - 'a']++;
                if (d[ch - 'a'] > c[ch - 'a']) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                res += word.length();
            }
        }
        return res;

=======

        int res = 0;
        int n = words.size();
        int m = chars.size();
        vector<int> cnt(26, 0);
        for (int i = 0; i < m; i++) {
            cnt[chars[i] - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            vector<int> cnt2(26, 0);
            for (int j = 0; j < words[i].size(); j++) {
                cnt2[words[i][j] - 'a']++;
            }
            bool ok = true;
            for (int j = 0; j < 26; j++) {
                if (cnt2[j] > cnt[j]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res += words[i].size();
            }
        }
        return res;

=======

        int result = 0;
        int map[26] = {0};
        for (char c : chars) {
            map[c - 'a']++;
        }
        for (string word : words) {
            int wordMap[26] = {0};
            bool valid = true;
            for (char c : word) {
                wordMap[c - 'a']++;
                if (wordMap[c - 'a'] > map[c - 'a']) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                result += word.length();
            }
        }
        return result;

=======

        int counter = 0;
        for (int i = 0; i < words.size(); i++) {
            string word = words[i];
            string charCopy = chars;
            bool isGood = true;
            for (int j = 0; j < word.size(); j++) {
                int index = charCopy.find(word[j]);
                if (index == string::npos) {
                    isGood = false;
                    break;
                }
                charCopy.erase(index, 1);
            }
            if (isGood) {
                counter += word.size();
            }
        }
        return counter;

=======

        int count = 0;
        for (auto word: words) {
            string tmp = chars;
            bool isGood = true;
            for (auto w: word) {
                auto pos = tmp.find(w);
                if (pos != string::npos) {
                    tmp.erase(pos, 1);
                } else {
                    isGood = false;
                    break;
                }
            }
            if (isGood) {
                count += word.length();
            }
        }
        return count;
