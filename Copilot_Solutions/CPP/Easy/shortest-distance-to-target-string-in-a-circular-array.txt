Synthesizing 10/10 solutions

=======

        int n = words.size();
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (words[i] == target) {
                ans = min(ans, abs(i - startIndex));
                int j = (i + 1) % n;
                int k = (i - 1 + n) % n;
                while (j != i) {
                    if (words[j] == target) {
                        ans = min(ans, abs(j - startIndex));
                        break;
                    }
                    j = (j + 1) % n;
                }
                while (k != i) {
                    if (words[k] == target) {
                        ans = min(ans, abs(k - startIndex));
                        break;
                    }
                    k = (k - 1 + n) % n;
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = words.size();
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (words[i] == target) {
                res = min(res, abs(i - startIndex));
                int j = i + 1;
                while (j != i) {
                    if (j == n) {
                        j = 0;
                    }
                    if (words[j] == target) {
                        break;
                    }
                    j++;
                }
                if (j != i) {
                    res = min(res, abs(j - i) + abs(j - startIndex));
                }
                j = i - 1;
                while (j != i) {
                    if (j == -1) {
                        j = n - 1;
                    }
                    if (words[j] == target) {
                        break;
                    }
                    j--;
                }
                if (j != i) {
                    res = min(res, abs(j - i) + abs(j - startIndex));
                }
            }
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = words.size();
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (words[i] == target) {
                ans = min(ans, abs(startIndex - i));
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = words.size();
        int minDist = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (words[i] == target) {
                int dist = abs(i - startIndex);
                minDist = min(minDist, min(dist, n - dist));
            }
        }
        return (minDist == INT_MAX) ? -1 : minDist;

=======

        int n = words.size();
        int i = startIndex, j = startIndex;
        int ans = INT_MAX;
        while (i >= 0 || j < n) {
            if (i >= 0 && words[i] == target) {
                ans = min(ans, abs(i - startIndex));
            }
            if (j < n && words[j] == target) {
                ans = min(ans, abs(j - startIndex));
            }
            if (i >= 0) {
                i--;
            }
            if (j < n) {
                j++;
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = words.size();
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (words[i] == target) {
                int left = startIndex, right = startIndex;
                int leftDist = 0, rightDist = 0;
                while (left != i) {
                    left = (left + n - 1) % n;
                    leftDist++;
                }
                while (right != i) {
                    right = (right + 1) % n;
                    rightDist++;
                }
                res = min(res, min(leftDist, rightDist));
            }
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = words.size();
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (words[i] == target) {
                int j = (startIndex + n - i) % n;
                int k = (startIndex + i) % n;
                res = min(res, min(j, k));
            }
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = words.size();
        int m = target.size();
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < m; ++j) {
                if (words[(startIndex + i) % n][j] != target[j]) {
                    break;
                }
            }
            if (j == m) {
                ans = min(ans, i);
            }
        }
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < m; ++j) {
                if (words[(startIndex - i + n) % n][j] != target[j]) {
                    break;
                }
            }
            if (j == m) {
                ans = min(ans, i);
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int len = words.size();
        int i = startIndex;
        int j = startIndex;
        int ans = INT_MAX;
        while(i >= 0 || j < len) {
            if(i >= 0 && words[i] == target) {
                ans = min(ans, abs(i - startIndex));
            }
            if(j < len && words[j] == target) {
                ans = min(ans, abs(j - startIndex));
            }
            i--;
            j++;
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = words.size();
        int minDist = 100000;
        for(int i = 0; i < n; i++) {
            if(words[i] == target) {
                int dist = abs(i - startIndex);
                minDist = min(minDist, min(dist, n - dist));
            }
        }
        return minDist == 100000 ? -1 : minDist;
