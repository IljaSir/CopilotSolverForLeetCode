Synthesizing 10/10 solutions

=======

        int maxTime = releaseTimes[0];
        char maxKey = keysPressed[0];
        for (int i = 1; i < releaseTimes.size(); i++) {
            int time = releaseTimes[i] - releaseTimes[i-1];
            if (time > maxTime) {
                maxTime = time;
                maxKey = keysPressed[i];
            } else if (time == maxTime && keysPressed[i] > maxKey) {
                maxKey = keysPressed[i];
            }
        }
        return maxKey;

=======

        int max_time = releaseTimes[0];
        char max_key = keysPressed[0];
        for (int i = 1; i < releaseTimes.size(); i++) {
            int time = releaseTimes[i] - releaseTimes[i - 1];
            if (time > max_time) {
                max_time = time;
                max_key = keysPressed[i];
            } else if (time == max_time && max_key < keysPressed[i]) {
                max_key = keysPressed[i];
            }
        }
        return max_key;

=======

        int max = releaseTimes[0];
        char result = keysPressed[0];
        for (int i = 1; i < releaseTimes.size(); i++) {
            int duration = releaseTimes[i] - releaseTimes[i - 1];
            if (duration > max) {
                max = duration;
                result = keysPressed[i];
            } else if (duration == max) {
                if (keysPressed[i] > result) {
                    result = keysPressed[i];
                }
            }
        }
        return result;

=======

        int max = releaseTimes[0];
        char res = keysPressed[0];
        for (int i = 1; i < releaseTimes.size(); i++) {
            int dur = releaseTimes[i] - releaseTimes[i - 1];
            if (dur > max) {
                max = dur;
                res = keysPressed[i];
            } else if (dur == max) {
                if (keysPressed[i] > res) {
                    res = keysPressed[i];
                }
            }
        }
        return res;

=======

        char c = keysPressed[0];
        int max = releaseTimes[0];
        for (int i = 1; i < releaseTimes.size(); i++) {
            int dur = releaseTimes[i] - releaseTimes[i - 1];
            if (dur > max || (dur == max && keysPressed[i] > c)) {
                c = keysPressed[i];
                max = dur;
            }
        }
        return c;

=======

        int n = releaseTimes.size();
        int mx = releaseTimes[0];
        char ch = keysPressed[0];
        for (int i = 1; i < n; ++i) {
            int dur = releaseTimes[i] - releaseTimes[i - 1];
            if (dur > mx) {
                mx = dur;
                ch = keysPressed[i];
            } else if (dur == mx) {
                ch = max(ch, keysPressed[i]);
            }
        }
        return ch;

=======

        int max = releaseTimes[0];
        int idx = 0;
        for (int i = 1; i < releaseTimes.size(); i++) {
            int t = releaseTimes[i] - releaseTimes[i-1];
            if (t > max) {
                max = t;
                idx = i;
            } else if (t == max) {
                if (keysPressed[i] > keysPressed[idx]) {
                    idx = i;
                }
            }
        }
        return keysPressed[idx];

=======

        int n = releaseTimes.size();
        int max_dur = releaseTimes[0];
        int max_idx = 0;
        for (int i = 1; i < n; ++i) {
            if (releaseTimes[i] - releaseTimes[i-1] > max_dur) {
                max_dur = releaseTimes[i] - releaseTimes[i-1];
                max_idx = i;
            } else if (releaseTimes[i] - releaseTimes[i-1] == max_dur) {
                max_idx = keysPressed[i] > keysPressed[max_idx] ? i : max_idx;
            }
        }
        return keysPressed[max_idx];

=======

        int max = releaseTimes[0];
        int len = releaseTimes.size();
        char res = keysPressed[0];
        for (int i = 1; i < len; i++) {
            int time = releaseTimes[i] - releaseTimes[i-1];
            if (time > max) {
                max = time;
                res = keysPressed[i];
            } else if (time == max) {
                if (keysPressed[i] > res) {
                    res = keysPressed[i];
                }
            }
        }
        return res;

=======

        int max = 0;
        char maxChar;
        for (int i = 0; i < releaseTimes.size(); i++) {
            int duration;
            if (i == 0) {
                duration = releaseTimes[i];
            } else {
                duration = releaseTimes[i] - releaseTimes[i - 1];
            }
            if (duration > max) {
                max = duration;
                maxChar = keysPressed[i];
            } else if (duration == max) {
                maxChar = maxChar > keysPressed[i] ? maxChar : keysPressed[i];
            }
        }
        return maxChar;
