Synthesizing 10/10 solutions

=======

        int count[10] = {0};
        for (auto c : num) count[c - '0']++;
        for (int i = 9; i > 0; i--) {
            if (count[i] >= 3) {
                string res;
                while (count[i]--) res += to_string(i);
                return res;
            }
        }
        return "";

=======

        int cnt[10] = {0};
        for (auto c : num) {
            cnt[c - '0']++;
        }
        string ans = "";
        for (int i = 9; i >= 0; i--) {
            int n = cnt[i];
            if (n >= 3) {
                for (int j = 0; j < n / 3; j++) {
                    ans += to_string(i);
                }
            }
        }
        return ans;

=======

        int n = num.size();
        int cnt[10] = {0};
        for (int i = 0; i < n; i++) {
            cnt[num[i] - '0']++;
        }
        string ans = "";
        for (int i = 9; i >= 0; i--) {
            if (cnt[i] >= 3) {
                ans += string(3, i + '0');
                cnt[i] -= 3;
            }
        }
        for (int i = 9; i >= 0; i--) {
            if (cnt[i] > 0) {
                ans += string(cnt[i], i + '0');
                break;
            }
        }
        return ans;

=======

        int i = 0;
        while (i < num.size() - 2) {
            if (num[i] == num[i + 1] && num[i + 1] == num[i + 2]) {
                int j = i + 3;
                while (j < num.size() && num[j] == num[i]) ++j;
                for (int k = i; k < j; ++k) num[k] = '9';
                i = j;
            } else {
                ++i;
            }
        }
        return num;

=======

        int count[10] = {0};
        for (char c : num) {
            count[c - '0']++;
        }
        int max = 0;
        for (int i = 1; i < 10; i++) {
            if (count[i] >= 3 && max < i) {
                max = i;
            }
        }
        if (max == 0) return "";
        string res = "";
        for (int i = 0; i < count[max]; i++) {
            res += to_string(max);
        }
        return res;

=======

        int n = num.size();
        int count[10] = {0};
        for (int i = 0; i < n; i++) {
            count[num[i] - '0']++;
        }
        string res;
        for (int i = 9; i >= 0; i--) {
            if (count[i] >= 3) {
                res += string(count[i] / 3, '0' + i);
            }
        }
        return res;

=======

        int freq[10] = {0};
        for (int i = 0; i < num.size(); i++) {
            freq[num[i] - '0']++;
        }
        int digit = -1;
        for (int i = 9; i >= 0; i--) {
            if (freq[i] >= 3) {
                digit = i;
                break;
            }
        }
        if (digit == -1) {
            return "";
        }
        string ans = "";
        for (int i = 0; i < 3; i++) {
            ans += (char)(digit + '0');
        }
        return ans;

=======

        int n = num.size();
        int a[10] = {0};
        for (int i = 0; i < n; ++i) {
            a[num[i] - '0']++;
        }
        int max = 0;
        for (int i = 1; i <= 9; ++i) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        if (max < 3) {
            return "";
        }
        string ret;
        for (int i = 9; i >= 0; --i) {
            if (a[i] == max) {
                for (int j = 0; j < max; ++j) {
                    ret.push_back('0' + i);
                }
                break;
            }
        }
        return ret;

=======

        int n = num.size();
        int cnt[10] = {0};
        for (int i = 0; i < n; ++i) {
            cnt[num[i] - '0']++;
        }
        int largest = -1;
        for (int i = 0; i < 10; ++i) {
            if (cnt[i] >= 3) {
                largest = i;
            }
        }
        if (largest == -1) {
            return "";
        }
        string ans = "";
        for (int i = 0; i < n; ++i) {
            if (num[i] - '0' == largest) {
                ans += num[i];
            }
        }
        return ans;

=======

        int n = num.size();
        for(int i = 0; i < n; i++) {
            if(num[i] == '9') {
                return "9";
            }
        }
        int cnt = 0;
        int max_cnt = 0;
        char max_ch = '0';
        for(int i = 0; i < n; i++) {
            if(num[i] == max_ch) {
                cnt++;
            } else {
                if(cnt > max_cnt) {
                    max_cnt = cnt;
                    max_ch = num[i];
                }
                cnt = 1;
            }
        }
        if(cnt > max_cnt) {
            max_cnt = cnt;
            max_ch = num[n-1];
        }
        string ans = "";
        for(int i = 0; i < max_cnt; i++) {
            ans += max_ch;
        }
        return ans;
