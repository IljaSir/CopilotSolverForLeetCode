Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < text.size(); i++) {
            bool flag = true;
            while (i < text.size() && text[i] != ' ') {
                if (brokenLetters.find(text[i]) != string::npos) {
                    flag = false;
                    break;
                }
                i++;
            }
            if (flag) count++;
        }
        return count;

=======

        unordered_set<char> broken(brokenLetters.begin(), brokenLetters.end());
        istringstream iss(text);
        string word;
        int count = 0;
        while (iss >> word) {
            bool good = true;
            for (char c: word) {
                if (broken.count(c)) {
                    good = false;
                    break;
                }
            }
            if (good) count++;
        }
        return count;

=======

        int count = 0;
        bool flag = true;
        for (int i = 0; i < text.length(); i++) {
            if (text[i] == ' ') {
                if (flag) {
                    count++;
                }
                flag = true;
            } else {
                if (brokenLetters.find(text[i]) != string::npos) {
                    flag = false;
                }
            }
        }
        if (flag) {
            count++;
        }
        return count;

=======

        vector<int> broken(26, 0);
        for (auto c : brokenLetters) {
            broken[c - 'a'] = 1;
        }
        int res = 0;
        int i = 0;
        while (i < text.size()) {
            int j = i;
            while (j < text.size() && text[j] != ' ') {
                if (broken[text[j] - 'a']) {
                    break;
                }
                j++;
            }
            if (j == i) {
                res--;
            }
            if (j == text.size()) {
                break;
            }
            i = j + 1;
            res++;
        }
        return res;

=======

        int ans = 0;
        for (int i = 0, j = 0; i < text.size(); i = j) {
            while (j < text.size() && text[j] != ' ') j++;
            bool ok = true;
            for (int k = i; k < j; k++) {
                if (brokenLetters.find(text[k]) != string::npos) {
                    ok = false;
                    break;
                }
            }
            ans += ok;
            j++;
        }
        return ans;

=======

        int ans = 0;
        vector<bool> broken(26, false);
        for (auto c : brokenLetters) broken[c - 'a'] = true;
        for (int i = 0; i < text.size();) {
            int j = i;
            while (j < text.size() && text[j] != ' ') {
                if (broken[text[j] - 'a']) {
                    ans--;
                    break;
                }
                j++;
            }
            ans++;
            i = j + 1;
        }
        return ans;

=======

        int ans = 0;
        set<char> broken(brokenLetters.begin(), brokenLetters.end());
        bool isBroken = false;
        for (auto c : text) {
            if (c == ' ') {
                if (!isBroken) {
                    ans++;
                }
                isBroken = false;
                continue;
            }
            if (broken.find(c) != broken.end()) {
                isBroken = true;
            }
        }
        if (!isBroken) {
            ans++;
        }
        return ans;

=======

        int ans = 0, n = text.size();
        vector<int> broken(26, 0);
        for (char c : brokenLetters) {
            broken[c - 'a'] = 1;
        }
        for (int i = 0; i < n; ++i) {
            if (broken[text[i] - 'a'] == 0) {
                ++ans;
            }
            while (i < n && text[i] != ' ') {
                if (broken[text[i] - 'a'] == 1) {
                    --ans;
                    break;
                }
                ++i;
            }
        }
        return ans;

=======

        int res = 0;
        unordered_set<char> broken;
        for (auto c : brokenLetters) broken.insert(c);
        for (int i = 0; i < text.size(); i++) {
            bool flag = true;
            while (i < text.size() && text[i] != ' ') {
                if (broken.find(text[i]) != broken.end()) {
                    flag = false;
                    break;
                }
                i++;
            }
            if (flag) res++;
        }
        return res;

=======

        int res=0;
        int flag=0;
        for(int i=0;i<text.length();i++){
            if(text[i]==' '){
                if(flag==0) res++;
                flag=0;
            }else{
                if(brokenLetters.find(text[i])!=string::npos){
                    flag=1;
                }
            }
        }
        if(flag==0) res++;
        return res;
