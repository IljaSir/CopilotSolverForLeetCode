Synthesizing 10/10 solutions

=======

        map<char, int> m;
        for (char c: word) {
            m[c]++;
        }
        if (m.size() == 1) {
            return true;
        }
        if (m.size() == 2) {
            auto it = m.begin();
            int v1 = it->second;
            it++;
            int v2 = it->second;
            if (v1 == 1 || v2 == 1) {
                return true;
            }
        }
        if (m.size() == word.size()) {
            return false;
        }
        map<int, int> freq;
        for (auto it: m) {
            freq[it.second]++;
        }
        if (freq.size() == 1) {
            return true;
        }
        if (freq.size() == 2) {
            auto it = freq.begin();
            int v1 = it->second;
            it++;
            int v2 = it->second;
            if (v1 == 1 || v2 == 1) {
                return true;
            }
        }
        return false;

=======

        unordered_map<char, int> m;
        for (char c : word) {
            m[c]++;
        }
        unordered_map<int, int> m2;
        for (auto& [k, v] : m) {
            m2[v]++;
        }
        if (m2.size() == 1) {
            return true;
        }
        if (m2.size() == 2) {
            auto it = m2.begin();
            if (it->second == 1 && it->first == 1) {
                return true;
            }
            if (it->second == 1 && it->first - (++it)->first == 1) {
                return true;
            }
            if (it->second == 1 && (++it)->first == 1) {
                return true;
            }
        }
        return false;

=======

        int count[26] = {0};
        for (auto c : word) {
            count[c - 'a']++;
        }
        int min = INT_MAX, max = INT_MIN;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                if (count[i] < min) {
                    min = count[i];
                }
                if (count[i] > max) {
                    max = count[i];
                }
            }
        }
        if (max == min) {
            return true;
        }
        if (max - min == 1) {
            int maxCount = 0;
            for (int i = 0; i < 26; i++) {
                if (count[i] == max) {
                    maxCount++;
                }
            }
            if (maxCount == 1) {
                return true;
            }
        }
        return false;

=======

        int freq[26] = {0};
        for (char ch : word) {
            freq[ch - 'a']++;
        }
        int count[100001] = {0};
        for (int i = 0; i < 26; i++) {
            if (freq[i] != 0) {
                count[freq[i]]++;
            }
        }
        int odd = 0;
        for (int i = 0; i < 100001; i++) {
            if (count[i] != 0) {
                if (count[i] % 2 == 1) {
                    odd++;
                }
            }
        }
        if (odd == 1) {
            return true;
        }
        if (odd > 1) {
            return false;
        }
        for (int i = 0; i < 26; i++) {
            if (freq[i] == 1) {
                return true;
            }
        }
        return false;

=======

        map<char, int> m;
        for (auto c: word) {
            m[c]++;
        }
        map<int, int> f;
        for (auto& p: m) {
            f[p.second]++;
        }
        if (f.size() == 1) {
            return true;
        }
        if (f.size() == 2) {
            auto it = f.begin();
            if (it->first == 1 && it->second == 1) {
                return true;
            }
            auto it2 = it;
            it2++;
            if (it2->first - it->first == 1 && it2->second == 1) {
                return true;
            }
        }
        return false;

=======

        int n = word.size();
        vector<int> cnt(26, 0);
        for (auto c : word) {
            cnt[c - 'a']++;
        }
        int mx = *max_element(cnt.begin(), cnt.end());
        int mn = *min_element(cnt.begin(), cnt.end());
        if (mx == mn) return true;
        if (mn == 1) {
            int cnt1 = count(cnt.begin(), cnt.end(), 1);
            if (cnt1 == 1) return true;
            if (cnt1 > 1) return false;
        }
        if (mx - mn == 1) {
            int cnt1 = count(cnt.begin(), cnt.end(), 1);
            if (cnt1 == 1) return true;
            if (cnt1 > 1) return false;
        }
        return false;

=======

        int n = word.size();
        vector<int> cnt(26, 0);
        for (auto c : word) {
            cnt[c - 'a']++;
        }
        if (n == 2) {
            return true;
        }
        if (n == 3) {
            if (cnt[word[0] - 'a'] == 2) {
                return true;
            }
            if (cnt[word[1] - 'a'] == 2) {
                return true;
            }
            if (cnt[word[2] - 'a'] == 2) {
                return true;
            }
            return false;
        }
        int maxCnt = 0;
        int minCnt = n;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > maxCnt) {
                maxCnt = cnt[i];
            }
            if (cnt[i] > 0 && cnt[i] < minCnt) {
                minCnt = cnt[i];
            }
        }
        if (maxCnt == minCnt) {
            return true;
        }
        if (maxCnt - minCnt == 1) {
            int cnt1 = 0;
            int cnt2 = 0;
            for (int i = 0; i < 26; i++) {
                if (cnt[i] == maxCnt) {
                    cnt1++;
                }
                if (cnt[i] == minCnt) {
                    cnt2++;
                }
            }
            if (cnt1 == 1) {
                return true;
            }
            if (cnt2 == 1) {
                return true;
            }
            return false;
        }
        return false;

=======

        int count[26] = {0};
        for (char c : word) {
            count[c - 'a']++;
        }
        int maxCount = 0;
        int minCount = 0x7fffffff;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                maxCount = max(maxCount, count[i]);
                minCount = min(minCount, count[i]);
            }
        }
        if (maxCount == minCount) {
            return true;
        }
        if (maxCount - minCount == 1) {
            int maxCountCount = 0;
            int minCountCount = 0;
            for (int i = 0; i < 26; i++) {
                if (count[i] == maxCount) {
                    maxCountCount++;
                }
                if (count[i] == minCount) {
                    minCountCount++;
                }
            }
            if (maxCountCount == 1) {
                return true;
            }
            if (minCountCount == 1) {
                return true;
            }
        }
        return false;

=======

        int freq[26] = {0};
        for (auto c : word) {
            freq[c - 'a']++;
        }
        int min = INT_MAX;
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0 && freq[i] < min) {
                min = freq[i];
            }
        }
        int max = INT_MIN;
        for (int i = 0; i < 26; i++) {
            if (freq[i] > max) {
                max = freq[i];
            }
        }
        if (max == min) {
            return true;
        }
        if (max == min + 1) {
            for (int i = 0; i < 26; i++) {
                if (freq[i] == max) {
                    freq[i]--;
                    break;
                }
            }
            min = INT_MAX;
            for (int i = 0; i < 26; i++) {
                if (freq[i] > 0 && freq[i] < min) {
                    min = freq[i];
                }
            }
            if (max == min) {
                return true;
            }
        }
        return false;

=======

        int n = word.length();
        if(n==2) return true;
        vector<int> cnt(26,0);
        for(int i=0; i<n; i++) cnt[word[i]-'a']++;
        int k = 0;
        for(int i=0; i<26; i++) if(cnt[i]) k++;
        if(k==1) return true;
        for(int i=0; i<26; i++) {
            if(cnt[i]) {
                cnt[i]--;
                int kk = 0;
                for(int j=0; j<26; j++) if(cnt[j]) kk++;
                if(kk==1) return true;
                for(int j=0; j<26; j++) {
                    if(cnt[j]) {
                        cnt[j]--;
                        kk = 0;
                        for(int l=0; l<26; l++) if(cnt[l]) kk++;
                        if(kk==1) return true;
                        cnt[j]++;
                    }
                }
                cnt[i]++;
            }
        }
        return false;
