Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = mat.size(), n = mat[0].size();
        if (m * n != r * c) return mat;
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < m * n; ++i)
            res[i / c][i % c] = mat[i / n][i % n];
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m * n != r * c) {
            return mat;
        }
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int num = i * n + j;
                res[num / c][num % c] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m * n != r * c) {
            return mat;
        }
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int idx = i * n + j;
                res[idx / c][idx % c] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m * n != r * c) {
            return mat;
        }
        vector<vector<int>> result(r, vector<int>(c));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int index = i * n + j;
                result[index / c][index % c] = mat[i][j];
            }
        }
        return result;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m * n != r * c) {
            return mat;
        }
        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < r; ++i) {
            for (int j = 0; j < c; ++j) {
                int index = i * c + j;
                res[i][j] = mat[index / n][index % n];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m * n != r * c) return mat;
        vector<vector<int>> res(r, vector<int>(c, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int pos = i * n + j;
                res[pos / c][pos % c] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m*n != r*c) return mat;
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                int index = i*c + j;
                res[i][j] = mat[index/n][index%n];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (m*n != r*c) {
            return mat;
        }
        vector<vector<int>> res(r, vector<int>(c));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int index = i*n + j;
                res[index/c][index%c] = mat[i][j];
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        if (r * c != m * n) {
            return mat;
        }
        vector<vector<int>> ans(r, vector<int>(c));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int k = i * n + j;
                ans[k / c][k % c] = mat[i][j];
            }
        }
        return ans;
