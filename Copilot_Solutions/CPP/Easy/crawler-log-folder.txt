Synthesizing 10/10 solutions

=======

        int depth = 0;
        for (int i = 0; i < logs.size(); i++) {
            if (logs[i] == "../") {
                if (depth > 0) {
                    depth--;
                }
            } else if (logs[i] != "./") {
                depth++;
            }
        }
        return depth;

=======

        int count = 0;
        for (int i = 0; i < logs.size(); i++) {
            if (logs[i] == "../") {
                if (count > 0) {
                    count--;
                }
            } else if (logs[i] != "./") {
                count++;
            }
        }
        return count;

=======

        int depth = 0;
        for (auto log : logs) {
            if (log == "../") {
                depth = max(depth - 1, 0);
            } else if (log != "./") {
                depth++;
            }
        }
        return depth;

=======

        int depth = 0;
        for (auto& log: logs) {
            if (log == "../") {
                if (depth > 0) depth--;
            } else if (log != "./") {
                depth++;
            }
        }
        return depth;

=======

        int result = 0;
        for (int i = 0; i < logs.size(); i++) {
            if (logs[i] == "../") {
                result--;
                if (result < 0) {
                    result = 0;
                }
            } else if (logs[i] == "./") {
                continue;
            } else {
                result++;
            }
        }
        return result;

=======

        int ans = 0;
        for (auto log : logs) {
            if (log == "../") {
                ans = max(0, ans - 1);
            } else if (log != "./") {
                ans++;
            }
        }
        return ans;

=======

        int n = logs.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (logs[i] == "../") {
                ans = max(ans - 1, 0);
            } else if (logs[i] == "./") {
                continue;
            } else {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        for (const auto& log : logs) {
            if (log == "../") {
                count = max(count - 1, 0);
            } else if (log != "./") {
                ++count;
            }
        }
        return count;

=======

        int res = 0;
        for (auto &s : logs) {
            if (s == "../") {
                if (res > 0) res--;
            } else if (s == "./") {
                continue;
            } else {
                res++;
            }
        }
        return res;

=======

        int count = 0;
        for (auto &log : logs) {
            if (log == "../") {
                if (count > 0) count--;
            } else if (log == "./") {
                continue;
            } else {
                count++;
            }
        }
        return count;
