Synthesizing 10/10 solutions

=======

        string result;
        for (int i = 0; i < s.size(); i++) {
            if (result.size() < 2 || result[result.size() - 1] != s[i] || result[result.size() - 2] != s[i]) {
                result += s[i];
            }
        }
        return result;

=======

        string result;
        int count = 1;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] == s[i-1]) {
                ++count;
            } else {
                count = 1;
            }
            if (count < 3) {
                result += s[i];
            }
        }
        if (s.size() > 0) {
            result = s[0] + result;
        }
        return result;

=======

        string ans = "";
        int n = s.length();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] == s[i]) j++;
            int count = j - i;
            if (count >= 3) {
                ans += s[i];
                ans += s[i];
            } else {
                while (i < j) {
                    ans += s[i];
                    i++;
                }
            }
            i = j;
        }
        return ans;

=======

        int n = s.size();
        string ret;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] == s[i]) ++j;
            int cnt = j - i;
            if (cnt < 3) {
                ret += s.substr(i, cnt);
            } else {
                ret += s.substr(i, 2);
            }
            i = j;
        }
        return ret;

=======

        int n = s.size();
        string ans = "";
        int i = 0;
        while(i < n) {
            int j = i;
            while(j < n && s[i] == s[j]) {
                j++;
            }
            int count = j - i;
            int len = min(count, 2);
            for(int k = 0; k < len; k++) {
                ans += s[i];
            }
            i = j;
        }
        return ans;

=======

        string res;
        int count = 1;
        char cur = s[0];
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == cur) {
                if (count < 2) {
                    res.push_back(s[i]);
                    count++;
                }
            } else {
                cur = s[i];
                res.push_back(s[i]);
                count = 1;
            }
        }
        return res;

=======

        string ans;
        for(int i = 0; i < s.size(); i++){
            int count = 1;
            while(i < s.size() - 1 && s[i] == s[i+1]){
                i++;
                count++;
            }
            if(count > 2){
                ans.push_back(s[i]);
                ans.push_back(s[i]);
            }else if(count == 2){
                ans.push_back(s[i]);
                ans.push_back(s[i]);
            }else{
                ans.push_back(s[i]);
            }
        }
        return ans;

=======

        string res;
        int cnt = 0;
        char cur = 0;
        for (auto c : s) {
            if (c == cur) {
                cnt++;
            } else {
                cnt = 1;
                cur = c;
            }
            if (cnt < 3) {
                res += c;
            }
        }
        return res;

=======

        string str;
        int count = 1;
        for(int i = 0; i < s.length(); i++) {
            if(i == s.length() - 1) {
                if(count < 3) {
                    for(int j = 0; j < count; j++) {
                        str += s[i];
                    }
                } else {
                    str += s[i];
                }
            } else {
                if(s[i] == s[i + 1]) {
                    count++;
                } else {
                    if(count < 3) {
                        for(int j = 0; j < count; j++) {
                            str += s[i];
                        }
                    } else {
                        str += s[i];
                    }
                    count = 1;
                }
            }
        }
        return str;

=======

        int n = s.size();
        if(n <= 2) return s;
        int i = 0;
        int j = 0;
        int k = 0;
        while(i < n){
            j = i;
            while(j < n && s[j] == s[i]) j++;
            k = min(2, j-i);
            while(k--) s[i++] = s[j-1];
        }
        return s.substr(0, i);
