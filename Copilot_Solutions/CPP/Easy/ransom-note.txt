Synthesizing 10/10 solutions

=======

        int count[26] = {0};
        for (char c : magazine) {
            count[c - 'a']++;
        }
        for (char c : ransomNote) {
            if (--count[c - 'a'] < 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> v(26, 0);
        for (int i = 0; i < magazine.size(); i++) {
            v[magazine[i] - 'a']++;
        }
        for (int i = 0; i < ransomNote.size(); i++) {
            if (v[ransomNote[i] - 'a'] > 0) {
                v[ransomNote[i] - 'a']--;
            } else {
                return false;
            }
        }
        return true;

=======

        int n = ransomNote.size();
        int m = magazine.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (ransomNote[i] == magazine[j]) {
                i++;
            }
            j++;
        }
        return i == n;

=======

        int ransomNoteChar[26] = {0};
        int magazineChar[26] = {0};
        for (int i = 0; i < ransomNote.length(); i++) {
            ransomNoteChar[ransomNote[i] - 'a']++;
        }
        for (int i = 0; i < magazine.length(); i++) {
            magazineChar[magazine[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (ransomNoteChar[i] > magazineChar[i]) {
                return false;
            }
        }
        return true;

=======

        int n = ransomNote.length();
        int m = magazine.length();
        if (n > m) return false;
        int freq[26] = {0};
        for (int i = 0; i < m; i++) {
            freq[magazine[i] - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            if (freq[ransomNote[i] - 'a'] == 0) {
                return false;
            }
            freq[ransomNote[i] - 'a']--;
        }
        return true;

=======

        int ransomNoteLen = ransomNote.length();
        int magazineLen = magazine.length();
        if (ransomNoteLen > magazineLen) {
            return false;
        }
        unordered_map<char, int> ransomNoteMap;
        unordered_map<char, int> magazineMap;
        for (int i = 0; i < ransomNoteLen; ++i) {
            ransomNoteMap[ransomNote[i]]++;
        }
        for (int i = 0; i < magazineLen; ++i) {
            magazineMap[magazine[i]]++;
        }
        for (auto &x : ransomNoteMap) {
            if (x.second > magazineMap[x.first]) {
                return false;
            }
        }
        return true;

=======

        int n = ransomNote.length();
        int m = magazine.length();
        if(n > m)
            return false;
        unordered_map<char, int> mp;
        for(int i = 0; i < m; i++){
            mp[magazine[i]]++;
        }
        for(int i = 0; i < n; i++){
            if(mp[ransomNote[i]] > 0){
                mp[ransomNote[i]]--;
            } else {
                return false;
            }
        }
        return true;

=======

        vector<int> mag(26, 0);
        for(char c: magazine) mag[c - 'a']++;
        for(char c: ransomNote) {
            if(mag[c - 'a'] == 0) return false;
            mag[c - 'a']--;
        }
        return true;

=======

        int m = ransomNote.size();
        int n = magazine.size();
        if(m > n) return false;
        vector<int> hash(26, 0);
        for(int i = 0; i < m; i++) {
            hash[ransomNote[i] - 'a']++;
        }
        for(int i = 0; i < n; i++) {
            hash[magazine[i] - 'a']--;
        }
        for(int i = 0; i < 26; i++) {
            if(hash[i] > 0) return false;
        }
        return true;

=======

        int n = ransomNote.length();
        int m = magazine.length();
        if(n>m) return false;
        int freq[26] = {0};
        for(int i=0;i<n;i++) {
            freq[ransomNote[i]-'a']++;
        }
        for(int i=0;i<m;i++) {
            freq[magazine[i]-'a']--;
        }
        for(int i=0;i<26;i++) {
            if(freq[i]>0) return false;
        }
        return true;
