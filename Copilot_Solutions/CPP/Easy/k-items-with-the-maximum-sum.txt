Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = 0;
        if (k <= numOnes + numZeros) {
            res = k;
        } else if (k <= numOnes + numZeros + numNegOnes) {
            res = numOnes + (k - numOnes);
        } else {
            res = numOnes + numZeros;
        }
        return res;

=======

        if (k == 0) {
            return 0;
        }
        if (numOnes == 0) {
            if (numZeros > 0) {
                return 0;
            }
            else {
                return -numNegOnes;
            }
        }
        if (numNegOnes == 0) {
            return numOnes;
        }
        if (k == numOnes + numZeros + numNegOnes) {
            return numOnes - numNegOnes;
        }
        return max(numOnes + kItemsWithMaximumSum(numOnes - 1, numZeros, numNegOnes, k - 1), kItemsWithMaximumSum(numOnes, numZeros, numNegOnes - 1, k));

=======

        int dp[51][51][51];
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        for(int i = 0; i <= numOnes; i++) {
            for(int j = 0; j <= numZeros; j++) {
                for(int k = 0; k <= numNegOnes; k++) {
                    if(i + j + k == 0) continue;
                    if(i >= 1) dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k] + 1);
                    if(j >= 1) dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k]);
                    if(k >= 1) dp[i][j][k] = max(dp[i][j][k], dp[i][j][k - 1] - 1);
                    if(i + j + k == k) ans = max(ans, dp[i][j][k]);
                }
            }
        }
        return ans;

=======

        int ans = 0;
        for(int i = 0; i <= k; i++){
            int j = k - i;
            if(i > numOnes || j > numZeros + numNegOnes) continue;
            ans = max(ans, min(numOnes, i) + min(numZeros, j) - min(numNegOnes, j));
        }
        return ans;

=======

        int sum = 0;
        int zero = min(numZeros, k);
        for (int i = 0; i <= zero; i++) {
            int one = min(numOnes, k - i);
            int negOne = min(numNegOnes, k - i - one);
            sum = max(sum, i + one + negOne);
        }
        return sum;

=======

        int res = 0;
        for (int i = 0; i <= k; i++) {
            int sum = 0;
            for (int j = 0; j <= i; j++) {
                int ones = min(numOnes, j);
                int zeros = min(numZeros, i - j);
                int negOnes = min(numNegOnes, k - i);
                int tmp = ones - negOnes;
                if (tmp > 0) {
                    sum += tmp * zeros;
                }
            }
            res = max(res, sum);
        }
        return res;

=======

        int sum = 0;
        int max = 0;
        int sum1 = 0;
        int sum2 = 0;
        int sum3 = 0;
        int sum4 = 0;
        int sum5 = 0;
        int sum6 = 0;
        int sum7 = 0;
        int sum8 = 0;
        int sum9 = 0;
        int sum10 = 0;
        int sum11 = 0;
        int sum12 = 0;
        int sum13 = 0;
        int sum14 = 0;
        int sum15 = 0;
        int sum16 = 0;
        int sum17 = 0;
        int sum18 = 0;
        int sum19 = 0;
        int sum20 = 0;
        int sum21 = 0;
        int sum22 = 0;
        int sum23 = 0;
        int sum24 = 0;
        int sum25 = 0;
        int sum26 = 0;
        int sum27 = 0;
        int sum28 = 0;
        int sum29 = 0;
        int sum30 = 0;
        int sum31 = 0;
        int sum32 = 0;
        int sum33 = 0;
        int sum34 = 0;
        int sum35 = 0;
        int sum36 = 0;
        int sum37 = 0;
        int sum38 = 0;
        int sum39 = 0;
        int sum40 = 0;
        int sum41 = 0;
        int sum42 = 0;
        int sum43 = 0;
        int sum44 = 0;
        int sum45 = 0;
        int sum46 = 0;
        int sum47 = 0;
        int sum48 = 0;
        int sum49 = 0;
        int sum50 = 0;
        int sum51 = 0;
        int sum52 = 0;
        int sum53 = 0;
        int sum54 = 0;
        int sum55 = 0;
        int sum56 = 0;
        int sum57 = 0;
        int sum58 = 0;
        int sum59 = 0;
        int sum60 = 0;
        int sum61 =

=======

        int max = 0;
        int sum = 0;
        int c = 0;
        if (numOnes >= k) {
            for (int i = 0; i < k; i++) {
                sum += 1;
            }
            max = sum;
        }
        if (numOnes < k) {
            for (int i = 0; i < numOnes; i++) {
                sum += 1;
            }
            c = k - numOnes;
            if (c <= numZeros) {
                for (int i = 0; i < c; i++) {
                    sum += 0;
                }
                max = sum;
            }
            if (c > numZeros) {
                for (int i = 0; i < numZeros; i++) {
                    sum += 0;
                }
                c = c - numZeros;
                for (int i = 0; i < c; i++) {
                    sum += -1;
                }
                max = sum;
            }
        }
        return max;

=======

        int sum = 0;
        int num = 0;
        int num_0 = 0;
        int num_1 = 0;
        int num_2 = 0;
        while(num < k){
            if(num_0 < numZeros){
                sum += 0;
                num_0++;
            }
            else if(num_1 < numOnes){
                sum += 1;
                num_1++;
            }
            else if(num_2 < numNegOnes){
                sum -= 1;
                num_2++;
            }
            num++;
        }
        return sum;
