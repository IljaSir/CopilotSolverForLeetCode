Synthesizing 10/10 solutions

=======

        vector<int> count(501, 0);
        for (int i = 0; i < arr.size(); i++) {
            count[arr[i]]++;
        }
        int max = -1;
        for (int i = 1; i < 501; i++) {
            if (count[i] == i) {
                max = i;
            }
        }
        return max;

=======

        map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        int max = -1;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->first == it->second && it->first > max) {
                max = it->first;
            }
        }
        return max;

=======

        int max = -1;
        for (int i = 1; i <= 500; i++) {
            int cnt = 0;
            for (int j = 0; j < arr.size(); j++) {
                if (arr[j] == i) {
                    cnt++;
                }
            }
            if (cnt == i) {
                max = i;
            }
        }
        return max;

=======

        unordered_map<int, int> m;
        for (int i : arr) {
            m[i]++;
        }
        int ans = -1;
        for (auto& [k, v] : m) {
            if (k == v) {
                ans = max(ans, k);
            }
        }
        return ans;

=======

        int n = arr.size();
        if (n == 0) return -1;
        if (n == 1) return arr[0] == 1 ? arr[0] : -1;
        map<int, int> freq;
        for (int i = 0; i < n; i++) {
            freq[arr[i]]++;
        }
        int res = -1;
        for (auto it = freq.begin(); it != freq.end(); it++) {
            if (it->first == it->second) {
                res = it->first;
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (auto& i : arr) {
            m[i]++;
        }
        int max = -1;
        for (auto& i : m) {
            if (i.first == i.second && i.first > max) {
                max = i.first;
            }
        }
        return max;

=======

        int res = -1;
        for (int i = 1; i <= 500; ++i) {
            int cnt = 0;
            for (auto x : arr) {
                if (x == i) ++cnt;
            }
            if (cnt == i) res = max(res, i);
        }
        return res;

=======

        unordered_map<int, int> m;
        for (auto a : arr) {
            m[a]++;
        }
        int ans = -1;
        for (auto [a, b] : m) {
            if (a == b) {
                ans = max(ans, a);
            }
        }
        return ans;

=======

        int ans = -1;
        map<int, int> m;
        for (auto &x: arr) {
            m[x]++;
        }
        for (auto &x: m) {
            if (x.first == x.second) {
                ans = x.first;
            }
        }
        return ans;

=======

        int max = -1;
        int n = arr.size();
        int count[n+1];
        memset(count, 0, sizeof(count));
        for(int i = 0; i < n; i++) {
            count[arr[i]]++;
        }
        for(int i = 1; i <= n; i++) {
            if(count[i] == i) {
                max = i;
            }
        }
        return max;
