Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < arr.size(); i++) {
            for (int j = 0; j < arr.size(); j++) {
                if (i != j && arr[i] == 2 * arr[j]) {
                    return true;
                }
            }
        }
        return false;

=======

        for (int i = 0; i < arr.size(); i++) {
            for (int j = 0; j < arr.size(); j++) {
                if (i != j && arr[i] == arr[j] * 2) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] == 2 * arr[j] || arr[j] == 2 * arr[i]) {
                    return true;
                }
            }
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]] = i;
        }
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] % 2 == 0) {
                if (m.count(arr[i] / 2) && m[arr[i] / 2] != i) {
                    return true;
                }
            }
        }
        for (int i = 0; i < arr.size(); i++) {
            if (m.count(2 * arr[i]) && m[2 * arr[i]] != i) {
                return true;
            }
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == 0) {
                if (m[0] >= 2) {
                    return true;
                }
            } else {
                if (m[arr[i] * 2] >= 1) {
                    return true;
                }
            }
        }
        return false;

=======

        unordered_set<int> s;
        for (int n : arr) {
            if (s.count(n * 2) || (n % 2 == 0 && s.count(n / 2))) {
                return true;
            }
            s.insert(n);
        }
        return false;

=======

        for(int i=0; i<arr.size(); i++){
            for(int j=0; j<arr.size(); j++){
                if(i!=j){
                    if(arr[i]==arr[j]*2){
                        return true;
                    }
                }
            }
        }
        return false;

=======

        unordered_map<int, int> map;
        for (int i = 0; i < arr.size(); i++) {
            if (map.find(arr[i]) != map.end()) {
                map[arr[i]]++;
            } else {
                map[arr[i]] = 1;
            }
        }
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == 0) {
                if (map[arr[i]] >= 2) {
                    return true;
                }
            } else if (map.find(arr[i] * 2) != map.end()) {
                return true;
            }
        }
        return false;

=======

        unordered_map<int,int> hash;
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(hash.find(arr[i])!=hash.end()){
                return true;
            }
            if(arr[i]%2==0){
                if(hash.find(arr[i]/2)!=hash.end()){
                    return true;
                }
            }
            hash[arr[i]]=1;
        }
        return false;
