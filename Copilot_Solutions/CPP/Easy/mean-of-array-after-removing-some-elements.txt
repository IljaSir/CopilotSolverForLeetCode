Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.size();
        sort(arr.begin(), arr.end());
        double sum = 0;
        for (int i = n / 20; i < n - n / 20; ++i) {
            sum += arr[i];
        }
        return sum / (n - n / 10);

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        double sum = 0;
        for (int i = n/20; i < n - n/20; i++) {
            sum += arr[i];
        }
        return sum / (n - n/10);

=======

        sort(arr.begin(), arr.end());
        int l = arr.size() / 20;
        double sum = 0;
        for (int i = l; i < arr.size() - l; i++) {
            sum += arr[i];
        }
        return sum / (arr.size() - 2 * l);

=======

        int n = arr.size();
        int m = n / 20;
        sort(arr.begin(), arr.end());
        double sum = 0;
        for (int i = m; i < n - m; ++i) {
            sum += arr[i];
        }
        return sum / (n - 2 * m);

=======

        int n = arr.size();
        int k = n / 20;
        sort(arr.begin(), arr.end());
        int sum = 0;
        for (int i = k; i < n - k; ++i) {
            sum += arr[i];
        }
        return (double)sum / (n - 2 * k);

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        int l = n / 20;
        int r = n - l;
        double sum = 0;
        for (int i = l; i < r; ++i) {
            sum += arr[i];
        }
        return sum / (r - l);

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        int x = n / 20;
        double sum = 0;
        for (int i = x; i < n - x; i++) {
            sum += arr[i];
        }
        return sum / (n - 2 * x);

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        int t = n * 0.05;
        double sum = 0;
        for (int i = t; i < n - t; ++i) {
            sum += arr[i];
        }
        return sum / (n - 2 * t);

=======

        int n = arr.size();
        double sum = 0;
        int i = 0.05 * n;
        sort(arr.begin(), arr.end());
        for (int j = i; j < n - i; j++) {
            sum += arr[j];
        }
        return sum / (n - 2 * i);
