Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[i].size(); j++) {
                if (grid[i][j] < 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int cnt = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[i].size(); ++j) {
                if (grid[i][j] < 0) ++cnt;
            }
        }
        return cnt;

=======

        int m = grid.size();
        int n = grid[0].size();
        int i = 0;
        int j = n - 1;
        int count = 0;
        while (i < m && j >= 0) {
            if (grid[i][j] < 0) {
                count += m - i;
                j--;
            } else {
                i++;
            }
        }
        return count;

=======

        int m = grid.size();
        int n = grid[0].size();
        int i = m - 1, j = 0, count = 0;
        while (i >= 0 && j < n) {
            if (grid[i][j] >= 0) {
                j++;
            } else {
                count += n - j;
                i--;
            }
        }
        return count;

=======

        int res = 0;
        int m = grid.size();
        int n = grid[0].size();
        int i = m - 1;
        int j = 0;
        while(i >= 0 && j < n) {
            if (grid[i][j] < 0) {
                res += n - j;
                i--;
            } else {
                j++;
            }
        }
        return res;

=======

        int ans = 0;
        for (int i = 0; i < grid.size(); i++) {
            int left = 0, right = grid[i].size() - 1;
            while (left <= right) {
                int mid = left + (right - left) / 2;
                if (grid[i][mid] >= 0) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
            ans += grid[i].size() - left;
        }
        return ans;
