Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            res |= nums[i];
        }
        return res * pow(2, nums.size() - 1);

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    sum ^= nums[j];
                }
            }
            res += sum;
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            res |= nums[i];
        }
        return res * pow(2, nums.size() - 1);

=======

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ans |= nums[i];
        }
        return ans * pow(2, nums.size() - 1);

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 1 << n; i++) {
            int t = 0;
            for (int j = 0; j < n; j++) {
                if (i >> j & 1) {
                    t ^= nums[j];
                }
            }
            res += t;
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < (1 << nums.size()); ++i) {
            int cur = 0;
            for (int j = 0; j < nums.size(); ++j) {
                if (i & (1 << j)) {
                    cur ^= nums[j];
                }
            }
            res += cur;
        }
        return res;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < (1<<n); i++) {
            int x = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1<<j)) {
                    x ^= nums[j];
                }
            }
            sum += x;
        }
        return sum;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < (1 << n); i++) {
            int t = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    t ^= nums[j];
                }
            }
            ans += t;
        }
        return ans;

=======

        int sum = 0, n = nums.size();
        for (int i = 0; i < (1 << n); i++) {
            int t = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) t ^= nums[j];
            }
            sum += t;
        }
        return sum;

=======

        int ans = 0;
        for (int i = 0; i < 1 << nums.size(); i++) {
            int t = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (i & (1 << j)) {
                    t ^= nums[j];
                }
            }
            ans += t;
        }
        return ans;
