Synthesizing 10/10 solutions

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            ans += min(timeSeries[i + 1] - timeSeries[i], duration);
        }
        return ans + duration;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int ans = duration;
        for (int i = 1; i < n; i++) {
            ans += min(duration, timeSeries[i] - timeSeries[i - 1]);
        }
        return ans;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int ans = 0;
        for (int i = 1; i < n; i++) {
            ans += min(duration, timeSeries[i] - timeSeries[i-1]);
        }
        return ans + duration;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int res = duration;
        for (int i = 1; i < n; ++i) {
            res += min(timeSeries[i] - timeSeries[i - 1], duration);
        }
        return res;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (timeSeries[i] - timeSeries[i - 1] >= duration) {
                ans += duration;
            } else {
                ans += timeSeries[i] - timeSeries[i - 1];
            }
        }
        return ans + duration;

=======

        int N = timeSeries.size();
        if (N == 0) return 0;
        int ans = duration;
        for (int i = 1; i < N; ++i) {
            ans += min(duration, timeSeries[i] - timeSeries[i - 1]);
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < timeSeries.size(); i++) {
            int start = timeSeries[i];
            int end = start + duration;
            if (i + 1 < timeSeries.size()) {
                int next = timeSeries[i + 1];
                if (next < end) {
                    end = next;
                }
            }
            ans += end - start;
        }
        return ans;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int i = 0, j = 1;
        int ans = 0;
        while (j < n) {
            if (timeSeries[j] - timeSeries[i] < duration) {
                j++;
            } else {
                ans += duration;
                i = j;
                j++;
            }
        }
        ans += duration;
        return ans;

=======

        int n = timeSeries.size();
        if (n == 0) return 0;
        int total = duration;
        int last = timeSeries[0];
        for (int i = 1; i < n; ++i) {
            if (timeSeries[i] - last < duration) {
                total += timeSeries[i] - last;
            } else {
                total += duration;
            }
            last = timeSeries[i];
        }
        return total;

=======

        int res = 0;
        int n = timeSeries.size();
        for (int i = 0; i < n; i++) {
            int t = timeSeries[i];
            res += duration;
            if (i + 1 < n && t + duration - 1 >= timeSeries[i + 1]) {
                res -= t + duration - 1 - timeSeries[i + 1];
            }
        }
        return res;
