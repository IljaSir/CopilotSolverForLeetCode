Synthesizing 10/10 solutions

=======

        if (x == 0) return 0;
        int left = 1, right = x;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mid > x / mid) {
                right = mid;
            } else {
                if ((mid + 1) > x / (mid + 1)) return mid;
                left = mid + 1;
            }
        }
        return left;

=======

        if (x == 0) {
            return 0;
        }
        int left = 1;
        int right = x;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (mid > x / mid) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left > x / left ? left - 1 : left;

=======

        if (x == 0) return 0;
        int left = 1, right = x;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == x / mid) return mid;
            else if (mid < x / mid) left = mid + 1;
            else right = mid - 1;
        }
        return right;

=======

        if (x == 0 || x == 1)
            return x;
        int l = 1, r = x, ans;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (mid <= x / mid) {
                l = mid + 1;
                ans = mid;
            }
            else {
                r = mid - 1;
            }
        }
        return ans;

=======

        if (x <= 0) {
            return 0;
        }
        int left = 1;
        int right = x;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == x / mid) {
                return mid;
            } else if (mid > x / mid) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return right;

=======

        if (x == 0 || x == 1) return x;
        int l = 1, r = x;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (m == x / m) return m;
            else if (m < x / m) l = m + 1;
            else r = m - 1;
        }
        return r;

=======

        int l = 0;
        int r = x;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (m <= x / m && (m + 1) > x / (m + 1)) {
                return m;
            }
            if (m > x / m) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return 0;

=======

        if (x == 0)
            return 0;
        double x0 = x;
        double x1 = (x0 + x / x0) / 2;
        while (abs(x1 - x0) > 0.00001) {
            x0 = x1;
            x1 = (x0 + x / x0) / 2;
        }
        return int(x1);

=======

        int l = 0;
        int r = x;
        int mid = 0;
        while (l <= r) {
            mid = (l + r) / 2;
            if (mid * mid == x) {
                return mid;
            } else if (mid * mid < x) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return r;

=======

        return sqrt(x);
