Synthesizing 10/10 solutions

=======

        vector<int> time(n, 0);
        for (int i = 1; i < logs.size(); i++) {
            time[logs[i][0]] += logs[i][1] - logs[i-1][1];
        }
        int maxTime = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > maxTime) {
                maxTime = time[i];
                res = i;
            }
        }
        return res;

=======

        vector<int> times(n, 0);
        for (int i = 0; i < logs.size(); i++) {
            times[logs[i][0]] += logs[i][1] - (i == 0 ? 0 : logs[i - 1][1]);
        }
        int max_time = 0;
        int max_id = 0;
        for (int i = 0; i < n; i++) {
            if (max_time < times[i]) {
                max_time = times[i];
                max_id = i;
            }
        }
        return max_id;

=======

        vector<int> time(n, 0);
        for (int i = 0; i < logs.size(); ++i) {
            time[logs[i][0]] += logs[i][1] - (i == 0 ? 0 : logs[i - 1][1]);
        }
        int maxTime = 0, maxId = 0;
        for (int i = 0; i < n; ++i) {
            if (time[i] > maxTime) {
                maxTime = time[i];
                maxId = i;
            }
        }
        return maxId;

=======

        vector<int> times(n, 0);
        for (auto& log : logs) {
            times[log[0]] += log[1] - (log == logs.front() ? 0 : logs[&log - &logs.front() - 1][1]);
        }
        return max_element(times.begin(), times.end()) - times.begin();

=======

        vector<int> time(n);
        for (auto& log : logs) {
            time[log[0]] += log[1] - (log == logs.front() ? 0 : logs[&log - &logs[0] - 1][1]);
        }
        return max_element(time.begin(), time.end()) - time.begin();

=======

        vector<int> work(n, 0);
        for (int i = 0; i < logs.size(); i++) {
            if (i > 0) {
                work[logs[i][0]] += logs[i][1] - logs[i - 1][1];
            } else {
                work[logs[i][0]] += logs[i][1];
            }
        }
        int maxTime = 0;
        int maxWorker = 0;
        for (int i = 0; i < n; i++) {
            if (work[i] > maxTime) {
                maxTime = work[i];
                maxWorker = i;
            }
        }
        return maxWorker;

=======

        vector<int> work(n, 0);
        for (int i = 0; i < logs.size(); i++) {
            int id = logs[i][0];
            int time = logs[i][1];
            if (i == 0) {
                work[id] += time;
            } else {
                work[id] += time - logs[i - 1][1];
            }
        }
        int maxTime = 0;
        int maxId = 0;
        for (int i = 0; i < n; i++) {
            if (work[i] > maxTime) {
                maxTime = work[i];
                maxId = i;
            }
        }
        return maxId;

=======

        vector<int> res(n, 0);
        for (int i = 0; i < logs.size(); ++i) {
            int id = logs[i][0];
            int time = logs[i][1];
            if (i > 0) {
                time -= logs[i-1][1];
            }
            res[id] += time;
        }
        int max = 0;
        int id = 0;
        for (int i = 0; i < n; ++i) {
            if (res[i] > max) {
                max = res[i];
                id = i;
            }
        }
        return id;

=======

        vector<int> times(n, 0);
        int maxTime = 0;
        int maxId = 0;
        for (int i = 0; i < logs.size(); ++i) {
            int id = logs[i][0];
            int time = logs[i][1];
            if (i > 0) {
                time -= logs[i - 1][1];
            }
            times[id] += time;
            if (times[id] > maxTime) {
                maxTime = times[id];
                maxId = id;
            }
        }
        return maxId;

=======

        vector<int> time(n, 0);
        int max = 0;
        int id = 0;
        for(int i = 0; i < logs.size(); i++) {
            time[logs[i][0]] += logs[i][1] - (i == 0 ? 0 : logs[i-1][1]);
            if(time[logs[i][0]] > max) {
                max = time[logs[i][0]];
                id = logs[i][0];
            }
        }
        return id;
