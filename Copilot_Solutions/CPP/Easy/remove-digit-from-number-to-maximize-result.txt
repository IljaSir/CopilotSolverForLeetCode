Synthesizing 10/10 solutions

=======

        int i = 0;
        while (i < number.length()) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit1(string number, char digit) {
        int i = 0;
        while (i < number.length()) {
            if (number[i] == digit) {
                number = number.substr(0, i) + number.substr(i + 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit2(string number, char digit) {
        auto i = number.find(digit);
        if (i != string::npos) {
            number = number.substr(0, i) + number.substr(i + 1);
        }
        return number;
    }
    string removeDigit3(string number, char digit) {
        number.erase(remove(number.begin(), number.end(), digit), number.end());
        return number;
    }
    string removeDigit4(string number, char digit) {
        number.erase(remove_if(number.begin(), number.end(), [digit](char c) { return c == digit; }), number.end());
        return number;
    }
    string removeDigit5(string number, char digit) {
        number.erase(find(number.begin(), number.end(), digit), number.end());
        return number;
    }
    string removeDigit6(string number, char digit) {
        number.erase(find_if(number.begin(), number.end(), [digit](char c) { return c == digit; }), number.end());
        return number;

=======

        string result = "";
        bool removed = false;
        for (int i = 0; i < number.length(); i++) {
            if (number[i] == digit && !removed) {
                removed = true;
            } else {
                result += number[i];
            }
        }
        
        return result;
    }
    
    string removeDigit2(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        string result = "";
        for (int i = 0; i < number.length(); i++) {
            if (i == index) {
                continue;
            }
            
            result += number[i];
        }
        
        return result;
    }
    
    string removeDigit3(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        number.erase(index, 1);
        return number;
    }
    
    string removeDigit4(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        return number.substr(0, index) + number.substr(index + 1);
    }
    
    string removeDigit5(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        return number.erase(index, 1);
    }
    
    string removeDigit6(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        return number.replace(index, 1, "");
    }
    
    string removeDigit7(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        return number.replace(index, 1, "");
    }
    
    string removeDigit8(string number, char digit) {
        int index = number.find(digit);
        if (index == string::npos) {
            return number;
        }
        
        number.erase(index, 1);
        return number;

=======

        int n = number.size();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit2(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;
    }
    string removeDigit3(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;
    }
    string removeDigit4(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;
    }
    string removeDigit5(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;
    }
    string removeDigit6(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;
    }
    string removeDigit7(string number, char digit) {
        int n = number.size();
        for (int i = 0; i < n; i++) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
        }
        return number;

=======

        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit1(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit2(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit3(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit4(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit5(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;
    }
    string removeDigit6(string number, char digit) {
        int n = number.length();
        int i = 0;
        while (i < n) {
            if (number[i] == digit) {
                number.erase(i, 1);
                break;
            }
            i++;
        }
        return number;

=======

        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;
    }
    string removeDigit2(string number, char digit) {
        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;
    }
    string removeDigit3(string number, char digit) {
        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;
    }
    string removeDigit4(string number, char digit) {
        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;
    }
    string removeDigit5(string number, char digit) {
        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;
    }
    string removeDigit6(string number, char digit) {
        int i = 0;
        int j = 0;
        int n = number.size();
        while (j < n) {
            if (number[j] == digit) {
                j++;
            } else {
                number[i++] = number[j++];
            }
        }
        number.resize(i);
        return number;

=======

        int pos = number.find(digit);
        if (pos == string::npos) {
            return number;
        }
        number.erase(pos, 1);
        return number;
    }
    string removeDigit2(string number, char digit) {
        int pos = number.find(digit);
        if (pos == string::npos) {
            return number;
        }
        int i = pos;
        while (i < number.length() && number[i] == digit) {
            i++;
        }
        number.erase(pos, i - pos);
        return number;
    }
    string removeDigit3(string number, char digit) {
        int pos = number.find(digit);
        if (pos == string::npos) {
            return number;
        }
        int i = pos;
        while (i < number.length() && number[i] == digit) {
            i++;
        }
        if (i == number.length()) {
            number.erase(pos, i - pos);
        } else if (i - pos == 1) {
            number.erase(pos, 1);
        } else {
            number.erase(pos, 1);
            number.erase(i - 1, 1);
            number.insert(pos, 1, number[i - 2]);
        }
        return number;
    }
    string removeDigit4(string number, char digit) {
        int pos = number.find(digit);
        if (pos == string::npos) {
            return number;
        }
        int i = pos;
        while (i < number.length() && number[i] == digit) {
            i++;
        }
        if (i == number.length()) {
            number.erase(pos, i - pos);
        } else if (i - pos == 1) {
            number.erase(pos, 1);
        } else {
            number.erase(pos, 1);
            number.erase(i - 1, 1);
            number.insert(pos, 1, number[i - 2]);
        }
        return number;
    }
    string removeDigit5(string number, char digit) {
        int pos = number.find(digit);
        if (pos == string::npos) {
            return number;
        }
        int i = pos;
        while (i < number.length() && number[i] == digit) {
            i++;
        }
        if (i == number.length()) {
            number.erase(pos, i - pos);
        } else

=======

        int n = number.size();
        int i = 0;
        while (i < n && number[i] != digit) {
            i++;
        }
        int j = i+1;
        while (j < n) {
            if (number[j] != digit) {
                number[i] = number[j];
                i++;
            }
            j++;
        }
        number.resize(i);
        return number;

=======

        int n = number.length();
        int i = 0;
        while (i < n && number[i] != digit) {
            i++;
        }
        if (i == n - 1) {
            return number.substr(0, n - 1);
        }
        int j = i + 1;
        while (j < n && number[j] == digit) {
            j++;
        }
        return number.substr(0, i) + number.substr(j);

=======

        int i = 0, j = 0;
        for (; i < number.size(); i++) {
            if (number[i] == digit) {
                continue;
            }
            if (j != i) {
                number[j] = number[i];
            }
            j++;
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit2(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit3(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit4(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit5(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit6(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }
        number.resize(j);
        return number;
    }
    
    string removeDigit7(string number, char digit) {
        int i = 0, j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                i++;
                continue;
            }
            number[j++] = number[i++];
        }

=======

        int i = 0;
        int j = 0;
        while (i < number.size()) {
            if (number[i] == digit) {
                number[j] = number[i];
                j++;
            }
            i++;
        }
        number = number.substr(0, j);
        int max = 0;
        string result;
        for (int i = 0; i < number.size(); i++) {
            for (int j = i; j < number.size(); j++) {
                string s = number.substr(0, i) + number.substr(j+1);
                int num = stoi(s);
                if (num > max) {
                    max = num;
                    result = s;
                }
            }
        }
        return result;
