Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.push_back(i);
            }
        }
        return result;
    }
    
    bool isSelfDividing(int num) {
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        vector<int> result;
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.push_back(i);
            }
        }
        return result;
    }
    
    bool isSelfDividing(int num) {
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;

=======

        vector<int> result;
        for (int i = left; i <= right; i++) {
            if (isSelfDividingNumber(i)) {
                result.push_back(i);
            }
        }
        return result;
    }
    
    bool isSelfDividingNumber(int n) {
        int tmp = n;
        while (tmp > 0) {
            int mod = tmp % 10;
            if (mod == 0) {
                return false;
            }
            if (n % mod != 0) {
                return false;
            }
            tmp /= 10;
        }
        return true;

=======

        vector<int> res;
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                res.push_back(i);
            }
        }
        return res;
    }
    
    bool isSelfDividing(int num) {
        int tmp = num;
        while (tmp) {
            int d = tmp % 10;
            if (d == 0 || num % d != 0) {
                return false;
            }
            tmp /= 10;
        }
        return true;

=======

        vector<int> result;
        for (int i = left; i <= right; i++) {
            if (isSelfDividing(i)) {
                result.push_back(i);
            }
        }
        return result;
    }
    bool isSelfDividing(int n) {
        int temp = n;
        while (temp) {
            int digit = temp % 10;
            if (digit == 0 || n % digit != 0) {
                return false;
            }
            temp /= 10;
        }
        return true;

=======

        vector<int> res;
        for (int i = left; i <= right; i++) {
            int n = i;
            while (n > 0) {
                int d = n % 10;
                if (d == 0 || i % d != 0) {
                    break;
                }
                n /= 10;
            }
            if (n == 0) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> res;
        for (int i = left; i <= right; i++) {
            if (selfDividing(i)) {
                res.push_back(i);
            }
        }
        return res;
    }
    
    bool selfDividing(int num) {
        int tmp = num;
        while (tmp > 0) {
            int digit = tmp % 10;
            if (digit == 0 || num % digit != 0) {
                return false;
            }
            tmp /= 10;
        }
        return true;

=======

        vector<int> ans;
        for (int i = left; i <= right; ++i) {
            int j = i;
            while (j > 0) {
                int d = j % 10;
                if (d == 0 || i % d != 0) {
                    break;
                }
                j /= 10;
            }
            if (j == 0) {
                ans.push_back(i);
            }
        }
        return ans;

=======

        vector<int> ans;
        for (int i = left; i <= right; ++i) {
            int num = i;
            bool isSelfDividing = true;
            while (num > 0) {
                int digit = num % 10;
                if (digit == 0 || i % digit != 0) {
                    isSelfDividing = false;
                    break;
                }
                num /= 10;
            }
            if (isSelfDividing) {
                ans.push_back(i);
            }
        }
        return ans;

=======

        vector<int> res;
        for(int i=left;i<=right;i++){
            int num=i;
            bool flag=true;
            while(num){
                int digit=num%10;
                if(digit==0 || i%digit!=0){
                    flag=false;
                    break;
                }
                num/=10;
            }
            if(flag) res.push_back(i);
        }
        return res;
