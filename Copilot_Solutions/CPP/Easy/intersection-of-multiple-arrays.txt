Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = 0; i < nums[0].size(); i++) {
            bool flag = true;
            for (int j = 1; j < nums.size(); j++) {
                if (find(nums[j].begin(), nums[j].end(), nums[0][i]) == nums[j].end()) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                result.push_back(nums[0][i]);
            }
        }
        return result;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                bool flag = true;
                for (int k = 0; k < nums.size(); k++) {
                    if (k == i) continue;
                    if (find(nums[k].begin(), nums[k].end(), nums[i][j]) == nums[k].end()) {
                        flag = false;
                        break;
                    }
                }
                if (flag && find(res.begin(), res.end(), nums[i][j]) == res.end()) {
                    res.push_back(nums[i][j]);
                }
            }
        }
        return res;

=======

        vector<int> res;
        for(int i = 0; i < nums.size(); i++){
            for(int j = 0; j < nums[i].size(); j++){
                bool flag = true;
                for(int k = 0; k < nums.size(); k++){
                    if(i == k) continue;
                    if(find(nums[k].begin(), nums[k].end(), nums[i][j]) == nums[k].end()){
                        flag = false;
                        break;
                    }
                }
                if(flag) res.push_back(nums[i][j]);
            }
        }
        sort(res.begin(), res.end());
        res.erase(unique(res.begin(), res.end()), res.end());
        return res;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                bool all = true;
                for (int k = 0; k < nums.size(); k++) {
                    if (k == i) continue;
                    if (find(nums[k].begin(), nums[k].end(), nums[i][j]) == nums[k].end()) {
                        all = false;
                        break;
                    }
                }
                if (all && find(result.begin(), result.end(), nums[i][j]) == result.end()) {
                    result.push_back(nums[i][j]);
                }
            }
        }
        sort(result.begin(), result.end());
        return result;

=======

        unordered_map<int, int> mp;
        for (auto &v : nums) {
            for (auto &n : v) {
                ++mp[n];
            }
        }
        vector<int> res;
        for (auto &p : mp) {
            if (p.second == nums.size()) {
                res.push_back(p.first);
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> m;
        for (auto& n : nums) {
            for (auto& i : n) {
                ++m[i];
                if (m[i] == nums.size()) {
                    res.push_back(i);
                }
            }
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return {};
        vector<int> res;
        unordered_map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                mp[nums[i][j]]++;
            }
        }
        for (auto it = mp.begin(); it != mp.end(); it++) {
            if (it->second == n) {
                res.push_back(it->first);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> res;
        if (n == 0) return res;
        set<int> s;
        for (int i=0; i<nums[0].size(); i++) {
            s.insert(nums[0][i]);
        }
        for (int i=1; i<n; i++) {
            set<int> t;
            for (int j=0; j<nums[i].size(); j++) {
                if (s.find(nums[i][j]) != s.end()) {
                    t.insert(nums[i][j]);
                }
            }
            s = t;
        }
        for (auto it = s.begin(); it != s.end(); it++) {
            res.push_back(*it);
        }
        return res;

=======

        int n = nums.size();
        if(n == 0) return {};
        vector<int> ans;
        unordered_set<int> s;
        for(int i = 0; i < nums[0].size(); i++) {
            s.insert(nums[0][i]);
        }
        for(int i = 1; i < n; i++) {
            unordered_set<int> temp;
            for(int j = 0; j < nums[i].size(); j++) {
                if(s.find(nums[i][j]) != s.end()) {
                    temp.insert(nums[i][j]);
                }
            }
            s = temp;
        }
        for(auto x: s) {
            ans.push_back(x);
        }
        return ans;

=======

        vector<int> result;
        std::map<int, int> map;
        for (auto &v : nums) {
            for (auto &i : v) {
                map[i]++;
            }
        }
        for (auto &i : map) {
            if (i.second == nums.size()) {
                result.push_back(i.first);
            }
        }
        return result;
