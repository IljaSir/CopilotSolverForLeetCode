Synthesizing 10/10 solutions

=======

        string digits;
        string letters;
        for (int i = 0; i < s.size(); i++) {
            if (isdigit(s[i])) {
                digits += s[i];
            } else {
                letters += s[i];
            }
        }
        if (abs(digits.size() - letters.size()) > 1) {
            return "";
        }
        string ans;
        int i = 0;
        int j = 0;
        if (digits.size() > letters.size()) {
            ans += digits[i++];
        } else {
            ans += letters[j++];
        }
        while (i < digits.size() && j < letters.size()) {
            if (isdigit(ans.back())) {
                ans += letters[j++];
            } else {
                ans += digits[i++];
            }
        }
        return ans;

=======

        string alpha, digit;
        for (char c : s) {
            if (isdigit(c)) {
                digit.push_back(c);
            } else {
                alpha.push_back(c);
            }
        }
        if (abs((int)alpha.length() - (int)digit.length()) > 1) {
            return "";
        }
        if (alpha.length() > digit.length()) {
            return reformat(alpha, digit);
        } else {
            return reformat(digit, alpha);
        }
    }
    
    string reformat(const string& l, const string& s) {
        string ans;
        for (int i = 0; i < s.length(); ++i) {
            ans.push_back(l[i]);
            ans.push_back(s[i]);
        }
        if (l.length() > s.length()) {
            ans.push_back(l.back());
        }
        return ans;

=======

        string alpha, digit;
        for (char c : s) {
            if (isdigit(c)) {
                digit.push_back(c);
            } else {
                alpha.push_back(c);
            }
        }
        if (abs(int(alpha.size()) - int(digit.size())) > 1) {
            return "";
        }
        string res;
        if (alpha.size() > digit.size()) {
            for (int i = 0; i < digit.size(); ++i) {
                res.push_back(alpha[i]);
                res.push_back(digit[i]);
            }
            res.push_back(alpha.back());
        } else {
            for (int i = 0; i < alpha.size(); ++i) {
                res.push_back(digit[i]);
                res.push_back(alpha[i]);
            }
            if (digit.size() > alpha.size()) {
                res.push_back(digit.back());
            }
        }
        return res;

=======

        string alpha, digit;
        for (auto c : s) {
            if (isalpha(c)) {
                alpha.push_back(c);
            } else {
                digit.push_back(c);
            }
        }
        if (abs(int(alpha.size()) - int(digit.size())) > 1) {
            return "";
        }
        string ans;
        if (alpha.size() > digit.size()) {
            for (int i = 0; i < digit.size(); ++i) {
                ans.push_back(alpha[i]);
                ans.push_back(digit[i]);
            }
            ans.push_back(alpha.back());
        } else if (digit.size() > alpha.size()) {
            for (int i = 0; i < alpha.size(); ++i) {
                ans.push_back(digit[i]);
                ans.push_back(alpha[i]);
            }
            ans.push_back(digit.back());
        } else {
            for (int i = 0; i < alpha.size(); ++i) {
                ans.push_back(alpha[i]);
                ans.push_back(digit[i]);
            }
        }
        return ans;

=======

        string a, b, c;
        for (auto ch : s) {
            if (ch >= '0' && ch <= '9') {
                a += ch;
            } else {
                b += ch;
            }
        }
        if (abs(int(a.size()) - int(b.size())) > 1) {
            return "";
        }
        if (a.size() > b.size()) {
            c = a;
            a = b;
            b = c;
        }
        c = "";
        for (int i = 0; i < a.size(); i++) {
            c += b[i];
            c += a[i];
        }
        if (b.size() > a.size()) {
            c += b.back();
        }
        return c;

=======

        string str;
        string num;
        for (auto c : s) {
            if (c >= '0' && c <= '9')
                num.push_back(c);
            else
                str.push_back(c);
        }
        if (abs(str.size() - num.size()) > 1)
            return "";
        string ans;
        if (str.size() > num.size()) {
            for (int i = 0; i < num.size(); ++i) {
                ans.push_back(str[i]);
                ans.push_back(num[i]);
            }
            ans.push_back(str.back());
        } else {
            for (int i = 0; i < str.size(); ++i) {
                ans.push_back(num[i]);
                ans.push_back(str[i]);
            }
            if (num.size() > str.size())
                ans.push_back(num.back());
        }
        return ans;

=======

        string letter, digit;
        string res;
        for (auto c : s) {
            if (isalpha(c)) {
                letter.push_back(c);
            } else {
                digit.push_back(c);
            }
        }
        if (abs(int(letter.size()) - int(digit.size())) > 1) {
            return "";
        }
        if (letter.size() > digit.size()) {
            for (int i = 0; i < letter.size(); ++i) {
                res.push_back(letter[i]);
                if (i < digit.size()) {
                    res.push_back(digit[i]);
                }
            }
        } else {
            for (int i = 0; i < digit.size(); ++i) {
                res.push_back(digit[i]);
                if (i < letter.size()) {
                    res.push_back(letter[i]);
                }
            }
        }
        return res;

=======

        string ss, dd;
        for (auto c : s) {
            if (isdigit(c)) {
                dd.push_back(c);
            } else {
                ss.push_back(c);
            }
        }
        if (abs((int)ss.size() - (int)dd.size()) > 1) {
            return "";
        }
        if (ss.size() < dd.size()) {
            swap(ss, dd);
        }
        string res;
        for (int i = 0; i < ss.size(); i++) {
            res.push_back(ss[i]);
            if (i < dd.size()) {
                res.push_back(dd[i]);
            }
        }
        return res;

=======

        string res = "";
        string digit = "";
        string letter = "";
        for(int i = 0; i < s.length(); i++){
            if(s[i] >= '0' && s[i] <= '9'){
                digit += s[i];
            }else{
                letter += s[i];
            }
        }
        if(abs(digit.length() - letter.length()) > 1){
            return res;
        }
        if(digit.length() > letter.length()){
            for(int i = 0; i < digit.length(); i++){
                res += digit[i];
                if(i < letter.length()){
                    res += letter[i];
                }
            }
        }else{
            for(int i = 0; i < letter.length(); i++){
                res += letter[i];
                if(i < digit.length()){
                    res += digit[i];
                }
            }
        }
        return res;

=======

        string result;
        int i = 0, j = 0;
        for (auto c : s) {
            if (c >= '0' && c <= '9') {
                j++;
            } else {
                i++;
            }
        }
        if (abs(i - j) > 1) {
            return result;
        }
        string n, c;
        for (auto c : s) {
            if (c >= '0' && c <= '9') {
                n.push_back(c);
            } else {
                c.push_back(c);
            }
        }
        if (i > j) {
            for (int k = 0; k < c.size(); k++) {
                result.push_back(c[k]);
                result.push_back(n[k]);
            }
            result.push_back(c.back());
        } else {
            for (int k = 0; k < n.size(); k++) {
                result.push_back(n[k]);
                result.push_back(c[k]);
            }
            if (i < j) {
                result.push_back(n.back());
            }
        }
        return result;
