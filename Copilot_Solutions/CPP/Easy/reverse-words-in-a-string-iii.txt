Synthesizing 10/10 solutions

=======

        int i = 0;
        for (int j = 0; j < s.size(); j++) {
            if (s[j] == ' ') {
                reverse(s.begin() + i, s.begin() + j);
                i = j + 1;
            }
        }
        reverse(s.begin() + i, s.end());
        return s;

=======

        int i = 0;
        int j = 0;
        while (j < s.size()) {
            if (s[j] == ' ') {
                reverse(s.begin() + i, s.begin() + j);
                i = j + 1;
            }
            j++;
        }
        reverse(s.begin() + i, s.end());
        return s;

=======

        int i = 0, j = 0;
        while (j < s.length()) {
            if (s[j] == ' ') {
                reverse(s.begin() + i, s.begin() + j);
                i = j + 1;
            }
            j++;
        }
        reverse(s.begin() + i, s.begin() + j);
        return s;

=======

        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] != ' ') j++;
            reverse(s.begin() + i, s.begin() + j);
            i = j + 1;
        }
        return s;

=======

        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] != ' ') {
                j++;
            }
            reverse(s.begin() + i, s.begin() + j);
            i = j + 1;
        }
        return s;

=======

        string res;
        int i = 0;
        while (i < s.size()) {
            int j = i;
            while (j < s.size() && s[j] != ' ') {
                j++;
            }
            reverse(s.begin() + i, s.begin() + j);
            res += s.substr(i, j - i) + " ";
            i = j + 1;
        }
        res.pop_back();
        return res;

=======

        string res = "";
        int n = s.length();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] != ' ') {
                j++;
            }
            for (int k = j - 1; k >= i; k--) {
                res.push_back(s[k]);
            }
            while (j < n && s[j] == ' ') {
                res.push_back(s[j]);
                j++;
            }
            i = j;
        }
        return res;

=======

        string result;
        string word;
        for (char c : s) {
            if (c != ' ') {
                word.push_back(c);
            } else {
                reverse(word.begin(), word.end());
                result += word;
                result += ' ';
                word.clear();
            }
        }
        reverse(word.begin(), word.end());
        result += word;
        return result;

=======

        int i = 0, j = 0;
        while (i < s.size()) {
            while (j < s.size() && s[j] != ' ') {
                j++;
            }
            int start = i, end = j - 1;
            while (start < end) {
                swap(s[start], s[end]);
                start++;
                end--;
            }
            i = j + 1;
            j = i;
        }
        return s;

=======

        int start = 0;
        int end = 0;
        string result;
        while(end < s.length()) {
            if (s[end] == ' ') {
                for (int i = end - 1; i >= start; i--) {
                    result.push_back(s[i]);
                }
                result.push_back(' ');
                start = end + 1;
            }
            end++;
        }
        for (int i = end - 1; i >= start; i--) {
            result.push_back(s[i]);
        }
        return result;
