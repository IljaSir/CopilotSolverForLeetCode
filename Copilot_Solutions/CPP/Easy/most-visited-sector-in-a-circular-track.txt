Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> res;
        int start = rounds[0];
        int end = rounds[rounds.size() - 1];
        if (start <= end) {
            for (int i = start; i <= end; i++) {
                res.push_back(i);
            }
        } else {
            for (int i = 1; i <= end; i++) {
                res.push_back(i);
            }
            for (int i = start; i <= n; i++) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> result;
        int start = rounds[0];
        int end = rounds[rounds.size() - 1];
        if (start <= end) {
            for (int i = start; i <= end; i++) {
                result.push_back(i);
            }
        } else {
            for (int i = 1; i <= end; i++) {
                result.push_back(i);
            }
            for (int i = start; i <= n; i++) {
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> res;
        int start = rounds[0], end = rounds[rounds.size() - 1];
        if (start <= end) {
            for (int i = start; i <= end; i++) {
                res.push_back(i);
            }
        } else {
            for (int i = 1; i <= end; i++) {
                res.push_back(i);
            }
            for (int i = start; i <= n; i++) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> ans;
        int start = rounds[0];
        int end = rounds[rounds.size()-1];
        if (start <= end) {
            for (int i = start; i <= end; i++) {
                ans.push_back(i);
            }
        } else {
            for (int i = 1; i <= end; i++) {
                ans.push_back(i);
            }
            for (int i = start; i <= n; i++) {
                ans.push_back(i);
            }
        }
        return ans;

=======

        vector<int> res;
        int m = rounds.size();
        int start = rounds[0];
        int end = rounds[m - 1];
        if (start <= end) {
            for (int i = start; i <= end; i++) {
                res.push_back(i);
            }
        } else {
            for (int i = 1; i <= end; i++) {
                res.push_back(i);
            }
            for (int i = start; i <= n; i++) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> res;
        vector<int> visit(n, 0);
        for (int i = 1; i < rounds.size(); i++) {
            int start = rounds[i - 1];
            int end = rounds[i];
            if (start > end) {
                end += n;
            }
            for (int j = start; j < end; j++) {
                visit[j % n]++;
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (visit[i] > max) {
                max = visit[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (visit[i] == max) {
                res.push_back(i + 1);
            }
        }
        return res;

=======

        vector<int> result;
        vector<int> count(n+1);
        for(int i=1;i<rounds.size();i++){
            int start=rounds[i-1];
            int end=rounds[i];
            if(start<end){
                for(int j=start;j<end;j++){
                    count[j]++;
                }
            }else{
                for(int j=1;j<end;j++){
                    count[j]++;
                }
                for(int j=start;j<=n;j++){
                    count[j]++;
                }
            }
        }
        int max=0;
        for(int i=1;i<=n;i++){
            if(count[i]>max){
                max=count[i];
            }
        }
        for(int i=1;i<=n;i++){
            if(count[i]==max){
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> visited(n,0);
        for (int i=1;i<rounds.size();i++){
            int start = rounds[i-1];
            int end = rounds[i];
            if (start < end){
                for (int j=start;j<=end;j++){
                    visited[j-1]++;
                }
            }else{
                for (int j=1;j<=end;j++){
                    visited[j-1]++;
                }
                for (int j=start;j<=n;j++){
                    visited[j-1]++;
                }
            }
        }
        vector<int> res;
        int max = 0;
        for (int i=0;i<n;i++){
            if (visited[i]>max){
                max = visited[i];
            }
        }
        for (int i=0;i<n;i++){
            if (visited[i]==max){
                res.push_back(i+1);
            }
        }
        return res;
