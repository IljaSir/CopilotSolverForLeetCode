Synthesizing 10/10 solutions

=======

        int prev = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                int num = 0;
                while (i < s.length() && s[i] >= '0' && s[i] <= '9') {
                    num = num * 10 + s[i] - '0';
                    i++;
                }
                if (num <= prev) {
                    return false;
                }
                prev = num;
            }
        }
        return true;

=======

        int prev = -1, cur = 0;
        for (int i = 0; i < s.size(); i++) {
            if (isdigit(s[i])) {
                cur = cur * 10 + (s[i] - '0');
            } else {
                if (cur != 0) {
                    if (cur <= prev) {
                        return false;
                    }
                    prev = cur;
                    cur = 0;
                }
            }
        }
        return true;

=======

        int n = s.size();
        int i = 0;
        int num = 0;
        int prev = 0;
        while (i < n) {
            if (s[i] >= '0' && s[i] <= '9') {
                num = 0;
                while (i < n && s[i] >= '0' && s[i] <= '9') {
                    num = num * 10 + (s[i] - '0');
                    i++;
                }
                if (num <= prev) {
                    return false;
                }
                prev = num;
            } else {
                i++;
            }
        }
        return true;

=======

        int num = 0;
        int last = 0;
        bool isNum = false;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                isNum = true;
                num = num * 10 + s[i] - '0';
            } else {
                if (isNum) {
                    if (num <= last) {
                        return false;
                    }
                    last = num;
                    num = 0;
                    isNum = false;
                }
            }
        }
        return true;

=======

        int last = 0;
        bool flag = true;
        for (int i = 0; i < s.size(); i++)
        {
            if (s[i] >= '0' && s[i] <= '9')
            {
                int cur = 0;
                while (i < s.size() && s[i] >= '0' && s[i] <= '9')
                {
                    cur = cur * 10 + s[i] - '0';
                    i++;
                }
                if (cur <= last)
                {
                    flag = false;
                    break;
                }
                last = cur;
            }
        }
        return flag;

=======

        int last = -1;
        int i = 0, n = s.length();
        while (i < n) {
            if (s[i] >= '0' && s[i] <= '9') {
                int num = 0;
                while (i < n && s[i] >= '0' && s[i] <= '9') {
                    num = num * 10 + s[i++] - '0';
                }
                if (num <= last) {
                    return false;
                }
                last = num;
            } else {
                ++i;
            }
        }
        return true;

=======

        int last = -1;
        string num;
        for (int i=0; i<s.size(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                num += s[i];
            } else if (num.size() > 0) {
                int cur = stoi(num);
                if (cur <= last) {
                    return false;
                }
                last = cur;
                num = "";
            }
        }
        if (num.size() > 0) {
            int cur = stoi(num);
            if (cur <= last) {
                return false;
            }
        }
        return true;

=======

        int num = 0;
        int last = -1;
        
        for (auto c : s) {
            if (c >= '0' && c <= '9') {
                num = num * 10 + (c - '0');
            } else {
                if (last >= num) return false;
                last = num;
                num = 0;
            }
        }
        
        return last < num;

=======

        int n = s.length();
        int i = 0;
        int last = -1;
        while (i < n) {
            int j = i;
            while (j < n && isdigit(s[j])) {
                j++;
            }
            if (j > i) {
                int v = stoi(s.substr(i, j - i));
                if (v <= last) {
                    return false;
                }
                last = v;
                i = j;
            } else {
                i++;
            }
        }
        return true;

=======

        int last_num = 0, num = 0;
        bool found_num = false;
        for (auto c: s) {
            if (c >= '0' && c <= '9') {
                num = num * 10 + (c - '0');
                found_num = true;
            } else {
                if (found_num) {
                    if (num <= last_num) return false;
                    last_num = num;
                    num = 0;
                    found_num = false;
                }
            }
        }
        return true;
