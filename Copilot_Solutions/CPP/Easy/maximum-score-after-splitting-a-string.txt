Synthesizing 10/10 solutions

=======

        int n = s.size();
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                right++;
            }
        }
        int ans = 0;
        for (int i = 0; i < n-1; i++) {
            if (s[i] == '0') {
                left++;
            } else {
                right--;
            }
            ans = max(ans, left + right);
        }
        return ans;

=======

        int n = s.size();
        int z = 0, o = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                z++;
            } else {
                o++;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                z--;
            } else {
                o--;
            }
            ans = max(ans, z + o);
        }
        return ans;

=======

        int n = s.size();
        int left = 0, right = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') right++;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == '0') left++;
            else right--;
            ans = max(ans, left + right);
        }
        return ans;

=======

        int n = s.size();
        int ones = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') ones++;
        }
        int ans = 0;
        int zeros = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (s[i] == '0') zeros++;
            else ones--;
            ans = max(ans, zeros + ones);
        }
        return ans;

=======

        int n = s.size();
        int cnt0 = 0, cnt1 = 0;
        for (char c: s) {
            if (c == '0') cnt0++;
            else cnt1++;
        }
        int res = 0, sum0 = 0, sum1 = 0;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == '0') sum0++;
            else sum1++;
            res = max(res, sum0 + cnt1 - sum1);
        }
        return res;

=======

        int n = s.size();
        int score = 0;
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                left++;
            }
        }
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == '0') {
                left--;
            } else {
                right++;
            }
            score = max(score, left + right);
        }
        return score;

=======

        int n = s.size();
        int ans = 0;
        int ones = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') ones++;
        }
        int zeros = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (s[i] == '0') zeros++;
            else ones--;
            ans = max(ans, zeros + ones);
        }
        return ans;

=======

        int count = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '1') count++;
        }
        int max = 0;
        int count1 = 0;
        for (int i = 0; i < s.size() - 1; i++) {
            if (s[i] == '0') count1++;
            else count--;
            if (count1 + count > max) max = count1 + count;
        }
        return max;

=======

        int num0 = 0;
        for (auto c : s) {
            if (c == '0') {
                num0 += 1;
            }
        }
        int num1 = s.size() - num0;
        int maxScore = 0;
        int num0Left = 0;
        int num1Right = num1;
        for (int i = 0; i < s.size() - 1; ++i) {
            if (s[i] == '0') {
                num0Left += 1;
            } else {
                num1Right -= 1;
            }
            maxScore = max(maxScore, num0Left + num1Right);
        }
        return maxScore;

=======

        int n = s.size();
        int cnt = 0;
        for (char c : s) {
            if (c == '0') cnt++;
        }
        int res = 0;
        int left = 0;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == '0') left++;
            else left--;
            res = max(res, left + cnt);
        }
        return res;
