Synthesizing 10/10 solutions

=======

        int t = time % (2 * n - 2);
        if (t == 0) {
            return n;
        }
        if (t <= n) {
            return t;
        }
        return 2 * n - t;

=======

        int i = time % (2 * n - 2);
        if (i == 0) return n;
        if (i <= n) return i;
        return 2 * n - i;

=======

        int dir = 1;
        int pos = 1;
        for (int i = 1; i < time; ++i) {
            pos += dir;
            if (pos == n) {
                dir = -1;
            } else if (pos == 1) {
                dir = 1;
            }
        }
        return pos;

=======

        int ans = time % (2 * n - 2);
        if (ans == 0) return n;
        if (ans > n) return 2 * n - ans;
        return ans;

=======

        int c = time / (n - 1);
        int r = time % (n - 1);
        if (c % 2 == 0) {
            return r + 1;
        }
        else {
            return n - r;
        }

=======

        int x = time % (2*n - 2);
        if (x == 0) return n;
        if (x <= n) return x;
        return 2*n - x;

=======

        int result = 0;
        if (n % 2 == 0) {
            result = time % n;
            if (result == 0) {
                result = n;
            }
        } else {
            result = (time % (2 * n - 2));
            if (result == 0) {
                result = n;
            } else if (result > n) {
                result = 2 * n - result;
            }
        }
        return result;

=======

        int i = 0;
        while (time--) {
            if (i == 0 || i == n - 1) {
                i = n - i - 1;
            } else {
                i = n - i - 2;
            }
        }
        return i + 1;

=======

        int m = 2 * n - 2;
        int pos = (time - 1) % m;
        if (pos < n) return pos + 1;
        pos = m - pos;
        return pos + 1;

=======

        int i, j, k;
        int dir = 1;
        int cur = 1;
        for (i = 0; i < time; i++) {
            cur += dir;
            if (cur == 1 || cur == n) {
                dir = -dir;
            }
        }
        return cur;
