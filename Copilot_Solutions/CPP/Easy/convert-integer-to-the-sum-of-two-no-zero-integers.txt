Synthesizing 10/10 solutions

=======

        for (int a = 1; a < n; ++a) {
            int b = n - a;
            if (to_string(a).find('0') == string::npos && to_string(b).find('0') == string::npos) {
                return {a, b};
            }
        }
        return {};

=======

        for (int i = 1; i < n; i++) {
            if (isNoZero(i) && isNoZero(n - i)) {
                return {i, n - i};
            }
        }
        return {};

=======

        for (int i = 1; i < n; i++) {
            if (check(i) && check(n - i)) {
                return {i, n - i};
            }
        }
        return {};
    }
    
    bool check(int n) {
        while (n) {
            if (n % 10 == 0) {
                return false;
            }
            n /= 10;
        }
        return true;

=======

        for (int i = 1; i < n; i++) {
            int a = i;
            int b = n - i;
            if (a % 10 != 0 && b % 10 != 0) {
                if (a / 10 % 10 != 0 && b / 10 % 10 != 0) {
                    if (a / 100 % 10 != 0 && b / 100 % 10 != 0) {
                        if (a / 1000 % 10 != 0 && b / 1000 % 10 != 0) {
                            if (a / 10000 % 10 != 0 && b / 10000 % 10 != 0) {
                                return {a, b};
                            }
                        }
                    }
                }
            }
        }
        return {};

=======

        vector<int> result;
        for (int i = 1; i < n; i++) {
            if (to_string(i).find('0') == string::npos && to_string(n - i).find('0') == string::npos) {
                result.push_back(i);
                result.push_back(n - i);
                break;
            }
        }
        return result;

=======

        vector<int> ans;
        for (int i = 1; i < n; i++) {
            if (isNoZero(i) && isNoZero(n - i)) {
                ans.push_back(i);
                ans.push_back(n - i);
                break;
            }
        }
        return ans;
    }
    
    bool isNoZero(int n) {
        while (n > 0) {
            if (n % 10 == 0) return false;
            n /= 10;
        }
        return true;

=======

        for (int i = 1; i < n; i++) {
            int j = n - i;
            if (std::to_string(i).find('0') == std::string::npos &&
                std::to_string(j).find('0') == std::string::npos) {
                return {i, j};
            }
        }
        return {};

=======

        vector<int> result;
        for (int i = 1; i < n; i++) {
            if (i > 10 && i % 10 == 0) {
                continue;
            }
            int j = n - i;
            int temp = j;
            while (temp > 0) {
                if (temp % 10 == 0) {
                    break;
                }
                temp /= 10;
            }
            if (temp == 0) {
                result.push_back(i);
                result.push_back(j);
                break;
            }
        }
        return result;

=======

        int a = 1;
        int b = n - 1;
        while(a <= b){
            if(a % 10 != 0 && b % 10 != 0){
                return {a, b};
            }
            a++;
            b--;
        }
        return {};

=======

        vector<int> ret;
        for(int i = 1; i < n; i++) {
            if (!check(i) && !check(n - i)) {
                ret.push_back(i);
                ret.push_back(n - i);
                break;
            }
        }
        return ret;
    }
    bool check(int n) {
        while(n) {
            if (n % 10 == 0) return true;
            n /= 10;
        }
        return false;
