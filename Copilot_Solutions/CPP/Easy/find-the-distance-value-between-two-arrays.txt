Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < arr1.size(); i++) {
            bool flag = true;
            for (int j = 0; j < arr2.size(); j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) count++;
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < arr1.size(); i++) {
            bool flag = true;
            for (int j = 0; j < arr2.size(); j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < arr1.size(); i++) {
            bool flag = true;
            for (int j = 0; j < arr2.size(); j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) ans++;
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < arr1.size(); ++i) {
            bool flag = true;
            for (int j = 0; j < arr2.size(); ++j) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) res++;
        }
        return res;

=======

        int cnt = 0;
        for (int i = 0; i < arr1.size(); i++) {
            bool flag = true;
            for (int j = 0; j < arr2.size(); j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) cnt++;
        }
        return cnt;

=======

        int count = 0;
        for (int i : arr1) {
            bool flag = true;
            for (int j : arr2) {
                if (abs(i - j) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < arr1.size(); i++) {
            int j = 0;
            for (; j < arr2.size(); j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    break;
                }
            }
            if (j == arr2.size()) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr1.size();
        int m = arr2.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            bool flag = true;
            for (int j = 0; j < m; j++) {
                if (abs(arr1[i] - arr2[j]) <= d) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;

=======

        vector<int> arr3;
        for(int i=0;i<arr1.size();i++){
            for(int j=0;j<arr2.size();j++){
                arr3.push_back(abs(arr1[i]-arr2[j]));
            }
        }
        int count=0;
        for(int i=0;i<arr3.size();i++){
            if(arr3[i]>d){
                count++;
            }
        }
        return count;
