Synthesizing 10/10 solutions

=======

        int l = 0, r = letters.size();
        while (l < r) {
            int m = l + (r - l) / 2;
            if (letters[m] <= target) l = m + 1;
            else r = m;
        }
        return letters[l % letters.size()];

=======

        int l = 0, r = letters.size() - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (letters[m] <= target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return letters[l] > target ? letters[l] : letters[0];

=======

        int l = 0, r = letters.size();
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (letters[mid] <= target) l = mid + 1;
            else r = mid;
        }
        return letters[l % letters.size()];

=======

        int n = letters.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (letters[m] > target) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return letters[l] > target ? letters[l] : letters[0];

=======

        int l = 0, r = letters.size() - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (letters[m] <= target) l = m + 1;
            else r = m - 1;
        }
        return letters[l % letters.size()];

=======

        int n = letters.size();
        int lo = 0, hi = n - 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (letters[mid] <= target) lo = mid + 1;
            else hi = mid;
        }
        return letters[lo] <= target ? letters[0] : letters[lo];

=======

        int n = letters.size();
        int l = 0;
        int r = n - 1;
        while (l < r) {
            int m = (l + r) / 2;
            if (letters[m] <= target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return letters[l] > target ? letters[l] : letters[0];

=======

        int l = 0;
        int r = letters.size() - 1;
        if (target >= letters[r]) {
            return letters[0];
        }
        while (l < r) {
            int m = (l + r) / 2;
            if (letters[m] <= target) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return letters[l];

=======

        int n = letters.size();
        int l = 0, r = n-1;
        while(l < r) {
            int m = l + (r-l)/2;
            if(letters[m] <= target) {
                l = m+1;
            } else {
                r = m;
            }
        }
        return letters[l] > target ? letters[l] : letters[0];

=======

        int low = 0;
        int high = letters.size()-1;
        while (low <= high) {
            int mid = low + (high - low)/2;
            if (letters[mid] == target) {
                if (mid == letters.size()-1) {
                    return letters[0];
                } else {
                    return letters[mid+1];
                }
            } else if (letters[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return letters[low % letters.size()];
