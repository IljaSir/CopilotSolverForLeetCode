Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long long l = 0, r = n;
        while (l < r) {
            long long mid = l + (r - l + 1) / 2;
            if (mid * (mid + 1) / 2 <= n) l = mid;
            else r = mid - 1;
        }
        return l;

=======

        int i = 1;
        while (n >= i) {
            n -= i;
            i++;
        }
        return i - 1;

=======

        int i = 1;
        while (i <= n) {
            n -= i;
            i++;
        }
        return i-1;

=======

        int i = 0;
        while(n > 0) {
            i++;
            n -= i;
        }
        return n == 0 ? i : i-1;

=======

        return (int)((sqrt(1 + 8 * (long)n) - 1) / 2);

=======

        // 1 + 2 + 3 + ... + k <= n
        // 1^2 + 2^2 + 3^2 + ... + k^2 <= n
        // (k^2 + k) / 2 <= n
        // k^2 + k - 2n <= 0
        // k^2 + k - 2n = (k - 1/2)^2 - 1/4
        // k = 1/2 - 1/2 * sqrt(1 + 8n)
        // k = floor(1/2 - 1/2 * sqrt(1 + 8n))
        return (int)floor(0.5 - 0.5 * sqrt(1 + 8.0 * n));

=======

        int64_t l = 1, r = n, m;
        while (l <= r) {
            m = l + (r - l) / 2;
            int64_t s = m * (m + 1) / 2;
            if (s == n) return m;
            else if (s < n) l = m + 1;
            else r = m - 1;
        }
        return r;

=======

        return (int) ((sqrt(1+8*(long long)n)-1)/2);
