Synthesizing 10/10 solutions

=======

        vector<int> sortedArr = arr;
        sort(sortedArr.begin(), sortedArr.end());
        unordered_map<int, int> rankMap;
        int rank = 1;
        for (int i = 0; i < sortedArr.size(); i++) {
            if (rankMap.find(sortedArr[i]) == rankMap.end()) {
                rankMap[sortedArr[i]] = rank++;
            }
        }
        vector<int> res;
        for (int i = 0; i < arr.size(); i++) {
            res.push_back(rankMap[arr[i]]);
        }
        return res;

=======

        vector<int> sorted = arr;
        sort(sorted.begin(), sorted.end());
        unordered_map<int, int> rank;
        int r = 1;
        for (int i = 0; i < sorted.size(); ++i) {
            if (i == 0 || sorted[i] != sorted[i-1]) rank[sorted[i]] = r++;
        }
        for (int i = 0; i < arr.size(); ++i) {
            arr[i] = rank[arr[i]];
        }
        return arr;

=======

        vector<int> sortedArr = arr;
        sort(sortedArr.begin(), sortedArr.end());
        unordered_map<int, int> rank;
        int r = 1;
        for (int i = 0; i < sortedArr.size(); ++i) {
            if (rank.find(sortedArr[i]) == rank.end()) {
                rank[sortedArr[i]] = r++;
            }
        }
        vector<int> ans;
        for (int i = 0; i < arr.size(); ++i) {
            ans.push_back(rank[arr[i]]);
        }
        return ans;

=======

        vector<int> res;
        map<int, int> rank;
        for (int i = 0; i < arr.size(); i++) {
            rank[arr[i]] = 0;
        }
        int r = 1;
        for (auto &it : rank) {
            it.second = r++;
        }
        for (int i = 0; i < arr.size(); i++) {
            res.push_back(rank[arr[i]]);
        }
        return res;

=======

        vector<int> sorted = arr;
        sort(sorted.begin(), sorted.end());
        unordered_map<int, int> rank;
        for(int i = 0; i < sorted.size(); i++){
            if(rank.find(sorted[i]) == rank.end()){
                rank[sorted[i]] = i + 1;
            }
        }
        for(int i = 0; i < arr.size(); i++){
            arr[i] = rank[arr[i]];
        }
        return arr;

=======

        vector<int> res;
        set<int> s;
        for (int i = 0; i < arr.size(); i++) {
            s.insert(arr[i]);
        }
        map<int, int> m;
        int rank = 1;
        for (auto it = s.begin(); it != s.end(); it++) {
            m.insert(pair<int, int>(*it, rank));
            rank++;
        }
        for (int i = 0; i < arr.size(); i++) {
            res.push_back(m[arr[i]]);
        }
        return res;

=======

        map<int, int> rank;
        for (auto& i : arr) {
            rank[i] = 0;
        }
        int count = 1;
        for (auto& i : rank) {
            i.second = count++;
        }
        for (auto& i : arr) {
            i = rank[i];
        }
        return arr;

=======

        vector<int> res;
        if (arr.size() == 0) return res;
        vector<int> sorted(arr);
        sort(sorted.begin(), sorted.end());
        unordered_map<int, int> rank;
        rank[sorted[0]] = 1;
        int r = 1;
        for (int i = 1; i < sorted.size(); i++) {
            if (sorted[i] != sorted[i-1]) {
                rank[sorted[i]] = ++r;
            }
        }
        for (int i = 0; i < arr.size(); i++) {
            res.push_back(rank[arr[i]]);
        }
        return res;

=======

        vector<int> res;
        map<int, int> m;
        for (auto& x : arr) {
            m[x] = 0;
        }
        int rank = 1;
        for (auto& x : m) {
            m[x.first] = rank++;
        }
        for (auto& x : arr) {
            res.push_back(m[x]);
        }
        return res;

=======

        vector<int> res;
        map<int,int> m;
        for(auto i:arr){
            m[i]++;
        }
        int rank=1;
        for(auto i=m.begin();i!=m.end();i++){
            i->second=rank++;
        }
        for(auto i:arr){
            res.push_back(m[i]);
        }
        return res;
