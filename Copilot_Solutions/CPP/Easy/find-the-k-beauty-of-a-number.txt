Synthesizing 8/10 solutions

=======

        string s = to_string(num);
        int res = 0;
        for (int i = 0; i <= s.size() - k; ++i) {
            if (s[i] == '0') continue;
            if (stoi(s.substr(i, k)) % num == 0) ++res;
        }
        return res;

=======

        string s = to_string(num);
        int n = s.size();
        int ans = 0;
        for (int i = 0; i <= n - k; ++i) {
            int x = stoi(s.substr(i, k));
            if (x && num % x == 0) {
                ans++;
            }
        }
        return ans;

=======

        string s = to_string(num);
        int res = 0;
        for (int i = 0; i + k <= s.size(); ++i) {
            string t = s.substr(i, k);
            int n = stoi(t);
            if (num % n == 0) ++res;
        }
        return res;

=======

        int res = 0;
        string s = to_string(num);
        int n = s.size();
        for (int i = 0; i <= n - k; ++i) {
            string t = s.substr(i, k);
            if (t[0] == '0') continue;
            int d = stoi(t);
            if (num % d == 0) {
                ++res;
            }
        }
        return res;

=======

        int count = 0;
        string str = to_string(num);
        for (int i = 0; i + k <= str.length(); ++i) {
            string sub = str.substr(i, k);
            if (sub[0] == '0' && sub.length() > 1) {
                continue;
            }
            int n = stoi(sub);
            if (num % n == 0) {
                ++count;
            }
        }
        return count;

=======

        string s = to_string(num);
        int ans = 0;
        for (int i = 0; i + k <= s.size(); ++i) {
            int j = i + k;
            int x = stoi(s.substr(i, j - i));
            if (x % num == 0) {
                ++ans;
            }
        }
        return ans;

=======

        int res = 0;
        int n = 0;
        while (num) {
            n = (num % 10) * pow(10, k - 1) + n;
            if (num % n == 0) {
                ++res;
            }
            num /= 10;
        }
        return res;

=======

        int count = 0;
        string num_str = to_string(num);
        for(int i = 0; i + k <= num_str.size(); ++i){
            string sub_str = num_str.substr(i, k);
            if(sub_str[0] == '0' && k > 1)
                continue;
            int sub_num = stoi(sub_str);
            if(num % sub_num == 0)
                count++;
        }
        return count;
