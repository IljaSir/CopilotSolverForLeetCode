Synthesizing 10/10 solutions

=======

        vector<int> evens;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] % 2 == 0) {
                evens.push_back(nums[i]);
            }
        }
        if (evens.size() == 0) {
            return -1;
        }
        sort(evens.begin(), evens.end());
        int max = 1;
        int count = 1;
        int res = evens[0];
        for (int i = 1; i < evens.size(); i++) {
            if (evens[i] == evens[i-1]) {
                count++;
            } else {
                count = 1;
            }
            if (count > max) {
                max = count;
                res = evens[i];
            }
        }
        return res;

=======

        map<int, int> m;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] % 2 == 0)
            {
                m[nums[i]]++;
            }
        }
        int max = INT_MIN;
        int result = -1;
        for (auto i = m.begin(); i != m.end(); i++)
        {
            if (i->second > max)
            {
                max = i->second;
                result = i->first;
            }
        }
        return result;

=======

        map<int, int> even;
        for (auto num : nums) {
            if (num % 2 == 0) {
                even[num]++;
            }
        }
        if (even.empty()) {
            return -1;
        }
        int max = 0;
        int min = 0;
        for (auto& e : even) {
            if (e.second > max) {
                max = e.second;
                min = e.first;
            } else if (e.second == max && e.first < min) {
                min = e.first;
            }
        }
        return min;

=======

        map<int, int> m;
        int max = -1;
        int res = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] % 2 == 0) {
                m[nums[i]]++;
                if (m[nums[i]] > max) {
                    max = m[nums[i]];
                    res = nums[i];
                }
            }
        }
        return res;

=======

        unordered_map<int, int> count;
        for (auto n : nums) {
            if (n % 2 == 0) {
                count[n]++;
            }
        }
        int maxCount = 0;
        int result = -1;
        for (auto& [n, c] : count) {
            if (c > maxCount) {
                maxCount = c;
                result = n;
            }
        }
        return result;

=======

        int maxCount = 0;
        int maxNum = -1;
        vector<int> count(100001, 0);
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] % 2 == 0) {
                count[nums[i]]++;
                if (count[nums[i]] > maxCount) {
                    maxCount = count[nums[i]];
                    maxNum = nums[i];
                } else if (count[nums[i]] == maxCount) {
                    maxNum = min(maxNum, nums[i]);
                }
            }
        }
        return maxNum;

=======

        int n = nums.size();
        int maxCount = 0, maxElement = -1;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                mp[nums[i]]++;
                if (mp[nums[i]] > maxCount) {
                    maxCount = mp[nums[i]];
                    maxElement = nums[i];
                }
            }
        }
        return maxElement;

=======

        vector<int> cnt(100001);
        for (int n: nums) {
            if (n % 2 == 0) {
                cnt[n]++;
            }
        }
        int maxcnt = 0;
        int ans = -1;
        for (int i = 0; i < 100001; i++) {
            if (cnt[i] > maxcnt) {
                maxcnt = cnt[i];
                ans = i;
            }
        }
        return ans;

=======

        unordered_map<int, int> even;
        int max = 0;
        int ans = -1;
        for(auto i : nums){
            if(i % 2 == 0){
                even[i]++;
                if(even[i] > max){
                    max = even[i];
                    ans = i;
                }
            }
        }
        return ans;

=======

        int max = 0;
        int maxNum = 0;
        int count[100001] = {0};
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 0){
                count[nums[i]]++;
                if(count[nums[i]] > max){
                    max = count[nums[i]];
                    maxNum = nums[i];
                }
            }
        }
        if(max == 0){
            return -1;
        }
        return maxNum;
