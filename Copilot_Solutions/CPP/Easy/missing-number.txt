Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int sum = n * (n + 1) / 2;
        for (int num : nums) {
            sum -= num;
        }
        return sum;

=======

        int n = nums.size();
        int sum = n*(n+1)/2;
        for (int i = 0; i < n; i++) {
            sum -= nums[i];
        }
        return sum;

=======

        int n = nums.size();
        int sum = 0;
        for (auto num : nums) {
            sum += num;
        }
        return n * (n + 1) / 2 - sum;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        return (n * (n + 1) / 2) - sum;

=======

        int n = nums.size();
        int sum = (n*(n+1))/2;
        for(int i=0; i<n; i++){
            sum -= nums[i];
        }
        return sum;

=======

        int sum = 0;
        for (auto i : nums) {
            sum += i;
        }
        int n = nums.size();
        return n * (n + 1) / 2 - sum;

=======

        int n = nums.size();
        int i = 0;
        while (i < n) {
            if (nums[i] < n && nums[i] != i) {
                swap(nums[i], nums[nums[i]]);
            } else {
                i++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != i) {
                return i;
            }
        }
        return n;

=======

        int n = nums.size();
        int sum = (n * (n + 1)) / 2;
        int total = 0;
        for (int i = 0; i < nums.size(); i++) {
            total += nums[i];
        }
        return sum - total;

=======

        int n = nums.size();
        int sum = n * (n + 1) / 2;
        for (auto& x : nums) {
            sum -= x;
        }
        return sum;
