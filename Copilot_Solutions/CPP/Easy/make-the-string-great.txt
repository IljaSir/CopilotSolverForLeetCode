Synthesizing 10/10 solutions

=======

        stack<char> st;
        for (auto c : s) {
            if (!st.empty() && abs(c - st.top()) == 32) {
                st.pop();
            } else {
                st.push(c);
            }
        }
        string res;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        for (int i = 0; i < s.length() - 1; i++) {
            if (s[i] == s[i + 1] + 32 || s[i] == s[i + 1] - 32) {
                s.erase(i, 2);
                i = -1;
            }
        }
        return s;

=======

        int n = s.size();
        for (int i = 0; i < n - 1; ++i) {
            if (abs(s[i] - s[i + 1]) == 32) {
                s.erase(i, 2);
                i = -1;
                n -= 2;
            }
        }
        return s;

=======

        int len = s.length();
        int i = 0;
        while (i < len - 1) {
            if (abs(s[i] - s[i + 1]) == 32) {
                s.erase(i, 2);
                i = 0;
                len -= 2;
            } else {
                i++;
            }
        }
        return s;

=======

        string t;
        for (auto c : s) {
            if (!t.empty() && abs(c - t.back()) == 32) {
                t.pop_back();
            } else {
                t.push_back(c);
            }
        }
        return t;

=======

        stack<char> st;
        for (auto ch : s) {
            if (!st.empty() && (abs(st.top() - ch) == 32)) {
                st.pop();
            } else {
                st.push(ch);
            }
        }
        string res;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res;
        for (auto c : s) {
            if (!res.empty() && (c ^ res.back()) == 32) {
                res.pop_back();
            } else {
                res.push_back(c);
            }
        }
        return res;

=======

        stack<char> stk;
        for (char c : s) {
            if (stk.empty() || stk.top() != c) {
                stk.push(c);
            } else {
                stk.pop();
            }
        }
        string ans = "";
        while (!stk.empty()) {
            ans = stk.top() + ans;
            stk.pop();
        }
        return ans;

=======

        int n = s.size();
        string res;
        for (int i = 0; i < n; ++i) {
            if (res.size() && abs(s[i] - res.back()) == 32) {
                res.pop_back();
            } else {
                res.push_back(s[i]);
            }
        }
        return res;

=======

        stack<char> stk;
        for (auto& ch : s) {
            if (stk.empty()) {
                stk.push(ch);
            } else {
                if (abs(ch - stk.top()) == 32) {
                    stk.pop();
                } else {
                    stk.push(ch);
                }
            }
        }
        string ans;
        while (!stk.empty()) {
            ans.push_back(stk.top());
            stk.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
