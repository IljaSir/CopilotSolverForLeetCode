Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            m[nums[i]]++;
        }
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (m[a] == m[b]) {
                return a > b;
            }
            return m[a] < m[b];
        });
        return nums;

=======

        map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            m[nums[i]]++;
        }
        sort(nums.begin(), nums.end(), [&m](int a, int b) {
            if (m[a] == m[b]) {
                return a > b;
            }
            return m[a] < m[b];
        });
        return nums;

=======

        unordered_map<int, int> m;
        for (int num : nums) {
            m[num]++;
        }
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (m[a] == m[b]) {
                return a > b;
            }
            return m[a] < m[b];
        });
        return nums;

=======

        unordered_map<int, int> m;
        for (int n : nums) {
            m[n]++;
        }
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (m[a] == m[b]) {
                return a > b;
            }
            return m[a] < m[b];
        });
        return nums;

=======

        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        sort(nums.begin(), nums.end(), [&freq](int a, int b) {
            if (freq[a] == freq[b]) {
                return a > b;
            }
            return freq[a] < freq[b];
        });
        return nums;

=======

        unordered_map<int, int> freq;
        for (int x : nums) {
            freq[x]++;
        }
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (freq[a] != freq[b]) {
                return freq[a] < freq[b];
            }
            return a > b;
        });
        return nums;

=======

        int n = nums.size();
        map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[nums[i]]++;
        }
        vector<pair<int, int>> v;
        for (auto it = m.begin(); it != m.end(); it++) {
            v.push_back(make_pair(it->first, it->second));
        }
        sort(v.begin(), v.end(), [](pair<int, int> &a, pair<int, int> &b) {
            if (a.second == b.second) return a.first > b.first;
            return a.second < b.second;
        });
        vector<int> res;
        for (int i = 0; i < v.size(); i++) {
            for (int j = 0; j < v[i].second; j++) {
                res.push_back(v[i].first);
            }
        }
        return res;

=======

        map<int, int> freq;
        for (auto& num : nums) {
            freq[num]++;
        }
        sort(nums.begin(), nums.end(), [&freq](int a, int b) {
            if (freq[a] == freq[b]) {
                return a > b;
            } else {
                return freq[a] < freq[b];
            }
        });
        return nums;

=======

        map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        sort(nums.begin(), nums.end(), [&freq](int &a, int &b) {
            if (freq[a] == freq[b]) {
                return a > b;
            }
            return freq[a] < freq[b];
        });
        return nums;

=======

        map<int, int> freq;
        for (auto i : nums) {
            freq[i]++;
        }
        
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            if (freq[a] == freq[b]) {
                return a > b;
            }
            return freq[a] < freq[b];
        });
        return nums;
