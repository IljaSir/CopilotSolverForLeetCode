Synthesizing 10/10 solutions

=======

        vector<int> odd;
        vector<int> even;
        while (num) {
            int digit = num % 10;
            if (digit & 1) {
                odd.push_back(digit);
            } else {
                even.push_back(digit);
            }
            num /= 10;
        }
        sort(odd.begin(), odd.end());
        sort(even.begin(), even.end());
        int ans = 0;
        int idx = 0;
        while (idx < odd.size()) {
            ans = ans * 10 + odd[idx++];
        }
        idx = 0;
        while (idx < even.size()) {
            ans = ans * 10 + even[idx++];
        }
        return ans;

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> odd, even;
        for (int i = 0; i < n; ++i) {
            if ((s[i] - '0') % 2 == 0) {
                even.push_back(i);
            } else {
                odd.push_back(i);
            }
        }
        int i = 0, j = 0;
        while (i < even.size() && j < odd.size()) {
            if (s[even[i]] < s[odd[j]]) {
                swap(s[even[i]], s[odd[j]]);
                i++;
                j++;
            } else {
                j++;
            }
        }
        return stoi(s);

=======

        string s = to_string(num);
        sort(s.begin(), s.end(), [](char a, char b) {
            return (a - '0') % 2 > (b - '0') % 2;
        });
        return stoi(s);

=======

        vector<int> even;
        vector<int> odd;
        while(num) {
            int digit = num % 10;
            if(digit % 2 == 0) {
                even.push_back(digit);
            } else {
                odd.push_back(digit);
            }
            num /= 10;
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end(), greater<int>());
        int res = 0;
        int i = 0, j = 0;
        while(i < even.size() || j < odd.size()) {
            if(i < even.size()) {
                res = res * 10 + even[i];
                i++;
            }
            if(j < odd.size()) {
                res = res * 10 + odd[j];
                j++;
            }
        }
        return res;

=======

        int arr[10] = {0};
        while (num) {
            arr[num%10]++;
            num /= 10;
        }
        int res = 0;
        for (int i = 9; i >= 0; --i) {
            while (arr[i]--) {
                res = res * 10 + i;
            }
        }
        return res;
    }
    int maximumSwap(int num) {
        int arr[10] = {0};
        int pos[10] = {0};
        int pos2[10] = {0};
        int n = 0;
        while (num) {
            arr[n] = num % 10;
            pos[n] = n;
            pos2[n] = n;
            num /= 10;
            ++n;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 10; ++j) {
                if (arr[i] == j) continue;
                if (arr[i] % 2 == j % 2) {
                    if (pos[j] > i) {
                        swap(arr[i], arr[pos[j]]);
                        int res = largestInteger(arr, n);
                        swap(arr[i], arr[pos[j]]);
                        return res;
                    }
                }
            }
        }
        return largestInteger(arr, n);

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> even, odd;
        for (char c : s) {
            if ((c - '0') % 2 == 0) even.push_back(c - '0');
            else odd.push_back(c - '0');
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end());
        int i = 0, j = 0;
        string res;
        while (i < even.size() && j < odd.size()) {
            if (even[i] > odd[j]) {
                res += (even[i++] + '0');
            } else {
                res += (odd[j++] + '0');
            }
        }
        while (i < even.size()) res += (even[i++] + '0');
        while (j < odd.size()) res += (odd[j++] + '0');
        return stoi(res);

=======

        vector<int> even;
        vector<int> odd;
        while(num){
            int r = num%10;
            if(r%2==0){
                even.push_back(r);
            }else{
                odd.push_back(r);
            }
            num/=10;
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end());
        int i=0, j=0;
        int ans = 0;
        while(i<even.size() || j<odd.size()){
            if(i<even.size()){
                ans = ans*10 + even[i++];
            }
            if(j<odd.size()){
                ans = ans*10 + odd[j++];
            }
        }
        return ans;

=======

        vector<int> odd;
        vector<int> even;
        int ret = 0;
        while(num) {
            int digit = num % 10;
            if(digit % 2 == 0) {
                even.push_back(digit);
            } else {
                odd.push_back(digit);
            }
            num /= 10;
        }
        sort(odd.begin(), odd.end(), greater<int>());
        sort(even.begin(), even.end(), greater<int>());
        int i = 0;
        int j = 0;
        while(i < odd.size() || j < even.size()) {
            if(i < odd.size() && j < even.size()) {
                if(odd[i] > even[j]) {
                    ret = ret * 10 + odd[i];
                    i++;
                } else {
                    ret = ret * 10 + even[j];
                    j++;
                }
            } else if(i < odd.size()) {
                ret = ret * 10 + odd[i];
                i++;
            } else {
                ret = ret * 10 + even[j];
                j++;
            }
        }
        return ret;

=======

        int res = 0;
        int n = 0;
        while (num) {
            int d = num % 10;
            num /= 10;
            if (d % 2 == 0) {
                res += d * pow(10, n);
                ++n;
            }
        }
        while (num) {
            int d = num % 10;
            num /= 10;
            if (d % 2 == 1) {
                res += d * pow(10, n);
                ++n;
            }
        }
        return res;

=======

        string str = to_string(num);
        int n = str.size();
        for (int i = 0; i < n; ++i) {
            int max = i;
            for (int j = i; j < n; ++j) {
                if ((str[j] - '0') % 2 == (str[i] - '0') % 2 && str[j] > str[max]) {
                    max = j;
                }
            }
            swap(str[i], str[max]);
        }
        return stoi(str);
