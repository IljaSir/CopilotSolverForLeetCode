Synthesizing 10/10 solutions

=======

        set<int> s1;
        set<int> s2;
        for (int i = 0; i < nums1.size(); i++) {
            s1.insert(nums1[i]);
        }
        for (int i = 0; i < nums2.size(); i++) {
            s2.insert(nums2[i]);
        }
        vector<int> v1;
        vector<int> v2;
        for (auto it = s1.begin(); it != s1.end(); it++) {
            if (s2.find(*it) == s2.end()) {
                v1.push_back(*it);
            }
        }
        for (auto it = s2.begin(); it != s2.end(); it++) {
            if (s1.find(*it) == s1.end()) {
                v2.push_back(*it);
            }
        }
        return {v1, v2};

=======

        unordered_set<int> s1(nums1.begin(), nums1.end());
        unordered_set<int> s2(nums2.begin(), nums2.end());
        vector<vector<int>> res;
        vector<int> v1, v2;
        for (int i = 0; i < nums1.size(); ++i) {
            if (s2.find(nums1[i]) == s2.end()) {
                v1.push_back(nums1[i]);
            }
        }
        for (int i = 0; i < nums2.size(); ++i) {
            if (s1.find(nums2[i]) == s1.end()) {
                v2.push_back(nums2[i]);
            }
        }
        res.push_back(v1);
        res.push_back(v2);
        return res;

=======

        vector<vector<int>> res;
        unordered_set<int> s1(nums1.begin(), nums1.end());
        unordered_set<int> s2(nums2.begin(), nums2.end());
        vector<int> v1, v2;
        for (auto i : s1) {
            if (s2.find(i) == s2.end()) {
                v1.push_back(i);
            }
        }
        for (auto i : s2) {
            if (s1.find(i) == s1.end()) {
                v2.push_back(i);
            }
        }
        res.push_back(v1);
        res.push_back(v2);
        return res;

=======

        unordered_map<int, int> map1;
        for (int i = 0; i < nums1.size(); i++) {
            map1[nums1[i]]++;
        }
        unordered_map<int, int> map2;
        for (int i = 0; i < nums2.size(); i++) {
            map2[nums2[i]]++;
        }
        vector<vector<int>> result;
        vector<int> diff1;
        for (auto& it : map1) {
            if (map2.find(it.first) == map2.end()) {
                diff1.push_back(it.first);
            }
        }
        result.push_back(diff1);
        vector<int> diff2;
        for (auto& it : map2) {
            if (map1.find(it.first) == map1.end()) {
                diff2.push_back(it.first);
            }
        }
        result.push_back(diff2);
        return result;

=======

        unordered_set<int> s1(nums1.begin(), nums1.end());
        unordered_set<int> s2(nums2.begin(), nums2.end());
        vector<vector<int>> ans(2);
        for (auto x: nums1) {
            if (s2.find(x) == s2.end()) {
                ans[0].push_back(x);
            }
        }
        for (auto x: nums2) {
            if (s1.find(x) == s1.end()) {
                ans[1].push_back(x);
            }
        }
        return ans;

=======

        vector<vector<int>> result;
        vector<int> diff1;
        vector<int> diff2;
        unordered_map<int, int> m1;
        unordered_map<int, int> m2;
        for (int i = 0; i < nums1.size(); i++) {
            m1[nums1[i]]++;
        }
        for (int i = 0; i < nums2.size(); i++) {
            m2[nums2[i]]++;
        }
        for (auto it = m1.begin(); it != m1.end(); it++) {
            if (m2.find(it->first) == m2.end()) {
                diff1.push_back(it->first);
            }
        }
        for (auto it = m2.begin(); it != m2.end(); it++) {
            if (m1.find(it->first) == m1.end()) {
                diff2.push_back(it->first);
            }
        }
        result.push_back(diff1);
        result.push_back(diff2);
        return result;

=======

        set<int> s1(nums1.begin(), nums1.end());
        set<int> s2(nums2.begin(), nums2.end());
        vector<vector<int>> ans(2);
        for (auto &x: s1) {
            if (s2.find(x) == s2.end()) {
                ans[0].push_back(x);
            }
        }
        for (auto &x: s2) {
            if (s1.find(x) == s1.end()) {
                ans[1].push_back(x);
            }
        }
        return ans;

=======

        vector<vector<int>> res;
        vector<int> v1, v2;
        unordered_map<int, int> m1, m2;
        for (auto& i : nums1) m1[i]++;
        for (auto& i : nums2) m2[i]++;
        for (auto& [k, v] : m1) {
            if (m2.find(k) == m2.end()) v1.push_back(k);
        }
        for (auto& [k, v] : m2) {
            if (m1.find(k) == m1.end()) v2.push_back(k);
        }
        res.push_back(v1);
        res.push_back(v2);
        return res;

=======

        vector<vector<int>> res;
        vector<int> v1, v2;
        unordered_map<int, int> m1, m2;
        for (auto &n: nums1) {
            m1[n]++;
        }
        for (auto &n: nums2) {
            m2[n]++;
        }
        for (auto &n: nums1) {
            if (m2[n] == 0) {
                v1.push_back(n);
            }
        }
        for (auto &n: nums2) {
            if (m1[n] == 0) {
                v2.push_back(n);
            }
        }
        res.push_back(v1);
        res.push_back(v2);
        return res;

=======

        vector<vector<int>> res;
        vector<int> diff1;
        vector<int> diff2;
        vector<int> tmp;
        for (int i=0; i<nums1.size(); i++) {
            tmp.push_back(nums1[i]);
        }
        for (int i=0; i<nums2.size(); i++) {
            tmp.push_back(nums2[i]);
        }
        sort(tmp.begin(), tmp.end());
        for (int i=0; i<tmp.size(); i++) {
            if (i==0 || tmp[i] != tmp[i-1]) {
                if (find(nums1.begin(), nums1.end(), tmp[i]) == nums1.end()) {
                    diff2.push_back(tmp[i]);
                }
                if (find(nums2.begin(), nums2.end(), tmp[i]) == nums2.end()) {
                    diff1.push_back(tmp[i]);
                }
            }
        }
        res.push_back(diff1);
        res.push_back(diff2);
        return res;
