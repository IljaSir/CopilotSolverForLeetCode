Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int mask = 1;
        while (mask < num) {
            mask = (mask << 1) | 1;
        }
        return num ^ mask;

=======

        int mask = 1;
        while (mask < num) {
            mask = (mask << 1) + 1;
        }
        return num ^ mask;

=======

        int i = 0;
        int j = 0;
        while (i < num) {
            i += pow(2, j);
            j++;
        }
        return i - num;

=======

        int result = 0;
        int bit = 0;
        while (num) {
            if ((num & 1) == 0) {
                result += (1 << bit);
            }
            bit++;
            num >>= 1;
        }
        return result;

=======

        int n = num;
        int count = 0;
        while(n > 0) {
            n = n >> 1;
            count++;
        }
        int mask = (1 << count) - 1;
        return num ^ mask;

=======

        int comp = 0;
        int base = 1;
        while (num) {
            if (num & 1) {
                num >>= 1;
            } else {
                comp += base;
                num >>= 1;
            }
            base <<= 1;
        }
        return comp;

=======

        int n = num;
        int bits = 0;
        while(n > 0) {
            bits++;
            n >>= 1;
        }
        int mask = (1 << bits) - 1;
        return ~num & mask;

=======

        int ans = 0, i = 0;
        while (num > 0) {
            if (num & 1 == 0) ans += (1 << i);
            num = num >> 1;
            i++;
        }
        return ans;
