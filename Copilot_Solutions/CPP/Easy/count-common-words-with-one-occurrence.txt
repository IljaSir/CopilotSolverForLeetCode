Synthesizing 10/10 solutions

=======

        unordered_map<string, int> m1, m2;
        for (auto& w : words1) m1[w]++;
        for (auto& w : words2) m2[w]++;
        int res = 0;
        for (auto& p : m1) {
            if (p.second == 1 && m2[p.first] == 1) res++;
        }
        for (auto& p : m2) {
            if (p.second == 1 && m1[p.first] == 1) res++;
        }
        return res;

=======

        unordered_map<string, int> m1, m2;
        for (string& s : words1) {
            m1[s]++;
        }
        for (string& s : words2) {
            m2[s]++;
        }
        int res = 0;
        for (auto& p : m1) {
            if (p.second == 1 && m2.find(p.first) != m2.end() && m2[p.first] == 1) {
                res++;
            }
        }
        for (auto& p : m2) {
            if (p.second == 1 && m1.find(p.first) != m1.end() && m1[p.first] == 1) {
                res++;
            }
        }
        return res;

=======

        unordered_map<string, int> m1;
        unordered_map<string, int> m2;
        for (auto& w : words1) {
            m1[w]++;
        }
        for (auto& w : words2) {
            m2[w]++;
        }
        int ans = 0;
        for (auto& p : m1) {
            if (p.second == 1 && m2.count(p.first) == 0) {
                ans++;
            }
        }
        for (auto& p : m2) {
            if (p.second == 1 && m1.count(p.first) == 0) {
                ans++;
            }
        }
        return ans;

=======

        unordered_map<string, int> m1, m2;
        for (string& w : words1) {
            ++m1[w];
        }
        for (string& w : words2) {
            ++m2[w];
        }
        int res = 0;
        for (auto& p : m1) {
            if (p.second == 1 && m2.count(p.first) == 0) {
                ++res;
            }
        }
        for (auto& p : m2) {
            if (p.second == 1 && m1.count(p.first) == 0) {
                ++res;
            }
        }
        return res;

=======

        unordered_map<string, int> m1;
        for (auto& w : words1) m1[w]++;
        unordered_map<string, int> m2;
        for (auto& w : words2) m2[w]++;
        int res = 0;
        for (auto& [k, v] : m1) {
            if (m2.find(k) == m2.end() && v == 1) res++;
        }
        for (auto& [k, v] : m2) {
            if (m1.find(k) == m1.end() && v == 1) res++;
        }
        return res;

=======

        unordered_map<string, int> count1;
        unordered_map<string, int> count2;
        for (auto& w : words1) {
            count1[w]++;
        }
        for (auto& w : words2) {
            count2[w]++;
        }
        int res = 0;
        for (auto& [k, v] : count1) {
            if (v == 1 && count2[k] == 0) {
                res++;
            }
        }
        for (auto& [k, v] : count2) {
            if (v == 1 && count1[k] == 0) {
                res++;
            }
        }
        return res;

=======

        unordered_map<string, int> cnt;
        for (auto& w : words1) {
            cnt[w]++;
        }
        for (auto& w : words2) {
            cnt[w]++;
        }
        int res = 0;
        for (auto& [w, c] : cnt) {
            if (c == 1) {
                res++;
            }
        }
        return res;

=======

        int count = 0;
        unordered_map<string, int> m1;
        unordered_map<string, int> m2;
        for (string& word : words1) {
            m1[word]++;
        }
        for (string& word : words2) {
            m2[word]++;
        }
        for (auto& i : m1) {
            if (m2.find(i.first) != m2.end() && i.second == 1 && m2[i.first] == 1) {
                count++;
            }
        }
        return count;

=======

        unordered_map<string, int> map1, map2;
        for (auto& word : words1) {
            if (map1.find(word) == map1.end()) {
                map1[word] = 1;
            } else {
                map1[word]++;
            }
        }
        for (auto& word : words2) {
            if (map2.find(word) == map2.end()) {
                map2[word] = 1;
            } else {
                map2[word]++;
            }
        }
        int count = 0;
        for (auto& kv : map1) {
            if (kv.second == 1 && map2.find(kv.first) != map2.end() && map2[kv.first] == 1) {
                count++;
            }
        }
        for (auto& kv : map2) {
            if (kv.second == 1 && map1.find(kv.first) != map1.end() && map1[kv.first] == 1) {
                count++;
            }
        }
        return count;

=======

        unordered_map<string, int> word_count;
        for (auto word : words1) {
            word_count[word]++;
        }
        for (auto word : words2) {
            word_count[word]++;
        }
        int result = 0;
        for (auto pair : word_count) {
            if (pair.second == 1) {
                result++;
            }
        }
        return result;
