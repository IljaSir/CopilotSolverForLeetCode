Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            int left = 0, right = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[i] > nums[j]) left++;
                if (nums[i] < nums[j]) right++;
            }
            if (left > 0 && right > 0) count++;
        }
        return count;

=======

        int n = nums.size();
        if (n <= 2) return 0;
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 1; i < n - 1; ++i) {
            if (nums[i] > nums[i - 1] && nums[i] < nums[i + 1]) {
                ++ans;
            }
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            int l = 0, r = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[j] < nums[i]) l++;
                else if (nums[j] > nums[i]) r++;
            }
            if (l > 0 && r > 0) res++;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int cnt = 0;
        int n = nums.size();
        for (int i = 1; i < n - 1; ++i) {
            if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                ++cnt;
            }
        }
        return cnt;

=======

        if (nums.size() < 3) return 0;
        int count = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size()-1; ++i) {
            if (nums[i-1] < nums[i] && nums[i] < nums[i+1]) {
                count++;
            }
        }
        return count;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] < nums[i]) {
                    l++;
                } else if (nums[j] > nums[i]) {
                    r++;
                }
            }
            if (l > 0 && r > 0) {
                cnt++;
            }
        }
        return cnt;

=======

        int cnt = 0;
        for(int i=0; i<nums.size(); i++){
            int smaller = 0, greater = 0;
            for(int j=0; j<nums.size(); j++){
                if(i==j) continue;
                if(nums[i] > nums[j]) smaller++;
                else if(nums[i] < nums[j]) greater++;
            }
            if(smaller>0 && greater>0) cnt++;
        }
        return cnt;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            while (j < n && nums[i] == nums[j]) {
                j++;
            }
            if (j < n && nums[i] < nums[j]) {
                cnt += j - i;
            }
            i = j - 1;
        }
        return cnt;

=======

        int result = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1]) {
                int j = i + 1;
                while (j < nums.size() && nums[j] == nums[i]) ++j;
                if (j < nums.size() && nums[j] > nums[i]) ++result;
            }
        }
        return result;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            int left = -10e5;
            int right = 10e5;
            for (int j = 0; j < nums.size(); j++) {
                if (j == i) continue;
                if (nums[j] < nums[i]) {
                    left = max(left, nums[j]);
                } else {
                    right = min(right, nums[j]);
                }
            }
            if (left < nums[i] && nums[i] < right) {
                count++;
            }
        }
        return count;
