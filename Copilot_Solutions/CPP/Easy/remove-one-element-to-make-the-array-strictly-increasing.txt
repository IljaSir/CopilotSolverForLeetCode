Synthesizing 10/10 solutions

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            bool ok = true;
            for (int j = 1; j < n; j++) {
                if (j == i) continue;
                if (j == i + 1 && nums[j] <= nums[i]) {
                    ok = false;
                    break;
                }
                if (nums[j] <= nums[j - 1]) {
                    ok = false;
                    break;
                }
            }
            if (ok) return true;
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            bool flag = true;
            for (int j = 1; j < n; j++) {
                if (i == j) continue;
                if (nums[j - 1] >= nums[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) return true;
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            bool ok = true;
            for (int j = 0; j < n - 1; ++j) {
                if (j == i) continue;
                if (nums[j] >= nums[j + 1]) {
                    ok = false;
                    break;
                }
            }
            if (ok) return true;
        }
        return false;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] <= nums[i - 1]) {
                ++count;
                if (count > 1) {
                    return false;
                }
                if (i == 1 || nums[i] > nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            vector<int> nums2;
            for (int j = 0; j < n; j++) {
                if (j != i) nums2.push_back(nums[j]);
            }
            bool flag = true;
            for (int j = 1; j < n - 1; j++) {
                if (nums2[j] <= nums2[j - 1]) {
                    flag = false;
                    break;
                }
            }
            if (flag) return true;
        }
        return false;

=======

        int n = nums.size();
        int i = 0;
        while (i < n - 1 && nums[i] < nums[i + 1]) {
            i++;
        }
        if (i == n - 1) {
            return true;
        }
        int j = n - 1;
        while (j > 0 && nums[j] > nums[j - 1]) {
            j--;
        }
        if (i == 0 || j == n - 1) {
            return true;
        }
        if (nums[i - 1] < nums[i + 1] || nums[j - 1] < nums[j + 1]) {
            return true;
        }
        return false;

=======

        int n = nums.size();
        int i = 0;
        while (i < n-1 && nums[i] < nums[i+1]) {
            i++;
        }
        if (i == n-1) return true;
        int j = i+1;
        while (j < n-1 && nums[j] < nums[j+1]) {
            j++;
        }
        if (j == n-1) return true;
        if (i == 0) return true;
        if (nums[i-1] < nums[j]) return true;
        if (j == n-1) return true;
        if (nums[i] < nums[j+1]) return true;
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            vector<int> v(nums);
            v.erase(v.begin() + i);
            bool ok = true;
            for (int j = 1; j < n; ++j) {
                if (v[j] <= v[j - 1]) {
                    ok = false;
                    break;
                }
            }
            if (ok) return true;
        }
        return false;

=======

        int n = nums.size();
        int cnt = 0;
        for(int i = 1; i < n; i++) {
            if(nums[i] <= nums[i - 1]) {
                cnt++;
                if(i == 1 || nums[i] > nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
            if(cnt > 1) {
                return false;
            }
        }
        return true;

=======

        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>=nums[i+1]){
                if(i==0){
                    nums.erase(nums.begin()+i);
                    return isSorted(nums);
                }
                else if(i==nums.size()-2){
                    nums.erase(nums.begin()+i+1);
                    return isSorted(nums);
                }
                else{
                    vector<int> temp=nums;
                    temp.erase(temp.begin()+i);
                    if(isSorted(temp)) return true;
                    temp=nums;
                    temp.erase(temp.begin()+i+1);
                    if(isSorted(temp)) return true;
                    return false;
                }
            }
        }
        return true;
    }
    bool isSorted(vector<int> nums){
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>=nums[i+1]) return false;
        }
        return true;
