Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(target.begin(), target.end());
        sort(arr.begin(), arr.end());
        return target == arr;

=======

        int count[1001] = {0};
        for (int i = 0; i < target.size(); i++) {
            count[target[i]]++;
            count[arr[i]]--;
        }
        for (int i = 0; i < 1001; i++) {
            if (count[i] != 0) return false;
        }
        return true;

=======

        if (target.size() != arr.size()) return false;
        unordered_map<int, int> map;
        for (int i = 0; i < target.size(); i++) {
            map[target[i]]++;
            map[arr[i]]--;
        }
        for (auto it = map.begin(); it != map.end(); it++) {
            if (it->second != 0) return false;
        }
        return true;

=======

        int n = target.size();
        unordered_map<int, int> m1, m2;
        for (int i = 0; i < n; ++i) {
            m1[target[i]]++;
            m2[arr[i]]++;
        }
        for (auto it = m1.begin(); it != m1.end(); ++it) {
            if (m2[it->first] != it->second) return false;
        }
        return true;

=======

        unordered_map<int,int> m;
        for(int i = 0; i < target.size(); i++){
            m[target[i]]++;
        }
        for(int i = 0; i < arr.size(); i++){
            m[arr[i]]--;
        }
        for(auto it = m.begin(); it != m.end(); it++){
            if(it->second != 0) return false;
        }
        return true;

=======

        int n = target.size();
        if (n != arr.size()) {
            return false;
        }
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            mp[target[i]]++;
            mp[arr[i]]--;
        }
        for (auto& [key, value]: mp) {
            if (value != 0) {
                return false;
            }
        }
        return true;

=======

        map<int, int> mp;
        for (int i = 0; i < target.size(); ++i) {
            ++mp[target[i]];
            --mp[arr[i]];
        }
        for (auto p : mp) {
            if (p.second != 0) {
                return false;
            }
        }
        return true;

=======

        int n = target.size();
        int m = arr.size();
        if(n!=m)
            return false;
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            mp[target[i]]++;
            mp[arr[i]]--;
        }
        for(auto x:mp){
            if(x.second!=0)
                return false;
        }
        return true;
