Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < nums.size(); i++)
        {
            if (nums[i] > 0 && nums[i] > max)
            {
                max = nums[i];
            }
        }
        return max;
    }
    int largestNumber(vector<int>& nums) {
        int maxK = findMaxK(nums);
        for (int k = maxK; k > 0; k--)
        {
            bool found = false;
            for (int i = 0; i < nums.size(); i++)
            {
                if (nums[i] == k)
                {
                    found = true;
                    break;
                }
            }
            if (found)
            {
                for (int i = 0; i < nums.size(); i++)
                {
                    if (nums[i] == -k)
                    {
                        return k;
                    }
                }
            }
        }
        return -1;

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            mp[nums[i]]++;
        }
        int ans = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                if (mp.count(-nums[i])) {
                    ans = max(ans, nums[i]);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < 0) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
    int largestNumber(vector<int>& nums) {
        // sort(nums.begin(), nums.end());
        int n = nums.size();
        if (n == 0) {
            return -1;
        }
        int k = findMaxK(nums);
        if (k == 0) {
            return -1;
        }
        int l = -1, r = k - 1;
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            if (nums[mid] == -nums[k]) {
                return nums[k];
            } else if (nums[mid] > -nums[k]) {
                r = mid - 1;
            } else {
                l = mid;
            }
        }
        if (l >= 0 && nums[l] == -nums[k]) {
            return nums[k];
        }
        return -1;

=======

        int maxK = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0) {
                if (nums[i] > maxK) {
                    maxK = nums[i];
                }
            }
        }
        return maxK;
    }
    int findMinK(vector<int>& nums) {
        int minK = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < 0) {
                if (nums[i] < minK) {
                    minK = nums[i];
                }
            }
        }
        return minK;
    }
    bool findK(vector<int>& nums, int k) {
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == k) {
                return true;
            }
        }
        return false;
    }
    int findKthPositive(vector<int>& arr, int k) {
        int maxK = findMaxK(arr);
        int minK = findMinK(arr);
        int maxK1 = abs(minK);
        if (maxK1 > maxK) {
            maxK = maxK1;
        }
        int count = 0;
        for (int i = 1; i <= maxK; i++) {
            if (findK(arr, i)) {
                count++;
            } else if (findK(arr, -i)) {
                count++;
            }
        }
        if (count >= k) {
            return k;
        } else {
            return -1;
        }

=======

        unordered_set<int> set;
        for(int i = 0; i < nums.size(); i++){
            set.insert(nums[i]);
        }
        int max = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > 0 && set.find(-nums[i]) != set.end()){
                if(nums[i] > max){
                    max = nums[i];
                }
            }
        }
        if(max == 0){
            return -1;
        }
        return max;
    }
    int largestMagicalString(int n) {
        vector<int> nums(n);
        int i = 0;
        int j = 0;
        int count = 1;
        while(j < n){
            if(i % 2 == 0){
                nums[j] = 1;
                j++;
            }else{
                for(int k = 0; k < count && j < n; k++){
                    nums[j] = 2;
                    j++;
                }
                count++;
            }
            i++;
        }
        return findMaxK(nums);

=======

        int n = nums.size();
        int maxK = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                if (find(nums.begin(), nums.end(), -nums[i]) != nums.end())
                    maxK = max(maxK, nums[i]);
            }
        }
        return maxK;

=======

        int n = nums.size();
        int maxK = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] < 0) {
                int k = -nums[i];
                if (k > maxK) {
                    maxK = k;
                }
            }
        }
        return maxK;
    }
    int largestInteger(vector<int>& nums) {
        int n = nums.size();
        int maxK = findMaxK(nums);
        if (maxK == -1) {
            return -1;
        }
        vector<bool> isExist(maxK + 1, false);
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                isExist[nums[i]] = true;
            }
        }
        for (int i = maxK; i > 0; i--) {
            if (isExist[i] && isExist[-i]) {
                return i;
            }
        }
        return -1;

=======

        int max = 0;
        for(int i=0; i<nums.size(); i++)
        {
            if(nums[i] < 0)
            {
                if(nums[i] > max)
                    max = nums[i];
            }
            else
            {
                if(-nums[i] > max)
                    max = -nums[i];
            }
        }
        return max;
    }
    int findKthPositive(vector<int>& arr, int k) {
        int max = findMaxK(arr);
        int count = 0;
        int i = 0;
        while(count < k)
        {
            i++;
            if(i > max)
                return k - count;
            bool found = false;
            for(int j=0; j<arr.size(); j++)
            {
                if(arr[j] == i)
                {
                    found = true;
                    break;
                }
            }
            if(!found)
                count++;
        }
        return i;

=======

        int n = nums.size(), maxK = -1;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[nums[i]]++;
            if (nums[i] > 0)
                maxK = max(maxK, nums[i]);
        }
        for (int i = 1; i <= maxK; i++) {
            if (m.count(-i))
                return i;
        }
        return -1;
    }
    int largestMagicalString(int n) {
        vector<int> nums(1, 1);
        int i = 0, j = 0;
        while (nums.size() < n) {
            nums.push_back(nums.back() ^ 3);
            for (int k = 0; k < nums[j]; k++) {
                nums.push_back(nums.back() ^ 3);
                if (nums.size() == n)
                    break;
            }
            i++;
            j++;
        }
        return findMaxK(nums);

=======

        // sort the array
        sort(nums.begin(), nums.end());
        // find the largest positive integer k such that -k also exists in the array
        int k = -1;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > 0) {
                if (binary_search(nums.begin(), nums.end(), -nums[i])) {
                    k = nums[i];
                }
            }
        }
        return k;
    }
    int largestMagicalString(string s) {
        // convert the string to an array of integers
        vector<int> nums(s.size());
        for (int i = 0; i < s.size(); ++i) {
            nums[i] = s[i] - '0';
        }
        // find the largest positive integer k such that -k also exists in the array
        int k = findMaxK(nums);
        // return the positive integer k
        return k;
