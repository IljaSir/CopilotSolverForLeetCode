Synthesizing 10/10 solutions

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int sum = 0;
                int count = 0;
                for (int x = i - 1; x <= i + 1; x++) {
                    for (int y = j - 1; y <= j + 1; y++) {
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            sum += img[x][y];
                            count++;
                        }
                    }
                }
                res[i][j] = sum / count;
            }
        }
        return res;

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0;
                int count = 0;
                for (int x = i - 1; x <= i + 1; ++x) {
                    for (int y = j - 1; y <= j + 1; ++y) {
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            sum += img[x][y];
                            ++count;
                        }
                    }
                }
                res[i][j] = sum / count;
            }
        }
        return res;

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int sum = 0;
                int count = 0;
                for (int k = i - 1; k <= i + 1; k++) {
                    for (int l = j - 1; l <= j + 1; l++) {
                        if (k >= 0 && k < m && l >= 0 && l < n) {
                            sum += img[k][l];
                            count++;
                        }
                    }
                }
                ans[i][j] = sum / count;
            }
        }
        return ans;

=======

        int m = img.size(), n = img[0].size();
        vector<vector<int>> ans(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0, count = 0;
                for (int x = -1; x <= 1; ++x) {
                    for (int y = -1; y <= 1; ++y) {
                        int nx = i + x, ny = j + y;
                        if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                            sum += img[nx][ny];
                            count++;
                        }
                    }
                }
                ans[i][j] = sum / count;
            }
        }
        return ans;

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0;
                int count = 0;
                for (int x = i - 1; x <= i + 1; ++x) {
                    for (int y = j - 1; y <= j + 1; ++y) {
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            sum += img[x][y];
                            ++count;
                        }
                    }
                }
                ans[i][j] = sum / count;
            }
        }
        return ans;

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> res(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = img[i][j];
                int count = 1;
                if (i > 0) {
                    sum += img[i - 1][j];
                    ++count;
                }
                if (i < m - 1) {
                    sum += img[i + 1][j];
                    ++count;
                }
                if (j > 0) {
                    sum += img[i][j - 1];
                    ++count;
                }
                if (j < n - 1) {
                    sum += img[i][j + 1];
                    ++count;
                }
                if (i > 0 && j > 0) {
                    sum += img[i - 1][j - 1];
                    ++count;
                }
                if (i > 0 && j < n - 1) {
                    sum += img[i - 1][j + 1];
                    ++count;
                }
                if (i < m - 1 && j > 0) {
                    sum += img[i + 1][j - 1];
                    ++count;
                }
                if (i < m - 1 && j < n - 1) {
                    sum += img[i + 1][j + 1];
                    ++count;
                }
                res[i][j] = sum / count;
            }
        }
        return res;

=======

        const int m = img.size();
        const int n = img[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int count = 0;
                for (int x = i - 1; x <= i + 1; ++x) {
                    for (int y = j - 1; y <= j + 1; ++y) {
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            ans[i][j] += img[x][y];
                            ++count;
                        }
                    }
                }
                ans[i][j] /= count;
            }
        }
        return ans;

=======

        int m = img.size();
        int n = img[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0;
                int count = 0;
                for (auto &dir : dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if (x >= 0 && x < m && y >= 0 && y < n) {
                        sum += img[x][y];
                        count++;
                    }
                }
                res[i][j] = sum / count;
            }
        }
        return res;

=======

        int m = img.size(), n = img[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        int dr[9] = {-1, -1, -1, 0, 0, 0, 1, 1, 1};
        int dc[9] = {-1, 0, 1, -1, 0, 1, -1, 0, 1};
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0, cnt = 0;
                for (int k = 0; k < 9; ++k) {
                    int nr = i + dr[k], nc = j + dc[k];
                    if (nr >= 0 && nr < m && nc >= 0 && nc < n) {
                        sum += img[nr][nc];
                        cnt++;
                    }
                }
                res[i][j] = sum / cnt;
            }
        }
        return res;

=======

        const int n = img.size();
        const int m = img[0].size();
        vector<vector<int>> result(n, vector<int>(m, 0));
        int count = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                count = 0;
                for (int x = i - 1; x <= i + 1; ++x) {
                    for (int y = j - 1; y <= j + 1; ++y) {
                        if (x >= 0 && x < n && y >= 0 && y < m) {
                            result[i][j] += img[x][y];
                            ++count;
                        }
                    }
                }
                result[i][j] /= count;
            }
        }
        return result;
