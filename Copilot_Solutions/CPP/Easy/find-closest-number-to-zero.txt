Synthesizing 10/10 solutions

=======

        int closest = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (abs(nums[i]) < abs(closest)) {
                closest = nums[i];
            } else if (abs(nums[i]) == abs(closest)) {
                closest = max(closest, nums[i]);
            }
        }
        return closest;

=======

        int closest = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (abs(nums[i]) < abs(closest)) {
                closest = nums[i];
            } else if (abs(nums[i]) == abs(closest)) {
                if (nums[i] > closest) {
                    closest = nums[i];
                }
            }
        }
        return closest;

=======

        int closest = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            if (abs(nums[i]) < abs(closest)) {
                closest = nums[i];
            } else if (abs(nums[i]) == abs(closest) && nums[i] > closest) {
                closest = nums[i];
            }
        }
        return closest;

=======

        int result = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (abs(nums[i]) < abs(result)) {
                result = nums[i];
            } else if (abs(nums[i]) == abs(result)) {
                result = max(result, nums[i]);
            }
        }
        return result;

=======

        int min = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            if (abs(nums[i]) < abs(min) || (abs(nums[i]) == abs(min) && nums[i] > min)) {
                min = nums[i];
            }
        }
        return min;

=======

        int min = 100000;
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (abs(nums[i]) < min) {
                min = abs(nums[i]);
            }
            if (abs(nums[i]) == min) {
                if (nums[i] > max) {
                    max = nums[i];
                }
            }
        }
        return max;

=======

        int n = nums.size();
        int closest = nums[0];
        int min = abs(nums[0]);
        for (int i = 1; i < n; i++) {
            if (abs(nums[i]) < min) {
                min = abs(nums[i]);
                closest = nums[i];
            } else if (abs(nums[i]) == min) {
                closest = max(closest, nums[i]);
            }
        }
        return closest;

=======

        int n = nums.size();
        int min = abs(nums[0]);
        int max = nums[0];
        for (int i = 1; i < n; ++i) {
            if (abs(nums[i]) < min) {
                min = abs(nums[i]);
                max = nums[i];
            } else if (abs(nums[i]) == min) {
                if (nums[i] > max) {
                    max = nums[i];
                }
            }
        }
        return max;

=======

        int n = nums.size();
        int min = 100000;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (abs(nums[i]) < min) {
                min = abs(nums[i]);
                ans = nums[i];
            } else if (abs(nums[i]) == min) {
                ans = max(ans, nums[i]);
            }
        }
        return ans;

=======

        int min = 1000000;
        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (abs(nums[i]) < min) {
                min = abs(nums[i]);
                res = nums[i];
            }
            else if (abs(nums[i]) == min) {
                if (nums[i] > res)
                    res = nums[i];
            }
        }
        return res;
