Synthesizing 10/10 solutions

=======

        int freq[26] = {0};
        for (char c : s) {
            freq[c - 'a']++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                if (count == 0) {
                    count = freq[i];
                } else {
                    if (freq[i] != count) {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        int count[26] = {0};
        for (char c : s) {
            count[c - 'a']++;
        }
        int c = 0;
        for (int i = 0; i < 26; ++i) {
            if (count[i] > 0) {
                if (c == 0) {
                    c = count[i];
                } else if (c != count[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        int count[26] = {0};
        for (char c : s) {
            count[c - 'a']++;
        }
        int first = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) {
                first = count[i];
                break;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0 && count[i] != first) {
                return false;
            }
        }
        return true;

=======

        int count[26]={0};
        for(int i=0;i<s.length();i++){
            count[s[i]-'a']++;
        }
        int c=count[s[0]-'a'];
        for(int i=1;i<26;i++){
            if(count[i]!=0 && count[i]!=c){
                return false;
            }
        }
        return true;

=======

        int cnt[26] = {0};
        for (char c : s) {
            cnt[c - 'a']++;
        }
        int prev = 0;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] != 0) {
                if (prev != 0 && prev != cnt[i]) {
                    return false;
                }
                prev = cnt[i];
            }
        }
        return true;

=======

        unordered_map<char, int> m;
        for (auto c : s) {
            m[c]++;
        }
        int count = m[s[0]];
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second != count) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        vector<int> count(26,0);
        for(int i=0;i<n;i++){
            count[s[i]-'a']++;
        }
        int c = count[s[0]-'a'];
        for(int i=1;i<26;i++){
            if(count[i]!=0 && count[i]!=c){
                return false;
            }
        }
        return true;

=======

        std::map<char, int> m;
        for (auto c: s) {
            m[c]++;
        }
        int first = m.begin()->second;
        for (auto it = m.begin(); it != m.end(); ++it) {
            if (it->second != first) {
                return false;
            }
        }
        return true;

=======

        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
        }
        int cnt = m[s[0]];
        for (auto& [c, val] : m) {
            if (val != cnt) {
                return false;
            }
        }
        return true;

=======

        unordered_map<char, int> m;
        for (auto c : s) {
            m[c]++;
        }
        int n = m.size();
        int count = m[s[0]];
        for (auto [c, i] : m) {
            if (i != count) {
                return false;
            }
        }
        return true;
