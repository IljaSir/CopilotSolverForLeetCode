Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            auto it = m.find(target - nums[i]);
            if (it != m.end()) {
                return {it->second, i};
            }
            m[nums[i]] = i;
        }
        return {};

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.count(target - nums[i])) {
                return {m[target - nums[i]], i};
            }
            m[nums[i]] = i;
        }
        return {};

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            if (m.find(target - nums[i]) != m.end()) {
                return {i, m[target - nums[i]]};
            }
            m[nums[i]] = i;
        }
        return {};

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.find(target - nums[i]) != m.end()) {
                return vector<int>{m[target - nums[i]], i};
            }
            m[nums[i]] = i;
        }
        return vector<int>{-1, -1};

=======

        map<int, int> mp;
        vector<int> ans;
        for(int i = 0; i < nums.size(); i++) {
            if(mp.find(target - nums[i]) != mp.end()) {
                ans.push_back(mp[target - nums[i]]);
                ans.push_back(i);
                break;
            } else {
                mp[nums[i]] = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++) {
            if(mp.find(target - nums[i]) != mp.end()) {
                return {i, mp[target - nums[i]]};
            }
            mp[nums[i]] = i;
        }
        return {};

=======

        map<int, int> cache;
        for(int i = 0; i < nums.size(); i++) {
            if(cache.find(target - nums[i]) != cache.end()) {
                return {cache[target - nums[i]], i};
            }
            cache[nums[i]] = i;
        }
        return {};

=======

        map<int, int> m;
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i];
            if (m.find(n) == m.end()) {
                m[target - n] = i;
            } else {
                res.push_back(m[n]);
                res.push_back(i);
                break;
            }
        }
        return res;

=======

        vector<int> ans;
        unordered_map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            int search = target - nums[i];
            if (mp.find(search) != mp.end()) {
                ans.push_back(mp[search]);
                ans.push_back(i);
                break;
            }
            mp[nums[i]] = i;
        }
        return ans;
