Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]) {
            return edges[0][0];
        }
        return edges[0][1];

=======

        if (edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1])
            return edges[0][0];
        return edges[0][1];

=======

        if (edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1])
            return edges[0][0];
        else
            return edges[0][1];

=======

        int a = edges[0][0];
        int b = edges[0][1];
        int c = edges[1][0];
        int d = edges[1][1];
        if (a == c || a == d) {
            return a;
        }
        return b;

=======

        int n = edges.size();
        if (n == 1) return edges[0][0];
        if (edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1]) return edges[0][0];
        return edges[0][1];

=======

        unordered_map<int, int> m;
        for (auto& e : edges) {
            m[e[0]]++;
            m[e[1]]++;
        }
        for (auto& e : m) {
            if (e.second == edges.size()) return e.first;
        }
        return 0;

=======

        int n = edges.size()+1;
        vector<int> degree(n+1,0);
        for(auto edge:edges){
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        for(int i=1;i<=n;i++){
            if(degree[i]==n-1){
                return i;
            }
        }
        return 0;

=======

        int n = edges.size();
        vector<int> v(n+2, 0);
        for (int i = 0; i < n; i++) {
            v[edges[i][0]]++;
            v[edges[i][1]]++;
        }
        for (int i = 1; i <= n+1; i++) {
            if (v[i] == n) return i;
        }
        return -1;

=======

        int n = edges.size();
        vector<int> cnt(n+1,0);
        for (auto e: edges) {
            cnt[e[0]]++;
            cnt[e[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (cnt[i] == n) return i;
        }
        return 0;
