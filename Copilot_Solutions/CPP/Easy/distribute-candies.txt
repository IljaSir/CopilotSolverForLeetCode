Synthesizing 10/10 solutions

=======

        unordered_set<int> types;
        for (int i = 0; i < candyType.size(); i++) {
            types.insert(candyType[i]);
        }
        return min(candyType.size() / 2, types.size());

=======

        unordered_set<int> types;
        for (int type : candyType) {
            types.insert(type);
        }
        return min(types.size(), candyType.size() / 2);

=======

        unordered_set<int> s;
        for(int i = 0; i < candyType.size(); i++) {
            s.insert(candyType[i]);
        }
        return min(s.size(), candyType.size() / 2);

=======

        unordered_set<int> s;
        int n = candyType.size();
        for (int i = 0; i < n; i++) {
            s.insert(candyType[i]);
        }
        return min(s.size(), n / 2);

=======

        unordered_set<int> s;
        for (auto c : candyType) {
            s.insert(c);
        }
        return min(s.size(), candyType.size() / 2);

=======

        int n = candyType.size();
        set<int> s;
        for (int i = 0; i < n; i++) {
            s.insert(candyType[i]);
        }
        return min(n/2, (int)s.size());

=======

        int n = candyType.size();
        set<int> candySet;
        for (int i = 0; i < n; i++) {
            candySet.insert(candyType[i]);
        }
        return min(n / 2, (int) candySet.size());

=======

        unordered_set<int> s;
        for (auto& candy : candyType) {
            s.insert(candy);
        }
        return min(s.size(), candyType.size() / 2);

=======

        int n = candyType.size();
        unordered_set<int> candy(candyType.begin(), candyType.end());
        return min(n/2, candy.size());

=======

        int n = candyType.size();
        unordered_set<int> s;
        for (auto x: candyType) s.insert(x);
        return min(s.size(), n/2);
