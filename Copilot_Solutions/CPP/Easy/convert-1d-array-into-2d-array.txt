Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int len = original.size();
        if (len != m * n) {
            return {};
        }
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < len; i++) {
            res[i / n][i % n] = original[i];
        }
        return res;

=======

        vector<vector<int>> result;
        if (m * n != original.size()) {
            return result;
        }
        for (int i = 0; i < m; i++) {
            vector<int> row;
            for (int j = 0; j < n; j++) {
                row.push_back(original[i * n + j]);
            }
            result.push_back(row);
        }
        return result;

=======

        int size = original.size();
        if (size != m * n) {
            return {};
        }
        vector<vector<int>> result;
        for (int i = 0; i < m; ++i) {
            vector<int> row;
            for (int j = 0; j < n; ++j) {
                row.push_back(original[i * n + j]);
            }
            result.push_back(row);
        }
        return result;

=======

        int size = original.size();
        if (size != m * n) {
            return {};
        }
        vector<vector<int>> res;
        for (int i = 0; i < m; i++) {
            vector<int> row;
            for (int j = 0; j < n; j++) {
                row.push_back(original[i * n + j]);
            }
            res.push_back(row);
        }
        return res;

=======

        int len = original.size();
        if (len != m * n) return {};
        vector<vector<int>> res;
        for (int i = 0; i < m; i++) {
            vector<int> tmp;
            for (int j = 0; j < n; j++) {
                tmp.push_back(original[i * n + j]);
            }
            res.push_back(tmp);
        }
        return res;

=======

        int size = original.size();
        if (size != m*n) return {};
        vector<vector<int>> res(m, vector<int>(n));
        for (int i = 0; i < size; i++) {
            res[i/n][i%n] = original[i];
        }
        return res;

=======

        int k = original.size();
        if (m * n != k) return {};
        vector<vector<int>> res(m, vector<int>(n));
        for (int i = 0; i < k; ++i) {
            res[i / n][i % n] = original[i];
        }
        return res;

=======

        vector<vector<int>> res;
        if (m * n != original.size()) {
            return res;
        }
        int i = 0;
        for (int j = 0; j < m; j++) {
            vector<int> row;
            for (int k = 0; k < n; k++) {
                row.push_back(original[i++]);
            }
            res.push_back(row);
        }
        return res;

=======

        int size = original.size();
        vector<vector<int>> ans;
        if (size != m * n) return ans;
        ans.resize(m);
        for (int i = 0; i < m; ++i) {
            ans[i].resize(n);
            for (int j = 0; j < n; ++j) {
                ans[i][j] = original[i * n + j];
            }
        }
        return ans;
