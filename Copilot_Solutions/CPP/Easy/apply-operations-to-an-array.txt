Synthesizing 10/10 solutions

=======

        for (int i = 0; i < nums.size() - 1; ++i) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        vector<int> result;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != 0) {
                result.push_back(nums[i]);
            }
        }
        for (int i = 0; i < nums.size() - result.size(); ++i) {
            result.push_back(0);
        }
        return result;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                swap(nums[i], nums[j]);
                ++j;
            }
        }
        return nums;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int j = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                j++;
            }
        }
        for (int i = j; i < n; ++i) {
            nums[i] = 0;
        }
        return nums;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        vector<int> ans;
        for (int i = 0; i < n; ++i) {
            if (nums[i]) {
                ans.push_back(nums[i]);
            }
        }
        while (ans.size() < n) {
            ans.push_back(0);
        }
        return ans;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        for (int i = 0, j = 0; j < n; j++) {
            if (nums[j] != 0) {
                swap(nums[i++], nums[j]);
            }
        }
        return nums;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        int i = 0, j = 0;
        while (j < n) {
            if (nums[j] != 0) {
                swap(nums[i], nums[j]);
                i++;
            }
            j++;
        }
        return nums;

=======

        int n = nums.size();
        for (int i = 0; i < n-1; i++) {
            if (nums[i] == nums[i+1]) {
                nums[i] *= 2;
                nums[i+1] = 0;
            }
        }
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                ans.push_back(nums[i]);
            }
        }
        int m = ans.size();
        while (m < n) {
            ans.push_back(0);
            m++;
        }
        return ans;

=======

        int i = 0;
        while (i < nums.size() - 1) {
            if (nums[i] == nums[i + 1]) {
                nums[i] *= 2;
                nums[i + 1] = 0;
                i += 2;
            } else {
                i++;
            }
        }
        int j = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != 0) {
                nums[j] = nums[i];
                j++;
            }
        }
        while (j < nums.size()) {
            nums[j] = 0;
            j++;
        }
        return nums;

=======

        vector<int> res;
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                res.push_back(nums[i] * 2);
                i++;
            } else {
                res.push_back(nums[i]);
            }
        }
        if (n > 1) res.push_back(nums[n - 1]);
        return res;

=======

        int n = nums.size();
        vector<int> res(n, 0);
        int i = 0;
        for (int j = 0; j < n; ++j) {
            if (j == n - 1 || nums[j] != nums[j + 1]) {
                res[i++] = nums[j];
            } else {
                res[i++] = nums[j] * 2;
                ++j;
            }
        }
        return res;
