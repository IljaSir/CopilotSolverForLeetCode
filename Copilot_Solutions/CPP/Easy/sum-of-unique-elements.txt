Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }
            if (count == 1) {
                sum += nums[i];
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            bool unique = true;
            for (int j = 0; j < nums.size(); j++) {
                if (i != j && nums[i] == nums[j]) {
                    unique = false;
                    break;
                }
            }
            if (unique) {
                sum += nums[i];
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            bool flag = true;
            for (int j = 0; j < nums.size(); j++) {
                if (i != j && nums[i] == nums[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                sum += nums[i];
            }
        }
        return sum;

=======

        vector<int> count(101, 0);
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            count[nums[i]]++;
        }
        for (int i = 0; i < count.size(); i++) {
            if (count[i] == 1) {
                sum += i;
            }
        }
        return sum;

=======

        int sum = 0;
        vector<int> count(101, 0);
        for (int i = 0; i < nums.size(); i++) {
            count[nums[i]]++;
        }
        for (int i = 0; i < count.size(); i++) {
            if (count[i] == 1) {
                sum += i;
            }
        }
        return sum;

=======

        int sum = 0;
        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            map[nums[i]]++;
        }
        for (auto it = map.begin(); it != map.end(); it++) {
            if (it->second == 1) {
                sum += it->first;
            }
        }
        return sum;

=======

        unordered_map<int, int> m;
        for (auto n : nums) {
            m[n]++;
        }
        int sum = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second == 1) {
                sum += it->first;
            }
        }
        return sum;

=======

        int sum = 0;
        map<int, int> count;
        for (auto i : nums) {
            count[i]++;
        }
        for (auto i : count) {
            if (i.second == 1) {
                sum += i.first;
            }
        }
        return sum;

=======

        int n = nums.size(), sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i++) {
            if (i == 0 && nums[i] != nums[i + 1]) sum += nums[i];
            else if (i == n - 1 && nums[i] != nums[i - 1]) sum += nums[i];
            else if (nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) sum += nums[i];
        }
        return sum;
