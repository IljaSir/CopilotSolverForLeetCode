Synthesizing 10/10 solutions

=======

        vector<int> result;
        if (n % 2 == 1) {
            result.push_back(0);
        }
        for (int i = 1; i <= n / 2; i++) {
            result.push_back(i);
            result.push_back(-i);
        }
        return result;

=======

        vector<int> ans;
        if (n % 2 == 1) {
            ans.push_back(0);
        }
        for (int i = 1; i <= n / 2; i++) {
            ans.push_back(i);
            ans.push_back(-i);
        }
        return ans;

=======

        vector<int> res;
        if (n % 2 != 0) {
            res.push_back(0);
        }
        for (int i = 1; i <= n / 2; i++) {
            res.push_back(i);
            res.push_back(-i);
        }
        return res;

=======

        vector<int> result;
        if (n % 2 != 0) {
            result.push_back(0);
        }
        for (int i = 1; i <= n / 2; i++) {
            result.push_back(i);
            result.push_back(-i);
        }
        return result;

=======

        vector<int> ans;
        if(n%2==1) ans.push_back(0);
        for(int i=1;i<=n/2;i++){
            ans.push_back(i);
            ans.push_back(-i);
        }
        return ans;

=======

        vector<int> res(n);
        if (n % 2 == 1) {
            res[n / 2] = 0;
        }
        for (int i = 1; i <= n / 2; i++) {
            res[n / 2 - i] = i;
            res[n / 2 + i - 1] = -i;
        }
        return res;

=======

        vector<int> res;
        if(n % 2 == 1) {
            res.push_back(0);
            n--;
        }
        for(int i = 1; i <= n / 2; i++) {
            res.push_back(i);
            res.push_back(-i);
        }
        return res;

=======

        vector<int> res;
        int i = 0;
        if (n % 2 == 1) {
            res.push_back(0);
            i = 1;
        }
        for (; i < n; i += 2) {
            res.push_back(-i);
            res.push_back(i+1);
        }
        return res;

=======

        vector<int> ret;
        if (n == 1) {
            ret.push_back(0);
            return ret;
        }
        int i = 1;
        while (i <= n/2) {
            ret.push_back(i);
            ret.push_back(-i);
            i++;
        }
        if (n % 2 != 0) {
            ret.push_back(0);
        }
        return ret;

=======

        vector<int> result;
        if (n == 1) {
            result.push_back(0);
            return result;
        }
        int left = 1;
        int right = n;
        while (left < right) {
            result.push_back(left);
            result.push_back(-left);
            left++;
            right--;
        }
        if (left == right) {
            result.push_back(0);
        }
        return result;
