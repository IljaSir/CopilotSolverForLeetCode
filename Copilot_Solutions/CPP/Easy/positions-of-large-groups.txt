Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        int i = 0;
        while (i < s.size()) {
            int j = i;
            while (j < s.size() && s[j] == s[i]) j++;
            if (j - i >= 3) res.push_back({i, j - 1});
            i = j;
        }
        return res;

=======

        vector<vector<int>> ans;
        int i = 0;
        int n = s.size();
        while (i < n) {
            int j = i;
            while (j < n && s[j] == s[i]) {
                j++;
            }
            if (j - i >= 3) {
                ans.push_back({i, j - 1});
            }
            i = j;
        }
        return ans;

=======

        vector<vector<int>> result;
        int i = 0;
        while(i < s.size()) {
            int j = i;
            while(j < s.size() && s[i] == s[j]) {
                j++;
            }
            if(j - i >= 3) {
                result.push_back({i, j - 1});
            }
            i = j;
        }
        return result;

=======

        vector<vector<int>> ans;
        int i = 0;
        while(i < s.size()) {
            int j = i;
            while(j < s.size() && s[j] == s[i]) j++;
            if(j - i >= 3) ans.push_back({i, j - 1});
            i = j;
        }
        return ans;

=======

        vector<vector<int>> res;
        int i = 0;
        while(i < s.size()){
            int j = i + 1;
            while(j < s.size() && s[j] == s[i]) ++j;
            if(j - i >= 3){
                res.push_back({i, j - 1});
            }
            i = j;
        }
        return res;

=======

        vector<vector<int>> res;
        int len = s.size();
        for (int i = 0; i < len; i++) {
            int j = i;
            while (j < len && s[i] == s[j]) j++;
            if (j - i >= 3) res.push_back({i, j - 1});
            i = j - 1;
        }
        return res;

=======

        vector<vector<int>> res;
        int start = 0;
        int end = 0;
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s[i] == s[i - 1]) {
                count++;
                end++;
            } else {
                if (count >= 3) {
                    res.push_back({start, end});
                }
                start = i;
                end = i;
                count = 1;
            }
        }
        if (count >= 3) {
            res.push_back({start, end});
        }
        return res;

=======

        vector<vector<int>> ans;
        int l = s.length();
        int i = 0;
        while (i < l) {
            int j = i;
            while (j < l && s[j] == s[i]) {
                j++;
            }
            if (j - i >= 3) {
                ans.push_back({i, j - 1});
            }
            i = j;
        }
        return ans;

=======

        vector<vector<int>> ans;
        int i = 0, j = 0;
        while(i < s.size()) {
            while(j < s.size() && s[j] == s[i]) j++;
            if(j - i >= 3) ans.push_back({i, j-1});
            i = j;
        }
        return ans;

=======

        vector<vector<int>> result;
        int len = s.length();
        int start = 0;
        int end = 0;
        for(int i = 1; i < len; i++){
            if(s[i] == s[i-1]){
                end++;
            }else{
                if(end - start + 1 >= 3){
                    result.push_back({start, end});
                }
                start = i;
                end = i;
            }
        }
        if(end - start + 1 >= 3){
            result.push_back({start, end});
        }
        return result;
