Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                if (nums[i] == nums[j]) {
                    ++count;
                }
            }
        }
        return count;

=======

        int cnt = 0;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                if (nums[i] == nums[j]) {
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j]) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    sum++;
                }
            }
        }
        return sum;

=======

        int n = nums.size();
        int count = 0;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i] == nums[j]){
                    count++;
                }
            }
        }
        return count;

=======

        vector<int> count(101, 0);
        int result = 0;
        for (int i = 0; i < nums.size(); i++) {
            result += count[nums[i]];
            count[nums[i]]++;
        }
        return result;

=======

        unordered_map<int, int> m;
        for (int n : nums) {
            m[n]++;
        }
        int res = 0;
        for (auto it : m) {
            res += (it.second * (it.second - 1)) / 2;
        }
        return res;
