Synthesizing 10/10 solutions

=======

        int min = nums[0], max = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] < min) min = nums[i];
            if (nums[i] > max) max = nums[i];
        }
        int diff = max - min;
        return diff > 2 * k ? diff - 2 * k : 0;

=======

        int min = *min_element(nums.begin(), nums.end());
        int max = *max_element(nums.begin(), nums.end());
        return max - min > 2 * k ? max - min - 2 * k : 0;

=======

        int min = INT_MAX, max = INT_MIN;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < min) min = nums[i];
            if (nums[i] > max) max = nums[i];
        }
        int diff = max - min;
        return diff <= 2*k ? 0 : diff - 2*k;

=======

        int min = 10000;
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < min) {
                min = nums[i];
            }
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        int diff = max - min;
        if (diff < k * 2) {
            return 0;
        } else {
            return diff - k * 2;
        }

=======

        int min = nums[0], max = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] < min) {
                min = nums[i];
            } else if (nums[i] > max) {
                max = nums[i];
            }
        }
        int diff = max - min;
        return diff <= 2*k ? 0 : diff - 2*k;

=======

        int min = nums[0], max = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] < min) min = nums[i];
            else if (nums[i] > max) max = nums[i];
        }
        return max - min > 2 * k ? max - min - 2 * k : 0;

=======

        int min = nums[0], max = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] < min) min = nums[i];
            else if (nums[i] > max) max = nums[i];
        }
        return max - min >= 2 * k ? max - min - 2 * k : 0;

=======

        int min = nums[0], max = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] < min) min = nums[i];
            if(nums[i] > max) max = nums[i];
        }
        if(max - min <= 2 * k) return 0;
        return max - min - 2 * k;

=======

        int min = INT_MAX;
        int max = INT_MIN;
        for (int n: nums) {
            if (n < min) min = n;
            if (n > max) max = n;
        }
        int diff = max - min;
        if (diff <= 2 * k) return 0;
        return diff - 2 * k;

=======

        int minn = nums[0],maxx = nums[0];
        for(int i=1;i<nums.size();i++){
            minn = min(minn,nums[i]);
            maxx = max(maxx,nums[i]);
        }
        int diff = maxx-minn;
        if(diff<=2*k) return 0;
        return diff-2*k;
