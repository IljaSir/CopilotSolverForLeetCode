Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> newNums(n / 2);
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = min(nums[2 * i], nums[2 * i + 1]);
        }
        for (int i = 0; i < n / 2; i++) {
            newNums[i] = max(nums[2 * i], nums[2 * i + 1]);
        }
        return minMaxGame(newNums);

=======

        int n = nums.size();
        while (n > 1) {
            for (int i = 0; i < n / 2; ++i) {
                if (n % 2 == 0) {
                    nums[i] = min(nums[2 * i], nums[2 * i + 1]);
                } else {
                    nums[i] = max(nums[2 * i], nums[2 * i + 1]);
                }
            }
            n /= 2;
        }
        return nums[0];

=======

        int n = nums.size();
        while (n > 1) {
            for (int i = 0; i < n / 2; ++i) {
                if (n % 2 == 0 || i < n / 2) {
                    nums[i] = min(nums[2 * i], nums[2 * i + 1]);
                }
                else {
                    nums[i] = max(nums[2 * i], nums[2 * i + 1]);
                }
            }
            n /= 2;
        }
        return nums[0];

=======

        int n = nums.size();
        int i = 0;
        while (n > 1) {
            int j = 0;
            for (i = 0; i < n; i += 2) {
                nums[j++] = min(nums[i], nums[i + 1]);
            }
            n = j;
        }
        return nums[0];

=======

        int n = nums.size();
        int res = nums[0];
        for(int i = 1; i < n; i++) {
            res = min(res, nums[i]);
        }
        return res;

=======

        return nums[0];
