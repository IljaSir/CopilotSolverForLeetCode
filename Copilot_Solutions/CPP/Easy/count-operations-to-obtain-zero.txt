Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (num1 == num2) return num1 == 0 ? 0 : 1;
        if (num1 < num2) swap(num1, num2);
        int ans = 0;
        while (num1 > 0 && num2 > 0) {
            ans += num1 / num2;
            num1 %= num2;
            swap(num1, num2);
        }
        return ans;

=======

        if (num1 == num2) {
            return num1 == 0 ? 0 : 1;
        }
        if (num1 > num2) {
            swap(num1, num2);
        }
        int count = 0;
        while (num1 != 0) {
            count += num2 / num1;
            num2 %= num1;
            swap(num1, num2);
        }
        return count;

=======

        if (num1 == num2) return num1 == 0 ? 0 : 1;
        if (num1 < num2) swap(num1, num2);
        int count = 0;
        while (num1 != 0) {
            int a = num1 / num2;
            int b = num1 % num2;
            count += a;
            num1 = b;
            swap(num1, num2);
        }
        return count;

=======

        if (num1 < num2) {
            return countOperations(num2, num1);
        }
        if (num2 == 0) {
            return 0;
        }
        int count = 0;
        while (num1 > 0) {
            count += num1 / num2;
            num1 %= num2;
            if (num1 < num2) {
                swap(num1, num2);
            }
        }
        return count;

=======

        int res = 0;
        while (num1 != 0 && num2 != 0) {
            if (num1 < num2) {
                swap(num1, num2);
            }
            res += num1 / num2;
            num1 %= num2;
        }
        return res;

=======

        if (num1 < num2) {
            swap(num1, num2);
        }
        int ans = 0;
        while (num1 != 0) {
            ans += num1 / num2;
            num1 %= num2;
            swap(num1, num2);
        }
        return ans;

=======

        if (num1 < num2) {
            std::swap(num1, num2);
        }
        int result = 0;
        while (num2 > 0) {
            result += num1 / num2;
            num1 = num1 % num2;
            std::swap(num1, num2);
        }
        return result;

=======

        if (num1 > num2) {
            swap(num1, num2);
        }
        int result = 0;
        while (num2 > num1) {
            result += num2 / num1;
            num2 %= num1;
            swap(num1, num2);
        }
        return result;

=======

        if(num1 > num2) {
            swap(num1, num2);
        }
        if(num2 == 0) {
            return 0;
        }
        int res = 0;
        while(num1 != 0) {
            res += num2 / num1;
            num2 %= num1;
            swap(num1, num2);
        }
        return res - 1;
