Synthesizing 10/10 solutions

=======

        sort(arr.begin(), arr.end(), [](int a, int b) {
            return __builtin_popcount(a) < __builtin_popcount(b) || (__builtin_popcount(a) == __builtin_popcount(b) && a < b);
        });
        return arr;

=======

        sort(arr.begin(), arr.end(), [](int a, int b) {
            int ca = 0, cb = 0;
            while (a) {
                ca += a & 1;
                a >>= 1;
            }
            while (b) {
                cb += b & 1;
                b >>= 1;
            }
            if (ca == cb) return a < b;
            return ca < cb;
        });
        return arr;

=======

        vector<int> bits(10001);
        bits[0] = 0;
        for (int i = 1; i < bits.size(); i++) {
            bits[i] = bits[i >> 1] + (i & 1);
        }
        sort(arr.begin(), arr.end(), [&](int a, int b) {
            return bits[a] == bits[b] ? a < b : bits[a] < bits[b];
        });
        return arr;

=======

        std::sort(arr.begin(), arr.end(), [](int a, int b) {
            int a1 = 0, b1 = 0;
            while (a) {
                a1 += a & 1;
                a >>= 1;
            }
            while (b) {
                b1 += b & 1;
                b >>= 1;
            }
            if (a1 == b1) return a < b;
            return a1 < b1;
        });
        return arr;

=======

        sort(arr.begin(), arr.end(), [](int a, int b) {
            int cntA = 0, cntB = 0;
            for (int i = 0; i < 14; i++) {
                if (a & (1 << i)) cntA++;
                if (b & (1 << i)) cntB++;
            }
            if (cntA == cntB) {
                return a < b;
            } else {
                return cntA < cntB;
            }
        });
        return arr;

=======

        auto f = [](int x) {
            int res = 0;
            while (x) {
                x &= x - 1;
                res++;
            }
            return res;
        };
        sort(arr.begin(), arr.end(), [&](int x, int y) {
            int a = f(x), b = f(y);
            return a == b ? x < y : a < b;
        });
        return arr;

=======

        vector<int> result;
        vector<int> count;
        for (int i = 0; i < arr.size(); i++) {
            int num = arr[i];
            int counter = 0;
            while (num > 0) {
                counter += num % 2;
                num /= 2;
            }
            count.push_back(counter);
        }
        for (int i = 0; i < arr.size(); i++) {
            for (int j = i + 1; j < arr.size(); j++) {
                if (count[i] > count[j]) {
                    swap(arr[i], arr[j]);
                    swap(count[i], count[j]);
                } else if (count[i] == count[j] && arr[i] > arr[j]) {
                    swap(arr[i], arr[j]);
                }
            }
        }
        return arr;

=======

        vector<int> ans;
        sort(arr.begin(), arr.end());
        map<int, vector<int>> m;
        for (auto x : arr) {
            int cnt = 0;
            int y = x;
            while (y) {
                cnt += (y & 1);
                y >>= 1;
            }
            m[cnt].push_back(x);
        }
        for (auto x : m) {
            for (auto y : x.second) {
                ans.push_back(y);
            }
        }
        return ans;

=======

        vector<int> result;
        for (auto& i : arr) {
            int count = 0;
            int tmp = i;
            while (tmp) {
                count++;
                tmp &= (tmp - 1);
            }
            result.push_back(count);
        }
        for (int i = 0; i < arr.size(); ++i) {
            for (int j = 0; j < arr.size() - 1; ++j) {
                if (result[j] > result[j + 1]) {
                    swap(result[j], result[j + 1]);
                    swap(arr[j], arr[j + 1]);
                } else if (result[j] == result[j + 1]) {
                    if (arr[j] > arr[j + 1]) {
                        swap(result[j], result[j + 1]);
                        swap(arr[j], arr[j + 1]);
                    }
                }
            }
        }
        return arr;

=======

        vector<int> res;
        vector<vector<int>> v(15);
        for (int i: arr) {
            int cnt = 0;
            int j = i;
            while (j != 0) {
                if (j & 1) cnt++;
                j >>= 1;
            }
            v[cnt].push_back(i);
        }
        for (int i = 0; i < 15; i++) {
            sort(v[i].begin(), v[i].end());
            for (int j: v[i]) res.push_back(j);
        }
        return res;
