Synthesizing 10/10 solutions

=======

        vector<bool> upper(26, false), lower(26, false);
        for (char c: s) {
            if (isupper(c)) upper[c - 'A'] = true;
            else lower[c - 'a'] = true;
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] && lower[i]) return string(1, 'A' + i);
        }
        return "";

=======

        int n = s.size();
        vector<int> v(52, 0);
        for (int i = 0; i < n; i++) {
            if (s[i] >= 'a' && s[i] <= 'z') {
                v[s[i] - 'a']++;
            } else {
                v[s[i] - 'A' + 26]++;
            }
        }
        for (int i = 25; i >= 0; i--) {
            if (v[i] > 0 && v[i + 26] > 0) {
                return string(1, 'A' + i);
            }
        }
        return "";

=======

        vector<int> count(26, 0);
        for (char c: s) {
            count[tolower(c) - 'a']++;
        }
        for (int i = 25; i >= 0; i--) {
            if (count[i] > 0 && count[i] < s.size()) {
                return string(1, 'A' + i);
            }
        }
        return "";

=======

        int upper[26] = {0}, lower[26] = {0};
        for (char ch : s) {
            if (ch >= 'A' && ch <= 'Z') upper[ch - 'A'] = 1;
            if (ch >= 'a' && ch <= 'z') lower[ch - 'a'] = 1;
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] && lower[i]) return string(1, i + 'A');
        }
        return "";

=======

        int n = s.size();
        if (n == 0) return "";
        if (n == 1) return s;
        sort(s.begin(), s.end());
        for (int i = 1; i < n; i++) {
            if (s[i] == s[i - 1] + 32) return string(1, s[i]);
        }
        return "";

=======

        string res = "";
        int upper[26] = {0};
        int lower[26] = {0};
        for (char c : s) {
            if (isupper(c)) {
                upper[c - 'A'] = 1;
            } else {
                lower[c - 'a'] = 1;
            }
        }
        for (int i = 25; i >= 0; i--) {
            if (upper[i] == 1 && lower[i] == 1) {
                res += (i + 'A');
                return res;
            }
        }
        return res;

=======

        int n = s.length();
        int a[26] = {0};
        for(int i = 0; i < n; i++){
            a[s[i] - 'A']++;
        }
        for(int i = 25; i >= 0; i--){
            if(a[i] > 0 && a[i + 32] > 0){
                return string(1, 'A' + i);
            }
        }
        return "";

=======

        int i = 0;
        while(i < s.length()){
            if(s[i] >= 'A' && s[i] <= 'Z'){
                for(int j = 0; j < s.length(); j++){
                    if(s[j] == s[i] + 32){
                        return string(1, s[i]);
                    }
                }
            }
            i++;
        }
        return "";

=======

        string ans = "";
        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            if (m.find(tolower(it->first)) != m.end() && m.find(toupper(it->first)) != m.end()) {
                ans = it->first;
            }
        }
        return ans;

=======

        int n = s.size();
        if(n==0) return "";
        unordered_map<char, int> mp;
        for(int i=0;i<n;i++){
            mp[s[i]]++;
        }
        for(int i=0;i<n;i++){
            if(mp[s[i]]>0 && mp[toupper(s[i])]>0){
                return string(1, s[i]);
            }
        }
        return "";
