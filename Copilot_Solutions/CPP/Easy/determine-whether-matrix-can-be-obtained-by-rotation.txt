Synthesizing 10/10 solutions

=======

        int n = mat.size();
        for (int i = 0; i < 4; ++i) {
            if (mat == target) {
                return true;
            }
            rotate(mat);
        }
        return false;

=======

        int n = mat.size();
        for (int i = 0; i < 4; i++) {
            if (mat == target) {
                return true;
            }
            rotate(mat);
        }
        return false;
    }
    void rotate(vector<vector<int>>& mat) {
        int n = mat.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                swap(mat[i][j], mat[j][i]);
            }
        }
        for (int i = 0; i < n; i++) {
            reverse(mat[i].begin(), mat[i].end());
        }

=======

        int n = mat.size();
        for (int i = 0; i < 4; i++) {
            if (mat == target) {
                return true;
            }
            rotate(mat);
        }
        return false;
    }
    
    void rotate(vector<vector<int>>& mat) {
        int n = mat.size();
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[n - j - 1][i];
                mat[n - j - 1][i] = mat[n - i - 1][n - j - 1];
                mat[n - i - 1][n - j - 1] = mat[j][n - i - 1];
                mat[j][n - i - 1] = temp;
            }
        }

=======

        int n = mat.size();
        for (int i = 0; i < 4; i++) {
            rotate(mat);
            if (mat == target) return true;
        }
        return false;
    }
    void rotate(vector<vector<int>>& mat) {
        int n = mat.size();
        for (int i = 0; i < n / 2; i++) {
            for (int j = i; j < n - i - 1; j++) {
                int tmp = mat[i][j];
                mat[i][j] = mat[n - j - 1][i];
                mat[n - j - 1][i] = mat[n - i - 1][n - j - 1];
                mat[n - i - 1][n - j - 1] = mat[j][n - i - 1];
                mat[j][n - i - 1] = tmp;
            }
        }

=======

        int n = mat.size();
        for (int i = 0; i < 4; i++) {
            if (mat == target) {
                return true;
            }
            vector<vector<int>> tmp(n, vector<int>(n, 0));
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    tmp[k][n - 1 - j] = mat[j][k];
                }
            }
            mat = tmp;
        }
        return false;

=======

        int n = mat.size();
        for (int i = 0; i < 4; i++) {
            if (mat == target) {
                return true;
            }
            vector<vector<int>> newMat(n, vector<int>(n));
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    newMat[j][n - i - 1] = mat[i][j];
                }
            }
            mat = newMat;
        }
        return false;

=======

        int n = mat.size();
        if (n == 1) {
            return mat[0][0] == target[0][0];
        }
        for (int i = 0; i < 4; i++) {
            if (mat == target) {
                return true;
            }
            vector<vector<int>> temp(n, vector<int>(n));
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    temp[i][j] = mat[n - 1 - j][i];
                }
            }
            mat = temp;
        }
        return false;

=======

        int n = mat.size();
        for (int i = 0; i < 4; ++i) {
            if (mat == target) return true;
            vector<vector<int>> t(n, vector<int>(n));
            for (int r = 0; r < n; ++r) {
                for (int c = 0; c < n; ++c) {
                    t[c][n - 1 - r] = mat[r][c];
                }
            }
            mat = t;
        }
        return false;

=======

        int n = mat.size();
        vector<vector<int>> temp(n, vector<int>(n));
        for (int k = 0; k < 4; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    temp[i][j] = mat[n - j - 1][i];
                }
            }
            if (temp == target) {
                return true;
            }
            mat = temp;
        }
        return false;

=======

        int n = mat.size();
        int m = mat[0].size();
        int i, j, k;
        for (k = 0; k < 4; k++) {
            for (i = 0; i < n; i++) {
                for (j = 0; j < m; j++) {
                    if (mat[i][j] != target[i][j]) {
                        break;
                    }
                }
                if (j != m) {
                    break;
                }
            }
            if (i == n && j == m) {
                return true;
            }
            rotate(mat);
        }
        return false;
    }
    
    void rotate(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        int i, j;
        for (i = 0; i < n; i++) {
            for (j = i; j < m; j++) {
                swap(mat[i][j], mat[j][i]);
            }
        }
        for (i = 0; i < n; i++) {
            for (j = 0; j < m / 2; j++) {
                swap(mat[i][j], mat[i][m - j - 1]);
            }
        }
