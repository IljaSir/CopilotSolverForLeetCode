Synthesizing 10/10 solutions

=======

        vector<int> res;
        map<int, int> m;
        for (int i = 0; i < nums1.size(); i++) {
            m[nums1[i]]++;
        }
        for (int i = 0; i < nums2.size(); i++) {
            m[nums2[i]]++;
        }
        for (int i = 0; i < nums3.size(); i++) {
            m[nums3[i]]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second >= 2) {
                res.push_back(it->first);
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> map;
        for (int i = 0; i < nums1.size(); i++) {
            map[nums1[i]]++;
        }
        for (int i = 0; i < nums2.size(); i++) {
            map[nums2[i]]++;
        }
        for (int i = 0; i < nums3.size(); i++) {
            map[nums3[i]]++;
        }
        for (auto i : map) {
            if (i.second >= 2) {
                res.push_back(i.first);
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> m;
        for (int i : nums1) {
            m[i]++;
        }
        for (int i : nums2) {
            m[i]++;
        }
        for (int i : nums3) {
            m[i]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second >= 2) {
                res.push_back(it->first);
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> m;
        for (int i = 0; i < nums1.size(); ++i)
            ++m[nums1[i]];
        for (int i = 0; i < nums2.size(); ++i)
            ++m[nums2[i]];
        for (int i = 0; i < nums3.size(); ++i)
            ++m[nums3[i]];
        for (auto it = m.begin(); it != m.end(); ++it)
            if (it->second >= 2)
                res.push_back(it->first);
        return res;

=======

        vector<int> v;
        int i,j,k;
        for(i=0;i<nums1.size();i++)
        {
            for(j=0;j<nums2.size();j++)
            {
                if(nums1[i]==nums2[j])
                {
                    v.push_back(nums1[i]);
                    break;
                }
            }
        }
        for(i=0;i<nums1.size();i++)
        {
            for(j=0;j<nums3.size();j++)
            {
                if(nums1[i]==nums3[j])
                {
                    v.push_back(nums1[i]);
                    break;
                }
            }
        }
        for(i=0;i<nums2.size();i++)
        {
            for(j=0;j<nums3.size();j++)
            {
                if(nums2[i]==nums3[j])
                {
                    v.push_back(nums2[i]);
                    break;
                }
            }
        }
        sort(v.begin(),v.end());
        v.erase(unique(v.begin(),v.end()),v.end());
        return v;

=======

        vector<int> ans;
        for (int i = 0; i < nums1.size(); i++) {
            if (find(nums2.begin(), nums2.end(), nums1[i]) != nums2.end() ||
                find(nums3.begin(), nums3.end(), nums1[i]) != nums3.end()) {
                if (find(ans.begin(), ans.end(), nums1[i]) == ans.end()) {
                    ans.push_back(nums1[i]);
                }
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            if (find(nums1.begin(), nums1.end(), nums2[i]) != nums1.end() ||
                find(nums3.begin(), nums3.end(), nums2[i]) != nums3.end()) {
                if (find(ans.begin(), ans.end(), nums2[i]) == ans.end()) {
                    ans.push_back(nums2[i]);
                }
            }
        }
        for (int i = 0; i < nums3.size(); i++) {
            if (find(nums1.begin(), nums1.end(), nums3[i]) != nums1.end() ||
                find(nums2.begin(), nums2.end(), nums3[i]) != nums2.end()) {
                if (find(ans.begin(), ans.end(), nums3[i]) == ans.end()) {
                    ans.push_back(nums3[i]);
                }
            }
        }
        return ans;

=======

        vector<int> ans;
        vector<int> count(101, 0);
        for(int i = 0; i < nums1.size(); i++) {
            count[nums1[i]]++;
        }
        for(int i = 0; i < nums2.size(); i++) {
            count[nums2[i]]++;
        }
        for(int i = 0; i < nums3.size(); i++) {
            count[nums3[i]]++;
        }
        for(int i = 0; i < count.size(); i++) {
            if(count[i] >= 2) {
                ans.push_back(i);
            }
        }
        return ans;

=======

        vector<int> ret;
        unordered_map<int, int> m;
        for (int num : nums1) {
            m[num]++;
        }
        for (int num : nums2) {
            m[num]++;
        }
        for (int num : nums3) {
            m[num]++;
        }
        for (auto it : m) {
            if (it.second >= 2) {
                ret.push_back(it.first);
            }
        }
        return ret;

=======

        vector<int> res;
        int count[101] = {0};
        for(int i=0;i<nums1.size();i++) {
            count[nums1[i]]++;
        }
        for(int i=0;i<nums2.size();i++) {
            count[nums2[i]]++;
        }
        for(int i=0;i<nums3.size();i++) {
            count[nums3[i]]++;
        }
        for(int i=1;i<101;i++) {
            if(count[i] > 1) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> result;
        unordered_map<int, int> map;
        for (auto i : nums1) map[i] |= 1;
        for (auto i : nums2) map[i] |= 2;
        for (auto i : nums3) map[i] |= 4;
        for (auto i : map) {
            if (i.second >= 2) result.push_back(i.first);
        }
        return result;
