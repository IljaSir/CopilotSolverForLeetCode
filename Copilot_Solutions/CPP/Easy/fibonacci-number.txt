Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        return fib(n - 1) + fib(n - 2);

=======

        if (n == 0) return 0;
        if (n == 1) return 1;
        return fib(n - 1) + fib(n - 2);

=======

        if (n == 0) return 0;
        if (n == 1) return 1;
        int a = 0, b = 1, c = 0;
        for (int i = 2; i <= n; ++i) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;

=======

        if (n == 0) return 0;
        if (n == 1 || n == 2) return 1;
        int a = 1, b = 1, c = 0;
        for (int i = 3; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;

=======

        int a = 0, b = 1;
        while (n--) {
            int c = a + b;
            a = b;
            b = c;
        }
        return a;

=======

        int f0 = 0, f1 = 1, f2 = 0;
        if (n == 0) return f0;
        if (n == 1) return f1;
        for (int i = 2; i <= n; i++) {
            f2 = f0 + f1;
            f0 = f1;
            f1 = f2;
        }
        return f2;

=======

        int f1 = 0, f2 = 1, f3;
        if (n == 0) return f1;
        if (n == 1) return f2;
        for (int i = 2; i <= n; i++) {
            f3 = f1 + f2;
            f1 = f2;
            f2 = f3;
        }
        return f3;

=======

        int f = 0, g = 1;
        while (n--) {
            g = g + f;
            f = g - f;
        }
        return f;

=======

        if (n == 0 || n == 1) return n;
        int a = 0, b = 1;
        int sum = 0;
        for (int i = 2; i <= n; i++) {
            sum = a + b;
            a = b;
            b = sum;
        }
        return sum;
