Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < k; ++i) {
            sum += nums[i];
        }
        int maxSum = sum;
        for (int i = k; i < nums.size(); ++i) {
            sum += nums[i] - nums[i-k];
            maxSum = max(maxSum, sum);
        }
        return (double)maxSum / k;

=======

        double sum = 0;
        for (int i = 0; i < k; ++i) {
            sum += nums[i];
        }
        double maxSum = sum;
        for (int i = k; i < nums.size(); ++i) {
            sum += nums[i] - nums[i - k];
            maxSum = max(maxSum, sum);
        }
        return maxSum / k;

=======

        double sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        double max = sum;
        for (int i = k; i < nums.size(); i++) {
            sum += nums[i] - nums[i - k];
            if (sum > max) max = sum;
        }
        return max / k;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        double ans = INT_MIN;
        for (int i = 0; i + k <= n; i++) {
            ans = max(ans, (double) (sum[i + k] - sum[i]) / k);
        }
        return ans;

=======

        int n = nums.size();
        double sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        double maxSum = sum;
        for (int i = k; i < n; i++) {
            sum += nums[i] - nums[i - k];
            maxSum = max(maxSum, sum);
        }
        return maxSum / k;

=======

        int n = nums.size();
        double sum = 0;
        for (int i = 0; i < k; ++i) {
            sum += nums[i];
        }
        double maxSum = sum;
        for (int i = k; i < n; ++i) {
            sum += nums[i];
            sum -= nums[i - k];
            maxSum = max(maxSum, sum);
        }
        return maxSum / k;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        double res = INT_MIN;
        for (int i = k; i <= n; ++i) {
            res = max(res, 1.0 * (sum[i] - sum[i-k]) / k);
        }
        return res;

=======

        int n = nums.size();
        vector<int> sums(n + 1);
        for (int i = 0; i < n; ++i) {
            sums[i + 1] = sums[i] + nums[i];
        }
        double res = INT_MIN;
        for (int i = k; i <= n; ++i) {
            res = max(res, (sums[i] - sums[i - k]) * 1.0 / k);
        }
        return res;

=======

        int n = nums.size();
        vector<int> sum(n+1);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        double ans = INT_MIN;
        for (int i = 0; i < n-k+1; ++i) {
            ans = max(ans, (double)sum[i+k]-sum[i]/(double)k);
        }
        return ans;

=======

        int n = nums.size();
        double sum = 0, res = 0;
        for (int i = 0; i < n; i++) {
            if (i < k) {
                sum += nums[i];
            } else {
                sum += nums[i] - nums[i - k];
            }
            if (i >= k - 1) {
                res = max(res, sum);
            }
        }
        return res / k;
