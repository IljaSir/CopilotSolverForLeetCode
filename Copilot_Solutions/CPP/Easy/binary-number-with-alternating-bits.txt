Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int last = n % 2;
        n /= 2;
        while (n) {
            if (n % 2 == last) {
                return false;
            }
            last = n % 2;
            n /= 2;
        }
        return true;

=======

        int last = n & 1;
        n >>= 1;
        while (n > 0) {
            int cur = n & 1;
            if (cur == last) {
                return false;
            }
            last = cur;
            n >>= 1;
        }
        return true;

=======

        int lastBit = n & 1;
        n = n >> 1;
        while (n > 0) {
            int bit = n & 1;
            if (bit == lastBit) {
                return false;
            }
            lastBit = bit;
            n = n >> 1;
        }
        return true;

=======

        int prev = n & 1;
        n >>= 1;
        while (n > 0) {
            if (prev == (n & 1)) {
                return false;
            }
            prev = n & 1;
            n >>= 1;
        }
        return true;

=======

        int last = -1;
        while (n > 0) {
            int bit = n & 1;
            if (bit == last) {
                return false;
            }
            last = bit;
            n >>= 1;
        }
        return true;

=======

        int last = n & 1;
        n = n >> 1;
        while (n > 0) {
            int current = n & 1;
            if (current == last) {
                return false;
            }
            last = current;
            n = n >> 1;
        }
        return true;

=======

        int last = n % 2;
        n = n / 2;
        while (n > 0) {
            int current = n % 2;
            if (last == current) {
                return false;
            }
            last = current;
            n = n / 2;
        }
        return true;

=======

        while (n > 0) {
            int lastBit = n & 1;
            n >>= 1;
            if (n > 0 && (n & 1) == lastBit)
                return false;
        }
        return true;
