Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        vector<int> result;
        int currentSum = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            currentSum += nums[i];
            result.push_back(nums[i]);
            if (currentSum > sum - currentSum) {
                break;
            }
        }
        return result;

=======

        sort(nums.begin(), nums.end(), greater<int>());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int sum2 = 0;
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            sum2 += nums[i];
            res.push_back(nums[i]);
            if (sum2 > sum - sum2) {
                break;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        vector<int> ans;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int cur = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            ans.push_back(nums[i]);
            cur += nums[i];
            if (cur > sum - cur) {
                break;
            }
        }
        return ans;

=======

        vector<int> res;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        sort(nums.begin(), nums.end());
        int curSum = 0;
        for (int i = nums.size() - 1; i >= 0; --i) {
            curSum += nums[i];
            sum -= nums[i];
            res.push_back(nums[i]);
            if (curSum > sum) {
                break;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end(), greater<int>());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        vector<int> result = {};
        int temp = 0;
        for (int i = 0; i < nums.size(); i++) {
            temp += nums[i];
            result.push_back(nums[i]);
            if (temp > sum - temp) {
                break;
            }
        }
        return result;

=======

        vector<int> res;
        int sum = 0;
        for (int i : nums)
            sum += i;
        sort(nums.begin(), nums.end(), greater<int>());
        int tmp = 0;
        for (int i = 0; i < nums.size(); i++) {
            tmp += nums[i];
            res.push_back(nums[i]);
            if (tmp > sum - tmp)
                break;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int sum = 0;
        for (int i : nums) {
            sum += i;
        }
        
        vector<int> res;
        int cur = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            cur += nums[i];
            res.push_back(nums[i]);
            if (cur > sum - cur) {
                break;
            }
        }
        
        return res;

=======

        sort(nums.begin(), nums.end(), greater<int>());
        int sum = 0;
        for (auto n : nums) {
            sum += n;
        }
        int sum1 = 0;
        vector<int> res;
        for (auto n : nums) {
            res.push_back(n);
            sum1 += n;
            sum -= n;
            if (sum1 > sum) {
                return res;
            }
        }
        return res;

=======

        vector<int> ans;
        int sum = 0;
        for (int n: nums)
            sum += n;
        sort(nums.begin(), nums.end(), greater<int>());
        int tmp = 0;
        for (int n: nums) {
            ans.push_back(n);
            tmp += n;
            if (tmp > sum - tmp)
                break;
        }
        return ans;

=======

        vector<int> res;
        int sum = 0;
        for (auto n : nums) sum += n;
        sort(nums.begin(), nums.end());
        int half = sum / 2;
        while (sum > 0) {
            int n = nums.back();
            nums.pop_back();
            res.push_back(n);
            sum -= n;
            if (sum <= half) break;
        }
        return res;
