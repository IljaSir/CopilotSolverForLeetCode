Synthesizing 10/10 solutions

=======

        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (auto& index : indices) {
            row[index[0]]++;
            col[index[1]]++;
        }
        int oddCount = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((row[i] + col[j]) % 2 == 1) {
                    oddCount++;
                }
            }
        }
        return oddCount;

=======

        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (auto& index : indices) {
            row[index[0]]++;
            col[index[1]]++;
        }
        int oddRow = 0;
        int oddCol = 0;
        for (int i = 0; i < m; i++) {
            if (row[i] & 1) {
                oddRow++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (col[i] & 1) {
                oddCol++;
            }
        }
        return oddRow * n + oddCol * m - 2 * oddRow * oddCol;

=======

        vector<int> rows(m, 0);
        vector<int> cols(n, 0);
        int count = 0;
        for (int i = 0; i < indices.size(); i++) {
            rows[indices[i][0]]++;
            cols[indices[i][1]]++;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((rows[i] + cols[j]) % 2 == 1) {
                    count++;
                }
            }
        }
        return count;

=======

        vector<int> rows(m, 0);
        vector<int> cols(n, 0);
        for (auto& v : indices) {
            rows[v[0]]++;
            cols[v[1]]++;
        }
        
        int oddRows = 0;
        int oddCols = 0;
        for (int i = 0; i < m; i++) {
            if (rows[i] % 2 != 0) {
                oddRows++;
            }
        }
        
        for (int i = 0; i < n; i++) {
            if (cols[i] % 2 != 0) {
                oddCols++;
            }
        }
        
        return oddRows * n + oddCols * m - 2 * oddRows * oddCols;

=======

        vector<int> rows(m, 0);
        vector<int> cols(n, 0);
        for (auto& r : indices) {
            ++rows[r[0]];
            ++cols[r[1]];
        }
        int oddRows = 0;
        for (int i = 0; i < m; ++i) {
            if (rows[i] % 2 == 1) {
                ++oddRows;
            }
        }
        int oddCols = 0;
        for (int i = 0; i < n; ++i) {
            if (cols[i] % 2 == 1) {
                ++oddCols;
            }
        }
        return oddRows * n + oddCols * m - oddRows * oddCols * 2;

=======

        vector<int> row(m, 0), col(n, 0);
        for (auto& i: indices) {
            row[i[0]]++;
            col[i[1]]++;
        }
        int res = 0;
        for (auto& i: row) {
            for (auto& j: col) {
                if ((i + j) % 2 == 1) res++;
            }
        }
        return res;

=======

        int res = 0;
        vector<int> rows(m, 0);
        vector<int> cols(n, 0);
        for (auto &idx : indices) {
            rows[idx[0]]++;
            cols[idx[1]]++;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((rows[i] + cols[j]) % 2 != 0) {
                    res++;
                }
            }
        }
        return res;

=======

        int row[m] = {0};
        int col[n] = {0};
        for (auto &index : indices) {
            row[index[0]]++;
            col[index[1]]++;
        }
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((row[i] + col[j]) % 2 == 1) {
                    count++;
                }
            }
        }
        return count;

=======

        int ans = 0;
        vector<int> row(m, 0), col(n, 0);
        for (auto& idx : indices) {
            row[idx[0]] ^= 1;
            col[idx[1]] ^= 1;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (row[i] ^ col[j]) {
                    ans++;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> matrix(m, vector<int>(n, 0));
        for (auto &row: matrix) {
            for (auto &cell: row) {
                cell = 0;
            }
        }
        for (auto &index: indices) {
            for (int i = 0; i < n; i++) {
                matrix[index[0]][i]++;
            }
            for (int i = 0; i < m; i++) {
                matrix[i][index[1]]++;
            }
        }
        int oddCount = 0;
        for (auto &row: matrix) {
            for (auto &cell: row) {
                if (cell % 2 == 1) {
                    oddCount++;
                }
            }
        }
        return oddCount;
