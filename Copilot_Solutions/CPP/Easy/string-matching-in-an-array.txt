Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<string> res;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i == j) continue;
                if (words[i].find(words[j]) != string::npos) {
                    res.push_back(words[j]);
                }
            }
        }
        return res;

=======

        vector<string> res;
        for (int i = 0; i < words.size(); ++i) {
            for (int j = 0; j < words.size(); ++j) {
                if (i != j && words[j].find(words[i]) != string::npos) {
                    res.push_back(words[i]);
                    break;
                }
            }
        }
        return res;

=======

        vector<string> result;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i == j) continue;
                if (words[j].find(words[i]) != string::npos) {
                    result.push_back(words[i]);
                    break;
                }
            }
        }
        return result;

=======

        vector<string> ans;
        for (int i = 0; i < words.size(); ++i) {
            for (int j = 0; j < words.size(); ++j) {
                if (i != j && words[j].find(words[i]) != -1) {
                    ans.push_back(words[i]);
                    break;
                }
            }
        }
        return ans;

=======

        vector<string> res;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i != j && words[i].find(words[j]) != string::npos) {
                    res.push_back(words[j]);
                }
            }
        }
        return res;

=======

        vector<string> ans;
        for (int i = 0; i < words.size(); i++) {
            for (int j = 0; j < words.size(); j++) {
                if (i != j) {
                    string s1 = words[i];
                    string s2 = words[j];
                    if (s1.size() > s2.size()) {
                        swap(s1, s2);
                    }
                    if (s2.find(s1) != string::npos) {
                        ans.push_back(s1);
                        break;
                    }
                }
            }
        }
        return ans;

=======

        vector<string> result;
        for(int i = 0; i < words.size(); i++) {
            for(int j = 0; j < words.size(); j++) {
                if(i != j && words[j].find(words[i]) != string::npos) {
                    result.push_back(words[i]);
                    break;
                }
            }
        }
        return result;

=======

        int n = words.size();
        vector<string> res;
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                if(i == j) continue;
                if(words[j].find(words[i]) != string::npos) {
                    res.push_back(words[i]);
                    break;
                }
            }
        }
        return res;
