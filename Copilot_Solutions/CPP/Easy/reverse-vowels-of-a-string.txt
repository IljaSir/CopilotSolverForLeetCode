Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = s.size() - 1;
        while (i < j) {
            while (i < j && !isVowel(s[i])) i++;
            while (i < j && !isVowel(s[j])) j--;
            if (i < j) {
                swap(s[i], s[j]);
                i++;
                j--;
            }
        }
        return s;

=======

        int i = 0, j = s.size() - 1;
        while (i < j) {
            while (i < j && !isVowel(s[i])) i++;
            while (i < j && !isVowel(s[j])) j--;
            swap(s[i++], s[j--]);
        }
        return s;

=======

        int l = 0, r = s.size() - 1;
        while (l < r) {
            while (l < r && !isVowel(s[l])) l++;
            while (l < r && !isVowel(s[r])) r--;
            swap(s[l++], s[r--]);
        }
        return s;

=======

        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (isVowel(s[i]) && isVowel(s[j])) {
                swap(s[i], s[j]);
                ++i;
                --j;
            } else if (!isVowel(s[i])) {
                ++i;
            } else if (!isVowel(s[j])) {
                --j;
            }
        }
        return s;

=======

        int l = 0, r = s.size() - 1;
        while (l < r) {
            while (l < r && !isVowel(s[l])) ++l;
            while (l < r && !isVowel(s[r])) --r;
            swap(s[l++], s[r--]);
        }
        return s;

=======

        int i = 0, j = s.length() - 1;
        while (i < j) {
            while (i < j && !isVowel(s[i])) ++i;
            while (i < j && !isVowel(s[j])) --j;
            if (i < j) swap(s[i++], s[j--]);
        }
        return s;

=======

        int start = 0, end = s.size() - 1;
        while (start < end) {
            if (isVowel(s[start]) && isVowel(s[end])) {
                swap(s[start], s[end]);
                ++start;
                --end;
            } else if (isVowel(s[start])) {
                --end;
            } else if (isVowel(s[end])) {
                ++start;
            } else {
                ++start;
                --end;
            }
        }
        return s;

=======

        int n = s.size();
        int i = 0;
        int j = n - 1;
        while (i < j) {
            while (i < j && !isVowel(s[i])) i++;
            while (i < j && !isVowel(s[j])) j--;
            swap(s[i], s[j]);
            i++;
            j--;
        }
        return s;

=======

        int i = 0;
        int j = s.length() - 1;
        while(i < j){
            while(i < j && !isVowel(s[i])){
                i++;
            }
            while(i < j && !isVowel(s[j])){
                j--;
            }
            swap(s[i], s[j]);
            i++;
            j--;
        }
        return s;
