Synthesizing 10/10 solutions

=======

        if (n == 0) return 1;
        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) + 1;
        }
        return n ^ mask;

=======

        if (n == 0)
            return 1;
        int mask = 1 << 30;
        while ((mask & n) == 0) {
            mask >>= 1;
        }
        mask = (mask << 1) - 1;
        return (~n & mask);

=======

        if (n == 0) return 1;
        int mask = 1;
        while (mask <= n) {
            mask <<= 1;
        }
        return (mask - 1) ^ n;

=======

        if (n == 0) return 1;
        int i = 0;
        while (n) {
            n >>= 1;
            i++;
        }
        return ((1 << i) - 1) ^ n;

=======

        if (n == 0) return 1;
        int res = 0;
        for (int i = 0; i < 32; ++i) {
            if (n & (1 << i)) res |= (1 << i);
            else res &= ~(1 << i);
        }
        return res;

=======

        if (n == 0) return 1;
        int ans = 0;
        int base = 1;
        while (n) {
            ans += (n & 1) ? 0 : base;
            base *= 2;
            n >>= 1;
        }
        return ans;

=======

        if (n == 0) return 1;
        int res = 0;
        int i = 0;
        while (n > 0) {
            int bit = n & 1;
            res += (1 - bit) * pow(2, i);
            n = n >> 1;
            i++;
        }
        return res;

=======

        int res = 0, i = 0;
        while (n > 0) {
            if (n % 2 == 0) res += pow(2, i);
            i++;
            n /= 2;
        }
        return res;

=======

        if (n == 0) return 1;
        int bit = 0;
        int res = 0;
        while (n) {
            if ((n & 1) == 0) {
                res += pow(2, bit);
            }
            n >>= 1;
            ++bit;
        }
        return res;

=======

        if(n==0)
            return 1;
        int temp = n;
        int i=0;
        while(temp>0)
        {
            temp = temp>>1;
            i++;
        }
        int mask = (1<<i)-1;
        return n^mask;
