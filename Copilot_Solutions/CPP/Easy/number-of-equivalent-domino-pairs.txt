Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < dominoes.size(); i++) {
            for (int j = i + 1; j < dominoes.size(); j++) {
                if (dominoes[i][0] == dominoes[j][0] && dominoes[i][1] == dominoes[j][1]) {
                    count++;
                } else if (dominoes[i][0] == dominoes[j][1] && dominoes[i][1] == dominoes[j][0]) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = dominoes.size();
        int count = 0;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((dominoes[i][0] == dominoes[j][0] && dominoes[i][1] == dominoes[j][1]) || (dominoes[i][0] == dominoes[j][1] && dominoes[i][1] == dominoes[j][0])) {
                    count++;
                }
            }
        }
        return count;

=======

        map<pair<int, int>, int> m;
        for (auto d : dominoes) {
            if (d[0] > d[1]) swap(d[0], d[1]);
            m[make_pair(d[0], d[1])]++;
        }
        int res = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            res += it->second * (it->second - 1) / 2;
        }
        return res;

=======

        unordered_map<int, int> m;
        int res = 0;
        for (auto d : dominoes) {
            int key = d[0] < d[1] ? d[0] * 10 + d[1] : d[1] * 10 + d[0];
            res += m[key]++;
        }
        return res;

=======

        int res = 0;
        unordered_map<int, int> m;
        for (auto d : dominoes) {
            int k = d[0] < d[1] ? d[0] * 10 + d[1] : d[1] * 10 + d[0];
            res += m[k];
            m[k]++;
        }
        return res;

=======

        vector<int> count(100, 0);
        int res = 0;
        for (auto& d : dominoes) {
            int n = d[0] < d[1] ? d[0] * 10 + d[1] : d[1] * 10 + d[0];
            res += count[n];
            count[n]++;
        }
        return res;

=======

        int count[10][10] = {0};
        for (auto domino : dominoes) {
            if (domino[0] > domino[1]) {
                swap(domino[0], domino[1]);
            }
            count[domino[0]][domino[1]]++;
        }
        int res = 0;
        for (int i = 1; i <= 9; i++) {
            for (int j = i; j <= 9; j++) {
                res += count[i][j] * (count[i][j] - 1) / 2;
            }
        }
        return res;

=======

        int n = dominoes.size();
        vector<int> cnt(100);
        for (auto& d : dominoes) {
            int x = d[0], y = d[1];
            if (x > y) swap(x, y);
            ++cnt[x * 10 + y];
        }
        int ans = 0;
        for (int c : cnt) {
            ans += c * (c - 1) / 2;
        }
        return ans;

=======

        int res = 0;
        int count[10][10] = {0};
        for (auto& d: dominoes) {
            res += count[d[0]][d[1]]++;
            if (d[0] != d[1]) {
                res += count[d[1]][d[0]]++;
            }
        }
        return res;

=======

        int count = 0;
        unordered_map<int, int> m;
        for (auto & d : dominoes) {
            int val = d[0] < d[1] ? d[0] * 10 + d[1] : d[1] * 10 + d[0];
            count += m[val]++;
        }
        return count;
