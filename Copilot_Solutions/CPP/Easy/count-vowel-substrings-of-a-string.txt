Synthesizing 10/10 solutions

=======

        int a = 0, e = 0, i = 0, o = 0, u = 0, n = word.length();
        for (int j = 0; j < n; j++) {
            if (word[j] == 'a') {
                a = 1 + a + e + i + o + u;
            } else if (word[j] == 'e') {
                e = e + i + o + u;
            } else if (word[j] == 'i') {
                i = i + o + u;
            } else if (word[j] == 'o') {
                o = o + u;
            } else if (word[j] == 'u') {
                u = u + 1;
            }
        }
        return a;

=======

        int count = 0;
        int a = 0, e = 0, i = 0, o = 0, u = 0;
        for (auto c : word) {
            if (c == 'a') {
                a = 1 + a + e + i + o + u;
            } else if (c == 'e') {
                e = e + i + o + u;
            } else if (c == 'i') {
                i = i + o + u;
            } else if (c == 'o') {
                o = o + u;
            } else if (c == 'u') {
                u = u + 1;
            }
            count += a;
        }
        return count;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < n; i++) {
            if (word[i] == 'a') {
                dp[i][0] = 1;
            }
            if (word[i] == 'e') {
                dp[i][1] = 1;
            }
            if (word[i] == 'i') {
                dp[i][2] = 1;
            }
            if (word[i] == 'o') {
                dp[i][3] = 1;
            }
            if (word[i] == 'u') {
                dp[i][4] = 1;
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 5; j++) {
                if (i > 0 && j > 0) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 5; j++) {
                res += dp[i][j];
            }
        }
        return res;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][0] = word[i] == 'a';
            dp[i][1] = word[i] == 'e';
            dp[i][2] = word[i] == 'i';
            dp[i][3] = word[i] == 'o';
            dp[i][4] = word[i] == 'u';
            for (int j = 0; j < 5; ++j) {
                if (i > 0 && word[i] == "aeiou"[j]) {
                    for (int k = 0; k <= j; ++k) {
                        dp[i][j] += dp[i - 1][k];
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 5; ++j) {
                ans += dp[i][j];
            }
        }
        return ans;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < 5; j++) {
                dp[i][j] = dp[i][j - 1];
                if (i > 0 && word[i] == 'a' + j) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            ans += dp[n - 1][i];
        }
        return ans;

=======

        int n = word.size();
        vector<vector<int>> dp(n, vector<int>(5, 0));
        for (int i = 0; i < n; i++) {
            int c = word[i] - 'a';
            dp[i][c]++;
            for (int j = 0; j < 5; j++) {
                if (j > c) break;
                if (i > 0) dp[i][j] += dp[i-1][j];
            }
        }
        int sum = 0;
        for (int i = 0; i < 5; i++) sum += dp[n-1][i];
        return sum;

=======

        int n = word.size();
        int dp[5][n];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) {
            if (word[i] == 'a') {
                dp[0][i] = 1;
            } else if (word[i] == 'e') {
                dp[1][i] = 1;
            } else if (word[i] == 'i') {
                dp[2][i] = 1;
            } else if (word[i] == 'o') {
                dp[3][i] = 1;
            } else if (word[i] == 'u') {
                dp[4][i] = 1;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 5; j++) {
                if (i > 0 && dp[j][i] > 0) {
                    dp[j][i] += dp[j][i - 1];
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 5; i++) {
            res += dp[i][n - 1];
        }
        return res;

=======

        int n = word.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            int vowel[5] = {0, 0, 0, 0, 0};
            for (int j = i; j < n; j++) {
                if (word[j] == 'a')
                    vowel[0] = 1;
                else if (word[j] == 'e')
                    vowel[1] = 1;
                else if (word[j] == 'i')
                    vowel[2] = 1;
                else if (word[j] == 'o')
                    vowel[3] = 1;
                else if (word[j] == 'u')
                    vowel[4] = 1;
                if (vowel[0] && vowel[1] && vowel[2] && vowel[3] && vowel[4])
                    count++;
            }
        }
        return count;

=======

        int n = word.length();
        int dp[n][5];
        memset(dp, 0, sizeof dp);
        
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'a') {
                dp[i][0] = 1;
            }
        }
        
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'e') {
                for (int j = 0; j < i; ++j) {
                    dp[i][1] += dp[j][0];
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'i') {
                for (int j = 0; j < i; ++j) {
                    dp[i][2] += dp[j][1];
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'o') {
                for (int j = 0; j < i; ++j) {
                    dp[i][3] += dp[j][2];
                }
            }
        }
        
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'u') {
                for (int j = 0; j < i; ++j) {
                    dp[i][4] += dp[j][3];
                }
            }
        }
        
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < 5; ++j) {
                ans += dp[i][j];
            }
        }
        
        return ans;

=======

        int n = word.length();
        int dp[5] = {0};
        int count = 0;
        for(int i = 0; i < n; i++){
            char ch = word[i];
            if(ch == 'a'){
                dp[0] = 1;
            }
            else if(ch == 'e'){
                dp[1] = dp[0];
            }
            else if(ch == 'i'){
                dp[2] = dp[1];
            }
            else if(ch == 'o'){
                dp[3] = dp[2];
            }
            else if(ch == 'u'){
                dp[4] = dp[3];
            }
            count += dp[0] + dp[1] + dp[2] + dp[3] + dp[4];
        }
        return count;
