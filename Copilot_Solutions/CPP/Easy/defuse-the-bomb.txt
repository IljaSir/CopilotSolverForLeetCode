Synthesizing 10/10 solutions

=======

        int n = code.size();
        vector<int> res(n);
        if (k == 0) return res;
        if (k > 0) {
            for (int i = 0; i < n; ++i) {
                int sum = 0;
                for (int j = i + 1; j <= i + k; ++j) {
                    sum += code[j % n];
                }
                res[i] = sum;
            }
        } else {
            k = -k;
            for (int i = 0; i < n; ++i) {
                int sum = 0;
                for (int j = i - 1; j >= i - k; --j) {
                    sum += code[(j + n) % n];
                }
                res[i] = sum;
            }
        }
        return res;

=======

        int n = code.size();
        vector<int> ans(n);
        if (k == 0) {
            return ans;
        }
        if (k > 0) {
            for (int i = 0; i < n; ++i) {
                int sum = 0;
                for (int j = 1; j <= k; ++j) {
                    sum += code[(i + j) % n];
                }
                ans[i] = sum;
            }
        } else {
            for (int i = 0; i < n; ++i) {
                int sum = 0;
                for (int j = k; j < 0; ++j) {
                    int pos = (i + j + n) % n;
                    sum += code[pos];
                }
                ans[i] = sum;
            }
        }
        return ans;

=======

        int n = code.size();
        vector<int> res(n, 0);
        if (k == 0) return res;
        int sum = 0;
        if (k > 0) {
            for (int i = 1; i <= k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum += code[(i + k + 1) % n];
                sum -= code[(i + 1) % n];
            }
        } else {
            for (int i = n - 1; i >= n + k; i--) {
                sum += code[i % n];
            }
            for (int i = 0; i < n; i++) {
                res[i] = sum;
                sum += code[(i + k) % n];
                sum -= code[(i - 1 + n) % n];
            }
        }
        return res;

=======

        vector<int> res;
        int n = code.size();
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            if (k > 0) {
                for (int j = 1; j <= k; ++j) {
                    sum += code[(i + j) % n];
                }
            } else if (k < 0) {
                for (int j = -1; j >= k; --j) {
                    sum += code[(i + j + n) % n];
                }
            }
            res.push_back(sum);
        }
        return res;

=======

        vector<int> result;
        int n = code.size();
        for (int i = 0; i < n; i++) {
            int sum = 0;
            if (k > 0) {
                for (int j = i + 1; j <= i + k; j++) {
                    sum += code[j % n];
                }
            } else if (k < 0) {
                for (int j = i - 1; j >= i + k; j--) {
                    sum += code[(j + n) % n];
                }
            }
            result.push_back(sum);
        }
        return result;

=======

        int n = code.size();
        vector<int> res(n, 0);
        if (k == 0) {
            return res;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += code[i];
        }
        if (k > 0) {
            for (int i = 0; i < n; i++) {
                int s = 0;
                for (int j = i + 1; j <= i + k; j++) {
                    s += code[j % n];
                }
                res[i] = s;
            }
        } else {
            for (int i = 0; i < n; i++) {
                int s = 0;
                for (int j = i + n + k; j < i + n; j++) {
                    s += code[j % n];
                }
                res[i] = s;
            }
        }
        return res;

=======

        int n = code.size();
        vector<int> ans(n, 0);
        if (k == 0) return ans;
        int sum = 0;
        for (int i = 0; i < abs(k); i++) {
            sum += code[(i + 1) % n];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = sum;
            sum -= code[(i + 1) % n];
            sum += code[(i + 1 + abs(k)) % n];
        }
        return ans;

=======

        int n = code.size();
        vector<int> res(n);
        if (k == 0) return res;
        int sum = 0;
        for (int i = 1; i <= abs(k); i++) {
            sum += code[(n + k + i) % n];
        }
        for (int i = 0; i < n; i++) {
            res[i] = sum;
            sum -= code[(n + k + i + 1) % n];
            sum += code[(n + k + i + 1 + abs(k)) % n];
        }
        return res;

=======

        int n = code.size();
        vector<int> ans(n);
        if (k == 0) return ans;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += code[i];
        }
        for (int i = 0; i < n; ++i) {
            if (k > 0) {
                ans[i] = sum - code[(i + n - k) % n];
            } else {
                ans[i] = sum - code[(i + k + n) % n];
            }
        }
        return ans;

=======

        vector<int> ans;
        if (k == 0) {
            ans.resize(code.size(), 0);
            return ans;
        }
        int sum = 0;
        int n = code.size();
        int start = 0;
        int end = 0;
        if (k > 0) {
            for (int i = 0; i < k; i++) {
                sum += code[i];
            }
            for (int i = 0; i < n; i++) {
                if (i != 0) {
                    sum -= code[start];
                    start = (start + 1) % n;
                    end = (end + 1) % n;
                    sum += code[end];
                }
                ans.push_back(sum);
            }
        } else {
            k = -k;
            start = n - 1;
            end = n - 1;
            for (int i = 0; i < k; i++) {
                sum += code[start];
                start = (start - 1 + n) % n;
            }
            for (int i = 0; i < n; i++) {
                if (i != 0) {
                    sum -= code[end];
                    start = (start - 1 + n) % n;
                    end = (end - 1 + n) % n;
                    sum += code[start];
                }
                ans.push_back(sum);
            }
        }
        return ans;
