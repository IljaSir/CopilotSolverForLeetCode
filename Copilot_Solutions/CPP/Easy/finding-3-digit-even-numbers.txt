Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = 0; i < digits.size(); i++) {
            for (int j = 0; j < digits.size(); j++) {
                for (int k = 0; k < digits.size(); k++) {
                    if (i != j && j != k && k != i) {
                        int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                        if (num % 2 == 0) {
                            result.push_back(num);
                        }
                    }
                }
            }
        }
        sort(result.begin(), result.end());
        result.erase(unique(result.begin(), result.end()), result.end());
        return result;

=======

        vector<int> ans;
        for (int i = 0; i < digits.size(); ++i) {
            for (int j = i + 1; j < digits.size(); ++j) {
                for (int k = j + 1; k < digits.size(); ++k) {
                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                    if (num % 2 == 0) {
                        ans.push_back(num);
                    }
                }
            }
        }
        sort(ans.begin(), ans.end());
        return ans;

=======

        vector<int> result;
        int n = digits.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                    if (num % 2 == 0) {
                        result.push_back(num);
                    }
                }
            }
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> evenNumbers;
        for(int i = 0; i < digits.size(); i++){
            for(int j = 0; j < digits.size(); j++){
                for(int k = 0; k < digits.size(); k++){
                    if(i != j && j != k && i != k){
                        int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                        if(num % 2 == 0){
                            evenNumbers.push_back(num);
                        }
                    }
                }
            }
        }
        sort(evenNumbers.begin(), evenNumbers.end());
        evenNumbers.erase(unique(evenNumbers.begin(), evenNumbers.end()), evenNumbers.end());
        return evenNumbers;

=======

        vector<int> res;
        int n = digits.size();
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                for(int k = j + 1; k < n; k++){
                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                    if(num % 2 == 0) res.push_back(num);
                }
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> result;
        sort(digits.begin(), digits.end());
        do {
            int num = 0;
            for (int i = 0; i < 3; ++i) {
                num = num * 10 + digits[i];
            }
            if (num % 2 == 0) {
                result.push_back(num);
            }
        } while (next_permutation(digits.begin(), digits.end()));
        return result;

=======

        vector<int> res;
        sort(digits.begin(), digits.end());
        for (int i = 0; i < digits.size(); ++i) {
            if (digits[i] % 2 == 1) continue;
            for (int j = 0; j < digits.size(); ++j) {
                if (i == j) continue;
                if (digits[j] % 2 == 1) continue;
                for (int k = 0; k < digits.size(); ++k) {
                    if (i == k || j == k) continue;
                    if (digits[k] % 2 == 1) continue;
                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                    if (num % 2 == 0) res.push_back(num);
                }
            }
        }
        sort(res.begin(), res.end());
        res.erase(unique(res.begin(), res.end()), res.end());
        return res;

=======

        vector<int> result;
        sort(digits.begin(), digits.end());
        for (int i = 0; i < digits.size(); ++i) {
            if (digits[i] % 2 != 0) continue;
            for (int j = i + 1; j < digits.size(); ++j) {
                if (digits[j] % 2 != 0) continue;
                for (int k = j + 1; k < digits.size(); ++k) {
                    if (digits[k] % 2 != 0) continue;
                    int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                    result.push_back(num);
                }
            }
        }
        return result;

=======

        vector<int> result;
        int size = digits.size();
        int sum = 0;
        for (int i = 0; i < size; i++) {
            for (int j = i + 1; j < size; j++) {
                for (int k = j + 1; k < size; k++) {
                    sum = digits[i] * 100 + digits[j] * 10 + digits[k];
                    if (sum % 2 == 0) {
                        result.push_back(sum);
                    }
                }
            }
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> evenNumbers;
        vector<int> temp;
        int n = digits.size();
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                for(int k = 0; k < n; k++)
                {
                    if(i != j && i != k && j != k)
                    {
                        temp.push_back(digits[i]);
                        temp.push_back(digits[j]);
                        temp.push_back(digits[k]);
                        int num = temp[0] * 100 + temp[1] * 10 + temp[2];
                        if(num % 2 == 0)
                        {
                            evenNumbers.push_back(num);
                        }
                        temp.clear();
                    }
                }
            }
        }
        sort(evenNumbers.begin(), evenNumbers.end());
        evenNumbers.erase(unique(evenNumbers.begin(), evenNumbers.end()), evenNumbers.end());
        return evenNumbers;
