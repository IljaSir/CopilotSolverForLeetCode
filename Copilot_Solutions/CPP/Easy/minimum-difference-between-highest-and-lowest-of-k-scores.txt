Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        int minDiff = INT_MAX;
        for (int i = 0; i < nums.size() - k + 1; i++) {
            minDiff = min(minDiff, nums[i+k-1] - nums[i]);
        }
        return minDiff;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = INT_MAX;
        for (int i = 0; i < n - k + 1; i++) {
            ans = min(ans, nums[i + k - 1] - nums[i]);
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = INT_MAX;
        for (int i = 0; i <= n - k; ++i) {
            ans = min(ans, nums[i + k - 1] - nums[i]);
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = INT_MAX;
        for (int i = 0; i + k <= n; i++) {
            ans = min(ans, nums[i + k - 1] - nums[i]);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int min = INT_MAX;
        for (int i = 0; i < nums.size() - k + 1; i++) {
            if (nums[i + k - 1] - nums[i] < min) {
                min = nums[i + k - 1] - nums[i];
            }
        }
        return min;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int minDiff = INT_MAX;
        for (int i = 0; i <= n-k; i++) {
            minDiff = min(minDiff, nums[i+k-1] - nums[i]);
        }
        return minDiff;

=======

        if (k == 1) {
            return 0;
        }
        sort(nums.begin(), nums.end());
        int min = INT_MAX;
        for (int i = 0; i < nums.size() - k + 1; i++) {
            int diff = nums[i + k - 1] - nums[i];
            if (diff < min) {
                min = diff;
            }
        }
        return min;

=======

        if(nums.size() == 1) return 0;
        sort(nums.begin(), nums.end());
        int ans = INT_MAX;
        for(int i = 0; i < nums.size() - k + 1; i++) {
            ans = min(ans, nums[i + k - 1] - nums[i]);
        }
        return ans;
