Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (to_string(nums[i]).size() % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            int digit = 0;
            while (nums[i] > 0) {
                nums[i] /= 10;
                digit++;
            }
            if (digit % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int n : nums) {
            if (to_string(n).size() % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int n : nums) {
            if (to_string(n).length() % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            int cnt = 0;
            while (nums[i] != 0) {
                nums[i] /= 10;
                cnt++;
            }
            if (cnt % 2 == 0) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            int digit = 0;
            while (num > 0) {
                num /= 10;
                digit++;
            }
            if (digit % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i];
            int d = 0;
            while (n > 0) {
                n /= 10;
                d++;
            }
            if (d % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (auto n: nums) {
            int digits = 0;
            while (n > 0) {
                n /= 10;
                digits++;
            }
            if (digits % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int c = 0;
        for (int i = 0; i < nums.size(); i++) {
            int d = 0;
            while (nums[i] > 0) {
                d++;
                nums[i] /= 10;
            }
            if (d % 2 == 0) c++;
        }
        return c;
