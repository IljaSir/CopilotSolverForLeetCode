Synthesizing 10/10 solutions

=======

        int res = -1;
        for (int i = 0; i < s.length(); i++) {
            for (int j = s.length() - 1; j > i; j--) {
                if (s[i] == s[j]) {
                    res = max(res, j - i - 1);
                    break;
                }
            }
        }
        return res;

=======

        int max = -1;
        for (int i = 0; i < s.length(); i++) {
            for (int j = s.length() - 1; j > i; j--) {
                if (s[i] == s[j]) {
                    int temp = j - i - 1;
                    if (temp > max) {
                        max = temp;
                    }
                }
            }
        }
        
        return max;

=======

        int result = -1;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = s.size() - 1; j > i; --j) {
                if (s[i] == s[j]) {
                    result = max(result, j - i - 1);
                }
            }
        }
        return result;

=======

        int n = s.size();
        int res = -1;
        for (int i = 0; i < n; i++) {
            for (int j = n - 1; j > i; j--) {
                if (s[i] == s[j]) {
                    res = max(res, j - i - 1);
                }
            }
        }
        return res;

=======

        int ans = -1;
        for(int i=0; i<s.size(); i++){
            for(int j=i+1; j<s.size(); j++){
                if(s[i] == s[j]){
                    ans = max(ans, j-i-1);
                }
            }
        }
        return ans;

=======

        int max = -1;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = i+1; j < s.size(); ++j) {
                if (s[i] == s[j]) {
                    if (j - i - 1 > max) {
                        max = j - i - 1;
                    }
                }
            }
        }
        return max;

=======

        int n = s.length();
        int res = -1;
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if (s[i] == s[j]) {
                    res = max(res, j-i-1);
                }
            }
        }
        return res;

=======

        int len = s.length();
        int max = -1;
        for(int i = 0; i < len; i++){
            for(int j = len - 1; j > i; j--){
                if(s[i] == s[j]){
                    if(j - i - 1 > max){
                        max = j - i - 1;
                    }
                }
            }
        }
        return max;

=======

        int n = s.size();
        int maxLen = -1;
        for(int i = 0; i < n; i++){
            for(int j = n - 1; j > i; j--){
                if(s[i] == s[j]){
                    maxLen = max(maxLen, j - i - 1);
                    break;
                }
            }
        }
        return maxLen;

=======

        int l = s.length(), ans = -1;
        for (int i = 0; i < l; i++) {
            for (int j = l - 1; j > i; j--) {
                if (s[i] == s[j]) {
                    ans = max(ans, j - i - 1);
                    break;
                }
            }
        }
        return ans;
