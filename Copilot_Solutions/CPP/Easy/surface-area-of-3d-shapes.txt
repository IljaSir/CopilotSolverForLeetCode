Synthesizing 10/10 solutions

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] > 0) ans += 2;
                ans += max(0, grid[i][j] - (i > 0 ? grid[i - 1][j] : 0));
                ans += max(0, grid[i][j] - (i < n - 1 ? grid[i + 1][j] : 0));
                ans += max(0, grid[i][j] - (j > 0 ? grid[i][j - 1] : 0));
                ans += max(0, grid[i][j] - (j < n - 1 ? grid[i][j + 1] : 0));
            }
        }
        return ans;

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] > 0) {
                    ans += 2;
                    ans += 4 * grid[i][j];
                    if (i > 0) {
                        ans -= 2 * min(grid[i][j], grid[i - 1][j]);
                    }
                    if (j > 0) {
                        ans -= 2 * min(grid[i][j], grid[i][j - 1]);
                    }
                }
            }
        }
        return ans;

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    ans += 2;
                    ans += grid[i][j] * 4;
                    if (i > 0) ans -= min(grid[i][j], grid[i - 1][j]) * 2;
                    if (j > 0) ans -= min(grid[i][j], grid[i][j - 1]) * 2;
                }
            }
        }
        return ans;

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    ans += 2;
                    ans += 4 * grid[i][j];
                }
                if (i > 0) {
                    ans -= 2 * min(grid[i][j], grid[i - 1][j]);
                }
                if (j > 0) {
                    ans -= 2 * min(grid[i][j], grid[i][j - 1]);
                }
            }
        }
        return ans;

=======

        int n = grid.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] > 0) {
                    res += 2;
                    if (i == 0) res += grid[i][j];
                    if (i == n - 1) res += grid[i][j];
                    if (j == 0) res += grid[i][j];
                    if (j == n - 1) res += grid[i][j];
                    if (i > 0) res += max(grid[i][j] - grid[i - 1][j], 0);
                    if (i < n - 1) res += max(grid[i][j] - grid[i + 1][j], 0);
                    if (j > 0) res += max(grid[i][j] - grid[i][j - 1], 0);
                    if (j < n - 1) res += max(grid[i][j] - grid[i][j + 1], 0);
                }
            }
        }
        return res;

=======

        int n = grid.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    res += 2;
                    res += grid[i][j] * 4;
                    if (i > 0) {
                        res -= min(grid[i][j], grid[i - 1][j]) * 2;
                    }
                    if (j > 0) {
                        res -= min(grid[i][j], grid[i][j - 1]) * 2;
                    }
                }
            }
        }
        return res;

=======

        int n = grid.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    res += 2 + 4 * grid[i][j];
                    if (i > 0) res -= 2 * min(grid[i][j], grid[i - 1][j]);
                    if (j > 0) res -= 2 * min(grid[i][j], grid[i][j - 1]);
                }
            }
        }
        return res;

=======

        int n = grid.size();
        int ans = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] > 0) ans += 2;
                if(i == 0) ans += grid[i][j];
                if(i == n-1) ans += grid[i][j];
                if(j == 0) ans += grid[i][j];
                if(j == n-1) ans += grid[i][j];
                if(i > 0) ans += abs(grid[i][j]-grid[i-1][j]);
                if(j > 0) ans += abs(grid[i][j]-grid[i][j-1]);
            }
        }
        return ans;

=======

        int n = grid.size();
        int ans = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] > 0){
                    ans += 2 + 4 * grid[i][j];
                    if(i > 0){
                        ans -= 2 * min(grid[i][j], grid[i - 1][j]);
                    }
                    if(j > 0){
                        ans -= 2 * min(grid[i][j], grid[i][j - 1]);
                    }
                }
            }
        }
        return ans;

=======

        int n = grid.size();
        int area = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]>0){
                    area += 2; // top and bottom
                    area += grid[i][j]*4; // front, back, left, right
                    // subtract the overlapping area
                    if(i>0){
                        area -= min(grid[i][j], grid[i-1][j])*2;
                    }
                    if(j>0){
                        area -= min(grid[i][j], grid[i][j-1])*2;
                    }
                }
            }
        }
        return area;
