Synthesizing 10/10 solutions

=======

        int cnt[128] = {0};
        for (char c : s) {
            cnt[c]++;
        }
        int ans = 0;
        for (int i = 0; i < 128; ++i) {
            ans += cnt[i] / 2 * 2;
            if (ans % 2 == 0 && cnt[i] % 2 == 1) {
                ans++;
            }
        }
        return ans;

=======

        int ans = 0;
        unordered_map<char, int> cnt;
        for (char c : s) {
            cnt[c]++;
            if (cnt[c] % 2 == 0) {
                ans += 2;
            }
        }
        return ans < s.length() ? ans + 1 : ans;

=======

        int n = s.length();
        int count[256] = {0};
        for (int i = 0; i < n; i++) {
            count[s[i]]++;
        }
        int res = 0;
        bool odd = false;
        for (int i = 0; i < 256; i++) {
            if (count[i] % 2 == 0) {
                res += count[i];
            } else {
                res += count[i] - 1;
                odd = true;
            }
        }
        return res + odd;

=======

        unordered_map<char, int> cnt;
        for (auto c : s) {
            cnt[c]++;
        }
        int ans = 0;
        for (auto [c, n] : cnt) {
            ans += n / 2 * 2;
            if (ans % 2 == 0 && n % 2 == 1) {
                ans++;
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        int odd = 0;
        unordered_map<char, int> m;
        for (int i = 0; i < n; i++) {
            m[s[i]]++;
        }
        for (auto x : m) {
            if (x.second % 2 == 0) {
                ans += x.second;
            } else {
                odd = 1;
                ans += x.second - 1;
            }
        }
        return ans + odd;

=======

        unordered_map<char, int> m;
        int odd = 0;
        for (auto c: s) {
            m[c]++;
        }
        for (auto p: m) {
            if (p.second % 2 == 1) {
                odd++;
            }
        }
        if (odd == 0) {
            return s.size();
        }
        return s.size() - odd + 1;

=======

        int freq[128] = {0};
        for (char c : s) {
            freq[c]++;
        }
        int odd = 0;
        for (int f : freq) {
            if (f % 2 == 1) {
                odd++;
            }
        }
        return s.size() - odd + (odd > 0);

=======

        int n = s.length();
        int count[256] = {0};
        for(int i=0; i<n; i++) {
            count[s[i]]++;
        }
        int ans = 0;
        for(int i=0; i<256; i++) {
            ans += count[i]/2*2;
            if(ans%2==0 && count[i]%2==1) ans++;
        }
        return ans;

=======

        int chs[128] = {0};
        for (char ch : s) {
            chs[ch]++;
        }
        int res = 0;
        bool hasOdd = false;
        for (int i = 0; i < 128; i++) {
            if (chs[i] % 2 == 0) {
                res += chs[i];
            } else {
                res += chs[i] - 1;
                hasOdd = true;
            }
        }
        return hasOdd ? res + 1 : res;

=======

        unordered_map<char, int> m;
        for (auto c: s) {
            m[c]++;
        }
        int odd = 0;
        for (auto& [_, count]: m) {
            if (count & 1) {
                odd++;
            }
        }
        return odd ? s.size() - odd + 1 : s.size();
