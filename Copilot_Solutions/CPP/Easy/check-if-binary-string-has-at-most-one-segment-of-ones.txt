Synthesizing 10/10 solutions

=======

        for (int i = 1; i < s.size(); i++) {
            if (s[i] == '1' && s[i-1] == '0') {
                return false;
            }
        }
        return true;

=======

        int n = s.size();
        for (int i = 1; i < n; i++) {
            if (s[i] == '1' && s[i - 1] == '0') {
                return false;
            }
        }
        return true;

=======

        int i = 0;
        while (i < s.size() && s[i] == '1') {
            i++;
        }
        while (i < s.size() && s[i] == '0') {
            i++;
        }
        return i == s.size();

=======

        int n = s.size();
        int i = 0;
        while(i < n && s[i] == '1') i++;
        while(i < n && s[i] == '0') i++;
        return i == n;

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == '1') {
            i++;
        }
        while (i < n) {
            if (s[i] == '1') {
                return false;
            }
            i++;
        }
        return true;

=======

        int i = 0;
        while (i < s.size() && s[i] == '1') i++;
        while (i < s.size() && s[i] == '0') i++;
        if (i == s.size()) return true;
        return false;

=======

        bool flag = false;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '1') {
                if (!flag) {
                    flag = true;
                } else {
                    return false;
                }
            } else {
                flag = false;
            }
        }
        return true;

=======

        int i = 0;
        int n = s.size();
        while (i < n && s[i] == '1') i++;
        while (i < n && s[i] == '0') i++;
        if (i == n) return true;
        return false;

=======

        int c=0;
        for(int i=1;i<s.size();i++){
            if(s[i]=='1' && s[i-1]=='0')
                c++;
        }
        if(c==0)
            return true;
        return false;

=======

        return s.find("01") == string::npos;
