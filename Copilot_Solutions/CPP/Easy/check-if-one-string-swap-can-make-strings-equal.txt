Synthesizing 10/10 solutions

=======

        if (s1 == s2) return true;
        int count = 0;
        for (int i = 0; i < s1.size(); i++) {
            if (s1[i] != s2[i]) count++;
        }
        if (count != 2) return false;
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        return s1 == s2;

=======

        int n = s1.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) {
                cnt++;
            }
        }
        if (cnt == 0) {
            return true;
        }

        if (cnt != 2) {
            return false;
        }

        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        return s1 == s2;

=======

        int n = s1.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) cnt++;
        }
        if (cnt > 2) return false;
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        return s1 == s2;

=======

        int n = s1.size();
        int diff = 0;
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) diff++;
        }
        if (diff > 2) return false;
        if (diff == 0) return true;
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        return s1 == s2;

=======

        int n = s1.size();
        if (s1 == s2) return true;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) cnt++;
        }
        if (cnt == 2) {
            sort(s1.begin(), s1.end());
            sort(s2.begin(), s2.end());
            if (s1 == s2) return true;
        }
        return false;

=======

        int n = s1.size();
        int count = 0;
        for(int i = 0; i < n; i++){
            if(s1[i] != s2[i]){
                count++;
            }
        }
        if(count == 0){
            return true;
        }
        if(count == 2){
            sort(s1.begin(), s1.end());
            sort(s2.begin(), s2.end());
            for(int i = 0; i < n; i++){
                if(s1[i] != s2[i]){
                    return false;
                }
            }
            return true;
        }
        return false;

=======

        int count = 0;
        int diff[2];
        for (int i = 0; i < s1.length(); i++) {
            if (s1[i] != s2[i]) {
                diff[count++] = i;
                if (count > 2) return false;
            }
        }
        return count == 0 || (count == 2 && s1[diff[0]] == s2[diff[1]] && s1[diff[1]] == s2[diff[0]]);

=======

        int n = s1.size();
        int cnt = 0;
        int p1, p2;
        for (int i = 0; i < n; i++) {
            if (s1[i] != s2[i]) {
                cnt++;
                if (cnt == 1) {
                    p1 = i;
                } else if (cnt == 2) {
                    p2 = i;
                } else {
                    return false;
                }
            }
        }
        if (cnt == 0) {
            return true;
        } else if (cnt == 2) {
            return s1[p1] == s2[p2] && s1[p2] == s2[p1];
        } else {
            return false;
        }

=======

        if(s1==s2) return true;
        int n = s1.size();
        int cnt = 0;
        for(int i=0;i<n;i++){
            if(s1[i]!=s2[i]){
                cnt++;
            }
        }
        if(cnt!=2) return false;
        sort(s1.begin(),s1.end());
        sort(s2.begin(),s2.end());
        return s1==s2;

=======

        int n = s1.length();
        int diff = 0;
        int diff1 = -1;
        int diff2 = -1;
        for(int i = 0; i < n; i++){
            if(s1[i] != s2[i]){
                diff++;
                if(diff1 == -1){
                    diff1 = i;
                }
                else{
                    diff2 = i;
                }
            }
        }
        if(diff == 0){
            return true;
        }
        if(diff == 2){
            if(s1[diff1] == s2[diff2] && s1[diff2] == s2[diff1]){
                return true;
            }
        }
        return false;
