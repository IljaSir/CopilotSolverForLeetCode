Synthesizing 10/10 solutions

=======

        int count[26] = {0};
        for (auto c : sentence) {
            count[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) return false;
        }
        return true;

=======

        int count[26] = {0};
        for (auto c : sentence) {
            count[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) {
                return false;
            }
        }
        return true;

=======

        int arr[26] = {0};
        for(int i=0;i<sentence.length();i++){
            arr[sentence[i] - 'a']++;
        }
        for(int i=0;i<26;i++){
            if(arr[i] == 0){
                return false;
            }
        }
        return true;

=======

        int cnt[26] = {0};
        for (auto ch: sentence) {
            cnt[ch - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] == 0) {
                return false;
            }
        }
        return true;

=======

        int count[26] = {0};
        for (auto c : sentence) {
            count[c - 'a']++;
        }
        for (auto c : count) {
            if (c == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> v(26, 0);
        for (auto c : sentence) {
            v[c - 'a']++;
        }
        for (auto i : v) {
            if (i == 0) {
                return false;
            }
        }
        return true;

=======

        unordered_set<char> s;
        for (auto c: sentence) {
            s.insert(c);
        }
        return s.size() == 26;

=======

        vector<int> v(26, 0);
        for (char c : sentence) {
            v[c - 'a'] = 1;
        }
        for (int i = 0; i < 26; ++i) {
            if (v[i] == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> freq(26, 0);
        for (auto ch: sentence) {
            freq[ch - 'a']++;
        }
        for (auto f: freq) {
            if (f == 0) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        for (int i = 0; i < sentence.size(); i++) {
            int index = sentence[i] - 'a';
            if ((count & (1 << index)) == 0) {
                count |= (1 << index);
            }
        }
        return __builtin_popcount(count) == 26;
