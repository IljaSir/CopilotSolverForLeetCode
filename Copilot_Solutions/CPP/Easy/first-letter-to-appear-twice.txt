Synthesizing 10/10 solutions

=======

        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
        }
        for (char c : s) {
            if (m[c] > 1) {
                return c;
            }
        }
        return ' ';

=======

        unordered_map<char, int> map;
        for (int i = 0; i < s.size(); i++) {
            if (map.find(s[i]) == map.end()) {
                map[s[i]] = i;
            } else {
                return s[i];
            }
        }
        return ' ';
    }
    char firstRepeatedCharacter(string s) {
        unordered_map<char, int> map;
        for (int i = 0; i < s.size(); i++) {
            if (map.find(s[i]) == map.end()) {
                map[s[i]] = i;
            } else {
                map[s[i]] = -1;
            }
        }
        int min = INT_MAX;
        char res = ' ';
        for (auto it = map.begin(); it != map.end(); it++) {
            if (it->second >= 0 && it->second < min) {
                res = it->first;
                min = it->second;
            }
        }
        return res;
    }
    char firstRepeatedCharacter2(string s) {
        unordered_map<char, int> map;
        char res = ' ';
        for (int i = 0; i < s.size(); i++) {
            if (map.find(s[i]) == map.end()) {
                map[s[i]] = i;
            } else {
                if (map[s[i]] >= 0) {
                    if (map[s[i]] < i) {
                        res = s[i];
                        map[s[i]] = -1;
                    } else {
                        res = s[i];
                        map[s[i]] = i;
                    }
                }
            }
        }
        return res;
    }
    char firstRepeatedCharacter3(string s) {
        unordered_map<char, int> map;
        char res = ' ';
        int min = INT_MAX;
        for (int i = 0; i < s.size(); i++) {
            if (map.find(s[i]) == map.end()) {
                map[s[i]] = i;
            } else {
                if (map[s[i]] >= 0) {
                    if (map[s[i]] < i) {
                        if (map[s[i]] < min) {
                            res = s[i];
                            min = map[s[i]];
                        }
                        map[s[i]] = -1;
                    } else {
                        if (i < min) {
                            res = s[i];
                            min

=======

        int n = s.size();
        int count[26] = {0};
        for (int i = 0; i < n; i++) {
            count[s[i] - 'a']++;
            if (count[s[i] - 'a'] == 2) {
                return s[i];
            }
        }
        return ' ';

=======

        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
            if (m[c] == 2) return c;
        }
        return ' ';

=======

        int count[26] = {0};
        for (char c : s) {
            if (++count[c - 'a'] == 2) {
                return c;
            }
        }
        return ' ';

=======

        unordered_map<char, int> map;
        for (char ch: s) {
            map[ch] += 1;
        }
        for (char ch: s) {
            if (map[ch] > 1) {
                return ch;
            }
        }
        return ' ';

=======

        int count = 0;
        char letter;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i+1; j < s.length(); j++) {
                if (s[i] == s[j]) {
                    count++;
                    letter = s[i];
                    break;
                }
            }
            if (count > 0) {
                break;
            }
        }
        return letter;

=======

        map<char, int> m;
        for (int i = 0; i < s.size(); i++) {
            m[s[i]] = i;
        }
        int min = s.size();
        char c = ' ';
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second < min) {
                min = it->second;
                c = it->first;
            }
        }
        return c;

=======

        // Write your code here
        set<char> set;
        for (char c: s) {
            if (set.find(c) != set.end()) return c;
            set.insert(c);
        }
        return ' ';

=======

        int i = 0;
        int len = s.length();
        int index[26];
        for (i = 0; i < 26; i++) {
            index[i] = len;
        }
        for (i = 0; i < len; i++) {
            if (index[s[i] - 'a'] == len) {
                index[s[i] - 'a'] = i;
            } else {
                index[s[i] - 'a'] = -1;
            }
        }
        int minIndex = len;
        for (i = 0; i < 26; i++) {
            if (index[i] >= 0 && index[i] < minIndex) {
                minIndex = index[i];
            }
        }
        return s[minIndex];
