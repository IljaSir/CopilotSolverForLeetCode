Synthesizing 10/10 solutions

=======

        vector<pair<int, string>> people;
        for (int i = 0; i < names.size(); i++) {
            people.push_back({heights[i], names[i]});
        }
        sort(people.begin(), people.end(), greater<pair<int, string>>());
        vector<string> res;
        for (auto p: people) {
            res.push_back(p.second);
        }
        return res;

=======

        vector<pair<int, string>> people;
        for (int i = 0; i < names.size(); i++) {
            people.push_back({heights[i], names[i]});
        }
        sort(people.begin(), people.end());
        reverse(people.begin(), people.end());
        vector<string> res;
        for (auto& p : people) {
            res.push_back(p.second);
        }
        return res;

=======

        vector<string> result;
        for (int i = 0; i < heights.size(); i++) {
            for (int j = i + 1; j < heights.size(); j++) {
                if (heights[i] < heights[j]) {
                    int temp = heights[i];
                    heights[i] = heights[j];
                    heights[j] = temp;
                    string tempS = names[i];
                    names[i] = names[j];
                    names[j] = tempS;
                }
            }
        }
        for (int i = 0; i < heights.size(); i++) {
            result.push_back(names[i]);
        }
        return result;

=======

        int n = names.size();
        vector<pair<int, string>> temp;
        for (int i = 0; i < n; i++) {
            temp.push_back({heights[i], names[i]});
        }
        sort(temp.begin(), temp.end(), greater<pair<int, string>>());
        vector<string> res;
        for (int i = 0; i < n; i++) {
            res.push_back(temp[i].second);
        }
        return res;

=======

        vector<pair<int, string>> h;
        for (int i = 0; i < heights.size(); ++i) {
            h.push_back({heights[i], names[i]});
        }
        sort(h.begin(), h.end(), [](auto& a, auto& b) {
            return a.first > b.first;
        });
        vector<string> res;
        for (auto& p : h) {
            res.push_back(p.second);
        }
        return res;

=======

        vector<string> res;
        vector<pair<int, string>> v;
        for (int i = 0; i < names.size(); i++) {
            v.push_back(make_pair(heights[i], names[i]));
        }
        sort(v.begin(), v.end(), [](pair<int, string> a, pair<int, string> b) {
            if (a.first != b.first) {
                return a.first > b.first;
            }
            return a.second < b.second;
        });
        for (auto p : v) {
            res.push_back(p.second);
        }
        return res;

=======

        vector<string> result;
        vector<pair<int, string>> sorted;
        for (int i = 0; i < names.size(); i++) {
            sorted.push_back({heights[i], names[i]});
        }
        sort(sorted.begin(), sorted.end());
        for (auto& s : sorted) {
            result.push_back(s.second);
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<string> result;
        for (int i = 0; i < names.size(); i++) {
            string name = names[i];
            int height = heights[i];
            int j = result.size() - 1;
            for (; j >= 0; j--) {
                int k = j;
                while (k < result.size() && heights[k] > height) {
                    k++;
                }
                if (k == result.size()) {
                    result.push_back(result[j]);
                } else {
                    result[k] = result[j];
                }
            }
            result[j + 1] = name;
        }
        return result;

=======

        vector<string> result;
        for (int i = 0; i < names.size(); i++) {
            int j = i;
            while (j > 0 && heights[j] > heights[j-1]) {
                int tmp = heights[j];
                heights[j] = heights[j-1];
                heights[j-1] = tmp;
                
                string tmpStr = names[j];
                names[j] = names[j-1];
                names[j-1] = tmpStr;
                j--;
            }
        }
        
        for (int i = 0; i < names.size(); i++) {
            result.push_back(names[i]);
        }
        
        return result;

=======

        vector<string> result;
        int n = names.size();
        if (n == 0) {
            return result;
        }
        // sort the heights
        vector<int> sortedHeights = heights;
        sort(sortedHeights.begin(), sortedHeights.end());
        // map the sorted heights to the names
        map<int, string> heightNameMap;
        for (int i = 0; i < n; i++) {
            heightNameMap[sortedHeights[i]] = names[i];
        }
        // add the names to the result
        for (int i = n - 1; i >= 0; i--) {
            result.push_back(heightNameMap[heights[i]]);
        }
        return result;
