Synthesizing 10/10 solutions

=======

        int size = nums.size();
        for (int i = 0; i <= size; i++) {
            int count = 0;
            for (int j = 0; j < size; j++) {
                if (nums[j] >= i) {
                    count++;
                }
            }
            if (count == i) {
                return i;
            }
        }
        return -1;

=======

        int len = nums.size();
        for (int x = 1; x <= len; x++) {
            int cnt = 0;
            for (int i = 0; i < len; i++) {
                if (nums[i] >= x) {
                    cnt++;
                }
            }
            if (cnt == x) {
                return x;
            }
        }
        return -1;

=======

        int n=nums.size();
        for(int i=1;i<=n;i++){
            int cnt=0;
            for(int j=0;j<n;j++){
                if(nums[j]>=i)
                    cnt++;
            }
            if(cnt==i)
                return i;
        }
        return -1;

=======

        int n = nums.size();
        vector<int> count(n+1, 0);
        for (int i = 0; i < n; i++) {
            if (nums[i] >= n) {
                count[n]++;
            } else {
                count[nums[i]]++;
            }
        }
        int sum = 0;
        for (int i = n; i >= 0; i--) {
            sum += count[i];
            if (sum == i) {
                return i;
            }
        }
        return -1;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(nums[i] >= n-i && (i == 0 || nums[i-1] < n-i+1)) {
                return n-i;
            }
        }
        return -1;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i <= n; ++i) {
            if (i == n || nums[n - i - 1] < i) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        vector<int> count(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            count[min(nums[i], n)]++;
        }
        for (int i = n - 1; i >= 0; --i) {
            count[i] += count[i + 1];
            if (count[i] == i) {
                return i;
            }
        }
        return -1;

=======

        int max = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] > max) {
                max = nums[i];
            }
        }
        for(int i = 1; i <= max; i++) {
            int count = 0;
            for(int j = 0; j < nums.size(); j++) {
                if(nums[j] >= i) {
                    count++;
                }
            }
            if(count == i) {
                return i;
            }
        }
        return -1;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = 1; i <= n; i++) {
            if (i == nums[n-i]) {
                if (i == n || nums[n-i-1] < i) {
                    return i;
                }
            }
        }
        return -1;

=======

        std::sort(nums.begin(), nums.end());
        int prev = -1;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] != prev && nums.size() - i == nums[i]) {
                return nums[i];
            }
            prev = nums[i];
        }
        return -1;
