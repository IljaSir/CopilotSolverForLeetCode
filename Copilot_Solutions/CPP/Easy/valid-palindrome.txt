Synthesizing 10/10 solutions

=======

        int i = 0, j = s.size() - 1;
        while (i < j) {
            while (i < j && !isalnum(s[i])) i++;
            while (i < j && !isalnum(s[j])) j--;
            if (i < j && tolower(s[i]) != tolower(s[j])) return false;
            i++;
            j--;
        }
        return true;

=======

        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (!isalnum(s[i])) {
                i++;
            } else if (!isalnum(s[j])) {
                j--;
            } else {
                if (tolower(s[i]) != tolower(s[j])) {
                    return false;
                }
                i++;
                j--;
            }
        }
        return true;

=======

        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            while (left < right && !isalnum(s[left])) left++;
            while (left < right && !isalnum(s[right])) right--;
            if (left < right) {
                if (tolower(s[left]) != tolower(s[right])) {
                    return false;
                }
                left++;
                right--;
            }
        }
        return true;

=======

        int i = 0, j = s.size()-1;
        while (i < j) {
            while (i < j && !isalnum(s[i])) i++;
            while (i < j && !isalnum(s[j])) j--;
            if (tolower(s[i++]) != tolower(s[j--])) return false;
        }
        return true;

=======

        int i = 0, j = s.size() - 1;
        while(i < j) {
            while(i < j && !isalnum(s[i])) i++;
            while(i < j && !isalnum(s[j])) j--;
            if (tolower(s[i]) != tolower(s[j])) return false;
            i++;
            j--;
        }
        return true;

=======

        int n = s.size();
        int i = 0;
        int j = n - 1;
        while (i < j) {
            while (i < j && !isalnum(s[i])) {
                i++;
            }
            while (i < j && !isalnum(s[j])) {
                j--;
            }
            if (tolower(s[i]) != tolower(s[j])) {
                return false;
            }
            i++;
            j--;
        }
        return true;

=======

        if (s.empty()) return true;
        int l = 0, r = s.size() - 1;
        while (l < r) {
            if (!isalnum(s[l])) ++l;
            else if (!isalnum(s[r])) --r;
            else if (tolower(s[l++]) != tolower(s[r--])) return false;
        }
        return true;

=======

        int len = s.length();
        int i = 0, j = len - 1;
        while (i < j) {
            while (i < len && !isalnum(s[i])) i++;
            while (j >= 0 && !isalnum(s[j])) j--;
            if (i >= j) break;
            if (toupper(s[i]) != toupper(s[j])) return false;
            i++;
            j--;
        }
        return true;

=======

        int n = s.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            if (!isalnum(s[l])) {
                l++;
                continue;
            }
            if (!isalnum(s[r])) {
                r--;
                continue;
            }
            if (tolower(s[l]) != tolower(s[r])) {
                return false;
            }
            l++;
            r--;
        }
        return true;

=======

        int n = s.size();
        if(n == 0) return true;
        int i = 0, j = n-1;
        while(i < j){
            while(i < j && !isalnum(s[i])) i++;
            while(i < j && !isalnum(s[j])) j--;
            if(tolower(s[i]) != tolower(s[j])) return false;
            i++;
            j--;
        }
        return true;
