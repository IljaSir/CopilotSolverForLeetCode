Synthesizing 10/10 solutions

=======

        int i = 0, j = 1;
        while (i < nums.size() && j < nums.size()) {
            while (i < nums.size() && nums[i] % 2 == 0) i += 2;
            while (j < nums.size() && nums[j] % 2 == 1) j += 2;
            if (i < nums.size() && j < nums.size()) {
                swap(nums[i], nums[j]);
            }
        }
        return nums;

=======

        int i = 0, j = 1;
        while (i < nums.size() && j < nums.size()) {
            while (i < nums.size() && nums[i] % 2 == 0) {
                i += 2;
            }
            while (j < nums.size() && nums[j] % 2 == 1) {
                j += 2;
            }
            if (i < nums.size() && j < nums.size()) {
                swap(nums[i], nums[j]);
            }
        }
        return nums;

=======

        int i = 0;
        int j = 1;
        int n = nums.size();
        while (i < n && j < n) {
            while (i < n && nums[i] % 2 == 0) i += 2;
            while (j < n && nums[j] % 2 == 1) j += 2;
            if (i < n && j < n) {
                swap(nums[i], nums[j]);
            }
        }
        return nums;

=======

        int n = nums.size();
        int i = 0, j = 1;
        while (i < n && j < n) {
            while (i < n && nums[i] % 2 == 0) i += 2;
            while (j < n && nums[j] % 2 == 1) j += 2;
            if (i < n && j < n) {
                swap(nums[i], nums[j]);
                i += 2;
                j += 2;
            }
        }
        return nums;

=======

        int i = 0, j = 1;
        while (i < nums.size() && j < nums.size()) {
            if (nums[i] % 2 == 0) {
                i += 2;
            } else if (nums[j] % 2 == 1) {
                j += 2;
            } else {
                swap(nums[i], nums[j]);
                i += 2;
                j += 2;
            }
        }
        return nums;

=======

        int even = 0, odd = 1;
        int n = nums.size();
        while (even < n && odd < n) {
            while (even < n && nums[even] % 2 == 0) even += 2;
            while (odd < n && nums[odd] % 2 == 1) odd += 2;
            if (even < n && odd < n) {
                swap(nums[even], nums[odd]);
                even += 2;
                odd += 2;
            }
        }
        return nums;

=======

        int odd = 1;
        int even = 0;
        int n = nums.size();
        while (odd < n && even < n) {
            while (odd < n && nums[odd] % 2 == 1) {
                odd += 2;
            }
            while (even < n && nums[even] % 2 == 0) {
                even += 2;
            }
            if (odd < n && even < n) {
                swap(nums[odd], nums[even]);
            }
        }
        return nums;

=======

        int n = nums.size();
        vector<int> res(n);
        int i = 0, j = 1;
        for (int k = 0; k < n; k++) {
            if (nums[k] % 2 == 0) {
                res[i] = nums[k];
                i += 2;
            } else {
                res[j] = nums[k];
                j += 2;
            }
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if ((i % 2 == 0 && nums[i] % 2 == 0) || (i % 2 == 1 && nums[i] % 2 == 1)) {
                res.push_back(nums[i]);
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if ((i % 2 == 0 && nums[i] % 2 == 1) || (i % 2 == 1 && nums[i] % 2 == 0)) {
                res.push_back(nums[i]);
            }
        }
        return res;

=======

        vector<int> result;
        int n = nums.size();
        int odd = 1;
        int even = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 0) {
                result.push_back(nums[i]);
                result.push_back(0);
            } else {
                result.push_back(0);
                result.push_back(nums[i]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                while (result[even] % 2 != 0) {
                    even += 2;
                }
                result[i] = result[even];
                even += 2;
            } else {
                while (result[odd] % 2 == 0) {
                    odd += 2;
                }
                result[i] = result[odd];
                odd += 2;
            }
        }
        return result;
