Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int maxDepth = 0;
        int depth = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                depth++;
                maxDepth = max(maxDepth, depth);
            }
            else if (s[i] == ')') {
                depth--;
            }
        }
        return maxDepth;

=======

        int maxDepth = 0;
        int curDepth = 0;
        for (char c : s) {
            if (c == '(') {
                curDepth++;
                maxDepth = max(maxDepth, curDepth);
            } else if (c == ')') {
                curDepth--;
            }
        }
        return maxDepth;

=======

        int max = 0;
        int count = 0;
        for (char c : s) {
            if (c == '(') {
                count++;
                if (count > max) {
                    max = count;
                }
            } else if (c == ')') {
                count--;
            }
        }
        return max;

=======

        int res = 0, cur = 0;
        for (char c : s) {
            if (c == '(') {
                cur++;
                res = max(res, cur);
            }
            else if (c == ')') {
                cur--;
            }
        }
        return res;

=======

        int maxDepth = 0;
        int depth = 0;
        for (auto c : s) {
            if (c == '(') {
                depth++;
                maxDepth = max(maxDepth, depth);
            } else if (c == ')') {
                depth--;
            }
        }
        return maxDepth;

=======

        int maxDepth = 0;
        int currentDepth = 0;
        for (char c: s) {
            if (c == '(') {
                currentDepth++;
                maxDepth = max(maxDepth, currentDepth);
            }
            else if (c == ')') {
                currentDepth--;
            }
        }
        return maxDepth;

=======

        int depth = 0;
        int maxDepth = 0;
        for (auto c: s) {
            if (c == '(') {
                depth++;
                maxDepth = max(depth, maxDepth);
            } else if (c == ')') {
                depth--;
            }
        }
        return maxDepth;

=======

        int maxNesting = 0;
        int curNesting = 0;
        for (char c : s) {
            if (c == '(') {
                ++curNesting;
                maxNesting = max(maxNesting, curNesting);
            } else if (c == ')') {
                --curNesting;
            }
        }
        return maxNesting;

=======

        int ans = 0;
        int cnt = 0;
        for(auto& i : s) {
            if(i == '(') {
                cnt++;
            } else if(i == ')') {
                cnt--;
            }
            ans = max(ans, cnt);
        }
        return ans;
