Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < prices.size(); i++) {
            for (int j = i + 1; j < prices.size(); j++) {
                if (prices[j] <= prices[i]) {
                    prices[i] -= prices[j];
                    break;
                }
            }
        }
        return prices;

=======

        stack<int> stk;
        for (int i = 0; i < prices.size(); i++) {
            while (!stk.empty() && prices[stk.top()] >= prices[i]) {
                prices[stk.top()] -= prices[i];
                stk.pop();
            }
            stk.push(i);
        }
        return prices;

=======

        vector<int> result;
        for (int i = 0; i < prices.size(); i++) {
            int discount = 0;
            for (int j = i + 1; j < prices.size(); j++) {
                if (prices[j] <= prices[i]) {
                    discount = prices[j];
                    break;
                }
            }
            result.push_back(prices[i] - discount);
        }
        return result;

=======

        vector<int> ans;
        for (int i = 0; i < prices.size(); i++) {
            int j = i + 1;
            for (; j < prices.size(); j++) {
                if (prices[j] <= prices[i]) {
                    ans.push_back(prices[i] - prices[j]);
                    break;
                }
            }
            if (j == prices.size()) {
                ans.push_back(prices[i]);
            }
        }
        return ans;

=======

        vector<int> ans;
        for(int i = 0; i < prices.size(); i++){
            int discount = 0;
            for(int j = i+1; j < prices.size(); j++){
                if(prices[j] <= prices[i]){
                    discount = prices[j];
                    break;
                }
            }
            ans.push_back(prices[i]-discount);
        }
        return ans;

=======

        int n = prices.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; ++i) {
            int discount = 0;
            for (int j = i + 1; j < n; ++j) {
                if (prices[i] >= prices[j]) {
                    discount = prices[j];
                    break;
                }
            }
            ans[i] = prices[i] - discount;
        }
        return ans;

=======

        int n = prices.size();
        vector<int> res(n, 0);
        for(int i = 0; i < n; i++){
            res[i] = prices[i];
            for(int j = i + 1; j < n; j++){
                if(prices[j] <= prices[i]){
                    res[i] -= prices[j];
                    break;
                }
            }
        }
        return res;

=======

        int size = prices.size();
        vector<int> result(size);
        for(int i = 0; i < size; i++) {
            result[i] = prices[i];
            for(int j = i + 1; j < size; j++) {
                if(prices[j] <= prices[i]) {
                    result[i] -= prices[j];
                    break;
                }
            }
        }
        return result;

=======

        int n = prices.size();
        vector<int> ans;
        for(int i = 0; i < n; i++){
            int j = i + 1;
            while(j < n && prices[j] > prices[i]){
                j++;
            }
            if(j < n){
                ans.push_back(prices[i] - prices[j]);
            }else{
                ans.push_back(prices[i]);
            }
        }
        return ans;
