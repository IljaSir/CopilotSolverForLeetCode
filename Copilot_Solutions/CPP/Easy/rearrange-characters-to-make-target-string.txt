Synthesizing 10/10 solutions

=======

        int n = s.size();
        int m = target.size();
        if (n < m) return 0;
        vector<int> cnt(26, 0);
        for (char c : s) cnt[c - 'a']++;
        for (char c : target) {
            if (cnt[c - 'a'] == 0) return 0;
            cnt[c - 'a']--;
        }
        int maxCnt = 0;
        for (int i = 0; i < 26; i++) {
            maxCnt = max(maxCnt, cnt[i]);
        }
        if (maxCnt > (n - m) / m) return 0;
        return (n - m) / m + 1;

=======

        int n = s.size(), m = target.size();
        if (n < m) return 0;
        vector<int> cnt(26);
        for (char c: s) cnt[c - 'a']++;
        for (char c: target) cnt[c - 'a']--;
        for (int i = 0; i < 26; i++) if (cnt[i] < 0) return 0;
        int ans = 0;
        while (true) {
            for (char c: target) {
                if (cnt[c - 'a'] == 0) return ans;
                cnt[c - 'a']--;
            }
            ans++;
        }
        return ans;

=======

        vector<int> cnt(26, 0);
        for (auto c : s) cnt[c - 'a']++;
        vector<int> tcnt(26, 0);
        for (auto c : target) tcnt[c - 'a']++;
        int n = target.length();
        int m = s.length();
        int res = 0;
        while (true) {
            for (int i = 0; i < 26; ++i) {
                if (tcnt[i] > 0) {
                    if (cnt[i] == 0) return res;
                    cnt[i]--;
                }
            }
            res++;
        }
        return res;

=======

        int n = s.size();
        int m = target.size();
        vector<int> sCount(26, 0);
        vector<int> tCount(26, 0);
        for (char c : s) {
            sCount[c - 'a']++;
        }
        for (char c : target) {
            tCount[c - 'a']++;
        }
        int maxCount = 0;
        for (int i = 0; i < 26; ++i) {
            if (tCount[i] == 0) continue;
            if (sCount[i] == 0) return 0;
            maxCount = max(maxCount, sCount[i] / tCount[i]);
        }
        return maxCount;

=======

        int n = s.size();
        int m = target.size();
        if (n < m) {
            return 0;
        }
        vector<int> cnts(26, 0);
        for (char c : s) {
            ++cnts[c - 'a'];
        }
        for (char c : target) {
            if (--cnts[c - 'a'] < 0) {
                return 0;
            }
        }
        int ans = 1;
        int maxCnt = 0;
        for (int cnt : cnts) {
            if (cnt > maxCnt) {
                maxCnt = cnt;
            }
        }
        int maxCntTarget = 0;
        for (char c : target) {
            if (c - 'a' == maxCnt) {
                ++maxCntTarget;
            }
        }
        int maxCntTargetCnt = 0;
        for (int cnt : cnts) {
            if (cnt == maxCnt) {
                ++maxCntTargetCnt;
            }
        }
        if (maxCntTargetCnt < maxCntTarget) {
            return 0;
        }
        if (m % maxCntTarget != 0) {
            return 0;
        }
        return m / maxCntTarget;

=======

        int n = s.length();
        int m = target.length();
        if (n < m) return 0;
        int cnt[26] = {0};
        for (char c : s) cnt[c - 'a']++;
        for (char c : target) cnt[c - 'a']--;
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] < 0) return 0;
        }
        int i = 0;
        int j = 0;
        int res = 0;
        while (i < n && j < m) {
            if (s[i] == target[j]) {
                ++i;
                ++j;
            } else {
                ++i;
            }
            if (j == m) {
                j = 0;
                ++res;
            }
        }
        return res;

=======

        int n = s.size();
        int m = target.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = 0;
            while (i < n && j < m) {
                if (s[i] == target[j]) {
                    ++j;
                }
                ++i;
            }
            if (j == m) {
                ++ans;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = s.length();
        int m = target.length();
        int i = 0, j = 0;
        int count = 0;
        while(i < n && j < m){
            if(s[i] == target[j]){
                i++;
                j++;
            }else{
                i++;
            }
            if(j == m){
                count++;
                j = 0;
            }
        }
        return count;

=======

        int n = s.size();
        int m = target.size();
        int a = 0, b = 0;
        for (char c : s) {
            if (c == 'a') a++;
            else b++;
        }
        for (char c : target) {
            if (c == 'a') a--;
            else b--;
        }
        if (a < 0 || b < 0) return 0;
        if (a == 0 && b == 0) return 1;
        if (a == 0 || b == 0) return 2;
        int x = 0, y = 0;
        for (char c : target) {
            if (c == 'a') x++;
            else y++;
        }
        if (x * y > a + b) return 0;
        return 1 + (a + b - x * y) / (x + y);

=======

        int n = s.size();
        int m = target.size();
        int ans = 0;
        int cnt = 0;
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (s[i] == target[j]) {
                ++i;
                ++j;
                ++cnt;
            } else {
                ++i;
            }
        }
        if (cnt == m) {
            return 1;
        }
        return 0;
