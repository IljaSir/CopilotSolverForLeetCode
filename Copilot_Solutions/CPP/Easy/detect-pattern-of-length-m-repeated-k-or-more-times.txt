Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int count = 0;
        for (int i = 0; i < n - m; ++i) {
            if (arr[i] == arr[i + m]) {
                ++count;
            } else {
                count = 0;
            }
            if (count == (k - 1) * m) {
                return true;
            }
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i <= n - m * k; i++) {
            bool flag = true;
            for (int j = 0; j < m; j++) {
                for (int p = 1; p < k; p++) {
                    if (arr[i + j] != arr[i + j + p * m]) {
                        flag = false;
                        break;
                    }
                }
                if (!flag) break;
            }
            if (flag) return true;
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i <= n - m; i++) {
            int count = 1;
            for (int j = i + m; j <= n - m; j++) {
                bool same = true;
                for (int p = 0; p < m; p++) {
                    if (arr[i + p] != arr[j + p]) {
                        same = false;
                        break;
                    }
                }
                if (same) {
                    count++;
                    if (count == k) return true;
                } else {
                    break;
                }
            }
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i < n - m * k + 1; ++i) {
            bool valid = true;
            for (int j = 0; j < m; ++j) {
                for (int l = 1; l < k; ++l) {
                    if (arr[i + j] != arr[i + j + l * m]) {
                        valid = false;
                        break;
                    }
                }
            }
            if (valid) return true;
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i < n - m; i++) {
            int j = i + m;
            int cnt = 1;
            while (j + m <= n) {
                if (equal(arr.begin() + i, arr.begin() + i + m, arr.begin() + j, arr.begin() + j + m)) {
                    cnt++;
                    if (cnt >= k) return true;
                    j += m;
                }
                else break;
            }
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i < n - m; i++) {
            int j = i + m;
            int cnt = 1;
            while (j + m <= n && arr[i] == arr[j] && arr[j] == arr[j + m]) {
                cnt++;
                j += m;
            }
            if (cnt >= k) {
                return true;
            }
        }
        return false;

=======

        int n = arr.size();
        for (int i = 0; i <= n - m * k; ++i) {
            int j = i + m;
            for (int t = 0; t < k - 1; ++t) {
                if (arr[i] != arr[j]) {
                    break;
                }
                j += m;
            }
            if (j == i + m * k) {
                return true;
            }
        }
        return false;

=======

        int n = arr.size();
        int i = 0;
        while (i < n) {
            int j = i + m;
            int count = 1;
            while (j < n) {
                bool ok = true;
                for (int t = 0; t < m; ++t) {
                    if (arr[i+t] != arr[j+t]) {
                        ok = false;
                        break;
                    }
                }
                if (ok) {
                    ++count;
                    j += m;
                } else {
                    break;
                }
            }
            if (count >= k) {
                return true;
            }
            i += 1;
        }
        return false;

=======

        int n=arr.size();
        if(m*k>n) return false;
        for(int i=0;i<n-m*k+1;i++){
            bool flag=true;
            for(int j=i;j<i+m;j++){
                for(int l=1;l<k;l++){
                    if(arr[j]!=arr[j+l*m]){
                        flag=false;
                        break;
                    }
                }
                if(!flag) break;
            }
            if(flag) return true;
        }
        return false;

=======

        for(int i = 0; i <= arr.size()-m*k; i++){
            int j = i+m;
            int count = 1;
            while(j < arr.size()){
                if(arr[i] == arr[j]){
                    j++;
                    if(j % m == 0){
                        count++;
                        if(count == k)
                            return true;
                    }
                }
                else
                    break;
            }
        }
        return false;
