Synthesizing 10/10 solutions

=======

        unordered_set<int> s1;
        unordered_set<int> s2;
        for (int i = 0; i < nums1.size(); i++) {
            s1.insert(nums1[i]);
        }
        for (int i = 0; i < nums2.size(); i++) {
            s2.insert(nums2[i]);
        }
        vector<int> result;
        for (auto it = s1.begin(); it != s1.end(); it++) {
            int val = *it;
            if (s2.find(val) != s2.end()) {
                result.push_back(val);
            }
        }
        return result;

=======

        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());
        vector<int> result;
        for (int num : set1) {
            if (set2.count(num)) {
                result.push_back(num);
            }
        }
        return result;

=======

        unordered_set<int> set1;
        unordered_set<int> set2;
        for (auto num: nums1) {
            set1.insert(num);
        }
        for (auto num: nums2) {
            set2.insert(num);
        }
        vector<int> result;
        for (auto num: set1) {
            if (set2.find(num) != set2.end()) {
                result.push_back(num);
            }
        }
        return result;

=======

        unordered_set<int> set1(nums1.begin(), nums1.end());
        unordered_set<int> set2(nums2.begin(), nums2.end());
        set1.insert(set2.begin(), set2.end());
        return vector<int>(set1.begin(), set1.end());

=======

        unordered_set<int> s;
        for (int n : nums1) s.insert(n);
        vector<int> res;
        for (int n : nums2) {
            if (s.count(n)) {
                res.push_back(n);
                s.erase(n);
            }
        }
        return res;

=======

        unordered_set<int> s(nums1.begin(), nums1.end());
        unordered_set<int> res;
        for (int i = 0; i < nums2.size(); ++i) {
            if (s.count(nums2[i])) {
                res.insert(nums2[i]);
            }
        }
        return vector<int>(res.begin(), res.end());

=======

        unordered_map<int, int> m;
        vector<int> result;
        for (int i = 0; i < nums1.size(); i++) {
            m[nums1[i]]++;
        }
        for (int i = 0; i < nums2.size(); i++) {
            if (m[nums2[i]] > 0) {
                result.push_back(nums2[i]);
                m[nums2[i]] = 0;
            }
        }
        return result;

=======

        unordered_set<int> s;
        for (auto n : nums1) s.insert(n);
        vector<int> ans;
        for (auto n : nums2) {
            if (s.count(n)) {
                ans.push_back(n);
                s.erase(n);
            }
        }
        return ans;

=======

        set<int> s;
        vector<int> res;
        for (auto num : nums1) {
            s.insert(num);
        }
        for (auto num : nums2) {
            if (s.find(num) != s.end()) {
                res.push_back(num);
                s.erase(num);
            }
        }
        return res;

=======

        unordered_set<int> set;
        for (int i = 0; i < nums1.size(); ++i)
            set.insert(nums1[i]);
        unordered_set<int> res;
        for (int i = 0; i < nums2.size(); ++i) {
            if (set.find(nums2[i]) != set.end())
                res.insert(nums2[i]);
        }
        vector<int> ans;
        for (auto it = res.begin(); it != res.end(); ++it)
            ans.push_back(*it);
        return ans;
