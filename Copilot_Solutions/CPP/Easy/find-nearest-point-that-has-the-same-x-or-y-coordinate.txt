Synthesizing 10/10 solutions

=======

        int minDist = INT_MAX;
        int minIndex = -1;
        for (int i = 0; i < points.size(); ++i) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (dist < minDist) {
                    minDist = dist;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int minDistance = INT_MAX;
        int minIndex = -1;
        for (int i = 0; i < points.size(); i++) {
            if (points[i][0] == x || points[i][1] == y) {
                int distance = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (distance < minDistance) {
                    minDistance = distance;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int minDist = INT_MAX, minIdx = -1;
        for (int i = 0; i < points.size(); ++i) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = abs(points[i][0] - x) + abs(points[i][1] - y);
                if (dist < minDist) {
                    minDist = dist;
                    minIdx = i;
                }
            }
        }
        return minIdx;

=======

        int minDist = INT_MAX;
        int minIdx = -1;
        for (int i = 0; i < points.size(); ++i) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (dist < minDist) {
                    minDist = dist;
                    minIdx = i;
                }
            }
        }
        return minIdx;

=======

        int min_dist = INT_MAX, min_index = -1;
        for (int i = 0; i < points.size(); i++) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (dist < min_dist) {
                    min_dist = dist;
                    min_index = i;
                }
            }
        }
        return min_index;

=======

        int minDist = INT_MAX;
        int minIndex = -1;
        for(int i = 0; i < points.size(); i++){
            if(points[i][0] == x || points[i][1] == y){
                int dist = abs(points[i][0] - x) + abs(points[i][1] - y);
                if(dist < minDist){
                    minDist = dist;
                    minIndex = i;
                }
            }
        }
        return minIndex;

=======

        int minD = INT_MAX;
        int minI = -1;
        for (int i = 0; i < points.size(); ++i) {
            if (x == points[i][0] || y == points[i][1]) {
                int d = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (d < minD) {
                    minD = d;
                    minI = i;
                }
            }
        }
        return minI;

=======

        int n = points.size();
        int ans = -1;
        int minDist = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (points[i][0] == x || points[i][1] == y) {
                int dist = abs(x - points[i][0]) + abs(y - points[i][1]);
                if (dist < minDist) {
                    minDist = dist;
                    ans = i;
                }
            }
        }
        return ans;

=======

        int res = -1, minDis = INT_MAX;
        for(int i = 0; i < points.size(); ++i) {
            if(points[i][0] == x || points[i][1] == y) {
                int dis = abs(x - points[i][0]) + abs(y - points[i][1]);
                if(dis < minDis) {
                    minDis = dis;
                    res = i;
                }
            }
        }
        return res;

=======

        int minDist = INT_MAX, minIdx = -1;
        for (int i = 0; i < points.size(); ++i) {
            int xi = points[i][0], yi = points[i][1];
            if (xi == x || yi == y) {
                int dist = abs(x - xi) + abs(y - yi);
                if (dist < minDist) {
                    minDist = dist;
                    minIdx = i;
                }
            }
        }
        return minIdx;
