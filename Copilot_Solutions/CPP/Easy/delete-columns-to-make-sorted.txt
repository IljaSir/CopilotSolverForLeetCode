Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < strs[0].size(); i++) {
            for (int j = 0; j < strs.size() - 1; j++) {
                if (strs[j][i] > strs[j + 1][i]) {
                    count++;
                    break;
                }
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < strs[0].size(); i++) {
            for (int j = 0; j < strs.size() - 1; j++) {
                if (strs[j][i] > strs[j + 1][i]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        int ret = 0;
        for (int i = 0; i < strs[0].size(); i++) {
            for (int j = 0; j < strs.size() - 1; j++) {
                if (strs[j][i] > strs[j + 1][i]) {
                    ret++;
                    break;
                }
            }
        }
        return ret;

=======

        int n = strs.size();
        int m = strs[0].size();
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (strs[j][i] > strs[j + 1][i]) {
                    count++;
                    break;
                }
            }
        }
        return count;

=======

        int n = strs.size();
        int m = strs[0].size();
        int res = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n-1; j++){
                if(strs[j][i] > strs[j+1][i]){
                    res++;
                    break;
                }
            }
        }
        return res;

=======

        int n = strs.size();
        int m = strs[0].length();
        int ret = 0;
        for (int j = 0; j < m; ++j) {
            for (int i = 1; i < n; ++i) {
                if (strs[i][j] < strs[i - 1][j]) {
                    ++ret;
                    break;
                }
            }
        }
        return ret;
