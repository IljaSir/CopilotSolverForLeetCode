Synthesizing 10/10 solutions

=======

        int sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (k > 0 && nums[i] < 0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
        }
        if (k > 0 && k % 2 != 0) {
            sort(nums.begin(), nums.end());
            sum -= 2 * nums[0];
        }
        return sum;

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(nums[i]);
        }
        while (k > 0) {
            int val = pq.top();
            pq.pop();
            pq.push(-val);
            k--;
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        int n = nums.size();
        int sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i++) {
            if (nums[i] < 0 && k > 0) {
                nums[i] = -nums[i];
                k--;
            }
            sum += nums[i];
        }
        if (k == 0) {
            return sum;
        }
        if (k % 2 == 0) {
            return sum;
        }
        sort(nums.begin(), nums.end());
        return sum - 2 * nums[0];

=======

        for (int i = 0; i < k; ++i) {
            int min = 0;
            for (int j = 1; j < nums.size(); ++j) {
                if (nums[j] < nums[min]) {
                    min = j;
                }
            }
            nums[min] = -nums[min];
        }
        
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
        }
        return sum;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int i = 0;
        while (k > 0 && i < n) {
            if (nums[i] < 0) {
                nums[i] = -nums[i];
                k--;
                i++;
            } else {
                break;
            }
        }
        sort(nums.begin(), nums.end());
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        if (k == 0) return sum;
        if (k % 2 == 0) return sum;
        return sum - 2 * nums[0];

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (auto i : nums) {
            pq.push(i);
        }
        while (k--) {
            int x = pq.top();
            pq.pop();
            pq.push(-x);
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        // sort(nums.begin(), nums.end());
        // int i = 0;
        // while (k > 0 && i < nums.size()) {
        //     if (nums[i] < 0) {
        //         nums[i] = -nums[i];
        //         k--;
        //     } else if (nums[i] == 0) {
        //         break;
        //     } else {
        //         if (k % 2 == 1) {
        //             nums[i] = -nums[i];
        //             k = 0;
        //         }
        //     }
        //     i++;
        // }
        // int sum = 0;
        // for (int n : nums) {
        //     sum += n;
        // }
        // return sum;
        priority_queue<int, vector<int>, greater<int>> pq;
        for (int n : nums) {
            pq.push(n);
        }
        while (k > 0) {
            int n = pq.top();
            pq.pop();
            pq.push(-n);
            k--;
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        int sum = 0;
        int min = INT_MAX;
        int minIndex = 0;
        while (k > 0) {
            for (int i = 0; i < nums.size(); i++) {
                if (nums[i] < min) {
                    min = nums[i];
                    minIndex = i;
                }
            }
            nums[minIndex] = -nums[minIndex];
            k--;
            min = INT_MAX;
        }
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        return sum;

=======

        int sum = 0;
        int min = 101;
        int minIdx = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < min) {
                min = nums[i];
                minIdx = i;
            }
            sum += nums[i];
        }
        if (k == 0) return sum;
        if (nums[minIdx] < 0) {
            nums[minIdx] = -nums[minIdx];
            return largestSumAfterKNegations(nums, k-1);
        } else {
            if (k % 2 == 0) return sum;
            else {
                if (sum - 2*min < 0) return sum - 2*min;
                else return sum;
            }
        }

=======

        int n = nums.size();
        int sum = 0;
        int min = 101;
        int minIndex = -1;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (nums[i] < min) {
                min = nums[i];
                minIndex = i;
            }
        }
        int negCount = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] < 0) negCount++;
        }
        if (k <= negCount) {
            for (int i = 0; i < k; i++) {
                sum -= 2 * nums[i];
            }
        } else {
            sum -= 2 * min;
            k -= negCount;
            if (k % 2 == 1) {
                sum -= 2 * min;
            }
        }
        return sum;
