Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == ' ') {
                count++;
            }
            if (count == k) {
                return s.substr(0, i);
            }
        }
        return s;

=======

        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == ' ') {
                count++;
            }
            if (count == k) {
                s = s.substr(0, i);
                break;
            }
        }
        return s;

=======

        int i = 0;
        while (k > 0) {
            if (s[i] == ' ') {
                k--;
            }
            i++;
        }
        return s.substr(0, i - 1);

=======

        int count = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == ' ') count++;
            if(count == k) {
                return s.substr(0, i);
            }
        }
        return s;

=======

        int i = 0;
        while (i < s.size() && k > 0) {
            if (s[i] == ' ') {
                k--;
            }
            i++;
        }
        if (i < s.size()) {
            s.erase(s.begin() + i, s.end());
        }
        return s;

=======

        int i = 0;
        while (k > 0 && i < s.length()) {
            if (s[i] == ' ') {
                k--;
            }
            i++;
        }
        if (i < s.length()) {
            s[i] = '\0';
        }
        return s;

=======

        int i = 0;
        int wordCount = 0;
        for (; i < s.length() && wordCount < k; i++) {
            if (s[i] == ' ') {
                wordCount++;
            }
        }
        if (wordCount == k) {
            return s.substr(0, i - 1);
        }
        return s;

=======

        int i = 0;
        for (int j = 0; j < s.size() && i < k; j++) {
            if (s[j] == ' ') {
                i++;
            }
        }
        
        return s.substr(0, i);

=======

        string res;
        int i = 0;
        while(k) {
            if (s[i] == ' ') {
                k--;
            }
            res.push_back(s[i]);
            i++;
        }
        res.pop_back();
        return res;

=======

        int i=0;
        while (k > 0){
            if (s[i] == ' ') k--;
            i++;
        }
        return s.substr(0,i-1);
