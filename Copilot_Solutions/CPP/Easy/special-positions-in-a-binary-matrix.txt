Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1 && row[i] == 1 && col[j] == 1) {
                    count++;
                }
            }
        }
        return count;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1 && row[i] == 1 && col[j] == 1) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 1) {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 1 && row[i] == 1 && col[j] == 1) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int m = mat.size(), n = mat[0].size();
        vector<int> row(m, 0), col(n, 0);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                row[i] += mat[i][j];
                col[j] += mat[i][j];
            }
        }
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 1 && row[i] == 1 && col[j] == 1) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    int row = 0;
                    int col = 0;
                    for(int k = 0; k < m; k++){
                        if(mat[k][j] == 1){
                            row++;
                        }
                    }
                    for(int k = 0; k < n; k++){
                        if(mat[i][k] == 1){
                            col++;
                        }
                    }
                    if(row == 1 && col == 1){
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> r(m, 0);
        vector<int> c(n, 0);
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    r[i]++;
                    c[j]++;
                }
            }
        }
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1 && r[i] == 1 && c[j] == 1){
                    count++;
                }
            }
        }
        return count;

=======

        int m = mat.size();
        int n = mat[0].size();
        int ans = 0;
        vector<int> row(m, 0), col(n, 0);
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    row[i]++;
                    col[j]++;
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1 && row[i] == 1 && col[j] == 1){
                    ans++;
                }
            }
        }
        return ans;

=======

        int count = 0;
        for(int i=0;i<mat.size();i++){
            for(int j=0;j<mat[i].size();j++){
                if(mat[i][j] == 1){
                    bool isSpecial = true;
                    for(int k=0;k<mat[i].size();k++){
                        if(k == j) continue;
                        if(mat[i][k] == 1){
                            isSpecial = false;
                            break;
                        }
                    }
                    if(isSpecial){
                        for(int k=0;k<mat.size();k++){
                            if(k == i) continue;
                            if(mat[k][j] == 1){
                                isSpecial = false;
                                break;
                            }
                        }
                    }
                    if(isSpecial) count++;
                }
            }
        }
        return count;

=======

        int m = mat.size();
        int n = mat[0].size();
        int count = 0;
        vector<vector<int>> row(m, vector<int>(n, 0));
        vector<vector<int>> col(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    row[i][j] = 1;
                    col[i][j] = 1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    int r = 0;
                    int c = 0;
                    for (int k = 0; k < n; k++) {
                        r += row[i][k];
                    }
                    for (int k = 0; k < m; k++) {
                        c += col[k][j];
                    }
                    if (r == 1 && c == 1) {
                        count++;
                    }
                }
            }
        }
        return count;
