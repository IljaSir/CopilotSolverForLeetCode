Synthesizing 10/10 solutions

=======

        char c = 0;
        for (auto i : s) {
            c ^= i;
        }
        for (auto i : t) {
            c ^= i;
        }
        return c;

=======

        int sum = 0;
        for (char c : s) {
            sum += c;
        }
        for (char c : t) {
            sum -= c;
        }
        return -sum;

=======

        int sum1 = 0;
        int sum2 = 0;
        for (auto c : s) {
            sum1 += c;
        }
        for (auto c : t) {
            sum2 += c;
        }
        return sum2 - sum1;

=======

        int sum = 0;
        for (auto c : s) {
            sum += c;
        }
        for (auto c : t) {
            sum -= c;
        }
        return -sum;

=======

        int c = 0;
        for (int i = 0; i < s.size(); i++) {
            c ^= s[i] ^ t[i];
        }
        c ^= t[t.size() - 1];
        return c;

=======

        int n = s.length();
        char res = t[n];
        for (int i = 0; i < n; i++) {
            res ^= s[i] ^ t[i];
        }
        return res;

=======

        int n = s.size(), m = t.size();
        int sum1 = 0, sum2 = 0;
        for (int i = 0; i < n; i++) {
            sum1 += s[i];
        }
        for (int i = 0; i < m; i++) {
            sum2 += t[i];
        }
        return sum2 - sum1;

=======

        int len = s.length();
        int sum1 = 0;
        int sum2 = 0;
        for(int i=0; i<len; i++){
            sum1 += s[i];
            sum2 += t[i];
        }
        sum2 += t[len];
        return (char)(sum2 - sum1);

=======

        int n = s.size();
        int m = t.size();
        if (n == 0) {
            return t[0];
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < n; i++) {
            sum1 += s[i];
        }
        for (int i = 0; i < m; i++) {
            sum2 += t[i];
        }
        return (char)(sum2 - sum1);

=======

        int n = s.size();
        int m = t.size();
        if (n == 0) return t[0];
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += (t[i] - s[i]);
        }
        sum += t[m - 1];
        return (char)sum;
