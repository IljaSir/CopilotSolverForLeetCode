Synthesizing 10/10 solutions

=======

        int i = 0, j = nums.size() - 1;
        while (i < j) {
            if (nums[i] % 2 == 1 && nums[j] % 2 == 0) {
                swap(nums[i], nums[j]);
                i++;
                j--;
            } else if (nums[i] % 2 == 0) {
                i++;
            } else if (nums[j] % 2 == 1) {
                j--;
            }
        }
        return nums;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] % 2 == 0) {
                res.insert(res.begin(), nums[i]);
            } else {
                res.push_back(nums[i]);
            }
        }
        return res;

=======

        int i = 0, j = nums.size() - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                i++;
            } else if (nums[j] % 2 == 1) {
                j--;
            } else {
                swap(nums[i++], nums[j--]);
            }
        }
        return nums;

=======

        int i = 0, j = nums.size() - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                i++;
            } else if (nums[j] % 2 == 1) {
                j--;
            } else {
                swap(nums[i], nums[j]);
                i++;
                j--;
            }
        }
        return nums;

=======

        int i = 0, j = nums.size() - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                ++i;
                continue;
            }
            if (nums[j] % 2 == 1) {
                --j;
                continue;
            }
            swap(nums[i], nums[j]);
        }
        return nums;

=======

        int i = 0, j = nums.size() - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                ++i;
            } else if (nums[j] % 2 == 1) {
                --j;
            } else {
                swap(nums[i++], nums[j--]);
            }
        }
        return nums;

=======

        int n = nums.size();
        int i = 0;
        int j = n - 1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                i++;
            } else {
                swap(nums[i], nums[j]);
                j--;
            }
        }
        return nums;

=======

        vector<int> even;
        vector<int> odd;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 0){
                even.push_back(nums[i]);
            } else {
                odd.push_back(nums[i]);
            }
        }
        even.insert(even.end(), odd.begin(), odd.end());
        return even;

=======

        int n = nums.size();
        vector<int> res(n);
        int i = 0, j = n - 1;
        for (int k = 0; k < n; k++) {
            if (nums[k] % 2 == 0) {
                res[i++] = nums[k];
            } else {
                res[j--] = nums[k];
            }
        }
        return res;

=======

        int n = nums.size();
        int i = 0, j = n-1;
        while (i < j) {
            if (nums[i] % 2 == 0) {
                i++;
            } else if (nums[j] % 2 == 1) {
                j--;
            } else {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
            }
        }
        return nums;
