Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = 0;
        for (int i = 1; i < points.size(); i++) {
            res += max(abs(points[i][0] - points[i - 1][0]), abs(points[i][1] - points[i - 1][1]));
        }
        return res;

=======

        int res = 0;
        for (int i = 1; i < points.size(); ++i) {
            res += max(abs(points[i][0] - points[i - 1][0]), abs(points[i][1] - points[i - 1][1]));
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < points.size() - 1; i++) {
            res += max(abs(points[i][0] - points[i + 1][0]), abs(points[i][1] - points[i + 1][1]));
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < points.size() - 1; ++i) {
            res += max(abs(points[i][0] - points[i + 1][0]), abs(points[i][1] - points[i + 1][1]));
        }
        return res;

=======

        int res = 0;
        for (int i = 1; i < points.size(); ++i) {
            int dx = abs(points[i][0] - points[i - 1][0]);
            int dy = abs(points[i][1] - points[i - 1][1]);
            res += min(dx, dy) + abs(dx - dy);
        }
        return res;

=======

        int result = 0;
        for (int i = 1; i < points.size(); i++) {
            result += max(abs(points[i][0] - points[i-1][0]), abs(points[i][1] - points[i-1][1]));
        }
        return result;

=======

        int n = points.size();
        int ans = 0;
        for (int i = 1; i < n; i++) {
            int x = abs(points[i][0] - points[i - 1][0]);
            int y = abs(points[i][1] - points[i - 1][1]);
            ans += min(x, y) + abs(x - y);
        }
        return ans;

=======

        int time = 0;
        for (int i = 1; i < points.size(); ++i) {
            int x = abs(points[i][0] - points[i - 1][0]);
            int y = abs(points[i][1] - points[i - 1][1]);
            time += min(x, y) + abs(x - y);
        }
        return time;

=======

        int n = points.size();
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            int x = abs(points[i][0] - points[i - 1][0]);
            int y = abs(points[i][1] - points[i - 1][1]);
            ans += min(x, y) + abs(x - y);
        }
        return ans;
