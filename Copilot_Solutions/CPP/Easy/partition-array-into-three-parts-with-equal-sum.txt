Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < arr.size(); i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int count = 0;
        int temp = 0;
        for (int i = 0; i < arr.size(); i++) {
            temp += arr[i];
            if (temp == target) {
                count++;
                temp = 0;
            }
            if (count == 3) {
                return true;
            }
        }
        return false;

=======

        int sum = 0;
        for (int i = 0; i < arr.size(); ++i) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int left = 0;
        int right = arr.size() - 1;
        int leftSum = 0;
        int rightSum = 0;
        while (left < right) {
            leftSum += arr[left];
            rightSum += arr[right];
            if (leftSum == target && rightSum == target) {
                return true;
            }
            if (leftSum != target) {
                ++left;
            }
            if (rightSum != target) {
                --right;
            }
        }
        return false;

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int i = 0;
        int j = n - 1;
        int left = 0;
        int right = 0;
        while (i + 1 < j) {
            left += arr[i];
            if (left == target) {
                break;
            }
            i++;
        }
        while (j - 1 > i) {
            right += arr[j];
            if (right == target) {
                break;
            }
            j--;
        }
        return left == target && right == target && i + 1 < j;

=======

        int sum = 0;
        for (auto i : arr) {
            sum += i;
        }
        if (sum % 3 != 0) {
            return false;
        }
        sum /= 3;
        int cur = 0;
        int count = 0;
        for (auto i : arr) {
            cur += i;
            if (cur == sum) {
                cur = 0;
                count++;
            }
        }
        return count == 3;

=======

        int sum = 0;
        for (int x : arr) {
            sum += x;
        }
        if (sum % 3 != 0) {
            return false;
        }
        int target = sum / 3;
        int cur = 0;
        int count = 0;
        for (int x : arr) {
            cur += x;
            if (cur == target) {
                cur = 0;
                count++;
            }
        }
        return count >= 3;

=======

        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum % 3 != 0) return false;
        int target = sum / 3;
        int count = 0;
        sum = 0;
        for (auto n : arr) {
            sum += n;
            if (sum == target) {
                sum = 0;
                count++;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for(int i = 0; i < arr.size(); i++){
            sum += arr[i];
        }
        if(sum % 3 != 0){
            return false;
        }
        int target = sum / 3;
        int curSum = 0;
        int count = 0;
        for(int i = 0; i < arr.size(); i++){
            curSum += arr[i];
            if(curSum == target){
                count++;
                curSum = 0;
            }
        }
        return count >= 3;

=======

        int sum = 0;
        for (int a : arr) sum += a;
        if (sum % 3 != 0) return false;
        int target = sum / 3;
        int count = 0;
        int cur = 0;
        for (int a : arr) {
            cur += a;
            if (cur == target) {
                cur = 0;
                count++;
            }
        }
        return count >= 3;

=======

        int sum = accumulate(arr.begin(), arr.end(), 0);
        if (sum % 3) return false;
        int part = sum / 3;
        int cnt = 0, cur = 0;
        for (int i = 0; i < arr.size(); ++i) {
            cur += arr[i];
            if (cur == part) {
                ++cnt;
                cur = 0;
            }
        }
        return cnt == 3;

=======

        int sum = 0;
        for (auto &x: arr) sum += x;
        if (sum % 3 != 0) return false;
        int target = sum / 3;
        int cur = 0;
        int cnt = 0;
        for (auto &x: arr) {
            cur += x;
            if (cur == target) {
                ++cnt;
                cur = 0;
            }
        }
        return cnt >= 3;
