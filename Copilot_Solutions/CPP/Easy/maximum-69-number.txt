Synthesizing 10/10 solutions

=======

        string s = to_string(num);
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '6') {
                s[i] = '9';
                break;
            }
        }
        return stoi(s);

=======

        std::string s = std::to_string(num);
        for (auto& c : s) {
            if (c == '6') {
                c = '9';
                break;
            }
        }
        return std::stoi(s);

=======

        auto s = to_string(num);
        for (auto& c : s) {
            if (c == '6') {
                c = '9';
                break;
            }
        }
        return stoi(s);

=======

        string s = to_string(num);
        int i = 0;
        while (i < s.size() && s[i] == '9') {
            i++;
        }
        if (i < s.size()) {
            s[i] = '9';
        }
        return stoi(s);

=======

        int n = num;
        int i = 0;
        while (n) {
            if (n % 10 == 6) {
                num += 3 * pow(10, i);
                break;
            }
            n /= 10;
            i++;
        }
        return num;

=======

        vector<int> v;
        while (num > 0)
        {
            v.push_back(num%10);
            num /= 10;
        }
        for (int i = v.size() - 1; i >= 0; --i)
        {
            if (v[i] == 6)
            {
                v[i] = 9;
                break;
            }
        }
        int res = 0;
        for (int i = v.size() - 1; i >= 0; --i)
        {
            res = res * 10 + v[i];
        }
        return res;

=======

        int res = 0, base = 1;
        while (num) {
            res += (num % 10 == 6 ? 9 : num % 10) * base;
            base *= 10;
            num /= 10;
        }
        return res;

=======

        int n = 0;
        int m = 0;
        int p = 1;
        while (num > 0) {
            int d = num % 10;
            if (d == 6) {
                m = p;
            }
            n += p * d;
            p *= 10;
            num /= 10;
        }
        return n + 3 * m;

=======

        int n = num;
        int count = 0;
        while(n) {
            n /= 10;
            count++;
        }
        for(int i = 0; i < count; i++) {
            int tmp = num;
            int j = 0;
            while(j < i) {
                tmp /= 10;
                j++;
            }
            if(tmp % 10 == 6) {
                int k = 0;
                int sum = 0;
                while(k < i) {
                    sum += pow(10,k);
                    k++;
                }
                return num + 3 * sum;
            }
        }
        return num;

=======

        int res = 0;
        int tmp = 0;
        vector<int> v;
        while (num != 0) {
            tmp = num % 10;
            if (tmp == 6) {
                v.push_back(9);
            } else {
                v.push_back(tmp);
            }
            num /= 10;
        }
        for (int i = v.size() - 1; i >= 0; i--) {
            res = res * 10 + v[i];
        }
        return res;
