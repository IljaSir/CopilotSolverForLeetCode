Synthesizing 10/10 solutions

=======

        vector<int> ans;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int i = 0, j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] == nums2[j]) {
                ans.push_back(nums1[i]);
                i++;
                j++;
            }else if (nums1[i] < nums2[j]) {
                i++;
            }else {
                j++;
            }
        }
        return ans;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums1.size(); i++) {
            m[nums1[i]]++;
        }
        vector<int> res;
        for (int i = 0; i < nums2.size(); i++) {
            if (m[nums2[i]] > 0) {
                res.push_back(nums2[i]);
                m[nums2[i]]--;
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> map;
        for (int i = 0; i < nums1.size(); i++) {
            if (map.find(nums1[i]) == map.end()) {
                map[nums1[i]] = 1;
            } else {
                map[nums1[i]]++;
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            if (map.find(nums2[i]) != map.end() && map[nums2[i]] > 0) {
                res.push_back(nums2[i]);
                map[nums2[i]]--;
            }
        }
        return res;

=======

        vector<int> res;
        unordered_map<int, int> m1;
        for (int i = 0; i < nums1.size(); i++) {
            m1[nums1[i]]++;
        }
        for (int i = 0; i < nums2.size(); i++) {
            if (m1[nums2[i]] > 0) {
                res.push_back(nums2[i]);
                m1[nums2[i]]--;
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (auto n : nums1) {
            m[n]++;
        }
        vector<int> res;
        for (auto n : nums2) {
            if (m[n]-- > 0) {
                res.push_back(n);
            }
        }
        return res;

=======

        map<int, int> m;
        for (auto i : nums1) {
            m[i]++;
        }
        vector<int> res;
        for (auto i : nums2) {
            if (m[i] > 0) {
                res.push_back(i);
                m[i]--;
            }
        }
        return res;

=======

        vector<int> res;
        int len1 = nums1.size();
        int len2 = nums2.size();
        if (len1 == 0 || len2 == 0) return res;
        unordered_map<int, int> m1;
        unordered_map<int, int> m2;
        for (int i = 0; i < len1; i++) {
            if (m1.find(nums1[i]) == m1.end()) {
                m1[nums1[i]] = 1;
            } else {
                m1[nums1[i]]++;
            }
        }
        for (int i = 0; i < len2; i++) {
            if (m2.find(nums2[i]) == m2.end()) {
                m2[nums2[i]] = 1;
            } else {
                m2[nums2[i]]++;
            }
        }
        for (auto it = m1.begin(); it != m1.end(); it++) {
            if (m2.find(it->first) != m2.end()) {
                int count = min(it->second, m2[it->first]);
                for (int i = 0; i < count; i++) {
                    res.push_back(it->first);
                }
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        vector<int> ans;
        for(int i=0; i<nums1.size(); i++) {
            m[nums1[i]]++;
        }
        for(int i=0; i<nums2.size(); i++) {
            if(m[nums2[i]] > 0) {
                ans.push_back(nums2[i]);
                m[nums2[i]]--;
            }
        }
        return ans;

=======

        vector<int> ans;
        unordered_map<int, int> m;
        for (auto i : nums1) {
            m[i]++;
        }
        for (auto i : nums2) {
            if (m[i] > 0) {
                ans.push_back(i);
                m[i]--;
            }
        }
        return ans;

=======

        vector<int> result;
        unordered_map<int, int> m;
        for (auto n: nums1) {
            m[n]++;
        }
        for (auto n: nums2) {
            if (m[n] > 0) {
                result.push_back(n);
                m[n]--;
            }
        }
        return result;
