Synthesizing 10/10 solutions

=======

        vector<int> result;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                result.push_back(i);
            }
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                res.push_back(i);
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) res.push_back(i);
        }
        return res;

=======

        vector<int> res;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            if(nums[i]==target){
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> indices;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                indices.push_back(i);
            }
        }
        return indices;

=======

        vector<int> sorted = nums;
        sort(sorted.begin(), sorted.end());
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                for (int j = 0; j < sorted.size(); j++) {
                    if (sorted[j] == target) {
                        res.push_back(j);
                        sorted[j] = -1;
                        break;
                    }
                }
            }
        }
        return res;

=======

        vector<int> indices;
        
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                indices.push_back(i);
            }
        }
        
        sort(nums.begin(), nums.end());
        
        for (int i = 0; i < indices.size(); i++) {
            indices[i] = find(nums.begin(), nums.end(), target) - nums.begin();
        }
        
        return indices;

=======

        vector<int> result;
        vector<int> sorted = nums;
        sort(sorted.begin(), sorted.end());
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                int index = find(sorted.begin(), sorted.end(), target) - sorted.begin();
                result.push_back(index);
                sorted[index] = -1;
            }
        }
        return result;

=======

        vector<int> result;
        sort(nums.begin(), nums.end());
        int i = 0;
        while (i < nums.size()) {
            if (nums[i] == target) {
                result.push_back(i);
            }
            i++;
        }
        return result;
