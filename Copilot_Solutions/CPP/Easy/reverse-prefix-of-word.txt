Synthesizing 10/10 solutions

=======

        int pos = word.find(ch);
        if (pos != string::npos) {
            reverse(word.begin(), word.begin() + pos + 1);
        }
        return word;

=======

        int i;
        for (i = 0; i < word.length(); i++) {
            if (word[i] == ch) {
                break;
            }
        }
        if (i == word.length()) {
            return word;
        }
        int j = 0;
        while (j < i) {
            char t = word[j];
            word[j] = word[i];
            word[i] = t;
            j++;
            i--;
        }
        return word;

=======

        int pos = word.find(ch);
        if (pos == string::npos) {
            return word;
        }
        reverse(word.begin(), word.begin() + pos + 1);
        return word;

=======

        int i = word.find(ch);
        if (i != string::npos) {
            reverse(word.begin(), word.begin()+i+1);
        }
        return word;

=======

        int index = word.find(ch);
        if (index == string::npos) {
            return word;
        }
        int start = 0;
        while (start < index) {
            swap(word[start++], word[index--]);
        }
        return word;

=======

        int i = 0;
        while(i < word.length() && word[i] != ch) i++;
        if(i < word.length()) reverse(word.begin(), word.begin()+i+1);
        return word;

=======

        int i = 0;
        for(; i < word.size(); i++){
            if(word[i] == ch) break;
        }
        if(i == word.size()) return word;
        reverse(word.begin(), word.begin() + i + 1);
        return word;

=======

        string ans = "";
        int index = word.find(ch);
        if (index == string::npos) {
            return word;
        }
        for (int i = index; i >= 0; i--) {
            ans += word[i];
        }
        for (int i = index + 1; i < word.size(); i++) {
            ans += word[i];
        }
        return ans;

=======

        int i = 0;
        while(i < word.length() && word[i] != ch)
            i++;
        if(i == word.length())
            return word;
        else
        {
            int j = 0;
            while(j < i)
            {
                swap(word[j], word[i]);
                j++;
                i--;
            }
            return word;
        }

=======

        int len = word.size();
        int index = 0;
        for(; index < len; ++index) {
            if(word[index] == ch) break;
        }
        if(index == len) return word;
        int left = 0, right = index;
        while(left < right) {
            swap(word[left++], word[right--]);
        }
        return word;
