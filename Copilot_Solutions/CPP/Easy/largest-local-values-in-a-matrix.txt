Synthesizing 10/10 solutions

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n - 2, vector<int>(n - 2, 0));
        for (int i = 1; i < n - 1; ++i) {
            for (int j = 1; j < n - 1; ++j) {
                int maxVal = grid[i - 1][j - 1];
                maxVal = max(maxVal, grid[i - 1][j]);
                maxVal = max(maxVal, grid[i - 1][j + 1]);
                maxVal = max(maxVal, grid[i][j - 1]);
                maxVal = max(maxVal, grid[i][j]);
                maxVal = max(maxVal, grid[i][j + 1]);
                maxVal = max(maxVal, grid[i + 1][j - 1]);
                maxVal = max(maxVal, grid[i + 1][j]);
                maxVal = max(maxVal, grid[i + 1][j + 1]);
                maxLocal[i - 1][j - 1] = maxVal;
            }
        }
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n-2, vector<int>(n-2));
        for(int i = 1; i < n-1; i++){
            for(int j = 1; j < n-1; j++){
                int max = grid[i-1][j-1];
                for(int k = i-1; k <= i+1; k++){
                    for(int l = j-1; l <= j+1; l++){
                        if(grid[k][l] > max){
                            max = grid[k][l];
                        }
                    }
                }
                maxLocal[i-1][j-1] = max;
            }
        }
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> ans(n-2, vector<int>(n-2, 0));
        for (int i = 1; i < n-1; i++) {
            for (int j = 1; j < n-1; j++) {
                ans[i-1][j-1] = max(grid[i-1][j-1], max(grid[i-1][j], max(grid[i-1][j+1], max(grid[i][j-1], max(grid[i][j], max(grid[i][j+1], max(grid[i+1][j-1], max(grid[i+1][j], grid[i+1][j+1]))))))));
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n - 2, vector<int>(n - 2));
        for (int i = 1; i < n - 1; i++)
            for (int j = 1; j < n - 1; j++) {
                maxLocal[i - 1][j - 1] = grid[i - 1][j - 1];
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i - 1][j]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i - 1][j + 1]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i][j - 1]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i][j]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i][j + 1]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i + 1][j - 1]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i + 1][j]);
                maxLocal[i - 1][j - 1] = max(maxLocal[i - 1][j - 1], grid[i + 1][j + 1]);
            }
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n-2, vector<int>(n-2));
        for (int i = 0; i < n - 2; ++i) {
            for (int j = 0; j < n - 2; ++j) {
                int maxVal = 0;
                for (int k = i; k < i + 3; ++k) {
                    for (int p = j; p < j + 3; ++p) {
                        maxVal = max(maxVal, grid[k][p]);
                    }
                }
                maxLocal[i][j] = maxVal;
            }
        }
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n - 2, vector<int>(n - 2));
        for(int i = 1; i < n - 1; i++){
            for(int j = 1; j < n - 1; j++){
                maxLocal[i - 1][j - 1] = max(max(max(grid[i - 1][j - 1], grid[i - 1][j]), max(grid[i - 1][j + 1], grid[i][j - 1])), max(max(grid[i][j], grid[i][j + 1]), max(grid[i + 1][j - 1], max(grid[i + 1][j], grid[i + 1][j + 1]))));
            }
        }
        return maxLocal;

=======

        vector<vector<int>> maxLocal(grid.size()-2,vector<int>(grid[0].size()-2,0));
        for(int i=0;i<grid.size()-2;i++){
            for(int j=0;j<grid[0].size()-2;j++){
                int max=0;
                for(int k=i;k<i+3;k++){
                    for(int l=j;l<j+3;l++){
                        if(grid[k][l]>max){
                            max=grid[k][l];
                        }
                    }
                }
                maxLocal[i][j]=max;
            }
        }
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> maxLocal(n-2, vector<int>(n-2, 0));
        for (int i = 1; i < n-1; ++i)
            for (int j = 1; j < n-1; ++j)
                maxLocal[i-1][j-1] = max({grid[i-1][j-1], grid[i-1][j], grid[i-1][j+1], grid[i][j-1], grid[i][j], grid[i][j+1], grid[i+1][j-1], grid[i+1][j], grid[i+1][j+1]});
        return maxLocal;

=======

        int n = grid.size();
        vector<vector<int>> res(n-2, vector<int>(n-2, 0));
        for(int i = 1; i < n - 1; i++){
            for(int j = 1; j < n - 1; j++){
                int max = grid[i-1][j-1];
                max = max > grid[i-1][j] ? max : grid[i-1][j];
                max = max > grid[i-1][j+1] ? max : grid[i-1][j+1];
                max = max > grid[i][j-1] ? max : grid[i][j-1];
                max = max > grid[i][j] ? max : grid[i][j];
                max = max > grid[i][j+1] ? max : grid[i][j+1];
                max = max > grid[i+1][j-1] ? max : grid[i+1][j-1];
                max = max > grid[i+1][j] ? max : grid[i+1][j];
                max = max > grid[i+1][j+1] ? max : grid[i+1][j+1];
                res[i-1][j-1] = max;
            }
        }
        return res;

=======

        int n = grid.size();
        vector<vector<int>> res(n-2, vector<int>(n-2));
        for(int i=1;i<n-1;i++)
            for(int j=1;j<n-1;j++)
            {
                int maxn = 0;
                for(int k=i-1;k<=i+1;k++)
                    for(int l=j-1;l<=j+1;l++)
                        maxn = max(maxn, grid[k][l]);
                res[i-1][j-1] = maxn;
            }
        return res;
