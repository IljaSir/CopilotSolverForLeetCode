Synthesizing 10/10 solutions

=======

        vector<int> cnt(46, 0);
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            for (int j = i; j; j /= 10) {
                sum += j % 10;
            }
            cnt[sum]++;
        }
        return *max_element(cnt.begin(), cnt.end());

=======

        int res = 0;
        map<int, int> m;
        for (int i = lowLimit; i <= highLimit; ++i) {
            int sum = 0;
            for (int j = i; j > 0; j /= 10) {
                sum += j % 10;
            }
            m[sum]++;
            res = max(res, m[sum]);
        }
        return res;

=======

        int count[46] = {0};
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int n = i;
            while (n > 0) {
                sum += n % 10;
                n /= 10;
            }
            count[sum]++;
        }
        int max = 0;
        for (int i = 0; i < 46; i++) {
            if (count[i] > max) max = count[i];
        }
        return max;

=======

        std::map<int, int> m;
        for (int i = lowLimit; i <= highLimit; ++i) {
            int t = i;
            int sum = 0;
            while (t) {
                sum += t % 10;
                t /= 10;
            }
            m[sum]++;
        }
        int max = 0;
        for (auto it = m.begin(); it != m.end(); ++it) {
            if (it->second > max) {
                max = it->second;
            }
        }
        return max;

=======

        int cnt[100] = {0};
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            for (int j = i; j > 0; j /= 10) {
                sum += j % 10;
            }
            cnt[sum - 1]++;
        }
        int ans = 0;
        for (int i : cnt) {
            ans = max(ans, i);
        }
        return ans;

=======

        int res = 0;
        vector<int> count(46, 0);
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0, num = i;
            while (num) {
                sum += num % 10;
                num /= 10;
            }
            count[sum]++;
            res = max(res, count[sum]);
        }
        return res;

=======

        int n = highLimit - lowLimit + 1;
        int res = 0;
        unordered_map<int, int> mp;
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0, num = i;
            while (num) {
                sum += num % 10;
                num /= 10;
            }
            mp[sum]++;
            res = max(res, mp[sum]);
        }
        return res;

=======

        int ans = 0;
        vector<int> count(46, 0);
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int x = i;
            while (x > 0) {
                sum += x % 10;
                x /= 10;
            }
            count[sum]++;
            ans = max(ans, count[sum]);
        }
        return ans;

=======

        int max = 0;
        int count[100000] = {0};
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            count[sum]++;
            if (count[sum] > max) {
                max = count[sum];
            }
        }
        return max;

=======

        int max = 0, maxCount = 0;
        for (int i = lowLimit; i <= highLimit; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            if (sum > max) {
                max = sum;
                maxCount = 1;
            } else if (sum == max) {
                maxCount++;
            }
        }
        return maxCount;
