Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] != matrix[i-1][j-1]) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m - 1; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                if (matrix[i][j] != matrix[i + 1][j + 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; ++i) {
            int x = i;
            int y = 0;
            int tmp = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != tmp) {
                    return false;
                }
                ++x;
                ++y;
            }
        }
        for (int i = 1; i < n; ++i) {
            int x = 0;
            int y = i;
            int tmp = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != tmp) {
                    return false;
                }
                ++x;
                ++y;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; ++i) {
            int x = i;
            int y = 0;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int j = 1; j < n; ++j) {
            int x = 0;
            int y = j;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            while (x < m && y < n) {
                if (matrix[x][y] != matrix[i][0]) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int j = 1; j < n; j++) {
            int x = 0;
            int y = j;
            while (x < m && y < n) {
                if (matrix[x][y] != matrix[0][j]) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            while (x < m && y < n) {
                if (matrix[i][0] != matrix[x][y]) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int j = 1; j < n; j++) {
            int x = 0;
            int y = j;
            while (x < m && y < n) {
                if (matrix[0][j] != matrix[x][y]) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; i++) {
            int x = i;
            int y = 0;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        for (int j = 1; j < n; j++) {
            int x = 0;
            int y = j;
            int val = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != val) {
                    return false;
                }
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        for (int i = 0; i < m; i++) {
            int x = i, y = 0;
            int v = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != v) return false;
                x++;
                y++;
            }
        }
        for (int i = 0; i < n; i++) {
            int x = 0, y = i;
            int v = matrix[x][y];
            while (x < m && y < n) {
                if (matrix[x][y] != v) return false;
                x++;
                y++;
            }
        }
        return true;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int i = 0;
        int j = 0;
        int val = matrix[0][0];
        while (i < m - 1 && j < n - 1) {
            if (val != matrix[i + 1][j + 1]) {
                return false;
            }
            if (j == n - 2) {
                i++;
                j = 0;
                val = matrix[i][j];
            } else {
                j++;
                val = matrix[i][j];
            }
        }
        return true;
