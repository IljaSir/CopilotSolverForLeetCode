Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int leftSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (leftSum == sum - leftSum - nums[i]) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int sum = accumulate(nums.begin(), nums.end(), 0);
        int leftSum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (leftSum == sum - leftSum - nums[i]) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i+1] = sum[i] + nums[i];
        }
        for (int i = 0; i < n; ++i) {
            if (sum[i] == sum[n] - sum[i+1]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        if (n == 1) return 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int left = 0;
        for (int i = 0; i < n; i++) {
            if (left == sum - left - nums[i]) {
                return i;
            }
            left += nums[i];
        }
        return -1;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for(int i = 0; i < n; i++){
            sum[i+1] = sum[i] + nums[i];
        }
        for(int i = 0; i < n; i++){
            if(sum[i] == sum[n] - sum[i+1]){
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        if (n == 1) return 0;
        if (n == 2) return -1;
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        for (int i = 1; i < n; ++i)
            left[i] = left[i-1] + nums[i-1];
        for (int i = n-2; i >= 0; --i)
            right[i] = right[i+1] + nums[i+1];
        for (int i = 0; i < n; ++i)
            if (left[i] == right[i])
                return i;
        return -1;

=======

        int n = nums.size();
        if (n == 0) return -1;
        if (n == 1) return 0;
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        right[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + nums[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            if (left[i] == right[i]) return i;
        }
        return -1;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int sumL = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum -= nums[i];
            if (sumL == sum) {
                return i;
            }
            sumL += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (auto x : nums) {
            sum += x;
        }
        int left = 0, right = sum;
        for (int i = 0; i < nums.size(); i++) {
            right -= nums[i];
            if (left == right) {
                return i;
            }
            left += nums[i];
        }
        return -1;

=======

        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; ++i) sum += nums[i];
        int left = 0;
        for(int i = 0; i < n; ++i){
            if(left == sum - left - nums[i]) return i;
            left += nums[i];
        }
        return -1;
