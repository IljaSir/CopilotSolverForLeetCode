Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<string> res;
        int n = nums.size();
        if (n == 0) return res;
        int start = nums[0];
        int end = nums[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] == end + 1) {
                end = nums[i];
            } else {
                if (start == end) {
                    res.push_back(to_string(start));
                } else {
                    res.push_back(to_string(start) + "->" + to_string(end));
                }
                start = nums[i];
                end = nums[i];
            }
        }
        if (start == end) {
            res.push_back(to_string(start));
        } else {
            res.push_back(to_string(start) + "->" + to_string(end));
        }
        return res;

=======

        int n = nums.size();
        vector<string> res;
        if (n == 0) return res;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && nums[j] == nums[j - 1] + 1) j++;
            if (j - i == 1) {
                res.push_back(to_string(nums[i]));
            } else {
                res.push_back(to_string(nums[i]) + "->" + to_string(nums[j - 1]));
            }
            i = j;
        }
        return res;

=======

        vector<string> res;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j + 1 < n && nums[j] + 1 == nums[j + 1]) j++;
            if (i == j) res.push_back(to_string(nums[i]));
            else {
                string s = to_string(nums[i]) + "->" + to_string(nums[j]);
                res.push_back(s);
            }
            i = j;
        }
        return res;

=======

        vector<string> result;
        int i = 0;
        while (i < nums.size()) {
            int j = i + 1;
            while (j < nums.size() && nums[j] - nums[j-1] == 1) {
                j++;
            }
            if (j - 1 > i) {
                result.push_back(to_string(nums[i]) + "->" + to_string(nums[j-1]));
            } else {
                result.push_back(to_string(nums[i]));
            }
            i = j;
        }
        return result;

=======

        vector<string> res;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n - 1 && nums[j + 1] == nums[j] + 1) j++;
            if (i == j) res.push_back(to_string(nums[i]));
            else res.push_back(to_string(nums[i]) + "->" + to_string(nums[j]));
            i = j;
        }
        return res;

=======

        vector<string> res;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j + 1 < n && nums[j] == nums[j + 1] - 1) j++;
            if (i == j) res.push_back(to_string(nums[i]));
            else res.push_back(to_string(nums[i]) + "->" + to_string(nums[j]));
            i = j;
        }
        return res;

=======

        vector<string> result;
        if (nums.empty()) {
            return result;
        }
        int n = nums.size();
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && nums[j] == nums[j - 1] + 1) {
                ++j;
            }
            if (j == i + 1) {
                result.push_back(to_string(nums[i]));
            } else {
                result.push_back(to_string(nums[i]) + "->" + to_string(nums[j - 1]));
            }
            i = j;
        }
        return result;

=======

        vector<string> res;
        if (nums.empty()) return res;
        int n = nums.size();
        int i = 0;
        int j = 1;
        while (j < n) {
            while (j < n && nums[j] == nums[j - 1] + 1) ++j;
            if (i == j - 1) res.push_back(to_string(nums[i]));
            else res.push_back(to_string(nums[i]) + "->" + to_string(nums[j - 1]));
            i = j++;
        }
        if (i == j - 1) res.push_back(to_string(nums[i]));
        else res.push_back(to_string(nums[i]) + "->" + to_string(nums[j - 1]));
        return res;

=======

        vector<string> res;
        int len = nums.size();
        int i = 0;
        while(i < len){
            int a = nums[i];
            while(i < len - 1 && nums[i] == nums[i + 1] - 1){
                i++;
            }
            int b = nums[i];
            if(a == b){
                res.push_back(to_string(a));
            }else{
                res.push_back(to_string(a) + "->" + to_string(b));
            }
            i++;
        }
        return res;
