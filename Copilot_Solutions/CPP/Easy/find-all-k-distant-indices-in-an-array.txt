Synthesizing 10/10 solutions

=======

        vector<int> ret;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                for (int j = max(0, i - k); j <= min(i + k, (int)nums.size() - 1); j++) {
                    ret.push_back(j);
                }
            }
        }
        sort(ret.begin(), ret.end());
        ret.erase(unique(ret.begin(), ret.end()), ret.end());
        return ret;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                res.push_back(i);
            }
        }
        int i = 0, j = 0;
        while (i < res.size()) {
            while (j < res.size() && res[j] - res[i] <= k) {
                j++;
            }
            if (j - i > k) {
                res.erase(res.begin() + i);
            } else {
                i++;
            }
        }
        return res;

=======

        vector<int> ans;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] != key) continue;
            for (int j = max(0, i - k); j <= min(n - 1, i + k); j++) {
                if (nums[j] == key) {
                    ans.push_back(j);
                    break;
                }
            }
        }
        return ans;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                ans.push_back(i);
            }
        }
        int l = 0, r = 0;
        vector<int> res;
        while (r < ans.size()) {
            if (ans[r] - ans[l] <= k) {
                res.push_back(ans[r]);
                r++;
            } else {
                l++;
            }
        }
        return res;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == key) {
                ans.push_back(i);
            }
        }
        vector<int> result;
        int j = 0;
        for (int i = 0; i < nums.size(); ++i) {
            while (j < ans.size() && ans[j] <= i + k) ++j;
            if (j < ans.size() && ans[j] == i + k + 1) {
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == key) {
                ans.push_back(i);
                for (int j = i - 1; j >= 0; --j) {
                    if (nums[j] == key) break;
                    if (i - j <= k) ans.push_back(j);
                    else break;
                }
                for (int j = i + 1; j < nums.size(); ++j) {
                    if (nums[j] == key) break;
                    if (j - i <= k) ans.push_back(j);
                    else break;
                }
            }
        }
        return ans;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                result.push_back(i);
            }
        }
        int start = 0;
        int end = 0;
        vector<int> finalResult;
        while (end < result.size()) {
            if (result[end] - result[start] <= k) {
                finalResult.push_back(result[end]);
                end++;
            } else {
                start++;
            }
        }
        return finalResult;

=======

        vector<int> ans;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == key) {
                ans.push_back(i);
            }
        }
        int i = 0;
        for(; i < ans.size(); i++) {
            if(ans[i] - k > 0) {
                break;
            }
        }
        ans.erase(ans.begin(), ans.begin() + i);
        i = ans.size() - 1;
        for(; i >= 0; i--) {
            if(ans[i] + k < nums.size()) {
                break;
            }
        }
        ans.erase(ans.begin() + i + 1, ans.end());
        return ans;

=======

        vector<int> res;
        int n = nums.size();
        int i = 0;
        for (int j = 0; j < n; ++j) {
            if (nums[j] == key) {
                while (i < j && j - i > k) ++i;
                if (j - i <= k) res.push_back(i);
                ++i;
            }
        }
        return res;

=======

        vector<int> res;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] == key) {
                res.push_back(i);
            }
        }
        if(res.size() <= 1) return res;
        int i = 0;
        int j = 1;
        while(j < res.size()) {
            if(res[j] - res[i] <= k) {
                j++;
            } else {
                res[i] = res[j];
                i++;
                j++;
            }
        }
        res.resize(i);
        return res;
