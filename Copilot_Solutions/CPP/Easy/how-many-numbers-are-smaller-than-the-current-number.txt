Synthesizing 9/10 solutions (Duplicates hidden)

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[j] < nums[i]) {
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[j] < nums[i]) {
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[i] > nums[j]) count++;
            }
            result.push_back(count);
        }
        
        return result;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[i] > nums[j]) {
                    count++;
                }
            }
            res.push_back(count);
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (i != j && nums[i] > nums[j]) {
                    count++;
                }
            }
            res.push_back(count);
        }
        return res;

=======

        vector<int> result;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (j != i && nums[j] < nums[i]) {
                    count++;
                }
            }
            result.push_back(count);
            count = 0;
        }
        return result;

=======

        vector<int> sorted = nums;
        sort(sorted.begin(), sorted.end());
        unordered_map<int, int> m;
        for (int i = 0; i < sorted.size(); ++i) {
            if (m.find(sorted[i]) == m.end()) {
                m[sorted[i]] = i;
            }
        }
        vector<int> res;
        for (int i = 0; i < nums.size(); ++i) {
            res.push_back(m[nums[i]]);
        }
        return res;

=======

        int len = nums.size();
        vector<int> ans(len, 0);
        for(int i=0; i<len; i++) {
            for(int j=0; j<len; j++) {
                if(nums[j] < nums[i]) {
                    ans[i]++;
                }
            }
        }
        return ans;
