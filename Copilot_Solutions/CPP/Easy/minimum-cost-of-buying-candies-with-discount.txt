Synthesizing 10/10 solutions

=======

        int n = cost.size();
        vector<int> dp(n);
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);

=======

        int n = cost.size();
        if (n == 0) return 0;
        if (n == 1) return cost[0];
        if (n == 2) return cost[0] + cost[1];
        int a = cost[0], b = cost[1], c = cost[2], d = 0;
        for (int i = 3; i < n; i++) {
            d = min(a, min(b, c)) + cost[i];
            a = b;
            b = c;
            c = d;
        }
        return min(a, min(b, c));

=======

        int n = cost.size();
        sort(cost.begin(), cost.end());
        int ans = 0;
        for (int i = 0; i < n; i += 3) {
            ans += cost[i];
        }
        return ans;

=======

        int n = cost.size();
        int dp[n];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for(int i = 2; i < n; i++) {
            dp[i] = min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        return min(dp[n - 1], dp[n - 2]);

=======

        int n = cost.size();
        if (n == 1) return cost[0];
        if (n == 2) return cost[0] + cost[1];
        vector<int> dp(n, 0);
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < n; i++) {
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);

=======

        int n = cost.size();
        if (n == 1) return cost[0];
        if (n == 2) return cost[0] + cost[1];
        int dp[n];
        dp[0] = cost[0];
        dp[1] = cost[1];
        dp[2] = cost[2];
        for (int i = 3; i < n; i++) {
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return dp[n-1];

=======

        int n = cost.size();
        if (n == 1) return cost[0];
        if (n == 2) return cost[0] + cost[1];
        int dp[n];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < n; ++i) {
            dp[i] = cost[i] + min(dp[i-1], dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);

=======

        sort(cost.begin(), cost.end());
        int sum = 0;
        for(int i = 0; i < cost.size(); i += 3) {
            sum += cost[i] + cost[i+1];
        }
        return sum;

=======

        int n = cost.size();
        int dp[n+1];
        dp[0] = 0;
        dp[1] = cost[0];
        for(int i = 2; i <= n; i++){
            dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-1]);
        }
        return dp[n];

=======

        int n = cost.size();
        if (n == 1) return cost[0];
        if (n == 2) return cost[0] + cost[1];
        int minCost = cost[0] + cost[1];
        int discount = 0;
        for (int i = 2; i < n; ++i) {
            if (cost[i] < minCost) {
                if (cost[i] + discount <= minCost) {
                    discount += cost[i];
                } else {
                    minCost = cost[i] + discount;
                    discount = 0;
                }
            } else {
                minCost += cost[i];
            }
        }
        return minCost;
