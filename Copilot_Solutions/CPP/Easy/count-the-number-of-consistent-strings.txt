Synthesizing 10/10 solutions

=======

        int count = 0;
        for (string word : words) {
            bool consistent = true;
            for (char c : word) {
                if (allowed.find(c) == string::npos) {
                    consistent = false;
                    break;
                }
            }
            if (consistent) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (string word: words) {
            bool consistent = true;
            for (char c: word) {
                if (allowed.find(c) == string::npos) {
                    consistent = false;
                    break;
                }
            }
            if (consistent) count++;
        }
        return count;

=======

        int count = 0;
        for (auto word : words) {
            bool isConsistent = true;
            for (auto c : word) {
                if (allowed.find(c) == string::npos) {
                    isConsistent = false;
                    break;
                }
            }
            if (isConsistent) {
                count++;
            }
        }
        return count;

=======

        int result = words.size();
        for (auto word : words) {
            for (auto c : word) {
                if (allowed.find(c) == string::npos) {
                    result--;
                    break;
                }
            }
        }
        return result;

=======

        int count = 0;
        for (string& word: words) {
            bool flag = true;
            for (char c: word) {
                if (allowed.find(c) == string::npos) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (auto word : words) {
            int i = 0;
            for (; i < word.size(); ++i) {
                if (allowed.find(word[i]) == string::npos) {
                    break;
                }
            }
            if (i == word.size()) {
                ++count;
            }
        }
        return count;

=======

        int count = 0;
        for (auto word : words) {
            bool consistent = true;
            for (int i = 0; i < word.length(); i++) {
                if (allowed.find(word[i]) == std::string::npos) {
                    consistent = false;
                    break;
                }
            }
            if (consistent) count++;
        }
        return count;

=======

        int cnt = 0;
        for (auto &word : words) {
            bool flag = true;
            for (char ch : word) {
                if (allowed.find(ch) == string::npos) {
                    flag = false;
                    break;
                }
            }
            if (flag) cnt++;
        }
        return cnt;

=======

        unordered_set<char> allowedSet(allowed.begin(), allowed.end());
        int count = 0;
        for (const auto& word: words) {
            bool consistent = true;
            for (const auto& c: word) {
                if (allowedSet.find(c) == allowedSet.end()) {
                    consistent = false;
                    break;
                }
            }
            if (consistent) {
                ++count;
            }
        }
        return count;

=======

        int res = 0;
        for (auto s : words) {
            int i = 0;
            for (; i < s.length(); ++i) {
                if (allowed.find(s[i]) == string::npos) {
                    break;
                }
            }
            if (i == s.length()) {
                ++res;
            }
        }
        return res;
