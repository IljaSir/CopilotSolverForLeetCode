Synthesizing 9/10 solutions

=======

        vector<int> r(10, 0);
        vector<int> g(10, 0);
        vector<int> b(10, 0);
        for (int i = 0; i < rings.size(); i += 2) {
            if (rings[i] == 'R') {
                r[rings[i + 1] - '0']++;
            } else if (rings[i] == 'G') {
                g[rings[i + 1] - '0']++;
            } else {
                b[rings[i + 1] - '0']++;
            }
        }
        int ans = 0;
        for (int i = 0; i < 10; i++) {
            if (r[i] > 0 && g[i] > 0 && b[i] > 0) {
                ans++;
            }
        }
        return ans;

=======

        int n = rings.size();
        vector<int> r(10, 0), g(10, 0), b(10, 0);
        for (int i = 0; i < n; i += 2) {
            switch (rings[i]) {
            case 'R':
                r[rings[i + 1] - '0']++;
                break;
            case 'G':
                g[rings[i + 1] - '0']++;
                break;
            case 'B':
                b[rings[i + 1] - '0']++;
                break;
            }
        }
        int ans = 0;
        for (int i = 0; i < 10; ++i) {
            if (r[i] && g[i] && b[i]) {
                ans++;
            }
        }
        return ans;

=======

        int n = rings.length();
        int ans = 0;
        for (int i = 0; i < 10; i++) {
            int r = 0, g = 0, b = 0;
            for (int j = 0; j < n; j += 2) {
                if (rings[j + 1] - '0' == i) {
                    if (rings[j] == 'R') r = 1;
                    else if (rings[j] == 'G') g = 1;
                    else b = 1;
                }
            }
            ans += r + g + b == 3;
        }
        return ans;

=======

        int ans = 0;
        vector<int> r(10), g(10), b(10);
        for (int i = 0; i < rings.length(); i += 2) {
            if (rings[i] == 'R') {
                r[rings[i + 1] - '0']++;
            } else if (rings[i] == 'G') {
                g[rings[i + 1] - '0']++;
            } else {
                b[rings[i + 1] - '0']++;
            }
        }
        for (int i = 0; i < 10; i++) {
            if (r[i] > 0 && g[i] > 0 && b[i] > 0) {
                ans++;
            }
        }
        return ans;

=======

        unordered_map<char, set<int>> map;
        for (int i = 0; i < rings.size(); i += 2) {
            map[rings[i]].insert(rings[i + 1] - '0');
        }
        int res = 0;
        for (auto it = map.begin(); it != map.end(); ++it) {
            if (it->second.size() == 10) {
                ++res;
            }
        }
        return res;

=======

        int n = rings.size() / 2;
        vector<vector<int>> colors(10);
        for (int i = 0; i < n; ++i) {
            colors[rings[i * 2 + 1] - '0'].push_back(rings[i * 2] - 'A');
        }
        int res = 0;
        for (auto& color : colors) {
            if (color.size() >= 3) {
                sort(color.begin(), color.end());
                for (int i = 0; i < color.size() - 2; ++i) {
                    if (color[i + 2] - color[i] <= 2) {
                        ++res;
                        break;
                    }
                }
            }
        }
        return res;

=======

        int n = rings.size()/2;
        int ans = 0;
        for(int i=0;i<=9;i++){
            int r=0,g=0,b=0;
            for(int j=0;j<n;j++){
                if(rings[2*j+1]-'0' == i){
                    if(rings[2*j] == 'R') r++;
                    if(rings[2*j] == 'G') g++;
                    if(rings[2*j] == 'B') b++;
                }
            }
            if(r>0 && g>0 && b>0) ans++;
        }
        return ans;

=======

        int n = rings.size();
        if (n == 2) return 0;
        int res = 0;
        for (int i = 0; i < 10; i++) {
            int r = 0, g = 0, b = 0;
            for (int j = 0; j < n; j += 2) {
                if (rings[j + 1] - '0' == i) {
                    if (rings[j] == 'R') r++;
                    else if (rings[j] == 'G') g++;
                    else b++;
                }
            }
            if (r > 0 && g > 0 && b > 0) res++;
        }
        return res;

=======

        int n = rings.size();
        int m = n/2;
        int ans = 0;
        for(int i = 0; i < 10; ++i){
            int r = 0;
            int g = 0;
            int b = 0;
            for(int j = 0; j < m; ++j){
                if(rings[2*j+1] - '0' == i){
                    if(rings[2*j] == 'R'){
                        r = 1;
                    }
                    else if(rings[2*j] == 'G'){
                        g = 1;
                    }
                    else{
                        b = 1;
                    }
                }
            }
            ans += r + g + b == 3;
        }
        return ans;
