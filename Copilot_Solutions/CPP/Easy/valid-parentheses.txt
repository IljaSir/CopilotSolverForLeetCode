Synthesizing 10/10 solutions (Duplicates hidden)

=======

        stack<char> stk;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
                stk.push(s[i]);
            } else {
                if (stk.empty()) {
                    return false;
                }
                if (s[i] == ')') {
                    if (stk.top() != '(') {
                        return false;
                    }
                } else if (s[i] == ']') {
                    if (stk.top() != '[') {
                        return false;
                    }
                } else if (s[i] == '}') {
                    if (stk.top() != '{') {
                        return false;
                    }
                }
                stk.pop();
            }
        }
        return stk.empty();

=======

        stack<char> stk;
        for (char c : s) {
            if (c == '(' || c == '[' || c == '{') {
                stk.push(c);
            } else {
                if (stk.empty()) return false;
                char top = stk.top();
                stk.pop();
                if (c == ')' && top != '(') return false;
                if (c == ']' && top != '[') return false;
                if (c == '}' && top != '{') return false;
            }
        }
        return stk.empty();

=======

        stack<char> st;
        for (auto c : s) {
            if (c == '(' || c == '[' || c == '{') {
                st.push(c);
            } else {
                if (st.empty()) {
                    return false;
                }
                if (c == ')' && st.top() != '(') {
                    return false;
                }
                if (c == ']' && st.top() != '[') {
                    return false;
                }
                if (c == '}' && st.top() != '{') {
                    return false;
                }
                st.pop();
            }
        }
        return st.empty();

=======

        stack<char> st;
        for (int i = 0; i < s.length(); i++) {
            char c = s[i];
            if (c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else {
                if (st.empty()) {
                    return false;
                }
                char top = st.top();
                if (c == ')' && top == '(') {
                    st.pop();
                } else if (c == ']' && top == '[') {
                    st.pop();
                } else if (c == '}' && top == '{') {
                    st.pop();
                } else {
                    return false;
                }
            }
        }
        return st.empty();

=======

        stack<char> st;
        for (char c : s) {
            if (c == '(' || c == '[' || c == '{') {
                st.push(c);
            } else if (c == ')' || c == ']' || c == '}') {
                if (st.empty()) return false;
                char t = st.top();
                st.pop();
                if (c == ')' && t != '(') return false;
                if (c == ']' && t != '[') return false;
                if (c == '}' && t != '{') return false;
            }
        }
        return st.empty();

=======

        stack<char> st;
        for (auto c: s) {
            if (c == '(' || c == '{' || c == '[') {
                st.push(c);
            } else if (c == ')') {
                if (st.empty() || st.top() != '(') return false;
                st.pop();
            } else if (c == '}') {
                if (st.empty() || st.top() != '{') return false;
                st.pop();
            } else if (c == ']') {
                if (st.empty() || st.top() != '[') return false;
                st.pop();
            }
        }
        return st.empty();

=======

        stack<char> stack;
        for (char c : s) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if (c == ')' && !stack.empty() && stack.top() == '(') {
                stack.pop();
            } else if (c == '}' && !stack.empty() && stack.top() == '{') {
                stack.pop();
            } else if (c == ']' && !stack.empty() && stack.top() == '[') {
                stack.pop();
            } else {
                return false;
            }
        }
        return stack.empty();

=======

        stack<char> st;
        for (auto c: s) {
            if (c == '(' || c == '[' || c == '{') {
                st.push(c);
            } else if (c == ')' && !st.empty() && st.top() == '(') {
                st.pop();
            } else if (c == ']' && !st.empty() && st.top() == '[') {
                st.pop();
            } else if (c == '}' && !st.empty() && st.top() == '{') {
                st.pop();
            } else {
                return false;
            }
        }
        return st.empty();

=======

        int len = s.length();
        if (len == 1) return false;
        stack<char> stk;
        for (int i = 0; i < len; i++) {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
                stk.push(s[i]);
            } else {
                if (stk.empty()) return false;
                char c = stk.top();
                if (s[i] == ')' && c != '(') return false;
                if (s[i] == ']' && c != '[') return false;
                if (s[i] == '}' && c != '{') return false;
                stk.pop();
            }
        }
        return stk.empty();
