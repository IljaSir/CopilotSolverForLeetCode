Synthesizing 10/10 solutions

=======

        set<int> s(nums.begin(), nums.end());
        if (s.size() < 3) return *s.rbegin();
        s.erase(*s.rbegin());
        s.erase(*s.rbegin());
        return *s.rbegin();

=======

        set<int> s;
        for (int i = 0; i < nums.size(); i++) {
            s.insert(nums[i]);
        }
        if (s.size() < 3) {
            return *s.rbegin();
        } else {
            auto it = s.rbegin();
            it++;
            it++;
            return *it;
        }

=======

        int n = nums.size();
        set<int> s;
        for (int i = 0; i < n; ++i) {
            s.insert(nums[i]);
            if (s.size() > 3) {
                s.erase(s.begin());
            }
        }
        if (s.size() == 3) {
            return *s.begin();
        } else {
            return *s.rbegin();
        }

=======

        long long first = LLONG_MIN, second = LLONG_MIN, third = LLONG_MIN;
        for (int n : nums) {
            if (n > first) {
                third = second;
                second = first;
                first = n;
            } else if (n < first && n > second) {
                third = second;
                second = n;
            } else if (n < second && n > third) {
                third = n;
            }
        }
        return third == LLONG_MIN ? first : third;

=======

        int n = nums.size();
        long long first = LLONG_MIN, second = LLONG_MIN, third = LLONG_MIN;
        for (int i = 0; i < n; i++) {
            if (nums[i] == first || nums[i] == second || nums[i] == third) continue;
            if (nums[i] > first) {
                third = second;
                second = first;
                first = nums[i];
            } else if (nums[i] > second) {
                third = second;
                second = nums[i];
            } else if (nums[i] > third) {
                third = nums[i];
            }
        }
        return third == LLONG_MIN ? first : third;

=======

        sort(nums.begin(), nums.end());
        int count = 0;
        int max = nums[nums.size() - 1];
        for (int i = nums.size() - 2; i >= 0; i--) {
            if (nums[i] != nums[i + 1]) {
                count++;
            }
            if (count == 2) {
                return nums[i];
            }
        }
        return max;

=======

        long long int first = LLONG_MIN, second = LLONG_MIN, third = LLONG_MIN;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == first || nums[i] == second || nums[i] == third) {
                continue;
            }
            if (nums[i] > first) {
                third = second;
                second = first;
                first = nums[i];
            } else if (nums[i] > second) {
                third = second;
                second = nums[i];
            } else if (nums[i] > third) {
                third = nums[i];
            }
        }
        return third == LLONG_MIN ? first : third;

=======

        set<int> s(nums.begin(), nums.end());
        if (s.size() < 3) return *s.rbegin();
        auto it = s.rbegin();
        next(it);
        next(it);
        return *it;

=======

        int n = nums.size();
        int max1 = INT_MIN;
        int max2 = INT_MIN;
        int max3 = INT_MIN;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == max1 || nums[i] == max2 || nums[i] == max3) {
                continue;
            }
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
                cnt++;
            } else if (nums[i] > max2) {
                max3 = max2;
                max2 = nums[i];
                cnt++;
            } else if (nums[i] > max3) {
                max3 = nums[i];
                cnt++;
            }
        }
        if (cnt < 3) {
            return max1;
        }
        return max3;

=======

        long long int first = LLONG_MIN, second = LLONG_MIN, third = LLONG_MIN;
        for(auto x : nums) {
            if(x > first) {
                third = second;
                second = first;
                first = x;
            }
            else if(x > second && x < first) {
                third = second;
                second = x;
            }
            else if(x > third && x < second)
                third = x;
        }
        return third == LLONG_MIN ? first : third;
