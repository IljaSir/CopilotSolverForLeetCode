Synthesizing 10/10 solutions

=======

        unordered_set<string> seen;
        for (auto email : emails) {
            int i = email.find('@');
            string local = email.substr(0, i);
            string rest = email.substr(i);
            if (local.find('+') != string::npos)
                local = local.substr(0, local.find('+'));
            local.erase(remove(local.begin(), local.end(), '.'), local.end());
            seen.insert(local + rest);
        }
        return seen.size();

=======

        unordered_set<string> s;
        for (auto& e : emails) {
            string local, domain;
            int i = 0;
            while (e[i] != '@') {
                if (e[i] == '+') {
                    while (e[i] != '@') ++i;
                    break;
                }
                if (e[i] != '.') {
                    local += e[i];
                }
                ++i;
            }
            domain = e.substr(i);
            s.insert(local + domain);
        }
        return s.size();

=======

        unordered_set<string> s;
        for (string& email : emails) {
            string local = email.substr(0, email.find("@"));
            string domain = email.substr(email.find("@"));
            local = local.substr(0, local.find("+"));
            local.erase(remove(local.begin(), local.end(), '.'), local.end());
            s.insert(local + domain);
        }
        return s.size();

=======

        set<string> uniqueEmails;
        for (string email : emails) {
            string local = email.substr(0, email.find('@'));
            string domain = email.substr(email.find('@'));
            local.erase(remove(local.begin(), local.end(), '.'), local.end());
            local = local.substr(0, local.find('+'));
            uniqueEmails.insert(local + domain);
        }
        return uniqueEmails.size();

=======

        unordered_set<string> s;
        for (auto email : emails) {
            string str;
            int i = 0;
            while (email[i] != '@') {
                if (email[i] == '.') {
                    i++;
                }
                else if (email[i] == '+') {
                    while (email[i] != '@') i++;
                }
                else {
                    str.push_back(email[i++]);
                }
            }
            while (i < email.size()) {
                str.push_back(email[i++]);
            }
            s.insert(str);
        }
        return s.size();

=======

        set<string> uniqueEmails;
        for (auto email : emails) {
            string localName;
            string domainName;
            int atIndex = email.find('@');
            localName = email.substr(0, atIndex);
            domainName = email.substr(atIndex);
            int plusIndex = localName.find('+');
            if (plusIndex != string::npos) {
                localName = localName.substr(0, plusIndex);
            }
            localName.erase(remove(localName.begin(), localName.end(), '.'), localName.end());
            uniqueEmails.insert(localName + domainName);
        }
        return uniqueEmails.size();

=======

        unordered_set<string> s;
        for (string& email: emails) {
            string local, domain;
            bool plus = false;
            for (char c: email) {
                if (c == '@') {
                    domain = email.substr(email.find('@'));
                    break;
                }
                if (c == '+') {
                    plus = true;
                }
                if (c == '.' || plus) {
                    continue;
                }
                local += c;
            }
            s.insert(local + domain);
        }
        return s.size();

=======

        set<string> s;
        for(string& email: emails) {
            string local, domain;
            int at = email.find("@");
            local = email.substr(0, at);
            domain = email.substr(at);
            int plus = local.find("+");
            if (plus != string::npos)
                local = local.substr(0, plus);
            string tmp;
            for (char c: local)
                if (c != '.')
                    tmp.push_back(c);
            s.insert(tmp + domain);
        }
        return s.size();

=======

        unordered_set<string> uniqueEmails;
        for (auto& email : emails) {
            string localName;
            string domainName;
            bool localNameIsDone = false;
            for (auto& c : email) {
                if (c == '@') {
                    localNameIsDone = true;
                    continue;
                }
                if (localNameIsDone) {
                    domainName += c;
                } else if (c == '.') {
                    continue;
                } else if (c == '+') {
                    break;
                } else {
                    localName += c;
                }
            }
            uniqueEmails.insert(localName + "@" + domainName);
        }
        return uniqueEmails.size();

=======

        unordered_set<string> us;
        for(auto& email: emails) {
            string local, domain;
            int i = 0;
            for(; email[i] != '@'; i++) {
                if(email[i] == '.') continue;
                if(email[i] == '+') break;
                local.push_back(email[i]);
            }
            for(; email[i] != '@'; i++) ;
            for(; i < email.size(); i++) {
                domain.push_back(email[i]);
            }
            us.insert(local + domain);
        }
        return us.size();
