Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[i] == nums[j] && i * j % k == 0) {
                    ++ans;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j] && (i * j) % k == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((nums[i] == nums[j]) && (i * j) % k == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[i] == nums[j] && i * j % k == 0) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j] && (i * j) % k == 0) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j] && (i * j) % k == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j] && (i * j) % k == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int ans = 0;
        int n = nums.size();
        for(int i = 0; i < n; ++i) {
            for(int j = i+1; j < n; ++j) {
                if(nums[i] == nums[j] && i*j%k == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            if (k == 1) {
                res += mp[nums[i]];
            } else {
                for (int j = 1; j <= 100; ++j) {
                    if (nums[i] * j % k == 0) {
                        res += mp[nums[i] * j / k];
                    }
                }
            }
            ++mp[nums[i]];
        }
        return res;

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        int count = 0;
        for (i = 0; i < n; i++) {
            for (j = i + 1; j < n; j++) {
                if ((nums[i] == nums[j]) && ((i * j) % k == 0)) {
                    count++;
                }
            }
        }
        return count;
