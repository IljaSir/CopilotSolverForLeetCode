Synthesizing 10/10 solutions

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        return max(nums[0] * nums[1] * nums[n - 1], nums[n - 1] * nums[n - 2] * nums[n - 3]);

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        return max(nums[n - 1] * nums[n - 2] * nums[n - 3], nums[0] * nums[1] * nums[n - 1]);

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        return max(nums[0] * nums[1] * nums[n - 1], nums[n - 3] * nums[n - 2] * nums[n - 1]);

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        return max(nums[0]*nums[1]*nums[n-1], nums[n-3]*nums[n-2]*nums[n-1]);

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int a = nums[0] * nums[1] * nums[n-1];
        int b = nums[n-1] * nums[n-2] * nums[n-3];
        return max(a, b);

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = nums[n-1] * nums[n-2] * nums[n-3];
        ans = max(ans, nums[0] * nums[1] * nums[n-1]);
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = max(nums[0] * nums[1] * nums[n - 1], nums[n - 1] * nums[n - 2] * nums[n - 3]);
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int max1 = nums[n-1]*nums[n-2]*nums[n-3];
        int max2 = nums[n-1]*nums[0]*nums[1];
        return max1>max2?max1:max2;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int pos = max(nums[n-1]*nums[n-2]*nums[n-3], nums[0]*nums[1]*nums[n-1]);
        return pos;

=======

        int n = nums.size();
        int res = 0;
        sort(nums.begin(), nums.end());
        int a = nums[0] * nums[1] * nums[n-1];
        int b = nums[n-1] * nums[n-2] * nums[n-3];
        return max(a, b);
