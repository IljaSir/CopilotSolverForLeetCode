Synthesizing 10/10 solutions

=======

        for (int i = 0; i < nums.size(); i++) {
            nums[i] = nums[i] * nums[i];
        }
        sort(nums.begin(), nums.end());
        return nums;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            nums[i] *= nums[i];
        }
        sort(nums.begin(), nums.end());
        return nums;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            result.push_back(nums[i] * nums[i]);
        }
        sort(result.begin(), result.end());
        return result;

=======

        for(int i=0;i<nums.size();i++){
            nums[i]*=nums[i];
        }
        sort(nums.begin(),nums.end());
        return nums;

=======

        int n = nums.size();
        vector<int> ans(n);
        int i = 0, j = n - 1, k = n - 1;
        while (i <= j) {
            if (nums[i] * nums[i] > nums[j] * nums[j]) {
                ans[k] = nums[i] * nums[i];
                i++;
            } else {
                ans[k] = nums[j] * nums[j];
                j--;
            }
            k--;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> res(n);
        int i = 0, j = n - 1, k = n - 1;
        while (i <= j) {
            if (abs(nums[i]) > abs(nums[j])) {
                res[k--] = nums[i] * nums[i];
                i++;
            } else {
                res[k--] = nums[j] * nums[j];
                j--;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n, 0);
        int i = 0, j = n - 1;
        for (int k = n - 1; k >= 0; k--) {
            if (abs(nums[i]) > abs(nums[j])) {
                res[k] = nums[i] * nums[i];
                i++;
            } else {
                res[k] = nums[j] * nums[j];
                j--;
            }
        }
        return res;

=======

        int n = nums.size();
        int i = 0;
        while (i < n && nums[i] < 0) ++i;
        int j = i - 1;
        vector<int> res;
        while (i < n && j >= 0) {
            if (nums[i] * nums[i] < nums[j] * nums[j]) {
                res.push_back(nums[i] * nums[i]);
                ++i;
            } else {
                res.push_back(nums[j] * nums[j]);
                --j;
            }
        }
        while (i < n) {
            res.push_back(nums[i] * nums[i]);
            ++i;
        }
        while (j >= 0) {
            res.push_back(nums[j] * nums[j]);
            --j;
        }
        return res;

=======

        vector<int> ans;
        int n = nums.size();
        if (n == 0) return ans;
        int left = 0, right = n - 1;
        while (left <= right) {
            if (abs(nums[left]) > abs(nums[right])) {
                ans.push_back(nums[left] * nums[left]);
                left++;
            } else {
                ans.push_back(nums[right] * nums[right]);
                right--;
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        vector<int> ret;
        for(auto& n: nums)
            ret.push_back(n*n);
        sort(ret.begin(), ret.end());
        return ret;
