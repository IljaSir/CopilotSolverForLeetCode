Synthesizing 10/10 solutions

=======

        map<int, int> m;
        for (int i = 0; i < arr1.size(); i++) {
            m[arr1[i]]++;
        }
        vector<int> res;
        for (int i = 0; i < arr2.size(); i++) {
            while (m[arr2[i]] > 0) {
                res.push_back(arr2[i]);
                m[arr2[i]]--;
            }
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            while (it->second > 0) {
                res.push_back(it->first);
                it->second--;
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr1.size(); ++i) {
            m[arr1[i]]++;
        }
        vector<int> result;
        for (int i = 0; i < arr2.size(); ++i) {
            while (m[arr2[i]] > 0) {
                result.push_back(arr2[i]);
                m[arr2[i]]--;
            }
        }
        for (auto it = m.begin(); it != m.end(); ++it) {
            while (it->second > 0) {
                result.push_back(it->first);
                it->second--;
            }
        }
        return result;

=======

        map<int, int> m;
        for (auto a : arr1) m[a]++;
        vector<int> res;
        for (auto a : arr2) {
            for (int i = 0; i < m[a]; i++) res.push_back(a);
            m.erase(a);
        }
        for (auto a : m) {
            for (int i = 0; i < a.second; i++) res.push_back(a.first);
        }
        return res;

=======

        vector<int> res;
        sort(arr1.begin(), arr1.end());
        int j = 0;
        for (int i = 0; i < arr2.size(); i++) {
            while (j < arr1.size() && arr1[j] < arr2[i]) {
                res.push_back(arr1[j++]);
            }
            while (j < arr1.size() && arr1[j] == arr2[i]) {
                res.push_back(arr1[j++]);
            }
        }
        while (j < arr1.size()) {
            res.push_back(arr1[j++]);
        }
        return res;

=======

        vector<int> res;
        map<int, int> mp;
        for (int i = 0; i < arr1.size(); i++) {
            if (mp.find(arr1[i]) == mp.end()) {
                mp[arr1[i]] = 1;
            } else {
                mp[arr1[i]]++;
            }
        }
        for (int i = 0; i < arr2.size(); i++) {
            int num = mp[arr2[i]];
            for (int j = 0; j < num; j++) {
                res.push_back(arr2[i]);
            }
            mp.erase(arr2[i]);
        }
        for (auto it = mp.begin(); it != mp.end(); it++) {
            int num = it->second;
            for (int j = 0; j < num; j++) {
                res.push_back(it->first);
            }
        }
        return res;

=======

        vector<int> result;
        vector<int> notInArr2;
        for (int i = 0; i < arr2.size(); i++) {
            for (int j = 0; j < arr1.size(); j++) {
                if (arr2[i] == arr1[j]) {
                    result.push_back(arr2[i]);
                }
            }
        }
        for (int i = 0; i < arr1.size(); i++) {
            bool isInArr2 = false;
            for (int j = 0; j < arr2.size(); j++) {
                if (arr1[i] == arr2[j]) {
                    isInArr2 = true;
                    break;
                }
            }
            if (!isInArr2) {
                notInArr2.push_back(arr1[i]);
            }
        }
        sort(notInArr2.begin(), notInArr2.end());
        for (int i = 0; i < notInArr2.size(); i++) {
            result.push_back(notInArr2[i]);
        }
        return result;

=======

        vector<int> ans;
        map<int, int> map1;
        for (int i = 0; i < arr1.size(); i++) {
            map1[arr1[i]]++;
        }
        for (int i = 0; i < arr2.size(); i++) {
            for (int j = 0; j < map1[arr2[i]]; j++) {
                ans.push_back(arr2[i]);
            }
            map1.erase(arr2[i]);
        }
        for (auto it = map1.begin(); it != map1.end(); it++) {
            for (int j = 0; j < it->second; j++) {
                ans.push_back(it->first);
            }
        }
        return ans;

=======

        vector<int> result;
        vector<int> arr1Count(1001, 0);
        for (int i = 0; i < arr1.size(); ++i) {
            arr1Count[arr1[i]]++;
        }
        for (int i = 0; i < arr2.size(); ++i) {
            while (arr1Count[arr2[i]] > 0) {
                result.push_back(arr2[i]);
                arr1Count[arr2[i]]--;
            }
        }
        for (int i = 0; i < arr1Count.size(); ++i) {
            while (arr1Count[i] > 0) {
                result.push_back(i);
                arr1Count[i]--;
            }
        }
        return result;

=======

        int arr2_size = arr2.size();
        int arr1_size = arr1.size();
        vector<int> res;
        for(int i = 0; i < arr2_size; ++i){
            for(int j = 0; j < arr1_size; ++j){
                if(arr1[j] == arr2[i]){
                    res.push_back(arr1[j]);
                    arr1[j] = -1;
                }
            }
        }
        sort(arr1.begin(), arr1.end());
        for(int i = 0; i < arr1_size; ++i){
            if(arr1[i] != -1){
                res.push_back(arr1[i]);
            }
        }
        return res;

=======

        auto it = arr1.begin();
        for (auto i : arr2) {
            it = partition(it, arr1.end(), [i](int a){return a == i;});
        }
        sort(it, arr1.end());
        return arr1;
