Synthesizing 10/10 solutions

=======

        string s1;
        string s2;
        for (int i = 0; i < nums1.size(); i++) {
            s1 += to_string(nums1[i]);
        }
        for (int i = 0; i < nums2.size(); i++) {
            s2 += to_string(nums2[i]);
        }
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        int i = 0;
        int j = 0;
        string res;
        while (i < s1.size() && j < s2.size()) {
            if (s1[i] < s2[j]) {
                res += s1[i];
                i++;
            } else if (s1[i] > s2[j]) {
                res += s2[j];
                j++;
            } else {
                int ii = i;
                int jj = j;
                while (ii < s1.size() && jj < s2.size() && s1[ii] == s2[jj]) {
                    ii++;
                    jj++;
                }
                if (ii < s1.size() && jj < s2.size()) {
                    if (s1[ii] < s2[jj]) {
                        res += s1[i];
                        i++;
                    } else {
                        res += s2[j];
                        j++;
                    }
                } else if (ii < s1.size()) {
                    res += s1[i];
                    i++;
                } else {
                    res += s2[j];
                    j++;
                }
            }
        }
        while (i < s1.size()) {
            res += s1[i];
            i++;
        }
        while (j < s2.size()) {
            res += s2[j];
            j++;
        }
        return stoi(res);

=======

        int a = 0, b = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            a = a * 10 + nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            b = b * 10 + nums2[i];
        }
        return min(a, b);

=======

        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            ans = ans * 10 + nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            ans = ans * 10 + nums2[i];
        }
        return ans;

=======

        int minNum = 0;
        for (int i = 0; i < nums1.size(); i++) {
            minNum = minNum * 10 + nums1[i];
        }
        for (int i = 0; i < nums2.size(); i++) {
            minNum = minNum * 10 + nums2[i];
        }
        return minNum;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int n = n1 + n2;
        vector<int> nums(n);
        for(int i = 0; i < n1; i++){
            nums[i] = nums1[i];
        }
        for(int i = 0; i < n2; i++){
            nums[n1 + i] = nums2[i];
        }
        sort(nums.begin(), nums.end());
        int ans = 0;
        for(int i = 0; i < n; i++){
            ans = ans * 10 + nums[i];
        }
        return ans;

=======

        string s1, s2;
        for(auto& n: nums1) s1 += to_string(n);
        for(auto& n: nums2) s2 += to_string(n);
        sort(s1.begin(), s1.end());
        sort(s2.begin(), s2.end());
        int i = 0, j = 0;
        string res;
        while(i < s1.size() && j < s2.size()) {
            if(s1[i] < s2[j]) {
                res += s1[i++];
            } else {
                res += s2[j++];
            }
        }
        while(i < s1.size()) res += s1[i++];
        while(j < s2.size()) res += s2[j++];
        return stoi(res);

=======

        int result = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                int num1 = nums1[i];
                int num2 = nums2[j];
                int num = num1 * 10 + num2;
                if (num < result || result == 0) {
                    result = num;
                }
                num = num2 * 10 + num1;
                if (num < result || result == 0) {
                    result = num;
                }
            }
        }
        return result;

=======

        int n = nums1.size();
        int m = nums2.size();
        int ans = 0;
        int i = 0;
        int j = 0;
        while(i < n && j < m){
            if(nums1[i] < nums2[j]){
                ans = ans * 10 + nums1[i];
                i++;
            }else if(nums1[i] > nums2[j]){
                ans = ans * 10 + nums2[j];
                j++;
            }else{
                int k = i;
                int l = j;
                while(k < n && l < m && nums1[k] == nums2[l]){
                    k++;
                    l++;
                }
                if(k == n){
                    ans = ans * 10 + nums2[j];
                    j++;
                }else if(l == m){
                    ans = ans * 10 + nums1[i];
                    i++;
                }else if(nums1[k] < nums2[l]){
                    ans = ans * 10 + nums1[i];
                    i++;
                }else{
                    ans = ans * 10 + nums2[j];
                    j++;
                }
            }
        }
        while(i < n){
            ans = ans * 10 + nums1[i];
            i++;
        }
        while(j < m){
            ans = ans * 10 + nums2[j];
            j++;
        }
        return ans;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int i = 0;
        int j = 0;
        int k = 0;
        int result = 0;
        while(i<n1 && j<n2){
            if(nums1[i] < nums2[j]){
                result = result*10 + nums1[i];
                i++;
            }else if(nums1[i] > nums2[j]){
                result = result*10 + nums2[j];
                j++;
            }else{
                int i2 = i;
                int j2 = j;
                while(i2<n1 && j2<n2 && nums1[i2] == nums2[j2]){
                    i2++;
                    j2++;
                }
                if(i2>=n1){
                    result = result*10 + nums2[j];
                    j++;
                }else if(j2>=n2){
                    result = result*10 + nums1[i];
                    i++;
                }else{
                    if(nums1[i2] < nums2[j2]){
                        result = result*10 + nums1[i];
                        i++;
                    }else{
                        result = result*10 + nums2[j];
                        j++;
                    }
                }
            }
        }
        while(i<n1){
            result = result*10 + nums1[i];
            i++;
        }
        while(j<n2){
            result = result*10 + nums2[j];
            j++;
        }
        return result;

=======

        set<int> s1,s2;
        for(auto i:nums1)
            s1.insert(i);
        for(auto i:nums2)
            s2.insert(i);
        int n1=0,n2=0;
        for(auto i:s1)
            n1=n1*10+i;
        for(auto i:s2)
            n2=n2*10+i;
        return min(n1,n2);
