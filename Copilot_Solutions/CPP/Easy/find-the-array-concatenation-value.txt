Synthesizing 10/10 solutions

=======

        long long ans = 0;
        while (nums.size() > 0) {
            if (nums.size() == 1) {
                ans += nums[0];
                nums.erase(nums.begin());
            } else {
                int first = nums[0];
                int last = nums[nums.size() - 1];
                ans += (long long)first * pow(10, (int)log10(last) + 1) + last;
                nums.erase(nums.begin());
                nums.erase(nums.end() - 1);
            }
        }
        return ans;

=======

        long long ans = 0;
        while (nums.size() > 1) {
            ans += nums[0] * pow(10, (int)log10(nums.back()) + 1) + nums.back();
            nums.erase(nums.begin());
            nums.pop_back();
        }
        if (nums.size() == 1) ans += nums[0];
        return ans;

=======

        long long ans = 0;
        while (nums.size() > 1) {
            ans += nums[0] * pow(10, int(log10(nums.back())) + 1) + nums.back();
            nums.erase(nums.begin());
            nums.pop_back();
        }
        return ans + (nums.size() ? nums[0] : 0);

=======

        long long ans = 0;
        while (nums.size() > 1) {
            ans += nums.front();
            ans *= 10;
            ans += nums.back();
            nums.erase(nums.begin());
            nums.erase(nums.end() - 1);
        }
        if (nums.size() == 1) {
            ans += nums.front();
        }
        return ans;

=======

        long long ans = 0;
        while (nums.size() > 1) {
            int a = nums[0];
            int b = nums[nums.size() - 1];
            ans += a * pow(10, floor(log10(b)) + 1) + b;
            nums.erase(nums.begin());
            nums.pop_back();
        }
        if (nums.size() == 1) {
            ans += nums[0];
        }
        return ans;

=======

        int n = nums.size();
        long long ans = 0;
        while (n > 1) {
            ans += (long long) nums[0] * pow(10, (int)log10(nums[n - 1]) + 1) + nums[n - 1];
            n -= 2;
        }
        if (n) ans += nums[0];
        return ans;

=======

        long long ans = 0;
        while (nums.size() > 1) {
            long long a = nums[0], b = nums[nums.size() - 1];
            int cnt = 0;
            while (a >= 10) {
                a /= 10;
                cnt++;
            }
            while (cnt--) {
                b *= 10;
            }
            ans += a + b;
            nums.erase(nums.begin());
            nums.erase(nums.end() - 1);
        }
        if (nums.size() == 1) {
            ans += nums[0];
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        while (n > 0) {
            if (n > 1) {
                ans += nums[0] * pow(10, (int) log10(nums[n - 1])) + nums[n - 1];
                n -= 2;
            } else {
                ans += nums[0];
                n -= 1;
            }
        }
        return ans;

=======

        long long ans = 0;
        while (nums.size() > 1) {
            long long a = nums[0];
            long long b = nums.back();
            int len = 1;
            while (a >= 10) {
                a /= 10;
                len++;
            }
            while (b >= 10) {
                b /= 10;
                len++;
            }
            ans += a * pow(10, len) + b;
            nums.erase(nums.begin());
            nums.pop_back();
        }
        return ans + nums[0];

=======

        long long ans = 0;
        while (nums.size() > 1) {
            int a = nums[0], b = nums[nums.size()-1];
            long long c = 0;
            while (a > 0) {
                c = c * 10 + a % 10;
                a /= 10;
            }
            while (b > 0) {
                c = c * 10 + b % 10;
                b /= 10;
            }
            ans += c;
            nums.erase(nums.begin());
            nums.erase(nums.end()-1);
        }
        if (nums.size() == 1) ans += nums[0];
        return ans;
