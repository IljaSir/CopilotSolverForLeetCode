Synthesizing 10/10 solutions

=======

        vector<string> res;
        vector<string> words;
        istringstream iss(text);
        string word;
        while (iss >> word) {
            words.push_back(word);
        }
        for (int i = 0; i < words.size() - 2; ++i) {
            if (words[i] == first && words[i + 1] == second) {
                res.push_back(words[i + 2]);
            }
        }
        return res;

=======

        vector<string> result;
        string word;
        istringstream iss(text);
        while (iss >> word) {
            if (word == first) {
                if (iss >> word) {
                    if (word == second) {
                        if (iss >> word) {
                            result.push_back(word);
                        }
                    }
                }
            }
        }
        return result;

=======

        vector<string> res;
        istringstream iss(text);
        string s1, s2;
        while (iss >> s1) {
            if (s1 == first && s2 == second) {
                string s3;
                iss >> s3;
                res.push_back(s3);
            }
            s2 = s1;
        }
        return res;

=======

        vector<string> res;
        string word;
        istringstream iss(text);
        string f, s;
        while (iss >> word) {
            if (f == first && s == second) {
                res.push_back(word);
            }
            f = s;
            s = word;
        }
        return res;

=======

        vector<string> result;
        string word;
        istringstream iss(text);
        string prev1, prev2;
        while(iss >> word) {
            if (prev1 == first && prev2 == second) {
                result.push_back(word);
            }
            prev1 = prev2;
            prev2 = word;
        }
        return result;

=======

        vector<string> ret;
        string temp;
        stringstream ss(text);
        while(ss >> temp) {
            if (temp == first) {
                if (ss >> temp) {
                    if (temp == second) {
                        if (ss >> temp) {
                            ret.push_back(temp);
                        }
                    }
                }
            }
        }
        return ret;

=======

        vector<string> v;
        istringstream iss(text);
        string w1, w2, w3;
        while (iss >> w1) {
            if (w2.empty()) {
                w2 = w1;
                continue;
            }
            if (w3.empty()) {
                w3 = w1;
                continue;
            }
            if (w2 == first && w3 == second) {
                v.push_back(w1);
            }
            w2 = w3;
            w3 = w1;
        }
        return v;

=======

        vector<string> res;
        string word;
        istringstream iss(text);
        string firstWord = "";
        string secondWord = "";
        while(iss >> word) {
            if(firstWord == first && secondWord == second) {
                res.push_back(word);
            }
            firstWord = secondWord;
            secondWord = word;
        }
        return res;

=======

        vector<string> res;
        string str = first + " " + second;
        for (int i=0; i<text.size(); i++) {
            int j = text.find(str, i);
            if (j == string::npos) break;
            int k = text.find(' ', j+str.size());
            if (k == string::npos) break;
            res.push_back(text.substr(j+str.size(), k-j-str.size()));
            i = k;
        }
        return res;

=======

        vector<string> result;
        int n = text.size();
        if (n < 3) return result;
        
        int i = 0;
        while(i < n) {
            int j = i;
            while(j < n && text[j] != ' ') ++j;
            string s = text.substr(i, j - i);
            if (s == first) {
                i = j + 1;
                j = i;
                while(j < n && text[j] != ' ') ++j;
                s = text.substr(i, j - i);
                if (s == second) {
                    i = j + 1;
                    j = i;
                    while(j < n && text[j] != ' ') ++j;
                    s = text.substr(i, j - i);
                    result.push_back(s);
                }
            }
            i = j + 1;
        }
        return result;
