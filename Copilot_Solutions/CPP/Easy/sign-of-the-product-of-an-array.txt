Synthesizing 10/10 solutions

=======

        int sign = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                sign = -sign;
            }
        }
        return sign;

=======

        int sign = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                sign *= -1;
            }
        }
        return sign;

=======

        int sign = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) return 0;
            if (nums[i] < 0) sign = -sign;
        }
        return sign;

=======

        int sign = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                sign *= -1;
            }
        }
        return sign;

=======

        int product = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                product = -product;
            }
        }
        return product;

=======

        int product = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                product *= -1;
            }
        }
        return product;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            }
            if (nums[i] < 0) {
                count++;
            }
        }
        return count % 2 == 0 ? 1 : -1;

=======

        int negativeCount = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                negativeCount++;
            }
        }
        if (negativeCount % 2 == 0) {
            return 1;
        } else {
            return -1;
        }

=======

        int sign = 1;
        for (int i=0; i<nums.size(); i++) {
            if (nums[i] == 0) {
                return 0;
            } else if (nums[i] < 0) {
                sign = sign * -1;
            }
        }
        return sign;

=======

        int sign = 1;
        for (auto n: nums) {
            if (n == 0) {
                return 0;
            } else if (n < 0) {
                sign *= -1;
            }
        }
        return sign;
