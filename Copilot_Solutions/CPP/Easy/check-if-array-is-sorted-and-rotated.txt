Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[(i + 1) % n]) {
                cnt++;
            }
        }
        return cnt <= 1;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[(i + 1) % n]) {
                count++;
            }
        }
        return count <= 1;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[(i + 1) % n]) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] > nums[(i + 1) % nums.size()]){
                count++;
            }
        }
        return count <= 1;

=======

        int size = nums.size();
        int count = 0;
        for (int i = 0; i < size; i++) {
            if (nums[i] > nums[(i + 1) % size]) {
                count++;
            }
            if (count > 1) {
                return false;
            }
        }
        return true;

=======

        int n = nums.size();
        int i = 0;
        for (; i < n - 1; ++i) {
            if (nums[i] > nums[i + 1]) {
                break;
            }
        }
        int j = i + 1;
        for (; j < n - 1; ++j) {
            if (nums[j] > nums[j + 1]) {
                break;
            }
        }
        if (j == n - 1 && nums[i] > nums[j]) {
            return true;
        }
        return false;

=======

        int i = 0;
        while (i < nums.size() && nums[i] <= nums[0]) {
            i++;
        }
        while (i < nums.size() && nums[i] >= nums[0]) {
            i++;
        }
        return i == nums.size();

=======

        int count = 0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]>nums[(i+1)%nums.size()]){
                count++;
            }
        }
        if(count==0 || count==1){
            return true;
        }
        return false;

=======

        int N = nums.size();
        int i = 0;
        while (i < N && nums[i] == nums[0]) {
            i++;
        }
        if (i == N) {
            return true;
        }
        int step = nums[i] > nums[0] ? 1 : -1;
        i = (i + step + N) % N;
        while (i != 0 && nums[i] == nums[0]) {
            i = (i + step + N) % N;
        }
        return i == 0;

=======

        int n = nums.size();
        int i = 0;
        while(i < n && nums[i] == nums[0]) i++;
        if(i == n) return true;
        if(nums[i] < nums[0]) {
            while(i < n && nums[i] < nums[0]) i++;
            if(i == n) return true;
        }
        else {
            while(i < n && nums[i] > nums[0]) i++;
            if(i == n) return true;
        }
        return false;
