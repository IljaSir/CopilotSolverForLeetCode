Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < words.size(); i++) {
            for (int j = i + 1; j < words.size(); j++) {
                if (isSimilar(words[i], words[j])) {
                    count++;
                }
            }
        }
        return count;
    }
    
    bool isSimilar(string a, string b) {
        if (a.length() != b.length()) {
            return false;
        }
        
        int count = 0;
        for (int i = 0; i < a.length(); i++) {
            if (a[i] != b[i]) {
                count++;
            }
        }
        return count <= 2;

=======

        int count = 0;
        for (int i = 0; i < words.size(); i++) {
            for (int j = i + 1; j < words.size(); j++) {
                if (isSimilar(words[i], words[j]))
                    count++;
            }
        }
        return count;
    }
    bool isSimilar(string& word1, string& word2) {
        if (word1.size() != word2.size())
            return false;
        int count = 0;
        for (int i = 0; i < word1.size(); i++) {
            if (word1[i] != word2[i])
                count++;
        }
        return count == 2 || count == 0;

=======

        int n = words.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (words[i].length() == words[j].length()) {
                    int arr[26] = {0};
                    bool flag = true;
                    for (int k = 0; k < words[i].length(); k++) {
                        arr[words[i][k] - 'a']++;
                        arr[words[j][k] - 'a']--;
                    }
                    for (int k = 0; k < 26; k++) {
                        if (arr[k] != 0) {
                            flag = false;
                            break;
                        }
                    }
                    if (flag) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = words.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(words[i], words[j])) {
                    count++;
                }
            }
        }
        return count;
    }
    bool isSimilar(string& a, string& b) {
        if (a.length() != b.length()) {
            return false;
        }
        int n = a.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] != b[i]) {
                count++;
            }
        }
        return count <= 2;

=======

        int res = 0;
        for (int i = 0; i < words.size(); ++i) {
            for (int j = i + 1; j < words.size(); ++j) {
                if (i != j && isSimilar(words[i], words[j])) {
                    ++res;
                }
            }
        }
        return res;
    }
    
    bool isSimilar(const string& w1, const string& w2) {
        if (w1.length() != w2.length()) {
            return false;
        }
        int diff = 0;
        for (int i = 0; i < w1.length(); ++i) {
            if (w1[i] != w2[i]) {
                ++diff;
            }
            if (diff > 2) {
                return false;
            }
        }
        return true;

=======

        int n = words.size();
        int res = 0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(words[i].size() == words[j].size()){
                    int count = 0;
                    for(int k=0;k<words[i].size();k++){
                        if(words[i][k] != words[j][k]){
                            count++;
                        }
                    }
                    if(count == 0 || count == 2){
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n = words.size();
        int count = 0;
        for(int i =0; i < n; i++){
            for(int j = i+1; j < n; j++){
                if(words[i].size() != words[j].size()){
                    continue;
                }
                int freq[26] = {0};
                for(int k = 0; k < words[i].size(); k++){
                    freq[words[i][k] - 'a']++;
                    freq[words[j][k] - 'a']--;
                }
                bool valid = true;
                for(int k = 0; k < 26; k++){
                    if(freq[k] != 0){
                        valid = false;
                        break;
                    }
                }
                if(valid){
                    count++;
                }
            }
        }
        return count;

=======

        int n = words.size();
        int ans = 0;
        unordered_map<string, int> cnt;
        for (auto& word : words) {
            string t = word;
            sort(t.begin(), t.end());
            t.erase(unique(t.begin(), t.end()), t.end());
            for (int i = 0; i < t.size(); ++i) {
                string s = t;
                s.erase(s.begin() + i);
                if (cnt.count(s)) ans += cnt[s];
            }
            cnt[t]++;
        }
        return ans;

=======

        int n = words.size();
        vector<int> freq(26, 0);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            vector<int> freq1(26, 0);
            for (char ch: words[i]) {
                ++freq1[ch - 'a'];
            }
            for (int j = 0; j < 26; ++j) {
                if (freq[j] > 0 && freq1[j] > 0) {
                    res += freq[j];
                }
            }
            for (int j = 0; j < 26; ++j) {
                freq[j] += freq1[j];
            }
        }
        return res;

=======

        int ans = 0;
        map<string, int> m;
        for (auto word: words) {
            string s = word;
            sort(s.begin(), s.end());
            for (auto c: s) {
                string t = s;
                t.erase(remove(t.begin(), t.end(), c), t.end());
                ans += m[t];
            }
            m[s]++;
        }
        return ans;
