Synthesizing 10/10 solutions

=======

        stack<int> s;
        unordered_map<int, int> m;
        for (int i = 0; i < nums2.size(); i++) {
            while (!s.empty() && s.top() < nums2[i]) {
                m[s.top()] = nums2[i];
                s.pop();
            }
            s.push(nums2[i]);
        }
        while (!s.empty()) {
            m[s.top()] = -1;
            s.pop();
        }
        vector<int> ans;
        for (int i = 0; i < nums1.size(); i++) {
            ans.push_back(m[nums1[i]]);
        }
        return ans;

=======

        stack<int> s;
        unordered_map<int, int> m;
        for (int i = nums2.size() - 1; i >= 0; i--) {
            while (!s.empty() && s.top() <= nums2[i]) s.pop();
            m[nums2[i]] = s.empty() ? -1 : s.top();
            s.push(nums2[i]);
        }
        vector<int> ans;
        for (int i : nums1) ans.push_back(m[i]);
        return ans;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums2.size(); i++) {
            m[nums2[i]] = i;
        }
        vector<int> ans;
        for (int i = 0; i < nums1.size(); i++) {
            int j = m[nums1[i]];
            bool flag = false;
            for (; j < nums2.size(); j++) {
                if (nums2[j] > nums1[i]) {
                    ans.push_back(nums2[j]);
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                ans.push_back(-1);
            }
        }
        return ans;

=======

        stack<int> s;
        unordered_map<int, int> m;
        for(int i = 0; i < nums2.size(); i++){
            while(!s.empty() && s.top() < nums2[i]){
                m[s.top()] = nums2[i];
                s.pop();
            }
            s.push(nums2[i]);
        }
        while(!s.empty()){
            m[s.top()] = -1;
            s.pop();
        }
        vector<int> res;
        for(int i = 0; i < nums1.size(); i++)
            res.push_back(m[nums1[i]]);
        return res;

=======

        vector<int> res;
        for(int i = 0; i < nums1.size(); i++){
            int j = 0;
            for(; j < nums2.size(); j++){
                if(nums2[j] == nums1[i]){
                    break;
                }
            }
            for(; j < nums2.size(); j++){
                if(nums2[j] > nums1[i]){
                    res.push_back(nums2[j]);
                    break;
                }
            }
            if(j == nums2.size()){
                res.push_back(-1);
            }
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < nums1.size(); i++) {
            int j = 0;
            while (nums2[j] != nums1[i]) j++;
            while (j < nums2.size() && nums2[j] <= nums1[i]) j++;
            res.push_back(j < nums2.size() ? nums2[j] : -1);
        }
        return res;

=======

        vector<int> ans(nums1.size(),-1);
        for(int i = 0; i < nums1.size(); i++){
            for(int j = 0; j < nums2.size(); j++){
                if(nums2[j] == nums1[i]){
                    for(int k = j+1; k < nums2.size(); k++){
                        if(nums2[k] > nums1[i]){
                            ans[i] = nums2[k];
                            break;
                        }
                    }
                    break;
                }
            }
        }
        return ans;

=======

        unordered_map<int, int> map;
        stack<int> st;
        for(int i = 0; i < nums2.size(); i++) {
            while(!st.empty() && nums2[i] > st.top()) {
                map[st.top()] = nums2[i];
                st.pop();
            }
            st.push(nums2[i]);
        }
        while(!st.empty()) {
            map[st.top()] = -1;
            st.pop();
        }
        vector<int> res;
        for(int i = 0; i < nums1.size(); i++) {
            res.push_back(map[nums1[i]]);
        }
        return res;

=======

        int n = nums1.size();
        vector<int> ans(n, -1);
        unordered_map<int, int> mp;
        for(int i = 0; i < n; i++){
            mp[nums1[i]] = i;
        }
        stack<int> st;
        for(int i = 0; i < nums2.size(); i++){
            while(!st.empty() && nums2[st.top()] < nums2[i]){
                if(mp.find(nums2[st.top()]) != mp.end()){
                    ans[mp[nums2[st.top()]]] = nums2[i];
                }
                st.pop();
            }
            st.push(i);
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> ans(n);
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            m[nums1[i]] = i;
        }
        stack<int> s;
        for (int i = 0; i < nums2.size(); ++i) {
            while (!s.empty() && nums2[s.top()] < nums2[i]) {
                if (m.find(nums2[s.top()]) != m.end()) {
                    ans[m[nums2[s.top()]]] = nums2[i];
                }
                s.pop();
            }
            s.push(i);
        }
        while (!s.empty()) {
            if (m.find(nums2[s.top()]) != m.end()) {
                ans[m[nums2[s.top()]]] = -1;
            }
            s.pop();
        }
        return ans;
