Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;

=======

        std::sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                return true;
            }
        }
        return false;

=======

        set<int> s;
        for (int i = 0; i < nums.size(); i++) {
            if (s.find(nums[i]) != s.end()) {
                return true;
            }
            s.insert(nums[i]);
        }
        return false;

=======

        unordered_set<int> s;
        for (int i = 0; i < nums.size(); i++) {
            if (s.find(nums[i]) == s.end()) {
                s.insert(nums[i]);
            } else {
                return true;
            }
        }
        return false;

=======

        unordered_set<int> s;
        for (auto n : nums) {
            if (s.find(n) != s.end()) {
                return true;
            }
            s.insert(n);
        }
        return false;

=======

        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            if (map.find(nums[i]) != map.end()) {
                return true;
            }
            map[nums[i]] = 1;
        }
        return false;

=======

        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            map[nums[i]]++;
            if (map[nums[i]] > 1) {
                return true;
            }
        }
        return false;

=======

        unordered_set<int> set;
        for (int i = 0; i < nums.size(); ++i) {
            if (set.find(nums[i]) != set.end()) {
                return true;
            } else {
                set.insert(nums[i]);
            }
        }
        return false;

=======

        std::sort(nums.begin(), nums.end());
        return std::adjacent_find(nums.begin(), nums.end()) != nums.end();
