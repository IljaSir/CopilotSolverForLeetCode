Synthesizing 10/10 solutions

=======

        if (s.empty()) return 0;
        for (int i = 0, j = s.size() - 1; i < j; ++i, --j) {
            if (s[i] != s[j]) return 2;
        }
        return 1;

=======

        if (s.empty()) {
            return 0;
        }
        if (s == string(s.rbegin(), s.rend())) {
            return 1;
        }
        return 2;

=======

        if (s.empty()) return 0;
        for (int i = 0, j = s.size() - 1; i < j; i++, j--) {
            if (s[i] != s[j]) return 2;
        }
        return 1;

=======

        if (s.empty()) return 0;
        int i = 0, j = s.size() - 1;
        while (i < j) {
            if (s[i] != s[j]) return 2;
            ++i; --j;
        }
        return 1;

=======

        if (s.empty()) {
            return 0;
        }
        int n = s.size();
        for (int i = 0; i < n / 2; ++i) {
            if (s[i] != s[n - 1 - i]) {
                return 2;
            }
        }
        return 1;

=======

        int n = s.length();
        if (n == 0)
            return 0;
        for (int i = 0; i < n / 2; i++) {
            if (s[i] != s[n - i - 1])
                return 2;
        }
        return 1;

=======

        if (s.empty()) {
            return 0;
        }
        string t = s;
        reverse(t.begin(), t.end());
        return s == t ? 1 : 2;

=======

        if (s.empty()) return 0;
        string t = s;
        reverse(t.begin(), t.end());
        return (s == t) ? 1 : 2;

=======

        if (s.empty()) return 0;
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s[i] != s[j]) break;
            i++;
            j--;
        }
        if (i >= j) return 1;
        return 2;

=======

        if (s.empty()) return 0;
        return s == string(s.rbegin(), s.rend()) ? 1 : 2; // if palindromic, remove all, else remove a and b
