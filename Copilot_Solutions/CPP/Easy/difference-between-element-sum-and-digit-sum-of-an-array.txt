Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum1 = 0, sum2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum1 += nums[i];
            while (nums[i] > 0) {
                sum2 += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return abs(sum1 - sum2);

=======

        int elementSum = 0, digitSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            elementSum += nums[i];
            while (nums[i]) {
                digitSum += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return abs(elementSum - digitSum);

=======

        int sum1 = 0, sum2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum1 += nums[i];
            while (nums[i]) {
                sum2 += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return abs(sum1 - sum2);

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum1 += nums[i];
            while (nums[i] != 0) {
                sum2 += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return abs(sum1 - sum2);

=======

        int sum = 0;
        int digitSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            while (nums[i] > 0) {
                digitSum += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        return abs(sum - digitSum);

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int digitSum = 0;
        for (int num : nums) {
            while (num > 0) {
                digitSum += num % 10;
                num /= 10;
            }
        }
        return abs(sum - digitSum);

=======

        int sum = 0, digitSum = 0;
        for (auto num: nums) {
            sum += num;
            while (num) {
                digitSum += num % 10;
                num /= 10;
            }
        }
        return abs(sum - digitSum);

=======

        int elementSum = 0;
        int digitSum = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            elementSum += nums[i];
            digitSum += nums[i] % 10;
            nums[i] /= 10;
            while (nums[i] > 0) {
                digitSum += nums[i] % 10;
                nums[i] /= 10;
            }
        }
        
        return abs(elementSum - digitSum);

=======

        int sum1 = 0;
        int sum2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum1 += nums[i];
            sum2 += getSumOfDigits(nums[i]);
        }
        return abs(sum1 - sum2);
    }
    
    int getSumOfDigits(int num) {
        int sum = 0;
        while (num != 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
