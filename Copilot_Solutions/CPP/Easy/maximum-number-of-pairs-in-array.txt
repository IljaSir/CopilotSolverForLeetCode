Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> cnt(101);
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int res = 0;
        for (int i = 0; i <= 100; i++) {
            res += cnt[i] / 2;
            cnt[i] %= 2;
        }
        int rem = 0;
        for (int i = 0; i <= 100; i++) {
            rem += cnt[i];
        }
        return {res, rem};

=======

        int n = nums.size();
        vector<int> cnt(101, 0);
        for (int i = 0; i < n; i++) cnt[nums[i]]++;
        int ans = 0, left = 0;
        for (int i = 0; i < 101; i++) {
            ans += cnt[i] / 2;
            left += cnt[i] % 2;
        }
        return {ans, left};

=======

        int count = 0;
        int left = 0;
        vector<int> map(101, 0);
        for (int i = 0; i < nums.size(); ++i) {
            map[nums[i]]++;
        }
        for (int i = 0; i < 101; ++i) {
            if (map[i] > 1) {
                count += map[i] / 2;
                left += map[i] % 2;
            }
            if (map[i] == 1) {
                left++;
            }
        }
        return {count, left};

=======

        vector<int> result(2, 0);
        int count[101] = {0};
        for (auto n: nums) {
            count[n]++;
        }
        for (int i = 0; i < 101; i++) {
            if (count[i] > 0) {
                result[0] += count[i] / 2;
                result[1] += count[i] % 2;
            }
        }
        return result;

=======

        unordered_map<int, int> cnt;
        for (int n : nums) cnt[n]++;
        int ans = 0, left = 0;
        for (auto [k, v] : cnt) {
            ans += v / 2;
            left += v % 2;
        }
        return {ans, left};

=======

        vector<int> res(2, 0);
        int n = nums.size();
        if (n < 2) return res;
        
        vector<int> cnt(101, 0);
        for (int i = 0; i < n; ++i) {
            cnt[nums[i]]++;
        }
        
        for (int i = 0; i < 101; ++i) {
            if (cnt[i] > 1) {
                res[0] += cnt[i] / 2;
                res[1] += cnt[i] % 2;
            }
        }
        
        return res;

=======

        vector<int> answer(2, 0);
        int n = nums.size();
        if (n <= 1) {
            answer[1] = n;
            return answer;
        }
        int count[101] = {0};
        for (int i = 0; i < n; ++i) {
            count[nums[i]]++;
        }
        for (int i = 0; i < 101; ++i) {
            answer[0] += count[i] / 2;
            answer[1] += count[i] % 2;
        }
        return answer;

=======

        vector<int> res(2,0);
        int n = nums.size();
        if(n==1)
            return res;
        sort(nums.begin(),nums.end());
        int i=0;
        while(i<n-1){
            if(nums[i]==nums[i+1]){
                res[0]++;
                i+=2;
            }
            else
                i++;
        }
        res[1]=n-res[0]*2;
        return res;

=======

        vector<int> ans(2, 0);
        unordered_map<int, int> mp;
        for (int n : nums) {
            mp[n]++;
        }
        for (auto it : mp) {
            int count = it.second;
            ans[0] += count / 2;
            ans[1] += count % 2;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> count(101);
        for (auto &i : nums) {
            count[i]++;
        }
        int total = 0;
        int left = 0;
        for (int i = 0; i <= 100; i++) {
            if (count[i] > 1) {
                total += count[i] / 2;
                if (count[i] % 2 == 1) {
                    left++;
                }
            }
        }
        return {total, left};
