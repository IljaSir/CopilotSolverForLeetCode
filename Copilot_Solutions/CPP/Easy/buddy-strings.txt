Synthesizing 10/10 solutions

=======

        if (s.size() != goal.size()) return false;
        if (s == goal) {
            int cnt[26] = {0};
            for (char c : s) cnt[c - 'a']++;
            for (int i = 0; i < 26; i++) {
                if (cnt[i] >= 2) return true;
            }
            return false;
        }
        int idx[2] = {-1, -1};
        int num = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] != goal[i]) {
                if (num == 2) return false;
                idx[num++] = i;
            }
        }
        if (num == 1) return false;
        return s[idx[0]] == goal[idx[1]] && s[idx[1]] == goal[idx[0]];

=======

        if (s.size() != goal.size()) {
            return false;
        }
        int count = 0;
        int first = -1;
        int second = -1;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] != goal[i]) {
                count++;
                if (count > 2) {
                    return false;
                }
                if (first == -1) {
                    first = i;
                } else {
                    second = i;
                }
            }
        }
        if (count == 0) {
            int charMap[26] = {0};
            for (int i = 0; i < s.size(); i++) {
                if (charMap[s[i] - 'a'] > 0) {
                    return true;
                }
                charMap[s[i] - 'a']++;
            }
            return false;
        } else if (count == 2) {
            return s[first] == goal[second] && s[second] == goal[first];
        }
        return false;

=======

        if (s.size() != goal.size()) return false;
        if (s == goal) {
            unordered_set<char> set;
            for (char c: s) {
                if (set.count(c)) return true;
                set.insert(c);
            }
            return false;
        }
        int n = s.size();
        int i = 0;
        while (i < n && s[i] == goal[i]) ++i;
        int j = n - 1;
        while (j >= 0 && s[j] == goal[j]) --j;
        return i < j && s[i] == goal[j] && s[j] == goal[i];

=======

        if (s.size() != goal.size()) return false;
        if (s == goal) {
            vector<int> cnt(26, 0);
            for (auto ch : s) {
                cnt[ch - 'a']++;
                if (cnt[ch - 'a'] > 1) {
                    return true;
                }
            }
            return false;
        }
        int n = s.size();
        int first = -1;
        int second = -1;
        for (int i = 0; i < n; i++) {
            if (s[i] != goal[i]) {
                if (first == -1) {
                    first = i;
                } else if (second == -1) {
                    second = i;
                } else {
                    return false;
                }
            }
        }
        if (first != -1 && second != -1) {
            swap(s[first], s[second]);
            if (s == goal) {
                return true;
            }
        }
        return false;

=======

        int n = s.size();
        int m = goal.size();
        if (n != m) {
            return false;
        }
        if (s == goal) {
            unordered_map<char, int> cnt;
            for (char ch : s) {
                ++cnt[ch];
            }
            for (auto& p : cnt) {
                if (p.second >= 2) {
                    return true;
                }
            }
            return false;
        }
        vector<int> diff;
        for (int i = 0; i < n; ++i) {
            if (s[i] != goal[i]) {
                diff.push_back(i);
            }
        }
        return diff.size() == 2 && s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]];

=======

        if(s.size() != goal.size()) return false;
        if(s == goal) {
            unordered_set<char> st;
            for(char c : s) {
                if(st.count(c)) return true;
                st.insert(c);
            }
            return false;
        }
        int first = -1;
        int second = -1;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] != goal[i]) {
                if(first == -1) {
                    first = i;
                } else if(second == -1) {
                    second = i;
                } else {
                    return false;
                }
            }
        }
        return second != -1 && s[first] == goal[second] && s[second] == goal[first];

=======

        if(s.length() != goal.length()) return false;
        if(s == goal){
            int arr[26] = {0};
            for(int i = 0; i < s.length(); i++){
                arr[s[i] - 'a']++;
            }
            for(int i = 0; i < 26; i++){
                if(arr[i] > 1) return true;
            }
            return false;
        }
        int first = -1;
        int second = -1;
        for(int i = 0; i < s.length(); i++){
            if(s[i] != goal[i]){
                if(first == -1){
                    first = i;
                }else if(second == -1){
                    second = i;
                }else{
                    return false;
                }
            }
        }
        if(first == -1 || second == -1) return false;
        return s[first] == goal[second] && s[second] == goal[first];

=======

        int n = s.size();
        int m = goal.size();
        if (n != m) return false;
        if (n == 0 && m == 0) return false;
        if (n == 1 && m == 1) return false;
        if (s == goal) {
            vector<int> cnt(26, 0);
            for (auto c : s) {
                cnt[c - 'a']++;
                if (cnt[c - 'a'] > 1) return true;
            }
            return false;
        }
        int cnt = 0;
        int a = -1, b = -1;
        for (int i = 0; i < n; ++i) {
            if (s[i] != goal[i]) {
                cnt++;
                if (cnt == 1) a = i;
                else if (cnt == 2) b = i;
                else return false;
            }
        }
        if (cnt == 2) {
            swap(s[a], s[b]);
            return s == goal;
        }
        return false;

=======

        if (s.size() != goal.size()) {
            return false;
        }
        
        int diff = 0;
        int first = -1;
        int second = -1;
        int count[26] = {0};
        for (int i = 0; i < s.size(); i++) {
            count[s[i] - 'a']++;
            if (s[i] != goal[i]) {
                diff++;
                if (first == -1) {
                    first = i;
                } else if (second == -1) {
                    second = i;
                } else {
                    return false;
                }
            }
        }
        
        if (diff == 0) {
            for (int i = 0; i < 26; i++) {
                if (count[i] > 1) {
                    return true;
                }
            }
        } else if (diff == 2) {
            return s[first] == goal[second] && s[second] == goal[first];
        }
        
        return false;

=======

        int diff = 0;
        int c1 = -1;
        int c2 = -1;
        int map[26] = {0};
        if (s.length() != goal.length()) {
            return false;
        }
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] != goal[i]) {
                if (diff == 0) {
                    c1 = i;
                } else if (diff == 1) {
                    c2 = i;
                } else {
                    return false;
                }
                ++diff;
            }
            ++map[s[i] - 'a'];
        }
        if (diff == 1) {
            return false;
        } else if (diff == 0) {
            for (int i = 0; i < 26; ++i) {
                if (map[i] > 1) {
                    return true;
                }
            }
            return false;
        } else {
            return s[c1] == goal[c2] && s[c2] == goal[c1];
        }
