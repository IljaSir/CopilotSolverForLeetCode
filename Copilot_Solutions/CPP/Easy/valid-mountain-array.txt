Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.size();
        int i = 0;
        while (i + 1 < n && arr[i] < arr[i + 1]) i++;
        if (i == 0 || i == n - 1) return false;
        while (i + 1 < n && arr[i] > arr[i + 1]) i++;
        return i == n - 1;

=======

        int n = arr.size();
        int i = 0;
        while (i + 1 < n && arr[i] < arr[i + 1]) ++i;
        if (i == 0 || i == n - 1) return false;
        while (i + 1 < n && arr[i] > arr[i + 1]) ++i;
        return i == n - 1;

=======

        int n = arr.size();
        if (n < 3) {
            return false;
        }
        int i = 0;
        while (i + 1 < n && arr[i] < arr[i + 1]) {
            i++;
        }
        if (i == 0 || i == n - 1) {
            return false;
        }
        while (i + 1 < n && arr[i] > arr[i + 1]) {
            i++;
        }
        return i == n - 1;

=======

        int n = arr.size();
        if (n < 3) return false;
        int i = 0;
        while (i < n-1 && arr[i] < arr[i+1]) i++;
        if (i == 0 || i == n-1) return false;
        while (i < n-1 && arr[i] > arr[i+1]) i++;
        return i == n-1;

=======

        int n = arr.size();
        if (n < 3) return false;
        int i = 0;
        while (i+1 < n && arr[i] < arr[i+1]) i++;
        if (i == 0 || i == n-1) return false;
        while (i+1 < n && arr[i] > arr[i+1]) i++;
        return i == n-1;

=======

        int n = arr.size();
        if (n < 3) return false;
        int i = 0;
        while (i < n - 1 && arr[i] < arr[i + 1]) ++i;
        if (i == 0 || i == n - 1) return false;
        while (i < n - 1 && arr[i] > arr[i + 1]) ++i;
        return i == n - 1;

=======

        if (arr.size() < 3) return false;
        bool up = true;
        for (int i = 1; i < arr.size(); i++) {
            if (arr[i] > arr[i-1]) {
                if (!up) return false;
            } else if (arr[i] < arr[i-1]) {
                if (i == 1) return false;
                up = false;
            } else {
                return false;
            }
        }
        return !up;

=======

        if (arr.size() < 3) return false;
        int peak = 0;
        for (int i = 1; i < arr.size(); ++i) {
            if (arr[i] > arr[i-1]) {
                peak = i;
            } else {
                break;
            }
        }
        if (peak == 0 || peak == arr.size()-1) return false;
        for (int i = peak+1; i < arr.size(); ++i) {
            if (arr[i] >= arr[i-1]) {
                return false;
            }
        }
        return true;
