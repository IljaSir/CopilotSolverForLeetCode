Synthesizing 10/10 solutions

=======

        unordered_map<string,int> m;
        for(int i=0;i<arr.size();i++){
            m[arr[i]]++;
        }
        for(int i=0;i<arr.size();i++){
            if(m[arr[i]]==1){
                k--;
            }
            if(k==0){
                return arr[i];
            }
        }
        return "";

=======

        unordered_map<string, int> mp;
        for (string s : arr) {
            mp[s]++;
        }
        for (string s : arr) {
            if (mp[s] == 1) {
                k--;
                if (k == 0) {
                    return s;
                }
            }
        }
        return "";

=======

        unordered_map<string, int> m;
        for (string& s : arr) m[s]++;
        for (string& s : arr) {
            if (m[s] == 1) {
                if (k == 1) return s;
                k--;
            }
        }
        return "";

=======

        unordered_map<string, int> mp;
        for (auto s: arr) {
            mp[s]++;
        }
        for (auto s: arr) {
            if (mp[s] == 1) {
                k--;
            }
            if (k == 0) {
                return s;
            }
        }
        return "";

=======

        unordered_map<string, int> um;
        for (auto s : arr) {
            ++um[s];
        }
        for (auto s : arr) {
            if (um[s] == 1) {
                --k;
                if (k == 0) {
                    return s;
                }
            }
        }
        return "";

=======

        unordered_map<string, int> map;
        for (auto& s : arr) {
            map[s]++;
        }
        for (auto& s : arr) {
            if (map[s] == 1 && --k == 0) {
                return s;
            }
        }
        return "";

=======

        unordered_map<string, int> m;
        for (string s : arr) {
            m[s]++;
        }
        vector<string> v;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second == 1) {
                v.push_back(it->first);
            }
        }
        if (v.size() < k) {
            return "";
        }
        return v[k-1];

=======

        unordered_map<string, int> mp;
        for(auto& s : arr) {
            mp[s]++;
        }
        for(auto& s : arr) {
            if(mp[s] == 1) {
                k--;
            }
            if(k == 0) {
                return s;
            }
        }
        return "";

=======

        unordered_map<string,int> m;
        for(auto s:arr)
            m[s]++;
        int i=0;
        for(auto it:m){
            i++;
            if(i==k)
                return it.first;
        }
        return "";

=======

        set<string> s;
        for(string str: arr)
            s.insert(str);
        if(s.size() < k)
            return "";
        int i = 0;
        for(auto it = s.begin(); it != s.end(); it++){
            if(i == k-1)
                return *it;
            i++;
        }
        return "";
