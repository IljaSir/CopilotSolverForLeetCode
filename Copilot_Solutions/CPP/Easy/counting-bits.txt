Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> ans(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            ans[i] = ans[i >> 1] + (i & 1);
        }
        return ans;

=======

        vector<int> ans(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            ans[i] = ans[i >> 1] + (i & 1);
        }
        return ans;

=======

        vector<int> ans(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            ans[i] = ans[i & (i - 1)] + 1;
        }
        return ans;

=======

        vector<int> result(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            result[i] = result[i >> 1] + (i & 1);
        }
        return result;

=======

        vector<int> ans(n+1);
        for (int i = 1; i <= n; i++) {
            ans[i] = ans[i >> 1] + (i & 1);
        }
        return ans;

=======

        vector<int> ans(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            ans[i] = ans[i / 2] + (i % 2);
        }
        return ans;

=======

        vector<int> ans = {0};
        for (int i = 1; i <= n; i++) {
            ans.push_back(ans[i / 2] + i % 2);
        }
        return ans;

=======

        vector<int> result(n+1, 0);
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 1) {
                result[i] = result[i-1] + 1;
            } else {
                result[i] = result[i/2];
            }
        }
        return result;

=======

        vector<int> res(n+1);
        for(int i = 0; i <= n; i++) {
            res[i] = __builtin_popcount(i);
        }
        return res;
