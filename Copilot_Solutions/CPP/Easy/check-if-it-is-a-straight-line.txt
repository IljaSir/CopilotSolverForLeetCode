Synthesizing 10/10 solutions

=======

        int x1 = coordinates[0][0];
        int y1 = coordinates[0][1];
        int x2 = coordinates[1][0];
        int y2 = coordinates[1][1];
        for (int i = 2; i < coordinates.size(); i++) {
            int x = coordinates[i][0];
            int y = coordinates[i][1];
            if ((y - y1) * (x2 - x1) != (y2 - y1) * (x - x1)) {
                return false;
            }
        }
        return true;

=======

        if (coordinates.size() <= 2) return true;
        int x0 = coordinates[0][0];
        int y0 = coordinates[0][1];
        int x1 = coordinates[1][0];
        int y1 = coordinates[1][1];
        for (int i = 2; i < coordinates.size(); ++i) {
            int x = coordinates[i][0];
            int y = coordinates[i][1];
            if ((x - x0) * (y1 - y0) != (x1 - x0) * (y - y0)) {
                return false;
            }
        }
        return true;

=======

        int n = coordinates.size();
        if (n == 2) return true;
        int dx = coordinates[1][0] - coordinates[0][0];
        int dy = coordinates[1][1] - coordinates[0][1];
        for (int i = 2; i < n; ++i) {
            int dx2 = coordinates[i][0] - coordinates[0][0];
            int dy2 = coordinates[i][1] - coordinates[0][1];
            if (dx * dy2 != dx2 * dy) return false;
        }
        return true;

=======

        for (int i = 2; i < coordinates.size(); i++) {
            if ((coordinates[i][0] - coordinates[i - 1][0]) * (coordinates[i - 1][1] - coordinates[i - 2][1]) !=
                (coordinates[i][1] - coordinates[i - 1][1]) * (coordinates[i - 1][0] - coordinates[i - 2][0])) {
                return false;
            }
        }
        return true;

=======

        int n = coordinates.size();
        if (n == 2) return true;
        int x0 = coordinates[0][0], y0 = coordinates[0][1];
        int x1 = coordinates[1][0], y1 = coordinates[1][1];
        int x2, y2;
        for (int i = 2; i < n; i++) {
            x2 = coordinates[i][0], y2 = coordinates[i][1];
            if ((x2 - x1) * (y1 - y0) != (x1 - x0) * (y2 - y1)) return false;
        }
        return true;

=======

        if (coordinates.size() == 2) return true;
        int dy = coordinates[1][1] - coordinates[0][1];
        int dx = coordinates[1][0] - coordinates[0][0];
        for (int i = 2; i < coordinates.size(); i++) {
            int dy1 = coordinates[i][1] - coordinates[0][1];
            int dx1 = coordinates[i][0] - coordinates[0][0];
            if (dy * dx1 != dy1 * dx) return false;
        }
        return true;

=======

        int n = coordinates.size();
        if (n == 2) return true;
        int x0 = coordinates[0][0];
        int y0 = coordinates[0][1];
        int x1 = coordinates[1][0];
        int y1 = coordinates[1][1];
        int dx = x1 - x0;
        int dy = y1 - y0;
        for (int i = 2; i < n; i++) {
            int x = coordinates[i][0];
            int y = coordinates[i][1];
            if (dx * (y - y0) != dy * (x - x0)) {
                return false;
            }
        }
        return true;

=======

        int n = coordinates.size();
        if (n == 2) return true;
        int x1 = coordinates[0][0], y1 = coordinates[0][1];
        int x2 = coordinates[1][0], y2 = coordinates[1][1];
        for (int i = 2; i < n; i++) {
            int x = coordinates[i][0], y = coordinates[i][1];
            if ((x - x1) * (y2 - y1) != (x2 - x1) * (y - y1)) return false;
        }
        return true;

=======

        if (coordinates.size() == 2) return true;
        double x0 = coordinates[0][0], y0 = coordinates[0][1];
        double x1 = coordinates[1][0], y1 = coordinates[1][1];
        double k = (y1 - y0) / (x1 - x0);
        for (int i = 2; i < coordinates.size(); i++) {
            double x = coordinates[i][0], y = coordinates[i][1];
            if (abs((y - y0) / (x - x0) - k) > 1e-8) return false;
        }
        return true;

=======

        if (coordinates.size() <= 2) {
            return true;
        }
        double k = 0;
        if (coordinates[0][0] == coordinates[1][0]) {
            k = INT_MAX;
        } else {
            k = 1.0 * (coordinates[0][1] - coordinates[1][1]) / (coordinates[0][0] - coordinates[1][0]);
        }
        for (int i = 2; i < coordinates.size(); i++) {
            if (coordinates[i][0] == coordinates[0][0]) {
                if (k != INT_MAX) {
                    return false;
                }
            } else {
                double k1 = 1.0 * (coordinates[i][1] - coordinates[0][1]) / (coordinates[i][0] - coordinates[0][0]);
                if (k1 != k) {
                    return false;
                }
            }
        }
        return true;
