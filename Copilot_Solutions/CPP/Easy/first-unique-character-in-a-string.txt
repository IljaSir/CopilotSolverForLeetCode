Synthesizing 10/10 solutions

=======

        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (m[s[i]] == 1) {
                return i;
            }
        }
        return -1;

=======

        int freq[26] = {0};
        for (char c : s) {
            freq[c - 'a']++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (freq[s[i] - 'a'] == 1) {
                return i;
            }
        }
        return -1;

=======

        unordered_map<char, int> m;
        for (auto c : s) {
            m[c]++;
        }
        for (int i = 0; i < s.size(); ++i) {
            if (m[s[i]] == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = s.length();
        unordered_map<char, int> m;
        for (int i = 0; i < n; i++) {
            m[s[i]]++;
        }
        for (int i = 0; i < n; i++) {
            if (m[s[i]] == 1) return i;
        }
        return -1;

=======

        int cnt[26] = {0};
        for (auto c : s) {
            cnt[c - 'a']++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (cnt[s[i] - 'a'] == 1) {
                return i;
            }
        }
        return -1;

=======

        int freq[26] = {0};
        for (auto c: s) {
            freq[c - 'a']++;
        }
        for (int i = 0; i < s.size(); i++) {
            if (freq[s[i] - 'a'] == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = s.size();
        vector<int> cnt(26);
        for (int i = 0; i < n; ++i) {
            cnt[s[i] - 'a']++;
        }
        for (int i = 0; i < n; ++i) {
            if (cnt[s[i] - 'a'] == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = s.length();
        int count[26] = {0};
        for (int i = 0; i < n; i++)
            count[s[i] - 'a']++;
        for (int i = 0; i < n; i++)
            if (count[s[i] - 'a'] == 1)
                return i;
        return -1;

=======

        int len = s.length();
        unordered_map<char, int> hash;
        for (int i = 0; i < len; i++) {
            hash[s[i]]++;
        }
        for (int i = 0; i < len; i++) {
            if (hash[s[i]] == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = s.size();
        if(n == 0) return -1;
        if(n == 1) return 0;
        int cnt[26] = {0};
        for(int i = 0; i < n; i++) cnt[s[i] - 'a']++;
        for(int i = 0; i < n; i++) if(cnt[s[i] - 'a'] == 1) return i;
        return -1;
