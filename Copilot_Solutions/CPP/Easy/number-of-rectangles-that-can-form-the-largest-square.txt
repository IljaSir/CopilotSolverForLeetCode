Synthesizing 10/10 solutions

=======

        int maxLen = 0;
        int cnt = 0;
        for (auto& r : rectangles) {
            int len = min(r[0], r[1]);
            if (len > maxLen) {
                maxLen = len;
                cnt = 1;
            } else if (len == maxLen) {
                cnt++;
            }
        }
        return cnt;

=======

        int maxLen = 0, cnt = 0;
        for (auto& r : rectangles) {
            int len = min(r[0], r[1]);
            if (len > maxLen) {
                maxLen = len;
                cnt = 1;
            } else if (len == maxLen) {
                cnt++;
            }
        }
        return cnt;

=======

        int maxLen = 0;
        int count = 0;
        for (auto& rectangle : rectangles) {
            int len = min(rectangle[0], rectangle[1]);
            if (len > maxLen) {
                maxLen = len;
                count = 1;
            } else if (len == maxLen) {
                count++;
            }
        }
        return count;

=======

        int maxLen = 0;
        int count = 0;
        for (auto &r : rectangles) {
            int len = min(r[0], r[1]);
            if (len > maxLen) {
                maxLen = len;
                count = 1;
            } else if (len == maxLen) {
                ++count;
            }
        }
        return count;

=======

        int maxLen = 0;
        for (auto &r: rectangles) {
            maxLen = max(maxLen, min(r[0], r[1]));
        }
        int cnt = 0;
        for (auto &r: rectangles) {
            if (maxLen == min(r[0], r[1])) {
                cnt++;
            }
        }
        return cnt;

=======

        int maxLen = 0, cnt = 0;
        for (auto& rec : rectangles) {
            int len = min(rec[0], rec[1]);
            if (len > maxLen) {
                maxLen = len;
                cnt = 1;
            } else if (len == maxLen) {
                ++cnt;
            }
        }
        return cnt;

=======

        int maxLen = 0;
        int cnt = 0;
        for (auto &rect : rectangles) {
            int len = min(rect[0], rect[1]);
            if (len > maxLen) {
                maxLen = len;
                cnt = 1;
            } else if (len == maxLen) {
                ++cnt;
            }
        }
        return cnt;

=======

        int maxLen = 0, res = 0;
        for (auto& rec: rectangles) {
            int len = min(rec[0], rec[1]);
            if (len > maxLen) {
                maxLen = len;
                res = 1;
            } else if (len == maxLen) {
                res++;
            }
        }
        return res;

=======

        int maxLen = 0, cnt = 0;
        for (const auto& rect : rectangles) {
            int len = min(rect[0], rect[1]);
            if (len > maxLen) {
                maxLen = len;
                cnt = 1;
            } else if (len == maxLen) {
                cnt++;
            }
        }
        return cnt;

=======

        int maxLen = 0;
        int count = 0;
        for (auto& rect : rectangles) {
            int minLen = rect[0] < rect[1] ? rect[0] : rect[1];
            if (minLen > maxLen) {
                maxLen = minLen;
                count = 1;
            } else if (minLen == maxLen) {
                count++;
            }
        }
        return count;
