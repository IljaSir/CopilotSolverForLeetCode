Synthesizing 10/10 solutions

=======

        int i = a.size() - 1, j = b.size() - 1, carry = 0;
        string ans = "";
        while (i >= 0 || j >= 0 || carry != 0) {
            int sum = carry;
            if (i >= 0) sum += a[i--] - '0';
            if (j >= 0) sum += b[j--] - '0';
            ans += to_string(sum % 2);
            carry = sum / 2;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        string res;
        int i = a.size() - 1, j = b.size() - 1, carry = 0;
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (i >= 0) sum += a[i--] - '0';
            if (j >= 0) sum += b[j--] - '0';
            res.push_back(sum % 2 + '0');
            carry = sum / 2;
        }
        if (carry) res.push_back('1');
        reverse(res.begin(), res.end());
        return res;

=======

        int i = a.size() - 1;
        int j = b.size() - 1;
        string res;
        int carry = 0;
        while (i >= 0 || j >= 0) {
            int sum = carry;
            if (i >= 0) {
                sum += a[i--] - '0';
            }
            if (j >= 0) {
                sum += b[j--] - '0';
            }
            res += to_string(sum % 2);
            carry = sum / 2;
        }
        if (carry) {
            res += '1';
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int n = a.size(), m = b.size();
        if (n < m) return addBinary(b, a);
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());
        int carry = 0;
        for (int i = 0; i < n; ++i) {
            carry += a[i] - '0';
            if (i < m) carry += b[i] - '0';
            a[i] = carry % 2 + '0';
            carry /= 2;
        }
        if (carry) {
            a += (carry + '0');
        }
        reverse(a.begin(), a.end());
        return a;

=======

        int i = a.size() - 1;
        int j = b.size() - 1;
        int carry = 0;
        string res = "";
        while (i >= 0 || j >= 0 || carry == 1) {
            carry += (i >= 0) ? a[i] - '0' : 0;
            carry += (j >= 0) ? b[j] - '0' : 0;
            res = char(carry % 2 + '0') + res;
            carry /= 2;
            i--;
            j--;
        }
        return res;

=======

        int i = a.length() - 1;
        int j = b.length() - 1;
        int carry = 0;
        string ans = "";
        while (i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) {
                sum += a[i] - '0';
                i--;
            }
            if (j >= 0) {
                sum += b[j] - '0';
                j--;
            }
            carry = sum / 2;
            sum = sum % 2;
            ans += to_string(sum);
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int i = a.size() - 1;
        int j = b.size() - 1;
        int carry = 0;
        string result = "";
        while (i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) {
                sum += a[i] - '0';
                --i;
            }
            if (j >= 0) {
                sum += b[j] - '0';
                --j;
            }
            carry = sum / 2;
            sum %= 2;
            result = to_string(sum) + result;
        }
        return result;

=======

        string res = "";
        int i = a.length() - 1, j = b.length() - 1, carry = 0;
        while (i >= 0 || j >= 0 || carry) {
            if (i >= 0) carry += a[i--] - '0';
            if (j >= 0) carry += b[j--] - '0';
            res = to_string(carry % 2) + res;
            carry /= 2;
        }
        return res;

=======

        int n = a.size();
        int m = b.size();
        int i = n - 1;
        int j = m - 1;
        string ans;
        int carry = 0;
        while (i >= 0 || j >= 0) {
            int x = 0;
            int y = 0;
            if (i >= 0) {
                x = a[i] - '0';
            }
            if (j >= 0) {
                y = b[j] - '0';
            }
            int sum = x + y + carry;
            ans.push_back(sum % 2 + '0');
            carry = sum / 2;
            --i;
            --j;
        }
        if (carry) {
            ans.push_back('1');
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int i = a.length() - 1;
        int j = b.length() - 1;
        string res = "";
        int carry = 0;
        while(i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) {
                sum += a[i--] - '0';
            }
            if (j >= 0) {
                sum += b[j--] - '0';
            }
            res += to_string(sum % 2);
            carry = sum / 2;
        }
        reverse(res.begin(), res.end());
        return res;
