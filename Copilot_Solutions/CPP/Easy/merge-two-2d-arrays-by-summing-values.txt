Synthesizing 10/10 solutions

=======

        int i = 0, j = 0;
        vector<vector<int>> res;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i][0] == nums2[j][0]) {
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                ++i, ++j;
            } else if (nums1[i][0] < nums2[j][0]) {
                res.push_back(nums1[i++]);
            } else {
                res.push_back(nums2[j++]);
            }
        }
        while (i < nums1.size()) {
            res.push_back(nums1[i++]);
        }
        while (j < nums2.size()) {
            res.push_back(nums2[j++]);
        }
        return res;

=======

        vector<vector<int>> res;
        int i = 0, j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i][0] < nums2[j][0]) {
                res.push_back(nums1[i]);
                i++;
            } else if (nums1[i][0] > nums2[j][0]) {
                res.push_back(nums2[j]);
                j++;
            } else {
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            }
        }
        while (i < nums1.size()) {
            res.push_back(nums1[i]);
            i++;
        }
        while (j < nums2.size()) {
            res.push_back(nums2[j]);
            j++;
        }
        return res;

=======

        vector<vector<int>> result;
        int i = 0, j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i][0] < nums2[j][0]) {
                result.push_back(nums1[i++]);
            } else if (nums1[i][0] > nums2[j][0]) {
                result.push_back(nums2[j++]);
            } else {
                result.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++; j++;
            }
        }
        while (i < nums1.size()) {
            result.push_back(nums1[i++]);
        }
        while (j < nums2.size()) {
            result.push_back(nums2[j++]);
        }
        return result;

=======

        vector<vector<int>> res;
        int i = 0, j = 0;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i][0] == nums2[j][0]){
                vector<int> tmp;
                tmp.push_back(nums1[i][0]);
                tmp.push_back(nums1[i][1] + nums2[j][1]);
                res.push_back(tmp);
                i++;
                j++;
            }else if(nums1[i][0] < nums2[j][0]){
                res.push_back(nums1[i]);
                i++;
            }else{
                res.push_back(nums2[j]);
                j++;
            }
        }
        while(i < nums1.size()){
            res.push_back(nums1[i]);
            i++;
        }
        while(j < nums2.size()){
            res.push_back(nums2[j]);
            j++;
        }
        return res;

=======

        int m = nums1.size(), n = nums2.size();
        int i = 0, j = 0;
        vector<vector<int>> res;
        while (i < m && j < n) {
            if (nums1[i][0] == nums2[j][0]) {
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                res.push_back(nums1[i++]);
            } else {
                res.push_back(nums2[j++]);
            }
        }
        while (i < m) {
            res.push_back(nums1[i++]);
        }
        while (j < n) {
            res.push_back(nums2[j++]);
        }
        return res;

=======

        int i = 0, j = 0;
        vector<vector<int>> res;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i][0] == nums2[j][0]){
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            }
            else if(nums1[i][0] < nums2[j][0]){
                res.push_back(nums1[i]);
                i++;
            }
            else{
                res.push_back(nums2[j]);
                j++;
            }
        }
        while(i < nums1.size()){
            res.push_back(nums1[i]);
            i++;
        }
        while(j < nums2.size()){
            res.push_back(nums2[j]);
            j++;
        }
        return res;

=======

        int i = 0, j = 0;
        vector<vector<int>> ans;
        while (i < nums1.size() || j < nums2.size()) {
            if (i < nums1.size() && j < nums2.size()) {
                if (nums1[i][0] == nums2[j][0]) {
                    ans.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                    i++;
                    j++;
                } else if (nums1[i][0] < nums2[j][0]) {
                    ans.push_back(nums1[i]);
                    i++;
                } else {
                    ans.push_back(nums2[j]);
                    j++;
                }
            } else if (i < nums1.size()) {
                ans.push_back(nums1[i]);
                i++;
            } else {
                ans.push_back(nums2[j]);
                j++;
            }
        }
        return ans;

=======

        int n = nums1.size(), m = nums2.size();
        vector<vector<int>> res;
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (nums1[i][0] < nums2[j][0]) {
                res.push_back(nums1[i]);
                ++i;
            } else if (nums1[i][0] > nums2[j][0]) {
                res.push_back(nums2[j]);
                ++j;
            } else {
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                ++i; ++j;
            }
        }
        while (i < n) {
            res.push_back(nums1[i]);
            ++i;
        }
        while (j < m) {
            res.push_back(nums2[j]);
            ++j;
        }
        return res;

=======

        vector<vector<int>> res;
        int i = 0, j = 0;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i][0] < nums2[j][0]){
                res.push_back(nums1[i++]);
            }else if(nums1[i][0] > nums2[j][0]){
                res.push_back(nums2[j++]);
            }else{
                res.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            }
        }
        while(i < nums1.size()){
            res.push_back(nums1[i++]);
        }
        while(j < nums2.size()){
            res.push_back(nums2[j++]);
        }
        return res;

=======

        int i = 0, j = 0;
        vector<vector<int>> ans;
        while (i < nums1.size() and j < nums2.size()) {
            if (nums1[i][0] == nums2[j][0]) {
                ans.push_back({nums1[i][0], nums1[i][1] + nums2[j][1]});
                ++i;
                ++j;
            } else if (nums1[i][0] < nums2[j][0]) {
                ans.push_back(nums1[i++]);
            } else {
                ans.push_back(nums2[j++]);
            }
        }
        while (i < nums1.size()) {
            ans.push_back(nums1[i++]);
        }
        while (j < nums2.size()) {
            ans.push_back(nums2[j++]);
        }
        return ans;
