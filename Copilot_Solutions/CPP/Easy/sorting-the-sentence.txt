Synthesizing 10/10 solutions

=======

        vector<string> words;
        string word;
        for (auto c : s) {
            if (c == ' ') {
                words.push_back(word);
                word = "";
            } else {
                word += c;
            }
        }
        words.push_back(word);
        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.back() < b.back();
        });
        string result;
        for (auto& word : words) {
            result += word.substr(0, word.size() - 1);
            result += ' ';
        }
        result.pop_back();
        return result;

=======

        vector<string> words;
        string word;
        for (auto c: s) {
            if (c == ' ') {
                words.push_back(word);
                word.clear();
            } else {
                word.push_back(c);
            }
        }
        words.push_back(word);
        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.back() < b.back();
        });
        string res;
        for (auto& w: words) {
            res.append(w.begin(), w.end() - 1);
            res.push_back(' ');
        }
        res.pop_back();
        return res;

=======

        vector<string> words;
        string word;
        for (auto c: s) {
            if (c == ' ') {
                words.push_back(word);
                word = "";
            } else if (c >= '0' && c <= '9') {
                word += string(1, c);
            } else {
                word += string(1, c);
            }
        }
        words.push_back(word);
        sort(words.begin(), words.end(), [](string &a, string &b) {
            return a.back() < b.back();
        });
        string res;
        for (auto word: words) {
            res += word.substr(0, word.size() - 1);
            res += ' ';
        }
        res.pop_back();
        return res;

=======

        vector<string> words;
        string word;
        for (char c : s) {
            if (c == ' ') {
                words.push_back(word);
                word = "";
            } else if (c >= '1' && c <= '9') {
                word = word + c;
            } else {
                word = word + c;
            }
        }
        words.push_back(word);
        sort(words.begin(), words.end(), [](string a, string b) {
            return a.back() < b.back();
        });
        string ans;
        for (int i = 0; i < words.size(); i++) {
            if (i) ans += ' ';
            ans += words[i].substr(0, words[i].size() - 1);
        }
        return ans;

=======

        vector<string> v;
        string temp;
        for (auto c : s) {
            if (c == ' ') {
                v.push_back(temp);
                temp = "";
            } else if (c >= '0' && c <= '9') {
                v.push_back(temp);
                temp = "";
            } else {
                temp += c;
            }
        }
        v.push_back(temp);
        temp = "";
        sort(v.begin(), v.end(), [](string& a, string& b) {
            return a.back() < b.back();
        });
        for (auto s : v) {
            temp += s.substr(0, s.length() - 1);
            temp += ' ';
        }
        temp.pop_back();
        return temp;

=======

        string result = "";
        vector<string> words(10);
        for (int i = 0; i < s.length(); i++) {
            int j = i;
            while (j < s.length() && s[j] != ' ') j++;
            int k = j - 1;
            while (k >= i && s[k] >= '0' && s[k] <= '9') k--;
            words[s[j - 1] - '0'] = s.substr(i, k - i + 1);
            i = j;
        }
        for (int i = 1; i < 10; i++) {
            if (words[i] != "") {
                result += words[i];
                result += " ";
            }
        }
        result.pop_back();
        return result;

=======

        int n = s.length();
        if (n == 0) return "";
        string res = "";
        unordered_map<int, string> m;
        for (int i = 0; i < n; i++) {
            string tmp = "";
            while (i < n && s[i] != ' ') {
                tmp += s[i++];
            }
            m[tmp.back() - '0'] = tmp.substr(0, tmp.length() - 1);
        }
        for (int i = 1; i <= m.size(); i++) {
            res += m[i] + " ";
        }
        res.pop_back();
        return res;

=======

        vector<string> words(9);
        int wordIndex = 0;
        string word;
        for (char c : s) {
            if (c >= 'a' && c <= 'z') {
                word += c;
            } else if (c >= 'A' && c <= 'Z') {
                word += c;
            } else if (c >= '1' && c <= '9') {
                words[c - '1'] = word;
                word = "";
            }
        }
        string result;
        for (string w : words) {
            if (w.length() > 0) {
                result += w + " ";
            }
        }
        result.pop_back();
        return result;

=======

        string res = "";
        vector<string> v(s.size());
        int n = s.size();
        for(int i = 0; i < n; i++) {
            if(s[i] == ' ') continue;
            int j = i;
            while(s[j] != ' ' && s[j] != '\0') j++;
            string t = s.substr(i, j - i);
            int k = t.size() - 1;
            while(t[k] >= '0' && t[k] <= '9') k--;
            int pos = stoi(t.substr(k + 1));
            v[pos - 1] = t.substr(0, k + 1);
            i = j;
        }
        for(int i = 0; i < v.size(); i++) {
            if(v[i] == "") break;
            res += v[i];
            res += " ";
        }
        res.pop_back();
        return res;

=======

        int n = s.size();
        vector<string> v(10);
        int count = 0;
        for(int i = 0; i < n; i++) {
            int j = i+1;
            while(j < n && s[j] != ' ') j++;
            int num = s[j-1] - '0';
            v[num] = s.substr(i, j-i-1);
            i = j;
        }
        string ans = "";
        for(int i = 1; i <= 9; i++) {
            if(v[i] != "") {
                ans += v[i] + " ";
            }
        }
        ans.pop_back();
        return ans;
