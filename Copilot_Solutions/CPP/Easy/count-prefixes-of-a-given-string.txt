Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < words.size(); ++i) {
            if (s.find(words[i]) == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < words.size(); i++) {
            if (words[i].size() <= s.size()) {
                bool isPrefix = true;
                for (int j = 0; j < words[i].size(); j++) {
                    if (words[i][j] != s[j]) {
                        isPrefix = false;
                        break;
                    }
                }
                if (isPrefix) count++;
            }
        }
        return count;

=======

        int count = 0;
        for (string word: words) {
            if (s.substr(0, word.size()) == word) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (auto& word : words) {
            if (s.substr(0, word.length()) == word) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (auto w : words) {
            if (w.size() > s.size()) continue;
            if (w == s.substr(0, w.size())) count++;
        }
        return count;

=======

        int cnt = 0;
        for (string w : words) {
            if (s.find(w) == 0) {
                cnt++;
            }
        }
        return cnt;

=======

        int count = 0;
        for (auto word : words) {
            if (s.length() < word.length()) continue;
            if (s.substr(0, word.length()) == word) count++;
        }
        return count;
    }
    int numOfStrings(vector<string>& words, string s) {
        int count = 0;
        for (auto word : words) {
            if (s.length() < word.length()) continue;
            if (countPrefixes(words, word) > 0) count++;
        }
        return count;

=======

        int count = 0;
        for(auto word : words) {
            if(word.size() <= s.size()) {
                if(s.substr(0, word.size()) == word) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (const string& w : words) {
            if (s.find(w) == 0) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        for (auto& w : words) {
            if (w.size() <= s.size()) {
                bool ok = true;
                for (int i = 0; i < w.size(); i++) {
                    if (w[i] != s[i]) {
                        ok = false;
                        break;
                    }
                }
                if (ok) res++;
            }
        }
        return res;
