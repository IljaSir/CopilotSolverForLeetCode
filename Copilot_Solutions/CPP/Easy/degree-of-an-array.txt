Synthesizing 10/10 solutions

=======

        unordered_map<int, int> left, right, count;
        for (int i = 0; i < nums.size(); i++) {
            int x = nums[i];
            if (!left.count(x)) left[x] = i;
            right[x] = i;
            count[x]++;
        }

        int ans = nums.size();
        int degree = *max_element(count.begin(), count.end(), [](const auto& a, const auto& b) {
            return a.second < b.second;
        })->second;
        for (auto& [x, c]: count) {
            if (c == degree) {
                ans = min(ans, right[x] - left[x] + 1);
            }
        }
        return ans;

=======

        unordered_map<int, int> left, right, count;
        for (int i = 0; i < nums.size(); i++) {
            int x = nums[i];
            if (left.find(x) == left.end()) left[x] = i;
            right[x] = i;
            count[x]++;
        }

        int ans = nums.size();
        int degree = *max_element(count.begin(), count.end(), [](const pair<int, int>& p1, const pair<int, int>& p2) {
            return p1.second < p2.second;
        }).second;
        for (auto& p : count) {
            int x = p.first;
            if (count[x] == degree) {
                ans = min(ans, right[x] - left[x] + 1);
            }
        }
        return ans;

=======

        unordered_map<int, int> left, right, count;
        for (int i = 0; i < nums.size(); i++) {
            if (left.find(nums[i]) == left.end()) {
                left[nums[i]] = i;
            }
            right[nums[i]] = i;
            count[nums[i]]++;
        }
        int ans = nums.size();
        int degree = 0;
        for (auto& kv : count) {
            if (kv.second > degree) {
                degree = kv.second;
                ans = right[kv.first] - left[kv.first] + 1;
            }
            else if (kv.second == degree) {
                ans = min(ans, right[kv.first] - left[kv.first] + 1);
            }
        }
        return ans;

=======

        unordered_map<int, int> count;
        unordered_map<int, int> first;
        int res = 0, degree = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (first.count(nums[i]) == 0) first[nums[i]] = i;
            count[nums[i]]++;
            if (count[nums[i]] > degree) {
                degree = count[nums[i]];
                res = i - first[nums[i]] + 1;
            } else if (count[nums[i]] == degree) {
                res = min(res, i - first[nums[i]] + 1);
            }
        }
        return res;

=======

        unordered_map<int, int> count;
        unordered_map<int, int> first;
        int maxCount = 0;
        int minLen = nums.size();
        for (int i = 0; i < nums.size(); ++i) {
            if (count.find(nums[i]) == count.end()) {
                count[nums[i]] = 1;
                first[nums[i]] = i;
            } else {
                ++count[nums[i]];
            }
            if (count[nums[i]] > maxCount) {
                maxCount = count[nums[i]];
                minLen = i - first[nums[i]] + 1;
            } else if (count[nums[i]] == maxCount) {
                minLen = min(minLen, i - first[nums[i]] + 1);
            }
        }
        return minLen;

=======

        unordered_map<int, vector<int>> m;
        for(int i = 0; i < nums.size(); ++i) {
            m[nums[i]].push_back(i);
        }
        int max_degree = 0;
        int min_len = 0;
        for(auto& p : m) {
            int degree = p.second.size();
            if(degree > max_degree) {
                max_degree = degree;
                min_len = p.second.back() - p.second.front() + 1;
            } else if(degree == max_degree) {
                min_len = min(min_len, p.second.back() - p.second.front() + 1);
            }
        }
        return min_len;

=======

        unordered_map<int, int> m;
        int max_count = 0;
        for (int i = 0; i < nums.size(); i++) {
            m[nums[i]]++;
            max_count = max(max_count, m[nums[i]]);
        }
        int min_len = INT_MAX;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second == max_count) {
                int first = -1, last = -1;
                for (int i = 0; i < nums.size(); i++) {
                    if (nums[i] == it->first) {
                        if (first == -1) {
                            first = i;
                        }
                        last = i;
                    }
                }
                min_len = min(min_len, last - first + 1);
            }
        }
        return min_len;

=======

        map<int, vector<int>> m;
        for(int i = 0; i < nums.size(); i++) {
            m[nums[i]].push_back(i);
        }
        int max = 0;
        int min = 50000;
        for(auto i = m.begin(); i != m.end(); i++) {
            if(i->second.size() > max) {
                max = i->second.size();
            }
        }
        for(auto i = m.begin(); i != m.end(); i++) {
            if(i->second.size() == max) {
                if(i->second.back() - i->second.front() < min) {
                    min = i->second.back() - i->second.front();
                }
            }
        }
        return min+1;

=======

        unordered_map<int, int> cnt;
        unordered_map<int, pair<int, int>> loc;
        int max_cnt = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (loc.count(nums[i])) {
                loc[nums[i]].second = i;
                ++cnt[nums[i]];
            } else {
                loc[nums[i]] = {i, i};
                cnt[nums[i]] = 1;
            }
            max_cnt = max(max_cnt, cnt[nums[i]]);
        }
        int ans = nums.size();
        for (auto& p : loc) {
            if (cnt[p.first] == max_cnt) {
                ans = min(ans, p.second.second - p.second.first + 1);
            }
        }
        return ans;

=======

        int maxFreq = 0;
        map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            m[nums[i]]++;
            maxFreq = max(maxFreq, m[nums[i]]);
        }
        map<int, int> firstPos;
        map<int, int> lastPos;
        for (int i = 0; i < nums.size(); i++) {
            if (m[nums[i]] == maxFreq) {
                if (firstPos.find(nums[i]) == firstPos.end()) {
                    firstPos[nums[i]] = i;
                }
                lastPos[nums[i]] = i;
            }
        }
        int minLength = nums.size();
        for (auto it = firstPos.begin(); it != firstPos.end(); it++) {
            minLength = min(minLength, lastPos[it->first] - it->second + 1);
        }
        return minLength;
