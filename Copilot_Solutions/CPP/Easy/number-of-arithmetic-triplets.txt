Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i+1; j < nums.size(); j++) {
                if (nums[j] - nums[i] == diff) {
                    for (int k = j+1; k < nums.size(); k++) {
                        if (nums[k] - nums[j] == diff) {
                            count++;
                        }
                    }
                }
            }
        }
        return count;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                if (nums[j] - nums[i] != diff) continue;
                for (int k = j + 1; k < n; k++) {
                    if (nums[k] - nums[j] == diff) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (nums[i] - nums[j] == diff) {
                    ++dp[i];
                    ans += dp[j];
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] - nums[j] == diff) {
                    if (j - diff >= 0) {
                        dp[i] += dp[j - diff];
                    }
                    dp[i]++;
                }
            }
            ans += dp[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] - nums[j] == diff) {
                    dp[i] += 1 + dp[j];
                    ans += dp[j];
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n - 2; ++i) {
            int j = i + 1;
            int k = i + 2;
            while (k < n) {
                if (nums[k] - nums[j] == diff && nums[j] - nums[i] == diff) {
                    ans++;
                    k++;
                } else if (nums[k] - nums[j] < diff) {
                    k++;
                } else {
                    j++;
                    if (j == k) k++;
                }
            }
        }
        return ans;

=======

        int n = nums.size(), ans = 0;
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] - nums[j] == diff) {
                    dp[i] += dp[j] + 1;
                }
            }
            ans += dp[i];
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<int> dp(n, 0);
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            if (m.count(nums[i] - diff)) {
                dp[i] += m[nums[i] - diff];
            }
            if (m.count(nums[i])) {
                m[nums[i]] += dp[i];
            } else {
                m[nums[i]] = dp[i];
            }
            res += dp[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[nums[i]] = i;
            if (m.find(nums[i] - diff) != m.end()) {
                dp[i] = dp[m[nums[i] - diff]] + 1;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (m.find(nums[i] + diff) != m.end()) {
                res += dp[i];
            }
        }
        return res;

=======

        int count = 0;
        vector<vector<int>> dp(nums.size(), vector<int>(nums.size(), 0));
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[j] - nums[i] == diff) {
                    dp[i][j] = 1;
                    count += 1;
                }
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (dp[i][j] == 1) {
                    for (int k = j + 1; k < nums.size(); k++) {
                        if (nums[k] - nums[j] == diff) {
                            dp[j][k] += dp[i][j];
                            count += dp[i][j];
                        }
                    }
                }
            }
        }
        return count;
