Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        int ans = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i];
            if (nums[i] > nums[i-1]) {
                dp[i] += dp[i-1];
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int res = nums[0];
        int cur = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i - 1]) {
                cur += nums[i];
            } else {
                cur = nums[i];
            }
            res = max(res, cur);
        }
        return res;

=======

        int sum = nums[0];
        int max = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > nums[i - 1]) {
                sum += nums[i];
            } else {
                sum = nums[i];
            }
            if (sum > max) max = sum;
        }
        return max;

=======

        int sum = 0, maxSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (i == nums.size() - 1 || nums[i] >= nums[i+1]) {
                maxSum = max(maxSum, sum);
                sum = 0;
            }
        }
        return maxSum;

=======

        int maxSum = 0;
        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (i == 0 || nums[i] > nums[i - 1]) {
                sum += nums[i];
            } else {
                maxSum = std::max(maxSum, sum);
                sum = nums[i];
            }
        }
        maxSum = std::max(maxSum, sum);
        return maxSum;

=======

        int sum = 0;
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0 || nums[i] > nums[i - 1]) {
                sum += nums[i];
                if (sum > max) {
                    max = sum;
                }
            } else {
                sum = nums[i];
            }
        }
        return max;

=======

        int maxSum = 0;
        int curSum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (i == 0 || nums[i] > nums[i - 1]) {
                curSum += nums[i];
            } else {
                maxSum = max(maxSum, curSum);
                curSum = nums[i];
            }
        }
        maxSum = max(maxSum, curSum);
        return maxSum;

=======

        int max = 0;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0) {
                sum = nums[i];
                continue;
            }
            if (nums[i] > nums[i - 1]) {
                sum += nums[i];
            } else {
                if (sum > max) {
                    max = sum;
                }
                sum = nums[i];
            }
        }
        if (sum > max) {
            max = sum;
        }
        return max;

=======

        int n = nums.size();
        int sum = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i + 1 < n && nums[i] >= nums[i + 1]) {
                res = max(res, sum);
                sum = 0;
            }
        }
        return max(res, sum);

=======

        int n = nums.size(), sum = 0, maxSum = 0;
        for(int i = 0; i < n; i++) {
            if(i == 0 || nums[i] > nums[i - 1]) {
                sum += nums[i];
            }
            else {
                maxSum = max(maxSum, sum);
                sum = nums[i];
            }
        }
        return max(maxSum, sum);
