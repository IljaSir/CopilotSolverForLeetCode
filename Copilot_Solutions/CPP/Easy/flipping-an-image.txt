Synthesizing 10/10 solutions

=======

        int n = image.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < (n + 1) / 2; ++j) {
                int tmp = image[i][j] ^ 1;
                image[i][j] = image[i][n - 1 - j] ^ 1;
                image[i][n - 1 - j] = tmp;
            }
        }
        return image;

=======

        for (int i = 0; i < image.size(); i++) {
            for (int j = 0; j < image[i].size() / 2; j++) {
                int temp = image[i][j];
                image[i][j] = image[i][image[i].size() - j - 1];
                image[i][image[i].size() - j - 1] = temp;
            }
            for (int j = 0; j < image[i].size(); j++) {
                image[i][j] = image[i][j] ^ 1;
            }
        }
        return image;

=======

        int n = image.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int tmp = image[i][j];
                image[i][j] = image[i][n - 1 - j];
                image[i][n - 1 - j] = tmp;
            }
            for (int j = 0; j < n; j++) {
                image[i][j] = !image[i][j];
            }
        }
        return image;

=======

        int n = image.size();
        for(int i=0; i<n; i++){
            for(int j=0; j<n/2; j++){
                swap(image[i][j], image[i][n-j-1]);
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                image[i][j] = image[i][j] == 0 ? 1 : 0;
            }
        }
        return image;

=======

        int n = image.size();
        for (int i = 0; i < n; i++) {
            int left = 0;
            int right = n - 1;
            while (left < right) {
                int temp = image[i][left];
                image[i][left] = image[i][right];
                image[i][right] = temp;
                left++;
                right--;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (image[i][j] == 0) {
                    image[i][j] = 1;
                } else {
                    image[i][j] = 0;
                }
            }
        }
        return image;

=======

        vector<vector<int>> result;
        for (int i = 0; i < image.size(); i++) {
            vector<int> temp;
            for (int j = image[i].size() - 1; j >= 0; j--) {
                temp.push_back(image[i][j] == 0 ? 1 : 0);
            }
            result.push_back(temp);
        }
        return result;

=======

        int n = image.size();
        for (int i = 0; i < n; i++) {
            int l = 0, r = n - 1;
            while (l < r) {
                int tmp = image[i][l];
                image[i][l] = image[i][r];
                image[i][r] = tmp;
                l++;
                r--;
            }
            for (int j = 0; j < n; j++) {
                image[i][j] = 1 - image[i][j];
            }
        }
        return image;

=======

        int n = image.size();
        for (int i = 0; i < n; ++i)
        {
            int j = 0;
            int k = n - 1;
            while (j < k)
            {
                int tmp = image[i][j];
                image[i][j] = image[i][k];
                image[i][k] = tmp;
                ++j;
                --k;
            }
            for (j = 0; j < n; ++j)
            {
                image[i][j] = image[i][j] ? 0 : 1;
            }
        }
        return image;

=======

        for (auto& row : image) {
            std::reverse(row.begin(), row.end());
            for (auto& item : row) {
                item ^= 1;
            }
        }
        return image;

=======

        for (auto &row : image) {
            reverse(row.begin(), row.end());
            for (auto &col : row) {
                col = col ^ 1;
            }
        }
        return image;
