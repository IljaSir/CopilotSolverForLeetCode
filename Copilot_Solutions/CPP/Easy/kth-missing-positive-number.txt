Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (arr[m] - (m + 1) >= k) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return l + k;

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (arr[mid] - (mid + 1) >= k) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return l + k;

=======

        int n = arr.size();
        int l = 0;
        int r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (arr[m] - m - 1 < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l + k;

=======

        int n = arr.size();
        int left = 0;
        int right = n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] - (mid + 1) < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left + k;

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (arr[mid] - (mid + 1) >= k) r = mid - 1;
            else l = mid + 1;
        }
        return l + k;

=======

        int n = arr.size();
        int l = 0, r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (arr[mid] - (mid + 1) < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l + k;

=======

        int i = 0;
        for (int num = 1; num <= 2000; num++) {
            if (i < arr.size() && arr[i] == num) {
                i++;
            } else {
                k--;
                if (k == 0) {
                    return num;
                }
            }
        }
        return 0;

=======

        int n = arr.size();
        int lo = 0, hi = n - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            int diff = arr[mid] - mid - 1;
            if (diff < k) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return lo + k;

=======

        int i = 0;
        int j = 0;
        int missing = 0;
        while (j < arr.size()) {
            if (arr[j] == i + 1) {
                ++i;
                ++j;
            } else {
                ++missing;
                ++i;
            }
            if (missing == k) {
                break;
            }
        }
        while (missing < k) {
            ++missing;
            ++i;
        }
        return i;

=======

        int i = 0, j = 0;
        int n = arr.size();
        while (j < n && arr[j] <= k) {
            if (i + 1 != arr[j]) {
                k--;
            }
            i = arr[j];
            j++;
        }
        return k + i;
