Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < arr.size(); i++) {
            sum += arr[i] * ((i + 1) * (arr.size() - i) + 1) / 2;
        }
        return sum;

=======

        int sum = 0;
        int n = arr.size();
        for (int i = 0; i < n; i++) {
            int left = i + 1;
            int right = n - i;
            int left_odd = left / 2;
            int right_odd = right / 2;
            int left_even = (left + 1) / 2;
            int right_even = (right + 1) / 2;
            sum += (left_odd * right_odd + left_even * right_even) * arr[i];
        }
        return sum;

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            int left = i + 1;
            int right = n - i;
            int left_odd = left / 2;
            int left_even = (left + 1) / 2;
            int right_odd = right / 2;
            int right_even = (right + 1) / 2;
            sum += (left_odd * right_odd + left_even * right_even) * arr[i];
        }
        return sum;

=======

        int sum = 0;
        int n = arr.size();
        for (int i = 0; i < n; i++) {
            sum += arr[i] * ((i + 1) * (n - i) + 1) / 2;
        }
        return sum;

=======

        int n = arr.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int l = i + 1;
            int r = n - i;
            int leftOdd = (l + 1) / 2;
            int leftEven = l / 2;
            int rightOdd = (r + 1) / 2;
            int rightEven = r / 2;
            sum += (leftOdd * rightOdd + leftEven * rightEven) * arr[i];
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < arr.size(); ++i) {
            sum += (i + 1) * (arr.size() - i) / 2;
            sum += (i + 2) * (arr.size() - i - 1) / 2;
        }
        return sum;

=======

        int sum = 0;
        int n = arr.size();
        for (int i = 0; i < n; i++) {
            sum += arr[i] * ((i + 1) / 2) * ((n - i + 1) / 2);
        }
        return sum;

=======

        int sum = 0;
        for(int i = 0; i < arr.size(); i++){
            int temp = 0;
            for(int j = 0; j < arr.size()-i; j++){
                temp += arr[i+j];
                if((i+1)%2 == 1){
                    sum += temp;
                }
            }
        }
        return sum;

=======

        int sum = 0;
        for(int i = 0; i < arr.size(); i++){
            int start = i, end = i;
            while(start >= 0){
                for(int k = start; k <= end; k++){
                    sum += arr[k];
                }
                start--;
                end++;
            }
        }
        return sum;

=======

        int n = arr.size();
        int sum = 0;
        for(int i = 0; i < n; i++) {
            // Number of odd length subarrays that end at arr[i]
            int end = (i + 1) / 2;
            // Number of odd length subarrays that start at arr[i]
            int start = (n - i + 1) / 2;
            sum += (end * start) * arr[i];
        }
        return sum;
