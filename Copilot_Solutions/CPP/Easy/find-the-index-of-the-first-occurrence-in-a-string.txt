Synthesizing 10/10 solutions

=======

        if(needle.size() == 0) return 0;
        if(haystack.size() == 0) return -1;
        for(int i = 0; i < haystack.size(); i++){
            if(haystack[i] == needle[0]){
                int j = 1;
                for(; j < needle.size(); j++){
                    if(haystack[i + j] != needle[j]) break;
                }
                if(j == needle.size()) return i;
            }
        }
        return -1;

=======

        int n = haystack.length();
        int m = needle.length();
        if (m == 0) return 0;
        if (n == 0) return -1;
        for (int i = 0; i < n; i++) {
            if (haystack[i] == needle[0]) {
                if (i + m > n) return -1;
                int j = 1;
                while (j < m) {
                    if (haystack[i + j] != needle[j]) break;
                    j++;
                }
                if (j == m) return i;
            }
        }
        return -1;

=======

        int n = haystack.size();
        int m = needle.size();
        if (n < m) return -1;
        if (m == 0) return 0;
        for (int i = 0; i <= n - m; i++) {
            if (haystack[i] == needle[0]) {
                int j = 1;
                for (; j < m; j++) {
                    if (haystack[i + j] != needle[j])
                        break;
                }
                if (j == m)
                    return i;
            }
        }
        return -1;

=======

        int m = haystack.size(), n = needle.size();
        if (n == 0) return 0;
        for (int i = 0; i < m - n + 1; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (haystack[i + j] != needle[j]) {
                    break;
                }
            }
            if (j == n) return i;
        }
        return -1;

=======

        int n = haystack.length();
        int m = needle.length();
        if(m == 0) return 0;
        for(int i = 0; i < n; i++){
            if(haystack[i] == needle[0]){
                if(n - i < m) return -1;
                for(int j = 1; j < m; j++){
                    if(haystack[i + j] != needle[j]) break;
                    if(j == m - 1) return i;
                }
            }
        }
        return -1;

=======

        int n = haystack.size();
        int m = needle.size();
        for(int i = 0; i <= n - m; i++){
            bool flag = true;
            for(int j = 0; j < m; j++){
                if(haystack[i + j] != needle[j]){
                    flag = false;
                    break;
                }
            }
            if(flag){
                return i;
            }
        }
        return -1;

=======

        if (needle.empty())
            return 0;
        if (haystack.empty())
            return -1;
        int hLen = haystack.length();
        int nLen = needle.length();
        if (hLen < nLen)
            return -1;
        for (int i = 0; i < hLen; i++) {
            if (haystack[i] == needle[0]) {
                if (i + nLen > hLen)
                    return -1;
                int j = 1;
                while (j < nLen && haystack[i + j] == needle[j])
                    j++;
                if (j == nLen)
                    return i;
            }
        }
        return -1;

=======

        if (needle == "") {
            return 0;
        }
        if (haystack == "") {
            return -1;
        }
        int index = haystack.find(needle);
        return index;

=======

        if (needle.empty()) return 0;
        if (haystack.empty()) return -1;
        int i = 0;
        int j = 0;
        int m = haystack.size();
        int n = needle.size();
        while (i < m && j < n) {
            if (haystack[i] == needle[j]) {
                i++;
                j++;
            } else {
                i = i - j + 1;
                j = 0;
            }
        }
        if (j == n) return i - j;
        return -1;

=======

        if(needle.empty()) return 0;
        if(haystack.empty()) return -1;
        int i = 0;
        int j = 0;
        int n = haystack.size();
        int m = needle.size();
        while(i < n && j < m){
            if(haystack[i] == needle[j]){
                i++;
                j++;
            }else{
                i = i - j + 1;
                j = 0;
            }
        }
        if(j == m) return i - m;
        else return -1;
