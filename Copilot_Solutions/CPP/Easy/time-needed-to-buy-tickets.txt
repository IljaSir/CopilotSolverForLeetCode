Synthesizing 10/10 solutions

=======

        int n = tickets.size();
        int ans = 0;
        while (true) {
            bool flag = false;
            for (int i = 0; i < n; i++) {
                if (tickets[i] > 0) {
                    tickets[i]--;
                    ans++;
                    if (i == k && tickets[i] == 0) {
                        flag = true;
                        break;
                    }
                }
            }
            if (flag) break;
        }
        return ans;

=======

        int ans = 0;
        int n = tickets.size();
        for (int i = 0; i < n; i++) {
            if (i == k) {
                ans += tickets[i];
            } else if (i < k) {
                ans += tickets[i] + 1;
            } else {
                if (tickets[i] > tickets[k]) {
                    ans += tickets[i] + 1;
                } else {
                    ans += tickets[i];
                }
            }
        }
        return ans;

=======

        int n = tickets.size();
        int time = 0;
        int i = 0;
        while (true) {
            if (tickets[i] > 0) {
                tickets[i]--;
                time++;
            }
            if (i == k && tickets[i] == 0) {
                break;
            }
            i = (i + 1) % n;
        }
        return time;

=======

        int time = 0;
        int i = 0;
        while (true) {
            if (tickets[i] > 0) {
                tickets[i]--;
                time++;
                if (tickets[i] == 0 && k == i) {
                    break;
                }
            }
            i++;
            if (i == tickets.size()) {
                i = 0;
            }
        }
        return time;

=======

        int n = tickets.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += tickets[i];
        }
        int ans = 0;
        int cur = 0;
        while (sum > 0) {
            for (int i = 0; i < n && sum > 0; i++) {
                if (i == k) {
                    sum -= 1;
                    cur += 1;
                    if (sum == 0) {
                        ans += cur;
                        cur = 0;
                    }
                } else {
                    if (tickets[i] > 0) {
                        tickets[i] -= 1;
                        sum -= 1;
                        cur += 1;
                    } else {
                        ans += cur;
                        cur = 0;
                    }
                }
            }
        }
        return ans;
    }
    int timeRequiredToBuy2(vector<int>& tickets, int k) {
        int n = tickets.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += tickets[i];
        }
        int ans = 0;
        int cur = 0;
        while (sum > 0) {
            for (int i = 0; i < n && sum > 0; i++) {
                if (tickets[i] > 0) {
                    tickets[i] -= 1;
                    sum -= 1;
                    cur += 1;
                    if (i == k) {
                        ans += cur;
                        cur = 0;
                    }
                } else {
                    ans += cur;
                    cur = 0;
                }
            }
        }
        return ans;
    }
    int timeRequiredToBuy1(vector<int>& tickets, int k) {
        int n = tickets.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += tickets[i];
        }
        int ans = 0;
        int cur = 0;
        while (sum > 0) {
            for (int i = 0; i < n && sum > 0; i++) {
                if (tickets[i] > 0) {
                    tickets[i] -= 1;
                    sum -= 1;
                    cur += 1;
                    if (i ==

=======

        int n = tickets.size();
        int sum = 0;
        int i = k;
        while (true) {
            if (tickets[i] > 0) {
                tickets[i]--;
                sum++;
            }
            if (i == n - 1) {
                i = 0;
            } else {
                i++;
            }
            if (tickets[i] == 0) {
                break;
            }
        }
        return sum;

=======

        int n = tickets.size();
        int sum = 0;
        int min = tickets[k];
        for (int i = 0; i < n; i++) {
            if (tickets[i] < min) {
                min = tickets[i];
            }
            sum += tickets[i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (tickets[i] == min) {
                if (i == k) {
                    res += tickets[i];
                    break;
                } else {
                    res += tickets[i];
                }
            } else if (tickets[i] > min) {
                if (i == k) {
                    res += tickets[i] - min;
                    break;
                } else {
                    res += tickets[i] - min;
                }
            }
        }
        return res;
    }
    int timeRequiredToBuy2(vector<int>& tickets, int k) {
        int n = tickets.size();
        int sum = 0;
        int min = tickets[k];
        for (int i = 0; i < n; i++) {
            if (tickets[i] < min) {
                min = tickets[i];
            }
            sum += tickets[i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (tickets[i] == min) {
                if (i == k) {
                    res += tickets[i];
                    break;
                } else {
                    res += tickets[i];
                }
            } else if (tickets[i] > min) {
                if (i == k) {
                    res += tickets[i] - min;
                    break;
                } else {
                    res += tickets[i] - min;
                }
            }
        }
        return res;
    }
    int timeRequiredToBuy3(vector<int>& tickets, int k) {
        int n = tickets.size();
        int sum = 0;
        int min = tickets[k];
        for (int i = 0; i < n; i++) {
            if (tickets[i] < min) {
                min = tickets[i];
            }
            sum += tickets[i];
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (tickets[i] == min) {
                if (i == k)

=======

        int n = tickets.size();
        if (n == 1) return tickets[0];
        vector<int> suffix(n, 0);
        suffix[n - 1] = tickets[n - 1];
        for (int i = n - 2; i >= 0; --i) suffix[i] = suffix[i + 1] + tickets[i];
        int ans = suffix[0];
        for (int i = 0; i < n; ++i) {
            int sum = suffix[i];
            int cnt = (int)ceil((double)sum / (double)n);
            int cur = cnt * n;
            if (i <= k) cur -= suffix[k];
            else cur -= suffix[i - 1];
            ans = max(ans, cur);
        }
        return ans;

=======

        int n = tickets.size();
        int q = 0;
        int i = 0;
        while (true) {
            if (tickets[i] > 0) {
                tickets[i]--;
                q++;
            }
            if (i == k && tickets[i] == 0) break;
            i = (i + 1) % n;
        }
        return q;

=======

        int n = tickets.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int t = 0;
            while (i < n && t + tickets[i] <= tickets[k]) {
                t += tickets[i];
                i++;
            }
            ans += t;
            if (i < n) {
                ans += tickets[k] - t;
            }
        }
        return ans;
