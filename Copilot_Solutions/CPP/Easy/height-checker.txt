Synthesizing 10/10 solutions

=======

        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int res = 0;
        for (int i = 0; i < heights.size(); i++) {
            if (heights[i] != expected[i]) {
                res++;
            }
        }
        return res;

=======

        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int result = 0;
        for (int i = 0; i < heights.size(); i++) {
            if (heights[i] != expected[i]) {
                result++;
            }
        }
        return result;

=======

        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int count = 0;
        for (int i = 0; i < heights.size(); i++) {
            if (expected[i] != heights[i]) {
                count++;
            }
        }
        return count;

=======

        vector<int> sorted = heights;
        sort(sorted.begin(), sorted.end());
        int count = 0;
        for (int i = 0; i < heights.size(); ++i) {
            if (heights[i] != sorted[i]) {
                ++count;
            }
        }
        return count;

=======

        vector<int> expected = heights;
        std::sort(expected.begin(), expected.end());
        int count = 0;
        for (int i = 0; i < heights.size(); i++) {
            if (heights[i] != expected[i]) {
                count++;
            }
        }
        return count;

=======

        vector<int> expected(heights);
        sort(expected.begin(), expected.end());
        int counter = 0;
        for (int i = 0; i < heights.size(); i++) {
            if (heights[i] != expected[i]) {
                counter++;
            }
        }
        return counter;

=======

        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int count = 0;
        for(int i = 0; i < heights.size(); i++){
            if(heights[i] != expected[i])
                count++;
        }
        return count;

=======

        int n = heights.size();
        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (heights[i] != expected[i]) {
                ++res;
            }
        }
        return res;

=======

        int n = heights.size();
        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (heights[i] != expected[i]) {
                ++cnt;
            }
        }
        return cnt;

=======

        int n = heights.size();
        vector<int> expected = heights;
        sort(expected.begin(), expected.end());
        int count = 0;
        for(int i = 0; i < n; i++){
            if(heights[i] != expected[i]){
                count++;
            }
        }
        return count;
