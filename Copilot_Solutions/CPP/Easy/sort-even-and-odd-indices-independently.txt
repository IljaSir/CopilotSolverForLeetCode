Synthesizing 10/10 solutions

=======

        vector<int> odd;
        vector<int> even;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                even.push_back(nums[i]);
            }
            else {
                odd.push_back(nums[i]);
            }
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end(), greater<int>());
        int i = 0;
        int j = 0;
        for (int k = 0; k < nums.size(); k++) {
            if (k % 2 == 0) {
                nums[k] = even[i];
                i++;
            }
            else {
                nums[k] = odd[j];
                j++;
            }
        }
        return nums;

=======

        vector<int> odd, even;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                even.push_back(nums[i]);
            } else {
                odd.push_back(nums[i]);
            }
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end(), greater<int>());
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                nums[i] = even[i / 2];
            } else {
                nums[i] = odd[i / 2];
            }
        }
        return nums;

=======

        int n = nums.size();
        vector<int> odd;
        vector<int> even;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even.push_back(nums[i]);
            } else {
                odd.push_back(nums[i]);
            }
        }
        sort(odd.begin(), odd.end());
        sort(even.begin(), even.end());
        int i = 0, j = 0, k = 0;
        while (i < n) {
            if (i % 2 == 0) {
                nums[i] = even[j];
                j++;
            } else {
                nums[i] = odd[k];
                k++;
            }
            i++;
        }
        return nums;

=======

        int n = nums.size();
        vector<int> odd, even;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even.push_back(nums[i]);
            } else {
                odd.push_back(nums[i]);
            }
        }
        sort(odd.begin(), odd.end());
        sort(even.begin(), even.end());
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                nums[i] = even[i / 2];
            } else {
                nums[i] = odd[i / 2];
            }
        }
        return nums;

=======

        int n = nums.size();
        vector<int> odd, even;
        for (int i = 0; i < n; i++) {
            if (i % 2) {
                odd.push_back(nums[i]);
            } else {
                even.push_back(nums[i]);
            }
        }
        sort(odd.begin(), odd.end(), greater<int>());
        sort(even.begin(), even.end());
        int i = 0;
        for (int x : even) {
            nums[i++] = x;
        }
        for (int x : odd) {
            nums[i++] = x;
        }
        return nums;

=======

        int n=nums.size();
        vector<int> even, odd;
        for(int i=0;i<n;i++){
            if(i%2==0) even.push_back(nums[i]);
            else odd.push_back(nums[i]);
        }
        sort(even.begin(), even.end());
        sort(odd.begin(), odd.end(), greater<int>());
        for(int i=0;i<n;i++){
            if(i%2==0) nums[i]=even[i/2];
            else nums[i]=odd[i/2];
        }
        return nums;

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> odd;
        vector<int> even;
        for(int i = 0; i < n; i++){
            if(i % 2 == 0){
                even.push_back(nums[i]);
            }
            else{
                odd.push_back(nums[i]);
            }
        }
        sort(odd.begin(), odd.end(), greater<int>());
        sort(even.begin(), even.end());
        int j = 0, k = 0;
        for(int i = 0; i < n; i++){
            if(i % 2 == 0){
                ans[i] = even[j];
                j++;
            }
            else{
                ans[i] = odd[k];
                k++;
            }
        }
        return ans;

=======

        // sort the odd indices in descending order
        sort(nums.begin() + 1, nums.end(), greater<int>());
        // sort the even indices in ascending order
        sort(nums.begin(), nums.end() - 1);
        return nums;

=======

        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<int> ans(n,0);
        for(int i=0;i<n;i+=2)
        {
            ans[i] = nums[i/2];
        }
        for(int i=1;i<n;i+=2)
        {
            ans[i] = nums[n/2+(i-1)/2];
        }
        return ans;

=======

        int n = nums.size();
        int i = 0;
        int j = 1;
        while(j < n){
            int tmp = nums[j];
            int k = j;
            while(k > i){
                nums[k] = nums[k-1];
                k--;
            }
            nums[i] = tmp;
            i += 2;
            j += 2;
        }
        return nums;
