Synthesizing 10/10 solutions

=======

        vector<int> scores;
        for (auto op : operations) {
            if (op == "C") {
                scores.pop_back();
            } else if (op == "D") {
                scores.push_back(scores.back() * 2);
            } else if (op == "+") {
                scores.push_back(scores.back() + scores[scores.size() - 2]);
            } else {
                scores.push_back(stoi(op));
            }
        }
        int sum = 0;
        for (auto score : scores) {
            sum += score;
        }
        return sum;

=======

        stack<int> s;
        for (auto& op : operations) {
            if (op == "C") {
                s.pop();
            } else if (op == "D") {
                s.push(s.top() * 2);
            } else if (op == "+") {
                int a = s.top(); s.pop();
                int b = s.top(); s.pop();
                s.push(b);
                s.push(a);
                s.push(a + b);
            } else {
                s.push(stoi(op));
            }
        }
        int ans = 0;
        while (!s.empty()) {
            ans += s.top();
            s.pop();
        }
        return ans;

=======

        int sum = 0;
        vector<int> scores;
        for (int i = 0; i < operations.size(); i++) {
            if (operations[i] == "C") {
                sum -= scores.back();
                scores.pop_back();
            } else if (operations[i] == "D") {
                scores.push_back(scores.back() * 2);
                sum += scores.back();
            } else if (operations[i] == "+") {
                scores.push_back(scores[scores.size() - 1] + scores[scores.size() - 2]);
                sum += scores.back();
            } else {
                scores.push_back(stoi(operations[i]));
                sum += scores.back();
            }
        }
        return sum;

=======

        vector<int> scores;
        for (string op: operations) {
            if (op == "C") {
                scores.pop_back();
            } else if (op == "D") {
                scores.push_back(scores.back() * 2);
            } else if (op == "+") {
                scores.push_back(scores.back() + scores[scores.size() - 2]);
            } else {
                scores.push_back(stoi(op));
            }
        }
        int sum = 0;
        for (int s: scores) {
            sum += s;
        }
        return sum;

=======

        int sum=0;
        stack<int> st;
        for(int i=0;i<operations.size();i++){
            if(operations[i]=="C"){
                sum-=st.top();
                st.pop();
            }
            else if(operations[i]=="D"){
                sum+=2*st.top();
                st.push(2*st.top());
            }
            else if(operations[i]=="+"){
                int top=st.top();
                st.pop();
                int newtop=top+st.top();
                sum+=newtop;
                st.push(top);
                st.push(newtop);
            }
            else{
                st.push(stoi(operations[i]));
                sum+=stoi(operations[i]);
            }
        }
        return sum;

=======

        stack<int> s;
        for (auto op : operations) {
            if (op == "C") {
                if (!s.empty()) s.pop();
            } else if (op == "D") {
                if (!s.empty()) s.push(s.top()*2);
            } else if (op == "+") {
                if (s.size() >= 2) {
                    int a = s.top();
                    s.pop();
                    int b = s.top();
                    s.push(a);
                    s.push(a+b);
                }
            } else {
                s.push(stoi(op));
            }
        }
        int sum = 0;
        while (!s.empty()) {
            sum += s.top();
            s.pop();
        }
        return sum;

=======

        int sum=0;
        vector<int> scores;
        for(int i=0;i<operations.size();i++){
            if(operations[i]=="C"){
                sum-=scores[scores.size()-1];
                scores.pop_back();
            }
            else if(operations[i]=="D"){
                scores.push_back(2*scores[scores.size()-1]);
                sum+=scores[scores.size()-1];
            }
            else if(operations[i]=="+"){
                scores.push_back(scores[scores.size()-1]+scores[scores.size()-2]);
                sum+=scores[scores.size()-1];
            }
            else{
                scores.push_back(stoi(operations[i]));
                sum+=scores[scores.size()-1];
            }
        }
        return sum;

=======

        int sum = 0;
        vector<int> score;
        for (auto& op : operations) {
            if (op == "C") {
                sum -= score.back();
                score.pop_back();
            } else if (op == "D") {
                score.push_back(score.back() * 2);
                sum += score.back();
            } else if (op == "+") {
                score.push_back(score.back() + score[score.size() - 2]);
                sum += score.back();
            } else {
                score.push_back(stoi(op));
                sum += score.back();
            }
        }
        return sum;

=======

        int res = 0;
        vector<int> scores;
        for (auto op : operations) {
            if (op == "+") {
                scores.push_back(scores[scores.size() - 1] + scores[scores.size() - 2]);
            } else if (op == "D") {
                scores.push_back(scores[scores.size() - 1] * 2);
            } else if (op == "C") {
                scores.pop_back();
            } else {
                scores.push_back(stoi(op));
            }
        }
        for (auto score : scores) {
            res += score;
        }
        return res;

=======

        int sum = 0;
        vector<int> scores;
        for(string op : operations) {
            if(op == "+") {
                int last = scores[scores.size() - 1];
                int second_last = scores[scores.size() - 2];
                int new_score = last + second_last;
                scores.push_back(new_score);
                sum += new_score;
            } else if(op == "D") {
                int last = scores[scores.size() - 1];
                int new_score = last * 2;
                scores.push_back(new_score);
                sum += new_score;
            } else if(op == "C") {
                int last = scores[scores.size() - 1];
                scores.pop_back();
                sum -= last;
            } else {
                int new_score = stoi(op);
                scores.push_back(new_score);
                sum += new_score;
            }
        }
        return sum;
