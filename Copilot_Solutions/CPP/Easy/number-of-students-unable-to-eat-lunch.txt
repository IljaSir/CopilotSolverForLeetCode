Synthesizing 10/10 solutions

=======

        int a = 0, b = 0;
        for (int i = 0; i < students.size(); i++) {
            if (students[i] == 0) a++;
            else b++;
        }
        for (int i = 0; i < sandwiches.size(); i++) {
            if (sandwiches[i] == 0) {
                if (a == 0) return b;
                a--;
            } else {
                if (b == 0) return a;
                b--;
            }
        }
        return 0;

=======

        int count = 0;
        while (true) {
            if (students[0] == sandwiches[0]) {
                students.erase(students.begin());
                sandwiches.erase(sandwiches.begin());
                count = 0;
            } else {
                students.push_back(students[0]);
                students.erase(students.begin());
                count++;
            }
            if (count == students.size()) {
                return count;
            }
        }

=======

        int n = students.size();
        int cnt[2] = {0, 0};
        for (int i = 0; i < n; ++i) {
            ++cnt[students[i]];
        }
        for (int i = 0; i < n; ++i) {
            if (cnt[sandwiches[i]] == 0) {
                return n - i;
            }
            --cnt[sandwiches[i]];
        }
        return 0;

=======

        int n = students.size();
        int m = sandwiches.size();
        vector<int> cnt(2, 0);
        for (int i = 0; i < n; i++) {
            cnt[students[i]]++;
        }
        int i = 0;
        while (i < m && cnt[sandwiches[i]]) {
            cnt[sandwiches[i]]--;
            i++;
        }
        return m - i;

=======

        int count = 0;
        while(!students.empty()) {
            if(students[0] == sandwiches[0]) {
                students.erase(students.begin());
                sandwiches.erase(sandwiches.begin());
                count = 0;
            } else {
                students.push_back(students[0]);
                students.erase(students.begin());
                count++;
            }
            if(count == students.size()) break;
        }
        return students.size();

=======

        int c1 = 0;
        int c2 = 0;
        for(int i=0; i<students.size(); i++){
            if(students[i] == 0) c1++;
            else c2++;
        }
        int i = 0;
        while(i<sandwiches.size() && c1 != 0 && c2 != 0){
            if(sandwiches[i] == 0 && c1 != 0){
                c1--;
                i++;
            }else if(sandwiches[i] == 1 && c2 != 0){
                c2--;
                i++;
            }else{
                break;
            }
        }
        return c1 + c2;

=======

        int n = students.size();
        int m = sandwiches.size();
        int i = 0;
        int j = 0;
        while (i < n) {
            if (students[i] == sandwiches[j]) {
                i = 0;
                j++;
            } else {
                i++;
            }
            if (j >= m) {
                break;
            }
        }
        return n - i;

=======

        int count[2] = {0};
        for(int s : students) {
            count[s]++;
        }
        for(int s : sandwiches) {
            if(count[s] == 0) {
                break;
            }
            count[s]--;
        }
        return count[0] + count[1];

=======

        int n = students.size();
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; ++i) {
            cnt[students[i]]++;
        }
        for (int i = 0; i < n; ++i) {
            if (cnt[sandwiches[i]] == 0) {
                return n - i;
            }
            cnt[sandwiches[i]]--;
        }
        return 0;

=======

        int n = students.size();
        int s = sandwiches.size();
        int count[2] = {0, 0};
        for (int i = 0; i < n; ++i) {
            count[students[i]]++;
        }
        int i = 0;
        while (i < s && count[sandwiches[i]]) {
            count[sandwiches[i]]--;
            i++;
        }
        return n - i;
