Synthesizing 10/10 solutions

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m - 1));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m - 1; j++) {
                diff[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            bool flag = true;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (diff[i] != diff[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) return words[i];
        }
        return "";

=======

        int n = words.size(), m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m - 1));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m - 1; j++) {
                diff[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            bool isOdd = true;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (diff[i] == diff[j]) {
                    isOdd = false;
                    break;
                }
            }
            if (isOdd) return words[i];
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m - 1));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m - 1; j++) {
                diff[i][j] = words[i][j + 1] - words[i][j];
            }
        }
        for (int i = 0; i < m - 1; i++) {
            int cnt[26] = {0};
            for (int j = 0; j < n; j++) {
                cnt[diff[j][i] + 13]++;
            }
            for (int j = 0; j < n; j++) {
                if (cnt[diff[j][i] + 13] == 1) {
                    return words[j];
                }
            }
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m-1));
        for(int i=0; i<n; i++) {
            for(int j=0; j<m-1; j++) {
                diff[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for(int i=0; i<n; i++) {
            int j = 0;
            for(; j<n; j++) {
                if(i == j) continue;
                if(diff[i] != diff[j]) break;
            }
            if(j == n) return words[i];
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m-1));
        for(int i=0; i<n; i++) {
            for(int j=0; j<m-1; j++) {
                diff[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for(int i=0; i<n; i++) {
            int j;
            for(j=0; j<n; j++) {
                if(i != j) {
                    if(diff[i] != diff[j]) {
                        break;
                    }
                }
            }
            if(j == n) {
                return words[i];
            }
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        int a[n][m-1];
        for(int i=0;i<n;i++){
            for(int j=0;j<m-1;j++){
                a[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for(int i=0;i<n;i++){
            int count = 0;
            for(int j=0;j<n;j++){
                if(i!=j){
                    for(int k=0;k<m-1;k++){
                        if(a[i][k] == a[j][k])
                            count++;
                    }
                }
            }
            if(count == (n-1)*(m-1))
                return words[i];
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diffs(n, vector<int>(m-1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m-1;j++){
                diffs[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for(int i=0;i<n;i++){
            int j = 0;
            for(;j<n;j++){
                if(i==j) continue;
                if(diffs[i]!=diffs[j]) break;
            }
            if(j==n) return words[i];
        }
        return "";

=======

        int n = words.size();
        vector<vector<int>> diff(n-1,vector<int>(n-1,0));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n-1; j++){
                diff[i][j] = words[i][j+1] - words[i][j];
            }
        }
        for(int i = 0; i < n; i++){
            bool flag = false;
            for(int j = 0; j < n-1; j++){
                for(int k = j+1; k < n-1; k++){
                    if(diff[j][k] != diff[i][k]){
                        flag = true;
                        break;
                    }
                }
            }
            if(!flag) return words[i];
        }
        return "";

=======

        int n = words.size();
        int m = words[0].size();
        vector<vector<int>> diff(n, vector<int>(m - 1, 0));
        vector<int> diff2(m - 1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m - 1; j++) {
                diff[i][j] = words[i][j + 1] - words[i][j];
                diff2[j] ^= diff[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            bool flag = true;
            for (int j = 0; j < m - 1; j++) {
                if (diff[i][j] != diff2[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) return words[i];
        }
        return "";

=======

        vector<int> diff;
        for(int i=0;i<words.size();i++){
            diff = diffArray(words[i]);
            for(int j=0;j<words.size();j++){
                if(i==j) continue;
                if(diffArray(words[j])!=diff) return words[j];
            }
        }
        return "";
    }
    vector<int> diffArray(string word){
        vector<int> diff;
        for(int i=0;i<word.size()-1;i++){
            diff.push_back(word[i+1]-word[i]);
        }
        return diff;
