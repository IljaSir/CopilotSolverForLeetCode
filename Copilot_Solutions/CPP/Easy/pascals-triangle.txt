Synthesizing 10/10 solutions

=======

        vector<vector<int>> result;
        for (int i = 0; i < numRows; i++) {
            result.push_back(vector<int>(i + 1, 1));
            for (int j = 1; j < i; j++) {
                result[i][j] = result[i - 1][j - 1] + result[i - 1][j];
            }
        }
        return result;

=======

        vector<vector<int>> result;
        for (int i = 0; i < numRows; i++) {
            vector<int> row(i + 1);
            row[0] = row[i] = 1;
            for (int j = 1; j < i; j++) {
                row[j] = result[i - 1][j - 1] + result[i - 1][j];
            }
            result.push_back(row);
        }
        return result;

=======

        vector<vector<int>> ans;
        if (numRows == 0) return ans;
        ans.push_back({1});
        if (numRows == 1) return ans;
        ans.push_back({1,1});
        if (numRows == 2) return ans;
        for (int i = 2; i < numRows; ++i) {
            vector<int> row;
            for (int j = 0; j <= i; ++j) {
                int val = 0;
                if (j - 1 >= 0) val += ans[i-1][j-1];
                if (j < ans[i-1].size()) val += ans[i-1][j];
                row.push_back(val);
            }
            ans.push_back(row);
        }
        return ans;

=======

        vector<vector<int>> triangle;
        if (numRows == 0) {
            return triangle;
        }
        triangle.push_back(vector<int>{1});
        for (int i = 1; i < numRows; i++) {
            vector<int> row;
            row.push_back(1);
            for (int j = 1; j < i; j++) {
                row.push_back(triangle[i - 1][j - 1] + triangle[i - 1][j]);
            }
            row.push_back(1);
            triangle.push_back(row);
        }
        return triangle;

=======

        vector<vector<int>> ans;
        for (int i = 1; i <= numRows; i++) {
            vector<int> row(i, 1);
            for (int j = 1; j < i - 1; j++) {
                row[j] = ans[i - 2][j - 1] + ans[i - 2][j];
            }
            ans.push_back(row);
        }
        return ans;

=======

        vector<vector<int>> res;
        res.push_back({1});
        for (int i = 1; i < numRows; i++) {
            vector<int> row;
            row.push_back(1);
            for (int j = 1; j < i; j++) {
                row.push_back(res[i-1][j-1] + res[i-1][j]);
            }
            row.push_back(1);
            res.push_back(row);
        }
        return res;

=======

        vector<vector<int>> result;
        if (numRows == 0) return result;
        result.push_back({1});
        for (int i = 1; i < numRows; i++) {
            vector<int> row;
            row.push_back(1);
            for (int j = 1; j < i; j++) {
                row.push_back(result[i - 1][j - 1] + result[i - 1][j]);
            }
            row.push_back(1);
            result.push_back(row);
        }
        return result;

=======

        vector<vector<int>> result;
        if (numRows == 0) return result;
        vector<int> row;
        row.push_back(1);
        result.push_back(row);
        for (int i = 1; i < numRows; i++) {
            vector<int> row;
            row.push_back(1);
            for (int j = 1; j < i; j++) {
                row.push_back(result[i - 1][j - 1] + result[i - 1][j]);
            }
            row.push_back(1);
            result.push_back(row);
        }
        return result;

=======

        vector<vector<int>> ans;
        for(int i=0;i<numRows;i++){
            vector<int> temp(i+1);
            temp[0]=1;
            temp[i]=1;
            for(int j=1;j<i;j++){
                temp[j]=ans[i-1][j-1]+ans[i-1][j];
            }
            ans.push_back(temp);
        }
        return ans;

=======

        vector<vector<int>> pascal;
        if(numRows == 0) return pascal;
        vector<int> firstRow;
        firstRow.push_back(1);
        pascal.push_back(firstRow);
        if(numRows == 1) return pascal;
        vector<int> secondRow;
        secondRow.push_back(1);
        secondRow.push_back(1);
        pascal.push_back(secondRow);
        if(numRows == 2) return pascal;
        for(int i = 2; i < numRows; i++){
            vector<int> row;
            row.push_back(1);
            for(int j = 1; j < i; j++){
                row.push_back(pascal[i-1][j-1] + pascal[i-1][j]);
            }
            row.push_back(1);
            pascal.push_back(row);
        }
        return pascal;
