Synthesizing 10/10 solutions

=======

        int count1 = 0;
        int count0 = 0;
        int max1 = 0;
        int max0 = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '1') {
                count1++;
                count0 = 0;
                max1 = max(max1, count1);
            }
            else if (s[i] == '0') {
                count0++;
                count1 = 0;
                max0 = max(max0, count0);
            }
        }
        return max1 > max0;

=======

        int c0 = 0, c1 = 0, m0 = 0, m1 = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '0') {
                c0++;
                if (c1 > m1) m1 = c1;
                c1 = 0;
            } else {
                c1++;
                if (c0 > m0) m0 = c0;
                c0 = 0;
            }
        }
        if (c0 > m0) m0 = c0;
        if (c1 > m1) m1 = c1;
        return m1 > m0;

=======

        int count1 = 0, count0 = 0;
        int max1 = 0, max0 = 0;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '1'){
                count1++;
                max1 = max(max1, count1);
                count0 = 0;
            }else{
                count0++;
                max0 = max(max0, count0);
                count1 = 0;
            }
        }
        return max1 > max0;

=======

        int max1 = 0;
        int max0 = 0;
        int cnt1 = 0;
        int cnt0 = 0;
        for (char c : s) {
            if (c == '1') {
                cnt1 ++;
                cnt0 = 0;
            } else {
                cnt0 ++;
                cnt1 = 0;
            }
            max1 = max(max1, cnt1);
            max0 = max(max0, cnt0);
        }
        return max1 > max0;

=======

        int max0 = 0, max1 = 0, c0 = 0, c1 = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '0') {
                c0++;
                max0 = max(max0, c0);
                c1 = 0;
            } else {
                c1++;
                max1 = max(max1, c1);
                c0 = 0;
            }
        }
        return max1 > max0;

=======

        int max1 = 0, max0 = 0;
        int cur1 = 0, cur0 = 0;
        for (auto c : s) {
            if (c == '1') {
                cur1++;
                cur0 = 0;
            } else {
                cur0++;
                cur1 = 0;
            }
            max1 = max(max1, cur1);
            max0 = max(max0, cur0);
        }
        return max1 > max0;

=======

        int l0 = 0, l1 = 0;
        int c0 = 0, c1 = 0;
        for (auto c : s) {
            if (c == '0') {
                c0++;
                if (c1 > l1) {
                    l1 = c1;
                }
                c1 = 0;
            } else {
                c1++;
                if (c0 > l0) {
                    l0 = c0;
                }
                c0 = 0;
            }
        }
        if (c0 > l0) {
            l0 = c0;
        }
        if (c1 > l1) {
            l1 = c1;
        }
        return l1 > l0;

=======

        int max1 = 0, max0 = 0, count1 = 0, count0 = 0;
        for (auto c : s) {
            if (c == '1') {
                count1++;
                count0 = 0;
            } else {
                count0++;
                count1 = 0;
            }
            max1 = max(max1, count1);
            max0 = max(max0, count0);
        }
        return max1 > max0;

=======

        int one = 0, zero = 0;
        int oneMax = 0, zeroMax = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '0') {
                zero++;
                one = 0;
            } else {
                one++;
                zero = 0;
            }
            oneMax = max(oneMax, one);
            zeroMax = max(zeroMax, zero);
        }
        return oneMax > zeroMax;

=======

        int len = s.size();
        int zero = 0;
        int one = 0;
        int maxZero = 0;
        int maxOne = 0;
        for (int i = 0; i < len; i++) {
            if (s[i] == '0') {
                zero++;
                one = 0;
            } else {
                one++;
                zero = 0;
            }
            maxZero = max(maxZero, zero);
            maxOne = max(maxOne, one);
        }
        return maxOne > maxZero;
