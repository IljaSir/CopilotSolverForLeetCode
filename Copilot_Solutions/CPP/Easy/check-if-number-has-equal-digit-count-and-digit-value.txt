Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = num.size();
        vector<int> count(10, 0);
        for (int i = 0; i < n; i++) {
            count[num[i] - '0']++;
        }
        for (int i = 0; i < n; i++) {
            if (count[i] != num[i] - '0') {
                return false;
            }
        }
        return true;

=======

        int n = num.size();
        vector<int> count(10, 0);
        for (int i = 0; i < n; i++) {
            count[num[i] - '0']++;
        }
        for (int i = 0; i < n; i++) {
            if (count[num[i] - '0'] != num[i] - '0') {
                return false;
            }
        }
        return true;

=======

        int arr[10]={0};
        for(int i=0;i<num.size();i++)
        {
            arr[num[i]-'0']++;
        }
        for(int i=0;i<num.size();i++)
        {
            if(arr[num[i]-'0']!=num[i]-'0')
            {
                return false;
            }
        }
        return true;
    }
    bool isGood(string num) {
        return digitCount(num);

=======

        int n = num.size();
        int count[10] = {0};
        for (int i = 0; i < n; ++i) {
            count[num[i] - '0']++;
        }
        for (int i = 0; i < n; ++i) {
            if (count[i] != num[i] - '0') {
                return false;
            }
        }
        return true;
    }
    bool digitValue(string num) {
        int n = num.size();
        int count[10] = {0};
        for (int i = 0; i < n; ++i) {
            count[num[i] - '0']++;
        }
        for (int i = 0; i < 10; ++i) {
            if (count[i] != i) {
                return false;
            }
        }
        return true;

=======

        int n = num.size();
        vector<int> cnt(10, 0);
        for (char c : num) {
            cnt[c - '0']++;
        }
        for (int i = 0; i < n; i++) {
            if (cnt[i] != num[i] - '0') {
                return false;
            }
        }
        return true;

=======

        int n = num.size();
        int arr[10] = {0};
        for(int i = 0; i < n; i++){
            arr[num[i]-'0']++;
        }
        for(int i = 0; i < n; i++){
            if(arr[num[i]-'0'] != num[i]-'0'){
                return false;
            }
        }
        return true;

=======

        int n = num.size();
        for(int i=0; i<n; i++){
            int count = 0;
            for(int j=0; j<n; j++){
                if(num[i] == num[j]){
                    count++;
                }
            }
            if(count != (num[i]-'0')){
                return false;
            }
        }
        return true;

=======

        unordered_map<char, int> m;
        for (auto c : num) m[c]++;
        for (int i = 0; i < num.size(); i++) {
            if (num[i] == '0' && m[num[i]] != 1) return false;
            if (num[i] != '0' && m[num[i]] != num[i] - '0') return false;
        }
        return true;

=======

        int n = num.size();
        for(int i = 0; i < n; i++){
            int x = num[i] - '0';
            if(x == 0){
                if(num[i] != '0') return false;
            }
            else {
                int count = 0;
                for(int j = 0; j < n; j++){
                    if(num[j] == num[i]) count++;
                }
                if(count != x) return false;
            }
        }
        return true;
    }
    bool isStrobogrammatic(string num) {
        int n = num.size();
        if(n == 1){
            if(num[0] == '0' || num[0] == '1' || num[0] == '8') return true;
            else return false;
        }
        if(n == 2){
            if(num[0] == '6' && num[1] == '9') return true;
            else if(num[0] == '9' && num[1] == '6') return true;
            else return false;
        }
        if(n == 3){
            if(num[0] == '8' && num[1] == '1' && num[2] == '8') return true;
            else return false;
        }
        if(n == 4){
            if(num[0] == '1' && num[1] == '8' && num[2] == '8' && num[3] == '1') return true;
            else return false;
        }
        if(n == 5){
            if(num[0] == '6' && num[1] == '8' && num[2] == '1' && num[3] == '8' && num[4] == '6') return true;
            else return false;
        }
        if(n == 6){
            if(num[0] == '1' && num[1] == '8' && num[2] == '8' && num[3] == '1' && num[4] == '8' && num[5] == '8') return true;
            else return false;
        }
        if(n == 7){
            if(num[0] == '8' && num[1] == '1' && num[2] == '8
