Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int result = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                result = min(result, abs(i - start));
            }
        }
        return result;

=======

        int n = nums.size();
        int minDist = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (nums[i] == target) {
                minDist = min(minDist, abs(i - start));
            }
        }
        return minDist;

=======

        int min = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                int distance = abs(i - start);
                if (distance < min) {
                    min = distance;
                }
            }
        }
        return min;

=======

        int min = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                int diff = abs(i - start);
                if (diff < min) {
                    min = diff;
                }
            }
        }
        return min;

=======

        int min = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                int d = abs(i - start);
                if (d < min) {
                    min = d;
                }
            }
        }
        return min;

=======

        int dist = 1000;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == target) {
                dist = min(dist, abs(i - start));
            }
        }
        return dist;

=======

        int n = nums.size();
        int i = start;
        while(i >= 0 && nums[i] != target) {
            i--;
        }
        int j = start;
        while(j < n && nums[j] != target) {
            j++;
        }
        int ans = INT_MAX;
        if(i >= 0) {
            ans = min(ans, abs(i - start));
        }
        if(j < n) {
            ans = min(ans, abs(j - start));
        }
        return ans;

=======

        int min = INT_MAX;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(nums[i] == target) {
                int diff = abs(i - start);
                if(diff < min)
                    min = diff;
            }
        }
        return min;
