Synthesizing 10/10 solutions

=======

        vector<int> answer(queries.size());
        sort(nums.begin(), nums.end());
        for (int i = 0; i < queries.size(); i++) {
            answer[i] = upper_bound(nums.begin(), nums.end(), queries[i]) - nums.begin();
        }
        return answer;

=======

        vector<int> answer;
        for (auto q : queries) {
            int count = 0;
            int sum = 0;
            for (auto n : nums) {
                if (sum + n <= q) {
                    sum += n;
                    count++;
                }
            }
            answer.push_back(count);
        }
        return answer;

=======

        vector<int> ans;
        int n = nums.size();
        int m = queries.size();
        for (int i = 0; i < m; i++) {
            int sum = 0;
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (sum + nums[j] <= queries[i]) {
                    sum += nums[j];
                    count++;
                }
            }
            ans.push_back(count);
        }
        return ans;

=======

        vector<int> answer(queries.size(), 0);
        vector<int> prefixSum(nums.size()+1, 0);
        for (int i = 0; i < nums.size(); ++i) {
            prefixSum[i+1] = prefixSum[i] + nums[i];
        }
        for (int i = 0; i < queries.size(); ++i) {
            int left = 0, right = nums.size();
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (prefixSum[mid+1] <= queries[i]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            answer[i] = left;
        }
        return answer;

=======

        int n = nums.size();
        int m = queries.size();
        vector<int> answer(m);
        vector<int> prefixSum(n+1);
        for (int i = 1; i <= n; ++i) {
            prefixSum[i] = prefixSum[i-1] + nums[i-1];
        }
        for (int i = 0; i < m; ++i) {
            int sum = queries[i];
            int low = 0;
            int high = n;
            while (low < high) {
                int mid = low + (high-low)/2;
                if (prefixSum[mid] <= sum) {
                    low = mid+1;
                } else {
                    high = mid;
                }
            }
            answer[i] = low-1;
        }
        return answer;

=======

        vector<int> ans;
        for (int q: queries) {
            int count = 0;
            for (int i = 0; i < nums.size(); i++) {
                if (nums[i] <= q) {
                    count++;
                    q -= nums[i];
                }
            }
            ans.push_back(count);
        }
        return ans;

=======

        int n = nums.size();
        int m = queries.size();
        vector<int> answer(m);
        vector<int> prefixSum(n+1);
        for (int i=0; i<n; i++) {
            prefixSum[i+1] = prefixSum[i] + nums[i];
        }
        for (int i=0; i<m; i++) {
            int q = queries[i];
            int j = upper_bound(prefixSum.begin(), prefixSum.end(), q) - prefixSum.begin();
            answer[i] = j-1;
        }
        return answer;

=======

        int n = nums.size();
        int m = queries.size();
        vector<int> answer(m);
        vector<int> dp(1000001, 0);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 1000000; j >= nums[i]; j--) {
                if (dp[j - nums[i]] == 1) {
                    dp[j] = 1;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = queries[i]; j >= 0; j--) {
                if (dp[j] == 1) {
                    answer[i] = j;
                    break;
                }
            }
        }
        return answer;

=======

        vector<int> ans;
        for (int i = 0; i < queries.size(); i++) {
            int currSum = 0;
            int currSize = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (currSum + nums[j] <= queries[i]) {
                    currSum += nums[j];
                    currSize++;
                }
            }
            ans.push_back(currSize);
        }
        return ans;

=======

        int n = nums.size();
        int m = queries.size();
        vector<int> ans(m);
        vector<int> p(n);
        vector<int> q(n);
        p[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            p[i] = p[i - 1] + nums[i];
        }
        q[0] = 1;
        for (int i = 1; i < n; ++i) {
            q[i] = q[i - 1] + (p[i] - p[i - 1] > 1);
        }
        for (int i = 0; i < m; ++i) {
            int l = 0;
            int r = n - 1;
            int last = -1;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (p[mid] <= queries[i]) {
                    last = mid;
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            if (last == -1) {
                ans[i] = 0;
            } else {
                ans[i] = q[last];
            }
        }
        return ans;
