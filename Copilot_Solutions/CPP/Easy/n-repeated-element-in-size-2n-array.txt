Synthesizing 10/10 solutions

=======

        int n = nums.size() / 2;
        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            m[nums[i]]++;
            if (m[nums[i]] == n) {
                return nums[i];
            }
        }
        return -1;

=======

        unordered_set<int> s;
        for (auto n : nums) {
            if (s.find(n) != s.end()) {
                return n;
            } else {
                s.insert(n);
            }
        }
        return -1;

=======

        int n = nums.size() / 2;
        unordered_map<int, int> cnt;
        for (int i = 0; i < nums.size(); i++) {
            cnt[nums[i]]++;
            if (cnt[nums[i]] == n) {
                return nums[i];
            }
        }
        return -1;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            if (m.find(nums[i]) != m.end()) {
                return nums[i];
            }
            m[nums[i]] = 1;
        }
        return 0;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n - 1; i++){
            if(nums[i] == nums[i + 1]) return nums[i];
        }
        return 0;

=======

        int n = nums.size() / 2;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            count = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }
            if (count == n) {
                return nums[i];
            }
        }
        return 0;

=======

        unordered_map<int, int> m;
        for (auto i : nums) {
            if (m.find(i) == m.end()) {
                m[i] = 1;
            } else {
                m[i]++;
            }
        }
        for (auto i : m) {
            if (i.second == nums.size() / 2) {
                return i.first;
            }
        }
        return -1;

=======

        unordered_map<int, int> mp;
        for (auto i : nums) {
            mp[i]++;
            if (mp[i] > 1) return i;
        }
        return -1;

=======

        int n = nums.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[nums[i]]++;
        }
        for (auto i : m) {
            if (i.second == n/2) {
                return i.first;
            }
        }
        return -1;

=======

        map<int, int> m;
        for (auto& n : nums) {
            if (m[n] > 0) return n;
            m[n]++;
        }
        return 0;
