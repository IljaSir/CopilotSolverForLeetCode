Synthesizing 10/10 solutions

=======

        int pos = 0;
        int neg = 0;
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0) {
                pos++;
                neg = 0;
            } else if (nums[i] < 0) {
                neg++;
                pos = 0;
            } else {
                pos = 0;
                neg = 0;
            }
            if (pos > max) {
                max = pos;
            }
            if (neg > max) {
                max = neg;
            }
        }
        return max;

=======

        int pos = 0, neg = 0, ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] < 0) {
                neg++;
                ans = max(ans, neg);
            } else if (nums[i] > 0) {
                pos++;
                ans = max(ans, pos);
            } else {
                ans = max(ans, max(pos, neg));
            }
        }
        return ans;

=======

        int pos = 0, neg = 0;
        int maxCount = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] >= 0) {
                pos++;
                neg = 0;
            } else {
                neg++;
                pos = 0;
            }
            maxCount = max(maxCount, max(pos, neg));
        }
        return maxCount;

=======

        int n = nums.size();
        int i = 0;
        int j = n - 1;
        while (i < j) {
            int mid = i + (j - i) / 2;
            if (nums[mid] < 0) {
                i = mid + 1;
            } else {
                j = mid;
            }
        }
        int neg = i;
        i = 0;
        j = n - 1;
        while (i < j) {
            int mid = i + (j - i + 1) / 2;
            if (nums[mid] > 0) {
                j = mid - 1;
            } else {
                i = mid;
            }
        }
        int pos = n - i - 1;
        return max(pos, neg);

=======

        int pos = 0, neg = 0, res = 0;
        for (auto num : nums) {
            if (num > 0) {
                pos++;
                neg = 0;
            } else if (num < 0) {
                neg++;
                pos = 0;
            } else {
                pos = neg = 0;
            }
            res = max(res, max(pos, neg));
        }
        return res;

=======

        int n = nums.size();
        int i = 0, j = n - 1;
        int pos = 0, neg = 0;
        while (i < j) {
            if (nums[i] < 0) {
                ++i;
                ++neg;
            } else if (nums[j] > 0) {
                --j;
                ++pos;
            } else {
                break;
            }
        }
        if (i == j) {
            if (nums[i] < 0) {
                ++neg;
            } else if (nums[i] > 0) {
                ++pos;
            }
        }
        return max(pos, neg);

=======

        int n = nums.size();
        int pos = 0;
        int neg = 0;
        int max = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] >= 0) {
                pos++;
                if(neg > 0) {
                    if(pos > max) {
                        max = pos;
                    }
                    pos = 0;
                    neg = 0;
                }
            } else {
                neg++;
                if(pos > 0) {
                    if(neg > max) {
                        max = neg;
                    }
                    pos = 0;
                    neg = 0;
                }
            }
        }
        if(pos > 0 && pos > max) {
            max = pos;
        }
        if(neg > 0 && neg > max) {
            max = neg;
        }
        return max;

=======

        int n = nums.size();
        int i = 0;
        int j = n - 1;
        int count = 0;
        int maxCount = 0;
        while (i < j) {
            if (nums[i] < 0) {
                i++;
                continue;
            }
            while (j > i && nums[j] > 0) {
                j--;
            }
            count = j - i + 1;
            maxCount = max(maxCount, count);
            i++;
        }
        return maxCount;

=======

        int count = 0;
        int maxCount = 0;
        int num = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] >= 0) {
                if (count == 0) {
                    num = nums[i];
                }
                count++;
            } else {
                if (num == nums[i]) {
                    count++;
                } else {
                    num = nums[i];
                    count = 1;
                }
            }
            maxCount = max(maxCount, count);
        }
        return maxCount;

=======

        int pos = 0;
        int neg = 0;
        int max = 0;
        int prev = INT_MIN;
        for (auto n : nums) {
            if (n == prev) {
                if (n > 0) {
                    pos++;
                } else {
                    neg++;
                }
            } else {
                if (n > 0) {
                    pos = 1;
                    neg = 0;
                } else {
                    neg = 1;
                    pos = 0;
                }
            }
            if (pos > max) {
                max = pos;
            }
            if (neg > max) {
                max = neg;
            }
            prev = n;
        }
        return max;
