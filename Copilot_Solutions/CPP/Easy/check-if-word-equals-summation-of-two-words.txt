Synthesizing 10/10 solutions

=======

        int a = 0, b = 0, c = 0;
        for (int i = 0; i < firstWord.size(); i++) {
            a = a * 10 + firstWord[i] - 'a';
        }
        for (int i = 0; i < secondWord.size(); i++) {
            b = b * 10 + secondWord[i] - 'a';
        }
        for (int i = 0; i < targetWord.size(); i++) {
            c = c * 10 + targetWord[i] - 'a';
        }
        return a + b == c;

=======

        int a = 0, b = 0, c = 0;
        for (int i = 0; i < firstWord.size(); i++) {
            a = a * 10 + firstWord[i] - 'a';
        }
        for (int i = 0; i < secondWord.size(); i++) {
            b = b * 10 + secondWord[i] - 'a';
        }
        for (int i = 0; i < targetWord.size(); i++) {
            c = c * 10 + targetWord[i] - 'a';
        }
        return (a + b) == c;

=======

        int first = 0, second = 0, target = 0;
        for (char c : firstWord) {
            first = first * 10 + (c - 'a');
        }
        for (char c : secondWord) {
            second = second * 10 + (c - 'a');
        }
        for (char c : targetWord) {
            target = target * 10 + (c - 'a');
        }
        return first + second == target;

=======

        int first = 0;
        for (int i = 0; i < firstWord.size(); i++) {
            first = first * 10 + firstWord[i] - 'a';
        }
        int second = 0;
        for (int i = 0; i < secondWord.size(); i++) {
            second = second * 10 + secondWord[i] - 'a';
        }
        int target = 0;
        for (int i = 0; i < targetWord.size(); i++) {
            target = target * 10 + targetWord[i] - 'a';
        }
        return first + second == target;

=======

        int a = 0, b = 0, c = 0;
        for (int i = 0; i < firstWord.length(); i++) {
            a = a*10 + (firstWord[i] - 'a');
        }
        for (int i = 0; i < secondWord.length(); i++) {
            b = b*10 + (secondWord[i] - 'a');
        }
        for (int i = 0; i < targetWord.length(); i++) {
            c = c*10 + (targetWord[i] - 'a');
        }
        return a+b == c;

=======

        return getNum(firstWord) + getNum(secondWord) == getNum(targetWord);
    }
    
    int getNum(string word) {
        int num = 0;
        for (char c : word) {
            num = num * 10 + c - 'a';
        }
        return num;

=======

        int f = 0;
        int s = 0;
        int t = 0;
        for (auto c : firstWord) {
            f = f * 10 + c - 'a';
        }
        for (auto c : secondWord) {
            s = s * 10 + c - 'a';
        }
        for (auto c : targetWord) {
            t = t * 10 + c - 'a';
        }
        return f + s == t;

=======

        string first, second, target;
        for (char c : firstWord) {
            first += to_string(c - 'a');
        }
        for (char c : secondWord) {
            second += to_string(c - 'a');
        }
        for (char c : targetWord) {
            target += to_string(c - 'a');
        }
        return stoi(first) + stoi(second) == stoi(target);

=======

        return getValue(firstWord) + getValue(secondWord) == getValue(targetWord);

=======

        int firstNum = 0;
        int secondNum = 0;
        int targetNum = 0;
        for (int i = 0; i < firstWord.length(); i++) {
            firstNum = (firstNum * 10) + (firstWord[i] - 'a');
        }
        for (int i = 0; i < secondWord.length(); i++) {
            secondNum = (secondNum * 10) + (secondWord[i] - 'a');
        }
        for (int i = 0; i < targetWord.length(); i++) {
            targetNum = (targetNum * 10) + (targetWord[i] - 'a');
        }
        return firstNum + secondNum == targetNum;
