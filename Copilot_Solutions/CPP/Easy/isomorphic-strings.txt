Synthesizing 10/10 solutions

=======

        int m1[128] = {0}, m2[128] = {0};
        for (int i = 0; i < s.size(); i++) {
            if (m1[s[i]] != m2[t[i]]) return false;
            m1[s[i]] = i+1;
            m2[t[i]] = i+1;
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        unordered_map<char, char> m1;
        unordered_map<char, char> m2;
        for (int i = 0; i < s.length(); i++) {
            if (m1.find(s[i]) == m1.end() && m2.find(t[i]) == m2.end()) {
                m1[s[i]] = t[i];
                m2[t[i]] = s[i];
            } else {
                if (m1[s[i]] != t[i] || m2[t[i]] != s[i]) return false;
            }
        }
        return true;

=======

        vector<int> s2t(256, -1);
        vector<int> t2s(256, -1);
        for (int i = 0; i < s.size(); i++) {
            if (s2t[s[i]] == -1) {
                s2t[s[i]] = t[i];
            } else if (s2t[s[i]] != t[i]) {
                return false;
            }
            if (t2s[t[i]] == -1) {
                t2s[t[i]] = s[i];
            } else if (t2s[t[i]] != s[i]) {
                return false;
            }
        }
        return true;

=======

        int m[128] = {0}, n[128] = {0};
        for (int i = 0; i < s.length(); i++) {
            if (m[s[i]] != n[t[i]]) return false;
            m[s[i]] = i + 1;
            n[t[i]] = i + 1;
        }
        return true;

=======

        map<char, char> smap;
        map<char, char> tmap;
        for (int i = 0; i < s.length(); i++) {
            if (smap.find(s[i]) == smap.end()) {
                smap[s[i]] = t[i];
            } else {
                if (smap[s[i]] != t[i])
                    return false;
            }
            if (tmap.find(t[i]) == tmap.end()) {
                tmap[t[i]] = s[i];
            } else {
                if (tmap[t[i]] != s[i])
                    return false;
            }
        }
        return true;

=======

        int n = s.size();
        unordered_map<char, char> st, ts;
        for (int i = 0; i < n; i++) {
            if (st.count(s[i]) && st[s[i]] != t[i]) return false;
            if (ts.count(t[i]) && ts[t[i]] != s[i]) return false;
            st[s[i]] = t[i];
            ts[t[i]] = s[i];
        }
        return true;

=======

        int n = s.length();
        int m = t.length();
        if (n != m) return false;
        map<char, char> mp;
        set<char> st;
        for (int i = 0; i < n; i++) {
            if (mp.find(s[i]) == mp.end()) {
                if (st.find(t[i]) == st.end()) {
                    mp[s[i]] = t[i];
                    st.insert(t[i]);
                } else {
                    return false;
                }
            } else {
                if (mp[s[i]] != t[i]) return false;
            }
        }
        return true;

=======

        int len = s.length();
        if (len != t.length()) return false;
        unordered_map<char, char> mp;
        unordered_set<char> st;
        for (int i = 0; i < len; ++i) {
            if (mp.find(s[i]) == mp.end()) {
                if (st.find(t[i]) != st.end()) return false;
                mp[s[i]] = t[i];
                st.insert(t[i]);
            } else {
                if (mp[s[i]] != t[i]) return false;
            }
        }
        return true;

=======

        int n = s.size();
        int m = t.size();
        if (n != m) return false;
        vector<int> hash1(256, -1);
        vector<int> hash2(256, -1);
        for (int i = 0; i < n; i++) {
            if (hash1[s[i]] != hash2[t[i]]) return false;
            hash1[s[i]] = i;
            hash2[t[i]] = i;
        }
        return true;

=======

        int n = s.size();
        if (n != t.size()) return false;
        int m[256] = {0};
        int n[256] = {0};
        for (int i = 0; i < n; i++) {
            if (m[s[i]] != n[t[i]]) return false;
            m[s[i]] = i + 1;
            n[t[i]] = i + 1;
        }
        return true;
