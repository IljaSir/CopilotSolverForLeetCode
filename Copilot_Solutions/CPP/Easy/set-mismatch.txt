Synthesizing 10/10 solutions

=======

        vector<int> res(2, 0);
        for (int i = 0; i < nums.size(); ++i) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) res[0] = index + 1;
            else nums[index] = -nums[index];
        }
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > 0) res[1] = i + 1;
        }
        return res;

=======

        vector<int> res(2);
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[abs(nums[i]) - 1] < 0) {
                res[0] = abs(nums[i]);
            } else {
                nums[abs(nums[i]) - 1] *= -1;
            }
        }
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > 0) {
                res[1] = i + 1;
                break;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(2, 0);
        for (int i = 0; i < n; ++i) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res[0] = abs(nums[i]);
            } else {
                nums[index] *= -1;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                res[1] = i + 1;
                break;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(2, 0);
        for (int i = 0; i < n; i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                ans[0] = abs(nums[i]);
            } else {
                nums[index] *= -1;
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                ans[1] = i + 1;
            }
        }
        return ans;

=======

        vector<int> res(2);
        for (int i = 0; i < nums.size(); ++i) {
            int idx = abs(nums[i]) - 1;
            if (nums[idx] < 0)
                res[0] = abs(nums[i]);
            else
                nums[idx] *= -1;
        }
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > 0) {
                res[1] = i + 1;
                break;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(2, 0);
        for (int i = 0; i < n; i++) {
            while (nums[i] != nums[nums[i] - 1]) {
                swap(nums[i], nums[nums[i] - 1]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != i + 1) {
                ans[0] = nums[i];
                ans[1] = i + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(n+1, 0);
        vector<int> res;
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (cnt[i] == 2) res.push_back(i);
            if (cnt[i] == 0) res.push_back(i);
        }
        return res;

=======

        vector<int> res;
        int n = nums.size();
        vector<int> cnt(n+1, 0);
        for (int i = 0; i < n; ++i) {
            ++cnt[nums[i]];
        }
        for (int i = 1; i <= n; ++i) {
            if (cnt[i] == 2) {
                res.push_back(i);
            } else if (cnt[i] == 0) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> result;
        int n = nums.size();
        int sum = (1 + n) * n / 2;
        int sum2 = 0;
        for (int i = 0; i < n; ++i) {
            sum2 += nums[i];
        }
        int sum3 = 0;
        unordered_set<int> set;
        for (int i = 0; i < n; ++i) {
            if (set.find(nums[i]) != set.end()) {
                sum3 = nums[i];
            }
            set.insert(nums[i]);
        }
        result.push_back(sum3);
        result.push_back(sum + sum3 - sum2);
        return result;

=======

        int n = nums.size();
        int sum = 0;
        for (auto num : nums) {
            sum += num;
        }
        int sum2 = (1 + n) * n / 2;
        int diff = sum - sum2;
        int sum3 = 0;
        for (int i = 1; i <= n; i++) {
            sum3 += i * i;
        }
        int sum4 = 0;
        for (auto num : nums) {
            sum4 += num * num;
        }
        int diff2 = sum4 - sum3;
        int a = (diff + diff2 / diff) / 2;
        int b = diff - a;
        return {a, b};
