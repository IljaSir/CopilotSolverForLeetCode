Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            if (m.find(nums[i]) != m.end() && i - m[nums[i]] <= k) {
                return true;
            }
            m[nums[i]] = i;
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.find(nums[i]) != m.end() && i - m[nums[i]] <= k) {
                return true;
            }
            m[nums[i]] = i;
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.find(nums[i]) != m.end()) {
                if (i - m[nums[i]] <= k) return true;
            }
            m[nums[i]] = i;
        }
        return false;

=======

        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            if (map.find(nums[i]) == map.end()) {
                map[nums[i]] = i;
            } else {
                if (i - map[nums[i]] <= k) {
                    return true;
                } else {
                    map[nums[i]] = i;
                }
            }
        }
        return false;

=======

        unordered_map<int, int> mp;
        for (int i = 0; i < nums.size(); ++i) {
            if (mp.find(nums[i]) != mp.end() && i - mp[nums[i]] <= k) {
                return true;
            }
            mp[nums[i]] = i;
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); ++i) {
            if (m.count(nums[i]) > 0 && i - m[nums[i]] <= k) {
                return true;
            } else {
                m[nums[i]] = i;
            }
        }
        return false;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < nums.size(); i++) {
            if (m.count(nums[i]) != 0 && i - m[nums[i]] <= k) {
                return true;
            }
            m[nums[i]] = i;
        }
        return false;

=======

        unordered_map<int, int> map;
        for (int i = 0; i < nums.size(); i++) {
            if (map.find(nums[i]) != map.end()) {
                int diff = i - map[nums[i]];
                if (diff <= k) {
                    return true;
                }
            }
            map[nums[i]] = i;
        }
        return false;
