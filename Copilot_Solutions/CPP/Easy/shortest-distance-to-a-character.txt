Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> res(n, n);
        int pos = -n;
        for (int i = 0; i < n; ++i) {
            if (s[i] == c) pos = i;
            res[i] = min(res[i], abs(i - pos));
        }
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] == c) pos = i;
            res[i] = min(res[i], abs(i - pos));
        }
        return res;

=======

        int n = s.size();
        vector<int> ans(n, n);
        for (int i = 0; i < n; i++) {
            if (s[i] == c) ans[i] = 0;
            else {
                if (i > 0) ans[i] = min(ans[i], ans[i - 1] + 1);
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1) ans[i] = min(ans[i], ans[i + 1] + 1);
        }
        return ans;

=======

        int n = s.size();
        int prev = -n;
        vector<int> res(n);
        for (int i = 0; i < n; i++) {
            if (s[i] == c) prev = i;
            res[i] = i - prev;
        }
        for (int i = prev - 1; i >= 0; i--) {
            if (s[i] == c) prev = i;
            res[i] = min(res[i], prev - i);
        }
        return res;

=======

        vector<int> res;
        int n = s.size();
        int prev = -n;
        for (int i = 0; i < n; i++) {
            if (s[i] == c) prev = i;
            res.push_back(i - prev);
        }
        prev = 2 * n;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == c) prev = i;
            res[i] = min(res[i], prev - i);
        }
        return res;

=======

        vector<int> res;
        int n = s.size();
        int pos = -n;
        for (int i = 0; i < n; ++i) {
            if (s[i] == c) pos = i;
            res.push_back(i - pos);
        }
        for (int i = pos - 1; i >= 0; --i) {
            if (s[i] == c) pos = i;
            res[i] = min(res[i], pos - i);
        }
        return res;

=======

        vector<int> ans;
        int n = s.length();
        int prev = -n;
        for (int i = 0; i < n; i++) {
            if (s[i] == c) prev = i;
            ans.push_back(i - prev);
        }
        prev = 2 * n;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == c) prev = i;
            ans[i] = min(ans[i], prev - i);
        }
        return ans;

=======

        vector<int> res(s.size());
        int pre = -10000;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == c) pre = i;
            res[i] = i - pre;
        }
        pre = 10000;
        for (int i = s.size() - 1; i >= 0; --i) {
            if (s[i] == c) pre = i;
            res[i] = min(res[i], pre - i);
        }
        return res;

=======

        int n = s.length();
        vector<int> res(n, 0);
        int lastC = -n;
        for (int i = 0; i < n; i++) {
            if (s[i] == c) lastC = i;
            res[i] = i - lastC;
        }
        for (int i = lastC - 1; i >= 0; i--) {
            if (s[i] == c) lastC = i;
            res[i] = min(res[i], lastC - i);
        }
        return res;

=======

        vector<int> ans(s.size(), 0);
        int n = s.size();
        int last = -n;
        for (int i = 0; i < n; i++) {
            if (s[i] == c) last = i;
            ans[i] = i - last;
        }
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == c) last = i;
            ans[i] = min(ans[i], abs(i - last));
        }
        return ans;

=======

        vector<int> res;
        int prev = -1;
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == c) {
                prev = i;
            }
            if(prev == -1) {
                res.push_back(INT_MAX);
            } else {
                res.push_back(i - prev);
            }
        }
        prev = -1;
        for(int i = s.length() - 1; i >= 0; i--) {
            if(s[i] == c) {
                prev = i;
            }
            if(prev == -1) {
                res[i] = INT_MAX;
            } else {
                res[i] = min(res[i], prev - i);
            }
        }
        return res;
