Synthesizing 10/10 solutions

=======

        unordered_map<char, int> dict;
        for (int i = 0; i < order.size(); ++i) {
            dict[order[i]] = i;
        }
        
        for (int i = 0; i < words.size() - 1; ++i) {
            for (int j = 0; j < words[i].size(); ++j) {
                if (j == words[i + 1].size()) {
                    return false;
                }
                if (words[i][j] != words[i + 1][j]) {
                    if (dict[words[i][j]] > dict[words[i + 1][j]]) {
                        return false;
                    } else {
                        break;
                    }
                }
            }
        }
        return true;

=======

        vector<int> table(26);
        for (int i = 0; i < order.size(); i++) {
            table[order[i] - 'a'] = i;
        }
        for (int i = 0; i < words.size() - 1; i++) {
            if (!isSorted(words[i], words[i + 1], table)) return false;
        }
        return true;

=======

        int order_map[26];
        for (int i = 0; i < order.size(); i++) {
            order_map[order[i] - 'a'] = i;
        }
        for (int i = 0; i < words.size() - 1; i++) {
            if (!compare(words[i], words[i+1], order_map)) {
                return false;
            }
        }
        return true;
    }
    
    bool compare(string word1, string word2, int order_map[]) {
        int len = min(word1.size(), word2.size());
        for (int i = 0; i < len; i++) {
            if (word1[i] != word2[i]) {
                return order_map[word1[i] - 'a'] < order_map[word2[i] - 'a'];
            }
        }
        return word1.size() <= word2.size();

=======

        vector<int> mapping(26);
        for (int i = 0; i < 26; i++) {
            mapping[order[i] - 'a'] = i;
        }
        for (string& word : words) {
            for (char& c : word) {
                c = mapping[c - 'a'];
            }
        }
        for (int i = 0; i < words.size() - 1; i++) {
            if (words[i] > words[i + 1]) {
                return false;
            }
        }
        return true;

=======

        vector<int> table(26, 0);
        for(int i = 0; i < order.size(); i++) {
            table[order[i] - 'a'] = i;
        }
        for(int i = 0; i < words.size() - 1; i++) {
            if(!check(words[i], words[i + 1], table)) {
                return false;
            }
        }
        return true;
    }
    bool check(string& a, string& b, vector<int>& table) {
        int i = 0;
        while(i < a.size() && i < b.size()) {
            if(table[a[i] - 'a'] < table[b[i] - 'a']) {
                return true;
            } else if(table[a[i] - 'a'] > table[b[i] - 'a']) {
                return false;
            }
            i++;
        }
        return a.size() <= b.size();

=======

        int n = words.size();
        if (n < 2) return true;
        vector<int> dict(26, 0);
        for (int i = 0; i < 26; ++i) {
            dict[order[i] - 'a'] = i;
        }
        for (int i = 0; i < n - 1; ++i) {
            if (!isSorted(words[i], words[i+1], dict)) return false;
        }
        return true;
    }
    bool isSorted(string& w1, string& w2, vector<int>& dict) {
        int n1 = w1.size(), n2 = w2.size();
        for (int i = 0; i < min(n1, n2); ++i) {
            if (w1[i] != w2[i]) {
                return dict[w1[i] - 'a'] < dict[w2[i] - 'a'];
            }
        }
        return n1 <= n2;

=======

        for(int i=0; i<words.size()-1; i++){
            for(int j=0; j<words[i].size(); j++){
                if(j >= words[i+1].size()) return false;
                if(words[i][j] == words[i+1][j]) continue;
                if(order.find(words[i][j]) > order.find(words[i+1][j])) return false;
                break;
            }
        }
        return true;

=======

        int n = words.size();
        if (n == 1) return true;
        vector<int> order_map(26, 0);
        for (int i = 0; i < 26; i++) {
            order_map[order[i] - 'a'] = i;
        }
        for (int i = 0; i < n - 1; i++) {
            int j = 0;
            for (; j < words[i].length() && j < words[i + 1].length(); j++) {
                if (order_map[words[i][j] - 'a'] > order_map[words[i + 1][j] - 'a']) {
                    return false;
                } else if (order_map[words[i][j] - 'a'] < order_map[words[i + 1][j] - 'a']) {
                    break;
                }
            }
            if (j == words[i + 1].length() && j < words[i].length()) return false;
        }
        return true;

=======

        int n = words.size();
        if (n == 1) return true;
        int m = order.size();
        unordered_map<char, int> map;
        for (int i = 0; i < m; i++) {
            map[order[i]] = i;
        }
        for (int i = 0; i < n - 1; i++) {
            int j = 0;
            while (j < words[i].size() && j < words[i + 1].size()) {
                if (map[words[i][j]] < map[words[i + 1][j]]) break;
                if (map[words[i][j]] > map[words[i + 1][j]]) return false;
                j++;
            }
            if (j == words[i].size() && j < words[i + 1].size()) return false;
        }
        return true;

=======

        int n = words.size();
        if (n == 1) return true;
        int m = words[0].size();
        for (int i = 1; i < n; i++) {
            if (words[i].size() < m) m = words[i].size();
        }
        int pos[26];
        for (int i = 0; i < 26; i++) {
            pos[order[i] - 'a'] = i;
        }
        for (int i = 1; i < n; i++) {
            int j = 0;
            while (j < m && words[i-1][j] == words[i][j]) j++;
            if (j == m) {
                if (words[i-1].size() > words[i].size()) return false;
            } else {
                if (pos[words[i-1][j] - 'a'] > pos[words[i][j] - 'a']) return false;
            }
        }
        return true;
