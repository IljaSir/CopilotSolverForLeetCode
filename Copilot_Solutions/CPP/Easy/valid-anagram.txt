Synthesizing 10/10 solutions

=======

        if (s.size() != t.size()) return false;
        int cnt[26] = {0};
        for (int i = 0; i < s.size(); i++) {
            cnt[s[i] - 'a']++;
            cnt[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i]) return false;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int count[26] = {0};
        for (int i = 0; i < s.length(); ++i) {
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; ++i) {
            if (count[i] != 0) {
                return false;
            }
        }
        return true;

=======

        int a[26] = {0};
        int b[26] = {0};
        for (int i = 0; i < s.size(); i++) {
            a[s[i] - 'a']++;
        }
        for (int i = 0; i < t.size(); i++) {
            b[t[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (a[i] != b[i]) {
                return false;
            }
        }
        return true;

=======

        int a[26] = {0};
        for (auto c : s) {
            a[c - 'a']++;
        }
        for (auto c : t) {
            a[c - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (a[i] != 0) {
                return false;
            }
        }
        return true;

=======

        if (s.size() != t.size()) return false;
        int a[26] = {0};
        for (int i = 0; i < s.size(); ++i) {
            a[s[i] - 'a']++;
            a[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; ++i) {
            if (a[i] != 0) return false;
        }
        return true;

=======

        if (s.size() != t.size()) {
            return false;
        }
        
        vector<int> count(26, 0);
        for (int i = 0; i < s.size(); i++) {
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }
        
        for (int i = 0; i < count.size(); i++) {
            if (count[i] != 0) {
                return false;
            }
        }
        
        return true;

=======

        if(s.size() != t.size()) return false;
        int count[26] = {0};
        for(int i = 0; i < s.size(); i++){
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }
        for(int i = 0; i < 26; i++){
            if(count[i] != 0) return false;
        }
        return true;

=======

        int n = s.length();
        int m = t.length();
        if (n != m) return false;
        int cnt[26] = {0};
        for (int i = 0; i < n; ++i) {
            cnt[s[i] - 'a']++;
            cnt[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] != 0) return false;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int n = s.length();
        int cnt[26];
        memset(cnt, 0, sizeof(cnt));
        for (int i = 0; i < n; i++) {
            cnt[s[i] - 'a']++;
            cnt[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] != 0) {
                return false;
            }
        }
        return true;

=======

        if(s.length() != t.length()) return false;
        int a[26] = {0};
        int b[26] = {0};
        for(int i=0; i<s.length(); ++i) {
            a[s[i]-'a']++;
            b[t[i]-'a']++;
        }
        for(int i=0; i<26; ++i) {
            if(a[i] != b[i]) return false;
        }
        return true;
