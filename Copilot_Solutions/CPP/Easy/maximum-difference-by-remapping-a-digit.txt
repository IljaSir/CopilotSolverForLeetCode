Synthesizing 10/10 solutions

=======

        vector<int> digits;
        int n = num;
        while (n > 0) {
            digits.push_back(n % 10);
            n /= 10;
        }
        reverse(digits.begin(), digits.end());
        int minDigit = *min_element(digits.begin(), digits.end());
        int maxDigit = *max_element(digits.begin(), digits.end());
        int minNum = 0;
        int maxNum = 0;
        for (int i = 0; i < digits.size(); ++i) {
            if (digits[i] == minDigit) {
                minNum = minNum * 10 + maxDigit;
            } else {
                minNum = minNum * 10 + digits[i];
            }
            if (digits[i] == maxDigit) {
                maxNum = maxNum * 10 + minDigit;
            } else {
                maxNum = maxNum * 10 + digits[i];
            }
        }
        return maxNum - minNum;

=======

        string s = to_string(num);
        int n = s.size();
        int mn = num, mx = num;
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                int c = 0;
                for (int k = 0; k < n; ++k) {
                    if (s[k] == '0' + i) {
                        s[k] = '0' + j;
                        ++c;
                    }
                }
                if (c > 0) {
                    int x = stoi(s);
                    mn = min(mn, x);
                    mx = max(mx, x);
                }
                s = to_string(num);
            }
        }
        return mx - mn;

=======

        string s = to_string(num);
        int n = s.size();
        int min = num;
        int max = num;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 10; j++) {
                if (j == s[i] - '0') continue;
                int newNum = stoi(s.substr(0, i) + to_string(j) + s.substr(i + 1, n - i - 1));
                if (newNum > max) max = newNum;
                if (newNum < min) min = newNum;
            }
        }
        return max - min;

=======

        string s = to_string(num);
        int n = s.size();
        int minv = INT_MAX, maxv = INT_MIN;
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 10; ++j) {
                string t = s;
                for (char& c : t) {
                    if (c - '0' == i) {
                        c = j + '0';
                    }
                }
                if (t[0] == '0') continue;
                minv = min(minv, stoi(t));
                maxv = max(maxv, stoi(t));
            }
        }
        return maxv - minv;

=======

        string s = to_string(num);
        int n = s.size();
        int a = s[0] - '0';
        int b = s[0] - '0';
        int c = s[0] - '0';
        int d = s[0] - '0';
        for (int i = 1; i < n; ++i) {
            int x = s[i] - '0';
            a = max(a, x);
            b = min(b, x);
            if (x != a) {
                c = x;
            }
            if (x != b) {
                d = x;
            }
        }
        int ans = 0;
        if (a != b) {
            ans = a * pow(10, n - 1) + num % (int)pow(10, n - 1);
            ans -= b * pow(10, n - 1) + num % (int)pow(10, n - 1);
        }
        int ans1 = 0;
        if (c != d) {
            ans1 = c * pow(10, n - 1) + num % (int)pow(10, n - 1);
            ans1 -= d * pow(10, n - 1) + num % (int)pow(10, n - 1);
        }
        return max(ans, ans1);

=======

        string s = to_string(num);
        int n = s.size();
        int maxNum = 0;
        int minNum = 0;
        for (int i = 0; i < n; ++i) {
            int digit = s[i] - '0';
            if (digit != 9) {
                for (int j = i; j < n; ++j) {
                    if (s[j] == digit + '0') {
                        s[j] = '9';
                    }
                }
                maxNum = stoi(s);
                break;
            }
        }
        for (int i = 0; i < n; ++i) {
            int digit = s[i] - '0';
            if (digit != 0) {
                for (int j = i; j < n; ++j) {
                    if (s[j] == digit + '0') {
                        s[j] = '0';
                    }
                }
                minNum = stoi(s);
                break;
            }
        }
        return maxNum - minNum;

=======

        int min = num;
        int max = num;
        string s = to_string(num);
        for(int i = 0; i < s.length(); i++){
            for(int j = 0; j < 10; j++){
                if(s[i] - '0' == j) continue;
                string tmp = s;
                tmp[i] = j + '0';
                if(tmp[0] != '0'){
                    int n = stoi(tmp);
                    if(n < min) min = n;
                    if(n > max) max = n;
                }
            }
        }
        return max - min;

=======

        string s = to_string(num);
        int n = s.size();
        int minNum = INT_MAX, maxNum = INT_MIN;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 10; j++) {
                if (s[i] == '0' + j) continue;
                string t = s;
                for (int k = i; k < n; k++) {
                    if (t[k] == '0' + j) t[k] = s[i];
                }
                int x = stoi(t);
                minNum = min(minNum, x);
                maxNum = max(maxNum, x);
            }
        }
        return maxNum - minNum;

=======

        string str = to_string(num);
        int n = str.size();
        int minVal = 0, maxVal = 0;
        for (int i = 0; i < n; i++) {
            if (str[i] != '9') {
                minVal = minVal * 10 + str[i] - '0';
            } else {
                minVal = minVal * 10 + 9;
            }
        }
        for (int i = 0; i < n; i++) {
            if (str[i] != '1' && str[i] != '0') {
                maxVal = maxVal * 10 + str[i] - '0';
            } else {
                maxVal = maxVal * 10 + 1;
            }
        }
        return maxVal - minVal;

=======

        int digits[10] = {0};
        int n = num;
        while (n) {
            digits[n%10]++;
            n /= 10;
        }
        int minNum = 0, maxNum = 0;
        for (int i = 0; i < 10; i++) {
            if (digits[i]) {
                minNum = i;
                break;
            }
        }
        for (int i = 9; i >= 0; i--) {
            if (digits[i]) {
                maxNum = i;
                break;
            }
        }
        if (minNum == maxNum) return 0;
        int minNum2 = minNum;
        int maxNum2 = maxNum;
        for (int i = 0; i < 10; i++) {
            if (digits[i] == 0) continue;
            if (minNum2 == minNum) minNum2 = i;
            if (maxNum2 == maxNum) maxNum2 = i;
        }
        int minNum3 = minNum;
        int maxNum3 = maxNum;
        for (int i = 9; i >= 0; i--) {
            if (digits[i] == 0) continue;
            if (minNum3 == minNum) minNum3 = i;
            if (maxNum3 == maxNum) maxNum3 = i;
        }
        int minNum4 = minNum;
        int maxNum4 = maxNum;
        for (int i = 9; i >= 0; i--) {
            if (digits[i] == 0) continue;
            if (minNum4 == minNum) minNum4 = i;
            if (maxNum4 == maxNum) maxNum4 = i;
        }
        int minNum5 = minNum;
        int maxNum5 = maxNum;
        for (int i = 0; i < 10; i++) {
            if (digits[i] == 0) continue;
            if (minNum5 == minNum) minNum5 = i;
            if (maxNum5 == maxNum) maxNum5 = i;
        }
        int minNum6 = minNum;
        int maxNum6 = maxNum;
        for (int i = 0; i < 10; i++) {
            if (
