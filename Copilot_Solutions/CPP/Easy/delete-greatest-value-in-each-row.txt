Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        while (n > 0) {
            int max = 0;
            for (int i = 0; i < m; i++) {
                int maxRow = 0;
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > maxRow) {
                        maxRow = grid[i][j];
                    }
                }
                if (maxRow > max) {
                    max = maxRow;
                }
            }
            sum += max;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] == max) {
                        grid[i].erase(grid[i].begin() + j);
                        n--;
                        j--;
                    }
                }
            }
        }
        return sum;
    }
    int maximumGain(string s, int x, int y) {
        int sum = 0;
        vector<vector<int>> grid;
        if (x > y) {
            grid = {{1, 2}, {2, 1}};
            sum += deleteGreatestValue(grid);
            grid = {{1, 1}, {1, 1}};
            sum += deleteGreatestValue(grid);
        } else {
            grid = {{1, 1}, {1, 1}};
            sum += deleteGreatestValue(grid);
            grid = {{1, 2}, {2, 1}};
            sum += deleteGreatestValue(grid);
        }
        return sum;

=======

        int m = grid.size();
        int n = grid[0].size();
        int answer = 0;
        while (n > 0) {
            int max = 0;
            for (int i = 0; i < m; ++i) {
                int maxInRow = 0;
                int index = 0;
                for (int j = 0; j < n; ++j) {
                    if (grid[i][j] > maxInRow) {
                        maxInRow = grid[i][j];
                        index = j;
                    }
                }
                grid[i][index] = 0;
                if (maxInRow > max) {
                    max = maxInRow;
                }
            }
            answer += max;
            --n;
        }
        return answer;

=======

        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        while (m > 0) {
            int max = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                    }
                }
            }
            ans += max;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] == max) {
                        grid[i].erase(grid[i].begin() + j);
                        break;
                    }
                }
            }
            m--;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> maxInRow(m, 0);
        for (int i = 0; i < m; i++) {
            maxInRow[i] = *max_element(grid[i].begin(), grid[i].end());
        }
        int max = *max_element(maxInRow.begin(), maxInRow.end());
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == max) {
                    grid[i].erase(grid[i].begin() + j);
                    count += max;
                    break;
                }
            }
        }
        return count;
    }
    int maximumGain(string s, int x, int y) {
        vector<vector<int>> grid;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == 'a' || s[i] == 'b') {
                grid.push_back(vector<int>());
                while (i < s.length() && (s[i] == 'a' || s[i] == 'b')) {
                    grid[grid.size() - 1].push_back(s[i] == 'a' ? x : y);
                    i++;
                }
            }
        }
        int result = 0;
        while (grid.size() > 0) {
            result += deleteGreatestValue(grid);
            for (int i = 0; i < grid.size(); i++) {
                if (grid[i].size() == 0) {
                    grid.erase(grid.begin() + i);
                    i--;
                }
            }
        }
        return result;

=======

        int row = grid.size();
        int col = grid[0].size();
        int max = 0;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
        }
        return max;
    }
    int maxSum(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int max = 0;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
        }
        return max;
    }
    int maximumSum(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int max = 0;
        int sum = 0;
        int count = col;
        while(count > 0) {
            max = deleteGreatestValue(grid);
            sum += max;
            for(int i=0; i<row; i++) {
                for(int j=0; j<col; j++) {
                    if(grid[i][j] == max) {
                        grid[i].erase(grid[i].begin()+j);
                        break;
                    }
                }
            }
            count--;
        }
        return sum;

=======

        int n = grid.size();
        int m = grid[0].size();
        int res = 0;
        while (m > 0) {
            int max = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                    }
                }
            }
            res += max;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] == max) {
                        grid[i].erase(grid[i].begin() + j);
                        m--;
                        j--;
                    }
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        while (n > 0) {
            int max = 0;
            int index = 0;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        index = i;
                    }
                }
            }
            res += max;
            grid.erase(grid.begin() + index);
            m--;
        }
        return res;
    }
    int deleteGreatestValue2(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        while (n > 0) {
            int max = 0;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                    }
                }
            }
            res += max;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] == max) {
                        grid[i].erase(grid[i].begin() + j);
                        break;
                    }
                }
            }
            n--;
        }
        return res;
    }
    int deleteGreatestValue3(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        while (n > 0) {
            int max = 0;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                    }
                }
            }
            res += max;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] == max) {
                        for (int k = i; k

=======

        int row = grid.size();
        int col = grid[0].size();
        int sum = 0;
        while (col > 0) {
            int max = 0;
            int maxRow = 0;
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < col; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        maxRow = i;
                    }
                }
            }
            sum += max;
            grid.erase(grid.begin() + maxRow);
            row--;
            col--;
        }
        return sum;

=======

        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        while (n > 0) {
            int max = 0;
            vector<int> maxIndex;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        maxIndex.clear();
                        maxIndex.push_back(i);
                        maxIndex.push_back(j);
                    }
                }
            }
            if (maxIndex.size() > 0) {
                sum += max;
                grid[maxIndex[0]].erase(grid[maxIndex[0]].begin() + maxIndex[1]);
                n--;
            } else {
                break;
            }
        }
        return sum;
    }
    int deleteGreatestValue2(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        while (n > 0) {
            int max = 0;
            int maxIndex = 0;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] > max) {
                        max = grid[i][j];
                        maxIndex = i;
                    }
                }
            }
            if (max > 0) {
                sum += max;
                grid[maxIndex].erase(grid[maxIndex].begin() + n - 1);
                n--;
            } else {
                break;
            }
        }
        return sum;
    }
    int deleteGreatestValue3(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        while (n > 0) {
            int max = 0;
            int maxIndex = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][n - 1] > max) {
                    max = grid[i][n - 1];
                    maxIndex = i;
                }
            }
            if (max > 0) {
                sum += max;
                grid[maxIndex].erase(grid[maxIndex].

=======

        int res = 0;
        while(!grid.empty()) {
            int max = 0;
            int index = 0;
            for(int i = 0; i < grid.size(); i++) {
                int temp = *max_element(grid[i].begin(), grid[i].end());
                if(temp > max) {
                    max = temp;
                    index = i;
                }
            }
            res += max;
            grid[index].erase(max_element(grid[index].begin(), grid[index].end()));
            if(grid[index].empty()) {
                grid.erase(grid.begin() + index);
            }
        }
        return res;
