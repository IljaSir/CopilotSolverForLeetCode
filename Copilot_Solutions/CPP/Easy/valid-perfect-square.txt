Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 1;
        while (num > 0) {
            num -= i;
            i += 2;
        }
        return num == 0;

=======

        if (num == 1) return true;
        int left = 1, right = num / 2;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (mid == num / mid) {
                return num % mid == 0;
            } else if (mid < num / mid) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;

=======

        int left = 1;
        int right = num;
        while (left <= right) {
            long mid = left + (right - left) / 2;
            if (mid * mid == num) {
                return true;
            } else if (mid * mid > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        int left = 1;
        int right = num;
        while (left <= right) {
            long long mid = left + (right - left) / 2;
            long long square = mid * mid;
            if (square == num) {
                return true;
            } else if (square > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        long long left = 0;
        long long right = num;
        while (left <= right) {
            long long mid = left + (right - left) / 2;
            if (mid * mid == num) {
                return true;
            } else if (mid * mid > num) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        if (num == 1) return true;
        int l = 1, r = num / 2;
        while (l < r) {
            int mid = l + (r - l) / 2;
            long long sq = (long long) mid * mid;
            if (sq == num) return true;
            else if (sq < num) l = mid + 1;
            else r = mid;
        }
        return (long long) l * l == num;

=======

        int left = 1;
        int right = num;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            long long square = (long long)mid * mid;
            if (square == num) {
                return true;
            } else if (square < num) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;

=======

        if (num == 1) return true;
        long long int left = 1, right = num / 2;
        while (left <= right) {
            long long int mid = (left + right) / 2;
            long long int tmp = mid * mid;
            if (tmp == num) {
                return true;
            } else if (tmp < num) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;

=======

        if (num == 1) return true;
        int low = 1, high = num;
        while (low < high) {
            long long mid = (low + high + 1) >> 1;
            long long sq = mid * mid;
            if (sq == num) return true;
            else if (sq > num) high = mid - 1;
            else low = mid;
        }
        return false;
