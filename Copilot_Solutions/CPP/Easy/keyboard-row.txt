Synthesizing 9/10 solutions

=======

        vector<string> row1 = {"q","w","e","r","t","y","u","i","o","p"};
        vector<string> row2 = {"a","s","d","f","g","h","j","k","l"};
        vector<string> row3 = {"z","x","c","v","b","n","m"};
        vector<string> result;
        for (int i = 0; i < words.size(); i++) {
            string word = words[i];
            vector<string> row;
            if (find(row1.begin(), row1.end(), word.substr(0,1)) != row1.end()) {
                row = row1;
            } else if (find(row2.begin(), row2.end(), word.substr(0,1)) != row2.end()) {
                row = row2;
            } else if (find(row3.begin(), row3.end(), word.substr(0,1)) != row3.end()) {
                row = row3;
            }
            bool flag = true;
            for (int j = 1; j < word.length(); j++) {
                if (find(row.begin(), row.end(), word.substr(j,1)) == row.end()) {
                    flag = false;
                    break;
                }
            }
            if (flag == true) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> res;
        string row1 = "qwertyuiopQWERTYUIOP";
        string row2 = "asdfghjklASDFGHJKL";
        string row3 = "zxcvbnmZXCVBNM";
        for (auto word: words) {
            int row = 0;
            for (auto c: word) {
                if (row1.find(c) != string::npos) {
                    if (row == 0) {
                        row = 1;
                    } else if (row != 1) {
                        row = -1;
                        break;
                    }
                } else if (row2.find(c) != string::npos) {
                    if (row == 0) {
                        row = 2;
                    } else if (row != 2) {
                        row = -1;
                        break;
                    }
                } else if (row3.find(c) != string::npos) {
                    if (row == 0) {
                        row = 3;
                    } else if (row != 3) {
                        row = -1;
                        break;
                    }
                }
            }
            if (row != -1) {
                res.push_back(word);
            }
        }
        return res;

=======

        vector<string> result;
        string row1 = "qwertyuiop";
        string row2 = "asdfghjkl";
        string row3 = "zxcvbnm";
        for (auto word: words) {
            string lowerWord;
            for (auto c: word) {
                lowerWord.push_back(tolower(c));
            }
            if (row1.find(lowerWord[0]) != string::npos) {
                bool isFound = true;
                for (auto c: lowerWord) {
                    if (row1.find(c) == string::npos) {
                        isFound = false;
                        break;
                    }
                }
                if (isFound) {
                    result.push_back(word);
                }
            } else if (row2.find(lowerWord[0]) != string::npos) {
                bool isFound = true;
                for (auto c: lowerWord) {
                    if (row2.find(c) == string::npos) {
                        isFound = false;
                        break;
                    }
                }
                if (isFound) {
                    result.push_back(word);
                }
            } else if (row3.find(lowerWord[0]) != string::npos) {
                bool isFound = true;
                for (auto c: lowerWord) {
                    if (row3.find(c) == string::npos) {
                        isFound = false;
                        break;
                    }
                }
                if (isFound) {
                    result.push_back(word);
                }
            }
        }
        return result;

=======

        vector<string> result;
        if (words.size() == 0) return result;
        string row1 = "qwertyuiop";
        string row2 = "asdfghjkl";
        string row3 = "zxcvbnm";
        for (auto word: words) {
            string temp = word;
            transform(temp.begin(), temp.end(), temp.begin(), ::tolower);
            int row = 0;
            if (row1.find(temp[0]) != string::npos) row = 1;
            else if (row2.find(temp[0]) != string::npos) row = 2;
            else row = 3;
            bool flag = true;
            for (int i = 1; i < temp.size(); i++) {
                if (row == 1 && row1.find(temp[i]) == string::npos) {
                    flag = false;
                    break;
                } else if (row == 2 && row2.find(temp[i]) == string::npos) {
                    flag = false;
                    break;
                } else if (row == 3 && row3.find(temp[i]) == string::npos) {
                    flag = false;
                    break;
                }
            }
            if (flag) result.push_back(word);
        }
        return result;

=======

        vector<string> rows = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        vector<string> res;
        for (string word : words) {
            int row = -1;
            for (int i = 0; i < 3; ++i) {
                if (rows[i].find(tolower(word[0])) != string::npos) {
                    row = i;
                    break;
                }
            }
            bool flag = true;
            for (char c : word) {
                if (rows[row].find(tolower(c)) == string::npos) {
                    flag = false;
                    break;
                }
            }
            if (flag) res.push_back(word);
        }
        return res;

=======

        vector<string> rows = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        vector<string> result;
        for (auto word : words) {
            int row = 0;
            while (row < rows.size()) {
                if (rows[row].find(tolower(word[0])) != string::npos) {
                    break;
                }
                row++;
            }
            bool isOneRow = true;
            for (int i = 1; i < word.size(); i++) {
                if (rows[row].find(tolower(word[i])) == string::npos) {
                    isOneRow = false;
                    break;
                }
            }
            if (isOneRow) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> res;
        vector<string> keyboard = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        for (string word : words) {
            int row = -1;
            bool ok = true;
            for (int i = 0; i < word.size(); i++) {
                if (i == 0) {
                    if (keyboard[0].find(tolower(word[i])) != string::npos) {
                        row = 0;
                    } else if (keyboard[1].find(tolower(word[i])) != string::npos) {
                        row = 1;
                    } else {
                        row = 2;
                    }
                } else {
                    if (keyboard[row].find(tolower(word[i])) == string::npos) {
                        ok = false;
                        break;
                    }
                }
            }
            if (ok) {
                res.push_back(word);
            }
        }
        return res;

=======

        vector<string> res;
        vector<string> keyboard = {"qwertyuiop", "asdfghjkl", "zxcvbnm"};
        for (auto word : words) {
            int row = 0;
            for (int i = 0; i < 3; i++) {
                if (keyboard[i].find(tolower(word[0])) != string::npos) {
                    row = i;
                    break;
                }
            }
            bool flag = true;
            for (auto c : word) {
                if (keyboard[row].find(tolower(c)) == string::npos) {
                    flag = false;
                    break;
                }
            }
            if (flag) res.push_back(word);
        }
        return res;

=======

        vector<string> res;
        vector<int> v(26);
        for (char c : "qwertyuiopQWERTYUIOP") v[c - 'a'] = 1;
        for (char c : "asdfghjklASDFGHJKL") v[c - 'a'] = 2;
        for (char c : "zxcvbnmZXCVBNM") v[c - 'a'] = 3;
        for (string word : words) {
            bool flag = true;
            for (int i = 1; i < word.size(); i++) {
                if (v[word[i] - 'a'] != v[word[i - 1] - 'a']) {
                    flag = false;
                    break;
                }
            }
            if (flag) res.push_back(word);
        }
        return res;
