Synthesizing 10/10 solutions

=======

        vector<string> res;
        unordered_map<string, int> m;
        istringstream iss(s1 + " " + s2);
        string word;
        while (iss >> word) {
            m[word]++;
        }
        for (auto& [word, cnt] : m) {
            if (cnt == 1) {
                res.push_back(word);
            }
        }
        return res;

=======

        unordered_map<string, int> m;
        for (auto &c : s1) {
            if (c == ' ') {
                c = '\0';
            }
        }
        for (auto &c : s2) {
            if (c == ' ') {
                c = '\0';
            }
        }
        for (auto p = s1.c_str(); p < s1.c_str() + s1.size(); p += strlen(p) + 1) {
            m[string(p)]++;
        }
        for (auto p = s2.c_str(); p < s2.c_str() + s2.size(); p += strlen(p) + 1) {
            m[string(p)]++;
        }
        vector<string> res;
        for (auto &p : m) {
            if (p.second == 1) {
                res.push_back(p.first);
            }
        }
        return res;

=======

        map<string, int> m;
        vector<string> res;
        stringstream ss(s1);
        string word;
        while (ss >> word) {
            m[word]++;
        }
        ss = stringstream(s2);
        while (ss >> word) {
            m[word]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second == 1) {
                res.push_back(it->first);
            }
        }
        return res;

=======

        map<string, int> cnt;
        istringstream iss(s1 + " " + s2);
        string w;
        while (iss >> w) {
            cnt[w]++;
        }
        vector<string> ans;
        for (auto& [w, c]: cnt) {
            if (c == 1) {
                ans.push_back(w);
            }
        }
        return ans;

=======

        map<string, int> m;
        vector<string> res;
        string temp;
        for (int i = 0; i < s1.length(); i++) {
            if (s1[i] == ' ') {
                m[temp]++;
                temp = "";
            } else {
                temp += s1[i];
            }
        }
        if (temp != "") {
            m[temp]++;
            temp = "";
        }
        for (int i = 0; i < s2.length(); i++) {
            if (s2[i] == ' ') {
                m[temp]++;
                temp = "";
            } else {
                temp += s2[i];
            }
        }
        if (temp != "") {
            m[temp]++;
            temp = "";
        }
        for (auto it : m) {
            if (it.second == 1) {
                res.push_back(it.first);
            }
        }
        return res;

=======

        vector<string> res;
        unordered_map<string, int> m;
        string word;
        istringstream iss(s1 + " " + s2);
        while(iss >> word) {
            m[word]++;
        }
        for(auto& [word, count] : m) {
            if(count == 1) {
                res.push_back(word);
            }
        }
        return res;

=======

        vector<string> result;
        map<string, int> map1;
        map<string, int> map2;
        string temp;
        for (int i = 0; i < s1.size(); i++) {
            if (s1[i] == ' ') {
                map1[temp]++;
                temp = "";
            } else {
                temp += s1[i];
            }
        }
        map1[temp]++;
        temp = "";
        for (int i = 0; i < s2.size(); i++) {
            if (s2[i] == ' ') {
                map2[temp]++;
                temp = "";
            } else {
                temp += s2[i];
            }
        }
        map2[temp]++;
        for (auto& item : map1) {
            if (item.second == 1 && map2.count(item.first) == 0) {
                result.push_back(item.first);
            }
        }
        for (auto& item : map2) {
            if (item.second == 1 && map1.count(item.first) == 0) {
                result.push_back(item.first);
            }
        }
        return result;

=======

        vector<string> v1, v2;
        split(s1, v1);
        split(s2, v2);
        map<string, int> m;
        for (auto& s: v1) {
            m[s]++;
        }
        for (auto& s: v2) {
            m[s]++;
        }
        vector<string> res;
        for (auto& p: m) {
            if (p.second == 1) {
                res.push_back(p.first);
            }
        }
        return res;
    }
    
    void split(const string& s, vector<string>& v) {
        string::size_type pos1, pos2;
        pos2 = s.find(' ');
        pos1 = 0;
        while (string::npos != pos2) {
            v.push_back(s.substr(pos1, pos2 - pos1));
            pos1 = pos2 + 1;
            pos2 = s.find(' ', pos1);
        }
        if (pos1 != s.length()) {
            v.push_back(s.substr(pos1));
        }

=======

        map<string, int> map;
        vector<string> res;
        istringstream iss(s1);
        string word;
        while(iss >> word) {
            map[word]++;
        }
        iss.str(s2);
        while(iss >> word) {
            map[word]++;
        }
        for(auto& it: map) {
            if(it.second == 1) {
                res.push_back(it.first);
            }
        }
        return res;

=======

        map<string, int> s1map;
        map<string, int> s2map;
        vector<string> result;
        string word;
        stringstream ss1(s1);
        while(ss1 >> word){
            if(s1map.find(word) == s1map.end()){
                s1map[word] = 1;
            }else{
                s1map[word]++;
            }
        }
        stringstream ss2(s2);
        while(ss2 >> word){
            if(s2map.find(word) == s2map.end()){
                s2map[word] = 1;
            }else{
                s2map[word]++;
            }
        }
        for(auto it = s1map.begin(); it != s1map.end(); it++){
            if(it->second == 1 && s2map.find(it->first) == s2map.end()){
                result.push_back(it->first);
            }
        }
        for(auto it = s2map.begin(); it != s2map.end(); it++){
            if(it->second == 1 && s1map.find(it->first) == s1map.end()){
                result.push_back(it->first);
            }
        }
        return result;
