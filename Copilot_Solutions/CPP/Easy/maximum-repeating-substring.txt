Synthesizing 10/10 solutions

=======

        int n = sequence.size();
        int m = word.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (sequence[i] == word[0]) {
                int cnt = 0;
                int j = i;
                while (j < n) {
                    bool flag = true;
                    for (int k = 0; k < m; k++) {
                        if (j + k >= n || sequence[j + k] != word[k]) {
                            flag = false;
                            break;
                        }
                    }
                    if (flag) {
                        cnt++;
                        j += m;
                    } else {
                        break;
                    }
                }
                ans = max(ans, cnt);
            }
        }
        return ans;

=======

        int count = 0;
        string temp = word;
        while(sequence.find(temp) != string::npos) {
            count++;
            temp += word;
        }
        return count;

=======

        int count = 0;
        string temp = word;
        while (sequence.find(temp) != string::npos) {
            temp += word;
            count++;
        }
        return count;

=======

        int n = sequence.size();
        int m = word.size();
        int i = 0;
        int j = 0;
        int cnt = 0;
        while (i < n) {
            if (sequence[i] == word[j]) {
                i++;
                j++;
                if (j == m) {
                    cnt++;
                    j = 0;
                }
            } else {
                i++;
                j = 0;
            }
        }
        return cnt;

=======

        int r = 0;
        string t = word;
        while (sequence.find(t) != string::npos) {
            t += word;
            r++;
        }
        return r;

=======

        int i = 0;
        int j = 0;
        int count = 0;
        int max = 0;
        while (i < sequence.length()) {
            if (sequence[i] == word[j]) {
                j++;
                if (j == word.length()) {
                    j = 0;
                    count++;
                }
            } else {
                if (count > max) {
                    max = count;
                }
                count = 0;
                j = 0;
            }
            i++;
        }
        if (count > max) {
            max = count;
        }
        return max;

=======

        int n = sequence.length();
        int m = word.length();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int j = 0;
            int k = i;
            while(k < n && j < m && sequence[k] == word[j]) {
                k++;
                j++;
                if(j == m) {
                    j = 0;
                    ans++;
                }
            }
        }
        return ans;

=======

        int count = 0;
        int i = 0;
        int j = 0;
        int n = sequence.size();
        int m = word.size();
        while (i < n) {
            if (sequence[i] == word[j]) {
                j++;
                if (j == m) {
                    count++;
                    j = 0;
                }
            } else {
                j = 0;
            }
            i++;
        }
        return count;

=======

        int res = 0;
        for (int i = 1; i * word.size() <= sequence.size(); i++) {
            if (sequence.find(word * i) != string::npos) {
                res = i;
            }
        }
        return res;

=======

        int n = word.length();
        int m = sequence.length();
        int ans = 0;
        for(int i = 0; i <= m - n; i++){
            int j = 0;
            while(j < n && word[j] == sequence[i + j]) j++;
            if(j == n){
                int cnt = 1;
                i += n - 1;
                while(i + n <= m){
                    int k = 0;
                    while(k < n && word[k] == sequence[i + k + 1]) k++;
                    if(k == n){
                        cnt++;
                        i += n;
                    }else break;
                }
                ans = max(ans, cnt);
            }
        }
        return ans;
