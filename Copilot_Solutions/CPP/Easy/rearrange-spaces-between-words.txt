Synthesizing 10/10 solutions

=======

        int spaces = 0;
        int words = 0;
        for (int i = 0; i < text.size(); i++) {
            if (text[i] == ' ') {
                spaces++;
            } else {
                words++;
                while (i < text.size() && text[i] != ' ') {
                    i++;
                }
            }
        }
        int space = words == 1 ? spaces : spaces / (words - 1);
        int extra = words == 1 ? 0 : spaces % (words - 1);
        string result = "";
        for (int i = 0; i < text.size(); i++) {
            if (text[i] == ' ') {
                continue;
            } else {
                if (result.size() > 0) {
                    for (int j = 0; j < space; j++) {
                        result += ' ';
                    }
                }
                while (i < text.size() && text[i] != ' ') {
                    result += text[i];
                    i++;
                }
            }
        }
        for (int i = 0; i < extra; i++) {
            result += ' ';
        }
        return result;

=======

        int n = text.size();
        int spaces = 0;
        int words = 0;
        for (int i = 0; i < n; i++) {
            if (text[i] == ' ') {
                spaces++;
            }
        }
        string word = "";
        vector<string> v;
        for (int i = 0; i < n; i++) {
            if (text[i] == ' ') {
                if (word.size() > 0) {
                    words++;
                    v.push_back(word);
                    word = "";
                }
            } else {
                word += text[i];
            }
        }
        if (word.size() > 0) {
            words++;
            v.push_back(word);
        }
        if (words == 1) {
            return v[0] + string(spaces, ' ');
        }
        int spacesBetweenWords = spaces / (words - 1);
        int extraSpaces = spaces % (words - 1);
        string ans = "";
        for (int i = 0; i < words; i++) {
            ans += v[i];
            if (i != words - 1) {
                ans += string(spacesBetweenWords, ' ');
            }
        }
        ans += string(extraSpaces, ' ');
        return ans;

=======

        int n = text.size();
        int spaceCount = 0;
        int wordCount = 0;
        for (int i = 0; i < n; i++) {
            if (text[i] == ' ') {
                spaceCount++;
            }
        }
        string word;
        stringstream ss(text);
        vector<string> words;
        while (ss >> word) {
            words.push_back(word);
        }
        wordCount = words.size();
        int space = 0;
        if (wordCount > 1) {
            space = spaceCount / (wordCount - 1);
        }
        string result;
        for (int i = 0; i < words.size(); i++) {
            result += words[i];
            if (i < words.size() - 1) {
                for (int j = 0; j < space; j++) {
                    result += " ";
                }
            }
        }
        for (int i = 0; i < spaceCount % (wordCount - 1); i++) {
            result += " ";
        }
        return result;

=======

        int n = text.size();
        int space = 0;
        vector<string> words;
        for (int i = 0; i < n; i++) {
            if (text[i] == ' ') {
                space++;
            } else {
                int j = i;
                while (j < n && text[j] != ' ') {
                    j++;
                }
                words.push_back(text.substr(i, j-i));
                i = j;
            }
        }
        int m = words.size();
        if (m == 1) {
            string res = words[0];
            for (int i = 0; i < space; i++) {
                res += ' ';
            }
            return res;
        }
        int gap = space / (m-1);
        int remain = space % (m-1);
        string res = words[0];
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < gap; j++) {
                res += ' ';
            }
            res += words[i];
        }
        for (int i = 0; i < remain; i++) {
            res += ' ';
        }
        return res;

=======

        int space = 0;
        int word = 0;
        string s = "";
        for (int i = 0; i < text.length(); i++) {
            if (text[i] == ' ') {
                space++;
            } else {
                if (i == 0 || text[i - 1] == ' ') {
                    word++;
                }
                s += text[i];
            }
        }
        if (word == 1) {
            return s + string(space, ' ');
        }
        int avg = space / (word - 1);
        int remain = space % (word - 1);
        string ans = "";
        for (int i = 0; i < s.length(); i++) {
            ans += s[i];
            if (s[i] == ' ') {
                ans += string(avg, ' ');
            }
        }
        ans += string(remain, ' ');
        return ans;

=======

        int spaceCount = 0;
        int wordCount = 0;
        for (auto ch : text) {
            if (ch == ' ') {
                spaceCount++;
            }
        }
        stringstream ss(text);
        string word;
        vector<string> words;
        while (ss >> word) {
            words.push_back(word);
        }
        wordCount = words.size();
        if (wordCount == 1) {
            string result = words[0];
            for (int i = 0; i < spaceCount; i++) {
                result += ' ';
            }
            return result;
        }
        int spacePerWord = spaceCount / (wordCount - 1);
        int extraSpace = spaceCount % (wordCount - 1);
        string result = "";
        for (int i = 0; i < words.size(); i++) {
            result += words[i];
            if (i != words.size() - 1) {
                for (int j = 0; j < spacePerWord; j++) {
                    result += ' ';
                }
            }
        }
        for (int i = 0; i < extraSpace; i++) {
            result += ' ';
        }
        return result;

=======

        int spaceCount = 0;
        vector<string> words;
        string word;
        for(char c: text){
            if(c == ' '){
                spaceCount++;
                if(word.size() > 0){
                    words.push_back(word);
                    word.clear();
                }
            }else{
                word.push_back(c);
            }
        }
        if(word.size() > 0){
            words.push_back(word);
        }
        int wordCount = words.size();
        int spaceLength = wordCount > 1 ? spaceCount / (wordCount - 1) : spaceCount;
        string answer;
        for(int i = 0; i < wordCount; i++){
            answer += words[i];
            if(i < wordCount - 1){
                for(int j = 0; j < spaceLength; j++){
                    answer += " ";
                }
            }
        }
        for(int i = 0; i < spaceCount - spaceLength * (wordCount - 1); i++){
            answer += " ";
        }
        return answer;

=======

        int space_count = 0;
        int word_count = 0;
        string word;
        vector<string> words;
        for (char c: text) {
            if (c == ' ') {
                ++space_count;
                if (word.size() > 0) {
                    words.push_back(word);
                    word.clear();
                }
            } else {
                word += c;
            }
        }
        if (word.size() > 0) {
            words.push_back(word);
        }
        word_count = words.size();
        if (word_count == 1) {
            return words[0] + string(space_count, ' ');
        }
        int space_between_words = space_count / (word_count - 1);
        int extra_space = space_count % (word_count - 1);
        string res;
        for (int i = 0; i < word_count - 1; ++i) {
            res += words[i] + string(space_between_words, ' ');
        }
        res += words[word_count - 1] + string(extra_space, ' ');
        return res;

=======

        string res;
        int spaces = 0;
        for (auto c : text) {
            if (c == ' ') {
                ++spaces;
            }
        }
        vector<string> words;
        string word;
        for (auto c : text) {
            if (c == ' ') {
                if (!word.empty()) {
                    words.push_back(word);
                    word.clear();
                }
            } else {
                word.push_back(c);
            }
        }
        if (!word.empty()) {
            words.push_back(word);
        }
        if (words.size() == 1) {
            res = words[0];
            for (int i = 0; i < spaces; ++i) {
                res.push_back(' ');
            }
            return res;
        }
        int spaceNum = spaces / (words.size() - 1);
        int extraSpace = spaces % (words.size() - 1);
        for (int i = 0; i < words.size(); ++i) {
            if (i != 0) {
                for (int j = 0; j < spaceNum; ++j) {
                    res.push_back(' ');
                }
            }
            res += words[i];
        }
        for (int i = 0; i < extraSpace; ++i) {
            res.push_back(' ');
        }
        return res;

=======

        int i = 0;
        int spaceCount = 0;
        int wordCount = 0;
        string word = "";
        vector<string> words;
        for (i = 0; i < text.length(); i++) {
            if (text[i] == ' ') {
                spaceCount++;
                if (word != "") {
                    wordCount++;
                    words.push_back(word);
                    word = "";
                }
            } else {
                word += text[i];
            }
        }
        if (word != "") {
            wordCount++;
            words.push_back(word);
        }
        int spaceBetweenWords = 0;
        int spaceAtEnd = 0;
        if (wordCount > 1) {
            spaceBetweenWords = spaceCount / (wordCount - 1);
            spaceAtEnd = spaceCount % (wordCount - 1);
        } else {
            spaceAtEnd = spaceCount;
        }
        string result = "";
        for (i = 0; i < words.size(); i++) {
            result += words[i];
            if (i < words.size() - 1) {
                for (int j = 0; j < spaceBetweenWords; j++) {
                    result += " ";
                }
            }
        }
        for (i = 0; i < spaceAtEnd; i++) {
            result += " ";
        }
        return result;
