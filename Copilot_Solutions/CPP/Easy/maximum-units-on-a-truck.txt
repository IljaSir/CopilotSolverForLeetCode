Synthesizing 10/10 solutions

=======

        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] > b[1];
        });
        int ans = 0;
        for (auto& box : boxTypes) {
            if (truckSize == 0) break;
            int cnt = min(truckSize, box[0]);
            ans += cnt * box[1];
            truckSize -= cnt;
        }
        return ans;

=======

        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] > b[1];
        });
        int ans = 0;
        for (auto& box: boxTypes) {
            int n = min(box[0], truckSize);
            ans += n * box[1];
            truckSize -= n;
            if (truckSize == 0) break;
        }
        return ans;

=======

        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] > b[1];
        });
        int res = 0;
        for (const auto& box : boxTypes) {
            int size = min(truckSize, box[0]);
            res += size * box[1];
            truckSize -= size;
            if (truckSize <= 0) break;
        }
        return res;

=======

        int res = 0;
        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] > b[1];
        });
        for (auto& box : boxTypes) {
            int n = min(box[0], truckSize);
            res += n * box[1];
            truckSize -= n;
            if (truckSize == 0) break;
        }
        return res;

=======

        sort(boxTypes.begin(), boxTypes.end(), [](const auto& a, const auto& b) {
            return a[1] > b[1];
        });
        int ans = 0;
        for (auto& box : boxTypes) {
            if (truckSize > box[0]) {
                ans += box[0] * box[1];
                truckSize -= box[0];
            } else {
                ans += truckSize * box[1];
                break;
            }
        }
        return ans;

=======

        sort(boxTypes.begin(), boxTypes.end(), [](vector<int> a, vector<int> b) {
            return a[1] > b[1];
        });
        int ans = 0;
        for (auto box : boxTypes) {
            int n = min(truckSize, box[0]);
            ans += n * box[1];
            truckSize -= n;
            if (truckSize == 0) break;
        }
        return ans;

=======

        sort(boxTypes.begin(), boxTypes.end(), [](auto& a, auto& b) {
            return a[1] > b[1];
        });
        int ans = 0;
        for (auto& boxType: boxTypes) {
            if (truckSize <= 0) break;
            int n = min(truckSize, boxType[0]);
            ans += n * boxType[1];
            truckSize -= n;
        }
        return ans;

=======

        int ans = 0;
        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b){
            return a[1] > b[1];
        });
        for (auto& boxType : boxTypes) {
            if (truckSize >= boxType[0]) {
                ans += boxType[0] * boxType[1];
                truckSize -= boxType[0];
            } else {
                ans += truckSize * boxType[1];
                break;
            }
        }
        return ans;

=======

        int ans = 0;
        sort(boxTypes.begin(), boxTypes.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] > b[1];
        });
        for (vector<int>& box : boxTypes) {
            int num = min(box[0], truckSize);
            ans += num * box[1];
            truckSize -= num;
            if (truckSize == 0) break;
        }
        return ans;

=======

        int unit = 0;
        sort(boxTypes.begin(), boxTypes.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] > b[1];
        });
        
        for (int i = 0; i < boxTypes.size(); i++) {
            if (truckSize >= boxTypes[i][0]) {
                unit += boxTypes[i][0] * boxTypes[i][1];
                truckSize -= boxTypes[i][0];
            } else {
                unit += truckSize * boxTypes[i][1];
                break;
            }
        }
        
        return unit;
