Synthesizing 10/10 solutions

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < mat.size(); i++) {
            int count = 0;
            for (int j = 0; j < mat[i].size(); j++) {
                if (mat[i][j] == 1) {
                    count++;
                } else {
                    break;
                }
            }
            v.push_back({count, i});
        }
        sort(v.begin(), v.end());
        vector<int> result;
        for (int i = 0; i < k; i++) {
            result.push_back(v[i].second);
        }
        return result;

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < mat.size(); i++) {
            int sum = 0;
            for (int j = 0; j < mat[i].size(); j++) {
                sum += mat[i][j];
            }
            v.push_back({sum, i});
        }
        sort(v.begin(), v.end());
        vector<int> ans;
        for (int i = 0; i < k; i++) {
            ans.push_back(v[i].second);
        }
        return ans;

=======

        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < mat.size(); ++i) {
            pq.push({-accumulate(mat[i].begin(), mat[i].end(), 0), -i});
            if (pq.size() > k) pq.pop();
        }
        vector<int> res;
        while (!pq.empty()) {
            res.push_back(-pq.top().second);
            pq.pop();
        }
        return res;

=======

        vector<pair<int, int>> v;
        for (int i = 0; i < mat.size(); i++) {
            int j = 0;
            for (; j < mat[i].size(); j++) {
                if (mat[i][j] == 0) {
                    break;
                }
            }
            v.push_back({j, i});
        }
        sort(v.begin(), v.end());
        vector<int> ans;
        for (int i = 0; i < k; i++) {
            ans.push_back(v[i].second);
        }
        return ans;

=======

        vector<int> res;
        vector<pair<int, int>> v;
        for (int i = 0; i < mat.size(); i++) {
            int cnt = 0;
            for (int j = 0; j < mat[i].size(); j++) {
                if (mat[i][j] == 1) {
                    cnt++;
                }
            }
            v.push_back(make_pair(cnt, i));
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < k; i++) {
            res.push_back(v[i].second);
        }
        return res;

=======

        vector<pair<int, int>> v;
        int n = mat.size();
        int m = mat[0].size();
        for (int i = 0; i < n; ++i) {
            int l = 0, r = m;
            while (l < r) {
                int mid = (l + r) / 2;
                if (mat[i][mid] == 0)
                    r = mid;
                else
                    l = mid + 1;
            }
            v.push_back({l, i});
        }
        sort(v.begin(), v.end());
        vector<int> res;
        for (int i = 0; i < k; ++i)
            res.push_back(v[i].second);
        return res;

=======

        vector<int> res;
        vector<pair<int, int>> v;
        for (int i = 0; i < mat.size(); i++) {
            v.push_back({count(mat[i].begin(), mat[i].end(), 1), i});
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < k; i++) {
            res.push_back(v[i].second);
        }
        return res;

=======

        vector<int> result;
        vector<pair<int, int>> temp;
        for(int i = 0; i < mat.size(); i++){
            int count = 0;
            for(int j = 0; j < mat[i].size(); j++){
                if(mat[i][j] == 1)
                    count++;
            }
            temp.push_back(make_pair(count, i));
        }
        sort(temp.begin(), temp.end());
        for(int i = 0; i < k; i++){
            result.push_back(temp[i].second);
        }
        return result;

=======

        vector<int> res;
        vector<int> cnt(mat.size(), 0);
        for(int i=0; i<mat.size(); i++)
            for(int j=0; j<mat[i].size(); j++)
                cnt[i] += mat[i][j];
        vector<int> tmp = cnt;
        sort(tmp.begin(), tmp.end());
        for(int i=0; i<k; i++)
            for(int j=0; j<mat.size(); j++)
                if(cnt[j] == tmp[i]){
                    res.push_back(j);
                    cnt[j] = INT_MAX;
                    break;
                }
        return res;

=======

        int n = mat.size();
        vector<int> ans;
        vector<pair<int, int>> rows(n);
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = 0; j < mat[i].size(); j++) {
                if (mat[i][j] == 1) {
                    cnt++;
                } else {
                    break;
                }
            }
            rows[i] = {cnt, i};
        }
        sort(rows.begin(), rows.end());
        for (int i = 0; i < k; i++) {
            ans.push_back(rows[i].second);
        }
        return ans;
