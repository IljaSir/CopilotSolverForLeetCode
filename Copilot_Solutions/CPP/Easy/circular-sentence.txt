Synthesizing 10/10 solutions

=======

        int n = sentence.size();
        char c = sentence[0];
        for (int i = 1; i < n; i++) {
            if (sentence[i] == ' ') {
                c = sentence[i + 1];
            } else if (sentence[i] != c) {
                return false;
            }
        }
        return true;

=======

        int n = sentence.size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(sentence[i] == ' '){
                cnt++;
            }
        }
        if(cnt == 0) return true;
        int i = 0, j = n - 1;
        while(i < n && sentence[i] == ' ') i++;
        while(j >= 0 && sentence[j] == ' ') j--;
        if(sentence[i] == sentence[j]) return true;
        return false;

=======

        int n = sentence.size();
        int start = 0, end = 0;
        while (end < n) {
            while (end < n && sentence[end] != ' ') {
                ++end;
            }
            if (end == n) {
                break;
            }
            if (sentence[start] != sentence[end - 1]) {
                return false;
            }
            start = ++end;
        }
        return sentence[start] == sentence[end - 1];

=======

        int i = 0;
        int j = 0;
        int n = sentence.size();
        while (j < n) {
            while (j < n && sentence[j] != ' ') {
                j++;
            }
            if (j < n && sentence[j] == ' ' && sentence[i] != sentence[j - 1]) {
                return false;
            }
            j++;
            i = j;
        }
        return sentence[0] == sentence[n - 1];

=======

        int n = sentence.size();
        if (n == 0) return true;
        int i = 0;
        while (i < n && sentence[i] != ' ') i++;
        if (i == n) return true;
        int j = i + 1;
        while (j < n && sentence[j] != ' ') j++;
        if (j == n) return false;
        if (sentence[i - 1] != sentence[j]) return false;
        while (j < n) {
            i = j;
            while (j < n && sentence[j] != ' ') j++;
            if (j == n) return false;
            if (sentence[i - 1] != sentence[j]) return false;
            j++;
        }
        return true;

=======

        int i = 0;
        int j = 0;
        int n = sentence.size();
        while (i < n) {
            while (i < n && sentence[i] != ' ') {
                ++i;
            }
            if (sentence[i - 1] != sentence[j]) {
                return false;
            }
            ++i;
            j = i;
        }
        return true;

=======

        int i = 0;
        int j = 0;
        int k = 0;
        int l = 0;
        int m = 0;
        int n = 0;
        int o = 0;
        int p = 0;
        int q = 0;
        int r = 0;
        int s = 0;
        int t = 0;
        int u = 0;
        int v = 0;
        int w = 0;
        int x = 0;
        int y = 0;
        int z = 0;
        int A = 0;
        int B = 0;
        int C = 0;
        int D = 0;
        int E = 0;
        int F = 0;
        int G = 0;
        int H = 0;
        int I = 0;
        int J = 0;
        int K = 0;
        int L = 0;
        int M = 0;
        int N = 0;
        int O = 0;
        int P = 0;
        int Q = 0;
        int R = 0;
        int S = 0;
        int T = 0;
        int U = 0;
        int V = 0;
        int W = 0;
        int X = 0;
        int Y = 0;
        int Z = 0;
        int space = 0;
        int length = sentence.size();
        for (int i = 0; i < length; i++) {
            if (sentence[i] == 'a') {
                a++;
            }
            else if (sentence[i] == 'b') {
                b++;
            }
            else if (sentence[i] == 'c') {
                c++;
            }
            else if (sentence[i] == 'd') {
                d++;
            }
            else if (sentence[i] == 'e') {
                e++;
            }
            else if (sentence[i] == 'f') {
                f++;
            }
            else if (sentence[i] == 'g') {
                g++;
            }
            else if (sentence[i] == 'h') {
                h++;
            }
            else if (sentence[i] == 'i') {
                i++;
            }
            else if (sentence[i] == '

=======

        int sz = sentence.size();
        int i = 0;
        int j = 0;
        for(; i < sz; ++i) {
            if(sentence[i] == ' ') {
                if(sentence[j] != sentence[i-1]) {
                    return false;
                }
                j = i + 1;
            }
        }
        if(sentence[j] != sentence[i-1]) {
            return false;
        }
        return true;

=======

        if(sentence.empty())
            return false;
        int n = sentence.length();
        int i = 0;
        int j = 0;
        while(i < n)
        {
            while(j < n && sentence[j] != ' ')
                j++;
            if(sentence[i] != sentence[j-1])
                return false;
            i = j+1;
            j = i;
        }
        return true;

=======

        auto it = sentence.begin();
        auto prevIt = sentence.end() - 1;
        while (it != sentence.end()) {
            if (*it == ' ') {
                if (*prevIt != ' ' && *it != *prevIt) {
                    return false;
                }
            }
            prevIt = it;
            it++;
        }
        if (*prevIt != ' ' && *it != *prevIt) {
            return false;
        }
        return true;
