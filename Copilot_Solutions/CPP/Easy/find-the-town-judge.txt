Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> in(n + 1, 0);
        vector<int> out(n + 1, 0);
        for (auto& t : trust) {
            out[t[0]]++;
            in[t[1]]++;
        }
        for (int i = 1; i <= n; ++i) {
            if (in[i] == n - 1 && out[i] == 0) return i;
        }
        return -1;

=======

        vector<int> trustCount(n + 1, 0);
        for (auto& t : trust) {
            trustCount[t[0]]--;
            trustCount[t[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (trustCount[i] == n - 1) {
                return i;
            }
        }
        return -1;

=======

        vector<int> indegree(n + 1, 0), outdegree(n + 1, 0);
        for (auto& t : trust) {
            outdegree[t[0]]++;
            indegree[t[1]]++;
        }
        for (int i = 1; i <= n; i++)
            if (indegree[i] == n - 1 && outdegree[i] == 0)
                return i;
        return -1;

=======

        vector<int> count(n + 1, 0);
        for (const auto& t : trust) {
            --count[t[0]];
            ++count[t[1]];
        }
        for (int i = 1; i <= n; ++i) {
            if (count[i] == n - 1) return i;
        }
        return -1;

=======

        vector<int> in(n+1, 0), out(n+1, 0);
        for (auto &v: trust) {
            out[v[0]]++;
            in[v[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (in[i] == n-1 && out[i] == 0) return i;
        }
        return -1;

=======

        vector<int> outDegree(n + 1, 0);
        vector<int> inDegree(n + 1, 0);
        for (auto& edge : trust) {
            outDegree[edge[0]]++;
            inDegree[edge[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (outDegree[i] == 0 && inDegree[i] == n - 1) {
                return i;
            }
        }
        return -1;

=======

        vector<int> trustCount(n+1);
        for (auto &t: trust) {
            trustCount[t[0]]--;
            trustCount[t[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (trustCount[i] == n-1) {
                return i;
            }
        }
        return -1;

=======

        vector<int> trustedBy(n + 1, 0);
        vector<int> trusts(n + 1, 0);
        for (auto& t : trust) {
            trusts[t[0]]++;
            trustedBy[t[1]]++;
        }
        for (int i = 1; i <= n; ++i) {
            if (trusts[i] == 0 && trustedBy[i] == n - 1) {
                return i;
            }
        }
        return -1;

=======

        if (trust.size() < n - 1) return -1;
        vector<int> in(n + 1);
        vector<int> out(n + 1);
        for (auto& t: trust) {
            out[t[0]]++;
            in[t[1]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (in[i] == n - 1 && out[i] == 0) return i;
        }
        return -1;
