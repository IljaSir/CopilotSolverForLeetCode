Synthesizing 10/10 solutions

=======

        vector<vector<int>> board(3, vector<int>(3, 0));
        for (int i = 0; i < moves.size(); i++) {
            board[moves[i][0]][moves[i][1]] = i % 2 == 0 ? 1 : 2;
        }
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != 0) {
                return board[i][0] == 1 ? "A" : "B";
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != 0) {
                return board[0][i] == 1 ? "A" : "B";
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != 0) {
            return board[0][0] == 1 ? "A" : "B";
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != 0) {
            return board[0][2] == 1 ? "A" : "B";
        }
        return moves.size() == 9 ? "Draw" : "Pending";

=======

        vector<vector<int>> grid(3, vector<int>(3, 0));
        for (int i = 0; i < moves.size(); i++) {
            if (i % 2 == 0) {
                grid[moves[i][0]][moves[i][1]] = 1;
            }
            else {
                grid[moves[i][0]][moves[i][1]] = 2;
            }
        }
        int sum = 0;
        for (int i = 0; i < 3; i++) {
            sum = grid[i][0] + grid[i][1] + grid[i][2];
            if (sum == 3) {
                return "A";
            }
            else if (sum == 6) {
                return "B";
            }
            sum = grid[0][i] + grid[1][i] + grid[2][i];
            if (sum == 3) {
                return "A";
            }
            else if (sum == 6) {
                return "B";
            }
        }
        sum = grid[0][0] + grid[1][1] + grid[2][2];
        if (sum == 3) {
            return "A";
        }
        else if (sum == 6) {
            return "B";
        }
        sum = grid[0][2] + grid[1][1] + grid[2][0];
        if (sum == 3) {
            return "A";
        }
        else if (sum == 6) {
            return "B";
        }
        if (moves.size() == 9) {
            return "Draw";
        }
        else {
            return "Pending";
        }

=======

        int n = moves.size();
        if (n < 5) return "Pending";
        int a[3][3] = {0};
        for (int i = 0; i < n; ++i) {
            a[moves[i][0]][moves[i][1]] = i % 2 == 0 ? 1 : 2;
        }
        for (int i = 0; i < 3; ++i) {
            if (a[i][0] && a[i][0] == a[i][1] && a[i][1] == a[i][2]) {
                return a[i][0] == 1 ? "A" : "B";
            }
            if (a[0][i] && a[0][i] == a[1][i] && a[1][i] == a[2][i]) {
                return a[0][i] == 1 ? "A" : "B";
            }
        }
        if (a[0][0] && a[0][0] == a[1][1] && a[1][1] == a[2][2]) {
            return a[0][0] == 1 ? "A" : "B";
        }
        if (a[0][2] && a[0][2] == a[1][1] && a[1][1] == a[2][0]) {
            return a[0][2] == 1 ? "A" : "B";
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int n = moves.size();
        vector<vector<int>> g(3, vector<int>(3, 0));
        for (int i = 0; i < n; ++i) {
            g[moves[i][0]][moves[i][1]] = i % 2 ? 2 : 1;
        }
        for (int i = 0; i < 3; ++i) {
            if (g[i][0] == g[i][1] && g[i][1] == g[i][2] && g[i][0]) {
                return g[i][0] == 1 ? "A" : "B";
            }
            if (g[0][i] == g[1][i] && g[1][i] == g[2][i] && g[0][i]) {
                return g[0][i] == 1 ? "A" : "B";
            }
        }
        if (g[0][0] == g[1][1] && g[1][1] == g[2][2] && g[0][0]) {
            return g[0][0] == 1 ? "A" : "B";
        }
        if (g[0][2] == g[1][1] && g[1][1] == g[2][0] && g[0][2]) {
            return g[0][2] == 1 ? "A" : "B";
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int n = moves.size();
        vector<vector<int>> g(3, vector<int>(3, 0));
        for (int i = 0; i < n; ++i) {
            g[moves[i][0]][moves[i][1]] = i % 2 + 1;
        }
        for (int i = 0; i < 3; ++i) {
            if (g[i][0] && g[i][0] == g[i][1] && g[i][1] == g[i][2]) {
                return g[i][0] == 1 ? "A" : "B";
            }
            if (g[0][i] && g[0][i] == g[1][i] && g[1][i] == g[2][i]) {
                return g[0][i] == 1 ? "A" : "B";
            }
        }
        if (g[0][0] && g[0][0] == g[1][1] && g[1][1] == g[2][2]) {
            return g[0][0] == 1 ? "A" : "B";
        }
        if (g[0][2] && g[0][2] == g[1][1] && g[1][1] == g[2][0]) {
            return g[0][2] == 1 ? "A" : "B";
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int n = moves.size();
        vector<vector<int>> grid(3, vector<int>(3, 0));
        for(int i = 0; i < n; ++i) {
            int x = moves[i][0];
            int y = moves[i][1];
            if(i % 2 == 0) {
                grid[x][y] = 1;
            } else {
                grid[x][y] = 2;
            }
        }
        for(int i = 0; i < 3; ++i) {
            if(grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][0] != 0) {
                return grid[i][0] == 1 ? "A" : "B";
            }
            if(grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[0][i] != 0) {
                return grid[0][i] == 1 ? "A" : "B";
            }
        }
        if(grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[0][0] != 0) {
            return grid[0][0] == 1 ? "A" : "B";
        }
        if(grid[0][2] == grid[1][1] && grid[1][1] == grid[2][0] && grid[0][2] != 0) {
            return grid[0][2] == 1 ? "A" : "B";
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int a[3][3] = {0};
        int b[3][3] = {0};
        int len = moves.size();
        for (int i = 0; i < len; i++) {
            if (i % 2 == 0) {
                a[moves[i][0]][moves[i][1]] = 1;
            } else {
                b[moves[i][0]][moves[i][1]] = 1;
            }
        }
        for (int i = 0; i < 3; i++) {
            if (a[i][0] == 1 && a[i][1] == 1 && a[i][2] == 1) {
                return "A";
            }
            if (b[i][0] == 1 && b[i][1] == 1 && b[i][2] == 1) {
                return "B";
            }
            if (a[0][i] == 1 && a[1][i] == 1 && a[2][i] == 1) {
                return "A";
            }
            if (b[0][i] == 1 && b[1][i] == 1 && b[2][i] == 1) {
                return "B";
            }
        }
        if (a[0][0] == 1 && a[1][1] == 1 && a[2][2] == 1) {
            return "A";
        }
        if (a[0][2] == 1 && a[1][1] == 1 && a[2][0] == 1) {
            return "A";
        }
        if (b[0][0] == 1 && b[1][1] == 1 && b[2][2] == 1) {
            return "B";
        }
        if (b[0][2] == 1 && b[1][1] == 1 && b[2][0] == 1) {
            return "B";
        }
        if (len < 9) {
            return "Pending";
        }
        return "Draw";

=======

        int n = moves.size();
        char board[3][3] = {0};
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                board[moves[i][0]][moves[i][1]] = 'X';
            } else {
                board[moves[i][0]][moves[i][1]] = 'O';
            }
        }
        for (int i = 0; i < 3; i++) {
            if (board[i][0] != 0 && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                return board[i][0] == 'X' ? "A" : "B";
            }
            if (board[0][i] != 0 && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
                return board[0][i] == 'X' ? "A" : "B";
            }
        }
        if (board[0][0] != 0 && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
            return board[0][0] == 'X' ? "A" : "B";
        }
        if (board[0][2] != 0 && board[0][2] == board[1][1] && board[0][2] == board[2][0]) {
            return board[0][2] == 'X' ? "A" : "B";
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int n = moves.size();
        vector<int> row(3, 0), col(3, 0);
        int diag = 0, antiDiag = 0;
        int player = 1;
        for (int i = 0; i < n; i++) {
            int r = moves[i][0], c = moves[i][1];
            row[r] += player;
            col[c] += player;
            if (r == c) {
                diag += player;
            }
            if (r + c == 2) {
                antiDiag += player;
            }
            if (abs(row[r]) == 3 || abs(col[c]) == 3 || abs(diag) == 3 || abs(antiDiag) == 3) {
                return player == 1 ? "A" : "B";
            }
            player = -player;
        }
        return n == 9 ? "Draw" : "Pending";

=======

        int a = 0, b = 0;
        vector<int> rows(3, 0);
        vector<int> cols(3, 0);
        int diag = 0, antidiag = 0;
        for (int i = 0; i < moves.size(); ++i) {
            int r = moves[i][0], c = moves[i][1];
            if (i % 2 == 0) {
                ++rows[r];
                ++cols[c];
                if (r == c) {
                    ++diag;
                }
                if (r + c == 2) {
                    ++antidiag;
                }
            } else {
                --rows[r];
                --cols[c];
                if (r == c) {
                    --diag;
                }
                if (r + c == 2) {
                    --antidiag;
                }
            }
        }
        for (int i = 0; i < 3; ++i) {
            if (rows[i] == 3 || cols[i] == 3) {
                return "A";
            }
            if (rows[i] == -3 || cols[i] == -3) {
                return "B";
            }
        }
        if (diag == 3 || antidiag == 3) {
            return "A";
        }
        if (diag == -3 || antidiag == -3) {
            return "B";
        }
        if (moves.size() == 9) {
            return "Draw";
        }
        return "Pending";
