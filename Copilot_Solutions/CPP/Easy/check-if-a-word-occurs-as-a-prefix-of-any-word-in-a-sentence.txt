Synthesizing 10/10 solutions

=======

        int count = 1;
        for (int i = 0; i < sentence.size(); i++) {
            if (sentence[i] == ' ') {
                count++;
            }
            if (sentence[i] == searchWord[0]) {
                int j = 0;
                for (; j < searchWord.size(); j++) {
                    if (sentence[i + j] != searchWord[j]) {
                        break;
                    }
                }
                if (j == searchWord.size()) {
                    return count;
                }
            }
        }
        return -1;

=======

        int n = sentence.size();
        int m = searchWord.size();
        if (n < m) return -1;
        int i = 0;
        int j = 0;
        int ans = 0;
        while (i < n) {
            if (sentence[i] == ' ') {
                j = 0;
                ans++;
                i++;
                continue;
            }
            if (j < m && sentence[i] == searchWord[j]) {
                j++;
            } else {
                j = 0;
                ans++;
            }
            i++;
            if (j == m) return ans;
        }
        return -1;

=======

        int index = 0;
        int wordIndex = 1;
        while (index < sentence.size()) {
            int i = index;
            int j = 0;
            while (i < sentence.size() && j < searchWord.size() && sentence[i] == searchWord[j]) {
                i++;
                j++;
            }
            if (j == searchWord.size()) {
                return wordIndex;
            }
            while (i < sentence.size() && sentence[i] != ' ') {
                i++;
            }
            index = i + 1;
            wordIndex++;
        }
        return -1;

=======

        int index = 1;
        string tmp;
        for (int i = 0; i < sentence.length(); i++) {
            if (sentence[i] == ' ') {
                index++;
                continue;
            }
            tmp = "";
            while (i < sentence.length() && sentence[i] != ' ') {
                tmp += sentence[i++];
            }
            if (tmp.length() >= searchWord.length() && tmp.substr(0, searchWord.length()) == searchWord) {
                return index;
            }
            index++;
        }
        return -1;

=======

        int index = 1;
        int i = 0;
        int j = 0;
        while(i < sentence.length() && j < searchWord.length()){
            if(sentence[i] == ' '){
                i++;
                j = 0;
                index++;
            }
            else if(sentence[i] == searchWord[j]){
                i++;
                j++;
            }
            else{
                i++;
                j = 0;
                index++;
            }
        }
        if(j == searchWord.length())
            return index;
        return -1;

=======

        int index = 0;
        int res = -1;
        for (int i = 0; i < sentence.length(); i++) {
            if (sentence[i] == ' ') {
                index++;
            }
            else {
                int j = 0;
                while (j < searchWord.length() && i + j < sentence.length() && sentence[i + j] == searchWord[j]) {
                    j++;
                }
                if (j == searchWord.length()) {
                    res = index + 1;
                    break;
                }
            }
        }
        return res;

=======

        int index = 1;
        string word;
        string::size_type pos;
        while ((pos = sentence.find(' ')) != string::npos) {
            word = sentence.substr(0, pos);
            if (word.find(searchWord) == 0) {
                return index;
            }
            sentence.erase(0, pos + 1);
            index++;
        }
        if (sentence.find(searchWord) == 0) {
            return index;
        }
        return -1;

=======

        int i = 0;
        int j = 0;
        int k = 0;
        int len = sentence.length();
        int len1 = searchWord.length();
        int count = 1;
        while (i < len && j < len1) {
            if (sentence[i] == ' ') {
                count++;
                j = 0;
                i++;
                continue;
            }
            if (sentence[i] == searchWord[j]) {
                i++;
                j++;
                continue;
            }
            else {
                while (i < len && sentence[i] != ' ') {
                    i++;
                }
                count++;
                j = 0;
            }
        }
        if (j == len1) {
            return count;
        }
        return -1;

=======

        int i = 1;
        int len = sentence.length();
        int len2 = searchWord.length();
        bool flag = false;
        for(int j = 0; j < len; j++) {
            if(sentence[j] == ' ') {
                i++;
                flag = false;
            }
            else if(sentence[j] == searchWord[0]) {
                if(len - j >= len2) {
                    int k = 0;
                    while(k < len2) {
                        if(sentence[j + k] != searchWord[k]) {
                            break;
                        }
                        k++;
                    }
                    if(k == len2) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        if(flag) {
            return i;
        }
        else {
            return -1;
        }

=======

        int len = sentence.size();
        int pos = 0;
        int pos2 = 0;
        int i = 1;
        while(pos < len){
            pos2 = sentence.find(' ', pos);
            if(pos2 == string::npos) pos2 = len;
            if(pos2 - pos >= searchWord.size() && sentence.substr(pos, searchWord.size()) == searchWord) return i;
            pos = pos2 + 1;
            i++;
        }
        return -1;
