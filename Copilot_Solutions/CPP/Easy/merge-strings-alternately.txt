Synthesizing 10/10 solutions

=======

        string result;
        int i = 0, j = 0;
        while (i < word1.size() && j < word2.size()) {
            result += word1[i++];
            result += word2[j++];
        }
        while (i < word1.size()) {
            result += word1[i++];
        }
        while (j < word2.size()) {
            result += word2[j++];
        }
        return result;

=======

        int i = 0, j = 0;
        string res;
        while (i < word1.size() && j < word2.size()) {
            res.push_back(word1[i++]);
            res.push_back(word2[j++]);
        }
        while (i < word1.size()) {
            res.push_back(word1[i++]);
        }
        while (j < word2.size()) {
            res.push_back(word2[j++]);
        }
        return res;

=======

        string ans;
        int i = 0, j = 0;
        while (i < word1.size() && j < word2.size()) {
            ans.push_back(word1[i++]);
            ans.push_back(word2[j++]);
        }
        while (i < word1.size()) {
            ans.push_back(word1[i++]);
        }
        while (j < word2.size()) {
            ans.push_back(word2[j++]);
        }
        return ans;

=======

        string result;
        int i = 0;
        int j = 0;
        while (i < word1.size() && j < word2.size()) {
            result += word1[i];
            result += word2[j];
            i++;
            j++;
        }
        if (i < word1.size()) {
            result += word1.substr(i);
        }
        if (j < word2.size()) {
            result += word2.substr(j);
        }
        return result;

=======

        string s;
        int i = 0;
        int j = 0;
        while (i < word1.size() && j < word2.size()) {
            s += word1[i++];
            s += word2[j++];
        }
        while (i < word1.size()) {
            s += word1[i++];
        }
        while (j < word2.size()) {
            s += word2[j++];
        }
        return s;

=======

        string result;
        int i = 0;
        while (i < word1.size() && i < word2.size()) {
            result += word1[i];
            result += word2[i];
            i++;
        }
        while (i < word1.size()) {
            result += word1[i];
            i++;
        }
        while (i < word2.size()) {
            result += word2[i];
            i++;
        }
        return result;

=======

        string result;
        int i = 0;
        for (; i < word1.size() && i < word2.size(); i++) {
            result += word1[i];
            result += word2[i];
        }
        if (i < word1.size()) {
            result += word1.substr(i);
        } else if (i < word2.size()) {
            result += word2.substr(i);
        }
        return result;

=======

        int i = 0, j = 0;
        string result = "";
        while (i < word1.length() && j < word2.length()) {
            result += word1[i];
            result += word2[j];
            i++;
            j++;
        }
        while (i < word1.length()) {
            result += word1[i];
            i++;
        }
        while (j < word2.length()) {
            result += word2[j];
            j++;
        }
        return result;

=======

        string s;
        int i = 0;
        for (; i < word1.size() && i < word2.size(); i++) {
            s += word1[i];
            s += word2[i];
        }
        for (; i < word1.size(); i++) {
            s += word1[i];
        }
        for (; i < word2.size(); i++) {
            s += word2[i];
        }
        return s;

=======

        string ret;
        int i = 0;
        for(; i < word1.size() && i < word2.size(); ++i) {
            ret.push_back(word1[i]);
            ret.push_back(word2[i]);
        }
        if(i < word1.size()) {
            ret += word1.substr(i);
        }
        if(i < word2.size()) {
            ret += word2.substr(i);
        }
        return ret;
