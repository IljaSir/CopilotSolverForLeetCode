Synthesizing 10/10 solutions

=======

        vector<int> cnt(37, 0);
        for (int i = 1; i <= n; ++i) {
            int sum = 0;
            for (int j = i; j > 0; j /= 10) {
                sum += j % 10;
            }
            cnt[sum]++;
        }
        int maxCnt = 0;
        for (int i = 0; i < 37; ++i) {
            maxCnt = max(maxCnt, cnt[i]);
        }
        int res = 0;
        for (int i = 0; i < 37; ++i) {
            if (cnt[i] == maxCnt) {
                res++;
            }
        }
        return res;

=======

        vector<int> cnt(37, 0);
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            for (int j = i; j > 0; j /= 10) {
                sum += j % 10;
            }
            cnt[sum]++;
        }
        int max_cnt = *max_element(cnt.begin(), cnt.end());
        int res = 0;
        for (int i = 0; i < 37; i++) {
            if (cnt[i] == max_cnt) {
                res++;
            }
        }
        return res;

=======

        vector<int> count(37, 0);
        for (int i = 1; i <= n; i++) {
            int t = i;
            int sum = 0;
            while (t > 0) {
                sum += t % 10;
                t /= 10;
            }
            count[sum]++;
        }
        int max = 0;
        for (int i = 0; i < count.size(); i++) {
            if (count[i] > max) {
                max = count[i];
            }
        }
        int ans = 0;
        for (int i = 0; i < count.size(); i++) {
            if (count[i] == max) {
                ans++;
            }
        }
        return ans;

=======

        vector<int> counts(37, 0);
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            counts[sum]++;
        }
        int maxCount = *max_element(counts.begin(), counts.end());
        int count = 0;
        for (auto c : counts) {
            if (c == maxCount) {
                count++;
            }
        }
        return count;

=======

        int count[37] = {0};
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int j = i;
            while (j) {
                sum += j % 10;
                j /= 10;
            }
            count[sum]++;
        }
        int max = 0;
        int result = 0;
        for (int i = 0; i < 37; i++) {
            if (count[i] > max) {
                max = count[i];
                result = 1;
            } else if (count[i] == max) {
                result++;
            }
        }
        return result;

=======

        int cnt[37] = {0};
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int num = i;
            while (num) {
                sum += num % 10;
                num /= 10;
            }
            cnt[sum]++;
        }
        int max = 0;
        int maxcnt = 0;
        for (int i = 1; i <= 36; i++) {
            if (cnt[i] > max) {
                max = cnt[i];
                maxcnt = 1;
            } else if (cnt[i] == max) {
                maxcnt++;
            }
        }
        return maxcnt;

=======

        unordered_map<int, int> m;
        int max = 0;
        for (int i = 1; i <= n; i++) {
            int sum = 0;
            int tmp = i;
            while (tmp) {
                sum += tmp % 10;
                tmp /= 10;
            }
            m[sum]++;
            if (m[sum] > max) {
                max = m[sum];
            }
        }
        int ret = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second == max) {
                ret++;
            }
        }
        return ret;

=======

        int max_size = 0;
        int count = 0;
        unordered_map<int, int> m;
        for (int i = 1; i <= n; ++i) {
            int sum = 0;
            int num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            m[sum]++;
            if (m[sum] > max_size) {
                max_size = m[sum];
                count = 1;
            } else if (m[sum] == max_size) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        vector<int> v(37, 0);
        for (int i = 1; i <= n; ++i) {
            int sum = 0, num = i;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            ++v[sum];
        }
        int maxVal = 0;
        for (int i = 0; i < v.size(); ++i) {
            maxVal = max(maxVal, v[i]);
        }
        for (int i = 0; i < v.size(); ++i) {
            if (v[i] == maxVal) {
                ++res;
            }
        }
        return res;

=======

        int sum = 0;
        int max = 0;
        int count = 0;
        int arr[10000] = {0};
        for(int i = 1; i <= n; i++){
            sum = 0;
            int x = i;
            while(x > 0){
                sum += x % 10;
                x /= 10;
            }
            arr[sum]++;
        }
        for(int i = 0; i < 10000; i++){
            if(arr[i] > max){
                max = arr[i];
                count = 1;
            }
            else if(arr[i] == max){
                count++;
            }
        }
        return count;
