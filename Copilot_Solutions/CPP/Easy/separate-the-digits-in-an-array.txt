Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> result;
        for (auto n : nums) {
            while (n > 0) {
                result.push_back(n % 10);
                n /= 10;
            }
        }
        return result;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            while (num > 0) {
                result.push_back(num % 10);
                num /= 10;
            }
        }
        return result;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i];
            while (n > 0) {
                res.push_back(n % 10);
                n /= 10;
            }
        }
        return res;

=======

        vector<int> result;
        for (int num : nums) {
            while (num > 0) {
                result.push_back(num%10);
                num /= 10;
            }
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> ans;
        for(int i=0; i<nums.size(); i++){
            while(nums[i]){
                ans.push_back(nums[i]%10);
                nums[i] /= 10;
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        vector<int> ans;
        for(int n : nums) {
            while(n > 0) {
                ans.push_back(n % 10);
                n = n / 10;
            }
        }
        return ans;

=======

        vector<int> ans;
        for (int i=0; i<nums.size(); i++) {
            int num = nums[i];
            while (num > 0) {
                ans.push_back(num%10);
                num /= 10;
            }
        }
        return ans;

=======

        vector<int> result;
        for (int num: nums) {
            int temp = num;
            vector<int> digits;
            while (temp > 0) {
                digits.push_back(temp % 10);
                temp /= 10;
            }
            for (int i = digits.size() - 1; i >= 0; i--) {
                result.push_back(digits[i]);
            }
        }
        return result;

=======

        vector<int> out;
        for(int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            while(num > 0) {
                int digit = num % 10;
                num /= 10;
                out.push_back(digit);
            }
        }
        return out;
