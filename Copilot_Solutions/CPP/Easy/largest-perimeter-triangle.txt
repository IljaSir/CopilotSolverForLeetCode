Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        for (int i = nums.size() - 1; i >= 2; --i) {
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }
        return 0;

=======

        sort(nums.begin(), nums.end());
        for (int i = nums.size() - 1; i >= 2; i--) {
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }
        return 0;

=======

        sort(nums.begin(), nums.end());
        for (int i = nums.size() - 3; i >= 0; i--) {
            if (nums[i] + nums[i + 1] > nums[i + 2]) {
                return nums[i] + nums[i + 1] + nums[i + 2];
            }
        }
        return 0;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = n - 3; i >= 0; i--) {
            if (nums[i] + nums[i + 1] > nums[i + 2]) {
                return nums[i] + nums[i + 1] + nums[i + 2];
            }
        }
        return 0;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = n - 3; i >= 0; --i) {
            if (nums[i] + nums[i + 1] > nums[i + 2]) {
                return nums[i] + nums[i + 1] + nums[i + 2];
            }
        }
        return 0;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = n - 1; i >= 2; i--) {
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }
        return 0;

=======

        sort(nums.begin(), nums.end());
        for (int i = nums.size()-1; i >= 2; i--) {
            if (nums[i-2] + nums[i-1] > nums[i]) {
                return nums[i-2] + nums[i-1] + nums[i];
            }
        }
        return 0;

=======

        sort(nums.begin(), nums.end());
        int l = nums.size();
        for (int i = l - 1; i >= 2; i--) {
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }
        return 0;

=======

        int n = nums.size();
        int ans = 0;
        sort(nums.begin(), nums.end());
        for (int i = n - 1; i >= 2; i--) {
            if (nums[i] < nums[i - 1] + nums[i - 2]) {
                ans = nums[i] + nums[i - 1] + nums[i - 2];
                break;
            }
        }
        return ans;

=======

        // sort the array in descending order
        sort(nums.begin(), nums.end(), greater<int>());
        int n = nums.size();
        // iterate through the array
        for (int i = 0; i < n - 2; i++) {
            // check if the triangle is valid
            if (nums[i] < (nums[i+1] + nums[i+2])) {
                return nums[i] + nums[i+1] + nums[i+2];
            }
        }
        // return 0 if no valid triangle is found
        return 0;
