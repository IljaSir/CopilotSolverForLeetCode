Synthesizing 10/10 solutions

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            int sum = nums[i];
            for (int j = i + 1; j < n; j++) {
                sum += nums[j];
                if (sum == 0) return true;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            int sum = nums[i];
            for (int j = i + 1; j < n; j++) {
                sum += nums[j];
                if (sum == 0) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int sum1 = 0, sum2 = 0;
                for (int k = 0; k <= i; ++k) {
                    sum1 += nums[k];
                }
                for (int k = i + 1; k <= j; ++k) {
                    sum2 += nums[k];
                }
                if (sum1 == sum2) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        unordered_set<int> s;
        int sum = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += nums[i];
            if (s.find(sum) != s.end()) {
                return true;
            }
            s.insert(sum);
        }
        return false;

=======

        unordered_map<int, int> m;
        int sum = 0;
        m[0] = -1;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (m.find(sum) != m.end()) {
                if (i - m[sum] > 1) {
                    return true;
                }
            } else {
                m[sum] = i;
            }
        }
        return false;

=======

        unordered_map<int, int> mp;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (mp.find(sum) == mp.end()) {
                mp[sum] = i;
            } else {
                if (i - mp[sum] > 1) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        int sum = 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (m.find(sum) != m.end() && i - m[sum] > 1)
                return true;
            if (m.find(sum) == m.end())
                m[sum] = i;
        }
        return false;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 1; i <= n; ++i) sum[i] = sum[i-1] + nums[i-1];
        unordered_map<int, int> mp;
        for (int i = 0; i <= n; ++i) {
            if (mp.count(sum[i])) return true;
            mp[sum[i]] = i;
        }
        return false;

=======

        unordered_set<int> sumSet;
        int sum = 0;
        for(int i = 0; i < nums.size() - 1; i++) {
            sum += nums[i];
            if(sumSet.find(sum) != sumSet.end()) return true;
            sumSet.insert(sum);
        }
        return false;

=======

        int len = nums.size();
        if (len < 2) return false;
        unordered_map<int, int> sumIndex;
        int sum = 0;
        for (int i = 0; i < len; i++) {
            sum += nums[i];
            if (sumIndex.find(sum) != sumIndex.end()) {
                if (i - sumIndex[sum] >= 2) return true;
            } else {
                sumIndex[sum] = i;
            }
        }
        return false;
