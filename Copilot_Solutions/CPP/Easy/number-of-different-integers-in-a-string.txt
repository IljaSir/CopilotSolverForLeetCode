Synthesizing 10/10 solutions

=======

        set<string> s;
        for (int i = 0; i < word.size(); i++) {
            if (isdigit(word[i])) {
                int j = i;
                while (j < word.size() && isdigit(word[j])) j++;
                s.insert(word.substr(i, j - i));
                i = j;
            }
        }
        return s.size();

=======

        unordered_set<string> s;
        int n = word.size();
        for (int i = 0; i < n; ++i) {
            if (isdigit(word[i])) {
                int j = i;
                while (j < n && isdigit(word[j])) ++j;
                s.insert(word.substr(i, j - i));
                i = j;
            }
        }
        return s.size();

=======

        int n = word.size();
        set<string> s;
        for (int i = 0; i < n; i++) {
            if (word[i] < '0' || word[i] > '9') {
                word[i] = ' ';
            }
        }
        stringstream ss(word);
        string tmp;
        while (ss >> tmp) {
            int i = 0;
            while (i < tmp.size() && tmp[i] == '0') {
                i++;
            }
            tmp = tmp.substr(i);
            if (tmp.size() > 0) {
                s.insert(tmp);
            }
        }
        return s.size();

=======

        int n = word.size();
        unordered_set<string> s;
        for(int i = 0; i < n; i++) {
            if(isdigit(word[i])) {
                int j = i;
                while(j < n && isdigit(word[j])) j++;
                string t = word.substr(i, j - i);
                while(t[0] == '0' && t.size() > 1) t.erase(t.begin());
                s.insert(t);
                i = j;
            }
        }
        return s.size();

=======

        unordered_set<string> set;
        string tmp;
        for (auto c : word) {
            if (c >= '0' && c <= '9') {
                tmp += c;
            } else {
                if (!tmp.empty()) {
                    while (tmp[0] == '0') {
                        tmp.erase(0, 1);
                    }
                    set.insert(tmp);
                }
                tmp.clear();
            }
        }
        if (!tmp.empty()) {
            while (tmp[0] == '0') {
                tmp.erase(0, 1);
            }
            set.insert(tmp);
        }
        return set.size();

=======

        int n = word.size();
        unordered_set<string> s;
        string t;
        for(int i = 0; i < n; i++){
            if(word[i] >= '0' && word[i] <= '9'){
                t += word[i];
                while(i + 1 < n && word[i + 1] >= '0' && word[i + 1] <= '9'){
                    t += word[i + 1];
                    i++;
                }
                while(t.size() > 1 && t[0] == '0'){
                    t = t.substr(1);
                }
                s.insert(t);
                t = "";
            }
        }
        return s.size();

=======

        int len = word.length();
        unordered_set<string> st;
        string tmp = "";
        for (int i = 0; i < len; i++) {
            if (isdigit(word[i])) {
                tmp += word[i];
            } else {
                if (tmp.length() > 0) {
                    st.insert(tmp);
                    tmp = "";
                }
            }
        }
        if (tmp.length() > 0) {
            st.insert(tmp);
        }
        return st.size();

=======

        set<string> st;
        string num;
        for (char c : word) {
            if (isdigit(c)) {
                num += c;
            } else {
                if (!num.empty()) {
                    st.insert(num);
                    num.clear();
                }
            }
        }
        if (!num.empty()) {
            st.insert(num);
        }
        return st.size();

=======

        int n=word.size();
        int i=0;
        set<string> s;
        while(i<n){
            if(word[i]>='0' && word[i]<='9'){
                string t="";
                while(i<n && word[i]>='0' && word[i]<='9'){
                    t+=word[i];
                    i++;
                }
                while(t.size()>1 && t[0]=='0'){
                    t=t.substr(1);
                }
                s.insert(t);
            }
            else{
                i++;
            }
        }
        return s.size();

=======

        unordered_set<string> s;
        string cur;
        for (char c: word) {
            if (!isdigit(c)) {
                if (cur.size() > 0) {
                    s.insert(cur);
                    cur.clear();
                }
            } else {
                if (cur.size() == 0 || cur[0] != '0') {
                    cur += c;
                }
            }
        }
        if (cur.size() > 0) {
            s.insert(cur);
        }
        return s.size();
