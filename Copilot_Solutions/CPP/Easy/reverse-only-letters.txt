Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = s.length() - 1;
        while (i < j) {
            while (i < j && !isalpha(s[i])) i++;
            while (i < j && !isalpha(s[j])) j--;
            swap(s[i++], s[j--]);
        }
        return s;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            while (i < j && !isalpha(s[i])) {
                i++;
            }
            while (i < j && !isalpha(s[j])) {
                j--;
            }
            swap(s[i++], s[j--]);
        }
        return s;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            while (i < j && !isalpha(s[i])) {
                i++;
            }
            while (i < j && !isalpha(s[j])) {
                j--;
            }
            swap(s[i], s[j]);
            i++;
            j--;
        }
        return s;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            if (!isalpha(s[i])) {
                i++;
            } else if (!isalpha(s[j])) {
                j--;
            } else {
                swap(s[i++], s[j--]);
            }
        }
        return s;

=======

        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (!isalpha(s[i])) {
                i++;
            } else if (!isalpha(s[j])) {
                j--;
            } else {
                swap(s[i++], s[j--]);
            }
        }
        return s;

=======

        int i = 0, j = s.size()-1;
        while (i < j) {
            while (i < j && !isalpha(s[i])) i++;
            while (i < j && !isalpha(s[j])) j--;
            swap(s[i++], s[j--]);
        }
        return s;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            if (!isalpha(s[i])) {
                i++;
            }
            if (!isalpha(s[j])) {
                j--;
            }
            if (isalpha(s[i]) && isalpha(s[j])) {
                swap(s[i], s[j]);
                i++;
                j--;
            }
        }
        return s;

=======

        int i=0;
        int j=s.size()-1;
        while(i<j){
            while(i<j && !isalpha(s[i])) i++;
            while(i<j && !isalpha(s[j])) j--;
            swap(s[i],s[j]);
            i++;
            j--;
        }
        return s;
