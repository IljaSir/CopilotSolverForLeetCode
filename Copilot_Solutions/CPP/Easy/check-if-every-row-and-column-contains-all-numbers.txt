Synthesizing 10/10 solutions

=======

        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] > n || matrix[i][j] < 1) return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            vector<bool> row(n, false);
            vector<bool> col(n, false);
            for (int j = 0; j < n; j++) {
                if (row[matrix[i][j] - 1]) return false;
                if (col[matrix[j][i] - 1]) return false;
                row[matrix[i][j] - 1] = true;
                col[matrix[j][i] - 1] = true;
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        vector<bool> row(n, false);
        vector<bool> col(n, false);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] > n) {
                    return false;
                }
                row[matrix[i][j] - 1] = true;
                col[matrix[j][i] - 1] = true;
            }
            for (int j = 0; j < n; ++j) {
                if (!row[j] || !col[j]) {
                    return false;
                }
                row[j] = false;
                col[j] = false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<vector<int>> matrix(9, vector<int>(9, 0));
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] != '.') {
                    matrix[i][j] = board[i][j] - '0';
                }
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        for (int i = 0; i < n; ++i) {
            vector<int> row(n, 0);
            vector<int> col(n, 0);
            for (int j = 0; j < n; ++j) {
                row[matrix[i][j] - 1] = 1;
                col[matrix[j][i] - 1] = 1;
            }
            for (int j = 0; j < n; ++j) {
                if (row[j] == 0 || col[j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<vector<int>> matrix(9, vector<int>(9, 0));
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] != '.') {
                    matrix[i][j] = board[i][j] - '0';
                }
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        vector<bool> rows(n, false), cols(n, false);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 1) {
                    rows[i] = true;
                    cols[j] = true;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            if (!rows[i] || !cols[i]) {
                return false;
            }
        }
        return true;

=======

        int n = matrix.size();
        vector<bool> row(n, false);
        vector<bool> col(n, false);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] > n) return false;
                row[matrix[i][j] - 1] = true;
                col[matrix[j][i] - 1] = true;
            }
            for(int j = 0; j < n; j++) {
                if(!row[j] || !col[j]) return false;
            }
            fill(row.begin(), row.end(), false);
            fill(col.begin(), col.end(), false);
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board.size();
        vector<vector<int>> matrix(n, vector<int>(n, 0));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == '.') continue;
                matrix[i][j] = board[i][j] - '0';
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int val = matrix[i][j];
                if (val <= 0 || val > n) return false;
                matrix[i][j] = -val;
                if (matrix[val-1][j] > 0) return false;
                matrix[val-1][j] = -val;
                if (matrix[i][val-1] > 0) return false;
                matrix[i][val-1] = -val;
            }
        }
        return true;

=======

        int n = matrix.size();
        vector<int> r(n, 0);
        vector<int> c(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                r[i] |= (1 << matrix[i][j]);
                c[j] |= (1 << matrix[i][j]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (r[i] != (1 << (n + 1)) - 2 || c[i] != (1 << (n + 1)) - 2) {
                return false;
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board.size();
        vector<vector<int>> matrix(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == '.') {
                    matrix[i][j] = 0;
                } else {
                    matrix[i][j] = board[i][j] - '0';
                }
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        int m = matrix[0].size();
        vector<int> row(n, 0);
        vector<int> col(m, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (row[i] != (1 << n + 1) - 2 || col[j] != (1 << n + 1) - 2) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = matrix.size();
        vector<unordered_set<int>> row(n);
        vector<unordered_set<int>> col(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(row[i].find(matrix[i][j])!=row[i].end()) return false;
                row[i].insert(matrix[i][j]);
                if(col[j].find(matrix[i][j])!=col[j].end()) return false;
                col[j].insert(matrix[i][j]);
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board.size();
        vector<vector<int>> matrix(n, vector<int>(n));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                matrix[i][j] = board[i][j]-'0';
            }
        }
        return checkValid(matrix);

=======

        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(!visited[i][j]) {
                    visited[i][j] = true;
                    int val = matrix[i][j];
                    if(val < 1 || val > n) return false;
                    for(int k = 0; k < n; k++) {
                        if(matrix[i][k] == val) {
                            if(visited[i][k]) return false;
                            visited[i][k] = true;
                        }
                    }
                    for(int k = 0; k < m; k++) {
                        if(matrix[k][j] == val) {
                            if(visited[k][j]) return false;
                            visited[k][j] = true;
                        }
                    }
                }
            }
        }
        return true;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> matrix(n, vector<int>(m, 0));
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(board[i][j] == '.') matrix[i][j] = 0;
                else matrix[i][j] = board[i][j] - '0';
            }
        }
        return checkValid(matrix);
