Synthesizing 10/10 solutions

=======

        int n = words.size();
        vector<int> cnt(26, 0);
        for (string& w : words) {
            for (char c : w) {
                cnt[c - 'a']++;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] % n != 0) {
                return false;
            }
        }
        return true;

=======

        int n = words.size();
        int cnt[26] = {0};
        for (int i = 0; i < n; i++) {
            for (auto c : words[i]) {
                cnt[c - 'a']++;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] % n != 0) return false;
        }
        return true;

=======

        int n = words.size();
        vector<int> cnt(26, 0);
        for (string& s: words) {
            for (char c: s) {
                cnt[c - 'a']++;
            }
        }
        for (int x: cnt) {
            if (x % n != 0) return false;
        }
        return true;

=======

        vector<int> count(26, 0);
        int n = words.size();
        for (int i = 0; i < n; i++) {
            for (auto c: words[i]) {
                count[c - 'a']++;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (count[i] % n != 0) {
                return false;
            }
        }
        return true;

=======

        int n = words.size();
        vector<int> cnt(26, 0);
        for (auto &w : words) {
            for (auto &c : w) {
                cnt[c - 'a']++;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] % n != 0) return false;
        }
        return true;

=======

        int n = words.size();
        vector<int> freq(26, 0);
        for (auto word : words) {
            for (auto c : word) {
                freq[c - 'a']++;
            }
        }
        for (auto f : freq) {
            if (f % n != 0) return false;
        }
        return true;

=======

        int n = words.size();
        vector<int> cnt(26, 0);
        for (auto& word: words) {
            for (auto& c: word) {
                cnt[c - 'a']++;
            }
        }
        for (int i = 0; i < 26; i++) {
            if (cnt[i] > 0 && cnt[i] % n != 0) {
                return false;
            }
        }
        return true;

=======

        int n = words.size();
        if (n == 1) return true;
        vector<int> cnt(26, 0);
        for (auto& w : words) {
            for (auto& c : w) {
                cnt[c - 'a']++;
            }
        }
        for (auto& c : cnt) {
            if (c % n != 0) return false;
        }
        return true;

=======

        int n = words.size();
        if (n == 1) return true;
        unordered_map<char, int> m;
        for (string& s: words) {
            for (char c: s) {
                m[c]++;
            }
        }
        for (auto& [c, cnt]: m) {
            if (cnt % n != 0) return false;
        }
        return true;

=======

        int n = words.size();
        int m = words[0].length();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += words[i].length();
        }
        if (sum % n != 0) return false;
        int avg = sum / n;
        for (int i = 0; i < n; i++) {
            if (words[i].length() != avg) return false;
        }
        return true;
