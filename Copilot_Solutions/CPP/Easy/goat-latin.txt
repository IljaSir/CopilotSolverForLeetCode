Synthesizing 10/10 solutions

=======

        stringstream ss(sentence);
        string word;
        string res;
        int count = 1;
        while (ss >> word) {
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' ||
                word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
                word += "ma";
            } else {
                word = word.substr(1) + word[0] + "ma";
            }
            word += string(count, 'a');
            res += word + " ";
            count += 1;
        }
        res.pop_back();
        return res;

=======

        string res;
        int cnt = 1;
        for (int i = 0; i < sentence.size(); ++i) {
            int j = i;
            while (j < sentence.size() && sentence[j] != ' ') ++j;
            if (sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' || sentence[i] == 'o' || sentence[i] == 'u' || sentence[i] == 'A' || sentence[i] == 'E' || sentence[i] == 'I' || sentence[i] == 'O' || sentence[i] == 'U') {
                res += sentence.substr(i, j - i);
                res += "ma";
            } else {
                res += sentence.substr(i + 1, j - i - 1);
                res += sentence[i];
                res += "ma";
            }
            for (int k = 0; k < cnt; ++k) {
                res += "a";
            }
            ++cnt;
            i = j;
            if (i < sentence.size()) res += " ";
        }
        return res;

=======

        stringstream ss(sentence);
        string word;
        string result;
        int count = 0;
        while (ss >> word) {
            if (count > 0) {
                result += " ";
            }
            count++;
            if (word.length() == 0) {
                continue;
            }
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' ||
                word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
                result += word;
            } else {
                result += word.substr(1);
                result += word[0];
            }
            result += "ma";
            for (int i = 0; i < count; i++) {
                result += "a";
            }
        }
        return result;

=======

        string res;
        string suffix = "ma";
        int count = 0;
        for (int i = 0; i < sentence.size(); i++) {
            int j = i;
            while (j < sentence.size() && sentence[j] != ' ') {
                j++;
            }
            count++;
            string word = sentence.substr(i, j - i);
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' ||
                word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
                res += word + suffix;
            } else {
                res += word.substr(1) + word[0] + suffix;
            }
            for (int k = 0; k < count; k++) {
                res += 'a';
            }
            res += ' ';
            i = j;
        }
        res.pop_back();
        return res;

=======

        string str = "";
        int cnt = 0;
        for (int i = 0; i < sentence.length(); ++i) {
            if (sentence[i] == ' ') {
                if (str[0] == 'a' || str[0] == 'e' || str[0] == 'i' || str[0] == 'o' || str[0] == 'u' || str[0] == 'A' || str[0] == 'E' || str[0] == 'I' || str[0] == 'O' || str[0] == 'U') {
                    str += "ma";
                } else {
                    char c = str[0];
                    str = str.substr(1);
                    str += c;
                    str += "ma";
                }
                cnt++;
                for (int j = 0; j < cnt; ++j) {
                    str += 'a';
                }
                sentence.replace(i - str.length() + 1, str.length(), str);
                str = "";
            } else {
                str += sentence[i];
            }
        }
        if (str[0] == 'a' || str[0] == 'e' || str[0] == 'i' || str[0] == 'o' || str[0] == 'u' || str[0] == 'A' || str[0] == 'E' || str[0] == 'I' || str[0] == 'O' || str[0] == 'U') {
                    str += "ma";
                } else {
                    char c = str[0];
                    str = str.substr(1);
                    str += c;
                    str += "ma";
                }
                cnt++;
                for (int j = 0; j < cnt; ++j) {
                    str += 'a';
                }
                sentence.replace(sentence.length() - str.length(), str.length(), str);
        return sentence;

=======

        string res;
        string word;
        string suffix = "ma";
        string a = "a";
        istringstream iss(sentence);
        while (iss >> word) {
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' ||
                word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
                word += suffix;
            } else {
                word = word.substr(1) + word[0] + suffix;
            }
            res += word + a + " ";
            suffix += "a";
        }
        res.pop_back();
        return res;

=======

        stringstream ss(sentence);
        string word;
        string result;
        string suffix = "ma";
        string a = "a";
        int i = 0;
        while (ss >> word) {
            i++;
            suffix += a;
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' || word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
            result += word + suffix + " ";
        }
        else {
            word += word[0];
            result += word.substr(1, word.size()-1) + suffix + " ";
        }

=======

        int i = 0;
        int j = 0;
        int n = sentence.size();
        string ans;
        int cnt = 1;
        while (i < n) {
            j = i;
            while (j < n && sentence[j] != ' ') {
                j++;
            }
            string word = sentence.substr(i, j - i);
            if (word[0] == 'a' || word[0] == 'A' || word[0] == 'e' || word[0] == 'E' || word[0] == 'i' || word[0] == 'I' || word[0] == 'o' || word[0] == 'O' || word[0] == 'u' || word[0] == 'U') {
            } else {
                word = word.substr(1) + word[0];
            }
            word += "ma";
            for (int k = 0; k < cnt; k++) {
                word += 'a';
            }
            cnt++;
            i = j + 1;
            ans += word + " ";
        }
        return ans.substr(0, ans.size() - 1);

=======

        string res;
        string suffix = "ma";
        int count = 1;
        int pos = 0;
        while (pos < sentence.size()) {
            int start = pos;
            while (pos < sentence.size() && sentence[pos] != ' ') {
                pos++;
            }
            string word = sentence.substr(start, pos - start);
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u' ||
                word[0] == 'A' || word[0] == 'E' || word[0] == 'I' || word[0] == 'O' || word[0] == 'U') {
                res += word;
            } else {
                res += word.substr(1);
                res += word[0];
            }
            res += suffix;
            suffix += "a";
            res += " ";
            pos++;
        }
        res.pop_back();
        return res;

=======

        string result = "";
        int i = 0;
        int j = 0;
        int word = 0;
        bool isVowel = false;
        while (i < sentence.size()) {
            j = i;
            while (j < sentence.size() && sentence[j] != ' ') {
                j++;
            }
            word++;
            if (sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] == 'i' || sentence[i] == 'o' || sentence[i] == 'u' ||
                sentence[i] == 'A' || sentence[i] == 'E' || sentence[i] == 'I' || sentence[i] == 'O' || sentence[i] == 'U') {
                isVowel = true;
            } else {
                isVowel = false;
            }
            if (isVowel) {
                result += sentence.substr(i, j - i);
                result += "ma";
            } else {
                result += sentence.substr(i + 1, j - i - 1);
                result += sentence[i];
                result += "ma";
            }
            for (int k = 0; k < word; k++) {
                result += "a";
            }
            if (j < sentence.size()) {
                result += " ";
            }
            i = j + 1;
        }
        return result;
