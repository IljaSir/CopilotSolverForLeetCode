Synthesizing 5/10 solutions

=======

        unordered_map<int, int> m1, m2;
        for (auto& item : items1) {
            m1[item[0]] = item[1];
        }
        for (auto& item : items2) {
            m2[item[0]] = item[1];
        }
        vector<vector<int>> ret;
        for (auto& item : m1) {
            if (m2.count(item.first)) {
                ret.push_back({item.first, item.second + m2[item.first]});
            } else {
                ret.push_back({item.first, item.second});
            }
        }
        for (auto& item : m2) {
            if (m1.count(item.first) == 0) {
                ret.push_back({item.first, item.second});
            }
        }
        sort(ret.begin(), ret.end());
        return ret;

=======

        unordered_map<int, int> m1;
        for (auto& item : items1) {
            m1[item[0]] += item[1];
        }
        unordered_map<int, int> m2;
        for (auto& item : items2) {
            m2[item[0]] += item[1];
        }
        vector<vector<int>> ret;
        for (auto& [k, v] : m1) {
            if (m2.count(k)) {
                ret.push_back({k, v + m2[k]});
            }
        }
        for (auto& [k, v] : m2) {
            if (!m1.count(k)) {
                ret.push_back({k, v});
            }
        }
        sort(ret.begin(), ret.end());
        return ret;

=======

        int n1 = items1.size();
        int n2 = items2.size();
        map<int, int> m1;
        map<int, int> m2;
        for (int i = 0; i < n1; i++) {
            m1[items1[i][0]] = items1[i][1];
        }
        for (int i = 0; i < n2; i++) {
            m2[items2[i][0]] = items2[i][1];
        }
        vector<vector<int>> ret;
        for (auto it = m1.begin(); it != m1.end(); it++) {
            int val = it->first;
            int w1 = it->second;
            int w2 = m2[val];
            ret.push_back({val, w1 + w2});
        }
        for (auto it = m2.begin(); it != m2.end(); it++) {
            int val = it->first;
            if (m1.find(val) == m1.end()) {
                ret.push_back({val, it->second});
            }
        }
        sort(ret.begin(), ret.end());
        return ret;

=======

        unordered_map<int, int> map;
        for (auto &item: items1) {
            map[item[0]] += item[1];
        }
        for (auto &item: items2) {
            map[item[0]] += item[1];
        }
        vector<vector<int>> ret;
        for (auto &item: map) {
            ret.push_back({item.first, item.second});
        }
        sort(ret.begin(), ret.end());
        return ret;

=======

        vector<vector<int>> res;
        map<int, int> m1, m2;
        for (auto& v : items1) m1[v[0]] += v[1];
        for (auto& v : items2) m2[v[0]] += v[1];
        for (auto& p : m1) {
            if (m2.count(p.first)) {
                res.push_back({p.first, p.second + m2[p.first]});
                m2.erase(p.first);
            } else {
                res.push_back({p.first, p.second});
            }
        }
        for (auto& p : m2) {
            res.push_back({p.first, p.second});
        }
        sort(res.begin(), res.end());
        return res;
