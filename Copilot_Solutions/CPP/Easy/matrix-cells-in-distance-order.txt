Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> res;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res.push_back({i, j});
            }
        }
        sort(res.begin(), res.end(), [rCenter, cCenter](vector<int>& a, vector<int>& b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return res;

=======

        vector<vector<int>> res;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res.push_back({i, j});
            }
        }
        sort(res.begin(), res.end(), [rCenter, cCenter](vector<int> a, vector<int> b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return res;

=======

        vector<vector<int>> res;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                res.push_back({i, j});
            }
        }
        sort(res.begin(), res.end(), [&](auto& a, auto& b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return res;

=======

        vector<vector<int>> res;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                res.push_back({i, j});
            }
        }
        sort(res.begin(), res.end(), [rCenter, cCenter](const vector<int>& a, const vector<int>& b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return res;

=======

        vector<vector<int>> result;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.push_back({i, j});
            }
        }
        sort(result.begin(), result.end(), [rCenter, cCenter](const vector<int>& a, const vector<int>& b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return result;

=======

        vector<vector<int>> res;
        vector<int> tmp;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                tmp.push_back(i);
                tmp.push_back(j);
                res.push_back(tmp);
                tmp.clear();
            }
        }
        sort(res.begin(), res.end(), [&](vector<int>& a, vector<int>& b) {
            return abs(a[0] - rCenter) + abs(a[1] - cCenter) < abs(b[0] - rCenter) + abs(b[1] - cCenter);
        });
        return res;

=======

        vector<vector<int>> res;
        vector<vector<int>> dist(rows, vector<int>(cols, 0));
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                dist[i][j] = abs(i - rCenter) + abs(j - cCenter);
            }
        }
        vector<pair<int, pair<int, int>>> v;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                v.push_back({dist[i][j], {i, j}});
            }
        }
        sort(v.begin(), v.end());
        for (auto& p : v) {
            res.push_back({p.second.first, p.second.second});
        }
        return res;

=======

        vector<vector<int>> ans;
        ans.push_back({rCenter, cCenter});
        for (int i = 1; i < max(rows, cols); ++i) {
            for (int j = 0; j < i; ++j) {
                int x = rCenter - i + j;
                int y = cCenter + j;
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    ans.push_back({x, y});
                }
                x = rCenter + i - j;
                y = cCenter - j;
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    ans.push_back({x, y});
                }
                x = rCenter + j;
                y = cCenter + i - j;
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    ans.push_back({x, y});
                }
                x = rCenter - j;
                y = cCenter - i + j;
                if (x >= 0 && x < rows && y >= 0 && y < cols) {
                    ans.push_back({x, y});
                }
            }
        }
        return ans;

=======

        vector<vector<int>> ans;
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));
        q.push(pair<int, int>(rCenter, cCenter));
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int r = p.first;
            int c = p.second;
            if (r < 0 || r >= rows || c < 0 || c >= cols || visited[r][c]) continue;
            ans.push_back(vector<int>{r, c});
            visited[r][c] = true;
            q.push(pair<int, int>(r - 1, c));
            q.push(pair<int, int>(r + 1, c));
            q.push(pair<int, int>(r, c - 1));
            q.push(pair<int, int>(r, c + 1));
        }
        return ans;
