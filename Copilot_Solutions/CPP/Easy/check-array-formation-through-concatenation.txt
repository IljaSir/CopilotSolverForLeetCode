Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        for (int i = 0; i < pieces.size(); ++i) {
            m[pieces[i][0]] = i;
        }
        int i = 0;
        while (i < arr.size()) {
            if (m.count(arr[i]) == 0) {
                return false;
            }
            int j = 0;
            int index = m[arr[i]];
            while (j < pieces[index].size() && i < arr.size() && arr[i] == pieces[index][j]) {
                ++i;
                ++j;
            }
            if (j != pieces[index].size()) {
                return false;
            }
        }
        return true;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < pieces.size(); i++) {
            m[pieces[i][0]] = i;
        }
        int i = 0;
        while (i < arr.size()) {
            if (m.count(arr[i]) == 0) {
                return false;
            }
            int j = 0;
            while (j < pieces[m[arr[i]]].size()) {
                if (arr[i] != pieces[m[arr[i]]][j]) {
                    return false;
                }
                i++;
                j++;
            }
        }
        return true;

=======

        unordered_map<int, vector<int>> m;
        for (auto& v : pieces) {
            m[v[0]] = v;
        }
        int i = 0;
        while (i < arr.size()) {
            if (m.count(arr[i]) == 0) {
                return false;
            }
            auto& v = m[arr[i]];
            for (auto j : v) {
                if (j != arr[i]) {
                    return false;
                }
                ++i;
            }
        }
        return true;

=======

        unordered_map<int, int> mp;
        for (int i = 0; i < arr.size(); i++) {
            mp[arr[i]] = i;
        }
        for (auto& piece : pieces) {
            if (mp.find(piece[0]) == mp.end()) {
                return false;
            }
            int pos = mp[piece[0]];
            for (auto& n : piece) {
                if (pos >= arr.size() || arr[pos] != n) {
                    return false;
                }
                pos++;
            }
        }
        return true;

=======

        int n = arr.size();
        int m = pieces.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (arr[i] == pieces[j][0]) {
                int k = 0;
                while (k < pieces[j].size() && i < n) {
                    if (arr[i] != pieces[j][k]) {
                        return false;
                    }
                    i++;
                    k++;
                }
                j++;
            } else {
                i++;
            }
        }
        return j == m;

=======

        int n = arr.size();
        int m = pieces.size();
        int i = 0;
        while (i < n) {
            int j = 0;
            for (; j < m; j++) {
                if (pieces[j][0] == arr[i]) {
                    break;
                }
            }
            if (j == m) {
                return false;
            }
            int k = 0;
            while (k < pieces[j].size()) {
                if (arr[i] != pieces[j][k]) {
                    return false;
                }
                i++;
                k++;
            }
        }
        return true;

=======

        unordered_map<int, int> mp;
        for (int i = 0; i < arr.size(); i++) {
            mp[arr[i]] = i;
        }
        for (auto& piece : pieces) {
            for (int i = 0; i < piece.size(); i++) {
                if (!mp.count(piece[i])) {
                    return false;
                }
                if (i == 0) {
                    continue;
                }
                if (mp[piece[i]] - mp[piece[i - 1]] != 1) {
                    return false;
                }
            }
        }
        return true;

=======

        unordered_map<int, vector<int>> pieceMap;
        for (auto& piece : pieces) {
            pieceMap[piece[0]] = piece;
        }
        for (int i = 0; i < arr.size(); i++) {
            if (pieceMap.count(arr[i])) {
                auto piece = pieceMap[arr[i]];
                for (int j = 0; j < piece.size(); j++) {
                    if (arr[i + j] != piece[j]) {
                        return false;
                    }
                }
                i += piece.size() - 1;
            } else {
                return false;
            }
        }
        return true;

=======

        int len = arr.size();
        int i = 0;
        while (i < len) {
            int j = 0;
            for (; j < pieces.size(); j++) {
                if (pieces[j][0] == arr[i]) {
                    break;
                }
            }
            if (j == pieces.size()) {
                return false;
            }
            for (int k = 0; k < pieces[j].size(); k++) {
                if (pieces[j][k] != arr[i]) {
                    return false;
                }
                i++;
            }
        }
        return true;

=======

        int n = arr.size();
        int m = pieces.size();
        int i = 0;
        int j = 0;
        int k = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (arr[i] == pieces[j][0]) {
                    for (k = 0; k < pieces[j].size(); k++) {
                        if (arr[i + k] != pieces[j][k]) {
                            return false;
                        }
                    }
                    i += k - 1;
                    break;
                }
            }
            if (j == m) {
                return false;
            }
        }
        return true;
