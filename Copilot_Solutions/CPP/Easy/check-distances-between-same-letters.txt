Synthesizing 10/10 solutions

=======

        unordered_map<char, vector<int>> m;
        for (int i = 0; i < s.size(); ++i) {
            m[s[i]].push_back(i);
        }
        for (int i = 0; i < 26; ++i) {
            char c = 'a' + i;
            if (m.find(c) == m.end()) {
                continue;
            }
            vector<int> pos = m[c];
            for (int j = 1; j < pos.size(); ++j) {
                if (pos[j] - pos[j - 1] - 1 != distance[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = s.size();
        int last[26];
        for (int i = 0; i < 26; i++) last[i] = -1;
        for (int i = 0; i < n; i++) {
            int c = s[i] - 'a';
            if (last[c] == -1) last[c] = i;
            else {
                if (i - last[c] - 1 != distance[c]) return false;
                last[c] = i;
            }
        }
        return true;

=======

        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && s[j] != s[i]) ++j;
            if (j - i - 1 != distance[s[i] - 'a']) return false;
            i = j;
        }
        return true;

=======

        int n = s.size();
        int a[26] = {0};
        for(int i = 0; i < n; i++){
            a[s[i] - 'a']++;
        }
        for(int i = 0; i < 26; i++){
            if(a[i] != 0){
                int k = 0;
                for(int j = 0; j < n; j++){
                    if(s[j] == (char)(i + 'a')){
                        k++;
                        if(k == 2){
                            k = 0;
                            if(distance[i] != 0){
                                return false;
                            }
                        }
                    }
                    else{
                        if(k == 1){
                            distance[i]--;
                        }
                    }
                }
                if(distance[i] != 0){
                    return false;
                }
            }
        }
        return true;

=======

        int n = s.size();
        int m = distance.size();
        vector<vector<int>> pos(m);
        for (int i = 0; i < n; i++) {
            pos[s[i] - 'a'].push_back(i);
        }
        for (int i = 0; i < m; i++) {
            if (pos[i].size() != 2) {
                continue;
            }
            int dist = pos[i][1] - pos[i][0];
            if (dist != distance[i]) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        int cnt[26] = {0};
        for(int i = 0; i < n; ++i) {
            cnt[s[i] - 'a']++;
        }
        for(int i = 0; i < 26; ++i) {
            if(cnt[i] == 0) {
                distance[i] = 0;
            }
        }
        for(int i = 0; i < n; ++i) {
            int j = i + 1;
            int cnt = 0;
            while(j < n && s[j] != s[i]) {
                cnt++;
                j++;
            }
            if(j < n && cnt != distance[s[i] - 'a']) {
                return false;
            }
            i = j;
        }
        return true;

=======

        int n = s.size();
        int i = 0;
        int j = 1;
        int k = 0;
        while (i < n) {
            if (s[i] == s[j]) {
                if (k != distance[s[i] - 'a']) {
                    return false;
                }
                k = 0;
                i = j + 1;
                j = i + 1;
            } else {
                k++;
                j++;
            }
        }
        return true;

=======

        int n = s.size();
        for(int i=0;i<26;i++){
            int f = -1;
            for(int j=0;j<n;j++){
                if(s[j] == 'a'+i){
                    if(f == -1){
                        f = j;
                    }else{
                        if(j - f - 1 != distance[i]){
                            return false;
                        }
                        f = j;
                    }
                }
            }
        }
        return true;

=======

        int n = s.size();
        int x = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == s[i+1]){
                if(distance[s[i] - 'a'] != i - x){
                    return false;
                }
                x = i + 1;
            }
        }
        return true;

=======

        int n = s.size();
        int m = distance.size();
        int i = 0;
        while(i < n){
            int j = i + 1;
            int k = s[i] - 'a';
            while(j < n && s[j] != s[i]) ++j;
            if(j - i - 1 != distance[k]) return false;
            i = j;
        }
        return true;
