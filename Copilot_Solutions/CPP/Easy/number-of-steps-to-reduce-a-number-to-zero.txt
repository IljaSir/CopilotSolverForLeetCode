Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        while (num != 0) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num -= 1;
            }
            count++;
        }
        return count;

=======

        int count = 0;
        while (num > 0) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num -= 1;
            }
            count++;
        }
        return count;

=======

        int count = 0;
        while (num != 0) {
            if (num % 2 == 0) {
                num /= 2;
            } else {
                num--;
            }
            count++;
        }
        return count;

=======

        int steps = 0;
        while (num != 0) {
            if (num % 2 == 0) {
                num = num / 2;
            } else {
                num = num - 1;
            }
            steps += 1;
        }
        return steps;

=======

        int res = 0;
        while (num != 0) {
            if (num % 2 == 0) {
                num = num / 2;
            } else {
                num = num - 1;
            }
            res++;
        }
        return res;

=======

        int res = 0;
        while (num) {
            res += num & 1 ? 2 : 1;
            num >>= 1;
        }
        return res - 1;

=======

        int count = 0;
        while(num){
            if(num % 2 == 0){
                num /= 2;
            }else{
                num--;
            }
            count++;
        }
        return count;

=======

        int steps = 0;
        while(num > 0) {
            if (num % 2 == 0) {
                num /= 2;
            }
            else {
                num -= 1;
            }
            steps++;
        }
        return steps;

=======

        int ans = 0;
        while(num){
            ans += num&1 ? 2 : 1;
            num >>= 1;
        }
        return ans - 1;
