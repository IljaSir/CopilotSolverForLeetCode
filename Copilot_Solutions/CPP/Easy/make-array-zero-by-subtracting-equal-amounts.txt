Synthesizing 10/10 solutions

=======

        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1]) {
                res += nums[i] - nums[i-1];
            }
        }
        return res;

=======

        int ans = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1]) {
                ans += nums[i] - nums[i-1];
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int ret = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i-1]) {
                ret += nums[i] - nums[i-1];
            }
        }
        return ret;

=======

        int min = 101;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0 && nums[i] < min) {
                min = nums[i];
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > 0) {
                count++;
                nums[i] -= min;
            }
        }
        if (count == 0) {
            return 0;
        }
        return count + minimumOperations(nums);

=======

        int min = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                continue;
            }
            if (min == 0 || nums[i] < min) {
                min = nums[i];
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                continue;
            }
            count += nums[i] / min;
        }
        return count;

=======

        int count = 0;
        sort(nums.begin(), nums.end());
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] > 0 && nums[i] == nums[i-1]){
                nums[i] = 0;
                count++;
            }
            else if(nums[i] > 0 && nums[i] > nums[i-1]){
                nums[i] = nums[i] - nums[i-1];
                count++;
            }
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            if (nums[j] > 0) {
                nums[i++] = nums[j];
            }
        }
        nums.resize(i);
        int count = 0;
        while (nums.size() > 0) {
            int x = nums[0];
            for (int i = 0; i < nums.size(); i++) {
                nums[i] -= x;
            }
            count++;
            i = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[j] > 0) {
                    nums[i++] = nums[j];
                }
            }
            nums.resize(i);
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int ret = 0;
        for (int i = nums.size()-1; i >= 0; --i) {
            if (i == 0) {
                ret += nums[i];
            } else {
                ret += nums[i] - nums[i-1];
            }
        }
        return ret;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        int prev = 0;
        for (int i = 0; i < n; i++) {
            int curr = nums[i];
            if (curr == prev) continue;
            ans += (curr - prev) * (n - i);
            prev = curr;
        }
        return ans;

=======

        sort(nums.begin(),nums.end());
        int n = nums.size();
        int res = 0;
        for(int i=0;i<n-1;i++){
            int diff = nums[i+1]-nums[i];
            if(diff>0){
                res += diff*(n-i);
            }
        }
        return res;
