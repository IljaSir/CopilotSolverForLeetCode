Synthesizing 10/10 solutions

=======

        int res = 0, pre = 0, cur = 1;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] == s[i - 1]) {
                ++cur;
            } else {
                pre = cur;
                cur = 1;
            }
            if (pre >= cur) {
                ++res;
            }
        }
        return res;

=======

        int ans = 0;
        int pre = 0;
        int cur = 1;
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == s[i - 1]) {
                cur++;
            } else {
                ans += min(pre, cur);
                pre = cur;
                cur = 1;
            }
        }
        ans += min(pre, cur);
        return ans;

=======

        int res = 0;
        int pre = 0, cur = 1;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] == s[i - 1]) {
                ++cur;
            } else {
                res += min(pre, cur);
                pre = cur;
                cur = 1;
            }
        }
        return res + min(pre, cur);

=======

        int n = s.size();
        int ans = 0;
        int pre = 0;
        int cur = 1;
        for (int i = 1; i < n; ++i) {
            if (s[i] == s[i - 1]) {
                ++cur;
            } else {
                pre = cur;
                cur = 1;
            }
            if (pre >= cur) {
                ++ans;
            }
        }
        return ans;

=======

        int count = 0;
        int prev = 0;
        int cur = 1;
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == s[i - 1]) {
                cur++;
            } else {
                count += min(cur, prev);
                prev = cur;
                cur = 1;
            }
        }
        return count + min(cur, prev);

=======

        int n = s.length();
        int ans = 0;
        int prev = 0;
        int cur = 1;
        for (int i = 1; i < n; ++i) {
            if (s[i] == s[i - 1]) {
                cur++;
            } else {
                ans += min(prev, cur);
                prev = cur;
                cur = 1;
            }
        }
        return ans + min(prev, cur);

=======

        int n = s.size();
        int ans = 0;
        int last = 0, cur = 1;
        for (int i = 1; i < n; i++) {
            if (s[i] == s[i - 1]) {
                cur++;
            } else {
                ans += min(last, cur);
                last = cur;
                cur = 1;
            }
        }
        return ans + min(last, cur);

=======

        int n = s.size();
        vector<int> count;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && s[j] == s[i]) {
                j++;
            }
            count.push_back(j - i);
            i = j;
        }
        int ans = 0;
        for (int i = 1; i < count.size(); i++) {
            ans += min(count[i], count[i - 1]);
        }
        return ans;

=======

        int count = 0;
        int n = s.size();
        int pre = 0;
        int cur = 1;
        for (int i = 1; i < n; i++) {
            if (s[i] == s[i - 1]) {
                cur++;
            } else {
                pre = cur;
                cur = 1;
            }
            if (pre >= cur) {
                count++;
            }
        }
        return count;

=======

        int n = s.length();
        int count = 0;
        int p = 0;
        int q = 0;
        for (int i = 0; i < n; i++) {
            p = 0;
            q = 0;
            while (i < n && s[i] == '0') {
                p++;
                i++;
            }
            i--;
            while (i < n && s[i] == '1') {
                q++;
                i++;
            }
            i--;
            count += min(p, q);
        }
        return count;
