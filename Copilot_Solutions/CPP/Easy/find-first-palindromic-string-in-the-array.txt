Synthesizing 10/10 solutions

=======

        for (string word : words) {
            if (isPalindrome(word)) {
                return word;
            }
        }
        return "";
    }
    
    bool isPalindrome(string word) {
        int i = 0;
        int j = word.length() - 1;
        while (i < j) {
            if (word[i] != word[j]) {
                return false;
            }
            i++;
            j--;
        }
        return true;

=======

        for (auto word : words) {
            if (isPalindrome(word)) {
                return word;
            }
        }
        return "";

=======

        for (string word : words) {
            string rev = word;
            reverse(rev.begin(), rev.end());
            if (word == rev) return word;
        }
        return "";

=======

        for (int i = 0; i < words.size(); i++) {
            string str = words[i];
            reverse(str.begin(), str.end());
            if (str == words[i]) return words[i];
        }
        return "";

=======

        for (auto& word : words) {
            if (isPalindrome(word)) {
                return word;
            }
        }
        return "";
    }
    
    bool isPalindrome(const string& word) {
        int i = 0, j = word.length() - 1;
        while (i < j) {
            if (word[i++] != word[j--]) {
                return false;
            }
        }
        return true;

=======

        for (auto word : words) {
            if (isPalindrome(word)) return word;
        }
        return "";
    }
    
    bool isPalindrome(string& word) {
        int i = 0, j = word.size() - 1;
        while (i < j) {
            if (word[i++] != word[j--]) return false;
        }
        return true;

=======

        for (auto w : words) {
            if (isPalindrome(w)) {
                return w;
            }
        }
        return "";
    }
    
    bool isPalindrome(const string& s) {
        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            if (s[i] != s[j]) {
                return false;
            }
            ++i;
            --j;
        }
        return true;

=======

        for (auto i: words) {
            string s = i;
            reverse(s.begin(), s.end());
            if (i == s) {
                return i;
            }
        }
        return "";

=======

        for (auto w: words) {
            if (w == string(w.rbegin(), w.rend())) return w;
        }
        return "";

=======

        for(auto& word: words){
            if(isPalindrome(word)) return word;
        }
        return "";
    }
    bool isPalindrome(string& s){
        int lo = 0, hi = s.size() - 1;
        while(lo < hi){
            if(s[lo++] != s[hi--]) return false;
        }
        return true;
