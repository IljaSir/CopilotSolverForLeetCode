Synthesizing 8/10 solutions (Duplicates hidden)

=======

        map<int, int> rankCount;
        map<char, int> suitCount;
        for (auto r : ranks) {
            rankCount[r]++;
        }
        for (auto s : suits) {
            suitCount[s]++;
        }
        bool isFlush = false;
        for (auto s : suitCount) {
            if (s.second == 5) {
                isFlush = true;
                break;
            }
        }
        bool isThreeOfAKind = false;
        bool isPair = false;
        for (auto r : rankCount) {
            if (r.second == 3) {
                isThreeOfAKind = true;
            }
            if (r.second == 2) {
                isPair = true;
            }
        }
        if (isFlush) {
            return "Flush";
        }
        if (isThreeOfAKind) {
            return "Three of a Kind";
        }
        if (isPair) {
            return "Pair";
        }
        return "High Card";

=======

        int count[14] = {0};
        for (int i = 0; i < 5; i++) {
            count[ranks[i]]++;
        }
        int max = 0;
        for (int i = 1; i < 14; i++) {
            if (count[i] > max) {
                max = count[i];
            }
        }
        if (max == 3) {
            return "Three of a Kind";
        } else if (max == 2) {
            for (int i = 1; i < 14; i++) {
                if (count[i] == 2) {
                    return "Pair";
                }
            }
            return "High Card";
        } else {
            unordered_set<char> set;
            for (int i = 0; i < 5; i++) {
                set.insert(suits[i]);
            }
            if (set.size() == 1) {
                return "Flush";
            } else {
                return "High Card";
            }
        }

=======

        int flush = 0;
        for (auto c : suits) {
            if (c == suits[0]) {
                flush++;
            }
        }
        if (flush == 5) {
            return "Flush";
        }
        unordered_map<int, int> m;
        for (auto n : ranks) {
            m[n]++;
        }
        int three = 0;
        int pair = 0;
        for (auto n : m) {
            if (n.second == 3) {
                three = 1;
            }
            if (n.second == 2) {
                pair++;
            }
        }
        if (three == 1) {
            return "Three of a Kind";
        }
        if (pair == 2) {
            return "Two Pairs";
        }
        if (pair == 1) {
            return "Pair";
        }
        return "High Card";

=======

        int cnt[14] = {0}, suit[4] = {0};
        for(int i = 0; i < 5; ++i) {
            ++cnt[ranks[i]];
            ++suit[suits[i] - 'a'];
        }
        int maxCnt = 0, maxSuit = 0;
        for(int i = 1; i <= 13; ++i) {
            maxCnt = max(maxCnt, cnt[i]);
        }
        for(int i = 0; i < 4; ++i) {
            maxSuit = max(maxSuit, suit[i]);
        }
        if(maxSuit == 5) {
            return "Flush";
        }
        if(maxCnt == 3) {
            return "Three of a Kind";
        }
        if(maxCnt == 2) {
            for(int i = 1; i <= 13; ++i) {
                if(cnt[i] == 2) {
                    return "Pair";
                }
            }
        }
        return "High Card";

=======

        unordered_map<int, int> count;
        for (int rank : ranks) {
            count[rank]++;
        }
        sort(ranks.begin(), ranks.end());
        bool flush = true;
        for (int i = 1; i < 5; i++) {
            flush &= suits[i] == suits[i - 1];
        }
        if (flush) {
            if (ranks[0] == 1 && ranks[1] == 10 && ranks[2] == 11 && ranks[3] == 12 && ranks[4] == 13) {
                return "Royal Flush";
            }
            for (int i = 1; i < 5; i++) {
                if (ranks[i - 1] + 1 != ranks[i]) {
                    return "Flush";
                }
            }
            return "Straight Flush";
        }
        if (count[ranks[0]] == 4 || count[ranks[1]] == 4) {
            return "Four of a Kind";
        }
        if (count[ranks[0]] == 3 && count[ranks[4]] == 2 || count[ranks[0]] == 2 && count[ranks[4]] == 3) {
            return "Full House";
        }
        if (count[ranks[0]] == 3 || count[ranks[1]] == 3 || count[ranks[2]] == 3) {
            return "Three of a Kind";
        }
        if (count[ranks[0]] == 2 && count[ranks[2]] == 2 || count[ranks[1]] == 2 && count[ranks[3]] == 2 || count[ranks[2]] == 2 && count[ranks[4]] == 2) {
            return "Two Pairs";
        }
        if (count[ranks[0]] == 2 || count[ranks[1]] == 2 || count[ranks[2]] == 2 || count[ranks[3]] == 2 || count[ranks[4]] == 2) {
            return "Pair";
        }
        for (int i = 1; i < 5; i++) {
            if (ranks[i - 1] + 1 != ranks[i]) {
                return "High Card";
            }
        }
        return "Straight";

=======

        int count[14] = {0};
        int suit[4] = {0};
        int max = 0;
        int max_suit = 0;
        for (int i = 0; i < 5; i++) {
            count[ranks[i]]++;
            suit[suits[i] - 'a']++;
            if (count[ranks[i]] > max) {
                max = count[ranks[i]];
            }
            if (suit[suits[i] - 'a'] > max_suit) {
                max_suit = suit[suits[i] - 'a'];
            }
        }
        if (max_suit == 5) {
            return "Flush";
        }
        if (max == 3) {
            return "Three of a Kind";
        }
        if (max == 2) {
            return "Pair";
        }
        return "High Card";

=======

        int n = ranks.size();
        unordered_map<int, int> freq;
        for (auto r: ranks)
            freq[r]++;
        int maxFreq = 0;
        for (auto it: freq)
            maxFreq = max(maxFreq, it.second);
        if (maxFreq == 5)
            return "Flush";
        if (maxFreq == 3) {
            for (auto it: freq)
                if (it.second == 2)
                    return "Full House";
            return "Three of a Kind";
        }
        if (maxFreq == 2) {
            int cnt = 0;
            for (auto it: freq)
                if (it.second == 2)
                    cnt++;
            if (cnt == 2)
                return "Two Pairs";
            return "Pair";
        }
        return "High Card";
