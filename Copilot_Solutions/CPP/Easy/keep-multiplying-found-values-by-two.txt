Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == original) {
                original *= 2;
            }
        }
        return original;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] == original) {
                original *= 2;
            }
        }
        return original;

=======

        for(int i = 0; i < nums.size(); i++)
            if(nums[i] == original)
                original *= 2;
        return original;

=======

        int res = original;
        for (auto n : nums) {
            if (n == res) {
                res *= 2;
            }
        }
        return res;

=======

        int n = nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==original)
            {
                original=2*original;
            }
        }
        return original;

=======

        for (auto x : nums)
            if (x == original)
                original *= 2;
        return original;

=======

        for(auto i:nums){
            if(i==original) original*=2;
        }
        return original;

=======

        for(auto i: nums) {
            if(original == i) {
                original *= 2;
            }
        }
        return original;

=======

        vector<int> v;
        while (true) {
            auto it = find(nums.begin(), nums.end(), original);
            if (it != nums.end()) {
                v.push_back(original);
                original *= 2;
            } else {
                break;
            }
        }
        return v.back();
