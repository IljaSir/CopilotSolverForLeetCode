Synthesizing 10/10 solutions

=======

        int n = deck.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            m[deck[i]]++;
        }
        int g = -1;
        for (auto it = m.begin(); it != m.end(); ++it) {
            if (g == -1) {
                g = it->second;
            } else {
                g = __gcd(g, it->second);
            }
        }
        return g >= 2;

=======

        map<int, int> mp;
        for (int i = 0; i < deck.size(); i++) {
            mp[deck[i]]++;
        }
        auto it = mp.begin();
        int x = it->second;
        it++;
        while (it != mp.end()) {
            x = gcd(x, it->second);
            if (x == 1) {
                return false;
            }
            it++;
        }
        return x > 1;
    }
    int gcd(int a, int b) {
        if (a < b) {
            return gcd(b, a);
        }
        if (a % b == 0) {
            return b;
        }
        return gcd(b, a % b);

=======

        unordered_map<int, int> cnt;
        for (int i : deck) {
            cnt[i]++;
        }
        int x = -1;
        for (auto p : cnt) {
            if (x == -1) {
                x = p.second;
            } else {
                x = gcd(x, p.second);
            }
        }
        return x >= 2;

=======

        int n = deck.size();
        unordered_map<int, int> m;
        for (auto i : deck) {
            m[i]++;
        }
        int g = -1;
        for (auto i : m) {
            if (g == -1) {
                g = i.second;
            } else {
                g = __gcd(g, i.second);
            }
        }
        return g >= 2;

=======

        map<int,int> m;
        for(int i=0;i<deck.size();i++){
            m[deck[i]]++;
        }
        int x = m.begin()->second;
        for(auto i=m.begin();i!=m.end();i++){
            x = __gcd(x,i->second);
            if(x == 1)
                return false;
        }
        return true;

=======

        map<int, int> m;
        for (auto i: deck) {
            m[i]++;
        }
        int g = -1;
        for (auto [k, v]: m) {
            if (g == -1) {
                g = v;
            } else {
                g = gcd(g, v);
            }
        }
        return g >= 2;

=======

        unordered_map<int, int> m;
        for (auto i : deck) m[i]++;
        int res = 0;
        for (auto it = m.begin(); it != m.end(); it++) res = gcd(res, it->second);
        return res > 1;

=======

        int n = deck.size();
        unordered_map<int, int> m;
        for (auto x : deck) m[x]++;
        int g = -1;
        for (auto& p : m) {
            if (g == -1) g = p.second;
            else g = gcd(g, p.second);
        }
        return g >= 2;

=======

        unordered_map<int, int> freq;
        for(int i : deck) {
            freq[i]++;
        }
        int gcd = 0;
        for(auto f : freq) {
            gcd = __gcd(gcd, f.second);
        }
        return gcd > 1;

=======

        unordered_map<int,int> m;
        for (auto i:deck) ++m[i];
        int g = 0;
        for (auto i:m) g = gcd(g, i.second);
        return g>1;
