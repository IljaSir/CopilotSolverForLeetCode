Synthesizing 10/10 solutions

=======

        int a = num / 1000;
        int b = (num / 100) % 10;
        int c = (num / 10) % 10;
        int d = num % 10;
        int res = min({(a + b) * 10 + (c + d), (a + c) * 10 + (b + d), (a + d) * 10 + (b + c)});
        return res;

=======

        int a = num / 1000;
        int b = (num - a * 1000) / 100;
        int c = (num - a * 1000 - b * 100) / 10;
        int d = num % 10;
        int ans = 10000;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (i == j) continue;
                int x = 0, y = 0;
                if (i == 0) x = a * 1000;
                else if (i == 1) x = a * 100 + b * 100;
                else if (i == 2) x = a * 10 + b * 10 + c * 10;
                else x = a + b + c + d;
                if (j == 0) y = b * 1000 + c * 100 + d * 10;
                else if (j == 1) y = b * 100 + c * 100 + d * 10;
                else if (j == 2) y = b * 10 + c * 10 + d * 10;
                else y = b + c + d;
                ans = min(ans, x + y);
            }
        }
        return ans;

=======

        int a = num / 100;
        int b = num % 100;
        int c = num / 10;
        int d = num % 10;
        return min(a + b, c + d);

=======

        int a = num / 100;
        int b = num % 100;
        int c = num / 10;
        int d = num % 10;
        return min(min(a + b, c + d), min((a / 10) + (a % 10) + b, a + (b / 10) + (b % 10)));

=======

        int n1 = num / 100;
        int n2 = num % 100;
        int n3 = num / 10;
        int n4 = num % 10;
        int n5 = num / 1000;
        int n6 = num % 1000;
        int n7 = num / 1000;
        int n8 = num % 100;
        int n9 = num / 100;
        int n10 = num % 10;
        return min(min(n1+n2, n3+n4), min(n5+n6, n7+n8)) + min(n9, n10);

=======

        int a = num/1000;
        int b = (num/100)%10;
        int c = (num/10)%10;
        int d = num%10;
        return min(a+b+c+d, min(10*a+b+c+d, min(a+10*b+c+d, min(a+b+10*c+d, min(a+b+c+10*d, min(100*a+b+c+d, min(a+100*b+c+d, min(a+b+100*c+d, min(a+b+c+100*d, min(1000*a+b+c+d, min(a+1000*b+c+d, min(a+b+1000*c+d, min(a+b+c+1000*d, 10000)))))))))));

=======

        int a = num / 100;
        int b = num % 100;
        int c = num / 10;
        int d = num % 10;
        int min = a + b;
        if (c + d < min) min = c + d;
        if (a + c < min) min = a + c;
        if (b + d < min) min = b + d;
        if (a + d < min) min = a + d;
        if (b + c < min) min = b + c;
        return min;

=======

        int ans = 0;
        int a = num / 100;
        int b = num % 100;
        ans = min(a, b) + min(a + b, max(a, b));
        return ans;

=======

        int a[5], i = 0;
        while(num) {
            a[i++] = num % 10;
            num /= 10;
        }
        int ans = 0;
        for(int j = 0; j < (1 << 4); j++) {
            int x = 0, y = 0;
            for(int k = 0; k < 4; k++) {
                if(j & (1 << k)) {
                    x = x * 10 + a[k];
                } else {
                    y = y * 10 + a[k];
                }
            }
            ans = ans ? min(ans, x + y) : x + y;
        }
        return ans;

=======

        int min = 10000;
        for (int i = 0; i < 4; i++) {
            int new1 = num / 1000 * 1000 + num % 1000 / 100 * 100 + num % 100 / 10 * 10 + i;
            int new2 = num / 1000 * 100 + num % 1000 / 100 * 10 + i;
            int sum = new1 + new2;
            if (sum < min) {
                min = sum;
            }
        }
        return min;
