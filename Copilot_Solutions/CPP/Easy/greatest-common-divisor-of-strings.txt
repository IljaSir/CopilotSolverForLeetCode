Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (str1 + str2 != str2 + str1) return "";
        return str1.substr(0, __gcd(str1.size(), str2.size()));

=======

        if (str1 + str2 != str2 + str1) return "";
        return str1.substr(0, __gcd((int)str1.size(), (int)str2.size()));

=======

        if (str1.size() < str2.size()) return gcdOfStrings(str2, str1);
        if (str2.empty()) return str1;
        if (str1.substr(0, str2.size()) == str2) {
            return gcdOfStrings(str1.substr(str2.size()), str2);
        }
        return "";

=======

        if (str1 + str2 != str2 + str1) return "";
        return str1.substr(0, __gcd(str1.length(), str2.length()));

=======

        int n1 = str1.size();
        int n2 = str2.size();
        if (n1 < n2) {
            return gcdOfStrings(str2, str1);
        }
        if (n2 == 0) {
            return str1;
        }
        if (str1.substr(0, n2) != str2) {
            return "";
        }
        return gcdOfStrings(str1.substr(n2), str2);

=======

        int len1 = str1.length();
        int len2 = str2.length();
        int len = min(len1, len2);
        for (int i = len; i > 0; i--) {
            if (len1 % i == 0 && len2 % i == 0) {
                string str = str1.substr(0, i);
                if (isDivide(str1, str) && isDivide(str2, str)) {
                    return str;
                }
            }
        }
        return "";
    }
    bool isDivide(string str, string div) {
        int len = div.length();
        int i = 0;
        while (i < str.length()) {
            if (str.substr(i, len) != div) {
                return false;
            }
            i += len;
        }
        return true;

=======

        int len1 = str1.length();
        int len2 = str2.length();
        int len = min(len1, len2);
        string res = "";
        for (int i = 0; i < len; i++) {
            if (str1[i] == str2[i]) {
                res += str1[i];
            } else {
                break;
            }
        }
        if (res.length() == 0) {
            return "";
        }
        int i = 0;
        while (i < len1) {
            if (str1[i] != res[i % res.length()]) {
                return "";
            }
            i++;
        }
        i = 0;
        while (i < len2) {
            if (str2[i] != res[i % res.length()]) {
                return "";
            }
            i++;
        }
        return res;

=======

        string ans = "";
        int len1 = str1.length(), len2 = str2.length();
        int i = 0, j = 0;
        while(i < len1 && j < len2){
            if(str1[i] == str2[j]){
                ans += str1[i];
                i++;
                j++;
            }
            else{
                if(ans.length() > 0){
                    if(str1.substr(i) == ans && str2.substr(j) == ans)
                        return ans;
                    else
                        return "";
                }
                else
                    return "";
            }
        }
        if(ans.length() > 0){
            if(str1.substr(i) == ans && str2.substr(j) == ans)
                return ans;
            else
                return "";
        }
        else
            return "";
