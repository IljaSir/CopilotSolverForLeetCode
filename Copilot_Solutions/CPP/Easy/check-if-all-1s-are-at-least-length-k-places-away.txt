Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = k;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 1) {
                if (count < k) {
                    return false;
                }
                count = 0;
            } else {
                count++;
            }
        }
        return true;

=======

        int lastOne = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 1) {
                if (lastOne != -1 && i - lastOne - 1 < k) {
                    return false;
                }
                lastOne = i;
            }
        }
        return true;

=======

        int n = nums.size();
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                if (prev != -1 && i - prev - 1 < k) {
                    return false;
                }
                prev = i;
            }
        }
        return true;

=======

        int last = -1;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == 1) {
                if (last != -1 && i - last < k + 1) return false;
                last = i;
            }
        }
        return true;

=======

        int i = 0;
        while(i < nums.size() && nums[i] == 0)
            i++;
        int j = i + 1;
        while(j < nums.size()){
            if(nums[j] == 1){
                if(j - i - 1 < k)
                    return false;
                i = j;
            }
            j++;
        }
        return true;

=======

        int n = nums.size();
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) {
                if(count < k && i != 0) {
                    return false;
                }
                count = 0;
            } else {
                count++;
            }
        }
        return true;

=======

        int n = nums.size();
        int i = 0;
        while (i < n && nums[i] == 0) i++;
        int prev = i;
        for (i = i + 1; i < n; i++) {
            if (nums[i] == 1) {
                if (i - prev - 1 < k) return false;
                prev = i;
            }
        }
        return true;
