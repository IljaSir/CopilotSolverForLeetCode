Synthesizing 10/10 solutions

=======

        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (i != maxIndex && max < nums[i] * 2) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != max && max < 2 * nums[i]) {
                return -1;
            }
        }
        return maxIndex;

=======

        int n = nums.size();
        int maxIndex = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[maxIndex]) {
                maxIndex = i;
            }
        }
        for (int i = 0; i < n; i++) {
            if (i != maxIndex && nums[maxIndex] < 2 * nums[i]) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = 0;
        int maxIndex = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (i != maxIndex && max < nums[i] * 2) {
                return -1;
            }
        }
        return maxIndex;

=======

        int max = 0;
        int maxIndex = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] > max) {
                max = nums[i];
                maxIndex = i;
            }
        }
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] != max && max < nums[i] * 2) {
                return -1;
            }
        }
        return maxIndex;

=======

        int largest = -1;
        int secondLargest = -1;
        int largestIndex = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > largest) {
                secondLargest = largest;
                largest = nums[i];
                largestIndex = i;
            } else if (nums[i] > secondLargest) {
                secondLargest = nums[i];
            }
        }
        if (largest >= secondLargest * 2) {
            return largestIndex;
        } else {
            return -1;
        }

=======

        int max = 0, secondMax = 0, maxIndex = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                secondMax = max;
                max = nums[i];
                maxIndex = i;
            } else if (nums[i] > secondMax) {
                secondMax = nums[i];
            }
        }
        return max >= 2 * secondMax ? maxIndex : -1;

=======

        int max = INT_MIN;
        int secondMax = INT_MIN;
        int index = -1;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                secondMax = max;
                max = nums[i];
                index = i;
            } else if (nums[i] > secondMax) {
                secondMax = nums[i];
            }
        }
        if (max >= secondMax * 2) {
            return index;
        }
        return -1;

=======

        if (nums.size() == 1) return 0;
        int max = 0;
        int index = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                max = nums[i];
                index = i;
            }
        }
        for (int i = 0; i < nums.size(); i++) {
            if (i != index && max < 2 * nums[i]) {
                return -1;
            }
        }
        return index;

=======

        int n = nums.size();
        int max = nums[0];
        int maxIdx = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxIdx = i;
            }
        }
        for (int i = 0; i < n; i++) {
            if (i != maxIdx && max < nums[i] * 2) {
                return -1;
            }
        }
        return maxIdx;
