Synthesizing 10/10 solutions

=======

        vector<int> res;
        int carry = 0;
        for (int i = num.size() - 1; i >= 0; i--) {
            int sum = num[i] + k % 10 + carry;
            k /= 10;
            res.push_back(sum % 10);
            carry = sum / 10;
        }
        for (; k > 0 || carry > 0; k /= 10) {
            int sum = k % 10 + carry;
            res.push_back(sum % 10);
            carry = sum / 10;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int carry = 0;
        for (int i = num.size() - 1; i >= 0; i--) {
            int sum = num[i] + k % 10 + carry;
            carry = sum / 10;
            sum %= 10;
            res.push_back(sum);
            k /= 10;
        }
        for (; k > 0; k /= 10) {
            int sum = k % 10 + carry;
            carry = sum / 10;
            sum %= 10;
            res.push_back(sum);
        }
        if (carry > 0) {
            res.push_back(carry);
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int n = num.size();
        int i = n - 1;
        vector<int> res;
        while (i >= 0 || k > 0) {
            if (i >= 0) {
                k += num[i];
            }
            res.push_back(k % 10);
            k /= 10;
            i--;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> result;
        int n = num.size();
        int i = n - 1;
        while (i >= 0 || k > 0) {
            if (i >= 0) {
                k += num[i];
            }
            result.push_back(k % 10);
            k /= 10;
            i--;
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        int i = num.size() - 1;
        while(i >= 0 || k > 0) {
            if(i >= 0) {
                k += num[i];
            }
            res.push_back(k % 10);
            k /= 10;
            i--;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int i = num.size() - 1;
        while (k > 0) {
            if (i < 0) {
                num.insert(num.begin(), 0);
                i = 0;
            }
            int sum = num[i] + k % 10;
            num[i] = sum % 10;
            k = k / 10 + sum / 10;
            --i;
        }
        return num;

=======

        int n = num.size();
        vector<int> res;
        int carry = 0;
        for (int i = n - 1; i >= 0 || k > 0 || carry > 0; i--, k /= 10) {
            int x = i >= 0 ? num[i] : 0;
            int y = k > 0 ? k % 10 : 0;
            int sum = x + y + carry;
            res.push_back(sum % 10);
            carry = sum / 10;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int n = num.size();
        int carry = 0;
        for (int i = n-1; i >= 0; i--) {
            int sum = num[i] + k%10 + carry;
            carry = sum/10;
            num[i] = sum%10;
            k /= 10;
        }
        while (k > 0) {
            int sum = k%10 + carry;
            carry = sum/10;
            num.insert(num.begin(), sum%10);
            k /= 10;
        }
        if (carry > 0) {
            num.insert(num.begin(), carry);
        }
        return num;

=======

        int i = num.size()-1;
        while (k > 0) {
            int sum = num[i] + k%10;
            num[i] = sum%10;
            k = k/10 + sum/10;
            i--;
            if (i < 0 && k > 0) {
                num.insert(num.begin(), 0);
                i = 0;
            }
        }
        return num;

=======

        vector<int> ans;
        int i = num.size() - 1;
        while (i >= 0 || k > 0) {
            int sum  = 0;
            if (i >= 0) {
                sum += num[i];
                i--;
            }
            if (k > 0) {
                sum += k % 10;
                k /= 10;
            }
            ans.push_back(sum % 10);
            k += sum / 10;
        }
        reverse(ans.begin(), ans.end());
        return ans;
