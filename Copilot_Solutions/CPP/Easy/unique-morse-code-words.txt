Synthesizing 10/10 solutions

=======

        vector<string> morse = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        unordered_set<string> s;
        for (auto word: words) {
            string code;
            for (auto c: word) {
                code += morse[c - 'a'];
            }
            s.insert(code);
        }
        return s.size();

=======

        vector<string> morse = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        unordered_set<string> s;
        for (string w : words) {
            string code = "";
            for (char c : w) {
                code += morse[c - 'a'];
            }
            s.insert(code);
        }
        return s.size();

=======

        string morse[26] = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        unordered_set<string> s;
        for (string w: words) {
            string t;
            for (char c: w) {
                t += morse[c - 'a'];
            }
            s.insert(t);
        }
        return s.size();

=======

        string morse[26] = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        map<string,int> mp;
        for(int i=0;i<words.size();i++){
            string str = "";
            for(int j=0;j<words[i].length();j++){
                str += morse[words[i][j] - 'a'];
            }
            mp[str]++;
        }
        return mp.size();

=======

        vector<string> morseCode = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        unordered_set<string> s;
        for (string word : words) {
            string morse = "";
            for (char ch : word) {
                morse += morseCode[ch - 'a'];
            }
            s.insert(morse);
        }
        return s.size();

=======

        string morse[26] = {
            ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."
        };
        unordered_set<string> set;
        for (auto word : words) {
            string code;
            for (auto c : word) {
                code += morse[c - 'a'];
            }
            set.insert(code);
        }
        return set.size();

=======

        vector<string> morse_code = {
            ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."
        };
        set<string> s;
        for (auto w: words) {
            string code;
            for (auto c: w) {
                code += morse_code[c - 'a'];
            }
            s.insert(code);
        }
        return s.size();

=======

        unordered_set<string> s;
        string morse[26] = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        for (auto w : words) {
            string t;
            for (auto c : w) {
                t += morse[c - 'a'];
            }
            s.insert(t);
        }
        return s.size();

=======

        string map[26] = { ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.." };
        set<string> s;
        for (auto w : words) {
            string m;
            for (auto c : w) {
                m += map[c - 'a'];
            }
            s.insert(m);
        }
        return s.size();

=======

        std::vector<std::string> morseCodes = {".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};
        std::unordered_set<std::string> morseSet;
        for (const std::string& word : words) {
            std::string morse = "";
            for (const char c : word) {
                morse += morseCodes[c - 'a'];
            }
            morseSet.insert(morse);
        }
        return morseSet.size();
