Synthesizing 10/10 solutions

=======

        if (num < 0) return "-" + convertToBase7(-num);
        if (num < 7) return to_string(num);
        return convertToBase7(num / 7) + to_string(num % 7);

=======

        if (num == 0) return "0";
        string res = "";
        bool neg = false;
        if (num < 0) {
            neg = true;
            num = -num;
        }
        while (num > 0) {
            res = to_string(num % 7) + res;
            num /= 7;
        }
        return neg ? "-" + res : res;

=======

        if (num == 0) return "0";
        string res;
        bool negative = false;
        if (num < 0) {
            negative = true;
            num = -num;
        }
        while (num > 0) {
            res = to_string(num % 7) + res;
            num /= 7;
        }
        if (negative) res = "-" + res;
        return res;

=======

        if (num == 0) return "0";
        string res = "";
        int sign = num < 0 ? -1 : 1;
        num = abs(num);
        while (num > 0) {
            res = to_string(num % 7) + res;
            num /= 7;
        }
        if (sign == -1) res = "-" + res;
        return res;

=======

        if (num == 0) return "0";
        string res;
        int sign = num < 0 ? -1 : 1;
        num = abs(num);
        while (num > 0) {
            res = to_string(num % 7) + res;
            num /= 7;
        }
        if (sign == -1) res = "-" + res;
        return res;

=======

        if (num == 0) {
            return "0";
        }
        bool negative = num < 0;
        num = abs(num);
        string result;
        while (num > 0) {
            result += to_string(num % 7);
            num /= 7;
        }
        if (negative) {
            result += "-";
        }
        reverse(result.begin(), result.end());
        return result;

=======

        if (num == 0) return "0";
        string ans = "";
        int sign = num < 0 ? -1 : 1;
        num *= sign;
        while (num > 0) {
            ans = to_string(num % 7) + ans;
            num /= 7;
        }
        if (sign == -1) ans = "-" + ans;
        return ans;

=======

        if (num == 0) return "0";
        bool isNegative = num < 0;
        num = abs(num);
        string result;
        while (num) {
            result += to_string(num % 7);
            num /= 7;
        }
        if (isNegative) result += "-";
        reverse(result.begin(), result.end());
        return result;

=======

        string str;
        bool isNegative = false;
        if (num < 0) {
            isNegative = true;
            num = -num;
        }
        do {
            str.push_back('0' + num % 7);
            num /= 7;
        } while (num > 0);
        if (isNegative) {
            str.push_back('-');
        }
        reverse(str.begin(), str.end());
        return str;

=======

        string s = "";
        bool flag = false;
        if (num < 0) {
            flag = true;
            num = -num;
        }
        while (num) {
            s += (num % 7 + '0');
            num /= 7;
        }
        if (flag) s += '-';
        reverse(s.begin(), s.end());
        return s;
