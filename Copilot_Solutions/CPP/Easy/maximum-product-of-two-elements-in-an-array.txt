Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        return (nums[nums.size() - 1] - 1) * (nums[nums.size() - 2] - 1);

=======

        int max1 = 0, max2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max1) {
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2) {
                max2 = nums[i];
            }
        }
        return (max1 - 1) * (max2 - 1);

=======

        int max1 = 0;
        int max2 = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max1) {
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2) {
                max2 = nums[i];
            }
        }
        return (max1 - 1) * (max2 - 1);

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        return (nums[n-1]-1)*(nums[n-2]-1);

=======

        int n = nums.size();
        int max1 = 0, max2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > max1) {
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] > max2) {
                max2 = nums[i];
            }
        }
        return (max1 - 1) * (max2 - 1);

=======

        int max1 = 0, max2 = 0;
        for (auto num : nums) {
            if (num > max1) {
                max2 = max1;
                max1 = num;
            }
            else if (num > max2) {
                max2 = num;
            }
        }
        return (max1-1)*(max2-1);

=======

        int n = nums.size();
        int max1 = 0;
        int max2 = 0;
        for(int i = 0; i < n; i++){
            if(nums[i] > max1){
                max2 = max1;
                max1 = nums[i];
            }else if(nums[i] > max2){
                max2 = nums[i];
            }
        }
        return (max1 - 1)*(max2 - 1);

=======

        int n = nums.size();
        sort(nums.begin(),nums.end());
        return (nums[n-1]-1)*(nums[n-2]-1);
