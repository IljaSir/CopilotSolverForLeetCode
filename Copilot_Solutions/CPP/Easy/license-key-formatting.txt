Synthesizing 10/10 solutions

=======

        string result;
        int count = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s[i] == '-') {
                continue;
            }
            if (count == k) {
                result.push_back('-');
                count = 0;
            }
            result.push_back(toupper(s[i]));
            count++;
        }
        reverse(result.begin(), result.end());
        return result;

=======

        string res;
        int count = 0;
        for (int i = s.size() - 1; i >= 0; --i) {
            if (s[i] == '-') continue;
            if (count == k) {
                res += '-';
                count = 0;
            }
            res += toupper(s[i]);
            ++count;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res;
        int count = 0;
        for (int i = s.size() - 1; i >= 0; --i) {
            if (s[i] != '-') {
                if (count == k) {
                    res += '-';
                    count = 0;
                }
                res += toupper(s[i]);
                ++count;
            }
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res;
        int count = 0;
        for (int i = s.size() - 1; i >= 0; --i) {
            if (s[i] == '-') {
                continue;
            }
            if (s[i] >= 'a' && s[i] <= 'z') {
                res += s[i] - 32;
            } else {
                res += s[i];
            }
            ++count;
            if (count == k) {
                res += '-';
                count = 0;
            }
        }
        if (count == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res = "";
        int count = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] == '-') continue;
            if (count == k) {
                count = 0;
                res += '-';
            }
            res += toupper(s[i]);
            count++;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res;
        int cnt = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] == '-') continue;
            res.push_back(toupper(s[i]));
            cnt++;
            if (cnt % k == 0) res.push_back('-');
        }
        if (!res.empty() && res.back() == '-') res.pop_back();
        reverse(res.begin(), res.end());
        return res;

=======

        int n = s.size();
        int cnt = 0;
        string ans;
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] == '-') continue;
            if (cnt == k) {
                ans += '-';
                cnt = 0;
            }
            ans += toupper(s[i]);
            ++cnt;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        string ans;
        for (int i = s.size() - 1; i >= 0; --i) {
            if (s[i] != '-') {
                ans.push_back(toupper(s[i]));
                if (ans.size() % (k + 1) == k) {
                    ans.push_back('-');
                }
            }
        }
        if (!ans.empty() && ans.back() == '-') {
            ans.pop_back();
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int len = s.length();
        int cnt = 0;
        string ans = "";
        for (int i = len - 1; i >= 0; i--) {
            if (s[i] == '-') {
                continue;
            }
            if (cnt == k) {
                ans += '-';
                cnt = 0;
            }
            ans += toupper(s[i]);
            cnt++;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        string res;
        int count = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] != '-') {
                if (count == k) {
                    count = 0;
                    res += '-';
                }
                res += toupper(s[i]);
                count++;
            }
        }
        reverse(res.begin(), res.end());
        return res;
