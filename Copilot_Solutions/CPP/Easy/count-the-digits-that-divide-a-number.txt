Synthesizing 10/10 solutions

=======

        int count = 0;
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            temp = temp / 10;
        }
        return count;
    }
    int selfDividingNumbers(int left, int right) {
        int count = 0;
        for (int i = left; i <= right; i++) {
            if (countDigits(i) > 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            temp = temp / 10;
        }
        return count;

=======

        int count = 0;
        int n = num;
        while (n > 0) {
            int d = n % 10;
            if (d != 0 && num % d == 0) {
                count++;
            }
            n /= 10;
        }
        return count;

=======

        int count = 0;
        int n = num;
        while (n > 0) {
            int digit = n % 10;
            if (digit > 0 && num % digit == 0) {
                count++;
            }
            n /= 10;
        }
        return count;

=======

        int count = 0;
        while (num) {
            int digit = num % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
    int digitsCount(int num) {
        int count = 0;
        while (num) {
            count++;
            num /= 10;
        }
        return count;
    }
    int digitsDivideNumber(int num) {
        int digits = digitsCount(num);
        int count = 0;
        for (int i = 0; i < digits; i++) {
            int digit = num % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
    int digitsDivideNumber2(int num) {
        int count = 0;
        while (num) {
            int digit = num % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
    int digitsDivideNumber3(int num) {
        int count = 0;
        while (num) {
            int digit = num % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
    int digitsDivideNumber4(int num) {
        int count = 0;
        while (num) {
            int digit = num % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            num /= 10;
        }
        return count;

=======

        int count = 0;
        int n = num;
        while (n) {
            int digit = n % 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
            n /= 10;
        }
        return count;

=======

        int count = 0;
        int temp = num;
        while (temp > 0) {
            int digit = temp % 10;
            temp = temp / 10;
            if (digit != 0 && num % digit == 0) {
                count++;
            }
        }
        return count;

=======

        int cnt = 0;
        for (int i = num; i > 0; i /= 10) {
            int d = i % 10;
            if (d > 0 && num % d == 0) {
                cnt++;
            }
        }
        return cnt;

=======

        int res = 0;
        for (char c : to_string(num)) {
            int d = c - '0';
            if (d != 0 && num % d == 0) {
                ++res;
            }
        }
        return res;

=======

        int count = 0;
        while(num) {
            count++;
            num /= 10;
        }
        return count;
    }
    int digitsDivide(int num) {
        int count = 0;
        int digits = countDigits(num);
        int temp = num;
        while(temp) {
            int digit = temp % 10;
            if(digit && (num % digit == 0)) {
                count++;
            }
            temp /= 10;
        }
        return count;
