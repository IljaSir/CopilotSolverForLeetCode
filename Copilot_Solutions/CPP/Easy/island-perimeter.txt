Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    ans += 4;
                    if (i > 0 && grid[i-1][j] == 1) ans -= 2;
                    if (j > 0 && grid[i][j-1] == 1) ans -= 2;
                }
            }
        }
        return ans;

=======

        int row = grid.size();
        int col = grid[0].size();
        int perimeter = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j]) {
                    perimeter += 4;
                    if (i > 0 && grid[i - 1][j]) perimeter -= 2;
                    if (j > 0 && grid[i][j - 1]) perimeter -= 2;
                }
            }
        }
        return perimeter;

=======

        int ans = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j]) {
                    ans += 4;
                    if (i > 0 && grid[i - 1][j]) ans -= 2;
                    if (j > 0 && grid[i][j - 1]) ans -= 2;
                }
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    res += 4;
                    if (i > 0 && grid[i - 1][j]) res -= 2;
                    if (j > 0 && grid[i][j - 1]) res -= 2;
                }
            }
        }
        return res;

=======

        int row = grid.size();
        int col = grid[0].size();
        int perimeter = 0;
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (grid[i][j] == 1) {
                    if (i == 0 || grid[i-1][j] == 0) {
                        perimeter++;
                    }
                    if (i == row - 1 || grid[i+1][j] == 0) {
                        perimeter++;
                    }
                    if (j == 0 || grid[i][j-1] == 0) {
                        perimeter++;
                    }
                    if (j == col - 1 || grid[i][j+1] == 0) {
                        perimeter++;
                    }
                }
            }
        }
        return perimeter;

=======

        int res = 0, n = grid.size(), m = grid[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    if (i == 0 || grid[i - 1][j] == 0) res++;
                    if (i == n - 1 || grid[i + 1][j] == 0) res++;
                    if (j == 0 || grid[i][j - 1] == 0) res++;
                    if (j == m - 1 || grid[i][j + 1] == 0) res++;
                }
            }
        }
        return res;

=======

        int row = grid.size();
        int col = grid[0].size();
        int ret = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) {
                    ret += 4;
                    if (i > 0 && grid[i-1][j] == 1) {
                        ret -= 2;
                    }
                    if (j > 0 && grid[i][j-1] == 1) {
                        ret -= 2;
                    }
                }
            }
        }
        return ret;

=======

        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 1){
                    if(i > 0 && grid[i-1][j] == 1) cnt++;
                    if(i < n-1 && grid[i+1][j] == 1) cnt++;
                    if(j > 0 && grid[i][j-1] == 1) cnt++;
                    if(j < m-1 && grid[i][j+1] == 1) cnt++;
                }
            }
        }
        return 4*n*m - 2*cnt;

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        int neighbor = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    count++;
                    if(i<m-1 && grid[i+1][j] == 1) neighbor++;
                    if(j<n-1 && grid[i][j+1] == 1) neighbor++;
                }
            }
        }
        return count*4 - neighbor*2;

=======

        int ret = 0;
        if (grid.empty()) return ret;
        int row = grid.size();
        int col = grid[0].size();
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (grid[i][j] == 1) {
                    ret += 4;
                    if (i > 0 && grid[i-1][j] == 1) ret -= 2;
                    if (j > 0 && grid[i][j-1] == 1) ret -= 2;
                }
            }
        }
        return ret;
