Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == 0) {
                arr.insert(arr.begin() + i, 0);
                arr.pop_back();
                i++;
            }
        }

=======

        int n = arr.size();
        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) {
                arr.insert(arr.begin() + i, 0);
                arr.pop_back();
                i++;
            }
        }

=======

        int n = arr.size();
        int i = 0;
        while (i < n) {
            if (arr[i] == 0) {
                for (int j = n - 1; j > i; j--) {
                    arr[j] = arr[j - 1];
                }
                arr[i + 1] = 0;
                i += 2;
            } else {
                i++;
            }
        }

=======

        int n = arr.size();
        int i = 0;
        while (i < n) {
            if (arr[i] == 0) {
                for (int j = n - 1; j > i; j--) {
                    arr[j] = arr[j - 1];
                }
                i += 2;
            } else {
                i++;
            }
        }

=======

        int len = arr.size();
        int i = 0;
        while (i < len) {
            if (arr[i] == 0) {
                for (int j = len - 1; j > i; --j) {
                    arr[j] = arr[j-1];
                }
                i += 2;
            } else {
                i++;
            }
        }

=======

        int n = arr.size();
        int i = 0;
        while(i < n) {
            if(arr[i] == 0) {
                arr.insert(arr.begin() + i, 0);
                arr.pop_back();
                i += 2;
            } else {
                i++;
            }
        }

=======

        int n = arr.size();
        int i = 0;
        int j = 0;
        while (i < n) {
            if (arr[i] == 0) {
                j++;
            }
            i++;
            j++;
        }
        i--;
        j--;
        if (i < n) {
            arr[j] = arr[i];
            j--;
            i--;
        }
        while (i >= 0) {
            if (arr[i] == 0) {
                arr[j] = 0;
                j--;
                arr[j] = 0;
                j--;
            } else {
                arr[j] = arr[i];
                j--;
            }
            i--;
        }

=======

        int i = 0;
        int j = 0;
        int n = arr.size();
        while (i < n) {
            i++;
            if (arr[j] == 0) {
                i++;
            }
            j++;
        }
        i--;
        j--;
        while (j >= 0) {
            if (i < n) {
                arr[i] = arr[j];
            }
            if (arr[j] == 0) {
                i--;
                if (i < n) {
                    arr[i] = arr[j];
                }
            }
            i--;
            j--;
        }

=======

        int n = arr.size();
        int i = 0;
        vector<int> res;
        while (res.size() < n) {
            if (arr[i] == 0) {
                res.push_back(0);
                res.push_back(0);
            } else {
                res.push_back(arr[i]);
            }
            i++;
        }
        arr = res;
