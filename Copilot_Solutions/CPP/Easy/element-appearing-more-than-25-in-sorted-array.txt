Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && arr[j] == arr[i]) j++;
            if (j - i > n/4) return arr[i];
            i = j;
        }
        return -1;

=======

        int n = arr.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[i + 1]) {
                cnt++;
            } else {
                cnt++;
                if (cnt > n / 4) {
                    return arr[i];
                }
                cnt = 0;
            }
        }
        return -1;

=======

        int n = arr.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[i + 1]) {
                cnt++;
            } else {
                if (cnt > n / 4) {
                    return arr[i];
                }
                cnt = 0;
            }
        }
        return -1;

=======

        int n = arr.size();
        int k = n / 4;
        for (int i = 0; i < n - k; ++i) {
            if (arr[i] == arr[i+k]) return arr[i];
        }
        return -1;

=======

        int n = arr.size();
        int t = n/4;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[i+t]) {
                return arr[i];
            }
        }
        return -1;

=======

        int n = arr.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == arr[n / 4]) {
                cnt++;
            }
        }
        return cnt > n / 4 ? arr[n / 4] : arr[0];

=======

        int n = arr.size();
        for(int i = 0; i < n; i++){
            int j = i;
            while(j < n && arr[j] == arr[i]) j++;
            if(j - i > n / 4) return arr[i];
            i = j - 1;
        }
        return -1;

=======

        int n = arr.size();
        int cnt = 0;
        for(int i=0; i<n; i++){
            if(arr[i] == arr[i+1]) cnt++;
            else cnt = 0;
            if(cnt > n/4) return arr[i];
        }
        return -1;

=======

        int n = arr.size();
        int count = 0;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (i == 0 || arr[i] == arr[i - 1]) {
                ++count;
            } else {
                count = 1;
            }
            if (count > n / 4) {
                ans = arr[i];
                break;
            }
        }
        return ans;

=======

        int N = arr.size();
        int count = 1;
        int i = 0;
        while (i < N) {
            int j = i + 1;
            while (j < N && arr[i] == arr[j]) {
                count++;
                j++;
            }
            if (count > N / 4) {
                return arr[i];
            }
            i = j;
            count = 1;
        }
        return -1;
