Synthesizing 10/10 solutions

=======

        vector<int> count(101, 0);
        for (auto& log : logs) {
            for (int i = log[0] - 1950; i < log[1] - 1950; ++i) {
                count[i]++;
            }
        }
        int max = 0;
        int year = 0;
        for (int i = 0; i < 101; ++i) {
            if (count[i] > max) {
                max = count[i];
                year = i;
            }
        }
        return 1950 + year;

=======

        vector<int> count(101);
        for (auto& log : logs) {
            for (int i = log[0] - 1950; i < log[1] - 1950; ++i) {
                ++count[i];
            }
        }
        int max = 0;
        int year = 0;
        for (int i = 0; i < 101; ++i) {
            if (count[i] > max) {
                max = count[i];
                year = i + 1950;
            }
        }
        return year;

=======

        int minYear = INT_MAX;
        int maxYear = INT_MIN;
        for (auto log : logs) {
            minYear = min(minYear, log[0]);
            maxYear = max(maxYear, log[1]);
        }
        vector<int> years(maxYear - minYear + 1, 0);
        for (auto log : logs) {
            for (int i = log[0]; i < log[1]; i++) {
                years[i - minYear]++;
            }
        }
        int maxPopulation = INT_MIN;
        int maxPopulationYear = INT_MIN;
        for (int i = 0; i < years.size(); i++) {
            if (years[i] > maxPopulation) {
                maxPopulation = years[i];
                maxPopulationYear = i + minYear;
            }
        }
        return maxPopulationYear;

=======

        int n = logs.size();
        vector<int> v(2051, 0);
        for (int i = 0; i < n; i++) {
            for (int j = logs[i][0]; j < logs[i][1]; j++) {
                v[j]++;
            }
        }
        int max = 0;
        int ans = 0;
        for (int i = 0; i < 2051; i++) {
            if (v[i] > max) {
                max = v[i];
                ans = i;
            }
        }
        return ans;

=======

        int n = logs.size();
        vector<int> year(101, 0);
        for (int i = 0; i < n; i++) {
            for (int j = logs[i][0] - 1950; j < logs[i][1] - 1950; j++) {
                year[j]++;
            }
        }
        int maxYear = 0;
        int maxPop = 0;
        for (int i = 0; i < 101; i++) {
            if (year[i] > maxPop) {
                maxPop = year[i];
                maxYear = i;
            }
        }
        return maxYear + 1950;

=======

        vector<int> v(102, 0);
        for (auto& log : logs) {
            v[log[0] - 1950] += 1;
            v[log[1] - 1950] -= 1;
        }
        int ans = 0;
        int max = 0;
        int total = 0;
        for (int i = 0; i < 102; i++) {
            total += v[i];
            if (total > max) {
                max = total;
                ans = i;
            }
        }
        return ans + 1950;

=======

        int n = logs.size();
        vector<int> year(101, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = logs[i][0] - 1950; j < logs[i][1] - 1950; ++j) {
                year[j]++;
            }
        }
        int max = 0;
        int index = 0;
        for (int i = 0; i < 101; ++i) {
            if (year[i] > max) {
                max = year[i];
                index = i;
            }
        }
        return index + 1950;

=======

        int max_population = 0;
        int max_year = 0;
        for (int year = 1950; year <= 2050; year++) {
            int population = 0;
            for (const auto& log : logs) {
                if (year >= log[0] && year < log[1]) {
                    population++;
                }
            }
            if (population > max_population) {
                max_population = population;
                max_year = year;
            }
        }
        return max_year;

=======

        sort(logs.begin(), logs.end());
        int maxPop = 0;
        int maxYear = 0;
        for (int year = 1950; year < 2050; ++year) {
            int pop = 0;
            for (int i = 0; i < logs.size(); ++i) {
                if (logs[i][0] <= year && logs[i][1] > year) {
                    ++pop;
                }
            }
            if (pop > maxPop) {
                maxPop = pop;
                maxYear = year;
            }
        }
        return maxYear;

=======

        int cnt[2051] = {0};
        for (auto& log : logs) {
            cnt[log[0]]++;
            cnt[log[1]]--;
        }
        int maxCnt = cnt[1950];
        int res = 1950;
        for (int i = 1951; i <= 2050; i++) {
            cnt[i] += cnt[i - 1];
            if (cnt[i] > maxCnt) {
                maxCnt = cnt[i];
                res = i;
            }
        }
        return res;
