Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            if (words[i][0] == 'a' || words[i][0] == 'e' || words[i][0] == 'i' || words[i][0] == 'o' || words[i][0] == 'u') {
                if (words[i][words[i].length()-1] == 'a' || words[i][words[i].length()-1] == 'e' || words[i][words[i].length()-1] == 'i' || words[i][words[i].length()-1] == 'o' || words[i][words[i].length()-1] == 'u') {
                    count++;
                }
            }
        }
        return count;

=======

        int num = 0;
        for (int i = left; i <= right; i++) {
            if (words[i][0] == 'a' || words[i][0] == 'e' || words[i][0] == 'i' || words[i][0] == 'o' || words[i][0] == 'u') {
                if (words[i][words[i].length() - 1] == 'a' || words[i][words[i].length() - 1] == 'e' || words[i][words[i].length() - 1] == 'i' || words[i][words[i].length() - 1] == 'o' || words[i][words[i].length() - 1] == 'u') {
                    num++;
                }
            }
        }
        return num;

=======

        int cnt = 0;
        for (int i = left; i <= right; i++) {
            string word = words[i];
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u') {
                if (word[word.length() - 1] == 'a' || word[word.length() - 1] == 'e' || word[word.length() - 1] == 'i' || word[word.length() - 1] == 'o' || word[word.length() - 1] == 'u') {
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int count = 0;
        for(int i = left; i <= right; i++) {
            string word = words[i];
            if(word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u') {
                int len = word.length();
                if(word[len-1] == 'a' || word[len-1] == 'e' || word[len-1] == 'i' || word[len-1] == 'o' || word[len-1] == 'u') {
                    count++;
                }
            }
        }
        return count;

=======

        int result = 0;
        for (int i = left; i <= right; ++i) {
            string word = words[i];
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u') {
                if (word[word.length() - 1] == 'a' || word[word.length() - 1] == 'e' || word[word.length() - 1] == 'i' || word[word.length() - 1] == 'o' || word[word.length() - 1] == 'u') {
                    result++;
                }
            }
        }
        return result;

=======

        int ret = 0;
        for (int i = left; i <= right; i++) {
            for (auto c : words[i]) {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                    ret++;
                }
            }
        }
        return ret;

=======

        int ans = 0;
        for (int i = left; i <= right; i++) {
            int cnt = 0;
            for (char ch : words[i]) {
                if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                    cnt++;
                }
            }
            if (cnt == words[i].length()) {
                ans++;
            }
        }
        return ans;

=======

        int vCount = 0;
        for (int i = left; i <= right; i++) {
            string word = words[i];
            if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u') {
                if (word[word.size() - 1] == 'a' || word[word.size() - 1] == 'e' || word[word.size() - 1] == 'i' || word[word.size() - 1] == 'o' || word[word.size() - 1] == 'u') {
                    vCount++;
                }
            }
        }
        return vCount;

=======

        int count = 0;
        for (int i = left; i <= right; ++i) {
            int len = words[i].length();
            if (len < 2) {
                continue;
            }
            if (words[i][0] == 'a' || words[i][0] == 'e' || words[i][0] == 'i' || words[i][0] == 'o' || words[i][0] == 'u') {
                if (words[i][len - 1] == 'a' || words[i][len - 1] == 'e' || words[i][len - 1] == 'i' || words[i][len - 1] == 'o' || words[i][len - 1] == 'u') {
                    ++count;
                }
            }
        }
        return count;

=======

        int count = 0;
        for(int i = left; i <= right; i++) {
            int len = words[i].length();
            if(len > 1) {
                if(isVowel(words[i][0]) && isVowel(words[i][len-1])) {
                    count++;
                }
            }
        }
        return count;
