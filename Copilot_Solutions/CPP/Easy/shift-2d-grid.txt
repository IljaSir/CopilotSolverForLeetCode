Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int new_j = (j + k) % n;
                int new_i = (i + (j + k) / n) % m;
                res[new_i][new_j] = grid[i][j];
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int x = (j + k) % n;
                int y = (i + (j + k) / n) % m;
                res[y][x] = grid[i][j];
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int newj = (j + k) % n;
                int newi = (i + (j + k) / n) % m;
                res[newi][newj] = grid[i][j];
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> grid2(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int x = (j + k) % n;
                int y = (i + (j + k) / n) % m;
                grid2[y][x] = grid[i][j];
            }
        }
        return grid2;

=======

        int m = grid.size();
        int n = grid[0].size();
        int total = m * n;
        k = k % total;
        vector<vector<int>> ret(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int index = i * n + j;
                int new_index = (index + k) % total;
                int new_i = new_index / n;
                int new_j = new_index % n;
                ret[new_i][new_j] = grid[i][j];
            }
        }
        return ret;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> grid1 = grid;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int i1 = (i + (j + k) / n) % m;
                int j1 = (j + k) % n;
                grid1[i1][j1] = grid[i][j];
            }
        }
        return grid1;

=======

        int m = grid.size();
        int n = grid[0].size();
        int total = m * n;
        k %= total;
        vector<vector<int>> ret(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int idx = i * n + j;
                int newIdx = (idx + k) % total;
                ret[newIdx / n][newIdx % n] = grid[i][j];
            }
        }
        return ret;

=======

        int m = grid.size();
        int n = grid[0].size();
        int total = m * n;
        k = k % total;
        vector<int> temp;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                temp.push_back(grid[i][j]);
            }
        }
        for (int i = 0; i < k; i++) {
            temp.insert(temp.begin(), temp[total-1]);
            temp.pop_back();
        }
        vector<vector<int>> res(m, vector<int>(n));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[i][j] = temp[i*n+j];
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int t = m * n;
        k = k % t;
        vector<vector<int>> ans(m, vector<int>(n));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int x = (i * n + j + k) % t;
                ans[x / n][x % n] = grid[i][j];
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        int k1 = k % (m * n);
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int idx = (i * n + j + k1) % (m * n);
                res[idx / n][idx % n] = grid[i][j];
            }
        }
        return res;
