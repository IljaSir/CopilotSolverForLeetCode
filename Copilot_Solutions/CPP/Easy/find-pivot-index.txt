Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int leftSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (leftSum == sum - leftSum - nums[i]) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int leftSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (leftSum == (sum - leftSum - nums[i])) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
        }
        int leftSum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (leftSum == sum - leftSum - nums[i]) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int leftsum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (leftsum == sum - leftsum - nums[i]) {
                return i;
            }
            leftsum += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (int n : nums) {
            sum += n;
        }
        int leftSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            int rightSum = sum - leftSum - nums[i];
            if (leftSum == rightSum) {
                return i;
            }
            leftSum += nums[i];
        }
        return -1;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
        }
        int leftsum = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (leftsum == sum - leftsum - nums[i]) {
                return i;
            }
            leftsum += nums[i];
        }
        return -1;

=======

        int n = nums.size();
        if (n == 0) return -1;
        if (n == 1) return 0;
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + nums[i - 1];
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + nums[i + 1];
        }
        for (int i = 0; i < n; i++) {
            if (left[i] == right[i]) return i;
        }
        return -1;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int left = 0;
        for (int i = 0; i < n; ++i) {
            if (left == sum - left - nums[i]) {
                return i;
            }
            left += nums[i];
        }
        return -1;

=======

        int left = 0, right = 0;
        for (int i = 1; i < nums.size(); i++) {
            right += nums[i];
        }
        if (left == right) return 0;
        for (int i = 1; i < nums.size(); i++) {
            left += nums[i - 1];
            right -= nums[i];
            if (left == right) return i;
        }
        return -1;

=======

        int left = 0, sum = 0;
        for (int num : nums) sum += num;
        for (int i = 0; i < nums.size(); i++) {
            if (left == sum - left - nums[i]) return i;
            left += nums[i];
        }
        return -1;
