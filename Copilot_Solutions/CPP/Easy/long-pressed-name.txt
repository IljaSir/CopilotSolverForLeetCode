Synthesizing 10/10 solutions

=======

        int i = 0, j = 0;
        while (i < name.size() && j < typed.size()) {
            if (name[i] == typed[j]) {
                ++i;
                ++j;
            } else if (i > 0 && name[i - 1] == typed[j]) {
                ++j;
            } else {
                return false;
            }
        }
        while (j < typed.size() && name[i - 1] == typed[j]) {
            ++j;
        }
        return i == name.size() && j == typed.size();

=======

        int i = 0, j = 0;
        while (i < name.size() && j < typed.size()) {
            if (name[i] == typed[j]) {
                ++i;
                ++j;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                ++j;
            } else {
                return false;
            }
        }
        if (i < name.size()) {
            return false;
        }
        while (j < typed.size() && typed[j] == typed[j - 1]) {
            ++j;
        }
        return j == typed.size();

=======

        int i = 0, j = 0;
        while (i < name.size() && j < typed.size()) {
            if (name[i] == typed[j]) {
                ++i;
                ++j;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                ++j;
            } else {
                return false;
            }
        }
        while (j > 0 && j < typed.size() && typed[j] == typed[j - 1]) {
            ++j;
        }
        return i == name.size() && j == typed.size();

=======

        int i = 0, j = 0;
        while (j < typed.size()) {
            if (i < name.size() && name[i] == typed[j]) {
                i++;
                j++;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                j++;
            } else {
                return false;
            }
        }
        return i == name.size();

=======

        int i = 0;
        for (int j = 0; j < typed.size(); ++j) {
            if (i < name.size() && name[i] == typed[j]) {
                ++i;
            } else if (j == 0 || typed[j] != typed[j - 1]) {
                return false;
            }
        }
        return i == name.size();

=======

        int i = 0;
        for (int j = 0; j < typed.size(); j++) {
            if (i < name.size() && name[i] == typed[j]) {
                i++;
            } else if (j == 0 || typed[j] != typed[j-1]) {
                return false;
            }
        }
        return i == name.size();

=======

        int i = 0, j = 0;
        while (i < name.length() && j < typed.length()) {
            if (name[i] == typed[j]) {
                i++;
                j++;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                j++;
            } else {
                return false;
            }
        }
        while (j < typed.length()) {
            if (typed[j] != typed[j - 1]) {
                return false;
            }
            j++;
        }
        return i == name.length();

=======

        int i = 0;
        int j = 0;
        while (j < typed.size()) {
            if (i < name.size() && name[i] == typed[j]) {
                i++;
                j++;
            } else if (j > 0 && typed[j] == typed[j - 1]) {
                j++;
            } else {
                return false;
            }
        }
        return i == name.size();

=======

        int i = 0;
        int j = 0;
        int n = name.size();
        int m = typed.size();
        if (n > m) {
            return false;
        }
        while (i < n && j < m) {
            if (name[i] == typed[j]) {
                ++i;
                ++j;
            } else {
                if (j > 0 && typed[j] == typed[j - 1]) {
                    ++j;
                } else {
                    return false;
                }
            }
        }
        if (i < n) {
            return false;
        }
        while (j < m) {
            if (typed[j] != typed[j - 1]) {
                return false;
            }
            ++j;
        }
        return true;

=======

        int i=0, j=0;
        while (j<typed.length()) {
            if (i < name.length() && name[i] == typed[j]) {
                i++;
                j++;
            } else if (j > 0 && typed[j] == typed[j-1]) {
                j++;
            } else {
                return false;
            }
        }
        return i == name.length();
