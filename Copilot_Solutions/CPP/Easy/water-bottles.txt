Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int ans = numBottles;
        while (numBottles >= numExchange) {
            ans += numBottles / numExchange;
            numBottles = numBottles / numExchange + numBottles % numExchange;
        }
        return ans;

=======

        int ans = 0;
        int empty = 0;
        while (numBottles) {
            ans += numBottles;
            empty += numBottles;
            numBottles = empty / numExchange;
            empty %= numExchange;
        }
        return ans;

=======

        int ans = 0;
        int emptyBottles = 0;
        while (numBottles > 0) {
            ans += numBottles;
            emptyBottles += numBottles;
            numBottles = emptyBottles / numExchange;
            emptyBottles = emptyBottles % numExchange;
        }
        return ans;

=======

        int ans = numBottles;
        int empty = numBottles;
        while (empty >= numExchange) {
            ans += empty / numExchange;
            empty = empty / numExchange + empty % numExchange;
        }
        return ans;

=======

        int res = numBottles;
        int empty = numBottles;
        while (empty >= numExchange) {
            int full = empty / numExchange;
            res += full;
            empty = full + empty % numExchange;
        }
        return res;

=======

        int result = numBottles;
        int empty = numBottles;
        while (empty >= numExchange) {
            int full = empty / numExchange;
            result += full;
            empty = full + empty % numExchange;
        }
        return result;

=======

        int numFullBottles = 0;
        int numEmptyBottles = 0;
        while (numBottles > 0) {
            numFullBottles += numBottles;
            numEmptyBottles += numBottles;
            numBottles = numEmptyBottles / numExchange;
            numEmptyBottles = numEmptyBottles % numExchange;
        }
        return numFullBottles;
