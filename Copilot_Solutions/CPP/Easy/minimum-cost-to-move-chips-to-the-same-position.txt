Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int odd = 0;
        int even = 0;
        for (int i = 0; i < position.size(); i++) {
            if (position[i] % 2 == 0) {
                even++;
            } else {
                odd++;
            }
        }
        return min(odd, even);

=======

        int odd = 0, even = 0;
        for (int i = 0; i < position.size(); i++) {
            if (position[i] % 2 == 0) {
                even++;
            } else {
                odd++;
            }
        }
        return min(odd, even);

=======

        int odd = 0, even = 0;
        for (int i = 0; i < position.size(); i++) {
            if (position[i] % 2 == 0)
                even++;
            else
                odd++;
        }
        return (odd < even) ? odd : even;

=======

        int odd = 0, even = 0;
        for (auto p : position) {
            if (p & 1) odd++;
            else even++;
        }
        return min(odd, even);

=======

        int even = 0, odd = 0;
        for (auto p : position) {
            if (p % 2 == 0) {
                even++;
            } else {
                odd++;
            }
        }
        return min(even, odd);

=======

        int even = 0;
        for (int i = 0; i < position.size(); i++) {
            if (position[i] % 2 == 0) {
                even++;
            }
        }
        return min(even, (int)position.size() - even);

=======

        int even = 0;
        int odd = 0;
        for (auto i : position) {
            if (i % 2 == 0) {
                even++;
            } else {
                odd++;
            }
        }
        return min(odd, even);

=======

        int odd = 0, even = 0;
        for (int pos : position) {
            if (pos % 2) odd++;
            else even++;
        }
        return min(odd, even);
