Synthesizing 10/10 solutions

=======

        int n = password.size();
        if (n < 8) return false;
        bool hasLower = false;
        bool hasUpper = false;
        bool hasDigit = false;
        bool hasSpecial = false;
        for (char c : password) {
            if (c >= 'a' && c <= 'z') hasLower = true;
            else if (c >= 'A' && c <= 'Z') hasUpper = true;
            else if (c >= '0' && c <= '9') hasDigit = true;
            else hasSpecial = true;
        }
        if (!hasLower || !hasUpper || !hasDigit || !hasSpecial) return false;
        int cnt = 0, i = 0;
        while (i < n) {
            int j = i;
            while (j < n && password[i] == password[j]) j++;
            cnt += j - i;
            i = j;
        }
        if (cnt > 1) return false;
        return true;

=======

        int n = password.size();
        if (n < 8) return false;
        bool hasLower = false, hasUpper = false, hasDigit = false;
        for (int i = 0; i < n; i++) {
            if (password[i] >= 'a' && password[i] <= 'z') hasLower = true;
            if (password[i] >= 'A' && password[i] <= 'Z') hasUpper = true;
            if (password[i] >= '0' && password[i] <= '9') hasDigit = true;
        }
        if (!hasLower || !hasUpper || !hasDigit) return false;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && password[j] == password[i]) j++;
            int len = j - i;
            if (len >= 3) return false;
            i = j;
        }
        return true;

=======

        int n = password.size();
        if (n < 8) return false;
        int lower = 0, upper = 0, digit = 0, special = 0;
        for (char c : password) {
            if (c >= 'a' && c <= 'z') lower = 1;
            else if (c >= 'A' && c <= 'Z') upper = 1;
            else if (c >= '0' && c <= '9') digit = 1;
            else special = 1;
        }
        if (lower + upper + digit + special < 3) return false;
        int replace = 0, one = 0, two = 0;
        for (int i = 0, j = 0; i < n; i = j) {
            while (j < n && password[i] == password[j]) j++;
            int k = j - i;
            replace += k / 3;
            if (k % 3 == 0) one++;
            else if (k % 3 == 1) two++;
        }
        if (n <= 20) return max(0, 3 - (lower + upper + digit + special)) <= replace;
        replace -= min(n - 20, one);
        replace -= min(max(n - 20 - one, 0), two * 2) / 2;
        replace -= max(n - 20 - one - 2 * two, 0) / 3;
        return replace <= 0;

=======

        int n = password.size();
        if (n < 8) return false;
        int upper = 0, lower = 0, digit = 0, special = 0;
        for (char c : password) {
            if (isupper(c)) upper = 1;
            else if (islower(c)) lower = 1;
            else if (isdigit(c)) digit = 1;
            else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '+' || c == '-') special = 1;
        }
        if (upper + lower + digit + special < 3) return false;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && password[j] == password[i]) j++;
            if (j - i >= 3) {
                if (upper + lower + digit + special < 4) return false;
                if (n < 12) return true;
                int k = j - i - 2;
                if (k % 3 == 0) {
                    if (upper + lower + digit + special < 5) return false;
                    if (n < 14) return true;
                }
            }
            i = j;
        }
        return true;

=======

        int n = password.length();
        if (n < 8) return false;
        int lower = 0, upper = 0, digit = 0, special = 0;
        for (char c : password) {
            if (isdigit(c)) digit = 1;
            else if (isupper(c)) upper = 1;
            else if (islower(c)) lower = 1;
            else special = 1;
        }
        int missing = (4 - (lower + upper + digit + special));
        if (n <= 20) return missing == 0;
        int del = n - 20;
        int rep = 0, one = 0, two = 0;
        for (int i = 0, j; i < n; i = j) {
            for (j = i; j < n && password[i] == password[j]; ++j);
            int l = j - i;
            if (l >= 3) {
                rep += l / 3;
                if (l % 3 == 0) one++;
                else if (l % 3 == 1) two++;
            }
        }
        if (del > rep) {
            del -= rep;
            one -= min(del, one);
            del -= min(del, one);
            two -= min(del, two);
            del -= min(del, two);
            missing -= min(del, missing);
        } else {
            rep -= del;
            one -= min(del, one);
            del -= min(del, one);
            two -= min(del, two);
            del -= min(del, two);
            missing -= min(del, missing);
        }
        return missing == 0;

=======

        int n = password.size();
        bool hasUpper = false;
        bool hasLower = false;
        bool hasDigit = false;
        bool hasSpecial = false;
        for (char c: password) {
            if (c >= 'A' && c <= 'Z') hasUpper = true;
            else if (c >= 'a' && c <= 'z') hasLower = true;
            else if (c >= '0' && c <= '9') hasDigit = true;
            else hasSpecial = true;
        }
        int missingType = 4 - (hasUpper + hasLower + hasDigit + hasSpecial);
        if (n < 6) {
            return missingType <= 6 - n;
        } else if (n <= 20) {
            return missingType == 0;
        } else {
            int deleteCount = n - 20;
            int replaceCount = 0;
            int oneCount = 0;
            int twoCount = 0;
            for (int i = 0, j = 0; i < n; i = j) {
                while (j < n && password[i] == password[j]) j++;
                int length = j - i;
                if (length >= 3) {
                    replaceCount += length / 3;
                    if (length % 3 == 0) oneCount++;
                    else if (length % 3 == 1) twoCount++;
                }
            }
            if (deleteCount >= replaceCount) {
                deleteCount -= replaceCount;
            } else {
                replaceCount -= deleteCount;
                deleteCount = 0;
                oneCount += replaceCount;
            }
            if (deleteCount > 0) {
                oneCount += deleteCount / 2;
                twoCount += (deleteCount % 2) * 2;
            }
            return missingType == 0 && oneCount <= 2 && twoCount <= 1;
        }

=======

        if (password.length() < 8) return false;
        bool lower = false, upper = false, digit = false;
        int i = 0;
        while (i < password.length()) {
            if (password[i] >= 'a' && password[i] <= 'z') lower = true;
            else if (password[i] >= 'A' && password[i] <= 'Z') upper = true;
            else if (password[i] >= '0' && password[i] <= '9') digit = true;
            else return false;
            i++;
        }
        return lower && upper && digit;

=======

        int n = password.size();
        if (n < 8) return false;
        int cnt[4] = {0};
        for (auto c : password) {
            if (c >= 'a' && c <= 'z') cnt[0] = 1;
            if (c >= 'A' && c <= 'Z') cnt[1] = 1;
            if (c >= '0' && c <= '9') cnt[2] = 1;
            if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') cnt[3] = 1;
        }
        int sum = 0;
        for (int i = 0; i < 4; i++) sum += cnt[i];
        if (sum == 4) return true;
        if (sum == 3) {
            if (n >= 10) return true;
            for (int i = 0; i < n - 2; i++) {
                if (password[i] == password[i + 1] && password[i + 1] == password[i + 2]) return true;
            }
            return false;
        }
        if (sum == 2) {
            if (n >= 10) return true;
            int cnt = 0;
            for (int i = 0; i < n - 2; i++) {
                if (password[i] == password[i + 1] && password[i + 1] == password[i + 2]) cnt++;
            }
            if (cnt >= 2) return true;
            return false;
        }
        if (sum == 1) {
            if (n >= 10) return true;
            int cnt = 0;
            for (int i = 0; i < n - 2; i++) {
                if (password[i] == password[i + 1] && password[i + 1] == password[i + 2]) cnt++;
            }
            if (cnt >= 3) return true;
            return false;
        }
        return false;

=======

        int n = password.length();
        if(n < 8) return false;
        bool hasLower = false;
        bool hasUpper = false;
        bool hasDigit = false;
        bool hasSpecial = false;
        for(auto c : password){
            if(islower(c)) hasLower = true;
            else if(isupper(c)) hasUpper = true;
            else if(isdigit(c)) hasDigit = true;
            else if(c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') hasSpecial = true;
        }
        if(!hasLower || !hasUpper || !hasDigit || !hasSpecial) return false;
        int same = 0;
        for(int i = 0; i < n; i++){
            if(i > 0 && password[i] == password[i - 1]){
                same++;
            }else{
                if(same >= 2){
                    if(same % 3 == 0) same = 0;
                    else if(same % 3 == 1) same = 1;
                    else same = 2;
                }
            }
        }
        if(same >= 2){
            if(same % 3 == 0) same = 0;
            else if(same % 3 == 1) same = 1;
            else same = 2;
        }
        return same == 0;

=======

        int l = password.length();
        if (l < 8) return false;
        bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;
        for (char c : password) {
            if (c >= 'a' && c <= 'z') hasLower = true;
            else if (c >= 'A' && c <= 'Z') hasUpper = true;
            else if (c >= '0' && c <= '9') hasDigit = true;
            else if (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+') hasSpecial = true;
        }
        if (!hasLower || !hasUpper || !hasDigit || !hasSpecial) return false;
        int count = 0, i = 0;
        while (i < l) {
            char c = password[i];
            int j = i + 1;
            while (j < l && password[j] == c) ++j;
            int len = j - i;
            if (len >= 3) count += len / 3;
            i = j;
        }
        return count <= 1;
