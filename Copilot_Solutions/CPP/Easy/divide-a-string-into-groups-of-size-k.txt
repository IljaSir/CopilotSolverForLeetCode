Synthesizing 9/10 solutions

=======

        vector<string> res;
        int n = s.size();
        for (int i = 0; i < n; i += k) {
            string t = s.substr(i, k);
            if (t.size() < k) {
                t += string(k - t.size(), fill);
            }
            res.push_back(t);
        }
        return res;

=======

        int n = s.length();
        vector<string> res;
        for (int i = 0; i < n; i += k) {
            string t = s.substr(i, k);
            if (t.length() < k) {
                t += string(k - t.length(), fill);
            }
            res.push_back(t);
        }
        return res;

=======

        vector<string> res;
        int n = s.size();
        for (int i = 0; i < n; i += k) {
            string tmp = s.substr(i, k);
            if (tmp.size() < k) {
                tmp += string(k - tmp.size(), fill);
            }
            res.push_back(tmp);
        }
        return res;

=======

        int n = s.size();
        int m = n / k;
        vector<string> res;
        for (int i = 0; i < m; i++) {
            res.push_back(s.substr(i * k, k));
        }
        string last = s.substr(m * k);
        if (last.size() < k) {
            for (int i = 0; i < k - last.size(); i++) {
                last.push_back(fill);
            }
        }
        res.push_back(last);
        return res;

=======

        vector<string> res;
        int i = 0;
        while (i < s.size()) {
            string temp;
            for (int j = 0; j < k; j++) {
                if (i < s.size()) {
                    temp.push_back(s[i++]);
                } else {
                    temp.push_back(fill);
                }
            }
            res.push_back(temp);
        }
        return res;

=======

        int n = s.size();
        int m = (n + k - 1) / k;
        vector<string> res(m);
        int i = 0;
        for (int j = 0; j < m; ++j) {
            res[j] = s.substr(i, k);
            if (res[j].size() < k) {
                res[j].append(k - res[j].size(), fill);
            }
            i += k;
        }
        return res;

=======

        vector<string> result;
        int i = 0;
        while (i < s.length()) {
            string group = s.substr(i, k);
            if (group.length() < k) {
                group.append(k - group.length(), fill);
            }
            result.push_back(group);
            i += k;
        }
        return result;

=======

        vector<string> result;
        int n = s.size();
        int i = 0;
        while (i < n) {
            string group;
            for (int j = 0; j < k; j++) {
                if (i < n) {
                    group.push_back(s[i++]);
                } else {
                    group.push_back(fill);
                }
            }
            result.push_back(group);
        }
        return result;

=======

        int n = s.length();
        vector<string> ans;
        int i = 0;
        while (i < n) {
            string t = s.substr(i, k);
            i += k;
            while (t.length() < k) {
                t.push_back(fill);
            }
            ans.push_back(t);
        }
        return ans;
