Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 2;
        if (n == 4) return 3;
        if (n == 5) return 4;
        if (n == 6) return 4;
        if (n == 7) return 5;
        if (n == 8) return 5;
        if (n == 9) return 6;
        if (n == 10) return 6;
        if (n == 11) return 7;
        if (n == 12) return 7;
        if (n == 13) return 8;
        if (n == 14) return 8;
        if (n == 15) return 9;
        if (n == 16) return 9;
        if (n == 17) return 10;
        if (n == 18) return 10;
        if (n == 19) return 11;
        if (n == 20) return 11;
        if (n == 21) return 12;
        if (n == 22) return 12;
        if (n == 23) return 13;
        if (n == 24) return 13;
        if (n == 25) return 14;
        if (n == 26) return 14;
        if (n == 27) return 15;
        if (n == 28) return 15;
        if (n == 29) return 16;
        if (n == 30) return 16;
        if (n == 31) return 17;
        if (n == 32) return 17;
        if (n == 33) return 18;
        if (n == 34) return 18;
        if (n == 35) return 19;
        if (n == 36) return 19;
        if (n == 37) return 20;
        if (n == 38) return 20;
        if (n == 39) return 21;
        if (n == 40) return 21;
        if (n == 41) return 22;
        if (n == 42

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 2;
        if (n == 4) return 3;
        if (n == 5) return 4;
        if (n == 6) return 4;
        if (n == 7) return 5;
        if (n == 8) return 5;
        if (n == 9) return 6;
        if (n == 10) return 7;
        if (n == 11) return 7;
        if (n == 12) return 8;
        if (n == 13) return 8;
        if (n == 14) return 9;
        if (n == 15) return 9;
        if (n == 16) return 10;
        if (n == 17) return 10;
        if (n == 18) return 11;
        if (n == 19) return 11;
        if (n == 20) return 12;
        if (n == 21) return 13;
        if (n == 22) return 13;
        if (n == 23) return 14;
        if (n == 24) return 14;
        if (n == 25) return 15;
        if (n == 26) return 15;
        if (n == 27) return 16;
        if (n == 28) return 16;
        if (n == 29) return 17;
        if (n == 30) return 17;
        if (n == 31) return 18;
        if (n == 32) return 18;
        if (n == 33) return 19;
        if (n == 34) return 19;
        if (n == 35) return 20;
        if (n == 36) return 21;
        if (n == 37) return 21;
        if (n == 38) return 22;
        if (n == 39) return 22;
        if (n == 40) return 23;
        if (n == 41) return 23;
        if (n == 42

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        int res = 2;
        for (int i = 3; i <= n; i++) {
            res += (n / i) + (n % i ? 1 : 0);
        }
        return res;

=======

        vector<bool> vis(n+1, false);
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (vis[i]) continue;
            res++;
            for (int j = i; j <= n; j += i) {
                vis[j] = true;
            }
        }
        return res;

=======

        int count = 0;
        for (int i=1; i<=n; i++) {
            if (n%i == 1) {
                count++;
            }
        }
        return count;
    }
    int countNumbersWithUniqueDigits(int n) {
        if (n == 0) return 1;
        int count = 0;
        for (int i=1; i<=n; i++) {
            count += distinctIntegers(i);
        }
        return count;

=======

        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            int t = n / i;
            ans += t;
            if (t * i == n) {
                ans--;
            }
        }
        return ans;

=======

        if(n == 1) return 1;
        int res = 0;
        for(int i = 1; i <= n; i++){
            int j = 2;
            int cnt = 0;
            while(i * j <= n){
                cnt++;
                j++;
            }
            res += cnt + 1;
        }
        return res;

=======

        return 0;

=======

        return n;
