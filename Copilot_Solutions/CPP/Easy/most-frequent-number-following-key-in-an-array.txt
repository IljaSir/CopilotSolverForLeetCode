Synthesizing 10/10 solutions

=======

        int count = 0;
        int maxCount = 0;
        int target = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                for (int j = i + 1; j < nums.size(); j++) {
                    if (nums[j] == target) {
                        count++;
                    } else {
                        if (count > maxCount) {
                            maxCount = count;
                            target = nums[j];
                        }
                        count = 0;
                    }
                }
            }
        }
        return target;

=======

        int maxCount = 0;
        int maxTarget = 0;
        int count = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i-1] == key) {
                if (nums[i] == maxTarget) {
                    count++;
                } else {
                    if (count > maxCount) {
                        maxCount = count;
                    }
                    maxTarget = nums[i];
                    count = 1;
                }
            }
        }
        if (count > maxCount) {
            maxCount = count;
        }
        return maxTarget;

=======

        int n = nums.size();
        int ans = 0;
        int cnt = 0;
        for(int i = 0; i < n - 1; i++){
            if(nums[i] == key){
                int j = i + 1;
                while(j < n && nums[j] == nums[i]){
                    j++;
                }
                if(j < n){
                    if(cnt < j - i){
                        ans = nums[j];
                        cnt = j - i;
                    }
                    i = j - 1;
                }
            }
        }
        return ans;

=======

        int ans = -1, max = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == key) {
                int target = nums[i + 1];
                int count = 0;
                for (int j = i; j < nums.size() - 1; j++) {
                    if (nums[j] == key && nums[j + 1] == target) {
                        count++;
                    }
                }
                if (count > max) {
                    ans = target;
                    max = count;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = -1;
        int maxCount = -1;
        for (int i = 0; i < n - 1; ++i) {
            if (nums[i] == key) {
                if (ans == -1) {
                    ans = nums[i + 1];
                    maxCount = 1;
                } else if (ans == nums[i + 1]) {
                    ++maxCount;
                } else {
                    --maxCount;
                    if (maxCount == 0) {
                        ans = nums[i + 1];
                        maxCount = 1;
                    }
                }
            }
        }
        return ans;

=======

        int max = 0;
        int index = 0;
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] == key){
                int count = 1;
                for(int j = i+1; j < nums.size(); j++){
                    if(nums[i] == nums[j]){
                        count++;
                    }
                    else{
                        break;
                    }
                }
                if(count > max){
                    max = count;
                    index = i;
                }
            }
        }
        return nums[index+1];

=======

        int n = nums.size();
        int count = 0;
        int maxCount = 0;
        int maxKey = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i - 1] == key) {
                if (nums[i] == maxKey) {
                    ++count;
                } else {
                    count = 1;
                    maxKey = nums[i];
                }
                maxCount = max(maxCount, count);
            }
        }
        return maxKey;

=======

        int count = 0;
        int max_count = 0;
        int max_count_num = 0;
        for(int i = 0; i < nums.size() - 1; i++) {
            if(nums[i] == key) {
                if(nums[i + 1] == nums[i]) {
                    count++;
                } else {
                    if(count > max_count) {
                        max_count = count;
                        max_count_num = nums[i];
                    }
                    count = 0;
                }
            }
        }
        return max_count_num;

=======

        int i, j, n = nums.size();
        unordered_map<int, int> m;
        for (i = 0; i < n; ++i) {
            if (nums[i] == key) {
                if (i + 1 < n) {
                    ++m[nums[i + 1]];
                }
            }
        }
        int max = 0, maxKey = 0;
        for (auto it = m.begin(); it != m.end(); ++it) {
            if (it->second > max) {
                max = it->second;
                maxKey = it->first;
            }
        }
        return maxKey;

=======

        int max = 0;
        int maxTarget = 0;
        int count = 0;
        int target = 0;
        bool foundKey = false;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == key) {
                foundKey = true;
                if (count > max) {
                    max = count;
                    maxTarget = target;
                }
                count = 0;
            } else if (foundKey) {
                count++;
                target = nums[i];
            }
        }
        if (count > max) {
            max = count;
            maxTarget = target;
        }
        return maxTarget;
