Synthesizing 10/10 solutions

=======

        int max = -1;
        int secondMax = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                int number = s[i] - '0';
                if (number > max) {
                    secondMax = max;
                    max = number;
                } else if (number > secondMax && number < max) {
                    secondMax = number;
                }
            }
        }
        return secondMax;

=======

        vector<int> digits(10, 0);
        for (auto c : s) {
            if (c >= '0' && c <= '9') {
                digits[c - '0']++;
            }
        }
        int count = 0;
        for (int i = 9; i >= 0; --i) {
            if (digits[i] > 0) {
                count++;
                if (count == 2) {
                    return i;
                }
            }
        }
        return -1;

=======

        int max = -1;
        int second = -1;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                int num = s[i] - '0';
                if (num > max) {
                    second = max;
                    max = num;
                }
                else if (num > second && num != max) {
                    second = num;
                }
            }
        }
        return second;

=======

        int max = -1;
        int secondMax = -1;
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] >= '0' && s[i] <= '9') {
                int num = s[i] - '0';
                if (num > max) {
                    secondMax = max;
                    max = num;
                } else if (num > secondMax && num != max) {
                    secondMax = num;
                }
            }
        }
        return secondMax;

=======

        int max = -1;
        int sec = -1;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                int dig = s[i] - '0';
                if (dig > max) {
                    sec = max;
                    max = dig;
                } else if (dig > sec && dig != max) {
                    sec = dig;
                }
            }
        }
        return sec;

=======

        int max = 0;
        int secondMax = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] >= '0' && s[i] <= '9') {
                int num = s[i] - '0';
                if (num > max) {
                    secondMax = max;
                    max = num;
                } else if (num > secondMax && num < max) {
                    secondMax = num;
                }
            }
        }
        return secondMax == 0 ? -1 : secondMax;

=======

        int a[10] = {0};
        for (char c : s) {
            if (isdigit(c)) {
                a[c - '0']++;
            }
        }
        int cnt = 0;
        for (int i = 9; i >= 0; i--) {
            if (a[i] > 0) {
                cnt++;
            }
            if (cnt == 2) {
                return i;
            }
        }
        return -1;

=======

        int largest = -1;
        int second = -1;
        for (auto c : s) {
            if (c >= '0' && c <= '9') {
                int n = c - '0';
                if (n > largest) {
                    second = largest;
                    largest = n;
                } else if (n > second && n != largest) {
                    second = n;
                }
            }
        }
        return second;

=======

        int max = -1, second_max = -1;
        for (auto c: s) {
            if (c >= '0' && c <= '9') {
                int num = c - '0';
                if (num > max) {
                    second_max = max;
                    max = num;
                } else if (num > second_max && num != max) {
                    second_max = num;
                }
            }
        }
        return second_max;

=======

        int n = s.size();
        int a[10]={0};
        for(int i=0;i<n;i++){
            if(s[i]>=48 && s[i]<=57)
                a[s[i]-48]++;
        }
        int c=0;
        for(int i=9;i>=0;i--){
            if(a[i]>0)
                c++;
            if(c==2)
                return i;
        }
        return -1;
