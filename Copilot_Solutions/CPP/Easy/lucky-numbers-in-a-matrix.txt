Synthesizing 10/10 solutions

=======

        vector<int> rows(matrix.size(), INT_MAX);
        vector<int> cols(matrix[0].size(), INT_MIN);
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                rows[i] = min(rows[i], matrix[i][j]);
                cols[j] = max(cols[j], matrix[i][j]);
            }
        }
        vector<int> res;
        for (int i = 0; i < rows.size(); i++) {
            for (int j = 0; j < cols.size(); j++) {
                if (rows[i] == cols[j]) {
                    res.push_back(rows[i]);
                }
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> row(m, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                row[i] = max(row[i], matrix[i][j]);
                col[j] = min(col[j], matrix[i][j]);
            }
        }
        vector<int> res;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == row[i] && matrix[i][j] == col[j]) {
                    res.push_back(matrix[i][j]);
                }
            }
        }
        return res;

=======

        vector<int> result;
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> rowMin(m, INT_MAX);
        vector<int> colMax(n, INT_MIN);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowMin[i] = min(rowMin[i], matrix[i][j]);
                colMax[j] = max(colMax[j], matrix[i][j]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]) {
                    result.push_back(matrix[i][j]);
                }
            }
        }
        return result;

=======

        vector<int> result;
        for(int i = 0; i < matrix.size(); i++) {
            int min = matrix[i][0];
            int index = 0;
            for(int j = 1; j < matrix[i].size(); j++) {
                if(matrix[i][j] < min) {
                    min = matrix[i][j];
                    index = j;
                }
            }
            bool isLucky = true;
            for(int j = 0; j < matrix.size(); j++) {
                if(matrix[j][index] > min) {
                    isLucky = false;
                    break;
                }
            }
            if(isLucky) {
                result.push_back(min);
            }
        }
        return result;

=======

        vector<int> res;
        int m = matrix.size();
        int n = matrix[0].size();
        int min = 0;
        int max = 0;
        for(int i = 0; i < m; i++){
            min = 0;
            for(int j = 1; j < n; j++){
                if(matrix[i][j] < matrix[i][min]){
                    min = j;
                }
            }
            max = 0;
            for(int j = 1; j < m; j++){
                if(matrix[j][min] > matrix[max][min]){
                    max = j;
                }
            }
            if(max == i){
                res.push_back(matrix[i][min]);
            }
        }
        return res;

=======

        vector<int> result;
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i = 0; i < m; i++){
            int min = INT_MAX;
            int minIndex = 0;
            for(int j = 0; j < n; j++){
                if(matrix[i][j] < min){
                    min = matrix[i][j];
                    minIndex = j;
                }
            }
            bool isMax = true;
            for(int k = 0; k < m; k++){
                if(matrix[k][minIndex] > min){
                    isMax = false;
                }
            }
            if(isMax){
                result.push_back(min);
            }
        }
        return result;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> res;
        for(int i = 0; i < m; ++i){
            int min_val = INT_MAX;
            int min_idx = -1;
            for(int j = 0; j < n; ++j){
                if(matrix[i][j] < min_val){
                    min_val = matrix[i][j];
                    min_idx = j;
                }
            }
            bool is_lucky = true;
            for(int k = 0; k < m; ++k){
                if(matrix[k][min_idx] > min_val){
                    is_lucky = false;
                    break;
                }
            }
            if(is_lucky){
                res.push_back(min_val);
            }
        }
        return res;

=======

        vector<int> res;
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i = 0; i < m; i++){
            int min = INT_MAX;
            int min_j = 0;
            for(int j = 0; j < n; j++){
                if(matrix[i][j] < min){
                    min = matrix[i][j];
                    min_j = j;
                }
            }
            int max = INT_MIN;
            for(int k = 0; k < m; k++){
                if(matrix[k][min_j] > max){
                    max = matrix[k][min_j];
                }
            }
            if(max == min){
                res.push_back(min);
            }
        }
        return res;

=======

        vector<int> res;
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0; i<m; i++){
            int min = matrix[i][0];
            int minIdx = 0;
            for(int j=1; j<n; j++){
                if(matrix[i][j] < min){
                    min = matrix[i][j];
                    minIdx = j;
                }
            }
            bool flag = true;
            for(int k=0; k<m; k++){
                if(matrix[k][minIdx] > min){
                    flag = false;
                    break;
                }
            }
            if(flag) res.push_back(min);
        }
        return res;

=======

        vector<int> ans;
        int n = matrix.size();
        int m = matrix[0].size();
        for(int i=0; i<n; i++){
            int min = 100000;
            int minIndex = 0;
            for(int j=0; j<m; j++){
                if(matrix[i][j] < min){
                    min = matrix[i][j];
                    minIndex = j;
                }
            }
            int max = 0;
            for(int k=0; k<n; k++){
                if(matrix[k][minIndex] > max){
                    max = matrix[k][minIndex];
                }
            }
            if(max == min){
                ans.push_back(max);
            }
        }
        return ans;
