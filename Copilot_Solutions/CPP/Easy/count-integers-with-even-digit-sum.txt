Synthesizing 10/10 solutions

=======

        int count = 0;
        while (num) {
            if ((num % 10) % 2 == 0) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int num : nums) {
            if (countEven(num) % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        if (num == 0) return 0;
        if (num == 1) return 1;
        if (num == 2) return 2;
        if (num == 3) return 3;
        if (num == 4) return 4;
        if (num == 5) return 5;
        if (num == 6) return 6;
        if (num == 7) return 7;
        if (num == 8) return 8;
        if (num == 9) return 9;
        if (num == 10) return 10;
        if (num == 11) return 11;
        if (num == 12) return 12;
        if (num == 13) return 13;
        if (num == 14) return 14;
        if (num == 15) return 15;
        if (num == 16) return 16;
        if (num == 17) return 17;
        if (num == 18) return 18;
        if (num == 19) return 19;
        if (num == 20) return 20;
        if (num == 21) return 21;
        if (num == 22) return 22;
        if (num == 23) return 23;
        if (num == 24) return 24;
        if (num == 25) return 25;
        if (num == 26) return 26;
        if (num == 27) return 27;
        if (num == 28) return 28;
        if (num == 29) return 29;
        if (num == 30) return 30;
        if (num == 31) return 31;
        if (num == 32) return 32;
        if (num == 33) return 33;
        if (num == 34) return 34;
        if (num == 35) return 35;
        if (num == 36) return 36;
        if (num == 37) return 37;
        if (num == 38) return 38;
        if (num == 39) return 39;
        if (num == 40) return 40;
        if (num == 41

=======

        int count = 0;
        while (num) {
            count += num % 2;
            num /= 10;
        }
        return count;
    }
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (auto num : nums) {
            if (countEven(num) % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        while (num) {
            res += num % 2;
            num /= 2;
        }
        return res;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            int n = i;
            while (n > 0) {
                sum += n % 10;
                n /= 10;
            }
            if (sum % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (countEven(nums[i]) % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= num; i++) {
            int sum = 0;
            int temp = i;
            while (temp > 0) {
                sum += temp % 10;
                temp /= 10;
            }
            if (sum % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (countEven(nums[i]) % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        int digit_sum = 0;
        for (int i = 1; i <= num; i++) {
            digit_sum = 0;
            int tmp = i;
            while (tmp > 0) {
                digit_sum += tmp % 10;
                tmp /= 10;
            }
            if (digit_sum % 2 == 0) {
                count++;
            }
        }
        return count;
    }
    int findNumbers(vector<int>& nums) {
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (countEven(nums[i]) % 2 == 0) {
                count++;
            }
        }
        return count;

=======

        int c = 0;
        while(num){
            if(num%2==0) c++;
            num/=10;
        }
        return c;
    }
    int findNumbers(vector<int>& nums) {
        int c = 0;
        for(int i=0;i<nums.size();i++){
            if(countEven(nums[i])%2==0) c++;
        }
        return c;

=======

        int digit = 0;
        int res = 0;
        while(num) {
            digit += num % 10;
            num /= 10;
        }
        return digit % 2 == 0;
    }
    int countEvenDigits(int num) {
        int res = 0;
        for(int i = 1; i <= num; i++) {
            res += countEven(i);
        }
        return res;

=======

        if (num < 10) return num / 2;
        int res = 0;
        int n = num;
        int d = 1;
        while (n >= 10) {
            n /= 10;
            d *= 10;
        }
        if (n % 2 == 0) {
            res += d / 2;
        } else {
            res += d / 2 - 1;
        }
        res += (n - 1) * d / 2;
        res += countEven(num % d);
        return res;
    }
    int findNumbers(vector<int>& nums) {
        int res = 0;
        for (int n : nums) {
            if (countEven(n) % 2 == 0) {
                res++;
            }
        }
        return res;
