Synthesizing 10/10 solutions

=======

        int maxDiff = -1;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (nums[j] > nums[i]) {
                    maxDiff = max(maxDiff, nums[j] - nums[i]);
                }
            }
        }
        return maxDiff;

=======

        int maxDiff = -1;
        int minVal = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > minVal) {
                maxDiff = max(maxDiff, nums[i] - minVal);
            }
            minVal = min(minVal, nums[i]);
        }
        return maxDiff;

=======

        int maxDiff = -1;
        int minElement = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > minElement) {
                maxDiff = max(maxDiff, nums[i] - minElement);
            } else {
                minElement = nums[i];
            }
        }
        return maxDiff;

=======

        int n = nums.size();
        int maxDiff = -1;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(nums[j] > nums[i]) {
                    maxDiff = max(maxDiff, nums[j] - nums[i]);
                }
            }
        }
        return maxDiff;

=======

        int min = nums[0];
        int max = -1;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > min) {
                if (nums[i] - min > max) max = nums[i] - min;
            } else {
                min = nums[i];
            }
        }
        return max;

=======

        int min = nums[0];
        int maxDiff = -1;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] > min) {
                maxDiff = max(maxDiff, nums[i] - min);
            }
            min = min(min, nums[i]);
        }
        return maxDiff;

=======

        int maxDiff = -1;
        int minElement = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] > minElement) {
                maxDiff = max(maxDiff, nums[i] - minElement);
            }
            minElement = min(minElement, nums[i]);
        }
        return maxDiff;

=======

        int res = -1;
        int minNum = nums[0];
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] > minNum){
                res = max(res, nums[i] - minNum);
            }
            else{
                minNum = nums[i];
            }
        }
        return res;

=======

        int n = nums.size();
        int min = nums[0];
        int max = -1;
        for (int i = 1; i < n; i++) {
            if (nums[i] > min) {
                if (nums[i] - min > max) {
                    max = nums[i] - min;
                }
            }
            else {
                min = nums[i];
            }
        }
        return max;

=======

        int n = nums.size(), res = -1;
        vector<int> minLeft(n);
        minLeft[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            minLeft[i] = min(minLeft[i - 1], nums[i]);
        }
        for (int i = 1; i < n; ++i) {
            if (nums[i] > minLeft[i - 1]) {
                res = max(res, nums[i] - minLeft[i - 1]);
            }
        }
        return res;
