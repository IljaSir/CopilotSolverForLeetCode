Synthesizing 10/10 solutions

=======

        string res;
        int count = 0;
        for (char c : s) {
            if (c == '(' && count++ > 0) res += c;
            if (c == ')' && count-- > 1) res += c;
        }
        return res;

=======

        int count = 0;
        string res = "";
        for (char c : s) {
            if (c == '(' && count++ > 0) res += c;
            if (c == ')' && count-- > 1) res += c;
        }
        return res;

=======

        string result;
        int count = 0;
        for (auto c : s) {
            if (c == '(' && count++ > 0) result += c;
            if (c == ')' && count-- > 1) result += c;
        }
        return result;

=======

        string result = "";
        int count = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(' && count++ > 0) result += '(';
            if (s[i] == ')' && count-- > 1) result += ')';
        }
        return result;

=======

        string result;
        int count = 0;
        for (char c : s) {
            if (c == '(') {
                if (count > 0) {
                    result += c;
                }
                ++count;
            } else {
                --count;
                if (count > 0) {
                    result += c;
                }
            }
        }
        return result;

=======

        int n = s.size();
        string res = "";
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                count++;
                if (count > 1) {
                    res += s[i];
                }
            } else {
                count--;
                if (count > 0) {
                    res += s[i];
                }
            }
        }
        return res;

=======

        string ans = "";
        int count = 0;
        for (int i = 0; i < s.length(); i++)
        {
            if (s[i] == '(')
            {
                count++;
                if (count > 1)
                {
                    ans += s[i];
                }
            }
            else
            {
                count--;
                if (count > 0)
                {
                    ans += s[i];
                }
            }
        }
        return ans;

=======

        int count = 0;
        string res;
        for (auto c : s) {
            if (c == '(' && ++count > 1) {
                res += c;
            }
            if (c == ')' && --count > 0) {
                res += c;
            }
        }
        return res;

=======

        int n = s.length();
        int l = 0;
        string res = "";
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                ++l;
                if (l > 1) res += s[i];
            } else {
                --l;
                if (l > 0) res += s[i];
            }
        }
        return res;

=======

        string res;
        int i = 0;
        int count = 0;
        for (char c : s) {
            if (c == '(') {
                ++count;
            } else {
                --count;
            }
            if (count == 0) {
                res += s.substr(i+1, s.size()-i-2);
                i = s.size();
            } else if (i == s.size()) {
                i = s.size() - count;
            }
        }
        return res;
