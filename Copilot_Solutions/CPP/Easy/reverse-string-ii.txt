Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for (int i = 0; i < s.size(); i += 2 * k) {
            reverse(s.begin() + i, s.begin() + min(i + k, (int)s.size()));
        }
        return s;

=======

        for (int i = 0; i < s.size(); i += 2 * k) {
            if (i + k <= s.size()) {
                reverse(s.begin() + i, s.begin() + i + k);
            } else {
                reverse(s.begin() + i, s.end());
            }
        }
        return s;

=======

        int n = s.size();
        for (int i = 0; i < n; i += 2*k) {
            reverse(s.begin() + i, s.begin() + min(i + k, n));
        }
        return s;

=======

        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = min(i + k - 1, n - 1);
            reverse(s.begin() + i, s.begin() + j + 1);
            i += 2 * k;
        }
        return s;

=======

        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = min(i + k, n);
            reverse(s.begin() + i, s.begin() + j);
            i += 2 * k;
        }
        return s;

=======

        int i = 0;
        while (i < s.size()) {
            int j = i + k - 1;
            if (j >= s.size()) {
                j = s.size() - 1;
            }
            reverse(s.begin() + i, s.begin() + j + 1);
            i += 2 * k;
        }
        return s;

=======

        for (int i = 0; i < s.size(); i += 2 * k) {
            int j = i;
            int l = min(i + k - 1, (int)s.size() - 1);
            while (j < l) {
                swap(s[j++], s[l--]);
            }
        }
        return s;

=======

        int len = s.length();
        for (int i = 0; i < len; i += 2 * k) {
            int j = i + k - 1;
            if (j >= len) {
                j = len - 1;
            }
            int m = i, n = j;
            while (m < n) {
                swap(s[m], s[n]);
                m++;
                n--;
            }
        }
        return s;

=======

        int i=0;
        while(i<s.size()){
            if(i+k<s.size()){
                reverse(s.begin()+i,s.begin()+i+k);
                i += 2*k;
            }else{
                reverse(s.begin()+i,s.end());
                break;
            }
        }
        return s;
