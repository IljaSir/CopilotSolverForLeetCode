Synthesizing 10/10 solutions

=======

        vector<vector<int>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(source);
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            if (cur == destination) {
                return true;
            }
            visited[cur] = true;
            for (auto& next : graph[cur]) {
                if (!visited[next]) {
                    q.push(next);
                }
            }
        }
        return false;

=======

        vector<vector<int>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        return dfs(graph, visited, source, destination);

=======

        vector<vector<int>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(source);
        visited[source] = true;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (auto v : graph[u]) {
                if (v == destination) return true;
                if (visited[v]) continue;
                visited[v] = true;
                q.push(v);
            }
        }
        return false;

=======

        vector<vector<int>> graph(n);
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(source);
        visited[source] = true;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            if (node == destination) return true;
            for (int nei : graph[node]) {
                if (visited[nei]) continue;
                visited[nei] = true;
                q.push(nei);
            }
        }
        return false;

=======

        vector<vector<int>> adj(n);
        for (auto e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        return dfs(adj, visited, source, destination);
    }
    
    bool dfs(vector<vector<int>>& adj, vector<bool>& visited, int source, int destination) {
        if (source == destination) {
            return true;
        }
        visited[source] = true;
        for (int i = 0; i < adj[source].size(); i++) {
            if (!visited[adj[source][i]]) {
                if (dfs(adj, visited, adj[source][i], destination)) {
                    return true;
                }
            }
        }
        return false;

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n);
        queue<int> q;
        q.push(source);
        visited[source] = true;
        while (!q.empty()) {
            auto u = q.front(); q.pop();
            if (u == destination) return true;
            for (auto v : adj[u]) {
                if (!visited[v]) {
                    visited[v] = true;
                    q.push(v);
                }
            }
        }
        return false;

=======

        vector<vector<int>> graph(n);
        for (auto& e: edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(source);
        visited[source] = true;
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            if (cur == destination) {
                return true;
            }
            for (auto& next: graph[cur]) {
                if (!visited[next]) {
                    q.push(next);
                    visited[next] = true;
                }
            }
        }
        return false;

=======

        vector<vector<int>> graph(n);
        for (auto &edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<bool> visited(n);
        visited[source] = true;
        queue<int> q;
        q.push(source);
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            if (node == destination)
                return true;
            for (auto &v : graph[node]) {
                if (!visited[v]) {
                    visited[v] = true;
                    q.push(v);
                }
            }
        }
        return false;

=======

        vector<vector<int>> graph(n, vector<int>());
        for (auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        queue<int> q;
        q.push(source);
        vector<bool> visited(n, false);
        visited[source] = true;
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            if (cur == destination) {
                return true;
            }
            for (int next : graph[cur]) {
                if (!visited[next]) {
                    q.push(next);
                    visited[next] = true;
                }
            }
        }
        return false;

=======

        vector<vector<int>> g(n);
        for(auto &e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        vector<int> visited(n);
        queue<int> q;
        q.push(source);
        visited[source] = 1;
        while (!q.empty()) {
            int x = q.front();
            q.pop();
            if (x == destination) {
                return true;
            }
            for (int y : g[x]) {
                if (!visited[y]) {
                    visited[y] = 1;
                    q.push(y);
                }
            }
        }
        return false;
