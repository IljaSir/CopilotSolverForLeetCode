Synthesizing 10/10 solutions

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int bestRow = 0;  // largest of grid[i][j]
            int bestCol = 0;  // largest of grid[j][i]
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] > 0) ans++;  // top shadow
                bestRow = max(bestRow, grid[i][j]);
                bestCol = max(bestCol, grid[j][i]);
            }
            ans += bestRow + bestCol;
        }
        return ans;

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int maxRow = 0, maxCol = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) ans++;
                maxRow = max(maxRow, grid[i][j]);
                maxCol = max(maxCol, grid[j][i]);
            }
            ans += maxRow + maxCol;
        }
        return ans;

=======

        int n = grid.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int x = 0, y = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j]) res++;
                x = max(x, grid[i][j]);
                y = max(y, grid[j][i]);
            }
            res += x + y;
        }
        return res;

=======

        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0){
                    ans++;
                }
            }
        }
        for(int i=0;i<n;i++){
            int max = 0;
            for(int j=0;j<m;j++){
                if(grid[i][j]>max){
                    max = grid[i][j];
                }
            }
            ans+=max;
        }
        for(int i=0;i<m;i++){
            int max = 0;
            for(int j=0;j<n;j++){
                if(grid[j][i]>max){
                    max = grid[j][i];
                }
            }
            ans+=max;
        }
        return ans;

=======

        int top = 0;
        int front = 0;
        int side = 0;
        for (int i = 0; i < grid.size(); i++) {
            int max = 0;
            for (int j = 0; j < grid[i].size(); j++) {
                if (grid[i][j] > 0) {
                    top++;
                }
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            front += max;
        }
        for (int j = 0; j < grid[0].size(); j++) {
            int max = 0;
            for (int i = 0; i < grid.size(); i++) {
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            side += max;
        }
        return top + front + side;

=======

        int n = grid.size();
        int top = 0;
        int front = 0;
        int side = 0;
        for (int i = 0; i < n; i++) {
            int maxFront = 0;
            int maxSide = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) {
                    top++;
                }
                maxFront = max(maxFront, grid[i][j]);
                maxSide = max(maxSide, grid[j][i]);
            }
            front += maxFront;
            side += maxSide;
        }
        return top + front + side;

=======

        int n = grid.size();
        int top = 0;
        int front = 0;
        int side = 0;
        for (int i = 0; i < n; i++) {
            int maxFront = 0;
            int maxSide = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] > 0) top++;
                maxFront = max(maxFront, grid[i][j]);
                maxSide = max(maxSide, grid[j][i]);
            }
            front += maxFront;
            side += maxSide;
        }
        return top + front + side;

=======

        int n = grid.size();
        int top = 0;
        int front = 0;
        int side = 0;
        for (int i = 0; i < n; i++) {
            int max = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) {
                    top++;
                }
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            front += max;
        }
        for (int j = 0; j < n; j++) {
            int max = 0;
            for (int i = 0; i < n; i++) {
                if (grid[i][j] > max) {
                    max = grid[i][j];
                }
            }
            side += max;
        }
        return top + front + side;

=======

        int n = grid.size();
        int x = 0, y = 0, z = 0;
        for (int i = 0; i < n; i++) {
            int max_y = 0, max_z = 0;
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) x++;
                max_y = max(max_y, grid[i][j]);
                max_z = max(max_z, grid[j][i]);
            }
            y += max_y;
            z += max_z;
        }
        return x + y + z;

=======

        int area = 0;
        int n = grid.size();
        for(int i = 0; i < n; ++i){
            int top = 0;
            int front = 0;
            for(int j = 0; j < n; ++j){
                if(grid[i][j] > 0){
                    ++area;
                }
                top = max(top, grid[i][j]);
                front = max(front, grid[j][i]);
            }
            area += top + front;
        }
        return area;
