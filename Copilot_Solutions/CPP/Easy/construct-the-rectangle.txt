Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int w = sqrt(area);
        while (area % w != 0) {
            w--;
        }
        return {area / w, w};

=======

        int w = sqrt(area);
        while (area % w != 0) w--;
        return {area / w, w};

=======

        vector<int> res;
        int l = sqrt(area);
        for (int i = l; i >= 1; i--) {
            if (area % i == 0) {
                res.push_back(area / i);
                res.push_back(i);
                break;
            }
        }
        return res;

=======

        vector<int> res;
        int i = sqrt(area);
        while (i > 0) {
            if (area % i == 0) {
                res.push_back(area / i);
                res.push_back(i);
                break;
            }
            i--;
        }
        return res;

=======

        int L = (int)sqrt(area);
        while (area % L != 0) {
            L--;
        }
        return {area / L, L};

=======

        int l = sqrt(area);
        while (area % l) {
            l--;
        }
        return {area / l, l};

=======

        int s = sqrt(area);
        while (area % s) {
            --s;
        }
        return {area / s, s};

=======

        int l = sqrt(area);
        while (area%l != 0) --l;
        return {area/l, l};
