Synthesizing 10/10 solutions

=======

        int x, y;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int count = 0;
        int i = x;
        while (i >= 0) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
            i--;
        }
        i = x;
        while (i < 8) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
            i++;
        }
        i = y;
        while (i >= 0) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
            i--;
        }
        i = y;
        while (i < 8) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
            i++;
        }
        return count;

=======

        int x, y;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int count = 0;
        for (int i = x-1; i >= 0; i--) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = x+1; i < 8; i++) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int j = y-1; j >= 0; j--) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                count++;
                break;
            }
        }
        for (int j = y+1; j < 8; j++) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                count++;
                break;
            }
        }
        return count;

=======

        int x, y;
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                }
            }
        }
        int count = 0;
        for (int i = x - 1; i >= 0; --i) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = x + 1; i < 8; ++i) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                count++;
                break;
            }
        }
        for (int i = y - 1; i >= 0; --i) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
        }
        for (int i = y + 1; i < 8; ++i) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                count++;
                break;
            }
        }
        return count;

=======

        int x = 0, y = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int res = 0;
        for (int i = x-1; i >= 0; i--) {
            if (board[i][y] == 'p') {
                res++;
                break;
            }
            if (board[i][y] == 'B') break;
        }
        for (int i = x+1; i < 8; i++) {
            if (board[i][y] == 'p') {
                res++;
                break;
            }
            if (board[i][y] == 'B') break;
        }
        for (int i = y-1; i >= 0; i--) {
            if (board[x][i] == 'p') {
                res++;
                break;
            }
            if (board[x][i] == 'B') break;
        }
        for (int i = y+1; i < 8; i++) {
            if (board[x][i] == 'p') {
                res++;
                break;
            }
            if (board[x][i] == 'B') break;
        }
        return res;

=======

        int x = 0, y = 0;
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int ret = 0;
        for (int i = x + 1; i < 8; ++i) {
            if (board[i][y] == 'p') {
                ret++;
                break;
            } else if (board[i][y] == 'B') {
                break;
            }
        }
        for (int i = x - 1; i >= 0; --i) {
            if (board[i][y] == 'p') {
                ret++;
                break;
            } else if (board[i][y] == 'B') {
                break;
            }
        }
        for (int i = y + 1; i < 8; ++i) {
            if (board[x][i] == 'p') {
                ret++;
                break;
            } else if (board[x][i] == 'B') {
                break;
            }
        }
        for (int i = y - 1; i >= 0; --i) {
            if (board[x][i] == 'p') {
                ret++;
                break;
            } else if (board[x][i] == 'B') {
                break;
            }
        }
        return ret;

=======

        int r = -1, c = -1;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    r = i;
                    c = j;
                    break;
                }
            }
            if (r != -1) {
                break;
            }
        }
        int res = 0;
        for (int i = r - 1; i >= 0; i--) {
            if (board[i][c] == 'B') {
                break;
            }
            if (board[i][c] == 'p') {
                res++;
                break;
            }
        }
        for (int i = r + 1; i < 8; i++) {
            if (board[i][c] == 'B') {
                break;
            }
            if (board[i][c] == 'p') {
                res++;
                break;
            }
        }
        for (int j = c - 1; j >= 0; j--) {
            if (board[r][j] == 'B') {
                break;
            }
            if (board[r][j] == 'p') {
                res++;
                break;
            }
        }
        for (int j = c + 1; j < 8; j++) {
            if (board[r][j] == 'B') {
                break;
            }
            if (board[r][j] == 'p') {
                res++;
                break;
            }
        }
        return res;

=======

        int x, y;
        for(int i = 0; i < 8; ++i) {
            for(int j = 0; j < 8; ++j) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int result = 0;
        for(int i = x; i < 8; ++i) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                ++result;
                break;
            }
        }
        for(int i = x; i >= 0; --i) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                ++result;
                break;
            }
        }
        for(int j = y; j < 8; ++j) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                ++result;
                break;
            }
        }
        for(int j = y; j >= 0; --j) {
            if (board[x][j] == 'B') {
                break;
            }
            if (board[x][j] == 'p') {
                ++result;
                break;
            }
        }
        return result;

=======

        int row = board.size();
        int col = board[0].size();
        int x = 0, y = 0;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = x - 1; i >= 0; i--) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                ans++;
                break;
            }
        }
        for (int i = x + 1; i < row; i++) {
            if (board[i][y] == 'B') {
                break;
            }
            if (board[i][y] == 'p') {
                ans++;
                break;
            }
        }
        for (int i = y - 1; i >= 0; i--) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                ans++;
                break;
            }
        }
        for (int i = y + 1; i < col; i++) {
            if (board[x][i] == 'B') {
                break;
            }
            if (board[x][i] == 'p') {
                ans++;
                break;
            }
        }
        return ans;

=======

        int i, j, x, y, n = board.size(), m = board[0].size(), res = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < m; j++) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
        }
        for (i = x - 1; i >= 0; i--) {
            if (board[i][y] == 'B') break;
            if (board[i][y] == 'p') {
                res++;
                break;
            }
        }
        for (i = x + 1; i < n; i++) {
            if (board[i][y] == 'B') break;
            if (board[i][y] == 'p') {
                res++;
                break;
            }
        }
        for (i = y - 1; i >= 0; i--) {
            if (board[x][i] == 'B') break;
            if (board[x][i] == 'p') {
                res++;
                break;
            }
        }
        for (i = y + 1; i < m; i++) {
            if (board[x][i] == 'B') break;
            if (board[x][i] == 'p') {
                res++;
                break;
            }
        }
        return res;

=======

        int x = 0, y = 0, i = 0, j = 0, n = board.size();
        for (i = 0; i < n; ++i) {
            for (j = 0; j < n; ++j) {
                if (board[i][j] == 'R') {
                    x = i;
                    y = j;
                    break;
                }
            }
            if (j < n) {
                break;
            }
        }
        int res = 0;
        for (int k = x - 1; k >= 0; --k) {
            if (board[k][y] == 'p') {
                res++;
                break;
            } else if (board[k][y] == 'B') {
                break;
            }
        }
        for (int k = x + 1; k < n; ++k) {
            if (board[k][y] == 'p') {
                res++;
                break;
            } else if (board[k][y] == 'B') {
                break;
            }
        }
        for (int k = y - 1; k >= 0; --k) {
            if (board[x][k] == 'p') {
                res++;
                break;
            } else if (board[x][k] == 'B') {
                break;
            }
        }
        for (int k = y + 1; k < n; ++k) {
            if (board[x][k] == 'p') {
                res++;
                break;
            } else if (board[x][k] == 'B') {
                break;
            }
        }
        return res;
