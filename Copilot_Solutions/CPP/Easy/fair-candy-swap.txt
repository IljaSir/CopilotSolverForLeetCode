Synthesizing 10/10 solutions

=======

        int sumA = accumulate(aliceSizes.begin(), aliceSizes.end(), 0);
        int sumB = accumulate(bobSizes.begin(), bobSizes.end(), 0);
        int diff = (sumA - sumB) / 2;
        unordered_set<int> setA(aliceSizes.begin(), aliceSizes.end());
        for (int b : bobSizes) {
            if (setA.find(b + diff) != setA.end()) {
                return {b + diff, b};
            }
        }
        return {};

=======

        int sumA = accumulate(aliceSizes.begin(), aliceSizes.end(), 0);
        int sumB = accumulate(bobSizes.begin(), bobSizes.end(), 0);
        int delta = (sumA - sumB) / 2;
        unordered_set<int> bset(bobSizes.begin(), bobSizes.end());
        for (int a: aliceSizes)
            if (bset.count(a - delta))
                return {a, a - delta};
        return {};

=======

        int sumA = 0, sumB = 0;
        for (int i = 0; i < aliceSizes.size(); i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.size(); i++) {
            sumB += bobSizes[i];
        }
        int diff = (sumA - sumB) / 2;
        unordered_set<int> setA;
        for (int i = 0; i < aliceSizes.size(); i++) {
            setA.insert(aliceSizes[i]);
        }
        for (int i = 0; i < bobSizes.size(); i++) {
            if (setA.count(bobSizes[i] + diff)) {
                return {bobSizes[i] + diff, bobSizes[i]};
            }
        }
        return {};

=======

        int sumA = 0, sumB = 0;
        for (int i = 0; i < aliceSizes.size(); i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.size(); i++) {
            sumB += bobSizes[i];
        }
        int target = (sumA - sumB) / 2;
        set<int> setB;
        for (int i = 0; i < bobSizes.size(); i++) {
            setB.insert(bobSizes[i]);
        }
        for (int i = 0; i < aliceSizes.size(); i++) {
            int diff = aliceSizes[i] - target;
            if (setB.find(diff) != setB.end()) {
                return {aliceSizes[i], diff};
            }
        }
        return {};

=======

        int sumA = 0, sumB = 0;
        for (int i = 0; i < aliceSizes.size(); i++) {
            sumA += aliceSizes[i];
        }
        for (int i = 0; i < bobSizes.size(); i++) {
            sumB += bobSizes[i];
        }
        int diff = (sumA - sumB) / 2;
        unordered_set<int> setA;
        for (int i = 0; i < aliceSizes.size(); i++) {
            setA.insert(aliceSizes[i]);
        }
        for (int i = 0; i < bobSizes.size(); i++) {
            if (setA.find(bobSizes[i] + diff) != setA.end()) {
                return {bobSizes[i] + diff, bobSizes[i]};
            }
        }
        return {};

=======

        int sum1 = 0, sum2 = 0;
        for (auto i : aliceSizes) sum1 += i;
        for (auto i : bobSizes) sum2 += i;
        int diff = (sum1 - sum2) / 2;
        unordered_set<int> set;
        for (auto i : aliceSizes) set.insert(i);
        for (auto i : bobSizes) {
            if (set.find(i + diff) != set.end()) {
                return {i + diff, i};
            }
        }
        return {};

=======

        int sum_alice = 0, sum_bob = 0;
        for (int i = 0; i < aliceSizes.size(); i++)
            sum_alice += aliceSizes[i];
        for (int j = 0; j < bobSizes.size(); j++)
            sum_bob += bobSizes[j];
        int delta = (sum_alice - sum_bob) / 2;
        for (int i = 0; i < aliceSizes.size(); i++) {
            for (int j = 0; j < bobSizes.size(); j++) {
                if (aliceSizes[i] - bobSizes[j] == delta) {
                    return {aliceSizes[i], bobSizes[j]};
                }
            }
        }
        return {};

=======

        int sum1 = 0;
        int sum2 = 0;
        for (auto x : aliceSizes) sum1 += x;
        for (auto x : bobSizes) sum2 += x;
        int diff = (sum1 - sum2) / 2;
        set<int> s;
        for (auto x : aliceSizes) s.insert(x);
        for (auto y : bobSizes) {
            if (s.find(y + diff) != s.end()) {
                return {y + diff, y};
            }
        }
        return {};

=======

        int sumA = 0, sumB = 0;
        for (auto& i : aliceSizes) sumA += i;
        for (auto& i : bobSizes) sumB += i;
        int diff = (sumA - sumB) / 2;
        unordered_set<int> s;
        for (auto& i : aliceSizes) s.insert(i);
        for (auto& i : bobSizes) {
            if (s.count(i + diff)) {
                return {i + diff, i};
            }
        }
        return {};

=======

        int sumA = 0;
        int sumB = 0;
        int diff = 0;
        for (int i = 0; i < aliceSizes.size(); i++)
            sumA += aliceSizes[i];
        for (int i = 0; i < bobSizes.size(); i++)
            sumB += bobSizes[i];
        diff = (sumA - sumB) / 2;
        for (int i = 0; i < aliceSizes.size(); i++) {
            for (int j = 0; j < bobSizes.size(); j++) {
                if (aliceSizes[i] - bobSizes[j] == diff) {
                    return {aliceSizes[i], bobSizes[j]};
                }
            }
        }
        return {};
