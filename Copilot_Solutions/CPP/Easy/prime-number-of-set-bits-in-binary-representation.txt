Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            if (isPrime(__builtin_popcount(i))) {
                count++;
            }
        }
        return count;
    }
    
    bool isPrime(int n) {
        if (n == 1) {
            return false;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int setBits = __builtin_popcount(i);
            if (setBits == 2 || setBits == 3 || setBits == 5 || setBits == 7 || setBits == 11 || setBits == 13 || setBits == 17 || setBits == 19) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int bits = 0;
            int n = i;
            while (n > 0) {
                if (n & 1) bits++;
                n >>= 1;
            }
            if (bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19) count++;
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; ++i) {
            int num = i;
            int setBits = 0;
            while (num > 0) {
                if (num & 1) {
                    ++setBits;
                }
                num >>= 1;
            }
            if (setBits == 2 || setBits == 3 || setBits == 5 || setBits == 7 || setBits == 11 || setBits == 13 || setBits == 17 || setBits == 19) {
                ++count;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int bits = 0;
            int n = i;
            while (n > 0) {
                bits += n % 2;
                n /= 2;
            }
            if (bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int n = i;
            int bits = 0;
            while (n > 0) {
                bits += n % 2;
                n /= 2;
            }
            if (bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 ||
                bits == 13 || bits == 17 || bits == 19) {
                count++;
            }
        }
        return count;

=======

        int cnt = 0;
        for (int i = left; i <= right; ++i) {
            int n = i;
            int num = 0;
            while (n) {
                if (n & 1) {
                    num++;
                }
                n >>= 1;
            }
            if (num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13 || num == 17 || num == 19) {
                cnt++;
            }
        }
        return cnt;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int tmp = i;
            int bitCount = 0;
            while (tmp) {
                bitCount += tmp & 1;
                tmp >>= 1;
            }
            if (isPrime(bitCount)) count++;
        }
        return count;

=======

        int count = 0;
        for (int i = left; i <= right; i++) {
            int n = i;
            int nSetBits = 0;
            while (n > 0) {
                nSetBits += n & 1;
                n >>= 1;
            }
            if (nSetBits == 2 || nSetBits == 3 || nSetBits == 5 || nSetBits == 7 || nSetBits == 11 || nSetBits == 13 || nSetBits == 17 || nSetBits == 19) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for(int i = left; i <= right; i++){
            int bits = 0;
            int n = i;
            while(n){
                bits += n&1;
                n >>= 1;
            }
            if(bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19){
                count++;
            }
        }
        return count;
