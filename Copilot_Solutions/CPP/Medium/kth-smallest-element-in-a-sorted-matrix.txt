Synthesizing 10/10 solutions

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n - 1][n - 1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0, j = n - 1;
            for (int i = 0; i < n; i++) {
                while (j >= 0 && matrix[i][j] > mid) j--;
                cnt += (j + 1);
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n-1][n-1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            if (cnt < k)
                l = mid + 1;
            else
                r = mid;
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n - 1][n - 1];
        while (l < r) {
            int mid = l + r >> 1;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            if (cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0];
        int r = matrix[n - 1][n - 1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            if (cnt < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.size();
        int left = matrix[0][0];
        int right = matrix[n - 1][n - 1];
        while (left < right) {
            int mid = left + (right - left) / 2;
            int cnt = 0;
            int j = n - 1;
            for (int i = 0; i < n; ++i) {
                while (j >= 0 && matrix[i][j] > mid) {
                    --j;
                }
                cnt += (j + 1);
            }
            if (cnt < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        priority_queue<int> q;
        for (int i = 0; i < matrix.size(); ++i) {
            for (int j = 0; j < matrix[i].size(); ++j) {
                q.push(matrix[i][j]);
                if (q.size() > k) {
                    q.pop();
                }
            }
        }
        return q.top();

=======

        int n = matrix.size();
        int l = matrix[0][0];
        int r = matrix[n-1][n-1];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int count = 0;
            for (int i = 0; i < n; i++) {
                int left = 0;
                int right = n;
                while (left < right) {
                    int mid2 = left + (right - left) / 2;
                    if (matrix[i][mid2] > mid) {
                        right = mid2;
                    } else {
                        left = mid2 + 1;
                    }
                }
                count += left;
            }
            if (count < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n-1][n-1];
        while (l < r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matrix[i][j] <= mid) cnt++;
                }
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n - 1][n - 1], mid;
        while (l < r) {
            mid = l + r >> 1;
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        int n = matrix.size();
        int l = matrix[0][0], r = matrix[n-1][n-1];
        while(l < r) {
            int mid = l + (r-l)/2;
            if(count(matrix, mid) < k) l = mid + 1;
            else r = mid;
        }
        return l;
    }
    int count(vector<vector<int>>& matrix, int mid) {
        int i = matrix.size()-1, j = 0, res = 0;
        while(i >= 0 && j < matrix.size()) {
            if(matrix[i][j] <= mid) {
                res += i+1;
                j++;
            }
            else i--;
        }
        return res;
