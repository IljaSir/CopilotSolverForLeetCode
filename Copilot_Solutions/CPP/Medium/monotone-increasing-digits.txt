Synthesizing 10/10 solutions (Duplicates hidden)

=======

        string s = to_string(n);
        int mark = s.size();
        for (int i = s.size() - 1; i > 0; i--) {
            if (s[i - 1] > s[i]) {
                mark = i;
                s[i - 1]--;
            }
        }
        for (int i = mark; i < s.size(); i++) {
            s[i] = '9';
        }
        return stoi(s);

=======

        string num = to_string(n);
        int mark = num.size();
        for (int i = num.size() - 1; i > 0; --i) {
            if (num[i - 1] > num[i]) {
                mark = i;
                num[i - 1]--;
            }
        }
        for (int i = mark; i < num.size(); ++i) {
            num[i] = '9';
        }
        return stoi(num);

=======

        string s = to_string(n);
        int i = 1;
        while (i < s.size() && s[i - 1] <= s[i]) {
            i++;
        }
        if (i < s.size()) {
            while (i > 0 && s[i - 1] > s[i]) {
                s[i - 1]--;
                i--;
            }
            for (i++; i < s.size(); i++) {
                s[i] = '9';
            }
        }
        return stoi(s);

=======

        string s = to_string(n);
        int p = s.size();
        for (int i = s.size() - 1; i > 0; i--) {
            if (s[i] < s[i - 1]) {
                p = i;
                s[i - 1]--;
            }
        }
        for (int i = p; i < s.size(); i++) {
            s[i] = '9';
        }
        return stoi(s);

=======

        string s = to_string(n);
        int i = 1;
        while (i < s.size() && s[i - 1] <= s[i]) ++i;
        while (i > 0 && i < s.size() && s[i - 1] > s[i]) {
            --s[i - 1];
            --i;
        }
        for (i += 1; i < s.size(); ++i) s[i] = '9';
        return stoi(s);

=======

        string s = to_string(n);
        int i = 1;
        while (i < s.size() && s[i-1] <= s[i]) ++i;
        if (i < s.size()) {
            while (i > 0 && s[i-1] > s[i]) {
                --s[i-1];
                --i;
            }
            for (int j = i+1; j < s.size(); ++j) {
                s[j] = '9';
            }
        }
        return stoi(s);

=======

        string s = to_string(n);
        int i = 1;
        while (i < s.length() && s[i-1] <= s[i]) {
            i++;
        }
        if (i < s.length()) {
            while (i > 0 && s[i-1] > s[i]) {
                s[i-1]--;
                i--;
            }
            for (i++; i < s.length(); i++) {
                s[i] = '9';
            }
        }
        return stoi(s);

=======

        if (n < 10) return n;
        string s = to_string(n);
        int i = 1;
        while (i < s.size() && s[i] >= s[i - 1]) ++i;
        while (i > 0 && i < s.size() && s[i] < s[i - 1]) {
            --s[i - 1];
            --i;
        }
        for (int j = i + 1; j < s.size(); ++j) s[j] = '9';
        return stoi(s);

=======

        vector<int> v;
        while (n) {
            v.push_back(n % 10);
            n /= 10;
        }
        reverse(v.begin(), v.end());
        int i = 0;
        for (i = 0; i < v.size() - 1; i++) {
            if (v[i] > v[i + 1]) {
                break;
            }
        }
        if (i == v.size() - 1) {
            return n;
        }
        for (int j = i + 1; j < v.size(); j++) {
            v[j] = 9;
        }
        v[i]--;
        for (int j = i - 1; j >= 0; j--) {
            if (v[j] > v[j + 1]) {
                v[j]--;
                v[j + 1] = 9;
            }
        }
        int ans = 0;
        for (int j = 0; j < v.size(); j++) {
            ans = ans * 10 + v[j];
        }
        return ans;
