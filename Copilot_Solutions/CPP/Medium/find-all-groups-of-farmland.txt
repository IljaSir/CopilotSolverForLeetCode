Synthesizing 10/10 solutions

=======

        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> res;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int x = i, y = j;
                    while (x < m && land[x][j] == 1) {
                        ++x;
                    }
                    while (y < n && land[i][y] == 1) {
                        ++y;
                    }
                    res.push_back({i, j, x - 1, y - 1});
                    for (int a = i; a < x; ++a) {
                        for (int b = j; b < y; ++b) {
                            land[a][b] = 0;
                        }
                    }
                }
            }
        }
        return res;

=======

        vector<vector<int>> res;
        int m = land.size(), n = land[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int r1 = i, c1 = j;
                    while (j < n && land[i][j] == 1) ++j;
                    int r2 = i, c2 = j - 1;
                    while (i < m && land[i][j - 1] == 1) ++i;
                    int r3 = i - 1, c3 = j - 1;
                    while (j >= 0 && land[i - 1][j] == 1) --j;
                    int r4 = i - 1, c4 = j + 1;
                    while (i >= 0 && land[i][j + 1] == 1) --i;
                    res.push_back({r1, c1, r3, c3});
                }
            }
        }
        return res;

=======

        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> ans;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int r1 = i, c1 = j, r2 = i, c2 = j;
                    while (r2 + 1 < m && land[r2 + 1][j] == 1) ++r2;
                    while (c2 + 1 < n && land[i][c2 + 1] == 1) ++c2;
                    for (int r = r1; r <= r2; ++r) {
                        for (int c = c1; c <= c2; ++c) {
                            land[r][c] = 0;
                        }
                    }
                    ans.push_back({r1, c1, r2, c2});
                }
            }
        }
        return ans;

=======

        vector<vector<int>> ans;
        for (int i = 0; i < land.size(); i++) {
            for (int j = 0; j < land[i].size(); j++) {
                if (land[i][j] == 1) {
                    int r = i, c = j;
                    while (r < land.size() && land[r][j] == 1) {
                        r++;
                    }
                    while (c < land[i].size() && land[i][c] == 1) {
                        c++;
                    }
                    ans.push_back({i, j, r - 1, c - 1});
                    for (int x = i; x < r; x++) {
                        for (int y = j; y < c; y++) {
                            land[x][y] = 0;
                        }
                    }
                }
            }
        }
        return ans;

=======

        vector<vector<int>> result;
        int m = land.size();
        int n = land[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    vector<int> temp;
                    temp.push_back(i);
                    temp.push_back(j);
                    int x = j;
                    while (x < n && land[i][x] == 1) {
                        x++;
                    }
                    temp.push_back(i);
                    temp.push_back(x - 1);
                    int y = i;
                    while (y < m && land[y][j] == 1) {
                        y++;
                    }
                    temp.push_back(y - 1);
                    temp.push_back(x - 1);
                    result.push_back(temp);
                    for (int k = i; k < y; k++) {
                        for (int l = j; l < x; l++) {
                            land[k][l] = 0;
                        }
                    }
                }
            }
        }
        return result;

=======

        vector<vector<int>> result;
        int m = land.size();
        int n = land[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int r1 = i;
                    int c1 = j;
                    int r2 = i;
                    int c2 = j;
                    while (r2 < m && land[r2][j] == 1) {
                        ++r2;
                    }
                    while (c2 < n && land[i][c2] == 1) {
                        ++c2;
                    }
                    for (int r = r1; r < r2; ++r) {
                        for (int c = c1; c < c2; ++c) {
                            land[r][c] = 2;
                        }
                    }
                    result.push_back({r1, c1, r2 - 1, c2 - 1});
                }
            }
        }
        return result;

=======

        vector<vector<int>> result;
        int m = land.size();
        int n = land[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int x = i, y = j;
                    while (y < n && land[x][y] == 1) {
                        ++y;
                    }
                    while (x < m && land[x][j] == 1) {
                        ++x;
                    }
                    result.push_back({i, j, x - 1, y - 1});
                    for (int k = i; k < x; ++k) {
                        for (int l = j; l < y; ++l) {
                            land[k][l] = 0;
                        }
                    }
                }
            }
        }
        return result;

=======

        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> res;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(land[i][j] == 1){
                    int r = i, c = j;
                    while(r < m && land[r][j] == 1) r++;
                    while(c < n && land[i][c] == 1) c++;
                    for(int k = i; k < r; k++){
                        for(int l = j; l < c; l++){
                            land[k][l] = 0;
                        }
                    }
                    res.push_back({i, j, r - 1, c - 1});
                }
            }
        }
        return res;

=======

        vector<vector<int>> result;
        int m = land.size(), n = land[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (land[i][j] == 1) {
                    int right = j;
                    while (right < n && land[i][right] == 1) {
                        right++;
                    }
                    int down = i;
                    while (down < m && land[down][j] == 1) {
                        down++;
                    }
                    result.push_back({i, j, down - 1, right - 1});
                    for (int k = i; k < down; k++) {
                        for (int l = j; l < right; l++) {
                            land[k][l] = 0;
                        }
                    }
                }
            }
        }
        return result;

=======

        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> res;
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(land[i][j] == 1) {
                    int r1 = i, c1 = j;
                    int r2 = i, c2 = j;
                    while(r2 < m && land[r2][j] == 1) {
                        ++r2;
                    }
                    while(c2 < n && land[i][c2] == 1) {
                        ++c2;
                    }
                    for(int r = r1; r < r2; ++r) {
                        for(int c = c1; c < c2; ++c) {
                            land[r][c] = 0;
                        }
                    }
                    res.push_back({r1, c1, r2 - 1, c2 - 1});
                }
            }
        }
        return res;
