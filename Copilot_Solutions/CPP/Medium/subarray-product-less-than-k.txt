Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (k <= 1) return 0;
        int prod = 1, ans = 0, left = 0;
        for (int right = 0; right < nums.size(); right++) {
            prod *= nums[right];
            while (prod >= k) prod /= nums[left++];
            ans += right - left + 1;
        }
        return ans;

=======

        int n = nums.size();
        int left = 0, right = 0;
        int prod = 1;
        int ans = 0;
        while (right < n) {
            prod *= nums[right];
            while (left <= right && prod >= k) {
                prod /= nums[left];
                ++left;
            }
            ans += right - left + 1;
            ++right;
        }
        return ans;

=======

        int n = nums.size();
        int l = 0, r = 0;
        int ans = 0;
        int product = 1;
        while (r < n) {
            product *= nums[r];
            while (l <= r && product >= k) {
                product /= nums[l];
                l++;
            }
            ans += r - l + 1;
            r++;
        }
        return ans;

=======

        int i = 0, j = 0, res = 0, prod = 1;
        while (j < nums.size()) {
            prod *= nums[j];
            while (i <= j && prod >= k) {
                prod /= nums[i++];
            }
            res += j - i + 1;
            j++;
        }
        return res;

=======

        int n = nums.size();
        int i = 0, j = 0, ans = 0;
        long long prod = 1;
        while (j < n) {
            prod *= nums[j];
            while (i <= j && prod >= k) {
                prod /= nums[i];
                i++;
            }
            ans += j - i + 1;
            j++;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int l = 0, r = 0, p = 1;
        while (r < n) {
            p *= nums[r];
            while (l <= r && p >= k) p /= nums[l++];
            ans += r - l + 1;
            r++;
        }
        return ans;

=======

        int n = nums.size();
        int i = 0, j = 0;
        int cnt = 0;
        int prod = 1;
        while (i < n) {
            prod *= nums[i];
            while (j <= i && prod >= k) {
                prod /= nums[j];
                j++;
            }
            cnt += i-j+1;
            i++;
        }
        return cnt;

=======

        int n = nums.size();
        int i = 0, j = 0, sum = 0;
        int product = 1;
        while (j < n) {
            product *= nums[j];
            while (i <= j && product >= k) {
                product /= nums[i];
                i++;
            }
            sum += j - i + 1;
            j++;
        }
        return sum;
