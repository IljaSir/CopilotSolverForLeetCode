Synthesizing 10/10 solutions

=======

        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; ++i) {
            for (int j = 0; j < coins.size(); ++j) {
                if (coins[j] <= i) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; ++i) {
            for (int coin : coins) {
                if (i - coin >= 0) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        vector<int> dp(amount+1, amount+1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.size(); j++) {
                if (coins[j] <= i) {
                    dp[i] = min(dp[i], dp[i-coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 0; i <= amount; i++) {
            for (int coin : coins) {
                if (i - coin < 0) {
                    continue;
                }
                dp[i] = min(dp[i], dp[i - coin] + 1);
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        if (amount == 0) return 0;
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.size(); j++) {
                if (i - coins[j] >= 0) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        int n = coins.size();
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < n; j++) {
                if (coins[j] <= i) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];

=======

        vector<int> dp(amount+1, -1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.size(); j++) {
                if (i - coins[j] >= 0 && dp[i-coins[j]] != -1) {
                    if (dp[i] == -1) {
                        dp[i] = dp[i-coins[j]] + 1;
                    } else {
                        dp[i] = min(dp[i], dp[i-coins[j]] + 1);
                    }
                }
            }
        }
        return dp[amount];

=======

        if (amount == 0) return 0;
        if (coins.size() == 0) return -1;
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.size(); j++) {
                if (i - coins[j] >= 0) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];

=======

        int n = coins.size();
        vector<int> dp(amount+1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < n; j++) {
                if (coins[j] <= i) {
                    int sub_res = dp[i-coins[j]];
                    if (sub_res != INT_MAX && sub_res + 1 < dp[i]) {
                        dp[i] = sub_res + 1;
                    }
                }
            }
        }
        return dp[amount] == INT_MAX ? -1 : dp[amount];

=======

        // 1. Sort coins
        sort(coins.begin(), coins.end());
        
        // 2. Find max number of coins
        int maxCoins = amount/coins[0];
        int minCoins = amount/coins[coins.size()-1];
        
        // 3. Try all possible combinations of coins
        vector<int> currCombination;
        int minCombination = maxCoins+1;
        coinChange(coins, amount, 0, currCombination, minCombination);
        
        if (minCombination == maxCoins+1) {
            return -1;
        }
        return minCombination;
    }
    
    void coinChange(vector<int>& coins, int amount, int coinIndex, vector<int>& currCombination, int& minCombination) {
        //cout << "amount: " << amount << " coinIndex: " << coinIndex << " currCombination: " << currCombination.size() << " minCombination: " << minCombination << endl;
        
        // 1. Check if we have a valid combination
        if (amount == 0) {
            if (currCombination.size() < minCombination) {
                minCombination = currCombination.size();
            }
            return;
        }
        
        // 2. Check if we have an invalid combination
        if (currCombination.size() >= minCombination) {
            return;
        }
        
        // 3. Check if we have a combination that exceeds the amount
        if (amount < 0) {
            return;
        }
        
        // 4. Try all possible combinations
        for (int i = coinIndex; i < coins.size(); i++) {
            //cout << "i: " << i << endl;
            currCombination.push_back(coins[i]);
            coinChange(coins, amount-coins[i], i, currCombination, minCombination);
            currCombination.pop_back();
        }
