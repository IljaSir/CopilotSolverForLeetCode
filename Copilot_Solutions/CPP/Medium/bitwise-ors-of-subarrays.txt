Synthesizing 10/10 solutions

=======

        unordered_set<int> res, cur, cur2;
        for (int i = 0; i < arr.size(); ++i) {
            cur2 = {arr[i]};
            for (int j : cur) cur2.insert(j | arr[i]);
            res.insert(cur2.begin(), cur2.end());
            cur = cur2;
        }
        return res.size();

=======

        unordered_set<int> res, cur, cur2;
        for (int i : arr) {
            cur2 = {i};
            for (int j : cur) cur2.insert(i | j);
            cur = cur2;
            res.insert(cur.begin(), cur.end());
        }
        return res.size();

=======

        unordered_set<int> res, cur, pre;
        for (int i : arr) {
            cur = {i};
            for (int j : pre) cur.insert(i | j);
            res.insert(cur.begin(), cur.end());
            pre = cur;
        }
        return res.size();

=======

        unordered_set<int> res, cur, pre;
        for (int a: arr) {
            cur = {a};
            for (int b: pre) cur.insert(a | b);
            res.insert(cur.begin(), cur.end());
            pre = cur;
        }
        return res.size();

=======

        set<int> s;
        for (int i = 0; i < arr.size(); ++i) {
            int t = arr[i];
            s.insert(t);
            for (int j = i + 1; j < arr.size(); ++j) {
                t |= arr[j];
                s.insert(t);
            }
        }
        return s.size();

=======

        set<int> ans;
        set<int> cur;
        for (auto x: arr) {
            set<int> cur2;
            cur2.insert(x);
            for (auto y: cur) {
                cur2.insert(x | y);
            }
            cur = cur2;
            for (auto y: cur) {
                ans.insert(y);
            }
        }
        return ans.size();

=======

        unordered_set<int> res, cur, next;
        for (int i = 0; i < arr.size(); ++i) {
            next = {arr[i]};
            for (int j : cur) next.insert(j | arr[i]);
            res.insert(next.begin(), next.end());
            cur = next;
        }
        return res.size();

=======

        set<int> s;
        int n = arr.size();
        s.insert(arr[0]);
        int prev = arr[0];
        for (int i = 1; i < n; i++) {
            int cur = arr[i];
            set<int> tmp;
            tmp.insert(arr[i]);
            for (int j : s) {
                tmp.insert(j | arr[i]);
            }
            s = tmp;
            prev = cur;
        }
        return s.size();

=======

        unordered_set<int> s1, s2, s3;
        for (int i = 0; i < arr.size(); i++) {
            s1.insert(arr[i]);
            for (auto& x : s2) {
                s1.insert(x | arr[i]);
            }
            s2 = s1;
        }
        return s2.size();

=======

        unordered_set<int> result;
        unordered_set<int> cur;
        for(int i = 0; i < arr.size(); i++) {
            unordered_set<int> nxt;
            nxt.insert(arr[i]);
            for(int x : cur) {
                nxt.insert(x | arr[i]);
            }
            result.insert(nxt.begin(), nxt.end());
            cur.swap(nxt);
        }
        return result.size();
