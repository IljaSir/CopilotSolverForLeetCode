Synthesizing 10/10 solutions

=======

        long long left = 0, right = (long long)totalTrips * *max_element(time.begin(), time.end());
        while (left < right) {
            long long mid = left + (right - left) / 2;
            long long numTrips = 0;
            for (int t : time) {
                numTrips += mid / t;
                if (numTrips >= totalTrips) break;
            }
            if (numTrips >= totalTrips) right = mid;
            else left = mid + 1;
        }
        return left;

=======

        long long l = *max_element(time.begin(), time.end());
        long long r = 1LL * l * totalTrips;
        while (l < r) {
            long long m = l + (r - l) / 2;
            long long c = 0;
            for (auto t : time) {
                c += m / t;
            }
            if (c >= totalTrips) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;

=======

        long long l = 0, r = 1e15;
        while (l < r) {
            long long mid = l + (r - l) / 2;
            long long cnt = 0;
            for (int t : time) {
                cnt += mid / t;
                if (cnt >= totalTrips) break;
            }
            if (cnt >= totalTrips) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        long long l = 0, r = 1e14;
        while (l < r) {
            long long m = l + (r - l) / 2;
            long long cnt = 0;
            for (int t : time) {
                cnt += m / t;
            }
            if (cnt >= totalTrips) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;

=======

        long long lo = 0, hi = 1LL * totalTrips * *max_element(time.begin(), time.end());
        while (lo < hi) {
            long long mi = lo + (hi - lo) / 2;
            long long trips = 0;
            for (int t : time) {
                trips += mi / t;
                if (trips >= totalTrips) break;
            }
            if (trips >= totalTrips) hi = mi;
            else lo = mi + 1;
        }
        return lo;

=======

        long long l = 0, r = 1e14;
        while (l < r) {
            long long mid = (l + r) / 2;
            long long cnt = 0;
            for (int t : time) {
                cnt += mid / t;
            }
            if (cnt >= totalTrips) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        int n = time.size();
        long long l = 0, r = 1e15;
        while (l < r) {
            long long m = (l + r) >> 1;
            long long cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += m / time[i];
                if (cnt >= totalTrips) break;
            }
            if (cnt >= totalTrips) r = m;
            else l = m + 1;
        }
        return l;

=======

        long long l = 0, r = 1e18;
        while (l < r) {
            long long mid = (l + r) >> 1;
            if (check(time, mid) >= totalTrips) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    
    long long check(vector<int>& time, long long t) {
        long long ans = 0;
        for (auto& x: time) {
            ans += t / x;
        }
        return ans;

=======

        long long left = 0;
        long long right = 1e9;
        while (left < right) {
            long long mid = left + (right - left) / 2;
            long long total = 0;
            for (auto t : time) {
                total += mid / t;
            }
            if (total >= totalTrips) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int n = time.size();
        long long l = 0, r = 1e12, ans = 0;
        while(l <= r) {
            long long mid = (l + r) >> 1;
            long long cnt = 0;
            for(int i = 0; i < n; i++) {
                cnt += mid / time[i];
            }
            if(cnt >= totalTrips) {
                ans = mid;
                r = mid - 1;
            }
            else l = mid + 1;
        }
        return ans;
