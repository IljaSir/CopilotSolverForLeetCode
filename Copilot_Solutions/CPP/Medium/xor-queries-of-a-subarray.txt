Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> pre(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            pre[i] = pre[i-1] ^ arr[i-1];
        }
        vector<int> res;
        for (auto& q : queries) {
            res.push_back(pre[q[0]] ^ pre[q[1]+1]);
        }
        return res;

=======

        int n = arr.size();
        vector<int> pre(n);
        pre[0] = arr[0];
        for (int i = 1; i < n; ++i) pre[i] = pre[i-1] ^ arr[i];
        vector<int> ans;
        for (auto &q: queries) {
            int l = q[0], r = q[1];
            if (l == 0) ans.push_back(pre[r]);
            else ans.push_back(pre[r] ^ pre[l-1]);
        }
        return ans;

=======

        vector<int> ans;
        for (auto& q : queries) {
            int x = 0;
            for (int i = q[0]; i <= q[1]; ++i) {
                x ^= arr[i];
            }
            ans.push_back(x);
        }
        return ans;

=======

        vector<int> res;
        for (auto q : queries) {
            int x = arr[q[0]];
            for (int i = q[0] + 1; i <= q[1]; i++) {
                x ^= arr[i];
            }
            res.push_back(x);
        }
        return res;

=======

        vector<int> ans;
        ans.push_back(arr[0]);
        for (int i = 1; i < arr.size(); i++) {
            ans.push_back(ans[i - 1] ^ arr[i]);
        }
        for (auto& q: queries) {
            int l = q[0], r = q[1];
            if (l == 0) {
                ans.push_back(ans[r]);
            } else {
                ans.push_back(ans[r] ^ ans[l - 1]);
            }
        }
        return vector<int>(ans.end() - queries.size(), ans.end());

=======

        vector<int> result;
        for (auto& q : queries) {
            int x = 0;
            for (int i = q[0]; i <= q[1]; i++) {
                x ^= arr[i];
            }
            result.push_back(x);
        }
        return result;

=======

        vector<int> result;
        for (int i = 1; i < arr.size(); i++) {
            arr[i] ^= arr[i - 1];
        }
        for (auto q : queries) {
            if (q[0] == 0) {
                result.push_back(arr[q[1]]);
            } else {
                result.push_back(arr[q[1]] ^ arr[q[0] - 1]);
            }
        }
        return result;

=======

        vector<int> pre;
        for (int i = 0; i < arr.size(); i++) {
            if (i == 0) {
                pre.push_back(arr[i]);
            } else {
                pre.push_back(pre[i-1] ^ arr[i]);
            }
        }
        vector<int> res;
        for (int i = 0; i < queries.size(); i++) {
            int l = queries[i][0];
            int r = queries[i][1];
            if (l == 0) {
                res.push_back(pre[r]);
            } else {
                res.push_back(pre[r] ^ pre[l-1]);
            }
        }
        return res;

=======

        int n = arr.size();
        vector<int> ans;
        for (auto q: queries) {
            int x = 0;
            for (int i = q[0]; i <= q[1]; i++) {
                x ^= arr[i];
            }
            ans.push_back(x);
        }
        return ans;

=======

        vector<int> prefixXor;
        int xorVal = 0;
        for (auto &val: arr) {
            xorVal ^= val;
            prefixXor.push_back(xorVal);
        }
        
        vector<int> result;
        for (auto &query: queries) {
            int left = query[0];
            int right = query[1];
            
            if (left == 0) {
                result.push_back(prefixXor[right]);
            } else {
                result.push_back(prefixXor[right] ^ prefixXor[left - 1]);
            }
        }
        
        return result;
