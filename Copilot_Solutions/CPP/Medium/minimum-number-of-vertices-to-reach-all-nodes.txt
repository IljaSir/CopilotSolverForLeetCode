Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> in(n, 0);
        for (auto& e: edges) {
            in[e[1]]++;
        }
        vector<int> res;
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> indegrees(n, 0);
        for (auto& edge : edges) {
            indegrees[edge[1]]++;
        }
        vector<int> ret;
        for (int i = 0; i < n; ++i) {
            if (indegrees[i] == 0) {
                ret.push_back(i);
            }
        }
        return ret;

=======

        vector<int> res;
        vector<int> in(n, 0);
        for (auto& e : edges) {
            in[e[1]]++;
        }
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> inDegree(n, 0);
        for (auto &edge: edges) {
            inDegree[edge[1]]++;
        }
        vector<int> result;
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> result;
        vector<int> inDegree(n, 0);
        for (auto& edge: edges) {
            inDegree[edge[1]]++;
        }
        for (int i = 0; i < n; i++) {
            if (inDegree[i] == 0) {
                result.push_back(i);
            }
        }
        return result;

=======

        vector<int> res;
        vector<bool> visited(n, false);
        for (auto &e : edges) {
            visited[e[1]] = true;
        }
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) res.push_back(i);
        }
        return res;

=======

        vector<int> ret;
        vector<int> in(n, 0);
        for (auto& e : edges) {
            in[e[1]]++;
        }
        for (int i = 0; i < n; i++) {
            if (in[i] == 0) {
                ret.push_back(i);
            }
        }
        return ret;

=======

        vector<int> res;
        vector<int> inDegree(n, 0);
        for (auto edge: edges) {
            inDegree[edge[1]]++;
        }
        for (int i = 0; i < inDegree.size(); i++) {
            if (inDegree[i] == 0) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<vector<int>> g(n, vector<int>());
        vector<int> indegree(n, 0);
        for (auto& edge: edges) {
            g[edge[0]].push_back(edge[1]);
            indegree[edge[1]]++;
        }
        vector<int> res;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                res.push_back(i);
            }
        }
        return res;
