Synthesizing 6/10 solutions

=======

        stack<char> st;
        for (char c : s) {
            if (c == '*') {
                if (!st.empty() && st.top() != '*') st.pop();
            } else {
                st.push(c);
            }
        }
        string result;
        while (!st.empty()) {
            result = string(1, st.top()) + result;
            st.pop();
        }
        return result;

=======

        int n = s.size();
        stack<char> st;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '*') {
                while (!st.empty() && st.top() != '*') {
                    st.pop();
                }
                st.push('*');
            } else {
                st.push(s[i]);
            }
        }
        string res;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int n = s.size();
        stack<char> stk;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '*') {
                while (!stk.empty() && stk.top() == '*') stk.pop();
                if (!stk.empty()) stk.pop();
            } else {
                stk.push(s[i]);
            }
        }
        string res;
        while (!stk.empty()) {
            res.push_back(stk.top());
            stk.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        stack<char> st;
        for (auto c: s) {
            if (c == '*') {
                if (!st.empty() && st.top() != '*') st.pop();
            } else {
                st.push(c);
            }
        }
        string res;
        while (!st.empty()) {
            res.push_back(st.top());
            st.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        stack<char> st;
        for (auto c : s) {
            if (c == '*') {
                if (st.empty()) continue;
                st.pop();
            } else {
                st.push(c);
            }
        }
        string res;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        string res;
        for (char c : s)
            if (c == '*') {
                if (res.size()) res.pop_back();
            }
            else res.push_back(c);
        return res;
