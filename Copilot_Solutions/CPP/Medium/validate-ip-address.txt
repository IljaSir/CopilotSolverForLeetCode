Synthesizing 10/10 solutions

=======

        if (queryIP.find('.') != string::npos) {
            return validIPv4(queryIP) ? "IPv4" : "Neither";
        } else if (queryIP.find(':') != string::npos) {
            return validIPv6(queryIP) ? "IPv6" : "Neither";
        } else {
            return "Neither";
        }
    }
    bool validIPv4(string queryIP) {
        if (count(queryIP.begin(), queryIP.end(), '.') != 3) {
            return false;
        }
        for (int i = 0; i < queryIP.size(); ++i) {
            if (queryIP[i] == '.') {
                if (i == 0 || i == queryIP.size() - 1) {
                    return false;
                }
                string temp = queryIP.substr(0, i);
                queryIP = queryIP.substr(i + 1);
                i = -1;
                if (temp.size() > 3 || temp.size() == 0) {
                    return false;
                }
                for (int j = 0; j < temp.size(); ++j) {
                    if (!isdigit(temp[j])) {
                        return false;
                    }
                }
                if (temp.size() > 1 && temp[0] == '0') {
                    return false;
                }
                int x = stoi(temp);
                if (x < 0 || x > 255) {
                    return false;
                }
            }
        }
        if (queryIP.size() > 3 || queryIP.size() == 0) {
            return false;
        }
        for (int j = 0; j < queryIP.size(); ++j) {
            if (!isdigit(queryIP[j])) {
                return false;
            }
        }
        if (queryIP.size() > 1 && queryIP[0] == '0') {
            return false;
        }
        int x = stoi(queryIP);
        if (x < 0 || x > 255) {
            return false;
        }
        return true;
    }
    bool validIPv6(string queryIP) {
        if (count(queryIP.begin(), queryIP.end(), ':') != 7) {
            return false;
        }
        for (int i = 0; i < queryIP.size(); ++i) {
            if (queryIP[i] == ':') {
                if (

=======

        if (queryIP.find('.') != string::npos) {
            return validIPv4(queryIP) ? "IPv4" : "Neither";
        } else if (queryIP.find(':') != string::npos) {
            return validIPv6(queryIP) ? "IPv6" : "Neither";
        } else {
            return "Neither";
        }

=======

        if (queryIP.find('.') != string::npos) {
            return validIPv4(queryIP) ? "IPv4" : "Neither";
        }
        if (queryIP.find(':') != string::npos) {
            return validIPv6(queryIP) ? "IPv6" : "Neither";
        }
        return "Neither";
    }
    
    bool validIPv4(string IP) {
        if (count(IP.begin(), IP.end(), '.') != 3) {
            return false;
        }
        vector<string> nums = split(IP, '.');
        if (nums.size() != 4) {
            return false;
        }
        for (string num : nums) {
            if (num.empty() || num.size() > 3) {
                return false;
            }
            if (num.size() > 1 && num[0] == '0') {
                return false;
            }
            for (char c : num) {
                if (!isdigit(c)) {
                    return false;
                }
            }
            int n = stoi(num);
            if (n < 0 || n > 255) {
                return false;
            }
        }
        return true;
    }
    
    bool validIPv6(string IP) {
        if (count(IP.begin(), IP.end(), ':') != 7) {
            return false;
        }
        vector<string> nums = split(IP, ':');
        if (nums.size() != 8) {
            return false;
        }
        for (string num : nums) {
            if (num.empty() || num.size() > 4) {
                return false;
            }
            for (char c : num) {
                if (!(isdigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'))) {
                    return false;
                }
            }
        }
        return true;
    }
    
    vector<string> split(string s, char delim) {
        vector<string> res;
        stringstream ss(s);
        string token;
        while (getline(ss, token, delim)) {
            res.push_back(token);
        }
        return res;

=======

        if (queryIP.find(".") != string::npos) {
            return isValidIPv4(queryIP) ? "IPv4" : "Neither";
        } else if (queryIP.find(":") != string::npos) {
            return isValidIPv6(queryIP) ? "IPv6" : "Neither";
        } else {
            return "Neither";
        }

=======

        int n = queryIP.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (queryIP[i] == '.') {
                cnt++;
            }
        }
        if (cnt == 3) {
            return checkIPv4(queryIP);
        }
        cnt = 0;
        for (int i = 0; i < n; i++) {
            if (queryIP[i] == ':') {
                cnt++;
            }
        }
        if (cnt == 7) {
            return checkIPv6(queryIP);
        }
        return "Neither";
    }
    string checkIPv4(string queryIP) {
        int n = queryIP.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (queryIP[i] == '.') {
                cnt++;
            }
        }
        if (cnt != 3) {
            return "Neither";
        }
        string ip;
        stringstream ss(queryIP);
        while (getline(ss, ip, '.')) {
            if (ip.size() > 1 && ip[0] == '0') {
                return "Neither";
            }
            int num = 0;
            for (int i = 0; i < ip.size(); i++) {
                if (ip[i] < '0' || ip[i] > '9') {
                    return "Neither";
                }
                num = num * 10 + (ip[i] - '0');
            }
            if (num < 0 || num > 255) {
                return "Neither";
            }
        }
        return "IPv4";
    }
    string checkIPv6(string queryIP) {
        int n = queryIP.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (queryIP[i] == ':') {
                cnt++;
            }
        }
        if (cnt != 7) {
            return "Neither";
        }
        string ip;
        stringstream ss(queryIP);
        while (getline(ss, ip, ':')) {
            if (ip.size() > 4) {
                return "Neither";
            }
            for (int i = 0; i < ip.size(); i++) {
                if ((ip[i] >= '0' && ip[i] <=

=======

        int n = queryIP.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (queryIP[i] == '.') {
                cnt++;
            }
        }
        if (cnt == 3) {
            return validIPv4(queryIP);
        }
        cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (queryIP[i] == ':') {
                cnt++;
            }
        }
        if (cnt == 7) {
            return validIPv6(queryIP);
        }
        return "Neither";
    }
    string validIPv4(string queryIP) {
        int n = queryIP.size();
        int pos = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (queryIP[i] == '.') {
                cnt++;
                string tmp = queryIP.substr(pos, i - pos);
                if (!validIPv4Num(tmp)) {
                    return "Neither";
                }
                pos = i + 1;
            }
        }
        if (cnt != 3) {
            return "Neither";
        }
        string tmp = queryIP.substr(pos, n - pos);
        if (!validIPv4Num(tmp)) {
            return "Neither";
        }
        return "IPv4";
    }
    bool validIPv4Num(string s) {
        int n = s.size();
        if (n == 0 || n > 3) {
            return false;
        }
        if (n > 1 && s[0] == '0') {
            return false;
        }
        int num = 0;
        for (int i = 0; i < n; ++i) {
            if (!isdigit(s[i])) {
                return false;
            }
            num = num * 10 + s[i] - '0';
        }
        return num >= 0 && num <= 255;

=======

        int n = queryIP.size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            if(queryIP[i] == '.'){
                cnt++;
            }
        }
        if(cnt == 3){
            return validIPv4(queryIP) ? "IPv4" : "Neither";
        }
        cnt = 0;
        for(int i = 0; i < n; i++){
            if(queryIP[i] == ':'){
                cnt++;
            }
        }
        if(cnt == 7){
            return validIPv6(queryIP) ? "IPv6" : "Neither";
        }
        return "Neither";
    }
    bool validIPv4(string queryIP){
        int n = queryIP.size();
        int cnt = 0;
        string temp;
        for(int i = 0; i < n; i++){
            if(queryIP[i] == '.'){
                if(temp.size() == 0 || temp.size() > 3) return false;
                if(temp.size() > 1 && temp[0] == '0') return false;
                int num = 0;
                for(int j = 0; j < temp.size(); j++){
                    if(temp[j] >= '0' && temp[j] <= '9'){
                        num = num*10 + (temp[j] - '0');
                    }else{
                        return false;
                    }
                }
                if(num > 255) return false;
                temp = "";
            }else{
                temp += queryIP[i];
            }
        }
        if(temp.size() == 0 || temp.size() > 3) return false;
        if(temp.size() > 1 && temp[0] == '0') return false;
        int num = 0;
        for(int j = 0; j < temp.size(); j++){
            if(temp[j] >= '0' && temp[j] <= '9'){
                num = num*10 + (temp[j] - '0');
            }else{
                return false;
            }
        }
        if(num > 255) return false;
        return true;

=======

        if (queryIP.find(".") != std::string::npos) {
            if (queryIP.back() == '.') return "Neither";
            std::istringstream iss(queryIP);
            std::string token;
            int cnt = 0;
            while (std::getline(iss, token, '.')) {
                if (token.empty() || token.size() > 3) return "Neither";
                if (token.size() > 1 && token[0] == '0') return "Neither";
                for (auto c: token) {
                    if (!isdigit(c)) return "Neither";
                }
                int n = std::stoi(token);
                if (n < 0 || n > 255) return "Neither";
                ++cnt;
            }
            return cnt == 4? "IPv4": "Neither";
        } else if (queryIP.find(":") != std::string::npos) {
            if (queryIP.back() == ':') return "Neither";
            std::istringstream iss(queryIP);
            std::string token;
            int cnt = 0;
            while (std::getline(iss, token, ':')) {
                if (token.empty() || token.size() > 4) return "Neither";
                for (auto c: token) {
                    if (!isdigit(c) && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) return "Neither";
                }
                ++cnt;
            }
            return cnt == 8? "IPv6": "Neither";
        } else {
            return "Neither";
        }

=======

        if (queryIP.find(':') != string::npos) {
            // IPv6
            int cnt = 0;
            for (auto c : queryIP) {
                if (c == ':') {
                    cnt++;
                }
            }
            if (cnt != 7) {
                return "Neither";
            }
            istringstream iss(queryIP);
            string token;
            while (getline(iss, token, ':')) {
                if (token.size() > 4 || token.empty()) {
                    return "Neither";
                }
                for (auto c : token) {
                    if (!isdigit(c) && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F')) {
                        return "Neither";
                    }
                }
            }
            return "IPv6";
        } else {
            // IPv4
            int cnt = 0;
            for (auto c : queryIP) {
                if (c == '.') {
                    cnt++;
                }
            }
            if (cnt != 3) {
                return "Neither";
            }
            istringstream iss(queryIP);
            string token;
            while (getline(iss, token, '.')) {
                if (token.size() > 3 || token.empty()) {
                    return "Neither";
                }
                if (token.size() > 1 && token[0] == '0') {
                    return "Neither";
                }
                for (auto c : token) {
                    if (!isdigit(c)) {
                        return "Neither";
                    }
                }
                int num = stoi(token);
                if (num < 0 || num > 255) {
                    return "Neither";
                }
            }
            return "IPv4";
        }

=======

        if (queryIP.find('.') != string::npos) {
            if (queryIP.find(':') != string::npos) return "Neither";
            int cnt = 0, num = 0;
            for (int i = 0; i < queryIP.size(); i++) {
                if (queryIP[i] == '.') {
                    cnt++;
                    if (cnt > 3 || num < 0 || num > 255 || (queryIP[i-1] == '0' && i-1 >= 0 && queryIP[i-2] != '.')) return "Neither";
                    num = 0;
                } else if (queryIP[i] >= '0' && queryIP[i] <= '9') {
                    num = num * 10 + (queryIP[i] - '0');
                } else {
                    return "Neither";
                }
            }
            if (cnt != 3 || num < 0 || num > 255 || (queryIP[queryIP.size()-1] == '0' && queryIP[queryIP.size()-2] != '.')) return "Neither";
            return "IPv4";
        } else if (queryIP.find(':') != string::npos) {
            if (queryIP.find('.') != string::npos) return "Neither";
            int cnt = 0, num = 0;
            for (int i = 0; i < queryIP.size(); i++) {
                if (queryIP[i] == ':') {
                    cnt++;
                    if (cnt > 7 || num < 0 || num > 65535 || (queryIP[i-1] == '0' && i-1 >= 0 && queryIP[i-2] != ':')) return "Neither";
                    num = 0;
                } else if ((queryIP[i] >= '0' && queryIP[i] <= '9') || (queryIP[i] >= 'a' && queryIP[i] <= 'f') || (queryIP[i] >= 'A' && queryIP[i] <= 'F')) {
                    if (queryIP[i] >= '0' && queryIP[i] <= '9') num = num * 16 + (queryIP[i] - '0');
                    else if (queryIP[i] >= 'a' && queryIP[i] <= 'f') num = num * 16 + (queryIP[i
