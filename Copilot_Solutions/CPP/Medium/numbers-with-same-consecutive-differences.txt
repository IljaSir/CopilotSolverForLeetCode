Synthesizing 10/10 solutions

=======

        if (n == 1) return {0,1,2,3,4,5,6,7,8,9};
        vector<int> res;
        for (int i = 1; i < 10; i++) {
            dfs(res, i, n, k);
        }
        return res;
    }
    void dfs(vector<int> &res, int cur, int n, int k) {
        if (n == 0) {
            res.push_back(cur);
            return;
        }
        int last = cur % 10;
        if (last + k < 10) dfs(res, cur * 10 + last + k, n - 1, k);
        if (k > 0 && last - k >= 0) dfs(res, cur * 10 + last - k, n - 1, k);

=======

        if (n == 1) return {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        vector<int> ans;
        for (int i = 1; i < 10; i++) {
            dfs(i, n, k, ans);
        }
        return ans;
    }
    void dfs(int num, int n, int k, vector<int>& ans) {
        if (n == 0) {
            ans.push_back(num);
            return;
        }
        int last = num % 10;
        if (last + k < 10) dfs(num * 10 + last + k, n - 1, k, ans);
        if (last - k >= 0 && k) dfs(num * 10 + last - k, n - 1, k, ans);

=======

        vector<int> res;
        if (n == 1) {
            res.push_back(0);
        }
        for (int i = 1; i <= 9; i++) {
            dfs(i, n - 1, k, res);
        }
        return res;
    }
    void dfs(int num, int n, int k, vector<int>& res) {
        if (n == 0) {
            res.push_back(num);
            return;
        }
        int lastDigit = num % 10;
        if (lastDigit - k >= 0) {
            dfs(num * 10 + lastDigit - k, n - 1, k, res);
        }
        if (lastDigit + k <= 9 && k != 0) {
            dfs(num * 10 + lastDigit + k, n - 1, k, res);
        }

=======

        vector<int> ans;
        for (int i = 1; i <= 9; ++i) {
            dfs(i, n, k, ans);
        }
        if (n == 1) ans.push_back(0);
        return ans;
    }
    void dfs(int num, int n, int k, vector<int>& ans) {
        if (n == 0) {
            ans.push_back(num);
            return;
        }
        int last = num % 10;
        if (last + k <= 9) dfs(num * 10 + last + k, n - 1, k, ans);
        if (k != 0 && last - k >= 0) dfs(num * 10 + last - k, n - 1, k, ans);

=======

        vector<int> ans;
        if (n == 1) ans.push_back(0);
        for (int i = 1; i <= 9; i++) {
            dfs(i, n - 1, k, ans);
        }
        return ans;
    }
    void dfs(int cur, int n, int k, vector<int>& ans) {
        if (n == 0) {
            ans.push_back(cur);
            return;
        }
        int last = cur % 10;
        if (last + k <= 9) dfs(cur * 10 + last + k, n - 1, k, ans);
        if (last - k >= 0 && k != 0) dfs(cur * 10 + last - k, n - 1, k, ans);

=======

        vector<int> res;
        if (n == 1) {
            for (int i = 0; i <= 9; ++i) {
                res.push_back(i);
            }
        }
        else {
            for (int i = 1; i <= 9; ++i) {
                dfs(i, n, k, res);
            }
        }
        return res;

=======

        vector<int> res;
        int start = 1;
        if (n == 1) {
            res.push_back(0);
            start = 0;
        }
        for (int i = start; i < 10; i++) {
            dfs(i, n, k, res);
        }
        return res;
    }
    void dfs(int cur, int n, int k, vector<int>& res) {
        if (n == 0) {
            res.push_back(cur);
            return;
        }
        int last = cur % 10;
        if (last + k < 10) {
            dfs(cur*10+last+k, n-1, k, res);
        }
        if (k != 0 && last - k >= 0) {
            dfs(cur*10+last-k, n-1, k, res);
        }

=======

        vector<int> res;
        for (int i = 1; i < 10; i++) {
            dfs(res, n - 1, k, i);
        }
        if (n == 1) res.push_back(0);
        return res;
    }
    
    void dfs(vector<int>& res, int n, int k, int num) {
        if (n == 0) {
            res.push_back(num);
            return;
        }
        int tail = num % 10;
        int a = tail + k;
        int b = tail - k;
        if (a < 10) dfs(res, n - 1, k, num * 10 + a);
        if (b >= 0 && k != 0) dfs(res, n - 1, k, num * 10 + b);

=======

        vector<int> res;
        for (int i = (n > 1 ? 1 : 0); i <= 9; i++) {
            dfs(n - 1, k, i, res);
        }
        return res;
    }
    void dfs(int n, int k, int num, vector<int>& res) {
        if (n == 0) {
            res.push_back(num);
            return;
        }
        int last = num % 10;
        if (last - k >= 0) dfs(n - 1, k, num * 10 + last - k, res);
        if (last + k <= 9 && k != 0) dfs(n - 1, k, num * 10 + last + k, res);

=======

        vector<int> ans;
        for (int i = 1; i <= 9; i++) {
            queue<int> q;
            q.push(i);
            while (!q.empty()) {
                int x = q.front();
                q.pop();
                if (x < 10 && x >= 0 && x >= i - k && x <= i + k) {
                    if (x >= 10) {
                        ans.push_back(x);
                    } else if (n == 1) {
                        ans.push_back(x);
                    } else {
                        q.push(x * 10 + i - k);
                        q.push(x * 10 + i + k);
                    }
                }
            }
        }
        return ans;
