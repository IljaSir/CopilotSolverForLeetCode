Synthesizing 10/10 solutions

=======

        horizontalCuts.push_back(0);
        horizontalCuts.push_back(h);
        verticalCuts.push_back(0);
        verticalCuts.push_back(w);
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = 0, maxV = 0;
        for (int i = 1; i < horizontalCuts.size(); i++) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); i++) {
            maxV = max(maxV, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (long long)maxH * maxV % 1000000007;

=======

        horizontalCuts.push_back(0);
        horizontalCuts.push_back(h);
        verticalCuts.push_back(0);
        verticalCuts.push_back(w);
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = 0, maxW = 0;
        for(int i = 1; i < horizontalCuts.size(); ++i) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for(int i = 1; i < verticalCuts.size(); ++i) {
            maxW = max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (long)maxH * maxW % 1000000007;

=======

        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = max(horizontalCuts[0], h - horizontalCuts.back());
        int maxW = max(verticalCuts[0], w - verticalCuts.back());
        for (int i = 1; i < horizontalCuts.size(); i++) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); i++) {
            maxW = max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (long long)maxH * maxW % 1000000007;

=======

        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        
        int maxH = max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.size() - 1]);
        for (int i = 0; i < horizontalCuts.size() - 1; i++) {
            maxH = max(maxH, horizontalCuts[i + 1] - horizontalCuts[i]);
        }
        
        int maxV = max(verticalCuts[0], w - verticalCuts[verticalCuts.size() - 1]);
        for (int i = 0; i < verticalCuts.size() - 1; i++) {
            maxV = max(maxV, verticalCuts[i + 1] - verticalCuts[i]);
        }
        
        return (long long)maxH * maxV % 1000000007;

=======

        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        long long maxH = max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.size() - 1]);
        long long maxW = max(verticalCuts[0], w - verticalCuts[verticalCuts.size() - 1]);
        for (int i = 1; i < horizontalCuts.size(); i++) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); i++) {
            maxW = max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (maxH * maxW) % 1000000007;

=======

        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int hmax = max(horizontalCuts[0], h - horizontalCuts.back());
        int wmax = max(verticalCuts[0], w - verticalCuts.back());
        for (int i = 1; i < horizontalCuts.size(); ++i) {
            hmax = max(hmax, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); ++i) {
            wmax = max(wmax, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (long long)hmax * wmax % 1000000007;

=======

        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = horizontalCuts[0];
        int maxW = verticalCuts[0];
        for (int i = 1; i < horizontalCuts.size(); i++) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        maxH = max(maxH, h - horizontalCuts.back());
        for (int i = 1; i < verticalCuts.size(); i++) {
            maxW = max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        maxW = max(maxW, w - verticalCuts.back());
        return (long long)maxH * maxW % 1000000007;

=======

        int mod = 1e9 + 7;
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.size() - 1]);
        int maxV = max(verticalCuts[0], w - verticalCuts[verticalCuts.size() - 1]);
        for (int i = 1; i < horizontalCuts.size(); ++i) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); ++i) {
            maxV = max(maxV, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (long)maxH * maxV % mod;

=======

        const int MOD = 1000000007;
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        int maxH = max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.size() - 1]);
        int maxW = max(verticalCuts[0], w - verticalCuts[verticalCuts.size() - 1]);
        for (int i = 1; i < horizontalCuts.size(); i++) {
            maxH = max(maxH, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); i++) {
            maxW = max(maxW, verticalCuts[i] - verticalCuts[i - 1]);
        }
        long long ans = (long long)maxH * maxW;
        return ans % MOD;

=======

        long long int m = 1000000007;
        sort(horizontalCuts.begin(), horizontalCuts.end());
        sort(verticalCuts.begin(), verticalCuts.end());
        long long int hmax = max(horizontalCuts[0], h - horizontalCuts[horizontalCuts.size() - 1]);
        long long int wmax = max(verticalCuts[0], w - verticalCuts[verticalCuts.size() - 1]);
        for (int i = 1; i < horizontalCuts.size(); i++) {
            hmax = max(hmax, horizontalCuts[i] - horizontalCuts[i - 1]);
        }
        for (int i = 1; i < verticalCuts.size(); i++) {
            wmax = max(wmax, verticalCuts[i] - verticalCuts[i - 1]);
        }
        return (hmax * wmax) % m;
