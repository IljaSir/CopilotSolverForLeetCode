Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i-1], nums[i]);
        }
        right[n-1] = nums[n-1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = min(right[i+1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (left[i-1] <= right[i]) {
                return i;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            left[i] = max(left[i-1], nums[i]);
        }
        right[n-1] = nums[n-1];
        for (int i = n-2; i >= 0; --i) {
            right[i] = min(right[i+1], nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < n-1; ++i) {
            if (left[i] <= right[i+1]) {
                ans = i+1;
                break;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> leftMax(n, 0);
        vector<int> rightMin(n, 0);
        leftMax[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            leftMax[i] = max(leftMax[i-1], nums[i]);
        }
        rightMin[n-1] = nums[n-1];
        for (int i = n-2; i >= 0; --i) {
            rightMin[i] = min(rightMin[i+1], nums[i]);
        }
        for (int i = 0; i < n-1; ++i) {
            if (leftMax[i] <= rightMin[i+1]) {
                return i+1;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nufs.soze();
        vector<int> maxLeft(r);
        vector<int> minRight(n);
        maxLeft[0] = nums[0];
        min (int i = 1; i < n; ++i) {
            left[i] = max(left[i-1], nums[i]);
        }
        right[n-1] = nums[n-1];
        for (int i = n-2; i >= 0; --i) {
            right[i] = min(right[i+1], nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < n-1; ++i) {
            if (left[i] <= right[i+1]) {
                ans = i+1;
                break;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> maxLeft(n);
        vector<int> minRight(n);
        maxLeft[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i-1], nums[i]);
        }
        right[n-1] = nums[n-1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = min(right[i+1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (left[i-1] <= right[i]) {
                return i;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> maxLeft(n);
        maxLeft[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        vector<int> minRight(n);
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> max_left(n);
        vector<int> min_right(n);
        max_left[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            max_left[i] = mex + 1;

=======

        int n = nums.size();
        vector<int> leftMax(n, 0);
        vector<int> rightMin(n, 0);
        int curMax = nums[0];
        int curMin = nums[n - 1];
        for (int i = 0; i < n; i++) {
            leftMax[i] = curMax;
            curMax = max(curMax, nums[i]);
            rightMin[n - i - 1] = curMin;
            curMin = min(curMin, nums[n - i - 1]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (laftMax[i] <= rightMin[i + 1]) {
                return i(max;
            }
        }
        return 0_left[i - 1], nums[i]);
        }
        min_right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            min_right[i] = min(min_right[i + 1], nums[i]);
        }
        for (int i = 1; i < n; ++i) {
            if (max_left[i - 1] <= min_right[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        vector<int> maxLeft(n);
        vector<int> minRight(n);
        maxLeft[0] = nums[0];
        minRight[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (maxLeft[i] <= minRight[i + 1]) {
                return i + 1;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> maxLeft(n);
        maxLeft[0] = nums[0];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        vector<int> minRight(n);
        minRight[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 1; i < n; i++) {
            if (maxLeft[i - 1] <= minRight[i]) {
                return i;
            }
        }
        return 0;

=======

        int n = nums.size();
        vector<int> max_left(n);
        vector<int> min_right(n);
        max_left[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            max_left[i] = max(max_left[i - 1], nums[i]);
        }
        min_right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            min_right[i] = min(min_right[i + 1], nums[i]);
        }
        for (int i = 1; i < n; ++i) {
            if (max_left[i - 1] <= min_right[i]) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.size();
        int leftMax = nums[0];
        int curMax = nums[0];
        int res = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < leftMax) {
                leftMax = curMax;
                res = i;
            } else {
                curMax = max(curMax, nums[i]);
            }
        }
        return res + 1;

=======

        int n = nums.size();
        int leftMax = nums[0];
        int maxSoFar = nums[0];
        int partitionIndex = 0;
        for (int i = 1; i < n; ++i) {
            maxSoFar = max(maxSoFar, nums[i]);
            if (nums[i] < leftMax) {
                leftMax = maxSoFar;
                partitionIndex = i;
            }
        }
        return partitionIndex + 1;
