Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; i++) {
            dp[i] = dp[q.front()] + nums[i];
            while (!q.empty() && dp[i] > dp[q.back()]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return dp[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n);
        dp[0] = nums[0];
        deque<int> dq;
        dq.push_back(0);
        for (int i = 1; i < n; ++i) {
            while (dq.size() && dq.front() < i - k) {
                dq.pop_front();
            }
            dp[i] = dp[dq.front()] + nums[i];
            while (dq.size() && dp[dq.back()] <= dp[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        return dp[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; i++) {
            dp[i] = dp[q.front()] + nums[i];
            while (!q.empty() && dp[q.back()] < dp[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return dp[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; ++i) {
            dp[i] = nums[i] + dp[q.front()];
            while (!q.empty() && dp[q.back()] <= dp[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return dp[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; ++i) {
            dp[i] = dp[q.front()] + nums[i];
            while (!q.empty() && dp[q.back()] <= dp[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return dp[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[0] = nums[0];
        deque<int> dq;
        dq.push_back(0);
        for (int i = 1; i < n; i++) {
            while (!dq.empty() && dq.front() < i - k) dq.pop_front();
            dp[i] = dp[dq.front()] + nums[i];
            while (!dq.empty() && dp[dq.back()] < dp[i]) dq.pop_back();
            dq.push_back(i);
        }
        return dp[n - 1];

=======

        int n = nums.size();
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; ++i) {
            nums[i] += nums[q.front()];
            while (!q.empty() && nums[q.back()] < nums[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return nums[n - 1];

=======

        int n = nums.size();
        vector<int> dp(n, INT_MIN);
        dp[0] = nums[0];
        deque<int> q;
        q.push_back(0);
        for (int i = 1; i < n; ++i) {
            dp[i] = nums[i] + dp[q.front()];
            while (!q.empty() && dp[q.back()] <= dp[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (i - q.front() >= k) {
                q.pop_front();
            }
        }
        return dp[n - 1];

=======

        deque<int> q;
        int n = nums.size();
        q.push_back(0);
        for (int i = 1; i < n; i++) {
            nums[i] += nums[q.front()];
            while (!q.empty() && nums[q.back()] < nums[i]) {
                q.pop_back();
            }
            q.push_back(i);
            if (q.front() == i - k) {
                q.pop_front();
            }
        }
        return nums[n - 1];

=======

        int n = nums.size();
        deque<int> q;
        q.push_back(0);
        for (int i=1; i<n; i++) {
            nums[i] += nums[q.front()];
            while (!q.empty() && nums[q.back()] <= nums[i]) q.pop_back();
            q.push_back(i);
            if (q.front() == i-k) q.pop_front();
        }
        return nums[n-1];
