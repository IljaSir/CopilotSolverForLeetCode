Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> sum(n + 1);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> cnt(k);
        for (int i = 0; i <= n; ++i) {
            ++cnt[(sum[i] % k + k) % k];
        }
        int ans = 0;
        for (int i = 0; i < k; ++i) {
            ans += cnt[i] * (cnt[i] - 1) / 2;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int ans = 0;
        unordered_map<int, int> mp;
        mp[0] = 1;
        for (int i = 1; i <= n; i++) {
            int mod = (sum[i] % k + k) % k;
            ans += mp[mod];
            mp[mod]++;
        }
        return ans;

=======

        vector<int> sum(nums.size() + 1, 0);
        for (int i = 1; i < sum.size(); i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        vector<int> count(k, 0);
        for (int i = 0; i < sum.size(); i++) {
            count[(sum[i] % k + k) % k]++;
        }
        int res = 0;
        for (int i = 0; i < count.size(); i++) {
            res += count[i] * (count[i] - 1) / 2;
        }
        return res;

=======

        int n = nums.size();
        vector<int> preSum(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            preSum[i] = preSum[i - 1] + nums[i - 1];
        }
        
        unordered_map<int, int> cnt;
        cnt[0] = 1;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int sum = preSum[i + 1];
            int mod = sum % k;
            if (mod < 0) mod += k;
            ans += cnt[mod];
            cnt[mod]++;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1);
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        unordered_map<int, int> m;
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            int mod = (sum[i] % k + k) % k;
            if (m.count(mod)) {
                ans += m[mod];
            }
            m[mod]++;
        }
        return ans;

=======

        int result = 0;
        int sum = 0;
        unordered_map<int, int> map;
        map[0] = 1;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            int mod = (sum % k + k) % k;
            if (map.find(mod) != map.end()) {
                result += map[mod];
                map[mod]++;
            } else {
                map[mod] = 1;
            }
        }
        return result;

=======

        unordered_map<int,int> m;
        m[0] = 1;
        int sum = 0;
        int ans = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            int mod = sum % k;
            if(mod < 0) mod += k;
            ans += m[mod];
            m[mod]++;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<int> cnt(k, 0);
        cnt[0] = 1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            int m = sum % k;
            if (m < 0) m += k;
            res += cnt[m];
            cnt[m]++;
        }
        return res;

=======

        int n = nums.size();
        vector<int> prefix(n, 0);
        prefix[0] = nums[0];
        for(int i = 1; i < n; ++i) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        unordered_map<int, int> m;
        m[0] = 1;
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            int mod = prefix[i] % k;
            if(mod < 0) mod += k;
            ans += m[mod];
            ++m[mod];
        }
        return ans;

=======

        int sum = 0;
        unordered_map<int, int> m;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            int mod = (sum % k + k) % k;
            count += m[mod];
            m[mod]++;
            if (sum % k == 0) {
                count++;
            }
        }
        return count;
