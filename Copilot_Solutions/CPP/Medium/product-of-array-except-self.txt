Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> res(n, 1);
        for (int i = 1; i < n; ++i) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = n - 1; i >= 0; --i) {
            res[i] *= right;
            right *= nums[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n, 1);
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] *= right;
            right *= nums[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n);
        ans[0] = 1;
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] *= right;
            right *= nums[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);
        vector<int> ans(n, 1);
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = left[i] * right[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);
        vector<int> res(n, 1);
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        for (int i = 0; i < n; i++) {
            res[i] = left[i] * right[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);
        vector<int> res(n, 1);
        for (int i = 1; i < n; ++i) {
            left[i] = left[i - 1] * nums[i - 1];
        }
        for (int i = n - 2; i >= 0; --i) {
            right[i] = right[i + 1] * nums[i + 1];
        }
        for (int i = 0; i < n; ++i) {
            res[i] = left[i] * right[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> left(n, 1);
        vector<int> right(n, 1);
        for(int i = 1; i < n; i++) {
            left[i] = left[i-1] * nums[i-1];
        }
        for(int i = n - 2; i >= 0; i--) {
            right[i] = right[i+1] * nums[i+1];
        }
        vector<int> ans(n);
        for(int i = 0; i < n; i++) {
            ans[i] = left[i] * right[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> result(n, 1);
        int left = 1;
        int right = 1;
        for (int i = 0; i < n; i++) {
            result[i] *= left;
            left *= nums[i];
            result[n - i - 1] *= right;
            right *= nums[n - i - 1];
        }
        return result;

=======

        vector<int> result(nums.size(), 1);
        int left = 1;
        int right = 1;
        for (int i = 0; i < nums.size(); i++) {
            result[i] *= left;
            left *= nums[i];
            result[nums.size() - 1 - i] *= right;
            right *= nums[nums.size() - 1 - i];
        }
        return result;
