Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = s.size() - 1;
        while (i < j && s[i] == s[j]) {
            char c = s[i];
            while (i <= j && s[i] == c) i++;
            while (i <= j && s[j] == c) j--;
        }
        return j - i + 1;

=======

        int i = 0, j = s.size() - 1;
        while (i < j && s[i] == s[j]) {
            char c = s[i];
            while (i <= j && s[i] == c) ++i;
            while (i <= j && s[j] == c) --j;
        }
        return j - i + 1;

=======

        int l = 0, r = s.size() - 1;
        while (l < r && s[l] == s[r]) {
            char c = s[l];
            while (l <= r && s[l] == c) ++l;
            while (l <= r && s[r] == c) --r;
        }
        return r - l + 1;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j && s[i] == s[j]) {
            char c = s[i];
            while (i < s.size() && s[i] == c) {
                ++i;
            }
            while (j >= 0 && s[j] == c) {
                --j;
            }
        }
        return j - i + 1;

=======

        int n = s.size();
        int i = 0, j = n - 1;
        while (i < j && s[i] == s[j]) {
            char c = s[i];
            while (i < j && s[i] == c) i++;
            while (i < j && s[j] == c) j--;
        }
        return j - i + 1;

=======

        int i=0,j=s.length()-1;
        while(i<j && s[i]==s[j]){
            char ch=s[i];
            while(i<=j && s[i]==ch) i++;
            while(i<=j && s[j]==ch) j--;
        }
        return j-i+1;

=======

        int i=0;
        int j=s.size()-1;
        while(i<j){
            if(s[i]!=s[j]) break;
            char c=s[i];
            while(i<=j && s[i]==c) i++;
            while(i<=j && s[j]==c) j--;
        }
        return j-i+1;
