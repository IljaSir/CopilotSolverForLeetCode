Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int cols = encodedText.size() / rows;
        string result;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                int index = j * cols + i;
                if (j % 2 == 0) {
                    if (i % 2 == 0) {
                        result += encodedText[index];
                    } else {
                        int index = j * cols + cols - i;
                        result += encodedText[index];
                    }
                } else {
                    if (i % 2 == 0) {
                        int index = j * cols + cols - i;
                        result += encodedText[index];
                    } else {
                        result += encodedText[index];
                    }
                }
            }
        }
        return result;

=======

        int n = encodedText.size();
        int cols = n / rows;
        string res = "";
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                int index = j * cols + i;
                if (index < n) {
                    res += encodedText[index];
                }
            }
        }
        return res;

=======

        int n = encodedText.size();
        int col = (n - rows) / (rows - 1) + 1;
        vector<string> matrix(rows, string(col, ' '));
        int i = 0, j = 0;
        for (char ch : encodedText) {
            matrix[i][j] = ch;
            if (i == 0) {
                j++;
            }
            if (i == rows - 1) {
                j++;
            }
            if (0 < i && i < rows - 1) {
                i += (j % 2 ? -1 : 1);
            } else {
                i += (j % 2 ? 1 : -1);
            }
        }
        string ans;
        i = 0, j = 0;
        for (int k = 0; k < n; ++k) {
            ans += matrix[i][j];
            if (i == 0) {
                j++;
            }
            if (i == rows - 1) {
                j++;
            }
            if (0 < i && i < rows - 1) {
                i += (j % 2 ? -1 : 1);
            } else {
                i += (j % 2 ? 1 : -1);
            }
        }
        return ans;

=======

        int n = encodedText.size();
        int cols = n / rows;
        vector<vector<char>> m(rows, vector<char>(cols, ' '));
        int i = 0, j = 0;
        int k = 0;
        while (k < n) {
            while (i < rows && k < n) {
                m[i++][j] = encodedText[k++];
            }
            i -= 2;
            j++;
            while (i >= 0 && k < n) {
                m[i--][j++] = encodedText[k++];
            }
            i += 2;
        }
        string ans;
        for (i = 0; i < rows; i++) {
            for (j = 0; j < cols; j++) {
                if (m[i][j] != ' ')
                    ans += m[i][j];
            }
        }
        return ans;

=======

        int c = encodedText.size() / rows;
        vector<vector<char>> matrix(rows, vector<char>(c));
        int i = 0, j = 0;
        for (char ch : encodedText) {
            if (ch == ' ') continue;
            matrix[i][j] = ch;
            if (i == 0 || i == rows - 1) {
                j++;
            }
            if (i == 0) {
                i++;
            } else if (i == rows - 1) {
                i--;
            } else {
                i++;
                j++;
            }
        }
        string originalText;
        i = 0, j = 0;
        for (int k = 0; k < encodedText.size(); k++) {
            if (matrix[i][j] != ' ') {
                originalText.push_back(matrix[i][j]);
            }
            if (i == 0 || i == rows - 1) {
                j++;
            }
            if (i == 0) {
                i++;
            } else if (i == rows - 1) {
                i--;
            } else {
                i++;
                j++;
            }
        }
        return originalText;

=======

        string result;
        int n = encodedText.size();
        int columns = n / rows;
        int index = 0;
        for(int i = 0; i < columns; i++){
            if(i % 2 == 0){
                for(int j = 0; j < rows; j++){
                    result += encodedText[index++];
                }
            }else{
                for(int j = 0; j < rows - 1; j++){
                    result += ' ';
                }
                result += encodedText[index++];
                for(int j = 0; j < rows - 1; j++){
                    result += ' ';
                }
            }
        }
        return result;

=======

        string result;
        int n = encodedText.size();
        if (n == 0) return result;
        int cols = n / rows;
        int i = 0, j = 0;
        int k = 0;
        vector<vector<char>> matrix(rows, vector<char>(cols, ' '));
        while (k < n) {
            while (i < rows) {
                matrix[i][j] = encodedText[k];
                k++;
                i++;
            }
            i -= 2;
            j++;
            while (i > 0) {
                matrix[i][j] = encodedText[k];
                k++;
                i--;
                j++;
            }
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] != ' ') {
                    result += matrix[i][j];
                }
            }
        }
        return result;

=======

        int n = encodedText.size();
        if (rows == 1) return encodedText;
        int cols = (n+rows-2)/(rows-1);
        int m = cols * rows;
        vector<vector<char>> a(rows, vector<char>(cols, ' '));
        int i = 0, j = 0;
        for (int k = 0; k < n; ++k) {
            a[i][j] = encodedText[k];
            if ((i+j)%2 == 0) {
                if (i < rows-1) ++i;
                else ++j;
            } else {
                if (i > 0) --i;
                else ++j;
            }
        }
        string ans;
        for (int k = 0; k < m; ++k) {
            i = k / cols;
            j = k % cols;
            if (a[i][j] != ' ') ans.push_back(a[i][j]);
        }
        return ans;

=======

        int n = encodedText.size();
        int cols = n / rows;
        int total = rows * cols;
        int rem = n - total;
        int c = 0;
        string res;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (i % 2 == 0) {
                    res += encodedText[c++];
                } else {
                    if (j == rows - 1) {
                        res += encodedText[c++];
                    } else {
                        res += ' ';
                    }
                }
            }
        }
        int i = 0;
        while (rem > 0) {
            res += encodedText[total + i];
            i += rows - 1;
            rem--;
        }
        return res;
