Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end(), [](const string& a, const string& b) {
            if (a.size() == b.size()) {
                return a > b;
            }
            return a.size() > b.size();
        });
        return nums[k - 1];

=======

        sort(nums.begin(), nums.end(), [](const string& a, const string& b) {
            if (a.size() != b.size()) {
                return a.size() > b.size();
            }
            return a > b;
        });
        return nums[k - 1];

=======

        sort(nums.begin(), nums.end(), [](string& a, string& b) {
            if (a.size() == b.size()) {
                return a > b;
            }
            return a.size() > b.size();
        });
        return nums[k - 1];

=======

        sort(nums.begin(), nums.end(), [](string a, string b) {
            if (a.size() == b.size()) {
                return a < b;
            }
            return a.size() < b.size();
        });
        return nums[nums.size() - k];

=======

        sort(nums.begin(), nums.end(), [](const string& a, const string& b) {
            if (a.length() != b.length()) {
                return a.length() < b.length();
            }
            return a < b;
        });
        return nums[nums.size() - k];

=======

        sort(nums.begin(), nums.end(), [](string& s1, string& s2) {
            if (s1.size() != s2.size()) {
                return s1.size() > s2.size();
            }
            return s1 > s2;
        });
        
        return nums[k-1];

=======

        sort(nums.begin(), nums.end(), [](string& a, string& b) {
            if (a.size() == b.size()) return a > b;
            return a.size() > b.size();
        });
        return nums[k-1];

=======

        sort(nums.begin(), nums.end(), [](const string& a, const string& b) {
            if (a.size() != b.size())
                return a.size() < b.size();
            return a < b;
        });
        return nums[nums.size() - k];

=======

        int n = nums.size();
        sort(nums.begin(), nums.end(), [](string& a, string& b) {
            if (a.size() == b.size()) return a < b;
            return a.size() < b.size();
        });
        return nums[n - k];
