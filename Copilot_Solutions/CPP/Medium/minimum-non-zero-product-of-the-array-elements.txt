Synthesizing 10/10 solutions

=======

        long long n = (1LL << p) - 1;
        long long m = (1LL << (p - 1)) - 1;
        long long ans = (n - 1) % 1000000007;
        ans = (ans * inv(n - m, 1000000007)) % 1000000007;
        return ans;

=======

        long long ans = 1;
        for (int i = 1; i < p; ++i) {
            ans = ans * 2 % 1000000007;
        }
        return (ans - 1) * pow(ans - 2, (1 << p) - 2) % 1000000007;

=======

        long long res = (1LL << p) - 1;
        long long mod = 1e9 + 7;
        long long a = (1LL << (p - 1)) - 1;
        long long b = (1LL << (p - 1));
        long long c = (a * b) % mod;
        return (res * pow(c, res - 1, mod)) % mod;
    }
    long long pow(long long a, long long b, long long mod) {
        long long res = 1;
        while (b) {
            if (b & 1) res = res * a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;

=======

        long long n = (1LL << p) - 1;
        long long m = (1LL << (p - 1)) - 1;
        long long res = (n - 1) % 1000000007;
        long long base = n - 1;
        while (m) {
            if (m & 1) res = res * base % 1000000007;
            base = base * base % 1000000007;
            m >>= 1;
        }
        return res;

=======

        long long n = (1LL << p) - 1;
        long long m = (1LL << (p - 1)) - 1;
        return (n * pow(n - 1, m, 1000000007)) % 1000000007;

=======

        long long m = (1LL << p) - 1;
        long long n = (1LL << (p - 1)) - 1;
        return (m - 1) * powmod(n, m - 1, 1000000007) % 1000000007;
    }
    
    long long powmod(long long a, long long n, long long mod) {
        if (n == 0) return 1;
        if (n == 1) return a;
        if (n % 2 == 0) {
            long long x = powmod(a, n / 2, mod);
            return x * x % mod;
        } else {
            long long x = powmod(a, n - 1, mod);
            return x * a % mod;
        }

=======

        long long ans = 1;
        for (int i = 0; i < p; ++i) {
            ans *= 2;
        }
        ans -= 1;
        long long half = (ans - 1) / 2;
        long long mod = 1e9 + 7;
        long long ans2 = powmod(half, ans - 2, mod);
        return (ans - 1) * ans2 % mod;

=======

        long long n = 1LL << p;
        long long res = (n - 1) * (n / 2) % 1000000007;
        return res;

=======

        long long n = (1LL << p) - 1;
        long long ans = (n - 1) % 1000000007;
        long long tmp = n - 2;
        long long base = (n - 1) % 1000000007;
        while (tmp) {
            if (tmp & 1) {
                ans = ans * base % 1000000007;
            }
            base = base * base % 1000000007;
            tmp >>= 1;
        }
        return ans;

=======

        long long ans = 1;
        long long n = (1LL << p);
        long long m = (1LL << (p - 1)) - 1;
        ans = (n - 1) % 1000000007;
        ans = (ans * power(n - 2, m)) % 1000000007;
        return (int)ans;
    }
    long long power(long long x, long long y) {
        long long res = 1;
        x = x % 1000000007;
        while (y > 0) {
            if (y & 1)
                res = (res * x) % 1000000007;
            y = y >> 1;
            x = (x * x) % 1000000007;
        }
        return res;
