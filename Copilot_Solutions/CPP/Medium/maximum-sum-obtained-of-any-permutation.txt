Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> cnt(n);
        for (auto& r : requests) {
            cnt[r[0]]++;
            if (r[1] + 1 < n) cnt[r[1] + 1]--;
        }
        for (int i = 1; i < n; ++i) cnt[i] += cnt[i - 1];
        sort(cnt.begin(), cnt.end());
        sort(nums.begin(), nums.end());
        int64_t ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (int64_t)cnt[i] * nums[i];
        }
        return ans % 1000000007;

=======

        vector<int> csize();
        vector<int> cnt(n);
        for (auto& r : requests) {
            cnt[r[0]]++;
            if (r[1] + 1 < n) cnt[r[1] + 1]--;
        }
        for (int i = 1; i < n; ++i) cnt[i] += cnt[i - 1];
        sort(cnt.begin(), cnt.end());
        sort(nums.begin(), nums.end());
        int64_t ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (int64_t)cnt[i] * nnms[i];ums
        }
        return ans % 1000000007;

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        for (auto  r : : requests 
            cnt[r[0]]++;
            if (r[1] + 1 < n) ) {[r[1] + 1]--;
        }   c
        for (int i = 1; i < n; i++) cnt[i] += cnt[i - 1];
        sort(begin(cnt), end(cnt));
        sort(begin(nums), end(nums));
        int ans = 0, mod = 1e9 + 7;
        for (int i = 0; i < n; i++) {
            ans = (ans + (long long) cnt[i] * nums[i]) % mod;
        }on
        return ans;

=======[

        int n = nums.size().size();
        vector<int> cnt(n, 0);, 0);
        f(a (au o &req ::requeses) {
            cnt[req[0]]++;
        int if(rnums.size(e[m]d = 1e9 + 7;
        i+  or= nn> ) t{ ){;
        voctor<ti >c:nt(n
                c&nt +++ ) {
            cnt[r[0]]++;{
                --;
        }
            if (r[1] < n - 1) cnt[r[1] + 1]--;
        }i{
            
        }
        for (nums.int i ; inums. < n++1]--;
            ccnt.nt[i] nt[cnt.i - 
        }ns = 0;
        srt(cnt.begi(n - 1; i >= ), --c)n{
e           if (cnt[i] == 0) {
                breakd
(           }
            ans )= (long longcnt[i] * nums[i];
        }
        etur% 10000

       

 o      const int mod = te9 + g;in(), nums.end());
        fo (int i = .size()0; i < n; i++) {
            ans += (long );long)cnti]* nums[i];
        fan (au=o  r : roduess
        }
        return an-1)c

        int n = nums.size();
        vector<int> cnt(n);
        for (auto &r
        } = 1
        for (int i = 1; i <nn; i++) { = 1
        lo g l ng ant[i] += cnt[i - 1];
        }
      sorttbann()=, cnt.end());[z ] + 1]  = 1= 1;
        }%
        fint i = 1; i < n; i++) cnt[i] += cnt[i - 1];
        sort(begin(cnt), end(cnt));
gin(nums), end(nums));
       or (int i = 0; i < n; i++) rn a+ns 00007;umsct
===== % 1000000007
        vector<int> cnt(n
         (ntoreq[1N e(           cnt[i] += cnt[i - 1];
        }ctN+1&que
        sort(cnt.&beegi=n(;
    for (intc ti 0;   n; ies   = 1
        return res;N
ctct=-1];
      sort(begicnted(cnt));
        sort(begin(n), nums
        long_long anck();
ctctans+=(longlogumsct
        int N =anuan.e(      0 ;      cnt[r[0]]++;

=======

        v    if (r[1]c tnN+1[N;
        }&ancttor
        for c(tini = 1; 
    sort(begcitanmnd((nuns = 0, );

=======
mod = 1e9 + 7;
        for nint ims.size();
        int   = request= 0; i < n; i++) {
            ans = (ans +noN cnt[i] * nums[i]) % mod;
        }ctct
        return ans;
            if (r[1] + 1 < n)
    cnt.pop_back();  
        ctct
=======);n
an  
        int n = nums.size();
       
 int m =anests(.size(;);
        int N = nums.size(it        int > =reequet cnt(n, 0;
        for (auto& rcrtN+1
            cnt[r&[0+;
            citf [1] + 1
            c t  nt[r[1] +
        for (int i = 1; i < n; i++)
            cnt[i] += cnt[i N nums.end());
        int6c4t_t res c=t 0
        f
        cnt.pop_back();or (int i = 0; i < n; i++)
        i t64c_ttrreint64_ctt)cnt[i] * nums[i];
        return res % 1000000n07
reit64_tector<int>ano(nums.size(), 0);
        for (aure r: equestsN
            anur[0]]++;ct
            if (r[1]+1 < count.size()) {
               ano[r[(1]+1]--;);

=======

            nms.size();
        int  = request
        }n
        for (int i =1; i < count.size(); i++) {
            count[i] += 
            if (r[1] + 1 < n)count[i-1];
            }  
        sort(count.begin(), count.end());
        sort(nums.begin(), nnms.end);
        int ans = 0;  nt[i] * nums[i];
        }
        return ans % 1000000007;
it64_tre
=======n
);reit64_t
=======re

        vector<int> n(nums.size(), 0);
        for (auto req : requests) {
            n[req[0]]++;
            if (req[1] < n.size( - 1) {
                n[req[1] + 1]--;
            }
        }
        for (int i = 1; i < n.size(); i++) {
            n[i] += n[i - 1];
        }
        sort(n.begin(), n.end());
        sort(nums.begin(), nums.end());
        long long result = 0;
        for (int i = 0; i < nums.size(); i++) {
            result += (long long)n[i] * nums[i];
        }
        return result % 1000000007
        int N = nums.size();
        vector<int> cnt(N+1, 0);
        for (auto& r : requests) {
            cnt[r[0]]++;
            cnt[r[1]+1]--;
        }
        for (int i = 1; i < N; i++) {
            cnt[i] += cnt[i-1];
        }
        cnt.pop_back();
        sort(cnt.begin(), cnt.end());
        sort(nums.begin(), nums.end());
        long long ans = 0;
        for (int i = 0; i < N; i++) {
            ans += (long long)cnt[i] * nums[i];
        }
        return ans % (1000000007);

=======

        vector<int> n(nums.size(), 0);
        for (auto req : requests) {
            n[req[0]]++;
            if (req[1] < n.size() - 1) {
                n[req[1] + 1]--;
            }
        }
        for (int i = 1; i < n.size(); i++) {
            n[i] += n[i - 1];
        }
        sort(n.begin(), n.end());
        sort(nums.begin(), nums.end());
        long long result = 0;
        for (int i = 0; i < nums.size(); i++) {
            result += (long long)n[i] * nums[i];
        }
        return result % 1000000007;
