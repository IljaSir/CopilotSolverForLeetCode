Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = isConnected.size();
        vector<int> visited(n, 0);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                dfs(isConnected, visited, i);
                count++;
            }
        }
        return count;
    }
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int i) {
        for (int j = 0; j < isConnected.size(); j++) {
            if (isConnected[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(isConnected, visited, j);
            }
        }

=======

        int n = isConnected.size();
        vector<int> visited(n, 0);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (visited[i] == 0) {
                dfs(isConnected, visited, i);
                res++;
            }
        }
        return res;
    }
    
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int i) {
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(isConnected, visited, j);
            }
        }

=======

        int n = isConnected.size();
        vector<int> visited(n, 0);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (visited[i] == 0) {
                dfs(isConnected, visited, i);
                ++res;
            }
        }
        return res;
    }
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int i) {
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[i][j] == 1 && visited[j] == 0) {
                visited[j] = 1;
                dfs(isConnected, visited, j);
            }
        }

=======

        int n = isConnected.size();
        vector<bool> visited(n, false);
        int count = 0;
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                ++count;
                dfs(isConnected, visited, i);
            }
        }
        return count;
    }
    void dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i) {
        visited[i] = true;
        for (int j = 0; j < isConnected.size(); ++j) {
            if (!visited[j] && isConnected[i][j] == 1) {
                dfs(isConnected, visited, j);
            }
        }

=======

        int n = isConnected.size();
        int count = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                dfs(isConnected, visited, i);
                ++count;
            }
        }
        return count;

=======

        int n = isConnected.size();
        int ans = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                dfs(isConnected, visited, i);
                ans++;
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i) {
        visited[i] = true;
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[i][j] == 1 && !visited[j]) {
                dfs(isConnected, visited, j);
            }
        }

=======

        int n = isConnected.size();
        vector<int> visited(n, 0);
        queue<int> q;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                q.push(i);
                while (!q.empty()) {
                    int cur = q.front();
                    q.pop();
                    visited[cur] = 1;
                    for (int j = 0; j < n; j++) {
                        if (isConnected[cur][j] && !visited[j]) {
                            q.push(j);
                        }
                    }
                }
                ans++;
            }
        }
        return ans;

=======

        const int n = isConnected.size();
        vector<int> visited(n, 0);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (visited[i] == 0) {
                dfs(isConnected, visited, i);
                ++res;
            }
        }
        return res;
    }
    
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int i) {
        const int n = isConnected.size();
        visited[i] = 1;
        for (int j = 0; j < n; ++j) {
            if (isConnected[i][j] == 1 && visited[j] == 0) {
                dfs(isConnected, visited, j);
            }
        }
