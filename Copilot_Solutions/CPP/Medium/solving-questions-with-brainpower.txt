Synthesizing 9/10 solutions

=======

        sort(questions.begin(), questions.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] - a[1] > b[0] - b[1];
        });
        long long res = 0, sum = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        for (auto& q : questions) {
            sum += q[1];
            pq.push(q[1]);
            if (sum > q[0]) {
                sum -= pq.top();
                pq.pop();
            }
            res = max(res, sum);
        }
        return res;

=======

        sort(questions.begin(), questions.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[0] - a[1] > b[0] - b[1];
        });
        int n = questions.size();
        long long ans = 0, sum = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < n; i++) {
            int points = questions[i][0], brainpower = questions[i][1];
            sum += points;
            pq.push(points);
            if (pq.size() > brainpower) {
                sum -= pq.top();
                pq.pop();
            }
            ans = max(ans, sum);
        }
        return ans;

=======

        sort(questions.begin(), questions.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[1] + a[0] > b[1] + b[0];
        });
        long long res = 0;
        priority_queue<int> pq;
        for (const auto &q : questions) {
            pq.push(q[0]);
            res += q[0];
            if (pq.size() > q[1]) {
                res -= pq.top();
                pq.pop();
            }
        }
        return res;

=======

        sort(questions.begin(), questions.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] + a[0] > b[1] + b[0];
        });
        long long res = 0, cur = 0;
        priority_queue<int> q;
        for (auto& qn : questions) {
            cur += qn[0];
            q.push(qn[0]);
            if (q.size() > qn[1]) {
                cur -= q.top();
                q.pop();
            }
            res = max(res, cur);
        }
        return res;

=======

        sort(questions.begin(), questions.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] + a[0] > b[1] + b[0];
        });
        long long res = 0, cur = 0;
        priority_queue<int> pq;
        for (auto& q : questions) {
            cur += q[0];
            pq.push(q[0]);
            if (pq.size() > q[1]) {
                cur -= pq.top();
                pq.pop();
            }
            res = max(res, cur);
        }
        return res;

=======

        sort(questions.begin(), questions.end(), [](auto& a, auto& b) {
            return a[1] + a[0] > b[1] + b[0];
        });
        long long ans = 0, cur = 0;
        priority_queue<int> pq;
        for (auto& q : questions) {
            pq.push(q[0]);
            cur += q[0];
            if (pq.size() > q[1]) {
                cur -= pq.top();
                pq.pop();
            }
            ans = max(ans, cur);
        }
        return ans;

=======

        int n = questions.size();
        vector<vector<long long>> dp(n, vector<long long>(n, 0));
        dp[0][0] = 0;
        dp[0][1] = questions[0][0];
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j <= i + 1; ++j) {
                if (j == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + questions[i][0]);
                    if (j > questions[i][1]) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j - questions[i][1] - 1]);
                    }
                }
            }
        }
        long long res = 0;
        for (int i = 0; i <= n; ++i) {
            res = max(res, dp[n - 1][i]);
        }
        return res;

=======

        vector<long long> dp(questions.size() + 1);
        sort(questions.begin(), questions.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] + a[0] > b[1] + b[0];
        });
        for (int i = 0; i < questions.size(); ++i) {
            dp[i + 1] = max(dp[i + 1], dp[i]);
            if (i + questions[i][1] + 1 <= questions.size()) {
                dp[i + questions[i][1] + 1] = max(dp[i + questions[i][1] + 1], dp[i] + questions[i][0]);
            }
        }
        return dp.back();

=======

        sort(questions.begin(), questions.end(), [](auto& a, auto& b) {return a[1] < b[1];});
        priority_queue<int> pq;
        long long ans = 0, sum = 0;
        for (auto& q : questions) {
            sum += q[0];
            pq.push(q[0]);
            if (pq.size() > q[1]) {
                sum -= pq.top();
                pq.pop();
            }
            ans = max(ans, sum);
        }
        return ans;
