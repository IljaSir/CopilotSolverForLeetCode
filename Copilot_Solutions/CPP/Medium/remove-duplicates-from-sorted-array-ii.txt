Synthesizing 10/10 solutions

=======

        int i = 0;
        for (int n : nums)
            if (i < 2 || n > nums[i-2])
                nums[i++] = n;
        return i;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int i = 2;
        for (int j = 2; j < n; j++) {
            if (nums[j] != nums[i - 2]) {
                nums[i++] = nums[j];
            }
        }
        return i;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int i = 1, j = 1;
        int count = 1;
        while (j < n) {
            if (nums[j] == nums[j-1]) {
                count++;
            } else {
                count = 1;
            }
            if (count <= 2) {
                nums[i++] = nums[j];
            }
            j++;
        }
        return i;

=======

        int n = nums.size();
        int j = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                cnt++;
            } else {
                cnt = 1;
            }
            if (cnt <= 2) {
                nums[j++] = nums[i];
            }
        }
        return j;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int i = 2;
        int j = 2;
        while (j < n) {
            if (nums[i-2] != nums[j]) {
                nums[i++] = nums[j];
            }
            j++;
        }
        return i;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int i = 0;
        int j = 0;
        int count = 1;
        while (j < n) {
            if (nums[i] == nums[j]) {
                count++;
            } else {
                i++;
                nums[i] = nums[j];
                count = 1;
            }
            j++;
            if (count <= 2) {
                i++;
                nums[i] = nums[j];
            }
        }
        return i;

=======

        if (nums.size() <= 2) return nums.size();
        int i = 1, j = 1;
        while (j < nums.size()) {
            if (nums[j] != nums[j-1]) {
                nums[i++] = nums[j];
            } else if (nums[j] != nums[i-1]) {
                nums[i++] = nums[j];
            }
            j++;
        }
        return i;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int i = 0, j = 0;
        while (j < n) {
            if (j < n - 2 && nums[j] == nums[j + 1] && nums[j] == nums[j + 2]) {
                j += 2;
            }
            nums[i++] = nums[j++];
        }
        return i;

=======

        int n = nums.size();
        if (n <= 2) return n;
        int ans = 0;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i-1]) {
                count++;
            } else {
                count = 1;
            }
            if (count <= 2) {
                nums[ans++] = nums[i];
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return n;
        int i = 0, j = 1, cnt = 1;
        for (j = 1; j < n; j++) {
            if (nums[j] == nums[i]) {
                if (cnt < 2) {
                    nums[++i] = nums[j];
                    cnt++;
                }
            } else {
                nums[++i] = nums[j];
                cnt = 1;
            }
        }
        return i + 1;
