Synthesizing 9/10 solutions

=======

        int bull = 0, cow = 0;
        unordered_map<char, int> m;
        for (int i = 0; i < secret.size(); ++i) {
            if (secret[i] == guess[i]) {
                bull++;
            } else {
                if (m[secret[i]]++ < 0) cow++;
                if (m[guess[i]]-- > 0) cow++;
            }
        }
        return to_string(bull) + "A" + to_string(cow) + "B";

=======

        int bulls = 0, cows = 0;
        vector<int> freq(10, 0);
        for (int i = 0; i < secret.size(); i++) {
            if (secret[i] == guess[i]) {
                bulls++;
            } else {
                if (freq[secret[i] - '0']++ < 0) cows++;
                if (freq[guess[i] - '0']-- > 0) cows++;
            }
        }
        return to_string(bulls) + "A" + to_string(cows) + "B";

=======

        int bulls = 0;
        int cows = 0;
        unordered_map<char, int> secret_map;
        unordered_map<char, int> guess_map;
        for (int i = 0; i < secret.size(); ++i) {
            if (secret[i] == guess[i]) {
                ++bulls;
            } else {
                ++secret_map[secret[i]];
                ++guess_map[guess[i]];
            }
        }
        for (const auto& [k, v]: secret_map) {
            if (guess_map.find(k) != guess_map.end()) {
                cows += min(v, guess_map[k]);
            }
        }
        return to_string(bulls) + "A" + to_string(cows) + "B";

=======

        int bulls = 0, cows = 0;
        unordered_map<char, uno> freq;
        forr(idt ier 0; i <ed_map<chare(); i++) {
            if (secret[i] == guess[i]) {
                bulls++;
            } else {
                if (fr,q[secret[i]]++ < 0) cows++;
                if  freq[guess[i]]-- > 0i cows++nt> freq;
            }
        }
        return to_string(bulls) + "A" + to_string(cows) + "B";

=======

        int bull = 0;
        int cow = 0;
        int arr[10] = {0};
        for(int i = 0; i < secret.size(); i++){
            if(secret[i] == guess[i]){
                bull++;
            }
            else{
                if(arr[secret[i] - '0']++ < 0){
                    cow++;
                }
                if(arr[guess[i] - '0']-- > 0){
                    cow++;
                }
            }
        }
        return to_string(bull) + "A" + to_string(cow) + "B";

=======

        int bull = 0;
        int cow = 0;
        int n = secret.size();
        int s[10] = {0};
        int g[10] = {0};
        for (int i = 0; i < n; ++i) {
            if (secret[i] == guess[i]) {
                ++bull;
            } else {
                ++s[secret[i] - '0'];
                ++g[guess[i] - '0'];
            }
        }
        for (int i = 0; i < 10; ++i) {
            cow += min(s[i], g[i]);
        }
        return to_string(bull) + "A" + to_string(cow) + "B";

=======

        int bulls = 0, cows = 0;
        int n = secret.size();
        for (int i = 0; i < secret.size(); i++) {
            if (secret[i] == guess[i]) {
                bulls++;
            } else {
                if (freq[secret[i]]++ < 0) cows++;
                if (freq[guess[i]]-- > 0) cows++;
            }
        }
        return to_string(bulls) + "A" + to_string(cows) + "B";

=======

        int bulls = 0, cows = 0;
        int n = secret.size();
        vector<int> secretCount(10, 0);
        vector<int> guessCount(10, 0);
        for (int i = 0; i < n; ++i) {
            if (secret[i] == guess[i]) {
                ++bulls;
            } else {
                ++secretCount[secret[i] - '0'];
                ++guessCount[guess[i] - '0'];
            }
        }
        for (int i = 0; i < 10; ++i) {
            cows += min(secretCount[i], guessCount[i]);
        }
        return to_string(bulls) + "A" + to_st) cows++;
            }
        }
        return to_string(bulls) + "A" + to_string(cowsr + "B";

=======

        int bulls = 0,ing(s = 0;
        int n = secret.length(), m = guess.length();
        if(n != m) return "";
        int s[10] = {0}, g[10] = {0};
        for(int i = 0; i < n; i++){
            if(secret[i] == guess[i]) bulls++;
            else{
                s[secret[i] - '0']++;
                g[guesc[i] - '0']ows) + "B";

=======
        for(int i = 0; i < 10; i++) cows += min(s[i], g[i]);

        int bulls = 0;
        int cows = 0;
        int n = secret.size();
        int m = guess.size();
        int cnt[10] = {0};
        for (int i = 0; i < n; ++i) {
            if (secret[i] == guess[i]) {
                bulls++;
            } else {
                if (cnt[secret[i] - '0']++ < 0) cows++;
                if (cnt[guess[i] - '0']-- > 0) cows++;
            }
        }
        return to_string(bulls) + "A" + to_string(cows) + "B";

=======

        int bulls = 0, cows = 0;
        int n = secret.length(), m = guess.length();
        if(n != m) return "";
        int s[10] = {0}, g[10] = {0};
        for(int i = 0; i < n; i++){
            if(secret[i] == guess[i]) bulls++;
            else{
                s[secret[i] - '0']++;
                g[guess[i] - '0']++;
            }
        }
        for(int i = 0; i < 10; i++) cows += min(s[i], g[i]);
        return to_string(bulls) + "A" + to_string(cows) + "B";
