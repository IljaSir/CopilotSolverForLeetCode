Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<vector<pair<int, int>>> g(n + 1);
        for (auto& e : edges) {
            g[e[0]].push_back({e[1], e[2]});
            g[e[1]].push_back({e[0], e[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto [v, w] : g[u]) {
                if (d + w < dist[v]) {
                    dist[v] = d + w;
                    pq.push({d + w, v});
                }
            }
        }
        vector<int> dp(n + 1, -1);
        dp[n] = 1;
        function<int(int)> dfs = [&](int u) {
            if (u == 1) return 1;
            if (dp[u] != -1) return dp[u];
            dp[u] = 0;
            for (auto [v, w] : g[u]) {
                if (dist[v] > dist[u]) dp[u] = (dp[u] + dfs(v)) % 1000000007;
            }
            return dp[u];
        };
        return dfs(1);

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& e : edges) {
            graph[e[0]].push_back({e[1], e[2]});
            graph[e[1]].push_back({e[0], e[2]});
        }
        priority_queue<pair<int, int>> pq;
        pq.push({0, n});
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        while (!pq.empty()) {
            auto [d, u] = pq.top(); pq.pop();
            if (d > dist[u]) continue;
            for (auto [v, w] : graph[u]) {
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n + 1, -1);
        function<int(int)> dfs = [&](int u) {
            if (u == n) return 1;
            if (dp[u] != -1) return dp[u];
            int res = 0;
            for (auto [v, w] : graph[u]) {
                if (dist[v] > dist[u]) {
                    res = (res + dfs(v)) % 1000000007;
                }
            }
            return dp[u] = res;
        };
        return dfs(1);

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& edge : edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) {
                continue;
            }
            for (auto& [v, w] : graph[u]) {
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n + 1, -1);
        function<int(int)> dfs = [&](int u) {
            if (u == n) {
                return 1;
            }
            if (dp[u] != -1) {
                return dp[u];
            }
            dp[u] = 0;
            for (auto& [v, w] : graph[u]) {
                if (dist[u] > dist[v]) {
                    dp[u] = (dp[u] + dfs(v)) % 1000000007;
                }
            }
            return dp[u];
        };
        return dfs(1);

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& edge : edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.push({0, n});
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            for (auto& [v, w] : graph[u]) {
                if (d + w < dist[v]) {
                    dist[v] = d + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n + 1, -1);
        function<int(int)> dfs = [&](int u) {
            if (u == n) return 1;
            if (dp[u] != -1) return dp[u];
            dp[u] = 0;
            for (auto& [v, w] : graph[u]) {
                if (dist[v] > dist[u]) {
                    dp[u] = (dp[u] + dfs(v)) % 1000000007;
                }
            }
            return dp[u];
        };
        return dfs(1);

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& edge: edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            int u = p.second;
            int d = p.first;
            if (d > dist[u]) continue;
            for (auto& e: graph[u]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n + 1, 0);
        dp[n] = 1;
        pq.push({dist[n], n});
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            int u = p.second;
            int d = p.first;
            if (d < dist[u]) continue;
            for (auto& e: graph[u]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] < dist[u]) {
                    dp[v] = (dp[v] + dp[u]) % (int)(1e9 + 7);
                    pq.push({dist[v], v});
                }
            }
        }
        return dp[1];

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto &edge : edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }

        vector<int> dist(n + 1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) {
                continue;
            }
            for (auto [v, w] : graph[u]) {
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }

        vector<int> ways(n + 1, 0);
        ways[n] = 1;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) {
                continue;
            }
            for (auto [v, w] : graph[u]) {
                if (dist[v] > dist[u]) {
                    ways[v] = (ways[v] + ways[u]) % 1000000007;
                    pq.push({dist[v], v});
                }
            }
        }
        return ways[1];

=======

        vector<vector<pair<int, int>>> g(n);
        for (auto e : edges) {
            g[e[0] - 1].push_back({e[1] - 1, e[2]});
            g[e[1] - 1].push_back({e[0] - 1, e[2]});
        }
        vector<int> dis(n, INT_MAX);
        dis[n - 1] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n - 1});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dis[u]) continue;
            for (auto [v, w] : g[u]) {
                if (dis[v] > dis[u] + w) {
                    dis[v] = dis[u] + w;
                    pq.push({dis[v], v});
                }
            }
        }
        vector<int> dp(n, -1);
        function<int(int)> dfs = [&](int u) {
            if (u == n - 1) return 1;
            if (dp[u] != -1) return dp[u];
            dp[u] = 0;
            for (auto [v, w] : g[u]) {
                if (dis[v] > dis[u]) {
                    dp[u] = (dp[u] + dfs(v)) % 1000000007;
                }
            }
            return dp[u];
        };
        return dfs(0);

=======

        vector<vector<pair<int, int>>> adj(n + 1);
        for (auto &edge : edges) {
            adj[edge[0]].push_back({edge[1], edge[2]});
            adj[edge[1]].push_back({edge[0], edge[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto [v, w] : adj[u]) {
                if (d + w < dist[v]) {
                    dist[v] = d + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n + 1, -1);
        function<int(int)> dfs = [&](int u) {
            if (u == n) return 1;
            if (dp[u] != -1) return dp[u];
            dp[u] = 0;
            for (auto [v, w] : adj[u]) {
                if (dist[v] > dist[u]) dp[u] = (dp[u] + dfs(v)) % 1000000007;
            }
            return dp[u];
        };
        return dfs(1);

=======

        vector<vector<pair<int,int>>> graph(n+1);
        for (auto &edge: edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        vector<int> dist(n+1, INT_MAX);
        dist[n] = 0;
        priority_queue<pair<int,int>> pq;
        pq.push({0, n});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto &e: graph[u]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        vector<int> dp(n+1, 0);
        dp[n] = 1;
        function<void(int)> dfs = [&](int u) {
            for (auto &e: graph[u]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] > dist[u]) {
                    if (dp[v] == 0) {
                        dfs(v);
                    }
                    dp[u] = (dp[u] + dp[v]) % 1000000007;
                }
            }
        };
        dfs(1);
        return dp[1];
