Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 1; i < n; i++) {
                if (nums[i] == 0 && nums[i - 1] == 0) return true;
            }
            return false;
        }
        k = abs(k);
        vector<int> sums(n + 1);
        for (int i = 1; i <= n; i++) {
            sums[i] = sums[i - 1] + nums[i - 1];
        }
        unordered_set<int> st;
        for (int i = 2; i <= n; i++) {
            st.insert(sums[i - 2] % k);
            if (st.find(sums[i] % k) != st.end()) return true;
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 1; i < n; i++) {
                if (nums[i] == 0 && nums[i - 1] == 0) return true;
            }
            return false;
        }
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + nums[i]) % k;
            if (mp.count(sum)) {
                int pre = mp[sum];
                if (i - pre > 1) return true;
            } else {
                mp[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 1; i < n; ++i) {
                if (nums[i] == 0 && nums[i-1] == 0) return true;
            }
            return false;
        }
        k = abs(k);
        vector<int> prefixSum(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            prefixSum[i] = (prefixSum[i-1] + nums[i-1]) % k;
        }
        unordered_map<int, int> index;
        for (int i = 0; i <= n; ++i) {
            if (index.count(prefixSum[i]) == 0) {
                index[prefixSum[i]] = i;
            } else {
                if (i - index[prefixSum[i]] >= 2) return true;
            }
        }
        return false;

=======

        int n = nums.size();
        if (k == 0) {
            for (int i = 0; i < n - 1; i++) {
                if (nums[i] == 0 && nums[i + 1] == 0) {
                    return true;
                }
            }
            return false;
        }
        vector<int> presum(n + 1);
        for (int i = 1; i <= n; i++) {
            presum[i] = presum[i - 1] + nums[i - 1];
        }
        unordered_set<int> st;
        for (int i = 0; i <= n; i++) {
            int x = presum[i] % k;
            if (st.count(x)) {
                return true;
            }
            st.insert(presum[i + 1] % k);
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 0; i < n - 1; i++) {
                if (nums[i] == 0 && nums[i + 1] == 0) return true;
            }
            return false;
        }
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + nums[i]) % k;
            if (m.count(sum)) {
                if (i - m[sum] > 1) return true;
            } else {
                m[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 0; i < n - 1; i++) {
                if (nums[i] == 0 && nums[i + 1] == 0) return true;
            }
            return false;
        }
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            sum %= k;
            if (mp.count(sum)) {
                if (i - mp[sum] >= 2) return true;
            } else {
                mp[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (k != 0) {
                sum %= k;
            }
            if (mp.count(sum)) {
                if (i - mp[sum] >= 2) {
                    return true;
                }
            } else {
                mp[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        if (k == 0) {
            for (int i = 1; i < n; i++)
                if (nums[i] == 0 && nums[i-1] == 0) return true;
            return false;
        }
        if (k < 0) k = -k;
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + nums[i]) % k;
            if (m.count(sum)) {
                if (i - m[sum] >= 2) return true;
            } else {
                m[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (k != 0) sum %= k;
            if (mp.find(sum) != mp.end()) {
                if (i - mp[sum] >= 2) return true;
            } else {
                mp[sum] = i;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 2) return false;
        unordered_map<int, int> map;
        map[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (k != 0) sum %= k;
            if (map.find(sum) != map.end()) {
                if (i - map[sum] > 1) return true;
            } else {
                map[sum] = i;
            }
        }
        return false;
