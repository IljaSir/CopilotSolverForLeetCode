Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> res;
        for (int i = 1; i <= 9; ++i) {
            int num = i;
            for (int j = i + 1; j <= 9; ++j) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    res.push_back(num);
                }
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> ans;
        for (int i = 1; i <= 9; ++i) {
            int num = i;
            for (int j = i + 1; j <= 9; ++j) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    ans.push_back(num);
                }
            }
        }
        sort(ans.begin(), ans.end());
        return ans;

=======

        vector<int> result;
        for (int i = 1; i <= 9; i++) {
            int num = i;
            for (int j = i + 1; j <= 9; j++) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    result.push_back(num);
                }
            }
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        string s = "123456789";
        for (int i = 0; i < s.size(); ++i) {
            for (int j = i; j < s.size(); ++j) {
                int num = stoi(s.substr(i, j - i + 1));
                if (num >= low && num <= high) {
                    res.push_back(num);
                }
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        string s = "123456789";
        for (int i = 0; i < 9; ++i) {
            for (int j = i; j < 9; ++j) {
                int num = stoi(s.substr(i, j-i+1));
                if (num >= low && num <= high) res.push_back(num);
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int n = to_string(low).length();
        int m = to_string(high).length();
        for(int i = n; i <= m; i++) {
            for(int j = 1; j <= 10-i; j++) {
                int tmp = 0;
                for(int k = j; k < j+i; k++) {
                    tmp = tmp * 10 + k;
                }
                if(tmp >= low && tmp <= high) {
                    res.push_back(tmp);
                }
            }
        }
        return res;

=======

        vector<int> res;
        int num = 123456789;
        for(int i = 1; i < 9; i++) {
            for(int j = 0; j < 9 - i; j++) {
                int n = (num / (int)pow(10, j)) % (int)pow(10, i + 1);
                if(n >= low && n <= high) res.push_back(n);
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int i = 1;
        while (i < 1000000000) {
            int j = i;
            int k = 0;
            while (j) {
                k = k * 10 + (j % 10);
                j /= 10;
            }
            if (k >= low && k <= high) {
                res.push_back(k);
            }
            if (i % 10 == 9) {
                i = i / 10 + 1;
            } else {
                i++;
            }
        }
        sort(res.begin(), res.end());
        return res;
