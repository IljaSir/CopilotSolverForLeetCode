Synthesizing 10/10 solutions

=======

        vector<int> mod(k, 0);
        for (int i = 0; i < arr.size(); i++) {
            mod[(arr[i] % k + k) % k]++;
        }
        if (mod[0] % 2) return false;
        for (int i = 1; i <= k / 2; i++) {
            if (mod[i] != mod[k - i]) {
                return false;
            }
        }
        return true;

=======

        vector<int> mod(k, 0);
        for (int i = 0; i < arr.size(); i++) {
            mod[((arr[i] % k) + k) % k]++;
        }
        if (mod[0] % 2 != 0) return false;
        for (int i = 1; i <= k / 2; i++) {
            if (mod[i] != mod[k - i]) return false;
        }
        return true;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[(arr[i] % k + k) % k]++;
        }
        for (int i = 0; i < arr.size(); i++) {
            int x = (arr[i] % k + k) % k;
            if (x == 0) {
                if (m[x] % 2 != 0) return false;
            } else {
                if (m[x] != m[k - x]) return false;
            }
        }
        return true;

=======

        vector<int> remainders(k, 0);
        for (int i = 0; i < arr.size(); i++) {
            remainders[((arr[i] % k) + k) % k]++;
        }
        if (remainders[0] % 2 != 0) {
            return false;
        }
        for (int i = 1; i <= k / 2; i++) {
            if (remainders[i] != remainders[k - i]) {
                return false;
            }
        }
        return true;

=======

        unordered_map<int, int> m;
        for (int i : arr) {
            m[(i % k + k) % k]++;
        }
        for (int i = 1; i < k; i++) {
            if (m[i] != m[k - i]) {
                return false;
            }
        }
        return m[0] % 2 == 0;

=======

        vector<int> v(k, 0);
        for (auto a: arr) {
            v[((a % k) + k) % k]++;
        }
        if (v[0] % 2 != 0) return false;
        for (int i = 1; i < k; i++) {
            if (v[i] != v[k - i]) return false;
        }
        return true;

=======

        int n = arr.size();
        unordered_map<int, int> m;
        for (auto a : arr) {
            int r = a % k;
            if (r < 0) r += k;
            m[r]++;
        }
        for (auto [r, cnt] : m) {
            if (r == 0) {
                if (cnt % 2) return false;
            } else {
                if (m[r] != m[k - r]) return false;
            }
        }
        return true;

=======

        vector<int> count(k, 0);
        for (auto &a : arr) {
            ++count[((a % k) + k) % k];
        }
        for (int i = 1; i < k; ++i) {
            if (count[i] != count[k - i]) {
                return false;
            }
        }
        return count[0] % 2 == 0;

=======

        unordered_map<int, int> m;
        for (int a : arr) {
            int key = ((a % k) + k) % k;
            m[key]++;
        }
        for (auto a : m) {
            int key = a.first;
            int val = a.second;
            if (key == 0) {
                if (val % 2 != 0) {
                    return false;
                }
            } else {
                if (m.find(k - key) == m.end()) {
                    return false;
                }
                if (m[k - key] != val) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = arr.size();
        vector<int> cnt(k,0);
        for(auto i:arr) {
            int t = i%k;
            if(t<0) t+=k;
            cnt[t]++;
        }
        if(cnt[0]%2!=0) return false;
        for(int i = 1;i<k;i++) {
            if(cnt[i]!=cnt[k-i]) return false;
        }
        return true;
