Synthesizing 10/10 solutions

=======

        int left = 1, right = 1e9;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(n, quantities, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int sum = 0;
        for (int i = 0; i < quantities.size(); ++i) {
            sum += quantities[i];
        }
        int l = 1, r = sum;
        while (l < r) {
            int mid = (l + r) / 2;
            int cnt = 0;
            for (int i = 0; i < quantities.size(); ++i) {
                cnt += quantities[i] / mid;
                if (quantities[i] % mid) {
                    ++cnt;
                }
            }
            if (cnt <= n) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(n, quantities, mid)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    
    bool check(int n, vector<int>& quantities, int x) {
        int sum = 0;
        for (int q : quantities) {
            sum += (q + x - 1) / x;
        }
        return sum <= n;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (check(n, quantities, m)) r = m;
            else l = m + 1;
        }
        return l;

=======

        int left = 1;
        int right = 1e5;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (check(mid, n, quantities)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    bool check(int x, int n, vector<int>& quantities) {
        int sum = 0;
        for (int i = 0; i < quantities.size(); i++) {
            sum += quantities[i] / x;
        }
        return sum >= n;

=======

        int l = 1, r = 1e5;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(n, quantities, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int l = 1, r = 1e5;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(n, quantities, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    
    bool check(int n, vector<int>& quantities, int x) {
        int count = 0;
        for (int i = 0; i < quantities.size(); ++i) {
            count += (quantities[i] - 1) / x + 1;
        }
        return count <= n;

=======

        sort(quantities.begin(), quantities.end());
        int l = 1, r = quantities.back();
        while (l < r) {
            int mid = (l + r) >> 1;
            long long sum = 0;
            for (int i : quantities)
                sum += i / mid;
            if (sum >= n)
                l = mid + 1;
            else
                r = mid;
        }
        return l - 1;

=======

        int m = quantities.size();
        int sum = 0;
        for (int i = 0; i < m; i++) {
            sum += quantities[i];
        }
        int l = 1, r = sum;
        while (l <= r) {
            int mid = (r - l) / 2 + l;
            int count = 0;
            for (int i = 0; i < m; i++) {
                count += quantities[i] / mid;
            }
            if (count < n) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return r;

=======

        int m = quantities.size();
        int l = 1, r = 1e5;
        while(l < r){
            int mid = (l + r) / 2;
            int sum = 0;
            for(int i = 0; i < m; i++){
                sum += (quantities[i] + mid - 1) / mid;
            }
            if(sum <= n){
                r = mid;
            }else{
                l = mid + 1;
            }
        }
        return l;
