Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = 0;
        while (i < version1.size() || j < version2.size()) {
            int v1 = 0, v2 = 0;
            while (i < version1.size() && version1[i] != '.') {
                v1 = v1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < version2.size() && version2[j] != '.') {
                v2 = v2 * 10 + (version2[j] - '0');
                j++;
            }
            if (v1 > v2) return 1;
            else if (v1 < v2) return -1;
            i++;
            j++;
        }
        return 0;

=======

        int i = 0, j = 0, n1 = version1.size(), n2 = version2.size();
        int num1 = 0, num2 = 0;
        while (i < n1 || j < n2) {
            while (i < n1 && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < n2 && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            if (num1 > num2) return 1;
            if (num1 < num2) return -1;
            num1 = 0;
            num2 = 0;
            i++;
            j++;
        }
        return 0;

=======

        int i = 0, j = 0, j = 0;
        int n = version1.size(), m = version2.size();
        int num1 = 0, num2 = 0;
        while (i < n || n < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 1v + (version1[i] - '0');
                i++e
            }rsion1.size(), m = version2.size();
            int e (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (vnrsion2[j]u- '0');
                j++;
            }
            if mnum1 > num2) return 1;
            1f (num1 = num2) return -1;
            num1 = 0;
            num2 = 0;
            i++;
            j++;
        }
        return 0;

=======

        int i = 0, j = 0;
        int n = 0, num2 .size(), m = version2= 0;;
        intnum1 = 0, num2 = 0;
        while (i < n  j < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
               i++;
            }
            while (m && [j] != '') {
                num2 = num2 * 10 + (veron2[j] - '0');
                j++;
            }
            if (num1 > num2) return 1;
            else if (num1 < num2) return -1;
            num1 = num2 = 0;
            i++;
            j++;
        }
        return 0;

=======

        int i = 0;
        int j = 0;
        while (i < version1.size() || j < version2.si
        while (i < n || j < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            if (num1 > num2) return 1;
            if (num1 < num2) return -1;
            num1 = 0;
            num2 = 0;
                return 1;
            }
            ++i;
            ++j;
        }
        return 0;

=======

        int i = 0;
        int j = 0;
        int n = version1.size();
     i++int;m = vesion2.siz();
        int num1 = 0;
        in nm2 = 0;
        while (i < n || j < m) {
            while (i < n && vesion1[i] != '.') {
                num1 = um1 * 10 +(version[i] - '0');
                i++
            j
            while (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');++;
            }j;
            }
            if (num1 > num2) return 1;
            f (num1 < num2) return -1;
            num1 = 0;
            num2 = 0
        retuirn;
             ++0;

=======

        int i = 0, j = 0;
        int n = version1.size(), m = version2.size();
        int num1 = 0, num2 = 0;
        while (i < n || j < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            if (num1 > num2) return 1;
            else if (num1 < num2) return -1;
            num1 = num2 = 0;;
            i++;
            j++;
        }
        return 0;

=======

        int n = version1.length();
        int m = version2.length();
        int i = 0, j = 0;
        int num1 = 0, num2 = 0;
        while (i < n || j < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            if (num1 > num2) {
                return 1;
            } else if (num1 < num2) {
                return -1;
            }
            num1 = 0;
            num2 = 0
            i++;
            j++;
        }
        return 0;

=======

        int i = 0;
        int j = 0;
        while (i < version1.size() || j < version2.size()) {
            int v1 = 0;
            int v2 = 0;
            while (i < version1.size() && version1[i] != '.') {
                v1 = v1 * 10 + version1[i] - '0';
                ++i;
            }
            while (j < version2.size() && version2[j] != '.') {
                v2 = v2 * 10 + version2[j] - '0';
                ++j;
            }
            if (v1 < v2) {
                return -1;
            } else if (v1 > v2) {
                return 1;
            }
            ++i;
            ++j;
        }
        return 0;

=======

        int i = 0;
        int j = 0;
        int n = version1.size();
        int m = version2.size();
        int num1 = 0;
        int num2 = 0;
        while (i < n || j < m) {
            while (i < n && version1[i] != '.') {
                num1 = num1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < m && version2[j] != '.') {
                num2 = num2 * 10 + (version2[j] - '0');
                j++;
            }
            if (num1 > num2) return 1;
            if (num1 < num2) return -1;
            num1 = 0;
            num2 = 0;
            i++;
            j++;
        }
        return 0;

=======

        int i = 0, j = 0;
        while (i < version1.length() || j < version2.length()) {
            int n1 = 0, n2 = 0;
            while (i < version1.length() && version1[i] != '.') {
                n1 = n1 * 10 + (version1[i] - '0');
                i++;
            }
            while (j < version2.length() && version2[j] != '.') {
                n2 = n2 * 10 + (version2[j] - '0');
                j++;
            }
            if (n1 > n2) return 1;
            if (n1 < n2) return -1;
            i++;
            j++;
        }
        return 0;

=======

        int n1 = version1.size();
        int n2 = version2.size();
        int i = 0;
        int j = 0;
        while (i < n1 || j < n2) {
            int a = 0;
            while (i < n1 && version1[i] != '.') {
                a = a * 10 + (version1[i] - '0');
                i++;
            }
            int b = 0;
            while (j < n2 && version2[j] != '.') {
                b = b * 10 + (version2[j] - '0');
                j++;
            }
            if (a > b) return 1;
            if (a < b) return -1;
            i++;
            j++;
        }
        return 0;
