Synthesizing 10/10 solutions

=======

        unordered_map<int, int> win;
        unordered_map<int, int> lose;
        for (auto m : matches) {
            win[m[0]]++;
            lose[m[1]]++;
        }
        vector<vector<int>> ans(2);
        for (auto w : win) {
            if (lose.find(w.first) == lose.end()) {
                ans[0].push_back(w.first);
            }
        }
        for (auto l : lose) {
            if (l.second == 1) {
                ans[1].push_back(l.first);
            }
        }
        return ans;

=======

        unordered_map<int, int> win, lose;
        for (auto& match : matches) {
            win[match[0]]++;
            lose[match[1]]++;
        }
        vector<vector<int>> res(2);
        for (auto& p : win) {
            if (lose.count(p.first) == 0) {
                res[0].push_back(p.first);
            }
        }
        for (auto& p : lose) {
            if (win.count(p.first) == 0) {
                res[1].push_back(p.first);
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (auto& match : matches) {
            m[match[0]]++;
            m[match[1]]--;
        }
        vector<vector<int>> ans(2);
        for (auto& p : m) {
            if (p.second == 0) ans[0].push_back(p.first);
            else if (p.second == -1) ans[1].push_back(p.first);
        }
        sort(ans[0].begin(), ans[0].end());
        sort(ans[1].begin(), ans[1].end());
        return ans;

=======

        unordered_map<int, int> wins, losses;
        for (auto& m : matches) {
            wins[m[0]]++;
            losses[m[1]]++;
        }
        vector<vector<int>> ans(2);
        for (auto& p : wins) {
            if (!losses.count(p.first)) {
                ans[0].push_back(p.first);
            }
        }
        for (auto& p : losses) {
            if (p.second == 1) {
                ans[1].push_back(p.first);
            }
        }
        return ans;

=======

        map<int, int> m;
        for (auto& match : matches) {
            m[match[0]]++;
            m[match[1]]--;
        }
        vector<vector<int>> res(2);
        for (auto& p : m) {
            if (p.second > 0) {
                res[0].push_back(p.first);
            } else if (p.second == 0) {
                res[1].push_back(p.first);
            }
        }
        return res;

=======

        vector<vector<int>> result;
        unordered_map<int, int> win;
        unordered_map<int, int> lose;
        for (auto& m : matches) {
            win[m[0]]++;
            lose[m[1]]++;
        }
        vector<int> winers;
        vector<int> losers;
        for (auto& w : win) {
            if (lose.find(w.first) == lose.end()) {
                winers.push_back(w.first);
            }
        }
        for (auto& l : lose) {
            if (l.second == 1) {
                losers.push_back(l.first);
            }
        }
        result.push_back(winers);
        result.push_back(losers);
        return result;
    }
    vector<vector<int>> findPlayers(vector<vector<int>>& matches) {
        vector<vector<int>> result;
        unordered_map<int, int> win;
        unordered_map<int, int> lose;
        for (auto& m : matches) {
            win[m[0]]++;
            lose[m[1]]++;
        }
        vector<int> winers;
        vector<int> losers;
        for (auto& w : win) {
            if (lose.find(w.first) == lose.end()) {
                winers.push_back(w.first);
            }
        }
        for (auto& l : lose) {
            if (l.second == 1) {
                losers.push_back(l.first);
            }
        }
        result.push_back(winers);
        result.push_back(losers);
        return result;
    }
    vector<vector<int>> findPlayers2(vector<vector<int>>& matches) {
        vector<vector<int>> result;
        unordered_map<int, int> win;
        unordered_map<int, int> lose;
        for (auto& m : matches) {
            win[m[0]]++;
            lose[m[1]]++;
        }
        vector<int> winers;
        vector<int> losers;
        for (auto& w : win) {
            if (lose.find(w.first) == lose.end()) {
                winers.push_back(w.first);
            }
        }
        for (auto& l : lose) {
            if (l.second == 1) {
                losers.push_back(l.first);
            }
        }
        result.push_back(winers);
        result.push_back(losers);
        return result;

=======

        int n = matches.size();
        vector<vector<int>> result(2);
        vector<int> win(n+1, 0);
        vector<int> lose(n+1, 0);
        for (int i = 0; i < n; ++i) {
            win[matches[i][0]]++;
            lose[matches[i][1]]++;
        }
        for (int i = 1; i <= n; ++i) {
            if (lose[i] == 0) {
                result[0].push_back(i);
            }
            if (lose[i] == 1) {
                result[1].push_back(i);
            }
        }
        return result;

=======

        unordered_map<int, int> loss;
        for (auto& match : matches) {
            loss[match[1]]++;
        }
        vector<vector<int>> ans(2);
        for (auto& p : loss) {
            ans[p.second == 0 ? 0 : 1].push_back(p.first);
        }
        for (int i = 0; i < 2; ++i) {
            sort(ans[i].begin(), ans[i].end());
        }
        return ans;

=======

        vector<vector<int>> result;
        unordered_map<int, int> map;
        for (auto match : matches) {
            map[match[0]]++;
            map[match[1]]--;
        }
        vector<int> winner;
        vector<int> loser;
        for (auto m : map) {
            if (m.second == 0) {
                winner.push_back(m.first);
            } else if (m.second == -1) {
                loser.push_back(m.first);
            }
        }
        result.push_back(winner);
        result.push_back(loser);
        return result;

=======

        vector<vector<int>> result;
        vector<int> winners;
        vector<int> losers;
        unordered_map<int, int> players;
        for (auto& match : matches) {
            players[match[0]]++;
            players[match[1]]--;
        }
        for (auto& player : players) {
            if (player.second > 0) {
                winners.push_back(player.first);
            } else if (player.second == 0) {
                losers.push_back(player.first);
            }
        }
        sort(winners.begin(), winners.end());
        sort(losers.begin(), losers.end());
        result.push_back(winners);
        result.push_back(losers);
        return result;
