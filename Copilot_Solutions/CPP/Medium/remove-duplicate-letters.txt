Synthesizing 10/10 solutions

=======

        int cnt[26] = {0};
        for (char c : s) cnt[c - 'a']++;
        int pos = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] < s[pos]) pos = i;
            if (--cnt[s[i] - 'a'] == 0) break;
        }
        return s.empty() ? "" : s[pos] + removeDuplicateLetters(s.substr(pos + 1).erase(std::remove(s.begin() + pos + 1, s.end(), s[pos]), s.end()));

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        for (char c : s) {
            cnt[c - 'a']++;
        }
        vector<bool> vis(26, false);
        string ans = "0";
        for (char c : s) {
            cnt[c - 'a']--;
            if (vis[c - 'a']) {
                continue;
            }
            while (c < ans.back() && cnt[ans.back() - 'a'] > 0) {
                vis[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans.push_back(c);
            vis[c - 'a'] = true;
        }
        return ans.substr(1);

=======

        string res;
        vector<int> cnt(26, 0), visited(26, 0);
        for (char c : s) {
            ++cnt[c - 'a'];
        }
        for (char c : s) {
            --cnt[c - 'a'];
            if (visited[c - 'a']) {
                continue;
            }
            while (!res.empty() && c < res.back() && cnt[res.back() - 'a'] > 0) {
                visited[res.back() - 'a'] = 0;
                res.pop_back();
            }
            res.push_back(c);
            visited[c - 'a'] = 1;
        }
        return res;

=======

        int n = s.size();
        vector<bool> visited(26, false);
        vector<int> count(26, 0);
        for (char c : s) {
            count[c - 'a']++;
        }
        string res = "";
        for (char c : s) {
            count[c - 'a']--;
            if (visited[c - 'a']) continue;
            while (!res.empty() && res.back() > c && count[res.back() - 'a'] > 0) {
                visited[res.back() - 'a'] = false;
                res.pop_back();
            }
            res.push_back(c);
            visited[c - 'a'] = true;
        }
        return res;

=======

        int n = s.size();
        vector<int> count(26, 0);
        vector<bool> visited(26, false);
        for (char c : s) {
            count[c - 'a']++;
        }
        stack<char> st;
        for (char c : s) {
            count[c - 'a']--;
            if (visited[c - 'a']) {
                continue;
            }
            while (!st.empty() && st.top() > c && count[st.top() - 'a'] > 0) {
                visited[st.top() - 'a'] = false;
                st.pop();
            }
            st.push(c);
            visited[c - 'a'] = true;
        }
        string result;
        while (!st.empty()) {
            result += st.top();
            st.pop();
        }
        reverse(result.begin(), result.end());
        return result;

=======

        int n = s.size();
        if (n <= 1) return s;
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; ++i) {
            cnt[s[i] - 'a']++;
        }
        int pos = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] < s[pos]) pos = i;
            if (--cnt[s[i] - 'a'] == 0) break;
        }
        string ans;
        ans += s[pos];
        string tmp = s.substr(pos + 1);
        tmp.erase(remove(tmp.begin(), tmp.end(), s[pos]), tmp.end());
        ans += removeDuplicateLetters(tmp);
        return ans;

=======

        int n = s.size();
        int last[26];
        bool vis[26];
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        string ans = "";
        for (int i = 0; i < n; i++) {
            if (vis[s[i] - 'a']) continue;
            while (!ans.empty() && ans.back() > s[i] && last[ans.back() - 'a'] > i) {
                vis[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans += s[i];
            vis[s[i] - 'a'] = true;
        }
        return ans;

=======

        string result;
        vector<int> last(26, -1);
        vector<bool> visited(26, false);
        for (int i = 0; i < s.length(); ++i) {
            last[s[i] - 'a'] = i;
        }
        for (int i = 0; i < s.length(); ++i) {
            if (visited[s[i] - 'a']) {
                continue;
            }
            while (!result.empty() && s[i] < result.back() && last[result.back() - 'a'] > i) {
                visited[result.back() - 'a'] = false;
                result.pop_back();
            }
            result.push_back(s[i]);
            visited[s[i] - 'a'] = true;
        }
        return result;

=======

        int n = s.size();
        string ans;
        vector<int> cnt(26, 0);
        vector<bool> vis(26, false);
        for (char c : s) cnt[c - 'a']++;
        for (char c : s) {
            cnt[c - 'a']--;
            if (vis[c - 'a']) continue;
            while (!ans.empty() && ans.back() > c && cnt[ans.back() - 'a']) {
                vis[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans.push_back(c);
            vis[c - 'a'] = true;
        }
        return ans;

=======

        int n = s.size();
        string res = "";
        vector<int> cnt(26);
        vector<bool> vis(26);
        for (auto c : s) {
            cnt[c - 'a']++;
        }
        for (auto c : s) {
            cnt[c - 'a']--;
            if (vis[c - 'a']) continue;
            while (!res.empty() && res.back() > c && cnt[res.back() - 'a'] > 0) {
                vis[res.back() - 'a'] = false;
                res.pop_back();
            }
            res.push_back(c);
            vis[c - 'a'] = true;
        }
        return res;
