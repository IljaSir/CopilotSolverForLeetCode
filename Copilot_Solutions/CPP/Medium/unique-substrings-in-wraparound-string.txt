Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> dp(26, 0);
        int len = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0 && (s[i] - s[i - 1] == 1 || s[i - 1] - s[i] == 25)) {
                len++;
            } else {
                len = 1;
            }
            int idx = s[i] - 'a';
            dp[idx] = max(dp[idx], len);
        }
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            ans += dp[i];
        }
        return ans;

=======

        int n = s.length();
        vector<int> dp(26, 0);
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0 && (s[i] - s[i - 1] == 1 || s[i - 1] - s[i] == 25)) {
                cur++;
            } else {
                cur = 1;
            }
            int index = s[i] - 'a';
            dp[index] = max(dp[index], cur);
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += dp[i];
        }
        return res;

=======

        int n = s.size();
        int cnt[26] = {0};
        int maxLen = 0;
        for (int i = 0; i < n; ++i) {
            if (i > 0 && (s[i] - s[i - 1] == 1 || s[i - 1] - s[i] == 25)) {
                ++maxLen;
            } else {
                maxLen = 1;
            }
            int index = s[i] - 'a';
            cnt[index] = max(cnt[index], maxLen);
        }
        int ans = 0;
        for (int i = 0; i < 26; ++i) {
            ans += cnt[i];
        }
        return ans;

=======

        int n = s.size();
        if (n == 0) return 0;
        vector<int> dp(26, 0);
        int count = 1;
        dp[s[0] - 'a'] = 1;
        for (int i = 1; i < n; i++) {
            if (s[i] - s[i - 1] == 1 || s[i - 1] - s[i] == 25) {
                count++;
            } else {
                count = 1;
            }
            dp[s[i] - 'a'] = max(dp[s[i] - 'a'], count);
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += dp[i];
        }
        return res;

=======

        int n = s.size();
        if (n == 0) return 0;
        vector<int> dp(26, 0);
        int len = 1;
        for (int i = 0; i < n; i++) {
            int cur = s[i] - 'a';
            if (i > 0 && (s[i] - s[i - 1] == 1 || s[i - 1] - s[i] == 25)) {
                len++;
            } else {
                len = 1;
            }
            dp[cur] = max(dp[cur], len);
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        if (s.empty()) return 0;
        int n = s.size();
        vector<int> dp(26, 0);
        int cur = 1;
        for (int i = 0; i < n; ++i) {
            if (i > 0 && (s[i] - 'a' == (s[i-1] - 'a' + 1) % 26)) {
                ++cur;
            } else {
                cur = 1;
            }
            dp[s[i] - 'a'] = max(dp[s[i] - 'a'], cur);
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        int len = s.length();
        int count[26] = {0};
        int curCount = 0;
        for (int i = 0; i < len; i++) {
            if (i > 0 && (s[i] - s[i-1] == 1 || s[i-1] - s[i] == 25)) {
                curCount++;
            } else {
                curCount = 1;
            }
            int index = s[i] - 'a';
            count[index] = max(count[index], curCount);
        }
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            ans += count[i];
        }
        return ans;

=======

        int n = s.size();
        if (n == 0) return 0;
        unordered_map<char, int> m;
        int len = 1;
        for (int i = 0; i < n; i++) {
            if (i > 0 && (s[i] - s[i-1] == 1 || s[i-1] - s[i] == 25)) {
                len++;
            } else {
                len = 1;
            }
            m[s[i]] = max(m[s[i]], len);
        }
        int res = 0;
        for (auto p : m) {
            res += p.second;
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(26, 0);
        int i = 0;
        int j = 0;
        while (i < n) {
            while (j < n && s[j] == (s[i] + j - i) % 26 + 'a') j++;
            int k = 0;
            while (i < j) {
                dp[s[i] - 'a'] = max(dp[s[i] - 'a'], j - i - k);
                i++;
                k++;
            }
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        int n = s.length();
        if (n < 2) return n;
        int dp[26] = {0};
        int cnt = 1;
        dp[s[0]-'a'] = 1;
        for (int i = 1; i < n; i++) {
            if (s[i] == (s[i-1]+1) || (s[i] == 'a' && s[i-1] == 'z')) {
                cnt++;
            } else {
                cnt = 1;
            }
            dp[s[i]-'a'] = max(dp[s[i]-'a'], cnt);
        }
        int ans = 0;
        for (int i = 0; i < 26; i++) {
            ans += dp[i];
        }
        return ans;
