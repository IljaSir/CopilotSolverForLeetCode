Synthesizing 10/10 solutions

=======

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);
        });
        int ans = 0;
        int maxEnd = -1;
        for (auto& interval: intervals) {
            if (interval[1] > maxEnd) {
                ans++;
                maxEnd = interval[1];
            }
        }
        return ans;

=======

        sort(intervals.begin(), intervals.end(), [](const auto& lhs, const auto& rhs) {
            return lhs[0] == rhs[0] ? lhs[1] > rhs[1] : lhs[0] < rhs[0];
        });
        int count = 0;
        int end = 0;
        for (const auto& interval : intervals) {
            if (interval[1] > end) {
                end = interval[1];
                ++count;
            }
        }
        return count;

=======

        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b) {
            if (a[0] != b[0]) return a[0] < b[0];
            return a[1] > b[1];
        });
        int count = 0;
        int prev = -1;
        for (vector<int> interval : intervals) {
            if (interval[1] > prev) {
                count++;
                prev = interval[1];
            }
        }
        return count;

=======

        int n = intervals.size();
        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b) {
            return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);
        });
        int ans = 1;
        int end = intervals[0][1];
        for (int i = 1; i < n; i++) {
            if (intervals[i][1] <= end) {
                continue;
            }
            end = intervals[i][1];
            ans++;
        }
        return ans;

=======

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){
            if(a[0] == b[0]) return a[1] > b[1];
            return a[0] < b[0];
        });
        int ans = 0;
        int l = -1, r = -1;
        for(auto& v : intervals){
            if(v[1] > r){
                ans++;
                l = v[0];
                r = v[1];
            }
        }
        return ans;

=======

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){
            return (a[0] == b[0]) ? (a[1] > b[1]) : (a[0] < b[0]);
        });
        int count = 0;
        int maxR = 0;
        for (const auto& i : intervals) {
            if (i[1] > maxR) {
                maxR = i[1];
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b){
            return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);
        });
        int maxR = 0;
        for (auto& v : intervals) {
            if (v[1] > maxR) {
                maxR = v[1];
                ans++;
            }
        }
        return ans;

=======

        int n = intervals.size();
        if (n == 1) return 1;
        sort(intervals.begin(), intervals.end(), [](vector<int> &a, vector<int> &b) {
            if (a[0] == b[0]) return a[1] > b[1];
            return a[0] < b[0];
        });
        int res = 1;
        int right = intervals[0][1];
        for (int i = 1; i < n; i++) {
            if (intervals[i][1] > right) {
                res++;
                right = intervals[i][1];
            }
        }
        return res;

=======

        int res = 0, curr = 0;
        sort(intervals.begin(), intervals.end(), [](auto& a, auto& b) {
            return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);
        });
        for (auto& interval : intervals) {
            if (interval[1] > curr) {
                curr = interval[1];
                res++;
            }
        }
        return res;

=======

        int n = intervals.size();
        vector<int> res;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            for (; j < n; j++) {
                if (intervals[i][0] >= intervals[j][0] && intervals[i][1] <= intervals[j][1]) {
                    break;
                }
            }
            if (j == n) {
                res.push_back(i);
            }
        }
        return res.size();
