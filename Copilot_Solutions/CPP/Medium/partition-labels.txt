Synthesizing 10/10 solutions

=======

        vector<int> last(26);
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        vector<int> partition;
        int start = 0, end = 0;
        for (int i = 0; i < n; ++i) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                partition.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return partition;

=======

        int last[26];
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        int start = 0, end = 0;
        vector<int> ans;
        for (int i = 0; i < n; ++i) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                ans.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return ans;

=======

        vector<int> last(26);
        for (int i = 0; i < s.size(); i++)
            last[s[i] - 'a'] = i;
        int start = 0, end = 0;
        vector<int> ans;
        for (int i = 0; i < s.size(); i++) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                ans.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return ans;

=======

        vector<int> res;
        int last[26];
        for (int i = 0; i < s.size(); i++) {
            last[s[i] - 'a'] = i;
        }
        int start = 0, end = 0;
        for (int i = 0; i < s.size(); i++) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                res.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return res;

=======

        vector<int> last(26,0);
        for(int i=0;i<s.size();i++){
            last[s[i]-'a']=i;
        }
        int start=0,end=0;
        vector<int> res;
        for(int i=0;i<s.size();i++){
            end=max(end,last[s[i]-'a']);
            if(i==end){
                res.push_back(end-start+1);
                start=i+1;
            }
        }
        return res;

=======

        vector<int> result;
        unordered_map<char, int> last_index;
        for (int i = 0; i < s.size(); ++i) {
            last_index[s[i]] = i;
        }
        int start = 0;
        int end = 0;
        for (int i = 0; i < s.size(); ++i) {
            end = max(end, last_index[s[i]]);
            if (i == end) {
                result.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return result;

=======

        vector<int> ans;
        unordered_map<char, int> mp;
        for(int i = 0; i < s.size(); i++) {
            mp[s[i]] = i;
        }
        int start = 0, end = 0;
        for(int i = 0; i < s.size(); i++) {
            end = max(end, mp[s[i]]);
            if(i == end) {
                ans.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return ans;

=======

        vector<int> res;
        int n = s.size();
        int start = 0;
        int end = 0;
        for (int i = 0; i < n; i++) {
            end = max(end, s.find_last_of(s[i]));
            if (i == end) {
                res.push_back(i - start + 1);
                start = i + 1;
            }
        }
        return res;

=======

        vector<int> ret;
        int len = s.length();
        if (len == 0) {
            return ret;
        }
        int start = 0, end = 0;
        for (int i = 0; i < len; ++i) {
            int last = s.find_last_of(s[i]);
            if (last > end) {
                end = last;
            }
            if (i == end) {
                ret.push_back(end - start + 1);
                start = end + 1;
            }
        }
        return ret;

=======

        vector<int> res;
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {
            int last = s.rfind(s[i]);
            if (last > max) {
                max = last;
            }
            if (i == max) {
                res.push_back(max - start + 1);
                start = max + 1;
            }
        }
        return res;
