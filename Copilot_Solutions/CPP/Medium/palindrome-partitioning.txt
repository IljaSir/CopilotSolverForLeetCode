Synthesizing 10/10 solutions

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(res, path, s, 0);
        return res;
    }
    void dfs(vector<vector<string>>& res, vector<string>& path, string& s, int start) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (!isPalindrome(s, start, i)) continue;
            path.push_back(s.substr(start, i - start + 1));
            dfs(res, path, s, i + 1);
            path.pop_back();
        }
    }
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) return false;
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, path, res);
        return res;
    }
    void dfs(string &s, int start, vector<string> &path, vector<vector<string>> &res) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); ++i) {
            if (isPalindrome(s, start, i)) {
                path.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, path, res);
                path.pop_back();
            }
        }
    }
    bool isPalindrome(string &s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) return false;
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(res, path, s, 0);
        return res;
    }
    void dfs(vector<vector<string>>& res, vector<string>& path, string& s, int start) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (!isPalindrome(s, start, i)) continue;
            path.push_back(s.substr(start, i - start + 1));
            dfs(res, path, s, i + 1);
            path.pop_back();
        }
    }
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) return false;
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, path, res);
        return res;
    }
    void dfs(string s, int start, vector<string> &path, vector<vector<string>> &res) {
        if (start == s.size()) {
            res.push_back(path);;
        vector<string> path;
        dfs(s, res, path, 0);
        retrn res;
    }
    void dfs(string& s, vector<vector<string>>& res, vector<string>& path, int start) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (!isPaindrome(s, start, i)) continue;
            path.push_back(s.substr(start, i - start + 1));
            dfs(s, res, path, i + 1);
            pah.pop_back()
        }
    }
    bool isPalindrome(string& s, int l, int r) {
        while (l < r) {
            if (s[l] != s[r]) return false;
            l++; r--;
        }
        return true;

=======

        vector<    return;> result;
        vector<string>
        }
        for (int i = start; i < s.size(); i++) {
            if (!isPalindrome(s, start, i)) continue;
            path.push_back(s.substr(start, i - start + 1));
            dfs(s, i + 1, path, res);
            path.pop_back();
        }
    }
    bool isPalindrome(string s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) return false;
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, path, res);
        return res;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(s, res, path, 0);
        return res
        }
        return true;

=======

        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, path, res);
        return res;
    }
    
    void dfs(string s, int start, vector<string> &path, vector<vector<string>> &res) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (isPalindrome(s, start, i)) {
                path.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, path, res);
                path.pop_back();
            }
        }
    }
    
    bool isPalindrome(string s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            start++;
            end--;
        }
        return true;

=======

        vector<vector<string>> result;
        vector<string> current;
        dfs(0, s, current, result);
        return result;
    }
    
    void dfs(int start, string& s, vector<string>& current, vector<vector<string>>& result) {
        if (start == s.size()) {
            result.push_back(current);
            return;
        }
        
        for (int i = start; i < s.size(); ++i) {
            if (isPalindrome(s, start, i)) {
                current.push_back(s.substr(start, i - start + 1));
                dfs(i + 1, s, current, result);
                current.pop_back();
            }
        }
    }
    
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            ++start;
            --end;
        }
        return true;

=======

        int n = s.length();
        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, n, res, path);
        return res;
    }
    
    void dfs(string s, int start, int n, vector<vector<string>>& res, vector<string>& path) {
        if (start == n) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < n; i++) {
            if (isPalindrome(s, start, i)) {
                path.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, n, res, path);
                path.pop_back();
            }
        }
    }
    
    bool isPalindrome(string s, int low, int high) {
        while (low < high) {
            if (s[low] != s[high]) {
                return false;
            }
            low++;
            high--;
        }
        return true;

=======

        int n = s.size();
        vector<vector<string>> result;
        vector<string> path;
        dfs(s, 0, n, result, path);
        return result;
    }
    void dfs(string s, int start, int n, vector<vector<string>>& result, vector<string>& path) {
        if (start == n) {
            result.push_back(path);
            return;
        }
        for (int i = start; i < n; ++i) {
            if (isPalindrome(s, start, i)) {
                path.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, n, result, path);
                path.pop_back();
            }
        }
    }
    bool isPalindrome(string s, int start, int end) {
        while (start < end) {
            if (s[start++] != s[end--]) {
                return false;
            };
    }
    void dfs(string& s, vector<vector<string>>& res, vector<string>& path, int start) {
        if (start == s.size()) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < s.size(); i++) {
            if (!isPalindrome(s, start, i)) continue;
            path.push_back(s.substr(start, i - start + 1));
            dfs(s, res, path, i + 1);
            path.pop_back();
        }
    }
    bool isPalindrome(string& s, int l, int r) {
        while (l < r) {
            if (s[l] != s[r]) return false;
            l++; r--;
        }
        return true;

=======

        vector<vector<string>> result;
        vector<string> path;
        dfs(s, 0, path, result);
        return result;
    }
    
    void dfs(string& s, int start, vector<string>& path, vector<vector<string>>& result) {
        if (start == s.size()) {
            result.push_back(path);
            return;
        }
        
        for (int i = start; i < s.size(); ++i) {
            if (!isPalindrome(s, start, i)) {
                continue;
            }
            path.push_back(s.substr(start, i - start + 1));
            dfs(s, i + 1, path, result);
            path.pop_back();
        }
    }
    
    bool isPalindrome(string& s, int start, int end) {
        while (start < end) {
            if (s[start] != s[end]) {
                return false;
            }
            ++start;
            --end;
        }
        return true;

=======

        int n = s.length();
        vector<vector<string>> res;
        vector<string> path;
        dfs(s, 0, n, res, path);
        return res;
    }
    
    void dfs(string s, int start, int n, vector<vector<string>>& res, vector<string>& path) {
        if (start == n) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < n; i++) {
            if (isPalindrome(s, start, i)) {
                path.push_back(s.substr(start, i - start + 1));
                dfs(s, i + 1, n, res, path);
                path.pop_back();
            }
        }
    }
    
    bool isPalindrome(string s, int low, int high) {
        while (low < high) {
            if (s[low] != s[high]) {
                return false;
            }
            low++;
            high--;
        }
        return true;
