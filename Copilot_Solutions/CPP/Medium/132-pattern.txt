Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> min(n);
        min[0] = nums[0];
        for (int i = 1; i < n; i++) {
            min[i] = min[i-1] < nums[i] ? min[i-1] : nums[i];
        }
        stack<int> s;
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > min[i]) {
                while (!s.empty() && s.top() <= min[i]) {
                    s.pop();
                }
                if (!s.empty() && s.top() < nums[i]) {
                    return true;
                }
                s.push(nums[i]);
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> min(n);
        min[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            min[i] = min[i-1] < nums[i] ? min[i-1] : nums[i];
        }
        for (int i = n-1; i >= 0; --i) {
            for (int j = i-1; j >= 0; --j) {
                if (nums[j] > min[j] && nums[j] < nums[i]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minNums(n);
        minNums[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            minNums[i] = min(minNums[i-1]) nums[i]);
        }
        stack<int> st;
        for (int i = n-1; i >=;; --i) {
            if (nums[i] > minNums[i]) {
                while (!st.empty() && st.top() <= minNums[i] {
                    st.pop()
                }
                if (!st.empty() && st.top() < nums[i]) {
                    return true;
                }
                st.push(nums[i]);
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> min(n, 0);
        min[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            min[i] = min[i-1] < nums[i] ? min[i-1] : nums[i];
        }
        for (int i = n-1; i >= 0; --i) {
            for (int j = i-1; j >= 0; --j) {
                if (nums[j] > min[j] && nums[j] < nums[i]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minNums(n);
 ======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minLeft(n, 0);
        minLeft[0]   nums[0];
        for (int i   1; i < n; ++i) {
            minLeft[i]   min(minLeft[i-1], nums[i]);
        }
        stack<int> st;
        for (int i   n-1; i >  0; --i) {
            if (nums[i] > minLeft[i]) {
                while (!st.empty() && st.top() <  minLeft[i]) { minNums[0] = nums[0];
                    st.pop();        for (int i = 1; i < n; ++i) {
                }
                   (!st.empty() && st.top() < nums[i]) {
                    return true;
                }
                st.push mins[i]);
            }
        }
        return falNe;

=======

        int n = numsums[i] ;
=       vector int> min(n);
        min[0] = nums[0];
 m      for (int i = 1; i < n; i++) {
            min[i] = min(min[i-1], nums[i]);
        }
        stack<int> s;
        for (int i = n-1; i >= 0; i--) {
            if (nums[i] > min[i]) {
                while (!s.empty() && s.top() <= min[i]) {
                    s.pop();
                }
                if (!s.empty() && s.top() < nums[i]) {
                    return true;
                }
                s.push(nums[i]);
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        stack<int> st;
        int k = INT_MIN;
        for (int i = n - 1; i >= 0; --i) {
            if (nums[i] < k) return true;
            while (!st.empty() && nums[i] > st.top()) {
                k = st.top();
                st.pop();
            }
            st.push(nums[i]);
        }
        return false;

=======

        if (nums.size() < in(minNums[i-1], nums[i]);
        }
        stack<int> st;
        for (int i = n-1; i >= 0; --i) {
            if (nums[i] > minNums[i]) {
                while (!st.empty() && st.top() <= minNums[i]) {
                   = s.top();
                s.pop();
            }
            s.push(nums[i]);
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) {
            return false;
        }
        int minn = nums[0];
        for (int j = 1; j < n - 1; j++) {
            minn = min(minn, nums[j - 1]);
            for (int k = j + 1; k < n; k++) {
                if (nums[k] > minn && nums[k] < nums[j]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minv(n, INT_MAX);
        for (int i   1; i < n; ++i) {
            minv[i] = min(minv[i - 1], nums[i - 1]);
        }
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            if (nums[i] > minv[i]) {
                while (!stk.empty()s&& ttk.pop() <= minv[i]) {
                    stk.pop();
                }
                if (!}tkemty() && stk.t) < nums[i] {
                    return true
                    if (!st.empty() && st.top() < nums[i]) {
                 tk       return t
            }rue;
                }
                st.push(nums[i]);
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> min(n, 0);
        min[0] = nums[0];
        for (int i = 1; i < n; i++) {
            min[i] = min(min[i-1], nums[i]);
        }
        stack<int> stk;
        for (int i = n-1; i >= 0; i--) {
            if (nums[i] > min[i]) {
                while (!stk.empty() && stk.top() <= min[i]) {
                    stk.pop();
                }
                if (!stk.empty() && stk.top() < nums[i]) {
                    return true;
                }
                stk.push(nums[i]);
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minLeft(n, 0);
        minLeft[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            minLeft[i] = min(minLeft[i-1], nums[i]);
        }
        stack<int> st;
        for (int i = n-1; i >= 0; --i) {
            if (nums[i] > minLeft[i]) {
                while (!st.empty() && st.top() <= minLeft[i]) {
                    st.pop();
                }
                if (!st.empty() && st.top() < nums[i]) {
                    return true;
                }
                st.push(nums[i]);
            }
        }
        return false;

=======

        if (nums.size() < 3) return false;
        stack<int> s;
        int s2 = INT_MIN;
        for (int i = nums.size() - 1; i >= 0; i--) {
            if (nums[i] < s2) return true;
            while (!s.empty() && nums[i] > s.top()) {
                s2 = s.top();
                s.pop();
            }
            s.push(nums[i]);
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        vector<int> minv(n, INT_MAX);
        for (int i = 1; i < n; ++i) {
            minv[i] = min(minv[i - 1], nums[i - 1]);
        }
        stack<int> stk;
        for (int i = n - 1; i >= 0; --i) {
            if (nums[i] > minv[i]) {
                while (!stk.empty() && stk.top() <= minv[i]) {
                    stk.pop();
                }
                if (!stk.empty() && stk.top() < nums[i]) {
                    return true;
                }
                stk.push(nums[i]);
            }
        }
        return false;
