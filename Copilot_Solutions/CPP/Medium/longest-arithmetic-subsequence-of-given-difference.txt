Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        int res = 0;
        for (int a : arr) {
            m[a] = m[a - difference] + 1;
            res = max(res, m[a]);
        }
        return res;

=======

        unordered_map<int, int> dp;
        int ans = 0;
        for (int i = 0; i < arr.size(); ++i) {
            dp[arr[i]] = dp[arr[i] - difference] + 1;
            ans = max(ans, dp[arr[i]]);
        }
        return ans;

=======

        unordered_map<int, int> mp;
        int ans = 0;
        for (int i = 0; i < arr.size(); i++) {
            mp[arr[i]] = mp[arr[i] - difference] + 1;
            ans = max(ans, mp[arr[i]]);
        }
        return ans;

=======

        int n = arr.size();
        unordered_map<int, int> dp;
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            dp[arr[i]] = dp[arr[i] - difference] + 1;
            ans = max(ans, dp[arr[i]]);
        }
        return ans;

=======

        unordered_map<int, int> mp;
        int ans = 0;
        for (int i : arr) {
            mp[i] = mp[i - difference] + 1;
            ans = max(ans, mp[i]);
        }
        return ans;

=======

        int n = arr.size(), ans = 0;
        unordered_map<int, int> dp;
        for (int i = 0; i < n; ++i) {
            dp[arr[i]] = dp[arr[i] - difference] + 1;
            ans = max(ans, dp[arr[i]]);
        }
        return ans;

=======

        int n = arr.size();
        unordered_map<int, int> dp;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (dp.find(arr[i] - difference) != dp.end()) {
                dp[arr[i]] = dp[arr[i] - difference] + 1;
            } else {
                dp[arr[i]] = 1;
            }
            ans = max(ans, dp[arr[i]]);
        }
        return ans;

=======

        int n = arr.size();
        if (n == 0) return 0;
        vector<int> dp(n, 1);
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            if (m.find(arr[i] - difference) != m.end()) {
                dp[i] = dp[m[arr[i] - difference]] + 1;
            }
            m[arr[i]] = i;
        }
        return *max_element(dp.begin(), dp.end());

=======

        unordered_map<int, int> mp;
        int n = arr.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            mp[arr[i]] = max(mp[arr[i]], mp[arr[i] - difference] + 1);
            ans = max(ans, mp[arr[i]]);
        }
        return ans;

=======

        int ans = 1;
        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); ++i) {
            int x = arr[i];
            int y = x - difference;
            if (m.find(y) != m.end()) {
                m[x] = m[y] + 1;
            } else {
                m[x] = 1;
            }
            ans = max(ans, m[x]);
        }
        return ans;
