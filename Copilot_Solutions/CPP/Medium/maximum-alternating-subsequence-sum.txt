Synthesizing 10/10 solutions

=======

        int n = nums.size();
        long long dp[n][2];
        dp[0][0] = nums[0];
        dp[0][1] = 0;
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + nums[i]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - nums[i]);
        }
        return max(dp[n-1][0], dp[n-1][1]);

=======

        int n = nums.size();
        vector<long long> dp(n, 0);
        dp[0] = nums[0];
        long long res = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i];
            if (i % 2 == 0) {
                dp[i] += dp[i - 1];
            } else {
                dp[i] = max(dp[i], dp[i - 1] - nums[i]);
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        long long odd = 0, even = 0;
        for (int num : nums) {
            odd = max(odd, even + num);
            even = odd - num;
        }
        return odd;

=======

        long long even = 0, odd = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                even += nums[i];
                even = max(even, odd);
            } else {
                odd += nums[i];
                odd = max(even, odd);
            }
        }
        return max(even, odd);

=======

        long long odd = 0, even = 0;
        for (int i = 0; i < nums.size(); i++) {
            odd = max(odd, even + nums[i]);
            even = max(even, odd - nums[i]);
        }
        return odd;

=======

        long long odd = 0, even = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (i % 2 == 0) {
                even = max(even + nums[i], odd);
            } else {
                odd = max(odd + nums[i], even);
            }
        }
        return max(odd, even);

=======

        long long odd = 0, even = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i % 2 == 0) {
                even = max(even + nums[i], odd);
            } else {
                odd = max(odd + nums[i], even);
            }
        }
        return max(odd, even);

=======

        long long dp[2];
        dp[0] = nums[0];
        dp[1] = 0;
        for (int i = 1; i < nums.size(); i++) {
            dp[i % 2] = max(dp[i % 2], dp[(i - 1) % 2] + nums[i]);
            dp[(i + 1) % 2] = max(dp[(i + 1) % 2], dp[(i - 1) % 2] - nums[i]);
        }
        return max(dp[0], dp[1]);

=======

        long long odd = 0, even = 0;
        for (auto num : nums) {
            odd = max(odd, even + num);
            even = max(even, odd - num);
        }
        return odd;

=======

        long long dp[2] = {0, 0};
        for (int i = 0; i < nums.size(); i++) {
            dp[i % 2] = max(dp[i % 2], dp[(i + 1) % 2] + nums[i]);
        }
        return max(dp[0], dp[1]);
