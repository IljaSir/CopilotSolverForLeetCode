Synthesizing 10/10 solutions

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int product = nums[i] * nums[j];
                ++mp[product];
            }
        }
        int res = 0;
        for (auto [key, val] : mp) {
            res += 4 * val * (val - 1);
        }
        return res;

=======

        unordered_map<int, int> m;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                m[nums[i] * nums[j]]++;
            }
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            int n = it->second;
            ans += n * (n - 1) * 4;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                ++mp[nums[i] * nums[j]];
            }
        }
        for (auto& [k, v] : mp) {
            res += v * (v - 1) / 2 * 8;
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                mp[nums[i] * nums[j]]++;
            }
        }
        for (auto &x : mp) {
            ans += x.second * (x.second - 1) * 4;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                mp[nums[i] * nums[j]]++;
            }
        }
        for (auto& p : mp) {
            res += p.second * (p.second - 1) * 4;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                mp[nums[i] * nums[j]]++;
            }
        }
        for (auto& [k, v] : mp) {
            res += v * (v - 1) / 2 * 8;
        }
        return res;

=======

        unordered_map<int, int> mp;
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                ++mp[nums[i] * nums[j]];
            }
        }
        for (auto &p : mp) {
            int cnt = p.second;
            ans += cnt * (cnt - 1) / 2 * 8;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                m[nums[i] * nums[j]]++;
            }
        }
        for (auto i : m) {
            res += i.second * (i.second - 1) * 4;
        }
        return res;

=======

        unordered_map<int, int> m;
        int res = 0, n = nums.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                res += m[nums[i] * nums[j]]++ * 8;
            }
        }
        return res;

=======

        unordered_map<int, int> map;
        int count = 0;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int product = nums[i] * nums[j];
                if (map.find(product) != map.end()) {
                    count += map[product] * 8;
                }
                ++map[product];
            }
        }
        return count;
