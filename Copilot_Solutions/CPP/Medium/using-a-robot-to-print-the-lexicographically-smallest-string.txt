Synthesizing 10/10 solutions (Duplicates hidden)

=======

        string t = "";
        int i = 0;
        int j = s.length() - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s[i+k] < s[j-k]) {
                    left = true;
                    break;
                } else if (s[i+k] > s[j-k]) {
                    left = false;
                    break;
                }
            }
            if (left) {
                t.push_back(s[i]);
                i++;
            } else {
                t.push_back(s[j]);
                j--;
            }
        }
        return t;

=======

        string t = "";
        int n = s.size();
        int i = 0, j = n - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s[i + k] < s[j - k]) {
                    left = true;
                    break;
                } else if (s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) t += s[i++];
            else t += s[j--];
        }
        return t;

=======

        string t;
        int n = s.size();
        int i = 0;
        int j = n - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s[i + k] < s[j - k]) {
                    left = true;
                    break;
                }
                if (s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) {
                t.push_back(s[i++]);
            } else {
                t.push_back(s[j--]);
            }
        }
        return t;

=======

        string r;
        int i = 0, j = s.size() - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; ++k) {
                if (s[i + k] < s[j - k]) {
                    left = true;
                    break;
                } else if (s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) r.push_back(s[i++]);
            else r.push_back(s[j--]);
        }
        return r;

=======

        int n = s.length();
        string t = "";
        int i = 0;
        int j = n - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s[i + k] < s[j - k]) {
                    left = true;
                    break;
                } else if (s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) {
                t += s[i++];
            } else {
                t += s[j--];
            }
        }
        return t;

=======

        string t = "";
        int n = s.size();
        int i = 0;
        int j = n - 1;
        while (i <= j) {
            bool left = false;
            for (int k = 0; i + k <= j; k++) {
                if (s[i + k] < s[j - k]) {
                    left = true;
                    break;
                } else if (s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if (left) {
                t += s[i++];
            } else {
                t += s[j--];
            }
        }
        return t;

=======

        string t = "";
        int n = s.size();
        int i = 0, j = n - 1;
        while(i <= j) {
            bool left = false;
            for(int k = 0; i + k <= j; k++) {
                if(s[i + k] < s[j - k]) {
                    left = true;
                    break;
                }
                else if(s[i + k] > s[j - k]) {
                    left = false;
                    break;
                }
            }
            if(left) {
                t += s[i++];
            }
            else {
                t += s[j--];
            }
        }
        return t;

=======

        string t;
        int n = s.size();
        int i = 0;
        while (i < n) {
            if (t.empty() || s[i] < t.back()) {
                t += s[i];
                ++i;
            } else {
                t.pop_back();
            }
        }
        return t;

=======

        string ans = "";
        while (s.size() > 0) {
            if (s.size() == 1) {
                ans += s[0];
                s = "";
            } else if (s[0] < s[s.size() - 1]) {
                ans += s[0];
                s = s.substr(1);
            } else if (s[0] > s[s.size() - 1]) {
                ans += s[s.size() - 1];
                s = s.substr(0, s.size() - 1);
            } else {
                int i = 1;
                while (i < s.size() && s[0] == s[i]) {
                    i++;
                }
                if (i == s.size()) {
                    ans += s[0];
                    s = s.substr(1);
                } else if (s[i] > s[0]) {
                    ans += s[s.size() - 1];
                    s = s.substr(0, s.size() - 1);
                } else {
                    ans += s[0];
                    s = s.substr(1);
                }
            }
        }
        return ans;
