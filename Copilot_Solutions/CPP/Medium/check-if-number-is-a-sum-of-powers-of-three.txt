Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (n) {
            if (n % 3 == 2) return false;
            n /= 3;
        }
        return true;

=======

        int i = 0;
        while (n > 0) {
            if (n % 3 == 2) return false;
            n /= 3;
            i++;
        }
        return true;

=======

        int i = 0;
        while (n > 0) {
            if (n % 3 == 2) {
                return false;
            }
            n /= 3;
            i++;
        }
        return true;

=======

        int x = 1;
        while (x <= n) {
            x *= 3;
        }
        while (x > 1) {
            x /= 3;
            if (n >= x) {
                n -= x;
            }
        }
        return n == 0;

=======

        int num = 1;
        while (num < n) {
            num *= 3;
        }
        while (num > 0) {
            if (num <= n) {
                n -= num;
            }
            num /= 3;
        }
        return n == 0;

=======

        int k = 0;
        while (n > 0) {
            if (n % 3 == 2) {
                return false;
            }
            if (n % 3 == 1) {
                k++;
            }
            n /= 3;
        }
        return k <= 15;

=======

        if(n==1)return true;
        if(n%3==2)return false;
        return checkPowersOfThree(n/3);

=======

        return check(n, 0);
