Synthesizing 10/10 solutions

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                string cur = q.front();
                q.pop();
                if (cur == target) return step;
                for (int j = 0; j < 4; j++) {
                    string up = cur, down = cur;
                    up[j] = up[j] == '9' ? '0' : up[j] + 1;
                    down[j] = down[j] == '0' ? '9' : down[j] - 1;
                    if (!dead.count(up) && !visited.count(up)) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (!dead.count(down) && !visited.count(down)) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                string cur = q.front();
                q.pop();
                if (dead.count(cur)) continue;
                if (cur == target) return step;
                for (int j = 0; j < 4; ++j) {
                    string up = cur;
                    up[j] = (up[j] == '9' ? '0' : up[j] + 1);
                    if (!visited.count(up)) {
                        q.push(up);
                        visited.insert(up);
                    }
                    string down = cur;
                    down[j] = (down[j] == '0' ? '9' : down[j] - 1);
                    if (!visited.count(down)) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            ++step;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                string cur = q.front();
                q.pop();
                if (cur == target) return step;
                for (int j = 0; j < 4; ++j) {
                    string up = cur;
                    string down = cur;
                    up[j] = up[j] == '9' ? '0' : up[j] + 1;
                    down[j] = down[j] == '0' ? '9' : down[j] - 1;
                    if (!visited.count(up) && !dead.count(up)) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (!visited.count(down) && !dead.count(down)) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            ++step;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int step = 0;
        while (!q.empty()) {
            int sz = q.size();
            for (int i = 0; i < sz; i++) {
                string cur = q.front(); q.pop();
                if (cur == target) return step;
                for (int j = 0; j < 4; j++) {
                    string up = cur, down = cur;
                    up[j] = up[j] == '9' ? '0' : up[j] + 1;
                    down[j] = down[j] == '0' ? '9' : down[j] - 1;
                    if (!visited.count(up) && !dead.count(up)) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (!visited.count(down) && !dead.count(down)) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;
        unordered_set<string> seen = {"0000"};
        queue<string> q;
        q.push("0000");
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                string cur = q.front();
                q.pop();
                if (cur == target) return step;
                for (int j = 0; j < 4; j++) {
                    string up = cur;
                    string down = cur;
                    up[j] = (up[j] - '0' + 1) % 10 + '0';
                    down[j] = (down[j] - '0' + 9) % 10 + '0';
                    if (!seen.count(up) && !dead.count(up)) {
                        q.push(up);
                        seen.insert(up);
                    }
                    if (!seen.count(down) && !dead.count(down)) {
                        q.push(down);
                        seen.insert(down);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000") > 0) return -1;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                string cur = q.front();
                q.pop();
                if (cur == target) return steps;
                for (int j = 0; j < 4; ++j) {
                    string up = cur;
                    string down = cur;
                    up[j] = (up[j] - '0' + 1) % 10 + '0';
                    down[j] = (down[j] - '0' + 9) % 10 + '0';
                    if (visited.count(up) == 0 && dead.count(up) == 0) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (visited.count(down) == 0 && dead.count(down) == 0) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            ++steps;
        }
        return -1;

=======

        unordered_set<string> dead(deadends.begin(), deadends.end());
        if (dead.count("0000")) return -1;
        queue<string> q;
        q.push("0000");
        unordered_set<string> seen = { "0000" };
        int step = 0;
        while (!q.empty()) {
            ++step;
            for (int sz = q.size(); sz > 0; --sz) {
                string cur = q.front(); q.pop();
                for (int i = 0; i < 4; ++i) {
                    for (int d = -1; d <= 1; d += 2) {
                        string nxt = cur;
                        nxt[i] = (nxt[i] - '0' + d + 10) % 10 + '0';
                        if (nxt == target) return step;
                        if (!dead.count(nxt) && !seen.count(nxt)) {
                            q.push(nxt);
                            seen.insert(nxt);
                        }
                    }
                }
            }
        }
        return -1;

=======

        int res = 0;
        unordered_set<string> visited(deadends.begin(), deadends.end());
        if (visited.count("0000")) return -1;
        queue<string> q;
        q.push("0000");
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                string s = q.front();
                q.pop();
                if (s == target) return res;
                for (int i = 0; i < 4; i++) {
                    string s1 = s, s2 = s;
                    s1[i] = s1[i] == '9' ? '0' : s1[i] + 1;
                    s2[i] = s2[i] == '0' ? '9' : s2[i] - 1;
                    if (!visited.count(s1)) {
                        q.push(s1);
                        visited.insert(s1);
                    }
                    if (!visited.count(s2)) {
                        q.push(s2);
                        visited.insert(s2);
                    }
                }
            }
            res++;
        }
        return -1;

=======

        unordered_set<string> deadend;
        for (auto& s : deadends) deadend.insert(s);
        if (deadend.count("0000")) return -1;
        int step = 0;
        unordered_set<string> visited;
        queue<string> q;
        q.push("0000");
        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; ++i) {
                string s = q.front(); q.pop();
                if (s == target) return step;
                visited.insert(s);
                for (int j = 0; j < 4; ++j) {
                    string s1 = s, s2 = s;
                    s1[j] = (s1[j] - '0' + 1) % 10 + '0';
                    s2[j] = (s2[j] - '0' + 9) % 10 + '0';
                    if (!visited.count(s1) && !deadend.count(s1)) {
                        q.push(s1);
                        visited.insert(s1);
                    }
                    if (!visited.count(s2) && !deadend.count(s2)) {
                        q.push(s2);
                        visited.insert(s2);
                    }
                }
            }
            ++step;
        }
        return -1;

=======

        int ans = 0;
        unordered_set<string> visited;
        for (auto& deadend: deadends) {
            visited.insert(deadend);
        }
        if (visited.count("0000") > 0) {
            return -1;
        }
        queue<string> q;
        q.push("0000");
        visited.insert("0000");
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto cur = q.front();
                q.pop();
                if (cur == target) {
                    return ans;
                }
                for (int j = 0; j < 4; j++) {
                    string up = cur;
                    string down = cur;
                    up[j] = up[j] == '9' ? '0' : up[j] + 1;
                    down[j] = down[j] == '0' ? '9' : down[j] - 1;
                    if (visited.count(up) == 0) {
                        q.push(up);
                        visited.insert(up);
                    }
                    if (visited.count(down) == 0) {
                        q.push(down);
                        visited.insert(down);
                    }
                }
            }
            ans++;
        }
        return -1;
