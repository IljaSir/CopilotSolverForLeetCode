Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = n - 1; i >= 0; --i) {
            sum -= nums[i];
            ++res;
            if (sum * 2 <= nums[i]) {
                break;
            }
        }
        return res;
    }
    int minOperations(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        if (sum % 2 != 0) {
            return halveArray(nums);
        }
        int target = sum / 2;
        int res = 0;
        for (int i = n - 1; i >= 0; --i) {
            sum -= nums[i];
            ++res;
            if (sum <= target) {
                break;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        int half = sum / 2;
        int n = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            if (sum <= half) {
                break;
            }
            sum -= nums[i];
            n++;
        }
        return n;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        int cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum -= nums[i];
            cnt++;
            if (sum < nums[i]) {
                break;
            }
        }
        return cnt;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum / 2;
        if (sum % 2 == 0) {
            target--;
        }
        sort(nums.begin(), nums.end());
        int ans = 0;
        int cur = 0;
        for (int i = n - 1; i >= 0; i--) {
            cur += nums[i];
            ans++;
            if (cur > target) {
                break;
            }
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum / 2;
        int count = 0;
        vector<int> dp(target + 1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = target; j >= nums[i]; j--) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        return n - dp[target];
    }
    int minOperations(vector<int>& nums) {
        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum / 2;
        int count = 0;
        vector<int> dp(target + 1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = target; j >= nums[i]; j--) {
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
            }
        }
        return n - dp[target];

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int half = sum / 2;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > half) {
                int tmp = nums[i];
                while (tmp > half) {
                    tmp /= 2;
                    ans++;
                }
                nums[i] = tmp;
            }
        }
        sort(nums.begin(), nums.end());
        int i = 0;
        while (sum > half) {
            sum -= nums[i];
            ans++;
            i++;
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        int res = 0;
        int cur = 0;
        for(int i = n - 1; i >= 0; i--) {
            cur += nums[i];
            res++;
            if(cur >= (sum + 1) / 2) {
                break;
            }
        }
        return res;

=======

        int sum = 0;
        for (int num: nums) {
            sum += num;
        }
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            sum -= nums[i];
            res++;
            if (sum <= 0) {
                return res;
            }
        }
        return res;
    }
    int minOperations(vector<int>& nums) {
        int sum = 0;
        for (int num: nums) {
            sum += num;
        }
        int res = 0;
        while (sum > 0) {
            sum /= 2;
            res++;
        }
        return res - halveArray(nums);

=======

        int n = nums.size();
        sort(nums.begin(), nums.end(), greater<int>());
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int half = sum / 2;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += 1;
            sum -= nums[i];
            if (sum <= half) {
                break;
            }
        }
        return ans;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int half = sum / 2;
        int cur = 0;
        int res = 0;
        sort(nums.begin(), nums.end(), greater<int>());
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            res++;
            if (cur > half) {
                break;
            }
        }
        return res;
