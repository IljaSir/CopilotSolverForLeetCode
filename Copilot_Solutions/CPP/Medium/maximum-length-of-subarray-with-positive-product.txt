Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> pos(n, 0);
        vector<int> neg(n, 0);
        if (nums[0] > 0) pos[0] = 1;
        if (nums[0] < 0) neg[0] = 1;
        int ans = pos[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] > 0) {
                pos[i] = pos[i-1] + 1;
                if (neg[i-1] > 0) neg[i] = neg[i-1] + 1;
            }
            if (nums[i] < 0) {
                neg[i] = pos[i-1] + 1;
                if (neg[i-1] > 0) pos[i] = neg[i-1] + 1;
            }
            ans = max(ans, pos[i]);
        }
        return ans;

=======

        int n = nums.size();
        int res = 0, pos = 0, neg = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                ++pos;
                if (neg > 0) ++neg;
            } else if (nums[i] < 0) {
                int tmp = pos;
                pos = neg > 0 ? neg + 1 : 0;
                neg = tmp + 1;
            } else {
                pos = neg = 0;
            }
            res = max(res, pos);
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        int pos = 0;
        int neg = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                pos = pos + 1;
                if (neg > 0) {
                    neg = neg + 1;
                }
            } else if (nums[i] < 0) {
                int tmp = neg;
                neg = pos + 1;
                pos = tmp + 1;
            } else {
                pos = 0;
                neg = 0;
            }
            ans = max(ans, pos);
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<int> pos(n, 0);
        vector<int> neg(n, 0);
        if (nums[0] > 0) pos[0] = 1;
        else if (nums[0] < 0) neg[0] = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > 0) {
                pos[i] = pos[i - 1] + 1;
                if (neg[i - 1] > 0) neg[i] = neg[i - 1] + 1;
            } else if (nums[i] < 0) {
                if (neg[i - 1] > 0) pos[i] = neg[i - 1] + 1;
                neg[i] = pos[i - 1] + 1;
            }
            res = max(res, pos[i]);
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        int positive = 0;
        int negative = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                positive = 0;
                negative = 0;
            } else if (nums[i] > 0) {
                positive++;
                negative = negative > 0 ? negative + 1 : 0;
            } else {
                int temp = positive;
                positive = negative > 0 ? negative + 1 : 0;
                negative = temp + 1;
            }
            ans = max(ans, positive);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int left = 0;
        int right = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                left++;
                right = right > 0 ? right + 1 : 0;
            } else if (nums[i] < 0) {
                int tmp = left;
                left = right > 0 ? right + 1 : 0;
                right = tmp + 1;
            } else {
                left = 0;
                right = 0;
            }
            ans = max(ans, left);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int firstNeg = -1;
        int firstPos = -1;
        int lastNeg = -1;
        int lastPos = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] < 0) {
                if (firstNeg == -1) firstNeg = i;
                lastNeg = i;
            } else if (nums[i] > 0) {
                if (firstPos == -1) firstPos = i;
                lastPos = i;
            } else {
                ans = max(ans, max(lastNeg - firstNeg, lastPos - firstPos));
                firstNeg = -1;
                firstPos = -1;
                lastNeg = -1;
                lastPos = -1;
            }
        }
        ans = max(ans, max(lastNeg - firstNeg, lastPos - firstPos));
        return ans;

=======

        int n = nums.size();
        int res = 0;
        int neg = 0;
        int lastNeg = -1;
        int firstNeg = -1;
        int firstPos = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] < 0) {
                neg++;
                if (firstNeg == -1) {
                    firstNeg = i;
                }
                lastNeg = i;
            } else if (nums[i] == 0) {
                neg = 0;
                lastNeg = -1;
                firstNeg = -1;
                firstPos = -1;
            } else {
                if (firstPos == -1) {
                    firstPos = i;
                }
            }
            if (neg % 2 == 0) {
                res = max(res, i - (firstNeg == -1 ? -1 : firstNeg));
            } else {
                res = max(res, i - lastNeg);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> maxp(n), maxn(n), minp(n), minn(n);
        for(int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                maxp[i] = i > 0 ? maxp[i-1] + 1 : 1;
                maxn[i] = i > 0 ? maxn[i-1] + 1 : 0;
                minp[i] = i > 0 ? minp[i-1] + 1 : 0;
                minn[i] = i > 0 ? minn[i-1] + 1 : 0;
            } else if (nums[i] < 0) {
                maxp[i] = i > 0 ? maxn[i-1] + 1 : 0;
                maxn[i] = i > 0 ? maxp[i-1] + 1 : 1;
                minp[i] = i > 0 ? minn[i-1] + 1 : 0;
                minn[i] = i > 0 ? minp[i-1] + 1 : 1;
            } else {
                maxp[i] = 0; maxn[i] = 0; minp[i] = 0; minn[i] = 0;
            }
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            ans = max(ans, maxp[i]);
        }
        return ans;

=======

        int n = nums.size();
        int maxLen = 0;
        int currLen = 0;
        int currNegCnt = 0;
        int lastNegIdx = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                maxLen = max(maxLen, currLen);
                currLen = 0;
                currNegCnt = 0;
                lastNegIdx = -1;
            }
            else if (nums[i] < 0) {
                currLen++;
                currNegCnt++;
                if (currNegCnt == 1) {
                    lastNegIdx = i;
                }
                else if (currNegCnt == 2) {
                    maxLen = max(maxLen, currLen - 2);
                    currLen = i - lastNegIdx;
                    currNegCnt = 1;
                }
            }
            else {
                currLen++;
            }
        }
        return max(maxLen, currLen);
