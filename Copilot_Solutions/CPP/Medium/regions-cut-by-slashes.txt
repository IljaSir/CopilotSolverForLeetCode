Synthesizing 6/10 solutions (Duplicates hidden)

=======

        int n = grid.size();
        DSU dsu(n * n * 4);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int idx = (i * n + j) * 4;
                if (i < n - 1) {
                    dsu.unionSet(idx + 2, idx + 4 * n);
                }
                if (j < n - 1) {
                    dsu.unionSet(idx + 1, idx + 4 + 3);
                }
                if (grid[i][j] != '/') {
                    dsu.unionSet(idx, idx + 1);
                    dsu.unionSet(idx + 2, idx + 3);
                }
                if (grid[i][j] != '\\') {
                    dsu.unionSet(idx, idx + 3);
                    dsu.unionSet(idx + 1, idx + 2);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n * n * 4; ++i) {
            if (dsu.findSet(i) == i) {
                ++ans;
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<vector<int>> g(n * 3, vector<int>(n * 3, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '/') {
                    g[i * 3][j * 3 + 2] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3] = 1;
                } else if (grid[i][j] == '\\') {
                    g[i * 3][j * 3] = g[i * 3 + 1][j * 3 + 1] = g[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n * 3; ++i) {
            for (int j = 0; j < n * 3; ++j) {
                if (g[i][j] == 0) {
                    dfs(g, i, j);
                    ++res;
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<int>>& g, int x, int y) {
        int n = g.size();
        if (x < 0 || x >= n || y < 0 || y >= n || g[x][y] == 1) {
            return;
        }
        g[x][y] = 1;
        dfs(g, x + 1, y);
        dfs(g, x - 1, y);
        dfs(g, x, y + 1);
        dfs(g, x, y - 1);

=======

        int n = grid.size();
        vector<vector<int>> g(n*3, vector<int>(n*3, 0));
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == '/'){
                    g[i*3][j*3+2] = g[i*3+1][j*3+1] = g[i*3+2][j*3] = 1;
                }
                else if(grid[i][j] == '\\'){
                    g[i*3][j*3] = g[i*3+1][j*3+1] = g[i*3+2][j*3+2] = 1;
                }
            }
        }
        int ans = 0;
        for(int i=0; i<n*3; i++){
            for(int j=0; j<n*3; j++){
                if(g[i][j] == 0){
                    ans++;
                    dfs(g, i, j);
                }
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> p(n * n * 4, -1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int idx = (i * n + j) * 4;
                if (i > 0) {
                    p[idx] = idx - 4 * n + 2;
                }
                if (j > 0) {
                    p[idx + 3] = idx - 3 - 1;
                }
                if (grid[i][j] == '/') {
                    p[idx + 2] = idx + 3;
                    p[idx + 1] = idx;
                } else if (grid[i][j] == '\\') {
                    p[idx + 2] = idx + 1;
                    p[idx + 3] = idx;
                } else {
                    p[idx + 2] = idx + 1;
                    p[idx + 1] = idx + 3;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n * n * 4; i++) {
            if (p[i] == -1) {
                res++;
                dfs(p, i);
            }
        }
        return res;
    }
    void dfs(vector<int>& p, int i) {
        if (p[i] == -1) {
            return;
        }
        int t = p[i];
        p[i] = -1;
        dfs(p, t);

=======

        int n = grid.size();
        int m = grid[0].size();
        int res = 0;
        vector<vector<int>> visited(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (visited[i][j] == 0) {
                    dfs(grid, visited, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    void dfs(vector<string>& grid, vector<vector<int>>& visited, int i, int j) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || visited[i][j] == 1) {
            return;
        }
        visited[i][j] = 1;
        if (grid[i][j] == '/') {
            dfs(grid, visited, i, j + 1);
            dfs(grid, visited, i + 1, j);
        } else if (grid[i][j] == '\\') {
            dfs(grid, visited, i, j - 1);
            dfs(grid, visited, i - 1, j);
        } else {
            dfs(grid, visited, i, j + 1);
            dfs(grid, visited, i + 1, j);
            dfs(grid, visited, i, j - 1);
            dfs(grid, visited, i - 1, j);
        }
