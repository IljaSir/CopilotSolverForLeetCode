Synthesizing 4/10 solutions

=======

        vector<vector<string>> result;
        sort(products.begin(), products.end());
        for (int i = 0; i < searchWord.size(); ++i) {
            vector<string> temp;
            for (int j = 0; j < products.size(); ++j) {
                if (products[j].size() > i && products[j][i] == searchWord[i]) {
                    temp.push_back(products[j]);
                }
                if (temp.size() == 3) {
                    break;
                }
            }
            result.push_back(temp);
        }
        return result;

=======

        vector<vector<string>> result;
        sort(products.begin(), products.end());
        for (int i = 1; i <= searchWord.size(); ++i) {
            string prefix = searchWord.substr(0, i);
            auto it = lower_bound(products.begin(), products.end(), prefix);
            vector<string> temp;
            for (int j = 0; j < 3 && it != products.end(); ++j) {
                if (it->substr(0, i) == prefix) {
                    temp.push_back(*it);
                    ++it;
                }
            }
            result.push_back(temp);
        }
        return result;

=======

        vector<vector<string>> result;
        int n = products.size();
        int m = searchWord.size();
        sort(products.begin(), products.end());
        for (int i = 0; i < m; ++i) {
            vector<string> tmp;
            for (int j = 0; j < n; ++j) {
                if (products[j][i] == searchWord[i]) {
                    tmp.push_back(products[j]);
                }
                if (tmp.size() == 3) {
                    break;
                }
            }
            result.push_back(tmp);
        }
        return result;

=======

        vector<vector<string>> result;
        sort(products.begin(), products.end());
        for (int i = 0; i < searchWord.size(); ++i) {
            vector<string> temp;
            for (auto& product : products) {
                if (product.size() > i && product[i] == searchWord[i]) {
                    temp.push_back(product);
                }
                if (temp.size() == 3) {
                    break;
                }
            }
            result.push_back(temp);
            products = temp;
        }
        return result;
