Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(people.begin(), people.end());
        int i = 0, j = people.size() - 1;
        int ans = 0;
        while (i <= j) {
            if (people[i] + people[j] <= limit) {
                ++i;
            }
            --j;
            ++ans;
        }
        return ans;

=======

        sort(people.begin(), people.end());
        int i = 0, j = people.size() - 1;
        int ans = 0;
        while (i <= j) {
            ans++;
            if (people[i] + people[j] <= limit) i++;
            j--;
        }
        return ans;

=======

        sort(people.begin(), people.end());
        int l = 0, r = people.size() - 1;
        int ans = 0;
        while (l <= r) {
            if (people[l] + people[r] <= limit) {
                l++;
                r--;
            } else {
                r--;
            }
            ans++;
        }
        return ans;

=======

        int ans = 0;
        sort(people.begin(), people.end());
        int i = 0, j = people.size() - 1;
        while (i <= j) {
            ans++;
            if (people[i] + people[j] <= limit) i++;
            j--;
        }
        return ans;

=======

        int n = people.size();
        sort(people.begin(), people.end());
        int l = 0, r = n - 1;
        int res = 0;
        while (l <= r) {
            if (people[l] + people[r] <= limit) {
                ++l;
            }
            --r;
            ++res;
        }
        return res;

=======

        int boatCount = 0;
        int i = 0, j = people.size() - 1;
        sort(people.begin(), people.end());
        while (i <= j) {
            if (people[i] + people[j] <= limit) {
                i++;
            }
            j--;
            boatCount++;
        }
        return boatCount;

=======

        int n = people.size();
        sort(people.begin(), people.end());
        int ans = 0;
        int l = 0, r = n - 1;
        while (l <= r) {
            ans ++;
            if (people[l] + people[r] <= limit) l ++;
            r --;
        }
        return ans;

=======

        int i=0, j=people.size()-1, count=0;
        sort(people.begin(), people.end());
        while(i<=j){
            if(people[i]+people[j]<=limit)
                i++;
            j--;
            count++;
        }
        return count;

=======

        vector<int> count(limit + 1, 0);
        for (int i = 0; i < people.size(); i++) {
            count[people[i]]++;
        }
        int result = 0;
        for (int i = 1, j = limit; i <= j;) {
            if (i == j) {
                result += count[i] / 2;
                if (count[i] % 2) {
                    result++;
                }
                break;
            }
            if (count[i] > 0 && count[j] > 0) {
                if (count[i] <= count[j]) {
                    result += count[i];
                    count[j] -= count[i];
                    count[i] = 0;
                    i++;
                } else {
                    result += count[j];
                    count[i] -= count[j];
                    count[j] = 0;
                    j--;
                }
            } else if (count[i] > 0) {
                i++;
            } else if (count[j] > 0) {
                j--;
            }
        }
        return result;
