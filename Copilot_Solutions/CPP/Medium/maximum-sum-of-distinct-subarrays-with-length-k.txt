Synthesizing 10/10 solutions

=======

        long long ans = 0;
        int n = nums.size();
        vector<long long> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        for (int i = 1; i <= n - k + 1; i++) {
            long long tmp = sum[i + k - 1] - sum[i - 1];
            ans = max(ans, tmp);
        }
        return ans;

=======

        long long sum = 0;
        int n = nums.size();
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        long long maxSum = sum;
        set<int> s(nums.begin(), nums.begin() + k);
        for (int i = k; i < n; i++) {
            sum += nums[i];
            sum -= nums[i - k];
            if (s.find(nums[i]) == s.end()) {
                maxSum = max(maxSum, sum);
                s.erase(nums[i - k]);
                s.insert(nums[i]);
            }
        }
        return maxSum;

=======

        long long res = 0;
        int n = nums.size();
        map<int, int> m;
        for (int i = 0; i < k; i++) {
            m[nums[i]]++;
        }
        long long sum = 0;
        for (auto it = m.rbegin(); it != m.rend(); it++) {
            sum += it->first;
        }
        res = sum;
        for (int i = k; i < n; i++) {
            m[nums[i-k]]--;
            if (m[nums[i-k]] == 0) {
                m.erase(nums[i-k]);
            }
            m[nums[i]]++;
            sum = 0;
            for (auto it = m.rbegin(); it != m.rend(); it++) {
                sum += it->first;
            }
            res = max(res, sum);
        }
        return res;

=======

        int n = nums.size();
        if (k == n) {
            long long sum = 0;
            for (int num : nums) {
                sum += num;
            }
            return sum;
        }
        vector<int> count(100001);
        long long sum = 0;
        int distinct = 0;
        for (int i = 0; i < k; i++) {
            if (count[nums[i]] == 0) {
                distinct++;
            }
            count[nums[i]]++;
            sum += nums[i];
        }
        long long ans = sum;
        for (int i = k; i < n; i++) {
            if (count[nums[i]] == 0) {
                distinct++;
            }
            count[nums[i]]++;
            sum += nums[i];
            count[nums[i - k]]--;
            if (count[nums[i - k]] == 0) {
                distinct--;
            }
            sum -= nums[i - k];
            if (distinct == k) {
                ans = max(ans, sum);
            }
        }
        return ans;

=======

        long long res = 0;
        int n = nums.size();
        unordered_map<int, int> m;
        for (int i = 0; i < k; ++i) {
            m[nums[i]]++;
            res += nums[i];
        }
        long long ans = res;
        for (int i = k; i < n; ++i) {
            res += nums[i] - nums[i - k];
            m[nums[i]]++;
            m[nums[i - k]]--;
            if (m[nums[i - k]] == 0) {
                m.erase(nums[i - k]);
            }
            if (m.size() == k) {
                ans = max(ans, res);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(1e5+1);
        long long sum = 0, res = 0;
        for (int i = 0; i < n; ++i) {
            if (i >= k) {
                --cnt[nums[i-k]];
                sum -= cnt[nums[i-k]] > 0 ? 0 : nums[i-k];
            }
            ++cnt[nums[i]];
            sum += cnt[nums[i]] > 1 ? 0 : nums[i];
            if (i >= k-1) res = max(res, sum);
        }
        return res;

=======

        long long res = 0;
        int n = nums.size();
        unordered_map<int, int> m;
        int i = 0;
        long long sum = 0;
        for (int j = 0; j < n; ++j) {
            if (m[nums[j]]++ == 0) sum += nums[j];
            if (j - i + 1 > k) {
                if (--m[nums[i++]] == 0) sum -= nums[i - 1];
            }
            if (j - i + 1 == k) res = max(res, sum);
        }
        return res;

=======

        int n = nums.size();
        int l = 0;
        int r = 0;
        long long sum = 0;
        long long ans = 0;
        unordered_map<int, int> mp;
        while(r < n) {
            if(mp[nums[r]] == 0) {
                sum += nums[r];
            }
            mp[nums[r]]++;
            if(r - l + 1 == k) {
                ans = max(ans, sum);
                if(mp[nums[l]] == 1) {
                    sum -= nums[l];
                }
                mp[nums[l]]--;
                l++;
            }
            r++;
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        vector<long long> sum(n+1,0);
        for(int i=1;i<=n;i++)
            sum[i] = sum[i-1] + nums[i-1];
        //for(int i=0;i<=n;i++)
        //    cout << sum[i] << " ";
        //cout << endl;
        for(int i=1;i<=n-k+1;i++){
            long long tmp = 0;
            for(int j=i;j<=n-k+1;j++){
                if(sum[j+k-1]-sum[j-1] > tmp)
                    tmp = sum[j+k-1]-sum[j-1];
            }
            if(tmp > ans)
                ans = tmp;
        }
        return ans;

=======

        const int N = nums.size();
        unordered_map<int, int> count;
        int distinct = 0;
        long long sum = 0;
        long long res = 0;
        for (int i = 0; i < N; ++i) {
            if (count[nums[i]]++ == 0) ++distinct;
            if (i >= k && --count[nums[i - k]] == 0) --distinct;
            if (distinct == k) res = max(res, sum += nums[i]);
            else if (distinct < k) sum += nums[i];
            else sum = nums[i], distinct = 1;
        }
        return res;
