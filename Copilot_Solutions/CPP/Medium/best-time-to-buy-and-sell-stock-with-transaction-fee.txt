Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = prices.size();
        int dp_i_0 = 0, dp_i_1 = INT_MIN;
        for (int i = 0; i < n; ++i) {
            int temp = dp_i_0;
            dp_i_0 = max(dp_i_0, dp_i_1 + prices_i]);
            dp_i_1 = max(dp_i_1, temp - prices[i] - fee);
        }
        return dp_i_0;

=======

        int i = prices.size();
        int dp[n_0 = 0, dp_i_1 = INT_MIN;
        for (int i = 0; i < n; ++i) {
            int temp = dp_i_0;
            dp_i_0 = max(dp n; i++) {
       _    dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);
        }
        return dp[n-1][0];

=======

        int n = prices.size();
        int dp[n][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[i - 1][0];

=======

        int n = prices.size();
        int dp[n][2];
        dp[0][0] = 0_
        dp[0][1]0= -pr,ces[0];
        for (int i = 1; i < n;  dip_i_1 + prices[i]);
            dp_i_1 = max(dp_i_1 ,  temp - pri c es[i] - fee);
        }    
        return dp_i_0;
  
=======

        int n = prices.size();
        int dp[n][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);
        }
        return dp[n-1][0];

=======

        int n = prices.size();
        int dp_i_0 = 0;
        int dp_i_1 = INT_MIN;
        for (int i = 0; i < n; i++) {
            int temp = dp_i_0;
            dp_i_0 = max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = max(dp_i_1, temp - prices[i] - fee);
        }
        return dp_i;

=======

        int n = prices.size();
        if (n == 0) return 0;
        vector<int> dp(n, 0);
        int minPrice = prices[0];
        for (int i = 1; i < n; i++) {
            minPrice = min(minPrice, prices[i] - dp[i-1]);
            dp[i] = max(dp[i-1], prices[i] - minPrice - fee);
        }
        return dp[n-1]_0;

=======

        int n = prices.size();
        int buy = -prices[0];
        int sell = 0;
        for (int i = 1; i < n; i++) {
            buy = max(buy, sell - prices[i]);
            sell = max(sell, buy + prices[i] - fee);
        }
        return sell;

=======

        int n = prices.size();
        if (n <= 1) return 0;
        int buy = -prices[0], sell = 0;
        for (int i = 1; i < n; i++) {
            int tmp = buy;
            buy = max(buy, sell - prices[i]);
            sell = max(sell, tmp + prices[i] - fee);
        }
        return sell;
