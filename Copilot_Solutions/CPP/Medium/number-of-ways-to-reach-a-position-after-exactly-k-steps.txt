Synthesizing 9/10 solutions

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(k + 1, vector<int>(1001, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; ++i) {
            for (int j = 1; j < 1001; ++j) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j + 1]) % mod;
            }
        }
        return dp[k][endPos];

=======

        int mod = 1e9 + 7;
        vector<vector<int>> dp(k + 1, vector<int>(1001, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j <= 1000; j++) {
                dp[i][j] = ((dp[i - 1][j - 1] + dp[i - 1][j + 1]) % mod + dp[i - 1][j]) % mod;
            }
        }
        return dp[k][endPos];

=======

        const int MOD = 1e9 + 7;
        vector<vector<long long>> dp(k + 1, vector<long long>(1001, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; ++i) {
            for (int j = 1; j <= 1000; ++j) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j + 1]) % MOD;
            }
        }
        return dp[k][endPos];

=======

        vector<vector<int>> dp(k+1, vector<int>(1001, 0));
        dp[0][startPos] = 1;
        int mod = 1e9+7;
        for (int i = 1; i <= k; ++i) {
            for (int j = 1; j <= 1000; ++j) {
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % mod;
            }
        }
        return dp[k][endPos];

=======

        int mod = 1000000007;
        vector<vector<long long>> dp(k + 1, vector<long long>(1001, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; ++i) {
            for (int j = 0; j <= 1000; ++j) {
                if (j > 0) {
                    dp[i][j] += dp[i - 1][j - 1];
                    dp[i][j] %= mod;
                }
                if (j < 1000) {
                    dp[i][j] += dp[i - 1][j + 1];
                    dp[i][j] %= mod;
                }
            }
        }
        return dp[k][endPos];

=======

        vector<vector<int>> dp(k + 1, vector<int>(2 * k + 1, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; ++i) {
            for (int j = 1; j < 2 * k + 1; ++j) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j + 1]) % 1000000007;
            }
        }
        return dp[k][endPos];

=======

        int mod = 1e9 + 7;
        int dp[1001][1001];
        memset(dp, 0, sizeof(dp));
        dp[startPos][0] = 1;
        for (int i = 0; i < k; i++) {
            for (int j = 1; j <= 1000; j++) {
                dp[j][i + 1] += dp[j - 1][i];
                dp[j][i + 1] %= mod;
                dp[j][i + 1] += dp[j + 1][i];
                dp[j][i + 1] %= mod;
            }
        }
        return dp[endPos][k];

=======

        constexpr int MOD = 1000000007;
        vector<vector<long>> dp(k+1, vector<long>(1001));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j <= 1000; j++) {
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % MOD;
            }
        }
        return dp[k][endPos];

=======

        // dp[i][j] means the number of ways to reach j after i steps
        // dp[i][j] = dp[i-1][j-1] + dp[i-1][j+1]
        // dp[0][startPos] = 1
        // dp[i][j] = 0 if j < 1
        // return dp[k][endPos]
        // Time: O(k * endPos)
        // Space: O(k * endPos)
        const int mod = 1e9 + 7;
        vector<vector<int>> dp(k + 1, vector<int>(endPos + 1, 0));
        dp[0][startPos] = 1;
        for (int i = 1; i <= k; ++i) {
            for (int j = 1; j <= endPos; ++j) {
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % mod;
            }
        }
        return dp[k][endPos];
