Synthesizing 10/10 solutions

=======

        vector<string> res;
        res.push_back(s);
        for (int i = 0; i < s.size(); ++i) {
            if (isalpha(s[i])) {
                int n = res.size();
                for (int j = 0; j < n; ++j) {
                    string tmp = res[j];
                    tmp[i] = islower(tmp[i]) ? toupper(tmp[i]) : tolower(tmp[i]);
                    res.push_back(tmp);
                }
            }
        }
        return res;

=======

        vector<string> res;
        res.push_back(s);
        for (int i = 0; i < s.size(); i++) {
            if (s[i] >= 'a' && s[i] <= 'z') {
                int size = res.size();
                for (int j = 0; j < size; j++) {
                    string t = res[j];
                    t[i] = t[i] - 'a' + 'A';
                    res.push_back(t);
                }
            }
            if (s[i] >= 'A' && s[i] <= 'Z') {
                int size = res.size();
                for (int j = 0; j < size; j++) {
                    string t = res[j];
                    t[i] = t[i] - 'A' + 'a';
                    res.push_back(t);
                }
            }
        }
        return res;

=======

        vector<string> res;
        res.push_back(s);
        for (int i = 0; i < s.size(); i++) {
            if (isalpha(s[i])) {
                int size = res.size();
                for (int j = 0; j < size; j++) {
                    string tmp = res[j];
                    tmp[i] = islower(tmp[i]) ? toupper(tmp[i]) : tolower(tmp[i]);
                    res.push_back(tmp);
                }
            }
        }
        return res;

=======

        vector<string> result;
        result.push_back(s);
        for (int i = 0; i < s.size(); i++) {
            if (isalpha(s[i])) {
                int n = result.size();
                for (int j = 0; j < n; j++) {
                    string item = result[j];
                    if (islower(item[i])) {
                        item[i] = toupper(item[i]);
                    } else {
                        item[i] = tolower(item[i]);
                    }
                    result.push_back(item);
                }
            }
        }
        return result;

=======

        vector<string> result;
        result.push_back(s);
        for (int i = 0; i < s.size(); i++) {
            if (isalpha(s[i])) {
                int size = result.size();
                for (int j = 0; j < size; j++) {
                    string tmp = result[j];
                    if (islower(tmp[i])) {
                        tmp[i] = toupper(tmp[i]);
                    } else {
                        tmp[i] = tolower(tmp[i]);
                    }
                    result.push_back(tmp);
                }
            }
        }
        return result;

=======

        vector<string> res;
        dfs(s, 0, res);
        return res;
    }
    
    void dfs(string s, int start, vector<string>& res) {
        if (start == s.size()) {
            res.push_back(s);
            return;
        }
        
        if (isdigit(s[start])) {
            dfs(s, start + 1, res);
        } else {
            dfs(s, start + 1, res);
            s[start] ^= 1 << 5;
            dfs(s, start + 1, res);
        }

=======

        vector<string> ans;
        ans.push_back(s);
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] >= '0' && s[i] <= '9') continue;
            int n = ans.size();
            for (int j = 0; j < n; ++j) {
                string t = ans[j];
                if (t[i] >= 'a' && t[i] <= 'z') {
                    t[i] = t[i] - 'a' + 'A';
                } else {
                    t[i] = t[i] - 'A' + 'a';
                }
                ans.push_back(t);
            }
        }
        return ans;

=======

        vector<string> res;
        int n = s.size();
        for (int i = 0; i < (1 << n); i++) {
            string t = s;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    if (t[j] >= 'a' && t[j] <= 'z') {
                        t[j] -= 32;
                    } else if (t[j] >= 'A' && t[j] <= 'Z') {
                        t[j] += 32;
                    }
                }
            }
            res.push_back(t);
        }
        return res;

=======

        vector<string> res = {s};
        int n = s.size();
        for (int i = 0; i < n; i++) {
            if (isalpha(s[i])) {
                int size = res.size();
                for (int j = 0; j < size; j++) {
                    string tmp = res[j];
                    if (islower(tmp[i])) {
                        tmp[i] = toupper(tmp[i]);
                    } else {
                        tmp[i] = tolower(tmp[i]);
                    }
                    res.push_back(tmp);
                }
            }
        }
        return res;

=======

        vector<string> res;
        res.push_back(s);
        int n = s.size();
        for(int i = 0; i < n; i++){
            if(isalpha(s[i])){
                int m = res.size();
                for(int j = 0; j < m; j++){
                    string temp = res[j];
                    if(islower(temp[i])){
                        temp[i] = toupper(temp[i]);
                    }else{
                        temp[i] = tolower(temp[i]);
                    }
                    res.push_back(temp);
                }
            }
        }
        return res;
