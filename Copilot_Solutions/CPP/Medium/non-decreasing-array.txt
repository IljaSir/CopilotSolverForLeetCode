Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                count++;
                if (i > 0 && nums[i + 1] < nums[i - 1]) {
                    nums[i + 1] = nums[i];
                }
            }
        }
        return count <= 1;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                count++;
                if (i > 0) {
                    if (nums[i - 1] > nums[i + 1]) {
                        nums[i + 1] = nums[i];
                    } else {
                        nums[i] = nums[i - 1];
                    }
                }
            }
            if (count > 1) {
                return false;
            }
        }
        return true;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                if (i > 0 && nums[i + 1] < nums[i - 1]) {
                    nums[i + 1] = nums[i];
                }
                cnt++;
            }
        }
        return cnt <= 1;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                if (cnt == 1) return false;
                if (i > 0 && nums[i - 1] > nums[i + 1]) nums[i + 1] = nums[i];
                cnt++;
            }
        }
        return true;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                cnt++;
                if (cnt > 1) return false;
                if (i > 1 && nums[i] < nums[i - 2]) {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                count++;
                if (count > 1) return false;
                if (i >= 2 && nums[i] < nums[i - 2]) nums[i] = nums[i - 1];
            }
        }
        return true;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < nums[i - 1]) {
                ++cnt;
                if (cnt > 1) {
                    return false;
                }
                if (i == 1 || nums[i] >= nums[i - 2]) {
                    nums[i - 1] = nums[i];
                } else {
                    nums[i] = nums[i - 1];
                }
            }
        }
        return true;

=======

        int cnt = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] > nums[i+1]) {
                if (i > 0 && nums[i+1] < nums[i-1]) nums[i+1] = nums[i];
                else nums[i] = nums[i+1];
                cnt++;
            }
            if (cnt > 1) return false;
        }
        return true;

=======

        int n = nums.size();
        if (n <= 2) return true;
        int cnt = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < nums[i-1]) {
                if (++cnt > 1) return false;
                if (i-2 >= 0 && nums[i] < nums[i-2]) nums[i] = nums[i-1];
            }
        }
        return true;

=======

        int n = nums.size();
        int i = 0;
        int cnt = 0;
        while (i < n-1) {
            if (nums[i] > nums[i+1]) {
                if (i-1 >= 0 && i+2 < n && nums[i-1] > nums[i+1] && nums[i] > nums[i+2]) {
                    return false;
                }
                cnt++;
                if (cnt > 1) {
                    return false;
                }
            }
            i++;
        }
        return true;
