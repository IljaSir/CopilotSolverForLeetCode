Synthesizing 10/10 solutions

=======

        unordered_set<int> s;
        s.insert(dist(p1, p2));
        s.insert(dist(p1, p3));
        s.insert(dist(p1, p4));
        s.insert(dist(p2, p3));
        s.insert(dist(p2, p4));
        s.insert(dist(p3, p4));
        return !s.count(0) && s.size() == 2;

=======

        unordered_set<int> s = {dist(p1, p2), dist(p1, p3), dist(p1, p4), dist(p2, p3), dist(p2, p4), dist(p3, p4)};
        return !s.count(0) && s.size() == 2;

=======

        return isSquare(p1, p2, p3, p4) || isSquare(p1, p2, p4, p3) || isSquare(p1, p3, p2, p4) || isSquare(p1, p3, p4, p2) || isSquare(p1, p4, p2, p3) || isSquare(p1, p4, p3, p2);

=======

        vector<int> v{dist(p1, p2), dist(p1, p3), dist(p1, p4), dist(p2, p3), dist(p2, p4), dist(p3, p4)};
        sort(v.begin(), v.end());
        return v[0] > 0 && v[0] == v[1] && v[1] == v[2] && v[2] == v[3] && v[4] == v[5];

=======

        vector<int> v{dist(p1, p2), dist(p1, p3), dist(p1, p4), dist(p2, p3), dist(p2, p4), dist(p3, p4)};
        sort(v.begin(), v.end());
        return v[0] > 0 && v[0] == v[1] && v[1] == v[2] && v[2] == v[3] && v[4] == v[5];

=======

        vector<int> d(6);
        d[0] = dist(p1, p2);
        d[1] = dist(p1, p3);
        d[2] = dist(p1, p4);
        d[3] = dist(p2, p3);
        d[4] = dist(p2, p4);
        d[5] = dist(p3, p4);
        sort(d.begin(), d.end());
        return d[0] == d[1] && d[1] == d[2] && d[2] == d[3] && d[4] == d[5] && d[0] != d[4];

=======
 points[2]);

=======

        vector<vector<int>> points;
        points.push_back(p1);
        points.push_back(p2);
        points.push_back(p3);
        points.push_back(p4);
        sort(points.begin(), points.end());
        do {
            if (points[0][0] == points[1][0] && points[1][0] == points[2][0] && points[2][0] == points[3][0]) {
                if (points[0][1] == points[1][1] && points[1][1] == points[2][1] && points[2][1] == points[3][1]) {
                    return false;
                }
                if (points[0][1] == points[1][1] && points[2][1] == points[3][1]) {
                    return true;
                }
            }
            if (points[0][1] == points[1][1] && points[1][1] == points[2][1] && points[2][1] == points[3][1]) {
                if (points[0][0] == points[1][0] && points[1][0] == points[2][0] && points[2][0] == points[3][0]) {
                    return false;
                }
                if (points[0][0] == points[1][0] && points[2][0] == points[3][0]) {
                    return true;
                }
            }
            if (points[0][0] == points[1][0] && points[2][0] == points[3][0]) {
                if (points[0][1] == points[2][1] && points[1][1] == points[3][1]) {
                    return true;
                }
            }
            if (points[0][1] == points[1][1] && points[2][1] == points[3][1]) {
               if ([0]0] == points[][0 && points[1][0] == points[3][0]) {
                    return true;
                }
            }
        } while (next_permutation(points.begin(, points.end()))
        return false;        vector<vector<int>> points = {p1, p2, p3, p4};

        sort(points.begin(), points.end());
        if (points[0] == points[1] || points[1] == points[2] || points[2] == points[3]) {
            return false;
        }
        return dist(points[0], points[1]) == dist(points[1], points[3]) && dist(points[1], points[3]) == dist(points[3], points[2]) && dist(points[3], points[2]) == dist(points[2], points[0]) && dist(points[0], points[3]) == dist(points[1], points[2]);

=======

        vector<vector<int>> points;
        points.push_back(p1);
        points.push_back(p2);
        points.push_back(p3);
        points.push_back(p4);
        sort(points.begin(), points.end());
        do {
            if (points[0][0] == points[1][0] && points[1][0] == points[2][0] && points[2][0] == points[3][0]) {
                if (points[0][1] == points[1][1] && points[1][1] == points[2][1] && points[2][1] == points[3][1]) {
                    return false;
                }
                if (points[0][1] == points[1][1] && points[2][1] == points[3][1]) {
                    return true;
                }
            }
            if (points[0][1] == points[1][1] && points[1][1] == points[2][1] && points[2][1] == points[3][1]) {
                if (points[0][0] == points[1][0] && points[1][0] == points[2][0] && points[2][0] == points[3][0]) {
                    return false;
                }
                if (points[0][0] == points[1][0] && points[2][0] == points[3][0]) {
                    return true;
                }
            }
            if (points[0][0] == points[1][0] && points[2][0] == points[3][0]) {
                if (points[0;

=======

        vector<vector<int>> points{p1, p2, p3, p4};
        sort(begin(points), end(points));
        int d1 = dist(points[0], points[1]);
        int d2 = dist(points[1], points[2]);
        int d3 = dist(points[2], points[3]);
        int d4 = dist(points[3], points[0]);
        int d5 = dist(points[0], points[2]);
        int d6 = dist(points[1], points[3]);
        return d1 == d2 && d2 == d3 && d3 == d4 && d5 == d6 && d1 > 0][1] == points[2][1] && points[1][1] == points[3][1]) {
                    return true;
                }
            }
            if (points[0][1] == points[1][1] && points[2][1] == points[3][1]) {
                if (points[0][0] == points[2][0] && points[1][0] == points[3][0]) {
                    return true;
                }
            }
        } while (next_permutation(points.begin(), points.end()));
        return false;

=======

        vector<vector<int>> points = {p1, p2, p3, p4};
        sort(points.begin(), points.end());
        do {
            int dx1 = points[0][0] - points[1][0];
            int dy1 = points[0][1] - points[1][1];
            int dx2 = points[1][0] - points[2][0];
            int dy2 = points[1][1] - points[2][1];
            int dx3 = points[2][0] - points[3][0];
            int dy3 = points[2][1] - points[3][1];
            if (dx1 * dx1 + dy1 * dy1 == dx2 * dx2 + dy2 * dy2
                && dx2 * dx2 + dy2 * dy2 == dx3 * dx3 + dy3 * dy3
                && dx1 * dx1 + dy1 * dy1 > 0
                && dx1 * dx3 + dy1 * dy3 == 0
                && dx2 * dx3 + dy2 * dy3 == 0) {
                return true;
            }
        } while (next_permutation(points.begin(), points.end()));
        return false;

=======

        vector<vector<int>> points = {p1, p2, p3, p4};
        set<int> s;
        for (int i = 0; i < 4; ++i) {
            for (int j = i + 1; j < 4; ++j) {
                int d = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                if (d == 0) return false;
                s.insert(d);
            }
        }
        return s.size() == 2;
