Synthesizing 10/10 solutions

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == '_') i++;
            while (j < n && target[j] == '_') j++;
            if (i == n || j == n) break;
            if (start[i] != target[j]) return false;
            i++; j++;
        }
        return true;
    }
    bool canTransform(string start, string target) {
        if (!canChange(start, target)) return false;
        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == '_') i++;
            while (j < n && target[j] == '_') j++;
            if (i == n || j == n) break;
            if (start[i] != target[j]) return false;
            if (start[i] == 'L') {
                if (j > i) return false;
            } else {
                if (j < i) return false;
            }
            i++; j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while(i < n && j < n) {
            while(i < n && start[i] == '_') i++;
            while(j < n && target[j] == '_') j++;
            if(i == n || j == n) break;
            if(start[i] != target[j]) return false;
            if(start[i] == 'L') {
                if(j > i) return false;
            } else {
                if(j < i) return false;
            }
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            if (start[i] == '_') {
                i++;
                continue;
            }
            if (target[j] == '_') {
                j++;
                continue;
            }
            if (start[i] != target[j]) {
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
    bool canTransform(string start, string target) {
        if (!canChange(start, target)) {
            return false;
        }
        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == '_') {
                i++;
            }
            while (j < n && target[j] == '_') {
                j++;
            }
            if (i < n && j < n && start[i] != target[j]) {
                return false;
            }
            if (i < n && j < n && start[i] == 'L' && i < j) {
                return false;
            }
            if (i < n && j < n && start[i] == 'R' && i > j) {
                return false;
            }
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            if (start[i] == '_') {
                i++;
                continue;
            }
            if (target[j] == '_') {
                j++;
                continue;
            }
            if (start[i] != target[j]) {
                return false;
            }
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0;
        while (i < n && start[i] == target[i]) {
            i++;
        }
        if (i == n) {
            return true;
        }
        int j = n - 1;
        while (j > i && start[j] == target[j]) {
            j--;
        }
        return start.substr(i, j - i + 1) == target.substr(i, j - i + 1);
    }
    bool canTransform(string start, string target) {
        if (start.size() != target.size()) {
            return false;
        }
        if (start == target) {
            return true;
        }
        if (start.size() == 1) {
            return false;
        }
        if (start[0] == target[0] && start[start.size() - 1] == target[target.size() - 1]) {
            return canChange(start, target);
        }
        return false;

=======

        int n = start.size();
        int l = 0, r = n - 1;
        while (l < n && start[l] == target[l]) l++;
        while (r >= 0 && start[r] == target[r]) r--;
        if (l > r) return true;
        for (int i = l; i <= r; i++) {
            if (start[i] == target[i]) continue;
            if (start[i] == 'L' || target[i] == 'R') return false;
        }
        return true;

=======

        int n = start.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (start[i] != target[i]) cnt++;
        }
        return cnt <= 2;
    }
    bool canTransform(string start, string target) {
        if (!canChange(start, target)) return false;
        int n = start.size();
        int cntl = 0, cntr = 0, cntt = 0;
        for (int i = 0; i < n; i++) {
            if (start[i] == 'L') cntl++;
            if (start[i] == 'R') cntr++;
            if (target[i] == 'L') cntl--;
            if (target[i] == 'R') cntr--;
            if (cntl < 0 || cntr > 0) return false;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while(i < n && j < n) {
            if(start[i] == '_') {
                i++;
                continue;
            }
            if(target[j] == '_') {
                j++;
                continue;
            }
            if(start[i] != target[j]) {
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
    bool canTransform(string start, string target) {
        if(start == target) {
            return true;
        }
        if(!canChange(start, target)) {
            return false;
        }
        int n = start.size();
        int i = 0, j = 0;
        while(i < n && j < n) {
            while(i < n && start[i] == '_') {
                i++;
            }
            while(j < n && target[j] == '_') {
                j++;
            }
            if(i == n && j == n) {
                return true;
            }
            if((i < n && j == n) || (i == n && j < n)) {
                return false;
            }
            if(start[i] != target[j]) {
                return false;
            }
            if(start[i] == 'R') {
                if(i > j) {
                    return false;
                }
            } else {
                if(i < j) {
                    return false;
                }
            }
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int cnt = 0;
        for (int i = 0; i < n; ++ i) {
            if (start[i] != target[i]) {
                if (start[i] == '_') {
                    if (cnt > 0) {
                        return false;
                    }
                } else if (target[i] == '_') {
                    if (cnt < 0) {
                        return false;
                    }
                } else {
                    return false;
                }
                cnt += start[i] == 'L' ? 1 : -1;
            }
        }
        return cnt == 0;

=======

        int n = start.length();
        int l = 0, r = n-1;
        while(l<n && start[l] == target[l]) l++;
        while(r>=0 && start[r] == target[r]) r--;
        if(l>r) return true;
        for(int i=l; i<=r; i++) {
            if(start[i] == target[i]) continue;
            if(start[i] != '_') return false;
        }
        return true;
    }
    
    bool canTransform(string start, string target) {
        if(!canChange(start, target)) return false;
        int n = start.length();
        int l = 0, r = n-1;
        while(l<n && start[l] == target[l]) l++;
        while(r>=0 && start[r] == target[r]) r--;
        if(l>r) return true;
        int lcount = 0, rcount = 0;
        for(int i=l; i<=r; i++) {
            if(start[i] == target[i]) continue;
            if(start[i] == 'L') lcount++;
            else rcount++;
        }
        return lcount == rcount;
