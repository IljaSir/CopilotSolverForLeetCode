Synthesizing 10/10 solutions

=======

        int ans = 0;
        int cnt = 1;
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == s[i-1]) {
                cnt++;
            } else {
                ans += ((cnt+1) * cnt) / 2;
                cnt = 1;
            }
            ans %= 1000000007;
        }
        ans += ((cnt+1) * cnt) / 2;
        ans %= 1000000007;
        return ans;

=======

        int n = s.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            if (s[i] == s[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = (ans + (1 + dp[i]) * dp[i] / 2) % 1000000007;
        }
        return ans;

=======

        int res = 0;
        int count = 1;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] == s[i-1]) {
                count++;
            } else {
                res = (res + (count+1)*count/2) % 1000000007;
                count = 1;
            }
        }
        res = (res + (count+1)*count/2) % 1000000007;
        return res;

=======

        int ans = 0;
        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && s[j] == s[i]) j++;
            int len = j - i;
            ans = (ans + (len + 1) * len / 2) % 1000000007;
            i = j;
        }
        return ans;

=======

        int n = s.length();
        int res = 0;
        int count = 1;
        for (int i = 1; i < n; i++) {
            if (s[i] == s[i - 1]) {
                count++;
            } else {
                res += (count * (count + 1)) / 2;
                res %= 1000000007;
                count = 1;
            }
        }
        res += (count * (count + 1)) / 2;
        res %= 1000000007;
        return res;

=======

        int ans = 0;
        int n = s.size();
        int count = 1;
        for (int i = 1; i < n; ++i) {
            if (s[i] == s[i - 1]) {
                count++;
            } else {
                ans += (count * (count + 1)) / 2;
                ans %= 1000000007;
                count = 1;
            }
        }
        ans += (count * (count + 1)) / 2;
        ans %= 1000000007;
        return ans;

=======

        int n = s.size();
        int i = 0, j = 0;
        long long res = 0;
        while (j < n) {
            while (j < n && s[i] == s[j]) {
                j++;
            }
            long long len = j - i;
            res = (res + (len * (len + 1) / 2)) % 1000000007;
            i = j;
        }
        return res;

=======

        int n = s.size();
        int i = 0;
        int j = 0;
        int res = 0;
        int mod = 1e9 + 7;
        while (i < n) {
            while (j < n && s[j] == s[i]) {
                j++;
            }
            int len = j - i;
            res = (res + (len * (len + 1) / 2) % mod) % mod;
            i = j;
        }
        return res;

=======

        int cnt = 0;
        int pre = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == s[pre]) {
                cnt = (cnt + 1) % (1000000000 + 7);
            } else {
                pre = i;
                cnt = 1;
            }
            ans = (ans + cnt) % (1000000000 + 7);
        }
        return ans;

=======

        int result = 0;
        int len = 0;
        char pre = 0;
        for (auto c : s) {
            if (c == pre) {
                len++;
            } else {
                pre = c;
                len = 1;
            }
            result += len;
            result %= 1000000007;
        }
        return result;
