Synthesizing 10/10 solutions

=======

        int n = s.size();
        int m = chars.size();
        vector<int> cnt(26, 0);
        for (int i = 0; i < m; ++i) {
            cnt[chars[i] - 'a'] = vals[i];
        }
        int ans = 0;
        int sum = 0;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < n && cnt[s[j] - 'a'] != 0) {
                sum += cnt[s[j] - 'a'];
                ++j;
            }
            ans = max(ans, sum);
            sum -= cnt[s[i] - 'a'];
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < s.size(); i++) {
            int cost = 0;
            for (int j = i; j < s.size(); j++) {
                int index = chars.find(s[j]);
                if (index == string::npos) {
                    cost += s[j] - 'a' + 1;
                } else {
                    cost += vals[index];
                }
                if (cost > max) {
                    max = cost;
                }
            }
        }
        return max;

=======

        int n = s.size();
        int m = chars.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                char ch = s[j];
                int k = 0;
                for (; k < m; k++) {
                    if (chars[k] == ch)
                        break;
                }
                if (k == m) {
                    sum += ch - 'a' + 1;
                } else {
                    sum += vals[k];
                }
                ans = max(ans, sum);
            }
        }
        return ans;

=======

        int n = s.size();
        int m = chars.size();
        vector<int> char2val(26, 0);
        for (int i = 0; i < m; ++i) {
            char2val[chars[i] - 'a'] = vals[i];
        }
        vector<int> sum(n, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int val = char2val[s[i] - 'a'];
            if (i == 0) {
                sum[i] = val;
            } else {
                sum[i] = sum[i - 1] + val;
            }
            ans = max(ans, sum[i]);
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                ans = max(ans, sum[j] - sum[i] + char2val[s[i] - 'a']);
            }
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < s.size(); ++i) {
            int j = i;
            int sum = 0;
            while (j < s.size()) {
                if (chars.find(s[j]) == string::npos) {
                    sum += s[j] - 'a' + 1;
                } else {
                    sum += vals[chars.find(s[j])];
                }
                res = max(res, sum);
                ++j;
            }
        }
        return res;

=======

        int n = s.size();
        int m = chars.size();
        vector<int> cost(n, 0);
        for (int i = 0; i < n; ++i) {
            if (s[i] >= 'a' && s[i] <= 'z') {
                cost[i] = s[i] - 'a' + 1;
            } else {
                for (int j = 0; j < m; ++j) {
                    if (s[i] == chars[j]) {
                        cost[i] = vals[j];
                        break;
                    }
                }
            }
        }
        int ans = 0;
        int sum = 0;
        int l = 0;
        for (int r = 0; r < n; ++r) {
            sum += cost[r];
            ans = max(ans, sum);
            if (sum < 0) {
                sum = 0;
                l = r + 1;
            }
        }
        return ans;

=======

        int n = s.length();
        int m = chars.length();
        vector<int> charMap(26, -1);
        for (int i = 0; i < m; ++i) {
            charMap[chars[i] - 'a'] = i;
        }
        vector<int> valMap(n, 0);
        for (int i = 0; i < n; ++i) {
            valMap[i] = charMap[s[i] - 'a'] == -1 ? s[i] - 'a' + 1 : vals[charMap[s[i] - 'a']];
        }
        int ans = 0;
        int sum = 0;
        int idx = 0;
        for (int i = 0; i < n; ++i) {
            sum += valMap[i];
            while (sum < 0) {
                sum -= valMap[idx++];
            }
            ans = max(ans, sum);
        }
        return ans;

=======

        int n = s.size();
        int m = chars.size();
        vector<int> cost(n, 0);
        vector<int> value(26, 0);
        for (int i = 0; i < m; i++) {
            value[chars[i] - 'a'] = vals[i];
        }
        
        for (int i = 0; i < n; i++) {
            int v = value[s[i] - 'a'];
            cost[i] = v;
            if (i > 0 && cost[i - 1] > 0) {
                cost[i] += cost[i - 1];
            }
        }
        int maxCost = 0;
        for (int i = 0; i < n; i++) {
            maxCost = max(maxCost, cost[i]);
        }
        return maxCost;

=======

        int ans = 0;
        int n = s.length();
        int m = chars.length();
        for (int i = 0; i < n; ++i) {
            int cost = 0;
            int cnt[26] = {};
            for (int j = i; j < n; ++j) {
                int index = s[j] - 'a';
                if (cnt[index] == 0) {
                    for (int k = 0; k < m; ++k) {
                        if (chars[k] == s[j]) {
                            cost += vals[k];
                            cnt[index] = 1;
                            break;
                        }
                    }
                }
                ans = max(ans, cost);
            }
        }
        return ans;

=======

        int maxCost = 0;
        int n = s.size();
        int m = chars.size();
        vector<int> charValue(26, 0);
        for (int i = 0; i < m; i++) {
            charValue[chars[i] - 'a'] = vals[i];
        }
        vector<int> cost(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            cost[i] = cost[i - 1] + charValue[s[i - 1] - 'a'];
            int minCost = 0;
            for (int j = i; j > 0; j--) {
                minCost = min(minCost, cost[j - 1]);
                maxCost = max(maxCost, cost[i] - minCost);
            }
        }
        return maxCost;
