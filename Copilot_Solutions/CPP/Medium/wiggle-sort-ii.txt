Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> tmp = nums;
        sort(tmp.begin(), tmp.end());
        int i = (n - 1) / 2, j = n - 1;
        for (int k = 0; k < n; k++) {
            nums[k] = (k & 1) ? tmp[j--] : tmp[i--];
        }

=======

        int n = nums.size();
        vector<int> tmp = nums;
        sort(tmp.begin(), tmp.end());
        int i = n - 1, j = (n - 1) / 2, k = 0;
        while (k < n) {
            nums[k++] = tmp[j--];
            if (k < n) nums[k++] = tmp[i--];
        }

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> tmp(n);
        int i = (n - 1) / 2, j = n - 1;
        for (int k = 0; k < n; k++) {
            if (k % 2 == 0) {
                tmp[k] = nums[i--];
            } else {
                tmp[k] = nums[j--];
            }
        }
        nums = tmp;

=======

        int n = nums.size();
        vector<int> tmp(nums);
        sort(tmp.begin(), tmp.end());
        int i = n - 1, j = 0, k = (n - 1) / 2;
        while (j < n) {
            nums[j++] = tmp[k--];
            if (j < n) {
                nums[j++] = tmp[i--];
            }
        }

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> tmp(n);
        int i = 0, j = (n+1)/2, k = 0;
        while (i < (n+1)/2 || j < n) {
            if (k % 2 == 0) {
                tmp[k++] = nums[i++];
            } else {
                tmp[k++] = nums[j++];
            }
        }
        nums = tmp;

=======

        int n = nums.size();
        vector<int> temp = nums;
        sort(temp.begin(), temp.end());
        int i = n - 1, j = 1;
        while (i >= 0) {
            nums[j] = temp[i];
            i -= 2;
            j += 2;
        }
        i = n - 2;
        j = 0;
        while (i >= 0) {
            nums[j] = temp[i];
            i -= 2;
            j += 2;
        }

=======

        auto n = nums.size();
        auto m = (n+1)/2;
        nth_element(nums.begin(), nums.begin()+m-1, nums.end());
        nth_element(nums.begin()+m, nums.end(), nums.end());
        vector<int> ans(n);
        int i = 0, j = m-1, k = n-1;
        while (i < n) {
            ans[i] = nums[j];
            if (i+1 < n) ans[i+1] = nums[k];
            i += 2;
            j--;
            k--;
        }
        nums = ans;

=======

        int n = nums.size();
        vector<int> sortedNums = nums;
        sort(sortedNums.begin(), sortedNums.end());
        int i = n - 1;
        int j = 1;
        int k = 0;
        while (k < n) {
            if (k % 2 == 0) {
                nums[k] = sortedNums[i];
                i--;
            } else {
                nums[k] = sortedNums[j];
                j++;
            }
            k++;
        }

=======

        int n = nums.size();
        if (n < 2)
            return;
        vector<int> tmp(nums);
        sort(tmp.begin(), tmp.end());
        int i = n - 1, j = n / 2 - 1, k = n - 1;
        while (i >= 0) {
            nums[i--] = tmp[j--];
            if (i >= 0)
                nums[i--] = tmp[k--];
        }

=======

        vector<int> tmp(nums);
        sort(tmp.begin(), tmp.end());
        int n = nums.size();
        int mid = n / 2;
        if (n % 2 == 1) mid++;
        int i = 0;
        int j = mid;
        int k = 0;
        while (i < mid && j < n) {
            nums[k++] = tmp[i++];
            nums[k++] = tmp[j++];
        }
        while (i < mid) {
            nums[k++] = tmp[i++];
        }
        while (j < n) {
            nums[k++] = tmp[j++];
        }
