Synthesizing 10/10 solutions

=======

        unordered_set<int> same;
        for (int i = 0; i < fronts.size(); i++) {
            if (fronts[i] == backs[i]) {
                same.insert(fronts[i]);
            }
        }
        int min = 2000;
        for (int i = 0; i < fronts.size(); i++) {
            if (same.find(fronts[i]) == same.end()) {
                if (min > fronts[i]) {
                    min = fronts[i];
                }
            }
            if (same.find(backs[i]) == same.end()) {
                if (min > backs[i]) {
                    min = backs[i];
                }
            }
        }
        return min == 2000 ? 0 : min;

=======

        unordered_set<int> bad;
        for (int i = 0; i < fronts.size(); ++i) {
            if (fronts[i] == backs[i]) {
                bad.insert(fronts[i]);
            }
        }
        int res = 2001;
        for (int i = 0; i < fronts.size(); ++i) {
            if (bad.find(fronts[i]) == bad.end()) {
                res = min(res, fronts[i]);
            }
            if (bad.find(backs[i]) == bad.end()) {
                res = min(res, backs[i]);
            }
        }
        return res % 2001;

=======

        unordered_set<int> bad;
        for (int i = 0; i < fronts.size(); ++i) {
            if (fronts[i] == backs[i]) {
                bad.insert(fronts[i]);
            }
        }
        int res = 2001;
        for (int i = 0; i < fronts.size(); ++i) {
            if (!bad.count(fronts[i])) {
                res = min(res, fronts[i]);
            }
            if (!bad.count(backs[i])) {
                res = min(res, backs[i]);
            }
        }
        return res == 2001 ? 0 : res;

=======

        unordered_set<int> s;
        int n = fronts.size();
        for (int i = 0; i < n; i++) {
            if (fronts[i] == backs[i]) {
                s.insert(fronts[i]);
            }
        }
        int res = 2001;
        for (int i = 0; i < n; i++) {
            if (s.count(fronts[i]) == 0) {
                res = min(res, fronts[i]);
            }
            if (s.count(backs[i]) == 0) {
                res = min(res, backs[i]);
            }
        }
        return res == 2001 ? 0 : res;

=======

        unordered_set<int> s;
        int n = fronts.size();
        for (int i = 0; i < n; i++) {
            if (fronts[i] == backs[i]) {
                s.insert(fronts[i]);
            }
        }
        int res = 2000;
        for (int i = 0; i < n; i++) {
            if (s.find(fronts[i]) == s.end()) {
                res = min(res, fronts[i]);
            }
            if (s.find(backs[i]) == s.end()) {
                res = min(res, backs[i]);
            }
        }
        return res == 2000 ? 0 : res;

=======

        unordered_set<int> same;
        int n = fronts.size();
        for (int i = 0; i < n; ++i) {
            if (fronts[i] == backs[i]) {
                same.insert(fronts[i]);
            }
        }
        int res = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (!same.count(fronts[i])) {
                res = min(res, fronts[i]);
            }
            if (!same.count(backs[i])) {
                res = min(res, backs[i]);
            }
        }
        return res == INT_MAX ? 0 : res;

=======

        int n = fronts.size();
        unordered_set<int> s;
        for (int i = 0; i < n; ++i) {
            if (fronts[i] == backs[i]) {
                s.insert(fronts[i]);
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (s.count(fronts[i]) == 0) {
                ans = min(ans, fronts[i]);
            }
            if (s.count(backs[i]) == 0) {
                ans = min(ans, backs[i]);
            }
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = fronts.size();
        unordered_set<int> s;
        for (int i = 0; i < n; i++) {
            if (fronts[i] == backs[i]) s.insert(fronts[i]);
        }
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (s.count(fronts[i]) == 0) res = min(res, fronts[i]);
            if (s.count(backs[i]) == 0) res = min(res, backs[i]);
        }
        return res == INT_MAX ? 0 : res;

=======

        int n = fronts.size();
        set<int> same;
        for (int i = 0; i < n; ++i) {
            if (fronts[i] == backs[i]) same.insert(fronts[i]);
        }
        int res = 2001;
        for (int i = 0; i < n; ++i) {
            if (same.count(fronts[i]) == 0) res = min(res, fronts[i]);
            if (same.count(backs[i]) == 0) res = min(res, backs[i]);
        }
        return res == 2001 ? 0 : res;

=======

        int n = fronts.size();
        unordered_set<int> both;
        for (int i = 0; i < n; ++i) {
            if (fronts[i] == backs[i]) both.insert(fronts[i]);
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            if (both.find(fronts[i]) == both.end()) ans = min(ans, fronts[i]);
            if (both.find(backs[i]) == both.end()) ans = min(ans, backs[i]);
        }
        return ans == INT_MAX ? 0 : ans;
