Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 1) return 0;
        if (n % 2 == 0) return integerReplacement(n / 2) + 1;
        return min(integerReplacement(n + 1), integerReplacement(n - 1)) + 1;

=======

        if (n == 1) return 0;
        if (n % 2 == 0) return 1 + integerReplacement(n / 2);
        return 1 + min(integerReplacement(n + 1), integerReplacement(n - 1));

=======

        if (n == 1) return 0;
        if (n == INT_MAX) return 32;
        if (n % 2 == 0) return 1 + integerReplacement(n / 2);
        return 1 + min(integerReplacement(n + 1), integerReplacement(n - 1));

=======

        if (n == 1) return 0;
        if (n % 2 == 0) return 1 + integerReplacement(n / 2);
        return 1 + min(integerReplacement(n - 1), integerReplacement(n + 1));

=======

        if (n == 1) return 0;
        if (n == 3) return 2;
        if (n % 2 == 0) return integerReplacement(n / 2) + 1;
        else return min(integerReplacement(n + 1), integerReplacement(n - 1)) + 1;

=======

        if (n == 1) return 0;
        if (n % 2 == 0) return integerReplacement(n / 2) + 1;
        return 1 + min(integerReplacement(n + 1), integerReplacement(n - 1));

=======

        int count = 0;
        while (n != 1) {
            if (n % 2 == 0) {
                n /= 2;
            } else {
                if (n == 3) {
                    n -= 1;
                } else if ((n + 1) % 4 == 0) {
                    n += 1;
                } else {
                    n -= 1;
                }
            }
            count++;
        }
        return count;

=======

        if (n == 1) return 0;
        if (n == INT_MAX) return 32;
        if (n & 1) {
            if (n == 3) return 2;
            if ((n + 1) % 4 == 0) return 1 + integerReplacement(n + 1);
            else return 1 + integerReplacement(n - 1);
        } else {
            return 1 + integerReplacement(n >> 1);
        }

=======

        if (n==1) return 0;
        if (n%2==0) return integerReplacement(n/2)+1;
        else {
            if (n==INT_MAX) return integerReplacement(n-1)+1;
            return 1+min(integerReplacement(n+1), integerReplacement(n-1));
        }
