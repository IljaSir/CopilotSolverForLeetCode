Synthesizing 10/10 solutions

=======

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;

=======

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; ++i) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; ++j) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;

=======

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;
    }
    
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, int height, int i, int j) {
        int m = heights.size();
        int n = heights[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || heights[i][j] < height) {
            return;
        }
        visited[i][j] = true;
        dfs(heights, visited, heights[i][j], i - 1, j);
        dfs(heights, visited, heights[i][j], i + 1, j);
        dfs(heights, visited, heights[i][j], i, j - 1);
        dfs(heights, visited, heights[i][j], i, j + 1);

=======

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<int>> pacific(m, vector<int>(n, 0));
        vector<vector<int>> atlantic(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            dfs(heights, pacific, i, 0, INT_MIN);
            dfs(heights, atlantic, i, n - 1, INT_MIN);
        }
        for (int j = 0; j < n; ++j) {
            dfs(heights, pacific, 0, j, INT_MIN);
            dfs(heights, atlantic, m - 1, j, INT_MIN);
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<int>> &heights, vector<vector<int>> &visited, int i, int j, int pre) {
        if (i < 0 || i >= heights.size() || j < 0 || j >= heights[0].size() || heights[i][j] < pre || visited[i][j]) {
            return;
        }
        visited[i][j] = 1;
        dfs(heights, visited, i + 1, j, heights[i][j]);
        dfs(heights, visited, i - 1, j, heights[i][j]);
        dfs(heights, visited, i, j + 1, heights[i][j]);
        dfs(heights, visited, i, j - 1, heights[i][j]);

=======

        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> res;
        vector<vector<int>> pacific(m, vector<int>(n, 0));
        vector<vector<int>> atlantic(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<int>>& heights, vector<vector<int>>& ocean, int height, int i, int j) {
        int m = heights.size();
        int n = heights[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || ocean[i][j] || heights[i][j] < height) {
            return;
        }
        ocean[i][j] = 1;
        dfs(heights, ocean, heights[i][j], i + 1, j);
        dfs(heights, ocean, heights[i][j], i - 1, j);
        dfs(heights, ocean, heights[i][j], i, j + 1);
        dfs(heights, ocean, heights[i][j], i, j - 1);

=======

        vector<vector<int>> result;
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    result.push_back({i, j});
                }
            }
        }
        return result;
    }
    
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, int height, int i, int j) {
        int m = heights.size();
        int n = heights[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || heights[i][j] < height) {
            return;
        }
        visited[i][j] = true;
        dfs(heights, visited, heights[i][j], i - 1, j);
        dfs(heights, visited, heights[i][j], i + 1, j);
        dfs(heights, visited, heights[i][j], i, j - 1);
        dfs(heights, visited, heights[i][j], i, j + 1);

=======

        vector<vector<int>> res;
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<int>> pacific(m, vector<int>(n, 0));
        vector<vector<int>> atlantic(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++) {
            dfs(heights, i, 0, pacific, INT_MIN);
            dfs(heights, i, n - 1, atlantic, INT_MIN);
        }
        for(int i = 0; i < n; i++) {
            dfs(heights, 0, i, pacific, INT_MIN);
            dfs(heights, m - 1, i, atlantic, INT_MIN);
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(pacific[i][j] && atlantic[i][j]) {
                    res.push_back({i, j});
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<int>>& heights, int i, int j, vector<vector<int>>& ocean, int pre) {
        if(i < 0 || i >= heights.size() || j < 0 || j >= heights[0].size() || heights[i][j] < pre || ocean[i][j]) {
            return;
        }
        ocean[i][j] = 1;
        dfs(heights, i + 1, j, ocean, heights[i][j]);
        dfs(heights, i - 1, j, ocean, heights[i][j]);
        dfs(heights, i, j + 1, ocean, heights[i][j]);
        dfs(heights, i, j - 1, ocean, heights[i][j]);

=======

        vector<vector<int>> ret;
        int m = heights.size();
        if (m == 0) {
            return ret;
        }
        int n = heights[0].size();
        if (n == 0) {
            return ret;
        }
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0, m, n);
            dfs(heights, atlantic, i, n - 1, m, n);
        }
        for (int i = 0; i < n; i++) {
            dfs(heights, pacific, 0, i, m, n);
            dfs(heights, atlantic, m - 1, i, m, n);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    ret.push_back({i, j});
                }
            }
        }
        return ret;
    }
    
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, int i, int j, int m, int n) {
        visited[i][j] = true;
        if (i > 0 && !visited[i-1][j] && heights[i-1][j] >= heights[i][j]) {
            dfs(heights, visited, i-1, j, m, n);
        }
        if (i < m - 1 && !visited[i+1][j] && heights[i+1][j] >= heights[i][j]) {
            dfs(heights, visited, i+1, j, m, n);
        }
        if (j > 0 && !visited[i][j-1] && heights[i][j-1] >= heights[i][j]) {
            dfs(heights, visited, i, j-1, m, n);
        }
        if (j < n - 1 && !visited[i][j+1] && heights[i][j+1] >= heights[i][j]) {
            dfs(heights, visited, i, j+1

=======

        vector<vector<int>> ret;
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, INT_MIN, i, 0);
            dfs(heights, atlantic, INT_MIN, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, INT_MIN, 0, j);
            dfs(heights, atlantic, INT_MIN, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    ret.push_back({i, j});
                }
            }
        }
        return ret;
    }
    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& ocean, int height, int i, int j) {
        int m = heights.size();
        int n = heights[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n || ocean[i][j] || heights[i][j] < height) {
            return;
        }
        ocean[i][j] = true;
        dfs(heights, ocean, heights[i][j], i + 1, j);
        dfs(heights, ocean, heights[i][j], i - 1, j);
        dfs(heights, ocean, heights[i][j], i, j + 1);
        dfs(heights, ocean, heights[i][j], i, j - 1);

=======

        int m = heights.size();
        int n = heights[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> visted(m, vector<int>(n, 0));
        vector<vector<int>> result;
        for (int i = 0; i < m; i++) {
            q.push({i, 0});
            visted[i][0] |= 1;
            q.push({i, n - 1});
            visted[i][n - 1] |= 2;
        }
        for (int i = 0; i < n; i++) {
            q.push({0, i});
            visted[0][i] |= 1;
            q.push({m - 1, i});
            visted[m - 1][i] |= 2;
        }
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || heights[nx][ny] < heights[x][y]) continue;
                if (visted[nx][ny] == 3) continue;
                if (visted[nx][ny] == 0) {
                    q.push({nx, ny});
                }
                visted[nx][ny] |= visted[x][y];
                if (visted[nx][ny] == 3) {
                    result.push_back({nx, ny});
                }
            }
        }
        return result;
