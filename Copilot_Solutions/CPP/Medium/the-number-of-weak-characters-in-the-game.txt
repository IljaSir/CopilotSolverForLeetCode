Synthesizing 10/10 solutions

=======

        sort(properties.begin(), properties.end(), [](auto& a, auto& b) {
            return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];
        });
        int res = 0, maxd = 0;
        for (int i = properties.size() - 1; i >= 0; --i) {
            if (properties[i][1] < maxd) ++res;
            maxd = max(maxd, properties[i][1]);
        }
        return res;

=======

        sort(properties.begin(), properties.end(), [](vector<int> &a, vector<int> &b) {
            return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];
        });
        int res = 0, maxDef = 0;
        for (int i = properties.size() - 1; i >= 0; --i) {
            if (properties[i][1] < maxDef) ++res;
            else maxDef = properties[i][1];
        }
        return res;

=======

        sort(properties.begin(), properties.end(), [](auto& a, auto& b) {
            return a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]);
        });
        int n = properties.size();
        int maxDef = INT_MIN;
        int ret = 0;
        for (int i = 0; i < n; ++i) {
            if (properties[i][1] < maxDef) {
                ++ret;
            }
            maxDef = max(maxDef, properties[i][1]);
        }
        return ret;

=======

        int n = properties.size();
        sort(properties.begin(), properties.end(), [](auto& a, auto& b) {
            return a[0] == b[0] ? a[1] > b[1] : a[0] < b[0];
        });
        int ans = 0, max_def = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (properties[i][1] < max_def) ++ans;
            max_def = max(max_def, properties[i][1]);
        }
        return ans;

=======

        sort(properties.begin(), properties.end(), [](const auto& a, const auto& b) {
            return a[0] < b[0] || a[0] == b[0] && a[1] > b[1];
        });
        int res = 0, cur = 0;
        for (int i = properties.size() - 1; i >= 0; --i) {
            if (properties[i][1] < cur) ++res;
            cur = max(cur, properties[i][1]);
        }
        return res;

=======

        sort(properties.begin(), properties.end(), [](auto &a, auto &b) {
            return a[0] > b[0] || (a[0] == b[0] && a[1] < b[1]);
        });
        int ans = 0;
        int max_d = 0;
        for (int i = 0; i < properties.size(); ++i) {
            if (i == 0 || properties[i][0] == properties[i - 1][0]) {
                max_d = max(max_d, properties[i][1]);
            } else {
                if (properties[i][1] < max_d) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = properties.size();
        sort(properties.begin(), properties.end(), [](vector<int>& a, vector<int>& b) {
            if (a[0] == b[0]) {
                return a[1] > b[1];
            } else {
                return a[0] < b[0];
            }
        });
        int maxDefense = INT_MIN;
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (properties[i][1] < maxDefense) {
                res++;
            } else {
                maxDefense = properties[i][1];
            }
        }
        return res;

=======

        sort(properties.begin(), properties.end(), [](vector<int>& a, vector<int>& b){
            return a[0] < b[0] || a[0] == b[0] && a[1] > b[1];
        });
        int ans = 0;
        int maxDefense = 0;
        for(int i = properties.size() - 1; i >= 0; i--){
            if(properties[i][1] < maxDefense){
                ans++;
            }
            maxDefense = max(maxDefense, properties[i][1]);
        }
        return ans;

=======

        sort(properties.begin(), properties.end(), [](vector<int> &a, vector<int> &b) {
            return a[0] > b[0];
        });
        int n = properties.size();
        int maxDefense = properties[0][1];
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (properties[i][1] < maxDefense) {
                ans++;
            }
            maxDefense = max(maxDefense, properties[i][1]);
        }
        return ans;

=======

        int n = properties.size();
        vector<vector<int>> prop = properties;
        sort(prop.begin(), prop.end(), [](vector<int>& a, vector<int>& b) {
            return a[0] < b[0];
        });
        int ans = 0;
        int maxDef = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (prop[i][1] < maxDef) {
                ans++;
            } else {
                maxDef = prop[i][1];
            }
        }
        return ans;
