Synthesizing 10/10 solutions

=======

        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] <= nums[i - 1]) {
                res += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] <= nums[i-1]) {
                res += nums[i-1] - nums[i] + 1;
                nums[i] = nums[i-1] + 1;
            }
        }
        return res;

=======

        int ans = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] <= nums[i - 1]) {
                ans += nums[i - 1] + 1 - nums[i];
                nums[i] = nums[i - 1] + 1;
            }
        }
        return ans;

=======

        int moves = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] <= nums[i - 1]) {
                moves += (nums[i - 1] + 1) - nums[i];
                nums[i] = nums[i - 1] + 1;
            }
        }
        return moves;

=======

        int n = nums.size();
        if (n <= 1) return 0;
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] <= nums[i - 1]) {
                res += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return 0;
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] <= nums[i-1]) {
                res += nums[i-1] - nums[i] + 1;
                nums[i] = nums[i-1] + 1;
            }
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return 0;
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] <= nums[i-1]) {
                ans += nums[i-1] - nums[i] + 1;
                nums[i] = nums[i-1] + 1;
            }
        }
        return ans;

=======

        if (nums.size() < 2) return 0;
        sort(nums.begin(), nums.end());
        int moves = 0;
        int last = nums[0];
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] <= last) {
                moves += last + 1 - nums[i];
                nums[i] = last + 1;
            }
            last = nums[i];
        }
        return moves;

=======

        if (nums.size() == 0) return 0;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] <= nums[i-1]) {
                count += nums[i-1] - nums[i] + 1;
                nums[i] = nums[i-1] + 1;
            }
        }
        return count;

=======

        int n = nums.size();
        if(n == 1) return 0;
        sort(nums.begin(), nums.end());
        int moves = 0;
        for(int i = 1; i < n; i++) {
            if(nums[i] <= nums[i-1]) {
                int diff = nums[i-1] - nums[i] + 1;
                nums[i] += diff;
                moves += diff;
            }
        }
        return moves;
