Synthesizing 10/10 solutions

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> res;
        for (int i = 0; i < m + n - 1; i++) {
            if (i % 2 == 0) {
                int j = max(0, i - n + 1);
                while (j <= i && j < m) {
                    res.push_back(mat[j][i - j]);
                    j++;
                }
            } else {
                int j = min(i, m - 1);
                while (j >= 0 && j > i - n) {
                    res.push_back(mat[j][i - j]);
                    j--;
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> ans;
        for (int i = 0; i < m + n - 1; i++) {
            if (i % 2 == 0) {
                for (int j = min(i, m - 1); j >= max(0, i - n + 1); j--) {
                    ans.push_back(mat[j][i - j]);
                }
            } else {
                for (int j = max(0, i - n + 1); j <= min(i, m - 1); j++) {
                    ans.push_back(mat[j][i - j]);
                }
            }
        }
        return ans;

=======

        vector<int> result;
        int m = mat.size(), n = mat[0].size();
        int r = 0, c = 0;
        for (int i = 0; i < m * n; i++) {
            result.push_back(mat[r][c]);
            if ((r + c) % 2 == 0) { // moving up
                if (c == n - 1) {
                    r++;
                } else if (r == 0) {
                    c++;
                } else {
                    r--;
                    c++;
                }
            } else { // moving down
                if (r == m - 1) {
                    c++;
                } else if (c == 0) {
                    r++;
                } else {
                    r++;
                    c--;
                }
            }
        }
        return result;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> res;
        int x = 0, y = 0;
        for (int i = 0; i < m * n; i++) {
            res.push_back(mat[x][y]);
            if ((x + y) % 2 == 0) {
                if (y == n - 1) {
                    x++;
                } else if (x == 0) {
                    y++;
                } else {
                    x--;
                    y++;
                }
            } else {
                if (x == m - 1) {
                    y++;
                } else if (y == 0) {
                    x++;
                } else {
                    x++;
                    y--;
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> res(m * n);
        int i = 0;
        int j = 0;
        int k = 0;
        int dir = 1;
        while (k < m * n) {
            res[k++] = mat[i][j];
            if (dir == 1) {
                if (j == n - 1) {
                    i++;
                    dir = -1;
                } else if (i == 0) {
                    j++;
                    dir = -1;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m - 1) {
                    j++;
                    dir = 1;
                } else if (j == 0) {
                    i++;
                    dir = 1;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> res;
        for (int i = 0; i < m + n - 1; i++) {
            int start = max(0, i - n + 1);
            int count = min(i, m - 1) - start + 1;
            if (i % 2 == 0) {
                for (int j = 0; j < count; j++) {
                    res.push_back(mat[start + j][i - start - j]);
                }
            } else {
                for (int j = count - 1; j >= 0; j--) {
                    res.push_back(mat[start + j][i - start - j]);
                }
            }
        }
        return res;

=======

        int m = mat.size(), n = mat[0].size();
        vector<int> ans;
        int i = 0, j = 0;
        bool up = true;
        while (i < m && j < n) {
            ans.push_back(mat[i][j]);
            if (up) {
                if (j == n - 1) {
                    i++;
                    up = !up;
                } else if (i == 0) {
                    j++;
                    up = !up;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m - 1) {
                    j++;
                    up = !up;
                } else if (j == 0) {
                    i++;
                    up = !up;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> result(m*n);
        int i = 0;
        int j = 0;
        int k = 0;
        while (k < m*n) {
            result[k++] = mat[i][j];
            if ((i+j) % 2 == 0) {
                if (j == n-1) {
                    i++;
                } else if (i == 0) {
                    j++;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m-1) {
                    j++;
                } else if (j == 0) {
                    i++;
                } else {
                    i++;
                    j--;
                }
            }
        }
        return result;

=======

        vector<int> result;
        int m = mat.size();
        int n = mat[0].size();
        int i = 0;
        int j = 0;
        int k = 0;
        while (k < m * n) {
            result.push_back(mat[i][j]);
            if ((i + j) % 2 == 0) {
                if (j == n - 1) {
                    i++;
                } else if (i == 0) {
                    j++;
                } else {
                    i--;
                    j++;
                }
            } else {
                if (i == m - 1) {
                    j++;
                } else if (j == 0) {
                    i++;
                } else {
                    i++;
                    j--;
                }
            }
            k++;
        }
        return result;

=======

        vector<int> res;
        int row = mat.size(), col = mat[0].size();
        for (int i = 0; i < row + col - 1; i++) {
            int r = i < col ? 0 : i - col + 1;
            int c = i < col ? i : col - 1;
            while (r < row && c > -1) {
                res.push_back(mat[r++][c--]);
            }
            if (i % 2) {
                reverse(res.end() - min(row, col), res.end());
            }
        }
        return res;
