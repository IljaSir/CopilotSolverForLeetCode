Synthesizing 9/10 solutions (Duplicates hidden)

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int ans = 0;
        for (int i = 0, j = 0; i < players.size(); ++i) {
            while (j < trainers.size() && trainers[j] < players[i])
                ++j;
            if (j < trainers.size()) {
                ++ans;
                ++j;
            }
        }
        return ans;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int res = 0;
        for (int i = 0, j = 0; i < players.size(); ++i) {
            while (j < trainers.size() && players[i] > trainers[j]) ++j;
            if (j < trainers.size()) {
                ++res;
                ++j;
            }
        }
        return res;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int n = players.size(), m = trainers.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = 0, r = m - 1;
            while (l < r) {
                int mid = l + (r - l + 1) / 2;
                if (trainers[mid] >= players[i]) {
                    r = mid - 1;
                } else {
                    l = mid;
                }
            }
            if (trainers[l] >= players[i]) {
                ans++;
            }
        }
        return ans;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int n = players.size();
        int m = trainers.size();
        int ans = 0;
        for (int i = 0, j = 0; i < n && j < m; ++i) {
            while (j < m && players[i] > trainers[j]) {
                ++j;
            }
            if (j < m) {
                ++ans;
                ++j;
            }
        }
        return ans;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int n = players.size(), m = trainers.size();
        int res = 0;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < m && players[i] > trainers[j]) ++j;
            if (j < m) ++res;
            ++j;
        }
        return res;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int n = players.size();
        int m = trainers.size();
        int i = 0;
        int j = 0;
        int ans = 0;
        while (i < n && j < m) {
            if (players[i] <= trainers[j]) {
                i++;
                j++;
                ans++;
            } else {
                j++;
            }
        }
        return ans;

=======

        sort(players.rbegin(), players.rend());
        sort(trainers.rbegin(), trainers.rend());
        int i = 0, j = 0, res = 0;
        while (i < players.size() && j < trainers.size()) {
            if (players[i] <= trainers[j]) {
                ++i;
                ++j;
                ++res;
            } else {
                ++i;
            }
        }
        return res;

=======

        sort(players.begin(), players.end());
        sort(trainers.begin(), trainers.end());
        int ans = 0;
        int i = 0;
        int j = 0;
        while (i < players.size() && j < trainers.size()) {
            if (players[i] <= trainers[j]) {
                ans++;
                i++;
                j++;
            } else {
                j++;
            }
        }
        return ans;
