Synthesizing 10/10 solutions

=======

        if (matchsticks.size() < 4) return false;
        int sum = 0;
        for (int i = 0; i < matchsticks.size(); i++) {
            sum += matchsticks[i];
        }
        if (sum % 4) return false;
        int side = sum / 4;
        sort(matchsticks.begin(), matchsticks.end());
        reverse(matchsticks.begin(), matchsticks.end());
        return dfs(0, 0, side, 0, 0, matchsticks);
    }
    bool dfs(int i, int sum, int side, int a, int b, vector<int>& matchsticks) {
        if (i == matchsticks.size()) return (a == side) && (b == side);
        if (sum == side) {
            return dfs(0, 0, side, max(a, b), 0, matchsticks);
        }
        if (sum + matchsticks[i] > side) return false;
        if (a > side || b > side) return false;
        if (dfs(i + 1, sum + matchsticks[i], side, a, b, matchsticks)) return true;
        if (dfs(i + 1, sum, side, a, b + matchsticks[i], matchsticks)) return true;
        return false;

=======

        int sum = 0;
        for (int i = 0; i < matchsticks.size(); i++) {
            sum += matchsticks[i];
        }
        if (sum % 4 != 0) return false;
        int target = sum / 4;
        if (*max_element(matchsticks.begin(), matchsticks.end()) > target) return false;
        vector<int> sides(4, 0);
        return search(matchsticks, sides, target, 0);
    }
    bool search(vector<int>& matchsticks, vector<int>& sides, int target, int index) {
        if (index == matchsticks.size()) {
            return sides[0] == target && sides[1] == target && sides[2] == target;
        }
        for (int i = 0; i < 4; i++) {
            if (sides[i] + matchsticks[index] > target) continue;
            sides[i] += matchsticks[index];
            if (search(matchsticks, sides, target, index + 1)) return true;
            sides[i] -= matchsticks[index];
        }
        return false;

=======

        int sum = 0;
        for (int i = 0; i < matchsticks.size(); i++) {
            sum += matchsticks[i];
        }
        if (sum % 4 != 0) return false;
        sort(matchsticks.begin(), matchsticks.end(), greater<int>());
        vector<int> sides(4, sum / 4);
        return dfs(matchsticks, sides, 0);
    }
    
    bool dfs(vector<int>& matchsticks, vector<int>& sides, int index) {
        if (index == matchsticks.size()) {
            return true;
        }
        for (int i = 0; i < 4; i++) {
            if (sides[i] >= matchsticks[index]) {
                sides[i] -= matchsticks[index];
                if (dfs(matchsticks, sides, index + 1)) {
                    return true;
                }
                sides[i] += matchsticks[index];
            }
        }
        return false;

=======

        int sum = 0;
        for (int i = 0; i < matchsticks.size(); i++) {
            sum += matchsticks[i];
        }
        if (sum % 4 != 0) return false;
        int len = sum / 4;
        vector<int> sides = {0, 0, 0, 0};
        return search(matchsticks, sides, len, 0);
    }
    
    bool search(vector<int>& matchsticks, vector<int>& sides, int len, int curr) {
        if (curr == matchsticks.size()) {
            for (int i = 0; i < 4; i++) {
                if (sides[i] != len) return false;
            }
            return true;
        }
        for (int i = 0; i < 4; i++) {
            if (sides[i] + matchsticks[curr] > len) continue;
            sides[i] += matchsticks[curr];
            if (search(matchsticks, sides, len, curr + 1)) return true;
            sides[i] -= matchsticks[curr];
        }
        return false;

=======

        if (matchsticks.size() < 4) return false;
        int sum = accumulate(matchsticks.begin(), matchsticks.end(), 0);
        if (sum % 4 != 0) return false;
        int side = sum / 4;
        sort(matchsticks.begin(), matchsticks.end(), greater<int>());
        if (matchsticks[0] > side) return false;
        vector<int> sides(4, 0);
        return dfs(matchsticks, sides, 0, side);

=======

        int sum = 0;
        for (int i = 0; i < matchsticks.size(); ++i) {
            sum += matchsticks[i];
        }
        if (sum % 4 != 0) {
            return false;
        }
        int len = sum / 4;
        vector<bool> used(matchsticks.size(), false);
        return dfs(matchsticks, used, 0, len, 0, 4);
    }
    bool dfs(vector<int>& matchsticks, vector<bool>& used, int start, int len, int cur, int k) {
        if (k == 1) {
            return true;
        }
        if (cur == len) {
            return dfs(matchsticks, used, 0, len, 0, k - 1);
        }
        for (int i = start; i < matchsticks.size(); ++i) {
            if (!used[i] && cur + matchsticks[i] <= len) {
                used[i] = true;
                if (dfs(matchsticks, used, i + 1, len, cur + matchsticks[i], k)) {
                    return true;
                }
                used[i] = false;
            }
        }
        return false;

=======

        int n = matchsticks.size();
        if (n < 4) return false;
        int sum = 0;
        for (int i = 0; i < n; i++) sum += matchsticks[i];
        if (sum % 4 != 0) return false;
        int target = sum / 4;
        sort(matchsticks.begin(), matchsticks.end(), greater<int>());
        if (matchsticks[0] > target) return false;
        vector<int> sides(4, 0);
        return dfs(matchsticks, 0, sides, target);

=======

        int sum = accumulate(matchsticks.begin(), matchsticks.end(), 0);
        if (sum % 4) return false;
        int side = sum / 4;
        vector<int> sides(4, 0);
        sort(matchsticks.rbegin(), matchsticks.rend());
        return dfs(matchsticks, sides, side, 0);
    }
    
    bool dfs(vector<int>& matchsticks, vector<int>& sides, int side, int index) {
        if (index == matchsticks.size()) {
            if (sides[0] == sides[1] && sides[1] == sides[2] && sides[2] == sides[3]) {
                return true;
            }
            return false;
        }
        for (int i = 0; i < 4; i++) {
            if (sides[i] + matchsticks[index] > side) continue;
            sides[i] += matchsticks[index];
            if (dfs(matchsticks, sides, side, index + 1)) return true;
            sides[i] -= matchsticks[index];
        }
        return false;

=======

        if(matchsticks.size() < 4) return false;
        int sum = 0;
        for(int i : matchsticks) sum += i;
        if(sum % 4 != 0) return false;
        int side = sum / 4;
        vector<int> sides(4, 0);
        return dfs(matchsticks, sides, side, 0);
    }
    bool dfs(vector<int>& matchsticks, vector<int>& sides, int side, int idx) {
        if(idx == matchsticks.size()) {
            if(sides[0] == side && sides[1] == side && sides[2] == side && sides[3] == side) return true;
            else return false;
        }
        for(int i = 0; i < 4; i++) {
            if(sides[i] + matchsticks[idx] > side) continue;
            sides[i] += matchsticks[idx];
            if(dfs(matchsticks, sides, side, idx + 1)) return true;
            sides[i] -= matchsticks[idx];
        }
        return false;

=======

        int sum = 0;
        for (int m : matchsticks) sum += m;
        if (sum % 4 != 0) return false;
        int target = sum / 4;
        vector<int> sums(4, 0);
        return dfs(matchsticks, sums, target, 0);
    }
    bool dfs(vector<int>& matchsticks, vector<int>& sums, int target, int index) {
        if (index == matchsticks.size()) {
            return sums[0] == target && sums[1] == target && sums[2] == target;
        }
        for (int i = 0; i < 4; i++) {
            if (sums[i] + matchsticks[index] > target) continue;
            sums[i] += matchsticks[index];
            if (dfs(matchsticks, sums, target, index + 1)) return true;
            sums[i] -= matchsticks[index];
        }
        return false;
