Synthesizing 9/10 solutions

=======

        int n = beans.size();
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += beans[i];
        }
        long long avg = sum / n;
        long long res = 0;
        for (int i = 0; i < n; i++) {
            if (beans[i] > avg) {
                res += beans[i] - avg;
            }
        }
        return res;

=======

        int n = beans.size();
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += beans[i];
        }
        long long avg = sum / n;
        long long mod = sum % n;
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (beans[i] > avg) {
                if (i < mod) {
                    res += beans[i] - avg - 1;
                } else {
                    res += beans[i] - avg;
                }
            }
        }
        return res;

=======

        long long res = 0;
        sort(beans.begin(), beans.end());
        for (int i = 0; i < beans.size(); i++) {
            res += beans[i] - beans[0];
        }
        return res;

=======

        sort(beans.begin(), beans.end());
        int n = beans.size();
        vector<int> pre(n, 0);
        pre[0] = beans[0];
        for(int i = 1; i < n; i++) {
            pre[i] = pre[i - 1] + beans[i];
        }
        long long ans = 0;
        for(int i = 0; i < n; i++) {
            // [0, i] [i + 1, n - 1]
            int left = i + 1;
            int right = n - 1;
            int res = -1;
            while(left <= right) {
                int mid = (left + right) / 2;
                long long sum = pre[mid] - pre[i];
                long long cnt = mid - i;
                if(sum * 2 == cnt * beans[i]) {
                    res = mid;
                    break;
                } else if(sum * 2 > cnt * beans[i]) {
                    res = mid;
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
            if(res != -1) {
                ans += res - i;
            }
        }
        return ans;

=======

        long long sum = 0;
        for (int i = 0; i < beans.size(); i++) {
            sum += beans[i];
        }
        long long avg = sum / beans.size();
        long long count = 0;
        for (int i = 0; i < beans.size(); i++) {
            if (beans[i] > avg) {
                count += beans[i] - avg;
            }
        }
        return count;

=======

        long long sum = accumulate(beans.begin(), beans.end(), 0LL);
        int n = beans.size();
        long long m = sum / n;
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (beans[i] > m) {
                ans += beans[i] - m;
            }
        }
        return ans;

=======

        long long sum = 0;
        long long n = beans.size();
        for (int i = 0; i < n; ++i) sum += beans[i];
        long long avg = sum / n;
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (beans[i] > avg) res += beans[i] - avg;
        }
        return res;

=======

        map<int, int> cnt;
        for (int b : beans) cnt[b]++;
        vector<int> values;
        for (auto& kv : cnt) values.push_back(kv.first);
        int n = values.size();
        vector<long long> sum(n + 1);
        for (int i = 0; i < n; ++i) sum[i + 1] = sum[i] + values[i];
        long long res = 1e18;
        for (int i = 0; i < n; ++i) {
            long long need = 1LL * (i + 1) * values[i] - sum[i + 1];
            long long extra = sum[n] - sum[i + 1] - 1LL * (n - i - 1) * values[i];
            res = min(res, need + extra);
        }
        return res;

=======

        sort(beans.begin(), beans.end());
        long long sum = 0;
        for (auto& i : beans) {
            sum += i;
        }
        
        long long minSum = 0;
        for (int i = 0; i < beans.size(); i++) {
            sum -= beans[i];
            minSum += sum;
        }
        return minSum;
