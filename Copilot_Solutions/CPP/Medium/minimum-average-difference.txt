Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<int> index(n);
        iota(index.begin(), index.end(), 0);
        sort(index.begin(), index.end(), [&](int a, int b) {
            return sum[a + 1] * (n - a) < sum[b + 1] * (n - b);
        });
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if ((sum[index[i] + 1] - sum[index[ans] + 1]) * (n - index[i]) < (sum[index[ans] + 1] - sum[index[i - 1] + 1]) * (n - index[ans])) {
                ans = i;
            }
        }
        return index[ans];

=======

        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int ans = 0;
        int min_diff = INT_MAX;
        for (int i = 0; i < n - 1; ++i) {
            int left = (prefix[i + 1] + i) / (i + 1);
            int right = (prefix[n] - prefix[i + 1]) / (n - i - 1);
            int diff = abs(left - right);
            if (diff < min_diff) {
                min_diff = diff;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; ++i) {
            pre[i + 1] = pre[i] + nums[i];
        }
        int res = 0;
        double minAvg = 1e9;
        for (int i = 0; i < n - 1; ++i) {
            int l = i + 1, r = n - 1;
            while (l <= r) {
                int m = l + (r - l) / 2;
                double avg1 = (pre[m + 1] - pre[0]) / (m + 1.0);
                double avg2 = (pre[n] - pre[m + 1]) / (n - m - 1.0);
                if (avg1 < avg2) {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
            int m = l - 1;
            double avg1 = (pre[m + 1] - pre[0]) / (m + 1.0);
            double avg2 = (pre[n] - pre[m + 1]) / (n - m - 1.0);
            if (minAvg > abs(avg1 - avg2)) {
                minAvg = abs(avg1 - avg2);
                res = i;
            }
        }
        return res;

=======

        int n = nums.size();
        int sum[n];
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int ans = 0;
        int minDiff = INT_MAX;
        for (int i = 0; i < n - 1; i++) {
            int left = i + 1;
            int right = n - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                int leftSum = sum[mid] - sum[i];
                int rightSum = sum[n - 1] - sum[mid];
                int leftCount = mid - i;
                int rightCount = n - mid;
                int diff = abs(leftSum / leftCount - rightSum / rightCount);
                if (diff < minDiff) {
                    minDiff = diff;
                    ans = i;
                }
                if (leftSum * rightCount < rightSum * leftCount) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> presum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            presum[i + 1] = presum[i] + nums[i];
        }
        vector<int> minPre(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            minPre[i + 1] = min(minPre[i], presum[i + 1]);
        }
        int ans = 0;
        double minAvg = 1e9;
        for (int i = 0; i < n; ++i) {
            double avg = (presum[n] - presum[i + 1]) * 1.0 / (n - i - 1);
            double avg2 = (presum[i + 1] - minPre[i + 1]) * 1.0 / (i + 1);
            double curAvg = min(avg, avg2);
            if (curAvg < minAvg) {
                minAvg = curAvg;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> prefix(n+1, 0);
        for (int i = 0; i < n; ++i) {
            prefix[i+1] = prefix[i] + nums[i];
        }
        int minIndex = 0;
        double minDiff = 1e9;
        for (int i = 0; i < n; ++i) {
            double diff = (prefix[i+1] - prefix[0]) * 1.0 / (i+1) - (prefix[n] - prefix[i+1]) * 1.0 / (n - i - 1);
            if (diff < minDiff) {
                minDiff = diff;
                minIndex = i;
            }
        }
        return minIndex;

=======

        int n = nums.size();
        int sum[100001];
        sum[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        int ans = 0;
        int minDiff = INT_MAX;
        for (int i = 0; i < n - 1; i++) {
            int left = (i + 1) / 2;
            int right = (i + 1) - left;
            int leftSum = sum[left];
            int rightSum = sum[i + 1] - sum[left];
            int leftAvg = leftSum / left;
            int rightAvg = rightSum / right;
            int diff = abs(leftAvg - rightAvg);
            if (diff < minDiff) {
                minDiff = diff;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        int min_index = -1;
        int min_diff = INT_MAX;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i >= 4) {
                int avg1 = (sum - nums[i - 4]) / 4;
                int avg2 = (sum - nums[i]) / (i + 1);
                int diff = abs(avg1 - avg2);
                if (diff < min_diff) {
                    min_diff = diff;
                    min_index = i - 3;
                }
            }
        }
        return min_index;

=======

        int n = nums.size();
        int res = 0;
        int min_val = 1e9;
        for (int i = 0; i < n - 1; i++) {
            nums[i + 1] += nums[i];
        }
        for (int i = 0; i < n - 1; i++) {
            int l = i + 1;
            int r = n - 1;
            int pos = -1;
            while (l <= r) {
                int mid = (l + r) / 2;
                int sum = nums[mid] - nums[i];
                int len = mid - i;
                int avg = sum / len;
                int avg2 = (sum + nums[n - 1] - nums[mid]) / (n - mid);
                if (avg <= avg2) {
                    pos = mid;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            if (pos != -1) {
                int sum = nums[pos] - nums[i];
                int len = pos - i;
                int avg = sum / len;
                int avg2 = (sum + nums[n - 1] - nums[pos]) / (n - pos);
                int val = abs(avg - avg2);
                if (val < min_val) {
                    min_val = val;
                    res = i;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        int minDiff = INT_MAX;
        vector<int> sum(n+1, 0);
        for(int i = 1; i <= n; i++){
            sum[i] = sum[i-1] + nums[i-1];
        }
        for(int i = 0; i < n-1; i++){
            int l = i+1, r = n-1;
            while(l < r){
                int mid = (l+r)/2;
                int a = sum[mid+1] - sum[i+1];
                int b = sum[n] - sum[mid+1];
                if(a > b){
                    r = mid;
                }else{
                    l = mid+1;
                }
            }
            int a = sum[l] - sum[i+1];
            int b = sum[n] - sum[l];
            int diff = abs(a*l - b*(i+1));
            if(diff < minDiff){
                ans = i;
                minDiff = diff;
            }
        }
        return ans;
