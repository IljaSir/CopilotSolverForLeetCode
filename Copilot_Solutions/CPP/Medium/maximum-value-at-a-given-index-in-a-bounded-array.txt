Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(n, index, maxSum, mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    bool check(int n, int index, int maxSum, int mid) {
        long long sum = mid;
        int l = index, r = index;
        for (int i = mid - 1; i >= 1; i--) {
            if (l - 1 >= 0) {
                sum += i;
                l--;
            }
            else if (r + 1 < n) {
                sum += i;
                r++;
            }
            else break;
        }
        return sum <= maxSum;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(n, index, maxSum, mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    bool check(int n, int index, int maxSum, int mid) {
        long long sum = mid;
        int l = index, r = index;
        while (l > 0 || r < n - 1) {
            int nl = l - 1, nr = r + 1;
            if (nl < 0 || nr >= n) break;
            if (mid - 1 > mid - nl - 1) {
                sum += mid - 1;
                mid = mid - 1;
                r = nr;
            }
            else {
                sum += mid - nl - 1;
                mid = mid - nl - 1;
                l = nl;
            }
        }
        if (l > 0) {
            int len = l;
            sum += (long long)mid * (len + 1) - (long long)len * (len + 1) / 2;
        }
        if (r < n - 1) {
            int len = n - 1 - r;
            sum += (long long)mid * (len + 1) - (long long)len * (len + 1) / 2;
        }
        return sum <= maxSum;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(n, index, maxSum, mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    bool check(int n, int index, int maxSum, int mid) {
        long long sum = mid;
        int l = index, r = index;
        for (int i = 1; i < n; ++i) {
            if (l > 0 && r < n - 1) {
                if (mid - 1 > mid - (sum + mid - 1 - maxSum)) {
                    --l;
                    sum += mid - 1;
                } else {
                    ++r;
                    sum += mid - (sum + mid - 1 - maxSum);
                }
            } else if (l > 0) {
                --l;
                sum += mid - 1;
            } else if (r < n - 1) {
                ++r;
                sum += mid - (sum + mid - 1 - maxSum);
            } else break;
        }
        return sum <= maxSum;

=======

        maxSum -= n;
        int l = 0, r = maxSum;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(mid, n, index, maxSum)) l = mid;
            else r = mid - 1;
        }
        return l + 1;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int m = (l + r + 1) >> 1;
            if (check(n, index, maxSum, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        int l = 1, r = maxSum;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(n, index, maxSum, mid)) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return check(n, index, maxSum, l) ? l : l - 1;
    }
    bool check(int n, int index, int maxSum, int x) {
        int sum = x;
        if (x > index + 1) {
            sum += (x - index - 1) * (x - index) / 2;
        } else {
            sum += (x - 1) * x / 2;
        }
        if (x > n - index) {
            sum += (x - n + index) * (x - n + index + 1) / 2;
        } else {
            sum += (x - 1) * x / 2;
        }
        if (x > n) {
            sum -= (x - n) * (x - n + 1) / 2;
        }
        return sum <= maxSum;

=======

        int l = 1, r = maxSum, m;
        while (l < r) {
            m = l + (r - l + 1) / 2;
            if (check(n, index, maxSum, m)) l = m;
            else r = m - 1;
        }
        return l;
    }
    bool check(int n, int index, int maxSum, int x) {
        long long l = 0, r = 0;
        int i = index;
        while (i >= 0 && x - i <= x) {
            l += min(x, x - i);
            i--;
        }
        i = index + 1;
        while (i < n && x - (n - i - 1) <= x) {
            r += min(x, x - (n - i - 1));
            i++;
        }
        return l + r + x <= maxSum;

=======

        int l = 0, r = maxSum;
        while(l < r) {
            int mid = (l + r + 1) / 2;
            long long sum = mid;
            int left = index, right = index;
            while(left > 0 || right < n - 1) {
                if(left == 0)
                    sum += mid - 1, right++;
                else if(right == n - 1)
                    sum += mid - 1, left--;
                else if(mid - 1 > mid - (index - left + 1))
                    sum += mid - 1, right++;
                else
                    sum += mid - 1, left--;
            }
            if(sum > maxSum)
                r = mid - 1;
            else
                l = mid;
        }
        return l;
