Synthesizing 8/10 solutions

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 0, r = position[n - 1] - position[0];
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            int cnt = 1;
            int last = position[0];
            for (int i = 1; i < n; i++) {
                if (position[i] - last >= mid) {
                    cnt++;
                    last = position[i];
                }
            }
            if (cnt >= m) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 0, r = position[n - 1] - position[0];
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(position, mid, m)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    
    bool check(vector<int>& position, int mid, int m) {
        int cnt = 1, n = position.size();
        int last = position[0];
        for (int i = 1; i < n; ++i) {
            if (position[i] - last >= mid) {
                ++cnt;
                last = position[i];
            }
        }
        return cnt >= m;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 0, r = position[n - 1] - position[0];
        while (l < r) {
            int mid = l + r + 1 >> 1;
            if (check(position, m, mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    bool check(vector<int>& position, int m, int d) {
        int cnt = 1, last = position[0];
        for (int i = 1; i < position.size(); i ++ ) {
            if (position[i] - last >= d) {
                cnt ++ ;
                last = position[i];
            }
        }
        return cnt >= m;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 0, r = 1e9;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            int cnt = 1, last = position[0];
            for (int i = 1; i < n; ++i) {
                if (position[i] - last >= mid) {
                    ++cnt;
                    last = position[i];
                }
            }
            if (cnt >= m) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 0, r = position[n-1] - position[0];
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            int cnt = 1, last = position[0];
            for (int i = 1; i < n; ++i) {
                if (position[i] - last >= mid) {
                    ++cnt;
                    last = position[i];
                }
            }
            if (cnt >= m) l = mid;
            else r = mid - 1;
        }
        return l;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int left = 0, right = position[n-1] - position[0];
        while (left < right) {
            int mid = left + (right - left + 1) / 2;
            int count = 1, pre = position[0];
            for (int i = 1; i < n; ++i) {
                if (position[i] - pre >= mid) {
                    ++count;
                    pre = position[i];
                }
            }
            if (count >= m) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;

=======

        sort(position.begin(), position.end());
        int n = position.size();
        int l = 1;
        int r = position[n-1] - position[0];
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            int count = 1;
            int pre = position[0];
            for (int i = 1; i < n; ++i) {
                if (position[i] - pre >= mid) {
                    count++;
                    pre = position[i];
                }
            }
            if (count >= m) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        sort(begin(position), end(position));
        int n = position.size();
        int low = 0;
        int high = position.back() - position.front();
        while (low < high) {
            int mid = low + (high - low + 1) / 2;
            int cnt = 1;
            int prev = position.front();
            for (int i = 1; i < n; ++i) {
                if (position[i] - prev >= mid) {
                    ++cnt;
                    prev = position[i];
                }
            }
            if (cnt >= m) {
                low = mid;
            } else {
                high = mid - 1;
            }
        }
        return low;
