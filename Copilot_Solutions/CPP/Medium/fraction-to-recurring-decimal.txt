Synthesizing 10/10 solutions

=======

        if (numerator == 0) {
            return "0";
        }
        string ans;
        if (numerator < 0 ^ denominator < 0) {
            ans += '-';
        }
        long long num = labs(numerator), den = labs(denominator);
        ans += to_string(num / den);
        num %= den;
        if (num == 0) {
            return ans;
        }
        ans += '.';
        unordered_map<long long, int> m;
        for (long long r = num; r; r %= den) {
            if (m.count(r)) {
                ans.insert(m[r], 1, '(');
                ans += ')';
                break;
            }
            m[r] = ans.size();
            r *= 10;
            ans += to_string(r / den);
        }
        return ans;

=======

        if (numerator == 0) return "0";
        string res;
        if (numerator < 0 ^ denominator < 0) res += '-';
        long long num = labs(numerator), den = labs(denominator);
        res += to_string(num / den);
        if (num % den == 0) return res;
        res += '.';
        unordered_map<int, int> m;
        for (long long r = num % den; r; r %= den) {
            if (m.count(r) > 0) {
                res.insert(m[r], 1, '(');
                res += ')';
                break;
            }
            m[r] = res.size();
            r *= 10;
            res += to_string(r / den);
        }
        return res;

=======

        if (numerator == 0) return "0";
        string ans;
        // If either one is negative (not both)
        if (numerator < 0 ^ denominator < 0) ans += '-';
        long n = labs(numerator), d = labs(denominator), r = n % d;
        ans += to_string(n / d);
        if (r == 0) return ans;
        ans += '.';
        unordered_map<int, int> m;
        while (r) {
            if (m.count(r) > 0) {
                ans.insert(m[r], 1, '(');
                ans += ')';
                break;
            }
            m[r] = ans.size();
            r *= 10;
            ans += to_string(r / d);
            r %= d;
        }
        return ans;

=======

        if (numerator == 0) return "0";
        string res;
        if (numerator < 0 ^ denominator < 0) res += '-';
        long long num = abs((long long)numerator);
        long long den = abs((long long)denominator);
        res += to_string(num / den);
        long long rem = num % den;
        if (rem == 0) return res;
        res += '.';
        unordered_map<long long, int> m;
        while (rem != 0) {
            if (m.count(rem)) {
                res.insert(m[rem], 1, '(');
                res += ')';
                break;
            }
            m[rem] = res.size();
            rem *= 10;
            res += to_string(rem / den);
            rem %= den;
        }
        return res;

=======

        string res;
        if (numerator == 0) return "0";
        if (numerator < 0 ^ denominator < 0) res += '-';
        long long num = labs(numerator), den = labs(denominator);
        res += to_string(num / den);
        if (num % den == 0) return res;
        res += '.';
        unordered_map<int, int> m;
        for (int r = num % den; r; r %= den) {
            if (m.count(r) > 0) {
                res.insert(m[r], 1, '(');
                res += ')';
                break;
            }
            m[r] = res.size();
            r *= 10;
            res += to_string(r / den);
        }
        return res;

=======

        if (denominator == 0) return "NaN";
        if (numerator == 0) return "0";
        string result;
        if (numerator < 0 ^ denominator < 0) result += "-";
        long long num = abs((long long)numerator);
        long long den = abs((long long)denominator);
        result += to_string(num / den);
        long long rem = num % den;
        if (rem == 0) return result;
        result += '.';
        unordered_map<long long, int> m;
        while (rem) {
            if (m.count(rem)) {
                result.insert(m[rem], 1, '(');
                result += ')';
                break;
            }
            m[rem] = result.size();
            rem *= 10;
            result += to_string(rem / den);
            rem = rem % den;
        }
        return result;

=======

        long long num = numerator;
        long long den = denominator;
        if (num % den == 0) {
            return to_string(num / den);
        }
        string ans;
        if ((num > 0) ^ (den > 0)) {
            ans += '-';
        }
        num = abs(num);
        den = abs(den);
        ans += to_string(num / den) + '.';
        num %= den;
        unordered_map<int, int> mp;
        while (num != 0) {
            mp[num] = ans.size();
            num *= 10;
            ans += to_string(num / den);
            num %= den;
            if (mp.count(num)) {
                ans.insert(mp[num], 1, '(');
                ans += ')';
                break;
            }
        }
        return ans;

=======

        long long num = numerator;
        long long den = denominator;
        string ans = "";
        if (num * den < 0) ans += '-';
        num = abs(num);
        den = abs(den);
        ans += to_string(num / den);
        num %= den;
        if (num == 0) return ans;
        ans += '.';
        unordered_map<int, int> m;
        while (num) {
            if (m.count(num)) {
                ans.insert(m[num], "(");
                ans += ')';
                break;
            }
            m[num] = ans.size();
            num *= 10;
            ans += to_string(num / den);
            num %= den;
        }
        return ans;

=======

        string result;
        long long n = numerator;
        long long d = denominator;
        if (n == 0) return "0";
        if (n < 0 && d > 0 || n > 0 && d < 0) {
            result += '-';
        }
        n = abs(n);
        d = abs(d);
        result += to_string(n / d);
        if (n % d == 0) return result;
        result += '.';
        unordered_map<int, int> m;
        for (long long r = n % d; r; r %= d) {
            if (m.count(r) > 0) {
                result.insert(m[r], 1, '(');
                result += ')';
                break;
            }
            m[r] = result.size();
            r *= 10;
            result += to_string(r / d);
        }
        return result;

=======

        string s = "";
        if (numerator == 0) {
            return "0";
        }
        if (numerator < 0 ^ denominator < 0) {
            s += "-";
        }
        long long n = abs((long long)numerator);
        long long d = abs((long long)denominator);
        s += to_string(n / d);
        if (n % d == 0) {
            return s;
        }
        s += ".";
        unordered_map<long long, int> m;
        for (long long r = n % d; r; r %= d) {
            if (m.count(r)) {
                s.insert(m[r], 1, '(');
                s += ")";
                break;
            }
            m[r] = s.size();
            r *= 10;
            s += to_string(r / d);
        }
        return s;
