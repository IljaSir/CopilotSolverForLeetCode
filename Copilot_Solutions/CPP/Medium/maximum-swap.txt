Synthesizing 10/10 solutions

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> last(10);
        for (int i = 0; i < n; ++i) {
            last[s[i] - '0'] = i;
        }
        for (int i = 0; i < n; ++i) {
            for (int d = 9; d > s[i] - '0'; --d) {
                if (last[d] > i) {
                    swap(s[i], s[last[d]]);
                    return stoi(s);
                }
            }
        }
        return num;

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> last(10);
        for (int i = 0; i < n; i++) {
            last[s[i] - '0'] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int d = 9; d > s[i] - '0'; d--) {
                if (last[d] > i) {
                    swap(s[i], s[last[d]]);
                    return stoi(s);
                }
            }
        }
        return num;

=======

        string s = to_string(num);
        int n = s.length();
        vector<int> last(10, 0);
        for (int i = 0; i < n; i++) {
            last[s[i] - '0'] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int d = 9; d > s[i] - '0'; d--) {
                if (last[d] > i) {
                    swap(s[i], s[last[d]]);
                    return stoi(s);
                }
            }
        }
        return num;

=======

        string s = to_string(num);
        int max = num;
        for (int i = 0; i < s.size(); i++) {
            for (int j = i + 1; j < s.size(); j++) {
                swap(s[i], s[j]);
                max = max > stoi(s) ? max : stoi(s);
                swap(s[i], s[j]);
            }
        }
        return max;

=======

        string s = to_string(num);
        int n = s.length();
        vector<int> idx(10, -1);
        for (int i = 0; i < n; ++i) {
            idx[s[i] - '0'] = i;
        }
        for (int i = 0; i < n; ++i) {
            for (int d = 9; d > s[i] - '0'; --d) {
                if (idx[d] > i) {
                    swap(s[i], s[idx[d]]);
                    return stoi(s);
                }
            }
        }
        return num;

=======

        string s = to_string(num);
        int n = s.size();
        int max = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            if (s[i] < s[max]) {
                for (int j = n - 1; j > i; j--) {
                    if (s[j] >= s[max]) {
                        max = j;
                    }
                }
                swap(s[i], s[max]);
                return stoi(s);
            }
            else if (s[i] > s[max]) {
                max = i;
            }
        }
        return num;

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> last(10,-1);
        for(int i=0;i<n;i++){
            last[s[i]-'0'] = i;
        }
        for(int i=0;i<n;i++){
            for(int j=9;j>s[i]-'0';j--){
                if(last[j]>i){
                    swap(s[i],s[last[j]]);
                    return stoi(s);
                }
            }
        }
        return num;

=======

        string s = to_string(num);
        int n = s.size();
        int idx = n - 1;
        for (int i = n - 2; i >= 0; --i) {
            if (s[i] < s[idx]) {
                int j = i + 1;
                while (j < n && s[j] != s[i]) {
                    ++j;
                }
                swap(s[i], s[j]);
                break;
            } else if (s[i] > s[idx]) {
                idx = i;
            }
        }
        return stoi(s);

=======

        string s = to_string(num);
        int n = s.size();
        vector<int> pos(n, -1);
        int mx = n-1;
        for (int i = n-1; i >= 0; --i) {
            if (s[i] > s[mx]) {
                mx = i;
            }
            pos[i] = mx;
        }
        for (int i = 0; i < n; ++i) {
            if (s[i] < s[pos[i]]) {
                swap(s[i], s[pos[i]]);
                break;
            }
        }
        return stoi(s);

=======

        string str = to_string(num);
        int n = str.size();
        int i = 0;
        // find the first digit that is not the largest in the remaining digits
        while (i < n - 1 && str[i] >= str[i + 1]) {
            ++i;
        }
        if (i == n - 1) {
            return num;
        }
        // find the largest digit in the remaining digits
        int maxIndex = i + 1;
        for (int j = i + 2; j < n; ++j) {
            if (str[j] >= str[maxIndex]) {
                maxIndex = j;
            }
        }
        // find the first digit that is smaller than the largest digit
        for (int j = 0; j < i + 1; ++j) {
            if (str[j] < str[maxIndex]) {
                swap(str[j], str[maxIndex]);
                break;
            }
        }
        return stoi(str);
