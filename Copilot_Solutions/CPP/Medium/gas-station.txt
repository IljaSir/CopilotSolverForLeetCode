Synthesizing 10/10 solutions

=======

        int n = gas.size();
        int i = 0;
        while (i < n) {
            int count = 0;
            int sumOfGas = 0;
            int sumOfCost = 0;
            while (count < n) {
                int j = (i + count) % n;
                sumOfGas += gas[j];
                sumOfCost += cost[j];
                if (sumOfCost > sumOfGas) {
                    break;
                }
                count++;
            }
            if (count == n) {
                return i;
            } else {
                i = i + count + 1;
            }
        }
        return -1;

=======

        int n = gas.size();
        vector<int> diff(n);
        for (int i = 0; i < n; i++) {
            diff[i] = gas[i] - cost[i];
        }
        int start = 0;
        int min = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += diff[i];
            if (sum < min) {
                min = sum;
                start = i + 1;
            }
        }
        return sum < 0 ? -1 : start;

=======

        int start = 0;
        int total = 0;
        int tank = 0;
        for (int i = 0; i < gas.size(); i++) {
            int consume = gas[i] - cost[i];
            if (tank + consume < 0) {
                start = i + 1;
                total += tank;
                tank = 0;
            } else {
                tank += consume;
            }
        }
        return (total + tank < 0) ? -1 : start;

=======

        int n = gas.size();
        int start = 0;
        int tank = 0;
        int total = 0;
        for (int i = 0; i < n; i++) {
            tank += gas[i] - cost[i];
            total += gas[i] - cost[i];
            if (tank < 0) {
                start = i + 1;
                tank = 0;
            }
        }
        return total >= 0 ? start : -1;

=======

        int n = gas.size();
        int sum_gas = 0, sum_cost = 0;
        int start = 0, tank = 0;
        for (int i = 0; i < n; ++i) {
            sum_gas += gas[i];
            sum_cost += cost[i];
            tank += gas[i] - cost[i];
            if (tank < 0) {
                start = i + 1;
                tank = 0;
            }
        }
        return sum_gas < sum_cost ? -1 : start;

=======

        int n = gas.size();
        int sum = 0;
        int min_sum = 0;
        int min_idx = 0;
        for (int i = 0; i < n; ++i) {
            sum += gas[i] - cost[i];
            if (sum < min_sum) {
                min_sum = sum;
                min_idx = i;
            }
        }
        return sum < 0 ? -1 : (min_idx + 1) % n;

=======

        int n = gas.size();
        int start = 0;
        int end = 0;
        int sum = 0;
        while (start < n) {
            sum += gas[end] - cost[end];
            end = (end + 1) % n;
            if (sum < 0) {
                start = end;
                sum = 0;
            } else if (start == end) {
                return start;
            }
        }
        return -1;

=======

        int n = gas.size();
        int ans = -1;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            int j = i;
            int cnt = 0;
            while (cnt < n) {
                sum += gas[j];
                sum -= cost[j];
                if (sum < 0) {
                    break;
                }
                j = (j + 1) % n;
                cnt++;
            }
            if (cnt == n) {
                ans = i;
                break;
            }
        }
        return ans;

=======

        int n = gas.size();
        int min = INT_MAX, minIndex = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += gas[i] - cost[i];
            if (sum < min) {
                min = sum;
                minIndex = i;
            }
        }
        return sum < 0 ? -1 : (minIndex + 1) % n;

=======

        int n = gas.size();
        int start = 0;
        int end = 0;
        int tank = 0;
        while (start < n) {
            while (end < n) {
                tank += gas[end] - cost[end];
                if (tank < 0) {
                    break;
                }
                end++;
            }
            if (end == n) {
                return start;
            }
            start = end + 1;
            end = start;
            tank = 0;
        }
        return -1;
