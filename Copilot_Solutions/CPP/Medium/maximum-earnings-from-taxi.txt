Synthesizing 9/10 solutions

=======

        sort(rides.begin(), rides.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        vector<long long> dp(n + 1, 0);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = max(dp[i], dp[i - 1]);
            while (j < rides.size() && rides[j][1] == i) {
                dp[i] = max(dp[i], dp[rides[j][0]] + rides[j][2] + rides[j][1] - rides[j][0]);
                j++;
            }
        }
        return dp[n];

=======

        sort(rides.begin(), rides.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        vector<long long> dp(n + 1, 0);
        int j = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1];
            while (j < rides.size() && rides[j][1] == i) {
                dp[i] = max(dp[i], dp[rides[j][0]] + rides[j][1] - rides[j][0] + rides[j][2]);
                ++j;
            }
        }
        return dp[n];

=======

        auto cmp = [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        };
        sort(rides.begin(), rides.end(), cmp);
        vector<long long> dp(n + 1, 0);
        int i = 0;
        for (int j = 1; j <= n; ++j) {
            dp[j] = dp[j - 1];
            while (i < rides.size() && rides[i][1] == j) {
                int k = rides[i][0];
                dp[j] = max(dp[j], dp[k] + rides[i][1] - rides[i][0] + rides[i][2]);
                i++;
            }
        }
        return dp[n];

=======

        vector<vector<int>> sorted;
        for (int i = 0; i < rides.size(); ++i) {
            sorted.push_back({rides[i][1], rides[i][0], rides[i][2], i});
        }
        sort(sorted.begin(), sorted.end());
        vector<int> dp(sorted.size(), 0);
        dp[0] = sorted[0][2] + sorted[0][0] - sorted[0][1];
        for (int i = 1; i < sorted.size(); ++i) {
            int l = 0, r = i;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (sorted[mid][0] <= sorted[i][1]) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            dp[i] = max(dp[i - 1], sorted[i][2] + sorted[i][0] - sorted[i][1] + (l > 0 ? dp[l - 1] : 0));
        }
        return dp.back();

=======

        long long dp[n+1];
        memset(dp, 0, sizeof(dp));
        sort(rides.begin(), rides.end(), [](vector<int> &a, vector<int> &b) {
            return a[1] < b[1];
        });
        int i = 0;
        for (int j = 1; j <= n; ++j) {
            dp[j] = max(dp[j], dp[j-1]);
            while (i < rides.size() && rides[i][1] == j) {
                dp[j] = max(dp[j], dp[rides[i][0]] + rides[i][1] - rides[i][0] + rides[i][2]);
                ++i;
            }
        }
        return dp[n];

=======

        vector<long long> dp(n+1, 0);
        for (int i = rides.size() - 1; i >= 0; --i) {
            int start = rides[i][0], end = rides[i][1], tip = rides[i][2];
            int j = upper_bound(rides.begin(), rides.end(), vector<int>{end, 0, 0}) - rides.begin();
            dp[start] = max(dp[start], dp[end] + end - start + tip);
            dp[start] = max(dp[start], dp[start+1]);
        }
        return dp[1];

=======

        sort(rides.begin(), rides.end(), [](auto& a, auto& b) { return a[1] < b[1]; });
        vector<long long> dp(n+1, 0);
        int i = 0;
        for (int j = 1; j <= n; j++) {
            dp[j] = dp[j-1];
            while (i < rides.size() && rides[i][1] == j) {
                int start = rides[i][0];
                dp[j] = max(dp[j], dp[start] + rides[i][1] - rides[i][0] + rides[i][2]);
                i++;
            }
        }
        return dp[n];

=======

        sort(rides.begin(), rides.end(), [](auto &a, auto &b) {
            return a[0] < b[0];
        });
        vector<long long> dp(n + 1);
        int i = 0;
        for (int j = 1; j <= n; ++j) {
            dp[j] = max(dp[j], dp[j - 1]);
            while (i < rides.size() && j == rides[i][0]) {
                dp[rides[i][1]] = max(dp[rides[i][1]], dp[j] + rides[i][1] - rides[i][0] + rides[i][2]);
                ++i;
            }
        }
        return dp[n];

=======

        int M = rides.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < M; i++) {
            v.emplace_back(rides[i][1], i);
        }
        sort(v.begin(), v.end());
        vector<int> dp(M+1, 0);
        int j = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i-1];
            while (j < M && v[j].first == i) {
                int k = v[j].second;
                int start = rides[k][0];
                dp[i] = max(dp[i], dp[start] + rides[k][1] - start + rides[k][2]);
                j++;
            }
        }
        return dp[n];
