Synthesizing 10/10 solutions

=======

        vector<int> res = {1};
        while (res.size() < n) {
            vector<int> tmp;
            for (int i : res) if (i * 2 - 1 <= n) tmp.push_back(i * 2 - 1);
            for (int i : res) if (i * 2 <= n) tmp.push_back(i * 2);
            res = tmp;
        }
        return res;

=======

        vector<int> res = {1};
        while (res.size() < n) {
            vector<int> tmp;
            for (int x : res) if (x * 2 - 1 <= n) tmp.push_back(x * 2 - 1);
            for (int x : res) if (x * 2 <= n) tmp.push_back(x * 2);
            res = tmp;
        }
        return res;

=======

        vector<int> res = {1};
        while (res.size() < n) {
            vector<int> tmp;
            for (int i : res) {
                if (i * 2 - 1 <= n) {
                    tmp.push_back(i * 2 - 1);
                }
            }
            for (int i : res) {
                if (i * 2 <= n) {
                    tmp.push_back(i * 2);
                }
            }
            res = tmp;
        }
        return res;

=======

        vector<int> ans = {1};
        while (ans.size() < n) {
            vector<int> tmp;
            for (int i : ans) if (i * 2 - 1 <= n) tmp.push_back(i * 2 - 1);
            for (int i : ans) if (i * 2 <= n) tmp.push_back(i * 2);
            ans = tmp;
        }
        return ans;

=======

        vector<int> res;
        res.push_back(1);
        while (res.size() < n) {
            vector<int> tmp;
            for (int i = 0; i < res.size(); ++i) {
                if (res[i] * 2 - 1 <= n) {
                    tmp.push_back(res[i] * 2 - 1);
                }
            }
            for (int i = 0; i < res.size(); ++i) {
                if (res[i] * 2 <= n) {
                    tmp.push_back(res[i] * 2);
                }
            }
            res = tmp;
        }
        return res;

=======

        vector<int> res;
        res.push_back(1);
        while (res.size() < n) {
            vector<int> tmp;
            for (int x : res) {
                if (2 * x - 1 <= n) {
                    tmp.push_back(2 * x - 1);
                }
            }
            for (int x : res) {
                if (2 * x <= n) {
                    tmp.push_back(2 * x);
                }
            }
            res = tmp;
        }
        return res;

=======

        vector<int> res(n);
        for (int i = 0; i < n; ++i) {
            res[i] = i + 1;
        }
        while (res.size() > 1) {
            vector<int> temp;
            for (int i = 0; i < res.size(); i += 2) {
                temp.push_back(res[i]);
            }
            for (int i = 1; i < res.size(); i += 2) {
                temp.push_back(res[i]);
            }
            res = temp;
        }
        return res;

=======

        vector<int> result;
        result.push_back(1);
        while (result.size() < n) {
            vector<int> temp;
            for (int x : result) {
                if (2 * x - 1 <= n) {
                    temp.push_back(2 * x - 1);
                }
            }
            for (int x : result) {
                if (2 * x <= n) {
                    temp.push_back(2 * x);
                }
            }
            result = temp;
        }
        return result;

=======

        vector<int> res(n);
        int k = 0;
        for (int i = 1; i <= n; i *= 2) {
            for (int j = 0; j < n; ++j) {
                if (j % 2 == 0) {
                    res[k++] = i + j / 2;
                }
            }
        }
        for (int i = 1; i <= n; i *= 2) {
            for (int j = 0; j < n; ++j) {
                if (j % 2 == 1) {
                    res[k++] = i + j / 2;
                }
            }
        }
        return res;

=======

        vector<int> ans = {1};
        while(ans.size() < n) {
            vector<int> tmp;
            for (auto x : ans) if (2*x-1 <= n) tmp.push_back(2*x-1);
            for (auto x : ans) if (2*x <= n) tmp.push_back(2*x);
            ans = tmp;
        }
        return ans;
