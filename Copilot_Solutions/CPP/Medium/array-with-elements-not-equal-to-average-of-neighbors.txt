Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size() - 1; i += 2) {
            swap(nums[i], nums[i + 1]);
        }
        return nums;

=======

        sort(nums.begin(), nums.end());
        vector<int> ans;
        int i = 0, j = nums.size() - 1;
        while (i < j) {
            ans.push_back(nums[i++]);
            ans.push_back(nums[j--]);
        }
        if (i == j) ans.push_back(nums[i]);
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        int l = 0, r = n - 1;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                ans[i] = nums[l++];
            } else {
                ans[i] = nums[r--];
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        vector<int> res;
        int n = nums.size();
        for (int i = 0, j = n - 1; i <= j; i++, j--) {
            res.push_back(nums[i]);
            if (i < j) {
                res.push_back(nums[j]);
            }
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> res(n);
        for (int i = 0, j = 0; i < n; i += 2, j++) {
            res[i] = nums[j];
        }
        for (int i = 1, j = n - 1; i < n; i += 2, j--) {
            res[i] = nums[j];
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        vector<int> ans(nums.size());
        for (int i = 0, j = 0, k = nums.size() - 1; i < nums.size(); i += 2, j++, k--)
        {
            ans[i] = nums[j];
            if (i + 1 < nums.size()) ans[i + 1] = nums[k];
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        vector<int> res(nums.size());
        int i = 0, j = nums.size() - 1, k = 0;
        while (i < j) {
            res[k++] = nums[i++];
            res[k++] = nums[j--];
        }
        if (i == j) res[k] = nums[i];
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i / 2 + n / 2 * (i % 2)];
        }
        return ans;

=======

        sort(nums.begin(),nums.end());
        int n = nums.size();
        vector<int>ans(n);
        for(int i=0;i<n/2;i++){
            ans[2*i] = nums[i];
            ans[2*i+1] = nums[n/2+i];
        }
        if(n%2 == 1){
            ans[n-1] = nums[n-1];
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        for (int i = 0; i < n; i++)
            ans[i] = i % 2 ? nums[n-i/2-1] : nums[i/2];
        return ans;
