Synthesizing 10/10 solutions

=======

        vector<int> dp(n);
        dp[0] = 1;
        int p2 = 0, p3 = 0, p5 = 0;
        for (int i = 1; i < n; ++i) {
            dp[i] = min({dp[p2] * 2, dp[p3] * 3, dp[p5] * 5});
            if (dp[i] == dp[p2] * 2) ++p2;
            if (dp[i] == dp[p3] * 3) ++p3;
            if (dp[i] == dp[p5] * 5) ++p5;
        }
        return dp[n - 1];

=======

        vector<int> ugly(n);
        ugly[0] = 1;
        int p2 = 0, p3 = 0, p5 = 0;
        for (int i = 1; i < n; ++i) {
            ugly[i] = min(ugly[p2] * 2, min(ugly[p3] * 3, ugly[p5] * 5));
            if (ugly[i] == ugly[p2] * 2) ++p2;
            if (ugly[i] == ugly[p3] * 3) ++p3;
            if (ugly[i] == ugly[p5] * 5) ++p5;
        }
        return ugly[n - 1];

=======

        vector<int> ugly(n);
        ugly[0] = 1;
        int i2 = 0, i3 = 0, i5 = 0;
        int f2 = 2, f3 = 3, f5 = 5;
        for (int i = 1; i < n; ++i) {
            int min = std::min(f2, std::min(f3, f5));
            ugly[i] = min;
            if (f2 == min) f2 = 2 * ugly[++i2];
            if (f3 == min) f3 = 3 * ugly[++i3];
            if (f5 == min) f5 = 5 * ugly[++i5];
        }
        return ugly[n - 1];

=======

        vector<int> ugly(n, 1);
        int i2 = 0, i3 = 0, i5 = 0;
        for (int i = 1; i < n; i++) {
            ugly[i] = min(ugly[i2] * 2, min(ugly[i3] * 3, ugly[i5] * 5));
            if (ugly[i] == ugly[i2] * 2) i2++;
            if (ugly[i] == ugly[i3] * 3) i3++;
            if (ugly[i] == ugly[i5] * 5) i5++;
        }
        return ugly[n - 1];

=======

        vector<int> ugly(n);
        ugly[0] = 1;
        int i2 = 0, i3 = 0, i5 = 0;
        int next_multiple_of_2 = 2;
        int next_multiple_of_3 = 3;
        int next_multiple_of_5 = 5;
        int next_ugly_no = 1;
        for (int i=1; i<n; i++)
        {
            next_ugly_no = min(next_multiple_of_2,
                               min(next_multiple_of_3,
                                   next_multiple_of_5));
            ugly[i] = next_ugly_no;
            if (next_ugly_no == next_multiple_of_2)
            {
                i2 = i2+1;
                next_multiple_of_2 = ugly[i2]*2;
            }
            if (next_ugly_no == next_multiple_of_3)
            {
                i3 = i3+1;
                next_multiple_of_3 = ugly[i3]*3;
            }
            if (next_ugly_no == next_multiple_of_5)
            {
                i5 = i5+1;
                next_multiple_of_5 = ugly[i5]*5;
            }
        } /*End of for loop (i=1; i<n; i++) */
        return next_ugly_no;

=======

        int ugly[n];
        ugly[0] = 1;
        int i2 = 0, i3 = 0, i5 = 0;
        int next_multiple_of_2 = 2;
        int next_multiple_of_3 = 3;
        int next_multiple_of_5 = 5;
        int next_ugly_no = 1;
        for (int i=1; i<n; i++) {
            next_ugly_no = min(next_multiple_of_2,
                               min(next_multiple_of_3,
                                   next_multiple_of_5));
            ugly[i] = next_ugly_no;
            if (next_ugly_no == next_multiple_of_2) {
                i2 = i2+1;
                next_multiple_of_2 = ugly[i2]*2;
            }
            if (next_ugly_no == next_multiple_of_3) {
                i3 = i3+1;
                next_multiple_of_3 = ugly[i3]*3;
            }
            if (next_ugly_no == next_multiple_of_5) {
                i5 = i5+1;
                next_multiple_of_5 = ugly[i5]*5;
            }
        }
        return next_ugly_no;

=======

        vector<int> ugly(n);
        ugly[0] = 1;
        int i2 = 0, i3 = 0, i5 = 0;
        int next_multiple_of_2 = 2;
        int next_multiple_of_3 = 3;
        int next_multiple_of_5 = 5;
        int next_ugly_no = 1;
        for (int i = 1; i < n; i++) {
            next_ugly_no = min(next_multiple_of_2, min(next_multiple_of_3, next_multiple_of_5));
            ugly[i] = next_ugly_no;
            if (next_ugly_no == next_multiple_of_2) {
                i2 = i2 + 1;
                next_multiple_of_2 = ugly[i2] * 2;
            }
            if (next_ugly_no == next_multiple_of_3) {
                i3 = i3 + 1;
                next_multiple_of_3 = ugly[i3] * 3;
            }
            if (next_ugly_no == next_multiple_of_5) {
                i5 = i5 + 1;
                next_multiple_of_5 = ugly[i5] * 5;
            }
        }
        return next_ugly_no;

=======

        int dp[n+1];
        dp[1] = 1;
        int p2 = 1, p3 = 1, p5 = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = min(dp[p2]*2, min(dp[p3]*3, dp[p5]*5));
            if (dp[i] == dp[p2]*2) p2++;
            if (dp[i] == dp[p3]*3) p3++;
            if (dp[i] == dp[p5]*5) p5++;
        }
        return dp[n];

=======

        if (n == 1) return 1;
        int a = 0, b = 0, c = 0;
        vector<int> dp(n);
        dp[0] = 1;
        for (int i = 1; i < n; ++i) {
            dp[i] = min(dp[a] * 2, min(dp[b] * 3, dp[c] * 5));
            if (dp[i] == dp[a] * 2) ++a;
            if (dp[i] == dp[b] * 3) ++b;
            if (dp[i] == dp[c] * 5) ++c;
        }
        return dp[n - 1];

=======

        static int ugly[] = {1};
        static int i2 = 0, i3 = 0, i5 = 0;
        static int n2 = 2, n3 = 3, n5 = 5;
        static int k = 1;
        while (k < n) {
            int next = min(n2, min(n3, n5));
            ugly[k++] = next;
            if (next == n2) n2 = 2 * ugly[++i2];
            if (next == n3) n3 = 3 * ugly[++i3];
            if (next == n5) n5 = 5 * ugly[++i5];
        }
        return ugly[n-1];
