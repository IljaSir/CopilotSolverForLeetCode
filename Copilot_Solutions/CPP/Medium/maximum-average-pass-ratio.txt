Synthesizing 6/10 solutions

=======

        priority_queue<pair<double, pair<int, int>>> pq;
        for (auto& c : classes) {
            pq.push({(double)(c[0] + 1) / (c[1] + 1) - (double)c[0] / c[1], {c[0], c[1]}});
        }
        while (extraStudents--) {
            auto [ratio, c] = pq.top(); pq.pop();
            pq.push({(double)(c.first + 2) / (c.second + 2) - (double)(c.first + 1) / (c.second + 1), {c.first + 1, c.second + 1}});
        }
        double res = 0;
        while (!pq.empty()) {
            auto [ratio, c] = pq.top(); pq.pop();
            res += (double)c.first / c.second;
        }
        return res / classes.size();

=======

        priority_queue<pair<double, pair<int, int>>> pq;
        for (auto& c : classes) {
            pq.push({(double)(c[0] + 1) / (c[1] + 1) - (double)c[0] / c[1], {c[0], c[1]}});
        }
        while (extraStudents--) {
            auto p = pq.top();
            pq.pop();
            p.first = (double)(p.second.first + 2) / (p.second.second + 2) - (double)(p.second.first + 1) / (p.second.second + 1);
            p.second.first++;
            p.second.second++;
            pq.push(p);
        }
        double res = 0.0;
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            res += (double)p.second.first / p.second.second;
        }
        return res / classes.size();

=======

        auto cmp = [](const vector<int>& a, const vector<int>& b) {
            return (double)(a[0] + 1) / (a[1] + 1) - (double)a[0] / a[1] < (double)(b[0] + 1) / (b[1] + 1) - (double)b[0] / b[1];
        };
        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> pq(cmp);
        for (auto& c : classes) {
            pq.push(c);
        }
        while (extraStudents--) {
            auto c = pq.top();
            pq.pop();
            c[0]++;
            c[1]++;
            pq.push(c);
        }
        double sum = 0;
        while (!pq.empty()) {
            auto c = pq.top();
            pq.pop();
            sum += (double)c[0] / c[1];
        }
        return sum / classes.size();

=======

        priority_queue<pair<double, int>> pq;
        for (auto &c : classes) {
            pq.push({(double)(c[0] + 1) / (c[1] + 1) - (double)c[0] / c[1], c[1]});
        }
        while (extraStudents--) {
            auto [d, total] = pq.top();
            pq.pop();
            pq.push({(double)(total + 2) / (total + 1) - (double)(total + 1) / (total), total + 1});
        }
        double res = 0;
        while (!pq.empty()) {
            auto [d, total] = pq.top();
            pq.pop();
            res += (double)(total - 1) / total;
        }
        return res / classes.size();

=======

        priority_queue<pair<double, int>> q;
        for (int i = 0; i < classes.size(); ++i) {
            double cur = (double)classes[i][0] / classes[i][1];
            q.push({cur, i});
        }
        while (extraStudents--) {
            auto p = q.top();
            q.pop();
            int i = p.second;
            classes[i][0]++;
            classes[i][1]++;
            double cur = (double)classes[i][0] / classes[i][1];
            q.push({cur, i});
        }
        double ans = 0;
        for (auto c : classes) {
            ans += (double)c[0] / c[1];
        }
        return ans / classes.size();

=======

        double res = 0;
        auto cmp = [](const vector<int>& a, const vector<int>& b) {
            return (double)(a[0] + 1) / (a[1] + 1) - (double)a[0] / a[1] > (double)(b[0] + 1) / (b[1] + 1) - (double)b[0] / b[1];
        };
        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> pq(cmp);
        for (auto& c : classes) {
            pq.push(c);
        }
        while (extraStudents--) {
            auto c = pq.top();
            pq.pop();
            c[0]++;
            c[1]++;
            pq.push(c);
        }
        while (!pq.empty()) {
            auto c = pq.top();
            pq.pop();
            res += (double)c[0] / c[1];
        }
        return res / classes.size();
