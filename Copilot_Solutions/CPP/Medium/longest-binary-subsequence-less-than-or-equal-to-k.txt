Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cur = 0;
            for (int j = i; j < n; ++j) {
                cur = cur * 2 + s[j] - '0';
                if (cur > k) break;
                ans = max(ans, j - i + 1);
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = i; j < n; ++j) {
                sum = sum * 2 + s[j] - '0';
                if (sum > k) break;
                ans = max(ans, j - i + 1);
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int cur = 0;
            for (int j = i; j < n; j++) {
                cur = (cur << 1) + s[j] - '0';
                if (cur <= k) {
                    ans = max(ans, j - i + 1);
                }
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') {
                dp[i] = 1;
                if (i > 0) {
                    dp[i] += dp[i-1];
                }
            }
            if (dp[i] <= k) {
                ans = max(ans, dp[i]);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') continue;
            dp[i] = 1;
            int sum = 1;
            for (int j = i - 1; j >= 0; j--) {
                if (s[j] == '0') continue;
                if (sum + dp[j] > k) break;
                sum += dp[j];
                dp[i] = max(dp[i], sum);
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                cnt++;
            } else {
                if (k < (1 << cnt)) {
                    break;
                }
                k -= 1 << cnt;
                cnt = 0;
                ans++;
            }
        }
        return ans + min(cnt, __builtin_popcount(k));

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            int sum = 0;
            for (int j = i; j < n; ++j) {
                if (s[j] == '0') {
                    ++cnt;
                }
                sum = sum * 2 + s[j] - '0';
                if (cnt <= k && sum <= k) {
                    ans = max(ans, j - i + 1);
                } else {
                    break;
                }
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n + 1, 0);
        int res = 0;
        for (int i = 0; i < n; i++) {
            dp[i + 1] = dp[i] + (s[i] - '0');
        }
        for (int i = 0; i < n; i++) {
            int l = i + 1, r = n;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (dp[mid] - dp[i] <= k) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            res = max(res, l - i);
        }
        return res;
