Synthesizing 10/10 solutions

=======

        int m = nums.size();
        int n = 0;
        for (int i = 0; i < m; i++) {
            n = max(n, (int)nums[i].size());
        }
        vector<vector<int>> arr(m + n - 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                arr[i + j].push_back(nums[i][j]);
            }
        }
        vector<int> res;
        for (int i = 0; i < m + n - 1; i++) {
            if (i % 2 == 0) {
                for (int j = arr[i].size() - 1; j >= 0; j--) {
                    res.push_back(arr[i][j]);
                }
            } else {
                for (int j = 0; j < arr[i].size(); j++) {
                    res.push_back(arr[i][j]);
                }
            }
        }
        return res;

=======

        int m = nums.size();
        int n = 0;
        for (int i = 0; i < m; i++) {
            n = max(n, (int)nums[i].size());
        }
        vector<vector<int>> mat(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                mat[i][j] = nums[i][j];
            }
        }
        vector<int> ans;
        for (int i = 0; i < m + n - 1; i++) {
            vector<int> tmp;
            for (int j = 0; j <= i; j++) {
                int x = j;
                int y = i - j;
                if (x >= m || y >= n) continue;
                if (mat[x][y] != 0) {
                    tmp.push_back(mat[x][y]);
                }
            }
            if (i % 2 == 0) {
                reverse(tmp.begin(), tmp.end());
            }
            for (int j = 0; j < tmp.size(); j++) {
                ans.push_back(tmp[j]);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans;
        map<int, vector<int>> mp;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < nums[i].size(); j++) {
                mp[i + j].push_back(nums[i][j]);
            }
        }
        for (auto& p : mp) {
            vector<int>& v = p.second;
            int m = v.size();
            for (int i = m - 1; i >= 0; i--) {
                ans.push_back(v[i]);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans;
        map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < nums[i].size(); ++j) {
                m[i + j].push_back(nums[i][j]);
            }
        }
        for (auto& p : m) {
            for (int i = p.second.size() - 1; i >= 0; --i) {
                ans.push_back(p.second[i]);
            }
        }
        return ans;

=======

        vector<int> result;
        int m = nums.size();
        int n = 0;
        for (int i = 0; i < m; ++i) {
            n = max(n, (int)nums[i].size());
        }
        int maxLen = m + n - 1;
        vector<vector<int>> data(maxLen);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < nums[i].size(); ++j) {
                data[i + j].push_back(nums[i][j]);
            }
        }
        for (int i = 0; i < maxLen; ++i) {
            if (i % 2 == 0) {
                for (int j = data[i].size() - 1; j >= 0; --j) {
                    result.push_back(data[i][j]);
                }
            }
            else {
                for (int j = 0; j < data[i].size(); ++j) {
                    result.push_back(data[i][j]);
                }
            }
        }
        return result;

=======

        int m = nums.size();
        int n = 0;
        for (int i = 0; i < m; i++) {
            n = max(n, (int)nums[i].size());
        }
        int max_len = m + n - 1;
        vector<int> ans;
        for (int i = 0; i < max_len; i++) {
            int x = i < n ? i : n - 1;
            int y = i < n ? 0 : i - n + 1;
            while (x >= 0 && y < m) {
                if (x < nums[y].size()) {
                    ans.push_back(nums[y][x]);
                }
                x--;
                y++;
            }
        }
        return ans;

=======

        int m = nums.size();
        int n = 0;
        for (auto& row : nums) {
            n = max(n, (int)row.size());
        }
        vector<vector<int>> grid(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < nums[i].size(); ++j) {
                grid[i][j] = nums[i][j];
            }
        }
        vector<int> res;
        int i = 0;
        int j = 0;
        int d = 1;
        while (i < m && j < n) {
            res.push_back(grid[i][j]);
            int ni = i + d;
            int nj = j - d;
            if (ni < 0 || ni >= m) {
                ni = i;
                nj = j + 1;
                d = -d;
            }
            if (nj < 0 || nj >= n) {
                ni = i + 1;
                nj = j;
                d = -d;
            }
            i = ni;
            j = nj;
        }
        return res;

=======

        vector<int> result;
        int maxRow = 0;
        for (int i = 0; i < nums.size(); i++) {
            maxRow = max(maxRow, (int) nums[i].size());
        }
        for (int i = 0; i < maxRow; i++) {
            int row = 0;
            int col = i;
            while (row < nums.size() && col >= 0) {
                if (col < nums[row].size()) {
                    result.push_back(nums[row][col]);
                }
                row++;
                col--;
            }
        }
        for (int i = 1; i < nums.size(); i++) {
            int row = i;
            int col = maxRow - 1;
            while (row < nums.size() && col >= 0) {
                if (col < nums[row].size()) {
                    result.push_back(nums[row][col]);
                }
                row++;
                col--;
            }
        }
        return result;

=======

        int n = nums.size();
        int m = 0;
        for (auto &v : nums) m = max(m, (int)v.size());
        vector<int> res;
        for (int i = 0; i < n + m - 1; i++) {
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k >= 0 && k < m) {
                    if (k < nums[j].size()) res.push_back(nums[j][k]);
                }
            }
        }
        return res;

=======

        vector<int> ans;
        int m = nums.size();
        int maxCol = 0;
        for (auto& row : nums) {
            maxCol = max(maxCol, (int)row.size());
        }
        for (int i = 0; i < m + maxCol - 1; ++i) {
            int row = i;
            for (int col = 0; col <= i; ++col) {
                if (row < 0 || col >= m) {
                    break;
                }
                if (col < nums[row].size()) {
                    ans.push_back(nums[row][col]);
                }
                row -= 1;
            }
        }
        return ans;
