Synthesizing 10/10 solutions

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                nums[i] = -1;
            }
        }
        unordered_map<int, int> hash;
        hash[0] = -1;
        int sum = 0, ans = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (hash.count(sum)) {
                ans = max(ans, i - hash[sum]);
            } else {
                hash[sum] = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                nums[i] = -1;
            }
        }
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (mp.count(sum)) {
                ans = max(ans, i - mp[sum]);
            } else {
                mp[sum] = i;
            }
        }
        return ans;

=======

        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0, max_len = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i] == 0 ? -1 : 1;
            if (m.find(sum) != m.end()) {
                max_len = max(max_len, i - m[sum]);
            } else {
                m[sum] = i;
            }
        }
        return max_len;

=======

        unordered_map<int, int> m;
        int sum = 0;
        int maxLen = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += (nums[i] == 1) ? 1 : -1;
            if (sum == 0) {
                maxLen = i + 1;
            } else if (m.find(sum) != m.end()) {
                maxLen = max(maxLen, i - m[sum]);
            } else {
                m[sum] = i;
            }
        }
        return maxLen;

=======

        int n = nums.size();
        int ans = 0;
        int sum = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        for (int i = 0; i < n; i++) {
            sum += nums[i] == 1 ? 1 : -1;
            if (m.find(sum) != m.end()) {
                ans = max(ans, i - m[sum]);
            } else {
                m[sum] = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            } else {
                count--;
            }
            if (m.find(count) != m.end()) {
                ans = max(ans, i - m[count]);
            } else {
                m[count] = i;
            }
        }
        return ans;

=======

        unordered_map<int, int> mp;
        int n = nums.size(), sum = 0, res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i] == 1 ? 1 : -1;
            if (sum == 0) res = i + 1;
            if (mp.find(sum) != mp.end()) res = max(res, i - mp[sum]);
            else mp[sum] = i;
        }
        return res;

=======

        int n = nums.size();
        int max_len = 0;
        int sum = 0;
        unordered_map<int, int> mp;
        mp[0] = -1;
        for (int i = 0; i < n; i++) {
            sum += nums[i] == 0 ? -1 : 1;
            if (mp.find(sum) != mp.end()) {
                max_len = max(max_len, i - mp[sum]);
            } else {
                mp[sum] = i;
            }
        }
        return max_len;

=======

        int n = nums.size();
        if (n == 0 || n == 1) {
            return 0;
        }
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            sum += (nums[i] == 1) ? 1 : -1;
            if (m.find(sum) != m.end()) {
                res = max(res, i - m[sum]);
            } else {
                m[sum] = i;
            }
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return 0;
        unordered_map<int, int> mp;
        int res = 0;
        int sum = 0;
        mp[0] = -1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                sum += -1;
            } else {
                sum += 1;
            }
            if (mp.find(sum) != mp.end()) {
                res = max(res, i - mp[sum]);
            } else {
                mp[sum] = i;
            }
        }
        return res;
