Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> dp(n, INT_MAX);
        int sum = 0, l = 0, res = INT_MAX;
        for (int r = 0; r < n; ++r) {
            sum += arr[r];
            while (sum > target) sum -= arr[l++];
            if (sum == target) {
                if (l > 0 && dp[l - 1] != INT_MAX) res = min(res, dp[l - 1] + r - l + 1);
                dp[r] = min(dp[r], r - l + 1);
            }
            if (r > 0) dp[r] = min(dp[r], dp[r - 1]);
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = arr.size();
        int sum = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        vector<int> dp(n, INT_MAX);
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (m.count(sum - target)) {
                int j = m[sum - target];
                if (j >= 0) {
                    dp[i] = i - j;
                    if (j > 0) {
                        dp[i] += dp[j - 1];
                    }
                }
            }
            if (i > 0) {
                dp[i] = min(dp[i], dp[i - 1]);
            }
            if (m.count(sum)) {
                m[sum] = min(m[sum], i);
            } else {
                m[sum] = i;
            }
            if (m.count(sum + target)) {
                int j = m[sum + target];
                if (j >= 0 && j < i) {
                    ans = min(ans, dp[j] + i - j);
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = arr.size();
        vector<int> dp(n, INT_MAX);
        int sum = 0;
        int res = INT_MAX;
        int l = 0;
        for (int r = 0; r < n; r++) {
            sum += arr[r];
            while (sum > target) sum -= arr[l++];
            if (sum == target) {
                if (l > 0 && dp[l - 1] != INT_MAX) res = min(res, dp[l - 1] + r - l + 1);
                if (r > 0) dp[r] = min(dp[r - 1], r - l + 1);
                else dp[r] = r - l + 1;
            } else {
                if (r > 0) dp[r] = dp[r - 1];
            }
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = arr.size();
        vector<int> dp(n + 1, INT_MAX);
        int i = 0, j = 0, sum = 0, res = INT_MAX;
        while (j < n) {
            sum += arr[j];
            while (sum > target) {
                sum -= arr[i];
                i++;
            }
            if (sum == target) {
                if (i > 0 && dp[i - 1] != INT_MAX) {
                    res = min(res, dp[i - 1] + j - i + 1);
                }
                dp[j] = min(dp[j], j - i + 1);
            }
            if (j > 0) {
                dp[j] = min(dp[j], dp[j - 1]);
            }
            j++;
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = arr.size();
        vector<int> dp(n, INT_MAX);
        int sum = 0;
        int start = 0;
        int minLen = INT_MAX;
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            while (sum > target) {
                sum -= arr[start];
                start++;
            }
            if (sum == target) {
                if (start > 0 && dp[start - 1] != INT_MAX) {
                    res = min(res, dp[start - 1] + i - start + 1);
                }
                minLen = min(minLen, i - start + 1);
            }
            dp[i] = minLen;
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        int sum = 0;
        int l = 0;
        for (int r = 0; r < n; r++) {
            sum += arr[r];
            while (sum > target) {
                sum -= arr[l++];
            }
            if (sum == target) {
                if (l > 0 && dp[l - 1] > 0) {
                    dp[r] = r - l + 1 + dp[l - 1];
                } else {
                    dp[r] = r - l + 1;
                }
            }
            if (r > 0 && dp[r - 1] > 0) {
                dp[r] = min(dp[r], dp[r - 1]);
            }
        }
        int ans = INT_MAX;
        sum = 0;
        l = n - 1;
        for (int r = n - 1; r >= 0; r--) {
            sum += arr[r];
            while (sum > target) {
                sum -= arr[l--];
            }
            if (sum == target) {
                if (l < n - 1 && dp[l + 1] > 0) {
                    ans = min(ans, r - l + dp[l + 1]);
                } else if (l == n - 1) {
                    ans = min(ans, r - l);
                }
            }
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = arr.size();
        vector<int> dp(n, -1);
        int sum = 0;
        int l = 0;
        int minLen = INT_MAX;
        for (int r = 0; r < n; r++) {
            sum += arr[r];
            while (sum > target) {
                sum -= arr[l];
                l++;
            }
            if (sum == target) {
                if (l > 0 && dp[l - 1] != -1) {
                    minLen = min(minLen, dp[l - 1] + r - l + 1);
                }
                if (minLen != INT_MAX) {
                    dp[r] = minLen;
                } else {
                    dp[r] = r - l + 1;
                }
            }
            if (l > 0 && dp[l - 1] != -1) {
                dp[r] = dp[l - 1];
            }
        }
        return (dp[n - 1] == INT_MAX ? -1 : dp[n - 1]);

=======

        int n = arr.size();
        vector<int> dp(n, INT_MAX);
        int sum = 0;
        int left = 0;
        int ans = INT_MAX;
        int best = INT_MAX;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            while (sum > target) {
                sum -= arr[left++];
            }
            if (sum == target) {
                int len = i - left + 1;
                if (left > 0 && dp[left - 1] != INT_MAX) {
                    ans = min(ans, len + dp[left - 1]);
                }
                best = min(best, len);
            }
            dp[i] = best;
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        int sum = 0;
        int l = 0;
        int ans = INT_MAX;
        int minLen = INT_MAX;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            while (sum > target) {
                sum -= arr[l];
                l++;
            }
            if (sum == target) {
                if (l > 0 && dp[l - 1] != 0) {
                    ans = min(ans, dp[l - 1] + i - l + 1);
                }
                minLen = min(minLen, i - l + 1);
            }
            dp[i] = minLen;
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = arr.size();
        int sum = 0;
        int left = 0;
        int right = 0;
        int minLen = INT_MAX;
        int res = INT_MAX;
        int len = 0;
        vector<int> dp(n, INT_MAX);
        while (right < n) {
            sum += arr[right];
            while (sum > target) {
                sum -= arr[left];
                left++;
            }
            if (sum == target) {
                len = right - left + 1;
                if (left > 0 && dp[left-1] != INT_MAX) {
                    res = min(res, len + dp[left-1]);
                }
                minLen = min(minLen, len);
            }
            dp[right] = minLen;
            right++;
        }
        return res == INT_MAX ? -1 : res;
