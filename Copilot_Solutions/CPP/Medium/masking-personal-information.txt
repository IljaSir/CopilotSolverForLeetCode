Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (s.find('@') != string::npos) {
            transform(s.begin(), s.end(), s.begin(), ::tolower);
            int pos = s.find('@');
            s[0] = '*';
            s[pos - 1] = '*';
            for (int i = 1; i < pos - 1; ++i) {
                s[i] = '*';
            }
        } else {
            string res;
            for (char c : s) {
                if (isdigit(c)) {
                    res.push_back(c);
                }
            }
            if (res.size() == 10) {
                res = "***-***-" + res.substr(res.size() - 4);
            } else {
                res = "+";
                for (int i = 0; i < res.size() - 10; ++i) {
                    res.push_back('*');
                }
                res += "-***-***-" + res.substr(res.size() - 4);
            }
        }
        return s;

=======

        if (s.find('@') != string::npos) {
            transform(s.begin(), s.end(), s.begin(), ::tolower);
            int pos = s.find('@');
            s.replace(1, pos - 2, 5, '*');
            return s;
        } else {
            string res;
            for (auto c : s) {
                if (c >= '0' && c <= '9') {
                    res += c;
                }
            }
            string local = "***-***-" + res.substr(res.size() - 4);
            if (res.size() == 10) {
                return local;
            }
            string ans = "+";
            for (int i = 0; i < res.size() - 10; ++i) {
                ans += '*';
            }
            return ans + "-" + local;
        }

=======

        int pos = s.find('@');
        if (pos != string::npos) {
            // email
            s[0] = tolower(s[0]);
            s[pos - 1] = tolower(s[pos - 1]);
            for (int i = 1; i < pos - 1; i++) {
                s[i] = '*';
            }
            for (int i = pos; i < s.length(); i++) {
                s[i] = tolower(s[i]);
            }
        } else {
            // phone
            string phone = "";
            for (char c : s) {
                if (isdigit(c)) {
                    phone += c;
                }
            }
            if (phone.length() > 10) {
                phone = "+" + string(phone.length() - 10, '*') + "-" + phone.substr(phone.length() - 10);
            }
            phone = "***-***-" + phone.substr(phone.length() - 4);
            s = phone;
        }
        return s;

=======

        int at = s.find('@');
        if (at != string::npos) {
            // email
            transform(s.begin(), s.end(), s.begin(), ::tolower);
            s[0] = '*';
            s[at-1] = '*';
            s[at-2] = '*';
            s[at-3] = '*';
            s[at-4] = '*';
            return s;
        } else {
            // phone
            string phone;
            for (char c: s) {
                if (c >= '0' && c <= '9') {
                    phone += c;
                }
            }
            if (phone.length() == 10) {
                return "***-***-" + phone.substr(phone.length()-4);
            } else {
                return "+" + string(phone.length()-10, '*') + "-***-***-" + phone.substr(phone.length()-4);
            }
        }

=======

        if (s.find('@') != string::npos) {
            // Email
            transform(s.begin(), s.end(), s.begin(), ::tolower);
            s[0] = '*';
            s[s.find('@') - 1] = '*';
            s[s.find('@') - 2] = '*';
            s[s.find('@') - 3] = '*';
            s[s.find('@') - 4] = '*';
        } else {
            // Phone
            string digits;
            for (char c : s) {
                if (isdigit(c)) {
                    digits += c;
                }
            }
            if (digits.size() == 10) {
                s = "***-***-" + digits.substr(6);
            } else {
                s = "+";
                for (int i = 0; i < digits.size() - 10; ++i) {
                    s += '*';
                }
                s += "-***-***-" + digits.substr(digits.size() - 4);
            }
        }
        return s;

=======

        int at = s.find("@");
        if (at != string::npos) {
            string name = s.substr(0, at);
            transform(name.begin(), name.end(), name.begin(), ::tolower);
            string domain = s.substr(at + 1);
            transform(domain.begin(), domain.end(), domain.begin(), ::tolower);
            return name[0] + "*****" + name[name.size() - 1] + "@" + domain;
        }
        else {
            string digits;
            for (char c : s) if (isdigit(c)) digits.push_back(c);
            string local = "***-***-" + digits.substr(digits.size() - 4);
            if (digits.size() == 10) return local;
            string ans = "+";
            for (int i = 0; i < digits.size() - 10; ++i) ans.push_back('*');
            return ans + "-" + local;
        }

=======

        int at = s.find('@');
        if (at != string::npos) {
            for (auto& c : s) {
                if (c >= 'A' && c <= 'Z') c += ('a' - 'A');
            }
            s[0] = s[0] - 'a' + 'A';
            for (int i = 1; i < at - 1; ++i) {
                s[i] = '*';
            }
            return s;
        }
        string num;
        for (char c : s) {
            if (c >= '0' && c <= '9') num.push_back(c);
        }
        string local = "***-***-" + num.substr(num.size() - 4);
        if (num.size() == 10) {
            return local;
        }
        string ans = "+";
        for (int i = 0; i < num.size() - 10; ++i) {
            ans.push_back('*');
        }
        return ans + "-" + local;

=======

        int n = s.size();
        int at = s.find('@');
        if (at != string::npos) {
            for (int i = 1; i < n - 1; i++) {
                if (s[i] >= 'A' && s[i] <= 'Z') {
                    s[i] += 32;
                }
            }
            s[0] += 32;
            for (int i = 1; i < n - 1; i++) {
                if (s[i] != '@' && s[i] != '.') {
                    s[i] = '*';
                }
            }
            return s;
        }
        int i = 0;
        string res;
        while (i < n) {
            if (s[i] >= '0' && s[i] <= '9') {
                res.push_back(s[i]);
            }
            i++;
        }
        int m = res.size();
        if (m == 10) {
            res = "***-***-" + res.substr(m - 4, 4);
        }
        else {
            res = "+";
            for (int i = 0; i < m - 10; i++) {
                res.push_back('*');
            }
            res += "-***-***-" + res.substr(m - 4, 4);
        }
        return res;

=======

        string result;
        int pos = s.find('@');
        if (pos != string::npos) {
            result = s[0];
            result += "*****";
            result += s[pos-1];
            result += s.substr(pos);
            for (int i = 0; i < result.length(); i++) {
                if (result[i] >= 'A' && result[i] <= 'Z')
                    result[i] += 32;
            }
        } else {
            string phone;
            for (int i = 0; i < s.length(); i++) {
                if (s[i] >= '0' && s[i] <= '9')
                    phone += s[i];
            }
            if (phone.length() == 10) {
                result = "***-***-";
                result += phone.substr(6);
            } else {
                result = "+";
                for (int i = 0; i < phone.length()-10; i++)
                    result += '*';
                result += "-***-***-";
                result += phone.substr(phone.length()-4);
            }
        }
        return result;
