Synthesizing 10/10 solutions

=======

        vector<int> P;
        for (int i = 1; i <= m; i++) {
            P.push_back(i);
        }
        vector<int> result;
        for (int i = 0; i < queries.size(); i++) {
            int pos = queries[i];
            for (int j = 0; j < P.size(); j++) {
                if (pos == P[j]) {
                    result.push_back(j);
                    P.erase(P.begin() + j);
                    P.insert(P.begin(), pos);
                    break;
                }
            }
        }
        return result;

=======

        vector<int> P;
        for (int i = 0; i < m; i++) {
            P.push_back(i + 1);
        }
        vector<int> res;
        for (int i = 0; i < queries.size(); i++) {
            int pos = 0;
            for (int j = 0; j < P.size(); j++) {
                if (P[j] == queries[i]) {
                    pos = j;
                    break;
                }
            }
            res.push_back(pos);
            for (int j = pos; j > 0; j--) {
                P[j] = P[j - 1];
            }
            P[0] = queries[i];
        }
        return res;

=======

        vector<int> P(m);
        for (int i = 0; i < m; i++) {
            P[i] = i + 1;
        }
        vector<int> result;
        for (int i = 0; i < queries.size(); i++) {
            int pos = find(P.begin(), P.end(), queries[i]) - P.begin();
            result.push_back(pos);
            P.erase(P.begin() + pos);
            P.insert(P.begin(), queries[i]);
        }
        return result;

=======

        vector<int> P(m);
        for (int i = 0; i < m; i++) P[i] = i + 1;
        vector<int> ans;
        for (int i = 0; i < queries.size(); i++) {
            int j = 0;
            while (P[j] != queries[i]) j++;
            ans.push_back(j);
            for (int k = j; k > 0; k--) {
                P[k] = P[k - 1];
            }
            P[0] = queries[i];
        }
        return ans;

=======

        vector<int> p;
        vector<int> result;
        for (int i = 0; i < m; i++) {
            p.push_back(i + 1);
        }
        for (int i = 0; i < queries.size(); i++) {
            int index = 0;
            for (int j = 0; j < p.size(); j++) {
                if (queries[i] == p[j]) {
                    index = j;
                    break;
                }
            }
            result.push_back(index);
            p.insert(p.begin(), p[index]);
            p.erase(p.begin() + index + 1);
        }
        return result;

=======

        vector<int> P(m);
        for (int i = 0; i < m; ++i) {
            P[i] = i + 1;
        }
        vector<int> res;
        for (auto q : queries) {
            for (int i = 0; i < m; ++i) {
                if (P[i] == q) {
                    res.push_back(i);
                    for (int j = i; j > 0; --j) {
                        P[j] = P[j - 1];
                    }
                    P[0] = q;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> P(m);
        for (int i = 0; i < m; ++i) {
            P[i] = i+1;
        }
        vector<int> res;
        for (int i = 0; i < queries.size(); ++i) {
            int pos = 0;
            while (P[pos] != queries[i]) {
                ++pos;
            }
            res.push_back(pos);
            int tmp = P[pos];
            while (pos > 0) {
                P[pos] = P[pos-1];
                --pos;
            }
            P[0] = tmp;
        }
        return res;

=======

        vector<int> P;
        for (int i = 1; i <= m; i++) {
            P.push_back(i);
        }
        vector<int> res;
        for (auto q : queries) {
            int pos = -1;
            for (int i = 0; i < P.size(); i++) {
                if (P[i] == q) {
                    pos = i;
                    break;
                }
            }
            res.push_back(pos);
            P.erase(P.begin() + pos);
            P.insert(P.begin(), q);
        }
        return res;

=======

        vector<int> P;
        vector<int> res;
        for (int i = 1; i <= m; i++) {
            P.push_back(i);
        }
        for (auto q : queries) {
            for (int i = 0; i < m; i++) {
                if (P[i] == q) {
                    res.push_back(i);
                    P.erase(P.begin() + i);
                    P.insert(P.begin(), q);
                    break;
                }
            }
        }
        return res;

=======

        vector<int> p(m);
        for(int i=0; i<m; i++) p[i] = i+1;
        vector<int> res;
        for(int i=0; i<queries.size(); i++){
            int j=0;
            for(; j<m; j++) if(p[j] == queries[i]) break;
            res.push_back(j);
            int tmp = p[j];
            for(int k=j; k>0; k--) p[k] = p[k-1];
            p[0] = tmp;
        }
        return res;
