Synthesizing 9/10 solutions

=======

        int ans = 0;
        int mask = 0;
        for (int i = 30; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> s;
            for (int num : nums) {
                s.insert(num & mask);
            }
            int tmp = ans | (1 << i);
            for (int prefix : s) {
                if (s.find(prefix ^ tmp) != s.end()) {
                    ans = tmp;
                    break;
                }
            }
        }
        return ans;

=======

        int res = 0;
        int mask = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> s;
            for (int num : nums) {
                s.insert(mask & num);
            }
            int tmp = res | (1 << i);
            for (int prefix : s) {
                if (s.find(tmp ^ prefix) != s.end()) {
                    res = tmp;
                    break;
                }
            }
        }
        return res;

=======

        int ans = 0;
        int mask = 0;
        for (int i = 31; i >= 0; --i) {
            mask |= 1 << i;
            unordered_set<int> s;
            for (int n : nums) {
                s.insert(n & mask);
            }
            int tmp = ans | (1 << i);
            for (int n : s) {
                if (s.find(n ^ tmp) != s.end()) {
                    ans = tmp;
                    break;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int t = nums[i] ^ nums[j];
                if (t > max) {
                    max = t;
                }
            }
        }
        return max;

=======

        int max = 0;
        int mask = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> set;
            for (int num : nums) {
                set.insert(num & mask);
            }
            int tmp = max | (1 << i);
            for (int prefix : set) {
                if (set.find(tmp ^ prefix) != set.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int max = 0;
        int mask = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= 1 << i;
            unordered_set<int> s;
            for (int n : nums) {
                s.insert(n & mask);
            }
            int tmp = max | (1 << i);
            for (int n : s) {
                if (s.find(n ^ tmp) != s.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int n = nums.size();
        int mask = 0;
        int ans = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> s;
            for (int num: nums) {
                s.insert(num & mask);
            }
            int tmp = ans | (1 << i);
            for (int num: s) {
                if (s.count(num ^ tmp)) {
                    ans = tmp;
                    break;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int max = 0;
        int mask = 0;
        for(int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            set<int> s;
            for(int num: nums) {
                s.insert(mask & num);
            }
            int tmp = max | (1 << i);
            for(int prefix: s) {
                if(s.find(prefix ^ tmp) != s.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int n = nums.size();
        int mask = 0;
        int max = 0;
        for (int i = 31; i >= 0; i--) {
            unordered_set<int> s;
            mask |= (1 << i);
            for (int num : nums) {
                s.insert(num & mask);
            }
            int newMax = max | (1 << i);
            for (int prefix : s) {
                if (s.find(prefix ^ newMax) != s.end()) {
                    max = newMax;
                    break;
                }
            }
        }
        return max;
