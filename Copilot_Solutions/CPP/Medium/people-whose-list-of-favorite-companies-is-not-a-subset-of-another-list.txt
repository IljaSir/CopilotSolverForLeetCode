Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = 0; i < favoriteCompanies.size(); ++i) {
            bool isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); ++j) {
                if (i == j) continue;
                if (isSubsetOf(favoriteCompanies[i], favoriteCompanies[j])) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) result.push_back(i);
        }
        return result;
    }
    
    bool isSubsetOf(vector<string> &a, vector<string> &b) {
        int count = 0;
        for (int i = 0; i < a.size(); ++i) {
            for (int j = 0; j < b.size(); ++j) {
                if (a[i] == b[j]) {
                    ++count;
                    break;
                }
            }
        }
        return count == a.size();

=======

        vector<int> result;
        for (int i = 0; i < favoriteCompanies.size(); ++i) {
            bool isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); ++j) {
                if (i == j) continue;
                if (isSubsetOf(favoriteCompanies[i], favoriteCompanies[j])) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) result.push_back(i);
        }
        return result;
    }
    
    bool isSubsetOf(vector<string>& a, vector<string>& b) {
        if (a.size() > b.size()) return false;
        unordered_set<string> set(a.begin(), a.end());
        for (auto& s : b) {
            if (set.count(s) == 0) return false;
        }
        return true;

=======

        vector<int> res;
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            bool isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); j++) {
                if (i == j) continue;
                if (isSubsetOf(favoriteCompanies[i], favoriteCompanies[j])) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) res.push_back(i);
        }
        return res;

=======

        vector<int> ans;
        for (int i = 0; i < favoriteCompanies.size(); i++) {
            bool isSubset = false;
            for (int j = 0; j < favoriteCompanies.size(); j++) {
                if (i == j) continue;
                if (isSubsetOf(favoriteCompanies[i], favoriteCompanies[j])) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) ans.push_back(i);
        }
        return ans;
    }
    
    bool isSubsetOf(vector<string>& a, vector<string>& b) {
        for (auto& s : a) {
            if (find(b.begin(), b.end(), s) == b.end()) return false;
        }
        return true;

=======

        vector<int> res;
        for (int i = 0; i < favoriteCompanies.size(); ++i) {
            bool is_subset = false;
            for (int j = 0; j < favoriteCompanies.size(); ++j) {
                if (i == j) continue;
                if (isSubset(favoriteCompanies[i], favoriteCompanies[j])) {
                    is_subset = true;
                    break;
                }
            }
            if (!is_subset) res.push_back(i);
        }
        return res;
    }
    
    bool isSubset(vector<string>& a, vector<string>& b) {
        unordered_set<string> s;
        for (auto& word : b) s.insert(word);
        for (auto& word : a) {
            if (s.find(word) == s.end()) return false;
        }
        return true;

=======

        vector<int> result;
        for(int i=0; i<favoriteCompanies.size(); i++){
            bool isSubset = false;
            for(int j=0; j<favoriteCompanies.size(); j++){
                if(i==j) continue;
                if(isSubsetOf(favoriteCompanies[i], favoriteCompanies[j])){
                    isSubset = true;
                    break;
                }
            }
            if(!isSubset) result.push_back(i);
        }
        return result;
    }
    
    bool isSubsetOf(vector<string>& v1, vector<string>& v2){
        for(int i=0; i<v1.size(); i++){
            bool found = false;
            for(int j=0; j<v2.size(); j++){
                if(v1[i]==v2[j]){
                    found = true;
                    break;
                }
            }
            if(!found) return false;
        }
        return true;

=======

        vector<int> res;
        int n = favoriteCompanies.size();
        vector<set<string>> companies(n);
        for (int i = 0; i < n; ++i) {
            for (auto& company : favoriteCompanies[i]) {
                companies[i].insert(company);
            }
        }
        for (int i = 0; i < n; ++i) {
            bool isSubset = false;
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                if (companies[j].size() > companies[i].size()) continue;
                bool isSubsetOfJ = true;
                for (auto& company : companies[i]) {
                    if (companies[j].find(company) == companies[j].end()) {
                        isSubsetOfJ = false;
                        break;
                    }
                }
                if (isSubsetOfJ) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) res.push_back(i);
        }
        return res;

=======

        vector<int> res;
        unordered_map<string, int> m;
        int n = favoriteCompanies.size();
        vector<bitset<100>> b(n);
        for (int i = 0; i < n; ++i) {
            for (auto& s : favoriteCompanies[i]) {
                if (!m.count(s)) m[s] = m.size();
                b[i].set(m[s]);
            }
        }
        for (int i = 0; i < n; ++i) {
            bool flag = true;
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                if ((b[i] & b[j]) == b[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) res.push_back(i);
        }
        return res;

=======

        vector<int> res;
        vector<set<string>> s;
        for(auto& v: favoriteCompanies){
            s.push_back(set<string>(v.begin(), v.end()));
        }
        for(int i = 0; i < s.size(); i++){
            bool flag = true;
            for(int j = 0; j < s.size(); j++){
                if(i == j) continue;
                if(includes(s[j].begin(), s[j].end(), s[i].begin(), s[i].end())){
                    flag = false;
                    break;
                }
            }
            if(flag) res.push_back(i);
        }
        return res;

=======

        vector<int> res;
        vector<set<string>> setOfFavorites;
        for (auto& v: favoriteCompanies) {
            setOfFavorites.push_back(set<string>(v.begin(), v.end()));
        }
        for (int i = 0; i < setOfFavorites.size(); ++i) {
            bool isSubset = false;
            for (int j = 0; j < setOfFavorites.size(); ++j) {
                if (i == j) continue;
                if (includes(setOfFavorites[j].begin(), setOfFavorites[j].end(), setOfFavorites[i].begin(), setOfFavorites[i].end())) {
                    isSubset = true;
                    break;
                }
            }
            if (!isSubset) {
                res.push_back(i);
            }
        }
        return res;
