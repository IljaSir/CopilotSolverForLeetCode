Synthesizing 7/10 solutions (Duplicates hidden)

=======

        vector<int> ans;
        for (auto& query : queries) {
            int start = query[0];
            int end = query[1];
            int count = 0;
            for (int i = start; i <= end; i++) {
                string word = words[i];
                if (word[0] == 'a' || word[0] == 'e' || word[0] == 'i' || word[0] == 'o' || word[0] == 'u') {
                    if (word[word.length() - 1] == 'a' || word[word.length() - 1] == 'e' || word[word.length() - 1] == 'i' || word[word.length() - 1] == 'o' || word[word.length() - 1] == 'u') {
                        count++;
                    }
                }
            }
            ans.push_back(count);
        }
        return ans;

=======

        int n = words.size();
        vector<int> ans(queries.size(), 0);
        for(int i = 0; i < queries.size(); i++) {
            for(int j = queries[i][0]; j <= queries[i][1]; j++) {
                if(words[j][0] == 'a' || words[j][0] == 'e' || words[j][0] == 'i' || words[j][0] == 'o' || words[j][0] == 'u') {
                    if(words[j][words[j].size() - 1] == 'a' || words[j][words[j].size() - 1] == 'e' || words[j][words[j].size() - 1] == 'i' || words[j][words[j].size() - 1] == 'o' || words[j][words[j].size() - 1] == 'u') {
                        ans[i]++;
                    }
                }
            }
        }
        return ans;

=======

        int n = words.size();
        vector<vector<int>> count(n, vector<int>(5, 0));
        for (int i = 0; i < n; ++i) {
            for (char c : words[i]) {
                count[i][c - 'a']++;
            }
        }
        vector<int> ans;
        for (const auto& q : queries) {
            int l = q[0], r = q[1];
            int res = 0;
            for (int i = l; i <= r; ++i) {
                int cur = 1;
                for (int j = 0; j < 5; ++j) {
                    cur *= count[i][j] + 1;
                }
                res += cur;
            }
            ans.push_back(res);
        }
        return ans;

=======

        int n = words.size();
        vector<int> ans(queries.size());
        vector<int> a(n);
        vector<int> e(n);
        vector<int> i(n);
        vector<int> o(n);
        vector<int> u(n);
        for(int j = 0; j < n; ++j) {
            for(char c : words[j]) {
                if (c == 'a') a[j]++;
                else if (c == 'e') e[j]++;
                else if (c == 'i') i[j]++;
                else if (c == 'o') o[j]++;
                else if (c == 'u') u[j]++;
            }
        }
        for(int j = 0; j < n; ++j) {
            if (j > 0) {
                a[j] += a[j-1];
                e[j] += e[j-1];
                i[j] += i[j-1];
                o[j] += o[j-1];
                u[j] += u[j-1];
            }
        }
        for(int j = 0; j < queries.size(); ++j) {
            int l = queries[j][0];
            int r = queries[j][1];
            int sum = 0;
            if (l > 0) {
                sum = a[r] - a[l-1] + e[r] - e[l-1] + i[r] - i[l-1] + o[r] - o[l-1] + u[r] - u[l-1];
            } else {
                sum = a[r] + e[r] + i[r] + o[r] + u[r];
            }
            ans[j] = sum;
        }
        return ans;

=======

        int n = words.size();
        vector<vector<int>> a(n, vector<int>(5, 0));
        for (int i = 0; i < n; i++) {
            for (char c: words[i]) {
                if (c == 'a') a[i][0]++;
                else if (c == 'e') a[i][1]++;
                else if (c == 'i') a[i][2]++;
                else if (c == 'o') a[i][3]++;
                else if (c == 'u') a[i][4]++;
            }
        }
        vector<int> ans;
        for (auto q: queries) {
            int cnt = 0;
            for (int i = 0; i < 5; i++) {
                if (a[q[1]][i] - a[q[0]][i] > 0) cnt++;
            }
            ans.push_back(cnt);
        }
        return ans;
