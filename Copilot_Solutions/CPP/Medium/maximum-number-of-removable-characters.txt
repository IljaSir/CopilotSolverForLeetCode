Synthesizing 10/10 solutions

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    bool check(string s, string p, vector<int> &removable, int k) {
        int i = 0, j = 0;
        unordered_set<int> remove(removable.begin(), removable.begin() + k);
        while (i < s.size() && j < p.size()) {
            if (remove.count(i) == 0 && s[i] == p[j]) {
                j++;
            }
            i++;
        }
        return j == p.size();

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int m = (l + r + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int m = (l + r + 1) / 2;
            if (check(s, p, removable, m)) l = m;
            else r = m - 1;
        }
        return l;
    }
    bool check(string &s, string &p, vector<int> &removable, int k) {
        vector<int> vis(s.length(), 0);
        for (int i = 0; i < k; ++i) {
            vis[removable[i]] = 1;
        }
        int j = 0;
        for (int i = 0; i < s.length() && j < p.length(); ++i) {
            if (vis[i] == 0 && s[i] == p[j]) {
                ++j;
            }
        }
        return j == p.length();

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (isSubsequence(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    
    bool isSubsequence(string s, string p, vector<int>& removable, int k) {
        vector<int> marked(s.size());
        for (int i = 0; i < k; ++i) {
            marked[removable[i]] = 1;
        }
        int i = 0, j = 0;
        while (i < s.size() && j < p.size()) {
            if (marked[i] == 0 && s[i] == p[j]) {
                ++j;
            }
            ++i;
        }
        return j == p.size();

=======

        int l = 0, r = removable.size();
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(s, p, removable, mid)) l = mid;
            else r = mid - 1;
        }
        return l;
    }
    bool check(string& s, string& p, vector<int>& removable, int k) {
        vector<bool> vis(s.size());
        for (int i = 0; i < k; ++i) vis[removable[i]] = true;
        int j = 0;
        for (int i = 0; i < s.size() && j < p.size(); ++i) {
            if (vis[i]) continue;
            if (s[i] == p[j]) ++j;
        }
        return j == p.size();

=======

        int left = 0;
        int right = removable.size();
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (check(s, p, removable, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
    
    bool check(string s, string p, vector<int>& removable, int k) {
        unordered_set<int> removed;
        for (int i = 0; i < k; ++i) {
            removed.insert(removable[i]);
        }
        int j = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (removed.find(i) == removed.end() && s[i] == p[j]) {
                ++j;
                if (j == p.size()) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = removable.size();
        int l = 0, r = n;
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (check(s, p, removable, m)) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        return l;
    }
    bool check(string s, string p, vector<int>& removable, int k) {
        vector<bool> del(s.size(), false);
        for (int i = 0; i < k; i++) {
            del[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.size() && j < p.size(); i++) {
            if (!del[i] && s[i] == p[j]) {
                j++;
            }
        }
        return j == p.size();

=======

        int n = s.size();
        int m = p.size();
        int l = 0;
        int r = n;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (check(s, p, removable, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    bool check(string& s, string& p, vector<int>& removable, int k) {
        vector<bool> vis(s.size());
        for (int i = 0; i < k; ++i) {
            vis[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (!vis[i] && s[i] == p[j]) {
                ++j;
            }
        }
        return j == p.size();

=======

        int len = removable.size();
        int l = 0, r = len;
        while(l < r) {
            int mid = (l + r + 1) / 2;
            if (check(s, p, removable, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    bool check(string s, string p, vector<int>& removable, int k) {
        int len = s.size();
        vector<bool> flag(len, false);
        for (int i = 0; i < k; i++) {
            flag[removable[i]] = true;
        }
        int j = 0;
        for (int i = 0; i < len; i++) {
            if (j == p.size()) {
                return true;
            }
            if (flag[i] == false && s[i] == p[j]) {
                j++;
            }
        }
        return j == p.size();
