Synthesizing 10/10 solutions

=======

        vector<int> result;
        for (int i = 0; i < asteroids.size(); i++) {
            if (asteroids[i] > 0) {
                result.push_back(asteroids[i]);
            } else {
                bool isCollided = false;
                while (!result.empty() && result.back() > 0) {
                    if (result.back() > -asteroids[i]) {
                        isCollided = true;
                        break;
                    } else if (result.back() == -asteroids[i]) {
                        isCollided = true;
                        result.pop_back();
                        break;
                    } else {
                        result.pop_back();
                    }
                }
                if (!isCollided) {
                    result.push_back(asteroids[i]);
                }
            }
        }
        return result;

=======

        stack<int> s;
        for (int i = 0; i < asteroids.size(); ++i) {
            if (asteroids[i] > 0) {
                s.push(asteroids[i]);
            } else {
                bool flag = true;
                while (!s.empty() && s.top() > 0 && s.top() < abs(asteroids[i])) {
                    s.pop();
                }
                if (!s.empty() && s.top() == abs(asteroids[i])) {
                    s.pop();
                    flag = false;
                }
                if (flag && (!s.empty() && s.top() > 0)) {
                    continue;
                } else {
                    s.push(asteroids[i]);
                }
            }
        }
        vector<int> ans;
        while (!s.empty()) {
            ans.push_back(s.top());
            s.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        vector<int> result;
        for (int i = 0; i < asteroids.size(); ++i) {
            if (asteroids[i] > 0) {
                result.push_back(asteroids[i]);
            } else {
                bool explode = false;
                while (!result.empty() && result.back() > 0) {
                    if (result.back() == -asteroids[i]) {
                        result.pop_back();
                        explode = true;
                        break;
                    } else if (result.back() < -asteroids[i]) {
                        result.pop_back();
                    } else {
                        explode = true;
                        break;
                    }
                }
                if (!explode) {
                    result.push_back(asteroids[i]);
                }
            }
        }
        return result;

=======

        vector<int> stack;
        for (int i = 0; i < asteroids.size(); i++) {
            if (asteroids[i] > 0) {
                stack.push_back(asteroids[i]);
            } else {
                while (stack.size() > 0 && stack.back() > 0 && stack.back() < -asteroids[i]) {
                    stack.pop_back();
                }
                if (stack.size() > 0 && stack.back() == -asteroids[i]) {
                    stack.pop_back();
                } else if (stack.size() == 0 || stack.back() < 0) {
                    stack.push_back(asteroids[i]);
                }
            }
        }
        return stack;

=======

        vector<int> stack;
        for (int i = 0; i < asteroids.size(); i++) {
            if (stack.empty() || asteroids[i] > 0) {
                stack.push_back(asteroids[i]);
            } else {
                while (!stack.empty() && stack.back() > 0 && stack.back() < -asteroids[i]) {
                    stack.pop_back();
                }
                if (stack.empty() || stack.back() < 0) {
                    stack.push_back(asteroids[i]);
                } else if (stack.back() == -asteroids[i]) {
                    stack.pop_back();
                }
            }
        }
        return stack;

=======

        vector<int> stack;
        for (int i = 0; i < asteroids.size(); i++) {
            if (stack.empty() || asteroids[i] > 0) {
                stack.push_back(asteroids[i]);
            } else {
                while (true) {
                    int last = stack.back();
                    if (last < 0) {
                        stack.push_back(asteroids[i]);
                        break;
                    } else if (last == -asteroids[i]) {
                        stack.pop_back();
                        break;
                    } else if (last > -asteroids[i]) {
                        break;
                    } else {
                        stack.pop_back();
                        if (stack.empty()) {
                            stack.push_back(asteroids[i]);
                            break;
                        }
                    }
                }
            }
        }
        return stack;

=======

        stack<int> st;
        for (auto a : asteroids) {
            if (a > 0) {
                st.push(a);
            } else {
                while (!st.empty() && st.top() > 0 && st.top() < -a) {
                    st.pop();
                }
                if (!st.empty() && st.top() == -a) {
                    st.pop();
                } else if (st.empty() || st.top() < 0) {
                    st.push(a);
                }
            }
        }
        vector<int> ans(st.size());
        for (int i = st.size() - 1; i >= 0; i--) {
            ans[i] = st.top();
            st.pop();
        }
        return ans;

=======

        vector<int> stack;
        for (int a : asteroids) {
            if (a > 0) {
                stack.push_back(a);
            } else {
                while (!stack.empty() && stack.back() > 0 && stack.back() < -a) {
                    stack.pop_back();
                }
                if (stack.empty() || stack.back() < 0) {
                    stack.push_back(a);
                } else if (stack.back() == -a) {
                    stack.pop_back();
                }
            }
        }
        return stack;

=======

        vector<int> s;
        for(auto a : asteroids) {
            if(a > 0) {
                s.push_back(a);
            } else {
                while(!s.empty() && s.back() > 0 && s.back() < -a) {
                    s.pop_back();
                }
                if(s.empty() || s.back() < 0) {
                    s.push_back(a);
                } else if(s.back() == -a) {
                    s.pop_back();
                }
            }
        }
        return s;

=======

        vector<int> result;
        for (auto& a : asteroids) {
            if (result.empty() || a > 0) {
                result.push_back(a);
            } else {
                while (true) {
                    int prev = result.back();
                    if (prev < 0) {
                        result.push_back(a);
                        break;
                    } else if (prev == -a) {
                        result.pop_back();
                        break;
                    } else if (prev > -a) {
                        break;
                    } else {
                        result.pop_back();
                        if (result.empty()) {
                            result.push_back(a);
                            break;
                        }
                    }
                }
            }
        }
        return result;
