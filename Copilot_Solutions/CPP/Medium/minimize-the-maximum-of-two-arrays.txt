Synthesizing 9/10 solutions

=======

        if (divisor1 > divisor2) {
            swap(divisor1, divisor2);
            swap(uniqueCnt1, uniqueCnt2);
        }
        if (uniqueCnt1 > uniqueCnt2) {
            swap(uniqueCnt1, uniqueCnt2);
        }
        if (uniqueCnt1 == 0) {
            return 0;
        }
        int left = 1, right = 1e9;
        while (left < right) {
            int mid = (left + right) / 2;
            int n1 = mid / divisor1;
            int n2 = mid / divisor2;
            int n12 = mid / (divisor1 * divisor2);
            if (n1 + n2 - n12 >= uniqueCnt1 + uniqueCnt2) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        if (uniqueCnt1 > uniqueCnt2) {
            swap(divisor1, divisor2);
            swap(uniqueCnt1, uniqueCnt2);
        }
        int ans = 1e9;
        for (int i = 0; i <= uniqueCnt1; ++i) {
            int j = max(0, uniqueCnt2 - (uniqueCnt1 - i + 1));
            int max1 = (i + 1) * divisor1;
            int max2 = (j + 1) * divisor2;
            ans = min(ans, max(max1, max2));
        }
        return ans;

=======

        if (divisor1 > divisor2) {
            swap(divisor1, divisor2);
            swap(uniqueCnt1, uniqueCnt2);
        }
        int ans = 0;
        for (int i = 1; i <= uniqueCnt1; i++) {
            int l = i + 1, r = uniqueCnt1 + uniqueCnt2;
            while (l < r) {
                int mid = (l + r) / 2;
                if (check(divisor1, divisor2, i, mid)) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            ans = max(ans, max(i, l));
        }
        return ans;

=======

        if (divisor1 > divisor2) {
            std::swap(divisor1, divisor2);
            std::swap(uniqueCnt1, uniqueCnt2);
        }
        int64_t lo = 0;
        int64_t hi = 1e18;
        while (lo < hi) {
            int64_t mid = lo + (hi - lo) / 2;
            int64_t cnt1 = mid / divisor1;
            int64_t cnt2 = mid / divisor2;
            int64_t cnt3 = mid / (divisor1 * divisor2);
            if (cnt1 + cnt2 - cnt3 < uniqueCnt1 + uniqueCnt2) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        int d1 = divisor1;
        int d2 = divisor2;
        if (d1 > d2) {
            swap(d1, d2);
            swap(uniqueCnt1, uniqueCnt2);
        }
        int ans = 0;
        int cnt = 0;
        for (int i = 1; i < d1; ++i) {
            int j = d2 - i;
            if (j < d1) {
                cnt += 1;
                ans = max(ans, j);
            }
        }
        if (uniqueCnt1 + uniqueCnt2 - cnt >= d1) {
            ans = max(ans, d1 - 1);
        }
        return ans;

=======

        if (divisor1 > divisor2) {
            swap(divisor1, divisor2);
            swap(uniqueCnt1, uniqueCnt2);
        }
        int res = 0;
        int left = 1, right = 1000000000;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int cnt1 = mid / divisor1 + mid / divisor2;
            int cnt2 = mid / (divisor1 * divisor2);
            if (cnt1 - cnt2 >= uniqueCnt1 + uniqueCnt2) {
                res = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return res;

=======

        int ans = 1e9;
        for (int i = 0; i < 2; ++i) {
            swap(divisor1, divisor2);
            swap(uniqueCnt1, uniqueCnt2);
            int l = 1, r = 1e9;
            while (l <= r) {
                int mid = (l + r) >> 1;
                int cnt1 = mid / divisor1;
                int cnt2 = mid / divisor2;
                int cnt3 = mid / (divisor1 * divisor2);
                if (cnt1 + cnt2 - cnt3 >= uniqueCnt1 + uniqueCnt2) {
                    ans = min(ans, mid);
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
        }
        return ans;

=======

        long long l = 0, r = 1e18;
        while(l < r) {
            long long mid = (l + r) >> 1;
            long long cnt1 = mid / divisor1;
            long long cnt2 = mid / divisor2;
            long long cnt3 = mid / (divisor1 * divisor2);
            if(cnt1 + cnt2 - cnt3 < uniqueCnt1 + uniqueCnt2) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int ans = 0;
        int gcd = std::__gcd(divisor1, divisor2);
        int lcm = divisor1 * divisor2 / gcd;
        int cnt1 = uniqueCnt1 / (divisor1 / gcd);
        int cnt2 = uniqueCnt2 / (divisor2 / gcd);
        int cnt = min(cnt1, cnt2);
        ans += cnt * gcd;
        uniqueCnt1 -= cnt * (divisor1 / gcd);
        uniqueCnt2 -= cnt * (divisor2 / gcd);
        if (uniqueCnt1 > 0) {
            ans += (uniqueCnt1 + divisor1 / gcd - 1) / (divisor1 / gcd) * divisor1;
        }
        if (uniqueCnt2 > 0) {
            ans += (uniqueCnt2 + divisor2 / gcd - 1) / (divisor2 / gcd) * divisor2;
        }
        return ans;
