Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        int count = 0;
        for (int i = nums.size() - 1; i > 0; i--) {
            if (nums[i] != nums[i - 1]) {
                count += nums.size() - i;
            }
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = nums.size() - 1; i > 0; i--) {
            if (nums[i] != nums[i - 1]) {
                res += nums.size() - i;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int result = 0;
        for (int i = nums.size() - 1; i > 0; i--) {
            if (nums[i] != nums[i - 1]) {
                result += nums.size() - i;
            }
        }
        return result;

=======

        sort(nums.begin(), nums.end());
        int res = 0, count = 0;
        for (int i = nums.size() - 1; i > 0; i--) {
            if (nums[i] == nums[i - 1]) {
                count++;
            } else {
                res += count + 1;
                count++;
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < n; ++i) {
            if (nums[i] != nums[i - 1]) {
                res += (n - i);
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int count = 0;
        for(int i = n-1; i > 0; i--) {
            if(nums[i] != nums[i-1]) {
                count += n-i;
            }
        }
        return count;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int count = 0;
        int res = 0;
        for (int i = n - 1; i > 0; i--) {
            count++;
            if (nums[i] != nums[i - 1]) {
                res += count;
            }
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int count = 0;
        for(int i = n - 1; i >= 0; i--) {
            if(i > 0 && nums[i] != nums[i - 1]) {
                count += n - i;
            }
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int i = nums.size()-1;
        int count = 0;
        for(; i > 0; i--)
        {
            if(nums[i] > nums[i-1])
            {
                count += nums.size()-i;
            }
        }
        return count;
