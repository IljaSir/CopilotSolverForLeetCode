Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < points.size(); i++) {
            unordered_map<int, int> m;
            for (int j = 0; j < points.size(); j++) {
                if (j == i) continue;
                int dis = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                m[dis]++;
            }
            for (auto it = m.begin(); it != m.end(); it++) {
                res += it->second * (it->second - 1);
            }
        }
        return res;

=======

        int n = points.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            unordered_map<int, int> cnt;
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                int dx = points[i][0] - points[j][0];
                int dy = points[i][1] - points[j][1];
                int dist = dx * dx + dy * dy;
                ++cnt[dist];
            }
            for (auto& [_, m] : cnt) {
                ans += m * (m - 1);
            }
        }
        return ans;

=======

        int n = points.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            unordered_map<int, int> cnt;
            for (int j = 0; j < n; ++j) {
                if (i == j) {
                    continue;
                }
                int dx = points[i][0] - points[j][0];
                int dy = points[i][1] - points[j][1];
                ++cnt[dx * dx + dy * dy];
            }
            for (auto [_, m] : cnt) {
                ans += m * (m - 1);
            }
        }
        return ans;

=======

        int n = points.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            unordered_map<int, int> cnt;
            for (int j = 0; j < n; ++j) {
                if (j != i) {
                    int dx = points[i][0] - points[j][0];
                    int dy = points[i][1] - points[j][1];
                    int d = dx * dx + dy * dy;
                    ++cnt[d];
                }
            }
            for (auto [_, m] : cnt) {
                ans += m * (m - 1);
            }
        }
        return ans;

=======

        int n = points.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            unordered_map<int, int> m;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int d = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                m[d]++;
            }
            for (auto it : m) {
                res += it.second * (it.second - 1);
            }
        }
        return res;

=======

        int n = points.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            unordered_map<int, int> mp;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int dis = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) + (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                mp[dis]++;
            }
            for (auto& [k, v] : mp) {
                res += v * (v - 1);
            }
        }
        return res;

=======

        int result = 0;
        for (int i = 0; i < points.size(); i++) {
            unordered_map<int, int> m;
            for (int j = 0; j < points.size(); j++) {
                if (i == j) continue;
                int dist = pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2);
                m[dist]++;
            }
            for (auto it = m.begin(); it != m.end(); it++) {
                if (it->second > 1) {
                    result += it->second * (it->second - 1);
                }
            }
        }
        return result;

=======

        int n = points.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            unordered_map<int, int> map;
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                int dist = pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2);
                map[dist]++;
            }
            for (auto it = map.begin(); it != map.end(); ++it) {
                res += it->second * (it->second - 1);
            }
        }
        return res;

=======

        int n = points.size();
        int ret = 0;
        for (int i = 0; i < n; i++) {
            unordered_map<int, int> dist;
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int dx = points[i][0] - points[j][0];
                int dy = points[i][1] - points[j][1];
                int d = dx * dx + dy * dy;
                dist[d]++;
            }
            for (auto it : dist) {
                ret += it.second * (it.second - 1);
            }
        }
        return ret;

=======

        int res = 0;
        int n = points.size();
        for(int i = 0; i < n; i++) {
            unordered_map<int, int> m;
            for(int j = 0; j < n; j++) {
                if(i == j) continue;
                int dx = points[i][0] - points[j][0];
                int dy = points[i][1] - points[j][1];
                m[dx * dx + dy * dy]++;
            }
            for(auto it = m.begin(); it != m.end(); it++) {
                res += it->second * (it->second - 1);
            }
        }
        return res;
