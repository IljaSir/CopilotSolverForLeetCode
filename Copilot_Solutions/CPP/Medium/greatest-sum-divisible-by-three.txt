Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(3, 0));
        dp[0][nums[0] % 3] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i-1][0], max(dp[i-1][1], dp[i-1][2]));
            dp[i][nums[i] % 3] = max(dp[i-1][nums[i] % 3], nums[i] + dp[i-1][(3 - nums[i] % 3) % 3]);
        }
        return dp[n-1][0];

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(3, 0));
        dp[0][nums[0] % 3] = nums[0];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i][j] = dp[i - 1][j];
            }
            for (int j = 0; j < 3; j++) {
                int k = (nums[i] + dp[i - 1][j]) % 3;
                dp[i][k] = max(dp[i][k], nums[i] + dp[i - 1][j]);
            }
        }
        return dp[n - 1][0];

=======

        int sum = 0;
        int min1 = INT_MAX, min2 = INT_MAX;
        for (int n : nums) {
            sum += n;
            if (n % 3 == 1) {
                min2 = min(min2, min1 + n);
                min1 = min(min1, n);
            } else if (n % 3 == 2) {
                min1 = min(min1, min2 + n);
                min2 = min(min2, n);
            }
        }
        if (sum % 3 == 0) {
            return sum;
        } else if (sum % 3 == 1) {
            return sum - min1;
        } else {
            return sum - min2;
        }

=======

        int dp[3] = {0};
        for (int i = 0; i < nums.size(); i++) {
            int dp2[3] = {0};
            for (int j = 0; j < 3; j++) {
                dp2[(nums[i] + j) % 3] = max(dp2[(nums[i] + j) % 3], dp[j] + nums[i]);
            }
            for (int j = 0; j < 3; j++) {
                dp[j] = max(dp[j], dp2[j]);
            }
        }
        return dp[0];

=======

        int n = nums.size();
        int dp[n][3];
        dp[0][0] = 0;
        dp[0][1] = nums[0] % 3 == 1 ? nums[0] : INT_MIN;
        dp[0][2] = nums[0] % 3 == 2 ? nums[0] : INT_MIN;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][1], dp[i - 1][2]));
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2] + nums[i]);
            dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + nums[i]);
        }
        return max(dp[n - 1][0], max(dp[n - 1][1], dp[n - 1][2]));

=======

        int dp[3] = {0};
        for (int x : nums) {
            int dp2[3];
            for (int i = 0; i < 3; ++i) {
                dp2[(i + x) % 3] = max(dp[(i + x) % 3], dp[i] + x);
            }
            memcpy(dp, dp2, sizeof(dp));
        }
        return dp[0];

=======

        vector<int> dp(3, 0);
        for (auto num : nums) {
            vector<int> t = dp;
            for (auto x : t) {
                dp[(x + num) % 3] = max(dp[(x + num) % 3], x + num);
            }
        }
        return dp[0];

=======

        int n = nums.size();
        int dp[3][n+1];
        memset(dp, 0, sizeof dp);
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                int k = (nums[i-1] + j) % 3;
                dp[k][i] = max(dp[k][i-1], dp[j][i-1] + nums[i-1]);
            }
        }
        return dp[0][n];

=======

        int n = nums.size();
        int dp[3][n+1];
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i <= n; i++) {
            int x = nums[i-1];
            for (int j = 0; j < 3; j++) {
                dp[j][i] = dp[j][i-1];
                if (dp[(j-x%3+3)%3][i-1] + x > dp[j][i]) {
                    dp[j][i] = dp[(j-x%3+3)%3][i-1] + x;
                }
            }
        }
        return dp[0][n];

=======

        int f[3] = {0};
        for (int i = 0; i < nums.size(); ++i) {
            int t1 = f[0], t2 = f[1], t3 = f[2];
            f[nums[i] % 3] = max(f[nums[i] % 3], t1 + nums[i]);
            f[(nums[i] + 1) % 3] = max(f[(nums[i] + 1) % 3], t2 + nums[i]);
            f[(nums[i] + 2) % 3] = max(f[(nums[i] + 2) % 3], t3 + nums[i]);
        }
        return f[0];
