Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && nums[j] == nums[i]) {
                j++;
            }
            if (j - i >= 2) {
                i = j;
                continue;
            }
            int k = j + 1;
            while (k < n && nums[k] == nums[k - 1] + 1) {
                k++;
            }
            if (k - j >= 3) {
                i = k;
                continue;
            }
            return false;
        }
        return true;

=======

        int n = nums.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && nums[j] == nums[i]) {
                ++j;
            }
            if (j - i >= 2) {
                i = j;
                continue;
            }
            if (j == n) {
                return false;
            }
            int k = j + 1;
            while (k < n && nums[k] == nums[k - 1] + 1) {
                ++k;
            }
            if (k - j < 3) {
                return false;
            }
            i = k;
        }
        return true;

=======

        int n = nums.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && nums[i] == nums[j]) {
                j++;
            }
            if (j - i >= 2) {
                i = j;
            } else {
                int k = j + 1;
                while (k < n && nums[k] == nums[k - 1] + 1) {
                    k++;
                }
                if (k - j != 3) {
                    return false;
                }
                i = k;
            }
        }
        return true;

=======

        int n = nums.size();
        if (n < 3) return false;
        if (n == 3) return nums[0] == nums[1] && nums[1] == nums[2];
        if (n == 4) return nums[0] == nums[1] && nums[2] == nums[3];
        int i = 0;
        while (i < n - 1) {
            if (nums[i] != nums[i + 1]) break;
            i++;
        }
        if (i == n - 1) return true;
        int j = n - 1;
        while (j > 0) {
            if (nums[j] != nums[j - 1]) break;
            j--;
        }
        if (j == 0) return true;
        if (nums[i] == nums[j]) return true;
        int k = i + 1;
        while (k < n - 1) {
            if (nums[k] != nums[k + 1]) break;
            k++;
        }
        if (k == n - 1) return true;
        if (nums[k] == nums[j]) return true;
        if (nums[i] == nums[k]) return true;
        if (nums[i] + 1 == nums[k] && nums[k] + 1 == nums[j]) return true;
        if (nums[i] + 1 == nums[j]) return true;
        if (nums[i] + 1 == nums[k] && nums[k] == nums[j]) return true;
        if (nums[i] == nums[k] && nums[k] == nums[j]) return true;
        return false;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while(l < n - 1 && nums[l] == nums[l + 1]) l++;
        while(r > 0 && nums[r] == nums[r - 1]) r--;
        if(l == n - 1 || r == 0) return false;
        if(nums[l] != nums[r]) return false;
        if(r - l < 2) return true;
        return nums[l + 1] == nums[r - 1];

=======

        int n = nums.size();
        map<int, int> mp;
        for (int i = 0; i < n; i++) {
            mp[nums[i]]++;
        }
        for (auto i : mp) {
            if (i.second >= 2) {
                return true;
            }
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] == nums[i - 1] + 1 && nums[i] == nums[i + 1] - 1) {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        vector<int> left(n, 0), right(n, 0);
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                left[i] = left[i - 1] + 1;
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] == nums[i + 1]) {
                right[i] = right[i + 1] + 1;
            }
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] == nums[i - 1] && nums[i] == nums[i + 1]) {
                if (left[i - 1] >= 2 || right[i + 1] >= 2) {
                    return true;
                }
            }
        }
        for (int i = 2; i < n - 2; i++) {
            if (nums[i] == nums[i - 1] && nums[i] == nums[i - 2] + 1) {
                if (nums[i + 1] == nums[i] + 1 && nums[i + 2] == nums[i] + 1) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        int i = 0;
        int j = n - 1;
        while (i < j) {
            if (nums[i] == nums[i + 1]) {
                i++;
            } else if (nums[j] == nums[j - 1]) {
                j--;
            } else {
                break;
            }
        }
        if (j - i < 2) return false;
        
        for (int k = i + 2; k <= j; k++) {
            if (nums[k] == nums[k - 1] && nums[k] == nums[k - 2]) {
                return true;
            }
        }
        
        for (int k = i + 1; k < j; k++) {
            if (nums[k] == nums[k - 1] + 1 && nums[k] == nums[k + 1] - 1) {
                return true;
            }
        }
        
        return false;

=======

        int n = nums.size();
        int cnt[1000001] = {0};
        for (int i = 0; i < n; ++i) {
            cnt[nums[i]]++;
        }
        int idx = 0;
        while (idx < 1000001 && cnt[idx] == 0) idx++;
        int pre = idx;
        idx++;
        while (idx < 1000001 && cnt[idx] == 0) idx++;
        int cur = idx;
        while (idx < 1000001) {
            while (idx < 1000001 && cnt[idx] == 0) idx++;
            if (idx == 1000001) break;
            if (cnt[pre] != cnt[cur] || cnt[cur] != cnt[idx]) return false;
            if (pre + 1 != cur || cur + 1 != idx) return false;
            pre = idx;
            idx++;
            while (idx < 1000001 && cnt[idx] == 0) idx++;
            cur = idx;
        }
        return true;

=======

        int n = nums.size();
        int cnt[1000001] = {};
        int cnt2[1000001] = {};
        int cnt3[1000001] = {};
        for (auto &x: nums) {
            cnt[x]++;
            if (cnt[x] == 2) cnt2[x]++;
            if (cnt[x] == 3) cnt3[x]++;
        }
        for (int i = 1; i < n; i++) {
            if (nums[i] != nums[i-1]) {
                if (cnt2[nums[i-1]] == 1) cnt2[nums[i-1]]--;
                else if (cnt3[nums[i-1]] == 1) cnt3[nums[i-1]]--;
            }
        }
        for (int i = 0; i < 1000001; i++) {
            if (cnt2[i] == 1 || cnt3[i] == 1) return true;
        }
        return false;
