Synthesizing 10/10 solutions

=======

        sort(items.begin(), items.end(), [](auto& a, auto& b) {
            return a[0] < b[0];
        });
        vector<int> res;
        for (auto& q : queries) {
            int maxBeauty = 0;
            for (auto& i : items) {
                if (i[0] <= q) {
                    maxBeauty = max(maxBeauty, i[1]);
                } else {
                    break;
                }
            }
            res.push_back(maxBeauty);
        }
        return res;

=======

        sort(items.begin(), items.end(), [](const vector<int>& a, const vector<int>& b){return a[0] < b[0];});
        int maxBeauty = 0;
        for (int i = 0; i < items.size(); i++) {
            maxBeauty = max(maxBeauty, items[i][1]);
            items[i][1] = maxBeauty;
        }
        vector<int> result;
        for (int i = 0; i < queries.size(); i++) {
            int index = lower_bound(items.begin(), items.end(), vector<int>{queries[i]+1, 0}) - items.begin();
            if (index == 0) {
                result.push_back(0);
            } else {
                result.push_back(items[index-1][1]);
            }
        }
        return result;

=======

        vector<int> result;
        sort(items.begin(), items.end(), [](vector<int> a, vector<int> b) {
            return a[0] < b[0];
        });
        int maxBeauty = 0;
        for (int i = 0; i < items.size(); i++) {
            maxBeauty = max(maxBeauty, items[i][1]);
            items[i][1] = maxBeauty;
        }
        for (int i = 0; i < queries.size(); i++) {
            int q = queries[i];
            int l = 0, r = items.size() - 1;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (items[mid][0] > q) {
                    r = mid - 1;
                } else {
                    l = mid;
                }
            }
            if (items[l][0] <= q) {
                result.push_back(items[l][1]);
            } else {
                result.push_back(0);
            }
        }
        return result;

=======

        vector<int> ans;
        vector<int> v;
        for (int i = 0; i < items.size(); i++) {
            v.push_back(items[i][1]);
        }
        sort(v.begin(), v.end());
        for (int i = 0; i < queries.size(); i++) {
            int l = 0, r = v.size() - 1;
            int res = 0;
            while (l <= r) {
                int m = l + (r - l) / 2;
                if (v[m] <= queries[i]) {
                    res = v[m];
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
            ans.push_back(res);
        }
        return ans;

=======

        vector<int> ans;
        sort(items.begin(), items.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0];
        });
        for (auto query : queries) {
            int maxBeauty = 0;
            for (auto item : items) {
                if (item[0] > query) {
                    break;
                }
                maxBeauty = max(maxBeauty, item[1]);
            }
            ans.push_back(maxBeauty);
        }
        return ans;

=======

        vector<int> ans;
        sort(items.begin(), items.end());
        for (int query : queries) {
            int maxBeauty = 0;
            for (auto& item : items) {
                if (item[0] > query) break;
                maxBeauty = max(maxBeauty, item[1]);
            }
            ans.push_back(maxBeauty);
        }
        return ans;

=======

        vector<int> answer;
        sort(items.begin(), items.end(), [](vector<int>& a, vector<int>& b){return a[1] > b[1];});
        for (int i = 0; i < queries.size(); ++i) {
            int maxBeauty = 0;
            int price = queries[i];
            for (int j = 0; j < items.size(); ++j) {
                if (items[j][0] <= price) {
                    maxBeauty = max(maxBeauty, items[j][1]);
                }
            }
            answer.push_back(maxBeauty);
        }
        return answer;

=======

        sort(items.begin(), items.end());
        vector<int> res;
        int n = items.size();
        int m = queries.size();
        int i = 0;
        for (int j = 0; j < m; j++) {
            while (i < n && queries[j] >= items[i][0]) {
                if (i == 0 || items[i][1] > items[i - 1][1]) {
                    items[i][1] = max(items[i][1], i > 0 ? items[i - 1][1] : 0);
                }
                i++;
            }
            res.push_back(i > 0 ? items[i - 1][1] : 0);
        }
        return res;

=======

        vector<int> ans;
        sort(items.begin(), items.end(), [](auto &a, auto &b) {
            return a[0] < b[0];
        });
        int n = items.size();
        vector<int> dp(n, 0);
        dp[0] = items[0][1];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i-1], items[i][1]);
        }
        for (auto q : queries) {
            int l = 0, r = n - 1, m;
            while (l < r) {
                m = l + (r - l) / 2;
                if (items[m][0] <= q) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            if (items[l][0] <= q) {
                ans.push_back(dp[l]);
            } else if (l > 0) {
                ans.push_back(dp[l-1]);
            } else {
                ans.push_back(0);
            }
        }
        return ans;

=======

        map<int, int> m;
        for (auto i: items) {
            m[i[0]] = max(m[i[0]], i[1]);
        }
        vector<int> v;
        int prev = 0;
        for (auto i: m) {
            v.push_back(i.second);
            prev = i.second;
        }
        vector<int> ans;
        for (auto i: queries) {
            int idx = upper_bound(v.begin(), v.end(), i) - v.begin();
            if (idx == 0) {
                ans.push_back(0);
            } else {
                ans.push_back(v[idx - 1]);
            }
        }
        return ans;
