Synthesizing 10/10 solutions

=======

        int n = prices.size();
        if (n < 2) return 0;
        vector<int> buy(n, 0);
        vector<int> sell(n, 0);
        buy[0] = -prices[0];
        sell[0] = 0;
        buy[1] = max(buy[0], -prices[1]);
        sell[1] = max(sell[0], buy[0] + prices[1]);
        for (int i = 2; i < n; i++) {
            buy[i] = max(buy[i-1], sell[i-2] - prices[i]);
            sell[i] = max(sell[i-1], buy[i-1] + prices[i]);
        }
        return sell[n-1];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        vector<int> buy(n, 0);
        vector<int> sell(n, 0);
        buy[0] = -prices[0];
        buy[1] = max(-prices[0], -prices[1]);
        sell[1] = max(0, prices[1] - prices[0]);
        for (int i = 2; i < n; i++) {
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i]);
            buy[i] = max(buy[i - 1], sell[i - 2] - prices[i]);
        }
        return sell[n - 1];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        vector<int> buy(n, 0);
        vector<int> sell(n, 0);
        buy[0] = -prices[0];
        buy[1] = max(buy[0], -prices[1]);
        sell[1] = max(sell[0], buy[0] + prices[1]);
        for (int i = 2; i < n; i++) {
            buy[i] = max(buy[i-1], sell[i-2] - prices[i]);
            sell[i] = max(sell[i-1], buy[i-1] + prices[i]);
        }
        return sell[n-1];

=======

        int n = prices.size();
        vector<int> buy(n), sell(n), cooldown(n);
        buy[0] = -prices[0];
        sell[0] = 0;
        cooldown[0] = 0;
        for (int i = 1; i < n; ++i) {
            buy[i] = max(buy[i - 1], cooldown[i - 1] - prices[i]);
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i]);
            cooldown[i] = max(cooldown[i - 1], sell[i - 1]);
        }
        return sell[n - 1];

=======

        int n = prices.size();
        if (n == 0) return 0;
        vector<vector<int>> dp(n, vector<int>(2));
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i]);
            ans = max(dp[i][0], ans);
        }
        return ans;

=======

        int n = prices.size();
        if (n == 0) return 0;
        vector<int> buy(n, 0), sell(n, 0), cooldown(n, 0);
        buy[0] = -prices[0];
        sell[0] = 0;
        cooldown[0] = 0;
        for (int i = 1; i < n; ++i) {
            buy[i] = max(buy[i - 1], cooldown[i - 1] - prices[i]);
            sell[i] = max(sell[i - 1], buy[i - 1] + prices[i]);
            cooldown[i] = max(cooldown[i - 1], sell[i - 1]);
        }
        return sell[n - 1];

=======

        int n = prices.size();
        if (n <= 1) return 0;
        int dp[n][3];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        dp[0][2] = 0;
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            dp[i][1] = dp[i - 1][0] + prices[i];
            dp[i][2] = max(dp[i - 1][1], dp[i - 1][2]);
        }
        return max(dp[n - 1][1], dp[n - 1][2]);

=======

        int n = prices.size();
        int sell = 0, buy = INT_MIN, pre_sell = 0, pre_buy = 0;
        for (int i = 0; i < n; ++i) {
            pre_buy = buy;
            buy = max(pre_sell - prices[i], pre_buy);
            pre_sell = sell;
            sell = max(pre_buy + prices[i], pre_sell);
        }
        return sell;

=======

        if (prices.size() < 2) return 0;
        int n = prices.size();
        vector<int> dp(n);
        dp[0] = 0;
        dp[1] = max(0, prices[1] - prices[0]);
        for (int i = 2; i < n; ++i) {
            dp[i] = max(dp[i - 1], dp[i - 2] + prices[i] - prices[i - 1]);
        }
        return dp[n - 1];

=======

        int n = prices.size();
        if (n == 1) {
            return 0;
        }
        int buy = -prices[0];
        int sell = 0;
        int cooldown = 0;
        for (int i = 1; i < n; i++) {
            int tmp = buy;
            buy = max(buy, cooldown - prices[i]);
            cooldown = sell;
            sell = max(sell, tmp + prices[i]);
        }
        return sell;
