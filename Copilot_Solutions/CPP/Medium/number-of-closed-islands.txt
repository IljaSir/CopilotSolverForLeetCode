Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j, m, n)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    bool dfs(vector<vector<int>>& grid, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool left = dfs(grid, i, j - 1, m, n);
        bool right = dfs(grid, i, j + 1, m, n);
        bool up = dfs(grid, i - 1, j, m, n);
        bool down = dfs(grid, i + 1, j, m, n);
        return left && right && up && down;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j)) {
                        res++;
                    }
                }
            }
        }
        return res;
    }
    bool dfs(vector<vector<int>>& grid, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool left = dfs(grid, i, j - 1);
        bool right = dfs(grid, i, j + 1);
        bool up = dfs(grid, i - 1, j);
        bool down = dfs(grid, i + 1, j);
        return left && right && up && down;

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j, m, n)) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
    
    bool dfs(vector<vector<int>>& grid, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool top = dfs(grid, i - 1, j, m, n);
        bool bottom = dfs(grid, i + 1, j, m, n);
        bool left = dfs(grid, i, j - 1, m, n);
        bool right = dfs(grid, i, j + 1, m, n);
        return top && bottom && left && right;

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j)) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j, m, n)) {
                        res++;
                    }
                }
            }
        }
        return res;
    }
    bool dfs(vector<vector<int>>& grid, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool res = true;
        res = res && dfs(grid, i - 1, j, m, n);
        res = res && dfs(grid, i + 1, j, m, n);
        res = res && dfs(grid, i, j - 1, m, n);
        res = res && dfs(grid, i, j + 1, m, n);
        return res;

=======

        int n = grid.size();
        int m = grid[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!visited[i][j] && grid[i][j] == 0) {
                    ans += dfs(grid, i, j, visited);
                }
            }
        }
        return ans;
    }
    
    int dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited) {
        int n = grid.size();
        int m = grid[0].size();
        if (i < 0 || i >= n || j < 0 || j >= m) {
            return 0;
        }
        if (visited[i][j] || grid[i][j] == 1) {
            return 1;
        }
        visited[i][j] = true;
        int ans = 1;
        ans &= dfs(grid, i, j - 1, visited);
        ans &= dfs(grid, i, j + 1, visited);
        ans &= dfs(grid, i - 1, j, visited);
        ans &= dfs(grid, i + 1, j, visited);
        return ans;

=======

        int n = grid.size();
        int m = grid[0].size();
        
        for (int i = 0; i < n; i++) {
            dfs(grid, i, 0);
            dfs(grid, i, m-1);
        }
        
        for (int j = 0; j < m; j++) {
            dfs(grid, 0, j);
            dfs(grid, n-1, j);
        }
        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 0) {
                    ans++;
                    dfs(grid, i, j);
                }
            }
        }
        
        return ans;

=======

        int ans = 0;
        int m = grid.size(), n = grid[0].size();
        for (int i = 1; i < m - 1; i++) {
            for (int j = 1; j < n - 1; j++) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j)) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
    
    bool dfs(vector<vector<int>>& grid, int i, int j) {
        int m = grid.size(), n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool left = dfs(grid, i, j - 1);
        bool right = dfs(grid, i, j + 1);
        bool up = dfs(grid, i - 1, j);
        bool down = dfs(grid, i + 1, j);
        return left && right && up && down;

=======

        int m = grid.size();
        int n = grid[0].size();
        int count = 0;
        for(int i = 1; i < m - 1; ++i) {
            for(int j = 1; j < n - 1; ++j) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j)) {
                        ++count;
                    }
                }
            }
        }
        return count;
    }
    bool dfs(vector<vector<int>>& grid, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool res = true;
        res &= dfs(grid, i - 1, j);
        res &= dfs(grid, i, j - 1);
        res &= dfs(grid, i + 1, j);
        res &= dfs(grid, i, j + 1);
        return res;

=======

        int M = grid.size();
        int N = grid[0].size();
        int cnt = 0;
        for (int i = 1; i < M - 1; ++i) {
            for (int j = 1; j < N - 1; ++j) {
                if (grid[i][j] == 0) {
                    if (dfs(grid, i, j)) {
                        cnt++;
                    }
                }
            }
        }
        return cnt;
    }
    bool dfs(vector<vector<int>>& grid, int i, int j) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()) {
            return false;
        }
        if (grid[i][j] == 1) {
            return true;
        }
        grid[i][j] = 1;
        bool up = dfs(grid, i - 1, j);
        bool down = dfs(grid, i + 1, j);
        bool left = dfs(grid, i, j - 1);
        bool right = dfs(grid, i, j + 1);
        return up && down && left && right;
