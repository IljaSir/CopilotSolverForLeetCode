Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = 0; j < t.size(); ++j) {
                int diff = 0;
                for (int k = 0; i + k < s.size() && j + k < t.size(); ++k) {
                    diff += s[i + k] != t[j + k];
                    res += diff == 1;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = 0; j < t.size(); ++j) {
                int diff = 0;
                for (int k = 0; i + k < s.size() && j + k < t.size() && diff <= 1; ++k) {
                    if (s[i + k] != t[j + k]) {
                        ++diff;
                    }
                    if (diff == 1) {
                        ++res;
                    }
                }
            }
        }
        return res;

=======

        int n = s.size(), m = t.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                for (int k = 0; k < min(n - i, m - j); ++k) {
                    if (s[i + k] != t[j + k] && k + 1 >= ans) {
                        ++ans;
                    }
                }
            }
        }
        return ans;

=======

        int n = s.size();
        int m = t.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int diff = 0;
                for (int k = 0; i + k < n && j + k < m; k++) {
                    if (s[i + k] != t[j + k]) {
                        diff++;
                    }
                    if (diff == 1) {
                        ans++;
                    }
                    if (diff > 1) {
                        break;
                    }
                }
            }
        }
        return ans;

=======

        int res = 0;
        int m = s.size(), n = t.size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int cnt = 0;
                for (int k = 0; i + k < m && j + k < n; ++k) {
                    if (s[i + k] != t[j + k]) {
                        if (++cnt > 1) break;
                    }
                    res += cnt;
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < s.length(); ++i) {
            for (int j = 0; j < t.length(); ++j) {
                int cnt = 0;
                for (int k = 0; i + k < s.length() && j + k < t.length(); ++k) {
                    if (s[i + k] != t[j + k]) {
                        ++cnt;
                    }
                    if (cnt == 1) {
                        ++res;
                    } else if (cnt > 1) {
                        break;
                    }
                }
            }
        }
        return res;

=======

        int n = s.size(), m = t.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; i + k < n && j + k < m; k++) {
                    if (s[i + k] != t[j + k]) {
                        count += m - j - k;
                        break;
                    }
                }
            }
        }
        return count;

=======

        int len1 = s.length();
        int len2 = t.length();
        int result = 0;
        for (int i = 0; i < len1; i++) {
            for (int j = 0; j < len2; j++) {
                int k = 0;
                while (i + k < len1 && j + k < len2) {
                    if (s[i + k] != t[j + k]) {
                        if (k > 0) {
                            result += 2;
                        } else {
                            result += 1;
                        }
                    }
                    k++;
                }
            }
        }
        return result;

=======

        int cnt = 0;
        for(int i = 0; i < s.size(); i++){
            for(int j = 0; j < t.size(); j++){
                int k = 0;
                while(i+k < s.size() && j+k < t.size() && s[i+k] == t[j+k]) k++;
                if(k > 0 && i+k < s.size() && j+k < t.size() && s[i+k] != t[j+k]) cnt++;
                k = 0;
                while(i+k < s.size() && j+k < t.size() && s[i+k] == t[j+k]) k++;
                if(k > 0 && i+k < s.size() && j+k < t.size() && s[i+k] != t[j+k]) cnt++;
            }
        }
        return cnt;

=======

        int count = 0;
        for(int i = 0; i < s.size(); i++)
            for(int j = 0; j < t.size(); j++)
                for(int k = 0; i + k < s.size() && j + k < t.size(); k++)
                    if(s[i + k] != t[j + k])
                        count += (s.size() - i - k) * (t.size() - j - k);
        return count;
