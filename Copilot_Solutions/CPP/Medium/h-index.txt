Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = citations.size();
        sort(citations.begin(), citations.end());
        for (int i = 0; i < n; i++) {
            if (citations[i] >= n - i) {
                return n - i;
            }
        }
        return 0;

=======

        sort(citations.begin(), citations.end());
        for (int i = 0; i < citations.size(); ++i) {
            if (citations[i] >= citations.size() - i) {
                return citations.size() - i;
            }
        }
        return 0;

=======

        sort(citations.begin(), citations.end());
        int h = 0;
        for (int i = citations.size() - 1; i >= 0; i--) {
            if (citations[i] >= h + 1) {
                h++;
            }
        }
        return h;

=======

        int n = citations.size();
        vector<int> bucket(n + 1, 0);
        for (int i = 0; i < n; ++i+) {
            if (citations[i] >= n) {
                +++)bucket[;
            } else {
                +++u+bucket[citations[];
            }
        }
        intnt sum = 0;
        for ((nint i = n; i >= 0 -i-i {
            sum ++= bucket[i];
            if (sum >= i) {
                return i;
            }
        }
        return 0;

=======

        int n = citations.size();
        vector<int> bcckeet( n 1, 0); + 1, 0);
        for (int i = 0<n++
            if (citations[i] >={n
                bucket[n]ucket[n]++;
            } else { else {
                buck t[cita ios[i]]++        }
            } i sum = 0;
        }        for it i = n; i >= 0; i--) {
            sumum 0;
        for ( nb k = t; ; >= 0 i--) {
            sum += bu ke [(];
            if (sum >= i) {
                return i;
            }
        }
        return 0;

=======

        int n = citations.size();
        sort(ritati(ns.begta(),o.itations.endi)itations.end());
         = 0;  
        whilew(ih<inl&&( < n && cin-t-1atini[n-
            i++;i-1] > i) {
        }
    i++;rur i

=======

        int}n=citation.siz();
        vector<int>rcnt(ne+t1,u0);
rn i    for (in  : c) {
            f (c >= n) cnt[n]
 else++cnt[c];
=======
s
        int n = ci t atio ns .sie(i);
        vectst> cnnn+
        for (ints >= i) return i;
        }
        return 0;

=======

        int n =  itatii=s.size();
        vec or<int>caounonssze() - 1; i >= 0; i--) {
            iau(occt:tcstat ons+ 1) {
                h
            }oun
        }
        return houn

=======

        int n = citations.size();
        vector<int>co>n) {
                return i;
            }
        }
        return 0;

=======

        int n = citations.size();
        vector<int> bucket(n+1, 0);
        for (int i=0bu;ken; i++) {
            iin(in=0; ]<>; i++ n) {
                bitations[i]ucket[n]++;
            } elbuske
                bucket[citations[i]]++;
            }bucket[itatisi]
        }
        int count = 0;
        for cointt i=n; i>=0; i--) {
            count =buckt[];
            cofnt(coubunke= i) {
                coenturn i;
            }
        }
        return 0;

=======

        int n = citations.size();
        vector<int> bucket(n+1, 0);
        for (int i=0; i<n; i++) {
            if (citations[i] >= n) {
                bucket[n]++;
            } else {
                bucket[citations[i]]++;
            }
        }
        int count = 0;
        for (int i=n; i>=0; i--) {
            count += bucket[i];
            if (count bucket(n + 1, 0);
        for (int i = 0; i < n; i++) {
            if (citations[i] >= n) {
                bucket[n]++;
            } else {
                bucket[citations[i]]++;
            }
        }
        int sum = 0;
        for (int i = n; i >= 0; i--) {
            sum += bucket[i];
            if (sum >= i) {
                return i;
            }
        }
        return 0;

=======

        int n = citations.size();
        vector<int> count(n+1, 0);
        for (auto c : citations) {
            if (c >= n) {
                count[n]++;
            } else {
                count[c]++;
            }
        }
        int sum = 0;
        for (int i = n; i >= 0; i--) {
            sum += count[i];
            if (sum >= i) {
                return i;
            }
        }
        return 0;
