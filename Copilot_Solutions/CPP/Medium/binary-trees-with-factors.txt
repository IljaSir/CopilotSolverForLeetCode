Synthesizing 9/10 solutions

=======

        int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < arr.size(); ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] / arr[j]];
                    dp[arr[i]] %= mod;
                }
            }
        }
        long ans = 0;
        for (auto& [k, v] : dp) {
            ans += v;
            ans %= mod;
        }
        return ans;

=======

        const int mod = 1e9 + 7;
        int n = arr.size();
        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < n; ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] = (dp[arr[i]] + dp[arr[j]] * dp[arr[i] / arr[j]]) % mod;
                }
            }
        }
        long ans = 0;
        for (auto& [_, v] : dp) {
            ans = (ans + v) % mod;
        }
        return ans;

=======

        const int MOD = 1e9 + 7;
        int n = arr.size();
        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < n; ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] = (dp[arr[i]] + dp[arr[j]] * dp[arr[i] / arr[j]]) % MOD;
                }
            }
        }
        long ans = 0;
        for (auto& [k, v] : dp) {
            ans = (ans + v) % MOD;
        }
        return ans;

=======

        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        long res = 0;
        for (int i = 0; i < arr.size(); ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] / arr[j]];
                    dp[arr[i]] %= 1000000007;
                }
            }
            res += dp[arr[i]];
            res %= 1000000007;
        }
        return res;

=======

        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        int mod = 1e9 + 7;
        for (int i = 0; i < arr.size(); ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] = (dp[arr[i]] + dp[arr[j]] * dp[arr[i] / arr[j]]) % mod;
                }
            }
        }
        long res = 0;
        for (auto& p : dp) {
            res = (res + p.second) % mod;
        }
        return res;

=======

        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        long res = 0;
        for (int i = 0; i < arr.size(); i++) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] / arr[j]];
                }
            }
            res += dp[arr[i]];
        }
        return res % (int)(1e9 + 7);

=======

        int mod = 1e9+7;
        sort(arr.begin(), arr.end());
        unordered_map<int, long> dp;
        for (int i = 0; i < arr.size(); ++i) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; ++j) {
                if (arr[i] % arr[j] == 0 && dp.count(arr[i] / arr[j])) {
                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] / arr[j]];
                    dp[arr[i]] %= mod;
                }
            }
        }
        long ans = 0;
        for (auto it : dp) ans += it.second;
        return ans % mod;

=======

        sort(arr.begin(), arr.end());
        unordered_map<int, long> m;
        for (auto x : arr) m[x] = 1;
        long res = 0;
        for (auto x : arr) {
            for (auto y : arr) {
                if (x > y) continue;
                if (x < y && m.count(x * y)) m[x * y] += m[x] * m[y];
                if (x == y && m.count(x * y)) m[x * y] += m[x] * m[y] / 2;
            }
            res += m[x];
            res %= 1000000007;
        }
        return res;

=======

        int n = arr.size();
        long long int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());
        map<int, long long int> dp;
        for (int i = 0; i < n; i++) {
            dp[arr[i]] = 1;
            for (int j = 0; j < i; j++) {
                if (arr[i] % arr[j] == 0) {
                    dp[arr[i]] += dp[arr[j]] * dp[arr[i] / arr[j]];
                    dp[arr[i]] %= mod;
                }
            }
        }
        long long int res = 0;
        for (auto it : dp) {
            res += it.second;
            res %= mod;
        }
        return res;
