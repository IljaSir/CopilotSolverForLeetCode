Synthesizing 10/10 solutions

=======

        string s = to_string(n);
        int i = s.size() - 2;
        while (i >= 0 && s[i] >= s[i + 1]) --i;
        if (i < 0) return -1;
        int j = s.size() - 1;
        while (j >= 0 && s[j] <= s[i]) --j;
        swap(s[i], s[j]);
        reverse(s.begin() + i + 1, s.end());
        long long res = stoll(s);
        return res > INT_MAX ? -1 : res;

=======

        string s = to_string(n);
        if (next_permutation(s.begin(), s.end())) {
            long long res = stoll(s);
            return res <= INT_MAX ? res : -1;
        }
        return -1;

=======

        string s = to_string(n);
        next_permutation(s.begin(), s.end());
        long long res = stoll(s);
        return res > n && res <= INT_MAX ? res : -1;

=======

        string s = to_string(n);
        next_permutation(s.begin(), s.end());
        long long ans = stoll(s);
        return ans > n && ans <= INT_MAX ? ans : -1;

=======

        string s = to_string(n);
        int i = s.size() - 1;
        while (i > 0 && s[i - 1] >= s[i]) {
            i--;
        }
        if (i == 0) {
            return -1;
        }
        int j = s.size() - 1;
        while (s[j] <= s[i - 1]) {
            j--;
        }
        swap(s[i - 1], s[j]);
        reverse(s.begin() + i, s.end());
        long long ans = stoll(s);
        return ans > INT_MAX ? -1 : ans;

=======

        string s = to_string(n);
        if (next_permutation(s.begin(), s.end())) {
            long long res = stoll(s);
            if (res > INT_MAX) return -1;
            return res;
        }
        return -1;

=======

        vector<int> digits;
        while (n > 0) {
            digits.push_back(n % 10);
            n /= 10;
        }
        int i = 0;
        for (; i < digits.size() - 1; ++i) {
            if (digits[i] > digits[i + 1]) {
                break;
            }
        }
        if (i == digits.size() - 1) {
            return -1;
        }
        int j = i + 1;
        for (; j < digits.size(); ++j) {
            if (digits[j] > digits[i + 1]) {
                break;
            }
        }
        swap(digits[i], digits[j]);
        sort(digits.begin(), digits.begin() + i);
        long long ans = 0;
        for (int i = digits.size() - 1; i >= 0; --i) {
            ans = ans * 10 + digits[i];
        }
        if (ans >= INT_MAX) {
            return -1;
        }
        return ans;

=======

        string s = to_string(n);
        if (next_permutation(s.begin(), s.end())) {
            long long r = stoll(s);
            if (r > INT_MAX) return -1;
            return r;
        }
        return -1;

=======

        string s = to_string(n);
        next_permutation(s.begin(), s.end());
        try {
            return stoi(s) > n ? stoi(s) : -1;
        } catch (exception e) {
            return -1;
        }

=======

        if (n < 10) {
            return -1;
        }
        string s = to_string(n);
        int i = s.size() - 1;
        while (i > 0 && s[i-1] >= s[i]) {
            --i;
        }
        if (i == 0) {
            return -1;
        }
        int j = i;
        while (j < s.size() && s[j] > s[i-1]) {
            ++j;
        }
        swap(s[i-1], s[j-1]);
        reverse(s.begin()+i, s.end());
        long long result = stoll(s);
        return result > INT_MAX ? -1 : result;
