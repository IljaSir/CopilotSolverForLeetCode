Synthesizing 10/10 solutions

=======

        int n = plants.size();
        int ans = 0;
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            if (cur < plants[i]) {
                ans += 2 * i + 1;
                cur = capacity;
            }
            cur -= plants[i];
        }
        return ans;

=======

        int n = plants.size();
        int res = 0;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (cur < plants[i]) {
                res += 2 * (i - 1) + 1;
                cur = capacity - plants[i];
            } else {
                cur -= plants[i];
            }
        }
        return res;

=======

        int n = plants.size();
        int step = 0;
        int water = 0;
        for (int i = 0; i < n; i++) {
            if (water < plants[i]) {
                step += 2 * (i - 1) + 1;
                water = capacity;
            }
            water -= plants[i];
        }
        return step;

=======

        int steps = 0;
        int water = 0;
        for (int i = 0; i < plants.size(); i++) {
            if (water < plants[i]) {
                steps += 2 * (i + 1);
                water = capacity;
            }
            water -= plants[i];
            steps++;
        }
        return steps - 1;

=======

        int steps = 0;
        int water = capacity;
        for (int i = 0; i < plants.size(); i++) {
            if (water < plants[i]) {
                steps += i * 2;
                water = capacity;
            }
            water -= plants[i];
            steps++;
        }
        return steps;

=======

        int ans = 0;
        int n = plants.size();
        int cur = 0;
        for (int i = 0; i < n; i++) {
            if (cur < plants[i]) {
                ans += 1 + i - cur;
                cur = i;
            }
            cur += plants[i];
        }
        return ans;

=======

        int n = plants.size();
        int water = 0;
        int steps = 0;
        for (int i = 0; i < n; i++) {
            water -= plants[i];
            steps++;
            if (water < 0) {
                water = capacity;
                steps += 2 * (i + 1);
            }
        }
        return steps;

=======

        int ans = 0;
        int cur = 0;
        for (int i = 0; i < plants.size(); i++) {
            if (cur < plants[i]) {
                ans += (i - cur) * 2;
                cur = i;
            }
            cur += plants[i];
        }
        return ans;

=======

        int n = plants.size();
        int steps = 0, water = 0;
        for (int i = 0; i < n; i++) {
            water -= plants[i];
            steps++;
            if (water < 0) {
                steps += (-water);
                water = capacity;
            }
            water -= plants[i];
            steps++;
        }
        return steps;

=======

        int n = plants.size();
        int ans = 0;
        int water = 0;
        for (int i=0; i<n; i++) {
            int need = plants[i] - water;
            if (need > 0) {
                ans += 1 + 2 * i;
                water = capacity;
            }
            water -= plants[i];
        }
        return ans;
