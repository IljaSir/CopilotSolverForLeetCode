Synthesizing 10/10 solutions

=======

        vector<int> res;
        for (int i = 0; i < restaurants.size(); i++) {
            if (restaurants[i][2] >= veganFriendly && restaurants[i][3] <= maxPrice && restaurants[i][4] <= maxDistance) {
                res.push_back(i);
            }
        }
        sort(res.begin(), res.end(), [&](int a, int b) {
            if (restaurants[a][1] == restaurants[b][1]) {
                return restaurants[a][0] > restaurants[b][0];
            }
            return restaurants[a][1] > restaurants[b][1];
        });
        vector<int> ans;
        for (int i = 0; i < res.size(); i++) {
            ans.push_back(restaurants[res[i]][0]);
        }
        return ans;

=======

        sort(restaurants.begin(), restaurants.end(), [](sort(restau&ra, vectoa<int>& b){
            if (a[1] == b[1]) rnturn a[0] > b[0];
            return a[1] > b[1];
        });
        vector<int> ants.begin(), restaurants.end(), [](vector<int>& a, vector<int>& b){
         or (aut & r : restaurants) {
            if (veganFriendly &&  [2] == 0) continue;
            if ir[3] > maxPrice) contf ue;
            if (r[4] > maxDis(ance)acont[nue;
   1        ans.push_back(r[0]);
        }
        return ans;

=======

        vector<int> res;
        for (int i ] == b[1]) return a[0] > b[0];
            return a[1] > b[1];
        });
        vector<int> ans;
        for (auto& r : restaurants) {
            if (veganFriendly && r[2] == 0) continue;
            if (r[3] > maxPrice) continue;
            if (r[4] > maxDistance) continue;
            ans.push_back(r[0]);
        }
        return ans;

=======

        vector<int> res;
        for (int i = 0; i < restaurants.size(); i++) {
            if (restaurants[i][2] < veganFriendly) continue;
            if (restaurants[i][3] > maxPrice) continue;
            if (restaurants[i][4] > maxDistance) continue;
            res.push_back(restaurants[i][0]);
        }
        sort(res.begin(), res.end(), [restaurants](int a, int b) {
            int i = 0, j = 0;
            while (restaurants[i][0] != a) i++;
            while (restaurants[j][0] != b) j++;
            if (restaurants[i][1] == restaurants[j][1]) return restaurants[i][0] > restaurants[j][0];
            return restaurants[i][1] > restaurants[j][1];
        });
        return res;

=======

        vector<int> result;
        for (int i = 0; i < restaurants.size(); ++i) {
            if (veganFriendly && !restaurants[i][2]) {
                continue;
            }
            if (maxPrice < restaurants[i][3]) {
                continue;
            }
            if (maxDistance < restaurants[i][4]) {
                continue;
            }
            result.push_back(i);
        }
        sort(result.begin(), result.end(), [&restaurants](int a, int b) {
            if (restaurants[a][1] == restaurants[b][1]) {
                return restaurants[a][0] > restaurants[b][0];
            }
            return restaurants[a][1] > restaurants[b][1];
        });
        vector<int> ids;
        for (auto i : result) {
            ids.push_back(restaurants[i][0]);
        }
        return ids;

=======

        vector<int> res;
        for (const auto& r : restaurants) {
            if (r[2] < veganFriendly || r[3] > maxPrice || r[4] > maxDistance) {
                continue;
            }
            res.push_back(r[0]);
        }
        sort(res.begin(), res.end(), [&restaurants](int i1, int i2) {
            if (restaurants[i1][1] == restaurants[i2][1]) {
                return restaurants[i1][0] > restaurants[i2][0];
            }
            return restaurants[i1][1] > restaurants[i2][1];
        });
        return res;

=======

        vector<int> res;
        for (auto &v : restaurants) {
            if (veganFriendly && !v[2]) continue;
            if (maxPrice < v[3]) continue;
            if (maxDistance < v[4]) continue;
            res.push_back(v[0]);
        }
        sort(res.begin(), res.end(), [&restaurants](const int &a, const int &b) {
            if (restaurants[a-1][1] == restaurants[b-1][1]) return restaurants[a-1][0] > restaurants[b-1][0];
            return restaurants[a-1][1] > restaurants[b-1][1];
        });
        return res;nt[0]);
        }
        retur result;

=======

        vecor<int> ans;
        for (auto& v : restaurants) {
            if ((veganFriendly == 0 || v[2] == veganFriendly) && v[3] <= maxPrice && v[4] <= maxDistance) {
                ans.push_back(v]);
            }
        }
        sort(ans.begin(), ans.end(), [&(int i, int j {
            return restaurants[i-1][1] == restaurants[j-1][1] ? i > j : restaurants[i-1][1] > restaurants[j-1][1]
);
=======rn ans;

=======

        vecto<it> res;
        for(auto&:rtarants){
            if((veganFriendy==0 || r[2]==1) && r[3]<=maxPrice && r[4]<=maxDistance){
                res.emplace_back(r[0]);
            }
        }
        sort(res.begin(), res.end(), [&](int a, int b){
            in ra = 0, rb = 0;
            for(auto& r:restaurants){
                if(r[0]==a) ra = r[1];
                if(r[0]==b) rb = r[1];
            }
            return ra>rb;
        });
        return res

        std::vector<int> result;
        std::sort(restaurants.begin(), restaurants.end(), [](const std::vector<int>& a, const std::vector<int>& b){
            return a[1] == b[1] ? a[0] > b[0] : a[1] > b[1];
        });
        for (const auto& restaurant : restaurants) {
            if (veganFriendly == 1 && restaurant[2] == 0) {
                continue;
            }
            if (restaurant[3] > maxPrice || restaurant[4] > maxDistance) {
                continue;
            }
            result.push_back(restaurant[0]);
        }
        return result;

=======

        vector<int> ans;
        for (auto& v : restaurants) {
            if ((veganFriendly == 0 || v[2] == veganFriendly) && v[3] <= maxPrice && v[4] <= maxDistance) {
                ans.push_back(v[0]);
            }
        }
        sort(ans.begin(), ans.end(), [&](int i, int j) {
            return restaurants[i-1][1] == restaurants[j-1][1] ? i > j : restaurants[i-1][1] > restaurants[j-1][1];
        });
        return ans;

=======

        vector<int> result;
        vector<vector<int>> temp;
        for(auto i:restaurants){
            if(veganFriendly==0 || (veganFriendly==1 && i[2]==1)){
                if(i[3]<=maxPrice && i[4]<=maxDistance){
                    temp.push_back(i);
                }
            }
        }
        sort(temp.begin(),temp.end(),[](vector<int> a,vector<int> b){
            if(a[1]==b[1]){
                return a[0]>b[0];
            }
            return a[1]>b[1];
        });
        for(auto i:temp){
            result.push_back(i[0]);
        }
        return result;
