Synthesizing 10/10 solutions

=======

        int x = 0, o = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') x++;
                else if (board[i][j] == 'O') o++;
            }
        }
        if (o > x || x - o > 1) return false;
        bool winX = win(board, 'X');
        bool winO = win(board, 'O');
        if (winX && winO) return false;
        if (winX && o == x) return false;
        if (winO && o < x) return false;
        return true;
    }
    
    bool win(vector<string>& board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    xCount++;
                } else if (board[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else if (board[i][0] == 'O') {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else if (board[0][i] == 'O') {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == 'X') {
                xWin = true;
            } else if (board[0][0] == 'O') {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == 'X') {
                xWin = true;
            } else if (board[0][2] == 'O') {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin) {
            return xCount == oCount + 1;
        }
        if (oWin) {
            return xCount

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    xCount++;
                } else if (board[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] != ' ') {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] != ' ') {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] != ' ') {
            if (board[0][0] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] != ' ') {
            if (board[0][2] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && oCount == xCount) {
            return false;
        }
        if (oWin && oCount != xCount) {
            return false;
        }

=======

        int xCount = 0, oCount = 0;
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                if (board[i][j] == 'X') {
                    ++xCount;
                } else if (board[i][j] == 'O') {
                    ++oCount;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else if (board[i][0] == 'O') {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else if (board[0][i] == 'O') {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            if (board[0][0] == 'X') {
                xWin = true;
            } else if (board[0][0] == 'O') {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            if (board[0][2] == 'X') {
                xWin = true;
            } else if (board[0][2] == 'O') {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && xCount == oCount) {
            return false;
        }
        if (oWin && xCount >

=======

        int x = 0;
        int o = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    x++;
                } else if (board[i][j] == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x > o + 1) {
            return false;
        }
        if (win(board, 'X') && x == o) {
            return false;
        }
        if (win(board, 'O') && x > o) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) {
                return true;
            }
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) {
                return true;
            }
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) {
            return true;
        }
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) {
            return true;
        }
        return false;

=======

        int x = 0, o = 0;
        for (string row : board) {
            for (char c : row) {
                if (c == 'X') {
                    x++;
                } else if (c == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x - o > 1) {
            return false;
        }
        if (win(board, 'X') && o == x) {
            return false;
        }
        if (win(board, 'O') && o < x) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }
        return false;

=======

        int countX = 0, countO = 0;
        for (auto& row : board) {
            for (auto& c : row) {
                if (c == 'X') countX++;
                if (c == 'O') countO++;
            }
        }
        if (countX < countO || countX > countO + 1) return false;
        bool winX = win(board, 'X');
        bool winO = win(board, 'O');
        if (winX && winO) return false;
        if (winX && countX == countO) return false;
        if (winO && countX > countO) return false;
        return true;
    }
    
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) return true;
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) return true;
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) return true;
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) return true;
        return false;

=======

        int x = 0;
        int o = 0;
        for (auto& row : board) {
            for (auto& ch : row) {
                if (ch == 'X') x++;
                if (ch == 'O') o++;
            }
        }
        if (x != o && x != o + 1) return false;
        
        bool xwin = win(board, 'X');
        bool owin = win(board, 'O');
        
        if (xwin && owin) return false;
        if (xwin && x == o) return false;
        if (owin && x > o) return false;
        
        return true;
    }
    
    bool win(vector<string>& board, char ch) {
        // check rows
        for (auto& row : board) {
            if (row[0] == ch && row[1] == ch && row[2] == ch) return true;
        }
        // check cols
        for (int j = 0; j < 3; j++) {
            if (board[0][j] == ch && board[1][j] == ch && board[2][j] == ch) return true;
        }
        // check diagonals
        if (board[0][0] == ch && board[1][1] == ch && board[2][2] == ch) return true;
        if (board[0][2] == ch && board[1][1] == ch && board[2][0] == ch) return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (auto &row : board) {
            for (auto &c : row) {
                if (c == 'X') {
                    ++xCount;
                } else if (c == 'O') {
                    ++oCount;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }

        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[1][1] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[1][1] != ' ' && board[2][0] == board[1][1] && board[2][0] == board[0][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && xCount == oCount) {
            return false;
        }
        if (oWin && xCount > oCount) {
            return false;
        }
        return true;

=======

        int n = board.size();
        int x = 0, o = 0;
        int row = 0, col = 0, diag = 0, antiDiag = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'X') {
                    x++;
                    row = (row << 1) | 1;
                    col = (col << 1) | 1;
                    if (i == j) {
                        diag = (diag << 1) | 1;
                    }
                    if (i + j == n - 1) {
                        antiDiag = (antiDiag << 1) | 1;
                    }
                } else if (board[i][j] == 'O') {
                    o++;
                    row = row << 1;
                    col = col << 1;
                    if (i == j) {
                        diag = diag << 1;
                    }
                    if (i + j == n - 1) {
                        antiDiag = antiDiag << 1;
                    }
                } else {
                    row = row << 1;
                    col = col << 1;
                    if (i == j) {
                        diag = diag << 1;
                    }
                    if (i + j == n - 1) {
                        antiDiag = antiDiag << 1;
                    }
                }
            }
        }
        if (x == o) {
            if (row == 0b111 || col == 0b111 || diag == 0b111 || antiDiag == 0b111) {
                return false;
            }
        } else if (x == o + 1) {
            if (row == 0b111000 || col == 0b111000 || diag == 0b111000 || antiDiag == 0b111000) {
                return false;
            }
        } else {
            return false;
        }
        return true;

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    xCount++;
                } else if (board[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] != ' ') {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] != ' ') {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] != ' ') {
            if (board[0][0] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] != ' ') {
            if (board[0][2] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && oCount == xCount) {
            return false;
        }
        if (oWin && oCount != xCount) {
            return false;
        }

=======

        int x = 0;
        int o = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    x++;
                } else if (board[i][j] == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x > o + 1) {
            return false;
        }
        if (win(board, 'X') && x == o) {
            return false;
        }
        if (win(board, 'O') && x > o) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) {
                return true;
            }
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) {
                return true;
            }
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) {
            return true;
        }
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) {
            return true;
        }
        return false;

=======

        int x = 0, o = 0;
        for (string row : board) {
            for (char c : row) {
                if (c == 'X') {
                    x++;
                } else if (c == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x - o > 1) {
            return false;
        }
        if (win(board, 'X') && o == x) {
            return false;
        }
        if (win(board, 'O') && o < x) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }
        return false;

=======

        int countX = 0, countO = 0;
        for (auto& row : board) {
            for (auto& c : row) {
                if (c == 'X') countX++;
                if (c == 'O') countO++;
            }
        }
        if (countX < countO || countX > countO + 1) return false;
        bool winX = win(board, 'X');
        bool winO = win(board, 'O');
        if (winX && winO) return false;
        if (winX && countX == countO) return false;
        if (winO && countX > countO) return false;
        return true;
    }
    
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) return true;
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) return true;
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) return true;
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) return true;
        return false;

=======

        int x = 0;
        int o = 0;
        for (auto& row : board) {
            for (auto& ch : row) {
                if (ch == 'X') x++;
                if (ch == 'O') o++;
            }
        }
        if (x != o && x != o + 1) return false;
        
        bool xwin = win(board, 'X');
        bool owin = win(board, 'O');
        
        if (xwin && owin) return false;
        if (xwin && x == o) return false;
        if (owin && x > o) return false;
        
        return true;
    }
    
    bool win(vector<string>& board, char ch) {
        // check rows
        for (auto& row : board) {
            if (row[0] == ch && row[1] == ch && row[2] == ch) return true;
        }
        // check cols
        for (int j = 0; j < 3; j++) {
            if (board[0][j] == ch && board[1][j] == ch && board[2][j] == ch) return true;
        }
        // check diagonals
        if (board[0][0] == ch && board[1][1] == ch && board[2][2] == ch) return true;
        if (board[0][2] == ch && board[1][1] == ch && board[2][0] == ch) return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (auto &row : board) {
            for (auto &c : row) {
                if (c == 'X') {
                    ++xCount;
                } else if (c == 'O') {
                    ++oCount;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }

        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[1][1] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[1][1] != ' ' && board[2][0] == board[1][1] && board[2][0] == board[0][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && xCount == oCount) {
            return false;
        }
        if (oWin && xCount > oCount) {
            return false;
        }
        return true;

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    xCount++;
                } else if (board[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] != ' ') {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] != ' ') {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] != ' ') {
            if (board[0][0] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] != ' ') {
            if (board[0][2] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && oCount == xCount) {
            return false;
        }
        if (oWin && oCount != xCount) {
            return false;
        }

=======

        int x = 0, o = 0;
        for (string row : board) {
            for (char c : row) {
                if (c == 'X') {
                    x++;
                } else if (c == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x - o > 1) {
            return false;
        }
        if (win(board, 'X') && o == x) {
            return false;
        }
        if (win(board, 'O') && o < x) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }
        return false;

=======

        int countX = 0, countO = 0;
        for (auto& row : board) {
            for (auto& c : row) {
                if (c == 'X') countX++;
                if (c == 'O') countO++;
            }
        }
        if (countX < countO || countX > countO + 1) return false;
        bool winX = win(board, 'X');
        bool winO = win(board, 'O');
        if (winX && winO) return false;
        if (winX && countX == countO) return false;
        if (winO && countX > countO) return false;
        return true;
    }
    
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) return true;
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) return true;
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) return true;
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) return true;
        return false;

=======

        int x = 0;
        int o = 0;
        for (auto& row : board) {
            for (auto& ch : row) {
                if (ch == 'X') x++;
                if (ch == 'O') o++;
            }
        }
        if (x != o && x != o + 1) return false;
        
        bool xwin = win(board, 'X');
        bool owin = win(board, 'O');
        
        if (xwin && owin) return false;
        if (xwin && x == o) return false;
        if (owin && x > o) return false;
        
        return true;
    }
    
    bool win(vector<string>& board, char ch) {
        // check rows
        for (auto& row : board) {
            if (row[0] == ch && row[1] == ch && row[2] == ch) return true;
        }
        // check cols
        for (int j = 0; j < 3; j++) {
            if (board[0][j] == ch && board[1][j] == ch && board[2][j] == ch) return true;
        }
        // check diagonals
        if (board[0][0] == ch && board[1][1] == ch && board[2][2] == ch) return true;
        if (board[0][2] == ch && board[1][1] == ch && board[2][0] == ch) return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (auto &row : board) {
            for (auto &c : row) {
                if (c == 'X') {
                    ++xCount;
                } else if (c == 'O') {
                    ++oCount;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }

        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[1][1] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[1][1] != ' ' && board[2][0] == board[1][1] && board[2][0] == board[0][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && xCount == oCount) {
            return false;
        }
        if (oWin && xCount > oCount) {
            return false;
        }
        return true;

=======

        int xCount = 0;
        int oCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 'X') {
                    xCount++;
                } else if (board[i][j] == 'O') {
                    oCount++;
                }
            }
        }
        if (oCount > xCount || xCount - oCount > 1) {
            return false;
        }
        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == board[i][1] && board[i][0] == board[i][2] && board[i][0] != ' ') {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] != ' ') {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[0][0] == board[1][1] && board[0][0] == board[2][2] && board[0][0] != ' ') {
            if (board[0][0] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[0][2] == board[1][1] && board[0][2] == board[2][0] && board[0][2] != ' ') {
            if (board[0][2] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && oCount == xCount) {
            return false;
        }
        if (oWin && oCount != xCount) {
            return false;
        }

=======

        int x = 0, o = 0;
        for (string row : board) {
            for (char c : row) {
                if (c == 'X') {
                    x++;
                } else if (c == 'O') {
                    o++;
                }
            }
        }
        if (o > x || x - o > 1) {
            return false;
        }
        if (win(board, 'X') && o == x) {
            return false;
        }
        if (win(board, 'O') && o < x) {
            return false;
        }
        return true;
    }
    bool win(vector<string>& board, char player) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true;
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true;
            }
        }
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true;
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true;
        }
        return false;

=======

        int countX = 0, countO = 0;
        for (auto& row : board) {
            for (auto& c : row) {
                if (c == 'X') countX++;
                if (c == 'O') countO++;
            }
        }
        if (countX < countO || countX > countO + 1) return false;
        bool winX = win(board, 'X');
        bool winO = win(board, 'O');
        if (winX && winO) return false;
        if (winX && countX == countO) return false;
        if (winO && countX > countO) return false;
        return true;
    }
    
    bool win(vector<string>& board, char c) {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == c && board[i][1] == c && board[i][2] == c) return true;
            if (board[0][i] == c && board[1][i] == c && board[2][i] == c) return true;
        }
        if (board[0][0] == c && board[1][1] == c && board[2][2] == c) return true;
        if (board[0][2] == c && board[1][1] == c && board[2][0] == c) return true;
        return false;

=======

        int xCount = 0;
        int oCount = 0;
        for (auto &row : board) {
            for (auto &c : row) {
                if (c == 'X') {
                    ++xCount;
                } else if (c == 'O') {
                    ++oCount;
                }
            }
        }
        if (xCount < oCount || xCount > oCount + 1) {
            return false;
        }

        bool xWin = false;
        bool oWin = false;
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
                if (board[i][0] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
            if (board[0][i] != ' ' && board[0][i] == board[1][i] && board[0][i] == board[2][i]) {
                if (board[0][i] == 'X') {
                    xWin = true;
                } else {
                    oWin = true;
                }
            }
        }
        if (board[1][1] != ' ' && board[0][0] == board[1][1] && board[0][0] == board[2][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (board[1][1] != ' ' && board[2][0] == board[1][1] && board[2][0] == board[0][2]) {
            if (board[1][1] == 'X') {
                xWin = true;
            } else {
                oWin = true;
            }
        }
        if (xWin && oWin) {
            return false;
        }
        if (xWin && xCount == oCount) {
            return false;
        }
        if (oWin && xCount > oCount) {
            return false;
        }
        return true;
