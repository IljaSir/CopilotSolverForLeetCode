Synthesizing 10/10 solutions

=======

        int n = word.size();
        vector<int> cnt(1 << 10, 0);
        cnt[0] = 1;
        int mask = 0;
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int c = word[i] - 'a';
            mask ^= (1 << c);
            ans += cnt[mask];
            for (int j = 0; j < 10; j++) {
                int mask2 = mask ^ (1 << j);
                ans += cnt[mask2];
            }
            cnt[mask]++;
        }
        return ans;

=======

        int n = word.size();
        vector<int> cnt(1 << 10);
        cnt[0] = 1;
        int mask = 0;
        long long res = 0;
        for (int i = 0; i < n; i++) {
            mask ^= 1 << (word[i] - 'a');
            res += cnt[mask];
            for (int j = 0; j < 10; j++) {
                res += cnt[mask ^ (1 << j)];
            }
            cnt[mask]++;
        }
        return res;

=======

        long long ans = 0;
        int n = word.size();
        vector<int> cnt(1024, 0);
        cnt[0] = 1;
        int mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= 1 << (word[i] - 'a');
            ans += cnt[mask];
            for (int j = 0; j < 10; j++) {
                ans += cnt[mask ^ (1 << j)];
            }
            cnt[mask]++;
        }
        return ans;

=======

        int n = word.size();
        vector<int> cnt(1<<10, 0);
        cnt[0] = 1;
        int mask = 0;
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= (1 << (word[i] - 'a'));
            res += cnt[mask];
            for (int j = 0; j < 10; ++j) {
                res += cnt[mask ^ (1 << j)];
            }
            cnt[mask]++;
        }
        return res;

=======

        int n = word.size();
        long long res = 0;
        vector<int> cnt(1024);
        cnt[0] = 1;
        int mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= (1 << (word[i] - 'a'));
            res += cnt[mask];
            for (int j = 0; j < 10; j++) {
                res += cnt[mask ^ (1 << j)];
            }
            cnt[mask]++;
        }
        return res;

=======

        int n = word.length();
        long long res = 0;
        vector<int> cnt(1024, 0);
        cnt[0] = 1;
        int mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= (1 << (word[i] - 'a'));
            res += cnt[mask];
            for (int j = 0; j < 10; j++) {
                res += cnt[mask ^ (1 << j)];
            }
            cnt[mask]++;
        }
        return res;

=======

        int n = word.size();
        vector<int> f(1 << 10);
        f[0] = 1;
        int mask = 0;
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= (1 << (word[i] - 'a'));
            ans += f[mask];
            for (int j = 0; j < 10; ++j) {
                ans += f[mask ^ (1 << j)];
            }
            ++f[mask];
        }
        return ans;

=======

        long long res = 0;
        vector<int> cnt(1024);
        cnt[0] = 1;
        int mask = 0;
        for (int i = 0; i < word.length(); ++i) {
            mask ^= (1 << (word[i] - 'a'));
            res += cnt[mask];
            for (int j = 0; j < 10; ++j) {
                res += cnt[mask ^ (1 << j)];
            }
            ++cnt[mask];
        }
        return res;

=======

        long long n = word.size();
        vector<int> dp(1024, 0);
        dp[0] = 1;
        int mask = 0;
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            mask ^= (1 << (word[i] - 'a'));
            ans += dp[mask];
            for (int j = 0; j < 10; j++) {
                ans += dp[mask ^ (1 << j)];
            }
            dp[mask]++;
        }
        return ans;

=======

        long long ans = 0;
        vector<int> dp(1024,0);
        dp[0] = 1;
        int mask = 0;
        for (int i = 0; i < word.size(); i++) {
            mask ^= (1 << (word[i] - 'a'));
            ans += dp[mask];
            for (int j = 0; j < 10; j++) {
                ans += dp[mask ^ (1 << j)];
            }
            dp[mask]++;
        }
        return ans;
