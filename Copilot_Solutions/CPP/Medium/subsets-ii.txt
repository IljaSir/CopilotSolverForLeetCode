Synthesizing 5/10 solutions

=======

        vector<vector<int>> res;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        backtrack(nums, 0, temp, res);
        return res;
    }
    
    void backtrack(vector<int>& nums, int start, vector<int>& temp, vector<vector<int>>& res) {
        res.push_back(temp);
        for (int i = start; i < nums.size(); i++) {
            if (i > start && nums[i] == nums[i - 1]) continue;
            temp.push_back(nums[i]);
            backtrack(nums, i + 1, temp, res);
            temp.pop_back();
        }

=======

        sort(nums.begin(), nums.end());
        vector<vector<int>> ret;
        vector<int> tmp;
        dfs(ret, tmp, 0, nums);
        return ret;
    }
    void dfs(vector<vector<int>>& ret, vector<int>& tmp, int idx, vector<int>& nums) {
        if (idx == nums.size()) {
            ret.push_back(tmp);
            return;
        }
        int cnt = 1;
        while (idx + cnt < nums.size() && nums[idx + cnt] == nums[idx]) {
            ++cnt;
        }
        dfs(ret, tmp, idx + cnt, nums);
        for (int i = 0; i < cnt; ++i) {
            tmp.push_back(nums[idx]);
            dfs(ret, tmp, idx + cnt, nums);
        }
        for (int i = 0; i < cnt; ++i) {
            tmp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        subsetsWithDupHelper(result, temp, nums, 0);
        return result;
    }
    
    void subsetsWithDupHelper(vector<vector<int>> &result, vector<int> &temp, vector<int> &nums, int start) {
        result.push_back(temp);
        for (int i = start; i < nums.size(); ++i) {
            if (i > start && nums[i] == nums[i - 1])
                continue;
            temp.push_back(nums[i]);
            subsetsWithDupHelper(result, temp, nums, i + 1);
            temp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        sort(nums.begin(), nums.end());
        backtrack(nums, temp, result, 0);
        return result;
    }
    
    void backtrack(vector<int>& nums, vector<int>& temp, vector<vector<int>>& result, int index) {
        result.push_back(temp);
        for (int i = index; i < nums.size(); i++) {
            if (i > index && nums[i] == nums[i - 1]) continue;
            temp.push_back(nums[i]);
            backtrack(nums, temp, result, i + 1);
            temp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> current;
        sort(nums.begin(), nums.end());
        dfs(nums, 0, current, result);
        return result;
    }
    
    void dfs(vector<int>& nums, int index, vector<int>& current, vector<vector<int>>& result) {
        result.push_back(current);
        for (int i = index; i < nums.size(); ++i) {
            if (i > index && nums[i] == nums[i - 1]) {
                continue;
            }
            current.push_back(nums[i]);
            dfs(nums, i + 1, current, result);
            current.pop_back();
        }
