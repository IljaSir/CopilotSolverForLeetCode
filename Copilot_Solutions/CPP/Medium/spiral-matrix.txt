Synthesizing 10/10 solutions

=======

        vector<int> result;
        int m = matrix.size();
        if (m == 0) {
            return result;
        }
        int n = matrix[0].size();
        if (n == 0) {
            return result;
        }
        int row = 0;
        int col = 0;
        while (row < m && col < n) {
            for (int i = col; i < n; ++i) {
                result.push_back(matrix[row][i]);
            }
            ++row;
            for (int i = row; i < m; ++i) {
                result.push_back(matrix[i][n - 1]);
            }
            --n;
            if (row < m) {
                for (int i = n - 1; i >= col; --i) {
                    result.push_back(matrix[m - 1][i]);
                }
                --m;
            }
            if (col < n) {
                for (int i = m - 1; i >= row; --i) {
                    result.push_back(matrix[i][col]);
                }
                ++col;
            }
        }
        return result;

=======

        vector<int> res;
        int m = matrix.size();
        int n = matrix[0].size();
        int left = 0, right = n - 1, top = 0, bottom = m - 1;
        while (left <= right && top <= bottom) {
            for (int i = left; i <= right; ++i) {
                res.push_back(matrix[top][i]);
            }
            for (int i = top + 1; i <= bottom; ++i) {
                res.push_back(matrix[i][right]);
            }
            if (left < right && top < bottom) {
                for (int i = right - 1; i > left; --i) {
                    res.push_back(matrix[bottom][i]);
                }
                for (int i = bottom; i > top; --i) {
                    res.push_back(matrix[i][left]);
                }
            }
            ++left;
            --right;
            ++top;
            --bottom;
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> res;
        int left = 0, right = n - 1, top = 0, bottom = m - 1;
        while (left <= right && top <= bottom) {
            for (int col = left; col <= right; col++) {
                res.push_back(matrix[top][col]);
            }
            for (int row = top + 1; row <= bottom; row++) {
                res.push_back(matrix[row][right]);
            }
            if (left < right && top < bottom) {
                for (int col = right - 1; col > left; col--) {
                    res.push_back(matrix[bottom][col]);
                }
                for (int row = bottom; row > top; row--) {
                    res.push_back(matrix[row][left]);
                }
            }
            left++;
            right--;
            top++;
            bottom--;
        }
        return res;

=======

        vector<int> ans;
        int m = matrix.size();
        int n = matrix[0].size();
        int left = 0, right = n - 1, top = 0, bottom = m - 1;
        while (left <= right && top <= bottom) {
            for (int i = left; i <= right; ++i) {
                ans.push_back(matrix[top][i]);
            }
            for (int i = top + 1; i <= bottom; ++i) {
                ans.push_back(matrix[i][right]);
            }
            if (left < right && top < bottom) {
                for (int i = right - 1; i > left; --i) {
                    ans.push_back(matrix[bottom][i]);
                }
                for (int i = bottom; i > top; --i) {
                    ans.push_back(matrix[i][left]);
                }
            }
            ++left;
            --right;
            ++top;
            --bottom;
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> ans;
        int l = 0, r = n - 1, t = 0, b = m - 1;
        while (l <= r && t <= b) {
            for (int i = l; i <= r; i++) ans.push_back(matrix[t][i]);
            t++;
            for (int i = t; i <= b; i++) ans.push_back(matrix[i][r]);
            r--;
            if (l <= r && t <= b) {
                for (int i = r; i >= l; i--) ans.push_back(matrix[b][i]);
                b--;
                for (int i = b; i >= t; i--) ans.push_back(matrix[i][l]);
                l++;
            }
        }
        return ans;

=======

        vector<int> result;
        int m = matrix.size(), n = matrix[0].size();
        int row = 0, col = -1;
        while (true) {
            for (int i = 0; i < n; i++) {
                result.push_back(matrix[row][++col]);
            }
            if (--m == 0) {
                break;
            }
            for (int i = 0; i < m; i++) {
                result.push_back(matrix[++row][col]);
            }
            if (--n == 0) {
                break;
            }
            for (int i = 0; i < n; i++) {
                result.push_back(matrix[row][--col]);
            }
            if (--m == 0) {
                break;
            }
            for (int i = 0; i < m; i++) {
                result.push_back(matrix[--row][col]);
            }
            if (--n == 0) {
                break;
            }
        }
        return result;

=======

        if (matrix.size() == 0) return {};
        int m = matrix.size(), n = matrix[0].size();
        int l = 0, r = n - 1, u = 0, d = m - 1;
        vector<int> res;
        while (true) {
            for (int i = l; i <= r; ++i) res.push_back(matrix[u][i]);
            if (++u > d) break;
            for (int i = u; i <= d; ++i) res.push_back(matrix[i][r]);
            if (--r < l) break;
            for (int i = r; i >= l; --i) res.push_back(matrix[d][i]);
            if (--d < u) break;
            for (int i = d; i >= u; --i) res.push_back(matrix[i][l]);
            if (++l > r) break;
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> res;
        int i = 0, j = 0;
        int x = 0, y = 0;
        int dir = 0;
        while (res.size() < m * n) {
            res.push_back(matrix[i][j]);
            matrix[i][j] = 0;
            if (dir == 0) {
                if (j + 1 < n && matrix[i][j + 1] != 0) {
                    j++;
                } else {
                    dir = 1;
                    i++;
                }
            } else if (dir == 1) {
                if (i + 1 < m && matrix[i + 1][j] != 0) {
                    i++;
                } else {
                    dir = 2;
                    j--;
                }
            } else if (dir == 2) {
                if (j - 1 >= 0 && matrix[i][j - 1] != 0) {
                    j--;
                } else {
                    dir = 3;
                    i--;
                }
            } else {
                if (i - 1 >= 0 && matrix[i - 1][j] != 0) {
                    i--;
                } else {
                    dir = 0;
                    j++;
                }
            }
        }
        return res;

=======

        vector<int> ans;
        if (matrix.empty()) return ans;
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> visited(m, vector<int>(n));
        int i = 0, j = 0;
        int di = 0, dj = 1;
        for (int k = 0; k < m * n; k++) {
            ans.push_back(matrix[i][j]);
            visited[i][j] = 1;
            if (i + di >= 0 && i + di < m && j + dj >= 0 && j + dj < n && visited[i + di][j + dj] == 0) {
                i += di;
                j += dj;
            } else {
                int tmp = di;
                di = dj;
                dj = -tmp;
                i += di;
                j += dj;
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> ans;
        int i = 0, j = 0;
        int k = 0;
        while (i < m && j < n) {
            for (k = j; k < n; k++) {
                ans.push_back(matrix[i][k]);
            }
            i++;
            for (k = i; k < m; k++) {
                ans.push_back(matrix[k][n-1]);
            }
            n--;
            if (i < m) {
                for (k = n-1; k >= j; k--) {
                    ans.push_back(matrix[m-1][k]);
                }
                m--;
            }
            if (j < n) {
                for (k = m-1; k >= i; k--) {
                    ans.push_back(matrix[k][j]);
                }
                j++;
            }
        }
        return ans;
