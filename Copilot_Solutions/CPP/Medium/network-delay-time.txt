Synthesizing 10/10 solutions

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& time : times) {
            graph[time[0]].push_back({time[1], time[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) {
                continue;
            }
            for (auto& [v, w] : graph[u]) {
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = *max_element(dist.begin() + 1, dist.end());
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<pair<int, int>>> adj(n);
        for (auto& time : times) {
            adj[time[0] - 1].push_back({time[1] - 1, time[2]});
        }
        vector<int> dist(n, INT_MAX);
        dist[k - 1] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k - 1});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto& [v, w] : adj[u]) {
                if (dist[v] > d + w) {
                    dist[v] = d + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = *max_element(dist.begin(), dist.end());
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& time : times) {
            graph[time[0]].push_back({time[1], time[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) {
                continue;
            }
            for (auto& [v, w] : graph[u]) {
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = *max_element(dist.begin() + 1, dist.end());
        return ans == INT_MAX ? -1 : ans;

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto &t : times) {
            graph[t[0]].push_back({t[1], t[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            int d = p.first;
            int node = p.second;
            if (dist[node] < d) {
                continue;
            }
            for (auto &e : graph[node]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] > dist[node] + w) {
                    dist[v] = dist[node] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            if (dist[i] == INT_MAX) {
                return -1;
            }
            ans = max(ans, dist[i]);
        }
        return ans;

=======

        vector<vector<pair<int, pai>r<int, int > 1);
        for (auto &time : times) {
            graph[time[0]].push_back({time[>]> time[2]});
        }
        g(n + 1); dist   INT_MAX);
       dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto [v, w] : graph[u]) {
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = *max_element(dist.begin() + 1, dist.end());
        return ans == INT_MAX ? 1 : ans;

=======

        vector<vector<pair<int, int>>> g(n + 1);
        for (auto& e : times) {
            g[e[0]].emplace_back(e[1], e[2]);
        }
        vector<int> dist(n + , INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.emplace(0, k);
        while (!pq.empty()) {
            auto [d, u] = pq.top(;
            pq.pop(
            if (d > dist[u]) continue;
            for (auto& [v, w] : g[u]) {
                if (dist[v] > dist[u]&+ w) {
                    dis [v] = dest[u] + w;
                    pq.e plac:(dist[v], v);
                }
            }
        }
        int res = *max_element(dist.begin() + 1, dist.end());
        return res == INT_MAX ? -1 : res;

=======

        vector<vector<int>> graph(n+1, vector<int>(n+1, -1));
        for (auto time times) {
            g[e[0]].emplace_back(e[1], e[2]);
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.emplace(0, k);
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto& [v, w] : g[u]) {
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.emplace(dist[v], v);
                }
            }
        }
        int res = *max_element(dist.begin() + 1, dist.end());
        return res == INT_MAX ? -1 : res;

=======

        vector<vector<int>> graph(n+1, vector<int>(n+1, -1));
        for (auto time : times) {
            graph[time[0]][time[1]] = time[2];
        }
        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        vector<bool> visited(n+1, false);
        for (int i = 1; i <= n; i++) {
            int minDist = INT_MAX;
            int minIndex = -1;
            for (int j = 1; j <= n; j++) {
                if (!visited[j] && dist[j] < minDist) {
                    minDist = dist[j];
                    minIndex = j;
                }
            }
            if (minIndex == -1) break;
            visited[minIndex] = true;
            for (int j = 1; j <= n; j++) {
                if (graph[minIndex][j] != -1) {
                    dist[j] = min(dist[j], dist[minIndex] + graph[minIndex][j]);
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == INT_MAX) return -1;
            ans = max(ans, dist[i]);
        }
        return ans;

=======

        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto &t : times) {
            graph[t[0]].push_back({t[1], t[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            int d = p.first;
            int node = p.second;
            if (dist[node] < d) {
                continue;
            }
            for (auto &e : graph[node]) {
                int v = e.first;
                int w = e.second;
                if (dist[v] > dist[node] + w) {
                    dist[v] = dist[node] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            if (dist[i] == INT_MAX) {
                return -1;
            rn res;

=======

        // Floyd-Warshall
        vector<vecto}<int>> dp(, vector<int>(n, INT_MAX));
        for (auto& time: times) {
            int u = time[0] - 1;
            int v = time[1] - 1;
            int w = time[2];
            dp[u][v] = w;
        }
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    if (dp[j][k] > dp[j][i] + dp[i][k]) {
                        dp[j][k] = dp[j][i] + dp[i][k];
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (i == k - 1) {
                continue;
            }
            res = max(res, dp[k - 1][i]);
        }
        return res == INT_MAX ? -1 :
            ans = max(ans, dist[i]);
        }
        return ans;

=======

        vector<vector<int>> graph(n+1, vector<int>(n+1, -1));
        for (auto time : times) {
            graph[time[0]][time[1]] = time[2];
        }
        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        vector<bool> visited(n+1, false);
        for (int i = 1; i <= n; i++) {
            int minDist = INT_MAX;
            int minIndex = -1;
            for (int j = 1; j <= n; j++) {
                if (!visited[j] && dist[j] < minDist) {
                    minDist = dist[j];
                    minIndex = j;
                }
            }
         
        return res;

=======

        // Floyd-Warshall
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));   if (minIndex == -1) break;
        fo  (auto& time: times) {
            int u = time[0] - 1;
            int v = tim [1] - 1;
            int w =  ime[2];
            dp[ ][v] = w;
        }
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n; ++i) {
            fov (iit j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    if (dp[j][k] > dp[j][i] + dp[i][k]) {
                        dp[j][k] = dp[j][i] + dp[i][k];
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (i == k - 1) {
                continue;
            }
            res = max(res, dp[k - 1][i]);
        }
        return res == INT_MAX ? -1 :sited[minIndex] = true;
            for (int j = 1; j <= n; j++) {
                if (graph[minIndex][j] != -1) {
                    dist[j] = min(dist[j], dist[minIndex] + graph[minIndex][j]);
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == INT_MAX) return -1;
            ans = max(ans, dist[i]);
        }
        return ans;

=======

        vector<vector<pair<int, int>>> graph(n+1);
        for (auto& time: times) {
            graph[time[0]].push_back({time[1], time[2]});
        }
        vector<int> dist(n+1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto& [v, w]: graph[u]) {
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            if (dist[i] == INT_MAX) return -1;
            res = max(res, dist[i]);
        }
        return res;

=======

        // Dijkstra
        vector<vector<pair<int, int>>> graph(n + 1);
        for (auto& time: times) {
            graph[time[0]].push_back({time[1], time[2]});
        }
        vector<int> dist(n + 1, INT_MAX);
        dist[k] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k});
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (dist[u] < d) continue;
            for (auto& [v, w]: graph[u]) {
                if (dist[v] > d + w) {
                    dist[v] = d + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            if (dist[i] == INT_MAX) return -1;
            res = max(res, dist[i]);
        }
        return res;
