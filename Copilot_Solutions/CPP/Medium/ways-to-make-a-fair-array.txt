Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> odd(n), even(n);
        odd[0] = nums[0];
        even[0] = 0;
        for (int i = 1; i < n; i++) {
            if (i % 2 == 0) {
                even[i] = even[i-1] + nums[i];
                odd[i] = odd[i-1];
            } else {
                odd[i] = odd[i-1] + nums[i];
                even[i] = even[i-1];
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int leftOdd = 0, leftEven = 0, rightOdd = 0, rightEven = 0;
            if (i > 0) {
                if (i % 2 == 0) {
                    leftOdd = odd[i-1];
                    leftEven = even[i-1];
                } else {
                    leftEven = odd[i-1];
                    leftOdd = even[i-1];
                }
            }
            if (i < n - 1) {
                if ((n - i - 1) % 2 == 0) {
                    rightOdd = odd[n-1] - odd[i];
                    rightEven = even[n-1] - even[i];
                } else {
                    rightEven = odd[n-1] - odd[i];
                    rightOdd = even[n-1] - even[i];
                }
            }
            if (leftOdd + rightOdd == leftEven + rightEven) {
                res++;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd(n + 1);
        vector<int> even(n + 1);
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                even[i + 1] = even[i] + nums[i];
                odd[i + 1] = odd[i];
            } else {
                odd[i + 1] = odd[i] + nums[i];
                even[i + 1] = even[i];
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (even[i] + odd[n] - odd[i + 1] == odd[i] + even[n] - even[i + 1]) {
                ++res;
            }
        }
        return res;

=======

        int n = nums.size();
        int odd = 0, even = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even += nums[i];
            } else {
                odd += nums[i];
            }
        }
        int res = 0;
        int odd_ = 0, even_ = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even -= nums[i];
            } else {
                odd -= nums[i];
            }
            if (odd_ + even == odd + even_) {
                res++;
            }
            if (i % 2 == 0) {
                even_ += nums[i];
            } else {
                odd_ += nums[i];
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd(n);
        vector<int> even(n);
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                even[i] = nums[i];
            } else {
                odd[i] = nums[i];
            }
        }
        for (int i = 1; i < n; i++) {
            even[i] += even[i - 1];
            odd[i] += odd[i - 1];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int evenSum = even[n - 1] - even[i];
            int oddSum = odd[n - 1] - odd[i];
            if (i > 0) {
                evenSum += even[i - 1];
                oddSum += odd[i - 1];
            }
            if (evenSum == oddSum) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        int odd[n];
        int even[n];
        odd[0] = nums[0];
        even[0] = 0;
        for (int i = 1; i < n; i++) {
            if (i % 2 == 0) {
                even[i] = even[i - 1] + nums[i];
                odd[i] = odd[i - 1];
            } else {
                odd[i] = odd[i - 1] + nums[i];
                even[i] = even[i - 1];
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int sum1 = 0;
            int sum2 = 0;
            if (i > 0) {
                sum1 += odd[i - 1];
                sum2 += even[i - 1];
            }
            if (i < n - 1) {
                sum1 += even[n - 1] - even[i];
                sum2 += odd[n - 1] - odd[i];
            }
            if (sum1 == sum2) {
                res++;
            }
        }
        return res;

=======

        int n = nums.size();
        int odd = 0, even = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                even += nums[i];
            } else {
                odd += nums[i];
            }
        }
        int ans = 0;
        int odd1 = 0, even1 = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                even -= nums[i];
                if (even1 + odd == odd1 + even) {
                    ++ans;
                }
                even1 += nums[i];
            } else {
                odd -= nums[i];
                if (even1 + odd == odd1 + even) {
                    ++ans;
                }
                odd1 += nums[i];
            }
        }
        return ans;

=======

        int n = nums.size();
        int odd = 0, even = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2) odd += nums[i];
            else even += nums[i];
        }
        int ans = 0;
        int odd2 = 0, even2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2) odd2 += nums[i];
            else even2 += nums[i];
            if (odd == odd2 + even - even2 && even == even2 + odd - odd2) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd(n);
        vector<int> even(n);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i % 2 == 0) {
                even[i] = sum;
                odd[i] = i > 0 ? odd[i - 1] : 0;
            } else {
                odd[i] = sum;
                even[i] = i > 0 ? even[i - 1] : 0;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int s1 = odd[i] - (i > 0 ? odd[i - 1] : 0);
            int s2 = even[i] - (i > 0 ? even[i - 1] : 0);
            int s3 = even[n - 1] - even[i];
            int s4 = odd[n - 1] - odd[i];
            if (s1 + s3 == s2 + s4) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd(n+1, 0), even(n+1, 0);
        for(int i=0; i<n; i++) {
            if(i%2) {
                odd[i+1] = odd[i] + nums[i];
                even[i+1] = even[i];
            } else {
                odd[i+1] = odd[i];
                even[i+1] = even[i] + nums[i];
            }
        }
        int res = 0;
        for(int i=0; i<n; i++) {
            if(odd[i] + even[n] - even[i+1] == even[i] + odd[n] - odd[i+1]) {
                res++;
            }
        }
        return res;

=======

        int n = nums.size(), sum = 0, odd = 0, even = 0, res = 0;
        vector<int> oddSum(n, 0), evenSum(n, 0);
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (i % 2 == 0) {
                even += nums[i];
                evenSum[i] = even;
                oddSum[i] = odd;
            } else {
                odd += nums[i];
                oddSum[i] = odd;
                evenSum[i] = even;
            }
        }
        for (int i = 0; i < n; ++i) {
            int oddSum1 = oddSum[i];
            int evenSum1 = evenSum[i];
            int oddSum2 = odd - oddSum[i];
            int evenSum2 = even - evenSum[i];
            if (oddSum1 + evenSum2 == evenSum1 + oddSum2) {
                ++res;
            }
        }
        return res;
