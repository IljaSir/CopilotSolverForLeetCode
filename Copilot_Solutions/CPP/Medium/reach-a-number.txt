Synthesizing 9/10 solutions (Duplicates hidden)

=======

        target = abs(target);
        int k = 0;
        while (target > 0) {
            target -= ++k;
        }
        return target % 2 == 0 ? k : k + 1 + k % 2;

=======

        target = abs(target);
        int k = 0;
        while (target > 0) {
            k++;
            target -= k;
        }
        return target % 2 == 0 ? k : k + 1 + k % 2;

=======

        target = abs(target);
        int n = 0;
        while (target > 0) {
            target -= ++n;
        }
        return target % 2 == 0 ? n : n + 1 + n % 2;

=======

        target = abs(target);
        int sum = 0, i = 1;
        while (sum < target) {
            sum += i;
            i++;
        }
        if (sum == target) return i - 1;
        int diff = sum - target;
        if (diff % 2 == 0) return i - 1;
        if (i % 2 == 0) return i;
        return i + 1;

=======

        target = abs(target);
        long long sum = 0;
        int ans = 0;
        while (sum < target) {
            ans++;
            sum += ans;
        }
        while ((sum - target) % 2 != 0) {
            ans++;
            sum += ans;
        }
        return ans;

=======

        int t = abs(target);
        int n = 0;
        while (t > 0) {
            t -= ++n;
        }
        if (t % 2 == 0) {
            return n;
        }
        return n + (n % 2 == 0 ? 2 : 1);
