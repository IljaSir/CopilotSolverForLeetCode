Synthesizing 10/10 solutions

=======

        long long sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); ++i) {
            if (i == 0 || nums[i] != nums[i - 1]) {
                sum += nums[i];
            }
        }
        return sum + k;

=======

        long long sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] - nums[i - 1] > 1) {
                int diff = nums[i] - nums[i - 1] - 1;
                if (diff >= k) {
                    sum += k * (nums[i - 1] + 1);
                    return sum;
                } else {
                    k -= diff;
                    sum += diff * (nums[i - 1] + 1);
                }
            }
        }
        sum += k * (nums[nums.size() - 1] + 1);
        return sum;

=======

        long long sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0) {
                sum += nums[i];
            } else {
                if (nums[i] != nums[i-1]) {
                    sum += nums[i];
                }
            }
        }
        
        int i = 1;
        while (k > 0) {
            if (i >= nums.size() || nums[i] != nums[i-1]) {
                sum += nums[i-1] + 1;
                k--;
            }
            i++;
        }
        
        return sum;

=======

        sort(nums.begin(), nums.end());
        long long res = 0;
        for (int i = 0; i < nums.size() && k > 0; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            res += nums[i];
            k--;
        }
        if (k > 0) res += k;
        return res;

=======

        long long sum = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        int last = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] - last > 1) {
                int add = min(nums[i] - last - 1, k);
                sum += add * (last + 1) + (add * (add - 1)) / 2;
                k -= add;
                if (k == 0) {
                    return sum;
                }
            }
            last = nums[i];
        }
        sum += k * (last + 1) + (k * (k - 1)) / 2;
        return sum;

=======

        sort(nums.begin(), nums.end());
        long long ans = 0;
        for (auto n : nums) {
            ans += n;
        }
        int i = 0;
        while (i < nums.size() && k > 0) {
            if (i == 0) {
                ans += k;
                k = 0;
            } else if (nums[i] == nums[i-1]) {
                i++;
            } else {
                int diff = nums[i] - nums[i-1];
                if (k >= diff) {
                    ans += diff * (long long)k;
                    k -= diff;
                    i++;
                } else {
                    ans += k;
                    k = 0;
                }
            }
        }
        return ans;

=======

        long long sum = 0;
        for (auto &n : nums) sum += n;
        sort(nums.begin(), nums.end());
        int i = 0;
        while (i < nums.size() && k > 0) {
            if (i == 0 || nums[i] > nums[i - 1] + 1) {
                int x = nums[i] - (i > 0 ? nums[i - 1] + 1 : 1);
                if (x >= k) {
                    sum += k;
                    break;
                }
                sum += x;
                k -= x;
            }
            i++;
        }
        if (k > 0) sum += k;
        return sum;

=======

        long long sum = 0;
        for (int n : nums) {
            sum += n;
        }
        priority_queue<int> pq(nums.begin(), nums.end());
        while (k--) {
            int n = pq.top(); pq.pop();
            sum += n;
            pq.push(n - 1);
        }
        return sum;

=======

		long long sum = 0;
		sort(nums.begin(), nums.end());
		int i = 0;
		while (i < nums.size() && k > 0) {
			if (i > 0 && nums[i] == nums[i - 1]) {
				++i;
				continue;
			}
			sum += nums[i];
			--k;
			++i;
		}
		while (k > 0) {
			sum += (i + 1);
			++i;
			--k;
		}
		return sum;

=======

        long long ret = 0;
        sort(nums.begin(), nums.end());
        for(int i=0;i<nums.size();i++){
            if(i==0 || nums[i] != nums[i-1]){
                ret += nums[i];
                k--;
            }
            if(k==0) break;
        }
        ret += k;
        return ret;
