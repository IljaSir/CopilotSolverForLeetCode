Synthesizing 10/10 solutions

=======

        vector<int> fib;
        fib.push_back(1);
        fib.push_back(1);
        while (fib.back() < k) {
            fib.push_back(fib[fib.size() - 1] + fib[fib.size() - 2]);
        }
        int ans = 0;
        for (int i = fib.size() - 1; i >= 0; i--) {
            if (k >= fib[i]) {
                k -= fib[i];
                ans++;
            }
        }
        return ans;

=======

        vector<int> fib{1, 1};
        while (fib.back() < k) {
            fib.push_back(fib[fib.size() - 1] + fib[fib.size() - 2]);
        }
        int res = 0;
        for (int i = fib.size() - 1; i >= 0; i--) {
            if (k >= fib[i]) {
                k -= fib[i];
                res++;
            }
        }
        return res;

=======

        vector<int> fibs;
        fibs.push_back(1);
        fibs.push_back(1);
        while (fibs.back() <= k) {
            fibs.push_back(fibs.back() + fibs[fibs.size() - 2]);
        }
        int ans = 0;
        for (int i = fibs.size() - 1; i >= 0; i--) {
            if (fibs[i] <= k) {
                k -= fibs[i];
                ans++;
            }
        }
        return ans;

=======

        vector<int> fibo = {1, 1};
        while (fibo.back() < k) {
            fibo.push_back(fibo[fibo.size() - 1] + fibo[fibo.size() - 2]);
        }
        int ans = 0;
        for (int i = fibo.size() - 1; i >= 0; i--) {
            if (k >= fibo[i]) {
                k -= fibo[i];
                ans++;
            }
        }
        return ans;

=======

        vector<int> fibs;
        fibs.push_back(1);
        fibs.push_back(1);
        while (fibs.back() < k) {
            int n = fibs.size();
            fibs.push_back(fibs[n - 1] + fibs[n - 2]);
        }
        int res = 0;
        for (int i = fibs.size() - 1; i >= 0; --i) {
            if (fibs[i] <= k) {
                k -= fibs[i];
                res++;
            }
        }
        return res;

=======

        int a = 1;
        int b = 1;
        vector<int> fib;
        fib.push_back(a);
        fib.push_back(b);
        while (true) {
            int c = a + b;
            if (c > k) {
                break;
            }
            fib.push_back(c);
            a = b;
            b = c;
        }
        int ans = 0;
        for (int i = fib.size() - 1; i >= 0; --i) {
            if (k >= fib[i]) {
                k -= fib[i];
                ++ans;
            }
            if (k == 0) {
                break;
            }
        }
        return ans;

=======

        int a = 1, b = 1;
        vector<int> f;
        f.push_back(a);
        f.push_back(b);
        while (b <= k) {
            int c = a + b;
            a = b;
            b = c;
            f.push_back(b);
        }
        int ans = 0;
        for (int i = f.size() - 1; i >= 0; i--) {
            if (f[i] <= k) {
                k -= f[i];
                ans++;
            }
        }
        return ans;

=======

        vector<int> Fibo;
        Fibo.push_back(1);
        Fibo.push_back(1);
        int i = 2;
        while (true) {
            Fibo.push_back(Fibo[i-1] + Fibo[i-2]);
            if (Fibo[i] > k) {
                break;
            }
            i++;
        }
        int count = 0;
        for (int j = i; j >= 0; j--) {
            if (k >= Fibo[j]) {
                k -= Fibo[j];
                count++;
            }
            if (k == 0) {
                break;
            }
        }
        return count;

=======

        int a = 1;
        int b = 1;
        int c = 1;
        vector<int> fib;
        fib.push_back(a);
        fib.push_back(b);
        while (c < k) {
            c = a + b;
            fib.push_back(c);
            a = b;
            b = c;
        }
        int count = 0;
        for (int i = fib.size() - 1; i >= 0; i--) {
            if (k >= fib[i]) {
                k -= fib[i];
                count++;
            }
        }
        return count;

=======

        int res=0;
        int a=1,b=1;
        while(b<=k){
            int c=a+b;
            a=b;
            b=c;
        }
        while(k>0){
            if(k>=a){
                k-=a;
                res++;
            }
            int c=a-b;
            a=b;
            b=c;
        }
        return res;
