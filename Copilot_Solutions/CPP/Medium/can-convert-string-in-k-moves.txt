Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (s.size() != t.size()) return false;
        int n = s.size();
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; ++i) {
            int diff = t[i] - s[i];
            if (diff < 0) diff += 26;
            if (diff) cnt[diff] += 1;
        }
        for (int i = 1; i < 26; ++i) {
            if (cnt[i] * 26 + i > k) return false;
        }
        return true;

=======

        if (s.size() != t.size()) return false;
        vector<int> cnt(26, 0);
        for (int i = 0; i < s.size(); ++i) {
            int diff = (t[i] - s[i] + 26) % 26;
            if (diff > 0) {
                cnt[diff]++;
            }
        }
        for (int i = 1; i < 26; ++i) {
            if (cnt[i] * 26 + i > k) return false;
        }
        return true;

=======

        if (s.size() != t.size()) return false;
        unordered_map<int, int> m;
        for (int i = 0; i < s.size(); ++i) {
            int d = (t[i] - s[i] + 26) % 26;
            if (d) {
                if (d + 26 * m[d] > k) return false;
                ++m[d];
            }
        }
        return true;

=======

        if (s.size() != t.size()) {
            return false;
        }
        vector<int> diff(26, 0);
        for (int i = 0; i < s.size(); i++) {
            int d = (t[i] - s[i] + 26) % 26;
            diff[d]++;
        }
        for (int i = 1; i < 26; i++) {
            if (diff[i] * 26 + i > k) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        vector<int> count(26, 0);
        for (int i = 0; i < s.length(); i++) {
            int diff = (t[i] - s[i] + 26) % 26;
            if (diff) count[diff]++;
        }
        for (int i = 1; i < 26; i++) {
            if (count[i] * 26 + i > k) return false;
        }
        return true;

=======

        if (s.size() != t.size()) {
            return false;
        }
        vector<int> moves(26, 0);
        for (int i = 0; i < s.size(); ++i) {
            int diff = t[i] - s[i];
            if (diff < 0) {
                diff += 26;
            }
            if (diff != 0) {
                ++moves[diff];
            }
        }
        for (int i = 1; i < 26; ++i) {
            if (moves[i] * 26 + i > k) {
                return false;
            }
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        vector<int> m(26, 0);
        for (int i = 0; i < s.length(); i++) {
            int diff = t[i] - s[i];
            if (diff < 0) diff += 26;
            if (diff > 0) m[diff]++;
        }
        for (int i = 1; i <= k; i++) {
            if (m[i % 26] > 0) m[i % 26]--;
        }
        for (int i = 1; i < 26; i++) {
            if (m[i] > 0) return false;
        }
        return true;

=======

        if (s.length() != t.length()) {
            return false;
        }
        int n = s.length();
        int cnt[26] = {0};
        for (int i = 0; i < n; ++i) {
            int diff = (t[i] - s[i] + 26) % 26;
            if (diff) {
                ++cnt[diff];
            }
        }
        for (int i = 1; i < 26; ++i) {
            if (cnt[i] > (k - i) / 26 + 1) {
                return false;
            }
        }
        return true;

=======

        if(s.length() != t.length()) return false;
        int times[26] = {0};
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == t[i]) continue;
            int diff = t[i] - s[i];
            if(diff < 0) diff += 26;
            times[diff]++;
        }
        for(int i = 1; i < 26; i++) {
            if(times[i] == 0) continue;
            if(times[i] * 26 - i > k) return false;
        }
        return true;
