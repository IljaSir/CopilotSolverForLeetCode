Synthesizing 9/10 solutions

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(nums, 0, path, res);
        return res;
    }
    void dfs(vector<int>& nums, int start, vector<int>& path, vector<vector<int>>& res) {
        if (path.size() >= 2) {
            res.push_back(path);
        }
        unordered_set<int> s;
        for (int i = start; i < nums.size(); ++i) {
            if (s.count(nums[i])) {
                continue;
            }
            if (path.empty() || nums[i] >= path.back()) {
                s.insert(nums[i]);
                path.push_back(nums[i]);
                dfs(nums, i + 1, path, res);
                path.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> out;
        helper(nums, 0, out, res);
        return res;
    }
    void helper(vector<int>& nums, int start, vector<int>& out, vector<vector<int>>& res) {
        if (out.size() >= 2)
            res.push_back(out);
        unordered_set<int> uset;
        for (int i = start; i < nums.size(); ++i) {
            if (uset.find(nums[i]) != uset.end()) continue;
            if (out.empty() || out.back() <= nums[i]) {
                uset.insert(nums[i]);
                out.push_back(nums[i]);
                helper(nums, i + 1, out, res);
                out.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> out;
        dfs(res, out, nums, 0);
        return res;
    }
    
    void dfs(vector<vector<int>>& res, vector<int>& out, vector<int>& nums, int start){
        if(out.size() >= 2){
            res.push_back(out);
        }
        unordered_set<int> used;
        for(int i = start; i < nums.size(); ++i){
            if(used.count(nums[i])) continue;
            if(out.empty() || nums[i] >= out.back()){
                used.insert(nums[i]);
                out.push_back(nums[i]);
                dfs(res, out, nums, i + 1);
                out.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> cur;
        dfs(nums, 0, cur, res);
        return res;
    }
    void dfs(vector<int>& nums, int index, vector<int>& cur, vector<vector<int>>& res) {
        if (cur.size() >= 2) res.push_back(cur);
        unordered_set<int> us;
        for (int i = index; i < nums.size(); i++) {
            if (us.count(nums[i])) continue;
            if (cur.empty() || nums[i] >= cur.back()) {
                us.insert(nums[i]);
                cur.push_back(nums[i]);
                dfs(nums, i + 1, cur, res);
                cur.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> out;
        findSubsequencesDFS(nums, 0, out, res);
        return res;
    }
    
    void findSubsequencesDFS(vector<int>& nums, int start, vector<int>& out, vector<vector<int>>& res) {
        if (out.size() >= 2) res.push_back(out);
        unordered_set<int> uset;
        for (int i = start; i < nums.size(); ++i) {
            if (uset.find(nums[i]) != uset.end()) continue;
            if (out.empty() || nums[i] >= out.back()) {
                out.push_back(nums[i]);
                findSubsequencesDFS(nums, i + 1, out, res);
                out.pop_back();
                uset.insert(nums[i]);
            }
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        dfs(nums, 0, temp, result);
        return result;
    }
    void dfs(vector<int>& nums, int start, vector<int>& temp, vector<vector<int>>& result) {
        if (temp.size() >= 2) {
            result.push_back(temp);
        }
        unordered_set<int> s;
        for (int i = start; i < nums.size(); ++i) {
            if (s.count(nums[i])) {
                continue;
            }
            if (temp.empty() || nums[i] >= temp.back()) {
                s.insert(nums[i]);
                temp.push_back(nums[i]);
                dfs(nums, i + 1, temp, result);
                temp.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> cur;
        findSubsequences(nums, 0, cur, res);
        return res;
    }
    void findSubsequences(vector<int>& nums, int start, vector<int>& cur, vector<vector<int>>& res) {
        if (cur.size() >= 2) {
            res.push_back(cur);
        }
        unordered_set<int> used;
        for (int i = start; i < nums.size(); ++i) {
            if (used.find(nums[i]) != used.end()) {
                continue;
            }
            if (cur.empty() || nums[i] >= cur.back()) {
                used.insert(nums[i]);
                cur.push_back(nums[i]);
                findSubsequences(nums, i + 1, cur, res);
                cur.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        vector<int> temp;
        dfs(res, temp, nums, 0);
        return res;

=======

        vector<vector<int>> ans;
        vector<int> seq;
        dfs(nums, ans, seq, 0);
        return ans;
