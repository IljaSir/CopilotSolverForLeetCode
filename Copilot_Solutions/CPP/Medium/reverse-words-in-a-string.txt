Synthesizing 10/10 solutions

=======

        string result;
        int i = 0;
        while (i < s.size()) {
            while (i < s.size() && s[i] == ' ') {
                i++;
            }
            if (i >= s.size()) {
                break;
            }
            int j = i + 1;
            while (j < s.size() && s[j] != ' ') {
                j++;
            }
            string word = s.substr(i, j - i);
            if (result.empty()) {
                result = word;
            } else {
                result = word + " " + result;
            }
            i = j + 1;
        }
        return result;

=======

        int i = 0;
        while (i < s.size()) {
            int j = i;
            while (j < s.size() && s[j] != ' ') {
                j++;
            }
            reverse(s.begin() + i, s.begin() + j);
            i = j + 1;
        }
        reverse(s.begin(), s.end());
        return s;

=======

        string result;
        int i = 0;
        while (i < s.size()) {
            while (i < s.size() && s[i] == ' ') {
                i++;
            }
            if (i == s.size()) {
                break;
            }
            if (result.size() > 0) {
                result.push_back(' ');
            }
            string word;
            while (i < s.size() && s[i] != ' ') {
                word.push_back(s[i++]);
            }
            result = word + " " + result;
        }
        return result;

=======

        string res;
        int n = s.size();
        int i = n - 1;
        while (i >= 0) {
            if (s[i] == ' ') {
                i--;
                continue;
            }
            int j = i;
            while (j >= 0 && s[j] != ' ') {
                j--;
            }
            if (res.size() > 0) {
                res += " ";
            }
            res += s.substr(j + 1, i - j);
            i = j;
        }
        return res;

=======

        int n = s.size();
        int i = 0;
        string ans;
        while (i < n) {
            while (i < n && s[i] == ' ') ++i;
            if (i >= n) break;
            string tmp;
            while (i < n && s[i] != ' ') {
                tmp += s[i];
                ++i;
            }
            if (ans.size() > 0) ans = tmp + ' ' + ans;
            else ans = tmp;
        }
        return ans;

=======

        int n = s.length();
        string res;
        int i = n-1;
        while (i >= 0) {
            while (i >= 0 && s[i] == ' ') {
                i--;
            }
            if (i < 0) {
                break;
            }
            if (!res.empty()) {
                res.push_back(' ');
            }
            string t;
            while (i >= 0 && s[i] != ' ') {
                t.push_back(s[i--]);
            }
            reverse(t.begin(), t.end());
            res.append(t);
        }
        return res;

=======

        string ans = "";
        int n = s.size();
        int i = n - 1;
        while(i >= 0) {
            if(s[i] == ' ') {
                i--;
                continue;
            }
            int j = i;
            while(j >= 0 && s[j] != ' ') {
                j--;
            }
            if(ans.size() == 0) {
                ans = s.substr(j + 1, i - j);
            } else {
                ans = ans + " " + s.substr(j + 1, i - j);
            }
            i = j - 1;
        }
        return ans;

=======

        string ans = "";
        int j = s.length() - 1;
        int i = j;
        while (i >= 0) {
            while (i >= 0 && s[i] == ' ') i--;
            j = i;
            while (i >= 0 && s[i] != ' ') i--;
            if (j > i) {
                if (ans.length() > 0) ans += " ";
                ans += s.substr(i + 1, j - i);
            }
        }
        return ans;

=======

        int n = s.size();
        if (n == 0) return s;
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < n) {
            while (i < n && s[i] == ' ') i++;
            j = i;
            while (j < n && s[j] != ' ') j++;
            reverse(s.begin() + i, s.begin() + j);
            if (k) s[k++] = ' ';
            for (int p = i; p < j; p++) s[k++] = s[p];
            i = j;
        }
        s.erase(s.begin() + k, s.end());
        reverse(s.begin(), s.end());
        return s;

=======

        string result;
        int size = s.size();
        int i = 0;
        int j = size - 1;
        while (i < size && s[i] == ' ') {
            ++i;
        }
        while (j >= 0 && s[j] == ' ') {
            --j;
        }
        if (i > j) {
            return result;
        }
        result = s.substr(i, j - i + 1);
        int start = 0;
        int end = result.size() - 1;
        while (start < end) {
            swap(result[start], result[end]);
            ++start;
            --end;
        }
        int index = 0;
        int space = 0;
        for (int i = 0; i < result.size(); ++i) {
            if (result[i] == ' ') {
                if (space == 0) {
                    result[index++] = result[i];
                }
                ++space;
            } else {
                space = 0;
                result[index++] = result[i];
            }
        }
        result = result.substr(0, index);
        start = 0;
        end = result.size() - 1;
        while (start < end) {
            swap(result[start], result[end]);
            ++start;
            --end;
        }
        start = 0;
        end = 0;
        index = 0;
        while (end < result.size()) {
            while (end < result.size() && result[end] != ' ') {
                ++end;
            }
            int temp = end;
            --end;
            while (start < end) {
                swap(result[start], result[end]);
                ++start;
                --end;
            }
            start = temp + 1;
            end = temp + 1;
        }
        return result;

=======

        string res;
        int n = s.size();
        int i = n - 1;
        while (i >= 0) {
            if (s[i] == ' ') {
                i--;
                continue;
            }
            int j = i;
            while (j >= 0 && s[j] != ' ') {
                j--;
            }
            if (res.size() > 0) {
                res += " ";
            }
            res += s.substr(j + 1, i - j);
            i = j;
        }
        return res;

=======

        string ans = "";
        int j = s.length() - 1;
        int i = j;
        while (i >= 0) {
            while (i >= 0 && s[i] == ' ') i--;
            j = i;
            while (i >= 0 && s[i] != ' ') i--;
            if (j > i) {
                if (ans.length() > 0) ans += " ";
                ans += s.substr(i + 1, j - i);
            }
        }
        return ans;

=======

        int n = s.size();
        if (n == 0) return s;
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < n) {
            while (i < n && s[i] == ' ') i++;
            j = i;
            while (j < n && s[j] != ' ') j++;
            reverse(s.begin() + i, s.begin() + j);
            if (k) s[k++] = ' ';
            for (int p = i; p < j; p++) s[k++] = s[p];
            i = j;
        }
        s.erase(s.begin() + k, s.end());
        reverse(s.begin(), s.end());
        return s;

=======

        string result;
        int size = s.size();
        int i = 0;
        int j = size - 1;
        while (i < size && s[i] == ' ') {
            ++i;
        }
        while (j >= 0 && s[j] == ' ') {
            --j;
        }
        if (i > j) {
            return result;
        }
        result = s.substr(i, j - i + 1);
        int start = 0;
        int end = result.size() - 1;
        while (start < end) {
            swap(result[start], result[end]);
            ++start;
            --end;
        }
        int index = 0;
        int space = 0;
        for (int i = 0; i < result.size(); ++i) {
            if (result[i] == ' ') {
                if (space == 0) {
                    result[index++] = result[i];
                }
                ++space;
            } else {
                space = 0;
                result[index++] = result[i];
            }
        }
        result = result.substr(0, index);
        start = 0;
        end = result.size() - 1;
        while (start < end) {
            swap(result[start], result[end]);
            ++start;
            --end;
        }
        start = 0;
        end = 0;
        index = 0;
        while (end < result.size()) {
            while (end < result.size() && result[end] != ' ') {
                ++end;
            }
            int temp = end;
            --end;
            while (start < end) {
                swap(result[start], result[end]);
                ++start;
                --end;
            }
            start = temp + 1;
            end = temp + 1;
        }
        return result;
