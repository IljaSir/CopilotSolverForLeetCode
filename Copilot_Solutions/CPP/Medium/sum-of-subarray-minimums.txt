Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> left(n), right(n);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && arr[s.top()] > arr[i]) s.pop();
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }
        s = stack<int>();
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && arr[s.top()] >= arr[i]) s.pop();
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }
        int ans = 0, mod = 1e9 + 7;
        for (int i = 0; i < n; ++i) {
            ans = (ans + arr[i] * (i - left[i]) * (right[i] - i)) % mod;
        }
        return ans;

=======

        int res = 0, n = arr.size(), mod = 1e9 + 7;
        vector<int> left(n), right(n);
        stack<pair<int, int>> s1, s2;
        for (int i = 0; i < n; ++i) {
            int count = 1;
            while (!s1.empty() && s1.top().first > arr[i]) {
                count += s1.top().second;
                s1.pop();
            }
            s1.push({arr[i], count});
            left[i] = count;
        }
        for (int i = n - 1; i >= 0; --i) {
            int count = 1;
            while (!s2.empty() && s2.top().first >= arr[i]) {
                count += s2.top().second;
                s2.pop();
            }
            s2.push({arr[i], count});
            right[i] = count;
        }
        for (int i = 0; i < n; ++i) {
            res = (res + arr[i] * left[i] * right[i]) % mod;
        }
        return res;

=======

        int n = arr.size();
        vector<int> left(n), right(n);
        stack<pair<int, int>> s;
        for (int i = 0; i < n; ++i) {
            int count = 1;
            while (!s.empty() && s.top().first > arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            left[i] = count;
        }
        while (!s.empty()) s.pop();
        for (int i = n - 1; i >= 0; --i) {
            int count = 1;
            while (!s.empty() && s.top().first >= arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            right[i] = count;
        }
        int ans = 0, mod = 1e9 + 7;
        for (int i = 0; i < n; ++i) {
            ans = (ans + (long long)arr[i] * left[i] * right[i]) % mod;
        }
        return ans;

=======

        int n = arr.size();
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && arr[s.top()] > arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top();
            }
            s.push(i);
        }
        s = stack<int>();
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            if (!s.empty()) {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long)arr[i] * (i - left[i]) * (right[i] - i);
            ans %= 1000000007;
        }
        return ans;

=======

        int n = arr.size();
        vector<int> left(n), right(n);
        stack<pair<int, int>> s;
        for (int i = 0; i < n; i++) {
            int count = 1;
            while (!s.empty() && s.top().first >= arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            left[i] = count;
        }
        while (!s.empty()) s.pop();
        for (int i = n - 1; i >= 0; i--) {
            int count = 1;
            while (!s.empty() && s.top().first > arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            right[i] = count;
        }
        int ans = 0, mod = 1e9 + 7;
        for (int i = 0; i < n; i++) {
            ans = (ans + (long)arr[i] * left[i] * right[i]) % mod;
        }
        return ans;

=======

        int n = arr.size();
        vector<int> left(n, -1), right(n, n);
        stack<int> s1, s2;
        for (int i = 0; i < n; i++) {
            while (!s1.empty() && arr[s1.top()] > arr[i]) {
                s1.pop();
            }
            left[i] = s1.empty() ? -1 : s1.top();
            s1.push(i);
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s2.empty() && arr[s2.top()] >= arr[i]) {
                s2.pop();
            }
            right[i] = s2.empty() ? n : s2.top();
            s2.push(i);
        }
        int ans = 0, mod = 1e9 + 7;
        for (int i = 0; i < n; i++) {
            ans = (ans + arr[i] * (i - left[i]) * (right[i] - i)) % mod;
        }
        return ans;

=======

        int n = arr.size();
        vector<int> left(n, -1);
        vector<int> right(n, n);
        stack<pair<int, int>> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && s.top().first > arr[i]) {
                right[s.top().second] = i;
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top().second;
            }
            s.push({arr[i], i});
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = (ans + (i - left[i]) * (right[i] - i) % 1000000007 * arr[i]) % 1000000007;
        }
        return ans;

=======

        int len = arr.size();
        int sum = 0;
        for (int i = 0; i < len; i++) {
            int min = arr[i];
            for (int j = i; j < len; j++) {
                if (arr[j] < min) {
                    min = arr[j];
                }
                sum += min;
                sum %= 1000000007;
            }
        }
        return sum;

=======

        vector<int> left(arr.size(), 0);
        vector<int> right(arr.size(), 0);
        stack<int> s;
        for (int i = 0; i < arr.size(); i++) {
            while (!s.empty() && arr[s.top()] > arr[i]) {
                s.pop();
            }
            if (s.empty()) {
                left[i] = -1;
            } else {
                left[i] = s.top();
            }
            s.push(i);
        }
        s = stack<int>();
        for (int i = arr.size() - 1; i >= 0; i--) {
            while (!s.empty() && arr[s.top()] >= arr[i]) {
                s.pop();
            }
            if (s.empty()) {
                right[i] = arr.size();
            } else {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long sum = 0;
        const long long MOD = 1000000007;
        for (int i = 0; i < arr.size(); i++) {
            sum += (long long)arr[i] * (long long)(i - left[i]) * (long long)(right[i] - i);
            sum %= MOD;
        }
        return sum;

=======

        int size = arr.size();
        vector<int> left(size, 1);
        vector<int> right(size, 1);
        
        stack<pair<int, int>> s;
        for (int i = 0; i < size; i++) {
            int count = 1;
            while (!s.empty() && s.top().first > arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            left[i] = count;
        }
        
        while (!s.empty()) s.pop();
        for (int i = size - 1; i >= 0; i--) {
            int count = 1;
            while (!s.empty() && s.top().first >= arr[i]) {
                count += s.top().second;
                s.pop();
            }
            s.push({arr[i], count});
            right[i] = count;
        }
        
        int sum = 0;
        int mod = 1e9 + 7;
        for (int i = 0; i < size; i++) {
            sum = (sum + (arr[i] * left[i] * right[i]) % mod) % mod;
        }
        return sum;
