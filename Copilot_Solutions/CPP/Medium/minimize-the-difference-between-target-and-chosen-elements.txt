Synthesizing 10/10 solutions

=======

        int n = mat.size();
        int m = mat[0].size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += *min_element(mat[i].begin(), mat[i].end());
        }
        if (sum >= target) return sum - target;
        vector<int> dp(sum + 1, 0);
        for (int i = 0; i < n; i++) {
            vector<int> tmp(sum + 1, 0);
            for (int j = 0; j < m; j++) {
                for (int k = mat[i][j]; k <= sum; k++) {
                    tmp[k] = max(tmp[k], dp[k - mat[i][j]] + mat[i][j]);
                }
            }
            dp = tmp;
        }
        int res = INT_MAX;
        for (int i = target; i <= sum; i++) {
            res = min(res, i - dp[i]);
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        int sum = 0;
        for(int i = 0; i < m; i++) {
            sum += *min_element(mat[i].begin(), mat[i].end());
        }
        if(sum >= target) return sum - target;
        int maxSum = 0;
        for(int i = 0; i < m; i++) {
            maxSum += *max_element(mat[i].begin(), mat[i].end());
        }
        if(maxSum <= target) return target - maxSum;
        vector<int> dp(maxSum - sum + 1, INT_MAX);
        dp[0] = 0;
        for(int i = 0; i < m; i++) {
            for(int j = maxSum - sum; j >= 0; j--) {
                if(dp[j] != INT_MAX) {
                    for(int k = 0; k < n; k++) {
                        if(j + mat[i][k] - sum <= maxSum - sum) {
                            dp[j + mat[i][k] - sum] = min(dp[j + mat[i][k] - sum], dp[j] + mat[i][k]);
                        }
                    }
                }
            }
        }
        int res = INT_MAX;
        for(int i = 0; i <= maxSum - sum; i++) {
            if(dp[i] != INT_MAX) {
                res = min(res, abs(dp[i] + i + sum - target));
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> dp(800, 0);
        for (int i = 0; i < m; ++i) {
            vector<int> temp(800, 0);
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < 800; ++k) {
                    if (dp[k]) {
                        temp[k + mat[i][j]] = 1;
                    }
                }
            }
            for (int k = 0; k < 800; ++k) {
                if (temp[k]) {
                    dp[k] = 1;
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < 800; ++i) {
            if (dp[i]) {
                ans = min(ans, abs(i - target));
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> dp(800, 0);
        for (int i = 0; i < m; ++i) {
            vector<int> tmp(800, 0);
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < 800; ++k) {
                    if (dp[k] && k + mat[i][j] < 800) {
                        tmp[k + mat[i][j]] = 1;
                    }
                }
            }
            for (int j = 0; j < 800; ++j) {
                if (tmp[j]) {
                    dp[j] = 1;
                }
            }
            dp[mat[i][0]] = 1;
        }
        int ans = INT_MAX;
        for (int i = 0; i < 800; ++i) {
            if (dp[i]) {
                ans = min(ans, abs(i - target));
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<int> dp(target+1, 10000);
        dp[0] = 0;
        for (int i = 0; i < m; i++) {
            vector<int> temp(target+1, 10000);
            for (int j = 0; j < n; j++) {
                for (int k = 0; k <= target; k++) {
                    if (k >= mat[i][j]) {
                        temp[k] = min(temp[k], dp[k-mat[i][j]]);
                    }
                }
            }
            for (int j = 0; j <= target; j++) {
                dp[j] = min(dp[j], temp[j] + 1);
            }
        }
        int ans = 10000;
        for (int i = 0; i <= target; i++) {
            ans = min(ans, abs(i-target) + dp[i]);
        }
        return ans;

=======

        int m = mat.size(), n = mat[0].size();
        vector<int> dp(800, 0);
        for (int i = 0; i < m; ++i) {
            vector<int> tmp(800, 0);
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < 800; ++k) {
                    if (dp[k] == 0) continue;
                    tmp[k + mat[i][j]] = 1;
                }
            }
            for (int j = 0; j < 800; ++j) {
                if (tmp[j] == 1) dp[j] = 1;
            }
        }
        int res = INT_MAX;
        for (int i = 0; i < 800; ++i) {
            if (dp[i] == 1) res = min(res, abs(i - target));
        }
        return res;

=======

        int m = mat.size(), n = mat[0].size();
        vector<int> dp(800, 0);
        for (int i = 0; i < m; i++) {
            vector<int> tmp(800, 0);
            for (int j = 0; j < n; j++) {
                for (int k = 0; k <= 750; k++) {
                    if (dp[k] > 0) {
                        tmp[k + mat[i][j]] = 1;
                    }
                }
            }
            for (int j = 0; j <= 750; j++) {
                if (tmp[j] > 0) {
                    dp[j] = 1;
                }
            }
        }
        int ans = 800;
        for (int i = 0; i <= 750; i++) {
            if (dp[i] > 0) {
                ans = min(ans, abs(i - target));
            }
        }
        return ans;

=======

        int n = mat.size(), m = mat[0].size();
        vector<int> dp(800, 0);
        for (int i = 0; i < n; i++) {
            vector<int> temp(800, 0);
            for (int j = 0; j < m; j++) {
                for (int sum = 0; sum < 800; sum++) {
                    if (dp[sum] || sum == 0) {
                        temp[sum + mat[i][j]] = 1;
                        temp[abs(sum - mat[i][j])] = 1;
                    }
                }
            }
            dp = temp;
        }
        for (int i = 0; i < 800; i++) {
            if (dp[i]) return i;
        }
        return 0;

=======

        int m = mat.size();
        int n = mat[0].size();
        int dp[71][8001] = {0};
        for (int i = 0; i < 71; i++) {
            for (int j = 0; j < 8001; j++) {
                dp[i][j] = 8001;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 8001; j++) {
                for (int k = 0; k < n; k++) {
                    if (j - mat[i][k] >= 0) {
                        dp[i+1][j] = min(dp[i+1][j], dp[i][j - mat[i][k]] + mat[i][k]);
                    }
                }
            }
        }
        int ans = 8001;
        for (int i = 0; i < 8001; i++) {
            ans = min(ans, abs(target - dp[m][i]));
        }
        return ans;

=======

        int n = mat.size();
        int m = mat[0].size();
        int dp[80][8000];
        memset(dp, 0x3f, sizeof(dp));
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; k <= 8000; k++) {
                    dp[i + 1][k] = min(dp[i + 1][k], dp[i][k]);
                    dp[i + 1][k + mat[i][j]] = min(dp[i + 1][k + mat[i][j]], dp[i][k]);
                }
            }
        }
        int ans = 0x3f3f3f3f;
        for (int i = 0; i <= 8000; i++) {
            if (dp[n][i] != 0x3f3f3f3f) {
                ans = min(ans, abs(target - i));
            }
        }
        return ans;
