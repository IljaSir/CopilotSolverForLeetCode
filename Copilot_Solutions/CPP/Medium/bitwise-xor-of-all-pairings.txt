Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllPairs(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];
        }
        return res;
    }
    int xorAll(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= (nums1[i] ^ nums2[j]);
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2, int k) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= (nums1[i] ^ nums2[j]);
                if (res == k) return res;
            }
        }
        return res;
    }
    int getXORSum(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        int n1 = nums1.size(), n2 = nums2.size();
        int k = xorAllNums(nums1, nums2);
        for (int i = 0; i < n1; i++) {
            res ^= (xorAllNums(nums1, nums2, k ^ nums1[i]));
        }
        return res;

=======

        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                ans ^= (nums1[i] ^ nums2[j]);
            }
        }
        return ans;
    }
    int xorAllNums2(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            ans ^= nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            ans ^= nums2[i];
        }
        return ans;
    }
    int xorAllNums3(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            ans ^= (nums1[i] * nums2.size());
        }
        for (int i = 0; i < nums2.size(); ++i) {
            ans ^= (nums2[i] * nums1.size());
        }
        return ans;
    }
    int xorAllNums4(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            ans ^= (nums1[i] & 1);
        }
        for (int i = 0; i < nums2.size(); ++i) {
            ans ^= (nums2[i] & 1);
        }
        return ans;
    }
    int xorAllNums5(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            ans ^= (nums1[i] & 1);
        }
        for (int i = 0; i < nums2.size(); ++i) {
            ans ^= (nums2[i] & 1);
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            res ^= nums2[i];
        }
        return res;
    }
    int xorAllPairs(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                res ^= (nums1[i] ^ nums2[j]);
            }
        }
        return res;
    }
    int xorOperation(int n, int start) {
        vector<int> nums1, nums2;
        for (int i = 0; i < n; ++i) {
            nums1.push_back(start + 2 * i);
            nums2.push_back(start + 2 * i + 1);
        }
        return xorAllNums(nums1, nums2) ^ xorAllPairs(nums1, nums2);

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            res ^= nums2[i];
        }
        return res;
    }
    int xorAllPairs(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorOperation(int n, int start) {
        int nums1[n];
        int nums2[n];
        for (int i = 0; i < n; ++i) {
            nums1[i] = start + 2 * i;
            nums2[i] = start + 2 * i + 1;
        }
        int res = xorAllNums(nums1, nums2);
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int i = 0; i < nums2.size(); ++i) {
            res ^= nums2[i];
        }
        return res;
    }
    int xorAllPairs(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllPairs2(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];
        }
        return res;
    }
    int xorAllPairs3(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];
        }
        return res;
    }
    int xorAllPairs4(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];
        }
        return res;
    }
    int xorAllPairs5(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            res ^= nums1[i];
        }
        for (int j = 0; j < nums2.size(); ++j) {
            res ^= nums2[j];

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;
    }
    int xorAllNums(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                res ^= nums1[i] ^ nums2[j];
            }
        }
        return res;

=======

        int ret = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                ret ^= nums1[i] ^ nums2[j];
            }
        }
        return ret;
    }
    int xorAllNums2(vector<int>& nums1, vector<int>& nums2) {
        int ret = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            int cnt1 = (nums1[i] + 1) / 2;
            int cnt2 = (nums1[i] + 1) / 2;
            ret ^= cnt1 % 2 * (nums1[i] % 2);
            ret ^= cnt2 % 2 * (nums1[i] % 2);
        }
        for (int i = 0; i < nums2.size(); ++i) {
            int cnt1 = (nums2[i] + 1) / 2;
            int cnt2 = (nums2[i] + 1) / 2;
            ret ^= cnt1 % 2 * (nums2[i] % 2);
            ret ^= cnt2 % 2 * (nums2[i] % 2);
        }
        return ret;
    }
    int xorAllNums3(vector<int>& nums1, vector<int>& nums2) {
        int ret = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            int cnt1 = (nums1[i] + 1) / 2;
            int cnt2 = (nums1[i]) / 2;
            ret ^= cnt1 % 2 * (nums1[i] % 2);
            ret ^= cnt2 % 2 * (nums1[i] % 2);
        }
        for (int i = 0; i < nums2.size(); ++i) {
            int cnt1 = (nums2[i] + 1) / 2;
            int cnt2 = (nums2[i]) / 2;
            ret ^= cnt1 % 2 * (nums2[i] % 2);
            ret ^= cnt2 % 2 * (nums2[i] % 2);
        }
        return ret;

=======

        int res = 0;
        for (auto num : nums1) {
            res ^= num;
        }
        for (auto num : nums2) {
            res ^= num;
        }
        return res;
    }
    int xorAllPairs(vector<int>& nums1, vector<int>& nums2) {
        int res = 0;
        for (auto num1 : nums1) {
            for (auto num2 : nums2) {
                res ^= (num1 ^ num2);
            }
        }
        return res;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int xorSum = 0;
        for (int i = 0; i < n1; ++i) {
            for (int j = 0; j < n2; ++j) {
                xorSum ^= nums1[i] ^ nums2[j];
            }
        }
        return xorSum;
    }
    int xorAllNumsOpt(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int xorSum = 0;
        for (int i = 0; i < n1; ++i) {
            xorSum ^= nums1[i];
        }
        for (int j = 0; j < n2; ++j) {
            xorSum ^= nums2[j];
        }
        return xorSum;
    }
    int xorAllNumsOpt2(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int xorSum = 0;
        for (int i = 0; i < n1; ++i) {
            xorSum ^= nums1[i];
        }
        for (int j = 0; j < n2; ++j) {
            xorSum ^= nums2[j];
        }
        return xorSum;
    }
    int xorAllNumsOpt3(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int xorSum = 0;
        for (int i = 0; i < n1; ++i) {
            xorSum ^= nums1[i];
        }
        for (int j = 0; j < n2; ++j) {
            xorSum ^= nums2[j];
        }
        return xorSum;
    }
    int xorAllNumsOpt4(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        int xorSum = 0;
        for (int i = 0; i < n1; ++i) {
            xorSum ^= nums1[i];
        }
        for (int j = 0;
