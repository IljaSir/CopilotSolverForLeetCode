Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (nums.size() > 1) {
            vector<int> newNums;
            for (int i = 0; i < nums.size() - 1; i++) {
                newNums.push_back((nums[i] + nums[i + 1]) % 10);
            }
            nums = newNums;
        }
        return nums[0];

=======

        while (nums.size() > 1) {
            vector<int> newNums;
            for (int i = 0; i < nums.size() - 1; i++)
                newNums.push_back((nums[i] + nums[i + 1]) % 10);
            nums = newNums;
        }
        return nums[0];

=======

        int n = nums.size();
        while (n > 1) {
            vector<int> newNums(n - 1);
            for (int i = 0; i < n - 1; i++) {
                newNums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums = newNums;
            n = nums.size();
        }
        return nums[0];

=======

        int n = nums.size();
        while (n > 1) {
            vector<int> newNums(n - 1);
            for (int i = 0; i < n - 1; i++) {
                newNums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums = newNums;
            n--;
        }
        return nums[0];

=======

        while(nums.size() > 1) {
            vector<int> newNums(nums.size() - 1);
            for(int i = 0; i < nums.size() - 1; i++) {
                newNums[i] = (nums[i] + nums[i + 1]) % 10;
            }
            nums = newNums;
        }
        return nums[0];

=======

        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> newNums(n - 1);
        for (int i = 0; i < n - 1; i++) {
            newNums[i] = (nums[i] + nums[i + 1]) % 10;
        }
        return triangularSum(newNums);

=======

        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> newNums(n - 1, 0);
        for (int i = 0; i < n - 1; i++) {
            newNums[i] = (nums[i] + nums[i + 1]) % 10;
        }
        return triangularSum(newNums);

=======

        int n = nums.size();
        if (n == 1) return nums[0];
        vector<int> newNums(n-1);
        for (int i = 0; i < n-1; ++i) {
            newNums[i] = (nums[i] + nums[i+1]) % 10;
        }
        return triangularSum(newNums);
