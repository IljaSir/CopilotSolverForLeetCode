Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> graph(n, vector<int>(n, 0));
        vector<int> degree(n, 0);
        for (auto& road : roads) {
            graph[road[0]][road[1]] = 1;
            graph[road[1]][road[0]] = 1;
            degree[road[0]]++;
            degree[road[1]]++;
        }
        int maxRank = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                maxRank = max(maxRank, degree[i] + degree[j] - graph[i][j]);
            }
        }
        return maxRank;

=======

        vector<vector<int>> graph(n, vector<int>(n, 0));
        for (auto& road : roads) {
            graph[road[0]][road[1]]++;
            graph[road[1]][road[0]]++;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int count = graph[i][j];
                for (int k = 0; k < n; ++k) {
                    count += graph[i][k] > 0;
                    count += graph[j][k] > 0;
                }
                ans = max(ans, count);
            }
        }
        return ans;

=======

        vector<vector<int>> matrix(n, vector<int>(n, 0));
        vector<int> degree(n, 0);
        for (auto& road : roads) {
            matrix[road[0]][road[1]] = 1;
            matrix[road[1]][road[0]] = 1;
            ++degree[road[0]];
            ++degree[road[1]];
        }
        int maxRank = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int rank = degree[i] + degree[j];
                if (matrix[i][j]) {
                    --rank;
                }
                maxRank = max(maxRank, rank);
            }
        }
        return maxRank;

=======

        vector<int> degree(n, 0);
        vector<vector<bool>> connected(n, vector<bool>(n, false));
        for (auto& road : roads) {
            int u = road[0], v = road[1];
            degree[u]++;
            degree[v]++;
            connected[u][v] = true;
            connected[v][u] = true;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int cur = degree[i] + degree[j];
                if (connected[i][j]) cur--;
                res = max(res, cur);
            }
        }
        return res;

=======

        vector<int> rank(n, 0);
        vector<vector<int>> connected(n, vector<int>(n, 0));
        for (auto& road : roads) {
            rank[road[0]]++;
            rank[road[1]]++;
            connected[road[0]][road[1]] = 1;
            connected[road[1]][road[0]] = 1;
        }
        int result = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int temp = rank[i] + rank[j];
                if (connected[i][j] == 1) {
                    temp--;
                }
                result = max(result, temp);
            }
        }
        return result;

=======

        vector<int> in(n, 0);
        vector<vector<bool>> adj(n, vector<bool>(n, false));
        for (auto r : roads) {
            in[r[0]]++;
            in[r[1]]++;
            adj[r[0]][r[1]] = true;
            adj[r[1]][r[0]] = true;
        }
        int maxRank = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int rank = in[i] + in[j];
                if (adj[i][j]) rank--;
                maxRank = max(maxRank, rank);
            }
        }
        return maxRank;

=======

        vector<int> in(n, 0);
        vector<vector<int>> graph(n, vector<int>(n, 0));
        for (auto& r : roads) {
            graph[r[0]][r[1]] = 1;
            graph[r[1]][r[0]] = 1;
            in[r[0]]++;
            in[r[1]]++;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                res = max(res, in[i] + in[j] - graph[i][j]);
            }
        }
        return res;

=======

        vector<int> adj[n];
        int deg[n];
        memset(deg, 0, sizeof(deg));
        for (auto road : roads) {
            int a = road[0], b = road[1];
            deg[a]++;
            deg[b]++;
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                res = max(res, deg[i] + deg[j] - (find(adj[i].begin(), adj[i].end(), j) != adj[i].end()));
            }
        }
        return res;

=======

        int max = 0;
        int count = 0;
        int count2 = 0;
        int count3 = 0;
        int count4 = 0;
        int count5 = 0;
        int count6 = 0;
        int count7 = 0;
        int count8 = 0;
        int count9 = 0;
        int count10 = 0;
        int count11 = 0;
        int count12 = 0;
        int count13 = 0;
        int count14 = 0;
        int count15 = 0;
        int count16 = 0;
        int count17 = 0;
        int count18 = 0;
        int count19 = 0;
        int count20 = 0;
        int count21 = 0;
        int count22 = 0;
        int count23 = 0;
        int count24 = 0;
        int count25 = 0;
        int count26 = 0;
        int count27 = 0;
        int count28 = 0;
        int count29 = 0;
        int count30 = 0;
        int count31 = 0;
        int count32 = 0;
        int count33 = 0;
        int count34 = 0;
        int count35 = 0;
        int count36 = 0;
        int count37 = 0;
        int count38 = 0;
        int count39 = 0;
        int count40 = 0;
        int count41 = 0;
        int count42 = 0;
        int count43 = 0;
        int count44 = 0;
        int count45 = 0;
        int count46 = 0;
        int count47 = 0;
        int count48 = 0;
        int count49 = 0;
        int count50 = 0;
        int count51 = 0;
        int count52 = 0;
        int count53 = 0;
        int count54 = 0;
        int count55 = 0;
        int count56 = 0;
        int count57 = 0;
        int count58 = 0;
        int count59 = 0;
        int count60 = 0;
        int count61 = 0;
        int count62 =
