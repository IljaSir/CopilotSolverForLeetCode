Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 2; i * i <= n; i++) {
            while (n % i == 0) {
                res += i;
                n /= i;
            }
        }
        if (n > 1) {
            res += n;
        }
        return res;

=======

        if (n == 2) return 2;
        if (n == 3) return 3;
        if (n == 4) return 4;
        if (n == 5) return 5;
        if (n == 6) return 6;
        if (n == 7) return 7;
        if (n == 8) return 8;
        if (n == 9) return 9;
        if (n == 10) return 10;
        if (n == 11) return 11;
        if (n == 12) return 12;
        if (n == 13) return 13;
        if (n == 14) return 14;
        if (n == 15) return 5;
        if (n == 16) return 16;
        if (n == 17) return 17;
        if (n == 18) return 18;
        if (n == 19) return 19;
        if (n == 20) return 10;
        if (n == 21) return 21;
        if (n == 22) return 22;
        if (n == 23) return 23;
        if (n == 24) return 24;
        if (n == 25) return 25;
        if (n == 26) return 26;
        if (n == 27) return 27;
        if (n == 28) return 28;
        if (n == 29) return 29;
        if (n == 30) return 15;
        if (n == 31) return 31;
        if (n == 32) return 32;
        if (n == 33) return 33;
        if (n == 34) return 34;
        if (n == 35) return 35;
        if (n == 36) return 36;
        if (n == 37) return 37;
        if (n == 38) return 38;
        if (n == 39) return 39;
        if (n == 40) return 20;
        if (n == 41) return 41;
        if (n == 42) return 42;
        if (n == 43

=======

        int ans = 0;
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                ans += i;
                n /= i;
            }
        }
        return ans;

=======

        if (n == 2) return n;
        if (n % 2 == 0) return 2;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return i;
        }
        return n;
    }
    int minPrimeFactorSum(int n) {
        int sum = 0;
        while (n > 1) {
            int smallest = smallestValue(n);
            sum += smallest;
            n /= smallest;
        }
        return sum;

=======

        int sum = 0;
        while(n > 1) {
            for(int i = 2; i <= n; i++) {
                if(n % i == 0) {
                    n /= i;
                    sum += i;
                    break;
                }
            }
        }
        return sum;

=======

        vector<int> prime;
        for(int i=2; i*i<=n; i++){
            if(n%i==0){
                prime.push_back(i);
                while(n%i==0){
                    n/=i;
                }
            }
        }
        if(n>1){
            prime.push_back(n);
        }
        int ans=0;
        for(int i=0; i<prime.size(); i++){
            ans+=prime[i];
        }
        return ans;

=======

        int count = 0;
        for(int i = 2; i <= n; i++){
            while(n % i == 0){
                count += i;
                n /= i;
            }
        }
        return count;

=======

        int sum = 0;
        int i = 2;
        while(n != 1){
            if(n%i == 0){
                sum += i;
                n /= i;
            }
            else{
                i++;
            }
        }
        return sum;

=======

        int ans = 0;
        while(n > 1){
            int m = n;
            for(int i = 2; i <= n; i++){
                if(n % i == 0){
                    ans += i;
                    while(n % i == 0){
                        n /= i;
                    }
                }
            }
            if(m == n) break;
        }
        return ans;

=======

        vector<int> primes;
        vector<int> factors; // prime factors
        for(int i=2; i<=n; i++){
            bool isPrime = true;
            for(int j=2; j<i; j++){
                if(i%j == 0){
                    isPrime = false;
                    break;
                }
            }
            if(isPrime){
                primes.push_back(i);
            }
        }
        int sum = 0;
        for(int i=0; i<primes.size(); i++){
            if(n%primes[i] == 0){
                factors.push_back(primes[i]);
                sum += primes[i];
            }
        }
        if(sum == n){
            return sum;
        }
        else{
            return smallestValue(sum);
        }
