Synthesizing 10/10 solutions

=======

        int n = boxes.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (boxes[j] == '1') {
                    ans[i] += abs(i - j);
                }
            }
        }
        return ans;

=======

        vector<int> ans;
        int n = boxes.size();
        for (int i = 0; i < n; i++) {
            int op = 0;
            for (int j = 0; j < n; j++) {
                if (boxes[j] == '1') {
                    op += abs(i - j);
                }
            }
            ans.push_back(op);
        }
        return ans;

=======

        int n = boxes.length();
        vector<int> res(n, 0);
        for (int i = 0; i < n; i++) {
            if (boxes[i] == '1') {
                for (int j = 0; j < n; j++) {
                    res[j] += abs(i - j);
                }
            }
        }
        return res;

=======

        int n = boxes.size();
        vector<int> ans(n, 0);
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (boxes[i] == '1') {
                right++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (boxes[i] == '1') {
                right--;
            }
            ans[i] = left + right;
            if (boxes[i] == '1') {
                left++;
            }
        }
        return ans;

=======

        int n = boxes.length();
        vector<int> res(n, 0);
        for (int i = 0, cnt = 0, ops = 0; i < n; i++) {
            res[i] += ops;
            cnt += boxes[i] - '0';
            ops += cnt;
        }
        for (int i = n - 1, cnt = 0, ops = 0; i >= 0; i--) {
            res[i] += ops;
            cnt += boxes[i] - '0';
            ops += cnt;
        }
        return res;

=======

        int n = boxes.size();
        vector<int> left(n, 0), right(n, 0);
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                left[i] = left[i - 1];
            }
            if (boxes[i] == '1') {
                cnt++;
                left[i] += cnt;
            }
        }
        cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1) {
                right[i] = right[i + 1];
            }
            if (boxes[i] == '1') {
                cnt++;
                right[i] += cnt;
            }
        }
        for (int i = 0; i < n; i++) {
            left[i] += right[i];
        }
        return left;

=======

        int n = boxes.size();
        vector<int> ans(n, 0);
        int count = 0;
        int dist = 0;
        for (int i = 0; i < n; i++) {
            ans[i] += dist;
            count += boxes[i] - '0';
            dist += count;
        }
        count = 0;
        dist = 0;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] += dist;
            count += boxes[i] - '0';
            dist += count;
        }
        return ans;

=======

        int n = boxes.length();
        vector<int> ans(n);
        int sum = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            ans[0] += sum;
            cnt += boxes[i] - '0';
            sum += cnt;
        }
        sum = 0;
        cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            ans[i] += sum;
            cnt += boxes[i] - '0';
            sum += cnt;
        }
        return ans;

=======

        vector<int> res(boxes.size());
        int n = boxes.size();
        int left = 0;
        int right = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (boxes[i] == '1') {
                right += i;
                cnt += 1;
            }
        }
        res[0] = right;
        for (int i = 1; i < n; ++i) {
            if (boxes[i - 1] == '1') {
                cnt -= 1;
                left += i - 1;
            }
            res[i] = left + right - cnt * i;
        }
        return res;

=======

        vector<int> ret(boxes.size(), 0);
        int count = 0, index = 0;
        for (int i = 0; i < boxes.size(); i++) {
            if (boxes[i] == '1') {
                ret[0] += index;
                count++;
            }
            index++;
        }
        for (int i = 1; i < boxes.size(); i++) {
            if (boxes[i - 1] == '1') {
                count--;
            }
            ret[i] = ret[i - 1] + count - (boxes.size() - i - count);
        }
        return ret;
