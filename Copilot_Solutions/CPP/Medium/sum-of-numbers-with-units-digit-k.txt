Synthesizing 10/10 solutions

=======

        if (num == 0) return 0;
        if (num < k) return -1;
        if (num % k == 0) return num / k;
        return num / k + 1;

=======

        if (num == 0) return 0;
        int res = 0;
        while (num > 0) {
            if (num % 10 < k) {
                res += k - num % 10;
                num = num / 10 + 1;
            } else if (num % 10 > k) {
                res += num % 10 - k;
                num = num / 10;
            } else {
                num = num / 10;
            }
        }
        return res;

=======

        if (k == 0) {
            return num == 0 ? 1 : -1;
        }
        if (num == 0) {
            return 0;
        }
        int d = num % 10;
        if (d == k) {
            return minimumNumbers(num / 10, k);
        }
        if (d < k) {
            return 1 + minimumNumbers(num + 10 - d, k);
        }
        return 1 + minimumNumbers(num - d, k);

=======

        if (num == 0) return 0;
        if (k == 0) return -1;
        int res = num / k;
        if (num % k != 0) res++;
        return res;

=======

        if (num == 0) return 0;
        if (num < k) return -1;
        if (num % 10 == k) return 1;
        int ans = 0;
        while (num > 0) {
            if (num % 10 == k) {
                num = num / 10;
            } else {
                num = num / 10 + 1;
                ans++;
            }
        }
        return ans;

=======

        if (k == 0) {
            return num == 0 ? 1 : -1;
        }
        if (num == 0) {
            return 0;
        }
        int numDigits = 0;
        int numCopy = num;
        while (numCopy > 0) {
            numCopy /= 10;
            numDigits++;
        }
        if (numDigits == 1) {
            return num == k ? 1 : -1;
        }
        int maxSum = 0;
        for (int i = 0; i < numDigits; i++) {
            maxSum = maxSum * 10 + 9;
        }
        // cout << numDigits << " " << maxSum << endl;
        int minNum = maxSum - num;
        int minNumDigits = 0;
        int minNumCopy = minNum;
        while (minNumCopy > 0) {
            minNumCopy /= 10;
            minNumDigits++;
        }
        // cout << minNum << " " << minNumDigits << endl;
        if (minNumDigits == numDigits) {
            return minNum % 10 == k ? 1 : -1;
        }
        int minNumUnitsDigit = minNum % 10;
        if (minNumUnitsDigit == k) {
            return numDigits - minNumDigits + 1;
        } else if (minNumUnitsDigit > k) {
            return numDigits - minNumDigits;
        } else {
            return numDigits - minNumDigits + 1;
        }
    }
    int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    int sumOfNumbersWithUnitsDigitK(int num, int k) {
        int minNum = minimumNumbers(num, k);
        if (minNum < 0) {
            return -1;
        }
        int sum = 0;
        for (int i = 0; i < minNum; i++) {
            sum += k;
        }
        return sumOfDigits(sum);

=======

        if (num == 0) return 0;
        if (num < k) return -1;
        int result = 0;
        while (num > 0) {
            int n = num % 10;
            if (n >= k) {
                result += 10 - n;
                num += 10 - n;
            } else {
                result += k - n;
                num += k - n;
            }
            num /= 10;
        }
        return result;
    }
    int sumOfDigits(vector<int>& A) {
        int min = A[0];
        for (int i = 1; i < A.size(); i++) {
            if (A[i] < min) min = A[i];
        }
        return minimumNumbers(min, 9) % 2 == 0 ? 1 : 0;

=======

        if (k == 0) {
            if (num == 0) {
                return 0;
            }
            return -1;
        }
        int ans = 0;
        while (num) {
            ans += num / 10 + (num % 10 >= k);
            num /= 10;
        }
        return ans;

=======

        int ans = 0;
        while (num > 0) {
            if (num >= k) {
                num -= k;
                ans++;
            } else {
                if (num + 10 - k <= 9) {
                    num = 0;
                    ans++;
                } else {
                    num = 10 - num;
                    ans += 2;
                }
            }
        }
        return ans;
    }
    int sumOfDigits(vector<int>& A) {
        int min_val = INT_MAX;
        for (int i = 0; i < A.size(); i++) {
            min_val = min(min_val, A[i]);
        }
        return minimumNumbers(min_val, 1);

=======

        int ret = 0;
        for (int i = 0; i < 10; i++) {
            int d = k - i;
            if (d < 0) d += 10;
            if (num < d) continue;
            int m = (num - d) / 10;
            if (m * 10 + d == num) {
                ret = m + 1;
                break;
            }
        }
        return ret;
    }
    int sumOfDigits(int num) {
        int ret = 0;
        while (num) {
            ret += num % 10;
            num /= 10;
        }
        return ret % 2;
