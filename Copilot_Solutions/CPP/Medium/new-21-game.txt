Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (k == 0 || n >= k + maxPts) return 1.0;
        vector<double> dp(n + 1);
        dp[0] = 1.0;
        double W = 1.0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) W += dp[i];
            else W += dp[i] - dp[i - maxPts];
        }
        double ans = 0.0;
        for (int i = k; i <= n; ++i) ans += dp[i];
        return ans;

=======

        if (k == 0 || n >= k + maxPts) return 1.0;
        vector<double> dp(n + 1);
        dp[0] = 1.0;
        double W = 1.0, res = 0.0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) W += dp[i];
            else res += dp[i];
            if (i - maxPts >= 0) W -= dp[i - maxPts];
        }
        return res;

=======

        if (k == 0 || n >= k + maxPts) return 1.0;
        vector<double> dp(n + 1);
        dp[0] = 1.0;
        double W = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = W / maxPts;
            if (i < k) W += dp[i];
            if (i - maxPts >= 0) W -= dp[i - maxPts];
        }
        double res = 0.0;
        for (int i = k; i <= n; i++) res += dp[i];
        return res;

=======

        if (k == 0 || n >= k + maxPts) return 1;
        vector<double> dp(n + 1);
        dp[0] = 1;
        double W = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) W += dp[i];
            if (i - maxPts >= 0) W -= dp[i - maxPts];
        }
        return accumulate(begin(dp) + k, end(dp), 0.0);

=======

        if (k == 0 || n >= k + maxPts) return 1;
        vector<double> dp(n + 1);
        dp[0] = 1;
        double W = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = W / maxPts;
            if (i < k) W += dp[i];
            if (i - maxPts >= 0) W -= dp[i - maxPts];
        }
        return accumulate(dp.begin() + k, dp.end(), 0.0);

=======

        if (k == 0 || n >= k + maxPts) return 1.0;
        vector<double> dp(n + 1);
        dp[0] = 1.0;
        double w = 0.0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = w / maxPts;
            if (i < k) w += dp[i];
            if (i - maxPts >= 0) w -= dp[i - maxPts];
        }
        return accumulate(dp.begin() + k, dp.end(), 0.0);

=======

        if (k == 0) return 1.0;
        vector<double> dp(n + 1);
        dp[0] = 1.0;
        double sum = 1.0;
        for (int i = 1; i <= n; i++) {
            dp[i] = sum / maxPts;
            if (i < k) sum += dp[i];
            else sum += dp[i] - dp[i - k];
        }
        return accumulate(dp.begin(), dp.begin() + min(n + 1, k), 0.0);

=======

        if (k == 0) return 1;
        vector<double> dp(n + 1);
        dp[0] = 1;
        double s = 1, res = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = s / maxPts;
            if (i < k) s += dp[i];
            else res += dp[i];
            if (i - maxPts >= 0) s -= dp[i - maxPts];
        }
        return res;
