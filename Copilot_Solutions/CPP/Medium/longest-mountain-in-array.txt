Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> left(n, 0), right(n, 0);
        for (int i = 1; i < n; ++i) {
            if (arr[i] > arr[i - 1]) {
                left[i] = left[i - 1] + 1;
            }
        }
        for (int i = n - 2; i >= 0; --i) {
            if (arr[i] > arr[i + 1]) {
                right[i] = right[i + 1] + 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (left[i] && right[i]) {
                ans = max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int ans = 0;
        int n = arr.size();
        for (int i = 1; i < n - 1; i++) {
            if (arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) {
                int l = i - 1;
                int r = i + 1;
                while (l > 0 && arr[l - 1] < arr[l]) {
                    l--;
                }
                while (r < n - 1 && arr[r + 1] < arr[r]) {
                    r++;
                }
                ans = max(ans, r - l + 1);
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            if (j + 1 < n && arr[j] < arr[j + 1]) {
                while (j + 1 < n && arr[j] < arr[j + 1]) j++;
                if (j + 1 < n && arr[j] > arr[j + 1]) {
                    while (j + 1 < n && arr[j] > arr[j + 1]) j++;
                    ans = max(ans, j - i + 1);
                }
            }
            i = max(i + 1, j);
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            if (j + 1 < n && arr[j] < arr[j + 1]) {
                while (j + 1 < n && arr[j] < arr[j + 1])
                    j++;
                if (j + 1 < n && arr[j] > arr[j + 1]) {
                    while (j + 1 < n && arr[j] > arr[j + 1])
                        j++;
                    ans = max(ans, j - i + 1);
                }
            }
            i = max(j, i + 1);
        }
        return ans;

=======

        int n = arr.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > arr[i - 1]) {
                left[i] = left[i - 1] + 1;
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] > arr[i + 1]) {
                right[i] = right[i + 1] + 1;
            }
        }
        for (int i = 0; i < n; i++) {
            if (left[i] > 0 && right[i] > 0) {
                ans = max(ans, left[i] + right[i] + 1);
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            int left = i - 1;
            int right = i + 1;
            if (arr[left] < arr[i] && arr[i] > arr[right]) {
                while (left >= 0 && arr[left] < arr[left + 1]) {
                    --left;
                }
                while (right < n && arr[right] < arr[right - 1]) {
                    ++right;
                }
                ans = max(ans, right - left - 1);
            }
        }
        return ans;

=======

        int n = arr.size();
        if (n < 3) {
            return 0;
        }
        int i = 0;
        int j = 0;
        int ans = 0;
        while (i < n) {
            while (i < n - 1 && arr[i] >= arr[i + 1]) {
                i++;
            }
            j = i + 1;
            while (j < n - 1 && arr[j] < arr[j + 1]) {
                j++;
            }
            if (j == n - 1) {
                break;
            }
            int k = j + 1;
            while (k < n && arr[k] < arr[k - 1]) {
                k++;
            }
            ans = max(ans, k - i);
            i = j;
        }
        return ans;

=======

        int n = arr.size();
        if (n < 3) return 0;
        int res = 0;
        int i = 1;
        while (i < n) {
            int j = i;
            if (arr[i-1] < arr[i]) {
                while (j+1 < n && arr[j] < arr[j+1]) j++;
                if (j+1 < n && arr[j] > arr[j+1]) {
                    while (j+1 < n && arr[j] > arr[j+1]) j++;
                    res = max(res, j-i+1);
                }
            }
            i = max(j, i+1);
        }
        return res;

=======

        int n = arr.size();
        if (n < 3) {
            return 0;
        }
        int res = 0;
        int l = 0;
        int r = 1;
        while (r < n) {
            if (arr[r] > arr[r - 1]) {
                r++;
                continue;
            }
            if (arr[r] == arr[r - 1]) {
                l = r;
                r++;
                continue;
            }
            if (r - l < 2) {
                l = r;
                r++;
                continue;
            }
            int t = r;
            while (t < n && arr[t] < arr[t - 1]) {
                t++;
            }
            res = max(res, t - l);
            l = t - 1;
            r = t;
        }
        return res;

=======

        int n = arr.size();
        if(n < 3) return 0;
        int ans = 0;
        int left = 0;
        int right = 1;
        while(right < n) {
            if(arr[right] <= arr[left]) {
                left = right;
                right++;
                continue;
            }
            int j = right;
            while(j < n && arr[j] > arr[j - 1]) j++;
            if(j == n) {
                left = right;
                right++;
                continue;
            }
            int k = j;
            while(k < n && arr[k] < arr[k - 1]) k++;
            ans = max(ans, k - left);
            left = right;
            right++;
        }
        return ans;
