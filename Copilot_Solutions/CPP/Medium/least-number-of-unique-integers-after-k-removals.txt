Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        for (int i: arr) {
            m[i]++;
        }
        vector<int> v;
        for (auto p: m) {
            v.push_back(p.second);
        }
        sort(v.begin(), v.end());
        int i = 0;
        for (; i < v.size(); i++) {
            if (v[i] > k) {
                break;
            }
            k -= v[i];
        }
        return v.size() - i;

=======

        map<int, int> m;
        for (auto a: arr) m[a]++;
        vector<pair<int, int>> v;
        for (auto p: m) v.push_back(p);
        sort(v.begin(), v.end(), [](pair<int, int> a, pair<int, int> b) {return a.second < b.second;});
        int i = 0;
        while (k > 0) {
            k -= v[i].second;
            i++;
        }
        return v.size() - i + (k == 0 ? 0 : 1);

=======

        int n = arr.size();
        if (k == n) return 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto it : m) {
            v.push_back(it.second);
        }
        sort(v.begin(), v.end());
        int i = 0;
        while (k > 0) {
            k -= v[i];
            i++;
        }
        if (k == 0) return v.size() - i;
        return v.size() - i + 1;

=======

        unordered_map<int, int> m;
        for (auto &i : arr) {
            m[i]++;
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        for (auto &i : m) {
            q.push({i.second, i.first});
        }
        while (k > 0 && !q.empty()) {
            auto &i = q.top();
            if (i.first > k) {
                i.first -= k;
                k = 0;
            } else {
                k -= i.first;
                q.pop();
            }
        }
        return q.size();

=======

        unordered_map<int, int> counter;
        for (auto a: arr) {
            counter[a]++;
        }
        vector<int> counts;
        for (auto c: counter) {
            counts.push_back(c.second);
        }
        sort(counts.begin(), counts.end());
        int i = 0;
        while (i < counts.size() && k >= counts[i]) {
            k -= counts[i];
            i++;
        }
        return counts.size() - i;

=======

        unordered_map<int, int> m;
        for (int i : arr) {
            m[i]++;
        }
        vector<int> f;
        for (auto p : m) {
            f.push_back(p.second);
        }
        sort(f.begin(), f.end());
        int i = 0;
        while (i < f.size() && k >= f[i]) {
            k -= f[i++];
        }
        return f.size() - i;

=======

        map<int,int> m;
        for (auto x: arr) m[x]++;
        vector<int> v;
        for (auto x: m) v.push_back(x.second);
        sort(v.begin(), v.end());
        int i = 0;
        while (k > 0) {
            k -= v[i++];
        }
        return v.size() - i + (k == 0 ? 0 : 1);

=======

        unordered_map<int,int> m;
        for (auto n : arr) m[n]++;
        vector<int> v;
        for (auto p : m) v.push_back(p.second);
        sort(v.begin(),v.end());
        int i = 0;
        for (; i < v.size(); i++) {
            if (v[i] <= k) k -= v[i];
            else break;
        }
        return v.size() - i;

=======

        unordered_map<int,int> m;
        for (auto n : arr) {
            m[n]++;
        }
        vector<int> v;
        for (auto it = m.begin(); it != m.end(); ++it) {
            v.push_back(it->second);
        }
        sort(v.begin(), v.end());
        int res = v.size();
        for (auto n : v) {
            if (k >= n) {
                k -= n;
                res--;
            } else {
                break;
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (int i=0; i<arr.size(); ++i) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto p : m) {
            v.push_back(p.second);
        }
        sort(v.begin(), v.end());
        int i=0;
        while (i<v.size() && k>=v[i]) {
            k -= v[i++];
        }
        return v.size()-i;
