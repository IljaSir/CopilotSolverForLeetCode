Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int x = 0;
        for (int i = 0; i < n; i++) {
            x ^= nums[i];
        }
        int mask = x & (-x);
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] & mask) {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        return {a, b};

=======

        int x = 0;
        for (int i = 0; i < nums.size(); i++) {
            x ^= nums[i];
        }
        int lowbit = x & (-x);
        int a = 0, b = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] & lowbit) {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        return {a, b};

=======

        int n = nums.size();
        int x = 0;
        for (int i = 0; i < n; i++) {
            x ^= nums[i];
        }
        int y = x & (-x);
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] & y) {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        return {a, b};

=======

        int xorSum = 0;
        for (int num : nums) {
            xorSum ^= num;
        }
        int bit = 1;
        while ((xorSum & bit) == 0) {
            bit <<= 1;
        }
        vector<int> ans(2, 0);
        for (int num : nums) {
            if ((num & bit) == 0) {
                ans[0] ^= num;
            } else {
                ans[1] ^= num;
            }
        }
        return ans;

=======

        int x = 0;
        for (int n : nums) {
            x ^= n;
        }
        x = x & (-x);
        vector<int> res(2);
        for (int n : nums) {
            if (n & x) {
                res[0] ^= n;
            } else {
                res[1] ^= n;
            }
        }
        return res;

=======

        int n = nums.size();
        int xorNums = 0;
        for (int i = 0; i < n; i++) {
            xorNums ^= nums[i];
        }
        int rightOne = xorNums & (~xorNums + 1);
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] & rightOne) {
                a ^= nums[i];
            } else {
                b ^= nums[i];
            }
        }
        return vector<int>{a, b};

=======

        int xorResult = 0;
        for (int num : nums) {
            xorResult ^= num;
        }
        int lastBit = xorResult - (xorResult & (xorResult - 1));
        int num1 = 0, num2 = 0;
        for (int num : nums) {
            if (num & lastBit) {
                num1 ^= num;
            } else {
                num2 ^= num;
            }
        }
        return {num1, num2};

=======

        int n = nums.size();
        int a = 0;
        for(int i = 0; i < n; i++)
            a ^= nums[i];
        int b = a & (-a);
        int c = 0;
        int d = 0;
        for(int i = 0; i < n; i++)
            if(nums[i] & b)
                c ^= nums[i];
            else
                d ^= nums[i];
        return {c, d};

=======

        int xorRes = 0;
        for (int n: nums) {
            xorRes ^= n;
        }
        int lastBit = xorRes & (-xorRes);
        int n1 = 0, n2 = 0;
        for (int n: nums) {
            if (lastBit & n) {
                n1 ^= n;
            } else {
                n2 ^= n;
            }
        }
        return {n1, n2};
