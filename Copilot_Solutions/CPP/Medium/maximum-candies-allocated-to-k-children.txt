Synthesizing 10/10 solutions

=======

        long long lo = 0, hi = *max_element(candies.begin(), candies.end());
        while (lo < hi) {
            long long mid = lo + (hi - lo + 1) / 2;
            long long cnt = 0;
            for (auto c : candies) {
                cnt += (c + mid - 1) / mid;
            }
            if (cnt <= k) {
                lo = mid;
            } else {
                hi = mid - 1;
            }
        }
        return lo;

=======

        sort(candies.begin(), candies.end());
        int n = candies.size();
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += candies[i];
        }
        long long ans = 0;
        long long x = sum / k;
        for (int i = 0; i < n; i++) {
            if (candies[i] <= x) {
                ans += candies[i];
                k--;
            } else {
                break;
            }
        }
        ans += (k * x);
        return ans;

=======

        int n = candies.size();
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += candies[i];
        }
        long long l = 0, r = sum;
        while (l < r) {
            long long mid = l + (r - l) / 2;
            if (check(candies, mid, k)) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l - 1;
    }
    bool check(vector<int>& candies, long long mid, long long k) {
        int n = candies.size();
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += min((long long)candies[i], mid);
        }
        return sum <= k;

=======

        int n = candies.size();
        int l = 0, r = 1e7;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            long long sum = 0;
            for (int i = 0; i < n; i++) {
                sum += min(mid, candies[i]);
            }
            if (sum > k) {
                r = mid - 1;
            } else {
                l = mid;
            }
        }
        return l;

=======

        int n = candies.size();
        long long sum = accumulate(candies.begin(), candies.end(), 0LL);
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            long long cnt = min(k / n, (long long) candies[i]);
            ans += cnt;
            k -= cnt;
        }
        ans += k / n;
        return ans;

=======

        int n = candies.size();
        int lo = 1, hi = 1e9;
        while (lo < hi) {
            int mid = (lo + hi + 1) >> 1;
            long long cnt = 0;
            for (int i = 0; i < n; ++i) {
                cnt += min((long long)mid, candies[i]);
            }
            if (cnt > k) {
                hi = mid - 1;
            } else {
                lo = mid;
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += min((long long)lo, candies[i]);
        }
        return ans;

=======

        long long l = 0, r = 1e12, m, ans = 0;
        while (l <= r) {
            m = l + (r - l) / 2;
            long long sum = 0;
            for (auto &c : candies) {
                sum += min(m, (long long)c);
            }
            if (sum <= k) {
                ans = m;
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return ans;

=======

        int n = candies.size();
        int ans = 0;
        auto cmp = [](const pair<int, int>& a, const pair<int, int>& b){
            return a.first < b.first;
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);
        for (int i = 0; i < n; i++) {
            pq.push({candies[i] / (n - i), i});
        }
        while (k > 0) {
            auto [v, i] = pq.top();
            pq.pop();
            ans += v;
            k -= n - i;
            if (k > 0) {
                pq.push({candies[i] / (n - i - 1), i + 1});
            }
        }
        return ans;

=======

        int ans = 0;
        int n = candies.size();
        for (int i = 0; i < n; ++i) {
            long long t = (sqrt(1 + 8 * candies[i]) - 1) / 2;
            ans += min(t, k);
            k -= t;
            if (k <= 0) break;
        }
        return ans;

=======

        int n = candies.size();
        int m = k / n;
        int r = k % n;
        int ans = 0;
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = candies[i];
        }
        sort(a.begin(), a.end());
        for (int i = n - 1; i >= n - r; i--) {
            ans += a[i];
        }
        for (int i = 0; i < n; i++) {
            ans += a[i] * m;
        }
        return ans;
