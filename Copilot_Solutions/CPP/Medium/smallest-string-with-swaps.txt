Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> p(n);
        iota(p.begin(), p.end(), 0);
        function<int(int)> find = [&](int x) {
            return p[x] == x ? x : p[x] = find(p[x]);
        };
        for (auto& pair: pairs) {
            p[find(pair[0])] = find(pair[1]);
        }
        unordered_map<int, vector<int>> mp;
        for (int i = 0; i < n; ++i) {
            mp[find(i)].push_back(i);
        }
        for (auto& [_, idx]: mp) {
            string t;
            for (int i: idx) {
                t += s[i];
            }
            sort(t.begin(), t.end());
            sort(idx.begin(), idx.end());
            for (int i = 0; i < idx.size(); ++i) {
                s[idx[i]] = t[i];
            }
        }
        return s;

=======

        int n = s.size();
        vector<vector<int>> g(n);
        for (auto &p : pairs) {
            g[p[0]].push_back(p[1]);
            g[p[1]].push_back(p[0]);
        }
        vector<bool> vis(n, false);
        for (int i = 0; i < n; ++i) {
            if (!vis[i]) {
                vector<int> comp;
                dfs(i, vis, g, comp);
                sort(comp.begin(), comp.end());
                string t;
                for (int j : comp) {
                    t.push_back(s[j]);
                }
                sort(t.begin(), t.end());
                for (int j = 0; j < comp.size(); ++j) {
                    s[comp[j]] = t[j];
                }
            }
        }
        return s;
    }
    void dfs(int u, vector<bool> &vis, vector<vector<int>> &g, vector<int> &comp) {
        vis[u] = true;
        comp.push_back(u);
        for (int v : g[u]) {
            if (!vis[v]) {
                dfs(v, vis, g, comp);
            }
        }

=======

        int n = s.size();
        vector<int> parent(n);
        vector<int> size(n);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        for (auto& p : pairs) {
            int a = find(parent, p[0]);
            int b = find(parent, p[1]);
            if (a != b) {
                if (size[a] < size[b]) {
                    parent[a] = b;
                    size[b] += size[a];
                } else {
                    parent[b] = a;
                    size[a] += size[b];
                }
            }
        }
        unordered_map<int, vector<int>> groups;
        for (int i = 0; i < n; i++) {
            int root = find(parent, i);
            groups[root].push_back(i);
        }
        for (auto& g : groups) {
            string str;
            for (int i : g.second) {
                str += s[i];
            }
            sort(str.begin(), str.end());
            for (int i = 0; i < g.second.size(); i++) {
                s[g.second[i]] = str[i];
            }
        }
        return s;

=======

        int n = s.size();
        vector<int> parent(n);
        iota(parent.begin(), parent.end(), 0);
        for (auto& p : pairs) {
            int x = find(parent, p[0]);
            int y = find(parent, p[1]);
            parent[x] = y;
        }
        unordered_map<int, vector<int>> group;
        for (int i = 0; i < n; ++i) {
            int p = find(parent, i);
            group[p].push_back(i);
        }
        for (auto& [p, v] : group) {
            sort(v.begin(), v.end());
            vector<char> chars;
            for (int i : v) {
                chars.push_back(s[i]);
            }
            sort(chars.begin(), chars.end());
            for (int i = 0; i < v.size(); ++i) {
                s[v[i]] = chars[i];
            }
        }
        return s;

=======

        int n = s.size();
        vector<vector<int>> g(n);
        vector<int> vis(n);
        for (auto p : pairs) {
            g[p[0]].push_back(p[1]);
            g[p[1]].push_back(p[0]);
        }
        vector<vector<int>> comps;
        for (int i = 0; i < n; ++i) {
            if (!vis[i]) {
                vector<int> comp;
                dfs(g, vis, i, comp);
                sort(comp.begin(), comp.end());
                comps.push_back(comp);
            }
        }
        for (auto comp : comps) {
            string t = "";
            for (int x : comp) {
                t += s[x];
            }
            sort(t.begin(), t.end());
            for (int i = 0; i < comp.size(); ++i) {
                s[comp[i]] = t[i];
            }
        }
        return s;
    }
    void dfs(vector<vector<int>>& g, vector<int>& vis, int u, vector<int>& comp) {
        if (vis[u]) {
            return;
        }
        vis[u] = 1;
        comp.push_back(u);
        for (int v : g[u]) {
            dfs(g, vis, v, comp);
        }

=======

        vector<int> root(s.size(), 0);
        for (int i = 0; i < s.size(); ++i) {
            root[i] = i;
        }
        for (auto& p : pairs) {
            int x = find(root, p[0]);
            int y = find(root, p[1]);
            root[x] = y;
        }
        unordered_map<int, priority_queue<char, vector<char>, greater<char>>> mp;
        for (int i = 0; i < s.size(); ++i) {
            int x = find(root, i);
            mp[x].push(s[i]);
        }
        for (int i = 0; i < s.size(); ++i) {
            int x = find(root, i);
            s[i] = mp[x].top();
            mp[x].pop();
        }
        return s;
    }
    int find(vector<int>& root, int x) {
        if (root[x] == x) {
            return x;
        }
        return root[x] = find(root, root[x]);

=======

        int n = s.size();
        vector<int> parent(n);
        vector<int> size(n, 1);
        for (int i = 0; i < n; i++) parent[i] = i;
        for (auto& p : pairs) {
            int x = find(parent, p[0]);
            int y = find(parent, p[1]);
            if (x == y) continue;
            if (size[x] < size[y]) {
                parent[x] = y;
                size[y] += size[x];
            } else {
                parent[y] = x;
                size[x] += size[y];
            }
        }
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            m[p].push_back(i);
        }
        for (auto& [p, v] : m) {
            vector<char> t;
            for (auto& i : v) t.push_back(s[i]);
            sort(t.begin(), t.end());
            sort(v.begin(), v.end());
            for (int i = 0; i < v.size(); i++) s[v[i]] = t[i];
        }
        return s;

=======

        int n = s.length();
        vector<int> parent(n);
        iota(parent.begin(), parent.end(), 0);
        for (auto p : pairs) {
            int a = find(parent, p[0]);
            int b = find(parent, p[1]);
            parent[a] = b;
        }
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            int p = find(parent, i);
            m[p].push_back(i);
        }
        for (auto it : m) {
            auto it2 = it.second;
            string sub;
            for (int i : it2) {
                sub.push_back(s[i]);
            }
            sort(sub.begin(), sub.end());
            int i = 0;
            for (int j : it2) {
                s[j] = sub[i++];
            }
        }
        return s;
    }
    int find(vector<int> &parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = s.size();
        vector<int> parent(n, -1);
        for (auto& p: pairs) {
            int p1 = find(parent, p[0]);
            int p2 = find(parent, p[1]);
            if (p1 != p2) {
                parent[p2] = p1;
            }
        }
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < n; ++i) {
            int p = find(parent, i);
            m[p].push_back(i);
        }
        for (auto& [p, v]: m) {
            sort(v.begin(), v.end(), [&](int i, int j) { return s[i] < s[j]; });
        }
        string res(n, ' ');
        for (int i = 0; i < n; ++i) {
            int p = find(parent, i);
            res[i] = s[m[p].back()];
            m[p].pop_back();
        }
        return res;

=======

        vector<int> parent(s.size());
        iota(parent.begin(), parent.end(), 0);
        for (auto& pair : pairs) {
            int p0 = find(parent, pair[0]);
            int p1 = find(parent, pair[1]);
            parent[p0] = p1;
        }
        unordered_map<int, vector<int>> groups;
        for (int i = 0; i < s.size(); ++i) {
            groups[find(parent, i)].push_back(i);
        }
        for (auto& group : groups) {
            vector<char> chars;
            for (auto& i : group.second) {
                chars.push_back(s[i]);
            }
            sort(chars.begin(), chars.end());
            int j = 0;
            for (auto& i : group.second) {
                s[i] = chars[j++];
            }
        }
        return s;
    }
    
    int find(vector<int>& parent, int i) {
        while (parent[i] != i) {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
