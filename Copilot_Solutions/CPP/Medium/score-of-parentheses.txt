Synthesizing 10/10 solutions

=======

        stack<int> st;
        st.push(0);
        for (char c : s) {
            if (c == '(') {
                st.push(0);
            } else {
                int v = st.top();
                st.pop();
                int w = st.top();
                st.pop();
                st.push(w + max(2 * v, 1));
            }
        }
        return st.top();

=======

        int score = 0;
        int depth = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                depth++;
            } else {
                depth--;
                if (s[i-1] == '(') {
                    score += 1 << depth;
                }
            }
        }
        return score;

=======

        int score = 0;
        int level = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                level++;
            } else {
                level--;
                if (s[i-1] == '(') {
                    score += 1 << level;
                }
            }
        }
        return score;

=======

        int ans = 0;
        int bal = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                bal++;
            } else {
                bal--;
                if (s[i - 1] == '(') {
                    ans += 1 << bal;
                }
            }
        }
        return ans;

=======

        int ans = 0;
        int bal = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                ++bal;
            } else {
                --bal;
                if (s[i - 1] == '(') {
                    ans += 1 << bal;
                }
            }
        }
        return ans;

=======

        int n = s.size();
        int res = 0, bal = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                ++bal;
            } else {
                --bal;
                if (s[i - 1] == '(') {
                    res += 1 << bal;
                }
            }
        }
        return res;

=======

        int res = 0;
        int n = s.size();
        int depth = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                depth++;
            } else {
                depth--;
                if (s[i-1] == '(') {
                    res += 1 << depth;
                }
            }
        }
        return res;

=======

        int n = s.size(), score = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                if (s[i + 1] == ')') {
                    score += 1;
                    ++i;
                } else {
                    int j = i;
                    int count = 0;
                    while (j < n) {
                        if (s[j] == '(') {
                            ++count;
                        } else {
                            --count;
                        }
                        if (count == 0) {
                            score += 2 * scoreOfParentheses(s.substr(i + 1, j - i - 1));
                            i = j;
                            break;
                        }
                        ++j;
                    }
                }
            }
        }
        return score;

=======

        int n = s.size();
        vector<int> dp(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                dp[i + 1] = 0;
            } else {
                int j = i - 1;
                while (j >= 0 && s[j] == ')') {
                    j -= 2;
                }
                if (j >= 0) {
                    dp[i + 1] = dp[j] + dp[i + 1 - j] * 2;
                }
            }
        }
        return dp[n];

=======

        int n = s.size();
        int ans = 0;
        int bal = 0;
        for(int i = 0; i < n; ++i){
            if(s[i] == '(') bal++;
            else bal--;
            if(s[i] == '(' && s[i+1] == ')') ans += 1 << bal;
        }
        return ans;
