Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        long long sum = 0;
        int res = 1;
        for (int j = 1; j < n; ++j) {
            sum += (long long)(nums[j] - nums[j - 1]) * (j - i);
            while (sum > k) {
                sum -= nums[j] - nums[i];
                ++i;
            }
            res = max(res, j - i + 1);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = 0, r = 0;
        long long sum = 0;
        int ans = 1;
        while (r < n) {
            sum += nums[r];
            while (sum + k < (long long)(r - l + 1) * nums[r]) {
                sum -= nums[l];
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int ans = 1, n = nums.size();
        long long sum = 0;
        for (int i = 0, j = 0; i < n; ++i) {
            sum += nums[i];
            while (sum + k < (long long)nums[i] * (i - j + 1)) {
                sum -= nums[j++];
            }
            ans = max(ans, i - j + 1);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = 0, n = nums.size();
        long sum = 0;
        int res = 1;
        while (j < n) {
            sum += nums[j];
            while (sum + k < (long)(j - i + 1) * nums[j]) {
                sum -= nums[i++];
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int res = 1;
        long long total = 0;
        int j = 0;
        for (int i = 1; i < nums.size(); i++) {
            total += (long long)(nums[i] - nums[i - 1]) * (i - j);
            while (total > k) {
                total -= nums[i] - nums[j];
                j++;
            }
            res = max(res, i - j + 1);
        }
        return res;

=======

        sort(begin(nums), end(nums));
        int n = nums.size();
        long long total = 0;
        int ans = 1;
        for (int i = 0, j = 0; i < n; ++i) {
            total += nums[i];
            while (j <= i && nums[i] * (i - j + 1) - total > k) {
                total -= nums[j++];
            }
            ans = max(ans, i - j + 1);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = 1;
        long long sum = 0;
        for(int i = 0, j = 0; i < n; i++){
            sum += nums[i];
            while(sum + k < (long long)nums[i] * (i - j + 1)) sum -= nums[j++];
            ans = max(ans, i - j + 1);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = 0;
        int r = 0;
        int64_t sum = 0;
        int ans = 0;
        while (r < n) {
            sum += nums[r];
            while (sum + k < (int64_t)nums[r] * (r - l + 1)) {
                sum -= nums[l];
                ++l;
            }
            ans = max(ans, r - l + 1);
            ++r;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        long n = nums.size();
        long res = 1;
        long sum = 0;
        long i = 0;
        for (int j = 1; j < n; j++) {
            sum += (long)(j-i) * (nums[j] - nums[j-1]);
            while (sum > k) {
                sum -= nums[j] - nums[i];
                i++;
            }
            res = max(res, j-i+1);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int maxFreq = 0;
        int i = 0;
        long long sum = 0;
        for(int j = 0; j < n; j++){
            sum += nums[j];
            while(sum + k < (long long)(j-i+1)*nums[j]){
                sum -= nums[i];
                i++;
            }
            maxFreq = max(maxFreq, j-i+1);
        }
        return maxFreq;
