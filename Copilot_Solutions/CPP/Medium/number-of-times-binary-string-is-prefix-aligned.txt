Synthesizing 10/10 solutions

=======

        int n = flips.size();
        int ans = 0;
        int mx = 0;
        for (int i = 0; i < n; i++) {
            mx = max(mx, flips[i]);
            if (mx == i + 1) {
                ans++;
            }
        }
        return ans;

=======

        int n = flips.size();
        int res = 0;
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            mx = max(mx, flips[i]);
            if (mx == i + 1) {
                ++res;
            }
        }
        return res;

=======

        int ans = 0;
        int max = 0;
        for (int i = 0; i < flips.size(); ++i) {
            if (flips[i] > max) {
                max = flips[i];
            }
            if (max == i + 1) {
                ++ans;
            }
        }
        return ans;

=======

        int ans = 0;
        int max = 0;
        for (int i = 0; i < flips.size(); ++i) {
            if (flips[i] > max) max = flips[i];
            if (max == i + 1) ++ans;
        }
        return ans;

=======

        int count = 0;
        int max = 0;
        for(int i = 0; i < flips.size(); i++) {
            if(flips[i] > max) {
                max = flips[i];
            }
            if(i == max - 1) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        int max = 0;
        for (int i = 0; i < flips.size(); i++) {
            max = std::max(max, flips[i]);
            if (max == i + 1) {
                res++;
            }
        }
        return res;

=======

        int n = flips.size();
        int ans = 0;
        int maxi = 0;
        for (int i = 0; i < n; i++) {
            maxi = max(maxi, flips[i]);
            if (maxi == i + 1) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        int max = flips[0];
        for(int i = 0; i < flips.size(); i++) {
            if(flips[i] > max) {
                max = flips[i];
            }
            if(max == i + 1) {
                count++;
            }
        }
        return count;

=======

        int n = flips.size();
        vector<int> v(n, 0);
        int ans = 0;
        int sum = 0;
        for(int i = 0; i < n; i++){
            v[flips[i] - 1] = 1;
            sum++;
            while(sum == n || (sum < n && v[sum] == 1)){
                sum++;
            }
            if(sum == n){
                ans++;
            }
        }
        return ans;

=======

        int n = flips.size();
        vector<int> v(n+1,0);
        int ans = 0, sum = 0;
        for(int i=0;i<n;i++){
            v[flips[i]] = 1;
            sum += flips[i];
            int s = 0;
            for(int j=1;j<=flips[i];j++){
                s += j;
            }
            if(sum == s){
                ans++;
            }
        }
        return ans;
