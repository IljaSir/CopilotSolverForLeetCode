Synthesizing 10/10 solutions

=======

        int n = citations.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (citations[mid] >= n - mid) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return n - l;

=======

        int n = citations.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (citations[m] < n - m) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return n - l;

=======

        int n = citations.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (citations[m] < n - m) {
                l = m + 1;
            } else if (citations[m] > n - m) {
                r = m - 1;
            } else {
                return n - m;
            }
        }
        return n - l;

=======

        int n = citations.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int m = (l + r) / 2;
            if (citations[m] >= n - m) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return n - l;

=======

        int n = citations.size();
        if (n == 0) return 0;
        if (n == 1) {
            if (citations[0] == 0) return 0;
            else return 1;
        }
        int l = 0, r = n - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (citations[m] == n - m) return n - m;
            else if (citations[m] < n - m) l = m + 1;
            else r = m - 1;
        }
        return n - l;

=======

        int left = 0, right = citations.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int h = citations.size() - mid;
            if (citations[mid] == h) {
                return h;
            } else if (citations[mid] > h) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return citations.size() - left;

=======

        int n = citations.size();
        int l = 0, r = n;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (citations[mid] >= n - mid) r = mid;
            else l = mid + 1;
        }
        return n - l;

=======

        int n = citations.size();
        int l = 0, r = n-1;
        while (l <= r) {
            int m = l + (r-l)/2;
            if (citations[m] < n-m) {
                l = m+1;
            } else {
                r = m-1;
            }
        }
        return n-l;

=======

        int n = citations.size();
        int l = 0, r = n - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (n - mid <= citations[mid]) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return n - l;

=======

        int n = citations.size();
        int lo = 0;
        int hi = n-1;
        while(lo<=hi){
            int mid = (lo+hi)/2;
            if(citations[mid] == n-mid)
                return n-mid;
            if(citations[mid] < n-mid)
                lo = mid+1;
            else
                hi = mid-1;
        }
        return n-lo;
