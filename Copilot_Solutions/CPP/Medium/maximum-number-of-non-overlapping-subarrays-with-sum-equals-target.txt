Synthesizing 10/10 solutions

=======

        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0;
        int res = 0;
        int last = -1;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (mp.find(sum - target) != mp.end()) {
                if (mp[sum - target] >= last) {
                    res++;
                    last = i;
                }
            }
            mp[sum] = i;
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (m.count(sum - target)) {
                if (m[sum - target] != -1) {
                    dp[i] = dp[m[sum - target]] + 1;
                } else {
                    dp[i] = 1;
                }
            }
            if (i > 0) {
                dp[i] = max(dp[i], dp[i - 1]);
            }
            m[sum] = i;
        }
        return dp[n - 1];

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = -1;
        int sum = 0, res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (mp.count(sum - target)) {
                res++;
                mp.clear();
                mp[0] = i;
            }
            else
                mp[sum] = i;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int sum = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (m.count(sum - target)) {
                if (m[sum - target] < i - 1) {
                    ++res;
                    m.clear();
                }
            }
            m[sum] = i;
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (m.count(sum - target)) {
                int idx = m[sum - target];
                if (idx == -1 || i - idx > 1) {
                    ans++;
                    m.clear();
                    m[0] = i;
                }
            } else {
                m[sum] = i;
            }
        }
        return ans;

=======

        int n = nums.size();
        unordered_map<int, int> m;
        m[0] = -1;
        int sum = 0;
        int res = 0;
        int last = -1;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (m.find(sum - target) != m.end() && m[sum - target] >= last) {
                ++res;
                last = i;
            }
            m[sum] = i;
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n+1);
        unordered_map<int, int> m;
        m[0] = 0;
        int sum = 0;
        for (int i = 1; i <= n; ++i) {
            sum += nums[i-1];
            dp[i] = dp[i-1];
            if (m.count(sum-target)) {
                dp[i] = max(dp[i], dp[m[sum-target]]+1);
            }
            m[sum] = i;
        }
        return dp[n];

=======

        int n = nums.size();
        vector<int> dp(n + 1, 0);
        unordered_map<int, int> m;
        m[0] = 0;
        int sum = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            dp[i + 1] = dp[i];
            if (m.count(sum - target)) {
                dp[i + 1] = max(dp[i + 1], dp[m[sum - target]] + 1);
            }
            m[sum] = i + 1;
        }
        return dp[n];

=======

        int n = nums.size();
        vector<int> dp(n+1, 0);
        unordered_map<int, int> mp;
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum == target) {
                dp[i+1] = max(dp[i+1], dp[0]+1);
            }
            if (mp.find(sum-target) != mp.end()) {
                dp[i+1] = max(dp[i+1], dp[mp[sum-target]]+1);
            }
            dp[i+1] = max(dp[i+1], dp[i]);
            mp[sum] = i+1;
            ans = max(ans, dp[i+1]);
        }
        return ans;

=======

        unordered_map<int, int> h;
        h[0] = 0;
        int sum = 0;
        int n = nums.size();
        vector<int> dp(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            sum += nums[i - 1];
            dp[i] = dp[i - 1];
            if (h.find(sum - target) != h.end()) {
                dp[i] = max(dp[i], dp[h[sum - target]] + 1);
            }
            h[sum] = i;
        }
        return dp[n];
