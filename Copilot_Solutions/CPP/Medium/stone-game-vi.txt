Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({aliceValues[i] + bobValues[i], i});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a += aliceValues[v[i].second];
            } else {
                b += bobValues[v[i].second];
            }
        }
        if (a > b) return 1;
        if (a < b) return -1;
        return 0;

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({aliceValues[i] + bobValues[i], i});
        }
        sort(v.rbegin(), v.rend());
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += aliceValues[v[i].second];
            } else {
                bob += bobValues[v[i].second];
            }
        }
        if (alice > bob) {
            return 1;
        } else if (alice < bob) {
            return -1;
        } else {
            return 0;
        }

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({aliceValues[i] + bobValues[i], i});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a += aliceValues[v[i].second];
            } else {
                b += bobValues[v[i].second];
            }
        }
        if (a > b) {
            return 1;
        } else if (a < b) {
            return -1;
        } else {
            return 0;
        }

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; ++i) {
            v.push_back({aliceValues[i] + bobValues[i], i});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            if (i & 1) {
                b += bobValues[v[i].second];
            } else {
                a += aliceValues[v[i].second];
            }
        }
        if (a > b) return 1;
        if (a < b) return -1;
        return 0;

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v(n);
        for (int i = 0; i < n; ++i) {
            v[i] = {aliceValues[i] + bobValues[i], i};
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        int alice = 0, bob = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                alice += aliceValues[v[i].second];
            } else {
                bob += bobValues[v[i].second];
            }
        }
        if (alice > bob) {
            return 1;
        } else if (alice < bob) {
            return -1;
        } else {
            return 0;
        }

=======

        int n = aliceValues.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back(make_pair(aliceValues[i] + bobValues[i], i));
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        int alice = 0, bob = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                alice += aliceValues[v[i].second];
            } else {
                bob += bobValues[v[i].second];
            }
        }
        if (alice > bob) {
            return 1;
        } else if (alice < bob) {
            return -1;
        } else {
            return 0;
        }

=======

        int n = aliceValues.size();
        vector<pair<int, int>> vals;
        for (int i = 0; i < n; ++i) {
            vals.push_back({aliceValues[i] + bobValues[i], i});
        }
        sort(vals.rbegin(), vals.rend());
        int alice = 0, bob = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                alice += aliceValues[vals[i].second];
            } else {
                bob += bobValues[vals[i].second];
            }
        }
        if (alice == bob) {
            return 0;
        }
        return alice > bob ? 1 : -1;
