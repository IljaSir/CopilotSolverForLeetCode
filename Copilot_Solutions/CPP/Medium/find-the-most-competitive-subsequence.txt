Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && stk.back() > nums[i] && stk.size() + n - i > k) {
                stk.pop_back();
            }
            if (stk.size() < k) stk.push_back(nums[i]);
        }
        return stk;

=======

        int n = nums.size();
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && nums[i] < stk.back() && stk.size() + n - i > k) {
                stk.pop_back();
            }
            if (stk.size() < k) {
                stk.push_back(nums[i]);
            }
        }
        return stk;

=======

        int n = nums.size();
        vector<int> res;
        for (int i = 0; i < n; i++) {
            while (!res.empty() && res.back() > nums[i] && res.size() + n - i > k) {
                res.pop_back();
            }
            if (res.size() < k) {
                res.push_back(nums[i]);
            }
        }
        return res;

=======

        vector<int> stack;
        for (int i = 0; i < nums.size(); i++) {
            while (!stack.empty() && nums[i] < stack.back() && stack.size() + nums.size() - i > k) {
                stack.pop_back();
            }
            if (stack.size() < k) {
                stack.push_back(nums[i]);
            }
        }
        return stack;

=======

        int n = nums.size();
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            while (!ans.empty() && ans.back() > nums[i] && ans.size() + n - i > k) {
                ans.pop_back();
            }
            if (ans.size() < k) {
                ans.push_back(nums[i]);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> stk;
        for (int i = 0; i < n; ++i) {
            while (stk.size() > 0 && stk.back() > nums[i] && stk.size() + n - i > k) {
                stk.pop_back();
            }
            if (stk.size() < k) {
                stk.push_back(nums[i]);
            }
        }
        return stk;

=======

        vector<int> ans;
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            while (!ans.empty() && ans.back() > nums[i] && ans.size() - 1 + n - i >= k) {
                ans.pop_back();
            }
            if (ans.size() < k) {
                ans.push_back(nums[i]);
            }
        }
        return ans;

=======

        vector<int> res;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            while (res.size() && res.back() > nums[i] && res.size() + n - i > k) {
                res.pop_back();
            }
            if (res.size() < k) {
                res.push_back(nums[i]);
            }
        }
        return res;

=======

        vector<int> ans;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            while (ans.size() && ans.back() > nums[i] && ans.size() + n - i - 1 >= k) {
                ans.pop_back();
            }
            if (ans.size() < k) {
                ans.push_back(nums[i]);
            }
        }
        return ans;
