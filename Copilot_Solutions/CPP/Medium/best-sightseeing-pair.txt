Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = 0, mx = values[0] + 0;
        for (int j = 1; j < values.size(); ++j) {
            res = max(res, mx + values[j] - j);
            mx = max(mx, values[j] + j);
        }
        return res;

=======

        int res = 0, mx = values[0];
        for (int i = 1; i < values.size(); ++i) {
            res = max(res, mx + values[i] - i);
            mx = max(mx, values[i] + i);
        }
        return res;

=======

        int n = values.size();
        int ans = 0;
        int mx = values[0];
        for (int i = 1; i < n; ++i) {
            ans = max(ans, mx + values[i] - i);
            mx = max(mx, values[i] + i);
        }
        return ans;

=======

        int n = values.size();
        int ans = 0;
        int mx = values[0] + 0;
        for (int i = 1; i < n; i++) {
            ans = max(ans, mx + values[i] - i);
            mx = max(mx, values[i] + i);
        }
        return ans;

=======

        int n = values.size();
        int mx = values[0] + 0;
        int res = 0;
        for (int j = 1; j < n; ++j) {
            res = max(res, mx + values[j] - j);
            mx = max(mx, values[j] + j);
        }
        return res;

=======

        int maxScore = 0, maxVal = values[0] + 0;
        for (int i = 1; i < values.size(); ++i) {
            maxScore = max(maxScore, maxVal + values[i] - i);
            maxVal = max(maxVal, values[i] + i);
        }
        return maxScore;

=======

        int n = values.size();
        int ans = 0;
        int max_value = values[0] + 0;
        for (int j = 1; j < n; j++) {
            ans = max(ans, max_value + values[j] - j);
            max_value = max(max_value, values[j] + j);
        }
        return ans;

=======

        int maxScore = 0;
        int curMax = values[0] + 0;
        for(int i = 1; i < values.size(); i++) {
            maxScore = max(maxScore, curMax + values[i] - i);
            curMax = max(curMax, values[i] + i);
        }
        return maxScore;
