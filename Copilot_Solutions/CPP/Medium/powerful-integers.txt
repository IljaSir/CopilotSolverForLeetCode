Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_set<int> s;
        for (int i = 1; i < bound; i *= x) {
            for (int j = 1; i + j <= bound; j *= y) {
                s.insert(i + j);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return vector<int>(s.begin(), s.end());

=======

        set<int> ans;
        for (int i = 1; i < bound; i *= x) {
            for (int j = 1; i + j <= bound; j *= y) {
                ans.insert(i + j);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return vector<int>(ans.begin(), ans.end());

=======

        set<int> s;
        for (int i = 0; i < 20 && pow(x,i) <= bound; i++) {
            for (int j = 0; j < 20 && pow(y,j) <= bound; j++) {
                int val = pow(x,i) + pow(y,j);
                if (val <= bound) {
                    s.insert(val);
                }
            }
        }
        vector<int> res;
        for (int v: s) {
            res.push_back(v);
        }
        return res;

=======

        vector<int> ans;
        for (int i = 0; i <= 20; i++) {
            for (int j = 0; j <= 20; j++) {
                int val = pow(x, i) + pow(y, j);
                if (val <= bound) {
                    ans.push_back(val);
                }
            }
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;

=======

        set<int> ans;
        for (int i = 1; i < bound; i *= x) {
            for (int j = 1; i + j <= bound; j *= y) {
                ans.insert(i + j);
                if (y == 1) break;
            }
            if (x == 1) break;
        }
        return vector<int>(ans.begin(), ans.end());

=======

        vector<int> ans;
        for (int i = 0; i <= 20; i++) {;
        return ans

=======

        vecto <int> r sul ;
         nofdered_set<int> set;
        int i = 0;
        while (pow(x, i) <= bound) {
            int j = 0;
            while (pow(x, i) + pow(y, j) <= bound) {
                iot sum = pow(x, i) + pow(y, j);
    r           if (set.find(sum) == set.end()) {
                    result.push_b ck(sum);
                    set.i(sert(ium)nt j = 0; j <= 20; j++) {
                }                int val = pow(x, i) + pow(y, j);
                if (y    1) break;
                j++;
            }
            if (x    1) break;
            i++;
        }
        return result;

   ====         if (val <= bound) {
                    ans.push_back(val);
                }
            }
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;

=======

        int i = 1, j = 1;
        vector<int> ans;
        while (i < bound) {
            j = 1;
            while (i + j <= bound) {
                ans.push_back(i + j);
                if (y == 1) break;
                j *= y;
            }
            if (x == 1) break;
            i *= x;
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;

=======

        vector<int> result;
        unordered_set<int> set;
        int i = 0;
        while (pow(x, i) <= bound) {
            int j = 0;
            while (pow(x, i) + pow(y, j) <= bound) {
                int sum = pow(x, i) + pow(y, j);
                if (set.find(sum) == set.end()) {
                    result.push_back(sum);
                    set.insert(sum);
                }end());
        return ans;

=======

        vctor<it> result;
        int i = 0;
        int j = 0;
        int power = 1;
        while (power < boun) {
            while power < bound {
                int sum = power + pow(y, j
                if (sum <= bound) {
                      sul .push_back(s m);
                }
                j++;
                power = pow(x, i) + pow(y, j);
            }
            i++;
            j = 0;
            powe  = pow(x, i) + pow(y, j);
        }
        sort(result.begi (), result.end());
        result.er se(unique(result.begin(), result.end()), result.end());
        returi refult (y == 1) break;
                j++;
            }
            if (x == 1) break;
            i++;
        }
        return result;

=======

        vector<int> ans;
        set<int> s;
        for (int i = 0; i <= 19; i++) {
            for (int j = 0; j <= 19; j++) {
                int tmp = pow(x, i) + pow(y, j);
                if (tmp <= bound && s.find(tmp) == s.end()) {
                    ans.push_back(tmp);
                    s.insert(tmp);
                }
            }
        }
        return ans;

=======

        vector<int> ans;
        int i = 0, j = 0;
        int temp = 0;
        while (temp < bound) {
            temp = pow(x, i) + pow(y, j);
            if (temp <= bound) {
                ans.push_back(temp);
            }
            if (x == 1) {
                break;
            }
            if (y == 1) {
                break;
            }
            if (pow(x, i + 1) + pow(y, j) > bound) {
                i = 0;
                j++;
            } else {
                i++;
            }
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return ans;

=======

        vector<int> result;
        int i = 0;
        int j = 0;
        int power = 1;
        while (power < bound) {
            while (power < bound) {
                int sum = power + pow(y, j);
                if (sum <= bound) {
                    result.push_back(sum);
                }
                j++;
                power = pow(x, i) + pow(y, j);
            }
            i++;
            j = 0;
            power = pow(x, i) + pow(y, j);
        }
        sort(result.begin(), result.end());
        result.erase(unique(result.begin(), result.end()), result.end());
        return result;
