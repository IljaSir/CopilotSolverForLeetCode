Synthesizing 9/10 solutions

=======

        int r = 0, m = 0;
        for (int i = 0; i < nums.size(); i++) {
            int c = 0;
            while (nums[i]) {
                if (nums[i] & 1) {
                    r++;
                }
                nums[i] >>= 1;
                c++;
            }
            m = max(m, c);
        }
        return r + m - 1;

=======

        int ans = 0;
        int maxbit = 0;
        for (int num : nums) {
            int bit = 0;
            while (num > 0) {
                if (num & 1) ans++;
                num >>= 1;
                bit++;
            }
            maxbit = max(maxbit, bit);
        }
        return ans + maxbit - 1;

=======

        int ans = 0;
        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i];
            int count = 0;
            while (n > 0) {
                if (n % 2 == 1) {
                    ans++;
                }
                n = n / 2;
                count++;
            }
            if (count > max) {
                max = count;
            }
        }
        return ans + max - 1;

=======

        int n = nums.size();
        int ans = 0;
        int maxBit = 0;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int bit = 0;
            while (num) {
                if (num & 1) ans++;
                num >>= 1;
                bit++;
            }
            maxBit = max(maxBit, bit);
        }
        return ans + maxBit - 1;

=======

        int res = 0;
        int maxBit = 0;
        for (auto n : nums) {
            int bit = 0;
            while (n) {
                res += (n & 1);
                n >>= 1;
                ++bit;
            }
            maxBit = max(maxBit, bit);
        }
        return res + maxBit - 1;

=======

        int ans = 0, max = 0;
        for (int num : nums) {
            int cnt = 0;
            while (num) {
                if (num & 1) {
                    ans++;
                }
                num >>= 1;
                cnt++;
            }
            max = std::max(max, cnt);
        }
        return ans + max - 1;

=======

        int ans = 0, maxVal = 0;
        for (int n: nums) {
            int bit = 0;
            while (n > 0) {
                if (n & 1) ans++;
                n >>= 1;
                bit++;
            }
            maxVal = max(maxVal, bit);
        }
        return ans + maxVal - 1;

=======

        int ans = 0;
        int maxv = 0;
        for (int num : nums) {
            int zeros = 0;
            while (num) {
                if (num & 1) ans++;
                num >>= 1;
                zeros++;
            }
            maxv = max(maxv, zeros);
        }
        return ans + maxv - 1;

=======

        int max = 0, count = 0;
        for(int i = 0; i < nums.size(); i++){
            int j = 0;
            while(nums[i] > 0){
                if(nums[i] & 1)
                    count++;
                nums[i] >>= 1;
                j++;
            }
            if(j > max)
                max = j;
        }
        return count + max - 1;
