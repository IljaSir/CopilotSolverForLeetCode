Synthesizing 10/10 solutions

=======

        int x1 = max(ax1, bx1);
        int y1 = max(ay1, by1);
        int x2 = min(ax2, bx2);
        int y2 = min(ay2, by2);
        
        int area = (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1);
        if (x2 > x1 && y2 > y1) {
            area -= (x2 - x1) * (y2 - y1);
        }
        return area;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1) {
            overlap = (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1));
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax1 < bx2 && ax2 > bx1 && ay1 < by2 && ay2 > by1) {
            int x1 = max(ax1, bx1);
            int x2 = min(ax2, bx2);
            int y1 = max(ay1, by1);
            int y2 = min(ay2, by2);
            overlap = (x2 - x1) * (y2 - y1);
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int overlap = 0;
        if (ax2 > bx1 && bx2 > ax1 && ay2 > by1 && by2 > ay1) {
            int left = max(ax1, bx1);
            int right = min(ax2, bx2);
            int top = min(ay2, by2);
            int bottom = max(ay1, by1);
            overlap = (right - left) * (top - bottom);
        }
        return area1 + area2 - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        int area3 = 0;
        if (ax2 > bx1 && bx2 > ax1 && ay2 > by1 && by2 > ay1) {
            int x1 = max(ax1, bx1);
            int y1 = max(ay1, by1);
            int x2 = min(ax2, bx2);
            int y2 = min(ay2, by2);
            area3 = (x2 - x1) * (y2 - y1);
        }
        return area1 + area2 - area3;

=======

        int area = (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1);
        if (ax2 <= bx1 || ay2 <= by1 || ax1 >= bx2 || ay1 >= by2) {
            return area;
        }
        return area - (min(ax2, bx2) - max(ax1, bx1)) * (min(ay2, by2) - max(ay1, by1));

=======

        int a = (ax2 - ax1) * (ay2 - ay1);
        int b = (bx2 - bx1) * (by2 - by1);
        if (ax1 >= bx2 || ax2 <= bx1 || ay1 >= by2 || ay2 <= by1) {
            return a + b;
        }
        int x1 = max(ax1, bx1);
        int x2 = min(ax2, bx2);
        int y1 = max(ay1, by1);
        int y2 = min(ay2, by2);
        int c = (x2 - x1) * (y2 - y1);
        return a + b - c;

=======

        int a = (ax2 - ax1) * (ay2 - ay1);
        int b = (bx2 - bx1) * (by2 - by1);
        int x = min(ax2, bx2) - max(ax1, bx1);
        int y = min(ay2, by2) - max(ay1, by1);
        if (x < 0 || y < 0) {
            return a + b;
        }
        return a + b - x * y;

=======

        int areaA = (ax2 - ax1) * (ay2 - ay1);
        int areaB = (bx2 - bx1) * (by2 - by1);
        int overlapX = max(0, min(ax2, bx2) - max(ax1, bx1));
        int overlapY = max(0, min(ay2, by2) - max(ay1, by1));
        int overlap = overlapX * overlapY;
        return areaA + areaB - overlap;

=======

        int area1 = (ax2 - ax1) * (ay2 - ay1);
        int area2 = (bx2 - bx1) * (by2 - by1);
        
        int area3 = 0;
        if (ax1 < bx2 && bx1 < ax2 && ay1 < by2 && by1 < ay2) {
            int x1 = max(ax1, bx1);
            int y1 = max(ay1, by1);
            int x2 = min(ax2, bx2);
            int y2 = min(ay2, by2);
            area3 = (x2 - x1) * (y2 - y1);
        }
        
        return area1 + area2 - area3;
