Synthesizing 9/10 solutions (Duplicates hidden)

=======

        vector<int> res;
        for (int i = 1, j = n; i <= j; ) {
            if (k > 1) {
                res.push_back(k-- % 2 ? i++ : j--);
            } else {
                res.push_back(i++);
            }
        }
        return res;

=======

        vector<int> res;
        int left = 1, right = n;
        while (left <= right) {
            if (k > 1) {
                res.push_back(k-- % 2 ? left++ : right--);
            } else {
                res.push_back(left++);
            }
        }
        return res;

=======

        vector<int> res;
        int l = 1, r = n;
        while (l <= r) {
            if (k > 1) {
                if (k % 2 == 0) {
                    res.push_back(r--);
                } else {
                    res.push_back(l++);
                }
                k--;
            } else {
                res.push_back(l++);
            }
        }
        return res;

=======

        vector<int> ans(n);
        int i = 0;
        int l = 1, r = n;
        while (l < r) {
            if (k > 1) {
                ans[i++] = (k-- % 2) ? l++ : r--;
            } else {
                ans[i++] = l++;
            }
        }
        ans[i] = l;
        return ans;

=======

        vector<int> ans(n);
        int i = 0, j = n - 1;
        for (int p = 1; p <= k + 1; p++) {
            ans[i++] = p % 2 ? j-- : j++;
        }
        for (int p = k + 2; p <= n; p++) {
            ans[i++] = p;
        }
        return ans;

=======

        vector<int> result(n, 0);
        int i = 0, j = n - 1;
        while (i <= j) {
            if (k > 1) {
                result[i++] = k-- % 2 ? n - k : k + 1;
            } else {
                result[i++] = k-- % 2 ? j-- : i++;
            }
        }
        return result;

=======

        vector<int> res(n);
        int i = 0, j = n - 1;
        int cnt = 1;
        while (i <= j) {
            if (k > 1) {
                res[i++] = cnt++;
                res[j--] = cnt + k - 2;
                cnt += k - 1;
                k -= 2;
            } else {
                res[i++] = cnt++;
            }
        }
        return res;

=======

        vector<int> ans(n);
        int i = 0, j = n - 1, t = 0;
        while (i <= j) {
            ans[t++] = (k % 2) ? (i++ + 1) : (j-- + 1);
            if (k > 1) --k;
        }
        return ans;
