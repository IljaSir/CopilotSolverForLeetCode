Synthesizing 10/10 solutions

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int k = upper_bound(nums.begin(), nums.end(), nums[i] + nums[j] - 1) - nums.begin();
                ans += k - j - 1;
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int k = j + 1;
                int sum = nums[i] + nums[j];
                while (k < n && nums[k] < sum) ++k;
                ans += k - j - 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 0; i < n - 2; ++i) {
            int k = i + 2;
            for (int j = i + 1; j < n - 1 && nums[i] != 0; ++j) {
                while (k < n && nums[i] + nums[j] > nums[k]) ++k;
                res += k - j - 1;
            }
        }
        return res;

=======

        if (nums.size() < 3) return 0;
        sort(nums.begin(), nums.end());
        int count = 0;
        for (int i = 0; i < nums.size() - 2; i++) {
            for (int j = i + 1; j < nums.size() - 1; j++) {
                int k = j + 1;
                while (k < nums.size() && nums[i] + nums[j] > nums[k]) {
                    k++;
                }
                count += k - j - 1;
            }
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = 0;
        for (int i = n - 1; i >= 2; --i) {
            int l = 0, r = i - 1;
            while (l < r) {
                if (nums[l] + nums[r] > nums[i]) {
                    ans += r - l;
                    --r;
                } else {
                    ++l;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = n - 1; i >= 2; i--) {
            int l = 0, r = i - 1;
            while (l < r) {
                if (nums[l] + nums[r] > nums[i]) {
                    res += r - l;
                    r--;
                } else {
                    l++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < n - 2; ++i) {
            int k = i + 2;
            for (int j = i + 1; j < n - 1 && nums[i] != 0; ++j) {
                while (k < n && nums[i] + nums[j] > nums[k]) {
                    ++k;
                }
                ans += k - j - 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int count = 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n - 2; i++) {
            for(int j = i + 1; j < n - 1; j++) {
                int k = j + 1;
                while(k < n && nums[i] + nums[j] > nums[k]) {
                    k++;
                }
                count += k - j - 1;
            }
        }
        return count;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int res = 0;
        for(int i = n - 1; i >= 2; i--){
            int l = 0, r = i - 1;
            while(l < r){
                if(nums[l] + nums[r] > nums[i]){
                    res += r - l;
                    r--;
                }else{
                    l++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < n; ++i) {
            int k = i + 2;
            for(int j = i + 1; j < n; ++j) {
                while(k < n && nums[i] + nums[j] > nums[k]) {
                    ++k;
                }
                res += k - j - 1;
            }
        }
        return res;
