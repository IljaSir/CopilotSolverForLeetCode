Synthesizing 10/10 solutions

=======

        unordered_set<string> supplySet;
        for (auto &s : supplies) {
            supplySet.insert(s);
        }
        vector<string> result;
        for (int i = 0; i < recipes.size(); ++i) {
            if (canMake(ingredients[i], supplySet)) {
                result.push_back(recipes[i]);
            }
        }
        return result;

=======

        unordered_map<string, int> supply;
        for (auto& s : supplies) {
            supply[s]++;
        }
        vector<string> result;
        for (int i = 0; i < recipes.size(); ++i) {
            if (canMake(recipes[i], ingredients[i], supply)) {
                result.push_back(recipes[i]);
            }
        }
        return result;

=======

        vector<string> res;
        unordered_map<string, int> supply;
        for (string& s : supplies) {
            supply[s]++;
        }
        for (int i = 0; i < recipes.size(); ++i) {
            if (canMake(supply, ingredients[i])) {
                res.push_back(recipes[i]);
            }
        }
        return res;
    }
    
    bool canMake(unordered_map<string, int>& supply, vector<string>& ingredient) {
        for (string& s : ingredient) {
            if (supply.find(s) == supply.end()) {
                return false;
            }
            supply[s]--;
        }
        return true;

=======

        vector<string> ans;
        int n = recipes.size();
        unordered_map<string, vector<int>> mp;
        for (int i = 0; i < n; ++i) {
            for (string& s : ingredients[i]) mp[s].push_back(i);
        }
        vector<bool> vis(n, false);
        for (string& s : supplies) {
            for (int i : mp[s]) {
                if (vis[i]) continue;
                vis[i] = true;
                ans.push_back(recipes[i]);
            }
        }
        return ans;

=======

        unordered_map<string, vector<string>> recipeMap;
        unordered_set<string> supplySet;
        for (auto& recipe : recipes) {
            recipeMap[recipe] = {};
        }
        for (auto& ingredient : ingredients) {
            for (auto& ingredientItem : ingredient) {
                if (recipeMap.find(ingredientItem) != recipeMap.end()) {
                    recipeMap[ingredientItem].push_back(ingredient[0]);
                }
            }
        }
        for (auto& supply : supplies) {
            supplySet.insert(supply);
        }
        vector<string> result;
        for (auto& recipe : recipes) {
            if (canCreate(recipe, recipeMap, supplySet)) {
                result.push_back(recipe);
            }
        }
        return result;
    }
    
    bool canCreate(string& recipe, unordered_map<string, vector<string>>& recipeMap, unordered_set<string>& supplySet) {
        if (supplySet.find(recipe) != supplySet.end()) {
            return true;
        }
        if (recipeMap[recipe].empty()) {
            return false;
        }
        for (auto& ingredient : recipeMap[recipe]) {
            if (!canCreate(ingredient, recipeMap, supplySet)) {
                return false;
            }
        }
        supplySet.insert(recipe);
        return true;

=======

        unordered_map<string, vector<string>> recipeMap;
        unordered_map<string, int> supplyMap;
        for (int i = 0; i < recipes.size(); i++) {
            for (string& ingredient : ingredients[i]) {
                recipeMap[ingredient].push_back(recipes[i]);
            }
        }
        for (string& supply : supplies) {
            supplyMap[supply]++;
        }
        vector<string> res;
        for (int i = 0; i < recipes.size(); i++) {
            if (canMake(recipeMap, supplyMap, recipes[i])) {
                res.push_back(recipes[i]);
            }
        }
        return res;
    }
    
    bool canMake(unordered_map<string, vector<string>>& recipeMap, unordered_map<string, int>& supplyMap, string& recipe) {
        if (supplyMap.count(recipe)) {
            return true;
        }
        if (recipeMap.count(recipe)) {
            for (string& ingredient : recipeMap[recipe]) {
                if (!canMake(recipeMap, supplyMap, ingredient)) {
                    return false;
                }
            }
            supplyMap[recipe]++;
            return true;
        }
        return false;

=======

        unordered_map<string, int> m;
        for (auto& s : supplies) m[s]++;
        vector<string> res;
        for (int i = 0; i < recipes.size(); i++) {
            bool found = true;
            for (auto& s : ingredients[i]) {
                if (m[s] == 0) {
                    found = false;
                    break;
                }
            }
            if (found) res.push_back(recipes[i]);
        }
        return res;

=======

        unordered_map<string, unordered_set<string>> ingre;
        unordered_map<string, int> supply;
        for (auto &s : supplies) {
            supply[s]++;
        }
        for (int i = 0; i < recipes.size(); i++) {
            for (auto &s : ingredients[i]) {
                ingre[recipes[i]].insert(s);
            }
        }
        vector<string> res;
        for (auto &r : recipes) {
            if (canMake(r, ingre, supply)) {
                res.push_back(r);
            }
        }
        return res;
    }
    bool canMake(string &r, unordered_map<string, unordered_set<string>> &ingre, unordered_map<string, int> &supply) {
        for (auto &s : ingre[r]) {
            if (supply.find(s) == supply.end()) {
                if (!canMake(s, ingre, supply)) return false;
            }
        }
        return true;

=======

        unordered_map<string, vector<string>> ing2recipe; // ingredient to recipe
        unordered_map<string, int> ing2cnt; // ingredient to count
        for (int i = 0; i < recipes.size(); ++i) {
            for (auto& ing : ingredients[i]) {
                ing2recipe[ing].push_back(recipes[i]);
            }
        }
        for (auto& ing : supplies) {
            ++ing2cnt[ing];
        }
        vector<string> ret;
        for (auto& [ing, cnt] : ing2cnt) {
            for (auto& recipe : ing2recipe[ing]) {
                --ing2cnt[recipe];
            }
        }
        for (auto& [recipe, cnt] : ing2cnt) {
            if (cnt == 0) {
                ret.push_back(recipe);
            }
        }
        return ret;

=======

        int n = recipes.size();
        vector<string> ans;
        vector<vector<string>> adj(n);
        vector<int> in(n, 0);
        map<string, int> mp;
        for (int i = 0; i < n; i++) {
            mp[recipes[i]] = i;
        }
        for (int i = 0; i < n; i++) {
            for (string& s : ingredients[i]) {
                if (mp.count(s)) {
                    adj[mp[s]].push_back(recipes[i]);
                    in[i]++;
                }
            }
        }
        queue<string> q;
        for (string& s : supplies) {
            if (mp.count(s)) {
                q.push(s);
            }
        }
        while (!q.empty()) {
            string s = q.front();
            q.pop();
            ans.push_back(s);
            for (string& t : adj[mp[s]]) {
                if (--in[mp[t]] == 0) {
                    q.push(t);
                }
            }
        }
        return ans;
