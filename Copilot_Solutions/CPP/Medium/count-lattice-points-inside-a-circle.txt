Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = circles.size();
        vector<int> x(n), y(n), r(n);
        for (int i = 0; i < n; i++) {
            x[i] = circles[i][0];
            y[i] = circles[i][1];
            r[i] = circles[i][2];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int d2 = (x[i] - x[j]) * (x[i] - x[j]) + (y[i] - y[j]) * (y[i] - y[j]);
                int r2 = (r[i] + r[j]) * (r[i] + r[j]);
                if (d2 <= r2) {
                    if (d2 + r[j] * r[j] <= r[i] * r[i]) {
                        ans += 4 * r[i];
                    } else if (d2 + r[i] * r[i] <= r[j] * r[j]) {
                        ans += 4 * r[j];
                    } else {
                        ans += 4 * (r[i] + r[j]);
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            int r2 = r[i] * r[i];
            int cnt = 0;
            for (int j = 0; j <= r[i]; j++) {
                int k = sqrt(r2 - j * j);
                cnt += 4 * k;
            }
            ans += cnt;
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < circles.size(); ++i) {
            int x = circles[i][0], y = circles[i][1], r = circles[i][2];
            for (int j = 0; j < circles.size(); ++j) {
                if (i == j) continue;
                int x1 = circles[j][0], y1 = circles[j][1], r1 = circles[j][2];
                int dx = x1 - x, dy = y1 - y, dr = r1 - r;
                if (dx * dx + dy * dy <= dr * dr) {
                    ans += 4 * r + 1;
                    break;
                }
            }
        }
        return ans;

=======

        int n = circles.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = circles[i][0], y = circles[i][1], r = circles[i][2];
            ans += 4 * r + 1;
            for (int j = 0; j < i; j++) {
                int x1 = circles[j][0], y1 = circles[j][1], r1 = circles[j][2];
                int dis = (x - x1) * (x - x1) + (y - y1) * (y - y1);
                if (dis >= (r + r1) * (r + r1)) continue;
                if (dis <= (r - r1) * (r - r1)) {
                    ans -= 4 * r1 + 1;
                    continue;
                }
                int d = sqrt(dis);
                int x2 = x1 + (x - x1) * r1 / d;
                int y2 = y1 + (y - y1) * r1 / d;
                int x3 = x + (x1 - x) * r / d;
                int y3 = y + (y1 - y) * r / d;
                int x4 = x2 + (x3 - x2) * (r - r1) / (r + r1);
                int y4 = y2 + (y3 - y2) * (r - r1) / (r + r1);
                ans -= (r1 * r1 + r1 * (r - r1) - (x2 - x4) * (x2 - x4) - (y2 - y4) * (y2 - y4)) / 2;
                ans -= (r * r + r * (r1 - r) - (x3 - x4) * (x3 - x4) - (y3 - y4) * (y3 - y4)) / 2;
            }
        }
        return ans;

=======

        int res = 0;
        for (auto c : circles) {
            int x = c[0], y = c[1], r = c[2];
            for (int i = x - r; i <= x + r; i++) {
                for (int j = y - r; j <= y + r; j++) {
                    if (i * i + j * j <= r * r) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int res = 0;
        int n = circles.size();
        for (int i = 0; i < n; i++) {
            int x1 = circles[i][0];
            int y1 = circles[i][1];
            int r1 = circles[i][2];
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int x2 = circles[j][0];
                int y2 = circles[j][1];
                int r2 = circles[j][2];
                int dx = x1 - x2;
                int dy = y1 - y2;
                int d2 = dx * dx + dy * dy;
                int r12 = r1 * r1;
                int r22 = r2 * r2;
                if (d2 <= r12 && d2 <= r22) {
                    res++;
                    break;
                }
            }
        }
        return res;

=======

        vector<vector<int>> grid(101, vector<int>(101, 0));
        for (int i = 0; i < circles.size(); ++i) {
            int x = circles[i][0];
            int y = circles[i][1];
            int r = circles[i][2];
            for (int j = x - r; j <= x + r; ++j) {
                for (int k = y - r; k <= y + r; ++k) {
                    if (j < 0 || j > 100 || k < 0 || k > 100) continue;
                    if ((j - x) * (j - x) + (k - y) * (k - y) <= r * r) {
                        grid[j][k] = 1;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[i].size(); ++j) {
                ans += grid[i][j];
            }
        }
        return ans;

=======

        int ans = 0;
        for (auto& c : circles) {
            int x = c[0], y = c[1], r = c[2];
            for (int i = x-r; i <= x+r; ++i) {
                int dx = i-x, dy = sqrt(r*r-dx*dx);
                ans += 2*dy+1;
            }
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < circles.size(); i++) {
            for (int j = i + 1; j < circles.size(); j++) {
                long long dx = circles[i][0] - circles[j][0];
                long long dy = circles[i][1] - circles[j][1];
                long long d2 = dx * dx + dy * dy;
                if (d2 <= 4 * circles[i][2] * circles[j][2]) {
                    ans += 2;
                }
            }
            ans += 4 * circles[i][2];
        }
        return ans;

=======

        int n = circles.size();
        int m = 100;
        vector<vector<int>> grid(m+1, vector<int>(m+1, 0));
        for (int i = 0; i < n; i++) {
            int x = circles[i][0];
            int y = circles[i][1];
            int r = circles[i][2];
            for (int j = x-r; j <= x+r; j++) {
                for (int k = y-r; k <= y+r; k++) {
                    if (j >= 0 && j <= m && k >= 0 && k <= m) {
                        if ((j-x)*(j-x) + (k-y)*(k-y) <= r*r) {
                            grid[j][k] = 1;
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                if (grid[i][j]) {
                    res++;
                }
            }
        }
        return res;
