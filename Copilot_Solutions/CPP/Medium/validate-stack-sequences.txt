Synthesizing 10/10 solutions

=======

        stack<int> st;
        int j = 0;
        for (int i = 0; i < pushed.size(); ++i) {
            st.push(pushed[i]);
            while (!st.empty() && st.top() == popped[j]) {
                st.pop();
                ++j;
            }
        }
        return st.empty();

=======

        stack<int> stk;
        int j = 0;
        for (int i = 0; i < pushed.size(); i++) {
            stk.push(pushed[i]);
            while (!stk.empty() && stk.top() == popped[j]) {
                stk.pop();
                j++;
            }
        }
        return stk.empty();

=======

        stack<int> s;
        int j = 0;
        for (int i = 0; i < pushed.size(); i++) {
            s.push(pushed[i]);
            while (!s.empty() && j < popped.size() && s.top() == popped[j]) {
                s.pop();
                j++;
            }
        }
        return j == popped.size();

=======

        stack<int> s;
        int j = 0;
        for(int i = 0; i < pushed.size(); i++) {
            s.push(pushed[i]);
            while(!s.empty() && s.top() == popped[j]) {
                s.pop();
                j++;
            }
        }
        return s.empty();

=======

        stack<int> st;
        int i = 0;
        for (int x: pushed) {
            st.push(x);
            while (!st.empty() && st.top() == popped[i]) {
                st.pop();
                i++;
            }
        }
        return st.empty();

=======

        stack<int> st;
        int n = pushed.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            if (st.empty() || st.top() != popped[j]) {
                st.push(pushed[i]);
                i++;
            }
            else {
                st.pop();
                j++;
            }
        }
        while (j < n) {
            if (st.top() != popped[j]) return false;
            st.pop();
            j++;
        }
        return true;

=======

        stack<int> st;
        int i = 0, j = 0;
        while (i < pushed.size() && j < popped.size()) {
            if (st.size() > 0 && st.top() == popped[j]) {
                st.pop();
                j++;
            } else {
                st.push(pushed[i]);
                i++;
            }
        }
        while (j < popped.size() && st.top() == popped[j]) {
            st.pop();
            j++;
        }
        return st.empty();

=======

        stack<int> s;
        int n = pushed.size();
        int i = 0, j = 0;
        while (i < n) {
            if (pushed[i] == popped[j]) {
                i++;
                j++;
            } else if (!s.empty() && s.top() == popped[j]) {
                s.pop();
                j++;
            } else {
                s.push(pushed[i]);
                i++;
            }
        }
        while (!s.empty() && j < n) {
            if (s.top() == popped[j]) {
                s.pop();
                j++;
            } else {
                return false;
            }
        }
        return true;

=======

        int i = 0, j = 0;
        stack<int> s;
        while (j < popped.size()) {
            if (i < pushed.size() && pushed[i] != popped[j]) {
                s.push(pushed[i]);
                i++;
            } else if (i < pushed.size() && pushed[i] == popped[j]) {
                i++;
                j++;
            } else if (!s.empty() && s.top() == popped[j]) {
                s.pop();
                j++;
            } else {
                return false;
            }
        }
        return true;

=======

        int n = pushed.size();
        int m = popped.size();
        if (n != m) return false;
        stack<int> stk;
        int i = 0;
        int j = 0;
        while (i < n) {
            if (pushed[i] == popped[j]) {
                i++;
                j++;
            } else {
                if (stk.empty()) {
                    stk.push(pushed[i++]);
                } else {
                    if (stk.top() == popped[j]) {
                        stk.pop();
                        j++;
                    } else {
                        stk.push(pushed[i++]);
                    }
                }
            }
        }
        while (j < m) {
            if (stk.top() != popped[j]) return false;
            stk.pop();
            j++;
        }
        return true;
