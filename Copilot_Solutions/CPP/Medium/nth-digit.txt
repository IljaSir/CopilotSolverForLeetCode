Synthesizing 10/10 solutions

=======

        long long base = 9, digits = 1;
        while (n - base * digits > 0) {
            n -= base * digits;
            base *= 10;
            digits++;
        }
        long long num = 1;
        for (int i = 1; i < digits; i++) num *= 10;
        num += (n - 1) / digits;
        string s = to_string(num);
        return s[(n - 1) % digits] - '0';

=======

        int base = 9;
        int digits = 1;
        while (n > base * digits) {
            n -= base * digits;
            base *= 10;
            digits++;
        }
        int num = 1;
        for (int i = 1; i < digits; i++) {
            num *= 10;
        }
        num += (n - 1) / digits;
        string s = to_string(num);
        return s[(n - 1) % digits] - '0';

=======

        long long base = 9, digits = 1;
        while (n > base * digits) {
            n -= base * digits;
            base *= 10;
            digits++;
        }
        int num = (n - 1) / digits + pow(10, digits - 1);
        return to_string(num)[(n - 1) % digits] - '0';

=======

        int digits = 1;
        long base = 9;
        while (n > digits * base) {
            n -= digits * base;
            digits++;
            base *= 10;
        }
        int num = 1;
        for (int i = 1; i < digits; i++) {
            num *= 10;
        }
        num += (n - 1) / digits;
        string s = to_string(num);
        return s[(n - 1) % digits] - '0';

=======

        long long start = 1;
        long long count = 9;
        int length = 1;
        while (n > length * count) {
            n -= length * count;
            length += 1;
            count *= 10;
            start *= 10;
        }
        start += (n - 1) / length;
        string s = to_string(start);
        return s[(n - 1) % length] - '0';

=======

        int base = 1, digit = 1;
        long long count = 9;
        while (n > count) {
            n -= count;
            base *= 10;
            digit += 1;
            count = base * digit * 9;
        }
        int num = base + (n - 1) / digit;
        string s = to_string(num);
        return s[(n - 1) % digit] - '0';

=======

        if (n < 10) return n;
        int i = 1;
        long long cnt = 9;
        while (n > cnt * i) {
            n -= cnt * i;
            cnt *= 10;
            ++i;
        }
        int num = cnt / 9 + (n - 1) / i;
        int pos = (n - 1) % i;
        while (i - 1 - pos) {
            num /= 10;
            --i;
        }
        return num % 10;

=======

        int i = 1;
        long long int k = 1;
        while (n > i * k * 9) {
            n -= i * k * 9;
            i++;
            k *= 10;
        }
        int t = n / i;
        int r = n % i;
        if (r == 0) {
            return (k + t - 1) % 10;
        } else {
            return to_string(k + t)[r - 1] - '0';
        }

=======

        long long num = 9;
        int len = 1;
        while (n > num * len) {
            n -= num * len;
            num *= 10;
            len++;
        }
        int i = (n - 1) / len;
        int j = (n - 1) % len;
        return to_string(num / 9 + i)[j] - '0';

=======

        long long i = 1, base = 10, offset = 0;
        while (n > i * 9 * base) {
            n -= i * 9 * base;
            i++;
            base *= 10;
            offset += 9 * base / 10;
        }
        return to_string(offset + n / i)[n % i] - '0';
