Synthesizing 10/10 solutions

=======

        int n = seats.size();
        vector<int> left(n, n);
        vector<int> right(n, n);
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) left[i] = 0;
            else if (i > 0) left[i] = left[i - 1] + 1;
        }
        for (int i = n - 1; i >= 0; --i) {
            if (seats[i] == 1) right[i] = 0;
            else if (i < n - 1) right[i] = right[i + 1] + 1;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 0) {
                ans = max(ans, min(left[i], right[i]));
            }
        }
        return ans;

=======

        int n = seats.size();
        int res = 0;
        int last = -1;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
                res = last < 0 ? i : max(res, (i - last) / 2);
                last = i;
            }
        }
        res = max(res, n - last - 1);
        return res;

=======

        int n = seats.size();
        int left = -1;
        int right = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                left = i;
            } else {
                while (right < n && seats[right] == 0 || right < i) {
                    right++;
                }
                int l = left == -1 ? n : i - left;
                int r = right == n ? n : right - i;
                ans = max(ans, min(l, r));
            }
        }
        return ans;

=======

        int maxDist = 0;
        int last = -1;
        int n = seats.size();
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                if (last == -1) {
                    maxDist = i - 0;
                } else {
                    maxDist = max(maxDist, (i - last) / 2);
                }
                last = i;
            }
        }
        maxDist = max(maxDist, n - 1 - last);
        return maxDist;

=======

        int n = seats.size();
        int max_dist = 0;
        int prev = -1;
        for (int i = 0; i < n; i++) {
            if (seats[i] == 1) {
                if (prev == -1) {
                    max_dist = max(max_dist, i);
                } else {
                    max_dist = max(max_dist, (i - prev) / 2);
                }
                prev = i;
            }
        }
        max_dist = max(max_dist, n - 1 - prev);
        return max_dist;

=======

        int n = seats.size();
        int ans = 0;
        int prev = -1;
        for(int i = 0; i < n; ++i){
            if(seats[i] == 1){
                if(prev == -1){
                    ans = i;
                }else{
                    ans = max(ans, (i - prev) / 2);
                }
                prev = i;
            }
        }
        ans = max(ans, n - 1 - prev);
        return ans;

=======

        int res = 0;
        int n = seats.size();
        int prev = -1;
        for(int i = 0; i < n; i++){
            if(seats[i] == 1){
                if(prev == -1){
                    res = i;
                }else{
                    res = max(res, (i - prev) / 2);
                }
                prev = i;
            }
        }
        return max(res, n - 1 - prev);

=======

        int n = seats.size();
        int maxDist = 0;
        int start = -1, end = -1;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
                if (start == -1) {
                    start = i;
                } else {
                    end = i;
                    maxDist = max(maxDist, (end - start) / 2);
                    start = end;
                }
            }
        }
        maxDist = max(maxDist, n - start - 1);
        maxDist = max(maxDist, start);
        return maxDist;

=======

        int maxDis = 0;
        int count = 0;
        int i = 0;
        while (i < seats.size()) {
            if (seats[i] == 0) {
                count++;
            } else {
                maxDis = max(maxDis, count);
                count = 0;
            }
            i++;
        }
        int left = 0;
        int right = seats.size() - 1;
        while (left < seats.size() && seats[left] == 0) {
            left++;
        }
        while (right >= 0 && seats[right] == 0) {
            right--;
        }
        maxDis = max(maxDis, max(left, (int)seats.size() - 1 - right));
        return (maxDis + 1) / 2;

=======

        int n = seats.size();
        int maxDistance = 1;
        int lastOne = -1;
        for(int i = 0; i < n; i++){
            if(seats[i] == 1){
                if(lastOne == -1){
                    maxDistance = i;
                }else{
                    maxDistance = max(maxDistance, (i - lastOne) / 2);
                }
                lastOne = i;
            }
        }
        return max(maxDistance, n - 1 - lastOne);
