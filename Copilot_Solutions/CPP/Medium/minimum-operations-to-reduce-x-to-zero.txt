Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum - x;
        if (target == 0) return n;
        if (target < 0) return -1;
        int left = 0, right = 0, sum1 = 0, res = -1;
        while (right < n) {
            sum1 += nums[right];
            while (sum1 > target && left <= right) {
                sum1 -= nums[left];
                left++;
            }
            if (sum1 == target) {
                res = max(res, right - left + 1);
            }
            right++;
        }
        if (res == -1) return -1;
        return n - res;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int target = sum - x;
        if (target < 0) return -1;
        if (target == 0) return n;
        int ans = INT_MAX;
        int l = 0;
        int r = 0;
        int cur = 0;
        while (r < n) {
            cur += nums[r];
            while (cur > target) {
                cur -= nums[l];
                l++;
            }
            if (cur == target) {
                ans = min(ans, n - (r - l + 1));
            }
            r++;
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int target = sum - x;
        if (target == 0) return n;
        int left = 0, right = 0, curr = 0, ans = -1;
        while (right < n) {
            curr += nums[right++];
            while (curr > target && left < right) {
                curr -= nums[left++];
            }
            if (curr == target) {
                if (ans == -1) {
                    ans = n - (right - left);
                } else {
                    ans = min(ans, n - (right - left));
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int target = sum - x;
        if (target < 0) {
            return -1;
        }
        if (target == 0) {
            return n;
        }
        int left = 0;
        int right = 0;
        int currentSum = 0;
        int maxLength = -1;
        while (right < n) {
            currentSum += nums[right];
            while (currentSum > target) {
                currentSum -= nums[left];
                left++;
            }
            if (currentSum == target) {
                maxLength = max(maxLength, right - left + 1);
            }
            right++;
        }
        return maxLength == -1 ? -1 : n - maxLength;

=======

        int n = nums.size();
        unordered_map<int, int> m;
        int ans = INT_MAX;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            m[sum] = i;
            if (sum == x) ans = min(ans, i + 1);
        }
        if (sum < x) return -1;
        sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += nums[i];
            if (m.count(x - sum)) {
                ans = min(ans, m[x - sum] + 1 + n - i - 1);
            }
            if (sum == x) ans = min(ans, n - i);
        }
        return ans == INT_MAX ? -1 : ans;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int target = sum - x;
        if (target == 0) return n;
        int i = 0, j = 0, cur = 0, res = -1;
        while (j < n) {
            cur += nums[j];
            while (cur > target) {
                cur -= nums[i];
                i++;
            }
            if (cur == target) {
                res = max(res, j - i + 1);
            }
            j++;
        }
        return res == -1 ? -1 : n - res;

=======

        int n=nums.size();
        unordered_map<int,int> mp;
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            mp[sum]=i;
        }
        if(sum==x) return n;
        if(sum<x) return -1;
        int ans=-1;
        for(int i=0;i<n;i++){
            int diff=sum-x-nums[i];
            if(diff<0) break;
            if(mp.count(diff)){
                ans=max(ans,mp[diff]-i);
            }
        }
        if(ans!=-1) ans=n-ans-1;
        return ans;

=======

        int n = nums.size();
        int i = 0, j = 0;
        int sum = 0;
        int res = INT_MAX;
        while (j < n) {
            sum += nums[j];
            while (sum > x && i <= j) {
                sum -= nums[i];
                i++;
            }
            if (sum == x) {
                res = min(res, n - (j - i + 1));
            }
            j++;
        }
        return res == INT_MAX ? -1 : res;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int target = sum - x;
        if (target == 0) return n;
        int ans = INT_MIN;
        int cur = 0;
        unordered_map<int, int> m;
        m[0] = -1;
        for (int i = 0; i < n; ++i) {
            cur += nums[i];
            m[cur] = i;
            if (m.count(cur - target)) {
                ans = max(ans, i - m[cur - target]);
            }
        }
        return ans == INT_MIN ? -1 : n - ans;

=======

        int n = nums.size();
        int sum = 0;
        int res = INT_MIN;
        int l = 0, r = 0;
        while(r < n){
            sum += nums[r];
            while(sum > x && l <= r){
                sum -= nums[l++];
            }
            if(sum == x) res = max(res, r - l + 1);
            r++;
        }
        return res == INT_MIN ? -1 : n - res;
