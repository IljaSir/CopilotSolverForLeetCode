Synthesizing 10/10 solutions

=======

        int x, y;
        if (xCenter < x1) {
            x = x1;
        } else if (xCenter > x2) {
            x = x2;
        } else {
            x = xCenter;
        }
        if (yCenter < y1) {
            y = y1;
        } else if (yCenter > y2) {
            y = y2;
        } else {
            y = yCenter;
        }
        return (xCenter - x) * (xCenter - x) + (yCenter - y) * (yCenter - y) <= radius * radius;

=======

        int x, y;
        if (xCenter < x1) x = x1;
        else if (xCenter > x2) x = x2;
        else x = xCenter;
        if (yCenter < y1) y = y1;
        else if (yCenter > y2) y = y2;
        else y = yCenter;
        return pow(x - xCenter, 2) + pow(y - yCenter, 2) <= pow(radius, 2);

=======

        int x = min(max(x1, xCenter), x2);
        int y = min(max(y1, yCenter), y2);
        return (x - xCenter) * (x - xCenter) + (y - yCenter) * (y - yCenter) <= radius * radius;

=======

        int x = xCenter, y = yCenter;
        if (x < x1) x = x1;
        if (x > x2) x = x2;
        if (y < y1) y = y1;
        if (y > y2) y = y2;
        return (x - xCenter) * (x - xCenter) + (y - yCenter) * (y - yCenter) <= radius * radius;

=======

        int x = xCenter, y = yCenter;
        if (xCenter < x1) x = x1;
        else if (xCenter > x2) x = x2;
        if (yCenter < y1) y = y1;
        else if (yCenter > y2) y = y2;
        return (x - xCenter) * (x - xCenter) + (y - yCenter) * (y - yCenter) <= radius * radius;

=======

        int x = xCenter, y = yCenter;
        if (xCenter < x1) x = x1;
        if (xCenter > x2) x = x2;
        if (yCenter < y1) y = y1;
        if (yCenter > y2) y = y2;
        return (x - xCenter) * (x - xCenter) + (y - yCenter) * (y - yCenter) <= radius * radius;

=======

        int x = xCenter;
        int y = yCenter;
        if (xCenter < x1) x = x1;
        if (xCenter > x2) x = x2;
        if (yCenter < y1) y = y1;
        if (yCenter > y2) y = y2;
        return (xCenter-x)*(xCenter-x) + (yCenter-y)*(yCenter-y) <= radius*radius;

=======

        int x = 0;
        int y = 0;
        if (xCenter < x1) {
            x = x1;
        } else if (xCenter > x2) {
            x = x2;
        } else {
            x = xCenter;
        }
        if (yCenter < y1) {
            y = y1;
        } else if (yCenter > y2) {
            y = y2;
        } else {
            y = yCenter;
        }
        return (xCenter - x) * (xCenter - x) + (yCenter - y) * (yCenter - y) <= radius * radius;

=======

        int x = max(x1, min(xCenter, x2));
        int y = max(y1, min(yCenter, y2));
        int distance = (x - xCenter)*(x - xCenter) + (y - yCenter)*(y - yCenter);
        return distance <= radius*radius;

=======

        // x1 <= x2, y1 <= y2
        int x = xCenter, y = yCenter;
        if (x < x1) {
            x = x1;
        } else if (x > x2) {
            x = x2;
        }
        if (y < y1) {
            y = y1;
        } else if (y > y2) {
            y = y2;
        }
        return (xCenter - x) * (xCenter - x) + (yCenter - y) * (yCenter - y) <= radius * radius;
