Synthesizing 10/10 solutions

=======

        int m = mat.size(), n = mat[0].size();
        int l = 0, r = m - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int maxj = 0;
            for (int j = 1; j < n; ++j) {
                if (mat[mid][j] > mat[mid][maxj])
                    maxj = j;
            }
            if (mat[mid][maxj] > mat[mid - 1][maxj] && mat[mid][maxj] > mat[mid + 1][maxj])
                return {mid, maxj};
            else if (mat[mid][maxj] < mat[mid - 1][maxj])
                r = mid - 1;
            else
                l = mid + 1;
        }
        int maxj = 0;
        for (int j = 1; j < n; ++j) {
            if (mat[l][j] > mat[l][maxj])
                maxj = j;
        }
        return {l, maxj};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0;
        int r = m - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int maxCol = 0;
            for (int i = 0; i < n; ++i) {
                if (mat[mid][i] > mat[mid][maxCol]) {
                    maxCol = i;
                }
            }
            if (mat[mid][maxCol] < mat[mid + 1][maxCol]) {
                l = mid + 1;
            } else if (mat[mid][maxCol] < mat[mid - 1][maxCol]) {
                r = mid - 1;
            } else {
                return {mid, maxCol};
            }
        }
        int maxCol = 0;
        for (int i = 0; i < n; ++i) {
            if (mat[l][i] > mat[l][maxCol]) {
                maxCol = i;
            }
        }
        return {l, maxCol};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0, r = m - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int maxCol = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > mat[mid][maxCol]) {
                    maxCol = i;
                }
            }
            if (mid > 0 && mat[mid][maxCol] < mat[mid - 1][maxCol]) {
                r = mid - 1;
            } else if (mid < m - 1 && mat[mid][maxCol] < mat[mid + 1][maxCol]) {
                l = mid + 1;
            } else {
                return {mid, maxCol};
            }
        }
        return {l, 0};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0;
        int r = m - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int col = 0;
            for (int i = 0; i < n; ++i) {
                if (mat[mid][i] > mat[mid][col]) {
                    col = i;
                }
            }
            if (mat[mid][col] > mat[mid - 1][col] && mat[mid][col] > mat[mid + 1][col]) {
                return {mid, col};
            } else if (mat[mid][col] < mat[mid - 1][col]) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return {l, 0};

=======

        int m = mat.size(), n = mat[0].size();
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int row = 0;
            for (int i = 0; i < m; i++) {
                if (mat[i][mid] > mat[row][mid]) {
                    row = i;
                }
            }
            if (mid > 0 && mat[row][mid] < mat[row][mid - 1]) {
                r = mid - 1;
            } else if (mid < n - 1 && mat[row][mid] < mat[row][mid + 1]) {
                l = mid + 1;
            } else {
                return {row, mid};
            }
        }
        return {0, l};

=======

        int m = mat.size(), n = mat[0].size();
        int left = 0, right = m - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int maxCol = 0;
            for (int j = 1; j < n; ++j)
                if (mat[mid][j] > mat[mid][maxCol]) maxCol = j;
            if (mat[mid][maxCol] < mat[mid + 1][maxCol]) left = mid + 1;
            else if (mat[mid][maxCol] < mat[mid - 1][maxCol]) right = mid - 1;
            else return vector<int>{mid, maxCol};
        }
        int maxCol = 0;
        for (int j = 1; j < n; ++j)
            if (mat[left][j] > mat[left][maxCol]) maxCol = j;
        return vector<int>{left, maxCol};

=======

        int m = mat.size(), n = mat[0].size();
        int l = 0, r = m - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            int col = 0;
            for (int j = 1; j < n; ++j) {
                if (mat[mid][j] > mat[mid][col]) {
                    col = j;
                }
            }
            if (mid > 0 && mat[mid][col] < mat[mid - 1][col]) {
                r = mid - 1;
            } else if (mid < m - 1 && mat[mid][col] < mat[mid + 1][col]) {
                l = mid + 1;
            } else {
                return {mid, col};
            }
        }
        return {};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            int maxRow = 0;
            for (int i = 0; i < m; i++) {
                if (mat[i][mid] > mat[maxRow][mid]) {
                    maxRow = i;
                }
            }
            if (mid > 0 && mat[maxRow][mid - 1] > mat[maxRow][mid]) {
                r = mid - 1;
            } else if (mid < n - 1 && mat[maxRow][mid + 1] > mat[maxRow][mid]) {
                l = mid + 1;
            } else {
                return {maxRow, mid};
            }
        }
        return {0, l};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0;
        int r = m - 1;
        int mid = 0;
        while (l <= r) {
            mid = (l + r) / 2;
            int maxIndex = 0;
            for (int i = 0; i < n; i++) {
                if (mat[mid][i] > mat[mid][maxIndex]) {
                    maxIndex = i;
                }
            }
            if (mid == 0) {
                if (mat[mid][maxIndex] > mat[mid + 1][maxIndex]) {
                    return {mid, maxIndex};
                } else {
                    l = mid + 1;
                }
            } else if (mid == m - 1) {
                if (mat[mid][maxIndex] > mat[mid - 1][maxIndex]) {
                    return {mid, maxIndex};
                } else {
                    r = mid - 1;
                }
            } else {
                if (mat[mid][maxIndex] > mat[mid - 1][maxIndex] && mat[mid][maxIndex] > mat[mid + 1][maxIndex]) {
                    return {mid, maxIndex};
                } else if (mat[mid][maxIndex] < mat[mid - 1][maxIndex]) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
        }
        return {};

=======

        int m = mat.size();
        int n = mat[0].size();
        int l = 0;
        int r = m - 1;
        int mid = 0;
        int maxCol = 0;
        while (l < r) {
            mid = l + (r - l) / 2;
            maxCol = getMaxCol(mat, mid);
            if (mat[mid][maxCol] > mat[mid + 1][maxCol]) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        maxCol = getMaxCol(mat, l);
        return {l, maxCol};
    }
    
    int getMaxCol(vector<vector<int>>& mat, int row) {
        int maxCol = 0;
        for (int j = 1; j < mat[0].size(); j++) {
            if (mat[row][j] > mat[row][maxCol]) {
                maxCol = j;
            }
        }
        return maxCol;
