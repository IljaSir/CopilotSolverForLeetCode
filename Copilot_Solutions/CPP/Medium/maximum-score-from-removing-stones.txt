Synthesizing 10/10 solutions

=======

        if (a > b) {
            swap(a, b);
        }
        if (a > c) {
            swap(a, c);
        }
        if (b > c) {
            swap(b, c);
        }
        return min(a + b, (a + b + c) / 2);

=======

        if (a < b) {
            swap(a, b);
        }
        if (a < c) {
            swap(a, c);
        }
        if (b < c) {
            swap(b, c);
        }
        if (a <= b + c) {
            return (a + b + c) / 2;
        } else {
            return b + c;
        }

=======

        int ans = 0;
        priority_queue<int> pq;
        pq.push(a);
        pq.push(b);
        pq.push(c);
        while (pq.size() >= 2) {
            int x = pq.top(); pq.pop();
            int y = pq.top(); pq.pop();
            if (x > 0 && y > 0) {
                ans++;
                x--;
                y--;
            }
            if (x > 0) pq.push(x);
            if (y > 0) pq.push(y);
        }
        return ans;

=======

        return min(a + b + c - max(a, max(b, c)), (a + b + c) / 2);

=======

        int ans = 0;
        while (true) {
            if (a == 0 || b == 0 || c == 0) break;
            if (a > b) swap(a, b);
            if (b > c) swap(b, c);
            if (a > b) swap(a, b);
            if (b == 0) break;
            a--;
            b--;
            c--;
            ans++;
        }
        return ans;

=======

        int res = 0;
        priority_queue<int, vector<int>, less<int>> pq;
        pq.push(a);
        pq.push(b);
        pq.push(c);
        while (pq.size() >= 2) {
            int first = pq.top();
            pq.pop();
            int second = pq.top();
            pq.pop();
            if (first > 0 && second > 0) {
                res++;
                first--;
                second--;
                pq.push(first);
                pq.push(second);
            }
        }
        return res;

=======

        int res = 0;
        vector<int> v = {a, b, c};
        sort(v.begin(), v.end());
        while (v[0] + v[1] > 0) {
            if (v[2] > 0) {
                v[2]--;
                res++;
            }
            sort(v.begin(), v.end());
        }
        return res;

=======

        if (a + b + c < 3) {
            return a + b + c;
        }
        return (a + b + c - 2) / 2;

=======

        int result = 0;
        int arr[3] = {a, b, c};
        std::sort(arr, arr+3);
        if (arr[1] + arr[0] <= arr[2]) {
            result = arr[0] + arr[1];
        } else {
            result = (arr[0] + arr[1] + arr[2]) / 2;
        }
        return result;

=======

        int sum = a + b + c;
        return sum - max(a, max(b, c)) - 1;
