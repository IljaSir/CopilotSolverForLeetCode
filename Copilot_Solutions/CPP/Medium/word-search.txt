Synthesizing 10/10 solutions

=======

        int m = board.size();
        int n = board[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    if (dfs(board, i, j, word, 0)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>>& board, int i, int j, string word, int pos) {
        if (pos == word.size()) {
            return true;
        }
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size()) {
            return false;
        }
        if (board[i][j] != word[pos]) {
            return false;
        }
        char c = board[i][j];
        board[i][j] = '#';
        bool res = dfs(board, i + 1, j, word, pos + 1) || dfs(board, i - 1, j, word, pos + 1) || dfs(board, i, j + 1, word, pos + 1) || dfs(board, i, j - 1, word, pos + 1);
        board[i][j] = c;
        return res;

=======

        int m = board.size();
        int n = board[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int k) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[k]) {
            return false;
        }
        if (k == word.size() - 1) {
            return true;
        }
        board[i][j] = '\0';
        bool res = dfs(board, word, i + 1, j, k + 1) || dfs(board, word, i - 1, j, k + 1) || dfs(board, word, i, j + 1, k + 1) || dfs(board, word, i, j - 1, k + 1);
        board[i][j] = word[k];
        return res;

=======

        int m = board.size(), n = board[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    if (dfs(board, word, 0, i, j)) return true;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, string& word, int idx, int i, int j) {
        if (idx == word.length()) return true;
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[idx]) return false;
        char c = board[i][j];
        board[i][j] = ' ';
        bool res = dfs(board, word, idx + 1, i + 1, j) || dfs(board, word, idx + 1, i - 1, j) || dfs(board, word, idx + 1, i, j + 1) || dfs(board, word, idx + 1, i, j - 1);
        board[i][j] = c;
        return res;

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (exist(board, visited, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0] && dfs(board, word, visited, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, string& word, vector<vector<bool>>& visited, int i, int j, int start) {
        if (start == word.length()) {
            return true;
        }
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] || board[i][j] != word[start]) {
            return false;
        }
        visited[i][j] = true;
        bool res = dfs(board, word, visited, i - 1, j, start + 1) || dfs(board, word, visited, i + 1, j, start + 1) || dfs(board, word, visited, i, j - 1, start + 1) || dfs(board, word, visited, i, j + 1, start + 1);
        visited[i][j] = false;
        return res;

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    if (dfs(board, word, 0, i, j, visited)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, string& word, int index, int i, int j, vector<vector<bool>>& visited) {
        if (index == word.length()) {
            return true;
        }
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[index] || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        bool result = dfs(board, word, index + 1, i + 1, j, visited) || dfs(board, word, index + 1, i - 1, j, visited) || dfs(board, word, index + 1, i, j + 1, visited) || dfs(board, word, index + 1, i, j - 1, visited);
        visited[i][j] = false;
        return result;

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    visited[i][j] = true;
                    if (dfs(board, word, visited, i, j, 1)) {
                        return true;
                    }
                    visited[i][j] = false;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, string word, vector<vector<bool>>& visited, int i, int j, int k) {
        if (k == word.size()) {
            return true;
        }
        int m = board.size();
        int n = board[0].size();
        if (i > 0 && !visited[i - 1][j] && board[i - 1][j] == word[k]) {
            visited[i - 1][j] = true;
            if (dfs(board, word, visited, i - 1, j, k + 1)) {
                return true;
            }
            visited[i - 1][j] = false;
        }
        if (i < m - 1 && !visited[i + 1][j] && board[i + 1][j] == word[k]) {
            visited[i + 1][j] = true;
            if (dfs(board, word, visited, i + 1, j, k + 1)) {
                return true;
            }
            visited[i + 1][j] = false;
        }
        if (j > 0 && !visited[i][j - 1] && board[i][j - 1] == word[k]) {
            visited[i][j - 1] = true;
            if (dfs(board, word, visited, i, j - 1, k + 1)) {
                return true;
            }
            visited[i][j - 1] = false;
        }
        if (j < n - 1 && !visited[i][j + 1] && board[i][j + 1] == word[k]) {
            visited[i][j + 1] = true;

=======

        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[i].size(); ++j) {
                if (word[0] == board[i][j]) {
                    if (dfs(board, word, 0, i, j)) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        if (board.size() == 0) {
            return false;
        }
        if (word.size() == 0) {
            return true;
        }
        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0] && search(board, visited, word, 0, i, j)) {
                    return true;
                }
            }
        }
        return false;
    }

    bool search(vector<vector<char>>& board, vector<vector<bool>>& visited, string& word, int index, int i, int j) {
        if (index == word.size()) {
            return true;
        }
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] || board[i][j] != word[index]) {
            return false;
        }
        visited[i][j] = true;
        if (search(board, visited, word, index + 1, i + 1, j) ||
            search(board, visited, word, index + 1, i - 1, j) ||
            search(board, visited, word, index + 1, i, j + 1) ||
            search(board, visited, word, index + 1, i, j - 1)) {
            return true;
        }
        visited[i][j] = false;
        return false;

=======

        int m = board.size();
        int n = board[0].size();
        int l = word.size();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == word[0]){
                    if(dfs(board, word, i, j, 0, m, n, l)) return true;
                }
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int k, int m, int n, int l){
        if(i < 0 || j < 0 || i >= m || j >= n || board[i][j] != word[k]) return false;
        if(k == l - 1) return true;
        char t = board[i][j];
        board[i][j] = '#';
        bool res = dfs(board, word, i + 1, j, k + 1, m, n, l) || dfs(board, word, i - 1, j, k + 1, m, n, l) || dfs(board, word, i, j + 1, k + 1, m, n, l) || dfs(board, word, i, j - 1, k + 1, m, n, l);
        board[i][j] = t;
        return res;
