Synthesizing 10/10 solutions

=======

        int left = 1, right = 0;
        for (int pile : piles) {
            right = max(right, pile);
        }
        while (left < right) {
            int mid = left + (right - left) / 2;
            int hours = 0;
            for (int pile : piles) {
                hours += (pile - 1) / mid + 1;
            }
            if (hours > h) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int max = 0;
        for (int i = 0; i < piles.size(); i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        int min = 1;
        int mid = 0;
        while (min < max) {
            mid = min + (max - min) / 2;
            int hours = 0;
            for (int i = 0; i < piles.size(); i++) {
                hours += piles[i] / mid;
                if (piles[i] % mid != 0) {
                    hours++;
                }
            }
            if (hours > h) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;

=======

        int max = 0;
        for (int i = 0; i < piles.size(); i++) {
            if (piles[i] > max) {
                max = piles[i];
            }
        }
        int min = 1;
        while (min < max) {
            int mid = (min + max) / 2;
            int time = 0;
            for (int i = 0; i < piles.size(); i++) {
                time += piles[i] / mid;
                if (piles[i] % mid != 0) {
                    time++;
                }
            }
            if (time <= h) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        return min;

=======

        int lo = 1, hi = 1e9;
        while (lo < hi) {
            int mi = (lo + hi) / 2;
            int time = 0;
            for (int p : piles) {
                time += (p - 1) / mi + 1;
            }
            if (time > h) {
                lo = mi + 1;
            } else {
                hi = mi;
            }
        }
        return lo;

=======

        int max = 0;
        int sum = 0;
        for (int i = 0; i < piles.size(); i++) {
            if (max < piles[i]) {
                max = piles[i];
            }
            sum += piles[i];
        }
        int min = sum / h;
        if (min < 1) {
            min = 1;
        }
        if (min > max) {
            return max;
        }
        int mid = (min + max) / 2;
        while (min < max) {
            int time = 0;
            for (int i = 0; i < piles.size(); i++) {
                time += piles[i] / mid;
                if (piles[i] % mid != 0) {
                    time++;
                }
            }
            if (time > h) {
                min = mid + 1;
            } else {
                max = mid;
            }
            mid = (min + max) / 2;
        }
        return mid;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) / 2;
            int time = 0;
            for (int pile : piles) {
                time += (pile - 1) / mid + 1;
            }
            if (time <= h) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int i = 0; i < piles.size(); i++) {
                cnt += (piles[i] + mid - 1) / mid;
            }
            if (cnt > h) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int hours = 0;
            for (auto pile : piles) {
                hours += pile / mid + (pile % mid > 0);
            }
            if (hours > h) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int max = INT_MIN;
        for (int i = 0; i < piles.size(); i++) {
            if (piles[i] > max) max = piles[i];
        }
        int min = 1;
        int mid = 0;
        while (min < max) {
            mid = (min + max) / 2;
            int time = 0;
            for (int i = 0; i < piles.size(); i++) {
                time += piles[i] / mid;
                if (piles[i] % mid != 0) time++;
            }
            if (time <= h) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        return min;

=======

        int max_pile = 0;
        for (auto p : piles) {
            max_pile = max(max_pile, p);
        }
        int min_k = 1;
        int max_k = max_pile;
        while (min_k < max_k) {
            int mid_k = min_k + (max_k - min_k) / 2;
            int hours = 0;
            for (auto p : piles) {
                hours += p / mid_k;
                if (p % mid_k != 0) {
                    hours++;
                }
            }
            if (hours <= h) {
                max_k = mid_k;
            } else {
                min_k = mid_k + 1;
            }
        }
        return min_k;
