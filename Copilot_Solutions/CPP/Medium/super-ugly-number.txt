Synthesizing 10/10 solutions

=======

        vector<int> ugly(n, INT_MAX);
        ugly[0] = 1;
        vector<int> idx(primes.size(), 0);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < primes.size(); j++) {
                ugly[i] = min(ugly[i], ugly[idx[j]] * primes[j]);
            }
            for (int j = 0; j < primes.size(); j++) {
                if (ugly[i] == ugly[idx[j]] * primes[j]) {
                    idx[j]++;
                }
            }
        }
        return ugly[n-1];

=======

        vector<int> dp(n, INT_MAX);
        dp[0] = 1;
        vector<int> idx(primes.size(), 0);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < primes.size(); j++) {
                dp[i] = min(dp[i], dp[idx[j]] * primes[j]);
            }
            for (int j = 0; j < primes.size(); j++) {
                if (dp[i] == dp[idx[j]] * primes[j]) {
                    idx[j]++;
                }
            }
        }
        return dp[n-1];

=======

        int k = primes.size();
        vector<int> ugly(n, INT_MAX);
        vector<int> idx(k, 0);
        ugly[0] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < k; j++) {
                ugly[i] = min(ugly[i], ugly[idx[j]] * primes[j]);
            }
            for (int j = 0; j < k; j++) {
                if (ugly[i] == ugly[idx[j]] * primes[j]) {
                    idx[j]++;
                }
            }
        }
        return ugly[n-1];

=======

        vector<int> ugly(n);
        ugly[0] = 1;
        int k = primes.size();
        vector<int> index(k, 0);
        for (int i = 1; i < n; ++i) {
            int min = INT_MAX;
            for (int j = 0; j < k; ++j) {
                int val = ugly[index[j]] * primes[j];
                if (val < min) {
                    min = val;
                }
            }
            ugly[i] = min;
            for (int j = 0; j < k; ++j) {
                if (ugly[index[j]] * primes[j] == min) {
                    ++index[j];
                }
            }
        }
        return ugly[n - 1];

=======

        vector<int> ugly(n);
        vector<int> ptr(primes.size(), 0);
        ugly[0] = 1;
        for (int i = 1; i < n; ++i) {
            ugly[i] = INT_MAX;
            for (int j = 0; j < primes.size(); ++j) {
                ugly[i] = min(ugly[i], ugly[ptr[j]] * primes[j]);
            }
            for (int j = 0; j < primes.size(); ++j) {
                if (ugly[i] == ugly[ptr[j]] * primes[j]) {
                    ptr[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int k = primes.size();
        vector<int> ugly(n, 0);
        ugly[0] = 1;
        vector<int> index(k, 0);
        for (int i = 1; i < n; i++) {
            int mn = INT_MAX;
            for (int j = 0; j < k; j++) {
                mn = min(mn, primes[j] * ugly[index[j]]);
            }
            ugly[i] = mn;
            for (int j = 0; j < k; j++) {
                if (mn == primes[j] * ugly[index[j]]) {
                    index[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        vector<int> ugly(n, INT_MAX);
        vector<int> last(primes.size(), 0);
        ugly[0] = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < primes.size(); ++j) {
                ugly[i] = min(ugly[i], ugly[last[j]] * primes[j]);
            }
            for (int j = 0; j < primes.size(); ++j) {
                if (ugly[i] == ugly[last[j]] * primes[j]) {
                    ++last[j];
                }
            }
        }
        return ugly[n - 1];

=======

        int size = primes.size();
        vector<int> dp(n, INT_MAX);
        vector<int> pointers(size, 0);
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < size; j++) {
                dp[i] = min(dp[i], dp[pointers[j]] * primes[j]);
            }
            for (int j = 0; j < size; j++) {
                if (dp[i] == dp[pointers[j]] * primes[j]) {
                    pointers[j]++;
                }
            }
        }
        return dp[n - 1];

=======

        int len = primes.size();
        vector<int> ugly(n, INT_MAX);
        ugly[0] = 1;
        vector<int> index(len, 0);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < len; ++j) {
                ugly[i] = min(ugly[i], ugly[index[j]] * primes[j]);
            }
            for (int j = 0; j < len; ++j) {
                if (ugly[i] == ugly[index[j]] * primes[j]) {
                    index[j]++;
                }
            }
        }
        return ugly[n - 1];

=======

        int k = primes.size();
        vector<int> dp(n, 1);
        vector<int> idx(k, 0);
        for (int i = 1; i < n; ++i) {
            int min_val = INT_MAX;
            for (int j = 0; j < k; ++j) {
                min_val = min(min_val, primes[j] * dp[idx[j]]);
            }
            dp[i] = min_val;
            for (int j = 0; j < k; ++j) {
                if (primes[j] * dp[idx[j]] == min_val) {
                    ++idx[j];
                }
            }
        }
        return dp[n - 1];
