Synthesizing 10/10 solutions

=======

        vector<vector<double>> dp(query_row + 2, vector<double>(query_row + 2, 0));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; ++i) {
            for (int j = 0; j <= i; ++j) {
                if (dp[i][j] > 1) {
                    double extra = (dp[i][j] - 1) / 2;
                    dp[i + 1][j] += extra;
                    dp[i + 1][j + 1] += extra;
                    dp[i][j] = 1;
                }
            }
        }
        return dp[query_row][query_glass];

=======

        vector<vector<double>> dp(query_row + 2, vector<double>(query_row + 2));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; ++i) {
            for (int j = 0; j <= i; ++j) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<vector<double>> dp(query_row + 2, vector<double>(query_row + 2, 0));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; ++i) {
            for (int j = 0; j <= i; ++j) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<vector<double>> dp(query_row + 2, vector<double>(query_row + 2, 0));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<vector<double>> dp(query_row + 2, vector<double>(query_row + 2, 0));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double left = (dp[i][j] - 1.0) / 2.0;
                if (left > 0) {
                    dp[i + 1][j] += left;
                    dp[i + 1][j + 1] += left;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<vector<double>> dp(102, vector<double>(102, 0));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; ++i) {
            for (int j = 0; j <= i; ++j) {
                if (dp[i][j] > 1) {
                    dp[i + 1][j] += (dp[i][j] - 1) / 2;
                    dp[i + 1][j + 1] += (dp[i][j] - 1) / 2;
                    dp[i][j] = 1;
                }
            }
        }
        return dp[query_row][query_glass];

=======

        vector<vector<double>> dp(102, vector<double>(102));
        dp[0][0] = poured;
        for (int i = 0; i <= query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<vector<double>> dp(query_row + 1, vector<double>(query_row + 1, 0));
        dp[0][0] = poured;
        for (int i = 0; i < query_row; i++) {
            for (int j = 0; j <= i; j++) {
                double q = (dp[i][j] - 1.0) / 2.0;
                if (q > 0) {
                    dp[i + 1][j] += q;
                    dp[i + 1][j + 1] += q;
                }
            }
        }
        return min(1.0, dp[query_row][query_glass]);

=======

        vector<double> glasses(query_row + 1);
        glasses[0] = poured;
        for (int i = 0; i < query_row; ++i) {
            for (int j = i; j >= 0; --j) {
                double q = (glasses[j] - 1.0) / 2.0;
                if (q > 0) {
                    glasses[j + 1] += q;
                    glasses[j] = q;
                } else {
                    glasses[j] = 0;
                }
            }
        }
        return min(1.0, glasses[query_glass]);

=======

        double dp[101][101] = {0.0};
        dp[0][0] = poured;
        for (int i = 0; i < query_row + 1; ++i) {
            for (int j = 0; j <= i; ++j) {
                if (dp[i][j] > 1.0) {
                    double left = (dp[i][j] - 1) / 2.0;
                    double right = left;
                    dp[i + 1][j] += left;
                    dp[i + 1][j + 1] += right;
                }
            }
        }
        return min(dp[query_row][query_glass], 1.0);
