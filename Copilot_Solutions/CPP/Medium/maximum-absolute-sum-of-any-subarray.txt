Synthesizing 10/10 solutions

=======

        int sum = 0;
        int maxSum = 0;
        int minSum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            minSum = min(minSum, sum);
        }
        return maxSum - minSum;

=======

        int sum = 0;
        int maxSum = 0;
        int minSum = 0;
        for (int num : nums) {
            sum += num;
            maxSum = max(maxSum, sum);
            minSum = min(minSum, sum);
        }
        return maxSum - minSum;

=======

        int maxSum = 0;
        int minSum = 0;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            minSum = min(minSum, sum);
        }
        return maxSum - minSum;

=======

        int maxSum = 0;
        int minSum = 0;
        int sum = 0;
        for (auto n : nums) {
            sum += n;
            maxSum = max(maxSum, sum);
            minSum = min(minSum, sum);
        }
        return maxSum - minSum;

=======

        int sum = 0;
        int max_sum = 0;
        int min_sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            max_sum = max(max_sum, sum);
            min_sum = min(min_sum, sum);
        }
        return max_sum - min_sum;

=======

        int maxSum = 0;
        int minSum = 0;
        int total = 0;
        for (int num : nums) {
            total += num;
            maxSum = max(maxSum, total);
            minSum = min(minSum, total);
        }
        return maxSum - minSum;

=======

        int n = nums.size();
        int maxSum = 0, minSum = 0, sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            minSum = min(minSum, sum);
        }
        return maxSum - minSum;

=======

        int n = nums.size();
        int maxSum = nums[0];
        int minSum = nums[0];
        int maxSoFar = nums[0];
        int minSoFar = nums[0];
        for (int i = 1; i < n; i++) {
            maxSoFar = max(maxSoFar + nums[i], nums[i]);
            minSoFar = min(minSoFar + nums[i], nums[i]);
            maxSum = max(maxSum, maxSoFar);
            minSum = min(minSum, minSoFar);
        }
        return maxSum - minSum;

=======

        int res = 0, cur = 0;
        for(int i = 0; i < nums.size(); i++){
            cur += nums[i];
            res = max(res, cur);
            if(cur < 0) cur = 0;
        }
        cur = 0;
        for(int i = nums.size() - 1; i >= 0; i--){
            cur += nums[i];
            res = max(res, cur);
            if(cur < 0) cur = 0;
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return 0;
        int maxsum = nums[0];
        int minsum = nums[0];
        int maxval = nums[0];
        int minval = nums[0];
        for (int i = 1; i < n; i++) {
            maxsum = max(nums[i], maxsum + nums[i]);
            maxval = max(maxval, maxsum);
            minsum = min(nums[i], minsum + nums[i]);
            minval = min(minval, minsum);
        }
        return max(abs(maxval), abs(minval));
