Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int last = n - 1;
        for (int i = n - 2; i >= 0; i--) {
            if (i + nums[i] >= last) {
                last = i;
            }
        }
        return last == 0;

=======

        int n = nums.size();
        int maxPos = 0;
        for (int i = 0; i < n; i++) {
            if (i <= maxPos) {
                maxPos = max(maxPos, i + nums[i]);
                if (maxPos >= n - 1) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = nums.size();
        int farthest = 0;
        for (int i = 0; i < n; i++) {
            if (i <= farthest) {
                farthest = max(farthest, i + nums[i]);
                if (farthest >= n - 1) return true;
            }
        }
        return false;

=======

        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i > max) return false;
            if (i + nums[i] > max) max = i + nums[i];
        }
        return true;

=======

        int n = nums.size();
        if (n == 1) return true;
        vector<bool> dp(n, false);
        dp[0] = true;
        for (int i = 0; i < n; ++i) {
            if (dp[i]) {
                for (int j = 1; j <= nums[i]; ++j) {
                    if (i + j >= n) return true;
                    dp[i + j] = true;
                }
            }
        }
        return dp[n - 1];

=======

        int len = nums.size();
        int reach = 0;
        for (int i = 0; i < len; i++) {
            if (i > reach) {
                return false;
            }
            reach = max(reach, i + nums[i]);
            if (reach >= len - 1) {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        int i = 0;
        int maxReach = 0;
        while (i < n && i <= maxReach) {
            maxReach = max(maxReach, i + nums[i]);
            i++;
        }
        return i == n;

=======

        int n = nums.size();
        int i = 0;
        int maxPos = 0;
        while (i < n && i <= maxPos) {
            maxPos = max(maxPos, i + nums[i]);
            i++;
        }
        return i == n;

=======

        int n = nums.size();
        if (n == 1) return true;
        int maxDist = 0;
        for (int i = 0; i < n; i++) {
            if (i > maxDist) return false;
            maxDist = max(maxDist, i + nums[i]);
            if (maxDist >= n - 1) return true;
        }
        return false;

=======

        int n = nums.size();
        if (n == 1) return true;
        int maxReach = nums[0];
        for (int i = 1; i < n; i++) {
            if (maxReach >= i) {
                maxReach = max(maxReach, i + nums[i]);
                if (maxReach >= n - 1) return true;
            }
        }
        return false;
