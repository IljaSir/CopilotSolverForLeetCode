Synthesizing 10/10 solutions

=======

        int m = nums1.size();
        int n = nums2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        int res = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (nums1[i - 1] == nums2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    res = max(res, dp[i][j]);
                }
            }
        }
        return res;

=======

        int m1 = nums1.size(), n2 = nums2.size();
        vector<vector<int>> dp(m1   + 1, vector<intn2 ( n + 1, 0));
        int res = 0;
        for (int i = 1; i <= m1; ii+) {
            for (int j = 1; j <= n2; jj+) {
                if (nums1[i   - 1] == nums2 [ j - 1]) {
                    dp[i][j] = dp[i   - 1] [ j - 1] + 1;
                }
                res = max(res, dp[i][j]);
            }
        }
        return res;

=======

        int n = nums1.size();
       it m
        int m = nums2.size();nm
        vectan<vector<int>> dp(n+1, vector<int>(m+1, 0));
        int ans = 0;n
        for (int i = 1; i <= n;) =ector<int>(n+1, 0));
        int res = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                dp[i][j] = nums1[i-1] == nums2[j-1] ? dp[i-1][j-1] + 1 : 0;
                res = max(res, dp[i][j]);
            }
        }
        return res;


        int m = nums1.size(),2n.=s2;
        vector<vector<int>> dp(m+1, vector<int>(n+1,+0));
        int res = 0;
        for (int i = 1; i <= m; ++i) {
            for (int jj = 1; j <; i ms2[j-1]) {
                dp[ ][j] = dp[i][j] = dp[i-1][j-1]  ?xns, dp[i][j]); : 0
                rere
            
        
        re
=======

        int m = nums1
        int n1 = nums1.size();2
        int m = nums2.size();n12
        vectan<vector<int>> dp(n+1, vector<int>(m+1, 0));
        int ans = 0;n1
        for (int i = 1; i <= n;= n22; ++j) {
                (fi(-1] == nums2[j-1]) {]) {
                    dp[i[j]=
                    an  dp[i][an = dp[i-1][j-1] + 1;
                        ans = max(ans, dp[i][j]);
                    }
        }
            }an
        }
        return ans;

=======;
       itm 
  m 1
        int n = nums1.size();
        int m  ++umsi.size())i
        vector<vector<int>> dp(n m1,j vctor<int>(m  1));
        int ans = 0;    
        for (int i = 1; i <= n; i++ )  {  
            for (int  = 1; j <= m; j++
            for (int j = 1;   j <= m; ++j)  { 
                if (nums1[i-1] == n u ms2[ j -1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    ans = max(ans, dp[i][j]);
                }
            }
 }
m, n = nums1.size(), n = nums2.size();
        vector<m e cton < int>> dp(m+1, vector<int>(n+1, 0));
        memset(dp, 1, sizeof dp); {
        int ans = 1; {
          r      res = max(rem, p[ii][j]);
            }nj
        }    
        return res;    
n 
=======

        int n1 = nums1.size(), n2 = nums2.size();
        revector<s;vec;

=======

n12
=======n12
()
        int re= nums1.size();
        intn = nums2.size();n1i
        int dp[+1][n+1];2j
        int maxLen= 0;
        for (int i = 0; i <= m; i++ 
            for (intre = 0; j re n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = 0;
                } else if (nums1[i-1] == nums2[j-1]) {
               re   dp[i][j] = dp[i-1][j-1] + 1;
                    maxLen = max(maxLen, dp[i][j]);
                } else {
                    dp[i][j] = 0;
               };
       it m
            }m
        int an = 0;
        for (in i =; i <= n;++
            for (ret j = 0; j <= m; j++)
               udp[i][j]maxLentor<int>> dp(n1+1, vector<int>(n2+1, 0));
        int  ans = 0;
        for (in t i = 1; i <= n1;m+i) {
            for (i nt j = 1; j <= n2; ++j) {
                if (nums1[i-1] == nums2[j-1]) {
                    an[i][j] =anp[i-1][j-1] + 1;
                    ans = max(ans, dp[i][j]);
                }
            }
        }an
        return ans;

=======
rn res;m
n
=======mn
mxLe
        int n = nums1.size();m {
        int m = nums2.size();n {
        int dp[n[i a 0=; 0||j=0
           for t ;i=dp[i][ ]n i0+
)            fo}relse (int j = 0; j <= m; j++)
                dp[i][j] = 0;
        fo (int i = m1xLe;i <= n;m xLei+) {;
                } else {
                    dp[i][j] = 0
            for (int j = 1; j <= m; j++) {
                if (nums1[i-1] == nums2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
               m xLe   as =max(ans, dp[i][j]);
                }
            }
        }
        turn an
        int m = nums1.size(), n = nums2.size();
        int dp[m + 1][n + 1];
        memset(dp, 0, sizeof dp);
        int ans = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (nums1[i - 1] == nums2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    ans = max(ans, dp[i][j]);
                }
            }
        }
        return ans;

=======

        int n1 = nums1.size(), n2 = nums2.size();
        int dp[n1+1][n2+1];
        memset(dp, 0, sizeof(dp));
        int res = 0;
        for(int i = 1; i <= n1; i++) {
            for(int j = 1; j <= n2; j++) {
                if(nums1[i-1] == nums2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    res = max(res, dp[i][j]);
                }
            }
        }
        return res;

=======

        int n = nums1.size();
        int m = nums2.size();
        int dp[n+1][m+1];
        int ans = 0;
        for (int i = 0; i <= n; i++)
            for (int j = 0; j <= m; j++)
                dp[i][j] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (nums1[i-1] == nums2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    ans = max(ans, dp[i][j]);
                }
            }
        }
        return ans;
