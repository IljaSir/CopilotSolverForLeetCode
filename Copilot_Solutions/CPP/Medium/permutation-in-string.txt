Synthesizing 10/10 solutions

=======

        int n1 = s1.size(), n2 = s2.size();
        if (n1 > n2) return false;
        vector<int> cnt1(26, 0), cnt2(26, 0);
        for (int i = 0; i < n1; i++) {
            cnt1[s1[i] - 'a']++;
            cnt2[s2[i] - 'a']++;
        }
        for (int i = n1; i < n2; i++) {
            if (cnt1 == cnt2) return true;
            cnt2[s2[i] - 'a']++;
            cnt2[s2[i - n1] - 'a']--;
        }
        return cnt1 == cnt2;

=======

        int n = s1.size(), m = s2.size();
        if (n > m) return false;
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; i++) {
            cnt[s1[i] - 'a']++;
            cnt[s2[i] - 'a']--;
        }
        if (all_of(cnt.begin(), cnt.end(), [](int x) { return x == 0; })) return true;
        for (int i = n; i < m; i++) {
            cnt[s2[i] - 'a']--;
            cnt[s2[i - n] - 'a']++;
            if (all_of(cnt.begin(), cnt.end(), [](int x) { return x == 0; })) return true;
        }
        return false;

=======

        int n = s1.size();
        int m = s2.size();
        if (n > m) return false;
        vector<int> cnt1(26, 0);
        vector<int> cnt2(26, 0);
        for (int i = 0; i < n; ++i) {
            ++cnt1[s1[i] - 'a'];
            ++cnt2[s2[i] - 'a'];
        }
        if (cnt1 == cnt2) return true;
        for (int i = n; i < m; ++i) {
            ++cnt2[s2[i] - 'a'];
            --cnt2[s2[i - n] - 'a'];
            if (cnt1 == cnt2) return true;
        }
        return false;

=======

        int n = s1.length(), m = s2.length();
        if (n > m) return false;
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; i++) {
            cnt[s1[i] - 'a']++;
            cnt[s2[i] - 'a']--;
        }
        if (all_of(cnt.begin(), cnt.end(), [](int x) { return x == 0; })) {
            return true;
        }
        for (int i = n; i < m; i++) {
            cnt[s2[i] - 'a']--;
            cnt[s2[i - n] - 'a']++;
            if (all_of(cnt.begin(), cnt.end(), [](int x) { return x == 0; })) {
                return true;
            }
        }
        return false;

=======

        int len1 = s1.size();
        int len2 = s2.size();
        if (len1 > len2) return false;
        vector<int> v1(26, 0);
        vector<int> v2(26, 0);
        for (int i = 0; i < len1; ++i) {
            v1[s1[i] - 'a']++;
            v2[s2[i] - 'a']++;
        }
        for (int i = 0; i < len2 - len1; ++i) {
            if (v1 == v2) return true;
            v2[s2[i] - 'a']--;
            v2[s2[i + len1] - 'a']++;
        }
        return v1 == v2;

=======

        int n = s1.length(), m = s2.length();
        if (n > m) return false;
        vector<int> cnt(26, 0);
        for (auto c : s1) cnt[c - 'a']++;
        int l = 0, r = 0;
        while (r < m) {
            cnt[s2[r] - 'a']--;
            while (l <= r && cnt[s2[r] - 'a'] < 0) {
                cnt[s2[l] - 'a']++;
                l++;
            }
            if (r - l + 1 == n) return true;
            r++;
        }
        return false;

=======

        if (s1.size() > s2.size()) return false;
        vector<int> cnt(26, 0);
        for (char c : s1) {
            cnt[c - 'a']++;
        }
        int left = 0, right = 0;
        int diff = s1.size();
        while (right < s2.size()) {
            if (cnt[s2[right] - 'a'] > 0) {
                diff--;
            }
            cnt[s2[right] - 'a']--;
            right++;
            if (diff == 0) return true;
            if (right - left == s1.size()) {
                if (cnt[s2[left] - 'a'] >= 0) {
                    diff++;
                }
                cnt[s2[left] - 'a']++;
                left++;
            }
        }
        return false;

=======

        int n = s1.size();
        int m = s2.size();
        if (n > m) return false;
        vector<int> cnt(26);
        for (int i = 0; i < n; i ++) {
            cnt[s1[i] - 'a'] ++;
            cnt[s2[i] - 'a'] --;
        }
        if (all_of(cnt.begin(), cnt.end(), [](int x){return x == 0;})) return true;
        for (int i = n; i < m; i ++) {
            cnt[s2[i] - 'a'] --;
            cnt[s2[i - n] - 'a'] ++;
            if (all_of(cnt.begin(), cnt.end(), [](int x){return x == 0;})) return true;
        }
        return false;

=======

        int len1 = s1.size();
        int len2 = s2.size();
        if(len1 > len2) return false;
        vector<int> cnt(26, 0);
        for(auto c:s1) cnt[c-'a']++;
        int l = 0, r = 0;
        while(r < len2){
            cnt[s2[r++]-'a']--;
            while(cnt[s2[r-1]-'a'] < 0){
                cnt[s2[l++]-'a']++;
            }
            if(r - l == len1) return true;
        }
        return false;

=======

        int n = s1.length();
        int m = s2.length();
        int i = 0, j = 0;
        vector<int> cnt(26, 0);
        for (int k = 0; k < n; k++) {
            cnt[s1[k] - 'a']++;
        }
        while (j < m) {
            cnt[s2[j] - 'a']--;
            if (j - i + 1 == n) {
                if (all_of(cnt.begin(), cnt.end(), [](int x) { return x == 0; })) {
                    return true;
                }
                cnt[s2[i] - 'a']++;
                i++;
            }
            j++;
        }
        return false;
