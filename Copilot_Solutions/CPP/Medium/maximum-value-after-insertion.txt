Synthesizing 10/10 solutions

=======

        int i = 0;
        if (n[0] == '-') {
            i = 1;
            while (i < n.size() && n[i] - '0' <= x) {
                i++;
            }
        } else {
            while (i < n.size() && n[i] - '0' >= x) {
                i++;
            }
        }
        n.insert(i, 1, x + '0');
        return n;

=======

        int i = 0;
        if (n[0] == '-') {
            i = 1;
            while (i < n.size() && n[i] - '0' <= x) i++;
        } else {
            while (i < n.size() && n[i] - '0' >= x) i++;
        }
        return n.substr(0, i) + to_string(x) + n.substr(i);

=======

        int i = 0;
        if (n[0] == '-') {
            i++;
            while (i < n.size() && n[i] - '0' <= x) i++;
        } else {
            while (i < n.size() && n[i] - '0' >= x) i++;
        }
        return n.substr(0, i) + to_string(x) + n.substr(i);

=======

        int i = 0;
        if (n[0] == '-') {
            i = 1;
            while (i < n.size() && n[i] <= '0' + x) ++i;
        } else {
            while (i < n.size() && n[i] >= '0' + x) ++i;
        }
        n.insert(i, 1, '0' + x);
        return n;

=======

        string ans;
        if (n[0] == '-') {
            ans += '-';
            int i = 1;
            while (i < n.size() && n[i] - '0' <= x) {
                ans += n[i];
                ++i;
            }
            ans += (x + '0');
            while (i < n.size()) {
                ans += n[i];
                ++i;
            }
        } else {
            int i = 0;
            while (i < n.size() && n[i] - '0' >= x) {
                ans += n[i];
                ++i;
            }
            ans += (x + '0');
            while (i < n.size()) {
                ans += n[i];
                ++i;
            }
        }
        return ans;

=======

        int i = 0;
        if (n[0] == '-') {
            while (i < n.size() && n[i] - '0' <= x) {
                i++;
            }
        }
        else {
            while (i < n.size() && n[i] - '0' >= x) {
                i++;
            }
        }
        n.insert(n.begin() + i, x + '0');
        return n;

=======

        bool isNegative = n[0] == '-';
        int i = isNegative ? 1 : 0;
        for (; i < n.size(); ++i) {
            if (isNegative && n[i] - '0' <= x) {
                n.insert(i, 1, x + '0');
                return n;
            }
            if (!isNegative && n[i] - '0' >= x) {
                n.insert(i, 1, x + '0');
                return n;
            }
        }
        n.insert(i, 1, x + '0');
        return n;

=======

        int i = 0, l = n.length();
        if (n[0] != '-') {
            while (i < l && n[i] - '0' >= x) i++;
        } else {
            i = 1;
            while (i < l && n[i] - '0' <= x) i++;
        }
        return n.substr(0, i) + to_string(x) + n.substr(i);

=======

        int i = 0;
        int len = n.length();
        bool neg = false;
        if (n[0] == '-') {
            neg = true;
            i = 1;
        }
        if (!neg) {
            while (i < len && n[i] - '0' >= x) {
                i++;
            }
            n.insert(i, 1, x + '0');
        } else {
            while (i < len && n[i] - '0' <= x) {
                i++;
            }
            n.insert(i, 1, x + '0');
        }
        return n;

=======

        string res = "";
        int len = n.length();
        int i = 0;
        if(n[0] != '-'){
            while(i < len && n[i] - '0' >= x) i++;
        } else {
            i++;
            while(i < len && n[i] - '0' <= x) i++;
        }
        res = n.substr(0, i) + to_string(x) + n.substr(i);
        return res;
