Synthesizing 10/10 solutions

=======

        vector<int> res(k, 0);
        unordered_map<int, unordered_set<int>> m;
        for (auto& log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto& p : m) {
            res[p.second.size() - 1]++;
        }
        return res;

=======

        vector<int> res(k, 0);
        unordered_map<int, unordered_set<int>> m;
        for (auto log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto it = m.begin(); it != m.end(); ++it) {
            res[it->second.size() - 1]++;
        }
        return res;

=======

        vector<int> ans(k, 0);
        unordered_map<int, unordered_set<int>> m;
        for (auto &log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            ans[it->second.size() - 1]++;
        }
        return ans;

=======

        vector<int> res(k);
        unordered_map<int, unordered_set<int>> m;
        for (auto &log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto &p : m) {
            res[p.second.size() - 1]++;
        }
        return res;

=======

        vector<int> res(k, 0);
        map<int, set<int>> m;
        for (auto log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto p : m) {
            res[p.second.size() - 1]++;
        }
        return res;

=======

        vector<int> result(k, 0);
        unordered_map<int, unordered_set<int>> map;
        for (auto log : logs) {
            map[log[0]].insert(log[1]);
        }
        for (auto m : map) {
            result[m.second.size() - 1]++;
        }
        return result;

=======

        vector<int> result(k, 0);
        unordered_map<int, unordered_set<int>> umap;
        for (auto& log : logs) {
            umap[log[0]].insert(log[1]);
        }
        for (auto& kv : umap) {
            result[kv.second.size() - 1]++;
        }
        return result;

=======

        vector<int> ans(k, 0);
        unordered_map<int, unordered_set<int>> uam;
        for (auto& log : logs) {
            uam[log[0]].insert(log[1]);
        }
        for (auto& [_, v] : uam) {
            ans[v.size() - 1]++;
        }
        return ans;

=======

        vector<int> ans(k);
        unordered_map<int, unordered_set<int>> m;
        for (auto &log : logs) {
            m[log[0]].insert(log[1]);
        }
        for (auto &it : m) {
            ans[it.second.size() - 1]++;
        }
        return ans;

=======

        vector<int> result(k, 0);
        unordered_map<int, unordered_set<int>> user_map;
        for (auto log: logs)
            user_map[log[0]].insert(log[1]);
        for (auto user: user_map)
            result[user.second.size()-1]++;
        return result;
