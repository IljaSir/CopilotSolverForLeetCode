Synthesizing 10/10 solutions

=======

        int n = answerKey.size();
        int l = 0, r = 0;
        int cnt = 0;
        int ans = 0;
        while (r < n) {
            if (answerKey[r] == 'F') {
                cnt++;
            }
            while (cnt > k) {
                if (answerKey[l++] == 'F') {
                    cnt--;
                }
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        l = 0, r = 0;
        cnt = 0;
        while (r < n) {
            if (answerKey[r] == 'T') {
                cnt++;
            }
            while (cnt > k) {
                if (answerKey[l++] == 'T') {
                    cnt--;
                }
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int n = answerKey.size();
        int l = 0, r = 0;
        int res = 0;
        int cnt = 0;
        while (r < n) {
            if (answerKey[r] == 'F') {
                cnt++;
            }
            if (cnt > k) {
                if (answerKey[l] == 'F') {
                    cnt--;
                }
                l++;
            }
            res = max(res, r - l + 1);
            r++;
        }
        l = 0, r = 0;
        cnt = 0;
        while (r < n) {
            if (answerKey[r] == 'T') {
                cnt++;
            }
            if (cnt > k) {
                if (answerKey[l] == 'T') {
                    cnt--;
                }
                l++;
            }
            res = max(res, r - l + 1);
            r++;
        }
        return res;

=======

        int n = answerKey.size();
        int ans = 0;
        int l = 0, r = 0;
        int cntT = 0, cntF = 0;
        while (r < n) {
            if (answerKey[r] == 'T') {
                cntT++;
            } else {
                cntF++;
            }
            while (cntT > k && cntF > k) {
                if (answerKey[l] == 'T') {
                    cntT--;
                } else {
                    cntF--;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int n = answerKey.size();
        int l = 0;
        int r = 0;
        int ans = 0;
        int cnt = 0;
        while (r < n) {
            if (answerKey[r] == 'T') {
                cnt++;
            }
            while (r - l + 1 - cnt > k) {
                if (answerKey[l] == 'T') {
                    cnt--;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        l = 0;
        r = 0;
        cnt = 0;
        while (r < n) {
            if (answerKey[r] == 'F') {
                cnt++;
            }
            while (r - l + 1 - cnt > k) {
                if (answerKey[l] == 'F') {
                    cnt--;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int l = 0, r = 0, n = answerKey.size();
        int cntT = 0, cntF = 0, res = 0;
        while (r < n) {
            cntT += answerKey[r] == 'T';
            cntF += answerKey[r] == 'F';
            while (r - l + 1 - cntT > k) {
                cntT -= answerKey[l] == 'T';
                l++;
            }
            while (r - l + 1 - cntF > k) {
                cntF -= answerKey[l] == 'F';
                l++;
            }
            res = max(res, r - l + 1);
            r++;
        }
        return res;

=======

        int n = answerKey.size();
        int res = 0;
        for (int i = 0; i < 2; i++) {
            int l = 0, r = 0;
            int cnt = 0;
            while (r < n) {
                if (answerKey[r] == 'T' + i) {
                    cnt++;
                }
                r++;
                if (r - l > cnt + k) {
                    if (answerKey[l] == 'T' + i) {
                        cnt--;
                    }
                    l++;
                }
                res = max(res, r - l);
            }
        }
        return res;

=======

        int n = answerKey.size();
        int f = 0, t = 0;
        int i = 0, j = 0;
        int res = 0;
        while (j < n) {
            if (answerKey[j] == 'F') f++;
            if (answerKey[j] == 'T') t++;
            while (f > k) {
                if (answerKey[i] == 'F') f--;
                i++;
            }
            while (t > k) {
                if (answerKey[i] == 'T') t--;
                i++;
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int n = answerKey.size();
        int i = 0, j = 0;
        int ans = 0;
        while (i < n && j < n) {
            while (j < n && (answerKey[j] == 'T' || k > 0)) {
                if (answerKey[j] == 'F') k--;
                j++;
            }
            ans = max(ans, j - i);
            if (j < n && answerKey[j] == 'F') {
                while (i < j && answerKey[i] == 'T') i++;
                i++;
                j++;
                k++;
            }
        }
        return ans;

=======

        int n = answerKey.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cntF = 0, cntT = 0;
            for (int j = i; j < n; ++j) {
                if (answerKey[j] == 'F') {
                    ++cntF;
                } else {
                    ++cntT;
                }
                if (cntF > k && cntT > k) {
                    break;
                }
                ans = max(ans, j - i + 1);
            }
        }
        return ans;

=======

        int n = answerKey.size();
        vector<int> count(n, 0);
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && answerKey[j] == answerKey[i]) {
                j++;
            }
            for (int x = i; x < j; x++) {
                count[x] = j - i;
            }
            i = j;
        }
        int res = 0;
        int left = 0;
        int right = 0;
        int maxCount = 0;
        while (right < n) {
            if (answerKey[right] == 'T') {
                maxCount++;
            }
            if (right - left + 1 - maxCount > k) {
                if (answerKey[left] == 'T') {
                    maxCount--;
                }
                left++;
            }
            res = max(res, right - left + 1);
            right++;
        }
        left = 0;
        right = 0;
        maxCount = 0;
        while (right < n) {
            if (answerKey[right] == 'F') {
                maxCount++;
            }
            if (right - left + 1 - maxCount > k) {
                if (answerKey[left] == 'F') {
                    maxCount--;
                }
                left++;
            }
            res = max(res, right - left + 1);
            right++;
        }
        return res;
