Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (desiredTotal <= maxChoosableInteger) return true;
        if ((1 + maxChoosableInteger) * maxChoosableInteger / 2 < desiredTotal) return false;
        unordered_map<int, bool> cache;
        return helper(maxChoosableInteger, desiredTotal, 0, cache);
    }
    bool helper(int maxChoosableInteger, int desiredTotal, int used, unordered_map<int, bool>& cache) {
        if (cache.count(used)) return cache[used];
        for (int i = 1; i <= maxChoosableInteger; ++i) {
            int cur = 1 << (i - 1);
            if ((cur & used) == 0) {
                if (desiredTotal <= i || !helper(maxChoosableInteger, desiredTotal - i, cur | used, cache)) {
                    cache[used] = true;
                    return true;
                }
            }
        }
        cache[used] = false;
        return false;

=======

        int sum = maxChoosableInteger * (maxChoosableInteger + 1) / 2;
        if (sum < desiredTotal) return false;
        if (desiredTotal <= 0) return true;
        unordered_map<int, bool> cache;
        return dfs(maxChoosableInteger, desiredTotal, 0, cache);
    }
    bool dfs(int maxChoosableInteger, int desiredTotal, int state, unordered_map<int, bool>& cache) {
        if (cache.count(state)) return cache[state];
        for (int i = 0; i < maxChoosableInteger; ++i) {
            int cur = 1 << i;
            if ((state & cur) == 0) {
                if (desiredTotal <= i + 1 || !dfs(maxChoosableInteger, desiredTotal - (i + 1), state | cur, cache)) {
                    cache[state] = true;
                    return true;
                }
            }
        }
        cache[state] = false;
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) return true;
        if (desiredTotal > maxChoosableInteger * (maxChoosableInteger + 1) / 2) return false;
        unordered_map<int, bool> mp;
        return helper(mp, maxChoosableInteger, desiredTotal, 0);
    }
    
    bool helper(unordered_map<int, bool> &mp, int M, int D, int state) {
        if (mp.find(state) != mp.end()) return mp[state];
        for (int i = 0; i < M; i++) {
            int cur = 1 << i;
            if ((state & cur) == 0) {
                if (D <= i + 1 || !helper(mp, M, D - (i + 1), state | cur)) {
                    mp[state] = true;
                    return true;
                }
            }
        }
        mp[state] = false;
        return false;

=======

        if (desiredTotal == 0) return true;
        int sum = (1 + maxChoosableInteger) * maxChoosableInteger / 2;
        if (sum < desiredTotal) return false;
        vector<int> dp(1 << maxChoosableInteger, -1);
        return canIWin(maxChoosableInteger, desiredTotal, 0, dp);
    }
    
    bool canIWin(int maxChoosableInteger, int desiredTotal, int used, vector<int>& dp) {
        if (dp[used] != -1) return dp[used];
        for (int i = 0; i < maxChoosableInteger; i++) {
            int cur = 1 << i;
            if ((used & cur) == 0) {
                if (desiredTotal <= i + 1 || !canIWin(maxChoosableInteger, desiredTotal - i - 1, used | cur, dp)) {
                    dp[used] = 1;
                    return true;
                }
            }
        }
        dp[used] = 0;
        return false;

=======

        if (desiredTotal == 0) return true;
        if (desiredTotal > maxChoosableInteger * (maxChoosableInteger + 1) / 2) return false;
        unordered_map<int, bool> memo;
        return canIWin(maxChoosableInteger, desiredTotal, 0, memo);
    }
    bool canIWin(int maxChoosableInteger, int desiredTotal, int used, unordered_map<int, bool>& memo) {
        if (memo.find(used) != memo.end()) return memo[used];
        for (int i = 0; i < maxChoosableInteger; ++i) {
            int cur = 1 << i;
            if ((cur & used) == 0) {
                if (desiredTotal <= i + 1 || !canIWin(maxChoosableInteger, desiredTotal - (i + 1), cur | used, memo)) {
                    memo[used] = true;
                    return true;
                }
            }
        }
        memo[used] = false;
        return false;

=======

        if (desiredTotal == 0) return true;
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) return false;
        unordered_map<int, bool> cache;
        return canIWin(maxChoosableInteger, desiredTotal, 0, cache);
    }
    
    bool canIWin(int maxChoosableInteger, int desiredTotal, int used, unordered_map<int, bool>& cache) {
        if (cache.count(used)) return cache[used];
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int mask = 1 << i;
            if ((used & mask) == 0) {
                if (desiredTotal <= i || !canIWin(maxChoosableInteger, desiredTotal - i, used | mask, cache)) {
                    cache[used] = true;
                    return true;
                }
            }
        }
        cache[used] = false;
        return false;

=======

        if (desiredTotal <= maxChoosableInteger) return true;
        if (desiredTotal > maxChoosableInteger * (maxChoosableInteger + 1) / 2) return false;
        vector<bool> used(maxChoosableInteger + 1, false);
        return helper(used, desiredTotal);

=======

        if (desiredTotal <= 0) return true;
        if (maxChoosableInteger * (maxChoosableInteger + 1) / 2 < desiredTotal) return false;
        vector<bool> visited(maxChoosableInteger + 1, false);
        return canWin(maxChoosableInteger, desiredTotal, visited);
    }
    
    bool canWin(int maxChoosableInteger, int desiredTotal, vector<bool>& visited) {
        if (desiredTotal <= 0) return false;
        for (int i = 1; i <= maxChoosableInteger; i++) {
            if (!visited[i]) {
                visited[i] = true;
                if (!canWin(maxChoosableInteger, desiredTotal - i, visited)) {
                    visited[i] = false;
                    return true;
                }
                visited[i] = false;
            }
        }
        return false;
