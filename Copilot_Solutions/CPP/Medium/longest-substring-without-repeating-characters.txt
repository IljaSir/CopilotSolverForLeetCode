Synthesizing 10/10 solutions

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j <= n; j++)
                if (allUnique(s, i, j)) ans = max(ans, j - i);
        return ans;
    }
    bool allUnique(string s, int start, int end) {
        vector<bool> chars(256);
        for (int i = start; i < end; i++) {
            if (chars[s[i]]) return false;
            chars[s[i]] = true;
        }
        return true;

=======

        int n = s.size();
        int ans = 0;
        map<char, int> mp;
        for (int i = 0, j = 0; j < n; j++) {
            if (mp.find(s[j]) != mp.end()) {
                i = max(mp[s[j]], i);
            }
            ans = max(ans, j - i + 1);
            mp[s[j]] = j + 1;
        }
        return ans;

=======

        unordered_map<char, int> m;
        int res = 0;
        for (int i = 0, j = 0; j < s.size(); j++) {
            if (m.count(s[j])) {
                i = max(m[s[j]], i);
            }
            res = max(res, j - i + 1);
            m[s[j]] = j + 1;
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        int i = 0, j = 0;
        unordered_set<char> set;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (set.find(s[j]) == set.end()) {
                set.insert(s[j++]);
                ans = max(ans, j - i);
            } else {
                set.erase(s[i++]);
            }
        }
        return ans;

=======

        int res = 0;
        unordered_map<char, int> map;
        for (int i = 0, j = 0; j < s.length(); j++) {
            if (map.find(s[j]) != map.end()) {
                i = max(map[s[j]], i);
            }
            res = max(res, j - i + 1);
            map[s[j]] = j + 1;
        }
        return res;

=======

        int n = s.size();
        vector<int> last(256, -1);
        int i = 0;
        int res = 0;
        for (int j = 0; j < n; j++) {
            i = max(i, last[s[j]] + 1);
            res = max(res, j - i + 1);
            last[s[j]] = j;
        }
        return res;

=======

        int n = s.size();
        int res = 0;
        int i = 0, j = 0;
        unordered_map<char, int> map;
        while (j < n) {
            if (map.count(s[j]) > 0) {
                i = max(i, map[s[j]] + 1);
            }
            map[s[j]] = j;
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int n=s.length();
        int i=0,j=0,ans=0;
        unordered_map<char,int> m;
        while(j<n){
            m[s[j]]++;
            while(m[s[j]]>1){
                m[s[i]]--;
                i++;
            }
            ans=max(ans,j-i+1);
            j++;
        }
        return ans;

=======

        int n = s.length();
        if (n == 0 || n == 1) return n;
        int maxLen = 0;
        int i = 0;
        int j = 0;
        unordered_set<char> m;
        while (i < n && j < n) {
            if (m.find(s[j]) == m.end()) {
                m.insert(s[j++]);
                maxLen = max(maxLen, j - i);
            } else {
                m.erase(s[i++]);
            }
        }
        return maxLen;

=======

        int len = s.length();
        if (len <= 1) return len;
        int max = 0;
        int i = 0, j = 1;
        while (j < len) {
            char c = s[j];
            int k = s.find(c, i);
            if (k < j) {
                if (j - i > max) max = j - i;
                i = k + 1;
            }
            j++;
        }
        if (j - i > max) max = j - i;
        return max;
