Synthesizing 10/10 solutions

=======

        int x = 0, y = 0;
        string res;
        for (char c : target) {
            int i = (c - 'a') / 5, j = (c - 'a') % 5;
            if (c == 'z') {
                res += string(y - j, 'L') + string(x - i, 'U') + '!';
            } else {
                res += string(x - i, 'U') + string(y - j, 'L') + '!' + string(j - y, 'R') + string(i - x, 'D');
            }
            x = i, y = j;
        }
        return res;

=======

        string res;
        int x = 0, y = 0;
        for (char c: target) {
            int i = (c - 'a') / 5, j = (c - 'a') % 5;
            while (x < i) {
                x++;
                res += "D";
            }
            while (x > i) {
                x--;
                res += "U";
            }
            while (y < j) {
                y++;
                res += "R";
            }
            while (y > j) {
                y--;
                res += "L";
            }
            res += "!";
        }
        return res;

=======

        string res;
        int r = 0, c = 0;
        for (char ch : target) {
            int nr = (ch - 'a') / 5, nc = (ch - 'a') % 5;
            if (ch == 'z') {
                if (r < nr) {
                    res.append(nr - r, 'D');
                } else if (r > nr) {
                    res.append(r - nr, 'U');
                }
                if (c < nc) {
                    res.append(nc - c, 'R');
                } else if (c > nc) {
                    res.append(c - nc, 'L');
                }
            } else {
                if (c < nc) {
                    res.append(nc - c, 'R');
                } else if (c > nc) {
                    res.append(c - nc, 'L');
                }
                if (r < nr) {
                    res.append(nr - r, 'D');
                } else if (r > nr) {
                    res.append(r - nr, 'U');
                }
            }
            res.push_back('!');
            r = nr, c = nc;
        }
        return res;

=======

        string ans;
        int r = 0, c = 0;
        for (char ch : target) {
            int nr = (ch - 'a') / 5;
            int nc = (ch - 'a') % 5;
            if (nr < r) {
                ans += string(r - nr, 'U');
            }
            if (nc < c) {
                ans += string(c - nc, 'L');
            }
            if (nr > r) {
                ans += string(nr - r, 'D');
            }
            if (nc > c) {
                ans += string(nc - c, 'R');
            }
            ans += '!';
            r = nr;
            c = nc;
        }
        return ans;

=======

        string ans;
        int r = 0, c = 0;
        for (char ch : target) {
            int nr = (ch - 'a') / 5;
            int nc = (ch - 'a') % 5;
            if (ch == 'z') {
                if (c > 0) {
                    ans += string(c, 'L');
                    c = 0;
                }
                if (r < nr) {
                    ans += string(nr - r, 'D');
                    r = nr;
                }
                ans += '!';
            } else {
                if (r > nr) {
                    ans += string(r - nr, 'U');
                    r = nr;
                }
                if (c < nc) {
                    ans += string(nc - c, 'R');
                    c = nc;
                }
                if (r < nr) {
                    ans += string(nr - r, 'D');
                    r = nr;
                }
                if (c > nc) {
                    ans += string(c - nc, 'L');
                    c = nc;
                }
                ans += '!';
            }
        }
        return ans;

=======

        string res;
        int i = 0, j = 0;
        for (char c: target) {
            int x = (c - 'a') / 5, y = (c - 'a') % 5;
            if (x < i) res += string(i - x, 'U');
            if (y < j) res += string(j - y, 'L');
            if (x > i) res += string(x - i, 'D');
            if (y > j) res += string(y - j, 'R');
            res += '!';
            i = x, j = y;
        }
        return res;

=======

        int x = 0, y = 0;
        string result;
        for (char c : target) {
            int x1 = (c - 'a') / 5;
            int y1 = (c - 'a') % 5;
            if (x1 > x) {
                result.append(x1 - x, 'D');
            }
            if (y1 > y) {
                result.append(y1 - y, 'R');
            }
            if (y1 < y) {
                result.append(y - y1, 'L');
            }
            if (x1 < x) {
                result.append(x - x1, 'U');
            }
            result.push_back('!');
            x = x1;
            y = y1;
        }
        return result;

=======

        int x = 0;
        int y = 0;
        string res;
        for (auto c : target) {
            int x1 = (c - 'a') / 5;
            int y1 = (c - 'a') % 5;
            if (c == 'z') {
                while (y > y1) {
                    res += 'L';
                    --y;
                }
                while (x > x1) {
                    res += 'U';
                    --x;
                }
                res += '!';
            } else {
                while (x > x1) {
                    res += 'U';
                    --x;
                }
                while (y < y1) {
                    res += 'R';
                    ++y;
                }
                while (y > y1) {
                    res += 'L';
                    --y;
                }
                while (x < x1) {
                    res += 'D';
                    ++x;
                }
                res += '!';
            }
        }
        return res;

=======

        string ret;
        int x = 0, y = 0;
        for (auto c : target) {
            int t = c - 'a';
            int tx = t / 5;
            int ty = t % 5;
            if (t == 25) {
                if (x != tx) {
                    for (int i = 0; i < abs(x - tx); ++i) {
                        ret.push_back(x < tx ? 'D' : 'U');
                    }
                }
                if (y != ty) {
                    for (int i = 0; i < abs(y - ty); ++i) {
                        ret.push_back(y < ty ? 'R' : 'L');
                    }
                }
            } else {
                if (y != ty) {
                    for (int i = 0; i < abs(y - ty); ++i) {
                        ret.push_back(y < ty ? 'R' : 'L');
                    }
                }
                if (x != tx) {
                    for (int i = 0; i < abs(x - tx); ++i) {
                        ret.push_back(x < tx ? 'D' : 'U');
                    }
                }
            }
            ret.push_back('!');
            x = tx;
            y = ty;
        }
        return ret;

=======

        int row = 0;
        int col = 0;
        string path = "";
        for (int i = 0; i < target.size(); i++) {
            int targetRow = (target[i] - 'a') / 5;
            int targetCol = (target[i] - 'a') % 5;
            while (row > targetRow) {
                path += 'U';
                row--;
            }
            while (col < targetCol) {
                path += 'R';
                col++;
            }
            while (col > targetCol) {
                path += 'L';
                col--;
            }
            while (row < targetRow) {
                path += 'D';
                row++;
            }
            path += '!';
        }
        return path;
