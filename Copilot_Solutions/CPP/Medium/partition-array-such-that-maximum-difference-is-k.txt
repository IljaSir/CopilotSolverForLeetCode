Synthesizing 10/10 solutions

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 1;
        int l = 0, r = 0;
        while (r < n) {
            while (r < n && nums[r] - nums[l] <= k) {
                r++;
            }
            if (r == n) {
                break;
            }
            ans++;
            l = r;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = 0, n = nums.size(), res = 0;
        while (j < n) {
            while (j < n && nums[j] - nums[i] <= k) {
                ++j;
            }
            ++res;
            i = j;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = 0, n = nums.size(), res = 0;
        while (i < n) {
            while (j < n && nums[j] - nums[i] <= k) ++j;
            ++res;
            i = j;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0, j = 0;
        int ans = 0;
        while (i < n) {
            while (j < n && nums[j] - nums[i] <= k) j++;
            ans++;
            i = j;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int start = 0;
        int end = 0;
        int count = 0;
        while (end < nums.size()) {
            while (end < nums.size() && nums[end] - nums[start] <= k) {
                end++;
            }
            start = end;
            count++;
        }
        return count;

=======

        sort(nums.begin(), nums.end());
        int ans = 0;
        int i = 0, j = 0;
        while (i < nums.size()) {
            while (j < nums.size() && nums[j] - nums[i] <= k) ++j;
            ++ans;
            i = j;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0, j = 0, res = 0;
        while (i < n) {
            j = i;
            while (j < n && nums[j] - nums[i] <= k) j++;
            i = j;
            res++;
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return 0;
        if (n == 1) return 1;
        sort(nums.begin(), nums.end());
        int ans = 1;
        int min = nums[0], max = nums[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] - min > k || max - nums[i] > k) {
                ans++;
                min = nums[i];
                max = nums[i];
            } else {
                min = min < nums[i] ? min : nums[i];
                max = max > nums[i] ? max : nums[i];
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int len = nums.size();
        int i = 0, j = 0;
        int ret = 0;
        while (i < len) {
            while (j < len && nums[j] - nums[i] <= k) {
                ++j;
            }
            ++ret;
            i = j;
        }
        return ret;

=======

        int n = nums.size();
        if (n == 1) {
            return 1;
        }
        int res = 1;
        sort(nums.begin(), nums.end());
        int left = 0, right = 1;
        while (right < n) {
            if (nums[right] - nums[left] > k) {
                res++;
                left = right;
            }
            right++;
        }
        return res;
