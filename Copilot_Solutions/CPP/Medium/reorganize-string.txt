Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> count(26);
        for (char c : s) {
            count[c - 'a'] += 100;
        }
        for (int i = 0; i < 26; ++i) {
            count[i] += i;
        }
        sort(count.begin(), count.end());
        string ans(n, ' ');
        int t = 1;
        for (int code : count) {
            int ct = code / 100;
            char ch = (char)('a' + (code % 100));
            if (ct > (n + 1) / 2) return "";
            for (int i = 0; i < ct; ++i) {
                if (t >= n) t = 0;
                ans[t] = ch;
                t += 2;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> cnt(26);
        for (char c : s) {
            cnt[c - 'a'] += 100;
        }
        for (int i = 0; i < 26; ++i) {
            cnt[i] += i;
        }
        sort(cnt.begin(), cnt.end());
        string ans(n, ' ');
        int t = 1;
        for (int code : cnt) {
            int ct = code / 100;
            char ch = (char)('a' + (code % 100));
            if (ct > (n + 1) / 2) {
                return "";
            }
            for (int i = 0; i < ct; ++i) {
                if (t >= n) {
                    t = 0;
                }
                ans[t] = ch;
                t += 2;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        for (char c : s) {
            cnt[c - 'a'] += 100;
        }
        for (int i = 0; i < 26; i++) {
            cnt[i] += i;
        }
        sort(cnt.begin(), cnt.end());
        string res(n, ' ');
        int idx = 1;
        for (int i = 0; i < 26; i++) {
            int count = cnt[i] / 100;
            char c = (char)('a' + (cnt[i] % 100));
            if (count > (n + 1) / 2) {
                return "";
            }
            for (int j = 0; j < count; j++) {
                if (idx >= n) {
                    idx = 0;
                }
                res[idx] = c;
                idx += 2;
            }
        }
        return res;

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        for (char c : s) {
            ++cnt[c - 'a'];
        }
        priority_queue<pair<int, char>> pq;
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] > 0) {
                pq.push(make_pair(cnt[i], i + 'a'));
            }
        }
        string res;
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            if (res.empty() || res.back() != p.second) {
                res += p.second;
                if (--p.first > 0) {
                    pq.push(p);
                }
            } else {
                if (pq.empty()) {
                    return "";
                }
                auto q = pq.top();
                pq.pop();
                res += q.second;
                if (--q.first > 0) {
                    pq.push(q);
                }
                pq.push(p);
            }
        }
        return res;

=======

        unordered_map<char, int> freq;
        for (auto c : s) {
            freq[c]++;
        }
        priority_queue<pair<int, char>> pq;
        for (auto it : freq) {
            pq.push({it.second, it.first});
        }
        string res;
        while (!pq.empty()) {
            auto p1 = pq.top();
            pq.pop();
            if (res.empty() || res.back() != p1.second) {
                res += p1.second;
                if (--p1.first > 0) {
                    pq.push(p1);
                }
            } else {
                if (pq.empty()) {
                    return "";
                }
                auto p2 = pq.top();
                pq.pop();
                res += p2.second;
                if (--p2.first > 0) {
                    pq.push(p2);
                }
                pq.push(p1);
            }
        }
        return res;

=======

        unordered_map<char, int> charCount;
        for (char c : s) {
            charCount[c]++;
        }
        priority_queue<pair<int, char>> pq;
        for (auto& p : charCount) {
            pq.push({p.second, p.first});
        }
        string res;
        while (pq.size() >= 2) {
            auto p1 = pq.top();
            pq.pop();
            auto p2 = pq.top();
            pq.pop();
            res.push_back(p1.second);
            res.push_back(p2.second);
            if (--p1.first > 0) {
                pq.push(p1);
            }
            if (--p2.first > 0) {
                pq.push(p2);
            }
        }
        if (!pq.empty()) {
            res.push_back(pq.top().second);
        }
        return res.size() == s.size() ? res : "";

=======

        int n = s.size();
        unordered_map<char, int> mp;
        for (char c : s) ++mp[c];
        priority_queue<pair<int, char>> pq;
        for (auto& p : mp) pq.push({p.second, p.first});
        string res;
        while (!pq.empty()) {
            auto t1 = pq.top(); pq.pop();
            if (res.size() == 0 || res.back() != t1.second) {
                res += t1.second;
                if (--t1.first > 0) pq.push(t1);
            } else {
                if (pq.empty()) return "";
                auto t2 = pq.top(); pq.pop();
                res += t2.second;
                if (--t2.first > 0) pq.push(t2);
                pq.push(t1);
            }
        }
        return res;

=======

        unordered_map<char, int> counts;
        for (char c : s) {
            counts[c]++;
        }
        
        priority_queue<pair<int, char>> pq;
        for (auto [c, n] : counts) {
            pq.push({n, c});
        }
        
        string ans;
        while (!pq.empty()) {
            auto [n1, c1] = pq.top(); pq.pop();
            if (ans.empty() || ans.back() != c1) {
                ans.push_back(c1);
                if (--n1) {
                    pq.push({n1, c1});
                }
            } else {
                if (pq.empty()) {
                    return "";
                }
                auto [n2, c2] = pq.top(); pq.pop();
                ans.push_back(c2);
                if (--n2) {
                    pq.push({n2, c2});
                }
                pq.push({n1, c1});
            }
        }
        
        return ans;

=======

        int n = s.size();
        vector<int> cnt(26);
        for (auto c : s) {
            ++cnt[c - 'a'];
        }
        int maxCnt = 0;
        for (int i = 0; i < 26; ++i) {
            maxCnt = max(maxCnt, cnt[i]);
        }
        if (maxCnt > (n + 1) / 2) {
            return "";
        }
        int evenIdx = 0, oddIdx = 1;
        int halfSize = n / 2;
        vector<char> ans(n);
        for (int i = 0; i < 26; ++i) {
            char c = i + 'a';
            while (cnt[i] > 0 && cnt[i] <= halfSize && oddIdx < n) {
                ans[oddIdx] = c;
                oddIdx += 2;
                --cnt[i];
            }
            while (cnt[i] > 0) {
                ans[evenIdx] = c;
                evenIdx += 2;
                --cnt[i];
            }
        }
        return string(ans.begin(), ans.end());

=======

        int n = s.length();
        int count[26] = {0};
        for (char ch : s) count[ch - 'a']++;
        priority_queue<pair<int, char>> pq;
        for (int i = 0; i < 26; ++i) {
            if (count[i] > 0) pq.push({count[i], 'a' + i});
        }
        string res;
        while (!pq.empty()) {
            auto p = pq.top(); pq.pop();
            if (res.empty() || res.back() != p.second) {
                res += p.second;
                if (--p.first > 0) pq.push(p);
            } else {
                if (pq.empty()) return "";
                auto q = pq.top(); pq.pop();
                res += q.second;
                if (--q.first > 0) pq.push(q);
                pq.push(p);
            }
        }
        return res;
