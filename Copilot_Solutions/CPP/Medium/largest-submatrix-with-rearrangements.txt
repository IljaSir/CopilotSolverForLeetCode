Synthesizing 10/10 solutions

=======

        for (int i = 1; i < matrix.size(); ++i) {
            for (int j = 0; j < matrix[0].size(); ++j) {
                if (matrix[i][j]) {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }
        int res = 0;
        for (int i = 0; i < matrix.size(); ++i) {
            sort(matrix[i].begin(), matrix[i].end());
            for (int j = 0; j < matrix[0].size(); ++j) {
                res = max(res, matrix[i][j] * (matrix[0].size() - j));
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = 0;
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            sort(matrix[i].begin(), matrix[i].end(), greater<int>());
            for (int j = 0; j < n; j++) {
                ans = max(ans, matrix[i][j] * (j + 1));
            }
        }
        return ans;

=======

        int m = matrix.size(), n = matrix[0].size();
        vector<int> height(n, 0);
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    height[j] = 0;
                } else {
                    height[j]++;
                }
            }
            vector<int> h = height;
            sort(h.begin(), h.end(), greater<int>());
            for (int j = 0; j < n; j++) {
                ans = max(ans, h[j] * (j + 1));
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> height(n, 0);
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j]) {
                    ++height[j];
                } else {
                    height[j] = 0;
                }
            }
            ans = max(ans, largestRectangleArea(height));
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> height(n, 0);
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    height[j]++;
                } else {
                    height[j] = 0;
                }
            }
            vector<int> temp = height;
            sort(temp.begin(), temp.end());
            for (int j = 0; j < n; j++) {
                res = max(res, temp[j] * (n - j));
            }
        }
        return res;

=======

        int m = matrix.size(), n = matrix[0].size();
        vector<int> count(n, 0);
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j]) {
                    count[j]++;
                } else {
                    count[j] = 0;
                }
            }
            vector<int> temp(count);
            sort(temp.begin(), temp.end());
            for (int j = 0; j < n; ++j) {
                ans = max(ans, temp[j] * (n - j));
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> count(n, 0);
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 1) {
                    count[j] += 1;
                } else {
                    count[j] = 0;
                }
            }
            vector<int> temp(count);
            sort(temp.begin(), temp.end(), greater<int>());
            for (int k = 0; k < n; ++k) {
                res = max(res, temp[k] * (k + 1));
            }
        }
        return res;

=======

        int rows = matrix.size();
        int cols = matrix[0].size();
        int maxArea = 0;
        for (int i = 1; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] == 1) {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }
        for (int i = 0; i < rows; i++) {
            sort(matrix[i].begin(), matrix[i].end());
            for (int j = 0; j < cols; j++) {
                maxArea = max(maxArea, matrix[i][j] * (cols - j));
            }
        }
        return maxArea;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int ans = 0;
        vector<int> heights(n, 0);
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] == 0){
                    heights[j] = 0;
                }else{
                    heights[j]++;
                }
            }
            vector<int> tmp = heights;
            sort(tmp.begin(), tmp.end(), greater<int>());
            for(int j = 0; j < n; j++){
                ans = max(ans, tmp[j] * (j + 1));
            }
        }
        return ans;

=======

        int row = matrix.size();
        int col = matrix[0].size();
        vector<int> v(col, 0);
        int ans = 0;
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (matrix[i][j] == 1) {
                    v[j] += 1;
                } else {
                    v[j] = 0;
                }
            }
            sort(v.begin(), v.end());
            for (int j = 0; j < col; ++j) {
                ans = max(ans, v[j] * (col - j));
            }
        }
        return ans;
