Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(score.begin(), score.end(), [k](const vector<int>& a, const vector<int>& b) {
            return a[k] > b[k];
        });
        return score;

=======

        sort(score.begin(), score.end(), [&](vector<int>& a, vector<int>& b) {
            return a[k] > b[k];
        });
        return score;

=======

        sort(score.begin(), score.end(), [k](vector<int>& a, vector<int>& b){
            return a[k] > b[k];
        });
        return score;

=======

        sort(score.begin(), score.end(), [&k](const vector<int>& a, const vector<int>& b) {
            return a[k] > b[k];
        });
        return score;

=======

        sort(score.begin(), score.end(), [&](auto &a, auto &b) {
            return a[k] > b[k];
        });
        return score;

=======

        sort(score.begin(), score.end(), [&](const auto& a, const auto& b) { return a[k] > b[k]; });
        return score;

=======

        vector<pair<int, int>> v;
        int n = score.size();
        for (int i = 0; i < n; i++) {
            v.push_back({score[i][k], i});
        }
        sort(v.begin(), v.end(), greater<pair<int, int>>());
        vector<vector<int>> ans;
        for (auto &p : v) {
            ans.push_back(score[p.second]);
        }
        return ans;

=======

        // 1. sort the scores
        std::sort(score.begin(), score.end(), [k](auto& a, auto& b){
            return a[k] > b[k];
        });
        return score;
