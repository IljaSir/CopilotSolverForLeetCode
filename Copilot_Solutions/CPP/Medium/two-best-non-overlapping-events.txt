Synthesizing 10/10 solutions

=======

        int n = events.size();
        sort(events.begin(), events.end());
        vector<int> dp(n, 0);
        dp[0] = events[0][2];
        for (int i = 1; i < n; ++i) {
            int l = 0, r = i;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (events[m][1] < events[i][0]) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            dp[i] = max(dp[i - 1], events[i][2] + (l > 0 ? dp[l - 1] : 0));
        }
        return dp[n - 1];

=======

        sort(events.begin(), events.end());
        int n = events.size();
        vector<int> dp(n);
        dp[0] = events[0][2];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i - 1], events[i][2]);
            int l = 0, r = i;
            while (l < r) {
                int mid = (l + r) / 2;
                if (events[mid][1] < events[i][0]) l = mid + 1;
                else r = mid;
            }
            dp[i] = max(dp[i], dp[l - 1] + events[i][2]);
        }
        return dp[n - 1];

=======

        sort(events.begin(), events.end(), [](auto& a, auto& b) {
            if (a[1] != b[1]) return a[1] < b[1];
            return a[0] < b[0];
        });
        int n = events.size();
        vector<int> dp(n, 0);
        vector<int> last(n, 0);
        dp[0] = events[0][2];
        last[0] = events[0][1];
        for (int i = 1; i < n; ++i) {
            dp[i] = dp[i - 1];
            last[i] = last[i - 1];
            int j = upper_bound(events.begin(), events.begin() + i, vector<int>{last[i - 1] + 1, 0, 0}, [](auto& a, auto& b) {
                return a[0] < b[0];
            }) - events.begin();
            if (j < i) {
                dp[i] = max(dp[i], dp[j - 1] + events[i][2]);
            }
        }
        return dp.back();

=======

        sort(events.begin(), events.end());
        int n = events.size();
        int dp[n];
        dp[0] = events[0][2];
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i-1], events[i][2]);
            int l = 0, r = i-1;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (events[mid][1] < events[i][0]) l = mid;
                else r = mid-1;
            }
            if (events[l][1] < events[i][0]) dp[i] = max(dp[i], dp[l] + events[i][2]);
        }
        return dp[n-1];

=======

        sort(events.begin(), events.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] < b[1];
        });
        int n = events.size();
        vector<int> dp(n, 0);
        dp[0] = events[0][2];
        for (int i = 1; i < n; ++i) {
            int l = 0, r = i - 1;
            int mid;
            while (l < r) {
                mid = l + (r - l) / 2;
                if (events[mid][1] < events[i][0]) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            if (events[l][1] >= events[i][0]) {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = max(dp[i - 1], dp[l] + events[i][2]);
            }
        }
        return dp[n - 1];

=======

        int n = events.size();
        sort(events.begin(), events.end());
        vector<int> dp(n, 0);
        dp[n-1] = events[n-1][2];
        for (int i = n-2; i >= 0; i--) {
            int j = i+1;
            int k = n-1;
            while (j < k) {
                int mid = j + (k-j)/2;
                if (events[mid][0] >= events[i][1]) {
                    k = mid;
                } else {
                    j = mid+1;
                }
            }
            if (events[j][0] >= events[i][1]) {
                dp[i] = max(dp[i+1], events[i][2] + dp[j]);
            } else {
                dp[i] = max(dp[i+1], events[i][2]);
            }
        }
        return dp[0];

=======

        sort(events.begin(), events.end(), [](auto& a, auto& b) {
            return a[1] < b[1];
        });
        int n = events.size();
        vector<int> dp(n, 0);
        dp[0] = events[0][2];
        for (int i = 1; i < n; ++i) {
            int l = 0, r = i - 1;
            while (l < r) {
                int m = (l + r + 1) / 2;
                if (events[m][1] < events[i][0]) {
                    l = m;
                } else {
                    r = m - 1;
                }
            }
            dp[i] = max(dp[i - 1], events[i][2] + (l < 0 ? 0 : dp[l]));
        }
        return dp[n - 1];

=======

        sort(events.begin(), events.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        vector<int> dp(events.size() + 1, 0);
        for (int i = 0; i < events.size(); ++i) {
            int j = i - 1;
            while (j >= 0 && events[j][1] >= events[i][0]) {
                --j;
            }
            dp[i + 1] = max(dp[i], events[i][2] + (j >= 0 ? dp[j + 1] : 0));
        }
        return dp.back();

=======

        int n = events.size();
        sort(events.begin(), events.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[0] < b[0];
        });
        vector<int> dp(n + 1, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int start = events[i][0];
            int end = events[i][1];
            int val = events[i][2];
            dp[i + 1] = max(dp[i], dp[i + 1]);
            int j = upper_bound(events.begin(), events.end(), vector<int>{end, 0, 0}, [](const vector<int>& a, const vector<int>& b) {
                return a[0] < b[0];
            }) - events.begin();
            dp[j] = max(dp[j], dp[i + 1] + val);
            ans = max(ans, dp[j]);
        }
        return ans;

=======

        sort(events.begin(), events.end(), [](const auto &a, const auto &b) {
            return a[1] < b[1];
        });
        int N = events.size();
        vector<int> dp(N, 0);
        dp[0] = events[0][2];
        for (int i = 1; i < N; ++i) {
            int j = i - 1;
            while (j >= 0 && events[j][1] >= events[i][0]) {
                --j;
            }
            if (j >= 0) {
                dp[i] = max(dp[j] + events[i][2], dp[i - 1]);
            } else {
                dp[i] = max(events[i][2], dp[i - 1]);
            }
        }
        return dp.back();
    }
    int maxValue(vector<vector<int>>& events, int k) {
        sort(events.begin(), events.end(), [](const auto &a, const auto &b) {
            return a[0] < b[0];
        });
        int N = events.size();
        vector<vector<int>> dp(N, vector<int>(k + 1, 0));
        for (int i = 0; i < N; ++i) {
            int j = i - 1;
            while (j >= 0 && events[j][1] >= events[i][0]) {
                --j;
            }
            if (j >= 0) {
                dp[i][1] = max(dp[j][0] + events[i][2], dp[i - 1][1]);
            } else {
                dp[i][1] = events[i][2];
            }
        }
        for (int i = 0; i < N; ++i) {
            for (int j = 2; j <= k; ++j) {
                int l = i - 1;
                while (l >= 0 && events[l][1] >= events[i][0]) {
                    --l;
                }
                if (l >= 0) {
                    dp[i][j] = max(dp[l][j - 1] + events[i][2], dp[i - 1][j]);
                } else {
                    dp[i][j] = max(events[i][2], dp[i - 1][j]);
                }
            }
        }
        return dp.back
