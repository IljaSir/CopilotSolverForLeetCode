Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> prefix(n, 0);
        prefix[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        sort(nums.begin(), nums.end());
        int score = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                score += nums[i];
            }
        }
        for (int i = 1; i < n; ++i) {
            if (nums[i] > 0) {
                score += prefix[i - 1];
            }
        }
        return score;

=======

        int n = nums.size();
        vector<int> prefix(n);
        prefix[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            prefix[i] = prefix[i-1] + nums[i];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (prefix[i] > 0) res++;
        }
        return res;

=======

        int n = nums.size();
        vector<int> prefix(n, 0);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            prefix[i] = sum;
        }
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int score = 0;
            if (i == 0) {
                score = prefix[n-1];
            } else {
                score = prefix[n-1] - prefix[i-1];
            }
            if (nums[i] > 0) {
                score += nums[i];
            }
            ans = max(ans, score);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> prefix(n,0);
        prefix[0] = nums[0];
        for(int i=1;i<n;i++){
            prefix[i] = prefix[i-1] + nums[i];
        }
        int score = 0;
        for(int i=0;i<n;i++){
            if(prefix[i]>0)
                score++;
        }
        return score;

=======

        int n = nums.size();
        vector<int> prefix(n, 0);
        for (int i = 0; i < n; i++) {
            prefix[i] = nums[i];
            if (i > 0) {
                prefix[i] += prefix[i - 1];
            }
        }
        sort(prefix.begin(), prefix.end());
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (prefix[i] > 0) {
                res++;
            }
        }
        return res;

=======

        sort(nums.begin(),nums.end());
        vector<int> prefix(nums.size());
        prefix[0] = nums[0];
        for(int i=1;i<nums.size();i++)
            prefix[i] = prefix[i-1]+nums[i];
        int score = 0;
        for(int i=0;i<nums.size();i++) {
            if(prefix[i]>0)
                score++;
        }
        return score;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int prefix = 0;
        int score = 0;
        for(int i = 0; i < n; i++) {
            prefix += nums[i];
            if(prefix > 0) {
                score++;
            }
        }
        return score;

=======

        int n = nums.size();
        if (n == 1) return 0;
        sort(nums.begin(), nums.end());
        int score = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > 0) {
                score += n - i;
            }
        }
        return score;

=======

        int n = nums.size();
        int sum = 0;
        int maxSum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
        }
        return maxSum;

=======

        int size = nums.size();
        int sum = 0;
        int maxSum = 0;
        int maxNum = INT_MIN;
        for (int i = 0; i < size; i++) {
            sum += nums[i];
            maxNum = max(maxNum, nums[i]);
            maxSum = max(maxSum, sum);
            nums[i] = maxNum;
        }
        int score = 0;
        for (int i = 0; i < size; i++) {
            if (nums[i] > 0) {
                score++;
            }
        }
        return score;
