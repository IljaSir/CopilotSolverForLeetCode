Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) {
                count++;
            }
        }
        return count;
    }
    
    bool isGood(int n) {
        bool good = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            }
            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                good = true;
            }
            n /= 10;
        }
        return good;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) {
                count++;
            }
        }
        return count;
    }
    
    bool isGood(int n) {
        bool isGood = false;
        while (n > 0) {
            int digit = n % 10;
            if (digit == 3 || digit == 4 || digit == 7) {
                return false;
            }
            if (digit == 2 || digit == 5 || digit == 6 || digit == 9) {
                isGood = true;
            }
            n /= 10;
        }
        return isGood;

=======

        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (isValid(i)) {
                res++;
            }
        }
        return res;

=======

        int cnt = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) {
                cnt++;
            }
        }
        return cnt;
    }
    bool isGood(int n) {
        bool flag = false;
        while (n) {
            int r = n % 10;
            if (r == 3 || r == 4 || r == 7) {
                return false;
            }
            if (r == 2 || r == 5 || r == 6 || r == 9) {
                flag = true;
            }
            n /= 10;
        }
        return flag;

=======

        int cnt = 0;
        for (int i = 1; i <= n; i++) {
            if (isGood(i)) cnt++;
        }
        return cnt;
    }
    bool isGood(int n) {
        bool isGood = false;
        while (n > 0) {
            int r = n % 10;
            if (r == 3 || r == 4 || r == 7) return false;
            if (r == 2 || r == 5 || r == 6 || r == 9) isGood = true;
            n /= 10;
        }
        return isGood;

=======

        int count = 0;
        for (int i = 1; i <= n; ++i) {
            if (check(i)) {
                ++count;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= n; i++)
        {
            if (isGood(i))
                count++;
        }
        return count;

=======

        int count = 0;
        for(int i=1; i<=n; i++){
            if(isGood(i))
                count++;
        }
        return count;
    }
    
    bool isGood(int n){
        bool flag = false;
        while(n > 0){
            if(n%10 == 3 || n%10 == 4 || n%10 == 7)
                return false;
            if(n%10 == 2 || n%10 == 5 || n%10 == 6 || n%10 == 9)
                flag = true;
            n = n/10;
        }
        return flag;

=======

        int res=0;
        for(int i=1;i<=n;i++){
            if(isGood(i)) res++;
        }
        return res;
    }
    bool isGood(int n){
        bool flag=false;
        while(n>0){
            int d=n%10;
            if(d==3||d==4||d==7) return false;
            if(d==2||d==5||d==6||d==9) flag=true;
            n/=10;
        }
        return flag;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            int d = i;
            int good = 0;
            int bad = 0;
            while (d > 0) {
                int r = d % 10;
                d /= 10;
                switch (r) {
                    case 0:
                    case 1:
                    case 8:
                        break;
                    case 2:
                    case 5:
                    case 6:
                    case 9:
                        good = 1;
                        break;
                    default:
                        bad = 1;
                        break;
                }
            }
            if (good && !bad) {
                count++;
            }
        }
        return count;
