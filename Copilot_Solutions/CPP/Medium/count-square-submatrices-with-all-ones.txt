Synthesizing 9/10 solutions

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    if (i == 0 || j == 0) {
                        count++;
                    } else {
                        matrix[i][j] = min(matrix[i-1][j], min(matrix[i][j-1], matrix[i-1][j-1])) + 1;
                        count += matrix[i][j];
                    }
                }
            }
        }
        return count;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = matrix[i][j];
                } else {
                    if (matrix[i][j] == 0) {
                        dp[i][j] = 0;
                    } else {
                        dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + 1;
                    }
                }
                ans += dp[i][j];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = matrix[i][j];
                } else if (matrix[i][j] == 1) {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                } else {
                    dp[i][j] = 0;
                }
                res += dp[i][j];
            }
        }
        return res;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        int sum = 0;
        for (int i = 0; i < m; i++) {
            dp[i][0] = matrix[i][0];
            sum += dp[i][0];
        }
        for (int j = 0; j < n; j++) {
            dp[0][j] = matrix[0][j];
            sum += dp[0][j];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (matrix[i][j] == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = min(min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                }
                sum += dp[i][j];
            }
        }
        return sum;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = matrix[i][j];
            }
        }
        int count = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 || j==0){
                    count+=dp[i][j];
                }
                else if(dp[i][j]==1){
                    dp[i][j] = min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]))+1;
                    count+=dp[i][j];
                }
            }
        }
        return count;

=======

        int n = matrix.size();
        int m = matrix[0].size();
        int dp[n][m];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = matrix[i][j];
                } else if (matrix[i][j] == 1) {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1;
                } else {
                    dp[i][j] = 0;
                }
                ans += dp[i][j];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        int ans = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 || j==0){
                    dp[i][j] = matrix[i][j];
                }else if(matrix[i][j] == 1){
                    dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]));
                }else{
                    dp[i][j] = 0;
                }
                ans += dp[i][j];
            }
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int dp[m][n];
        int sum = 0;
        for(int i = 0; i < m; i++) {
            dp[i][0] = matrix[i][0];
            sum += dp[i][0];
        }
        for(int i = 1; i < n; i++) {
            dp[0][i] = matrix[0][i];
            sum += dp[0][i];
        }
        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(matrix[i][j] == 1) {
                    dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + 1;
                } else {
                    dp[i][j] = 0;
                }
                sum += dp[i][j];
            }
        }
        return sum;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int count = 0;
        int dp[m][n];
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 || j == 0) {
                    dp[i][j] = matrix[i][j];
                } else if(matrix[i][j] == 1) {
                    dp[i][j] = min(dp[i-1][j], min(dp[i][j-1], dp[i-1][j-1])) + 1;
                } else {
                    dp[i][j] = 0;
                }
                count += dp[i][j];
            }
        }
        return count;
