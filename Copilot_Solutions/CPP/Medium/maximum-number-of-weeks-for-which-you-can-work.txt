Synthesizing 10/10 solutions

=======

        long long sum = 0;
        long long max = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            if (milestones[i] > max) {
                max = milestones[i];
            }
        }
        if (max > (sum - max + 1)) {
            return sum - max + max - (sum - max);
        }
        return sum;

=======

        long long sum = 0;
        int max = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            if (max < milestones[i]) {
                max = milestones[i];
            }
        }
        if (sum - max < max) {
            return sum - max;
        }
        return (sum - max) * 2 + 1;

=======

        long long sum = 0;
        long long max = 0;
        for (int i = 0; i < milestones.size(); ++i) {
            sum += milestones[i];
            if (max < milestones[i]) {
                max = milestones[i];
            }
        }
        if (sum - max < max) {
            return 2 * (sum - max) + 1;
        } else {
            return sum;
        }

=======

        long long sum = 0;
        long long max = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            if (milestones[i] > max)
                max = milestones[i];
        }
        long long res = max * 2 - 1;
        if (res > sum)
            res = sum;
        return res;

=======

        long long sum = 0;
        int max = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            if (max < milestones[i])
                max = milestones[i];
        }
        long long res = sum - max;
        if (res >= max)
            return sum;
        else
            return 2 * res + 1;

=======

        long long sum = 0, maxNum = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            maxNum = max(maxNum, (long long)milestones[i]);
        }
        long long ans = min(sum - maxNum + 1, sum);
        return ans;

=======

        long long sum = 0;
        long long maxMilestones = 0;
        for (int i = 0; i < milestones.size(); i++) {
            sum += milestones[i];
            maxMilestones = max(maxMilestones, (long long) milestones[i]);
        }
        if (maxMilestones > sum - maxMilestones + 1) {
            return 2 * (sum - maxMilestones) + 1;
        }
        return sum;

=======

        long long sum = 0;
        long long max = 0;
        for (auto i : milestones) {
            sum += i;
            if (i > max) {
                max = i;
            }
        }
        return min(sum, max*2-1);

=======

        long long sum = 0;
        int max = 0;
        for (int n : milestones) {
            sum += n;
            if (max < n) {
                max = n;
            }
        }
        if (max > sum - max) {
            return (sum - max) * 2 + 1;
        }
        return sum;

=======

        long long sum = 0;
        int max = 0;
        for(auto &n:milestones){
            sum += n;
            if(n > max) max = n;
        }
        long long ans = sum - max;
        if(ans >= max){
            return sum;
        }else{
            return 2 * ans + 1;
        }
