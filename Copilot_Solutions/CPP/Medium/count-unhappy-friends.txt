Synthesizing 10/10 solutions

=======

        vector<vector<int>> order(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                order[i][preferences[i][j]] = j;
            }
        }
        vector<int> match(n);
        for (auto& p : pairs) {
            match[p[0]] = p[1];
            match[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; ++x) {
            int y = match[x];
            int index = order[x][y];
            for (int i = 0; i < index; ++i) {
                int u = preferences[x][i];
                int v = match[u];
                if (order[u][x] < order[u][v]) {
                    ++ans;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> order(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                order[i][preferences[i][j]] = j;
            }
        }
        vector<int> pair(n);
        for (auto& it : pairs) {
            pair[it[0]] = it[1];
            pair[it[1]] = it[0];
        }
        int ans = 0;
        for (int x = 0; x < n; x++) {
            int y = pair[x];
            int index = order[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = pair[u];
                if (order[u][x] < order[u][v]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> rank(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                rank[i][preferences[i][j]] = j;
            }
        }
        vector<int> match(n, 0);
        for (auto& p : pairs) {
            match[p[0]] = p[1];
            match[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; x++) {
            int y = match[x];
            int index = rank[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = match[u];
                if (rank[u][x] < rank[u][v]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> pref(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                pref[i][preferences[i][j]] = j;
            }
        }
        vector<int> pair(n);
        for (auto& p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; ++x) {
            int y = pair[x];
            int index = pref[x][y];
            for (int i = 0; i < index; ++i) {
                int u = preferences[x][i];
                int v = pair[u];
                if (pref[u][x] < pref[u][v]) {
                    ++ans;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> prefer(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                prefer[i][preferences[i][j]] = j;
            }
        }
        vector<int> pair(n);
        for (auto& p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; ++x) {
            int y = pair[x];
            int index = prefer[x][y];
            for (int i = 0; i < index; ++i) {
                int u = preferences[x][i];
                int v = pair[u];
                if (prefer[u][x] < prefer[u][v]) {
                    ++ans;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> p(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                p[i][preferences[i][j]] = j;
            }
        }
        vector<int> match(n, 0);
        for (auto& pair: pairs) {
            match[pair[0]] = pair[1];
            match[pair[1]] = pair[0];
        }
        int ans = 0;
        for (int x = 0; x < n; x++) {
            int y = match[x];
            int index = p[x][y];
            for (int i = 0; i < index; i++) {
                int u = preferences[x][i];
                int v = match[u];
                if (p[u][x] < p[u][v]) {
                    ans++;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> pref(n, vector<int>(n, 0));
        vector<int> pair(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n - 1; ++j) {
                pref[i][preferences[i][j]] = j;
            }
        }
        for (auto& p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int ans = 0;
        for (int x = 0; x < n; ++x) {
            int y = pair[x];
            int index = pref[x][y];
            for (int i = 0; i < index; ++i) {
                int u = preferences[x][i];
                int v = pair[u];
                if (pref[u][x] < pref[u][v]) {
                    ++ans;
                    break;
                }
            }
        }
        return ans;

=======

        vector<int> p(n);
        for (auto& pr : pairs) {
            p[pr[0]] = pr[1];
            p[pr[1]] = pr[0];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < preferences[i].size(); ++j) {
                int u = preferences[i][j];
                if (u == p[i]) break;
                int v = p[u];
                int k = 0;
                for (; k < preferences[u].size(); ++k) {
                    if (preferences[u][k] == i) break;
                    if (preferences[u][k] == v) {
                        res++;
                        break;
                    }
                }
            }
        }
        return res;

=======

        vector<int> pair(n, -1);
        for (auto &p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            int x = pair[i];
            int y = pair[x];
            for (int j : preferences[i]) {
                if (j == x) break;
                if (j == y) {
                    cnt++;
                    break;
                }
                int u = pair[j];
                for (int k : preferences[j]) {
                    if (k == u) break;
                    if (k == i) {
                        cnt++;
                        break;
                    }
                }
            }
        }
        return cnt;

=======

        int cnt = 0;
        vector<int> pair(n, 0);
        for (auto& p : pairs) {
            pair[p[0]] = p[1];
            pair[p[1]] = p[0];
        }
        for (int x = 0; x < n; ++x) {
            int y = pair[x];
            int idx = 0;
            while (preferences[x][idx] != y) {
                int u = preferences[x][idx];
                int v = pair[u];
                for (int i = 0; i < preferences[u].size(); ++i) {
                    if (preferences[u][i] == x) {
                        break;
                    }
                    if (preferences[u][i] == v) {
                        cnt++;
                        break;
                    }
                }
                idx++;
            }
        }
        return cnt;
