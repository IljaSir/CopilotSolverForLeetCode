Synthesizing 10/10 solutions

=======

        if (n == 1) {
            return '0';
        }
        int len = (1 << n) - 1;
        if (k == len / 2 + 1) {
            return '1';
        }
        if (k > len / 2 + 1) {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        }
        return findKthBit(n - 1, k);

=======

        if (n == 1 && k == 1) return '0';
        int len = (1 << n) - 1;
        if (k == len / 2 + 1) return '1';
        if (k < len / 2 + 1) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        }

=======

        if (n == 1) return '0';
        int mid = pow(2, n - 1) / 2;
        if (k == mid) return '1';
        if (k < mid) return findKthBit(n - 1, k);
        return findKthBit(n - 1, mid * 2 - k) == '0' ? '1' : '0';

=======

        if (n == 1) return '0';
        int len = (1 << n) - 1;
        if (k == len / 2 + 1) return '1';
        if (k < len / 2 + 1) return findKthBit(n - 1, k);
        return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';

=======

        if (n == 1) return '0';
        int len = (1 << n) - 1;
        if (k == len / 2 + 1) return '1';
        if (k <= len / 2) return findKthBit(n - 1, k);
        return findKthBit(n - 1, len - k + 1) == '1' ? '0' : '1';

=======

        if (n == 1) {
            return '0';
        }
        int len = 1 << (n - 1);
        if (k == len) {
            return '1';
        } else if (k < len) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, len * 2 - k) == '0' ? '1' : '0';
        }

=======

        if (n == 1) {
            return '0';
        }
        int len = (1 << n) - 1;
        int mid = len / 2;
        if (k == mid + 1) {
            return '1';
        } else if (k < mid + 1) {
            return findKthBit(n - 1, k);
        } else {
            return findKthBit(n - 1, len - k + 1) == '0' ? '1' : '0';
        }

=======

        if (n == 1) return '0';
        int length = (1 << n) - 1;
        if (k == length / 2 + 1) return '1';
        if (k > length / 2 + 1) return findKthBit(n - 1, length - k + 1) == '0' ? '1' : '0';
        return findKthBit(n - 1, k);

=======

        if(n == 1) return '0';
        int len = pow(2, n - 1);
        if(k == len) return '1';
        if(k < len) return findKthBit(n - 1, k);
        return findKthBit(n - 1, len * 2 - k) == '0' ? '1' : '0';

=======

        if(n==1) return '0';
        int mid = (1<<(n-1));
        if(k==mid) return '1';
        if(k<mid) return findKthBit(n-1,k);
        return findKthBit(n-1,mid-(k-mid))=='1'?'0':'1';
