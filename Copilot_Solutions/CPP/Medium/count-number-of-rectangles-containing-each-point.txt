Synthesizing 7/10 solutions

=======

        vector<int> res;
        for (int i = 0; i < points.size(); i++) {
            int count = 0;
            for (int j = 0; j < rectangles.size(); j++) {
                if (points[i][0] <= rectangles[j][0] && points[i][1] <= rectangles[j][1]) {
                    count++;
                }
            }
            res.push_back(count);
        }
        return res;

=======

        vector<int> result;
        for (int i = 0; i < points.size(); ++i) {
            int count = 0;
            for (int j = 0; j < rectangles.size(); ++j) {
                if (rectangles[j][0] >= points[i][0] && rectangles[j][1] >= points[i][1]) {
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> res;
        for (auto& p : points) {
            int count = 0;
            for (auto& r : rectangles) {
                if (p[0] <= r[0] && p[1] <= r[1]) {
                    count++;
                }
            }
            res.push_back(count);
        }
        return res;

=======

        vector<int> result;
        for (auto& point : points) {
            int count = 0;
            for (auto& rectangle : rectangles) {
                if (point[0] <= rectangle[0] && point[1] <= rectangle[1]) {
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> result;
        for (auto &p: points) {
            int count = 0;
            for (auto &r: rectangles) {
                if (p[0] <= r[0] && p[1] <= r[1]) {
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> ret;
        for (auto& point : points) {
            int count = 0;
            for (auto& rect : rectangles) {
                if (point[0] <= rect[0] && point[1] <= rect[1]) {
                    count++;
                }
            }
            ret.push_back(count);
        }
        return ret;

=======

        vector<int> res;
        vector<int> x, y;
        for (auto& r : rectangles) {
            x.push_back(r[0]);
            y.push_back(r[1]);
        }
        sort(x.begin(), x.end());
        sort(y.begin(), y.end());
        for (auto& p : points) {
            int n = upper_bound(x.begin(), x.end(), p[0]) - x.begin();
            int m = upper_bound(y.begin(), y.end(), p[1]) - y.begin();
            res.push_back(n * m);
        }
        return res;
