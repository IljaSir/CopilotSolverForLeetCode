Synthesizing 10/10 solutions

=======

        int n = grid.size();
        if (grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        if (n == 1) return 1;
        int res = 1;
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto t = q.front();
                q.pop();
                if (t.first == n-1 && t.second == n-1) return res;
                for (int i = -1; i <= 1; ++i) {
                    for (int j = -1; j <= 1; ++j) {
                        int x = t.first + i;
                        int y = t.second + j;
                        if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y] != 0) continue;
                        grid[x][y] = 1;
                        q.push({x, y});
                    }
                }
            }
            ++res;
        }
        return -1;

=======

        int n = grid.size();
        if (grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        if (n == 1) return 1;
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int ans = 1;
        int x[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int y[] = {-1, 0, 1, -1, 1, -1, 0, 1};
        while (!q.empty()) {
            int size = q.size();
            ans++;
            while (size--) {
                auto p = q.front();
                q.pop();
                int i = p.first, j = p.second;
                if (i == n-1 && j == n-1) return ans;
                for (int k = 0; k < 8; k++) {
                    int r = i + x[k];
                    int c = j + y[k];
                    if (r >= 0 && r < n && c >= 0 && c < n && grid[r][c] == 0) {
                        q.push({r, c});
                        grid[r][c] = 1;
                    }
                }
            }
        }
        return -1;

=======

        int n = grid.size();
        if (n == 0 || grid[0][0] == 1 || grid[n - 1][n - 1] == 1) {
            return -1;
        }
        int m = grid[0].size();
        vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int level = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto [x, y] = q.front();
                q.pop();
                if (x == n - 1 && y == n - 1) {
                    return level;
                }
                for (auto& dir : dirs) {
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if (nx >= 0 && nx < n && ny >= 0 && ny < m && grid[nx][ny] == 0) {
                        q.push({nx, ny});
                        grid[nx][ny] = 1;
                    }
                }
            }
            ++level;
        }
        return -1;

=======

        int n = grid.size();
        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) {
            return -1;
        }
        vector<vector<int>> dist(n, vector<int>(n, -1));
        dist[0][0] = 1;
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    int nx = x + dx;
                    int ny = y + dy;
                    if (nx >= 0 && nx < n && ny >= 0 && ny < n && grid[nx][ny] == 0 && dist[nx][ny] == -1) {
                        dist[nx][ny] = dist[x][y] + 1;
                        q.push({nx, ny});
                    }
                }
            }
        }
        return dist[n - 1][n - 1];

=======

        int n = grid.size();
        if (grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {-1, -1}, {1, 1}, {-1, 1}, {1, -1}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int level = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto cur = q.front();
                q.pop();
                if (cur.first == n-1 && cur.second == n-1) return level;
                for (auto dir : dirs) {
                    int x = cur.first + dir[0];
                    int y = cur.second + dir[1];
                    if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y] == 1) continue;
                    q.push({x, y});
                    grid[x][y] = 1;
                }
            }
            level++;
        }
        return -1;

=======

        int N = grid.size();
        if (grid[0][0] == 1) return -1;
        if (N == 1) return 1;
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int level = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int x = q.front().first, y = q.front().second;
                q.pop();
                if (x == N - 1 && y == N - 1) return level;
                for (int j = -1; j <= 1; ++j) {
                    for (int k = -1; k <= 1; ++k) {
                        if (j == 0 && k == 0) continue;
                        int nx = x + j, ny = y + k;
                        if (nx < 0 || nx >= N || ny < 0 || ny >= N || grid[nx][ny] == 1) continue;
                        q.push({nx, ny});
                        grid[nx][ny] = 1;
                    }
                }
            }
            ++level;
        }
        return -1;

=======

        int n = grid.size();
        if(n == 0 || grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        vector<vector<int>> dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int res = 1;
        while(!q.empty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                auto p = q.front();
                q.pop();
                if(p.first == n-1 && p.second == n-1) return res;
                for(int j = 0; j < 8; j++) {
                    int x = p.first + dir[j][0];
                    int y = p.second + dir[j][1];
                    if(x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 0) {
                        grid[x][y] = 1;
                        q.push({x, y});
                    }
                }
            }
            res++;
        }
        return -1;

=======

        int n = grid.size();
        if (grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;
        vector<vector<int>> dir = {{1, 1}, {1, 0}, {1, -1}, {0, 1}, {0, -1}, {-1, 1}, {-1, 0}, {-1, -1}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int step = 1;
        while (!q.empty()) {
            int sz = q.size();
            for (int i = 0; i < sz; ++i) {
                auto [x, y] = q.front();
                q.pop();
                if (x == n-1 && y == n-1) return step;
                for (auto& d : dir) {
                    int nx = x + d[0];
                    int ny = y + d[1];
                    if (nx < 0 || nx >= n || ny < 0 || ny >= n || grid[nx][ny] == 1) continue;
                    q.push({nx, ny});
                    grid[nx][ny] = 1;
                }
            }
            ++step;
        }
        return -1;

=======

        if (grid[0][0]) return -1;
        int n = grid.size();
        if (n == 1) return 1;
        vector<vector<int>> dirs = {{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1},{-1,1},{-1,-1}};
        queue<pair<int, int>> q;
        q.push({0,0});
        grid[0][0] = 1;
        int step = 1;
        while (!q.empty()) {
            step++;
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto [x, y] = q.front(); q.pop();
                for (auto [dx, dy] : dirs) {
                    int nx = x + dx;
                    int ny = y + dy;
                    if (nx < 0 || nx >= n || ny < 0 || ny >= n || grid[nx][ny]) continue;
                    if (nx == n - 1 && ny == n - 1) return step;
                    grid[nx][ny] = 1;
                    q.push({nx, ny});
                }
            }
        }
        return -1;

=======

        if (grid[0][0] == 1) return -1;
        int n = grid.size();
        if (n == 1) return 1;
        vector<vector<int>> dir = {{1,0}, {1,1}, {0,1}, {-1,1}, {-1,0}, {-1,-1}, {0,-1}, {1,-1}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int path = 1;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto [x, y] = q.front();
                q.pop();
                for (auto [dx, dy]: dir) {
                    int nx = x + dx;
                    int ny = y + dy;
                    if (nx == n - 1 && ny == n - 1) return path + 1;
                    if (nx < 0 || nx >= n || ny < 0 || ny >= n || grid[nx][ny] == 1) continue;
                    grid[nx][ny] = 1;
                    q.push({nx, ny});
                }
            }
            path++;
        }
        return -1;
