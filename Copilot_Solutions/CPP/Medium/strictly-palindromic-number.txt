Synthesizing 10/10 solutions

=======

        for (int b = 2; b < n - 1; ++b) {
            int x = n;
            string s;
            while (x) {
                s += (x % b) + '0';
                x /= b;
            }
            int i = 0, j = s.size() - 1;
            while (i < j) {
                if (s[i] != s[j]) {
                    break;
                }
                ++i, --j;
            }
            if (i < j) {
                return false;
            }
        }
        return true;

=======

        for (int b = 2; b < n; ++b) {
            int x = n;
            string s;
            while (x) {
                s += '0' + x % b;
                x /= b;
            }
            int i = 0, j = s.size() - 1;
            while (i < j) {
                if (s[i] != s[j]) return false;
                ++i; --j;
            }
        }
        return true;

=======

        for (int i = 2; i < n; ++i) {
            int x = n;
            string s;
            while (x) {
                s += x % i + '0';
                x /= i;
            }
            if (s != string(s.rbegin(), s.rend())) {
                return false;
            }
        }
        return true;

=======

        for (int b = 2; b < n - 1; ++b) {
            int m = n;
            string s;
            while (m > 0) {
                s.push_back(m % b + '0');
                m /= b;
            }
            string t = s;
            reverse(t.begin(), t.end());
            if (s != t) {
                return false;
            }
        }
        return true;

=======

        for (int i = 2; i < n - 1; ++i) {
            int t = n;
            string s;
            while (t) {
                s += '0' + t % i;
                t /= i;
            }
            for (int j = 0; j < s.size() / 2; ++j) {
                if (s[j] != s[s.size() - 1 - j]) {
                    goto next;
                }
            }
            return false;
        next:;
        }
        return true;

=======

        for (int b = 2; b < n - 1; b++) {
            int x = n;
            string s;
            while (x > 0) {
                s.push_back(x % b);
                x /= b;
            }
            int i = 0, j = s.size() - 1;
            while (i < j) {
                if (s[i] != s[j]) {
                    break;
                }
                i++;
                j--;
            }
            if (i >= j) {
                return false;
            }
        }
        return true;

=======

        int i;
        for (i = 2; i <= n - 2; i++) {
            if (!isPalindromic(n, i)) {
                return false;
            }
        }
        return true;
    }
    bool isPalindromic(int n, int b) {
        string s;
        while (n) {
            s += (n % b) + '0';
            n /= b;
        }
        int i, j;
        for (i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s[i] != s[j]) {
                return false;
            }
        }
        return true;

=======

        for (int i = 2; i < n; ++i) {
            string s = convert(n, i);
            if (!isPalindromic(s)) return false;
        }
        return true;

=======

        for (int base = 2; base < n; ++base) {
            long long num = 0;
            int t = n;
            while (t) {
                num = num * base + t % base;
                t /= base;
            }
            if (num != n) return false;
        }
        return true;

=======

        int a = n;
        int b = 0;
        while (a > 0) {
            b = b * 10 + a % 10;
            a /= 10;
        }
        if (b != n) return false;
        for (int i = 2; i < n - 2; ++i) {
            a = n;
            b = 0;
            while (a > 0) {
                b = b * i + a % i;
                a /= i;
            }
            a = n;
            while (a > 0) {
                if (a % i != b % i) return false;
                a /= i;
                b /= i;
            }
        }
        return true;
