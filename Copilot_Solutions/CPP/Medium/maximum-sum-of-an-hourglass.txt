Synthesizing 10/10 solutions

=======

        int m = grid.size(), n = grid[0].size();
        int res = INT_MIN;
        for (int i = 0; i < m - 2; i++) {
            for (int j = 0; j < n - 2; j++) {
                int sum = 0;
                for (int k = 0; k < 3; k++) {
                    sum += grid[i][j + k];
                    sum += grid[i + 2][j + k];
                }
                sum += grid[i + 1][j + 1];
                res = max(res, sum);
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = INT_MIN;
        for(int i = 0; i < m - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                res = max(res, grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2]);
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int maxSum = INT_MIN;
        for(int i = 0; i < m - 2; i++) {
            for(int j = 0; j < n - 2; j++) {
                int sum = 0;
                sum += grid[i][j];
                sum += grid[i][j + 1];
                sum += grid[i][j + 2];
                sum += grid[i + 1][j + 1];
                sum += grid[i + 2][j];
                sum += grid[i + 2][j + 1];
                sum += grid[i + 2][j + 2];
                maxSum = max(maxSum, sum);
            }
        }
        return maxSum;

=======

        int m = grid.size();
        int n = grid[0].size();
        int maxSum = INT_MIN;
        for(int i=0; i<m-2; i++) {
            for(int j=0; j<n-2; j++) {
                int sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                maxSum = max(maxSum, sum);
            }
        }
        return maxSum;

=======

        int sum = INT_MIN;
        for (int i = 0; i < grid.size()-2; i++) {
            for (int j = 0; j < grid[i].size()-2; j++) {
                sum = max(sum, grid[i][j]+grid[i][j+1]+grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2]);
            }
        }
        return sum;

=======

        int n = grid.size();
        int m = grid[0].size();
        int sum = 0;
        for(int i=0;i<n-2;i++){
            for(int j=0;j<m-2;j++){
                sum = max(sum,grid[i][j]+grid[i][j+1]+grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2]);
            }
        }
        return sum;

=======

        int m = grid.size(), n = grid[0].size();
        int ans = -1e9;
        for (int i = 0; i < m - 2; i++) {
            for (int j = 0; j < n - 2; j++) {
                int sum = 0;
                for (int k = 0; k < 3; k++) {
                    sum += grid[i][j + k];
                    sum += grid[i + 2][j + k];
                }
                sum += grid[i + 1][j + 1];
                ans = max(ans, sum);
            }
        }
        return ans;

=======

        int sum = 0;
        int maxSum = INT_MIN;
        for (int i = 0; i < grid.size() - 2; i++) {
            for (int j = 0; j < grid[i].size() - 2; j++) {
                sum = 0;
                sum += grid[i][j] + grid[i][j+1] + grid[i][j+2];
                sum += grid[i+1][j+1];
                sum += grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                maxSum = max(maxSum, sum);
            }
        }
        return maxSum;

=======

        int n = grid.size();
        int m = grid[0].size();
        int maxSum = 0;
        for(int i = 0; i < n-2; i++){
            for(int j = 0; j < m-2; j++){
                int sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                if(sum > maxSum) maxSum = sum;
            }
        }
        return maxSum;

=======

        int sum = 0;
        for(int i = 0; i < grid.size(); i++){
            for(int j = 0; j < grid[0].size(); j++){
                if(j + 2 < grid[0].size() && i + 2 < grid.size()){
                    int temp = 0;
                    temp += grid[i][j] + grid[i][j + 1] + grid[i][j + 2];
                    temp += grid[i + 1][j + 1];
                    temp += grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                    sum = max(sum, temp);
                }
            }
        }
        return sum;
