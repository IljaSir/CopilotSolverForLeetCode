Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = i + 1; j < n; j++) {
                x &= nums[j];
                if (x == 0) {
                    ans = max(ans, j - i);
                    break;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cur = nums[i];
            for (int j = i + 1; j < n; ++j) {
                cur &= nums[j];
                if (cur == 0) {
                    break;
                }
                ans = max(ans, j - i);
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            for (int j = i; j < n; ++j) {
                x &= nums[j];
                if (x == 0) {
                    ans = max(ans, j - i);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int mx = nums[i];
            for (int j = i + 1; j < n; ++j) {
                mx = max(mx, nums[j]);
                if (mx == (mx & nums[j])) {
                    ans = max(ans, j - i);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 31; ++i) {
            int cnt = 0;
            for (int j = 0; j < n; ++j) {
                if (nums[j] >> i & 1) {
                    ++cnt;
                } else {
                    ans = max(ans, cnt);
                    cnt = 0;
                }
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = nums.size();
        int maxAnd = 0;
        for (int i = 0; i < n; i++) {
            maxAnd = max(maxAnd, nums[i]);
        }
        int maxLen = 0;
        int curLen = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == maxAnd) {
                curLen++;
            } else {
                maxLen = max(maxLen, curLen);
                curLen = 0;
            }
        }
        maxLen = max(maxLen, curLen);
        return maxLen - 1;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 30; ++i) {
            int cnt = 0;
            int mask = 1 << i;
            for (int j = 0; j < n; ++j) {
                if (nums[j] & mask) {
                    ++cnt;
                } else {
                    ans = max(ans, cnt);
                    cnt = 0;
                }
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        dp[n-1] = 1;
        int max = 1;
        for (int i = n-2; i >= 0; i--) {
            if (nums[i] == nums[i+1]) {
                dp[i] = dp[i+1] + 1;
            } else {
                dp[i] = 1;
            }
            if (dp[i] > max) {
                max = dp[i];
            }
        }
        return max - 1;

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        int maxBit = 0;
        int ans = 0;
        while (i < n && j < n) {
            maxBit = max(maxBit, nums[j]);
            if (maxBit == nums[j]) {
                ans = max(ans, j - i);
            }
            if (maxBit & nums[j+1]) {
                j++;
            } else {
                i = j + 1;
                j = i;
                maxBit = 0;
            }
        }
        return ans;
