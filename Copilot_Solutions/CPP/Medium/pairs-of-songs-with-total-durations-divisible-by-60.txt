Synthesizing 10/10 solutions

=======

        int res = 0;
        vector<int> count(60, 0);
        for (int t : time) {
            res += count[(60 - t % 60) % 60];
            count[t % 60]++;
        }
        return res;

=======

        int res = 0;
        vector<int> cnt(60, 0);
        for (int t : time) {
            res += cnt[(60 - t % 60) % 60];
            cnt[t % 60]++;
        }
        return res;

=======

        int res = 0;
        unordered_map<int, int> m;
        for (int t : time) {
            int r = t % 60;
            res += m[(60 - r) % 60];
            ++m[r];
        }
        return res;

=======

        int ans = 0;
        vector<int> rem(60, 0);
        for (int t : time) {
            ans += rem[(60 - t % 60) % 60];
            rem[t % 60]++;
        }
        return ans;

=======

        int count = 0;
        vector<int> v(60, 0);
        for (int t : time) {
            count += v[(60 - t % 60) % 60];
            ++v[t % 60];
        }
        return count;

=======

        int count = 0;
        int i,j;
        for(i=0;i<time.size();i++){
            for(j=i+1;j<time.size();j++){
                if((time[i]+time[j])%60==0){
                    count++;
                }
            }
        }
        return count;

=======

        int n = time.size();
        int res = 0;
        int cnt[60] = {0};
        for (int i = 0; i < n; i++) {
            int t = time[i] % 60;
            res += cnt[(60 - t) % 60];
            cnt[t] ++;
        }
        return res;

=======

        vector<int> h(60);
        int res = 0;
        for (auto t : time) {
            res += h[(60 - t % 60) % 60];
            ++h[t % 60];
        }
        return res;

=======

        int count = 0;
        int n = time.size();
        int remainders[60] = {0};
        for (int i = 0; i < n; i++) {
            int remainder = time[i] % 60;
            if (remainder == 0) {
                count += remainders[remainder];
            } else {
                count += remainders[60 - remainder];
            }
            remainders[remainder]++;
        }
        return count;

=======

        int cnt = 0;
        int n = time.size();
        vector<int> hash(60, 0);
        for(int i = 0; i < n; i++) {
            hash[time[i] % 60]++;
        }
        for(int i = 1; i < 30; i++) {
            cnt += hash[i] * hash[60 - i];
        }
        cnt += hash[0] * (hash[0] - 1) / 2;
        cnt += hash[30] * (hash[30] - 1) / 2;
        return cnt;
