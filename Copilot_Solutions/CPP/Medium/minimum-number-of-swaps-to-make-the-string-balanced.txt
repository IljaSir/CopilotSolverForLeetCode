Synthesizing 10/10 solutions

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                cnt++;
            } else {
                cnt--;
            }
        }
        if (cnt != 0) {
            return -1;
        }
        int res = 0;
        int tmp = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                tmp++;
            } else {
                tmp--;
            }
            if (tmp < 0) {
                res++;
                tmp = 1;
            }
        }
        return res;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                cnt++;
            } else {
                cnt--;
            }
        }
        if (cnt != 0) {
            return -1;
        }
        int res = 0;
        cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt == -1) {
                res++;
                cnt = 1;
            }
        }
        return res;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '[') {
                ++cnt;
            } else {
                --cnt;
            }
        }
        if (cnt != 0) {
            return -1;
        }
        int res = 0;
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '[') {
                ++cur;
            } else {
                --cur;
            }
            if (cur < 0) {
                ++res;
                cur = 1;
            }
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '[') {
                ++cnt;
            } else {
                if (cnt == 0) {
                    ++ans;
                } else {
                    --cnt;
                }
            }
        }
        return (ans + 1) / 2;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '[') {
                cnt++;
            } else {
                cnt--;
            }
        }
        if (cnt != 0) {
            return -1;
        }
        int res = 0, cur = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '[') {
                cur++;
            } else {
                cur--;
            }
            if (cur < 0) {
                res++;
                cur = 1;
            }
        }
        return res;

=======

        int count = 0;
        int n = s.size();
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                count++;
            } else {
                count--;
            }
        }
        if (count != 0) {
            return -1;
        }
        int ans = 0;
        int left = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') {
                left++;
            } else {
                if (left > 0) {
                    left--;
                } else {
                    ans++;
                }
            }
        }
        return ans / 2;

=======

        int n = s.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') cnt++;
            else {
                if (cnt > 0) cnt--;
                else ans++;
            }
        }
        return ans;

=======

        int n = s.length();
        int c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '[') c1++;
            else if (c1 > 0) c1--;
            else c2++;
        }
        return (c1 + 1) / 2;

=======

        int n = s.size();
        int l = 0, r = 0;
        for (char c : s) {
            if (c == '[') l++;
            else {
                if (l > 0) l--;
                else r++;
            }
        }
        return (r + 1) / 2;

=======

        int cnt = 0;
        for (auto c : s) {
            if (c == '[') cnt++;
            else cnt--;
        }
        if (cnt != 0) return -1;
        int ans = 0;
        cnt = 0;
        for (auto c : s) {
            if (c == '[') cnt++;
            else cnt--;
            if (cnt < 0) ans++;
        }
        return ans / 2;
