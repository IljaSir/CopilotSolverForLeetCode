Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(res, path, k, n, 1);
        return res;
    }
    void dfs(vector<vector<int>>& res, vector<int>& path, int k, int n, int start) {
        if (n < 0 || path.size() > k) return;
        if (n == 0 && path.size() == k) {
            res.push_back(path);
            return;
        }
        for (int i = start; i <= 9; i++) {
            path.push_back(i);
            dfs(res, path, k, n - i, i + 1);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(res, path, k, n, 1);
        return res;
    }
    void dfs(vector<vector<int>>& res, vector<int>& path, int k, int n, int start) {
        if (k == 0 && n == 0) {
            res.push_back(path);
            return;
        }
        if (k == 0 || n == 0) return;
        for (int i = start; i <= 9; i++) {
            path.push_back(i);
            dfs(res, path, k - 1, n - i, i + 1);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(res, path, k, n, 1);
        return res;
    }
    
    void dfs(vector<vector<int>>& res, vector<int>& path, int k, int n, int start) {
        if (path.size() == k) {
            if (n == 0) {
                res.push_back(path);
            }
            return;
        }
        
        for (int i = start; i <= 9; i++) {
            if (n < i) {
                break;
            }
            path.push_back(i);
            dfs(res, path, k, n - i, i + 1);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(res, path, k, n, 1);
        return res;
    }
    
    void dfs(vector<vector<int>>& res, vector<int>& path, int k, int n, int start) {
        if (n == 0 && path.size() == k) {
            res.push_back(path);
            return;
        }
        if (n < 0 || path.size() > k) return;
        for (int i = start; i <= 9; i++) {
            path.push_back(i);
            dfs(res, path, k, n - i, i + 1);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(1, k, n, path, res);
        return res;
    }
    void dfs(int start, int k, int n, vector<int> &path, vector<vector<int>> &res) {
        if (k == 0 && n == 0) {
            res.push_back(path);
            return;
        }
        for (int i = start; i <= 9; i++) {
            if (n < i) break;
            path.push_back(i);
            dfs(i+1, k-1, n-i, path, res);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> comb;
        dfs(k, n, 1, comb, res);
        return res;
    }
    void dfs(int k, int n, int start, vector<int>& comb, vector<vector<int>>& res) {
        if (k == 0 && n == 0) {
            res.push_back(comb);
            return;
        }
        if (k == 0 || n == 0) {
            return;
        }
        for (int i = start; i <= 9; i++) {
            comb.push_back(i);
            dfs(k - 1, n - i, i + 1, comb, res);
            comb.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> path;
        dfs(1, k, n, path, result);
        return result;
    }
    void dfs(int start, int k, int n, vector<int>& path, vector<vector<int>>& result) {
        if (k == 0 && n == 0) {
            result.push_back(path);
            return;
        }
        for (int i = start; i <= 9; ++i) {
            if (i > n) break;
            path.push_back(i);
            dfs(i + 1, k - 1, n - i, path, result);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> path;
        dfs(k, n, 1, ans, path);
        return ans;
    }
    void dfs(int k, int n, int start, vector<vector<int>>& ans, vector<int>& path) {
        if (k == 0 && n == 0) {
            ans.push_back(path);
            return;
        }
        for (int i = start; i <= 9; i++) {
            path.push_back(i);
            dfs(k - 1, n - i, i + 1, ans, path);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> temp;
        helper(ans, temp, k, n, 1);
        return ans;
    }
    void helper(vector<vector<int>>& ans, vector<int>& temp, int k, int n, int start) {
        if (temp.size() == k) {
            if (n == 0)
                ans.push_back(temp);
            return;
        }
        for (int i = start; i <= 9; i++) {
            if (n - i < 0)
                break;
            temp.push_back(i);
            helper(ans, temp, k, n - i, i + 1);
            temp.pop_back();
        }

=======

        vector<int> nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        vector<int> tmp;
        vector<vector<int>> res;
        dfs(nums, k, n, 0, tmp, res);
        return res;
    }
    void dfs(vector<int> &nums, int k, int n, int start, vector<int> &tmp, vector<vector<int>> &res) {
        if (n == 0 && tmp.size() == k) {
            res.push_back(tmp);
            return;
        }
        for (int i = start; i < nums.size(); i++) {
            if (n - nums[i] < 0) return;
            tmp.push_back(nums[i]);
            dfs(nums, k, n - nums[i], i + 1, tmp, res);
            tmp.pop_back();
        }
