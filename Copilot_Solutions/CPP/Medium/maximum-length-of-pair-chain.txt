Synthesizing 10/10 solutions

=======

        sort(pairs.begin(), pairs.end());
        int n = pairs.size();
        vector<int> dp(n, 1);
        int res = 1;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (pairs[i][0] > pairs[j][1]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            res = max(res, dp[i]);
        }
        return res;

=======

        int n = pairs.size();
        sort(pairs.begin(), pairs.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] < b[1];
        });
        int res = 1;
        int cur = pairs[0][1];
        for (int i = 1; i < n; ++i) {
            if (pairs[i][0] > cur) {
                cur = pairs[i][1];
                ++res;
            }
        }
        return res;

=======

        sort(pairs.begin(), pairs.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        int ans = 0;
        int last = INT_MIN;
        for (auto& p : pairs) {
            if (p[0] > last) {
                ans++;
                last = p[1];
            }
        }
        return ans;

=======

        int n = pairs.size();
        if (n == 0) return 0;
        sort(pairs.begin(), pairs.end());
        int dp[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (pairs[i][0] > pairs[j][1]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[n - 1];

=======

        sort(pairs.begin(), pairs.end(), [](auto& a, auto& b) {
            return a[1] < b[1];
        });
        int count = 1;
        int end = pairs[0][1];
        for (int i = 1; i < pairs.size(); ++i) {
            if (pairs[i][0] > end) {
                ++count;
                end = pairs[i][1];
            }
        }
        return count;

=======

        sort(pairs.begin(), pairs.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] < b[1];
        });
        int res = 0;
        int pre = INT_MIN;
        for (vector<int>& p : pairs) {
            if (pre < p[0]) {
                ++res;
                pre = p[1];
            }
        }
        return res;

=======

        sort(pairs.begin(), pairs.end(), [](auto &a, auto &b) {
            return a[1] < b[1];
        });
        int ans = 0;
        int cur = INT_MIN;
        for (auto &p : pairs) {
            if (p[0] > cur) {
                cur = p[1];
                ans++;
            }
        }
        return ans;

=======

        sort(pairs.begin(), pairs.end(), [](const vector<int> &a, const vector<int> &b){return a[1] < b[1];});
        int ans = 0;
        int prev = INT_MIN;
        for (auto &p : pairs) {
            if (p[0] > prev) {
                prev = p[1];
                ++ans;
            }
        }
        return ans;

=======

        sort(pairs.begin(), pairs.end(), [](vector<int>&a, vector<int>&b) {
            return a[1] < b[1];
        });
        int n = pairs.size();
        int res = 1;
        int cur = pairs[0][1];
        for (int i = 1; i < n; i++) {
            if (cur < pairs[i][0]) {
                res++;
                cur = pairs[i][1];
            }
        }
        return res;

=======

        sort(pairs.begin(), pairs.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        int ans = 0;
        int end = -1001;
        for (auto& p : pairs) {
            if (p[0] > end) {
                end = p[1];
                ans++;
            }
        }
        return ans;
