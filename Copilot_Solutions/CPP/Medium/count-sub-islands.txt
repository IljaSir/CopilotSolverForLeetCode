Synthesizing 10/10 solutions

=======

        int m = grid1.size();
        int n = grid1[0].size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        ++res;
                    }
                }
            }
        }
        return res;
    }
    
    bool dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j) {
        if (i < 0 || i >= grid1.size() || j < 0 || j >= grid1[0].size() || grid2[i][j] == 0) {
            return true;
        }
        if (grid1[i][j] == 0) {
            return false;
        }
        grid2[i][j] = 0;
        bool res = true;
        res &= dfs(grid1, grid2, i - 1, j);
        res &= dfs(grid1, grid2, i + 1, j);
        res &= dfs(grid1, grid2, i, j - 1);
        res &= dfs(grid1, grid2, i, j + 1);
        return res;

=======

        int m = grid1.size();
        int n = grid1[0].size();
        int cnt = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        cnt++;
                    }
                }
            }
        }
        return cnt;

=======

        int m = grid1.size();
        int n = grid1[0].size();
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1) {
                    if (dfs(grid1, grid2, i, j)) {
                        cnt++;
                    }
                }
            }
        }
        return cnt;
    }
    bool dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j) {
        if (i < 0 || i >= grid2.size() || j < 0 || j >= grid2[0].size() || grid2[i][j] == 0) {
            return true;
        }
        bool res = true;
        if (grid1[i][j] == 0) {
            res = false;
        }
        grid2[i][j] = 0;
        res = res && dfs(grid1, grid2, i + 1, j);
        res = res && dfs(grid1, grid2, i - 1, j);
        res = res && dfs(grid1, grid2, i, j + 1);
        res = res && dfs(grid1, grid2, i, j - 1);
        return res;

=======

        int n = grid1.size();
        int m = grid1[0].size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid2[i][j]) {
                    ans += dfs(grid1, grid2, i, j);
                }
            }
        }
        return ans;

=======

        int m = grid1.size();
        int n = grid1[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1 && !visited[i][j]) {
                    bool isSubIsland = true;
                    dfs(grid1, grid2, i, j, visited, isSubIsland);
                    if (isSubIsland) {
                        ans++;
                    }
                }
            }
        }
        return ans;
    }
    
    void dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j, vector<vector<bool>>& visited, bool& isSubIsland) {
        if (i < 0 || i >= grid1.size() || j < 0 || j >= grid1[0].size()) {
            return;
        }
        if (grid2[i][j] == 0 || visited[i][j]) {
            return;
        }
        visited[i][j] = true;
        if (grid1[i][j] == 0) {
            isSubIsland = false;
        }
        dfs(grid1, grid2, i + 1, j, visited, isSubIsland);
        dfs(grid1, grid2, i - 1, j, visited, isSubIsland);
        dfs(grid1, grid2, i, j + 1, visited, isSubIsland);
        dfs(grid1, grid2, i, j - 1, visited, isSubIsland);

=======

        int m = grid1.size();
        int n = grid1[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1 && !visited[i][j]) {
                    if (dfs(grid1, grid2, i, j, visited)) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int m = grid1.size(), n = grid1[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid2[i][j] == 1 && !visited[i][j]) {
                    bool flag = true;
                    dfs(grid1, grid2, visited, i, j, flag);
                    res += flag;
                }
            }
        }
        return res;
    }
    void dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, vector<vector<bool>>& visited, int i, int j, bool& flag) {
        if (i < 0 || i >= grid1.size() || j < 0 || j >= grid1[0].size() || visited[i][j]) {
            return;
        }
        visited[i][j] = true;
        if (grid1[i][j] == 0) {
            flag = false;
        }
        dfs(grid1, grid2, visited, i + 1, j, flag);
        dfs(grid1, grid2, visited, i - 1, j, flag);
        dfs(grid1, grid2, visited, i, j + 1, flag);
        dfs(grid1, grid2, visited, i, j - 1, flag);

=======

        int m = grid1.size(), n = grid1[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid2[i][j] == 1 && !visited[i][j]) {
                    if (dfs(grid1, grid2, visited, i, j, m, n)) {
                        res++;
                    }
                }
            }
        }
        return res;
    }
    
    bool dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, vector<vector<bool>>& visited, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || grid2[i][j] == 0 || visited[i][j]) {
            return true;
        }
        visited[i][j] = true;
        if (grid1[i][j] == 0) {
            return false;
        }
        bool res = true;
        res &= dfs(grid1, grid2, visited, i - 1, j, m, n);
        res &= dfs(grid1, grid2, visited, i + 1, j, m, n);
        res &= dfs(grid1, grid2, visited, i, j - 1, m, n);
        res &= dfs(grid1, grid2, visited, i, j + 1, m, n);
        return res;

=======

        int m = grid1.size();
        int n = grid1[0].size();
        int res = 0;
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if (grid2[i][j]) {
                    res += dfs(grid1, grid2, i, j);
                }
            }
        }
        return res;
    }
    int dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j) {
        if (i < 0 || i >= grid1.size() || j < 0 || j >= grid1[0].size() || !grid2[i][j]) {
            return 1;
        }
        grid2[i][j] = 0;
        int res = grid1[i][j];
        res &= dfs(grid1, grid2, i - 1, j);
        res &= dfs(grid1, grid2, i + 1, j);
        res &= dfs(grid1, grid2, i, j - 1);
        res &= dfs(grid1, grid2, i, j + 1);
        return res;

=======

        int m = grid1.size();
        int n = grid1[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid2[i][j] == 1 && visited[i][j] == 0) {
                    if (dfs(grid1, grid2, visited, i, j)) {
                        ++res;
                    }
                }
            }
        }
        return res;
    }
    
    bool dfs(vector<vector<int>>& grid1, vector<vector<int>>& grid2, vector<vector<int>>& visited, int r, int c) {
        int m = grid1.size();
        int n = grid1[0].size();
        if (r < 0 || r >= m || c < 0 || c >= n) {
            return true;
        }
        if (grid2[r][c] == 0 || visited[r][c] == 1) {
            return true;
        }
        visited[r][c] = 1;
        if (grid1[r][c] == 0) {
            return false;
        }
        return dfs(grid1, grid2, visited, r-1, c) && dfs(grid1, grid2, visited, r+1, c) && dfs(grid1, grid2, visited, r, c-1) && dfs(grid1, grid2, visited, r, c+1);
