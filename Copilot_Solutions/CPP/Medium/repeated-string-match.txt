Synthesizing 10/10 solutions

=======

        string s = a;
        for (int rep = 1; rep <= b.size() / a.size() + 2; ++rep, s += a) {
            if (s.find(b) != string::npos) {
                return rep;
            }
        }
        return -1;

=======

        int cnt = 0;
        string tmp = "";
        while (tmp.size() < b.size()) {
            tmp += a;
            cnt++;
        }
        if (tmp.find(b) != string::npos) return cnt;
        tmp += a;
        if (tmp.find(b) != string::npos) return cnt + 1;
        return -1;

=======

        int count = 1;
        string temp = a;
        while(temp.size() < b.size()){
            temp += a;
            count++;
        }
        if(temp.find(b) != string::npos) return count;
        temp += a;
        count++;
        if(temp.find(b) != string::npos) return count;
        return -1;

=======

        int n = a.size(), m = b.size();
        int ans = 0;
        string s;
        while (s.size() < m) {
            s += a;
            ans++;
        }
        if (s.find(b) != string::npos) return ans;
        s += a;
        ans++;
        if (s.find(b) != string::npos) return ans;
        return -1;

=======

        int n = a.length(), m = b.length();
        int i = 0;
        while (i < n) {
            int j = 0;
            while (j < m && a[(i + j) % n] == b[j]) j++;
            if (j == m) {
                if (i == 0 || (i + j) % n == 0) return (i + j) / n;
                else return (i + j) / n + 1;
            }
            i++;
        }
        return -1;

=======

        int n = a.size();
        int m = b.size();
        int k = 0;
        string s = "";
        while (s.size() < m) {
            s += a;
            k++;
        }
        if (s.find(b) != string::npos) return k;
        s += a;
        k++;
        if (s.find(b) != string::npos) return k;
        return -1;

=======

        int n = a.size();
        int m = b.size();
        int q = (m+n-1)/n;
        string s = a;
        for (int i = 1; i < q; i++) {
            s += a;
        }
        if (s.find(b) != string::npos) {
            return q;
        }
        s += a;
        if (s.find(b) != string::npos) {
            return q+1;
        }
        return -1;

=======

        int n = a.size();
        int m = b.size();
        int cnt = 0;
        string s = "";
        while(s.size() < m + n){
            s += a;
            cnt++;
        }
        if(s.find(b) != string::npos) return cnt;
        s += a;
        if(s.find(b) != string::npos) return cnt + 1;
        return -1;

=======

        int n = a.size(), m = b.size();
        int i = 0, j = 0;
        int k = 0;
        int times = 0;
        while (i < n && j < m) {
            if (a[i] == b[j]) {
                i++;
                j++;
            } else {
                i = 0;
                j = 0;
                k++;
                if (k == n) {
                    k = 0;
                    times++;
                }
            }
        }
        if (j == m) return times + 1;
        if (i == n) return times + 2;
        return -1;

=======

        int i = 0, j = 0, k = 0;
        int l = a.length(), m = b.length();
        while(i < l && j < m) {
            if(a[i] == b[j]) {
                i++;
                j++;
            } else {
                i = 0;
                j = 0;
                k++;
            }
        }
        if(j < m) return -1;
        return k + 1;
