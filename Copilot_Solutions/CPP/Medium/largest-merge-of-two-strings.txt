Synthesizing 10/10 solutions

=======

        string res;
        int i = 0, j = 0;
        while (i < word1.size() && j < word2.size()) {
            if (word1[i] > word2[j]) {
                res += word1[i];
                i++;
            } else if (word1[i] < word2[j]) {
                res += word2[j];
                j++;
            } else {
                int ii = i, jj = j;
                while (ii < word1.size() && jj < word2.size() && word1[ii] == word2[jj]) {
                    ii++;
                    jj++;
                }
                if (ii == word1.size()) {
                    res += word2[j];
                    j++;
                } else if (jj == word2.size()) {
                    res += word1[i];
                    i++;
                } else if (word1[ii] > word2[jj]) {
                    res += word1[i];
                    i++;
                } else {
                    res += word2[j];
                    j++;
                }
            }
        }
        while (i < word1.size()) {
            res += word1[i];
            i++;
        }
        while (j < word2.size()) {
            res += word2[j];
            j++;
        }
        return res;

=======

        string merge;
        int i = 0, j = 0;
        while (i < word1.size() && j < word2.size()) {
            if (word1[i] > word2[j]) {
                merge += word1[i++];
            } else if (word1[i] < word2[j]) {
                merge += word2[j++];
            } else {
                int k = 1;
                while (i + k < word1.size() && j + k < word2.size()) {
                    if (word1[i + k] == word2[j + k]) {
                        k++;
                    } else {
                        break;
                    }
                }
                if (i + k >= word1.size()) {
                    merge += word2[j++];
                } else if (j + k >= word2.size()) {
                    merge += word1[i++];
                } else {
                    if (word1[i + k] > word2[j + k]) {
                        merge += word1[i++];
                    } else {
                        merge += word2[j++];
                    }
                }
            }
        }
        if (i < word1.size()) {
            merge += word1.substr(i);
        }
        if (j < word2.size()) {
            merge += word2.substr(j);
        }
        return merge;

=======

        string result;
        int i = 0, j = 0;
        while (i < word1.size() && j < word2.size()) {
            if (word1[i] > word2[j]) {
                result.push_back(word1[i++]);
            } else if (word1[i] < word2[j]) {
                result.push_back(word2[j++]);
            } else {
                int k = 1;
                while (i + k < word1.size() && j + k < word2.size()) {
                    if (word1[i + k] > word2[j + k]) {
                        result.push_back(word1[i++]);
                        break;
                    } else if (word1[i + k] < word2[j + k]) {
                        result.push_back(word2[j++]);
                        break;
                    }
                    k++;
                }
                if (i + k == word1.size()) {
                    result.push_back(word2[j++]);
                } else if (j + k == word2.size()) {
                    result.push_back(word1[i++]);
                }
            }
        }
        while (i < word1.size()) {
            result.push_back(word1[i++]);
        }
        while (j < word2.size()) {
            result.push_back(word2[j++]);
        }
        return result;

=======

        string result;
        int i = 0, j = 0;
        while (i < word1.length() && j < word2.length()) {
            if (word1[i] > word2[j]) {
                result += word1[i];
                i++;
            } else if (word1[i] < word2[j]) {
                result += word2[j];
                j++;
            } else {
                int k = 1;
                while (i + k < word1.length() && j + k < word2.length() && word1[i + k] == word2[j + k]) {
                    k++;
                }
                if (i + k < word1.length() && j + k < word2.length()) {
                    if (word1[i + k] > word2[j + k]) {
                        result += word1[i];
                        i++;
                    } else {
                        result += word2[j];
                        j++;
                    }
                } else if (i + k < word1.length()) {
                    result += word1[i];
                    i++;
                } else {
                    result += word2[j];
                    j++;
                }
            }
        }
        while (i < word1.length()) {
            result += word1[i];
            i++;
        }
        while (j < word2.length()) {
            result += word2[j];
            j++;
        }
        return result;

=======

        int i = 0, j = 0;
        string result = "";
        while (i < word1.length() || j < word2.length()) {
            if (i < word1.length() && j < word2.length()) {
                if (word1[i] > word2[j]) {
                    result += word1[i++];
                } else if (word1[i] < word2[j]) {
                    result += word2[j++];
                } else {
                    int x = i + 1, y = j + 1;
                    while (x < word1.length() && y < word2.length()) {
                        if (word1[x] > word2[y]) {
                            result += word1[i++];
                            break;
                        } else if (word1[x] < word2[y]) {
                            result += word2[j++];
                            break;
                        } else {
                            x++;
                            y++;
                        }
                    }
                    if (x == word1.length() && y == word2.length()) {
                        result += word1[i++];
                    } else if (x == word1.length()) {
                        result += word2[j++];
                    } else if (y == word2.length()) {
                        result += word1[i++];
                    }
                }
            } else if (i < word1.length()) {
                result += word1[i++];
            } else if (j < word2.length()) {
                result += word2[j++];
            }
        }
        return result;

=======

        int i = 0, j = 0;
        string ans;
        while (i < word1.length() || j < word2.length()) {
            if (i < word1.length() && j < word2.length()) {
                if (word1[i] > word2[j]) {
                    ans.push_back(word1[i++]);
                } else if (word1[i] < word2[j]) {
                    ans.push_back(word2[j++]);
                } else {
                    if (word1.substr(i) > word2.substr(j)) {
                        ans.push_back(word1[i++]);
                    } else {
                        ans.push_back(word2[j++]);
                    }
                }
            } else if (i < word1.length()) {
                ans.push_back(word1[i++]);
            } else {
                ans.push_back(word2[j++]);
            }
        }
        return ans;

=======

        string res = "";
        while(word1.size() > 0 && word2.size() > 0) {
            if(word1 > word2) {
                res += word1[0];
                word1 = word1.substr(1, word1.size() - 1);
            } else {
                res += word2[0];
                word2 = word2.substr(1, word2.size() - 1);
            }
        }
        if(word1.size() > 0) {
            res += word1;
        } else {
            res += word2;
        }
        return res;

=======

        string merge = "";
        int i = 0, j = 0;
        while(i < word1.size() && j < word2.size()) {
            if (word1[i] > word2[j]) {
                merge.push_back(word1[i]);
                i++;
            } else if (word1[i] < word2[j]) {
                merge.push_back(word2[j]);
                j++;
            } else {
                int k = i + 1, l = j + 1;
                while(k < word1.size() && l < word2.size() && word1[k] == word2[l]) {
                    k++;
                    l++;
                }
                if (k < word1.size() && l < word2.size() && word1[k] > word2[l]) {
                    merge.push_back(word1[i]);
                    i++;
                } else {
                    merge.push_back(word2[j]);
                    j++;
                }
            }
        }
        while(i < word1.size()) {
            merge.push_back(word1[i]);
            i++;
        }
        while(j < word2.size()) {
            merge.push_back(word2[j]);
            j++;
        }
        return merge;

=======

        string merge;
        int i = 0, j = 0, n = word1.size(), m = word2.size();
        while(i < n || j < m){
            if(i == n){
                merge += word2[j];
                j++;
            }
            else if(j == m){
                merge += word1[i];
                i++;
            }
            else if(word1[i] < word2[j]){
                merge += word2[j];
                j++;
            }
            else if(word1[i] > word2[j]){
                merge += word1[i];
                i++;
            }
            else{
                int k = 1;
                while(i + k < n && j + k < m && word1[i+k] == word2[j+k]){
                    k++;
                }
                if(i + k == n){
                    merge += word2[j];
                    j++;
                }
                else if(j + k == m){
                    merge += word1[i];
                    i++;
                }
                else if(word1[i+k] < word2[j+k]){
                    merge += word2[j];
                    j++;
                }
                else{
                    merge += word1[i];
                    i++;
                }
            }
        }
        return merge;

=======

        int i = 0, j = 0;
        string ans = "";
        while(i<word1.size() || j<word2.size()){
            if(i==word1.size()){
                ans += word2.substr(j);
                break;
            }
            if(j==word2.size()){
                ans += word1.substr(i);
                break;
            }
            if(word1[i] > word2[j]){
                ans += word1[i];
                i++;
            }else if(word1[i] < word2[j]){
                ans += word2[j];
                j++;
            }else{
                int ii = i, jj = j;
                while(ii<word1.size() && jj<word2.size() && word1[ii]==word2[jj]){
                    ii++;
                    jj++;
                }
                if(ii==word1.size()){
                    ans += word2.substr(j);
                    break;
                }
                if(jj==word2.size()){
                    ans += word1.substr(i);
                    break;
                }
                if(word1[ii] > word2[jj]){
                    ans += word1[i];
                    i++;
                }else{
                    ans += word2[j];
                    j++;
                }
            }
        }
        return ans;
