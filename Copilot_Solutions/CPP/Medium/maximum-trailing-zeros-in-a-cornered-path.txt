Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = m - 1; i >= 0; --i) {
            for (int j = n - 1; j >= 0; --j) {
                if (i == m - 1 && j == n - 1) {
                    int cnt = 0;
                    while (grid[i][j] % 10 == 0) {
                        grid[i][j] /= 10;
                        ++cnt;
                    }
                    dp[i][j] = cnt;
                } else if (i == m - 1) {
                    int cnt = 0;
                    while (grid[i][j] % 10 == 0) {
                        grid[i][j] /= 10;
                        ++cnt;
                    }
                    dp[i][j] = min(dp[i][j + 1], cnt);
                } else if (j == n - 1) {
                    int cnt = 0;
                    while (grid[i][j] % 10 == 0) {
                        grid[i][j] /= 10;
                        ++cnt;
                    }
                    dp[i][j] = min(dp[i + 1][j], cnt);
                } else {
                    int cnt = 0;
                    while (grid[i][j] % 10 == 0) {
                        grid[i][j] /= 10;
                        ++cnt;
                    }
                    dp[i][j] = min(min(dp[i + 1][j], dp[i][j + 1]), cnt);
                }
            }
        }
        return dp[0][0];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 0;
                    continue;
                }
                int up = 0;
                if (i > 0) {
                    up = dp[i - 1][j];
                    int tmp = grid[i][j];
                    while (tmp % 5 == 0) {
                        tmp /= 5;
                        ++up;
                    }
                }
                int left = 0;
                if (j > 0) {
                    left = dp[i][j - 1];
                    int tmp = grid[i][j];
                    while (tmp % 5 == 0) {
                        tmp /= 5;
                        ++left;
                    }
                }
                dp[i][j] = max(up, left);
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int maxZeros = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int val = grid[i][j];
                int zeros = 0;
                while (val % 10 == 0) {
                    zeros++;
                    val /= 10;
                }
                if (i > 0 && j > 0) {
                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + zeros;
                } else if (i > 0) {
                    dp[i][j] = dp[i-1][j] + zeros;
                } else if (j > 0) {
                    dp[i][j] = dp[i][j-1] + zeros;
                } else {
                    dp[i][j] = zeros;
                }
                maxZeros = max(maxZeros, dp[i][j]);
            }
        }
        return maxZeros;
