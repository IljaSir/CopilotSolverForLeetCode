Synthesizing 10/10 solutions

=======

        unordered_map<int, int> freq;
        for (int i = 0; i < nums.size(); i++) {
            freq[nums[i]]++;
        }
        vector<int> res;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for (auto it = freq.begin(); it != freq.end(); it++) {
            pq.push({it->second, it->first});
            if (pq.size() > k) {
                pq.pop();
            }
        }
        while (!pq.empty()) {
            res.push_back(pq.top().second);
            pq.pop();
        }
        return res;

=======

        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++){
            m[nums[i]]++;
        }
        priority_queue<pair<int,int>> pq;
        for(auto it=m.begin();it!=m.end();it++){
            pq.push(make_pair(it->second,it->first));
        }
        vector<int> res;
        while(k--){
            res.push_back(pq.top().second);
            pq.pop();
        }
        return res;

=======

        unordered_map<int, int> freq;
        for (auto n : nums) {
            freq[n]++;
        }
        priority_queue<pair<int, int>> pq;
        for (auto it = freq.begin(); it != freq.end(); ++it) {
            pq.push({it->second, it->first});
        }
        vector<int> result;
        for (int i = 0; i < k; ++i) {
            result.push_back(pq.top().second);
            pq.pop();
        }
        return result;

=======

        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }
        priority_queue<pair<int, int>> pq;
        for (auto& p : freq) {
            pq.emplace(p.second, p.first);
        }
        vector<int> ans;
        while (k--) {
            ans.push_back(pq.top().second);
            pq.pop();
        }
        return ans;

=======

        unordered_map<int, int> freq;
        for (int n : nums) {
            freq[n]++;
        }
        priority_queue<pair<int, int>> pq;
        for (auto& [n, f] : freq) {
            pq.emplace(f, n);
            if (pq.size() > k) pq.pop();
        }
        vector<int> res;
        while (!pq.empty()) {
            res.push_back(pq.top().second);
            pq.pop();
        }
        return res;

=======

        unordered_map<int, int> count;
        for (int num : nums) {
            count[num]++;
        }
        priority_queue<pair<int, int>> q;
        for (auto& [num, freq] : count) {
            q.emplace(freq, num);
        }
        vector<int> ans;
        for (int i = 0; i < k; i++) {
            ans.emplace_back(q.top().second);
            q.pop();
        }
        return ans;

=======

        unordered_map<int, int> freq;
        for (auto &n : nums) {
            freq[n]++;
        }
        vector<vector<int>> buckets(nums.size() + 1);
        for (auto &p : freq) {
            buckets[p.second].push_back(p.first);
        }
        vector<int> res;
        for (int i = buckets.size() - 1; i >= 0 && res.size() < k; i--) {
            if (buckets[i].size()) {
                res.insert(res.end(), buckets[i].begin(), buckets[i].end());
            }
        }
        return res;

=======

        unordered_map<int, int> m;
        for (auto n : nums) {
            ++m[n];
        }
        priority_queue<pair<int, int>> pq;
        for (auto& [n, c] : m) {
            pq.push({c, n});
        }
        vector<int> res(k);
        for (int i = 0; i < k; ++i) {
            res[i] = pq.top().second;
            pq.pop();
        }
        return res;

=======

        map<int, int> freq;
        for(auto n: nums){
            freq[n]++;
        }
        vector<vector<int>> vec(nums.size()+1);
        for(auto p: freq){
            vec[p.second].push_back(p.first);
        }
        vector<int> result;
        for(int i=nums.size(); i>=0; i--){
            if(vec[i].size()>0){
                for(auto n: vec[i]){
                    result.push_back(n);
                    if(result.size()==k) return result;
                }
            }
        }
        return result;

=======

        // create a map to store the frequency of each element
        unordered_map<int, int> freq;
        for (int n : nums) {
            freq[n]++;
        }
        // create a vector of pairs to store the frequency and the element
        vector<pair<int, int>> vec;
        for (auto it = freq.begin(); it != freq.end(); it++) {
            vec.push_back(make_pair(it->second, it->first));
        }
        // sort the vector based on the frequency
        sort(vec.begin(), vec.end());
        // return the k most frequent elements
        vector<int> result;
        for (int i = vec.size() - 1; i >= vec.size() - k; i--) {
            result.push_back(vec[i].second);
        }
        return result;
