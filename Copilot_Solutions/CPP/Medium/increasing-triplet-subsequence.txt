Synthesizing 10/10 solutions

=======

        int a = INT_MAX, b = INT_MAX;
        for (int n : nums) {
            if (n <= a) a = n;
            else if (n <= b) b = n;
            else return true;
        }
        return false;

=======

        int first = INT_MAX;
        int second = INT_MAX;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] <= first) {
                first = nums[i];
            } else if (nums[i] <= second) {
                second = nums[i];
            } else {
                return true;
            }
        }
        return false;

=======

        int first = INT_MAX, second = INT_MAX;
        for (auto n : nums) {
            if (n <= first) {
                first = n;
            } else if (n <= second) {
                second = n;
            } else {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) {
            return false;
        }
        int a = INT_MAX;
        int b = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (nums[i] <= a) {
                a = nums[i];
            } else if (nums[i] <= b) {
                b = nums[i];
            } else {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        int small = INT_MAX, big = INT_MAX;
        for (int i = 0; i < n; i++) {
            if (nums[i] <= small) {
                small = nums[i];
            } else if (nums[i] <= big) {
                big = nums[i];
            } else {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[i] > nums[j]){
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            if(dp[i] >= 3) return true;
        }
        return false;

=======

        int n = nums.size();
        int min1 = INT_MAX, min2 = INT_MAX;
        for(int i = 0; i < n; i++) {
            if(nums[i] <= min1) {
                min1 = nums[i];
            } else if(nums[i] <= min2) {
                min2 = nums[i];
            } else {
                return true;
            }
        }
        return false;

=======

        int n = nums.size();
        if(n < 3) return false;
        int a = nums[0], b = INT_MAX;
        for(int i = 1; i < n; i++) {
            if(nums[i] > b) return true;
            else if(nums[i] > a) b = nums[i];
            else a = nums[i];
        }
        return false;

=======

        int n = nums.size();
        if (n < 3) return false;
        int min = nums[0], mid = INT_MAX;
        for (int i = 1; i < n; i++) {
            if (nums[i] > mid) {
                return true;
            } else if (nums[i] > min) {
                mid = nums[i];
            } else {
                min = nums[i];
            }
        }
        return false;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        int ans = 1;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[i] > nums[j]){
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans >= 3;
