Synthesizing 10/10 solutions

=======

        unordered_set<int> s;
        for (int i = 0; i < nums.size(); i++) {
            s.insert(nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (s.find(nums[i] - 1) == s.end()) {
                int j = nums[i] + 1;
                while (s.find(j) != s.end()) {
                    j++;
                }
                ans = max(ans, j - nums[i]);
            }
        }
        return ans;

=======

        unordered_set<int> s;
        for (int num : nums) {
            s.insert(num);
        }
        int longestStreak = 0;
        for (int num : nums) {
            if (!s.count(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;
                while (s.count(currentNum + 1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }
                longestStreak = max(longestStreak, currentStreak);
            }
        }
        return longestStreak;

=======

        unordered_set<int> s;
        for (int i = 0; i < nums.size(); ++i) {
            s.insert(nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (s.find(nums[i] - 1) == s.end()) {
                int j = nums[i];
                while (s.find(j) != s.end()) {
                    ++j;
                }
                ans = max(ans, j - nums[i]);
            }
        }
        return ans;

=======

        unordered_set<int> s(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (s.find(nums[i] - 1) == s.end()) {
                int j = nums[i];
                while (s.find(j) != s.end()) {
                    j++;
                }
                ans = max(ans, j - nums[i]);
            }
        }
        return ans;

=======

        unordered_set<int> s(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (s.find(nums[i]) != s.end()) {
                int left = nums[i] - 1, right = nums[i] + 1;
                while (s.find(left) != s.end()) {
                    s.erase(left);
                    left--;
                }
                while (s.find(right) != s.end()) {
                    s.erase(right);
                    right++;
                }
                ans = max(ans, right - left - 1);
            }
        }
        return ans;

=======

        unordered_set<int> s;
        for (int n : nums) s.insert(n);
        int ans = 0;
        for (int n : nums) {
            if (s.count(n - 1)) continue;
            int cur = n;
            int curL = 1;
            while (s.count(cur + 1)) {
                cur++;
                curL++;
            }
            ans = max(ans, curL);
        }
        return ans;

=======

        unordered_set<int> num_set;
        for(int num : nums) {
            num_set.insert(num);
        }
        int longest_streak = 0;
        for(int num : num_set) {
            if(!num_set.count(num-1)) {
                int current_num = num;
                int current_streak = 1;
                while(num_set.count(current_num+1)) {
                    current_num++;
                    current_streak++;
                }
                longest_streak = max(longest_streak, current_streak);
            }
        }
        return longest_streak;

=======

        unordered_set<int> set;
        for (auto n : nums) {
            set.insert(n);
        }
        int res = 0;
        for (auto n : nums) {
            if (set.find(n) != set.end()) {
                // find the left bound
                int l = n - 1;
                while (set.find(l) != set.end()) {
                    set.erase(l);
                    l--;
                }
                // find the right bound
                int r = n + 1;
                while (set.find(r) != set.end()) {
                    set.erase(r);
                    r++;
                }
                res = max(res, r - l - 1);
            }
        }
        return res;

=======

        unordered_set<int> s;
        int res = 0;
        for (int i : nums) {
            s.insert(i);
        }
        for (int i : nums) {
            if (s.find(i) == s.end()) {
                continue;
            }
            int len = 1;
            s.erase(i);
            int l = i - 1;
            while (s.find(l) != s.end()) {
                len++;
                s.erase(l);
                l--;
            }
            int r = i + 1;
            while (s.find(r) != s.end()) {
                len++;
                s.erase(r);
                r++;
            }
            res = max(res, len);
        }
        return res;

=======

        unordered_set<int> s;
        for (auto &n: nums) {
            s.insert(n);
        }
        int max = 0;
        for (auto &n: nums) {
            if (s.find(n-1) == s.end()) {
                int cur = n;
                int curMax = 1;
                while (s.find(cur+1) != s.end()) {
                    cur++;
                    curMax++;
                }
                if (curMax > max) {
                    max = curMax;
                }
            }
        }
        return max;
