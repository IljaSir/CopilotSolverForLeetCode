Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            }
        }
        int k = count;
        int i = 0;
        int j = 0;
        int maxCount = 0;
        while (j < n) {
            if (nums[j] == 1) {
                count--;
            }
            if (j - i + 1 < k) {
                j++;
            } else if (j - i + 1 == k) {
                maxCount = max(maxCount, k - count);
                if (nums[i] == 1) {
                    count++;
                }
                i++;
                j++;
            }
        }
        return k - maxCount;

=======

        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                count++;
            }
        }
        int i = 0;
        int j = 0;
        int maxOnes = 0;
        int currOnes = 0;
        while (j < n) {
            if (nums[j] == 1) {
                currOnes++;
            }
            if (j - i + 1 < count) {
                j++;
            } else if (j - i + 1 == count) {
                maxOnes = max(maxOnes, currOnes);
                if (nums[i] == 1) {
                    currOnes--;
                }
                i++;
                j++;
            }
        }
        return count - maxOnes;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            cnt += nums[i];
        }
        int i = 0;
        int j = 0;
        int maxcnt = 0;
        while (j < n) {
            if (nums[j] == 1) {
                maxcnt++;
            }
            if (j - i + 1 > cnt) {
                if (nums[i] == 1) {
                    maxcnt--;
                }
                i++;
            }
            j++;
        }
        return cnt - maxcnt;

=======

        int n = nums.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) cnt++;
        }
        int one = 0;
        for (int i = 0; i < cnt; i++) {
            if (nums[i] == 1) one++;
        }
        int ans = cnt - one;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) one--;
            if (nums[(i + cnt) % n] == 1) one++;
            ans = min(ans, cnt - one);
        }
        return ans;

=======

        int n = nums.size();
        int ones = count(nums.begin(), nums.end(), 1);
        int i = 0, j = 0, maxOnes = 0;
        while (j < n) {
            if (nums[j] == 1) maxOnes++;
            j++;
            if (j - i > ones) {
                if (nums[i] == 1) maxOnes--;
                i++;
            }
        }
        return ones - maxOnes;

=======

        int n = nums.size();
        int totalOnes = 0;
        for (int i = 0; i < n; i++) {
            totalOnes += nums[i];
        }
        int windowOnes = 0;
        for (int i = 0; i < totalOnes; i++) {
            windowOnes += nums[i];
        }
        int maxOnes = windowOnes;
        for (int i = 0, j = totalOnes; j < n; i++, j++) {
            windowOnes = windowOnes - nums[i] + nums[j];
            maxOnes = max(maxOnes, windowOnes);
        }
        return totalOnes - maxOnes;

=======

        int n = nums.size();
        int count = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) count++;
        }
        int i = 0;
        int j = 0;
        int maxCount = 0;
        while(j < n) {
            if(nums[j] == 1) count--;
            if(count == 0) {
                maxCount = max(maxCount, j - i + 1);
            }
            j++;
            if(j - i + 1 > maxCount) {
                if(nums[i] == 1) count++;
                i++;
            }
        }
        return n - maxCount;

=======

        int n = nums.size();
        int ones = 0;
        for (int x : nums) {
            if (x == 1) {
                ones++;
            }
        }
        int i = 0;
        for (int j = 0; j < ones; j++) {
            if (nums[j] == 1) {
                i++;
            }
        }
        int ans = ones - i;
        for (int j = ones; j < n; j++) {
            if (nums[j] == 1) {
                i++;
            }
            if (nums[j - ones] == 1) {
                i--;
            }
            ans = min(ans, ones - i);
        }
        return ans;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int maxOnes = 0;
        int ones = 0;
        int i = 0, j = 0;
        while (j < n) {
            if (nums[j] == 1) {
                ones++;
            }
            if (j - i + 1 > sum) {
                if (nums[i] == 1) {
                    ones--;
                }
                i++;
            }
            maxOnes = max(maxOnes, ones);
            j++;
        }
        return sum - maxOnes;

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        int k = 0;
        int z = 0;
        int max = 0;
        int count = 0;
        while (i < n) {
            if (nums[i] == 1) {
                count++;
            }
            i++;
        }
        while (j < count) {
            if (nums[j] == 0) {
                z++;
            }
            j++;
        }
        max = z;
        while (j < n) {
            if (nums[j] == 0) {
                z++;
            }
            if (nums[k] == 0) {
                z--;
            }
            if (z > max) {
                max = z;
            }
            j++;
            k++;
        }
        return count - max;
