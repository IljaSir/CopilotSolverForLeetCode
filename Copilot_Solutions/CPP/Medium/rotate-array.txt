Synthesizing 10/10 solutions

=======

        k %= nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin() + k);
        reverse(nums.begin() + k, nums.end());

=======

        int n = nums.size();
        k = k % n;
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin() + k);
        reverse(nums.begin() + k, nums.end());

=======

        int n = nums.size();
        k %= n;
        reverse(nums.begin(), nums.begin() + n - k);
        reverse(nums.begin() + n - k, nums.end());
        reverse(nums.begin(), nums.end());

=======

        int n = nums.size();
        k = k % n;
        int count = 0;
        for (int start = 0; count < n; start++) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % n;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
        }

=======

        k %= nums.size();
        if (k == 0) return;
        int n = nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin() + k);
        reverse(nums.begin() + k, nums.end());

=======

        int n = nums.size();
        k %= n;
        if (k == 0) return;
        vector<int> tmp(k);
        for (int i = 0; i < k; i++) {
            tmp[i] = nums[n - k + i];
        }
        for (int i = n - 1; i >= k; i--) {
            nums[i] = nums[i - k];
        }
        for (int i = 0; i < k; i++) {
            nums[i] = tmp[i];
        }

=======

        int n = nums.size();
        k = k % n;
        if (k == 0) return;
        vector<int> temp(k, 0);
        for (int i = 0; i < k; i++) {
            temp[i] = nums[n - k + i];
        }
        for (int i = n - 1; i >= k; i--) {
            nums[i] = nums[i - k];
        }
        for (int i = 0; i < k; i++) {
            nums[i] = temp[i];
        }

=======

        if (nums.size() == 0) {
            return;
        }
        k %= nums.size();
        if (k == 0) {
            return;
        }
        int i = 0, j = nums.size() - 1;
        while (i < j) {
            swap(nums[i++], nums[j--]);
        }
        i = 0;
        j = k - 1;
        while (i < j) {
            swap(nums[i++], nums[j--]);
        }
        i = k;
        j = nums.size() - 1;
        while (i < j) {
            swap(nums[i++], nums[j--]);
        }

=======

        int n = nums.size();
        if (k > n) k %= n;
        if (k == 0) return;
        vector<int> tmp(n);
        for (int i = 0; i < n; i++) {
            tmp[(i + k) % n] = nums[i];
        }
        nums = tmp;

=======

        int len = nums.size();
        if (len <= 1) return;
        k = k % len;
        if (k == 0) return;
        int i = 0;
        int j = len - 1;
        while (i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
        i = 0;
        j = k - 1;
        while (i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
        i = k;
        j = len - 1;
        while (i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
