Synthesizing 10/10 solutions

=======

        if (sentence1 == sentence2) return true;
        int i = 0, j = 0;
        while (i < sentence1.size() && j < sentence2.size()) {
            if (sentence1[i] == sentence2[j]) {
                ++i; ++j;
            } else {
                break;
            }
        }
        int k = sentence1.size() - 1, l = sentence2.size() - 1;
        while (k >= i && l >= j) {
            if (sentence1[k] == sentence2[l]) {
                --k; --l;
            } else {
                break;
            }
        }
        return i > k || j > l;

=======

        if (sentence1.size() < sentence2.size()) {
            swap(sentence1, sentence2);
        }
        int i = 0, j = 0;
        while (i < sentence1.size() && j < sentence2.size()) {
            if (sentence1[i] == sentence2[j]) {
                i++;
                j++;
            } else {
                if (i > 0 && sentence1[i - 1] == ' ') {
                    return false;
                }
                while (i < sentence1.size() && sentence1[i] != ' ') {
                    i++;
                }
            }
        }
        while (i < sentence1.size() && sentence1[i] == ' ') {
            i++;
        }
        return i == sentence1.size();

=======

        int i = 0, j = 0;
        int m = sentence1.size(), n = sentence2.size();
        while (i < m && j < n) {
            if (sentence1[i] == sentence2[j]) {
                ++i;
                ++j;
            } else {
                break;
            }
        }
        if (i == m && j == n) {
            return true;
        }
        int k = m - 1, l = n - 1;
        while (k >= 0 && l >= 0) {
            if (sentence1[k] == sentence2[l]) {
                --k;
                --l;
            } else {
                break;
            }
        }
        if (i == k + 1 || j == l + 1) {
            return true;
        }
        return false;

=======

        if (sentence1.size() < sentence2.size()) {
            swap(sentence1, sentence2);
        }
        int i = 0;
        int j = 0;
        while (i < sentence1.size() && j < sentence2.size()) {
            if (sentence1[i] == sentence2[j]) {
                i++;
                j++;
            } else {
                int k = i;
                int l = j;
                while (k < sentence1.size() && sentence1[k] != ' ') {
                    k++;
                }
                while (l < sentence2.size() && sentence2[l] != ' ') {
                    l++;
                }
                if (k - i != l - j) {
                    return false;
                }
                i = k;
                j = l;
            }
        }
        while (i < sentence1.size() && sentence1[i] == ' ') {
            i++;
        }
        while (j < sentence2.size() && sentence2[j] == ' ') {
            j++;
        }
        return i == sentence1.size() && j == sentence2.size();

=======

        int m = sentence1.size();
        int n = sentence2.size();
        if (m < n) {
            return areSentencesSimilar(sentence2, sentence1);
        }
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (sentence1[i] == sentence2[j]) {
                ++i;
                ++j;
            } else {
                break;
            }
        }
        if (i == m) {
            return true;
        }
        int k = m - 1;
        int l = n - 1;
        while (k >= 0 && l >= 0) {
            if (sentence1[k] == sentence2[l]) {
                --k;
                --l;
            } else {
                break;
            }
        }
        return k < i && l < j;

=======

        if (sentence1.length() < sentence2.length()) {
            swap(sentence1, sentence2);
        }
        if (sentence1.length() == sentence2.length()) {
            return sentence1 == sentence2;
        }
        int i = 0, j = 0;
        while (i < sentence1.length() && j < sentence2.length()) {
            if (sentence1[i] == sentence2[j]) {
                i++;
                j++;
            } else {
                break;
            }
        }
        if (j == sentence2.length()) {
            return true;
        }
        i = sentence1.length() - 1;
        j = sentence2.length() - 1;
        while (i >= 0 && j >= 0) {
            if (sentence1[i] == sentence2[j]) {
                i--;
                j--;
            } else {
                break;
            }
        }
        return j == -1;

=======

        if (sentence1 == sentence2) return true;
        vector<string> s1 = split(sentence1);
        vector<string> s2 = split(sentence2);
        if (s1.size() < s2.size()) {
            swap(s1, s2);
        }
        int i = 0, j = 0;
        while (i < s1.size() && j < s2.size()) {
            if (s1[i] == s2[j]) {
                ++i;
                ++j;
            } else {
                break;
            }
        }
        if (j == s2.size()) return true;
        i = s1.size() - 1;
        j = s2.size() - 1;
        while (i >= 0 && j >= 0) {
            if (s1[i] == s2[j]) {
                --i;
                --j;
            } else {
                break;
            }
        }
        if (j < 0) return true;
        return false;
    }
    vector<string> split(string& s) {
        vector<string> ret;
        int i = 0;
        while (i < s.size()) {
            int j = i;
            while (j < s.size() && s[j] != ' ') ++j;
            ret.push_back(s.substr(i, j - i));
            i = j + 1;
        }
        return ret;

=======

        if (sentence1.size() < sentence2.size()) {
            swap(sentence1, sentence2);
        }
        if (sentence1 == sentence2) {
            return true;
        }
        vector<string> s1, s2;
        split(sentence1, s1);
        split(sentence2, s2);
        if (s1.size() != s2.size()) {
            return false;
        }
        for (int i = 0; i < s1.size(); ++i) {
            if (s1[i] != s2[i]) {
                return false;
            }
        }
        return true;
    }

    void split(string s, vector<string>& v) {
        int pos = 0;
        while ((pos = s.find(' ')) != string::npos) {
            string token = s.substr(0, pos);
            v.push_back(token);
            s.erase(0, pos + 1);
        }
        v.push_back(s);

=======

        if (sentence1 == sentence2) return true;
        int m = sentence1.size();
        int n = sentence2.size();
        if (m < n) {
            string t = sentence1;
            sentence1 = sentence2;
            sentence2 = t;
            int tt = m;
            m = n;
            n = tt;
        }
        int i = 0;
        int j = 0;
        while (i < m && j < n) {
            if (sentence1[i] == sentence2[j]) {
                ++i;
                ++j;
            } else {
                break;
            }
        }
        if (j == n) {
            while (i < m) {
                if (sentence1[i] == ' ') {
                    ++i;
                } else {
                    break;
                }
            }
            if (i == m) {
                return true;
            }
        }
        i = m - 1;
        j = n - 1;
        while (i >= 0 && j >= 0) {
            if (sentence1[i] == sentence2[j]) {
                --i;
                --j;
            } else {
                break;
            }
        }
        if (j == -1) {
            while (i >= 0) {
                if (sentence1[i] == ' ') {
                    --i;
                } else {
                    break;
                }
            }
            if (i == -1) {
                return true;
            }
        }
        return false;

=======

        int i=0, j=0, n=sentence1.size(), m=sentence2.size();
        while(i<n && j<m){
            if(sentence1[i]==sentence2[j]) i++, j++;
            else break;
        }
        if(i==n || j==m) return true;
        i=n-1, j=m-1;
        while(i>=0 && j>=0){
            if(sentence1[i]==sentence2[j]) i--, j--;
            else break;
        }
        return i<0 || j<0;
