Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> prefix(n + 1);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= k; ++j) {
                dp[i] = min(dp[i], max(dp[i - j], prefix[i] - prefix[i - j]));
            }
        }
        return dp[n];

=======

        int n = nums.size();
        int dp[n][k+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= k; j++) {
                dp[i][j] = 0;
            }
        }
        for (int i = 0; i < n; i++) {
            dp[i][1] = nums[i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                int m = INT_MAX;
                for (int p = 0; p < i; p++) {
                    m = min(m, max(dp[p][j-1], nums[i]));
                }
                dp[i][j] = m;
            }
        }
        int m = INT_MAX;
        for (int i = 0; i < n; i++) {
            m = min(m, dp[i][k]);
        }
        return m;

=======

        int n = nums.size();
        vector<int> sum(n+1);
        for (int i = 0; i < n; ++i) sum[i+1] = sum[i] + nums[i];
        vector<int> dp(n);
        for (int i = 0; i < n; ++i) dp[i] = sum[n] - sum[i];
        for (int i = 1; i < k; ++i) {
            vector<int> ndp(n);
            for (int j = 0; j < n; ++j) {
                ndp[j] = dp[j];
                for (int k = j+2; k < n; ++k) {
                    ndp[j] = min(ndp[j], max(dp[k], sum[k] - sum[j]));
                }
            }
            dp = move(ndp);
        }
        return dp[0];

=======

        int n = nums.size();
        if (k == 1) {
            int ans = 0;
            for (int i = 0; i < n; i += 2) {
                ans = max(ans, nums[i]);
            }
            for (int i = 1; i < n; i += 2) {
                ans = max(ans, nums[i]);
            }
            return ans;
        }
        vector<int> dp(k + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            vector<int> dp2(k + 1, INT_MAX);
            for (int j = 0; j <= k; ++j) {
                if (dp[j] != INT_MAX) {
                    dp2[j] = min(dp2[j], dp[j]);
                    if (j < k) {
                        dp2[j + 1] = min(dp2[j + 1], dp[j] + nums[i]);
                    }
                }
            }
            dp = dp2;
        }
        return dp[k];
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) {
            return nums[0];
        }
        if (n == 2) {
            return max(nums[0], nums[1]);
        }
        if (n == 3) {
            return max(nums[0], max(nums[1], nums[2]));
        }
        return max(minCapability(vector<int>(nums.begin(), nums.end() - 1), (n + 1) / 2), minCapability(vector<int>(nums.begin() + 1, nums.end()), n / 2));

=======

        int n = nums.size();
        vector<int> dp(n, 0);
        vector<int> sum(n, 0);
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i-1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            dp[i] = sum[i];
        }
        for (int i = 1; i < k; i++) {
            vector<int> tmp(n, 0);
            for (int j = i; j < n; j++) {
                tmp[j] = dp[j-1];
                if (j > i) {
                    tmp[j] = min(tmp[j], tmp[j-1]);
                }
                tmp[j] = max(tmp[j], sum[j] - sum[j-i]);
            }
            dp = tmp;
        }
        return dp[n-1];

=======

        int n = nums.size();
        if (n < k) return 0;
        if (n == k) return *max_element(nums.begin(), nums.end());
        vector<vector<int>> dp(n, vector<int>(k + 1, INT_MAX));
        for (int i = 0; i < n; i++) {
            dp[i][1] = max(nums[i], i > 0 ? dp[i - 1][1] : 0);
            for (int j = 2; j <= k; j++) {
                for (int l = i - 1; l >= j - 2; l--) {
                    if (l >= 0) {
                        dp[i][j] = min(dp[i][j], max(dp[l][j - 1], nums[i]));
                    } else {
                        dp[i][j] = min(dp[i][j], nums[i]);
                    }
                }
            }
        }
        return dp[n - 1][k];

=======

        int n = nums.size();
        int dp[n][n][k+1];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                dp[i][j][1] = max(nums[i], nums[j]);
            }
        }
        for (int len = 2; len <= n; ++len) {
            for (int i = 0; i+len-1 < n; ++i) {
                int j = i+len-1;
                for (int m = 2; m <= k; ++m) {
                    for (int p = i; p < j; ++p) {
                        dp[i][j][m] = max(dp[i][j][m], min(dp[i][p][m-1], dp[p+1][j][1]));
                    }
                }
            }
        }
        return dp[0][n-1][k];

=======

        int n = nums.size();
        if (n == 1) return nums[0];
        if (k == 1) return max(nums[0], nums[n-1]);
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            int minNum = nums[i];
            for (int j = i; j < n; j++) {
                minNum = min(minNum, nums[j]);
                dp[i][j] = minNum;
            }
        }
        vector<int> f(n);
        for (int i = 0; i < n; i++) {
            f[i] = dp[0][i];
        }
        for (int i = 2; i <= k; i++) {
            vector<int> g(n);
            for (int j = i-1; j < n; j++) {
                g[j] = f[j-1] + dp[j][n-1];
                for (int k = j-1; k >= i-1; k--) {
                    g[j] = min(g[j], f[k-1] + dp[k][j]);
                }
            }
            f = g;
        }
        return f[n-1];

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            ans += nums[i];
        }
        int cur = ans;
        for (int i = 0; i < n - k; i += 2) {
            cur -= nums[i];
            cur += nums[i + k];
            ans = min(ans, cur);
        }
        return ans;
