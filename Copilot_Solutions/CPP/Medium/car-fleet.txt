Synthesizing 10/10 solutions

=======

        int n = position.size();
        vector<pair<int, int>> cars(n);
        for (int i = 0; i < n; ++i) {
            cars[i] = {position[i], speed[i]};
        }
        sort(cars.begin(), cars.end());
        int ans = 0;
        double cur = 0;
        for (int i = n - 1; i >= 0; --i) {
            double t = (target - cars[i].first) * 1.0 / cars[i].second;
            if (t > cur) {
                ++ans;
                cur = t;
            }
        }
        return ans;

=======

        int n = position.size();
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; i++) {
            cars.push_back({position[i], speed[i]});
        }
        sort(cars.begin(), cars.end());
        int fleets = 0;
        double time = 0;
        for (int i = n - 1; i >= 0; i--) {
            double t = (target - cars[i].first) * 1.0 / cars[i].second;
            if (t > time) {
                fleets++;
                time = t;
            }
        }
        return fleets;

=======

        int n = position.size();
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; ++i) {
            cars.push_back({position[i], speed[i]});
        }
        sort(cars.begin(), cars.end());
        int ans = 0;
        double cur = 0;
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i].first;
            int s = cars[i].second;
            double t = (double)(target - p) / s;
            if (t > cur) {
                ++ans;
                cur = t;
            }
        }
        return ans;

=======

        int n = position.size();
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; ++i) {
            cars.push_back({position[i], speed[i]});
        }
        sort(cars.begin(), cars.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        });
        int fleet = 0;
        double cur = 0;
        for (int i = 0; i < n; ++i) {
            double t = 1.0 * (target - cars[i].first) / cars[i].second;
            if (t > cur) {
                ++fleet;
                cur = t;
            }
        }
        return fleet;

=======

        int n = position.size();
        vector<pair<int, int>> cars(n);
        for (int i = 0; i < n; ++i) {
            cars[i] = make_pair(position[i], speed[i]);
        }
        sort(cars.begin(), cars.end(), [](pair<int, int>& a, pair<int, int>& b) {
            return a.first > b.first;
        });
        double t = 0;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (cars[i].second * t < target - cars[i].first) {
                t = 1.0 * (target - cars[i].first) / cars[i].second;
                ++ans;
            }
        }
        return ans;

=======

        int n = position.size();
        if (n == 0) return 0;
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; ++i) {
            cars.push_back({position[i], speed[i]});
        }
        sort(cars.begin(), cars.end());
        double t = (double)(target - cars[n - 1].first) / cars[n - 1].second;
        int ans = 1;
        for (int i = n - 2; i >= 0; --i) {
            double t1 = (double)(target - cars[i].first) / cars[i].second;
            if (t1 > t) {
                t = t1;
                ++ans;
            }
        }
        return ans;

=======

        int n = position.size();
        if (n == 1) return 1;
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; ++i) {
            cars.push_back({position[i], speed[i]});
        }
        sort(cars.begin(), cars.end());
        vector<double> times;
        for (int i = 0; i < n; ++i) {
            times.push_back((target - cars[i].first) * 1.0 / cars[i].second);
        }
        int cnt = 1;
        double max_time = times[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            if (times[i] > max_time) {
                ++cnt;
                max_time = times[i];
            }
        }
        return cnt;

=======

        int n = position.size();
        vector<pair<int, int>> cars;
        for (int i = 0; i < n; ++i)
            cars.push_back(make_pair(position[i], speed[i]));
        sort(cars.begin(), cars.end());
        int res = 0;
        double t = 0.0;
        for (int i = n - 1; i >= 0; --i) {
            double nt = (target - cars[i].first) * 1.0 / cars[i].second;
            if (nt > t) {
                t = nt;
                ++res;
            }
        }
        return res;

=======

        int n = position.size();
        if (n == 1) return 1;
        vector<pair<int, double>> cars;
        for (int i = 0; i < n; i++) {
            cars.push_back({position[i], (double)(target - position[i]) / speed[i]});
        }
        sort(cars.begin(), cars.end());
        int res = 0;
        double cur = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (cars[i].second > cur) {
                res++;
                cur = cars[i].second;
            }
        }
        return res;

=======

        int n = position.size();
        vector<array<int, 2>> cars(n);
        for (int i = 0; i < n; i++) {
            cars[i][0] = position[i];
            cars[i][1] = speed[i];
        }
        sort(cars.begin(), cars.end(), [](const array<int, 2> &a, const array<int, 2> &b) {
            return a[0] > b[0];
        });
        int ans = 0;
        double prev = 0;
        for (int i = 0; i < n; i++) {
            int pos = cars[i][0];
            int spd = cars[i][1];
            double t = (target - pos) * 1.0 / spd;
            if (t > prev) {
                ans++;
                prev = t;
            }
        }
        return ans;
