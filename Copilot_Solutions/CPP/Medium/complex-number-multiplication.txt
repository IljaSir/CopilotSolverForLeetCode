Synthesizing 10/10 solutions

=======

        int a1, b1, a2, b2;
        sscanf(num1.c_str(), "%d+%di", &a1, &b1);
        sscanf(num2.c_str(), "%d+%di", &a2, &b2);
        int a = a1 * a2 - b1 * b2;
        int b = a1 * b2 + a2 * b1;
        char buf[100];
        sprintf(buf, "%d+%di", a, b);
        return buf;

=======

        int a, b, c, d;
        sscanf(num1.c_str(), "%d+%di", &a, &b);
        sscanf(num2.c_str(), "%d+%di", &c, &d);
        return to_string(a * c - b * d) + "+" + to_string(a * d + b * c) + "i";

=======

        int a1 = 0, b1 = 0, a2 = 0, b2 = 0;
        sscanf(num1.c_str(), "%d+%di", &a1, &b1);
        sscanf(num2.c_str(), "%d+%di", &a2, &b2);
        return to_string(a1 * a2 - b1 * b2) + "+" + to_string(a1 * b2 + b1 * a2) + "i";

=======

        int i1 = num1.find('+');
        int i2 = num2.find('+');
        int r1 = stoi(num1.substr(0, i1));
        int r2 = stoi(num2.substr(0, i2));
        int i1_ = stoi(num1.substr(i1 + 1, num1.size() - i1 - 2));
        int i2_ = stoi(num2.substr(i2 + 1, num2.size() - i2 - 2));
        int r = r1 * r2 - i1_ * i2_;
        int i = r1 * i2_ + r2 * i1_;
        return to_string(r) + "+" + to_string(i) + "i";

=======

        int a = 0, b = 0, c = 0, d = 0;
        int i = 0;
        while (num1[i] != '+') {
            a = a * 10 + num1[i] - '0';
            i++;
        }
        i++;
        while (num1[i] != 'i') {
            b = b * 10 + num1[i] - '0';
            i++;
        }
        i = 0;
        while (num2[i] != '+') {
            c = c * 10 + num2[i] - '0';
            i++;
        }
        i++;
        while (num2[i] != 'i') {
            d = d * 10 + num2[i] - '0';
            i++;
        }
        int real = a * c - b * d;
        int imag = a * d + b * c;
        return to_string(real) + "+" + to_string(imag) + "i";

=======

        int a1 = 0, b1 = 0, a2 = 0, b2 = 0;
        int i = 0;
        while (num1[i] != '+') {
            a1 = a1 * 10 + (num1[i] - '0');
            i++;
        }
        i++;
        while (num1[i] != 'i') {
            b1 = b1 * 10 + (num1[i] - '0');
            i++;
        }
        i = 0;
        while (num2[i] != '+') {
            a2 = a2 * 10 + (num2[i] - '0');
            i++;
        }
        i++;
        while (num2[i] != 'i') {
            b2 = b2 * 10 + (num2[i] - '0');
            i++;
        }
        int a = a1 * a2 - b1 * b2;
        int b = a1 * b2 + b1 * a2;
        string ans = to_string(a) + "+" + to_string(b) + "i";
        return ans;

=======

        int a1, a2, b1, b2;
        char sign1, sign2;
        sscanf(num1.c_str(), "%d%c%d", &a1, &sign1, &b1);
        sscanf(num2.c_str(), "%d%c%d", &a2, &sign2, &b2);
        int a = a1 * a2 - b1 * b2;
        int b = a1 * b2 + a2 * b1;
        return to_string(a) + "+" + to_string(b) + "i";

=======

        auto a = parse_complex(num1);
        auto b = parse_complex(num2);
        return to_string(a.first * b.first - a.second * b.second) + "+" + to_string(a.first * b.second + a.second * b.first) + "i";

=======

        int real1 = 0, real2 = 0, imaginary1 = 0, imaginary2 = 0;
        int pos = 0;
        for (int i = 0; i < num1.size(); i++) {
            if (num1[i] == '+') {
                real1 = stoi(num1.substr(0, i));
                pos = i + 1;
            }
            if (num1[i] == 'i') {
                imaginary1 = stoi(num1.substr(pos, i - pos));
            }
        }
        for (int i = 0; i < num2.size(); i++) {
            if (num2[i] == '+') {
                real2 = stoi(num2.substr(0, i));
                pos = i + 1;
            }
            if (num2[i] == 'i') {
                imaginary2 = stoi(num2.substr(pos, i - pos));
            }
        }
        int real = real1 * real2 - imaginary1 * imaginary2;
        int imaginary = real1 * imaginary2 + real2 * imaginary1;
        return to_string(real) + "+" + to_string(imaginary) + "i";

=======

        int real1, real2, imag1, imag2;
        int real, imag;
        char c;
        stringstream ss1(num1), ss2(num2);
        ss1 >> real1 >> c >> imag1 >> c;
        ss2 >> real2 >> c >> imag2 >> c;
        real = real1 * real2 - imag1 * imag2;
        imag = real1 * imag2 + real2 * imag1;
        return to_string(real) + "+" + to_string(imag) + "i";
