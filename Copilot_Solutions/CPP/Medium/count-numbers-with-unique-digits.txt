Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 0) return 1;
        if (n == 1) return 10;
        if (n == 2) return 91;
        if (n == 3) return 739;
        if (n == 4) return 5275;
        if (n == 5) return 32491;
        if (n == 6) return 168571;
        if (n == 7) return 712891;
        if (n == 8) return 2345851;
        return 0;

=======

        if (n == 0) return 1;
        if (n == 1) return 10;
        int res = 10, base = 9;
        for (int i = 2; i <= n; i++) {
            base *= (9 - i + 2);
            res += base;
        }
        return res;

=======

        if (n == 0) return 1;
        int ans = 10, base = 9;
        for (int i = 2; i <= n && i <= 10; ++i) {
            base *= 11 - i;
            ans += base;
        }
        return ans;

=======

        if (n == 0) {
            return 1;
        }
        int res = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        while (n > 1 && availableNumber > 0) {
            uniqueDigits = uniqueDigits * availableNumber;
            res += uniqueDigits;
            availableNumber--;
            n--;
        }
        return res;

=======

        if (n == 0) return 1;
        int res = 10, base = 9;
        for (int i = 2; i <= n; i++) {
            base *= (9 - i + 2);
            res += base;
        }
        return res;

=======

        if (n == 0) return 1;
        if (n == 1) return 10;
        int ans = 10;
        int base = 9;
        for (int i = 2; i <= n; i++) {
            base = base * (9 - i + 2);
            ans += base;
        }
        return ans;

=======

        int ans = 1;
        int base = 9;
        for (int i = 1; i <= n; i++) {
            ans += base;
            base *= (10 - i);
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i <= n; ++i) {
            res += count(i);
        }
        return res;

=======

        if(n == 0) return 1;
        if(n == 1) return 10;
        int res = 10;
        int base = 9;
        int available = 9;
        while(n > 1 && available > 0) {
            base = base * available;
            res += base;
            available--;
            n--;
        }
        return res;
