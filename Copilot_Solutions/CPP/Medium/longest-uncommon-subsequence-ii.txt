Synthesizing 10/10 solutions

=======

        int ans = -1;
        for (int i = 0; i < strs.size(); i++) {
            int j = 0;
            for (; j < strs.size(); j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == strs.size()) {
                ans = max(ans, (int)strs[i].size());
            }
        }
        return ans;
    }
    
    bool isSubsequence(string& a, string& b) {
        int i = 0, j = 0;
        while (i < a.size() && j < b.size()) {
            if (a[i] == b[j]) i++;
            j++;
        }
        return i == a.size();

=======

        int n = strs.size();
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == n) {
                ans = max(ans, (int)strs[i].size());
            }
        }
        return ans;
    }
    bool isSubsequence(string& a, string& b) {
        int i = 0, j = 0;
        while (i < a.size() && j < b.size()) {
            if (a[i] == b[j]) {
                ++i;
            }
            ++j;
        }
        return i == a.size();

=======

        int n = strs.size();
        int res = -1;
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == n) res = max(res, (int)strs[i].size());
        }
        return res;
    }
    
    bool isSubsequence(string& s1, string& s2) {
        int m = s1.size(), n = s2.size();
        int i = 0, j = 0;
        while (i < m && j < n) {
            if (s1[i] == s2[j]) ++i;
            ++j;
        }
        return i == m;

=======

        int n = strs.size();
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int j = 0;
            for (; j < n; ++j) {
                if (i == j) continue;
                if (isSub(strs[i], strs[j])) break;
            }
            if (j == n) ans = max(ans, (int)strs[i].size());
        }
        return ans;
    }
    bool isSub(string& a, string& b) {
        int i = 0, j = 0;
        while (i < a.size() && j < b.size()) {
            if (a[i] == b[j]) ++i;
            ++j;
        }
        return i == a.size();

=======

        int n = strs.size();
        int res = -1;
        for (int i = 0; i < n; i++) {
            int j = 0;
            for (; j < n; j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == n) res = max(res, (int)strs[i].length());
        }
        return res;

=======

        int n = strs.size();
        int ans = -1;
        for (int i = 0; i < n; i++) {
            int j = 0;
            for (; j < n; j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) break;
            }
            if (j == n) {
                ans = max(ans, (int)strs[i].size());
            }
        }
        return ans;
    }
    
    bool isSubsequence(string& s, string& t) {
        int n = s.size();
        int m = t.size();
        int j = 0;
        for (int i = 0; i < n && j < m; i++) {
            if (s[i] == t[j]) j++;
        }
        return j == m;

=======

        int maxLen = -1;
        for (int i = 0; i < strs.size(); i++) {
            bool isSub = false;
            for (int j = 0; j < strs.size(); j++) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) {
                    isSub = true;
                    break;
                }
            }
            if (!isSub) {
                maxLen = max(maxLen, (int)strs[i].length());
            }
        }
        return maxLen;
    }
    
    bool isSubsequence(string s, string t) {
        int i = 0, j = 0;
        while (i < s.length() && j < t.length()) {
            if (s[i] == t[j]) {
                i++;
            }
            j++;
        }
        return i == s.length();

=======

        int n = strs.size();
        sort(strs.begin(), strs.end(), [](string a, string b) {
            return a.size() > b.size();
        });
        for (int i = 0; i < n; ++i) {
            bool isSub = false;
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                if (isSubsequence(strs[i], strs[j])) {
                    isSub = true;
                    break;
                }
            }
            if (!isSub) return strs[i].size();
        }
        return -1;

=======

        int n = strs.size();
        sort(strs.begin(), strs.end(), [](string& s1, string& s2) {
            return s1.size() > s2.size();
        });
        unordered_map<string, int> m;
        for (int i = 0; i < n; i++) {
            m[strs[i]]++;
        }
        for (int i = 0; i < n; i++) {
            if (m[strs[i]] == 1) {
                int j = 0;
                for (j = 0; j < n; j++) {
                    if (i == j) continue;
                    if (isSubsequence(strs[i], strs[j])) break;
                }
                if (j == n) return strs[i].size();
            }
        }
        return -1;
    }
    bool isSubsequence(string& s, string& t) {
        int i = 0, j = 0;
        while (i < s.size() && j < t.size()) {
            if (s[i] == t[j]) i++;
            j++;
        }
        return i == s.size();

=======

        unordered_map<string, int> mp;
        for (auto s : strs) mp[s]++;
        int res = -1;
        for (auto& [s, cnt] : mp) {
            if (cnt == 1) {
                bool isSub = false;
                for (auto& [t, cnt2] : mp) {
                    if (s.size() < t.size() && isSubsequence(s, t)) {
                        isSub = true;
                        break;
                    }
                }
                if (!isSub) res = max(res, (int)s.size());
            }
        }
        return res;
