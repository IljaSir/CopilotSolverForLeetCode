Synthesizing 10/10 solutions

=======

        stack<int> st;
        int num = 0;
        char op = '+';
        for (int i = 0; i < s.size(); i++) {
            if (isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
            }
            if ((!isdigit(s[i]) && !isspace(s[i])) || i == s.size() - 1) {
                if (op == '+') {
                    st.push(num);
                } else if (op == '-') {
                    st.push(-num);
                } else if (op == '*') {
                    int temp = st.top(); st.pop();
                    st.push(temp * num);
                } else if (op == '/') {
                    int temp = st.top(); st.pop();
                    st.push(temp / num);
                }
                op = s[i];
                num = 0;
            }
        }
        int res = 0;
        while (!st.empty()) {
            res += st.top(); st.pop();
        }
        return res;

=======

        stack<int> st;
        int num = 0;
        char sign = '+';
        for (int i = 0; i < s.size(); ++i) {
            if (isdigit(s[i])) {
                num = num * 10 + (s[i] - '0');
            }
            if (!isdigit(s[i]) && !isspace(s[i]) || i == s.size() - 1) {
                if (sign == '+') st.push(num);
                if (sign == '-') st.push(-num);
                if (sign == '*' || sign == '/') {
                    int tmp = sign == '*' ? st.top() * num : st.top() / num;
                    st.pop();
                    st.push(tmp);
                }
                sign = s[i];
                num = 0;
            }
        }
        int res = 0;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        return res;

=======

        int n = s.size();
        stack<int> st;
        int num = 0;
        char op = '+';
        for (int i = 0; i < n; i++) {
            if (isdigit(s[i])) {
                num = num * 10 + s[i] - '0';
            }
            if (!isdigit(s[i]) && !isspace(s[i]) || i == n - 1) {
                if (op == '+') {
                    st.push(num);
                } else if (op == '-') {
                    st.push(-num);
                } else if (op == '*') {
                    int tmp = st.top() * num;
                    st.pop();
                    st.push(tmp);
                } else if (op == '/') {
                    int tmp = st.top() / num;
                    st.pop();
                    st.push(tmp);
                }
                op = s[i];
                num = 0;
            }
        }
        int ans = 0;
        while (!st.empty()) {
            ans += st.top();
            st.pop();
        }
        return ans;

=======

        int res = 0;
        int num = 0;
        char op = '+';
        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (isdigit(s[i])) {
                num = num * 10 + s[i] - '0';
            }
            if (!isdigit(s[i]) && !isspace(s[i]) || i == s.size() - 1) {
                if (op == '+') {
                    st.push(num);
                } else if (op == '-') {
                    st.push(-num);
                } else if (op == '*') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp * num);
                } else if (op == '/') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp / num);
                }
                op = s[i];
                num = 0;
            }
        }
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        return res;

=======

        stack<int> st;
        int n = s.size();
        int num = 0;
        char sign = '+';
        for (int i = 0; i < n; i++) {
            if (s[i] >= '0') {
                num = num * 10 + (s[i] - '0');
            }
            if (s[i] < '0' && s[i] != ' ' || i == n - 1) {
                if (sign == '+') {
                    st.push(num);
                } else if (sign == '-') {
                    st.push(-num);
                } else if (sign == '*') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp * num);
                } else if (sign == '/') {
                    int tmp = st.top();
                    st.pop();
                    st.push(tmp / num);
                }
                sign = s[i];
                num = 0;
            }
        }
        int res = 0;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        return res;

=======

        stack<int> stk;
        int num = 0;
        char sign = '+';
        for(int i = 0; i < s.size(); i++) {
            if(isdigit(s[i])) {
                num = num * 10 + s[i] - '0';
            }
            if((!isdigit(s[i]) && s[i] != ' ') || i == s.size() - 1) {
                if(sign == '+') {
                    stk.push(num);
                }
                if(sign == '-') {
                    stk.push(-num);
                }
                if(sign == '*') {
                    int tmp = stk.top();
                    stk.pop();
                    stk.push(tmp * num);
                }
                if(sign == '/') {
                    int tmp = stk.top();
                    stk.pop();
                    stk.push(tmp / num);
                }
                sign = s[i];
                num = 0;
            }
        }
        int res = 0;
        while(!stk.empty()) {
            res += stk.top();
            stk.pop();
        }
        return res;

=======

        int result = 0;
        int num = 0;
        char op = '+';
        int n = s.size();
        for (int i = 0; i < n; i++) {
            if (s[i] >= '0') {
                num = num * 10 + s[i] - '0';
            }
            if (s[i] < '0' && s[i] != ' ' || i == n - 1) {
                if (op == '+') {
                    result += num;
                } else if (op == '-') {
                    result -= num;
                } else if (op == '*') {
                    result = result * num;
                } else if (op == '/') {
                    result = result / num;
                }
                num = 0;
                op = s[i];
            }
        }
        return result;

=======

        int result = 0;
        int num = 0;
        char op = '+';
        stack<int> nums;
        for (int i = 0; i < s.length(); ++i) {
            if (isdigit(s[i])) {
                num = num * 10 + s[i] - '0';
            }
            if (!isdigit(s[i]) && s[i] != ' ' || i == s.length() - 1) {
                switch (op) {
                    case '+':
                        nums.push(num);
                        break;
                    case '-':
                        nums.push(-num);
                        break;
                    case '*':
                        num *= nums.top();
                        nums.pop();
                        nums.push(num);
                        break;
                    case '/':
                        num = nums.top() / num;
                        nums.pop();
                        nums.push(num);
                        break;
                }
                num = 0;
                op = s[i];
            }
        }
        while (!nums.empty()) {
            result += nums.top();
            nums.pop();
        }
        return result;

=======

        int n = s.size();
        int sign = 1;
        int res = 0;
        int num = 0;
        stack<int> stk;
        for (int i = 0; i < n; i++) {
            char c = s[i];
            if (isdigit(c)) {
                num = num * 10 + c - '0';
            } else if (c == '+') {
                res += sign * num;
                sign = 1;
                num = 0;
            } else if (c == '-') {
                res += sign * num;
                sign = -1;
                num = 0;
            } else if (c == '(') {
                stk.push(res);
                stk.push(sign);
                res = 0;
                sign = 1;
            } else if (c == ')') {
                res += sign * num;
                num = 0;
                res *= stk.top(); stk.pop();
                res += stk.top(); stk.pop();
            }
        }
        if (num != 0) res += sign * num;
        return res;

=======

        int res = 0, n = s.size();
        int i = 0, num = 0;
        char op = '+';
        while (i < n) {
            if (s[i] == ' ') {
                i++;
                continue;
            }
            if (s[i] >= '0' && s[i] <= '9') {
                num = s[i] - '0';
                while (i + 1 < n && s[i + 1] >= '0' && s[i + 1] <= '9') {
                    num = num * 10 + s[i + 1] - '0';
                    i++;
                }
            }
            if (op == '+') {
                res += num;
            } else if (op == '-') {
                res -= num;
            } else if (op == '*') {
                res *= num;
            } else if (op == '/') {
                res /= num;
            }
            op = s[i];
            i++;
        }
        return res;
