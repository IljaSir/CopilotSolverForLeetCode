Synthesizing 10/10 solutions

=======

        int n = grid.size();
        queue<pair<int, int>> q;
        bool found = false;
        for (int i = 0; i < n; ++i) {
            if (found) break;
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j, q);
                    found = true;
                    break;
                }
            }
        }
        int ans = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                if (x > 0 && grid[x-1][y] == 1) return ans;
                if (x < n-1 && grid[x+1][y] == 1) return ans;
                if (y > 0 && grid[x][y-1] == 1) return ans;
                if (y < n-1 && grid[x][y+1] == 1) return ans;
                if (x > 0 && grid[x-1][y] == 0) {
                    grid[x-1][y] = 2;
                    q.push({x-1, y});
                }
                if (x < n-1 && grid[x+1][y] == 0) {
                    grid[x+1][y] = 2;
                    q.push({x+1, y});
                }
                if (y > 0 && grid[x][y-1] == 0) {
                    grid[x][y-1] = 2;
                    q.push({x, y-1});
                }
                if (y < n-1 && grid[x][y+1] == 0) {
                    grid[x][y+1] = 2;
                    q.push({x, y+1});
                }
            }
            ++ans;
        }
        return ans;

=======

        int n = grid.size();
        int m = grid[0].size();
        vector<pair<int, int>> island1;
        vector<pair<int, int>> island2;
        bool found = false;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    if (!found) {
                        dfs(grid, island1, i, j);
                    } else {
                        dfs(grid, island2, i, j);
                    }
                    found = true;
                }
            }
        }
        int ans = INT_MAX;
        for (auto& p1 : island1) {
            for (auto& p2 : island2) {
                ans = min(ans, abs(p1.first - p2.first) + abs(p1.second - p2.second) - 1);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid, vector<pair<int, int>>& island, int x, int y) {
        if (x < 0 || y < 0 || x >= grid.size() || y >= grid[0].size() || grid[x][y] == 0) {
            return;
        }
        island.push_back({x, y});
        grid[x][y] = 0;
        dfs(grid, island, x + 1, y);
        dfs(grid, island, x - 1, y);
        dfs(grid, island, x, y + 1);
        dfs(grid, island, x, y - 1);

=======

        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        vector<vector<bool>> visited(n, vector<bool>(m,false));
        queue<pair<int,int>> q;
        bool flag = false;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==1){
                    dfs(grid, i, j, n, m, visited, q);
                    flag = true;
                    break;
                }
            }
            if(flag) break;
        }
        int ans = 0;
        while(!q.empty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                for(int k=0; k<4; k++){
                    int nx = x + dir[k][0];
                    int ny = y + dir[k][1];
                    if(nx<0 || ny<0 || nx>=n || ny>=m || visited[nx][ny]) continue;
                    if(grid[nx][ny]==1) return ans;
                    visited[nx][ny] = true;
                    q.push({nx,ny});
                }
            }
            ans++;
        }
        return ans;

=======

        int n = grid.size();
        vector<vector<int>> visited(n, vector<int>(n, 0));
        int found = 0;
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dfs(grid, visited, q, i, j);
                    found = 1;
                    break;
                }
            }
            if (found) break;
        }
        int ans = 0;
        while (!q.empty()) {
            int len = q.size();
            for (int i = 0; i < len; i++) {
                int x = q.front().first, y = q.front().second;
                q.pop();
                if (x - 1 >= 0 && !visited[x - 1][y]) {
                    if (grid[x - 1][y] == 1) return ans;
                    q.push({x - 1, y});
                    visited[x - 1][y] = 1;
                }
                if (x + 1 < n && !visited[x + 1][y]) {
                    if (grid[x + 1][y] == 1) return ans;
                    q.push({x + 1, y});
                    visited[x + 1][y] = 1;
                }
                if (y - 1 >= 0 && !visited[x][y - 1]) {
                    if (grid[x][y - 1] == 1) return ans;
                    q.push({x, y - 1});
                    visited[x][y - 1] = 1;
                }
                if (y + 1 < n && !visited[x][y + 1]) {
                    if (grid[x][y + 1] == 1) return ans;
                    q.push({x, y + 1});
                    visited[x][y + 1] = 1;
                }
            }
            ans++;
        }
        return ans;

=======

        int N = grid.size();
        int M = grid[0].size();
        int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        vector<vector<bool>> visited(N,vector<bool>(M,false));
        queue<pair<int,int>> q;
        bool found = false;
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid[i][j]==1){
                    dfs(grid,visited,i,j,dir,q);
                    found = true;
                    break;
                }
            }
            if(found) break;
        }
        int ans = 0;
        while(!q.empty()){
            int sz = q.size();
            for(int i=0;i<sz;i++){
                auto cur = q.front();
                q.pop();
                int x = cur.first;
                int y = cur.second;
                for(int k=0;k<4;k++){
                    int nx = x+dir[k][0];
                    int ny = y+dir[k][1];
                    if(nx<0||nx>=N||ny<0||ny>=M) continue;
                    if(grid[nx][ny]==1) return ans;
                    if(grid[nx][ny]==0){
                        grid[nx][ny] = 2;
                        q.push({nx,ny});
                    }
                }
            }
            ans++;
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int x, int y, int dir[4][2], queue<pair<int,int>>& q){
        int N = grid.size();
        int M = grid[0].size();
        visited[x][y] = true;
        grid[x][y] = 2;
        q.push({x,y});
        for(int i=0;i<4;i++){
            int nx = x+dir[i][0];
            int ny = y+dir[i][1];
            if(nx<0||nx>=N||ny<0||ny>=M) continue;
            if(visited[nx][ny]) continue;
            if(grid[nx][ny]==1) dfs(grid,visited,nx,ny,dir,q);
        }

=======

        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dir = {{0,1},{1,0},{0,-1},{-1,0}};
        vector<pair<int,int>> v1,v2;
        bool found = false;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    if(!found){
                        dfs(grid,i,j,v1);
                        found = true;
                    }else{
                        dfs(grid,i,j,v2);
                    }
                }
            }
        }
        int ans = INT_MAX;
        for(int i=0;i<v1.size();i++){
            for(int j=0;j<v2.size();j++){
                ans = min(ans,abs(v1[i].first-v2[j].first)+abs(v1[i].second-v2[j].second)-1);
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid,int i,int j,vector<pair<int,int>>& v){
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dir = {{0,1},{1,0},{0,-1},{-1,0}};
        grid[i][j] = 2;
        v.push_back({i,j});
        for(int d=0;d<4;d++){
            int x = i+dir[d][0];
            int y = j+dir[d][1];
            if(x>=0 && y>=0 && x<n && y<m && grid[x][y]==1){
                dfs(grid,x,y,v);
            }
        }

=======

        int N = grid.size();
        queue<pair<int, int>> q;
        int dirs[5] = {0, 1, 0, -1, 0};
        int color = 2;
        bool found = false;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                if (grid[i][j] == 1) {
                    dfs(grid, q, i, j, color);
                    found = true;
                    break;
                }
            }
            if (found) break;
        }
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                auto [x, y] = q.front(); q.pop();
                for (int k = 0; k < 4; ++k) {
                    int nx = x + dirs[k];
                    int ny = y + dirs[k+1];
                    if (nx < 0 || nx >= N || ny < 0 || ny >= N || grid[nx][ny] == color) continue;
                    if (grid[nx][ny] == 1) return step;
                    grid[nx][ny] = color;
                    q.push({nx, ny});
                }
            }
            ++step;
        }
        return -1;
    }
    void dfs(vector<vector<int>>& grid, queue<pair<int, int>>& q, int x, int y, int color) {
        int N = grid.size();
        int dirs[5] = {0, 1, 0, -1, 0};
        grid[x][y] = color;
        q.push({x, y});
        for (int k = 0; k < 4; ++k) {
            int nx = x + dirs[k];
            int ny = y + dirs[k+1];
            if (nx < 0 || nx >= N || ny < 0 || ny >= N || grid[nx][ny] != 1) continue;
            dfs(grid, q, nx, ny, color);
        }

=======

        int m = grid.size();
        int n = grid[0].size();
        int i,j;
        int count = 0;
        int flag = 0;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j);
                    flag = 1;
                    break;
                }
            }
            if(flag==1)break;
        }
        queue<pair<int,int>> q;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()){
            count++;
            int len = q.size();
            for(i=0;i<len;i++){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if(x-1>=0 && grid[x-1][y]==1)return count;
                if(x+1<m && grid[x+1][y]==1)return count;
                if(y-1>=0 && grid[x][y-1]==1)return count;
                if(y+1<n && grid[x][y+1]==1)return count;
                if(x-1>=0 && grid[x-1][y]==0){
                    grid[x-1][y] = 2;
                    q.push({x-1,y});
                }
                if(x+1<m && grid[x+1][y]==0){
                    grid[x+1][y] = 2;
                    q.push({x+1,y});
                }
                if(y-1>=0 && grid[x][y-1]==0){
                    grid[x][y-1] = 2;
                    q.push({x,y-1});
                }
                if(y+1<n && grid[x][y+1]==0){
                    grid[x][y+1] = 2;
                    q.push({x,y+1});
                }
            }
        }
        return -1;

=======

        int n = grid.size();
        int m = grid[0].size();
        int island = 1;
        vector<vector<int>> islands;
        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    vector<int> island;
                    q.push({i, j});
                    while (!q.empty()) {
                        auto [x, y] = q.front();
                        q.pop();
                        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] != 1) {
                            continue;
                        }
                        grid[x][y] = island;
                        island.push_back(x * m + y);
                        for (auto& dir : dirs) {
                            q.push({x + dir[0], y + dir[1]});
                        }
                    }
                    islands.push_back(island);
                    island++;
                }
            }
        }
        int ans = 0;
        q.push({islands[0][0] / m, islands[0][0] % m});
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto [x, y] = q.front();
                q.pop();
                if (grid[x][y] == 2) {
                    return ans - 1;
                }
                for (auto& dir : dirs) {
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if (nx < 0 || nx >= n || ny < 0 || ny >= m || grid[nx][ny] == 1) {
                        continue;
                    }
                    grid[nx][ny] = 1;
                    q.push({nx, ny});
                }
            }
            ans++;
        }
        return ans;

=======

        int n = grid.size();
        int m = grid[0].size();
        int i, j, k, l, x, y;
        int min = 999999;
        queue<pair<int, int>> q;
        queue<pair<int, int>> q1;
        queue<pair<int, int>> q2;
        bool found = false;
        for(i = 0; i < n; i++) {
            for(j = 0; j < m; j++) {
                if(grid[i][j] == 1) {
                    q.push({i, j});
                    found = true;
                    break;
                }
            }
            if(found) {
                break;
            }
        }
        found = false;
        while(!q.empty()) {
            auto p = q.front();
            q.pop();
            x = p.first;
            y = p.second;
            grid[x][y] = 2;
            if(x > 0 && grid[x-1][y] == 1) {
                q.push({x-1, y});
            }
            if(x < n-1 && grid[x+1][y] == 1) {
                q.push({x+1, y});
            }
            if(y > 0 && grid[x][y-1] == 1) {
                q.push({x, y-1});
            }
            if(y < m-1 && grid[x][y+1] == 1) {
                q.push({x, y+1});
            }
        }
        for(i = 0; i < n; i++) {
            for(j = 0; j < m; j++) {
                if(grid[i][j] == 1) {
                    q1.push({i, j});
                    found = true;
                    break;
                }
            }
            if(found) {
                break;
            }
        }
        while(!q1.empty()) {
            auto p = q1.front();
            q1.pop();
            x = p.first;
            y = p.second;
            if(x > 0 && grid[x-1][y] == 0) {
                grid[x-1][y] = 3;
                q2.push({x-1, y});
            }
            if(x < n-1 && grid[x+1][y] == 0) {
                grid[x+1][y] =
=======

        int n = grid.size();
        queue<pair<int, int>> q;
        bool found = false;
        for (int i = 0; i < n; ++i) {
            if (found) break;
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dfs(grid, i, j, q);
                    found = true;
                    break;
                }
            }
        }
        int ans = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                if (x > 0 && grid[x-1][y] == 1) return ans;
                if (x < n-1 && grid[x+1][y] == 1) return ans;
                if (y > 0 && grid[x][y-1] == 1) return ans;
                if (y < n-1 && grid[x][y+1] == 1) return ans;
                if (x > 0 && grid[x-1][y] == 0) {
                    grid[x-1][y] = 2;
                    q.push({x-1, y});
                }
                if (x < n-1 && grid[x+1][y] == 0) {
                    grid[x+1][y] = 2;
                    q.push({x+1, y});
                }
                if (y > 0 && grid[x][y-1] == 0) {
                    grid[x][y-1] = 2;
                    q.push({x, y-1});
                }
                if (y < n-1 && grid[x][y+1] == 0) {
                    grid[x][y+1] = 2;
                    q.push({x, y+1});
                }
            }
            ++ans;
        }
        return ans;

=======

        int N = grid.size();
        int M = grid[0].size();
        int dir[4][2] = {{1,0},{-1,0},{0,1},{0,-1}};
        vector<vector<bool>> visited(N,vector<bool>(M,false));
        queue<pair<int,int>> q;
        bool found = false;
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid[i][j]==1){
                    dfs(grid,visited,i,j,dir,q);
                    found = true;
                    break;
                }
            }
            if(found) break;
        }
        int ans = 0;
        while(!q.empty()){
            int sz = q.size();
            for(int i=0;i<sz;i++){
                auto cur = q.front();
                q.pop();
                int x = cur.first;
                int y = cur.second;
                for(int k=0;k<4;k++){
                    int nx = x+dir[k][0];
                    int ny = y+dir[k][1];
                    if(nx<0||nx>=N||ny<0||ny>=M) continue;
                    if(grid[nx][ny]==1) return ans;
                    if(grid[nx][ny]==0){
                        grid[nx][ny] = 2;
                        q.push({nx,ny});
                    }
                }
            }
            ans++;
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int x, int y, int dir[4][2], queue<pair<int,int>>& q){
        int N = grid.size();
        int M = grid[0].size();
        visited[x][y] = true;
        grid[x][y] = 2;
        q.push({x,y});
        for(int i=0;i<4;i++){
            int nx = x+dir[i][0];
            int ny = y+dir[i][1];
            if(nx<0||nx>=N||ny<0||ny>=M) continue;
            if(visited[nx][ny]) continue;
            if(grid[nx][ny]==1) dfs(grid,visited,nx,ny,dir,q);
        }

=======

        int m = grid.size();
        int n = grid[0].size();
        int i,j;
        int count = 0;
        int flag = 0;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j);
                    flag = 1;
                    break;
                }
            }
            if(flag==1)break;
        }
        queue<pair<int,int>> q;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        while(!q.empty()){
            count++;
            int len = q.size();
            for(i=0;i<len;i++){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if(x-1>=0 && grid[x-1][y]==1)return count;
                if(x+1<m && grid[x+1][y]==1)return count;
                if(y-1>=0 && grid[x][y-1]==1)return count;
                if(y+1<n && grid[x][y+1]==1)return count;
                if(x-1>=0 && grid[x-1][y]==0){
                    grid[x-1][y] = 2;
                    q.push({x-1,y});
                }
                if(x+1<m && grid[x+1][y]==0){
                    grid[x+1][y] = 2;
                    q.push({x+1,y});
                }
                if(y-1>=0 && grid[x][y-1]==0){
                    grid[x][y-1] = 2;
                    q.push({x,y-1});
                }
                if(y+1<n && grid[x][y+1]==0){
                    grid[x][y+1] = 2;
                    q.push({x,y+1});
                }
            }
        }
        return -1;
