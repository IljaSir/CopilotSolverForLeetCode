Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (auto str : strs) {
            int zeros = 0, ones = 0;
            for (auto c : str) {
                if (c == '0') {
                    zeros++;
                } else {
                    ones++;
                }
            }
            for (int i = m; i >= zeros; i--) {
                for (int j = n; j >= ones; j--) {
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (string str : strs) {
            int zeros = 0, ones = 0;
            for (char c : str) {
                if (c == '0') {
                    zeros++;
                } else {
                    ones++;
                }
            }
            for (int i = m; i >= zeros; --i) {
                for (int j = n; j >= ones; --j) {
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (string s : strs) {
            int zeros = 0, ones = 0;
            for (char c : s) {
                if (c == '0') zeros++;
                else ones++;
            }
            for (int i = m; i >= zeros; i--) {
                for (int j = n; j >= ones; j--) {
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (auto& str : strs) {
            int ones = count(str.begin(), str.end(), '1');
            int zeros = str.size() - ones;
            for (int i = m; i >= zeros; i--) {
                for (int j = n; j >= ones; j--) {
                    dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (auto& str : strs) {
            int zeros = count(str.begin(), str.end(), '0');
            int ones = str.size() - zeros;
            for (int i = m; i >= zeros; --i) {
                for (int j = n; j >= ones; --j) {
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);
                }
            }
        }
        return dp[m][n];

=======

        int dp[m+1][n+1];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<strs.size();i++){
            int zeros=0,ones=0;
            for(int j=0;j<strs[i].length();j++){
                if(strs[i][j]=='0') zeros++;
                else ones++;
            }
            for(int j=m;j>=zeros;j--){
                for(int k=n;k>=ones;k--){
                    dp[j][k]=max(dp[j][k],1+dp[j-zeros][k-ones]);
                }
            }
        }
        return dp[m][n];

=======

        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (auto &s : strs) {
            int one = 0, zero = 0;
            for (auto &c : s) {
                if (c == '0') zero++;
                else one++;
            }
            for (int i = m; i >= zero; i--) {
                for (int j = n; j >= one; j--) {
                    dp[i][j] = max(dp[i][j], dp[i-zero][j-one]+1);
                }
            }
        }
        return dp[m][n];

=======

        int dp[m+1][n+1];
        memset(dp, 0, sizeof(dp));
        for (string &s : strs) {
            int zero = 0, one = 0;
            for (char c : s) {
                if (c == '0') {
                    zero++;
                } else {
                    one++;
                }
            }
            for (int i = m; i >= zero; i--) {
                for (int j = n; j >= one; j--) {
                    dp[i][j] = max(dp[i][j], dp[i - zero][j - one] + 1);
                }
            }
        }
        return dp[m][n];

=======

        int dp[m+1][n+1];
        memset(dp, 0, sizeof(dp));
        for(auto s:strs){
            int zeros = 0, ones = 0;
            for(auto c:s){
                if(c == '0')zeros++;
                else ones++;
            }
            for(int i=m; i>=zeros; i--){
                for(int j=n; j>=ones; j--){
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);
                }
            }
        }
        return dp[m][n];
