Synthesizing 10/10 solutions

=======

        int n = colors.size();
        int a = 0, b = 0;
        for (int i = 1; i < n - 1; ++i) {
            if (colors[i] == 'A' && colors[i - 1] == 'A' && colors[i + 1] == 'A') {
                ++a;
            }
            if (colors[i] == 'B' && colors[i - 1] == 'B' && colors[i + 1] == 'B') {
                ++b;
            }
        }
        return a > b;

=======

        int n = colors.size();
        int a = 0, b = 0;
        for (int i = 1; i < n - 1; ++i) {
            if (colors[i] == 'A' && colors[i - 1] == 'A' && colors[i + 1] == 'A') {
                ++a;
            } else if (colors[i] == 'B' && colors[i - 1] == 'B' && colors[i + 1] == 'B') {
                ++b;
            }
        }
        return a > b;

=======

        int n = colors.length();
        int a = 0;
        int b = 0;
        for (int i = 1; i < n - 1; ++i) {
            if (colors[i] == 'A' && colors[i - 1] == 'A' && colors[i + 1] == 'A') {
                ++a;
            }
            if (colors[i] == 'B' && colors[i - 1] == 'B' && colors[i + 1] == 'B') {
                ++b;
            }
        }
        return a > b;

=======

        int n = colors.size();
        int count = 0;
        for (int i = 1; i < n - 1; ++i) {
            if (colors[i] == colors[i - 1] && colors[i] == colors[i + 1]) {
                ++count;
            }
        }
        return count > (n - 2) / 2;

=======

        int n = colors.size();
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            if (colors[i] == 'A') {
                int j = i;
                while (j < n && colors[j] == 'A') ++j;
                if (j - i > 2) a += j - i - 2;
                i = j - 1;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (colors[i] == 'B') {
                int j = i;
                while (j < n && colors[j] == 'B') ++j;
                if (j - i > 2) b += j - i - 2;
                i = j - 1;
            }
        }
        return a > b;

=======

        int countA = 0, countB = 0;
        int n = colors.size();
        for (int i = 1; i < n - 1; ++i) {
            if (colors[i] == 'A' && colors[i - 1] == 'A' && colors[i + 1] == 'A') {
                ++countA;
            }
            if (colors[i] == 'B' && colors[i - 1] == 'B' && colors[i + 1] == 'B') {
                ++countB;
            }
        }
        return countA > countB;

=======

        int n = colors.size();
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            int j = i;
            while (j < n && colors[j] == colors[i]) ++j;
            if (colors[i] == 'A') a += max(0, j - i - 2);
            else b += max(0, j - i - 2);
            i = j - 1;
        }
        return a > b;

=======

        int n = colors.length();
        int a = 0, b = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && colors[j] == colors[i]) j++;
            if (colors[i] == 'A') a += max(0, j - i - 2);
            else b += max(0, j - i - 2);
            i = j - 1;
        }
        return a > b;

=======

        int n = colors.length();
        int a = 0, b = 0;
        for(int i = 1; i < n - 1; ++i) {
            if (colors[i] == 'A' && colors[i - 1] == 'A' && colors[i + 1] == 'A') {
                a++;
            }
            if (colors[i] == 'B' && colors[i - 1] == 'B' && colors[i + 1] == 'B') {
                b++;
            }
        }
        return a > b;

=======

        int len = colors.size();
        int a = 0, b = 0;
        int i = 0, j = 0;
        while (i < len) {
            while (j < len && colors[j] == colors[i]) {
                ++j;
            }
            if (colors[i] == 'A' && j - i > 2) {
                a += j - i - 2;
            }
            if (colors[i] == 'B' && j - i > 2) {
                b += j - i - 2;
            }
            i = j;
        }
        return a > b;
