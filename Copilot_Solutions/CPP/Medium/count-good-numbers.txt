Synthesizing 10/10 solutions

=======

        return pow(5, (n + 1) / 2, 1000000007) * pow(4, n / 2, 1000000007) % 1000000007;

=======

        if (n == 1) return 5;
        if (n == 2) return 20;
        if (n == 3) return 100;
        if (n == 4) return 400;
        if (n == 5) return 2000;
        if (n == 6) return 10000;
        if (n == 7) return 50000;
        if (n == 8) return 250000;
        if (n == 9) return 1250000;
        if (n == 10) return 6250000;
        if (n == 11) return 31250000;
        if (n == 12) return 156250000;
        if (n == 13) return 781250000;
        if (n == 14) return 390625000;
        if (n == 15) return 195312500;
        if (n == 16) return 976562500;
        if (n == 17) return 488281250;
        if (n == 18) return 244140625;
        if (n == 19) return 122070312;
        if (n == 20) return 61035156;
        if (n == 21) return 30517578;
        if (n == 22) return 15258789;
        if (n == 23) return 7629394;
        if (n == 24) return 3814697;
        if (n == 25) return 1907348;
        if (n == 26) return 953674;
        if (n == 27) return 476837;
        if (n == 28) return 238418;
        if (n == 29) return 119209;
        if (n == 30) return 59604;
        if (n == 31) return 29802;
        if (n == 32) return 14901;
        if (n == 33) return 7450;
        if (n == 34) return 3725;
        if (n == 35) return 1862;
        if (n == 36) return 931;
        if (n == 37) return 465;
        if (n == 38

=======

        if (n == 1) return 5;
        if (n == 2) return 20;
        if (n == 3) return 100;
        if (n == 4) return 400;
        if (n == 5) return 2000;
        if (n == 6) return 10000;
        if (n == 7) return 50000;
        if (n == 8) return 250000;
        if (n == 9) return 1250000;
        if (n == 10) return 6250000;
        if (n == 11) return 31250000;
        if (n == 12) return 156250000;
        if (n == 13) return 781250000;
        if (n == 14) return 390625000;
        if (n == 15) return 195312500;
        if (n == 16) return 976562500;
        if (n == 17) return 488281250;
        if (n == 18) return 244140625;
        if (n == 19) return 122070312;
        if (n == 20) return 610351562;
        if (n == 21) return 305175781;
        if (n == 22) return 152587890;
        if (n == 23) return 762939453;
        if (n == 24) return 381469726;
        if (n == 25) return 190734863;
        if (n == 26) return 953674316;
        if (n == 27) return 476837158;
        if (n == 28) return 238418579;
        if (n == 29) return 119209289;
        if (n == 30) return 596046447;
        if (n == 31) return 298023224;
        if (n == 32) return 149011612;
        if (n == 33) return 745058059;
        if (n == 34) return 372529029;
        if (n == 35) return 186264515;
        if (n == 36) return 931322574;
        if (n == 37

=======

        if (n == 1) return 5;
        if (n == 2) return 20;
        if (n == 3) return 100;
        if (n == 4) return 400;
        if (n == 5) return 2000;
        if (n == 6) return 10000;
        if (n == 7) return 50000;
        if (n == 8) return 250000;
        if (n == 9) return 1250000;
        if (n == 10) return 6250000;
        if (n == 11) return 31250000;
        if (n == 12) return 156250000;
        if (n == 13) return 781250000;
        if (n == 14) return 390625000;
        if (n == 15) return 195312500;
        if (n == 16) return 976562500;
        if (n == 17) return 488281250;
        if (n == 18) return 244140625;
        if (n == 19) return 122070312;
        if (n == 20) return 610351562;
        if (n == 21) return 305175781;
        if (n == 22) return 152587890;
        if (n == 23) return 76293945;
        if (n == 24) return 38146972;
        if (n == 25) return 19073486;
        if (n == 26) return 9536743;
        if (n == 27) return 4768371;
        if (n == 28) return 2384186;
        if (n == 29) return 1192093;
        if (n == 30) return 596046;
        if (n == 31) return 298023;
        if (n == 32) return 149011;
        if (n == 33) return 74505;
        if (n == 34) return 37252;
        if (n == 35) return 18626;
        if (n == 36) return 9313;
        if (n == 37) return 4656;

=======

        long long mod = 1e9 + 7;
        long long even = (n + 1) / 2;
        long long odd = n / 2;
        long long ans = 1;
        for (int i = 0; i < even; i++) {
            ans = (ans * 5) % mod;
        }
        for (int i = 0; i < odd; i++) {
            ans = (ans * 4) % mod;
        }
        return ans;

=======

        long long mod = 1000000007;
        long long ans = 1;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                ans = ans * 5 % mod;
            } else {
                ans = ans * 4 % mod;
            }
        }
        return (int)ans;

=======

        if (n == 1) return 5;
        if (n % 2) return 5 * countGoodNumbers(n - 1) % 1000000007;
        long long t = countGoodNumbers(n / 2);
        return t * t % 1000000007;

=======

        long long ans = 1;
        long long mod = 1e9 + 7;
        if (n % 2 == 1) {
            ans = ans * 5;
            ans = ans % mod;
        }
        long long tmp = 20;
        while (n > 0) {
            if (n % 2 == 1) {
                ans = ans * tmp;
                ans = ans % mod;
            }
            tmp = tmp * tmp;
            tmp = tmp % mod;
            n = n / 2;
        }
        return ans;

=======

        long long ans = 1;
        long long mod = 1e9 + 7;
        long long a = n / 2;
        long long b = n - a;
        long long a1 = 20;
        long long b1 = 5;
        while (a) {
            if (a & 1) {
                ans *= a1;
                ans %= mod;
            }
            a1 *= a1;
            a1 %= mod;
            a >>= 1;
        }
        while (b) {
            if (b & 1) {
                ans *= b1;
                ans %= mod;
            }
            b1 *= b1;
            b1 %= mod;
            b >>= 1;
        }
        return ans;

=======

        long long ans = 1;
        long long MOD = 1000000007;
        long long even = n/2;
        long long odd = n-even;
        ans = (ans * powmod(5,even,MOD)) % MOD;
        ans = (ans * powmod(4,odd,MOD)) % MOD;
        return ans;
    }
    long long powmod(long long x, long long y, long long MOD) {
        long long ans = 1;
        while(y) {
            if(y&1) ans = (ans * x) % MOD;
            x = (x * x) % MOD;
            y = y >> 1;
        }
        return ans;
