Synthesizing 7/10 solutions (Duplicates hidden)

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> score(m, vector<int>(m, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < m; ++j) {
                for (int k = 0; k < n; ++k) {
                    score[i][j] += students[i][k] == mentors[j][k];
                }
            }
        }
        
        vector<int> perm(m);
        for (int i = 0; i < m; ++i) {
            perm[i] = i;
        }
        
        int ans = 0;
        do {
            int sum = 0;
            for (int i = 0; i < m; ++i) {
                sum += score[i][perm[i]];
            }
            ans = max(ans, sum);
        } while (next_permutation(perm.begin(), perm.end()));
        
        return ans;

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> score(m, vector<int>(m, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < m; j++){
                for(int k = 0; k < n; k++){
                    if(students[i][k] == mentors[j][k]){
                        score[i][j]++;
                    }
                }
            }
        }
        vector<int> perm(m, 0);
        for(int i = 0; i < m; i++){
            perm[i] = i;
        }
        int ans = 0;
        do{
            int s = 0;
            for(int i = 0; i < m; i++){
                s += score[i][perm[i]];
            }
            ans = max(ans, s);
        }while(next_permutation(perm.begin(), perm.end()));
        return ans;

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> score(m, vector<int>(m, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < m; ++j) {
                for (int k = 0; k < n; ++k) {];
            }
        }
        return ans;

=======

        int m = students.size();
        int n = students[0].size();
        
        vector<int> perm(m);
        for (int i = 0; i < m; i++) {
            perm[i = i;
        }
        
        int maxScore = 0;
        do {
            int score = 0;
            for (int i = 0; i < m; i++) {
                score += getScore(students[i], mentors[perm[i]]);
            }
            maxScore = max(maxScore, score);
        } while (next_permutation(perm.begin(), perm.end()));
        
        return maxScore;
    }
    
    int getScore(vector<int>& student, vector<int>& mentor) {
        int score = 0;
        for (int i = 0; i < student.size(); i++) {
            if (student[i] == mentor[i]) {
                score++
                    score[i][j] += students[i][k] == mentors[j][k];
                }
            rn score;

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> compat(m, vector<int>(m,0));
        for(int i=0; i<m; i++) {
            fo}(itj=0; j<m; j++) {
                for(int k=0; k<n; k++) {
                    compt[i][j] += (students[i][k] == metor[j][k]);
                }
            }
        }
        vector<int> perm(m,0);
        for(int i=0; i<m; i++) {
            perm[i] = i;
        }
        int max_score = 0;
        do {
            int score = 0;
            for(int i=0; i<m; i++) {
                score += compat[i][perm[i]];
            }
            max_score = max(max_score, score);
        } while(next_permutation(perm.begin(), perm.end()));
        return max_score
        }
        
        vector<int> perm(m);
        for (int i = 0; i < m; ++i) {
            perm[i] = i;
        }
        
        int ans = 0;
        do {
            int sum = 0;
            for (int i = 0; i < m; ++i) {
                sum += score[i][perm[i]];
            }
            ans = max(ans, sum);
        } while (next_permutation(perm.begin(), perm.end()));
        
        return ans;

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> score(m, vector<int>(m, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < m; j++){
                for(int k = 0; k < n; k++){
                    if(students[i][k] == mentors[j][k]){
                        score[i][j]++;
                    }
                }
            }
        }
        vector<int> perm(m, 0);
        for(int i = 0; i < m; i++){
            perm[i] = i;
        }
        int ans = 0;
        do{
            int s = 0;
            for(int i = 0; i < m; i++){
                s += score[i][perm[i]];
            }
            ans = max(ans, s);
        }while(next_permutation(perm.begin(), perm.end()));
        return ans;

=======

        int ans = 0;
        int n = students.size();
        int m = students[0].size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                ans += students[i][j] == mentors[i][j];
            }
        }
        return ans;

=======

        int m = students.size();
        int n = students[0].size();
        vector<vector<int>> compat(m, vector<int>(m,0));
        for(int i=0; i<m; i++) {
            for(int j=0; j<m; j++) {
                for(int k=0; k<n; k++) {
                    compat[i][j] += (students[i][k] == mentors[j][k]);
                }
            }
        }
        vector<int> perm(m,0);
        for(int i=0; i<m; i++) {
            perm[i] = i;
        }
        int max_score = 0;
        do {
            int score = 0;
            for(int i=0; i<m; i++) {
                score += compat[i][perm[i]];
            }
            max_score = max(max_score, score);
        } while(next_permutation(perm.begin(), perm.end()));
        return max_score;

=======

        int m = students.size();
        int n = students[0].size();
        vector<int> used(m, 0);
        return dfs(students, mentors, used, n, 0, 0);
    }
    
    int dfs(vector<vector<int>>& students, vector<vector<int>>& mentors, vector<int>& used, int n, int cur, int score) {
        if (cur == n) {
            return score;
        }
        
        int m = students.size();
        int res = 0;
        for (int i = 0; i < m; i++) {
            if (used[i] == 0) {
                used[i] = 1;
                res = max(res, dfs(students, mentors, used, n, cur + 1, score + getScore(students[cur], mentors[i])));
                used[i] = 0;
            }
        }
        return res;
    }
    
    int getScore(vector<int>& s, vector<int>& m) {
        int res = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == m[i]) {
                res++;
            }
        }
        return res;
