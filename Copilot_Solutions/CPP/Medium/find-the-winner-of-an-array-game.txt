Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int winner = arr[0];
        int win_count = 0;
        for (int i = 1; i < n; ++i) {
            if (arr[i] > winner) {
                winner = arr[i];
                win_count = 1;
            } else {
                win_count++;
            }
            if (win_count == k) {
                break;
            }
        }
        return winner;

=======

        int n = arr.size();
        int win = arr[0];
        int win_count = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > win) {
                win = arr[i];
                win_count = 1;
            } else {
                win_count++;
            }
            if (win_count == k) {
                return win;
            }
        }
        return win;

=======

        int n = arr.size();
        int win = arr[0];
        int win_count = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > win) {
                win = arr[i];
                win_count = 1;
            } else {
                win_count++;
            }
            if (win_count == k) {
                break;
            }
        }
        return win;

=======

        int n = arr.size();
        int max = arr[0];
        int win = 0;
        for (int i = 1; i < n; i++) {
            if (arr[i] > max) {
                max = arr[i];
                win = 0;
            }
            if (++win == k) {
                return max;
            }
        }
        return max;

=======

        int n = arr.size();
        int count = 0;
        int win = arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] > win) {
                win = arr[i];
                count = 1;
            }
            else {
                count++;
            }
            if (count == k) {
                break;
            }
        }
        return win;

=======

        int n = arr.size();
        if (k >= n) {
            return *max_element(arr.begin(), arr.end());
        }
        int i = 0;
        int j = 1;
        int win = 0;
        while (win < k) {
            if (arr[i] > arr[j]) {
                win++;
                j++;
                if (j == n) {
                    j = 0;
                }
            } else {
                win = 1;
                i = j;
                j++;
                if (j == n) {
                    j = 0;
                }
            }
        }
        return arr[i];

=======

        int n = arr.size();
        int mx = max(arr[0], arr[1]);
        int count = 0;
        for(int i = 2; i < n; i++) {
            if(arr[i] > mx) {
                mx = arr[i];
                count = 0;
            }
            count++;
            if(count == k) break;
        }
        return mx;

=======

        int n = arr.size();
        int i = 1;
        int win = arr[0];
        int cnt = 0;
        while (i < n) {
            if (arr[i] > win) {
                win = arr[i];
                cnt = 0;
            }
            i++;
            cnt++;
            if (cnt == k) {
                return win;
            }
        }
        return win;

=======

        int n = arr.size();
        int win = 0;
        int winner = arr[0];
        for(int i=1; i<n; i++){
            if(arr[i] > winner){
                winner = arr[i];
                win = 0;
            }
            win++;
            if(win == k) break;
        }
        return winner;

=======

        int n = arr.size();
        int mx = max(arr[0], arr[1]);
        int count = 1;
        if (k >= n - 1) return *max_element(arr.begin(), arr.end());
        for (int i = 2; i < n; i++) {
            if (arr[i] > mx) {
                mx = arr[i];
                count = 1;
            } else {
                count++;
            }
            if (count == k) return mx;
        }
        return mx;
