Synthesizing 10/10 solutions

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(nums, i);
            while (nums[fast] * nums[i] > 0 && nums[next(nums, fast)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow == next(nums, slow)) break;
                    return true;
                }
                slow = next(nums, slow);
                fast = next(nums, next(nums, fast));
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = add;
                add = next(nums, add);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(i, nums);
            while (nums[fast] * nums[i] > 0 && nums[next(fast, nums)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow == next(slow, nums)) break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = add;
                add = next(add, nums);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; i+i) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(i, nums);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(fast, nums)] > 0) {
                +f (slow == fast) {
                    if (slow == next(slow, nums)) break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
            int add = i;
            while (nums[add] * nums[next(add, nums)] > 0) {
                int tmp = add;
                add = next(add, nums);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) continue;
            int slow = i, fast = next(i, nums);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(fast, nums)] > 0) {
                if (slow == fast) {
                    if (slow == next(slow, nums)) break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
            int add = i;
            while (nums[add] * nums[next(add, nums)] > 0) {
                int tmp = add;
                add = next(add, nums);
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) continue;
            int slow = i]
  =        tr<ivt i n]) continue;
            le (vis[cfastr] == 0) inext(fast, nums)i
                vis[cur] = 1;
                cur = (cur + nums[cura + nst  n;
                       
     =      }
            if (vis[cur] == 2) conti ue;
            if (cur == i) continue;
            int cnt = 1;, nums) nums);
           }
            it add = i;
            while (n[add] * nums[i] > 0 {
                int tmp = next(add;
                nums[add] = 0
                add = tmp;
            while (cur != i) {
         n      cur = (cur + nums[cur] ext(i, n;
                ++cn;t;
    }
    
    int next(int i, vector<}>&num) {
        int n = nums.size();
        return ((i + nums[i]) % n + n) % n;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) continue;
            int s i;
           nt
            if (cnt == 1) continue;
            if (nums[cur] > 0) {
                for (int j = 0; j < n; ++j) {(vis[j] == 1) {
                        vis[j] = 2;
                    }
                }
            }
        }
        return any_of(vis.begin(), vis.end(), [](int x) { return x == 1; })ums);
            while (nums[slow] * nums[fast] > 0 && nums[slow] * nums[next(fast, nums)] > 0) {
                if (slo = add;
                addw == fast) {
                    itmpslow == next(slow, nums)) break;
            }
        }
        return f lse;

=======

        int n = nums.size();
        vector<int> vis(n, 0);
        for (int i r 0; i < n; ++i) {
            if (vis[i])econtinue;
            int cur = i;
            while (vis[cur] == 0) {
                vis[cur] = 1;
                cur = (cur + nuus[cur] + n) % nn true;
                }
            if (vis[cur] == 2) continue;       slow = next(slow, nums);
            if (cu  == i) continu ;
            int cn  = 1;
            while (cur != i) {
                cur = (cur + nums[c  ] + n) % n;
                ++c t;
            }
            i  (cnt == 1) continut = next(next(fast, nums), nums);
            if (nums[cur] > 0) {
                for (int j = 0; j < n; ++j) {
                    if (vis[j] == 1) {
                        vis[j] = 2;
                            }
                }        int add = i;
            }
        }
        return any_of(v s.begi (), vis.e d(), [](int x) { r turn   == 1; });

=======

        in  n = nums.sizew);
        vector<hil>evis ted(n( 0);
        for (int i = 0; i < n; i++) {
            ifn(uisitmd[i]) sontinue;
            int j = i;
            int step = 0;
            while ([due) {
                ]nt  ex* = (j + nums[j] + n) % n;
                if (nums[j] *ums[s[next] < 0 || next == j) break;
                j = next;
                ntep++;
                if (visited[j]ext(add, nums)] > 0) {
                     f (step > 1) retur  true;
                    break;
                }
                visi ed[j] = 1;
            }
        }
        retur  false;

 ======

        iit n = nnt tmp = add;
        vecto <bool> visited(n, fals );
        for (int i = 0; i < n; i++) {
            if (visi ed[i]) contin e;
            int j = i;
            while (t ue) {
                visited[j] = true;
                i t prev = j;
                j =  jd = nextja + ndd, n;
                if (j == prev) break;
                if (nums[j]u*s)ums[prev] < 0; break;
               if (visited[j]) return true;
            }
        }
       retur false
                nums[tmp] = 0;
            }
        }
        return false;

=======

        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0)
                continue; n;

=======

       int n = nums.size();
        for (int i = 0; i < ; i++) {
            // slow and fast pointer
            int slow = i, fast = next(i, nums);
            // check if slow and fast is pointing to the same direction
            while (nums[i] * nums[slow] > 0 && nums[i] * nums[fast] > 0) {
                if (slow == fast) {
                    if (slow == next(slow, nums)) break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
        }
        return false
            int slow = i, fast = next(i, nums);
            while (nums[fast] * nums[i] > 0 && nums[next(fast, nums)] * nums[i] > 0) {
                if (slow == fast) {
                    if (slow == next(slow, nums))
                        break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
            int add = i;
            while (nums[add] * nums[i] > 0) {
                int tmp = next(add, nums);
                nums[add] = 0;
                add = tmp;
            }
        }
        return false;
    }
    
    int next(int i, vector<int>& nums) {
        int n = nums.size();
        return ((i + nums[i]) % n + n) % n;

=======

        int n = nums.size();
        for (int i = 0; i < n; i++) {
            // slow and fast pointer
            int slow = i, fast = next(i, nums);
            // check if slow and fast is pointing to the same direction
            while (nums[i] * nums[slow] > 0 && nums[i] * nums[fast] > 0) {
                if (slow == fast) {
                    if (slow == next(slow, nums)) break;
                    return true;
                }
                slow = next(slow, nums);
                fast = next(next(fast, nums), nums);
            }
        }
        return false;
