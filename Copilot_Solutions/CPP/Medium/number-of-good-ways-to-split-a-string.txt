Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> left(26, 0), right(26, 0);
        for (int i = 0; i < n; ++i) {
            ++right[s[i] - 'a'];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            ++left[s[i] - 'a'];
            --right[s[i] - 'a'];
            int l = 0, r = 0;
            for (int j = 0; j < 26; ++j) {
                if (left[j] > 0) ++l;
                if (right[j] > 0) ++r;
            }
            if (l == r) ++res;
        }
        return res;

=======

        int n = s.size();
        vector<int> left(26, 0), right(26, 0);
        for (char c : s) {
            right[c - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            left[s[i] - 'a']++;
            right[s[i] - 'a']--;
            int left_cnt = 0, right_cnt = 0;
            for (int j = 0; j < 26; j++) {
                if (left[j] > 0) left_cnt++;
                if (right[j] > 0) right_cnt++;
            }
            if (left_cnt == right_cnt) res++;
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        vector<int> l(26, 0);
        vector<int> r(26, 0);
        for (int i = 0; i < n; i++) {
            r[s[i] - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            l[s[i] - 'a']++;
            r[s[i] - 'a']--;
            int lc = 0, rc = 0;
            for (int j = 0; j < 26; j++) {
                if (l[j] > 0) lc++;
                if (r[j] > 0) rc++;
            }
            if (lc == rc) ans++;
        }
        return ans;

=======

        int n = s.size();
        vector<int> l(n), r(n);
        unordered_set<char> st;
        for (int i = 0; i < n; ++i) {
            st.insert(s[i]);
            l[i] = st.size();
        }
        st.clear();
        for (int i = n - 1; i >= 0; --i) {
            st.insert(s[i]);
            r[i] = st.size();
        }
        int ans = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (l[i] == r[i + 1]) ++ans;
        }
        return ans;

=======

        int n = s.size();
        vector<int> left(26, 0), right(26, 0);
        int leftCount = 0, rightCount = 0;
        for (int i = 0; i < n; ++i) {
            if (right[s[i] - 'a'] == 0) {
                ++rightCount;
            }
            ++right[s[i] - 'a'];
        }
        int res = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (left[s[i] - 'a'] == 0) {
                ++leftCount;
            }
            ++left[s[i] - 'a'];
            --right[s[i] - 'a'];
            if (right[s[i] - 'a'] == 0) {
                --rightCount;
            }
            if (leftCount == rightCount) {
                ++res;
            }
        }
        return res;

=======

        int n = s.length();
        vector<int> left(26, 0);
        vector<int> right(26, 0);
        int leftCount = 0;
        int rightCount = 0;
        for (int i = 0; i < n; ++i) {
            if (right[s[i] - 'a'] == 0) {
                ++rightCount;
            }
            ++right[s[i] - 'a'];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (left[s[i] - 'a'] == 0) {
                ++leftCount;
            }
            ++left[s[i] - 'a'];
            --right[s[i] - 'a'];
            if (right[s[i] - 'a'] == 0) {
                --rightCount;
            }
            if (leftCount == rightCount) {
                ++ans;
            }
        }
        return ans;

=======

        int n = s.size();
        int left[26] = {0};
        int right[26] = {0};
        int cntl = 0;
        int cntr = 0;
        for (int i = 0; i < n; ++i) {
            if (right[s[i] - 'a'] == 0) {
                ++cntr;
            }
            ++right[s[i] - 'a'];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (left[s[i] - 'a'] == 0) {
                ++cntl;
            }
            ++left[s[i] - 'a'];
            --right[s[i] - 'a'];
            if (right[s[i] - 'a'] == 0) {
                --cntr;
            }
            if (cntl == cntr) {
                ++res;
            }
        }
        return res;

=======

        int n = s.size();
        int left[26] = {0}, right[26] = {0};
        for (char c : s) right[c - 'a']++;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            left[s[i] - 'a']++;
            right[s[i] - 'a']--;
            int leftcnt = 0, rightcnt = 0;
            for (int j = 0; j < 26; ++j) {
                if (left[j] > 0) leftcnt++;
                if (right[j] > 0) rightcnt++;
            }
            if (leftcnt == rightcnt) res++;
        }
        return res;

=======

        int n = s.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        unordered_set<char> leftSet;
        for (int i = 0; i < n; i++) {
            leftSet.insert(s[i]);
            left[i] = leftSet.size();
        }
        unordered_set<char> rightSet;
        for (int i = n - 1; i >= 0; i--) {
            rightSet.insert(s[i]);
            right[i] = rightSet.size();
        }
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            if (left[i] == right[i + 1]) {
                ans++;
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> left(n, 0), right(n, 0);
        int cnt = 0;
        unordered_set<char> st;
        for (int i = 0; i < n; ++i) {
            if (st.count(s[i]) == 0) {
                st.insert(s[i]);
                cnt++;
            }
            left[i] = cnt;
        }
        cnt = 0;
        st.clear();
        for (int i = n - 1; i >= 0; --i) {
            if (st.count(s[i]) == 0) {
                st.insert(s[i]);
                cnt++;
            }
            right[i] = cnt;
        }
        int res = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (left[i] == right[i + 1]) {
                res++;
            }
        }
        return res;
