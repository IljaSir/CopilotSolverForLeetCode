Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(cookies.begin(), cookies.end());
        int n = cookies.size();
        int ans = INT_MAX;
        for (int i = 0; i + k - 1 < n; ++i) {
            ans = min(ans, cookies[i + k - 1] - cookies[i]);
        }
        return ans;

=======

        int n = cookies.size();
        sort(cookies.begin(), cookies.end());
        int ans = INT_MAX;
        for (int i = 0; i + k <= n; ++i) {
            ans = min(ans, cookies[i + k - 1] - cookies[i]);
        }
        return ans;

=======

        int n = cookies.size();
        sort(cookies.begin(), cookies.end());
        int ans = INT_MAX;
        for (int i = 0; i < n - k + 1; ++i) {
            ans = min(ans, cookies[i + k - 1] - cookies[i]);
        }
        return ans;

=======

        sort(cookies.begin(), cookies.end());
        int n = cookies.size();
        int res = INT_MAX;
        for (int i = 0; i < n - k + 1; i++) {
            res = min(res, cookies[i + k - 1] - cookies[i]);
        }
        return res;

=======

        int n = cookies.size();
        sort(cookies.begin(), cookies.end());
        int ans = 1e9;
        for (int i = 0; i + k - 1 < n; ++i) {
            ans = min(ans, cookies[i + k - 1] - cookies[i]);
        }
        return ans;

=======

        int n = cookies.size();
        sort(cookies.begin(), cookies.end());
        int minUnfairness = INT_MAX;
        for (int i = 0; i < n - k + 1; ++i) {
            int unfairness = cookies[i + k - 1] - cookies[i];
            if (unfairness < minUnfairness) {
                minUnfairness = unfairness;
            }
        }
        return minUnfairness;

=======

        int n = cookies.size();
        sort(cookies.begin(), cookies.end());
        int ans = INT_MAX;
        for (int i = 0; i + k <= n; ++i) {
            int cur = 0;
            for (int j = i; j < i + k; ++j) {
                cur += cookies[j];
            }
            ans = min(ans, cookies[i + k - 1] * k - cur);
        }
        return ans;

=======

        sort(cookies.begin(), cookies.end());
        int n = cookies.size();
        int res = INT_MAX;
        for (int i = 0; i < n - k + 1; i++) {
            int unfair = 0;
            for (int j = i; j < i + k; j++) {
                unfair += cookies[j] - cookies[i];
            }
            res = min(res, unfair);
        }
        return res;

=======

        int n = cookies.size();
        int unfairness = INT_MAX;
        sort(cookies.begin(), cookies.end());
        for (int i = 0; i <= n-k; i++) {
            int min = cookies[i];
            int max = cookies[i+k-1];
            int diff = max - min;
            if (diff < unfairness) unfairness = diff;
        }
        return unfairness;
