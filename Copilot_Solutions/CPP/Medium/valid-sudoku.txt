Synthesizing 10/10 solutions

=======

        vector<vector<bool>> row(9, vector<bool>(9, false));
        vector<vector<bool>> col(9, vector<bool>(9, false));
        vector<vector<bool>> box(9, vector<bool>(9, false));
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                int num = board[i][j] - '1';
                if (row[i][num] || col[j][num] || box[i / 3 * 3 + j / 3][num]) {
                    return false;
                }
                row[i][num] = true;
                col[j][num] = true;
                box[i / 3 * 3 + j / 3][num] = true;
            }
        }
        return true;

=======

        int row[9][9] = {0};
        int col[9][9] = {0};
        int box[9][9] = {0};
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0' - 1;
                    int k = i / 3 * 3 + j / 3;
                    if (row[i][num] || col[j][num] || box[k][num]) return false;
                    row[i][num] = col[j][num] = box[k][num] = 1;
                }
            }
        }
        return true;

=======

        int row[9][9] = {0};
        int col[9][9] = {0};
        int box[9][9] = {0};
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int num = board[i][j] - '1';
                if (row[i][num]) return false;
                if (col[j][num]) return false;
                if (box[i / 3 * 3 + j / 3][num]) return false;
                row[i][num] = 1;
                col[j][num] = 1;
                box[i / 3 * 3 + j / 3][num] = 1;
            }
        }
        return true;

=======

        int row[9][9] = {0};
        int col[9][9] = {0};
        int box[9][9] = {0};
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int num = board[i][j] - '1';
                if (row[i][num]) return false;
                if (col[j][num]) return false;
                if (box[i / 3 * 3 + j / 3][num]) return false;
                row[i][num] = 1;
                col[j][num] = 1;
                box[i / 3 * 3 + j / 3][num] = 1;
            }
        }
        return true;

=======

        int row[9][9] = {0}, col[9][9] = {0}, box[9][9] = {0};
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int num = board[i][j] - '0' - 1;
                int k = i / 3 * 3 + j / 3;;
            }
        }
        return true;

=======

        int n = board.size();
        vector<vector<bool>> rows(n, vector<bool>(n, false));
        vector<vector<bool>> cols(n, vector<bool>(n, false));
        vector<vector<bool>> boxes(n, vector<bool>(n, false));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == '.') continue;
                int val = board[i][j] - '1';
                if (rows[i][val]) return false;
                if (cols[j][val]) return false;
                int boxIdx = (i / 3) * 3 + j / 3;
                if (boxes[boxIdx][val]) return false
                rows[i][val] = true;
                cols[j][val] = true;
                boxes[boxIdx][val] = true;
                if (row[i][num] || col[j][num] || box[k][num]) {
                    return false;
                }
                row[i][num] = col[j][num] = box[k][num] = 1;
            }
        }
        return true;

=======

        vector<vector<int>> row(9, vector<int>(9, 0));
        vector<vector<int>> col(9, vector<int>(9, 0));
        vector<vector<int>> sub(9, vector<int>(9, 0));
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                int num = board[i][j] - '1';
                if (row[i][num] || col[j][num] || sub[i / 3 * 3 + j / 3][num]) return false;
                row[i][num] = col[j][num] = sub[i / 3 * 3 + j / 3][num] = 1;
            }
        }
        return true;

=======

        int row[9][10] = {0}, col[9][10] = {0}, block[9][10] = {0};
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if(board[i][j] == '.') continue;
                int num = board[i][j] - '0';
                if(row[i][num] == 1 || col[j][num] == 1 || block[i/3*3+j/3][num] == 1) return false;
                row[i][num] = col[j][num] = block[i/3*3+j/3][num] = 1;
            }
        }
        return true;

=======;
                }
            }
        }
        return true;

=======

        int i, j, k, l;
        bool row[9][9], col[9][9], block[9][9];
        memset(row, false, sizeof(row));
        memset(col, false, sizeof(col));
        memset(block, false, sizeof(block));
        for (i = 0; i < 9; i++) {
            for (j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '1';
                    if (row[i][num] || col[j][num] || block[i/3*3 + j/3][num]) {
                        return false;
                    }
                    row[i][num] = col[j][num] = block[i/3*3 + j/3][num] = true;
                }
            }
        }
        return true;

=======

        int i, j, k, l;
        bool flag[10];
        for (i = 0; i < 9; ++i) {
            memset(flag, 0, sizeof(flag))
            for (j = 0; j < 9; ++j) {
                if (board[i][j] == '.') continue;
                if (flag[board[i][j] - '0']) return false;
                flag[board[i][j] - '0'] = true;
            }
        }
        for (i = 0; i < 9; ++i) {
            memset(flag, 0, sizeof(flag));
            for (j = 0; j < 9; ++j) {
                if (board[j][i] == '.') continue;
                if (flag[board[j][i] - '0']) return false;
                flag[board[j][i] - '0'] = true;
            }
        }
        for (i = 0; i < 3; ++i) {
            for (j = 0; j < 3; ++j) {
                memset(flag, 0, sizeof(flag));
                for (k = 0; k < 3; ++k) {
                    for (l = 0; l < 3; ++l) {
                        if (board[i * 3 + k][j * 3 + l] == '.') continue;
                        if (flag[board[i * 3 + k][j * 3 + l] - '0']) return false;
                        flag[board[i * 3 + k][j * 3 + l] - '0'] = true;
                    }

        for(int i=0;i<9;i++){
            int row[10]={0};
            int col[10]={0};
            int box[10]={0};
            for(int j=0;j<9;j++){
                if(board[i][j]!='.'){
                    if(row[board[i][j]-'0']) return false;
                    row[board[i][j]-'0']=1;
                }
                if(board[j][i]!='.'){
                    if(col[board[j][i]-'0']) return false;
                    col[board[j][i]-'0']=1;
                }
                int r=i/3*3+j/3;
                int c=i%3*3+j%3;
                if(board[r][c]!='.'){
                    if(box[board[r][c]-'0']) return false;
                    box[board[r][c]-'0']=1;
                }
            }
        }
        return true;

=======

        int i, j, k, l;
        bool flag[10];
        for (i = 0; i < 9; ++i) {
            memset(flag, 0, sizeof(flag));
            for (j = 0; j < 9; ++j) {
                if (board[i][j] == '.') continue;
                if (flag[board[i][j] - '0']) return false;
                flag[board[i][j] - '0'] = true;
            }
        }
        for (i = 0; i < 9; ++i) {
            memset(flag, 0, sizeof(flag));
            for (j = 0; j < 9; ++j) {
                if (board[j][i] == '.') continue;
                if (flag[board[j][i] - '0']) return false;
                flag[board[j][i] - '0'] = true;
            }
        }
        for (i = 0; i < 3; ++i) {
            for (j = 0; j < 3; ++j) {
                memset(flag, 0, sizeof(flag));
                for (k = 0; k < 3; ++k) {
                    for (l = 0; l < 3; ++l) {
                        if (board[i * 3 + k][j * 3 + l] == '.') continue;
                        if (flag[board[i * 3 + k][j * 3 + l] - '0']) return false;
                        flag[board[i * 3 + k][j * 3 + l] - '0'] = true;
                    }
                }
            }
        }
        return true;
