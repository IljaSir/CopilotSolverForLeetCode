Synthesizing 10/10 solutions

=======

        unordered_map<string, vector<string>> m;
        for (string s : strs) {
            string t = s;
            sort(t.begin(), t.end());
            m[t].push_back(s);
        }
        vector<vector<string>> ans;
        for (auto p : m) {
            ans.push_back(p.second);
        }
        return ans;

=======

        unordered_map<string, vector<string>> m;
        for (auto &s : strs) {
            string t = s;
            sort(t.begin(), t.end());
            m[t].push_back(s);
        }
        vector<vector<string>> result;
        for (auto &p : m) {
            result.push_back(p.second);
        }
        return result;

=======

        unordered_map<string, vector<string>> m;
        for (auto s : strs) {
            string t = s;
            sort(t.begin(), t.end());
            m[t].push_back(s);
        }
        vector<vector<string>> ans;
        for (auto it = m.begin(); it != m.end(); ++it) {
            ans.push_back(it->second);
        }
        return ans;

=======

        unordered_map<string, vector<string>> map;
        for (auto str : strs) {
            string key = str;
            sort(key.begin(), key.end());
            map[key].push_back(str);
        }
        vector<vector<string>> res;
        for (auto it = map.begin(); it != map.end(); it++) {
            res.push_back(it->second);
        }
        return res;

=======

        vector<vector<string>> result;
        unordered_map<string, vector<string>> map;
        for (string str : strs) {
            string key = str;
            sort(key.begin(), key.end());
            map[key].push_back(str);
        }
        for (auto it = map.begin(); it != map.end(); ++it) {
            result.push_back(it->second);
        }
        return result;

=======

        map<string, vector<string>> m;
        for (auto s : strs) {
            string t = s;
            sort(t.begin(), t.end());
            m[t].push_back(s);
        }
        vector<vector<string>> res;
        for (auto x : m) {
            res.push_back(x.second);
        }
        return res;

=======

        unordered_map<string, vector<string>> mp;
        for (auto& str: strs) {
            string key = str;
            sort(key.begin(), key.end());
            mp[key].push_back(str);
        }
        vector<vector<string>> res;
        for (auto& it: mp) {
            res.push_back(it.second);
        }
        return res;

=======

        vector<vector<string>> res;
        unordered_map<string, vector<string>> m;
        for (auto& s: strs) {
            string t = s;
            sort(t.begin(), t.end());
            m[t].push_back(s);
        }
        for (auto& p: m) res.push_back(p.second);
        return res;

=======

        vector<vector<string>> ans;
        unordered_map<string, vector<string>> m;
        for (auto& str : strs) {
            string t = str;
            sort(t.begin(), t.end());
            m[t].push_back(str);
        }
        for (auto& p : m) {
            ans.push_back(p.second);
        }
        return ans;

=======

        vector<vector<string>> result;
        unordered_map<string, vector<string>> map;
        for (auto& str : strs) {
            string sorted_str = str;
            sort(sorted_str.begin(), sorted_str.end());
            map[sorted_str].push_back(str);
        }
        for (auto& [key, value] : map) {
            result.push_back(value);
        }
        return result;
