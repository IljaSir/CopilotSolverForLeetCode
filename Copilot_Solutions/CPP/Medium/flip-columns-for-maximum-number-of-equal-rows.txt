Synthesizing 10/10 solutions

=======

        int m = matrix.size();
        int n = matrix[0].size();
        unordered_map<string, int> mp;
        for (int i = 0; i < m; i++) {
            string s;
            for (int j = 0; j < n; j++) {
                s += to_string(matrix[i][j] ^ matrix[i][0]);
            }
            mp[s]++;
        }
        int ans = 0;
        for (auto it : mp) {
            ans = max(ans, it.second);
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        unordered_map<string, int> mp;
        for (int i = 0; i < m; i++) {
            string s1 = "";
            string s2 = "";
            for (int j = 0; j < n; j++) {
                if (matrix[i][j]) {
                    s1 += "1";
                    s2 += "0";
                } else {
                    s1 += "0";
                    s2 += "1";
                }
            }
            mp[s1]++;
            mp[s2]++;
        }
        int ans = 0;
        for (auto it = mp.begin(); it != mp.end(); it++) {
            ans = max(ans, it->second);
        }
        return ans;

=======

        unordered_map<string, int> m;
        int res = 0;
        for (auto& v : matrix) {
            string s1 = "", s2 = "";
            for (int i = 0; i < v.size(); ++i) {
                s1 += v[i] + '0';
                s2 += (1 - v[i]) + '0';
            }
            m[s1] += 1;
            m[s2] += 1;
            res = max(res, max(m[s1], m[s2]));
        }
        return res;

=======

        unordered_map<string, int> cnt;
        for (auto& row : matrix) {
            string s1, s2;
            for (auto& c : row) {
                s1 += '0' + c;
                s2 += '0' + 1 - c;
            }
            cnt[s1]++; cnt[s2]++;
        }
        int ans = 0;
        for (auto& [_, v] : cnt) ans = max(ans, v);
        return ans;

=======

        unordered_map<string, int> m;
        int res = 0;
        for (auto& row : matrix) {
            string s1, s2;
            for (auto& c : row) {
                s1 += to_string(c);
                s2 += to_string(!c);
            }
            m[s1]++;
            m[s2]++;
            res = max(res, max(m[s1], m[s2]));
        }
        return res;

=======

        int res = 0;
        for(int i=0; i<matrix.size(); i++){
            int cnt = 0;
            for(int j=0; j<matrix.size(); j++){
                if(i==j) continue;
                bool ok = true;
                for(int k=0; k<matrix[0].size(); k++){
                    if(matrix[i][k] != matrix[j][k] && matrix[i][k] != 1-matrix[j][k]){
                        ok = false;
                        break;
                    }
                }
                if(ok) cnt++;
            }
            res = max(res, cnt);
        }
        return res+1;

=======

        unordered_map<string, int> m;
        for (auto& r : matrix) {
            string s1, s2;
            for (auto& v : r) {
                s1 += v + '0';
                s2 += !v + '0';
            }
            m[s1]++;
            m[s2]++;
        }
        int ans = 0;
        for (auto& p : m) {
            ans = max(ans, p.second);
        }
        return ans;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        unordered_map<string, int> hash;
        for (auto& row : matrix) {
            string s;
            for (int i = 0; i < n; i++) {
                s += (row[i] ^ row[0]) + '0';
            }
            hash[s]++;
        }
        int res = 0;
        for (auto& [k, v] : hash) {
            res = max(res, v);
        }
        return res;

=======

        map<vector<int>, int> mp;
        for (auto& row: matrix) {
            vector<int> v1, v2;
            for (int i = 0; i < row.size(); ++i) {
                v1.push_back(row[i] ^ row[0]);
                v2.push_back((row[i] ^ row[0]) ^ 1);
            }
            mp[v1]++;
            mp[v2]++;
        }
        int res = 0;
        for (auto& [k, v]: mp) {
            res = max(res, v);
        }
        return res;

=======

        unordered_map<string, int> map;
        for (auto &row : matrix) {
            string key = "";
            for (auto &val : row) {
                key += (val == row[0]) ? "0" : "1";
            }
            map[key]++;
        }
        int max = 0;
        for (auto &it : map) {
            if (it.second > max) {
                max = it.second;
            }
        }
        return max;
