Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_set<int> s;
        for (int n : nums) {
            int rev = 0;
            while (n) {
                rev = rev * 10 + n % 10;
                n /= 10;
            }
            s.insert(rev);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (auto n : nums) {
            int r = 0;
            while (n) {
                r = r * 10 + n % 10;
                n /= 10;
            }
            s.insert(r);
        }
        return s.size();

=======

        unordered_set<string> s;
        for (int i = 0; i < nums.size(); ++i) {
            string str = to_string(nums[i]);
            reverse(str.begin(), str.end());
            s.insert(str);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (auto n : nums) {
            int x = 0;
            while (n) {
                x = x * 10 + n % 10;
                n /= 10;
            }
            s.insert(x);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (auto i : nums) {
            int rev = 0;
            while (i > 0) {
                rev = rev * 10 + i % 10;
                i /= 10;
            }
            s.insert(rev);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (int i = 0; i < nums.size(); ++i) {
            int n = nums[i];
            int rev = 0;
            while (n > 0) {
                rev = rev * 10 + n % 10;
                n /= 10;
            }
            s.insert(rev);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (auto& n : nums) {
            int rev = 0;
            while (n) {
                rev = rev * 10 + n % 10;
                n /= 10;
            }
            s.insert(rev);
        }
        return s.size();

=======

        unordered_set<int> s;
        for (int n : nums)
            s.insert(stoi(to_string(n) + string(to_string(n).rbegin(), to_string(n).rend())));
        return s.size();

=======

        int n = nums.size();
        unordered_set<int> s;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int rev = 0;
            while (num > 0) {
                rev = rev * 10 + num % 10;
                num /= 10;
            }
            s.insert(rev);
        }
        return s.size();
