Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int steps = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] < nums[i - 1]) {
                steps += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return steps;

=======

        int ans = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] < nums[i - 1]) {
                ans += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return ans;

=======

        int n = nums.size();
        int steps = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                steps += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return steps;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] < nums[i - 1]) {
                ans += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < nums[i - 1]) {
                ans += nums[i - 1] - nums[i];
                nums[i] = nums[i - 1];
            }
        }
        return ans;

=======

        int steps = 0;
        int i = 1;
        while (i < nums.size()) {
            if (nums[i] < nums[i-1]) {
                steps++;
                nums[i] = nums[i-1];
            } else {
                i++;
            }
        }
        return steps;

=======

        int steps = 0;
        int i = 1;
        while (i < nums.size()) {
            if (nums[i] < nums[i - 1]) {
                steps++;
                nums[i] = nums[i - 1];
            }
            i++;
        }
        return steps;
