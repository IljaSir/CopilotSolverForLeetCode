Synthesizing 10/10 solutions

=======

        int m = bank.size();
        int n = bank[0].size();
        int ans = 0;
        for (int j = 0; j < n; ++j) {
            int cnt = 0;
            for (int i = 0; i < m; ++i) {
                if (bank[i][j] == '1') {
                    ++cnt;
                }
            }
            ans += cnt * (cnt - 1) / 2;
        }
        return ans;

=======

        int m = bank.size(), n = bank[0].size();
        vector<int> row(m);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (bank[i][j] == '1') {
                    row[i] = j;
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                if (row[j] > row[i]) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int ans = 0;
        int m = bank.size();
        int n = bank[0].size();
        for (int j = 0; j < n; ++j) {
            int i = 0;
            while (i < m && bank[i][j] == '0') ++i;
            if (i == m) continue;
            ++ans;
            while (i < m && bank[i][j] == '1') ++i;
            while (i < m && bank[i][j] == '0') ++i;
            if (i < m) ++ans;
        }
        return ans;

=======

        int m = bank.size(), n = bank[0].size();
        int ans = 0;
        for (int j = 0; j < n; ++j) {
            int sum = 0;
            for (int i = 0; i < m; ++i) {
                sum += bank[i][j] - '0';
            }
            ans += sum * (sum - 1) / 2;
        }
        return ans;

=======

        int m = bank.size(), n = bank[0].size();
        vector<int> cnt(n, 0);
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            int left = -1, right = -1;
            for (int j = 0; j < n; ++j) {
                if (bank[i][j] == '1') {
                    if (left == -1) {
                        left = j;
                    }
                    right = j;
                }
            }
            if (left != -1) {
                for (int j = left; j <= right; ++j) {
                    if (bank[i][j] == '0') {
                        ++cnt[j];
                    }
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            ans += cnt[i];
        }
        return ans;

=======

        int m = bank.size();
        int n = bank[0].size();
        int ans = 0;
        for(int i=0; i<n; i++){
            int cnt = 0;
            for(int j=0; j<m; j++){
                if(bank[j][i] == '1'){
                    cnt++;
                    if(cnt > 1) break;
                }
            }
            ans += cnt;
        }
        return ans;

=======

        int m = bank.size();
        int n = bank[0].size();
        int ans = 0;
        for(int j = 0; j < n; j++){
            int first = -1;
            int last = -1;
            for(int i = 0; i < m; i++){
                if(bank[i][j] == '1'){
                    if(first == -1) first = i;
                    last = i;
                }
            }
            if(first != -1 && last != -1 && first != last) ans += (last - first - 1);
        }
        return ans;

=======

        int m = bank.size();
        int n = bank[0].size();
        int cnt = 0;
        for (int i = 1; i < m; ++i) {
            bool flag = false;
            for (int j = 0; j < n; ++j) {
                if (bank[i][j] == '1') {
                    if (flag) {
                        ++cnt;
                    }
                    flag = true;
                }
            }
        }
        return cnt;

=======

        int m = bank.size();
        int n = bank[0].size();
        int ans = 0;
        for(int i = 0; i < n; i++)
        {
            int flag = 0;
            for(int j = 0; j < m; j++)
            {
                if(bank[j][i] == '1')
                {
                    if(flag == 0)
                    {
                        flag = 1;
                    }
                    else
                    {
                        ans++;
                        flag = 0;
                        break;
                    }
                }
            }
        }
        return ans;

=======

        int m = bank.size();
        int n = bank[0].size();
        vector<int> dp(n, 0);
        for (int i = 0; i < m; i++) {
            int pre = 0;
            for (int j = 0; j < n; j++) {
                if (bank[i][j] == '1') {
                    pre++;
                    dp[j] += pre;
                }
            }
        }
        int res = 0;
        for (auto& x : dp) {
            res += x;
        }
        return res;
