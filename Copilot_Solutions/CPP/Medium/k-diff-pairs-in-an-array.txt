Synthesizing 10/10 solutions

=======

        if (k < 0) {
            return 0;
        }
        unordered_map<int, int> m;
        for (int num : nums) {
            m[num]++;
        }
        int res = 0;
        for (auto& it : m) {
            if (k == 0) {
                if (it.second >= 2) {
                    res++;
                }
            } else {
                if (m.count(it.first + k)) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        if (n < 2) return 0;
        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 0; i < n - 1; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            if (nums[i] + k > nums[n - 1]) break;
            int j = i + 1;
            while (j < n && nums[j] < nums[i] + k) j++;
            if (j < n && nums[j] == nums[i] + k) res++;
        }
        return res;

=======

        if (nums.size() < 2) return 0;
        if (k < 0) return 0;
        sort(nums.begin(), nums.end());
        int i = 0;
        int j = 1;
        int count = 0;
        while (i < nums.size() && j < nums.size()) {
            if (i == j || nums[j] - nums[i] < k) {
                j++;
            } else if (nums[j] - nums[i] > k) {
                i++;
            } else {
                count++;
                i++;
                while (i < nums.size() && nums[i] == nums[i-1]) {
                    i++;
                }
            }
        }
        return count;

=======

        if (k < 0) return 0;
        unordered_map<int, int> m;
        for (int n : nums) m[n]++;
        int res = 0;
        for (auto it : m) {
            if (k == 0) {
                if (it.second > 1) res++;
            } else {
                if (m.count(it.first + k)) res++;
            }
        }
        return res;

=======

        if (k < 0) return 0;
        unordered_map<int, int> m;
        for (int n : nums) m[n]++;
        int res = 0;
        for (auto it : m) {
            if (k == 0) {
                if (it.second > 1) res++;
            } else if (m.find(it.first + k) != m.end()) {
                res++;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int l = 0, r = 1;
        int res = 0;
        while (r < nums.size()) {
            if (l == r || nums[r] - nums[l] < k) {
                r++;
            } else if (nums[r] - nums[l] > k) {
                l++;
            } else {
                res++;
                l++;
                while (l < nums.size() && nums[l] == nums[l - 1]) {
                    l++;
                }
            }
        }
        return res;

=======

        if (k < 0) return 0;
        unordered_map<int, int> m;
        for (auto& n : nums) {
            m[n]++;
        }
        int res = 0;
        for (auto& [n, count] : m) {
            if (k == 0) {
                if (count > 1) res++;
            } else {
                if (m.count(n + k)) res++;
            }
        }
        return res;

=======

        if (k < 0) return 0;
        unordered_map<int, int> cnt;
        for (auto x : nums) cnt[x]++;
        int ans = 0;
        for (auto [x, c] : cnt) {
            if (k == 0) {
                if (c > 1) ans++;
            } else {
                if (cnt.count(x + k)) ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        if(n == 0 || n == 1 || k < 0) return 0;
        sort(nums.begin(), nums.end());
        int i = 0, j = 1, ans = 0;
        while(i < n && j < n){
            if(i != j && nums[j] - nums[i] == k){
                ans++;
                while(j < n && nums[j] == nums[j-1]) j++;
                while(i < n && nums[i] == nums[i+1]) i++;
                i++;
                j++;
            }
            else if(nums[j] - nums[i] < k) j++;
            else i++;
        }
        return ans;

=======

        unordered_map<int, int> map;
        for (auto i : nums) {
            map[i]++;
        }
        int res = 0;
        for (auto& [key, val] : map) {
            if (k == 0) {
                if (val > 1) {
                    res++;
                }
            } else {
                if (map.count(key + k)) {
                    res++;
                }
            }
        }
        return res;
