Synthesizing 10/10 solutions

=======

        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        int res = 0, status = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == 'a') status ^= 1;
            else if (s[i] == 'e') status ^= 2;
            else if (s[i] == 'i') status ^= 4;
            else if (s[i] == 'o') status ^= 8;
            else if (s[i] == 'u') status ^= 16;
            if (~pos[status]) res = max(res, i + 1 - pos[status]);
            else pos[status] = i + 1;
        }
        return res;

=======

        int n = s.length();
        int ans = 0, status = 0;
        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                status ^= 1 << 0;
            } else if (s[i] == 'e') {
                status ^= 1 << 1;
            } else if (s[i] == 'i') {
                status ^= 1 << 2;
            } else if (s[i] == 'o') {
                status ^= 1 << 3;
            } else if (s[i] == 'u') {
                status ^= 1 << 4;
            }
            if (~pos[status]) {
                ans = max(ans, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        int ans = 0, status = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                status ^= 1 << 0;
            }
            else if (s[i] == 'e') {
                status ^= 1 << 1;
            }
            else if (s[i] == 'i') {
                status ^= 1 << 2;
            }
            else if (s[i] == 'o') {
                status ^= 1 << 3;
            }
            else if (s[i] == 'u') {
                status ^= 1 << 4;
            }
            if (~pos[status]) {
                ans = max(ans, i + 1 - pos[status]);
            }
            else {
                pos[status] = i + 1;
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        int state = 0;
        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        for (int i = 0; i < n; i++) {
            char ch = s[i];
            if (ch == 'a') {
                state ^= 1 << 0;
            } else if (ch == 'e') {
                state ^= 1 << 1;
            } else if (ch == 'i') {
                state ^= 1 << 2;
            } else if (ch == 'o') {
                state ^= 1 << 3;
            } else if (ch == 'u') {
                state ^= 1 << 4;
            }
            if (~pos[state]) {
                ans = max(ans, i + 1 - pos[state]);
            } else {
                pos[state] = i + 1;
            }
        }
        return ans;

=======

        unordered_map<char, int> mp = {{'a', 1}, {'e', 2}, {'i', 4}, {'o', 8}, {'u', 16}};
        unordered_map<int, int> m;
        int n = s.size(), res = 0, state = 0;
        m[0] = -1;
        for (int i = 0; i < n; ++i) {
            if (mp.count(s[i])) {
                state ^= mp[s[i]];
            }
            if (m.count(state)) {
                res = max(res, i - m[state]);
            } else {
                m[state] = i;
            }
        }
        return res;

=======

        int n = s.length();
        int ans = 0;
        int state = 0;
        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                state ^= 1 << 0;
            } else if (s[i] == 'e') {
                state ^= 1 << 1;
            } else if (s[i] == 'i') {
                state ^= 1 << 2;
            } else if (s[i] == 'o') {
                state ^= 1 << 3;
            } else if (s[i] == 'u') {
                state ^= 1 << 4;
            }
            if (~pos[state]) {
                ans = max(ans, i + 1 - pos[state]);
            } else {
                pos[state] = i + 1;
            }
        }
        return ans;

=======

        int n = s.size();
        int res = 0;
        int state = 0;
        vector<int> pos(1 << 5, -1);
        pos[0] = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                state ^= 1;
            } else if (s[i] == 'e') {
                state ^= 1 << 1;
            } else if (s[i] == 'i') {
                state ^= 1 << 2;
            } else if (s[i] == 'o') {
                state ^= 1 << 3;
            } else if (s[i] == 'u') {
                state ^= 1 << 4;
            }
            if (~pos[state]) {
                res = max(res, i - pos[state] + 1);
            } else {
                pos[state] = i + 1;
            }
        }
        return res;

=======

        int n = s.size();
        int res = 0;
        vector<int> pos(1<<5, -1);
        pos[0] = 0;
        int status = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                status ^= (1<<0);
            } else if (s[i] == 'e') {
                status ^= (1<<1);
            } else if (s[i] == 'i') {
                status ^= (1<<2);
            } else if (s[i] == 'o') {
                status ^= (1<<3);
            } else if (s[i] == 'u') {
                status ^= (1<<4);
            }
            if (~pos[status]) {
                res = max(res, i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(1 << 5, -1);
        dp[0] = 0;
        int res = 0;
        int state = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == 'a') {
                state ^= 1 << 0;
            } else if (s[i] == 'e') {
                state ^= 1 << 1;
            } else if (s[i] == 'i') {
                state ^= 1 << 2;
            } else if (s[i] == 'o') {
                state ^= 1 << 3;
            } else if (s[i] == 'u') {
                state ^= 1 << 4;
            }
            if (dp[state] >= 0) {
                res = max(res, i + 1 - dp[state]);
            } else {
                dp[state] = i + 1;
            }
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(n + 1, 0);
        vector<int> last(1 << 5, -1);
        last[0] = 0;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1];
            if (s[i - 1] == 'a') dp[i] ^= 1 << 0;
            if (s[i - 1] == 'e') dp[i] ^= 1 << 1;
            if (s[i - 1] == 'i') dp[i] ^= 1 << 2;
            if (s[i - 1] == 'o') dp[i] ^= 1 << 3;
            if (s[i - 1] == 'u') dp[i] ^= 1 << 4;
            if (last[dp[i]] != -1) {
                dp[i] = i - last[dp[i]];
            } else {
                last[dp[i]] = i;
            }
        }
        return *max_element(dp.begin(), dp.end());
