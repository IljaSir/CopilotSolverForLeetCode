Synthesizing 10/10 solutions

=======

        if (m * k > bloomDay.size()) return -1;
        int l = *min_element(bloomDay.begin(), bloomDay.end());
        int r = *max_element(bloomDay.begin(), bloomDay.end());
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (canMake(bloomDay, mid, m, k)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool canMake(vector<int>& bloomDay, int day, int m, int k) {
        int bouquets = 0;
        int flowers = 0;
        for (int i = 0; i < bloomDay.size(); ++i) {
            if (bloomDay[i] <= day) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        return bouquets >= m;

=======

        if (m * k > bloomDay.size()) return -1;
        int l = *min_element(bloomDay.begin(), bloomDay.end());
        int r = *max_element(bloomDay.begin(), bloomDay.end());
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (possible(bloomDay, mid, m, k)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    
    bool possible(vector<int>& bloomDay, int day, int m, int k) {
        int bouquets = 0;
        int flowers = 0;
        for (int i = 0; i < bloomDay.size(); i++) {
            if (bloomDay[i] <= day) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        return bouquets >= m;

=======

        int n = bloomDay.size();
        if (m * k > n) return -1;
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (canMake(bloomDay, m, k, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool canMake(vector<int>& bloomDay, int m, int k, int day) {
        int n = bloomDay.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (bloomDay[i] <= day) {
                ++cnt;
                if (cnt == k) {
                    cnt = 0;
                    --m;
                    if (m == 0) return true;
                }
            } else {
                cnt = 0;
            }
        }
        return false;

=======

        if (m * k > bloomDay.size()) return -1;
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(bloomDay, m, k, mid)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    bool check(vector<int>& bloomDay, int m, int k, int x) {
        int cnt = 0, cur = 0;
        for (int i = 0; i < bloomDay.size(); ++i) {
            if (bloomDay[i] <= x) {
                ++cur;
                if (cur == k) {
                    ++cnt;
                    cur = 0;
                }
            } else {
                cur = 0;
            }
        }
        return cnt >= m;

=======

        int n = bloomDay.size();
        if (m * k > n) {
            return -1;
        }
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(bloomDay, m, k, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool check(vector<int>& bloomDay, int m, int k, int d) {
        int n = bloomDay.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (bloomDay[i] <= d) {
                cnt++;
                if (cnt == k) {
                    m--;
                    cnt = 0;
                }
            } else {
                cnt = 0;
            }
        }
        return m <= 0;

=======

        int n = bloomDay.size();
        if (m*k > n) return -1;
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int cnt = 0, bouq = 0;
            for (int i = 0; i < n; ++i) {
                if (bloomDay[i] <= mid) {
                    ++cnt;
                    if (cnt == k) {
                        ++bouq;
                        cnt = 0;
                    }
                } else {
                    cnt = 0;
                }
            }
            if (bouq >= m) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int n = bloomDay.size();
        if ((long long)m * k > n) return -1;
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(bloomDay, m, k, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool check(vector<int>& bloomDay, int m, int k, int day) {
        int cnt = 0;
        for (int i = 0; i < bloomDay.size(); ++i) {
            if (bloomDay[i] <= day) {
                ++cnt;
                if (cnt == k) {
                    --m;
                    cnt = 0;
                }
            } else {
                cnt = 0;
            }
        }
        return m <= 0;

=======

        int n = bloomDay.size();
        if (n < m * k) return -1;
        
        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(bloomDay, m, k, mid)) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    
    bool check(vector<int>& bloomDay, int m, int k, int day) {
        int cnt = 0;
        for (int i = 0; i < bloomDay.size() && cnt < m; i++) {
            if (bloomDay[i] <= day) {
                int j = i;
                while (j < bloomDay.size() && bloomDay[j] <= day) j++;
                cnt += (j - i) / k;
                i = j - 1;
            }
        }
        return cnt >= m;

=======

        int n = bloomDay.size();
        if (n < m * k)
            return -1;
        int lo = 1, hi = 1e9;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int cnt = 0, bouq = 0;
            for (int i = 0; i < n; ++i) {
                if (bloomDay[i] <= mid) {
                    cnt++;
                    if (cnt == k) {
                        bouq++;
                        cnt = 0;
                    }
                } else {
                    cnt = 0;
                }
            }
            if (bouq < m)
                lo = mid + 1;
            else
                hi = mid;
        }
        return lo;

=======

        if (m*k > bloomDay.size())
            return -1;
        int left = 1, right = 1e9;
        while (left < right) {
            int mid = (left + right) / 2;
            int bouquets = 0, flowers = 0;
            for (int i = 0; i < bloomDay.size() && bouquets < m; ++i) {
                if (bloomDay[i] <= mid) {
                    if (++flowers == k) {
                        bouquets++;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if (bouquets >= m) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
