Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = (1 << n) - 1; j >= 0; --j) {
                if (j & (1 << i)) {
                    dp[j] = max(dp[j ^ (1 << i)] | nums[i], dp[j]);
                }
            }
        }
        int maxOr = *max_element(dp.begin(), dp.end());
        int ans = 0;
        for (int i = 0; i < (1 << n); ++i) {
            if (dp[i] == maxOr) {
                ++ans;
            }
        }
        return ans;

=======

        int n = nums.size();
        int m = 1 << n;
        vector<int> dp(m, 0);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    dp[i] = dp[i ^ (1 << j)] | nums[j];
                    break;
                }
            }
        }
        int max = 0;
        for (int i = 0; i < m; ++i) {
            if (dp[i] > max) {
                max = dp[i];
            }
        }
        int res = 0;
        for (int i = 0; i < m; ++i) {
            if (dp[i] == max) {
                ++res;
            }
        }
        return res;

=======

        int n = nums.size();
        int max = 0;
        int count = 0;
        for (int i = 0; i < (1 << n); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    sum |= nums[j];
                }
            }
            if (sum > max) {
                max = sum;
                count = 1;
            } else if (sum == max) {
                count++;
            }
        }
        return count;

=======

        int n = nums.size();
        int maxOR = 0;
        for (int i = 0; i < (1 << n); i++) {
            int temp = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    temp |= nums[j];
                }
            }
            maxOR = max(maxOR, temp);
        }
        int count = 0;
        for (int i = 0; i < (1 << n); i++) {
            int temp = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    temp |= nums[j];
                }
            }
            if (temp == maxOR) count++;
        }
        return count;

=======

        int n = nums.size();
        int maxOr = 0;
        int count = 0;
        for (int i = 0; i < (1 << n); i++) {
            int orValue = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    orValue |= nums[j];
                }
            }
            if (orValue > maxOr) {
                maxOr = orValue;
                count = 1;
            } else if (orValue == maxOr) {
                count++;
            }
        }
        return count;

=======

        int n = nums.size();
        int ans = 0;
        int maxVal = 0;
        for (int i = 0; i < (1 << n); i++) {
            int cur = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    cur |= nums[j];
                }
            }
            if (cur > maxVal) {
                maxVal = cur;
                ans = 1;
            } else if (cur == maxVal) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        int cnt = 0;
        int max = 0;
        for (int i = 0; i < (1 << n); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    sum |= nums[j];
                }
            }
            if (sum > max) {
                max = sum;
                cnt = 1;
            } else if (sum == max) {
                cnt++;
            }
        }
        return cnt;

=======

        int n = nums.size();
        int maxBit = 0;
        for (int i = 0; i < n; ++i) {
            maxBit |= nums[i];
        }
        vector<int> cnt(maxBit + 1, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = maxBit; j >= nums[i]; --j) {
                cnt[j] += cnt[j - nums[i]];
            }
            cnt[nums[i]] += 1;
        }
        return cnt[maxBit];

=======

        int n = nums.size();
        int max = 0;
        int cnt = 0;
        vector<int> dp(1 << n, 0);
        for (int i = 1; i < (1 << n); i++) {
            int x = i & -i;
            int j = 0;
            while (x) {
                x >>= 1;
                j++;
            }
            dp[i] = dp[i ^ (1 << (j - 1))] | nums[j - 1];
            if (dp[i] > max) {
                max = dp[i];
                cnt = 1;
            } else if (dp[i] == max) {
                cnt++;
            }
        }
        return cnt;

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = 1;
        for (auto x : nums) {
            auto tmp = mp;
            for (auto& [k, v] : tmp) {
                mp[k | x] += v;
            }
        }
        int max = 0;
        for (auto& [k, v] : mp) {
            if (k > max) {
                max = k;
            }
        }
        return mp[max];
