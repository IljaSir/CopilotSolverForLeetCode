Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        vector<bool> seen(26, false);
        string res;
        for (int i = 0; i < n; i++) {
            if (seen[s[i] - 'a']) continue;
            while (!res.empty() && res.back() > s[i] && last[res.back() - 'a'] > i) {
                seen[res.back() - 'a'] = false;
                res.pop_back();
            }
            seen[s[i] - 'a'] = true;
            res.push_back(s[i]);
        }
        return res;

=======

        vector<int> last(26, 0);
        for (int i = 0; i < s.size(); i++) {
            last[s[i] - 'a'] = i;
        }
        vector<bool> visited(26, false);
        string ans = "0";
        for (int i = 0; i < s.size(); i++) {
            int x = s[i] - 'a';
            if (visited[x]) continue;
            while (s[i] < ans.back() && i < last[ans.back() - 'a']) {
                visited[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans.push_back(s[i]);
            visited[x] = true;
        }
        return ans.substr(1);

=======

        vector<int> last(26, -1);
        for (int i = 0; i < s.size(); ++i) {
            last[s[i] - 'a'] = i;
        }
        vector<bool> visited(26, false);
        string ans;
        for (int i = 0; i < s.size(); ++i) {
            if (visited[s[i] - 'a']) continue;
            while (!ans.empty() && ans.back() > s[i] && last[ans.back() - 'a'] > i) {
                visited[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans.push_back(s[i]);
            visited[s[i] - 'a'] = true;
        }
        return ans;

=======

        vector<int> count(26, 0);
        vector<bool> visited(26, false);
        string res;
        for (char c : s) {
            count[c - 'a']++;
        }
        for (char c : s) {
            count[c - 'a']--;
            if (visited[c - 'a']) {
                continue;
            }
            while (!res.empty() && res.back() > c && count[res.back() - 'a'] > 0) {
                visited[res.back() - 'a'] = false;
                res.pop_back();
            }
            res.push_back(c);
            visited[c - 'a'] = true;
        }
        return res;

=======

        vector<int> cnt(26);
        vector<bool> seen(26);
        for (char c : s) {
            cnt[c - 'a']++;
        }
        string res;
        for (char c : s) {
            if (!seen[c - 'a']) {
                while (!res.empty() && c < res.back() && cnt[res.back() - 'a'] > 0) {
                    seen[res.back() - 'a'] = false;
                    res.pop_back();
                }
                res.push_back(c);
                seen[c - 'a'] = true;
            }
            cnt[c - 'a']--;
        }
        return res;

=======

        string ans = "";
        int n = s.size();
        int last[26];
        memset(last, -1, sizeof(last));
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        bool visited[26];
        memset(visited, false, sizeof(visited));
        for (int i = 0; i < n; ++i) {
            if (visited[s[i] - 'a']) continue;
            while (!ans.empty() && ans.back() > s[i] && last[ans.back() - 'a'] > i) {
                visited[ans.back() - 'a'] = false;
                ans.pop_back();
            }
            ans += s[i];
            visited[s[i] - 'a'] = true;
        }
        return ans;

=======

        string ans;
        int n = s.size();
        vector<int> cnt(26, 0), used(26, 0);
        for (auto c : s) cnt[c - 'a']++;
        for (auto c : s) {
            cnt[c - 'a']--;
            if (used[c - 'a']) continue;
            while (!ans.empty() && ans.back() > c && cnt[ans.back() - 'a']) {
                used[ans.back() - 'a'] = 0;
                ans.pop_back();
            }
            ans.push_back(c);
            used[c - 'a'] = 1;
        }
        return ans;

=======

        string ans = "";
        int n = s.length();
        unordered_map<char, int> mp;
        for(int i = 0; i < n; i++){
            mp[s[i]]++;
        }
        unordered_set<char> st;
        for(int i = 0; i < n; i++){
            mp[s[i]]--;
            if(st.count(s[i])) continue;
            while(ans.length() > 0 && ans.back() > s[i] && mp[ans.back()] > 0){
                st.erase(ans.back());
                ans.pop_back();
            }
            ans += s[i];
            st.insert(s[i]);
        }
        return ans;

=======

        string res = "";
        unordered_map<char,int> m;
        unordered_set<char> seen;
        for(auto ch:s) m[ch]++;
        for(auto ch:s){
            m[ch]--;
            if(seen.find(ch)!=seen.end()) continue;
            while(res!="" && res.back()>ch && m[res.back()]!=0){
                seen.erase(res.back());
                res.pop_back();
            }
            res.push_back(ch);
            seen.insert(ch);
        }
        return res;

=======

        int n = s.length();
        vector<int> cnt(26);
        for (char ch: s) cnt[ch-'a']++;
        vector<bool> vis(26);
        string ans = "0";
        for (char ch: s) {
            cnt[ch-'a']--;
            if (vis[ch-'a']) continue;
            while (ch < ans.back() && cnt[ans.back()-'a']) {
                vis[ans.back()-'a'] = false;
                ans.pop_back();
            }
            ans += ch;
            vis[ch-'a'] = true;
        }
        return ans.substr(1);
