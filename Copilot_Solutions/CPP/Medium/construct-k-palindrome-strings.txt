Synthesizing 10/10 solutions

=======

        int n = s.size();
        if (n < k) return false;
        vector<int> cnt(26, 0);
        for (int i = 0; i < n; i++) {
            cnt[s[i] - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (cnt[i] % 2 == 1) odd++;
        }
        return odd <= k;

=======

        int n = s.size();
        if (n < k) return false;
        if (n == k) return true;
        vector<int> cnt(26);
        for (int i = 0; i < n; ++i) {
            ++cnt[s[i] - 'a'];
        }
        int odd = 0;
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] % 2 == 1) {
                ++odd;
            }
        }
        return odd <= k;

=======

        if (s.size() < k) return false;
        if (s.size() == k) return true;
        vector<int> count(26, 0);
        for (char c : s) count[c - 'a']++;
        int odd = 0;
        for (int i = 0; i < 26; i++) if (count[i] & 1) odd++;
        return odd <= k;

=======

        int n = s.size();
        if (n < k) return false;
        if (n == k) return true;
        vector<int> cnt(26, 0);
        for (auto c : s) {
            cnt[c - 'a']++;
        }
        int odd = 0;
        for (auto c : cnt) {
            if (c & 1) odd++;
        }
        return odd <= k;

=======

        if (s.size() < k) return false;
        if (s.size() == k) return true;
        vector<int> count(26, 0);
        for (auto ch : s) {
            count[ch - 'a']++;
        }
        int odd = 0;
        for (auto c : count) {
            if (c & 1) odd++;
        }
        return odd <= k;

=======

        if (k > s.size()) return false;
        if (k == s.size()) return true;
        vector<int> cnt(26, 0);
        for (auto c: s) cnt[c-'a']++;
        int odd = 0;
        for (auto c: cnt) if (c%2) odd++;
        return odd <= k;

=======

        if (k > s.length()) {
            return false;
        }
        vector<int> count(26, 0);
        for (auto c : s) {
            count[c - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] % 2 == 1) {
                odd++;
            }
        }
        return odd <= k;

=======

        int n = s.length();
        if (n < k) return false;
        if (n == k) return true;
        int freq[26] = {0};
        for (char c : s) {
            freq[c - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; ++i) {
            if (freq[i] & 1) {
                odd++;
            }
        }
        return odd <= k;

=======

        if (s.size() < k) return false;
        if (s.size() == k) return true;
        unordered_map<char, int> um;
        for (auto c : s) um[c]++;
        int odd = 0;
        for (auto p : um) {
            if (p.second % 2 == 1) odd++;
        }
        return odd <= k;

=======

        if (k > s.size()) return false;
        if (k == s.size()) return true;
        int odd = 0;
        vector<int> cnt(26, 0);
        for (char c : s) {
            cnt[c - 'a']++;
        }
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] & 1) odd++;
        }
        return odd <= k;
