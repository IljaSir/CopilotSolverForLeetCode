Synthesizing 10/10 solutions

=======

        int dp[n+1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = INT_MAX;
            for (int j = 1; j < i; j++) {
                int res = 1 + max(dp[j-1], dp[i-j]);
                dp[i] = min(dp[i], res);
            }
        }
        return dp[n];

=======

        int dp[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; ++i) {
            dp[i] = INT_MAX;
            for (int j = 1; j <= i; ++j) {
                dp[i] = min(dp[i], 1 + max(dp[j - 1], dp[i - j]));
            }
        }
        return dp[n];

=======

        int dp[n+1];
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i]=INT_MAX;
            for(int j=1;j<=i;j++){
                dp[i]=min(dp[i],1+max(dp[j-1],dp[i-j]));
            }
        }
        return dp[n];

=======

        int dp[n + 1][3];
        for (int i = 0; i <= n; i++) {
            dp[i][1] = i;
            dp[i][2] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= 2; j++) {
                dp[i][j] = INT_MAX;
                for (int x = 1; x <= i; x++) {
                    int res = 1 + max(dp[x - 1][j - 1], dp[i - x][j]);
                    dp[i][j] = min(dp[i][j], res);
                }
            }
        }
        return dp[n][2];

=======

        int dp[n+1];
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3;i<=n;i++){
            dp[i] = INT_MAX;
            for(int j=1;j<i;j++){
                dp[i] = min(dp[i],max(dp[j-1],dp[i-j])+1);
            }
        }
        return dp[n];

=======

        int dp[2][n + 1];
        memset(dp, 0, sizeof(dp));
        for (int i = 1; i <= n; ++i) {
            dp[0][i] = 1;
            dp[1][i] = i;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= n; ++j) {
                int minn = 0x3f3f3f3f;
                for (int k = 1; k <= j; ++k) {
                    minn = min(minn, 1 + max(dp[0][k - 1], dp[1][j - k]));
                }
                dp[0][j] = dp[1][j];
                dp[1][j] = minn;
            }
        }
        return dp[1][n];

=======

        int count = 0;
        int sum = 0;
        while(sum < n){
            count++;
            sum += count;
        }
        return count;

=======

        int m = 0;
        while (n > 0) {
            m++;
            n -= m;
        }
        return m;

=======

        int ans = 0;
        while(n > 0){
            ans++;
            n -= ans;
        }
        return ans;

=======

        int drops = 0;
        while (n > 0) {
            n -= ++drops;
        }
        return drops;
