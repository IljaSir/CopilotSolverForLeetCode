Synthesizing 10/10 solutions

=======

        int n = matrix.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[0][i] = matrix[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int left = j > 0 ? dp[i - 1][j - 1] : INT_MAX;
                int right = j < n - 1 ? dp[i - 1][j + 1] : INT_MAX;
                dp[i][j] = matrix[i][j] + min({dp[i - 1][j], left, right});
            }
        }
        return *min_element(dp[n - 1].begin(), dp[n - 1].end());

=======

        int n = matrix.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = matrix[0][i];
        }
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int x = dp[i - 1][j];
                if (j > 0) {
                    x = min(x, dp[i - 1][j - 1]);
                }
                if (j < n - 1) {
                    x = min(x, dp[i - 1][j + 1]);
                }
                dp[i][j] = x + matrix[i][j];
            }
        }
        int ans = dp[n - 1][0];
        for (int i = 1; i < n; ++i) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = matrix.size();
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int v = matrix[i - 1][j];
                if (j > 0) v = min(v, matrix[i - 1][j - 1]);
                if (j < n - 1) v = min(v, matrix[i - 1][j + 1]);
                matrix[i][j] += v;
            }
        }
        return *min_element(matrix.back().begin(), matrix.back().end());

=======

        int n = matrix.size();
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int a = matrix[i-1][j];
                int b = j > 0 ? matrix[i-1][j-1] : INT_MAX;
                int c = j < n-1 ? matrix[i-1][j+1] : INT_MAX;
                matrix[i][j] += min(a, min(b, c));
            }
        }
        return *min_element(matrix.back().begin(), matrix.back().end());

=======

        int n = matrix.size();
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int min = matrix[i-1][j];
                if (j > 0 && matrix[i-1][j-1] < min) {
                    min = matrix[i-1][j-1];
                }
                if (j < n - 1 && matrix[i-1][j+1] < min) {
                    min = matrix[i-1][j+1];
                }
                matrix[i][j] += min;
            }
        }
        int min = matrix[n-1][0];
        for (int j = 1; j < n; j++) {
            if (matrix[n-1][j] < min) {
                min = matrix[n-1][j];
            }
        }
        return min;

=======

        int n = matrix.size();
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int left = j == 0 ? INT_MAX : matrix[i - 1][j - 1];
                int mid = matrix[i - 1][j];
                int right = j == n - 1 ? INT_MAX : matrix[i - 1][j + 1];
                matrix[i][j] += min(min(left, mid), right);
            }
        }
        int ans = INT_MAX;
        for (int j = 0; j < n; j++) {
            ans = min(ans, matrix[n - 1][j]);
        }
        return ans;

=======

        int n = matrix.size();
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int min = matrix[i-1][j];
                if (j-1 >= 0 && matrix[i-1][j-1] < min) {
                    min = matrix[i-1][j-1];
                }
                if (j+1 < n && matrix[i-1][j+1] < min) {
                    min = matrix[i-1][j+1];
                }
                matrix[i][j] += min;
            }
        }
        int min = matrix[n-1][0];
        for (int i = 1; i < n; ++i) {
            if (matrix[n-1][i] < min) {
                min = matrix[n-1][i];
            }
        }
        return min;

=======

        int n = matrix.size();
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int min = matrix[i-1][j];
                if (j > 0 && matrix[i-1][j-1] < min) {
                    min = matrix[i-1][j-1];
                }
                if (j < n-1 && matrix[i-1][j+1] < min) {
                    min = matrix[i-1][j+1];
                }
                matrix[i][j] += min;
            }
        }
        int min = matrix[n-1][0];
        for (int i = 1; i < n; ++i) {
            if (matrix[n-1][i] < min) {
                min = matrix[n-1][i];
            }
        }
        return min;

=======

        int n = matrix.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        for (int i = 0; i < n; ++i) {
            dp[n-1][i] = matrix[n-1][i];
        }
        
        for (int i = n - 2; i >= 0; --i) {
            for (int j = 0; j < n; ++j) {
                int left = j - 1 >= 0 ? dp[i+1][j-1] : INT_MAX;
                int right = j + 1 < n ? dp[i+1][j+1] : INT_MAX;
                dp[i][j] = min(dp[i+1][j], min(left, right)) + matrix[i][j];
            }
        }
        
        int result = INT_MAX;
        for (int i = 0; i < n; ++i) {
            result = min(result, dp[0][i]);
        }
        return result;

=======

        int n = matrix.size();
        for(int i=1;i<n;i++)
            for(int j=0;j<n;j++){
                matrix[i][j] += min({matrix[i-1][j],matrix[i-1][max(j-1,0)],matrix[i-1][min(j+1,n-1)]});
            }
        return *min_element(matrix[n-1].begin(),matrix[n-1].end());
