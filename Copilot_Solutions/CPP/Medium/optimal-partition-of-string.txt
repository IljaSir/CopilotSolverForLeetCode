Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        int ans = 0, start = 0, end = 0;
        for (int i = 0; i < n; ++i) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                ++ans;
                start = end + 1;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        int res = 0;
        int l = 0, r = 0;
        for (int i = 0; i < n; ++i) {
            r = max(r, last[s[i] - 'a']);
            if (i == r) {
                ++res;
                l = i + 1;
            }
        }
        return res;

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        int ans = 0, start = 0;
        for (int i = 0; i < n; i++) {
            start = max(start, last[s[i] - 'a']);
            if (i == start) {
                ans++;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        int left = 0, right = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            right = max(right, last[s[i] - 'a']);
            if (i == right) {
                res++;
                left = i + 1;
            }
        }
        return res;

=======

        int n = s.size();
        vector<int> last(26, -1);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        int ans = 0;
        int maxRight = 0;
        for (int i = 0; i < n; i++) {
            maxRight = max(maxRight, last[s[i] - 'a']);
            if (i == maxRight) {
                ans++;
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> last(26, -1);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        int ans = 0;
        int start = 0;
        int end = 0;
        for (int i = 0; i < n; i++) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                ans++;
                start = end + 1;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> last(26);
        for (int i = 0; i < n; ++i) {
            last[s[i] - 'a'] = i;
        }
        int ans = 1;
        int r = 0;
        for (int i = 0; i < n; ++i) {
            r = max(r, last[s[i] - 'a']);
            if (i == r) {
                ++ans;
            }
        }
        return ans - 1;

=======

        int n = s.length();
        vector<int> last(26);
        for (int i = 0; i < n; i++) {
            last[s[i] - 'a'] = i;
        }
        int ans = 0;
        int start = 0;
        int end = 0;
        for (int i = 0; i < n; i++) {
            end = max(end, last[s[i] - 'a']);
            if (i == end) {
                ans++;
                start = end + 1;
            }
        }
        return ans;

=======

        int max_index[26];
        for(int i=0; i<26; i++)
            max_index[i] = -1;
        for(int i=0; i<s.length(); i++)
            max_index[s[i]-'a'] = i;
        int start = 0, end = 0, count = 0;
        while(end < s.length()){
            end = max_index[s[start]-'a'];
            int i = start;
            while(i < end){
                if(max_index[s[i]-'a'] > end)
                    end = max_index[s[i]-'a'];
                i++;
            }
            start = end+1;
            count++;
        }
        return count;
