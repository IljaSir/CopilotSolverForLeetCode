Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        vector<int> comb(k, 0);
        int i = 0;
        while (i >= 0) {
            comb[i]++;
            if (comb[i] > n) --i;
            else if (i == k - 1) res.push_back(comb);
            else {
                ++i;
                comb[i] = comb[i - 1];
            }
        }
        return res;

=======

        vector<vector<int>> res;
        vector<int> temp;
        backtrack(res, temp, n, k, 1);
        return res;
    }
    void backtrack(vector<vector<int>>& res, vector<int>& temp, int n, int k, int start) {
        if (temp.size() == k) {
            res.push_back(temp);
            return;
        }
        for (int i = start; i <= n; i++) {
            temp.push_back(i);
            backtrack(res, temp, n, k, i + 1);
            temp.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> tmp;
        dfs(res, tmp, n, k, 1);
        return res;
    }
    
    void dfs(vector<vector<int>>& res, vector<int>& tmp, int n, int k, int start) {
        if (tmp.size() == k) {
            res.push_back(tmp);
            return;
        }
        
        for (int i = start; i <= n; i++) {
            tmp.push_back(i);
            dfs(res, tmp, n, k, i+1);
            tmp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> path;
        dfs(n, k, 1, path, result);
        return result;
    }
    void dfs(int n, int k, int start, vector<int> &path, vector<vector<int>> &result) {
        if (path.size() == k) {
            result.push_back(path);
            return;
        }
        for (int i = start; i <= n; i++) {
            path.push_back(i);
            dfs(n, k, i + 1, path, result);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> path;
        dfs(n, k, 1, path, ans);
        return ans;
    }
    void dfs(int n, int k, int start, vector<int> &path, vector<vector<int>> &ans) {
        if (path.size() == k) {
            ans.push_back(path);
            return;
        }
        for (int i = start; i <= n; i++) {
            path.push_back(i);
            dfs(n, k, i + 1, path, ans);
            path.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        backtrack(n, k, 1, temp, result);
        return result;
    }
    
    void backtrack(int n, int k, int start, vector<int>& temp, vector<vector<int>>& result){
        if(temp.size() == k){
            result.push_back(temp);
            return;
        }
        for(int i = start; i <= n; i++){
            temp.push_back(i);
            backtrack(n, k, i + 1, temp, result);
            temp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        for (int i = 1; i <= k; i++) {
            temp.push_back(i);
        }
        result.push_back(temp);
        while (true) {
            if (temp[0] == n - k + 1) {
                break;
            }
            int i = k - 1;
            while (i >= 0 && temp[i] == n - k + i + 1) {
                i--;
            }
            temp[i]++;
            for (int j = i + 1; j < k; j++) {
                temp[j] = temp[j - 1] + 1;
            }
            result.push_back(temp);
        }
        return result;

=======

        vector<vector<int>> result;
        vector<int> temp;
        dfs(result, temp, n, k, 1);
        return result;

=======

        vector<vector<int>> res;
        vector<int> v;
        dfs(n, k, 1, v, res);
        return res;
    }
    void dfs(int n, int k, int idx, vector<int> &v, vector<vector<int>> &res) {
        if (v.size() == k) {
            res.push_back(v);
            return;
        }
        for (int i = idx; i <= n; i++) {
            v.push_back(i);
            dfs(n, k, i + 1, v, res);
            v.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        combineCore(n, k, 1, temp, result);
        return result;
    }
    void combineCore(int n, int k, int start, vector<int>& temp, vector<vector<int>>& result) {
        if (k == 0) {
            result.push_back(temp);
            return;
        }
        for (int i = start; i <= n; ++i) {
            temp.push_back(i);
            combineCore(n, k - 1, i + 1, temp, result);
            temp.pop_back();
        }
