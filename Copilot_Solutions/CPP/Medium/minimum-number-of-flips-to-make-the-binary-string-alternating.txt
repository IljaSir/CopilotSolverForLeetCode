Synthesizing 10/10 solutions

=======

        int n = s.size();
        s += s;
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = i; j < i + n; j++) {
                if (j % 2 == 0 && s[j] != '0') cnt++;
                if (j % 2 == 1 && s[j] != '1') cnt++;
            }
            res = min(res, cnt);
        }
        return res;

=======

        int n = s.size();
        s += s;
        int res = INT_MAX;
        for (int i = 0; i < n; ++i) {
            int cnt0 = 0, cnt1 = 0;
            for (int j = i; j < i + n; ++j) {
                if (j % 2 == 0) {
                    if (s[j] == '1') cnt0++;
                    else cnt1++;
                } else {
                    if (s[j] == '1') cnt1++;
                    else cnt0++;
                }
            }
            res = min(res, min(cnt0, cnt1));
        }
        return res;

=======

        int n = s.size();
        string s1 = s + s;
        string s2 = s + s;
        int count1 = 0;
        int count2 = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (s1[i] == '0') {
                    count1++;
                }
                if (s2[i] == '1') {
                    count2++;
                }
            } else {
                if (s1[i] == '1') {
                    count1++;
                }
                if (s2[i] == '0') {
                    count2++;
                }
            }
        }
        int count = min(count1, count2);
        for (int i = n; i < 2 * n; i++) {
            if (s1[i] == s1[i - n]) {
                if (s1[i] == '0') {
                    count1--;
                } else {
                    count1++;
                }
            }
            if (s2[i] == s2[i - n]) {
                if (s2[i] == '0') {
                    count2--;
                } else {
                    count2++;
                }
            }
            count = min(count, min(count1, count2));
        }
        return count;

=======

        int n = s.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] != s[i % 2]) ++res;
        }
        return min(res, n - res);

=======

        int n = s.size();
        int s1 = 0, s2 = 0;
        for (int i = 0; i < n; i++) {
            s1 += (i % 2 == 0) ^ (s[i] - '0');
            s2 += (i % 2 == 1) ^ (s[i] - '0');
        }
        int ans = min(s1, s2);
        for (int i = 0; i < n; i++) {
            s1 += (s[i] - '0') ^ (s[(i + n / 2) % n] - '0');
            s2 += (s[i] - '0') ^ (s[(i + 1 + n / 2) % n] - '0');
            ans = min(ans, min(s1, s2));
        }
        return ans;

=======

        int n = s.length();
        string s1 = "";
        string s2 = "";
        for(int i=0; i<n; i++){
            if(i%2==0){
                s1 += "0";
                s2 += "1";
            }else{
                s1 += "1";
                s2 += "0";
            }
        }
        int res1 = 0;
        int res2 = 0;
        for(int i=0; i<n; i++){
            if(s[i]!=s1[i]) res1++;
            if(s[i]!=s2[i]) res2++;
        }
        int res = min(res1, res2);
        for(int i=0; i<n; i++){
            if(s[i]!=s1[i]) res1--;
            else res1++;
            if(s[i]!=s2[i]) res2--;
            else res2++;
            res = min(res, min(res1, res2));
        }
        return res;

=======

        int n = s.size();
        string t = s + s;
        int res = INT_MAX;
        for (int i = 0; i < n; i++) {
            int cur = 0;
            for (int j = i; j < i + n; j++) {
                if ((j - i) % 2 == 0 && t[j] == '1') cur++;
                if ((j - i) % 2 == 1 && t[j] == '0') cur++;
            }
            res = min(res, cur);
        }
        return res;

=======

        int n = s.size();
        string t = s + s;
        int res = INT_MAX;
        for(int i = 0; i < n; i++){
            int cnt = 0;
            for(int j = i; j < i + n; j++){
                if((j - i) % 2 == 0 && t[j] == '1') cnt++;
                if((j - i) % 2 == 1 && t[j] == '0') cnt++;
            }
            res = min(res, cnt);
        }
        return res;

=======

        int n = s.size();
        string str = s + s;
        string str1 = "";
        string str2 = "";
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                str1 += "0";
                str2 += "1";
            }
            else {
                str1 += "1";
                str2 += "0";
            }
        }
        int ans1 = 0;
        int ans2 = 0;
        for (int i = 0; i < n; ++i) {
            if (str[i] != str1[i]) {
                ans1++;
            }
            if (str[i] != str2[i]) {
                ans2++;
            }
        }
        int ans = min(ans1, ans2);
        for (int i = n; i < 2 * n; ++i) {
            if (str[i] != str1[i - n]) {
                ans1++;
            }
            if (str[i] != str2[i - n]) {
                ans2++;
            }
            if (str[i - n] != str1[i - n]) {
                ans1--;
            }
            if (str[i - n] != str2[i - n]) {
                ans2--;
            }
            ans = min(ans, min(ans1, ans2));
        }
        return ans;

=======

        int n=s.size(),ans=0;
        s+=s;
        int zero=0,one=0;
        for(int i=0;i<n;i++){
            if(s[i]=='0'){
                zero++;
            }else{
                one++;
            }
        }
        ans=min(zero,one);
        for(int i=n;i<2*n;i++){
            if(s[i]=='0'){
                zero++;
            }else{
                one++;
            }
            if(s[i-n]=='0'){
                zero--;
            }else{
                one--;
            }
            ans=min(ans,min(zero,one));
        }
        return ans;
