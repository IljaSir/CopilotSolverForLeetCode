Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.size();
        vector<int> dp(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            int curMax = 0;
            for (int j = 1; j <= k && i - j >= 0; ++j) {
                curMax = max(curMax, arr[i - j]);
                dp[i] = max(dp[i], dp[i - j] + curMax * j);
            }
        }
        return dp[n];

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            int curMax = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                curMax = max(curMax, arr[i - j + 1]);
                dp[i] = max(dp[i], (i >= j ? dp[i - j] : 0) + curMax * j);
            }
        }
        return dp[n - 1];

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            int mx = arr[i];
            for (int j = 1; j <= k && i - j + 1 >= 0; ++j) {
                mx = max(mx, arr[i - j + 1]);
                dp[i] = max(dp[i], (i >= j ? dp[i - j] : 0) + j * mx);
            }
        }
        return dp[n - 1];

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            int mx = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                mx = max(mx, arr[i - j + 1]);
                dp[i] = max(dp[i], (i >= j ? dp[i - j] : 0) + mx * j);
            }
        }
        return dp[n - 1];

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            int mx = 0;
            for (int j = 1; j <= k && i - j + 1 >= 0; j++) {
                mx = max(mx, arr[i - j + 1]);
                dp[i] = max(dp[i], ((i >= j) ? dp[i - j] : 0) + mx * j);
            }
        }
        return dp[n - 1];

=======

        int n = arr.size();
        vector<int> dp(n + 1);
        for (int i = 1; i <= n; ++i) {
            int mx = 0;
            for (int j = 1; j <= k && i - j >= 0; ++j) {
                mx = max(mx, arr[i - j]);
                dp[i] = max(dp[i], dp[i - j] + mx * j);
            }
        }
        return dp[n];

=======

        int n = arr.size();
        vector<int> dp(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            int mx = arr[i - 1];
            for (int j = 1; j <= k && i - j >= 0; ++j) {
                mx = max(mx, arr[i - j]);
                dp[i] = max(dp[i], dp[i - j] + mx * j);
            }
        }
        return dp[n];

=======

        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            int maxVal = arr[i];
            for (int j = 1; j <= k && i - j + 1 >= 0; ++j) {
                maxVal = max(maxVal, arr[i - j + 1]);
                dp[i] = max(dp[i], (i >= j ? dp[i - j] : 0) + maxVal * j);
            }
        }
        return dp[n - 1];
