Synthesizing 10/10 solutions

=======

        long long res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (j - i != nums[j] - nums[i]) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int result = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (j - i != nums[j] - nums[i]) {
                    result++;
                }
            }
        }
        return result;

=======

        long long res = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            res += upper_bound(nums.begin(), nums.end(), nums[i] + i) - nums.begin() - i - 1;
        }
        return res;

=======

        long long res = 0;
        unordered_map<long long, long long> m;
        for (int i = 0; i < nums.size(); ++i) {
            long long diff = nums[i] - i;
            res += m[diff];
            ++m[diff];
        }
        return res;

=======

        long long ans = 0;
        map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            int t = nums[i] - i;
            ans += mp[t];
            mp[t]++;
        }
        return ans;

=======

        int n = nums.size();
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int l = i + 1, r = n - 1, mid, pos = -1;
            while (l <= r) {
                mid = l + r >> 1;
                if (nums[mid] - mid >= nums[i] - i) {
                    pos = mid;
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            if (pos != -1) ans += n - pos;
        }
        return ans;

=======

        int n = nums.size();
        long long ans = 0;
        vector<int> index(n);
        iota(index.begin(), index.end(), 0);
        sort(index.begin(), index.end(), [&](int x, int y) {
            return nums[x] - x < nums[y] - y;
        });
        vector<int> sum(n + 1);
        for (int i = 0; i < n; ++i) {
            int x = index[i];
            ans += i - sum[nums[x] - x + n];
            for (int j = nums[x] - x + n; j <= n; j += j & -j) {
                ++sum[j];
            }
        }
        return ans;

=======

        long long res = 0;
        int n = nums.size();
        vector<int> arr(n, 0);
        for (int i = 0; i < n; ++i) {
            int diff = nums[i] - i;
            res += arr[diff];
            ++arr[diff];
        }
        return res;

=======

        long long res = 0;
        int n = nums.size();
        map<int, int> m;
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            if (m.count(num - i)) {
                res += m[num - i];
            }
            m[num - i]++;
        }
        return res;

=======

        int n = nums.size();
        int64_t res = 0;
        for (int i = 0; i < n; i++) {
            int64_t x = nums[i] - i;
            auto it = lower_bound(nums.begin(), nums.end(), x);
            if (it != nums.end()) {
                res += (nums.end() - it);
            }
        }
        return res;
