Synthesizing 9/10 solutions

=======

        int n = s.size();
        vector<int> left(n), right(n);
        left[0] = 0;
        for (int i = 1; i < n; ++i) {
            if (s[i] - s[i - 1] <= k) {
                left[i] = left[i - 1];
            } else {
                left[i] = i;
            }
        }
        right[n - 1] = n - 1;
        for (int i = n - 2; i >= 0; --i) {
            if (s[i + 1] - s[i] <= k) {
                right[i] = right[i + 1];
            } else {
                right[i] = i;
            }
        }
        int ans = 0;
        for (int i = 0; i < n - 1; ++i) {
            ans = max(ans, right[i + 1] - left[i] + 1);
        }
        return ans;

=======

        int n = s.size();
        int j = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            while (j < n && s[j] - s[i] <= k) {
                j++;
            }
            ans = max(ans, j - i);
        }
        return ans;

=======

        int n = s.length();
        vector<int> cnt(26, 0);
        int i = 0, j = 0, res = 0;
        while (j < n) {
            cnt[s[j] - 'a']++;
            while (i < j && cnt[s[j] - 'a'] - cnt[s[i] - 'a'] > k) {
                cnt[s[i] - 'a']--;
                i++;
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int n = s.size();
        vector<int> last(26, -1);
        int i = 0, j = 0;
        int res = 0;
        while (j < n) {
            last[s[j] - 'a'] = j;
            while (i < j && j - i - *max_element(last.begin(), last.end()) > k) {
                last[s[i] - 'a'] = -1;
                i++;
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int n = s.size();
        int res = 0;
        vector<int> left(n);
        vector<int> right(n);
        left[0] = s[0] - 'a';
        for (int i = 1; i < n; ++i) {
            left[i] = min(left[i - 1], s[i] - 'a');
        }
        right[n - 1] = 'z' - s[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = min(right[i + 1], 'z' - s[i]);
        }
        for (int i = 0; i < n; ++i) {
            if (right[i] <= k && left[i] <= k) {
                res = max(res, i + 1);
            }
        }
        return res;

=======

        int n = s.length();
        vector<int> v(26, -1);
        int l = 0;
        int ans = 0;
        for(int i = 0; i < n; i++){
            v[s[i] - 'a'] = i;
            while(l < i){
                int j = s[l] - 'a';
                if(v[j] > i){
                    break;
                }
                l++;
            }
            if(i - l + 1 <= k){
                ans = max(ans, i - l + 1);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> maxc(n + 1, -1), minc(n + 1, 26);
        for (int i = 0; i < n; ++i) {
            int c = s[i] - 'a';
            maxc[i + 1] = max(maxc[i], c);
            minc[i + 1] = min(minc[i], c);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = i, r = n;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (maxc[mid] - minc[mid] <= k) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            ans = max(ans, l - i);
        }
        return ans;

=======

        int n = s.size();
        vector<int> l(n, 0);
        vector<int> r(n, 0);
        vector<int> mx(n, 0);
        vector<int> mn(n, 0);
        for (int i = 0; i < n; ++i) {
            if (i == 0) {
                l[i] = 0;
                mn[i] = s[i];
            } else {
                l[i] = s[i] - s[i - 1] > k ? 0 : l[i - 1] + 1;
                mn[i] = min(mn[i - 1], s[i]);
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            if (i == n - 1) {
                r[i] = 0;
                mx[i] = s[i];
            } else {
                r[i] = s[i + 1] - s[i] > k ? 0 : r[i + 1] + 1;
                mx[i] = max(mx[i + 1], s[i]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, l[i] + r[i]);
            if (i < n - 1 && mx[i + 1] - mn[i] <= k) {
                ans = max(ans, l[i] + r[i + 1] + 1);
            }
        }
        return ans;

=======

        if (k == 0) return 0;
        int n = s.length();
        vector<int> left(n, 0), right(n, 0);
        int l = 0, r = 0;
        for (int i = 0; i < n; ++i) {
            l = max(l, i - (s[i] - 'a'));
            r = min(r, i + (s[i] - 'a'));
            left[i] = l;
            right[i] = r;
        }
        l = 0, r = 0;
        for (int i = n - 1; i >= 0; --i) {
            l = max(l, i - (s[i] - 'a'));
            r = min(r, i + (s[i] - 'a'));
            left[i] = max(left[i], l);
            right[i] = min(right[i], r);
        }
        int res = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (left[i] <= right[i + 1]) res = max(res, i + 2);
        }
        return res;
