Synthesizing 10/10 solutions

=======

        int n = rooms.size();
        vector<int> visited(n, 0);
        dfs(rooms, visited, 0);
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                return false;
            }
        }
        return true;
    }
    void dfs(vector<vector<int>>& rooms, vector<int>& visited, int room) {
        visited[room] = 1;
        for (int i = 0; i < rooms[room].size(); i++) {
            if (visited[rooms[room][i]] == 0) {
                dfs(rooms, visited, rooms[room][i]);
            }
        }

=======

        int n = rooms.size();
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int key : rooms[cur]) {
                if (!visited[key]) {
                    visited[key] = true;
                    q.push(key);
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                return false;
            }
        }
        return true;

=======

        int n = rooms.size();
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while (!q.empty()) {
            int room = q.front();
            q.pop();
            for (int key : rooms[room]) {
                if (!visited[key]) {
                    visited[key] = true;
                    q.push(key);
                }
            }
        }
        for (bool v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;

=======

        int n = rooms.size();
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while (!q.empty()) {
            int room = q.front();
            q.pop();
            for (int key: rooms[room]) {
                if (!visited[key]) {
                    q.push(key);
                    visited[key] = true;
                }
            }
        }
        for (bool v: visited) {
            if (!v) return false;
        }
        return true;

=======

        vector<bool> visited(rooms.size(), false);
        dfs(rooms, visited, 0);
        for (bool v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;
    }
    
    void dfs(vector<vector<int>>& rooms, vector<bool>& visited, int i) {
        visited[i] = true;
        for (int k : rooms[i]) {
            if (!visited[k]) {
                dfs(rooms, visited, k);
            }
        }

=======

        vector<bool> visited(rooms.size(), false);
        dfs(rooms, 0, visited);
        for (auto v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;
    }
    void dfs(vector<vector<int>>& rooms, int i, vector<bool>& visited) {
        if (visited[i]) {
            return;
        }
        visited[i] = true;
        for (auto j : rooms[i]) {
            dfs(rooms, j, visited);
        }

=======

        int n = rooms.size();
        vector<bool> visited(n, false);
        dfs(rooms, visited, 0);
        for (bool v : visited) {
            if (!v) {
                return false;
            }
        }
        return true;
    }
    
    void dfs(vector<vector<int>>& rooms, vector<bool>& visited, int cur) {
        visited[cur] = true;
        for (int next : rooms[cur]) {
            if (!visited[next]) {
                dfs(rooms, visited, next);
            }
        }

=======

        vector<bool> visited(rooms.size(), false);
        int count = 0;
        dfs(rooms, visited, 0, count);
        return count == rooms.size();
    }
    
    void dfs(vector<vector<int>>& rooms, vector<bool>& visited, int room, int& count) {
        if (visited[room]) return;
        visited[room] = true;
        ++count;
        for (int i = 0; i < rooms[room].size(); ++i) {
            dfs(rooms, visited, rooms[room][i], count);
        }

=======

        unordered_set<int> s;
        queue<int> q;
        q.push(0);
        s.insert(0);
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int i : rooms[cur]) {
                if (s.find(i) == s.end()) {
                    q.push(i);
                    s.insert(i);
                }
            }
        }
        return s.size() == rooms.size();

=======

        int n = rooms.size();
        if (n<=1) return true;
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while (!q.empty()) {
            int top = q.front();
            q.pop();
            for (int i=0; i<rooms[top].size(); i++) {
                if (!visited[rooms[top][i]]) {
                    q.push(rooms[top][i]);
                    visited[rooms[top][i]] = true;
                }
            }
        }
        for (int i=0; i<n; i++) {
            if (!visited[i]) return false;
        }
        return true;
