Synthesizing 7/10 solutions (Duplicates hidden)

=======

        sort(stones.begin(), stones.end());
        int n = stones.size();
        int maxMove = max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2);
        int minMove = maxMove;
        int i = 0, j = 0;
        while (j < n) {
            while (stones[j] - stones[i] >= n) {
                i++;
            }
            int cnt = j - i + 1;
            if (cnt == n - 1 && stones[j] - stones[i] == n - 2) {
                minMove = min(minMove, 2);
            } else {
                minMove = min(minMove, n - cnt);
            }
            j++;
        }
        return {minMove, maxMove};

=======

        sort(stones.begin(), stones.end());
        int n = stones.size();
        int maxv = max(stones[n - 1] - stones[1] + 1 - n + 2, stones[n - 2] - stones[0] + 1 - n + 2);
        int minv = INT_MAX;
        int i = 0, j = 0;
        while (i < n) {
            while (j < n && stones[j] - stones[i] + 1 <= n) {
                j++;
            }
            int cnt = j - i;
            if (cnt == n - 1 && stones[j - 1] - stones[i] + 1 == n - 1) {
                minv = min(minv, 2);
            } else {
                minv = min(minv, n - cnt);
            }
            i++;
        }
        return {minv, maxv};

=======

        int n = stones.size();
        sort(stones.begin(), stones.end());
        int minMoves = INT_MAX;
        int maxMoves = stones[n - 1] - stones[0] - n + 1;
        int left = 0, right = 0;
        while (right < n) {
            while (right < n && stones[right] - stones[left] + 1 <= n) {
                ++right;
            }
            int cost = n - (right - left);
            if (right - left == n - 1 && stones[right - 1] - stones[left] + 1 == n - 1) {
                cost = 2;
            }
            minMoves = min(minMoves, cost);
            ++left;
        }
        return {minMoves, maxMoves};

=======

        sort(stones.begin(), stones.end());
        int n = stones.size();
        int minMoves = INT_MAX;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && stones[j] - stones[i] < n) {
                j++;
            }
            if (j - i == n - 1 && stones[j - 1] - stones[i] == n - 2) {
                minMoves = min(minMoves, 2);
            } else {
                minMoves = min(minMoves, n - (j - i));
            }
        }
        return {minMoves, max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)};

=======

        int n = stones.size();
        sort(stones.begin(), stones.end());
        int minMoves = n;
        int maxMoves = stones[n-1] - stones[0] + 1 - n;
        int i = 0;
        int j = 0;
        while (i < n) {
            while (j < n && stones[j] - stones[i] < n) {
                j++;
            }
            int cost = n - (j - i);
            if (j - i == n - 1 && stones[j-1] - stones[i] + 1 == n - 1) {
                cost = 2;
            }
            minMoves = min(minMoves, cost);
            i++;
        }
        return {minMoves, maxMoves};

=======

        int n = stones.size();
        if (n <= 2) return {0, 0};
        sort(stones.begin(), stones.end());
        int min_moves = INT_MAX;
        for (int i = 0; i < n; ++i) {
            int j = upper_bound(stones.begin(), stones.end(), stones[i] + n - 1) - stones.begin();
            int moves = n - (j - i);
            if (j < n && stones[j] == stones[i] + n - 1) --moves;
            if (i == 0) moves = min(moves, 2 - (stones[1] - stones[0] - 1));
            if (j == n) moves = min(moves, 2 - (stones[n - 1] - stones[n - 2] - 1));
            min_moves = min(min_moves, moves);
        }
        return {min_moves, max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)};
