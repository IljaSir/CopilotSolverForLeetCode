Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int max = 0, mask = 0;
        for (int i = 31; i >= 0; i--) {
            mask = mask | (1 << i);
            unordered_set<int> set;
            for (int num : nums) {
                set.insert(num & mask);
            }
            int tmp = max | (1 << i);
            for (int prefix : set) {
                if (set.count(tmp ^ prefix)) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int max = 0, mask = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> s;
            for (int num : nums) {
                s.insert(num & mask);
            }
            int tmp = max | (1 << i);
            for (int prefix : s) {
                if (s.find(tmp ^ prefix) != s.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int mask = 0, max = 0;
        for (int i = 31; i >= 0; --i) {
            mask |= (1 << i);
            unordered_set<int> set;
            for (int num : nums) {
                set.insert(num & mask);
            }
            int tmp = max | (1 << i);
            for (int prefix : set) {
                if (set.find(tmp ^ prefix) != set.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int res = 0;
        int mask = 0;
        int n = nums.size();
        for (int i = 31; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> s;
            for (int num : nums) {
                s.insert(num & mask);
            }
            int tmp = res | (1 << i);
            for (int num : s) {
                if (s.find(num ^ tmp) != s.end()) {
                    res = tmp;
                    break;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int max = 0;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] ^ nums[j] > max) {
                    max = nums[i] ^ nums[j];
                }
            }
        }
        return max;

=======

        int res = 0;
        for (int i = 31; i >= 0; i--) {
            res <<= 1;
            unordered_set<int> s;
            for (int j = 0; j < nums.size(); j++) {
                s.insert(nums[j] >> i);
            }
            for (int j = 0; j < nums.size(); j++) {
                if (s.find(((res | 1) ^ (nums[j] >> i))) != s.end()) {
                    res++;
                    break;
                }
            }
        }
        return res;

=======

        int mask = 0, max = 0;
        for (int i = 31; i >= 0; i--) {
            mask |= 1 << i;
            set<int> prefix;
            for (int num : nums) {
                prefix.insert(num & mask);
            }
            int tmp = max | (1 << i);
            for (int p : prefix) {
                if (prefix.find(tmp ^ p) != prefix.end()) {
                    max = tmp;
                    break;
                }
            }
        }
        return max;

=======

        int mask = 0;
        int result = 0;
        for (int i = 30; i >= 0; i--) {
            mask |= (1 << i);
            unordered_set<int> set;
            for (auto num : nums) {
                set.insert(num & mask);
            }
            int newResult = result | (1 << i);
            for (auto prefix : set) {
                if (set.find(newResult ^ prefix) != set.end()) {
                    result = newResult;
                    break;
                }
            }
        }
        return result;

=======

        int max = INT_MIN;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = i + 1; j < nums.size(); ++j) {
                int xorValue = nums[i] ^ nums[j];
                if (xorValue > max) {
                    max = xorValue;
                }
            }
        }
        return max;
