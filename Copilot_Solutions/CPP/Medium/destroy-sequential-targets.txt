Synthesizing 6/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] <= space) {
                ++j;
            }
            ans = max(ans, j - i);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 1;
        for (int i = 0; i < n; ++i) {
            int j = i;
            while (j < n && nums[j] - nums[i] <= space) {
                ++j;
            }
            res = max(res, j - i);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if ((nums[i] - nums[j]) % space == 0) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 1;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] <= space) {
                j++;
            }
            ans = max(ans, j - i);
            i = j;
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = 0, r = n - 1;
        int ans = 1;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(nums, mid, space)) {
                l = mid;
                ans = mid;
            }
            else {
                r = mid - 1;
            }
        }
        return nums[ans];
    }
    bool check(vector<int>& nums, int mid, int space) {
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            int j = i + mid;
            if (j >= n) {
                return false;
            }
            if ((nums[j] - nums[i]) % space != 0) {
                return false;
            }
        }
        return true;
