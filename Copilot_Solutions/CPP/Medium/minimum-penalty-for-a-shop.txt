Synthesizing 10/10 solutions

=======

        int n = customers.size();
        int penalty = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'N') {
                penalty++;
            }
        }
        int minPenalty = penalty;
        int minPenaltyHour = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'Y') {
                penalty++;
            } else {
                penalty--;
            }
            if (penalty < minPenalty) {
                minPenalty = penalty;
                minPenaltyHour = i + 1;
            }
        }
        return minPenaltyHour;

=======

        int n = customers.size();
        int penalty = 0;
        for (int i = 0; i < n; ++i) {
            if (customers[i] == 'N') {
                penalty++;
            }
        }
        int best = penalty;
        int bestHour = 0;
        for (int i = 0; i < n; ++i) {
            if (customers[i] == 'N') {
                penalty++;
            } else {
                penalty--;
            }
            if (penalty < best) {
                best = penalty;
                bestHour = i + 1;
            }
        }
        return bestHour;

=======

        int n = customers.size();
        int penalty = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'Y') {
                penalty++;
            }
        }
        int bestPenalty = penalty;
        int bestHour = n;
        for (int i = n - 1; i >= 0; i--) {
            if (customers[i] == 'Y') {
                penalty--;
            } else {
                penalty++;
            }
            if (penalty < bestPenalty) {
                bestPenalty = penalty;
                bestHour = i;
            }
        }
        return bestHour;

=======

        int n = customers.size();
        int penalty = 0;
        for (char c : customers) {
            if (c == 'N') {
                penalty++;
            }
        }
        int minPenalty = penalty;
        int minPenaltyHour = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'Y') {
                penalty++;
            } else {
                penalty--;
            }
            if (penalty < minPenalty) {
                minPenalty = penalty;
                minPenaltyHour = i + 1;
            }
        }
        return minPenaltyHour;

=======

        int n = customers.size();
        vector<int> prefix(n);
        for (int i = 0; i < n; ++i) {
            prefix[i] = (i == 0 ? 0 : prefix[i - 1]) + (customers[i] == 'Y' ? 1 : 0);
        }
        int res = -1;
        int minPenalty = INT_MAX;
        for (int i = 0; i < n; ++i) {
            int penalty = i - prefix[i] + (n - i - 1 - (prefix[n - 1] - prefix[i]));
            if (penalty < minPenalty) {
                minPenalty = penalty;
                res = i;
            }
        }
        return res;

=======

        int n = customers.size();
        int penalty = 0;
        int min_penalty = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'N') {
                penalty++;
            }
        }
        min_penalty = penalty;
        int best_hour = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'N') {
                penalty--;
            }
            if (customers[i] == 'Y') {
                penalty++;
            }
            if (penalty < min_penalty) {
                min_penalty = penalty;
                best_hour = i + 1;
            }
        }
        return best_hour;

=======

        int n = customers.size();
        int penalty = 0;
        int minPenalty = n;
        int minTime = n;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'Y') {
                penalty++;
            } else {
                penalty--;
            }
            if (penalty < minPenalty) {
                minPenalty = penalty;
                minTime = i;
            }
        }
        return minTime;

=======

        int n = customers.size();
        int ans = 0;
        int cnt = 0;
        int minCnt = 0;
        for (int i = 0; i < n; ++i) {
            if (customers[i] == 'Y') {
                ++cnt;
            } else {
                --cnt;
            }
            if (minCnt > cnt) {
                minCnt = cnt;
                ans = i + 1;
            }
        }
        return ans;

=======

        int n = customers.size();
        int penalty = 0;
        int res = 0;
        int minPenalty = n;
        for (int i = 0; i < n; ++i) {
            if (customers[i] == 'N') {
                ++penalty;
            }
        }
        if (penalty < minPenalty) {
            minPenalty = penalty;
            res = 0;
        }
        for (int i = 0; i < n; ++i) {
            if (customers[i] == 'N') {
                --penalty;
            } else {
                ++penalty;
            }
            if (penalty < minPenalty) {
                minPenalty = penalty;
                res = i + 1;
            }
        }
        return res;

=======

        int n = customers.size();
        int penalty = 0, min_penalty = n;
        int bestHour = 0;
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'N') {
                penalty++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (customers[i] == 'Y') {
                penalty++;
            }
            if (customers[(i + 1) % n] == 'N') {
                penalty--;
            }
            if (penalty < min_penalty) {
                min_penalty = penalty;
                bestHour = i + 1;
            }
        }
        return bestHour;
