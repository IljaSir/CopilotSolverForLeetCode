Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 30; ++i) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 32; ++i) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            ans += c * (n - c);
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 30; i++) {
            int c = 0;
            for (int val : nums) {
                c += (val >> i) & 1;
            }
            res += c * (n - c);
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int cnt = 0;
            for (int j = 0; j < nums.size(); ++j) {
                if (nums[j] & (1 << i)) {
                    ++cnt;
                }
            }
            res += cnt * (nums.size() - cnt);
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int cnt = 0;
            for (int num : nums) {
                cnt += (num >> i) & 1;
            }
            res += cnt * (n - cnt);
        }
        return res;

=======

        int n = nums.size();
        int result = 0;
        for (int i = 0; i < 32; i++) {
            int ones = 0;
            for (int j = 0; j < n; j++) {
                ones += (nums[j] >> i) & 1;
            }
            result += ones * (n - ones);
        }
        return result;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < 32; ++i) {
            int c = 0;
            for (int j = 0; j < n; ++j) {
                c += (nums[j] >> i) & 1;
            }
            sum += c * (n - c);
        }
        return sum;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int c = 0;
            for (int num : nums) {
                c += (num >> i) & 1;
            }
            res += c * (n - c);
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int cnt = 0;
            for (int n : nums) {
                cnt += (n >> i) & 1;
            }
            res += cnt * (nums.size() - cnt);
        }
        return res;
