Synthesizing 9/10 solutions

=======

        for (int i = 1; i < s.size(); i++) {
            if (dfs(s, i, stoll(s.substr(0, i)))) {
                return true;
            }
        }
        return false;

=======

        int n = s.size();
        for (int i = 1; i < n; i++) {
            long long num = stoll(s.substr(0, i));
            if (dfs(s, i, num - 1)) return true;
        }
        return false;
    }
    
    bool dfs(string& s, int i, long long num) {
        if (i == s.size()) return true;
        for (int j = i + 1; j <= s.size(); j++) {
            long long cur = stoll(s.substr(i, j - i));
            if (cur == num && dfs(s, j, num - 1)) return true;
        }
        return false;

=======

        int n = s.length();
        for (int i = 1; i < n; i++) {
            long long num = stoll(s.substr(0, i));
            if (dfs(s, i, num)) {
                return true;
            }
        }
        return false;

=======

        int n = s.size();
        for (int i = 1; i < n; ++i) {
            long long val = stoll(s.substr(0, i));
            if (dfs(s.substr(i), val - 1)) {
                return true;
            }
        }
        return false;

=======

        return dfs(s, 0, -1);
    }
    
    bool dfs(string s, int start, long prev) {
        if (start == s.size()) return true;
        long cur = 0;
        for (int i = start; i < s.size(); i++) {
            cur = cur * 10 + s[i] - '0';
            if (cur > INT_MAX) return false;
            if (prev == -1 || prev == cur + 1) {
                if (dfs(s, i + 1, cur)) return true;
            }
        }
        return false;

=======

        int n = s.size();
        for (int i = 1; i < n; i++) {
            string t = s.substr(0, i);
            long long num = stoll(t);
            if (dfs(s, i, num - 1)) return true;
        }
        return false;
    }
    bool dfs(string& s, int i, long long num) {
        if (i == s.size()) return true;
        for (int j = i + 1; j <= s.size(); j++) {
            string t = s.substr(i, j - i);
            long long n = stoll(t);
            if (n == num && dfs(s, j, num - 1)) return true;
        }
        return false;

=======

        int n = s.size();
        if (n < 2) return false;
        for (int i = 1; i < n; i++) {
            int num = stoi(s.substr(0, i));
            if (dfs(s, i, num)) return true;
        }
        return false;
    }
    bool dfs(string& s, int i, int pre) {
        int n = s.size();
        if (i == n) return true;
        for (int j = i + 1; j <= n; j++) {
            int cur = stoi(s.substr(i, j - i));
            if (cur != pre - 1) continue;
            if (dfs(s, j, cur)) return true;
        }
        return false;

=======

        return dfs(s, 0, 0, false);
    }
    bool dfs(string& s, int i, long long pre, bool flag) {
        if (i == s.size()) return flag;
        long long cur = 0;
        for (int j = i; j < s.size(); j++) {
            cur = cur * 10 + s[j] - '0';
            if (cur > pre) break;
            if (cur == pre - 1 && dfs(s, j + 1, cur, true)) return true;
        }
        return false;

=======

        return splitString(s, 0, 0, true);
    }
    bool splitString(string& s, int i, long long prev, bool first) {
        if (i == s.size()) {
            return !first;
        }
        long long cur = 0;
        for (int j = i; j < s.size(); ++j) {
            cur = cur * 10 + s[j] - '0';
            if (cur > prev) {
                break;
            }
            if (cur == prev - 1 && splitString(s, j + 1, cur, false)) {
                return true;
            }
        }
        return false;
