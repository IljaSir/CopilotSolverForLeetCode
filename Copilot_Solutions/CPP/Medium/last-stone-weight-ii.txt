Synthesizing 10/10 solutions

=======

        int n = stones.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += stones[i];
        }
        int target = sum / 2;
        vector<int> dp(target + 1);
        for (int i = 0; i < n; i++) {
            for (int j = target; j >= stones[i]; j--) {
                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);
            }
        }
        return sum - dp[target] * 2;

=======

        int sum = accumulate(stones.begin(), stones.end(), 0);
        int n = stones.size();
        int target = sum / 2;
        vector<vector<int>> dp(n + 1, vector<int>(target + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                if (j >= stones[i - 1]) {
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return sum - dp[n][target] * 2;

=======

        int sum = accumulate(stones.begin(), stones.end(), 0);
        int n = stones.size();
        int m = sum / 2;
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (j >= stones[i - 1]) {
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return sum - 2 * dp[n][m];

=======

        int sum = accumulate(stones.begin(), stones.end(), 0);
        int n = stones.size();
        int m = sum / 2;
        vector<vector<int>> dp(n + 1, vector<int>(m + 1));
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                dp[i][j] = dp[i - 1][j];
                if (j >= stones[i - 1]) {
                    dp[i][j] = max(dp[i][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]);
                }
            }
        }
        return sum - 2 * dp[n][m];

=======

        int n = stones.size();
        int sum = accumulate(stones.begin(), stones.end(), 0);
        vector<vector<int>> dp(n + 1, vector<int>(sum / 2 + 1, 0));
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum / 2; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= stones[i - 1]) {
                    dp[i][j] = max(dp[i][j], dp[i - 1][j - stones[i - 1]] + stones[i - 1]);
                }
            }
        }
        return sum - 2 * dp[n][sum / 2];

=======

        int sum = 0;
        for (int i = 0; i < stones.size(); i++) {
            sum += stones[i];
        }
        int half = sum / 2;
        vector<int> dp(half + 1, 0);
        for (int i = 0; i < stones.size(); i++) {
            for (int j = half; j >= stones[i]; j--) {
                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);
            }
        }
        return sum - 2 * dp[half];

=======

        int sum = 0;
        for (int stone : stones) sum += stone;
        int target = sum / 2;
        vector<int> dp(target + 1, 0);
        for (int stone : stones) {
            for (int i = target; i >= stone; i--) {
                dp[i] = max(dp[i], dp[i - stone] + stone);
            }
        }
        return sum - 2 * dp[target];

=======

        int n = stones.size();
        int sum = accumulate(stones.begin(), stones.end(), 0);
        int target = sum / 2;
        vector<vector<int>> dp(n, vector<int>(target + 1, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= target; j++) {
                if (i == 0) {
                    dp[i][j] = stones[i] == j ? stones[i] : 0;
                } else {
                    dp[i][j] = dp[i - 1][j];
                    if (j >= stones[i]) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j - stones[i]] + stones[i]);
                    }
                }
            }
        }
        return sum - 2 * dp[n - 1][target];

=======

        int sum = 0;
        for (int& s : stones) sum += s;
        int target = sum / 2;
        vector<int> dp(target + 1, 0);
        for (int& s : stones) {
            for (int i = target; i >= s; i--) {
                dp[i] = max(dp[i], dp[i - s] + s);
            }
        }
        return sum - dp[target] - dp[target];

=======

        int n = stones.size();
        int sum = 0;
        for (auto& s : stones) sum += s;
        vector<int> dp(sum / 2 + 1, 0);
        for (int i = 0; i < n; i++) {
            for (int j = sum / 2; j >= stones[i]; j--) {
                dp[j] = max(dp[j], dp[j - stones[i]] + stones[i]);
            }
        }
        return sum - 2 * dp[sum / 2];
