Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        string ans = "";
        for(int i = 0; i < n; i++){
            if(nums[i][i] == '0'){
                ans += '1';
            }else{
                ans += '0';
            }
        }
        return ans;

=======

        int n = nums.size();
        unordered_set<int> st;
        for (int i = 0; i < n; ++i) {
            int val = 0;
            for (int j = 0; j < n; ++j) {
                val = val * 2 + nums[i][j] - '0';
            }
            st.insert(val);
        }
        int val = 0;
        for (int i = 0; i < n; ++i) {
            val = val * 2 + 1;
        }
        for (int i = 0; i < n; ++i) {
            if (st.find(i) == st.end()) {
                val = i;
                break;
            }
        }
        string ans;
        while (val > 0) {
            ans = char('0' + val % 2) + ans;
            val /= 2;
        }
        while (ans.size() < n) {
            ans = '0' + ans;
        }
        return ans;

=======

        string res = "";
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            res += "0";
        }
        for (int i = 0; i < n; i++) {
            if (nums[i][i] == '0') {
                res[i] = '1';
            }
        }
        return res;

=======

        int n = nums.size();
        int i = 0;
        for (auto s: nums) {
            if (s[i] == '0') {
                s[i] = '1';
            } else {
                s[i] = '0';
            }
            if (find(nums.begin(), nums.end(), s) == nums.end()) {
                return s;
            }
            i = (i + 1) % n;
        }
        return "";

=======

        int n = nums.size();
        int mask = (1 << n) - 1;
        for (auto& s : nums) {
            int val = 0;
            for (char c : s) {
                val = (val << 1) + (c - '0');
            }
            mask &= ~(1 << val);
        }
        string res;
        for (int i = 0; i < n; ++i) {
            res.push_back((mask & (1 << i)) ? '1' : '0');
        }
        return res;

=======

        int n = nums.size();
        int i = 0;
        while (i < n) {
            if (nums[i][i] == '1') {
                nums[i][i] = '0';
            } else {
                nums[i][i] = '1';
            }
            i++;
        }
        return nums[n-1];

=======

        int n = nums.size();
        string ans = "";
        for (int i = 0; i < n; i++) {
            ans += '0';
        }
        unordered_set<string> s;
        for (int i = 0; i < n; i++) {
            s.insert(nums[i]);
        }
        for (int i = 0; i < (1 << n); i++) {
            string cur = "";
            int num = i;
            for (int j = 0; j < n; j++) {
                cur += (num & 1) + '0';
                num >>= 1;
            }
            if (s.find(cur) == s.end()) {
                return cur;
            }
        }
        return ans;

=======

        int n = nums.size();
        int x = 0;
        for (auto& s : nums) {
            x <<= 1;
            x += s[0] - '0';
        }
        string res;
        while (n--) {
            res.push_back('0' + (x & 1));
            x >>= 1;
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        int k = 0;
        int num = 0;
        int max = 0;
        int result = 0;
        for(i = 0; i < n; i++)
        {
            num = 0;
            for(j = 0; j < n; j++)
            {
                if(nums[i][j] == '1')
                {
                    num += (1 << (n - j - 1));
                }
            }
            result ^= num;
        }
        max = (1 << n) - 1;
        result ^= max;
        string ret = "";
        for(i = 0; i < n; i++)
        {
            if(result & (1 << (n - i - 1)))
            {
                ret += "1";
            }
            else
            {
                ret += "0";
            }
        }
        return ret;
