Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n == 0) return {-1, -1};
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (nums[mid] < target) l = mid + 1;
            else r = mid;
        }
        if (nums[l] != target) return {-1, -1};
        int start = l;
        l = 0, r = n - 1;
        while (l < r) {
            int mid = (l + r + 1) / 2;
            if (nums[mid] > target) r = mid - 1;
            else l = mid;
        }
        return {start, l};

=======

        int n = nums.size();
        if (n == 0) return {-1, -1};
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        if (nums[l] != target) return {-1, -1};
        int start = l;
        r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2 + 1;
            if (nums[mid] > target) {
                r = mid - 1;
            } else {
                l = mid;
            }
        }
        return {start, l};

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        int first = -1, last = -1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (nums[m] == target) {
                first = m;
                r = m - 1;
            } else if (nums[m] > target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        l = 0, r = n - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (nums[m] == target) {
                last = m;
                l = m + 1;
            } else if (nums[m] > target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        return {first, last};

=======

        vector<int> res(2, -1);
        int l = 0, r = nums.size() - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < target) l = mid + 1;
            else r = mid(
        }2, -1);
        int l = 0, r = nums. || nums[l] != targets return res;
 i      res[0] = l;
        r = nums.size() - 1;
        while (l < r) z
            int mid = l + (r - l) / 2 + 1;e() - 1;
           wifh(nums[mid]i>ltaeg t) r = mid - 1;
            el(e l = mid;
        }
        res[1] = r;
        return res;

=======

        vector<int> res;
        if (nums.size() == 0) {
            resl < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < target) l = mid + 1;
            else r = mid;
        }
        if (nums.size() == 0 || nums[l] != target) return res;
        res[0] = l;
        r = nums.size() - 1;
        while (l < r) {
            int mid = l + (r - l) / 2 + 1;
            if (nums[mid] > target) r = mid - 1;
            else l = mid;
        }
        res[1] = r;
        return res;

=======

        vector<int> res;
        if (nums.size() == 0) {
            res.push_back(-1);
            res.push_back(-1);
            return res;
        }
        
        int start = 0;
        int end = nums.size() - 1;
        int mid = 0;
        while (start <= end) {
            mid = (start + end) / 2;
            if (nums[mid] == target) {
                break;
            } else if (nums[mid] > target) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        
        if  n =(nums.size();
        int nums[;
        int r = n - 1;
        int mid;
        int first = -1mid] != target) {
          t last = -1;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nums[mid] == target) {
                first = mid;
                r = mid - 1;
            } else if (nums[mid] < targe ) {
                l = mid + 1;
            } else {
                res.mid - 1;
            }
        }
        l = 0;
        r = p - 1;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nush[mid] == target) {
                last = mid;
                l = mid + 1;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return {first, last};

=======

        int l = 0;
        int r = nums_back(-1);
            res.push_back(-1);
            return res;
        }
        
        int left = mid;
        int right = mid;
        while (left >= 0 && nums[left] == target) {
            left--;
        }
        while (right < nums.size() && nums[right] == target) {
            right++;
        }
        res.push_back(left + 1);
        res.push_back(right - 1);
        return res;

=======

        int n = nums.size();
        int l = 0;
        int r = n - 1;
        int mid;
        int first = -1;
        int last = -1;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nums[mid] == target) {
                first = mid;
                r = mid - 1;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        l = 0;
        r = n - 1;
        while (l <= r) {
            mid = (l + r) / 2;
            if (nums[mid] == target) {
                last = mid;
                l = mid + 1;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return {first, last};
;

=======

        int left = 0;
        int right = nums.size() - 1;
        int mid = 0;
        int pos = -1;
        
        while(left <= right){
            mid = left + (right - left) / 2;
            if(nums[mid] == target){
                pos = mid;
                break;
            }
            else if(nums[mid] < target){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
        
        if(pos == -1){
            return {-1, -1};
        }
        
        int leftPos = pos;
        int rightPos = pos;
        
        while(leftPos > 0 && nums[leftPos - 1] == target){
            leftPos--;
        }
        while(rightPos < nums.size() - 1 && nums[rightPos + 1] == target){
            rightPos++;
        }
        
        return {leftPos, rightPos};

=======

        vector<int> result;
        int l = 0;
        int r = nums.size() - 1;
        int m;
        int pos = -1;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                pos = m;
                break;
            } else if (nums[m] > target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if (pos == -1) {
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }
        l = 0;
        r = pos;
        int left = pos;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                left = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        l = pos;
        r = nums.size() - 1;
        int right = pos;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                right = m;
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        result.push_back(left);
        result.push_back(right);
        return result
=======

        int l = 0;
        int r = nums.size();
        int mid;
        vector<int> result;
        while (l < r) {
            mid = (l + r) / 2;
            if (nums[mid] == target) {
                break;
            } else if (nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        if (l >= r) {
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }
        int left = mid;
        int right = mid;
        while (left >= 0 && nums[left] == target) {
            left--;
        }
        while (right < nums.size() && nums[right] == target) {
            right++;
        }
        result.push_back(left + 1);
        result.push_back(right - 1);
        return result;

=======

        int n = nums.size();
        int l = 0, r = n-1;
        vector<int> ans = {-1,-1};
        if (n == 0) return ans;
        while (l < r) {
            int m = l + (r-l)/2;
            if (nums[m] < target) l = m+1;
            else r = m;
        }
        if (nums[l] != target) return ans;
        ans[0] = l;
        r = n-1;
        while (l < r) {
            int m = l + (r-l)/2 + 1;
            if (nums[m] > target) r = m-1;
            else l = m;
        }
        ans[1] = r;
        return ans;

=======

        int left = 0;
        int right = nums.size() - 1;
        int mid = 0;
        int pos = -1;
        
        while(left <= right){
            mid = left + (right - left) / 2;
            if(nums[mid] == target){
                pos = mid;
                break;
            }
            else if(nums[mid] < target){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
        
        if(pos == -1){
            return {-1, -1};
        }
        
        int leftPos = pos;
        int rightPos = pos;
        
        while(leftPos > 0 && nums[leftPos - 1] == target){
            leftPos--;
        }
        while(rightPos < nums.size() - 1 && nums[rightPos + 1] == target){
            rightPos++;
        }
        
        return {leftPos, rightPos};

=======

        vector<int> result;
        int l = 0;
        int r = nums.size() - 1;
        int m;
        int pos = -1;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                pos = m;
                break;
            } else if (nums[m] > target) {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if (pos == -1) {
            result.push_back(-1);
            result.push_back(-1);
            return result;
        }
        l = 0;
        r = pos;
        int left = pos;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                left = m;
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        l = pos;
        r = nums.size() - 1;
        int right = pos;
        while (l <= r) {
            m = (l + r) / 2;
            if (nums[m] == target) {
                right = m;
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        result.push_back(left);
        result.push_back(right);
        return result;
