Synthesizing 10/10 solutions

=======

        int parent[26];
        for (int i = 0; i < 26; i++) {
            parent[i] = i;
        }
        for (auto equation : equations) {
            if (equation[1] == '=') {
                int x = equation[0] - 'a';
                int y = equation[3] - 'a';
                unionSet(parent, x, y);
            }
        }
        for (auto equation : equations) {
            if (equation[1] == '!') {
                int x = equation[0] - 'a';
                int y = equation[3] - 'a';
                if (findSet(parent, x) == findSet(parent, y)) {
                    return false;
                }
            }
        }
        return true;
    }
    int findSet(int parent[], int x) {
        if (parent[x] != x) {
            parent[x] = findSet(parent, parent[x]);
        }
        return parent[x];
    }
    void unionSet(int parent[], int x, int y) {
        int xset = findSet(parent, x);
        int yset = findSet(parent, y);
        if (xset != yset) {
            parent[xset] = yset;
        }

=======

        int n = equations.size();
        vector<int> p(26);
        for (int i = 0; i < 26; i++) p[i] = i;
        for (int i = 0; i < n; i++) {
            if (equations[i][1] == '=') {
                int x = equations[i][0] - 'a';
                int y = equations[i][3] - 'a';
                p[find(p, x)] = find(p, y);
            }
        }
        for (int i = 0; i < n; i++) {
            if (equations[i][1] == '!') {
                int x = equations[i][0] - 'a';
                int y = equations[i][3] - 'a';
                if (find(p, x) == find(p, y)) return false;
            }
        }
        return true;
    }
    int find(vector<int>& p, int x) {
        if (x != p[x]) p[x] = find(p, p[x]);
        return p[x];

=======

        vector<int> parent(26);
        for (int i = 0; i < 26; ++i) {
            parent[i] = i;
        }
        
        for (const auto& e : equations) {
            if (e[1] == '=') {
                parent[find(parent, e[0] - 'a')] = find(parent, e[3] - 'a');
            }
        }
        
        for (const auto& e : equations) {
            if (e[1] == '!') {
                if (find(parent, e[0] - 'a') == find(parent, e[3] - 'a')) {
                    return false;
                }
            }
        }
        return true;
    }
    
    int find(vector<int>& parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        vector<int> parent(26, -1);
        for (auto& e : equations) {
            if (e[1] == '=') {
                int x = e[0] - 'a';
                int y = e[3] - 'a';
                union_op(parent, x, y);
            }
        }
        for (auto& e : equations) {
            if (e[1] == '!') {
                int x = e[0] - 'a';
                int y = e[3] - 'a';
                if (find_op(parent, x) == find_op(parent, y))
                    return false;
            }
        }
        return true;
    }
    void union_op(vector<int>& parent, int x, int y) {
        int px = find_op(parent, x);
        int py = find_op(parent, y);
        if (px != py)
            parent[px] = py;

=======

        vector<int> parent(26, -1);
        for (auto& eq : equations) {
            if (eq[1] == '=') {
                int x = eq[0] - 'a';
                int y = eq[3] - 'a';
                int px = find(parent, x);
                int py = find(parent, y);
                if (px != py) {
                    parent[px] = py;
                }
            }
        }
        for (auto& eq : equations) {
            if (eq[1] == '!') {
                int x = eq[0] - 'a';
                int y = eq[3] - 'a';
                int px = find(parent, x);
                int py = find(parent, y);
                if (px == py) {
                    return false;
                }
            }
        }
        return true;
    }
    int find(vector<int>& parent, int x) {
        if (parent[x] == -1) {
            return x;
        }
        return parent[x] = find(parent, parent[x]);

=======

        vector<int> parent(26);
        for (int i = 0; i < 26; ++i) {
            parent[i] = i;
        }
        for (string &equation : equations) {
            if (equation[1] == '=') {
                int x = equation[0] - 'a';
                int y = equation[3] - 'a';
                unionSet(parent, x, y);
            }
        }
        for (string &equation : equations) {
            if (equation[1] == '!') {
                int x = equation[0] - 'a';
                int y = equation[3] - 'a';
                if (findSet(parent, x) == findSet(parent, y)) {
                    return false;
                }
            }
        }
        return true;
    }
    void unionSet(vector<int> &parent, int index1, int index2) {
        parent[findSet(parent, index1)] = findSet(parent, index2);
    }
    int findSet(vector<int> &parent, int index) {
        if (parent[index] != index) {
            parent[index] = findSet(parent, parent[index]);
        }
        return parent[index];

=======

        vector<int> parent(26, -1);
        for (auto& e : equations) {
            if (e[1] == '!') continue;
            int x = e[0] - 'a', y = e[3] - 'a';
            int px = find(parent, x), py = find(parent, y);
            if (px != py) parent[px] = py;
        }
        for (auto& e : equations) {
            if (e[1] == '=') continue;
            int x = e[0] - 'a', y = e[3] - 'a';
            int px = find(parent, x), py = find(parent, y);
            if (px == py) return false;
        }
        return true;

=======

        vector<int> parent(26, -1);
        for (auto& e: equations) {
            if (e[1] == '!') continue;
            int x = e[0] - 'a';
            int y = e[3] - 'a';
            parent[findParent(parent, x)] = findParent(parent, y);
        }
        for (auto& e: equations) {
            if (e[1] == '=') continue;
            int x = e[0] - 'a';
            int y = e[3] - 'a';
            if (findParent(parent, x) == findParent(parent, y)) return false;
        }
        return true;

=======

        int n = equations.size();
        vector<int> parent(26);
        for (int i = 0; i < 26; ++i) {
            parent[i] = i;
        }
        for (auto &e: equations) {
            if (e[1] == '=') {
                int x = e[0] - 'a';
                int y = e[3] - 'a';
                parent[find(parent, x)] = find(parent, y);
            }
        }
        for (auto &e: equations) {
            if (e[1] == '!') {
                int x = e[0] - 'a';
                int y = e[3] - 'a';
                if (find(parent, x) == find(parent, y)) {
                    return false;
                }
            }
        }
        return true;
    }
    int find(vector<int> &parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        vector<int> parent(26);
        for(int i=0;i<26;i++) parent[i]=i;
        for(string& s:equations){
            if(s[1]=='='){
                int x=s[0]-'a',y=s[3]-'a';
                parent[find(parent,x)]=find(parent,y);
            }
        }
        for(string& s:equations){
            if(s[1]=='!'){
                int x=s[0]-'a',y=s[3]-'a';
                if(find(parent,x)==find(parent,y)) return false;
            }
        }
        return true;
