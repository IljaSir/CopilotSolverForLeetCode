Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s[i] == s[i + 1] ? 2 : 1;
        }
        for (int i = n - 3; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                if (s[i] == s[j]) {
                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);
                }
            }
        }
        int ans = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                ans = max(ans, dp[0][i] * dp[j][n - 1]);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j + i < n; j++) {
                if (s[j] == s[j + i]) {
                    dp[j][j + i] = 2 + dp[j + 1][j + i - 1];
                } else {
                    dp[j][j + i] = max(dp[j + 1][j + i], dp[j][j + i - 1]);
                }
            }
        }
        int res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                res = max(res, dp[0][i] * dp[j][n - 1]);
            }
        }
        return res;

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                if (s[i] == s[j]) {
                    dp[i][j] = 2 + dp[i + 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (dp[0][i] * dp[j][n - 1] > ans) {
                    ans = dp[0][i] * dp[j][n - 1];
                }
                if (dp[0][j] * dp[i][n - 1] > ans) {
                    ans = dp[0][j] * dp[i][n - 1];
                }
            }
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (s[i] == s[j]) {
                    dp[j][i] = dp[j + 1][i - 1] + 2;
                } else {
                    dp[j][i] = max(dp[j + 1][i], dp[j][i - 1]);
                }
            }
        }
        int res = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                int len1 = dp[0][i] + dp[j + 1][n - 1];
                int len2 = dp[i + 1][j];
                res = max(res, len1 * len2);
            }
        }
        return res;

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; ++i) {
            dp[i][i + 1] = s[i] == s[i + 1] ? 2 : 1;
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i + len <= n; ++i) {
                int j = i + len - 1;
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                if (s[i] == s[j]) {
                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);
                }
            }
        }
        int res = 1;
        for (int i = 0; i < n - 1; ++i) {
            res = max(res, dp[0][i] * dp[i + 1][n - 1]);
        }
        return res;

=======

        int n = s.size();
        vector<int> dp(1 << n);
        for (int i = 0; i < (1 << n); i++) {
            string t;
            for (int j = 0; j < n; j++) {
                if (i >> j & 1) {
                    t.push_back(s[j]);
                }
            }
            if (t == string(t.rbegin(), t.rend())) {
                dp[i] = t.size();
            }
        }
        int ans = 0;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = i; j; j = (j - 1) & i) {
                ans = max(ans, dp[i] * dp[j]);
            }
        }
        return ans;

=======

        int n = s.length();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < (1 << n); ++i) {
            string t = "";
            for (int j = 0; j < n; ++j) {
                if (i & (1 << j)) {
                    t += s[j];
                }
            }
            if (isPalindromic(t)) {
                dp[i] = t.length();
            }
        }
        int ans = 0;
        for (int i = 0; i < (1 << n); ++i) {
            for (int j = i + 1; j < (1 << n); ++j) {
                if ((i & j) == 0) {
                    ans = max(ans, dp[i] * dp[j]);
                }
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; ++i) {
            int mask = 0;
            for (int j = i; j < n; ++j) {
                mask ^= (1 << (s[j] - 'a'));
                if ((mask & (mask - 1)) == 0) {
                    dp[j] = max(dp[j], __builtin_popcount(mask));
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n - 1; ++i) {
            for (int j = i + 1; j < n; ++j) {
                ans = max(ans, dp[i] * dp[j]);
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(1 << n, 0);
        for (int i = 0; i < (1 << n); i++) {
            int l = 0;
            int r = n - 1;
            while (l < r) {
                while (l < r && !(i & (1 << l))) l++;
                while (l < r && !(i & (1 << r))) r--;
                if (s[l] != s[r]) break;
                l++;
                r--;
            }
            if (l >= r) dp[i] = __builtin_popcount(i);
        }
        int result = 0;
        for (int i = 0; i < (1 << n); i++) {
            result = max(result, dp[i] * dp[((1 << n) - 1) ^ i]);
        }
        return result;
