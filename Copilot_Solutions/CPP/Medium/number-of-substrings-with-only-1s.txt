Synthesizing 10/10 solutions

=======

        int count = 0;
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '1') {
                count++;
            } else {
                sum += count * (count + 1) / 2;
                sum %= 1000000007;
                count = 0;
            }
        }
        sum += count * (count + 1) / 2;
        sum %= 1000000007;
        return sum;

=======

        int cnt = 0;
        int ans = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '1') {
                cnt++;
                ans += cnt;
                ans %= 1000000007;
            } else {
                cnt = 0;
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '0') {
                cnt = 0;
                continue;
            }
            ans = (ans + (++cnt)) % 1000000007;
        }
        return ans;

=======

        int count = 0;
        int sum = 0;
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') {
                count++;
            } else {
                sum += (count * (count + 1)) / 2;
                sum %= 1000000007;
                count = 0;
            }
        }
        sum += (count * (count + 1)) / 2;
        sum %= 1000000007;
        return sum;

=======

        int count = 0;
        int sum = 0;
        for (auto c : s) {
            if (c == '1') {
                count++;
            } else {
                sum += count * (count + 1) / 2;
                count = 0;
            }
        }
        sum += count * (count + 1) / 2;
        return sum % 1000000007;

=======

        int cnt = 0;
        int ans = 0;
        int mod = 1e9+7;
        for (char c : s) {
            if (c == '1') {
                cnt++;
            } else {
                ans += (cnt * (cnt + 1) / 2) % mod;
                ans %= mod;
                cnt = 0;
            }
        }
        ans += (cnt * (cnt + 1) / 2) % mod;
        ans %= mod;
        return ans;

=======

        int n = s.size();
        long long int count = 0;
        long long int sum = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == '1'){
                count++;
            }else{
                sum = (sum + (count * (count + 1)) / 2) % 1000000007;
                count = 0;
            }
        }
        sum = (sum + (count * (count + 1)) / 2) % 1000000007;
        return (int)sum;

=======

        long long int count = 0;
        long long int sum = 0;
        for (auto c : s) {
            if (c == '1') {
                count++;
            } else {
                sum = (sum + ((count * (count + 1)) / 2)) % 1000000007;
                count = 0;
            }
        }
        sum = (sum + ((count * (count + 1)) / 2)) % 1000000007;
        return sum;

=======

        int count = 0;
        int sum = 0;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '1') count++;
            else{
                sum += (count+1)*count/2;
                count = 0;
            }
        }
        sum += (count+1)*count/2;
        return sum % (int)(1e9+7);

=======

        long long int count = 0;
        long long int mod = 1000000007;
        long long int sum = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == '1') {
                count++;
            } else {
                sum = (sum + ((count * (count+1))/2)) % mod;
                count = 0;
            }
        }
        sum = (sum + ((count * (count+1))/2)) % mod;
        return sum;
