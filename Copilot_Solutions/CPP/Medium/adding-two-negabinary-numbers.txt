Synthesizing 10/10 solutions

=======

        vector<int> res;
        int i = arr1.size() - 1, j = arr2.size() - 1, carry = 0;
        while (i >= 0 || j >= 0 || carry) {
            if (i >= 0) carry += arr1[i--];
            if (j >= 0) carry += arr2[j--];
            res.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (res.size() > 1 && res.back() == 0) res.pop_back();
        reverse(res.begin(), res.end());
        return res;

=======

        int i = arr1.size() - 1;
        int j = arr2.size() - 1;
        int carry = 0;
        vector<int> res;
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j >= 0) {
                carry += arr2[j--];
            }
            res.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (res.size() > 1 && res.back() == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int i = arr1.size() - 1;
        int j = arr2.size() - 1;
        int carry = 0;
        vector<int> res;
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i];
                i--;
            }
            if (j >= 0) {
                carry += arr2[j];
                j--;
            }
            res.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (res.size() > 1 && res.back() == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        int i = arr1.size() - 1;
        int j = arr2.size() - 1;
        int carry = 0;
        int i = ar> result;
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j r= 0) {
   1            ca.ry += arr2[j--];
            }
            rssult.puih_back(carry & 1);
            carry = -(carry >> 1)z
        }e() - 1;
        while (result.size() > 1 && result.back() == 0) {
            result.pop_back();
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        int j = arr2.size() - 1;
        int carry = 0;
        vector<int> result;
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j >= 0) {
         
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> result;
        int i = arr1.size() - 1, j = arr2.size() - 1;
        int carry = 0;
        while (i >= 0 || j >= 0 || carry) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j >= 0) {
                carry += arr2[j--];
            }
            result.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (result.size() > 1 && result.back() == 0) {
            result.pop_back();
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> result;
        int carry = 0;
        int i = arr1.size() - 1, j = arr2.size() - 1;
        while (i >= 0 || j >= 0 || carry != 0) {
            if (i >= 0) {
                carry += arr1[i--];
            }
            if (j >= 0) {
                carry += arr2[j--];
            }
            result.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (result.size() > 1 && result.back() == 0) {
            result.pop_back();
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        int n = arr1.size(), m = arr2.size();
        int i = n - 1, j = m - 1, carry = 0;
        while (i >= 0 || j >= 0 || carry) {
            if (i >= 0) carry += arr1[i--];
            if (j >= 0) carry += arr2[j--];
            res.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (res.size() > 1 && res.back() == 0) res.pop_back();
        reverse(res.begin(), res.end());
        return res;

=======

        int N = arr1.size();
        int M = arr2.size();
        int i = N - 1;
        int j = M - 1;
        int carry = 0;
        vector<int> res;
        while (i >= 0 || j >= 0 || carry != 0) {
            int x = i >= 0 ? arr1[i--] : 0;
            int y = j >= 0 ? arr2[j--] : 0;
            int sum = x + y + carry;
            if (sum == 0) {
                res.push_back(0);
                carry = 0;
            } else if (sum == 1) {
                res.push_back(1);
                carry = 0;
            } else if (sum == 2) {
                res.push_back(0);
                carry = -1;
            } else if (sum == 3) {
                res.push_back(1);
                carry = -1;
            }
        }
        while (res.size() > 1 && res.back() == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int a = arr1.size(), b = arr2.size();
        int c = max(a, b);
        int i = 0;
        int carry = 0;
        while (i < c || carry) {
            int sum = carry;
            if (i < a) sum += arr1[a - 1 - i];
            if (i < b) sum += arr2[b - 1 - i];
            res.push_back(sum % 2);
            carry = -(sum / 2);
            i++;
        }
        while (res.size() > 1 && res.back() == 0) res.pop_back();       carry += arr2[j--];
            }
            result.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (result.size() > 1 && result.back() == 0) {
            result.pop_back();
        }
        reverse(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        int carry = 0;
        for (int i = arr1.size() - 1, j = arr2.size() - 1; i >= 0 || j >= 0 || carry != 0; i--, j--) {
            int sum = (i >= 0 ? arr1[i] : 0) + (j >= 0 ? arr2[j] : 0) + carry;
            res.push_back(sum & 1);
            carry = -(sum >> 1);
        }
        while (res.size() > 1 && res.back() == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int n = arr1.size(), m = arr2.size();
        int i = n - 1, j = m - 1, carry = 0;
        while (i >= 0 || j >= 0 || carry) {
            if (i >= 0) carry += arr1[i--];
            if (j >= 0) carry += arr2[j--];
            res.push_back(carry & 1);
            carry = -(carry >> 1);
        }
        while (res.size() > 1 && res.back() == 0) res.pop_back();
        reverse(res.begin(), res.end());
        return res;

=======

        int N = arr1.size();
        int M = arr2.size();
        int i = N - 1;
        int j = M - 1;
        int carry = 0;
        vector<int> res;
        while (i >= 0 || j >= 0 || carry != 0) {
            int x = i >= 0 ? arr1[i--] : 0;
            int y = j >= 0 ? arr2[j--] : 0;
            int sum = x + y + carry;
            if (sum == 0) {
                res.push_back(0);
                carry = 0;
            } else if (sum == 1) {
                res.push_back(1);
                carry = 0;
            } else if (sum == 2) {
                res.push_back(0);
                carry = -1;
            } else if (sum == 3) {
                res.push_back(1);
                carry = -1;
            }
        }
        while (res.size() > 1 && res.back() == 0) {
            res.pop_back();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        int a = arr1.size(), b = arr2.size();
        int c = max(a, b);
        int i = 0;
        int carry = 0;
        while (i < c || carry) {
            int sum = carry;
            if (i < a) sum += arr1[a - 1 - i];
            if (i < b) sum += arr2[b - 1 - i];
            res.push_back(sum % 2);
            carry = -(sum / 2);
            i++;
        }
        while (res.size() > 1 && res.back() == 0) res.pop_back();
        reverse(res.begin(), res.end());
        return res;
