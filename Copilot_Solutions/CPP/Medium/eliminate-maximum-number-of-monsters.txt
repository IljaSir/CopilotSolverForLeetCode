Synthesizing 10/10 solutions

=======

        int n = dist.size();
        vector<int> time(n);
        for (int i = 0; i < n; ++i) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(time.begin(), time.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (i < time[i]) {
                ++ans;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = dist.size();
        vector<int> time(n);
        for (int i = 0; i < n; ++i) {
            time[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(time.begin(), time.end());
        int i = 0;
        for (; i < n; ++i) {
            if (time[i] <= i) {
                break;
            }
        }
        return i;

=======

        int n = dist.size();
        vector<int> t(n);
        for (int i = 0; i < n; i++) {
            t[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(t.begin(), t.end());
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (t[i] <= i) {
                break;
            }
            res++;
        }
        return res;

=======

        int n = dist.size();
        vector<int> t(n);
        for (int i = 0; i < n; i++) {
            t[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(t.begin(), t.end());
        int i = 0;
        while (i < n && t[i] > i) {
            i++;
        }
        return i;

=======

        int n = dist.size();
        vector<int> times(n);
        for (int i = 0; i < n; i++) {
            times[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(times.begin(), times.end());
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (times[i] > i) {
                res++;
            } else {
                break;
            }
        }
        return res;

=======

        int n = dist.size();
        vector<int> times(n);
        for (int i = 0; i < n; i++) {
            times[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(times.begin(), times.end());
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (times[i] <= i) {
                return i;
            }
        }
        return n;

=======

        int n = dist.size();
        vector<int> times(n, 0);
        for (int i = 0; i < n; ++i) {
            times[i] = (dist[i] + speed[i] - 1) / speed[i];
        }
        sort(times.begin(), times.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (ans < times[i]) {
                ++ans;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = dist.size();
        double time[n];
        for (int i = 0; i < n; i++) {
            time[i] = (double) dist[i] / speed[i];
        }
        sort(time, time + n);
        int kill = 0;
        for (int i = 0; i < n; i++) {
            if (time[i] > i) {
                kill++;
            } else {
                break;
            }
        }
        return kill;

=======

        int n = dist.size();
        vector<double> t(n);
        for(int i = 0; i < n; i++) {
            t[i] = (double) dist[i] / speed[i];
        }
        sort(t.begin(), t.end());
        int i = 0;
        while(i < n && t[i] > i) i++;
        return i;

=======

        int n = dist.size();
        vector<double> time(n);
        for(int i=0; i<n; i++) {
            time[i] = (double)dist[i]/speed[i];
        }
        sort(time.begin(), time.end());
        int i = 0;
        for(; i<n; i++) {
            if(time[i] <= i) {
                break;
            }
        }
        return i;
