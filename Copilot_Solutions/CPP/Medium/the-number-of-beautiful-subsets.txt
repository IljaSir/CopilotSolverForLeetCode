Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            bool ok = true;
            for (int j = 0; j < n; j++) {
                for (int l = j + 1; l < n; l++) {
                    if ((i & (1 << j)) && (i & (1 << l)) && abs(nums[j] - nums[l]) == k) {
                        ok = false;
                    }
                }
            }
            if (ok) {
                res++;
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            bool ok = true;
            for (int j = 0; j < n; j++) {
                for (int l = j + 1; l < n; l++) {
                    if ((i & (1 << j)) && (i & (1 << l)) && abs(nums[j] - nums[l]) == k) {
                        ok = false;
                        break;
                    }
                }
                if (!ok) break;
            }
            if (ok) res++;
        }
        return res;

=======

        int n = nums.size();
        int dp[1 << n];
        memset(dp, 0, sizeof(dp));
        dp[0] = 1;
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i]) {
                for (int j = 0; j < n; j++) {
                    if (i & (1 << j)) continue;
                    bool ok = true;
                    for (int l = 0; l < n; l++) {
                        if (i & (1 << l)) {
                            if (abs(nums[l] - nums[j]) == k) {
                                ok = false;
                                break;
                            }
                        }
                    }
                    if (ok) dp[i | (1 << j)] += dp[i];
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.size();
        int ans = 0;
        for (int mask = 0; mask < (1 << n); ++mask) {
            vector<int> v;
            for (int i = 0; i < n; ++i) {
                if (mask & (1 << i)) {
                    v.push_back(nums[i]);
                }
            }
            if (v.empty()) continue;
            bool ok = true;
            for (int i = 0; i < v.size(); ++i) {
                for (int j = i + 1; j < v.size(); ++j) {
                    if (abs(v[i] - v[j]) == k) {
                        ok = false;
                        break;
                    }
                }
                if (!ok) break;
            }
            if (ok) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int m = 1 << n;
        int ans = 0;
        for (int i = 1; i < m; i++) {
            bool flag = true;
            for (int j = 0; j < n; j++) {
                for (int l = j + 1; l < n; l++) {
                    if ((i >> j & 1) && (i >> l & 1)) {
                        if (abs(nums[j] - nums[l]) == k) {
                            flag = false;
                            break;
                        }
                    }
                }
                if (!flag) {
                    break;
                }
            }
            if (flag) {
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 1; i < (1 << n); i++) {
            int cnt = 0;
            bool ok = true;
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    cnt++;
                    for (int l = j + 1; l < n; l++) {
                        if (i & (1 << l) && abs(nums[j] - nums[l]) == k) {
                            ok = false;
                            break;
                        }
                    }
                }
                if (!ok) break;
            }
            if (ok) res += cnt;
        }
        return res;

=======

        int n = nums.size();
        vector<int> cnt(1001, 0);
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        int res = 0;
        for (int i = 1; i <= 1000; i++) {
            for (int j = 1; j <= 1000; j++) {
                if (abs(i - j) == k) {
                    res += cnt[i] * cnt[j];
                }
            }
        }
        return res + cnt[0] * (cnt[0] - 1) / 2;

=======

        int n = nums.size();
        vector<int> dp(1 << n);
        dp[0] = 1;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < (1 << n); ++j) {
                if (j & (1 << i)) {
                    dp[j] += dp[j ^ (1 << i)];
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < (1 << n); ++j) {
                if (j & (1 << i)) {
                    mp[nums[i] - nums[__builtin_ctz(j)]] += dp[j ^ (1 << i)];
                }
            }
        }
        int ans = 0;
        for (auto& p : mp) {
            if (p.first == k) {
                ans += p.second;
            }
        }
        return ans;

=======

        // dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]]
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(1001, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= 1000; ++j) {
                dp[i][j] = dp[i-1][j];
                if (j >= nums[i-1]) {
                    dp[i][j] += dp[i-1][j-nums[i-1]];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= 1000; ++i) {
            if (i == 0 || abs(i-k) != k) {
                ans += dp[n][i];
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            int max_num = 0;
            int min_num = 1000;
            for (int i = 0; i < n; i++) {
                if (mask & (1 << i)) {
                    max_num = max(max_num, nums[i]);
                    min_num = min(min_num, nums[i]);
                }
            }
            if (max_num - min_num >= k) {
                ans++;
            }
        }
        return ans;
