Synthesizing 9/10 solutions

=======

        priority_queue<int> pq;
        for (int i = 0; i < piles.size(); i++) {
            pq.push(piles[i]);
        }
        while (k--) {
            int top = pq.top();
            pq.pop();
            pq.push(top - top / 2);
        }
        int ret = 0;
        while (!pq.empty()) {
            ret += pq.top();
            pq.pop();
        }
        return ret;

=======

        priority_queue<int> pq;
        for (int p : piles) {
            pq.push(p);
        }
        while (k--) {
            int t = pq.top();
            pq.pop();
            pq.push(t - t / 2);
        }
        int ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int x : piles) pq.push(x);
        while (k--) {
            int t = pq.top(); pq.pop();
            pq.push(t - t / 2);
        }
        int ans = 0;
        while (!pq.empty()) {
            ans += pq.top(); pq.pop();
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int x: piles) pq.push(x);
        while (k--) {
            int x = pq.top(); pq.pop();
            x -= x / 2;
            pq.push(x);
        }
        int res = 0;
        while (!pq.empty()) {
            res += pq.top(); pq.pop();
        }
        return res;

=======

        priority_queue<int> pq;
        for (int pile : piles) {
            pq.push(pile);
        }
        while (k > 0) {
            int top = pq.top();
            pq.pop();
            pq.push((top + 1) / 2);
            k--;
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        priority_queue<int> pq;
        for (auto p : piles) {
            pq.push(p);
        }
        while (k > 0) {
            int p = pq.top();
            pq.pop();
            pq.push(p - p / 2);
            k--;
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        priority_queue<int> pq;
        for (int pile : piles) {
            pq.push(pile);
        }
        while (k-- > 0) {
            int pile = pq.top(); pq.pop();
            pq.push((pile + 1) / 2);
        }
        int res = 0;
        while (!pq.empty()) {
            res += pq.top(); pq.pop();
        }
        return res;

=======

        priority_queue<int> pq;
        for (int i = 0; i < piles.size(); i++) {
            pq.push(piles[i]);
        }
        while (k > 0) {
            int maxPile = pq.top();
            pq.pop();
            pq.push(maxPile - maxPile / 2);
            k--;
        }
        int sum = 0;
        while (!pq.empty()) {
            sum += pq.top();
            pq.pop();
        }
        return sum;

=======

        priority_queue<int> q;
        for (int x: piles) {
            q.push(x);
        }
        while (k--) {
            int top = q.top();
            q.pop();
            q.push(top - top / 2);
        }
        int res = 0;
        while (!q.empty()) {
            res += q.top();
            q.pop();
        }
        return res;
