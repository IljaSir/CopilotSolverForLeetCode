Synthesizing 7/10 solutions

=======

        int m = grid.size(), n = grid[0].size();
        int low = pricing[0], high = pricing[1];
        int x = start[0], y = start[1];
        vector<vector<int>> res;
        vector<vector<int>> visited(m, vector<int>(n, 0));
        priority_queue<pair<int, pair<int, int>>> pq; // price, position
        pq.push({grid[x][y], {x, y}});
        while (!pq.empty() && k > 0) {
            auto p = pq.top();
            pq.pop();
            int price = p.first, i = p.second.first, j = p.second.second;
            if (price < low || price > high) continue;
            if (visited[i][j]) continue;
            visited[i][j] = 1;
            res.push_back({i, j});
            k--;
            if (i > 0 && !visited[i-1][j]) pq.push({grid[i-1][j], {i-1, j}});
            if (i < m - 1 && !visited[i+1][j]) pq.push({grid[i+1][j], {i+1, j}});
            if (j > 0 && !visited[i][j-1]) pq.push({grid[i][j-1], {i, j-1}});
            if (j < n - 1 && !visited[i][j+1]) pq.push({grid[i][j+1], {i, j+1}});
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        int low = pricing[0], high = pricing[1];
        int x = start[0], y = start[1];
        vector<vector<int>> ans;
        priority_queue<tuple<int, int, int, int>> pq;
        pq.push({0, grid[x][y], x, y});
        grid[x][y] = -1;
        while (!pq.empty() && ans.size() < k) {
            auto [dist, price, r, c] = pq.top();
            pq.pop();
            if (price < low || price > high) continue;
            ans.push_back({r, c});
            for (auto& [dx, dy] : vector<vector<int>>{{0, 1}, {0, -1}, {1, 0}, {-1, 0}}) {
                int i = r + dx, j = c + dy;
                if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] <= 0) continue;
                pq.push({dist - 1, grid[i][j], i, j});
                grid[i][j] = -1;
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        int low = pricing[0], high = pricing[1];
        int r = start[0], c = start[1];
        vector<vector<int>> res;
        vector<vector<int>> dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        vector<vector<int>> visited(m, vector<int>(n, 0));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, grid[r][c], r, c});
        while (!pq.empty()) {
            auto t = pq.top();
            pq.pop();
            int dist = t[0], price = t[1], x = t[2], y = t[3];
            if (price < low || price > high || visited[x][y]) continue;
            visited[x][y] = 1;
            res.push_back({x, y});
            if (res.size() == k) break;
            for (auto dir : dirs) {
                int i = x + dir[0], j = y + dir[1];
                if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || grid[i][j] == 0) continue;
                pq.push({dist + 1, grid[i][j], i, j});
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> res;
        vector<vector<int>> dist(m, vector<int>(n, INT_MAX));
        dist[start[0]][start[1]] = 0;
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, start[0], start[1]});
        while (!pq.empty()) {
            auto cur = pq.top();
            pq.pop();
            int d = cur[0];
            int x = cur[1];
            int y = cur[2];
            if (d > dist[x][y]) continue;
            if (pricing[0] <= grid[x][y] && grid[x][y] <= pricing[1]) {
                res.push_back({x, y});
                if (res.size() == k) return res;
            }
            for (int i = 0; i < 4; ++i) {
                int nx = x + dirs[i][0];
                int ny = y + dirs[i][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || grid[nx][ny] == 0 || d + 1 >= dist[nx][ny]) continue;
                dist[nx][ny] = d + 1;
                pq.push({d + 1, nx, ny});
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int low = pricing[0];
        int high = pricing[1];
        vector<vector<int>> result;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        int x = start[0];
        int y = start[1];
        pq.push({0, grid[x][y], x, y});
        while(!pq.empty()) {
            vector<int> top = pq.top();
            pq.pop();
            int dis = top[0];
            int price = top[1];
            int x = top[2];
            int y = top[3];
            if (price < low) {
                continue;
            }
            if (price > high) {
                break;
            }
            if (visited[x][y]) {
                continue;
            }
            result.push_back({x, y});
            if (result.size() == k) {
                break;
            }
            visited[x][y] = true;
            if (x > 0 && !visited[x - 1][y]) {
                pq.push({dis + 1, grid[x - 1][y], x - 1, y});
            }
            if (y > 0 && !visited[x][y - 1]) {
                pq.push({dis + 1, grid[x][y - 1], x, y - 1});
            }
            if (x < m - 1 && !visited[x + 1][y]) {
                pq.push({dis + 1, grid[x + 1][y], x + 1, y});
            }
            if (y < n - 1 && !visited[x][y + 1]) {
                pq.push({dis + 1, grid[x][y + 1], x, y + 1});
            }
        }
        return result;

=======

        vector<vector<int>> result;
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, start[0], start[1]});
        while (!pq.empty()) {
            auto curr = pq.top();
            pq.pop();
            int r = curr[1], c = curr[2];
            if (visited[r][c]) continue;
            visited[r][c] = 1;
            if (grid[r][c] >= pricing[0] && grid[r][c] <= pricing[1]) {
                result.push_back({r, c});
                if (result.size() == k) break;
            }
            if (r > 0 && !visited[r-1][c] && grid[r-1][c] > 0) pq.push({curr[0]+1, r-1, c});
            if (r < m-1 && !visited[r+1][c] && grid[r+1][c] > 0) pq.push({curr[0]+1, r+1, c});
            if (c > 0 && !visited[r][c-1] && grid[r][c-1] > 0) pq.push({curr[0]+1, r, c-1});
            if (c < n-1 && !visited[r][c+1] && grid[r][c+1] > 0) pq.push({curr[0]+1, r, c+1});
        }
        return result;

=======

        vector<vector<int>> ans;
        return ans;
