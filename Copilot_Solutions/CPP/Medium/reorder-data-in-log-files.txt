Synthesizing 10/10 solutions

=======

        vector<string> letterLogs;
        vector<string> digitLogs;
        for (int i = 0; i < logs.size(); i++) {
            if (logs[i][logs[i].size() - 1] >= '0' && logs[i][logs[i].size() - 1] <= '9') {
                digitLogs.push_back(logs[i]);
            } else {
                letterLogs.push_back(logs[i]);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](string& a, string& b) {
            int i = a.find(' ');
            int j = b.find(' ');
            if (a.substr(i + 1) == b.substr(j + 1)) {
                return a.substr(0, i) < b.substr(0, j);
            }
            return a.substr(i + 1) < b.substr(j + 1);
        });
        letterLogs.insert(letterLogs.end(), digitLogs.begin(), digitLogs.end());
        return letterLogs;

=======

        vector<string> letterLogs;
        vector<string> digitLogs;
        for (auto log : logs) {
            int i = 0;
            while (log[i] != ' ') {
                i++;
            }
            if (log[i + 1] >= '0' && log[i + 1] <= '9') {
                digitLogs.push_back(log);
            } else {
                letterLogs.push_back(log);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](const string& a, const string& b) {
            int i = 0;
            while (a[i] != ' ') {
                i++;
            }
            string aContent = a.substr(i + 1, a.size() - i - 1);
            i = 0;
            while (b[i] != ' ') {
                i++;
            }
            string bContent = b.substr(i + 1, b.size() - i - 1);
            if (aContent == bContent) {
                return a < b;
            }
            return aContent < bContent;
        });
        for (auto log : digitLogs) {
            letterLogs.push_back(log);
        }
        return letterLogs;

=======

        vector<string> letterLogs;
        vector<string> digitLogs;
        for (string log : logs) {
            int index = log.find(' ');
            if (isdigit(log[index+1])) {
                digitLogs.push_back(log);
            } else {
                letterLogs.push_back(log);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](string& a, string& b) {
            int indexA = a.find(' ');
            int indexB = b.find(' ');
            string contentA = a.substr(indexA + 1);
            string contentB = b.substr(indexB + 1);
            if (contentA == contentB) {
                return a.substr(0, indexA) < b.substr(0, indexB);
            }
            return contentA < contentB;
        });
        letterLogs.insert(letterLogs.end(), digitLogs.begin(), digitLogs.end());
        return letterLogs;

=======

        vector<string> result;
        vector<string> digitLogs;
        vector<string> letterLogs;
        for (int i = 0; i < logs.size(); i++) {
            if (isdigit(logs[i][logs[i].size() - 1])) {
                digitLogs.push_back(logs[i]);
            } else {
                letterLogs.push_back(logs[i]);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](string a, string b) {
            int aSpace = a.find(" ");
            int bSpace = b.find(" ");
            string aContent = a.substr(aSpace + 1);
            string bContent = b.substr(bSpace + 1);
            if (aContent == bContent) {
                return a.substr(0, aSpace) < b.substr(0, bSpace);
            } else {
                return aContent < bContent;
            }
        });
        for (int i = 0; i < letterLogs.size(); i++) {
            result.push_back(letterLogs[i]);
        }
        for (int i = 0; i < digitLogs.size(); i++) {
            result.push_back(digitLogs[i]);
        }
        return result;

=======

        vector<string> ans;
        vector<string> digit;
        vector<pair<string, string>> letter;
        for (int i = 0; i < logs.size(); i++) {
            int j = 0;
            while (j < logs[i].size() && logs[i][j] != ' ') j++;
            if (j == logs[i].size()) continue;
            if (isdigit(logs[i][j + 1])) {
                digit.push_back(logs[i]);
            } else {
                letter.push_back(make_pair(logs[i].substr(j + 1), logs[i].substr(0, j)));
            }
        }
        sort(letter.begin(), letter.end());
        for (int i = 0; i < letter.size(); i++) {
            ans.push_back(letter[i].second + " " + letter[i].first);
        }
        for (int i = 0; i < digit.size(); i++) {
            ans.push_back(digit[i]);
        }
        return ans;

=======

        vector<string> result;
        vector<string> digitLogs;
        vector<string> letterLogs;
        for (string log : logs) {
            if (log[log.find(' ') + 1] >= '0' && log[log.find(' ') + 1] <= '9') {
                digitLogs.push_back(log);
            } else {
                letterLogs.push_back(log);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](const string& a, const string& b) {
            int aPos = a.find(' ');
            int bPos = b.find(' ');
            if (a.substr(aPos + 1) == b.substr(bPos + 1)) {
                return a.substr(0, aPos) < b.substr(0, bPos);
            }
            return a.substr(aPos + 1) < b.substr(bPos + 1);
        });
        result.insert(result.end(), letterLogs.begin(), letterLogs.end());
        result.insert(result.end(), digitLogs.begin(), digitLogs.end());
        return result;

=======

        vector<string> result;
        vector<string> digitLogs;
        vector<string> letterLogs;
        for (auto& log : logs) {
            if (log[log.find(' ') + 1] >= '0' && log[log.find(' ') + 1] <= '9') {
                digitLogs.push_back(log);
            } else {
                letterLogs.push_back(log);
            }
        }
        sort(letterLogs.begin(), letterLogs.end(), [](const string& a, const string& b) {
            string aContent = a.substr(a.find(' ') + 1);
            string bContent = b.substr(b.find(' ') + 1);
            if (aContent == bContent) {
                return a.substr(0, a.find(' ')) < b.substr(0, b.find(' '));
            }
            return aContent < bContent;
        });
        result.insert(result.end(), letterLogs.begin(), letterLogs.end());
        result.insert(result.end(), digitLogs.begin(), digitLogs.end());
        return result;

=======

        vector<string> ans;
        vector<string> digit;
        vector<pair<string, string>> letter;
        for (string log : logs) {
            int index = log.find(' ');
            if (isdigit(log[index + 1])) {
                digit.push_back(log);
            } else {
                letter.push_back({log.substr(0, index), log.substr(index + 1)});
            }
        }
        sort(letter.begin(), letter.end(), [](pair<string, string> a, pair<string, string> b) {
            return a.second == b.second ? a.first < b.first : a.second < b.second;
        });
        for (auto p : letter) {
            ans.push_back(p.first + ' ' + p.second);
        }
        for (string log : digit) {
            ans.push_back(log);
        }
        return ans;

=======

        vector<string> result;
        vector<string> digitlogs;
        vector<pair<string, string>> letterlogs;
        for(auto log: logs){
            int i = 0;
            while(i < log.size() && log[i] != ' '){
                i++;
            }
            if(isdigit(log[i+1])){
                digitlogs.push_back(log);
            }
            else{
                letterlogs.push_back({log.substr(0, i), log.substr(i+1)});
            }
        }
        sort(letterlogs.begin(), letterlogs.end(), [](pair<string, string> a, pair<string, string> b){
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });
        for(auto log: letterlogs){
            result.push_back(log.first + " " + log.second);
        }
        for(auto log: digitlogs){
            result.push_back(log);
        }
        return result;

=======

        vector<string> res;
        vector<string> digits;
        map<string, string> letters;
        for (const auto& log : logs) {
            auto pos = log.find(' ');
            string id = log.substr(0, pos);
            string content = log.substr(pos + 1);
            if (content[0] >= '0' && content[0] <= '9') {
                digits.push_back(log);
            } else {
                letters[content] = id;
            }
        }
        for (const auto& [content, id] : letters) {
            res.push_back(id + " " + content);
        }
        for (const auto& log : digits) {
            res.push_back(log);
        }
        return res;
