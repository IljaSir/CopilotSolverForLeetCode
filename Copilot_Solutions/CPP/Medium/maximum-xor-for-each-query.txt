Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> ans(n);
        int x = 0;
        for (int i = 0; i < n; ++i) {
            x ^= nums[i];
        }
        for (int i = 0; i < n; ++i) {
            ans[i] = x ^ ((1 << maximumBit) - 1);
            x ^= nums[n - 1 - i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n);
        int x = 0;
        for (int i = 0; i < n; i++) {
            x ^= nums[i];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = x ^ ((1 << maximumBit) - 1);
            x ^= nums[n - i - 1];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> res(n);
        int x = 0;
        for (int i = 0; i < n; ++i) {
            x ^= nums[i];
        }
        for (int i = 0; i < n; ++i) {
            res[i] = x;
            x ^= nums[n - i - 1];
        }
        for (int i = 0; i < n; ++i) {
            res[i] = (1 << maximumBit) - 1 - res[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum ^= nums[i];
        }
        for (int i = 0; i < n; i++) {
            ans[n - i - 1] = sum ^ ((1 << maximumBit) - 1);
            sum ^= nums[n - i - 1];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> answer(n);
        int x = 0;
        for (int i = 0; i < n; ++i) {
            x ^= nums[i];
        }
        for (int i = 0; i < n; ++i) {
            answer[i] = (1 << maximumBit) - 1 - x;
            x ^= nums[n - 1 - i];
        }
        return answer;

=======

        int n = nums.size();
        vector<int> ans(n);
        int x = 0;
        for (int i = 0; i < n; i++) {
            x ^= nums[i];
            ans[i] = x ^ (1 << maximumBit) - 1;
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int x = 0;
        for (auto n : nums) x ^= n;
        vector<int> ans;
        for (int i = nums.size() - 1; i >= 0; --i) {
            ans.push_back(x ^ (1 << maximumBit) - 1);
            x ^= nums[i];
        }
        return ans;

=======

        int n = nums.size();
        int x = 0;
        for (auto num : nums) {
            x ^= num;
        }
        vector<int> ans;
        for (int i = n - 1; i >= 0; --i) {
            ans.push_back(x ^ ((1 << maximumBit) - 1));
            x ^= nums[i];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n);
        int x = 0;
        for (int a: nums) {
            x ^= a;
        }
        for (int i = 0; i < n; i++) {
            ans[i] = x;
            x ^= nums[n - 1 - i];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = (1 << maximumBit) - 1 - ans[i];
        }
        return ans;

=======

        vector<int> res;
        int x = 0;
        for (int i = 0; i < nums.size(); ++i) {
            x ^= nums[i];
            res.push_back(x);
        }
        int mask = (1 << maximumBit) - 1;
        for (int i = 0; i < res.size(); ++i) {
            res[i] = res[i] ^ mask;
        }
        reverse(res.begin(), res.end());
        return res;
