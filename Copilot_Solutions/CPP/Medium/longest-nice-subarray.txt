Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int mask = 0;
            for (int j = i; j < n; ++j) {
                mask |= 1 << (nums[j] % 32);
                if ((mask & (mask >> 16)) && (mask & (mask >> 8)) && (mask & (mask >> 4)) && (mask & (mask >> 2)) && (mask & (mask >> 1))) {
                    ans = max(ans, j - i + 1);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int mask = 0;
            for (int j = i; j < n; ++j) {
                mask ^= nums[j];
                if (mask == 0) {
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int mask = 0;
            for (int j = i; j < n; j++) {
                mask |= 1 << (nums[j] - 1);
                if ((mask & (mask >> 16)) == 0) {
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            int mask = 0;
            for (int j = i; j < nums.size(); j++) {
                mask |= nums[j];
                if (mask == (mask & -mask)) {
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int x = 0;
            for (int j = i; j < n; j++) {
                x ^= nums[j];
                if (x == 0) {
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = i; j < n; j++) {
                x = min(x, nums[j]);
                if (j - i + 1 > ans && x == nums[j]) {
                    ans = j - i + 1;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            vector<int> cnt(128);
            for (int j = i; j < n; ++j) {
                ++cnt[nums[j]];
                if (cnt[nums[j]] == 2) {
                    if (isNice(nums[j])) {
                        ans = max(ans, j - i + 1);
                    }
                }
            }
        }
        return ans;
    }
    bool isNice(int x) {
        int cnt[2] = {0};
        while (x) {
            ++cnt[x & 1];
            x >>= 1;
        }
        return cnt[0] == cnt[1];

=======

        unordered_map<int, int> m;
        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int mask = 0;
            for (int j = i; j < nums.size(); ++j) {
                mask ^= 1 << (nums[j] - 'a');
                if (m.find(mask) != m.end()) {
                    res = max(res, j - i + 1);
                }
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> dp(n+1);
        int res = 0;
        for (int i = 0; i < n; ++i) {
            dp[i] = nums[i];
            for (int j = i-1; j >= 0; --j) {
                dp[j] &= nums[i];
                if (dp[j] == 0) {
                    res = max(res, i-j);
                }
            }
        }
        return res;
