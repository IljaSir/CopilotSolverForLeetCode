Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = colors.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && colors[j] == colors[i]) ++j;
            int maxTime = 0;
            for (int k = i; k < j; ++k) {
                maxTime = max(maxTime, neededTime[k]);
            }
            ans += maxTime;
            i = j;
        }
        return ans;

=======

        int n = colors.size();
        int i = 0;
        int ans = 0;
        while (i < n) {
            int j = i;
            int maxTime = 0;
            while (j < n && colors[j] == colors[i]) {
                maxTime = max(maxTime, neededTime[j]);
                j++;
            }
            ans += maxTime;
            i = j;
        }
        return ans;

=======

        int n = colors.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            int mx = 0;
            while (j < n && colors[i] == colors[j]) {
                mx = max(mx, neededTime[j]);
                ++j;
            }
            ans += mx;
            i = j;
        }
        return ans;

=======

        int n = colors.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            int maxTime = 0;
            while (j < n && colors[j] == colors[i]) {
                maxTime = max(maxTime, neededTime[j]);
                j++;
            }
            ans += maxTime;
            i = j;
        }
        return ans;

=======

        int n = colors.size(), res = 0;
        int i = 0, j = 0;
        while (i < n) {
            j = i;
            while (j < n && colors[j] == colors[i]) ++j;
            res += *max_element(neededTime.begin() + i, neededTime.begin() + j);
            i = j;
        }
        return res;

=======

        int n = colors.size();
        int ans = 0, last = 0;
        for (int i = 1; i < n; ++i) {
            if (colors[i] == colors[i - 1]) {
                last = max(last, neededTime[i]);
            } else {
                ans += last + neededTime[i - 1];
                last = 0;
            }
        }
        return ans + last + neededTime.back();

=======

        int n = colors.size();
        int res = 0;
        int cur = 0;
        char c = colors[0];
        for (int i = 0; i < n; ++i) {
            if (colors[i] != c) {
                res += max(cur, neededTime[i]);
                cur = 0;
                c = colors[i];
            } else {
                cur += neededTime[i];
            }
        }
        return res + cur;

=======

        int n = colors.size();
        int ans = 0;
        int prev = -1;
        int i = 0;
        while (i < n) {
            int j = i;
            int maxTime = 0;
            while (j < n && colors[j] == colors[i]) {
                maxTime = max(maxTime, neededTime[j]);
                j++;
            }
            if (prev != -1 && colors[prev] == colors[i]) {
                ans += maxTime;
            } else {
                ans += maxTime;
                prev = j - 1;
            }
            i = j;
        }
        return ans;
