Synthesizing 10/10 solutions (Duplicates hidden)

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                if (!st.empty()) {
                    st.pop();
                } else {
                    s[i] = '*';
                }
            }
        }
        while (!st.empty()) {
            s[st.top()] = '*';
            st.pop();
        }
        s.erase(remove(s.begin(), s.end(), '*'), s.end());
        return s;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                if (!st.empty()) {
                    st.pop();
                } else {
                    s[i] = ' ';
                }
            }
        }
        while (!st.empty()) {
            s[st.top()] = ' ';
            st.pop();
        }
        s.erase(remove(s.begin(), s.end(), ' '), s.end());
        return s;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                if (st.empty()) {
                    s[i] = '*';
                } else {
                    st.pop();
                }
            }
        }
        while (!st.empty()) {
            s[st.top()] = '*';
            st.pop();
        }
        s.erase(remove(s.begin(), s.end(), '*'), s.end());
        return s;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                if (!st.empty()) st.pop();
                else s[i] = '*';
            }
        }
        while (!st.empty()) {
            s[st.top()] = '*';
            st.pop();
        }
        s.erase(remove(s.begin(), s.end(), '*'), s.end());
        return s;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                if (!st.empty() && s[st.top()] == '(') {
                    st.pop();
                } else {
                    st.push(i);
                }
            }
        }
        while (!st.empty()) {
            s.erase(st.top(), 1);
            st.pop();
        }
        return s;

=======

        stack<int> stk;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') stk.push(i);
            if (s[i] == ')') {
                if (!stk.empty() && s[stk.top()] == '(') stk.pop();
                else stk.push(i);
            }
        }
        string ans;
        for (int i = 0; i < s.size(); i++) {
            if (!stk.empty() && i == stk.top()) {
                stk.pop();
                continue;
            }
            ans += s[i];
        }
        return ans;

=======

        stack<int> st;
        for(int i = 0; i < s.length(); i++) {
            if(s[i] == '(') {
                st.push(i);
            }
            if(s[i] == ')') {
                if(st.empty()) {
                    s[i] = '*';
                } else {
                    st.pop();
                }
            }
        }
        while(!st.empty()) {
            s[st.top()] = '*';
            st.pop();
        }
        s.erase(remove(s.begin(), s.end(), '*'), s.end());
        return s;

=======

        int count = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') count++;
            else if (s[i] == ')') {
                if (count == 0) {
                    s.erase(s.begin() + i);
                    i--;
                } else count--;
            }
        }
        count = 0;
        for (int i = s.size() - 1; i >= 0; i--) {
            if (s[i] == ')') count++;
            else if (s[i] == '(') {
                if (count == 0) {
                    s.erase(s.begin() + i);
                } else count--;
            }
        }
        return s;

=======

        int n = s.size();
        vector<int> stack;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                stack.push_back(i);
            } else if (s[i] == ')') {
                if (!stack.empty()) {
                    stack.pop_back();
                } else {
                    s[i] = ' ';
                }
            }
        }
        for (int i : stack) {
            s[i] = ' ';
        }
        s.erase(remove(s.begin(), s.end(), ' '), s.end());
        return s;
