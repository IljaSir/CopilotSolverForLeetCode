Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<int> prefix(n + 1, 0);
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] ^ (s[i] - '0');
        }
        vector<vector<int>> ans;
        for (auto &q : queries) {
            int first = q[0];
            int second = q[1];
            for (int i = 0; i <= n; i++) {
                if ((prefix[i] ^ first) == second) {
                    ans.push_back({i - 1, i});
                    break;
                }
            }
        }
        return ans;

=======

        vector<int> dp(s.size() + 1, 0);
        for (int i = 1; i <= s.size(); i++) {
            dp[i] = dp[i - 1] ^ (s[i - 1] - '0');
        }
        vector<vector<int>> ans;
        for (auto& q : queries) {
            int l = q[0], r = q[1];
            ans.push_back({dp[l] ^ dp[r + 1], r});
        }
        sort(ans.begin(), ans.end());
        vector<vector<int>> res;
        for (auto& a : ans) {
            res.push_back({a[1], a[0]});
        }
        return res;

=======

        int n = s.length();
        vector<int> xorSum(n + 1);
        for (int i = 0; i < n; ++i) {
            xorSum[i + 1] = xorSum[i] ^ (s[i] - '0');
        }
        vector<vector<int>> ans;
        for (const auto& q : queries) {
            int first = q[0], second = q[1];
            int left = 0, right = n;
            while (left < right) {
                int mid = (left + right) / 2;
                if ((xorSum[mid + 1] ^ first) == second) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            if (left == n || (xorSum[left + 1] ^ first) != second) {
                ans.push_back({-1, -1});
            } else {
                ans.push_back({left, left + 1});
            }
        }
        return ans;

=======

        int n = s.size();
        vector<vector<int>> ans(queries.size(), vector<int>(2, -1));
        vector<int> v(n, 0);
        v[0] = s[0] - '0';
        for (int i = 1; i < n; i++) {
            v[i] = v[i - 1] ^ (s[i] - '0');
        }
        for (int i = 0; i < queries.size(); i++) {
            int first = queries[i][0], second = queries[i][1];
            for (int j = 0; j < n; j++) {
                if (v[j] == (first ^ second)) {
                    ans[i][0] = 0;
                    ans[i][1] = j;
                    break;
                }
            }
            for (int j = n - 1; j >= 0; j--) {
                if ((v[j] ^ first) == second) {
                    ans[i][0] = j + 1;
                    ans[i][1] = n - 1;
                    break;
                }
            }
            if (ans[i][0] != -1) {
                for (int j = ans[i][0]; j <= ans[i][1]; j++) {
                    if ((v[j] ^ first) == second) {
                        ans[i][1] = j;
                        break;
                    }
                }
            }
        }
        return ans;

=======

        vector<vector<int>> result;
        int n = s.size();
        vector<int> prefix(n, 0);
        prefix[0] = s[0] - '0';
        for (int i = 1; i < n; ++i) {
            prefix[i] = prefix[i - 1] ^ (s[i] - '0');
        }
        for (auto query : queries) {
            int first = query[0];
            int second = query[1];
            int left = -1;
            int right = -1;
            for (int i = 0; i < n; ++i) {
                if (i == 0) {
                    if (prefix[i] == second && (first == 0 || s[i] == '1')) {
                        left = i;
                        right = i;
                        break;
                    }
                } else {
                    int val = prefix[i] ^ prefix[i - 1];
                    if (val == second && (first == 0 || s[i] == '1')) {
                        left = i;
                        right = i;
                        break;
                    }
                }
            }
            result.push_back({left, right});
        }
        return result;

=======

        vector<vector<int>> ans;
        int n = s.size();
        vector<int> a(n, 0);
        for (int i = 0; i < n; i++) {
            a[i] = s[i] - '0';
        }
        for (auto& q : queries) {
            int first = q[0], second = q[1];
            int left = -1, right = -1;
            for (int i = 0; i < n; i++) {
                int cur = first ^ a[i];
                if (cur == second) {
                    left = i;
                    for (int j = i; j < n; j++) {
                        cur ^= a[j];
                        if (cur == second) {
                            right = j;
                        }
                    }
                    break;
                }
            }
            ans.push_back({left, right});
        }
        return ans;

=======

        vector<vector<int>> ans;
        vector<int> v;
        int n = s.size();
        for(int i=0;i<n;i++){
            v.push_back(s[i]-'0');
        }
        for(int i=1;i<n;i++){
            v[i] = v[i]^v[i-1];
        }
        for(int i=0;i<queries.size();i++){
            int x = queries[i][0];
            int y = queries[i][1];
            if(x==0){
                ans.push_back({0,find(v.begin(),v.end(),y)-v.begin()});
            }
            else{
                ans.push_back({find(v.begin(),v.end(),x^y)-v.begin()+1,find(v.begin(),v.end(),y)-v.begin()});
            }
        }
        return ans;

=======

        vector<vector<int>> res;
        int n = s.size();
        vector<int> xorSum(n+1);
        for(int i=0; i<n; i++){
            xorSum[i+1] = xorSum[i] ^ (s[i] - '0');
        }
        for(auto q: queries){
            int i = q[0];
            int j = q[1];
            int k = 0;
            while((i + (1<<k)) <= j){
                k++;
            }
            k--;
            int left = i + (1<<k);
            int right = j - (1<<k);
            int val = xorSum[left] ^ xorSum[right+1];
            if(val == j){
                res.push_back({right, left-1});
            }
            else{
                res.push_back({-1, -1});
            }
        }
        return res;

=======

        vector<vector<int>> ans;
        vector<int> xor_arr;
        int xor_val = 0;
        for (auto c : s) {
            xor_val ^= c - '0';
            xor_arr.push_back(xor_val);
        }
        for (auto q : queries) {
            if (q[0] == 0) {
                ans.push_back({0, xor_arr[q[1]]});
            } else {
                ans.push_back({q[0], xor_arr[q[1]] ^ xor_arr[q[0] - 1]});
            }
        }
        return ans;
