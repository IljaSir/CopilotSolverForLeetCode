Synthesizing 10/10 solutions

=======

        int n = points.size();
        vector<vector<int>> dist(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                dist[i][j] = dist[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        int res = 0;
        vector<int> seen(n);
        seen[0] = 1;
        for (int i = 0; i < n - 1; ++i) {
            int x = -1, y = -1;
            for (int j = 0; j < n; ++j) {
                if (seen[j]) {
                    for (int k = 0; k < n; ++k) {
                        if (!seen[k] && (x == -1 || dist[j][k] < dist[x][y])) {
                            x = j;
                            y = k;
                        }
                    }
                }
            }
            res += dist[x][y];
            seen[y] = 1;
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> dist(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dist[i][j] = dist[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> minDist(n, INT_MAX);
        vector<int> visited(n, 0);
        minDist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (u == -1 || minDist[j] < minDist[u])) {
                    u = j;
                }
            }
            visited[u] = 1;
            res += minDist[u];
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    minDist[v] = min(minDist[v], dist[u][v]);
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> dist(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dist[i][j] = dist[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> minDist(n, INT_MAX);
        vector<bool> visited(n, false);
        int res = 0;
        minDist[0] = 0;
        for (int i = 0; i < n; i++) {
            int u = -1, minD = INT_MAX;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && minDist[j] < minD) {
                    minD = minDist[j];
                    u = j;
                }
            }
            if (u == -1) return -1;
            visited[u] = true;
            res += minD;
            for (int v = 0; v < n; v++) {
                if (!visited[v] && dist[u][v] < minDist[v]) {
                    minDist[v] = dist[u][v];
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> dist(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                dist[i][j] = dist[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> minDist(n, INT_MAX);
        vector<bool> visited(n);
        minDist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (u == -1 || minDist[u] > minDist[j])) {
                    u = j;
                }
            }
            visited[u] = true;
            res += minDist[u];
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    minDist[v] = min(minDist[v], dist[u][v]);
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> edges(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                edges[i][j] = edges[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> dist(n, INT_MAX), visited(n);
        dist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int t = -1;
            for (int j = 0; j < n; ++j) {
                if (!visited[j] && (t == -1 || dist[t] > dist[j])) {
                    t = j;
                }
            }
            visited[t] = 1;
            res += dist[t];
            for (int j = 0; j < n; ++j) {
                dist[j] = min(dist[j], edges[t][j]);
            }
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> graph(n, vector<int>(n));
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                graph[i][j] = graph[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> dist(n, INT_MAX);
        vector<bool> visited(n);
        dist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                    u = j;
                }
            }
            visited[u] = true;
            res += dist[u];
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    dist[v] = min(dist[v], graph[u][v]);
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<vector<int>> dists(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                dists[i][j] = dists[j][i] = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            }
        }
        vector<int> dist(n, INT_MAX);
        vector<bool> visited(n, false);
        dist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int u = -1;
            for (int j = 0; j < n; ++j) {
                if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                    u = j;
                }
            }
            visited[u] = true;
            res += dist[u];
            for (int v = 0; v < n; ++v) {
                if (!visited[v]) {
                    dist[v] = min(dist[v], dists[u][v]);
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<int> dist(n, INT_MAX);
        vector<bool> visited(n, false);
        dist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (u == -1 || dist[j] < dist[u])) u = j;
            }
            visited[u] = true;
            res += dist[u];
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    dist[v] = min(dist[v], abs(points[u][0] - points[v][0]) + abs(points[u][1] - points[v][1]));
                }
            }
        }
        return res;

=======

        int n = points.size();
        vector<int> dist(n, INT_MAX);
        vector<bool> visited(n, false);
        dist[0] = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int u = -1;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && (u == -1 || dist[j] < dist[u])) {
                    u = j;
                }
            }
            visited[u] = true;
            res += dist[u];
            for (int v = 0; v < n; v++) {
                if (!visited[v]) {
                    dist[v] = min(dist[v], abs(points[u][0] - points[v][0]) + abs(points[u][1] - points[v][1]));
                }
            }
        }
        return res;

=======

        int n = points.size();
        // vector<vector<int>> dist(n, vector<int>(n, 0));
        vector<int> dist(n, INT_MAX);
        vector<bool> visited(n, false);
        int res = 0;
        dist[0] = 0;
        for(int i = 0; i < n; i++){
            int u = -1;
            for(int v = 0; v < n; v++){
                if(!visited[v] && (u == -1 || dist[v] < dist[u])){
                    u = v;
                }
            }
            visited[u] = true;
            res += dist[u];
            for(int v = 0; v < n; v++){
                if(!visited[v]){
                    dist[v] = min(dist[v], abs(points[u][0] - points[v][0]) + abs(points[u][1] - points[v][1]));
                }
            }
        }
        return res;
