Synthesizing 10/10 solutions

=======

        vector<int> digits;
        while (n) {
            digits.push_back(n % 10);
            n /= 10;
        }
        sort(digits.begin(), digits.end());
        do {
            if (digits[0] == 0) continue;
            int m = 0;
            for (int d : digits) {
                m = m * 10 + d;
            }
            if ((m & (m - 1)) == 0) return true;
        } while (next_permutation(digits.begin(), digits.end()));
        return false;

=======

        vector<int> cnt(10, 0);
        while (n) {
            cnt[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int cur = 1 << i;
            vector<int> cur_cnt(10, 0);
            while (cur) {
                cur_cnt[cur % 10]++;
                cur /= 10;
            }
            if (cur_cnt == cnt) {
                return true;
            }
        }
        return false;

=======

        vector<int> cnt(10);
        while (n > 0) {
            cnt[n % 10]++;
            n /= 10;
        }
        for (int i = 0; i < 31; i++) {
            int num = 1 << i;
            vector<int> cnt2(10);
            while (num > 0) {
                cnt2[num % 10]++;
                num /= 10;
            }
            if (cnt == cnt2) {
                return true;
            }
        }
        return false;

=======

        vector<int> digits;
        while (n) {
            digits.push_back(n % 10);
            n /= 10;
        }
        sort(digits.begin(), digits.end());
        do {
            if (digits[0] != 0) {
                int num = 0;
                for (int i = 0; i < digits.size(); i++) {
                    num = num * 10 + digits[i];
                }
                if (__builtin_popcount(num) == 1) {
                    return true;
                }
            }
        } while (next_permutation(digits.begin(), digits.end()));
        return false;

=======

        int c = count(n);
        for (int i = 0; i < 31; i++) {
            if (c == count(1 << i)) return true;
        }
        return false;
    }
    int count(int n) {
        int c = 0;
        for (; n; n /= 10) c += pow(10, n % 10);
        return c;

=======

        vector<int> vec;
        while (n) {
            vec.push_back(n % 10);
            n /= 10;
        }
        sort(vec.begin(), vec.end());
        do {
            if (vec[0] == 0) {
                continue;
            }
            long long num = 0;
            for (int i = 0; i < vec.size(); ++i) {
                num = num * 10 + vec[i];
            }
            if (num & (num - 1)) {
                continue;
            }
            return true;
        } while (next_permutation(vec.begin(), vec.end()));
        return false;

=======

        vector<int> cnt(10, 0);
        for (int i = n; i; i /= 10) {
            ++cnt[i % 10];
        }
        for (int i = 0; i < 31; ++i) {
            int x = 1 << i;
            vector<int> cnt2(10, 0);
            for (int j = x; j; j /= 10) {
                ++cnt2[j % 10];
            }
            if (cnt == cnt2) {
                return true;
            }
        }
        return false;

=======

        int a[10] = {0};
        while(n){
            a[n%10]++;
            n/=10;
        }
        for(int i=0;i<31;i++){
            int b[10] = {0};
            int x = 1<<i;
            while(x){
                b[x%10]++;
                x/=10;
            }
            int j;
            for(j=0;j<10;j++){
                if(a[j]!=b[j]){
                    break;
                }
            }
            if(j==10){
                return true;
            }
        }
        return false;

=======

        vector<int> v;
        while(n) {
            v.push_back(n % 10);
            n /= 10;
        }
        sort(v.begin(), v.end());
        do {
            int res = 0;
            for(int i = 0; i < v.size(); ++i) {
                res = res * 10 + v[i];
            }
            if (res == 1 || res == 2 || res == 4 || res == 8 || res == 16 || res == 32 || res == 64 || res == 128 || res == 256 || res == 512 || res == 1024 || res == 2048 || res == 4096 || res == 8192 || res == 16384 || res == 32768 || res == 65536 || res == 131072 || res == 262144 || res == 524288 || res == 1048576 || res == 2097152 || res == 4194304 || res == 8388608 || res == 16777216 || res == 33554432 || res == 67108864 || res == 134217728 || res == 268435456 || res == 536870912 || res == 1073741824) {
                return true;
            }
        } while(next_permutation(v.begin(), v.end()));
        return false;

=======

        string s = to_string(n);
        sort(s.begin(), s.end());
        long long int nn = stoll(s);
        long long int i=1;
        while(i<=1e9){
            long long int ii = i;
            string ss = to_string(ii);
            sort(ss.begin(), ss.end());
            long long int nnn = stoll(ss);
            if(nnn==nn)
                return true;
            i<<=1;
        }
        return false;
