Synthesizing 9/10 solutions (Duplicates hidden)

=======

        vector<int> res(2*n-1, 0);
        vector<bool> used(n+1, false);
        dfs(res, used, 0);
        return res;
    }
    bool dfs(vector<int>& res, vector<bool>& used, int idx) {
        if (idx == res.size()) return true;
        if (res[idx] != 0) return dfs(res, used, idx+1);
        for (int i = used.size()-1; i > 0; --i) {
            if (used[i]) continue;
            if (i != 1 && (idx+i >= res.size() || res[idx+i] != 0)) continue;
            res[idx] = i;
            used[i] = true;
            if (i != 1) res[idx+i] = i;
            if (dfs(res, used, idx+1)) return true;
            res[idx] = 0;
            used[i] = false;
            if (i != 1) res[idx+i] = 0;
        }
        return false;

=======

        vector<int> ans(2 * n - 1, 0);
        vector<int> used(n + 1, 0);
        dfs(ans, used, 0);
        return ans;
    }
    
    bool dfs(vector<int>& ans, vector<int>& used, int pos) {
        if (pos == ans.size()) return true;
        if (ans[pos] != 0) return dfs(ans, used, pos + 1);
        for (int i = used.size() - 1; i >= 1; --i) {
            if (used[i] == 2) continue;
            if (i > 1 && (pos + i >= ans.size() || ans[pos + i] != 0)) continue;
            ans[pos] = i;
            if (i > 1) ans[pos + i] = i;
            ++used[i];
            if (dfs(ans, used, pos + 1)) return true;
            ans[pos] = 0;
            if (i > 1) ans[pos + i] = 0;
            --used[i];
        }
        return false;

=======

        vector<int> ans(2*n-1,0);
        vector<bool> used(n+1,false);
        dfs(ans,used,0);
        return ans;
    }
    bool dfs(vector<int>& ans,vector<bool>& used,int index){
        if(index>=ans.size()){
            return true;
        }
        if(ans[index]!=0){
            return dfs(ans,used,index+1);
        }
        for(int i=used.size()-1;i>=1;i--){
            if(used[i]){
                continue;
            }
            if(i!=1&&index+i>=ans.size()){
                continue;
            }
            if(i!=1&&ans[index+i]!=0){
                continue;
            }
            ans[index]=i;
            used[i]=true;
            if(i!=1){
                ans[index+i]=i;
            }
            if(dfs(ans,used,index+1)){
                return true;
            }
            ans[index]=0;
            used[i]=false;
            if(i!=1){
                ans[index+i]=0;
            }
        }
        return false;

=======

        vector<int> ans(2 * n - 1, 0);
        dfs(ans, n, 0);
        return ans;
    }
    bool dfs(vector<int>& ans, int n, int start) {
        if (start == ans.size()) {
            return true;
        }
        if (ans[start] != 0) {
            return dfs(ans, n, start + 1);
        }
        for (int i = n; i >= 1; --i) {
            if (i == 1 || ans[start] == 0 && (start + i < ans.size() && ans[start + i] == 0 || start + i == ans.size())) {
                ans[start] = i;
                if (i != 1) {
                    ans[start + i] = i;
                }
                if (dfs(ans, n, start + 1)) {
                    return true;
                }
                ans[start] = 0;
                if (i != 1) {
                    ans[start + i] = 0;
                }
            }
        }
        return false;

=======

        vector<int> ans(2 * n - 1, 0);
        vector<int> used(n + 1, 0);
        dfs(0, n, ans, used);
        return ans;
    }
    bool dfs(int i, int n, vector<int>& ans, vector<int>& used) {
        if (i == ans.size()) return true;
        if (ans[i] != 0) return dfs(i + 1, n, ans, used);
        for (int j = n; j >= 1; --j) {
            if (used[j] || (j != 1 && (i + j >= ans.size() || ans[i + j] != 0))) continue;
            used[j] = 1;
            ans[i] = j;
            if (j != 1) ans[i + j] = j;
            if (dfs(i + 1, n, ans, used)) return true;
            used[j] = 0;
            ans[i] = 0;
            if (j != 1) ans[i + j] = 0;
        }
        return false;

=======

        vector<int> ans(2*n-1, 0);
        vector<bool> used(n+1, false);
        if (dfs(ans, used, 0)) return ans;
        return {};
    }
    bool dfs(vector<int>& ans, vector<bool>& used, int i) {
        if (i == ans.size()) return true;
        if (ans[i]) return dfs(ans, used, i+1);
        for (int k = used.size()-1; k >= 1; --k) {
            if (used[k]) continue;
            int j = i+k < ans.size() ? i+k : ans.size()-1-(i+k-ans.size()+1);
            if (ans[j]) continue;
            ans[i] = ans[j] = k;
            used[k] = true;
            if (dfs(ans, used, i+1)) return true;
            ans[i] = ans[j] = 0;
            used[k] = false;
        }
        return false;

=======

        int size = 2 * n - 1;
        vector<int> result(size, 0);
        vector<bool> used(n + 1, false);
        construct(result, used, 0);
        return result;
    }
    
    bool construct(vector<int>& result, vector<bool>& used, int index) {
        if (index >= result.size()) {
            return true;
        }
        
        if (result[index] != 0) {
            return construct(result, used, index + 1);
        }
        
        for (int i = used.size() - 1; i >= 1; --i) {
            if (used[i]) {
                continue;
            }
            
            if (i == 1) {
                result[index] = 1;
                used[i] = true;
                if (construct(result, used, index + 1)) {
                    return true;
                }
                result[index] = 0;
                used[i] = false;
            } else {
                if (index + i >= result.size()) {
                    continue;
                }
                if (result[index + i] != 0) {
                    continue;
                }
                result[index] = i;
                result[index + i] = i;
                used[i] = true;
                if (construct(result, used, index + 1)) {
                    return true;
                }
                result[index] = 0;
                result[index + i] = 0;
                used[i] = false;
            }
        }
        
        return false;

=======

        vector<int> result;
        vector<int> nums;
        for (int i = 1; i <= n; ++i) {
            nums.push_back(i);
            if (i != n) {
                nums.push_back(i);
            }
        }
        sort(nums.begin(), nums.end(), greater<int>());
        int len = nums.size();
        result.resize(len);
        for (int i = 0; i < len; ++i) {
            if (result[i] == 0) {
                result[i] = nums[i];
                int step = nums[i] - 1;
                for (int j = i + 1; j < len; ++j) {
                    if (result[j] == 0) {
                        if (step == 0) {
                            result[j] = nums[i];
                            break;
                        } else {
                            --step;
                        }
                    }
                }
            }
        }
        return result;
