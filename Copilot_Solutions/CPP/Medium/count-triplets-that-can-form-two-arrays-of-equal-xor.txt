Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; ++i) {
            pre[i + 1] = pre[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int k = i + 1; k < n; ++k) {
                if (pre[i] == pre[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> xors(n + 1);
        for (int i = 0; i < n; ++i) {
            xors[i + 1] = xors[i] ^ arr[i];
        }
        int count = 0;
        for (int i = 0; i < n; ++i) {
            for (int k = i + 1; k < n; ++k) {
                if (xors[i] == xors[k + 1]) {
                    count += k - i;
                }
            }
        }
        return count;

=======

        int n = arr.size();
        vector<int> pre(n+1, 0);
        for (int i = 0; i < n; ++i) {
            pre[i+1] = pre[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int k = i+1; k < n; ++k) {
                if (pre[i] == pre[k+1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> pre(n+1);
        for (int i = 0; i < n; i++) {
            pre[i+1] = pre[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i+1; k < n; k++) {
                if (pre[i] == pre[k+1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> xorSum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            xorSum[i + 1] = xorSum[i] ^ arr[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i + 1; k < n; k++) {
                if (xorSum[i] == xorSum[k + 1]) {
                    ans += k - i;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> pre(n);
        pre[0] = arr[0];
        for (int i = 1; i < n; ++i)
            pre[i] = pre[i - 1] ^ arr[i];
        int ans = 0;
        for (int i = 0; i < n; ++i)
            for (int k = i + 1; k < n; ++k)
                if ((pre[k - 1] ^ (i > 0 ? pre[i - 1] : 0)) == pre[n - 1] ^ pre[k])
                    ans += k - i;
        return ans;

=======

        int n = arr.size();
        vector<int> pre(n+1, 0);
        for(int i = 0; i < n; i++) {
            pre[i+1] = pre[i] ^ arr[i];
        }
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                for(int k = j; k < n; k++) {
                    int a = pre[j] ^ pre[i];
                    int b = pre[k+1] ^ pre[j];
                    if(a == b) ans++;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i++) pre[i + 1] = pre[i] ^ arr[i];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int k = i + 1; k < n; k++) {
                if (pre[i] == pre[k + 1]) res += k - i;
            }
        }
        return res;

=======

        int n = arr.size();
        vector<int> pre(n+1);
        for (int i = 0; i < n; i++) pre[i+1] = pre[i] ^ arr[i];
        int ans = 0;
        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++)
                for (int k = j; k < n; k++)
                    if ((pre[j] ^ pre[i]) == (pre[k+1] ^ pre[j])) ans++;
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int xorV = arr[i];
            for (int k = i + 1; k < n; ++k) {
                xorV ^= arr[k];
                if (xorV == 0) {
                    ans += k - i;
                }
            }
        }
        return ans;
