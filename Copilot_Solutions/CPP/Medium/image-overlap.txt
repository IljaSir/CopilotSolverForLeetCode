Synthesizing 10/10 solutions

=======

        int n = img1.size();
        vector<int> A, B;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (img1[i][j] == 1)
                    A.push_back(i * 100 + j);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (img2[i][j] == 1)
                    B.push_back(i * 100 + j);
        unordered_map<int, int> count;
        for (int a: A) for (int b: B) count[a - b]++;
        int res = 0;
        for (auto it: count) res = max(res, it.second);
        return res;

=======

        int n = img1.size();
        int res = 0;
        for (int i = -n + 1; i < n; i++) {
            for (int j = -n + 1; j < n; j++) {
                res = max(res, countOverlap(img1, img2, i, j));
            }
        }
        return res;

=======

        int n = img1.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                res = max(res, count(img1, img2, i, j));
                res = max(res, count(img2, img1, i, j));
            }
        }
        return res;

=======

        const int n = img1.size();
        vector<int> v1, v2;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (img1[i][j]) v1.push_back(i * 100 + j);
                if (img2[i][j]) v2.push_back(i * 100 + j);
            }
        }
        unordered_map<int, int> m;
        for (int i : v1) {
            for (int j : v2) {
                ++m[i - j];
            }
        }
        int res = 0;
        for (auto& p : m) {
            res = max(res, p.second);
        }
        return res;

=======

        int n = img1.size();
        int ans = 0;
        vector<int> v1, v2;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (img1[i][j]) v1.push_back(i * 100 + j);
                if (img2[i][j]) v2.push_back(i * 100 + j);
            }
        }
        unordered_map<int, int> m;
        for (int i : v1) {
            for (int j : v2) {
                m[i - j]++;
            }
        }
        for (auto it : m) {
            ans = max(ans, it.second);
        }
        return ans;

=======

        int n = img1.size();
        vector<vector<int>> v(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (img1[i][j] == 1) {
                    for (int k = 0; k < n; k++) {
                        for (int l = 0; l < n; l++) {
                            if (img2[k][l] == 1) {
                                v[k - i + n - 1][l - j + n - 1]++;
                            }
                        }
                    }
                }
            }
        }
        int res = 0;
        for (auto vi : v) {
            for (auto vij : vi) {
                res = max(res, vij);
            }
        }
        return res;

=======

        int n = img1.size();
        vector<vector<int>> v(2*n+1,vector<int>(2*n+1,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(img1[i][j]==1){
                    for(int k=0;k<n;k++){
                        for(int l=0;l<n;l++){
                            if(img2[k][l]==1){
                                v[i-k+n][j-l+n]++;
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for(int i=0;i<2*n+1;i++){
            for(int j=0;j<2*n+1;j++){
                ans = max(ans,v[i][j]);
            }
        }
        return ans;

=======

        int n = img1.size();
        vector<vector<int>> count(2*n+1, vector<int>(2*n+1, 0));
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){
                if(img1[i][j] == 1){
                    for(int k=0; k<n; ++k){
                        for(int l=0; l<n; ++l){
                            if(img2[k][l] == 1){
                                count[i-k+n][j-l+n]++;
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for(int i=0; i<2*n+1; ++i){
            for(int j=0; j<2*n+1; ++j){
                ans = max(ans, count[i][j]);
            }
        }
        return ans;

=======

        int n = img1.size();
        vector<vector<int>> M(2*n+1, vector<int>(2*n+1, 0));
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                if (img1[i][j] == 1) {
                    for(int x = 0; x < n; ++x) {
                        for(int y = 0; y < n; ++y) {
                            if (img2[x][y] == 1) {
                                M[x-i+n][y-j+n]++;
                            }
                        }
                    }
                }
            }
        }
        int result = 0;
        for(int i = 0; i < M.size(); ++i) {
            for(int j = 0; j < M[0].size(); ++j) {
                result = max(result, M[i][j]);
            }
        }
        return result;

=======

        int n = img1.size();
        vector<vector<int>> count(2*n+1, vector<int>(2*n+1, 0));
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){
                if(img1[i][j] == 1){
                    for(int k=0; k<n; ++k){
                        for(int l=0; l<n; ++l){
                            if(img2[k][l] == 1){
                                count[i-k+n][j-l+n]++;
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for(int i=0; i<2*n+1; ++i){
            for(int j=0; j<2*n+1; ++j){
                ans = max(ans, count[i][j]);
            }
        }
        return ans;

=======

        int n = img1.size();
        vector<vector<int>> M(2*n+1, vector<int>(2*n+1, 0));
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                if (img1[i][j] == 1) {
                    for(int x = 0; x < n; ++x) {
                        for(int y = 0; y < n; ++y) {
                            if (img2[x][y] == 1) {
                                M[x-i+n][y-j+n]++;
                            }
                        }
                    }
                }
            }
        }
        int result = 0;
        for(int i = 0; i < M.size(); ++i) {
            for(int j = 0; j < M[0].size(); ++j) {
                result = max(result, M[i][j]);
            }
        }
        return result;

=======

        int len = img1.size();
        vector<vector<int>> arr(2 * len - 1, vector<int>(2 * len - 1, 0));
        for (int i = 0; i < len; ++i) {
            for (int j = 0; j < len; ++j) {
                if (img1[i][j] == 1) {
                    for (int k = 0; k < len; ++k) {
                        for (int l = 0; l < len; ++l) {
                            if (img2[k][l] == 1) {
                                arr[i - k + len - 1][j - l + len - 1]++;
                            }
                        }
                    }
                }
            }
        }
        int res = 0;
        for (auto& v : arr) {
            for (int i : v) {
                res = max(res, i);
            }
        }
        return res;
