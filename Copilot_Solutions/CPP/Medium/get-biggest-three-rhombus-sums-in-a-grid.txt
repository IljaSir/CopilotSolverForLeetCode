Synthesizing 10/10 solutions

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> ans;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k <= min(i, j) && k <= min(m - i - 1, n - j - 1); ++k) {
                    int sum = 0;
                    for (int t = 0; t <= k; ++t) {
                        sum += grid[i - t][j - t];
                        sum += grid[i + t][j + t];
                        sum += grid[i - t][j + t];
                        sum += grid[i + t][j - t];
                    }
                    ans.push_back(sum - grid[i][j]);
                }
            }
        }
        sort(ans.begin(), ans.end(), greater<int>());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        return vector<int>(ans.begin(), ans.begin() + min((int)ans.size(), 3));

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> res;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0;
                for (int k = 0; i - k >= 0 && j - k >= 0 && i + k < m && j + k < n; ++k) {
                    sum += grid[i - k][j - k] + grid[i - k][j + k] + grid[i + k][j - k] + grid[i + k][j + k];
                    if (k > 0) {
                        sum -= grid[i - k + 1][j - k] + grid[i - k + 1][j + k] + grid[i + k - 1][j - k] + grid[i + k - 1][j + k];
                    }
                    res.push_back(sum);
                }
            }
        }
        sort(res.begin(), res.end(), greater<int>());
        res.erase(unique(res.begin(), res.end()), res.end());
        return vector<int>(res.begin(), res.begin() + min(3, (int)res.size()));

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> res;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int k = 1;
                while (i - k >= 0 && i + k < m && j - k >= 0 && j + k < n) {
                    int sum = grid[i][j];
                    for (int l = 1; l <= k; ++l) {
                        sum += grid[i - l][j + l] + grid[i - l][j - l] + grid[i + l][j + l] + grid[i + l][j - l];
                    }
                    res.push_back(sum);
                    ++k;
                }
            }
        }
        sort(res.begin(), res.end());
        res.erase(unique(res.begin(), res.end()), res.end());
        if (res.size() > 3) {
            res.erase(res.begin(), res.end() - 3);
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> res;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int sum = grid[i][j];
                int x = i, y = j;
                int d = 1;
                while (x - d >= 0 && y - d >= 0 && x + d < m && y + d < n) {
                    sum += grid[x - d][y] + grid[x + d][y] + grid[x][y - d] + grid[x][y + d];
                    res.push_back(sum);
                    d++;
                }
            }
        }
        sort(res.begin(), res.end(), greater<int>());
        res.erase(unique(res.begin(), res.end()), res.end());
        while (res.size() > 3) {
            res.pop_back();
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k <= min(i, j) && k <= min(m - 1 - i, n - 1 - j); ++k) {
                    int sum = 0;
                    for (int t = 0; t <= k; ++t) {
                        sum += grid[i - t][j - k + t];
                        sum += grid[i + t][j - k + t];
                        sum += grid[i - t][j + k - t];
                        sum += grid[i + t][j + k - t];
                    }
                    ans.push_back(sum - grid[i][j]);
                }
            }
        }
        sort(ans.begin(), ans.end(), greater<int>());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        while (ans.size() > 3) ans.pop_back();
        return ans;

=======

        vector<int> res;
        int m = grid.size();
        int n = grid[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int sum = 0;
                for (int k = 0; i - k >= 0 && i + k < m && j - k >= 0 && j + k < n; ++k) {
                    sum += grid[i - k][j];
                    sum += grid[i + k][j];
                    sum += grid[i][j - k];
                    sum += grid[i][j + k];
                    if (k > 0) {
                        sum -= grid[i - k][j - k];
                        sum -= grid[i - k][j + k];
                        sum -= grid[i + k][j - k];
                        sum -= grid[i + k][j + k];
                    }
                    res.push_back(sum);
                }
            }
        }
        sort(res.begin(), res.end(), greater<int>());
        res.erase(unique(res.begin(), res.end()), res.end());
        return vector<int>(res.begin(), res.begin() + min(3, (int)res.size()));

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> result;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int maxLen = min(i, j);
                maxLen = min(maxLen, m - i - 1);
                maxLen = min(maxLen, n - j - 1);
                for (int k = 0; k <= maxLen; k++) {
                    int sum = 0;
                    for (int l = 0; l <= k; l++) {
                        sum += grid[i - l][j - k + l];
                        sum += grid[i + l][j - k + l];
                        sum += grid[i - l][j + k - l];
                        sum += grid[i + l][j + k - l];
                    }
                    result.push_back(sum);
                }
            }
        }
        sort(result.begin(), result.end());
        result.erase(unique(result.begin(), result.end()), result.end());
        reverse(result.begin(), result.end());
        if (result.size() > 3) {
            result.resize(3);
        }
        return result;

=======

        vector<int> ans;
        int m = grid.size();
        int n = grid[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 1; k <= min(i, j) && k <= min(m - i - 1, n - j - 1); ++k) {
                    int sum = 0;
                    for (int d = 0; d <= k; ++d) {
                        sum += grid[i - d][j - k + d];
                        sum += grid[i + d][j + k - d];
                        sum += grid[i - k + d][j + d];
                        sum += grid[i + k - d][j - d];
                    }
                    ans.push_back(sum - grid[i][j]);
                }
            }
        }
        sort(ans.begin(), ans.end());
        ans.erase(unique(ans.begin(), ans.end()), ans.end());
        reverse(ans.begin(), ans.end());
        while (ans.size() > 3) ans.pop_back();
        return ans;

=======

        int n = grid.size();
        int m = grid[0].size();
        set<int> res;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                int k = 0;
                while (i + k < n && i - k >= 0 && j + k < m && j - k >= 0) {
                    int sum = 0;
                    for (int c = j - k; c <= j + k; ++c) {
                        sum += grid[i - k][c];
                        sum += grid[i + k][c];
                    }
                    for (int r = i - k + 1; r <= i + k - 1; ++r) {
                        sum += grid[r][j - k];
                        sum += grid[r][j + k];
                    }
                    res.insert(sum);
                    if (res.size() > 3) res.erase(res.begin());
                    ++k;
                }
            }
        }
        return vector<int>(res.rbegin(), res.rend());

=======

        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        int max = 0;
        vector<int> result;
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                for (int l = 0; r - l >= 0 && c - l >= 0 && r + l < m && c + l < n; l++) {
                    sum = 0;
                    for (int i = -l; i <= l; i++) {
                        sum += grid[r - l][c + i];
                        sum += grid[r + l][c + i];
                    }
                    for (int i = -l + 1; i <= l - 1; i++) {
                        sum += grid[r + i][c - l];
                        sum += grid[r + i][c + l];
                    }
                    if (sum > max) {
                        max = sum;
                        result.push_back(sum);
                        sort(result.begin(), result.end(), greater<int>());
                        if (result.size() > 3) {
                            result.pop_back();
                        }
                    }
                }
            }
        }
        return result;
