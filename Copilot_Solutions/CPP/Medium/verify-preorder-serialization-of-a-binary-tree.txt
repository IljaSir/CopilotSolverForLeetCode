Synthesizing 10/10 solutions

=======

        int n = preorder.size();
        int i = 0;
        int slot = 1;
        while (i < n) {
            if (slot == 0) {
                return false;
            }
            if (preorder[i] == ',') {
                i++;
            } else if (preorder[i] == '#') {
                slot--;
                i++;
            } else {
                while (i < n && preorder[i] != ',') {
                    i++;
                }
                slot++;
            }
        }
        return slot == 0;

=======

        int n = preorder.size();
        int i = 0;
        int slot = 1;
        while (i < n) {
            if (slot == 0) return false;
            if (preorder[i] == ',') i++;
            else if (preorder[i] == '#') {
                slot--;
                i++;
            } else {
                while (i < n && preorder[i] != ',') i++;
                slot++;
            }
        }
        return slot == 0;

=======

        int n = preorder.length();
        int slots = 1;
        for (int i = 0; i < n; i++) {
            if (slots == 0) return false;
            if (preorder[i] == ',') continue;
            else if (preorder[i] == '#') slots--;
            else {
                slots++;
                while (i + 1 < n && preorder[i + 1] != ',') i++;
            }
        }
        return slots == 0;

=======

        int n = preorder.size();
        int i = 0;
        int cnt = 1;
        while (i < n) {
            if (cnt == 0) return false;
            if (preorder[i] == '#') {
                cnt--;
                i++;
            } else {
                while (i < n && preorder[i] != ',') i++;
                cnt++;
            }
            if (i < n) i++;
        }
        return cnt == 0;

=======

        int n = preorder.length();
        int i = 0;
        int cnt = 1;
        while (i < n) {
            if (cnt == 0) return false;
            if (preorder[i] == '#') {
                cnt--;
                i++;
            } else {
                cnt++;
                while (i < n && preorder[i] != ',') {
                    i++;
                }
            }
            if (i < n) i++;
        }
        return cnt == 0;

=======

        int n = preorder.size();
        if (n == 0) return false;
        int i = 0;
        int slots = 1;
        while (i < n) {
            if (slots == 0) return false;
            if (preorder[i] == ',') {
                i++;
            } else if (preorder[i] == '#') {
                slots--;
                i++;
            } else {
                while (i < n && preorder[i] != ',') i++;
                slots++;
            }
        }
        return slots == 0;

=======

        vector<string> nodes;
        int i = 0;
        while (i < preorder.size()) {
            int j = i;
            while (j < preorder.size() && preorder[j] != ',') {
                ++j;
            }
            string node = preorder.substr(i, j - i);
            nodes.push_back(node);
            i = j + 1;
        }
        int n = nodes.size();
        int d = 1;
        for (int i = 0; i < n; ++i) {
            --d;
            if (d < 0) {
                return false;
            }
            if (nodes[i] != "#") {
                d += 2;
            }
        }
        return d == 0;

=======

        int n = preorder.size();
        int i = 0;
        int cnt = 0;
        while (i < n) {
            while (i < n && preorder[i] == ',') ++i;
            if (i >= n) break;
            if (preorder[i] == '#') {
                --cnt;
                if (cnt < 0) return false;
            } else {
                ++cnt;
                while (i < n && preorder[i] != ',') ++i;
            }
        }
        return cnt == -1;

=======

        int n = preorder.size();
        if (!n) return false;
        int i = 0;
        int diff = 1;
        while (i < n) {
            if (diff == 0) return false;
            if (preorder[i] == ',') {
                i++;
                continue;
            }
            if (preorder[i] == '#') {
                diff--;
                i++;
                continue;
            }
            while (i < n && preorder[i] != ',') {
                i++;
            }
            diff++;
        }
        return diff == 0;

=======

        int n = preorder.size();
        if (preorder[n - 1] != '#') {
            return false;
        }
        stack<char> st;
        for (int i = 0; i < n; i++) {
            if (preorder[i] == ',') {
                continue;
            }
            st.push(preorder[i]);
            while (st.size() >= 3 && st.top() == '#' && st.top() == st.top()) {
                st.pop();
                st.pop();
                if (st.top() == '#') {
                    return false;
                }
                st.pop();
                st.push('#');
            }
        }
        while (st.size() > 1 && st.top() == '#' && st.top() == st.top()) {
            st.pop();
            st.pop();
            if (st.top() == '#') {
                return false;
            }
            st.pop();
            st.push('#');
        }
        return st.size() == 1 && st.top() == '#';
