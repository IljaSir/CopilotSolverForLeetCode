Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> prefix(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        int ans = INT_MAX;
        for (int i = 1; i <= n; i++) {
            int l = 0, r = i;
            while (l < r) {
                int mid = l + r >> 1;
                if (prefix[i] - prefix[mid] >= target) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            if (prefix[i] - prefix[l] >= target) {
                ans = min(ans, i - l);
            }
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = nums.size();
        int i = 0, j = 0;
        int sum = 0;
        int ans = INT_MAX;
        while (j < n) {
            sum += nums[j];
            while (sum >= target) {
                ans = min(ans, j - i + 1);
                sum -= nums[i];
                i++;
            }
            j++;
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = nums.size();
        int ans = INT_MAX;
        int sum = 0;
        int i = 0;
        for (int j = 0; j < n; j++) {
            sum += nums[j];
            while (sum >= target) {
                ans = min(ans, j - i + 1);
                sum -= nums[i];
                i++;
            }
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = nums.size();
        int sum = 0;
        int ans = INT_MAX;
        int start = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            while (sum >= target) {
                ans = min(ans, i - start + 1);
                sum -= nums[start];
                start++;
            }
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = nums.size();
        int left = 0;
        int sum = 0;
        int result = INT_MAX;
        for (int right = 0; right < n; right++) {
            sum += nums[right];
            while (sum >= target) {
                result = min(result, right - left + 1);
                sum -= nums[left];
                left++;
            }
        }
        return result == INT_MAX ? 0 : result;

=======

        int n = nums.size();
        int left = 0, right = 0;
        int sum = 0;
        int result = n + 1;
        while (right < n) {
            sum += nums[right];
            while (sum >= target) {
                result = min(result, right - left + 1);
                sum -= nums[left];
                left++;
            }
            right++;
        }
        return result == n + 1 ? 0 : result;

=======

        int n = nums.size(), ans = INT_MAX, sum = 0;
        int j = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            while (sum >= target) {
                ans = min(ans, i - j + 1);
                sum -= nums[j++];
            }
        }
        return ans == INT_MAX ? 0 : ans;

=======

        int n = nums.size();
        if (n == 0) {
            return 0;
        }
        int ans = 0;
        int left = 0, right = 0;
        int sum = 0;
        while (right < n) {
            sum += nums[right];
            while (sum >= target) {
                int length = right - left + 1;
                if (ans == 0 || length < ans) {
                    ans = length;
                }
                sum -= nums[left];
                left++;
            }
            right++;
        }
        return ans;

=======

        int n = nums.size();
        int i = 0, j = 0, sum = 0, minLen = INT_MAX;
        while (j < n) { // expand the window
            sum += nums[j];
            while (sum >= target) { // shrink the window
                minLen = min(minLen, j - i + 1);
                sum -= nums[i];
                i++;
            }
            j++;
        }
        return minLen == INT_MAX ? 0 : minLen;
