Synthesizing 7/10 solutions (Duplicates hidden)

=======

        unordered_map<int, unordered_map<int, int>> graph;
        for (auto& e: edges) {
            graph[e[0]][e[1]] = e[2];
            graph[e[1]][e[0]] = e[2];
        }
        unordered_set<int> restrictedSet(restricted.begin(), restricted.end());
        unordered_map<int, int> dist;
        priority_queue<pair<int, int>> pq;
        pq.push({0, 0});
        while (!pq.empty()) {
            auto [d, i] = pq.top();
            pq.pop();
            if (dist.count(i)) continue;
            dist[i] = -d;
            for (auto [j, w]: graph[i]) {
                if (!dist.count(j)) {
                    pq.push({d - w - 1, j});
                }
            }
        }
        int ans = 0;
        for (auto& [i, d]: dist) {
            if (!restrictedSet.count(i)) ++ans;
            for (auto [j, w]: graph[i]) {
                if (dist.count(j)) {
                    int used = d + dist[j] + 1;
                    ans += min(used, w);
                }
            }
        }
        return ans;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].emplace_back(e[1], e[2] + 1);
            graph[e[1]].emplace_back(e[0], e[2] + 1);
        }
        unordered_set<int> restrictedSet(restricted.begin(), restricted.end());
        vector<int> dist(n, INT_MAX);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.emplace(0, 0);
        dist[0] = 0;
        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();
            if (d > dist[u]) continue;
            for (auto [v, w] : graph[u]) {
                if (dist[v] > d + w) {
                    dist[v] = d + w;
                    pq.emplace(dist[v], v);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (dist[i] < INT_MAX) ++res;
        }
        for (auto& e : edges) {
            int u = e[0];
            int v = e[1];
            int w = e[2];
            int d1 = dist[u] < INT_MAX ? dist[u] : 0;
            int d2 = dist[v] < INT_MAX ? dist[v] : 0;
            res += min(d1 + d2, w);
            if (d1 > w) res -= d1 - w;
            if (d2 > w) res -= d2 - w;
        }
        return res;

=======

        unordered_map<int, unordered_map<int, int>> m;
        for (auto &e : edges) {
            m[e[0]][e[1]] = e[2];
            m[e[1]][e[0]] = e[2];
        }
        
        unordered_set<int> visited;
        visited.insert(0);
        int res = 0;
        queue<pair<int, int>> q;
        q.push({0, INT_MAX});
        while (!q.empty()) {
            auto t = q.front(); q.pop();
            res++;
            for (auto &p : m[t.first]) {
                if (visited.find(p.first) != visited.end()) continue;
                visited.insert(p.first);
                int n = min(t.second, p.second);
                if (n > 0) {
                    q.push({p.first, n-1});
                    res += n;
                }
            }
        }
        
        for (auto &e : edges) {
            int a = e[0], b = e[1], l = e[2];
            int x = 0, y = 0;
            if (visited.find(a) != visited.end()) x = min(l, restricted[a]);
            if (visited.find(b) != visited.end()) y = min(l, restricted[b]);
            res -= (x+y);
        }
        
        return res;

=======

        vector<vector<int>> g(n);
        for (auto &e : edges) {
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        unordered_set<int> rs(restricted.begin(), restricted.end());
        vector<int> dist(n, INT_MAX);
        dist[0] = 0;
        queue<int> q;
        q.push(0);
        while (!q.empty()) {
            int u = q.front(); q.pop();
            for (int v : g[u]) {
                if (rs.count(v)) continue;
                if (dist[u] + 1 < dist[v]) {
                    dist[v] = dist[u] + 1;
                    q.push(v);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (dist[i] != INT_MAX) {
                res++;
            }
        }
        for (auto &e : edges) {
            int d = min(dist[e[0]] + dist[e[1]], e[2]);
            if (dist[e[0]] != INT_MAX) {
                res += max(0, d - dist[e[0]]);
            }
            if (dist[e[1]] != INT_MAX) {
                res += max(0, d - dist[e[1]]);
            }
        }
        return res;

=======

        vector<vector<pair<int,int>>> graph(n);
        for(auto& edge: edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        unordered_set<int> restrict(restricted.begin(), restricted.end());
        unordered_map<int, int> dist;
        dist[0] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, 0});
        while(!pq.empty()) {
            auto [d, node] = pq.top();
            pq.pop();
            if(dist.find(node) != dist.end() && dist[node] < d) continue;
            for(auto [next, weight]: graph[node]) {
                if(dist.find(next) == dist.end() || dist[next] > d + weight + 1) {
                    dist[next] = d + weight + 1;
                    pq.push({dist[next], next});
                }
            }
        }
        int ans = dist.size();
        for(auto& edge: edges) {
            int d1 = dist.find(edge[0]) == dist.end() ? 0 : dist[edge[0]];
            int d2 = dist.find(edge[1]) == dist.end() ? 0 : dist[edge[1]];
            ans += min(d1 + d2, edge[2]);
            if(restrict.find(edge[0]) != restrict.end() && restrict.find(edge[1]) != restrict.end()) {
                if(d1 > edge[2]) ans -= d1 - edge[2];
                if(d2 > edge[2]) ans -= d2 - edge[2];
            }
        }
        return ans;

=======

        unordered_map<int, unordered_map<int, int>> edgeMap;
        unordered_set<int> visited;
        for (auto& edge : edges) {
            edgeMap[edge[0]][edge[1]] = edge[2];
            edgeMap[edge[1]][edge[0]] = edge[2];
        }
        queue<int> q;
        q.push(0);
        int res = 0;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            if (visited.count(node)) continue;
            visited.insert(node);
            res++;
            for (auto& [nextNode, weight] : edgeMap[node]) {
                if (visited.count(nextNode)) continue;
                if (weight > 0) {
                    weight--;
                    edgeMap[nextNode][node]--;
                    q.push(nextNode);
                }
            }
        }
        for (auto& edge : edges) {
            int node1 = edge[0];
            int node2 = edge[1];
            int weight = edge[2];
            int used = min(edgeMap[node1][node2], edgeMap[node2][node1]);
            res += used;
            int remain = weight - used;
            if (visited.count(node1) && visited.count(node2)) {
                res += remain;
            } else if (visited.count(node1) || visited.count(node2)) {
                res += remain;
                if (remain > 0) {
                    for (auto& [nextNode, weight] : edgeMap[node1]) {
                        if (visited.count(nextNode)) continue;
                        if (weight > 0) {
                            weight--;
                            edgeMap[nextNode][node1]--;
                            q.push(nextNode);
                        }
                    }
                    for (auto& [nextNode, weight] : edgeMap[node2]) {
                        if (visited.count(nextNode)) continue;
                        if (weight > 0) {
                            weight--;
                            edgeMap[nextNode][node2]--;
                            q.push(nextNode);
                        }
                    }
                }
            }
        }
        return res;
