Synthesizing 10/10 solutions

=======

        int i = s.length() - 1;
        int j = t.length() - 1;
        int count = 0;
        while (i >= 0 && j >= 0) {
            if (s[i] == t[j]) {
                i--;
                j--;
            } else {
                i--;
                count++;
            }
        }
        return count + j + 1;

=======

        int n = s.size();
        int m = t.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (s[i] == t[j]) {
                ++i;
                ++j;
            } else {
                ++i;
            }
        }
        return m - j;

=======

        int i = s.length() - 1, j = t.length() - 1;
        int count = 0;
        while (i >= 0 && j >= 0) {
            if (s[i] == t[j]) {
                i--;
                j--;
            } else {
                i--;
                count++;
            }
        }
        return count + j + 1;

=======

        int m = s.size(), n = t.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s[i - 1] == t[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return n - dp[m][n];

=======

        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (s[i - 1] == t[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= n; ++i) {
            if (dp[i][m] == m) {
                res = n - i;
                break;
            }
        }
        return res;

=======

        int n = s.size(), m = t.size();
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (s[i] == t[j]) j++;
            i++;
        }
        return m - j;

=======

        int n = s.size(), m = t.size();
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= m; ++j) {
                if (j == 0) {
                    dp[i][j] = 1;
                } else if (i == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i - 1][j];
                    if (s[i - 1] == t[j - 1]) {
                        dp[i][j] |= dp[i - 1][j - 1];
                    }
                }
            }
        }
        int ans = 0;
        for (int i = n; i >= 0; --i) {
            if (dp[i][m] == 1) {
                ans = n - i;
                break;
            }
        }
        return ans;

=======

        int n = s.size();
        int m = t.size();
        int i = n - 1;
        int j = m - 1;
        int ans = 0;
        while (i >= 0 && j >= 0) {
            if (s[i] == t[j]) {
                i--;
                j--;
            } else {
                ans++;
                i--;
            }
        }
        if (j >= 0) ans += j + 1;
        return ans;

=======

        int n = s.size();
        int m = t.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, 0));
        for(int i=0; i<=n; i++){
            for(int j=0; j<=m; j++){
                if(j==0) dp[i][j] = 0;
                else if(i==0) dp[i][j] = m;
                else if(s[i-1]==t[j-1]) dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = dp[i-1][j]+1;
            }
        }
        return dp[n][m];

=======

        int i = 0, j = 0;
        int n = s.size(), m = t.size();
        int ans = 0;
        while (i < n) {
            if (j < m && s[i] == t[j]) {
                ++i;
                ++j;
            } else {
                ++i;
                ++ans;
            }
        }
        return ans + m - j;
