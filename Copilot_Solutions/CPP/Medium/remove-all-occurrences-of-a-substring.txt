Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (s.find(part) != string::npos) {
            s.erase(s.find(part), part.length());
        }
        return s;

=======

        while (s.find(part) != string::npos) {
            s.erase(s.find(part), part.size());
        }
        return s;

=======

        int i = s.find(part);
        while (i != string::npos) {
            s.erase(i, part.length());
            i = s.find(part);
        }
        return s;

=======

        int pos = s.find(part);
        while(pos != string::npos){
            s = s.substr(0, pos) + s.substr(pos + part.size());
            pos = s.find(part);
        }
        return s;

=======

        int n = s.size();
        int m = part.size();
        int i = 0;
        while (i <= n - m) {
            if (s.substr(i, m) == part) {
                s.erase(i, m);
                i = 0;
            } else {
                i++;
            }
        }
        return s;

=======

        while(s.find(part)!=string::npos){
            int i = s.find(part);
            s.erase(i,part.length());
        }
        return s;

=======

        string t;
        int i = 0, j = 0;
        while (i < s.size()) {
            t.push_back(s[i++]);
            if (t.size() >= part.size() && t.substr(t.size() - part.size()) == part) {
                t.erase(t.size() - part.size());
            }
        }
        return t;

=======

        string t = s;
        while ((t.find(part) != string::npos)) {
            t.erase(t.find(part), part.length());
        }
        return t;
