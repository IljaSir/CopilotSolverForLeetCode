Synthesizing 10/10 solutions

=======

        string result;
        int index = 0;
        for (int i = 0; i < spaces.size(); ++i) {
            result += s.substr(index, spaces[i] - index) + " ";
            index = spaces[i];
        }
        result += s.substr(index);
        return result;

=======

        string result = "";
        int j = 0;
        for(int i = 0; i < s.size(); i++){
            if(i == spaces[j]){
                result += " ";
                j++;
            }
            result += s[i];
        }
        return result;

=======

        string res = "";
        int i = 0;
        for (int j = 0; j < spaces.size(); ++j) {
            while (i < spaces[j]) {
                res += s[i++];
            }
            res += ' ';
        }
        while (i < s.size()) {
            res += s[i++];
        }
        return res;

=======

        string res;
        int k = 0;
        for (int i = 0; i < s.size(); i++) {
            if (k < spaces.size() && spaces[k] == i) {
                res += ' ';
                k++;
            }
            res += s[i];
        }
        return res;

=======

        int n = s.length();
        int m = spaces.size();
        int j = 0;
        string ans;
        for (int i = 0; i < n; i++) {
            if (j < m && i == spaces[j]) {
                ans.push_back(' ');
                j++;
            }
            ans.push_back(s[i]);
        }
        return ans;

=======

        string res;
        int i=0;
        for(auto space:spaces){
            res+=s.substr(i,space-i);
            res+=' ';
            i=space;
        }
        res+=s.substr(i);
        return res;

=======

        string result;
        int n = s.size();
        int m = spaces.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            result += s[i++];
            if (i == spaces[j]) {
                result += " ";
                ++j;
            }
        }
        while (i < n) {
            result += s[i++];
        }
        return result;

=======

        int n = s.size();
        int m = spaces.size();
        string res = "";
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (i < spaces[j]) {
                res += s[i++];
            } else {
                res += ' ';
                j++;
            }
        }
        while (i < n) {
            res += s[i++];
        }
        return res;

=======

        int n = s.size();
        int m = spaces.size();
        if (m == 0) return s;
        string res;
        res.reserve(n + m);
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            res += s[i++];
            if (i == spaces[j]) {
                res += ' ';
                ++j;
            }
        }
        while (i < n) {
            res += s[i++];
        }
        return res;

=======

        int n = spaces.size();
        string ans = "";
        for(int i = 0, j = 0; i < s.length(); i++){
            if( j < n && i == spaces[j]){
                ans += " ";
                j++;
            }
            ans += s[i];
        }
        return ans;
