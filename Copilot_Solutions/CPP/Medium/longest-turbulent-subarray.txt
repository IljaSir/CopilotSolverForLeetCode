Synthesizing 10/10 solutions

=======

        int N = arr.size();
        int ans = 1;
        int anchor = 0;
        for (int i = 1; i < N; ++i) {
            int c = cmp(arr[i-1], arr[i]);
            if (c == 0) {
                anchor = i;
            } else if (i == N-1 || c * cmp(arr[i], arr[i+1]) != -1) {
                ans = max(ans, i - anchor + 1);
                anchor = i;
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 1, anchor = 0;
        for (int i = 1; i < n; ++i) {
            int c = cmp(arr[i - 1], arr[i]);
            if (c == 0) {
                anchor = i;
            } else if (i == n - 1 || c * cmp(arr[i], arr[i + 1]) != -1) {
                ans = max(ans, i - anchor + 1);
                anchor = i;
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 1;
        int start = 0;
        for (int i = 1; i < n; i++) {
            int c = compare(arr[i-1], arr[i]);
            if (c == 0) {
                start = i;
            } else if (i == n-1 || c * compare(arr[i], arr[i+1]) != -1) {
                ans = max(ans, i - start + 1);
                start = i;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n, 1);
        int ans = 1;
        for (int i = 1; i < n; i++) {
            if (i % 2 == 1) {
                if (arr[i] > arr[i-1]) dp[i] = dp[i-1] + 1;
                else dp[i] = 1;
            } else {
                if (arr[i] < arr[i-1]) dp[i] = dp[i-1] + 1;
                else dp[i] = 1;
            }
            ans = max(ans, dp[i]);
        }
        for (int i = 1; i < n; i++) {
            if (i % 2 == 1) {
                if (arr[i] < arr[i-1]) dp[i] = dp[i-1] + 1;
                else dp[i] = 1;
            } else {
                if (arr[i] > arr[i-1]) dp[i] = dp[i-1] + 1;
                else dp[i] = 1;
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = arr.size();
        int res = 1;
        int l = 0, r = 0;
        while (r < n - 1) {
            if (l == r) {
                if (arr[l] == arr[l + 1]) {
                    l++;
                }
                r++;
            } else {
                if (arr[r - 1] < arr[r] && arr[r] > arr[r + 1]) {
                    r++;
                } else if (arr[r - 1] > arr[r] && arr[r] < arr[r + 1]) {
                    r++;
                } else {
                    l = r;
                }
            }
            res = max(res, r - l + 1);
        }
        return res;

=======

        int n = arr.size(), ans = 1;
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            if (arr[i] > arr[i - 1]) {
                dp[i] = (i >= 2 && arr[i - 1] < arr[i - 2]) ? dp[i - 1] + 1 : 2;
            } else if (arr[i] < arr[i - 1]) {
                dp[i] = (i >= 2 && arr[i - 1] > arr[i - 2]) ? dp[i - 1] + 1 : 2;
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = arr.size();
        if (n == 1) return 1;
        int ans = 1;
        int cur = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i - 1]) {
                cur = 1;
            } else if ((i % 2 == 0 && arr[i] > arr[i - 1]) || (i % 2 == 1 && arr[i] < arr[i - 1])) {
                cur++;
            } else {
                cur = 2;
            }
            ans = max(ans, cur);
        }
        return ans;

=======

        int n = arr.size();
        int ans = 1;
        int cnt = 1;
        for (int i = 1; i < n; i++) {
            if (arr[i] == arr[i-1]) {
                cnt = 1;
            } else if (i == 1 || arr[i] > arr[i-1] == arr[i-1] > arr[i-2]) {
                cnt = 2;
            } else {
                cnt++;
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = arr.size();
        if (n == 1) return 1;
        int ans = 0;
        int cnt = 1;
        int sign = 0;
        for (int i = 1; i < n; i++) {
            int cur = arr[i] - arr[i - 1];
            if (cur == 0) {
                cnt = 1;
                sign = 0;
                continue;
            }
            if (cur * sign > 0) {
                cnt++;
            } else {
                cnt = 2;
            }
            sign = cur;
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = arr.size();
        int maxLen = 1;
        int start = 0;
        int end = 1;
        bool flag = true;
        while (end < n) {
            if (arr[end] > arr[end - 1]) {
                if (flag) {
                    end++;
                } else {
                    start = end - 1;
                    end++;
                }
                flag = true;
            } else if (arr[end] < arr[end - 1]) {
                if (!flag) {
                    end++;
                } else {
                    start = end - 1;
                    end++;
                }
                flag = false;
            } else {
                start = end;
                end++;
            }
            maxLen = max(maxLen, end - start);
        }
        return maxLen;
