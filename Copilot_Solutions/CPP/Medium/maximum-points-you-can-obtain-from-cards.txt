Synthesizing 10/10 solutions

=======

        int n = cardPoints.size();
        int sum = 0;
        for (int i = 0; i < k; ++i) sum += cardPoints[i];
        int ans = sum;
        for (int i = 0; i < k; ++i) {
            sum -= cardPoints[k - i - 1];
            sum += cardPoints[n - i - 1];
            ans = max(ans, sum);
        }
        return ans;

=======

        int n = cardPoints.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += cardPoints[i];
        }
        if (k == n) {
            return sum;
        }
        int l = 0;
        int r = k - 1;
        int total = 0;
        for (int i = l; i <= r; i++) {
            total += cardPoints[i];
        }
        int ans = sum - total;
        while (r < n - 1) {
            total -= cardPoints[l];
            l++;
            r++;
            total += cardPoints[r];
            ans = max(ans, sum - total);
        }
        return ans;

=======

        int n = cardPoints.size();
        int sum = 0;
        for (int i = 0; i < k; ++i)
            sum += cardPoints[i];
        int res = sum;
        for (int i = 0; i < k; ++i) {
            sum -= cardPoints[k - i - 1];
            sum += cardPoints[n - i - 1];
            res = max(res, sum);
        }
        return res;

=======

        int n = cardPoints.size();
        int total = accumulate(cardPoints.begin(), cardPoints.end(), 0);
        int sum = 0;
        for (int i = 0; i < n - k; i++) {
            sum += cardPoints[i];
        }
        int ans = total - sum;
        for (int i = n - k; i < n; i++) {
            sum -= cardPoints[i - n + k];
            sum += cardPoints[i];
            ans = max(ans, total - sum);
        }
        return ans;

=======

        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += cardPoints[i];
        }
        int ans = sum;
        for (int i = k-1; i >= 0; i--) {
            sum -= cardPoints[i];
            sum += cardPoints[cardPoints.size() - k + i];
            ans = max(ans, sum);
        }
        return ans;

=======

        int n = cardPoints.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += cardPoints[i];
        }
        int l = n - k;
        int cur = 0;
        for (int i = 0; i < l; i++) {
            cur += cardPoints[i];
        }
        int ans = sum - cur;
        for (int i = l; i < n; i++) {
            cur -= cardPoints[i - l];
            cur += cardPoints[i];
            ans = max(ans, sum - cur);
        }
        return ans;

=======

        int n = cardPoints.size();
        int left = 0, right = n - k;
        int sum = accumulate(cardPoints.begin() + right, cardPoints.end(), 0);
        int ans = sum;
        while (right < n) {
            sum += cardPoints[left] - cardPoints[right];
            ans = max(ans, sum);
            left++;
            right++;
        }
        return ans;

=======

        int n = cardPoints.size();
        int s = 0;
        for (int i = 0; i < n; i++) {
            if (i < k) {
                s += cardPoints[i];
            } else {
                s += cardPoints[i] - cardPoints[i-k];
            }
        }
        int ans = s;
        for (int i = 0; i < k; i++) {
            s += cardPoints[n-k+i] - cardPoints[i];
            ans = max(ans, s);
        }
        return ans;

=======

        int n = cardPoints.size();
        int sum = accumulate(cardPoints.begin(), cardPoints.end(), 0);
        int res = sum;
        int i = 0;
        for (int j = n - k; j < n; ++j) {
            sum -= cardPoints[i++];
            sum += cardPoints[j];
            res = min(res, sum);
        }
        return accumulate(cardPoints.begin(), cardPoints.end(), 0) - res;

=======

        int sum = accumulate(cardPoints.begin(), cardPoints.end(), 0);
        int n = cardPoints.size();
        int p = n - k;
        int cur = 0;
        for (int i = 0; i < p; ++i) {
            cur += cardPoints[i];
        }
        int res = sum - cur;
        for (int i = p; i < n; ++i) {
            cur += cardPoints[i];
            cur -= cardPoints[i-p];
            res = max(res, sum - cur);
        }
        return res;
