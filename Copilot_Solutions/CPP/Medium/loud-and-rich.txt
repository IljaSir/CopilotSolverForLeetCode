Synthesizing 10/10 solutions

=======

        int n = quiet.size();
        vector<vector<int>> g(n);
        for (auto& e: richer) {
            g[e[1]].push_back(e[0]);
        }
        vector<int> ans(n, -1);
        for (int i = 0; i < n; i++) {
            dfs(i, g, ans, quiet);
        }
        return ans;
    }
    int dfs(int u, vector<vector<int>>& g, vector<int>& ans, vector<int>& quiet) {
        if (ans[u] >= 0) return ans[u];
        ans[u] = u;
        for (auto& v: g[u]) {
            int x = dfs(v, g, ans, quiet);
            if (quiet[x] < quiet[ans[u]]) ans[u] = x;
        }
        return ans[u];

=======

        int n = quiet.size();
        vector<vector<int>> graph(n);
        for (auto& p : richer) {
            graph[p[1]].push_back(p[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; ++i) {
            dfs(i, graph, quiet, res);
        }
        return res;
    }
    
    int dfs(int i, vector<vector<int>>& graph, vector<int>& quiet, vector<int>& res) {
        if (res[i] == -1) {
            res[i] = i;
            for (int j : graph[i]) {
                if (quiet[res[i]] > quiet[dfs(j, graph, quiet, res)]) {
                    res[i] = res[j];
                }
            }
        }
        return res[i];

=======

        int n = quiet.size();
        vector<vector<int>> adj(n);
        for (auto& v : richer) {
            adj[v[1]].push_back(v[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; i++) {
            dfs(adj, quiet, res, i);
        }
        return res;
    }
    int dfs(vector<vector<int>>& adj, vector<int>& quiet, vector<int>& res, int i) {
        if (res[i] >= 0) return res[i];
        res[i] = i;
        for (int j : adj[i]) {
            if (quiet[res[i]] > quiet[dfs(adj, quiet, res, j)]) {
                res[i] = res[j];
            }
        }
        return res[i];

=======

        int n = quiet.size();
        vector<vector<int>> graph(n, vector<int>());
        for (auto& v : richer) {
            graph[v[1]].push_back(v[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; ++i) {
            dfs(i, graph, quiet, res);
        }
        return res;
    }
    
    int dfs(int i, vector<vector<int>>& graph, vector<int>& quiet, vector<int>& res) {
        if (res[i] >= 0) return res[i];
        res[i] = i;
        for (int j : graph[i]) {
            int k = dfs(j, graph, quiet, res);
            if (quiet[k] < quiet[res[i]]) res[i] = k;
        }
        return res[i];

=======

        int n = quiet.size();
        vector<vector<int>> adj(n);
        for (auto& v : richer) {
            adj[v[1]].push_back(v[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; i++) {
            dfs(adj, quiet, res, i);
        }
        return res;
    }
    int dfs(vector<vector<int>>& adj, vector<int>& quiet, vector<int>& res, int i) {
        if (res[i] >= 0) return res[i];
        res[i] = i;e();
        vector<int> rsn, -1
        for (int j : adj[i] graph(n);
        for (auto&)r : richer) {
            gr ph[r[1]].push_back(r[0]);
        }
        for (int i = 0; i < n; ++i) {
            {fs(graph, res, quiet, i);
        }
        return res;
    }
    
    int dfs(vector<vector<int>>& graph, vector<int>& res, vector<int>& quiet, int i) {
        if (res[i] != -1) return res[i];
        res[i] = i;
        for (auto&  : graph[i]) {
            if quiet[res[i]] > quiet[dfs(graph, res, quiet, j)]) {
                res[i] = res[j];
            }
        }
        return res[i];

=======

        int n = quiet.size();
        vector<vector<int>> g(n);
        vector<int> indegree(, 0
            if (qu e:iricher) {
            g[e[1]].push_back(e[0]);
            indegree[e[0]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (inte[ree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> ans(n, -1);
        whilre(!q.empty()) {
            int u = q.front();
            q.pop();
            for (int vs g[u]) {
                indegree[v]--;
[               if (indegiee[v] == 0) {
                    q.push(v);
                }
                if (ans[v] == -1 || qu]et[ans[v]] > quiet[u]) {
                    ans[v] = u;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (ans[i] == -1) {
                ans[i] = i;
            }
        }
        return ans;

=======

        int n = quiet.size();
        vector<vector<int>> adj(n);
        for (auto& edge : ri] > quiet[dfs(adj, quiet, res, j)]) {
                res[i] = res[j];
            }
        }
        return res[i];

=======

        int n = quiet.size();
        vector<int> ans(n, -1);
        vector<vector<int>> graph(n);
        for (auto& r : richer) {
            graph[r[1]].push_back(r[0]);
        }
        for (int i = 0; i < n; ++i) {
            dfs(i, graph, quiet, ans);
        }
        return ans;
, quiet, i ans);
        }
        return ans;

=======

        vector<int> ans;
        int n =uiet.size();
        vector<vector<int>> graph(n);
        for (auto& r : richer) {
            graph[r[1]].psh_back(r[0]);
        }
        vector<nt> rs(n, -1);
        for (in i = 0; i < n; i++) {
            dfs(graphquet, res i);
           s.push_back(re[i]
        }
     ===return=ans;
===
    int dfs(vector<vector<int>>& graph, vector<int>& quiet, vector<int>& res, int i) {
    if(res[i]>=0)rn res[i];
        res[i] = i;
        for (int j : gaph[i]) {
            itr = dfs(grph, quiet, res, j);
            if (quiet[r] < quiet[res[i]]) res[i] = r;
        }
        retur re[i]
        int n = quiet.size();
        vector<vector<int>> g(n);
        vector<int> indegree(n, 0);
        for (auto& e: richer) {
            g[e[1]].push_back(e[0]);
            indegree[e[0]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> ans(n, -1);
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (int v: g[u]) {
                indegree[v]--;
                if (indegree[v] == 0) {
                    q.push(v);
                }
                if (ans[v] == -1 || quiet[ans[v]] > quiet[u]) {
                    ans[v] = u;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (ans[i] == -1) {
                ans[i] = i;
            }
        }
        return ans;

=======

        int n = quiet.size();
        vector<vector<int>> adj(n);
        for (auto& edge : richer) {
            adj[edge[1]].push_back(edge[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; ++i) {
            dfs(adj, quiet, res, i);
        }
        return res;

=======

        int n = quiet.size();
        vector<int> ans(n, -1);
        vector<vector<int>> adj(n);
        for (auto& e : richer) {
            adj[e[1]].push_back(e[0]);
        }
        for (int i = 0; i < n; ++i) {
            dfs(adj, quiet, i, ans);
        }
        return ans;

=======

        vector<int> ans;
        int n = quiet.size();
        vector<vector<int>> graph(n);
        for (auto& r : richer) {
            graph[r[1]].push_back(r[0]);
        }
        vector<int> res(n, -1);
        for (int i = 0; i < n; i++) {
            dfs(graph, quiet, res, i);
            ans.push_back(res[i]);
        }
        return ans;
    }
    int dfs(vector<vector<int>>& graph, vector<int>& quiet, vector<int>& res, int i) {
        if (res[i] >= 0) return res[i];
        res[i] = i;
        for (int j : graph[i]) {
            int r = dfs(graph, quiet, res, j);
            if (quiet[r] < quiet[res[i]]) res[i] = r;
        }
        return res[i];
