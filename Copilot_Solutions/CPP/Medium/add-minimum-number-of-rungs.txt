Synthesizing 10/10 solutions

=======

        int ans = 0;
        int cur = 0;
        for (int rung : rungs) {
            ans += (rung - cur - 1) / dist;
            cur = rung;
        }
        return ans;

=======

        int ans = 0;
        int cur = 0;
        for (int i = 0; i < rungs.size(); ++i) {
            if (rungs[i] - cur > dist) {
                ans += (rungs[i] - cur - 1) / dist;
            }
            cur = rungs[i];
        }
        return ans;

=======

        int n = rungs.size();
        int ans = 0;
        int prev = 0;
        for (int i = 0; i < n; ++i) {
            int diff = rungs[i] - prev;
            if (diff > dist) {
                ans += (diff - 1) / dist;
            }
            prev = rungs[i];
        }
        return ans;

=======

        int ans = 0;
        int prev = 0;
        for (auto& rung : rungs) {
            ans += (rung - prev - 1) / dist;
            prev = rung;
        }
        return ans;

=======

        int n = rungs.size();
        int res = 0;
        int last = 0;
        for (int i = 0; i < n; i++) {
            res += (rungs[i] - last - 1) / dist;
            last = rungs[i];
        }
        return res;

=======

        int ans = 0;
        int pre = 0;
        for (int i = 0; i < rungs.size(); i++) {
            int diff = rungs[i] - pre;
            if (diff > dist) {
                ans += (diff - 1) / dist;
            }
            pre = rungs[i];
        }
        return ans;

=======

        int res = 0;
        int cur = 0;
        for (int i = 0; i < rungs.size(); ++i) {
            int d = rungs[i] - cur;
            res += (d - 1) / dist;
            cur = rungs[i];
        }
        return res;

=======

        int result = 0;
        int currentHeight = 0;
        for (int i = 0; i < rungs.size(); i++) {
            int gap = rungs[i] - currentHeight;
            if (gap > dist) {
                result += (gap - 1) / dist;
            }
            currentHeight = rungs[i];
        }
        return result;

=======

        int res = 0;
        int cur = 0;
        for (auto rung : rungs) {
            if (rung - cur > dist) {
                res += (rung - cur) / dist;
                if ((rung - cur) % dist == 0) {
                    res--;
                }
            }
            cur = rung;
        }
        return res;

=======

        int n = rungs.size();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int h = rungs[i];
            if (i > 0) {
                h -= rungs[i-1];
            }
            if (h > dist) {
                int d = h / dist;
                if (h % dist == 0) {
                    d--;
                }
                c += d;
            }
        }
        return c;
