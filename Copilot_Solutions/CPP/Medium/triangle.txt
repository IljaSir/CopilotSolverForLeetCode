Synthesizing 10/10 solutions

=======

        int n = triangle.size();
        vector<int> dp(n, 0);
        dp[0] = triangle[0][0];
        for (int i = 1; i < n; ++i) {
            dp[i] = dp[i - 1] + triangle[i][i];
            for (int j = i - 1; j > 0; --j) {
                dp[j] = min(dp[j - 1], dp[j]) + triangle[i][j];
            }
            dp[0] = dp[0] + triangle[i][0];
        }
        return *min_element(dp.begin(), dp.end());

=======

        int n = triangle.size();
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = triangle[n - 1][i];
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j];
            }
        }
        return dp[0];

=======

        int n = triangle.size();
        vector<int> dp(n);
        for (int i = 0; i < n; ++i) {
            dp[i] = triangle[n - 1][i];
        }
        for (int i = n - 2; i >= 0; --i) {
            for (int j = 0; j <= i; ++j) {
                dp[j] = min(dp[j], dp[j + 1]) + triangle[i][j];
            }
        }
        return dp[0];

=======

        int n = triangle.size();
        vector<int> dp(n, 0);
        dp[0] = triangle[0][0];
        for (int i = 1; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                if (j == i) {
                    dp[j] = dp[j - 1] + triangle[i][j];
                } else if (j == 0) {
                    dp[j] = dp[j] + triangle[i][j];
                } else {
                    dp[j] = min(dp[j - 1], dp[j]) + triangle[i][j];
                }
            }
        }
        return *min_element(dp.begin(), dp.end());

=======

        int n = triangle.size();
        vector<int> dp(n, 0);
        dp[0] = triangle[0][0];
        for (int i = 1; i < n; ++i) {
            for (int j = i; j >= 0; --j) {
                if (j == 0) {
                    dp[j] = dp[j] + triangle[i][j];
                } else if (j == i) {
                    dp[j] = dp[j - 1] + triangle[i][j];
                } else {
                    dp[j] = min(dp[j], dp[j - 1]) + triangle[i][j];
                }
            }
        }
        return *min_element(dp.begin(), dp.end());

=======

        int n = triangle.size();
        for(int i = n - 2; i >= 0; i--)
        {
            for(int j = 0; j < triangle[i].size(); j++)
            {
                triangle[i][j] += min(triangle[i + 1][j], triangle[i + 1][j + 1]);
            }
        }
        return triangle[0][0];

=======

        int n = triangle.size();
        int dp[n][n];
        dp[0][0] = triangle[0][0];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                if (j == 0) {
                    dp[i][j] = dp[i-1][j] + triangle[i][j];
                } else if (j == i) {
                    dp[i][j] = dp[i-1][j-1] + triangle[i][j];
                } else {
                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j];
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[n-1][i]);
        }
        return ans;

=======

        int n=triangle.size();
        vector<int>dp(n+1,0);
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<triangle[i].size();j++){
                dp[j]=triangle[i][j]+min(dp[j],dp[j+1]);
            }
        }
        return dp[0];

=======

        int m = triangle.size();
        int n = triangle[m-1].size();
        vector<int> dp(n, 0);
        dp[0] = triangle[0][0];
        for(int i = 1; i < m; i++){
            for(int j = i; j >= 0; j--){
                if(j == 0) dp[j] = dp[j] + triangle[i][j];
                else if(j == i) dp[j] = dp[j-1] + triangle[i][j];
                else dp[j] = min(dp[j], dp[j-1]) + triangle[i][j];
            }
        }
        int res = dp[0];
        for(int i = 1; i < n; i++){
            res = min(res, dp[i]);
        }
        return res;

=======

        int n = triangle.size();
        vector<int> dp(n,0);
        dp[0] = triangle[0][0];
        for(int i = 1;i<n;i++){
            dp[i] = dp[i-1]+triangle[i][i];
            for(int j = i-1;j>0;j--){
                dp[j] = min(dp[j-1],dp[j])+triangle[i][j];
            }
            dp[0] = dp[0]+triangle[i][0];
        }
        int res = dp[0];
        for(int i = 1;i<n;i++){
            res = min(res,dp[i]);
        }
        return res;
