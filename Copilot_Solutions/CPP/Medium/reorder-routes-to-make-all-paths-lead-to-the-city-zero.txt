Synthesizing 10/10 solutions

=======

        vector<vector<int>> graph(n);
        for (auto& c : connections) {
            graph[c[0]].push_back(c[1]);
            graph[c[1]].push_back(-c[0]);
        }
        int ans = 0;
        queue<int> Q;
        Q.push(0);
        vector<bool> visited(n);
        while (!Q.empty()) {
            int curr = Q.front();
            Q.pop();
            if (visited[curr]) continue;
            visited[curr] = true;
            for (int next : graph[curr]) {
                if (next < 0) {
                    next = -next;
                    ans++;
                }
                Q.push(next);
            }
        }
        return ans;

=======

        vector<vector<int>> graph(n);
        for (auto& c: connections) {
            graph[c[0]].push_back(c[1]);
            graph[c[1]].push_back(-c[0]);
        }
        queue<int> q;
        q.push(0);
        int res = 0;
        vector<bool> visited(n, false);
        visited[0] = true;
        while (!q.empty()) {
            int cur = q.front();
            q.pop();
            for (int next: graph[cur]) {
                if (visited[abs(next)]) continue;
                if (next < 0) res++;
                q.push(abs(next));
                visited[abs(next)] = true;
            }
        }
        return res;

=======

        vector<vector<pair<int, int>>> adj(n);
        for (auto& e : connections) {
            adj[e[0]].push_back({e[1], 1});
            adj[e[1]].push_back({e[0], 0});
        }
        
        int ans = 0;
        vector<bool> visited(n, false);
        queue<int> q;
        q.push(0);
        visited[0] = true;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            for (auto& e : adj[u]) {
                int v = e.first;
                if (!visited[v]) {
                    visited[v] = true;
                    ans += e.second;
                    q.push(v);
                }
            }
        }
        return ans;

=======

        vector<vector<int>> graph(n);
        for (auto& c: connections) {
            graph[c[0]].push_back(c[1]);
            graph[c[1]].push_back(-c[0]);
        }
        int ans = 0;
        vector<bool> visited(n);
        queue<int> q;
        q.push(0);
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            if (visited[u]) continue;
            visited[u] = true;
            for (int v: graph[u]) {
                if (v < 0) {
                    v = -v;
                    ans++;
                }
                q.push(v);
            }
        }
        return ans;

=======

        vector<vector<int>> G(n);
        for (auto& e : connections) {
            G[e[0]].push_back(e[1]);
            G[e[1]].push_back(-e[0]);
        }
        int res = 0;
        queue<int> Q;
        Q.push(0);
        vector<bool> vis(n);
        vis[0] = true;
        while (!Q.empty()) {
            int u = Q.front(); Q.pop();
            for (int v : G[u]) {
                if (vis[abs(v)]) continue;
                vis[abs(v)] = true;
                if (v > 0) res++;
                Q.push(abs(v));
            }
        }
        return res;

=======

        vector<vector<int>> graph(n);
        for (auto& edge : connections) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(-edge[0]);
        }
        queue<int> q;
        q.push(0);
        int result = 0;
        vector<bool> visited(n);
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            visited[node] = true;
            for (int neighbor : graph[node]) {
                if (neighbor < 0) {
                    neighbor = -neighbor;
                    if (!visited[neighbor]) {
                        q.push(neighbor);
                    }
                } else {
                    result++;
                    if (!visited[neighbor]) {
                        q.push(neighbor);
                    }
                }
            }
        }
        return result;

=======

        vector<vector<int>> graph(n);
        for (auto& edge : connections) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(-edge[0]);
        }
        int res = 0;
        dfs(graph, 0, res);
        return res;
    }
    void dfs(vector<vector<int>>& graph, int cur, int& res) {
        for (auto next : graph[cur]) {
            if (next == -1) continue;
            if (next < 0) {
                dfs(graph, -next, res);
                res++;
            } else {
                dfs(graph, next, res);
            }
        }

=======

        vector<vector<int>> graph(n);
        for (auto& edge : connections) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(-edge[0]);
        }
        return dfs(graph, 0, -1);

=======

        unordered_map<int, vector<int>> graph;
        unordered_set<int> visited;
        int res = 0;
        for (auto& conn : connections) {
            graph[conn[0]].push_back(conn[1]);
            graph[conn[1]].push_back(-conn[0]);
        }
        dfs(graph, visited, 0, res);
        return res;

=======

        vector<vector<int>> g(n);
        vector<vector<int>> rg(n);
        vector<bool> visited(n, false);
        for (int i = 0; i < connections.size(); ++i) {
            g[connections[i][0]].push_back(connections[i][1]);
            rg[connections[i][1]].push_back(connections[i][0]);
        }
        int result = 0;
        dfs(g, 0, visited, result);
        dfs(rg, 0, visited, result);
        return result;
    }
    
    void dfs(vector<vector<int>>& g, int u, vector<bool>& visited, int& result) {
        visited[u] = true;
        for (int i = 0; i < g[u].size(); ++i) {
            int v = g[u][i];
            if (!visited[v]) {
                result++;
                dfs(g, v, visited, result);
            }
        }
