Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 0; i < nums.size() / 2; i++) {
            res = max(res, nums[i] + nums[nums.size() - 1 - i]);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            res = max(res, nums[i] + nums[n - i - 1]);
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < n / 2; i++) {
            ans = max(ans, nums[i] + nums[n - i - 1]);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n / 2; ++i) {
            res = max(res, nums[i] + nums[n - 1 - i]);
        }
        return res;

=======

        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() / 2; i++) {
            res = max(res, nums[i] + nums[nums.size() - 1 - i]);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < nums.size()/2; i++) {
            ans = max(ans, nums[i] + nums[nums.size()-1-i]);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = nums.size() - 1, res = 0;
        while (i < j) {
            res = max(res, nums[i] + nums[j]);
            ++i;
            --j;
        }
        return res;

=======

        sort(begin(nums), end(nums));
        int res = 0;
        for (int i = 0; i < nums.size() / 2; ++i) {
            res = max(res, nums[i] + nums[nums.size() - i - 1]);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int maxSum = 0;
        for (int i = 0; i < n/2; ++i) {
            maxSum = max(maxSum, nums[i] + nums[n-1-i]);
        }
        return maxSum;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int maxPairSum = 0;
        for (int i = 0; i < n / 2; i++) {
            maxPairSum = max(maxPairSum, nums[i] + nums[n - 1 - i]);
        }
        return maxPairSum;
