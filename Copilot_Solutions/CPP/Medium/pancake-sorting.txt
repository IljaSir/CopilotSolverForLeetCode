Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> res;
        for (int i = n; i > 0; i--) {
            int j = 0;
            while (arr[j] != i) j++;
            if (j == i - 1) continue;
            if (j != 0) {
                res.push_back(j + 1);
                reverse(arr.begin(), arr.begin() + j + 1);
            }
            res.push_back(i);
            reverse(arr.begin(), arr.begin() + i);
        }
        return res;

=======

        vector<int> res;
        for (int i = arr.size(); i > 0; --i) {
            int j = 0;
            for (; j < i; ++j)
                if (arr[j] == i) break;
            res.push_back(j + 1);
            res.push_back(i);
            reverse(arr.begin(), arr.begin() + j + 1);
            reverse(arr.begin(), arr.begin() + i);
        }
        return res;

=======

        vector<int> res;
        int n = arr.size();
        for (int i = n; i > 0; i--) {
            int j = 0;
            while (arr[j] != i) {
                j++;
            }
            res.push_back(j + 1);
            reverse(arr.begin(), arr.begin() + j + 1);
            res.push_back(i);
            reverse(arr.begin(), arr.begin() + i);
        }
        return res;

=======

        vector<int> res;
        int n = arr.size();
        for (int i = n; i > 0; i--) {
            auto it = find(arr.begin(), arr.begin() + i, i);
            int index = it - arr.begin();
            if (index == i - 1) continue;
            if (index > 0) {
                res.push_back(index + 1);
                reverse(arr.begin(), arr.begin() + index + 1);
            }
            res.push_back(i);
            reverse(arr.begin(), arr.begin() + i);
        }
        return res;

=======

        vector<int> res;
        int n = arr.size();
        for (int i = n; i > 0; i--) {
            auto it = find(arr.begin(), arr.begin() + i, i);
            int j = it - arr.begin();
            if (j == i - 1) continue;
            if (j > 0) {
                res.push_back(j + 1);
                reverse(arr.begin(), arr.begin() + j + 1);
            }
            res.push_back(i);
            reverse(arr.begin(), arr.begin() + i);
        }
        return res;

=======

        vector<int> result;
        for (int i = arr.size() - 1; i >= 0; i--) {
            int j = 0;
            while (j < i) {
                if (arr[j] == i + 1) {
                    break;
                }
                j++;
            }
            reverse(arr.begin(), arr.begin() + j + 1);
            result.push_back(j + 1);
            reverse(arr.begin(), arr.begin() + i + 1);
            result.push_back(i + 1);
        }
        return result;

=======

        vector<int> res;
        for (int i = arr.size(); i > 0; i--) {
            int index = find(arr, i);
            flip(arr, index + 1);
            flip(arr, i);
            res.push_back(index + 1);
            res.push_back(i);
        }
        return res;
    }
    int find(vector<int>& arr, int target) {
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }
    void flip(vector<int>& arr, int k) {
        int i = 0;
        while (i < k / 2) {
            int temp = arr[i];
            arr[i] = arr[k - i - 1];
            arr[k - i - 1] = temp;
            i++;
        }

=======

        vector<int> result;
        int n = arr.size();
        for (int i = n; i > 1; --i) {
            int j = find(arr.begin(), arr.end(), i) - arr.begin();
            result.push_back(j + 1);
            reverse(arr.begin(), arr.begin() + j + 1);
            result.push_back(i);
            reverse(arr.begin(), arr.begin() + i);
        }
        return result;

=======

        vector<int> res;
        int len = arr.size();
        for (int i = len - 1; i >= 0; i--) {
            if (arr[i] != i + 1) {
                int pos = 0;
                for (int j = 0; j <= i; j++) {
                    if (arr[j] == i + 1) {
                        pos = j;
                        break;
                    }
                }
                if (pos != 0) {
                    res.push_back(pos + 1);
                    reverse(arr.begin(), arr.begin() + pos + 1);
                }
                res.push_back(i + 1);
                reverse(arr.begin(), arr.begin() + i + 1);
            }
        }
        return res;

=======

        vector<int> res;
        int n = arr.size();
        int maxIndex = 0;
        for(int i = n - 1; i > 0; i--) {
            maxIndex = findMax(arr, i);
            if(maxIndex != i) {
                flip(arr, maxIndex);
                res.push_back(maxIndex + 1);
                flip(arr, i);
                res.push_back(i + 1);
            }
        }
        return res;
    }
    int findMax(vector<int>& arr, int i) {
        int maxIndex = 0;
        for(int j = 0; j <= i; j++) {
            if(arr[j] > arr[maxIndex]) {
                maxIndex = j;
            }
        }
        return maxIndex;
    }
    void flip(vector<int>& arr, int i) {
        int l = 0, r = i;
        while(l < r) {
            swap(arr[l++], arr[r--]);
        }
