Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> ones(n, 0);
        ones[0] = s[0] - '0';
        for (int i = 1; i < n; i++) {
            ones[i] = ones[i - 1] + s[i] - '0';
        }
        int ans = ones[n - 1];
        for (int i = 0; i < n; i++) {
            int cur = ones[i] + (n - 1 - i) - (ones[n - 1] - ones[i]);
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n, 0);
        dp[0] = s[0] - '0';
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + s[i] - '0';
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            int left = i >= 1 ? dp[i - 1] : 0;
            int right = dp[n - 1] - dp[i];
            ans = min(ans, left + (n - i - right));
        }
        return min(ans, dp[n - 1]);

=======

        int n = s.size();
        vector<int> pre(n+1, 0);
        for (int i = 1; i <= n; ++i) {
            pre[i] = pre[i-1] + (s[i-1] == '1');
        }
        int ans = INT_MAX;
        for (int i = 0; i <= n; ++i) {
            ans = min(ans, pre[i] + n-i-(pre[n]-pre[i]));
        }
        return ans;

=======

        int n = s.length();
        vector<int> zero(n, 0);
        vector<int> one(n, 0);
        if (s[0] == '0') {
            zero[0] = 1;
        } else {
            one[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (s[i] == '0') {
                zero[i] = zero[i - 1] + 1;
                one[i] = one[i - 1];
            } else {
                zero[i] = zero[i - 1];
                one[i] = one[i - 1] + 1;
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            int cur = 0;
            if (i == 0) {
                cur = one[n - 1];
            } else if (i == n - 1) {
                cur = zero[n - 1];
            } else {
                cur = zero[i] + (one[n - 1] - one[i]);
            }
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = s.size();
        int ones = 0;
        int flips = 0;
        for(int i = 0; i < n; i++) {
            if(s[i] == '1') {
                ones++;
            } else {
                if(ones == 0) {
                    continue;
                } else {
                    flips++;
                }
            }
            if(flips > ones) {
                ones = flips;
            }
        }
        return flips;

=======

        int n = s.size();
        int cnt0 = 0, cnt1 = 0;
        for (char c : s) {
            if (c == '0') {
                ++cnt0;
            } else {
                ++cnt1;
            }
        }
        int ans = cnt1;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '0') {
                --cnt0;
            } else {
                --cnt1;
            }
            ans = min(ans, cnt0 + cnt1);
        }
        return ans;

=======

        int n = s.size();
        int zero = 0;
        int one = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == '0'){
                zero++;
            }else{
                one++;
            }
        }
        int ans = min(zero, one);
        int cur = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == '0'){
                cur++;
            }else{
                cur--;
            }
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = s.size();
        int dp[n+1][2];
        dp[0][0] = dp[0][1] = 0;
        for (int i=0; i<n; i++) {
            if (s[i] == '0') {
                dp[i+1][0] = dp[i][0];
                dp[i+1][1] = min(dp[i][0], dp[i][1]) + 1;
            } else {
                dp[i+1][0] = dp[i][0] + 1;
                dp[i+1][1] = min(dp[i][0], dp[i][1]);
            }
        }
        return min(dp[n][0], dp[n][1]);

=======

        int n = s.size();
        if (n == 1) return 0;
        int zeroCount = 0;
        int oneCount = 0;
        for (char c : s) {
            if (c == '0') {
                zeroCount++;
            }
        }
        int minFlips = zeroCount;
        for (char c : s) {
            if (c == '0') {
                zeroCount--;
            } else {
                oneCount++;
            }
            minFlips = min(minFlips, zeroCount + oneCount);
        }
        return minFlips;

=======

        int n = s.size();
        int dp[n];
        int count = 0;
        for(int i=0; i<n; i++){
            if(s[i] == '1'){
                count++;
            }
            dp[i] = count;
        }
        int minFlips = count;
        for(int i=0; i<n; i++){
            int flips = dp[i] + (n-1-i) - (dp[n-1] - dp[i]);
            minFlips = min(minFlips, flips);
        }
        return minFlips;
