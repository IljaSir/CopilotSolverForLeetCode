Synthesizing 10/10 solutions

=======

        stack<int> s;
        for (int i = 0; i < tokens.size(); i++) {
            if (tokens[i] == "+") {
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(b + a);
            } else if (tokens[i] == "-") {
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(b - a);
            } else if (tokens[i] == "*") {
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(b * a);
            } else if (tokens[i] == "/") {
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                s.push(b / a);
            } else {
                s.push(stoi(tokens[i]));
            }
        }
        return s.top();

=======

        stack<int> st;
        for (int i = 0; i < tokens.size(); i++) {
            if (tokens[i] == "+") {
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(a + b);
            } else if (tokens[i] == "-") {
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b - a);
            } else if (tokens[i] == "*") {
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(a * b);
            } else if (tokens[i] == "/") {
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                st.push(b / a);
            } else {
                st.push(stoi(tokens[i]));
            }
        }
        return st.top();

=======

        stack<int> s;
        for (auto token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int a = s.top();
                s.pop();
                int b = s.top();
                s.pop();
                if (token == "+") s.push(b + a);
                else if (token == "-") s.push(b - a);
                else if (token == "*") s.push(b * a);
                else s.push(b / a);
            } else {
                s.push(stoi(token));
            }
        }
        return s.top();

=======

        stack<int> stk;
        for (auto& token : tokens) {
            if (token == "+") {
                int a = stk.top();
                stk.pop();
                int b = stk.top();
                stk.pop();
                stk.push(a + b);
            } else if (token == "-") {
                int a = stk.top();
                stk.pop();
                int b = stk.top();
                stk.pop();
                stk.push(b - a);
            } else if (token == "*") {
                int a = stk.top();
                stk.pop();
                int b = stk.top();
                stk.pop();
                stk.push(a * b);
            } else if (token == "/") {
                int a = stk.top();
                stk.pop();
                int b = stk.top();
                stk.pop();
                stk.push(b / a);
            } else {
                stk.push(stoi(token));
            }
        }
        return stk.top();

=======

        stack<int> s;
        for (auto& token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int b = s.top();
                s.pop();
                int a = s.top();
                s.pop();
                if (token == "+") {
                    s.push(a + b);
                } else if (token == "-") {
                    s.push(a - b);
                } else if (token == "*") {
                    s.push(a * b);
                } else if (token == "/") {
                    s.push(a / b);
                }
            } else {
                s.push(stoi(token));
            }
        }
        return s.top();

=======

        stack<int> s;
        for (auto& token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int a = s.top(); s.pop();
                int b = s.top(); s.pop();
                int c = 0;
                if (token == "+") c = a + b;
                else if (token == "-") c = b - a;
                else if (token == "*") c = a * b;
                else if (token == "/") c = b / a;
                s.push(c);
            } else {
                s.push(stoi(token));
            }
        }
        return s.top();

=======

        stack<int> stk;
        for (auto& token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int num2 = stk.top();
                stk.pop();
                int num1 = stk.top();
                stk.pop();
                int result = 0;
                if (token == "+") {
                    result = num1 + num2;
                } else if (token == "-") {
                    result = num1 - num2;
                } else if (token == "*") {
                    result = num1 * num2;
                } else if (token == "/") {
                    result = num1 / num2;
                }
                stk.push(result);
            } else {
                stk.push(stoi(token));
            }
        }
        return stk.top();

=======

        stack<int> s;
        int a, b;
        for (string& token : tokens) {
            if (token == "+") {
                a = s.top(); s.pop();
                b = s.top(); s.pop();
                s.push(a + b);
            } else if (token == "-") {
                a = s.top(); s.pop();
                b = s.top(); s.pop();
                s.push(b - a);
            } else if (token == "*") {
                a = s.top(); s.pop();
                b = s.top(); s.pop();
                s.push(a * b);
            } else if (token == "/") {
                a = s.top(); s.pop();
                b = s.top(); s.pop();
                s.push(b / a);
            } else {
                s.push(stoi(token));
            }
        }
        return s.top();

=======

        stack<int> st;
        for (auto &token: tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int a = st.top(); st.pop();
                int b = st.top(); st.pop();
                if (token == "+") st.push(a + b);
                else if (token == "-") st.push(b - a);
                else if (token == "*") st.push(a * b);
                else st.push(b / a);
            } else {
                st.push(stoi(token));
            }
        }
        return st.top();

=======

        stack<int> s;
        for(auto token : tokens) {
            if(token == "+" || token == "-" || token == "*" || token == "/") {
                int op1 = s.top();
                s.pop();
                int op2 = s.top();
                s.pop();
                if(token == "+") {
                    s.push(op2 + op1);
                } else if(token == "-") {
                    s.push(op2 - op1);
                } else if(token == "*") {
                    s.push(op2 * op1);
                } else if(token == "/") {
                    s.push(op2 / op1);
                }
            } else {
                s.push(stoi(token));
            }
        }
        return s.top();
