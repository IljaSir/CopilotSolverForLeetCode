Synthesizing 10/10 solutions

=======

        int n = grid[0].size();
        vector<long long> pre(n + 1);
        for (int i = 0; i < n; ++i) {
            pre[i + 1] = pre[i] + grid[0][i];
        }
        long long ans = 1e18;
        long long sum = pre[n];
        long long cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += grid[1][i];
            ans = min(ans, max(cur, sum - pre[i + 1]));
        }
        return ans;

=======

        int n = grid[0].size();
        long long sum[2] = {0, 0};
        for (int i = 0; i < n; i++) {
            sum[0] += grid[0][i];
            sum[1] += grid[1][i];
        }
        long long ans = sum[1];
        for (int i = 0; i < n; i++) {
            sum[0] -= grid[0][i];
            sum[1] -= grid[1][i];
            ans = min(ans, max(sum[0], sum[1]));
        }
        return ans;

=======

        int n = grid[0].size();
        vector<long long> pre(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            pre[i] = pre[i - 1] + grid[0][i - 1];
        }
        long long ans = 1e18;
        long long sum = pre[n];
        for (int i = 0; i < n; ++i) {
            sum -= grid[1][i];
            ans = min(ans, max(sum, pre[i]));
        }
        return ans;

=======

        int n = grid[0].size();
        long long sum1 = 0;
        long long sum2 = 0;
        for (int i = 0; i < n; ++i) {
            sum1 += grid[0][i];
            sum2 += grid[1][i];
        }
        long long res = LLONG_MAX;
        long long s1 = 0;
        long long s2 = 0;
        for (int i = 0; i < n; ++i) {
            s1 += grid[0][i];
            s2 += grid[1][i];
            res = min(res, max(sum1 - s1, s2));
        }
        return res;

=======

        int n = grid[0].size();
        vector<long long> prefix(n+1, 0);
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i-1] + grid[0][i-1];
        }
        long long res = LONG_MAX;
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += grid[1][i];
            res = min(res, max(sum, prefix[n] - prefix[i+1]));
        }
        return res;

=======

        int n = grid[0].size();
        vector<long long> pre(n+1);
        vector<long long> suf(n+1);
        for (int i = 0; i < n; ++i) {
            pre[i+1] = pre[i] + grid[0][i];
        }
        for (int i = n-1; i >= 0; --i) {
            suf[i] = suf[i+1] + grid[1][i];
        }
        long long ans = 1e18;
        for (int i = 0; i < n; ++i) {
            ans = min(ans, max(pre[i], suf[i+1]));
        }
        return ans;

=======

        long long n = grid[0].size();
        vector<long long> pre(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            pre[i] = pre[i - 1] + grid[0][i - 1];
        }
        long long ans = 1e18;
        long long sum = pre[n];
        for (int i = 1; i <= n; i++) {
            ans = min(ans, max(pre[i - 1], sum - pre[i]));
        }
        return ans;

=======

        long long n = grid[0].size();
        vector<long long> pre(n + 1);
        for (int i = 1; i <= n; i++) {
            pre[i] = pre[i - 1] + grid[0][i - 1];
        }
        long long res = LLONG_MAX;
        long long sum = pre[n];
        long long cur = 0;
        for (int i = 0; i < n; i++) {
            res = min(res, max(cur, sum - cur - grid[0][i]));
            cur += grid[1][i];
        }
        return res;

=======

        int n = grid[0].size();
        long long ans = 1e18;
        long long sum0 = 0;
        long long sum1 = 0;
        for (int i = 0; i < n; i++) {
            sum0 += grid[0][i];
            sum1 += grid[1][i];
        }
        long long cur0 = 0;
        long long cur1 = sum1;
        for (int i = 0; i < n; i++) {
            cur0 += grid[0][i];
            cur1 -= grid[1][i];
            ans = min(ans, max(cur0, cur1));
        }
        return ans;

=======

        long long n = grid[0].size();
        vector<long long> preSum(n + 1);
        preSum[0] = 0;
        for (long long i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + grid[1][i];
        }
        long long ans = LLONG_MAX;
        long long sum = 0;
        for (long long i = 0; i < n; i++) {
            ans = min(ans, max(sum, preSum[n] - preSum[i + 1]));
            sum += grid[0][i];
        }
        return ans;
