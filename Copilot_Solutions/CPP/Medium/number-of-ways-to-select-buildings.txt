Synthesizing 6/10 solutions

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') ++cnt;
        }
        if (cnt % 3 != 0) return 0;
        if (cnt == 0) {
            return (long long)(n - 2) * (long long)(n - 1) / 2 % 1000000007;
        }
        int m = cnt / 3;
        int l = 0, r = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') {
                ++l;
                if (l == m) {
                    l = i;
                    break;
                }
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] == '1') {
                ++r;
                if (r == m) {
                    r = i;
                    break;
                }
            }
        }
        l = l + 1;
        r = r - 1;
        int left = 0, right = 0;
        for (int i = l; i <= r; ++i) {
            if (s[i] == '0') ++left;
        }
        for (int i = r; i >= l; --i) {
            if (s[i] == '0') ++right;
        }
        return (long long)left * (long long)right % 1000000007;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            cnt += s[i] == '1';
        }
        if (cnt % 3 != 0) return 0;
        if (cnt == 0) {
            long long res = 1ll * (n - 1) * (n - 2) / 2;
            return res % 1000000007;
        }
        cnt /= 3;
        int i = 0, j = 0, k = 0;
        int c = 0;
        for (int l = 0; l < n; ++l) {
            if (s[l] == '1') c++;
            if (c == cnt) {i = l; break;}
        }
        for (int l = i + 1; l < n; ++l) {
            if (s[l] == '1') c++;
            if (c == 2 * cnt) {j = l; break;}
        }
        for (int l = j + 1; l < n; ++l) {
            if (s[l] == '1') c++;
            if (c == 3 * cnt) {k = l; break;}
        }
        long long res = 1ll * (i + 1) * (j - i) * (k - j);
        return res % 1000000007;

=======

        int n = s.size();
        int cnt = 0;
        for (char c : s) {
            if (c == '1') cnt++;
        }
        if (cnt % 3 != 0) return 0;
        if (cnt == 0) {
            return (long long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        int k = cnt / 3;
        int i = 0;
        int j = 0;
        int cnt1 = 0;
        int cnt2 = 0;
        while (i < n && cnt1 < k) {
            if (s[i] == '1') cnt1++;
            i++;
        }
        while (i < n && s[i] == '0') i++;
        j = i;
        while (j < n && cnt2 < k) {
            if (s[j] == '1') cnt2++;
            j++;
        }
        return (long long)(i - cnt1) * (j - i) % 1000000007;

=======

        int n = s.size();
        int cnt = 0;
        for (auto c : s) {
            if (c == '1') {
                cnt++;
            }
        }
        if (cnt % 3 != 0) {
            return 0;
        }
        if (cnt == 0) {
            long long m = n - 2;
            return m * (m - 1) / 2 % 1000000007;
        }
        int k = cnt / 3;
        int i = 0, j = 0;
        int cnt1 = 0;
        while (cnt1 < k) {
            if (s[i] == '1') {
                cnt1++;
            }
            i++;
        }
        int cnt2 = 0;
        while (cnt2 < k) {
            if (s[j] == '1') {
                cnt2++;
            }
            j++;
        }
        while (s[i] == '0') {
            i++;
        }
        while (s[j] == '0') {
            j++;
        }
        return (long long)(i - cnt1) * (n - j) % 1000000007;

=======

        int n = s.size();
        int cnt = count(s.begin(), s.end(), '1');
        if (cnt % 3) return 0;
        if (cnt == 0) {
            return (n - 2) * 1ll * (n - 1) / 2 % 1000000007;
        }
        cnt /= 3;
        int i = 0, j = 0;
        int c = 0;
        int p1, p2;
        while (i < n) {
            if (s[i] == '1') {
                c++;
            }
            if (c == cnt) {
                p1 = i;
                break;
            }
            i++;
        }
        while (j < n) {
            if (s[j] == '1') {
                c--;
            }
            if (c == 0) {
                p2 = j;
                break;
            }
            j++;
        }
        long long ans = (p1 + 1) * 1ll * (n - p2) % 1000000007;
        while (j < n) {
            if (s[j] == '1') {
                c--;
            }
            if (c == cnt) {
                ans = ans * (j - p2) % 1000000007;
                p2 = j;
            }
            j++;
        }
        return ans;

=======

        long long mod = 1e9 + 7;
        long long n = s.size();
        long long count = 0;
        for(int i = 0; i < n; i++) {
            if(s[i] == '1') count++;
        }
        if(count % 3 != 0) return 0;
        if(count == 0) {
            long long res = (n - 1) * (n - 2) / 2;
            return res % mod;
        }
        long long k = count / 3;
        long long i = 0, j = 0;
        long long cnt = 0;
        while(i < n) {
            if(s[i] == '1') cnt++;
            if(cnt == k) break;
            i++;
        }
        long long left = i + 1;
        while(i < n) {
            if(s[i] == '1') cnt++;
            if(cnt == 2 * k) break;
            i++;
        }
        long long right = i - left + 1;
        while(i < n) {
            if(s[i] == '1') cnt++;
            if(cnt == 3 * k) break;
            i++;
        }
        long long mid = i - left - right + 1;
        long long res = left * mid * right;
        return res % mod;
