Synthesizing 10/10 solutions

=======

        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++cnt;
                } else {
                    --cnt;
                }
            }
        }
        if (cnt != 0) return false;
        int l = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++l;
                } else {
                    --l;
                }
            }
            if (l < 0) return false;
        }
        int r = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++r;
                } else {
                    --r;
                }
            }
            if (r < 0) return false;
        }
        return true;

=======

        int n = s.length();
        int open = 0;
        for (int i = 0; i < n; i++) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    open++;
                } else if (open > 0) {
                    open--;
                } else {
                    s[i] = '(';
                    open++;
                }
            } else if (s[i] == '(') {
                open++;
            } else {
                open--;
            }
        }
        int close = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (locked[i] == '0') {
                if (s[i] == ')') {
                    close++;
                } else if (close > 0) {
                    close--;
                } else {
                    s[i] = ')';
                    close++;
                }
            } else if (s[i] == ')') {
                close++;
            } else {
                close--;
            }
        }
        return open == 0 && close == 0;

=======

        int n = s.size();
        int open = 0;
        int close = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++open;
                } else {
                    ++close;
                }
            }
        }
        if (close > open) {
            return false;
        }
        int left = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++left;
                } else {
                    --left;
                }
            }
            if (left < 0) {
                return false;
            }
        }
        return true;

=======

        int n = s.size();
        int open = 0, close = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                open++;
            } else {
                close++;
            }
            if (open < close) {
                if (locked[i] == '1') {
                    return false;
                }
                s[i] = '(';
                open++;
                close--;
            }
        }
        open = 0, close = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == '(') {
                open++;
            } else {
                close++;
            }
            if (open > close) {
                if (locked[i] == '1') {
                    return false;
                }
                s[i] = ')';
                open--;
                close++;
            }
        }
        return true;

=======

        int n = s.size();
        int l = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                if (s[i] == '(') {
                    ++l;
                } else if (s[i] == ')') {
                    if (l > 0) {
                        --l;
                    } else {
                        return false;
                    }
                }
            }
        }
        int r = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (locked[i] == '0') {
                if (s[i] == ')') {
                    ++r;
                } else if (s[i] == '(') {
                    if (r > 0) {
                        --r;
                    } else {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        int n = s.size();
        vector<int> open(n), close(n);
        for (int i = 0; i < n; ++i) {
            open[i] = (s[i] == '(');
            close[i] = (s[i] == ')');
            if (i) {
                open[i] += open[i - 1];
                close[i] += close[i - 1];
            }
        }
        int o = 0, c = 0;
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                s[i] = '(';
                ++o;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (locked[i] == '0') {
                s[i] = ')';
                ++c;
            }
            if (o < open[i] || c < close[i]) {
                return false;
            }
        }
        return true;

=======

        int n = s.size();
        int cnt = 0, cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (locked[i] == '1') {
                if (s[i] == '(') {
                    cnt1++;
                } else {
                    cnt2++;
                }
            } else {
                if (s[i] == '(') {
                    cnt++;
                } else {
                    cnt--;
                }
            }
            if (cnt < 0) {
                if (cnt1 > 0) {
                    cnt1--;
                    cnt += 2;
                } else {
                    return false;
                }
            }
        }
        cnt = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (locked[i] == '1') {
                if (s[i] == ')') {
                    cnt1++;
                } else {
                    cnt2++;
                }
            } else {
                if (s[i] == ')') {
                    cnt++;
                } else {
                    cnt--;
                }
            }
            if (cnt < 0) {
                if (cnt1 > 0) {
                    cnt1--;
                    cnt += 2;
                } else {
                    return false;
                }
            }
        }
        return true;

=======

        int n = s.size();
        vector<int> open(n, 0);
        vector<int> close(n, 0);
        int openCount = 0;
        int closeCount = 0;
        for (int i = 0; i < n; i++) {
            if (locked[i] == '1') {
                if (s[i] == '(') {
                    openCount++;
                } else {
                    closeCount++;
                }
            } else {
                if (s[i] == '(') {
                    open[i] = 1;
                    openCount++;
                } else {
                    close[i] = 1;
                    closeCount++;
                }
            }
        }
        if (openCount != closeCount) {
            return false;
        }
        vector<int> openPrefixSum(n, 0);
        vector<int> closePrefixSum(n, 0);
        for (int i = 0; i < n; i++) {
            openPrefixSum[i] = open[i];
            closePrefixSum[i] = close[i];
            if (i > 0) {
                openPrefixSum[i] += openPrefixSum[i - 1];
                closePrefixSum[i] += closePrefixSum[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (locked[i] == '1') {
                continue;
            }
            if (s[i] == '(') {
                if (closePrefixSum[i] > 0) {
                    return true;
                }
            } else {
                if (openPrefixSum[i] > 0) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = s.size();
        int cnt = 0;
        vector<int> cnts(n);
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                cnt++;
            } else {
                cnt--;
            }
            cnts[i] = cnt;
        }
        if (cnt != 0) return false;
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                left++;
            } else {
                right++;
            }
            if (locked[i] == '1') {
                if (left < right) return false;
            } else {
                if (cnts[i] < 0) return false;
            }
        }
        return true;

=======

        int n = s.size();
        int count = 0;
        int open = 0;
        bool flag = true;
        for (int i = 0; i < n; i++) {
            if (locked[i] == '1') {
                if (s[i] == '(') {
                    count++;
                } else {
                    count--;
                }
            } else {
                if (s[i] == '(') {
                    open++;
                } else {
                    if (open > 0) {
                        open--;
                    } else {
                        flag = false;
                    }
                }
            }
        }
        return count == 0 && flag;
