Synthesizing 10/10 solutions

=======

        int res = 0, n = nums.size(), mod = 1e9 + 7;
        sort(nums.begin(), nums.end());
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; ++i)
            pow2[i] = pow2[i - 1] * 2 % mod;
        for (int i = 0, j = n - 1; i <= j; ++i) {
            while (i <= j && nums[i] + nums[j] > target) --j;
            if (i <= j) res = (res + pow2[j - i]) % mod;
        }
        return res;

=======

        int mod = 1e9 + 7;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; i++) pow2[i] = (pow2[i-1] * 2) % mod;
        int res = 0, l = 0, r = n - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                r--;
            } else {
                res = (res + pow2[r - l]) % mod;
                l++;
            }
        }
        return res;

=======

        const int mod = 1e9 + 7;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; ++i) {
            pow2[i] = pow2[i - 1] * 2 % mod;
        }
        int res = 0;
        int left = 0, right = n - 1;
        while (left <= right) {
            if (nums[left] + nums[right] > target) {
                --right;
            } else {
                res = (res + pow2[right - left]) % mod;
                ++left;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int mod = 1e9 + 7;
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; ++i) {
            pow2[i] = (pow2[i - 1] * 2) % mod;
        }
        int l = 0, r = n - 1, ans = 0;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                --r;
            }
            else {
                ans = (ans + pow2[r - l]) % mod;
                ++l;
            }
        }
        return ans;

=======

        int N = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> pow2(N, 1);
        for (int i = 1; i < N; ++i) {
            pow2[i] = pow2[i - 1] * 2 % 1000000007;
        }
        int res = 0;
        for (int i = 0, j = N - 1; i <= j; ++i) {
            while (i <= j && nums[i] + nums[j] > target) --j;
            if (i <= j) {
                res = (res + pow2[j - i]) % 1000000007;
            }
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int res = 0, mod = 1e9 + 7;
        vector<int> pow2(n, 1);
        for (int i = 1; i < n; ++i) pow2[i] = pow2[i - 1] * 2 % mod;
        int j = n - 1;
        for (int i = 0; i <= j; ++i) {
            while (j >= i && nums[i] + nums[j] > target) --j;
            if (j < i) break;
            res = (res + pow2[j - i]) % mod;
        }
        return res;

=======

        int n = nums.size();
        int mod = 1e9+7;
        vector<int> pow2(n);
        pow2[0] = 1;
        for (int i = 1; i < n; i++) {
            pow2[i] = (pow2[i - 1] << 1) % mod;
        }
        sort(nums.begin(), nums.end());
        int l = 0, r = n - 1;
        int ans = 0;
        while (l <= r) {
            if (nums[l] + nums[r] <= target) {
                ans = (ans + pow2[r - l]) % mod;
                l++;
            } else {
                r--;
            }
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        for(int i = 1; i < n; ++i)
            dp[i] = (dp[i - 1] * 2) % 1000000007;
        int ans = 0;
        for(int i = 0, j = n - 1; i <= j; ++i) {
            while(i <= j && nums[i] + nums[j] > target) --j;
            if(i <= j) {
                ans += dp[j - i];
                ans %= 1000000007;
            }
        }
        return ans;

=======

        int mod = 1e9 + 7;
        sort(nums.begin(), nums.end());
        long long ans = 0;
        int n = nums.size();
        vector<long long> pow2(n, 1);
        for (int i = 1; i < n; ++i) {
            pow2[i] = pow2[i - 1] * 2 % mod;
        }
        int l = 0, r = n - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                --r;
            } else {
                ans = (ans + pow2[r - l]) % mod;
                ++l;
            }
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int64_t res = 0, mod = 1e9+7;
        vector<int64_t> power(n, 1);
        for (int i = 1; i < n; ++i) {
            power[i] = power[i-1] * 2 % mod;
        }
        int l = 0, r = n - 1;
        while (l <= r) {
            if (nums[l] + nums[r] > target) {
                --r;
            } else {
                res = (res + power[r-l]) % mod;
                ++l;
            }
        }
        return res;
