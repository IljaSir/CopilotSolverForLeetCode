Synthesizing 9/10 solutions

=======

        int n = pattern.size();
        string res;
        int l = 0, r = n;
        for (int i = 0; i < n; ++i) {
            if (pattern[i] == 'I') {
                res += to_string(l++);
            } else {
                res += to_string(r--);
            }
        }
        res += to_string(l);
        return res;

=======

        int n = pattern.size();
        int l = 0, r = n;
        string res = "";
        for (int i = 0; i < n; i++) {
            if (pattern[i] == 'I') {
                res += to_string(l);
                l++;
            } else {
                res += to_string(r);
                r--;
            }
        }
        res += to_string(l);
        return res;

=======

        string result;
        int n = pattern.length();
        int min = 1;
        int max = n + 1;
        for (int i = 0; i < n; i++) {
            if (pattern[i] == 'I') {
                result.push_back(min + '0');
                min++;
            } else {
                result.push_back(max + '0');
                max--;
            }
        }
        result.push_back(min + '0');
        return result;

=======

        vector<int> digits;
        for (int i = 0; i < pattern.size() + 1; i++) {
            digits.push_back(i);
        }
        for (int i = 0; i < pattern.size(); i++) {
            if (pattern[i] == 'D') {
                int j = i;
                while (j < pattern.size() && pattern[j] == 'D') {
                    j++;
                }
                reverse(digits.begin() + i, digits.begin() + j + 1);
                i = j;
            }
        }
        string ret;
        for (int i = 0; i < digits.size(); i++) {
            ret.push_back('0' + digits[i]);
        }
        return ret;

=======

        int n = pattern.size();
        string ret(n + 1, ' ');
        int lo = 0, hi = n;
        for (int i = 0; i < n; ++i) {
            if (pattern[i] == 'I') {
                ret[i] = lo + '0';
                lo++;
            } else {
                ret[i] = hi + '0';
                hi--;
            }
        }
        ret[n] = lo + '0';
        return ret;

=======

        int n = pattern.size();
        string res = "";
        int i = 0, j = n;
        for (char c : pattern) {
            if (c == 'I') {
                res += to_string(i++);
            } else {
                res += to_string(j--);
            }
        }
        res += to_string(i);
        return res;

=======

        int n = pattern.size();
        int i = 0, j = n;
        string res = "";
        for (char c: pattern) {
            if (c == 'I') {
                res += to_string(i++);
            } else {
                res += to_string(j--);
            }
        }
        res += to_string(i);
        return res;

=======

        int n = pattern.size();
        string num = "";
        int i = 1;
        int j = n + 1;
        for (int k = 0; k < n; ++k) {
            if (pattern[k] == 'I') {
                num += to_string(i);
                ++i;
            } else {
                num += to_string(j);
                --j;
            }
        }
        num += to_string(i);
        return num;

=======

        string res;
        int n = pattern.length();
        int i = 0;
        int j = n;
        for (char c : pattern) {
            if (c == 'I') {
                res += to_string(i++);
            } else {
                res += to_string(j--);
            }
        }
        res += to_string(i);
        return res;
