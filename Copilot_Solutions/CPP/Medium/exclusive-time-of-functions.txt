Synthesizing 10/10 solutions

=======

        vector<int> res(n, 0);
        stack<int> stk;
        int pre = 0;
        for (string log : logs) {
            int pos1 = log.find(':');
            int pos2 = log.find(':', pos1 + 1);
            int id = stoi(log.substr(0, pos1));
            string status = log.substr(pos1 + 1, pos2 - pos1 - 1);
            int time = stoi(log.substr(pos2 + 1));
            if (!stk.empty()) {
                res[stk.top()] += time - pre;
            }
            pre = time;
            if (status == "start") {
                stk.push(id);
            } else {
                res[stk.top()]++;
                stk.pop();
                pre++;
            }
        }
        return res;

=======

        vector<int> res(n, 0);
        stack<int> st;
        int pre = 0;
        for (auto log: logs) {
            int pos1 = log.find(':');
            int pos2 = log.find(':', pos1 + 1);
            int id = stoi(log.substr(0, pos1));
            string status = log.substr(pos1 + 1, pos2 - pos1 - 1);
            int time = stoi(log.substr(pos2 + 1));
            if (status == "start") {
                if (!st.empty()) {
                    res[st.top()] += time - pre;
                }
                st.push(id);
                pre = time;
            } else {
                res[st.top()] += time - pre + 1;
                st.pop();
                pre = time + 1;
            }
        }
        return res;

=======

        vector<int> ans(n, 0);
        stack<int> st;
        int prev = 0;
        for (auto& log: logs) {
            int pos = log.find(':');
            int id = stoi(log.substr(0, pos));
            log = log.substr(pos+1);
            pos = log.find(':');
            bool isStart = (log.substr(0, pos) == "start");
            int t = stoi(log.substr(pos+1));
            if (!st.empty()) {
                ans[st.top()] += t - prev;
            }
            prev = t;
            if (isStart) {
                st.push(id);
            } else {
                ans[st.top()]++;
                st.pop();
                prev++;
            }
        }
        return ans;

=======

        vector<int> res(n, 0);
        stack<int> stk;
        int pre = 0;
        for(auto& log: logs){
            int pos = log.find(':');
            int id = stoi(log.substr(0, pos));
            int pos2 = log.find(':', pos + 1);
            string status = log.substr(pos + 1, pos2 - pos - 1);
            int cur = stoi(log.substr(pos2 + 1));
            if(!stk.empty()){
                res[stk.top()] += cur - pre;
            }
            pre = cur;
            if(status == "start"){
                stk.push(id);
            }else{
                res[stk.top()]++;
                stk.pop();
                pre++;
            }
        }
        return res;

=======

        vector<int> result(n, 0);
        stack<int> s;
        int prev = 0;
        for (auto log: logs) {
            int index = log.find(":");
            int id = stoi(log.substr(0, index));
            int time = stoi(log.substr(index + 2));
            if (log.find("start") != string::npos) {
                if (!s.empty()) {
                    result[s.top()] += time - prev;
                }
                s.push(id);
                prev = time;
            } else {
                result[s.top()] += time - prev + 1;
                s.pop();
                prev = time + 1;
            }
        }
        return result;

=======

        vector<int> result(n, 0);
        stack<int> s;
        int prevTime = 0;
        for (auto &log: logs) {
            int pos = log.find(':');
            int id = stoi(log.substr(0, pos));
            int time = stoi(log.substr(pos+2));
            if (log[pos+1] == 's') {
                if (!s.empty()) {
                    result[s.top()] += time - prevTime;
                }
                s.push(id);
                prevTime = time;
            } else {
                result[s.top()] += time - prevTime + 1;
                s.pop();
                prevTime = time + 1;
            }
        }
        return result;

=======

        vector<int> ans(n, 0);
        stack<int> s;
        int prev = 0;
        for (auto& log: logs) {
            auto pos = log.find(":");
            int id = stoi(log.substr(0, pos));
            int t = stoi(log.substr(pos+1));
            pos = log.find(":", pos+1);
            bool start = log[pos+1] == 's';
            if (start) {
                if (!s.empty()) {
                    ans[s.top()] += t - prev;
                }
                s.push(id);
                prev = t;
            } else {
                ans[s.top()] += t - prev + 1;
                s.pop();
                prev = t + 1;
            }
        }
        return ans;

=======

        vector<int> res(n);
        stack<int> st;
        int last = 0;
        for (string &log: logs) {
            int pos = log.find(':');
            int id = stoi(log.substr(0, pos));
            int pos2 = log.find(':', pos + 1);
            string status = log.substr(pos + 1, pos2 - pos - 1);
            int time = stoi(log.substr(pos2 + 1));
            if (!st.empty()) {
                res[st.top()] += time - last;
            }
            last = time;
            if (status == "start") {
                st.push(id);
            } else {
                res[st.top()]++;
                last++;
                st.pop();
            }
        }
        return res;

=======

        vector<int> res(n, 0);
        stack<int> s;
        int preTime = 0;
        for (auto log : logs) {
            int id = 0, time = 0;
            string status;
            stringstream ss(log);
            getline(ss, log, ':');
            id = stoi(log);
            getline(ss, log, ':');
            status = log;
            getline(ss, log, ':');
            time = stoi(log);
            if (status == "start") {
                if (!s.empty()) res[s.top()] += time - preTime;
                s.push(id);
                preTime = time;
            } else {
                res[s.top()] += time - preTime + 1;
                s.pop();
                preTime = time + 1;
            }
        }
        return res;

=======

        vector<int> result(n, 0);
        stack<int> stk;
        int prevTime = 0;
        for (string& log : logs) {
            int id = 0, time = 0;
            string state;
            stringstream ss(log);
            getline(ss, log, ':');
            id = stoi(log);
            getline(ss, log, ':');
            state = log;
            getline(ss, log, ':');
            time = stoi(log);
            if (state == "start") {
                if (!stk.empty()) {
                    result[stk.top()] += time - prevTime;
                }
                stk.push(id);
                prevTime = time;
            } else {
                result[stk.top()] += time - prevTime + 1;
                stk.pop();
                prevTime = time + 1;
            }
        }
        return result;
