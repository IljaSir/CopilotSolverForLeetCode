Synthesizing 10/10 solutions

=======

        sort(points.begin(), points.end(), [](const auto &p1, const auto &p2) {
            return p1[0] * p1[0] + p1[1] * p1[1] < p2[0] * p2[0] + p2[1] * p2[1];
        });
        return vector<vector<int>>(points.begin(), points.begin() + k);

=======

        vector<pair<int, int>> dists;
        for (int i = 0; i < points.size(); i++) {
            dists.push_back({points[i][0] * points[i][0] + points[i][1] * points[i][1], i});
        }
        nth_element(dists.begin(), dists.begin() + k, dists.end());
        vector<vector<int>> res;
        for (int i = 0; i < k; i++) {
            res.push_back(points[dists[i].second]);
        }
        return res;

=======

        vector<vector<int>> result;
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < points.size(); i++) {
            int x = points[i][0];
            int y = points[i][1];
            int dist = x * x + y * y;
            pq.push({dist, i});
            if (pq.size() > k) pq.pop();
        }
        while (!pq.empty()) {
            result.push_back(points[pq.top().second]);
            pq.pop();
        }
        return result;

=======

        vector<vector<int>> ans;
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < points.size(); i++) {
            int dist = points[i][0] * points[i][0] + points[i][1] * points[i][1];
            pq.push({dist, i});
            if (pq.size() > k) {
                pq.pop();
            }
        }
        while (!pq.empty()) {
            ans.push_back(points[pq.top().second]);
            pq.pop();
        }
        return ans;

=======

        vector<vector<int>> ans;
        vector<int> dist;
        for (int i = 0; i < points.size(); i++) {
            dist.push_back(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
        }
        int l = 0, r = points.size() - 1;
        while (l < r) {
            int i = l, j = r;
            int x = dist[i];
            while (i < j) {
                while (i < j && dist[j] >= x) j--;
                if (i < j) dist[i++] = dist[j];
                while (i < j && dist[i] < x) i++;
                if (i < j) dist[j--] = dist[i];
            }
            dist[i] = x;
            if (i == k) break;
            if (i < k) l = i + 1;
            else r = i - 1;
        }
        for (int i = 0; i < k; i++) {
            ans.push_back(points[i]);
        }
        return ans;

=======

        vector<vector<int>> res;
        priority_queue<pair<int, int>> pq;
        for(int i = 0; i < points.size(); i++) {
            pq.push({points[i][0] * points[i][0] + points[i][1] * points[i][1], i});
            if(pq.size() > k) {
                pq.pop();
            }
        }
        while(!pq.empty()) {
            res.push_back(points[pq.top().second]);
            pq.pop();
        }
        return res;

=======

        vector<vector<int>> ans;
        auto cmp = [](vector<int> &a, vector<int> &b) { return a[0] * a[0] + a[1] * a[1] > b[0] * b[0] + b[1] * b[1]; };
        priority_queue<vector<int>, vector<vector<int>>, decltype(cmp)> pq(cmp);
        for (auto &p : points) {
            pq.push(p);
            if (pq.size() > k) pq.pop();
        }
        while (!pq.empty()) {
            ans.push_back(pq.top());
            pq.pop();
        }
        return ans;

=======

        map<int, vector<int>> m;
        for(int i = 0; i < points.size(); i++){
            int x = points[i][0];
            int y = points[i][1];
            int dist = x*x + y*y;
            m[dist].push_back(i);
        }
        vector<vector<int>> ans;
        for(auto it = m.begin(); it != m.end(); it++){
            for(auto i: it->second){
                ans.push_back(points[i]);
                k--;
                if(k == 0) break;
            }
            if(k == 0) break;
        }
        return ans;

=======

        vector<vector<int>> result;
        priority_queue<pair<int, vector<int>>> maxHeap;
        for (auto & point: points) {
            int distance = point[0] * point[0] + point[1] * point[1];
            maxHeap.push({distance, point});
            if (maxHeap.size() > k) {
                maxHeap.pop();
            }
        }
        while (!maxHeap.empty()) {
            result.push_back(maxHeap.top().second);
            maxHeap.pop();
        }
        return result;

=======

        // 1. sort by distance
        // 2. return k elements
        // 3. O(nlogn)
        // 4. O(n)
        vector<vector<int>> result;
        if (k == 0) return result;
        if (k >= points.size()) return points;
        // sort
        sort(points.begin(), points.end(), [](vector<int>& a, vector<int>& b) {
            return a[0]*a[0] + a[1]*a[1] < b[0]*b[0] + b[1]*b[1];
        });
        // return
        for (int i = 0; i < k; ++i) {
            result.push_back(points[i]);
        }
        return result;
