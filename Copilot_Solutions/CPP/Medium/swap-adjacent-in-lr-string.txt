Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = 0;
        while (i < start.size() && j < end.size()) {
            while (i < start.size() && start[i] == 'X') i++;
            while (j < end.size() && end[j] == 'X') j++;
            if (i == start.size() && j == end.size()) return true;
            if (i == start.size() || j == end.size()) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j++;
        }
        return true;

=======

        int i = 0, j = 0;
        while (i < start.size() && j < end.size()) {
            while (i < start.size() && start[i] == 'X') i++;
            while (j < end.size() && end[j] == 'X') j++;
            if (i == start.size() || j == end.size()) return i == j;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == 'X') i++;
            while (j < n && end[j] == 'X') j++;
            if (i == n || j == n) {
                return i == j;
            }
            if (start[i] != end[j]) {
                return false;
            }
            if (start[i] == 'L' && i < j) {
                return false;
            }
            if (start[i] == 'R' && i > j) {
                return false;
            }
            i++;
            j++;
        }
        return true;

=======

        int i = 0, j = 0;
        while (i < start.size() && j < end.size()) {
            while (i < start.size() && start[i] == 'X') i++;
            while (j < end.size() && end[j] == 'X') j++;
            if (i == start.size() && j == end.size()) return true;
            if (i == start.size() || j == end.size()) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j++;
        }
        return true;

=======

        int i = 0, j = 0;
        while (i < start.size() && j < end.size()) {
            while (i < start.size() && start[i] == 'X') i++;
            while (j < end.size() && end[j] == 'X') j++;
            if (i == start.size() || j == end.size()) return i == j;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j+i; ++j;
        }
        return true;

=======

        int i = 0, j = 0;
        int n = start.size();
        while (i < n && j < n) {
            while (i < n && start[i] == 'X') i++;
            while (j < n && end[j] == 'X') j++;
            if (i == n && j == n) return true;
            if (i == n || j == n) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && + < j) return false;
            if (start[i] == 'R' && i > j) return false;
           i;
            ++
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == 'X') i++;
            while (j < n && end[j] == 'X') j++;
            if (i == n || j == n) return i == j;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j++;
        }
        return true;

=======

        int n = start.size();
        int i = 0, j = 0;
        while (i < n || j < n) {
            while (i < n && start[i] == 'X') ++i;
            while (j < n && end[j] == 'X') ++j;
            if (i == n || j == n) return i == j;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            ++i; ++j;
        } j) return false;
            i++; j++;
        }
        returntrue;

=======

        // R can only move to right
        // L can only move to left
        // X can move to any direction
        int i=0, j=0;
        int n = start.size();
        while(i<n && j<n) {
            while(i<n && start[i] == 'X') i++;
            while(j<n && end[j] == 'X') j++;
            if(i==n && j==n) return true;
            if(i==n || j==n) return false;
            if(start[i] != end[j]) return false;
            if(start[i] == 'R' && i>j) return false;
            if(start[i] == 'L' && i<
        return true;

=======

        int i = 0, j = 0;
        int n = start.size();
        while (i < n && j < n) {
            while (i < n && start[i] == 'X') i++;
            while (j < n && end[j] == 'X') j++;
            if (i == n && j == n) return true;
            if (i == n || j == n) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++;
            j++;
        }
        return true;

=======

        int n = start.length();
        if (n != end.length()) return false;
        int i = 0, j = 0;
        while (i < n && j < n) {
            while (i < n && start[i] == 'X') ++i;
            while (j < n && end[j] == 'X') ++j;
            if (i == n && j == n) return true;
            if (i == n || j == n) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            ++i;
            ++j;
        }
        return true;

=======

        int i = 0; int j = 0;
        while (i < start.size() && j < end.size()) {
            while (i < start.size() && start[i] == 'X') i++;
            while (j < end.size() && end[j] == 'X') j++;
            if (i == start.size() && j == end.size()) return true;
            if (i == start.size() || j == end.size()) return false;
            if (start[i] != end[j]) return false;
            if (start[i] == 'L' && i < j) return false;
            if (start[i] == 'R' && i > j) return false;
            i++; j++;
        }
        return true;
