Synthesizing 9/10 solutions

=======

        int n = s.size();
        int low = 0, high = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                low++;
                high++;
            } else if (s[i] == ')') {
                low--;
                high--;
            } else {
                low--;
                high++;
            }
            low = max(low, 0);
            if (high < 0) return false;
        }
        return low == 0;

=======

        int left = 0, right = 0;
        for (char c: s) {
            left += c == '(' ? 1 : -1;
            right += c != ')' ? 1 : -1;
            if (right < 0) break;
            left = max(left, 0);
        }
        return left == 0;

=======

        int n = s.length();
        int low = 0, high = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                low++;
                high++;
            } else if (s[i] == ')') {
                if (low > 0) {
                    low--;
                }
                high--;
            } else {
                if (low > 0) {
                    low--;
                }
                high++;
            }
            if (high < 0) {
                return false;
            }
        }
        return low == 0;

=======

        int n = s.size();
        int l = 0, r = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(' || s[i] == '*') l++;
            else l--;
            if (l < 0) return false;
        }
        for (int i = n-1; i >= 0; i--) {
            if (s[i] == ')' || s[i] == '*') r++;
            else r--;
            if (r < 0) return false;
        }
        return true;

=======

        int n = s.size();
        int minBalance = 0, maxBalance = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                minBalance++;
                maxBalance++;
            } else if (s[i] == ')') {
                if (minBalance > 0) {
                    minBalance--;
                }
                maxBalance--;
            } else {
                if (minBalance > 0) {
                    minBalance--;
                }
                maxBalance++;
            }
            if (maxBalance < 0) {
                return false;
            }
        }
        return minBalance == 0;

=======

        int max = 0, min = 0;
        for (char c : s) {
            if (c == '(') {
                max++;
                min++;
            }
            else if (c == ')') {
                max--;
                min--;
            }
            else if (c == '*') {
                max++;
                min--;
            }
            if (max < 0) {
                return false;
            }
            min = min < 0 ? 0 : min;
        }
        return min == 0;

=======

        int n = s.size();
        if (n == 0) {
            return true;
        }
        int lo = 0, hi = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                ++lo;
                ++hi;
            } else if (s[i] == ')') {
                --lo;
                --hi;
            } else {
                --lo;
                ++hi;
            }
            if (hi < 0) {
                return false;
            }
            lo = max(0, lo);
        }
        return lo == 0;

=======

        int n = s.size();
        if (n == 0) return true;
        if (s[0] == ')') return false;
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s[i-1] == '*') {
                for (int j = 0; j <= i; j++) {
                    if (dp[j] > 0) {
                        if (j > 0) dp[j-1] = max(dp[j-1], dp[j] + 1);
                        if (j < i) dp[j+1] = max(dp[j+1], dp[j] + 1);
                        dp[j] = max(dp[j], dp[j] + 1);
                    }
                }
            } else if (s[i-1] == '(') {
                for (int j = i; j > 0; j--) {
                    dp[j] = dp[j-1];
                }
                dp[0] = 0;
            } else {
                for (int j = 0; j < i; j++) {
                    dp[j] = dp[j+1];
                }
                dp[i] = 0;
            }
        }
        return dp[0] > 0;

=======

        int i = 0;
        int open = 0;
        int close = 0;
        int star = 0;
        int n = s.length();
        while(i < n) {
            if(s[i] == '(') {
                open++;
            } else if(s[i] == ')') {
                close++;
            } else {
                star++;
            }
            i++;
        }
        if(close > open + star) {
            return false;
        }
        i = 0;
        open = 0;
        close = 0;
        star = 0;
        while(i < n) {
            if(s[i] == '(') {
                open++;
            } else if(s[i] == ')') {
                close++;
            } else {
                star++;
            }
            if(close > open + star) {
                return false;
            }
            i++;
        }
        return true;
