Synthesizing 10/10 solutions

=======

        long long left = 0, right = 100000;
        while (left < right) {
            long long mid = left + (right - left) / 2;
            if (check(mid, neededApples)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left * 4;
    }
    bool check(long long mid, long long neededApples) {
        long long sum = 0;
        for (long long i = 0; i <= mid; ++i) {
            sum += (mid - i + 1) * (mid - i + 1) * 2 + (mid - i) * (mid - i) * 2;
        }
        return sum >= neededApples;

=======

        long long n = 1;
        while (n * n * (n + 1) * (n + 1) < neededApples) {
            n++;
        }
        return n * 8;

=======

        long long n = 1;
        while (n * (n + 1) * (2 * n + 1) < 12 * neededApples) {
            ++n;
        }
        return 8 * n;

=======

        long long sum = 0;
        long long i = 1;
        while (sum < neededApples) {
            sum += 16 * i * i;
            i++;
        }
        return 8 * (i - 1);

=======

        long long n = 1;
        while (n * (n + 1) * (2 * n + 1) * (n + 2) / 24 < neededApples) {
            n++;
        }
        return n * 8;

=======

        long long l = 0, r = 1e9, m;
        while (l < r) {
            m = l + (r - l) / 2;
            if (m * (m + 1) * (m + m + 1) / 6 >= neededApples) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return (l + l + l) * 2;

=======

        long long l = 0;
        long long r = 1000000000;
        while (l < r) {
            long long m = (l + r) / 2;
            if (m * m * 2 + m * 2 + 1 >= neededApples) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l * 8;

=======

        long long i = 1;
        while (true) {
            long long apples = (i * 2 + 1) * (i * 2 + 1) * (i + 1);
            if (apples >= neededApples) {
                return (i * 2 + 1) * 4;
            }
            i++;
        }

=======

        long long n = 1;
        while (true) {
            long long apples = 0;
            for (int i = 0; i < n; ++i) {
                apples += (n - i) * (n - i) * 4;
            }
            if (apples >= neededApples) {
                return n * 8;
            }
            n++;
        }
        return n * 8;

=======

        long long n = sqrt(neededApples / 3.0) + 1;
        long long res = 0;
        for (int i = 1; i <= n; ++i) {
            long long cur = 1LL * (4 * i - 3) * (4 * i - 3);
            res += cur;
        }
        return res * 2;
