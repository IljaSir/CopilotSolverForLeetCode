Synthesizing 10/10 solutions

=======

        vector<vector<int>> res(2, vector<int>(colsum.size(), 0));
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 2) {
                res[0][i] = 1;
                res[1][i] = 1;
                --upper;
                --lower;
            }
        }
        if (upper < 0 || lower < 0) return {};
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    --upper;
                } else {
                    res[1][i] = 1;
                    --lower;
                }
            }
        }
        if (upper != 0 || lower != 0) return {};
        return res;

=======

        vector<vector<int>> res(2, vector<int>(colsum.size(), 0));
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 2) {
                res[0][i] = 1;
                res[1][i] = 1;
                --upper;
                --lower;
            }
        }
        
        if (upper < 0 || lower < 0) {
            return {};
        }
        
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    --upper;
                } else if (lower > 0) {
                    res[1][i] = 1;
                    --lower;
                } else {
                    return {};
                }
            }
        }
        
        if (upper != 0 || lower != 0) {
            return {};
        }
        
        return res;

=======

        int n = colsum.size();
        vector<vector<int>> res(2, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 2) {
                res[0][i] = res[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) {
            return {};
        }
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    upper--;
                } else if (lower > 0) {
                    res[1][i] = 1;
                    lower--;
                } else {
                    return {};
                }
            }
        }
        return res;

=======

        int n = colsum.size();
        vector<vector<int>> res(2, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 2) {
                res[0][i] = res[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) {
            return {};
        }
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    upper--;
                } else if (lower > 0) {
                    res[1][i] = 1;
                    lower--;
                } else {
                    return {};
                }
            }
        }
        if (upper != 0 || lower != 0) {
            return {};
        }
        return res;

=======

        int n = colsum.size();
        vector<vector<int>> ans(2, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 2) {
                ans[0][i] = 1;
                ans[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) return {};
        for (int i = 0; i < n; ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    ans[0][i] = 1;
                    upper--;
                }
                else if (lower > 0) {
                    ans[1][i] = 1;
                    lower--;
                }
                else return {};
            }
        }
        return ans;

=======

        vector<vector<int>> ans(2, vector<int>(colsum.size(), 0));
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 2) {
                ans[0][i] = 1;
                ans[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) return {};
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    ans[0][i] = 1;
                    upper--;
                } else if (lower > 0) {
                    ans[1][i] = 1;
                    lower--;
                } else {
                    return {};
                }
            }
        }
        if (upper != 0 || lower != 0) return {};
        return ans;

=======

        int sum = accumulate(colsum.begin(), colsum.end(), 0);
        if (sum != upper + lower) return {};
        vector<vector<int>> res(2, vector<int>(colsum.size(), 0));
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 2) {
                res[0][i] = 1;
                res[1][i] = 1;
                --upper;
                --lower;
            }
        }
        if (upper < 0 || lower < 0) return {};
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    --upper;
                } else {
                    res[1][i] = 1;
                    --lower;
                }
            }
        }
        return res;

=======

        vector<vector<int>> res(2, vector<int>(colsum.size(), 0));
        int sum = 0;
        for (int i = 0; i < colsum.size(); ++i) {
            sum += colsum[i];
            if (colsum[i] == 2) {
                res[0][i] = 1;
                res[1][i] = 1;
                --upper;
                --lower;
            }
        }
        if (sum != upper + lower) {
            return {};
        }
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    res[0][i] = 1;
                    --upper;
                } else if (lower > 0) {
                    res[1][i] = 1;
                    --lower;
                } else {
                    return {};
                }
            }
        }
        return res;

=======

        vector<vector<int>> ans(2, vector<int>(colsum.size(), 0));
        int sum = 0;
        for (auto i : colsum) sum += i;
        if (sum != upper + lower) return {};
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 2) {
                ans[0][i] = ans[1][i] = 1;
                upper--;
                lower--;
            }
        }
        if (upper < 0 || lower < 0) return {};
        for (int i = 0; i < colsum.size(); ++i) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    ans[0][i] = 1;
                    upper--;
                } else if (lower > 0) {
                    ans[1][i] = 1;
                    lower--;
                } else {
                    return {};
                }
            }
        }
        return ans;

=======

        vector<vector<int>> ret;
        int n = colsum.size();
        int sum = 0;
        for (auto i : colsum) sum += i;
        if (sum != upper + lower) return ret;
        vector<int> upperRow(n, 0);
        vector<int> lowerRow(n, 0);
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                upperRow[i] = 1;
                lowerRow[i] = 1;
                upper--;
                lower--;
            }
        }
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    upperRow[i] = 1;
                    upper--;
                } else {
                    lowerRow[i] = 1;
                    lower--;
                }
            }
        }
        ret.push_back(upperRow);
        ret.push_back(lowerRow);
        return ret;
