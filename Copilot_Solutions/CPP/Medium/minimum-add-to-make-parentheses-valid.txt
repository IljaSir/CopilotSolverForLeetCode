Synthesizing 10/10 solutions

=======

        int left = 0;
        int right = 0;
        for (auto c : s) {
            if (c == '(') {
                left++;
            } else {
                if (left > 0) {
                    left--;
                } else {
                    right++;
                }
            }
        }
        return left + right;

=======

        int l = 0;
        int r = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                l++;
            } else if (l > 0) {
                l--;
            } else {
                r++;
            }
        }
        return l + r;

=======

        int n = s.size();
        int cnt = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                cnt++;
            } else {
                if (cnt == 0) {
                    ans++;
                } else {
                    cnt--;
                }
            }
        }
        return ans + cnt;

=======

        int left = 0, right = 0;
        for (auto c : s) {
            if (c == '(') {
                right++;
            } else {
                if (right > 0) {
                    right--;
                } else {
                    left++;
                }
            }
        }
        return left + right;

=======

        int n = s.length();
        int cnt = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                cnt++;
            } else {
                if (cnt > 0) {
                    cnt--;
                } else {
                    ans++;
                }
            }
        }
        return ans + cnt;

=======

        int n = s.size();
        int cnt = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                cnt++;
            } else {
                if (cnt > 0) {
                    cnt--;
                } else {
                    ans++;
                }
            }
        }
        return ans + cnt;

=======

        int open = 0, close = 0;
        for (char c : s) {
            if (c == '(') ++open;
            else if (c == ')') {
                if (open > 0) --open;
                else ++close;
            }
        }
        return open + close;

=======

        int n = s.size();
        int left = 0, right = 0;
        for(int i = 0; i < n; i++){
            if(s[i] == '(') left++;
            else{
                if(left > 0) left--;
                else right++;
            }
        }
        return left + right;

=======

        int count = 0;
        int left = 0;
        for (auto ch : s) {
            if (ch == '(') {
                left++;
            } else {
                if (left > 0) {
                    left--;
                } else {
                    count++;
                }
            }
        }
        return count + left;

=======

        int l = 0, r = 0;
        for(auto c: s){
            if(c == '(') l++;
            else{
                if(l > 0) l--;
                else r++;
            }
        }
        return l + r;
