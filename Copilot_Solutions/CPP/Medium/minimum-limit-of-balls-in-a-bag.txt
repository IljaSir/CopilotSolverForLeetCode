Synthesizing 10/10 solutions

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int m = (l + r) / 2;
            int cnt = 0;
            for (int x : nums) {
                cnt += (x - 1) / m;
            }
            if (cnt <= maxOperations) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;

=======

        int lo = 1, hi = *max_element(nums.begin(), nums.end());
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            int operations = 0;
            for (int num : nums) {
                operations += (num - 1) / mid;
            }
            if (operations <= maxOperations) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        return lo;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) >> 1;
            int cnt = 0;
            for (int num : nums) {
                cnt += (num - 1) / mid;
            }
            if (cnt <= maxOperations) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int left = 1, right = 1e9;
        while (left < right) {
            int mid = (left + right) / 2;
            int ops = 0;
            for (int n : nums) {
                ops += (n - 1) / mid;
            }
            if (ops <= maxOperations) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int mid = (l + r) / 2;
            int ops = 0;
            for (int n : nums) ops += (n - 1) / mid;
            if (ops <= maxOperations) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int m = (l + r) / 2;
            if (check(nums, m, maxOperations)) r = m;
            else l = m + 1;
        }
        return l;
    }
    bool check(vector<int>& nums, int m, int maxOperations) {
        for (int x : nums) {
            maxOperations -= (x - 1) / m;
            if (maxOperations < 0) return false;
        }
        return true;

=======

        int l = 1, r = 1e9, mid;
        while (l < r) {
            mid = l + (r - l) / 2;
            int cnt = 0;
            for (int x : nums)
                cnt += (x - 1) / mid;
            if (cnt > maxOperations)
                l = mid + 1;
            else
                r = mid;
        }
        return l;

=======

        int l = 1, r = 1e9;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (canDivide(nums, maxOperations, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
    
    bool canDivide(vector<int>& nums, int maxOperations, int limit) {
        int ops = 0;
        for (int num : nums) {
            ops += (num - 1) / limit;
        }
        return ops <= maxOperations;

=======

        int n = nums.size();
        int left = 1, right = 1e9;
        while(left < right) {
            int mid = (left + right) / 2;
            int cnt = 0;
            for(int i = 0; i < n; ++i) {
                cnt += (nums[i] - 1) / mid;
            }
            if(cnt > maxOperations) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
        }
        return left;

=======

        int l = 1;
        int r = 1000000000;
        while(l < r) {
            int mid = (l + r) / 2;
            int cnt = 0;
            for(auto &i : nums) {
                cnt += (i - 1) / mid;
            }
            if(cnt <= maxOperations) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
