Synthesizing 10/10 solutions

=======

        int n = s.size();
        int ans = 1;
        int cnt = 1;
        for (int i = 1; i < n; ++i) {
            if (s[i] - s[i - 1] == 1) {
                cnt++;
                ans = max(ans, cnt);
            } else {
                cnt = 1;
            }
        }
        return ans;

=======

        int maxLen = 0, curLen = 0;
        for (int i = 0; i < s.size(); ++i) {
            if (i == 0 || s[i] > s[i - 1]) {
                ++curLen;
            } else {
                maxLen = max(maxLen, curLen);
                curLen = 1;
            }
        }
        return max(maxLen, curLen);

=======

        int ans = 0, cnt = 0;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] > s[i - 1]) {
                ++cnt;
            } else {
                cnt = 0;
            }
            ans = max(ans, cnt);
        }
        return ans + 1;

=======

        int ans = 0;
        int cnt = 0;
        for (int i = 1; i < s.size(); ++i) {
            if (s[i] > s[i-1]) {
                ++cnt;
            } else {
                ans = max(ans, cnt+1);
                cnt = 0;
            }
        }
        return max(ans, cnt+1);

=======

        int n = s.length();
        int ans = 0, cnt = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0 || s[i] > s[i - 1]) {
                cnt++;
            } else {
                cnt = 1;
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int n = s.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = i; j < n; j++) {
                if (j == i || s[j] > s[j - 1]) {
                    cnt++;
                } else {
                    break;
                }
            }
            res = max(res, cnt);
        }
        return res;

=======

        int n = s.size();
        int maxLen = 0;
        int len = 1;
        for (int i = 1; i < n; ++i) {
            if (s[i] == s[i - 1] + 1) {
                ++len;
            } else {
                maxLen = max(maxLen, len);
                len = 1;
            }
        }
        maxLen = max(maxLen, len);
        return maxLen;

=======

        int result = 0;
        int i = 0;
        int j = 0;
        while (i < s.size()) {
            j = i + 1;
            while (j < s.size() && s[j] > s[j - 1]) {
                ++j;
            }
            result = max(result, j - i);
            i = j;
        }
        return result;

=======

        int max = 0;
        int count = 1;
        for(int i = 0; i < s.length() - 1; i++){
            if(s[i] < s[i + 1]){
                count++;
            } else {
                if(count > max) max = count;
                count = 1;
            }
        }
        if(count > max) max = count;
        return max;

=======

        int maxLen = 0;
        int len = 0;
        char prev = 0;
        for (char c : s) {
            if (c > prev) {
                len++;
                maxLen = max(maxLen, len);
            } else {
                len = 1;
            }
            prev = c;
        }
        return maxLen;
