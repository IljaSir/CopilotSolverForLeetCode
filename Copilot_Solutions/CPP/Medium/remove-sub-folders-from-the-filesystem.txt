Synthesizing 10/10 solutions

=======

        sort(folder.begin(), folder.end());
        vector<string> ans;
        for (int i = 0; i < folder.size(); ++i) {
            if (i == 0 || folder[i].find(folder[i - 1] + "/") != 0) {
                ans.push_back(folder[i]);
            }
        }
        return ans;

=======

        sort(folder.begin(), folder.end());
        vector<string> res;
        for (int i = 0; i < folder.size(); i++) {
            if (i == 0 || folder[i].find(folder[i - 1] + "/") != 0) {
                res.push_back(folder[i]);
            }
        }
        return res;

=======

        vector<string> ans;
        sort(folder.begin(), folder.end());
        for (int i = 0; i < folder.size(); i++) {
            if (i == 0 || folder[i].find(folder[i - 1] + "/") != 0) {
                ans.push_back(folder[i]);
            }
        }
        return ans;

=======

        sort(folder.begin(), folder.end());
        vector<string> res;
        res.push_back(folder[0]);
        for(int i = 1; i < folder.size(); i++){
            if(folder[i].substr(0, res.back().size()) != res.back() || folder[i][res.back().size()] != '/')
                res.push_back(folder[i]);
        }
        return res;

=======

        sort(folder.begin(), folder.end());
        vector<string> ans;
        for (int i = 0; i < folder.size(); i++) {
            if (i == 0 || folder[i].find(folder[i-1] + "/") != 0) {
                ans.push_back(folder[i]);
            }
        }
        return ans;

=======

        sort(folder.begin(), folder.end());
        vector<string> result;
        for (int i = 0; i < folder.size(); ++i) {
            if (i == 0 || folder[i].substr(0, folder[i - 1].size()) != folder[i - 1] || folder[i - 1][folder[i - 1].size() - 1] != '/') {
                result.push_back(folder[i]);
            }
        }
        return result;

=======

        int n = folder.size();
        if (n == 0) return {};
        if (n == 1) return folder;
        sort(folder.begin(), folder.end());
        vector<string> res;
        res.push_back(folder[0]);
        for (int i = 1; i < n; ++i) {
            string s = folder[i];
            int j = 0;
            while (j < res.size()) {
                string t = res[j];
                if (s.size() > t.size() && s.substr(0, t.size()) == t && s[t.size()] == '/') {
                    break;
                }
                ++j;
            }
            if (j == res.size()) {
                res.push_back(s);
            }
        }
        return res;

=======

        vector<string> res;
        sort(folder.begin(), folder.end());
        string prev = " ";
        for (auto f : folder) {
            if (f.find(prev) != 0) {
                res.push_back(f);
                prev = f + "/";
            }
        }
        return res;

=======

        unordered_set<string> st;
        for (auto& f: folder) {
            st.insert(f);
        }
        for (auto& f: folder) {
            for (int i = 1; i < f.size(); ++i) {
                if (f[i] == '/') {
                    if (st.find(f.substr(0, i)) != st.end()) {
                        st.erase(f);
                        break;
                    }
                }
            }
        }
        return vector<string>(st.begin(), st.end());

=======

        sort(folder.begin(), folder.end());
        vector<string> r;
        for(auto f : folder)
            if(r.empty() || r.back().size() > f.size() || r.back() != f.substr(0, r.back().size()) || f[r.back().size()] != '/')
                r.push_back(f);
        return r;
