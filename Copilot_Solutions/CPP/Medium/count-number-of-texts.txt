Synthesizing 7/10 solutions

=======

        int MOD = 1e9 + 7;
        int n = pressedKeys.size();
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            int c = pressedKeys[i] - '0';
            if (c == 1) {
                dp[i + 1] = 0;
            } else if (c == 7 || c == 9) {
                dp[i + 1] = dp[i] + dp[i - 1];
            } else {
                dp[i + 1] = dp[i];
            }
            dp[i + 1] %= MOD;
        }
        return dp[n];

=======

        int n = pressedKeys.size();
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; ++i) {
            if (pressedKeys[i - 1] == pressedKeys[i - 2]) {
                dp[i] = dp[i - 1] * 2 % 1000000007;
            } else {
                dp[i] = dp[i - 1];
            }
        }
        return dp[n];

=======

        int n = pressedKeys.size();
        int MOD = 1e9 + 7;
        vector<int> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i - 1];
            if (i > 1 && pressedKeys[i - 1] == pressedKeys[i - 2]) {
                dp[i] = (dp[i] + dp[i - 2]) % MOD;
            }
        }
        return dp[n];

=======

        const int MOD = 1e9 + 7;
        int n = pressedKeys.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            if (pressedKeys[i] == pressedKeys[i - 1]) {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = (dp[i - 1] * 2) % MOD;
            }
        }
        return dp[n - 1];

=======

        int n = pressedKeys.size();
        vector<int> dp(n+1);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1];
            if (i >= 2 && pressedKeys[i-2] == pressedKeys[i-1]) {
                dp[i] = (dp[i] + dp[i-2]) % (int)(1e9+7);
            }
        }
        return dp[n];

=======

        int n = pressedKeys.length();
        if (n == 0) return 0;
        vector<int> dp(n, 0);
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (pressedKeys[i] == pressedKeys[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = dp[i - 1];
            }
        }
        int ans = 1;
        for (int i = 0; i < n; i++) {
            int cur = pressedKeys[i] - '2';
            int cnt = 0;
            while (i < n && pressedKeys[i] == pressedKeys[i - cnt]) {
                cnt++;
                i++;
            }
            i--;
            ans = ans * (cnt + 1) % 1000000007;
        }
        return ans;

=======

        const int M = 1e9 + 7;
        vector<int> dp(pressedKeys.size(), 1);
        for (int i = 1; i < pressedKeys.size(); ++i) {
            if (pressedKeys[i] == pressedKeys[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            }
        }
        long long res = 1;
        int i = 0;
        while (i < pressedKeys.size()) {
            int j = i;
            while (j < pressedKeys.size() && pressedKeys[j] == pressedKeys[i]) {
                ++j;
            }
            int cnt = j - i;
            if (cnt > 1) {
                res = res * (cnt + 1) % M;
            }
            i = j;
        }
        return res;
