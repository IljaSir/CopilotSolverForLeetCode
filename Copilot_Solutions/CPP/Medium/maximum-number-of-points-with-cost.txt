Synthesizing 10/10 solutions

=======

        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n, 0);
        for (int i = 0; i < m; i++) {
            vector<long long> dp2(n, 0);
            vector<long long> dp3(n, 0);
            for (int j = 0; j < n; j++) {
                dp2[j] = dp[j] - j;
            }
            for (int j = n - 1; j >= 0; j--) {
                dp3[j] = dp[j] + j;
            }
            for (int j = 0; j < n; j++) {
                dp[j] = max(dp2[j], dp3[j]) + points[i][j];
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n, 0);
        for (int i = 0; i < m; i++) {
            vector<long long> maxLeft(n, 0);
            vector<long long> maxRight(n, 0);
            maxLeft[0] = dp[0];
            for (int j = 1; j < n; j++) {
                maxLeft[j] = max(maxLeft[j - 1] - 1, dp[j]);
            }
            maxRight[n - 1] = dp[n - 1];
            for (int j = n - 2; j >= 0; j--) {
                maxRight[j] = max(maxRight[j + 1] - 1, dp[j]);
            }
            for (int j = 0; j < n; j++) {
                dp[j] = points[i][j] + max(maxLeft[j], maxRight[j]);
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = points.size();
        int m = points[0].size();
        vector<long long> dp(m, 0);
        for (int i = 0; i < n; i++) {
            vector<long long> ndp(m, 0);
            long long maxv = dp[0];
            for (int j = 1; j < m; j++) {
                maxv = max(maxv, dp[j] + j);
            }
            for (int j = 0; j < m; j++) {
                ndp[j] = max(maxv - j, dp[j] - j) + points[i][j];
            }
            maxv = dp[m - 1];
            for (int j = m - 2; j >= 0; j--) {
                maxv = max(maxv, dp[j] - j);
            }
            for (int j = m - 1; j >= 0; j--) {
                ndp[j] = max(maxv + j, ndp[j]);
            }
            swap(dp, ndp);
        }
        long long ans = 0;
        for (int i = 0; i < m; i++) {
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n, 0);
        vector<long long> tmp(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                tmp[j] = dp[j] + points[i][j];
            }
            long long left = 0;
            long long right = 0;
            for (int j = 0; j < n; j++) {
                left = max(left, dp[j] - j);
                tmp[j] = max(tmp[j], left + j);
            }
            for (int j = n - 1; j >= 0; j--) {
                right = max(right, dp[j] + j);
                tmp[j] = max(tmp[j], right - j);
            }
            dp = tmp;
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = points.size();
        int m = points[0].size();
        vector<vector<long long>> dp(n, vector<long long>(m, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (i == 0) {
                    dp[i][j] = points[i][j];
                    continue;
                }
                long long cur = dp[i - 1][j] + points[i][j];
                for (int k = 0; k < m; ++k) {
                    if (k == j) continue;
                    cur = max(cur, dp[i - 1][k] - abs(k - j) + points[i][j]);
                }
                dp[i][j] = cur;
            }
        }
        long long ans = 0;
        for (int i = 0; i < m; ++i) {
            ans = max(ans, dp[n - 1][i]);
        }
        return ans;

=======

        long long ans = 0;
        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n, 0);
        for (int i = 0; i < m; ++i) {
            vector<long long> ndp(n, 0);
            for (int j = 0; j < n; ++j) {
                ndp[j] = max(ndp[j], dp[j] + points[i][j]);
                for (int k = j + 1; k < n; ++k) {
                    ndp[k] = max(ndp[k], dp[j] + points[i][k] - (k - j));
                }
                for (int k = j - 1; k >= 0; --k) {
                    ndp[k] = max(ndp[k], dp[j] + points[i][k] - (j - k));
                }
            }
            dp = ndp;
        }
        for (int i = 0; i < n; ++i) {
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n, 0);
        for (int i = 0; i < m; i++) {
            long long maxVal = 0;
            vector<long long> next(n, 0);
            for (int j = 0; j < n; j++) {
                maxVal = max(maxVal, dp[j] + j);
                next[j] = max(maxVal - j, next[j]);
            }
            maxVal = 0;
            for (int j = n - 1; j >= 0; j--) {
                maxVal = max(maxVal, dp[j] - j);
                next[j] = max(maxVal + j, next[j]);
            }
            for (int j = 0; j < n; j++) {
                next[j] += points[i][j];
            }
            dp = next;
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int m=points.size(), n=points[0].size();
        vector<long long> dp(n, 0);
        for (int i=0; i<m; ++i) {
            vector<long long> ndp(n, 0);
            vector<long long> pre(n, 0), suf(n, 0);
            pre[0]=dp[0];
            for (int j=1; j<n; ++j) {
                pre[j]=max(pre[j-1], dp[j]+j);
            }
            suf[n-1]=dp[n-1]-n+1;
            for (int j=n-2; j>=0; --j) {
                suf[j]=max(suf[j+1], dp[j]-j);
            }
            for (int j=0; j<n; ++j) {
                ndp[j]=points[i][j]+max(pre[j]-j, suf[j]+j);
            }
            dp=ndp;
        }
        return *max_element(dp.begin(), dp.end());

=======

        int m = points.size();
        int n = points[0].size();
        vector<long long> dp(n);
        long long maxVal = 0;
        for (int i = 0; i < m; i++) {
            vector<long long> next(n);
            long long best = 0;
            for (int j = 0; j < n; j++) {
                best = max(best, dp[j] + j);
                next[j] = best - j + points[i][j];
            }
            best = 0;
            for (int j = n - 1; j >= 0; j--) {
                best = max(best, dp[j] - j);
                next[j] = max(next[j], best + j + points[i][j]);
            }
            dp = next;
        }
        for (int i = 0; i < n; i++) {
            maxVal = max(maxVal, dp[i]);
        }
        return maxVal;

=======

        int m = points.size();
        int n = points[0].size();
        vector<vector<long long>> dp(m, vector<long long>(n, 0));
        vector<long long> mins(n, 0), maxs(n, 0);
        for (int i = 0; i < n; ++i) {
            dp[0][i] = points[0][i];
            mins[i] = i;
            maxs[i] = i;
        }
        for (int i = 1; i < m; ++i) {
            vector<long long> nmins(n, 0), nmaxs(n, 0);
            for (int j = 0; j < n; ++j) {
                dp[i][j] = points[i][j] + max(dp[i - 1][mins[j]], dp[i - 1][maxs[j]]);
                nmins[j] = mins[j];
                nmaxs[j] = maxs[j];
            }
            for (int j = 1; j < n; ++j) {
                if (dp[i][j] > dp[i][nmins[j]]) {
                    nmins[j] = j;
                }
                if (dp[i][j] > dp[i][nmaxs[j]]) {
                    nmaxs[j] = j;
                }
            }
            for (int j = n - 2; j >= 0; --j) {
                if (dp[i][j] > dp[i][nmins[j]]) {
                    nmins[j] = j;
                }
                if (dp[i][j] > dp[i][nmaxs[j]]) {
                    nmaxs[j] = j;
                }
            }
            mins = nmins;
            maxs = nmaxs;
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, dp[m - 1][i]);
        }
        return ans;
