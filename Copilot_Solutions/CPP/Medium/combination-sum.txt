Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        vector<int> path;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0, path, res);
        return res;
    }
    void dfs(vector<int>& candidates, int target, int start, vector<int>& path, vector<vector<int>>& res) {
        if (target == 0) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            if (target - candidates[i] < 0) {
                break;
            }
            path.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i, path, res);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> tmp;
        dfs(candidates, target, res, tmp, 0);
        return res;
    }
    void dfs(vector<int>& candidates, int target, vector<vector<int>>& res, vector<int>& tmp, int index) {
        if (target == 0) {
            res.push_back(tmp);
            return;
        }
        for (int i = index; i < candidates.size(); i++) {
            if (candidates[i] > target) {
                continue;
            }
            tmp.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], res, tmp, i);
            tmp.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(candidates, target, 0, path, res);
        return res;
    }
    void dfs(vector<int>& candidates, int target, int index, vector<int>& path, vector<vector<int>>& res) {
        if (target == 0) {
            res.push_back(path);
            return;
        }
        for (int i = index; i < candidates.size(); i++) {
            if (candidates[i] > target) continue;
            path.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i, path, res);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> cur;
        sort(candidates.begin(), candidates.end());
        dfs(ans, cur, candidates, target, 0);
        return ans;
    }
    void dfs(vector<vector<int>>& ans, vector<int>& cur, vector<int>& candidates, int target, int start) {
        if (target == 0) {
            ans.push_back(cur);
            return;
        }
        for (int i = start; i < candidates.size() && candidates[i] <= target; i++) {
            cur.push_back(candidates[i]);
            dfs(ans, cur, candidates, target - candidates[i], i);
            cur.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> path;
        backtrack(candidates, target, res, path, 0);
        return res;
    }
    
    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& res, vector<int>& path, int start) {
        if (target < 0) return;
        if (target == 0) {
            res.push_back(path);
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            path.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], res, path, i);
            path.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> comb;
        combinationSum(candidates, target, 0, comb, res);
        return res;
    }
    void combinationSum(vector<int>& candidates, int target, int start, vector<int>& comb, vector<vector<int>>& res) {
        if (target < 0) return;
        if (target == 0) {
            res.push_back(comb);
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            comb.push_back(candidates[i]);
            combinationSum(candidates, target - candidates[i], i, comb, res);
            comb.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> cur;
        dfs(candidates, target, 0, cur, ans);
        return ans;
    }
    void dfs(vector<int>& candidates, int target, int start, vector<int>& cur, vector<vector<int>>& ans) {
        if (target == 0) {
            ans.push_back(cur);
            return;
        }
        for (int i = start; i < candidates.size(); i++) {
            if (candidates[i] > target) continue;
            cur.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i, cur, ans);
            cur.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        dfs(candidates, target, 0, temp, result);
        return result;
    }
    void dfs(vector<int>& candidates, int target, int index, vector<int>& temp, vector<vector<int>>& result) {
        if (target == 0) {
            result.push_back(temp);
            return;
        }
        if (target < 0) return;
        for (int i = index; i < candidates.size(); i++) {
            temp.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i, temp, result);
            temp.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> path;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, target, 0, ans, path);
        return ans;
    }
    
    void dfs(vector<int>& candidates, int target, int index, vector<vector<int>>& ans, vector<int>& path) {
        if (target == 0) {
            ans.push_back(path);
            return;
        }
        for (int i = index; i < candidates.size() && candidates[i] <= target; i++) {
            path.push_back(candidates[i]);
            dfs(candidates, target - candidates[i], i, ans, path);
            path.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        sort(candidates.begin(), candidates.end());
        helper(result, temp, candidates, 0, target);
        return result;
    }
    
    void helper(vector<vector<int>>& result, vector<int>& temp, vector<int>& candidates, int index, int target) {
        if (target == 0) {
            result.push_back(temp);
            return;
        }
        if (target < 0) return;
        for (int i = index; i < candidates.size(); i++) {
            temp.push_back(candidates[i]);
            helper(result, temp, candidates, i, target - candidates[i]);
            temp.pop_back();
        }
