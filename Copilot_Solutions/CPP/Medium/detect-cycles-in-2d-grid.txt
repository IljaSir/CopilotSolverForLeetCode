Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(i, j, grid, visited, i, j, grid[i][j])) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    bool dfs(int i, int j, vector<vector<char>>& grid, vector<vector<bool>>& visited, int pi, int pj, char c) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] != c) {
            return false;
        }
        if (visited[i][j]) {
            return true;
        }
        visited[i][j] = true;
        if (dfs(i - 1, j, grid, visited, i, j, c) || dfs(i + 1, j, grid, visited, i, j, c) || dfs(i, j - 1, grid, visited, i, j, c) || dfs(i, j + 1, grid, visited, i, j, c)) {
            return true;
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    if (dfs(grid, i, j, i, j, visited)) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (visited[i][j]) continue;
                if (dfs(grid, visited, i, j, -1, -1, grid[i][j])) return true;
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int pi, int pj, char c) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()) return false;
        if (grid[i][j] != c) return false;
        if (visited[i][j]) return true;
        visited[i][j] = true;
        vector<pair<int, int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (auto& dir : dirs) {
            int ni = i + dir.first;
            int nj = j + dir.second;
            if (ni == pi && nj == pj) continue;
            if (dfs(grid, visited, ni, nj, i, j, c)) return true;
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        vector<vector<int>> visited(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j] == 0) {
                    if (dfs(grid, i, j, i, j, visited, dirs)) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        for (int i=0; i<m; ++i) {
            for (int j=0; j<n; ++j) {
                if (visited[i][j] == 0) {
                    if (dfs(grid, i, j, visited, -1, -1)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>>& grid, int i, int j, vector<vector<int>>& visited, int pi, int pj) {
        visited[i][j] = 1;
        int m = grid.size();
        int n = grid[0].size();
        int dir[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int k=0; k<4; ++k) {
            int x = i + dir[k][0];
            int y = j + dir[k][1];
            if (x >= 0 && x < m && y >= 0 && y < n) {
                if (x == pi && y == pj) {
                    continue;
                }
                if (grid[x][y] == grid[i][j] && visited[x][y] == 1) {
                    return true;
                }
                if (grid[x][y] == grid[i][j] && visited[x][y] == 0) {
                    if (dfs(grid, x, y, visited, i, j)) {
                        return true;
                    }
                }
            }
        }
        return false;

=======

        const int M = grid.size();
        const int N = grid[0].size();
        vector<vector<bool>> visited(M, vector<bool>(N, false));
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                if (visited[i][j]) continue;
                visited[i][j] = true;
                if (dfs(grid, i, j, i, j, visited)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& grid, int x, int y, int prevX, int prevY, vector<vector<bool>>& visited) {
        const int M = grid.size();
        const int N = grid[0].size();
        const int dx[4] = {0, 0, -1, 1};
        const int dy[4] = {1, -1, 0, 0};
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx < 0 || nx >= M || ny < 0 || ny >= N) continue;
            if (nx == prevX && ny == prevY) continue;
            if (grid[nx][ny] != grid[x][y]) continue;
            if (visited[nx][ny]) return true;
            visited[nx][ny] = true;
            if (dfs(grid, nx, ny, x, y, visited)) return true;
        }
        return false;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n));
        vector<vector<int>> dirs{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (!visited[i][j]) {
                    visited[i][j] = true;
                    char c = grid[i][j];
                    queue<pair<int, int>> q;
                    q.push({i, j});
                    while (!q.empty()) {
                        auto [r, c] = q.front(); q.pop();
                        for (auto& dir : dirs) {
                            int x = r + dir[0], y = c + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == c && visited[x][y]) return true;
                            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == c && !visited[x][y]) {
                                visited[x][y] = true;
                                q.push({x, y});
                            }
                        }
                    }
                }
            }
        }
        return false;

=======

        if(grid.size() == 0) return false;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!visited[i][j]) {
                    if(dfs(grid, visited, i, j, -1, -1)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int pi, int pj) {
        visited[i][j] = true;
        int m = grid.size();
        int n = grid[0].size();
        if(i > 0 && !visited[i-1][j] && grid[i-1][j] == grid[i][j]) {
            if(dfs(grid, visited, i-1, j, i, j)) {
                return true;
            }
        }
        if(i < m-1 && !visited[i+1][j] && grid[i+1][j] == grid[i][j]) {
            if(dfs(grid, visited, i+1, j, i, j)) {
                return true;
            }
        }
        if(j > 0 && !visited[i][j-1] && grid[i][j-1] == grid[i][j]) {
            if(dfs(grid, visited, i, j-1, i, j)) {
                return true;
            }
        }
        if(j < n-1 && !visited[i][j+1] && grid[i][j+1] == grid[i][j]) {
            if(dfs(grid, visited, i, j+1, i, j)) {
                return true;
            }
        }
        if(pi == i && pj == j) {
            return true;
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        vector<vector<int>> directions = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(visited[i][j]) continue;
                queue<pair<int,int>> q;
                q.push({i, j});
                visited[i][j] = true;
                while(!q.empty()){
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    for(auto d : directions){
                        int nx = x + d[0];
                        int ny = y + d[1];
                        if(nx<0 || nx>=m || ny<0 || ny>=n || grid[nx][ny]!=grid[i][j]) continue;
                        if(visited[nx][ny]) return true;
                        visited[nx][ny] = true;
                        q.push({nx, ny});
                    }
                }
            }
        }
        return false;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<vector<int>> d = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (visited[i][j]) continue;
                queue<pair<int, int>> q;
                q.push({i, j});
                visited[i][j] = 1;
                while (!q.empty()) {
                    auto [x, y] = q.front(); q.pop();
                    for (auto& dir : d) {
                        int nx = x + dir[0], ny = y + dir[1];
                        if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                        if (grid[nx][ny] != grid[x][y]) continue;
                        if (visited[nx][ny] == 1) return true;
                        if (visited[nx][ny] == 2) continue;
                        visited[nx][ny] = 1;
                        q.push({nx, ny});
                    }
                }
                for (auto& q : visited) {
                    for (auto& v : q) {
                        if (v == 1) v = 2;
                    }
                }
            }
        }
        return false;
