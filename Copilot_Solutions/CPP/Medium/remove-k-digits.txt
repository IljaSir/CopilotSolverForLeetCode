Synthesizing 10/10 solutions

=======

        string ans;
        int n = num.size();
        for (int i = 0; i < n; i++) {
            while (k > 0 && !ans.empty() && ans.back() > num[i]) {
                ans.pop_back();
                k--;
            }
            if (ans.empty() && num[i] == '0') continue;
            ans.push_back(num[i]);
        }
        while (k-- > 0) {
            ans.pop_back();
        }
        if (ans.empty()) return "0";
        return ans;

=======

        int n = num.size();
        string res;
        for (int i = 0; i < n; ++i) {
            while (k > 0 && !res.empty() && res.back() > num[i]) {
                res.pop_back();
                --k;
            }
            res.push_back(num[i]);
        }
        res.resize(n - k);
        int s = 0;
        while (s < res.size() && res[s] == '0') {
            ++s;
        }
        if (s == res.size()) {
            return "0";
        }
        return res.substr(s);

=======

        if (k == num.size()) return "0";
        for (int i = 0; i < k; i++) {
            int j = 0;
            while (j < num.size()-1 && num[j] <= num[j+1]) j++;
            num.erase(num.begin()+j);
        }
        int i = 0;
        while (i < num.size()-1 && num[i] == '0') i++;
        return num.substr(i);

=======

        int n = num.size();
        if (n == k) return "0";
        string ans = "";
        for (int i = 0; i < n; i++) {
            while (k && ans.size() && ans.back() > num[i]) {
                ans.pop_back();
                k--;
            }
            ans.push_back(num[i]);
        }
        while (k--) ans.pop_back();
        while (ans.size() && ans[0] == '0') ans.erase(ans.begin());
        return ans.size() ? ans : "0";

=======

        string res;
        for (auto c : num) {
            while (res.size() && k && res.back() > c) {
                res.pop_back();
                --k;
            }
            if (res.size() || c != '0') {
                res.push_back(c);
            }
        }
        while (k--) {
            res.pop_back();
        }
        return res.size() ? res : "0";

=======

        if (k == num.length()) return "0";
        while (k-- > 0) {
            int i = 0;
            while (i < num.length() - 1 && num[i] <= num[i + 1]) i++;
            num.erase(num.begin() + i);
            while (num.length() > 1 && num[0] == '0') num.erase(num.begin());
        }
        return num;

=======

        if (num.size() == k) {
            return "0";
        }
        int n = num.size();
        string ans = "";
        for (int i = 0; i < n; i++) {
            while (k > 0 && !ans.empty() && ans.back() > num[i]) {
                ans.pop_back();
                k--;
            }
            ans.push_back(num[i]);
        }
        while (k > 0) {
            ans.pop_back();
            k--;
        }
        int i = 0;
        while (i < ans.size() && ans[i] == '0') {
            i++;
        }
        ans = ans.substr(i);
        return ans.empty() ? "0" : ans;

=======

        if (num.size() == k) return "0";
        int n = num.size();
        int m = n - k;
        string ans;
        for (int i = 0; i < n; ++i) {
            while (!ans.empty() && ans.back() > num[i] && k) {
                ans.pop_back();
                --k;
            }
            ans.push_back(num[i]);
        }
        ans.resize(m);
        while (!ans.empty() && ans.front() == '0') ans.erase(ans.begin());
        return ans.empty() ? "0" : ans;

=======

        int n = num.size();
        if (k >= n) return "0";
        stack<char> stk;
        for (auto c : num) {
            while (stk.size() && stk.top() > c && k) {
                stk.pop();
                k--;
            }
            stk.push(c);
        }
        while (k--) {
            stk.pop();
        }
        string ans = "";
        while (stk.size()) {
            ans += stk.top();
            stk.pop();
        }
        reverse(ans.begin(), ans.end());
        int i = 0;
        while (i < ans.size() && ans[i] == '0') i++;
        if (i == ans.size()) return "0";
        return ans.substr(i);

=======

        if (num.length() == k) return "0";
        string res;
        int n = num.length();
        int i = 0;
        while (k > 0) {
            if (i == res.length()) {
                res.push_back(num[i]);
                i++;
            } else {
                if (num[i] >= res.back()) {
                    res.push_back(num[i]);
                    i++;
                } else {
                    res.pop_back();
                    k--;
                }
            }
        }
        res += num.substr(i);
        while (res.length() > 1 && res[0] == '0') res.erase(res.begin());
        return res.substr(0, res.length() - k);
