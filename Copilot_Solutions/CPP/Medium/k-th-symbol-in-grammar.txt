Synthesizing 10/10 solutions

=======

        if (n == 1) return 0;
        if (k % 2 == 0) {
            if (kthGrammar(n - 1, k / 2) == 0) return 1;
            else return 0;
        } else {
            if (kthGrammar(n - 1, (k + 1) / 2) == 0) return 0;
            else return 1;
        }

=======

        if (n == 1) {
            return 0;
        }
        int mid = 1 << (n - 2);
        if (k <= mid) {
            return kthGrammar(n - 1, k);
        }
        return kthGrammar(n - 1, k - mid) ^ 1;

=======

        if (n == 1) {
            return 0;
        }
        int mid = pow(2, n - 2);
        if (k <= mid) {
            return kthGrammar(n - 1, k);
        }
        return kthGrammar(n - 1, k - mid) ^ 1;

=======

        if (n == 1) return 0;
        if (k % 2 == 0) {
            return 1 - kthGrammar(n - 1, k / 2);
        } else {
            return kthGrammar(n - 1, (k + 1) / 2);
        }

=======

        if (n == 1) {
            return 0;
        }
        int mid = pow(2, n - 1) / 2;
        if (k <= mid) {
            return kthGrammar(n - 1, k);
        } else {
            return !kthGrammar(n - 1, k - mid);
        }

=======

        if (n == 1) return 0;
        int mid = (1 << (n - 1)) / 2;
        if (k <= mid) return kthGrammar(n - 1, k);
        else return !kthGrammar(n - 1, k - mid);

=======

        if (n == 1) return 0;
        int half = 1 << (n - 2);
        if (k <= half) return kthGrammar(n - 1, k);
        return 1 - kthGrammar(n - 1, k - half);

=======

        if (n == 1) return 0;
        if (kthGrammar(n - 1, (k + 1) / 2) == 0) return k % 2;
        else return 1 - k % 2;

=======

        if (n == 1) return 0;
        if (k % 2 == 0) {
            return 1 - kthGrammar(n - 1, k / 2);
        } else {
            return kthGrammar(n - 1, (k + 1) / 2);
        }

=======

        if (n == 1) {
            return 0;
        }
        int mid = pow(2, n - 1) / 2;
        if (k <= mid) {
            return kthGrammar(n - 1, k);
        } else {
            return !kthGrammar(n - 1, k - mid);
        }

=======

        if (n == 1) return 0;
        int mid = (1 << (n - 1)) / 2;
        if (k <= mid) return kthGrammar(n - 1, k);
        else return !kthGrammar(n - 1, k - mid);

=======

        if (n == 1) return 0;
        int half = 1 << (n - 2);
        if (k <= half) return kthGrammar(n - 1, k);
        return 1 - kthGrammar(n - 1, k - half);

=======

        if (n == 1) return 0;
        return (k + 1) / 2 % 2 == 1 ? kthGrammar(n - 1, (k + 1) / 2) : (kthGrammar(n - 1, (k + 1) / 2) == 1 ? 0 : 1);

=======

        if (n == 1) return 0;
        int x = kthGrammar(n-1, (k+1)/2);
        if (x == 0) return k%2;
        return 1-k%2;
