Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long long sum = 0;
        for (int num : nums) {
            sum += num;
        }
        long long diff = abs(sum - goal);
        return (diff + limit - 1) / limit;

=======

        long long sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        long long diff = abs(sum - goal);
        return (diff + limit - 1) / limit;

=======

        long long sum = 0;
        for (int n : nums) sum += n;
        long long diff = abs(goal - sum);
        return (diff + limit - 1) / limit;

=======

        long long sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
        }
        long long delta = abs(goal - sum);
        return (delta + limit - 1) / limit;

=======

        long sum = 0;
        for (auto n : nums) {
            sum += n;
        }
        long diff = abs(goal - sum);
        return (diff + limit - 1) / limit;

=======

        long long sum = accumulate(nums.begin(), nums.end(), 0LL);
        long long d = abs(sum - goal);
        return (d + limit - 1) / limit;

=======

        long long sum = 0;
        for (int num : nums) sum += num;
        sum = goal - sum;
        if (sum == 0) return 0;
        if (sum < 0) sum = -sum;
        return (sum + limit - 1) / limit;

=======

        long long sum = 0;
        for (int n : nums)
            sum += n;
        long long diff = goal - sum;
        return (abs(diff) + limit - 1) / limit;

=======

        long long sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
        }
        long long diff = abs(sum-goal);
        if(diff == 0)
            return 0;
        return (diff+limit-1)/limit;
