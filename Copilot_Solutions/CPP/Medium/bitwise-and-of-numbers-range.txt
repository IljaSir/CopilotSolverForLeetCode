Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            count++;
        }
        return left << count;

=======

        int shift = 0;
        // find the common 1-bits
        while (left < right) {
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;

=======

        int shift = 0;
        while(left < right){
            left = left >> 1;
            right = right >> 1;
            shift++;
        }
        return left << shift;

=======

        int cnt = 0;
        while(left != right) {
            left >>= 1;
            right >>= 1;
            cnt++;
        }
        return left << cnt;

=======

        int res = 0;
        for (int i = 31; i >= 0; i--) {
            if ((left & (1 << i)) == (right & (1 << i))) {
                res |= (left & (1 << i));
            } else {
                break;
            }
        }
        return res;

=======

        int counter = 0;
        while (left != right) {
            left >>= 1;
            right >>= 1;
            counter++;
        }
        return left << counter;

=======

        int ans = 0;
        for(int i=0; i<32; i++) {
            int mask = 1 << i;
            if((left & mask) == (right & mask)) {
                ans |= left & mask;
            } else {
                break;
            }
        }
        return ans;
