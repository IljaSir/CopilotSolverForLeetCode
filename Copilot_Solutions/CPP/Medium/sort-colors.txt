Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int i = 0, j = 0, k = n - 1;
        while (j <= k) {
            if (nums[j] == 0) {
                swap(nums[i++], nums[j++]);
            } else if (nums[j] == 1) {
                ++j;
            } else {
                swap(nums[j], nums[k--]);
            }
        }

=======

        int i = 0, j = 0;
        for (int k = 0; k < nums.size(); k++) {
            int v = nums[k];
            nums[k] = 2;
            if (v < 2) nums[j++] = 1;
            if (v == 0) nums[i++] = 0;
        }

=======

        int low = 0, mid = 0, high = nums.size() - 1;
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums[mid++], nums[low++]);
            } else if (nums[mid] == 1) {
                ++mid;
            } else {
                swap(nums[mid], nums[high--]);
            }
        }

=======

        int left = 0;
        int right = nums.size() - 1;
        for (int i = 0; i <= right; ++i) {
            if (nums[i] == 0) {
                swap(nums[i], nums[left]);
                ++left;
            } else if (nums[i] == 2) {
                swap(nums[i], nums[right]);
                --right;
                --i;
            }
        }

=======

        int n = nums.size();
        int l = 0;
        int r = n - 1;
        int i = 0;
        while (i <= r) {
            if (nums[i] == 0) {
                swap(nums[i++], nums[l++]);
            } else if (nums[i] == 2) {
                swap(nums[i], nums[r--]);
            } else {
                i++;
            }
        }

=======

        int n = nums.size();
        int i = 0;
        int j = n - 1;
        int k = 0;
        while (k <= j) {
            if (nums[k] == 0) {
                swap(nums[k], nums[i]);
                i++;
                k++;
            } else if (nums[k] == 2) {
                swap(nums[k], nums[j]);
                j--;
            } else {
                k++;
            }
        }

=======

        int n = nums.size();
        int red = 0, white = 0, blue = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                ++red;
            } else if (nums[i] == 1) {
                ++white;
            } else {
                ++blue;
            }
        }
        for (int i = 0; i < red; ++i) {
            nums[i] = 0;
        }
        for (int i = red; i < red + white; ++i) {
            nums[i] = 1;
        }
        for (int i = red + white; i < n; ++i) {
            nums[i] = 2;
        }

=======

        int n = nums.size();
        int i = 0, j = n - 1;
        for (int k = 0; k <= j; ++k) {
            if (nums[k] == 0) {
                swap(nums[i++], nums[k]);
            } else if (nums[k] == 2) {
                swap(nums[j--], nums[k--]);
            }
        }

=======

        int n = nums.size();
        int p0 = 0, p2 = n-1;
        for (int i = 0; i <= p2; i++) {
            while (i <= p2 && nums[i] == 2) swap(nums[i], nums[p2--]);
            if (nums[i] == 0) swap(nums[i], nums[p0++]);
        }

=======

        int count[3] = {0};
        for (auto i : nums) {
            count[i]++;
        }
        int j = 0;
        for (int i = 0; i < 3; i++) {
            while (count[i]-- > 0) {
                nums[j++] = i;
            }
        }
