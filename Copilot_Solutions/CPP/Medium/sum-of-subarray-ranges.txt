Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> left(n), right(n);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (long long) nums[i] * (i - left[i]) * (right[i] - i);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n), right(n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] > nums[i]) {
                s.pop();
            }
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long) nums[i] * (i - left[i]) * (right[i] - i);
        }
        return ans;

=======

        long long sum = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            sum += nums[i] * (i + 1) * (n - i);
        }
        return sum;

=======

        int n = nums.size();
        vector<int> left(n, -1), right(n, n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && nums[stk.top()] >= nums[i]) stk.pop();
            if (!stk.empty()) left[i] = stk.top();
            stk.push(i);
        }
        stk = stack<int>();
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && nums[stk.top()] > nums[i]) stk.pop();
            if (!stk.empty()) right[i] = stk.top();
            stk.push(i);
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (long long)nums[i] * (i - left[i]) * (right[i] - i);
        }
        return ans;

=======

        long long result = 0;
        for (int i = 0; i < nums.size(); i++) {
            result += (long long)nums[i] * (i + 1) * (nums.size() - i);
        }
        return result;

=======

        int n = nums.size();
        vector<long long> dp(n, 0);
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + nums[i];
        }
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                sum += dp[j] - dp[i] + nums[i];
            }
        }
        return sum;

=======

        long long res = 0;
        int n = nums.size();
        vector<int> left(n, 0), right(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] > nums[i]) {
                right[s.top()] = i - s.top() - 1;
                s.pop();
            }
            left[i] = s.empty() ? i : i - s.top() - 1;
            s.push(i);
        }
        while (!s.empty()) {
            right[s.top()] = n - s.top() - 1;
            s.pop();
        }
        for (int i = 0; i < n; i++) {
            res += (long long)nums[i] * (left[i] + 1) * (right[i] + 1);
        }
        return res;

=======

        vector<int> left(nums.size(), 0);
        vector<int> right(nums.size(), 0);
        stack<int> s;
        for (int i = 0; i < nums.size(); i++) {
            while (!s.empty() && nums[s.top()] > nums[i]) {
                s.pop();
            }
            if (s.empty()) {
                left[i] = -1;
            } else {
                left[i] = s.top();
            }
            s.push(i);
        }
        
        while (!s.empty()) {
            s.pop();
        }
        for (int i = nums.size() - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (s.empty()) {
                right[i] = nums.size();
            } else {
                right[i] = s.top();
            }
            s.push(i);
        }
        
        long long ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            ans += (long long)nums[i] * (i - left[i]) * (right[i] - i);
        }
        return ans;

=======

        long long res = 0, n = nums.size();
        vector<long long> left(n, 0), right(n, 0);
        stack<int> s;
        for (int i = 0; i < n; ++i) {
            while (!s.empty() && nums[s.top()] > nums[i]) s.pop();
            left[i] = s.empty() ? i + 1 : i - s.top();
            s.push(i);
        }
        while (!s.empty()) s.pop();
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && nums[s.top()] >= nums[i]) s.pop();
            right[i] = s.empty() ? n - i : s.top() - i;
            s.push(i);
        }
        for (int i = 0; i < n; ++i) {
            res += nums[i] * left[i] * right[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> maxLeft(n), minRight(n);
        stack<pair<int, int>> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && stk.top().first < nums[i]) {
                stk.pop();
            }
            maxLeft[i] = stk.empty() ? -1 : stk.top().second;
            stk.push({nums[i], i});
        }
        stk = stack<pair<int, int>>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.empty() && stk.top().first > nums[i]) {
                stk.pop();
            }
            minRight[i] = stk.empty() ? n : stk.top().second;
            stk.push({nums[i], i});
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += (long long)(i - maxLeft[i]) * (minRight[i] - i) * nums[i];
        }
        return ans;
