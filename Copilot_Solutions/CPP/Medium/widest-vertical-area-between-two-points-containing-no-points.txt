Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(points.begin(), points.end());
        int ans = 0;
        for (int i = 1; i < points.size(); ++i) {
            ans = max(ans, points[i][0] - points[i-1][0]);
        }
        return ans;

=======

        int n = points.size();
        vector<int> x(n);
        for (int i = 0; i < n; ++i) {
            x[i] = points[i][0];
        }
        sort(x.begin(), x.end());
        int res = 0;
        for (int i = 1; i < n; ++i) {
            res = max(res, x[i] - x[i - 1]);
        }
        return res;

=======

        int n = points.size();
        vector<int> x(n);
        for (int i = 0; i < n; i++) {
            x[i] = points[i][0];
        }
        sort(x.begin(), x.end());
        int res = 0;
        for (int i = 1; i < n; i++) {
            res = max(res, x[i] - x[i - 1]);
        }
        return res;

=======

        sort(points.begin(), points.end(), [](auto& a, auto& b) { return a[0] < b[0]; });
        int ans = 0;
        for (int i = 1; i < points.size(); ++i) {
            ans = max(ans, points[i][0] - points[i - 1][0]);
        }
        return ans;

=======

        int res = 0;
        sort(points.begin(), points.end(), [](const vector<int>& a, const vector<int>& b) { return a[0] < b[0]; });
        for (int i = 1; i < points.size(); i++) {
            res = max(res, points[i][0] - points[i - 1][0]);
        }
        return res;

=======

        vector<int> x;
        for(auto p:points){
            x.push_back(p[0]);
        }
        sort(x.begin(),x.end());
        int ans=0;
        for(int i=1;i<x.size();i++){
            ans=max(ans,x[i]-x[i-1]);
        }
        return ans;

=======

        vector<int> x;
        for(auto p: points){
            x.push_back(p[0]);
        }
        sort(x.begin(), x.end());
        int res = 0;
        for(int i = 1; i < x.size(); i++){
            res = max(res, x[i] - x[i - 1]);
        }
        return res;

=======

        sort(points.begin(), points.end(), [](const auto& a, const auto& b){return a[0] < b[0];});
        int max = 0;
        for (int i = 1; i < points.size(); ++i) {
            if (points[i][0] - points[i - 1][0] > max) max = points[i][0] - points[i - 1][0];
        }
        return max;

=======

        vector<int> x;
        for(auto p:points)
            x.push_back(p[0]);
        sort(x.begin(),x.end());
        int res=0;
        for(int i=1;i<x.size();i++)
            res=max(res,x[i]-x[i-1]);
        return res;
