Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<vector<int>> res;
        int i = 0;
        while (i < intervals.size() && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i]);
            i++;
        }
        while (i < intervals.size() && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        res.push_back(newInterval);
        while (i < intervals.size()) {
            res.push_back(intervals[i]);
            i++;
        }
        return res;

=======

        vector<vector<int>> res;
        int i = 0;
        while (i < intervals.size() && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i++]);
        }
        while (i < intervals.size() && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        res.push_back(newInterval);
        while (i < intervals.size()) {
            res.push_back(intervals[i++]);
        }
        return res;

=======

        vector<vector<int>> res;
        int i = 0;
        while (i < intervals.size() && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i]);
            ++i;
        }
        while (i < intervals.size() && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            ++i;
        }
        res.push_back(newInterval);
        while (i < intervals.size()) {
            res.push_back(intervals[i]);
            ++i;
        }
        return res;

=======

        vector<vector<int>> res;
        int n = intervals.size();
        int i = 0;
        while (i < n && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i]);
            ++i;
        }
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            ++i;
        }
        res.push_back(newInterval);
        while (i < n) {
            res.push_back(intervals[i]);
            ++i;
        }
        return res;

=======

        vector<vector<int>> ans;
        int n = intervals.size();
        int i = 0;
        while (i < n && intervals[i][1] < newInterval[0]) {
            ans.push_back(intervals[i]);
            i++;
        }
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        ans.push_back(newInterval);
        while (i < n) {
            ans.push_back(intervals[i]);
            i++;
        }
        return ans;

=======

        vector<vector<int>> res;
        int i = 0;
        int n = intervals.size();
        while (i < n && intervals[i][1] < newInterval[0]) {
            res.push_back(intervals[i++]);
        }
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = min(newInterval[0], intervals[i][0]);
            newInterval[1] = max(newInterval[1], intervals[i][1]);
            i++;
        }
        res.push_back(newInterval);
        while (i < n) {
            res.push_back(intervals[i++]);
        }
        return res;

=======

        vector<vector<int>> result;
        int i = 0;
        int n = intervals.size();
        int start = newInterval[0];
        int end = newInterval[1];
        while (i < n && intervals[i][1] < start) {
            result.push_back(intervals[i]);
            i++;
        }
        while (i < n && intervals[i][0] <= end) {
            start = min(start, intervals[i][0]);
            end = max(end, intervals[i][1]);
            i++;
        }
        result.push_back({start, end});
        while (i < n) {
            result.push_back(intervals[i]);
            i++;
        }
        return result;

=======

        vector<vector<int>> res;
        for (int i = 0; i < intervals.size(); ++i) {
            if (newInterval[0] < intervals[i][0]) {
                intervals.insert(intervals.begin() + i, newInterval);
                break;
            }
        }
        if (intervals.size() == 0 || newInterval[0] > intervals.back()[0]) {
            intervals.push_back(newInterval);
        }
        res.push_back(intervals[0]);
        for (int i = 1; i < intervals.size(); ++i) {
            if (res.back()[1] >= intervals[i][0]) {
                res.back()[1] = max(res.back()[1], intervals[i][1]);
            } else {
                res.push_back(intervals[i]);
            }
        }
        return res;

=======

        vector<vector<int>> result;
        bool isInserted = false;
        for (int i = 0; i < intervals.size(); ++i) {
            if (isInserted || newInterval[1] < intervals[i][0]) {
                result.push_back(intervals[i]);
            } else if (newInterval[0] > intervals[i][1]) {
                result.push_back(intervals[i]);
            } else {
                newInterval[0] = min(newInterval[0], intervals[i][0]);
                newInterval[1] = max(newInterval[1], intervals[i][1]);
            }
        }
        if (!isInserted) {
            result.push_back(newInterval);
        }
        sort(result.begin(), result.end());
        return result;
