Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int res = -1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (sumOfDigits(nums[i]) == sumOfDigits(nums[j])) {
                    res = max(res, nums[i] + nums[j]);
                }
            }
        }
        return res;

=======

        int max_sum = -1;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (sum_of_digits(nums[i]) == sum_of_digits(nums[j])) {
                    max_sum = max(max_sum, nums[i] + nums[j]);
                }
            }
        }
        return max_sum;
    }
    int sum_of_digits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;

=======

        int maxsum = -1;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                int sum1 = 0;
                int sum2 = 0;
                int num1 = nums[i];
                int num2 = nums[j];
                while (num1 > 0) {
                    sum1 += num1 % 10;
                    num1 /= 10;
                }
                while (num2 > 0) {
                    sum2 += num2 % 10;
                    num2 /= 10;
                }
                if (sum1 == sum2) {
                    maxsum = max(maxsum, nums[i] + nums[j]);
                }
            }
        }
        return maxsum;

=======

        int maxSum = -1;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                if (sumOfDigits(nums[i]) == sumOfDigits(nums[j])) {
                    sum = nums[i] + nums[j];
                    if (sum > maxSum)
                        maxSum = sum;
                }
            }
        }
        return maxSum;
    }
    
    int sumOfDigits(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;

=======

        vector<int> digits(100, 0);
        for (int num: nums) {
            int sum = 0;
            for (int n = num; n > 0; n /= 10)
                sum += n % 10;
            digits[sum] = max(digits[sum], num);
        }
        int ans = -1;
        for (int i = 0; i < 100; ++i)
            for (int j = i; j < 100; ++j)
                if (i == j)
                    ans = max(ans, digits[i] + digits[j]);
                else
                    ans = max(ans, 2 * digits[i]);
        return ans;

=======

        int maxSum = -1;
        for(int i = 0; i < nums.size(); i++){
            int a = nums[i] % 10;
            int b = (nums[i] / 10) % 10;
            int c = (nums[i] / 100) % 10;
            int d = (nums[i] / 1000) % 10;
            int e = (nums[i] / 10000) % 10;
            int f = (nums[i] / 100000) % 10;
            int g = (nums[i] / 1000000) % 10;
            int h = (nums[i] / 10000000) % 10;
            int j = (nums[i] / 100000000) % 10;
            int k = (nums[i] / 1000000000) % 10;
            int sum = a + b + c + d + e + f + g + h + j + k;
            for(int j = i + 1; j < nums.size(); j++){
                int x = nums[j] % 10;
                int y = (nums[j] / 10) % 10;
                int z = (nums[j] / 100) % 10;
                int w = (nums[j] / 1000) % 10;
                int v = (nums[j] / 10000) % 10;
                int u = (nums[j] / 100000) % 10;
                int t = (nums[j] / 1000000) % 10;
                int s = (nums[j] / 10000000) % 10;
                int r = (nums[j] / 100000000) % 10;
                int q = (nums[j] / 1000000000) % 10;
                int sum2 = x + y + z + w + v + u + t + s + r + q;
                if(sum == sum2){
                    int temp = nums[i] + nums[j];
                    if(temp > maxSum){
                        maxSum = temp;
                    }
                }
            }
        }
        return maxSum;

=======

        int res = -1;
        vector<int> sum(100, -1);
        for (int n : nums) {
            int s = 0;
            int m = n;
            while (m) {
                s += m % 10;
                m /= 10;
            }
            if (sum[s] != -1) {
                res = max(res, sum[s] + n);
            }
            sum[s] = max(sum[s], n);
        }
        return res;

=======

        int sum = 0;
        int max = 0;
        int max1 = 0;
        int max2 = 0;
        for(int i=0; i<nums.size(); i++){
            sum = 0;
            int temp = nums[i];
            while(temp){
                sum += temp%10;
                temp /= 10;
            }
            if(sum > max){
                max = sum;
                max1 = nums[i];
            }
        }
        for(int i=0; i<nums.size(); i++){
            sum = 0;
            int temp = nums[i];
            while(temp){
                sum += temp%10;
                temp /= 10;
            }
            if(sum == max && nums[i] != max1){
                max2 = nums[i];
                break;
            }
        }
        if(max2 == 0) return -1;
        return max1+max2;

=======

        int maxSum = -1;
        int sum = 0;
        int maxDigit = 0;
        int minDigit = 9;
        int maxIndex = -1;
        int minIndex = -1;
        int maxIndex2 = -1;
        int minIndex2 = -1;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            sum = 0;
            while (num > 0) {
                sum += num % 10;
                num /= 10;
            }
            if (sum > maxDigit) {
                maxDigit = sum;
                maxIndex2 = maxIndex;
                maxIndex = i;
            } else if (sum == maxDigit) {
                if (maxIndex2 == -1) {
                    maxIndex2 = i;
                } else if (nums[i] > nums[maxIndex2]) {
                    maxIndex2 = i;
                }
            }
            if (sum < minDigit) {
                minDigit = sum;
                minIndex2 = minIndex;
                minIndex = i;
            } else if (sum == minDigit) {
                if (minIndex2 == -1) {
                    minIndex2 = i;
                } else if (nums[i] > nums[minIndex2]) {
                    minIndex2 = i;
                }
            }
        }
        if (maxDigit == minDigit) {
            if (maxIndex == minIndex) {
                if (maxIndex2 != -1 && minIndex2 != -1) {
                    maxSum = max(nums[maxIndex] + nums[maxIndex2], nums[minIndex] + nums[minIndex2]);
                } else {
                    maxSum = -1;
                }
            } else {
                maxSum = nums[maxIndex] + nums[minIndex];
            }
        } else {
            maxSum = nums[maxIndex] + nums[maxIndex2];
        }
        return maxSum;

=======

        int n = nums.size();
        int s = 0;
        int maxs = -1;
        for(auto i : nums){
            s = 0;
            while(i){
                s += i%10;
                i /= 10;
            }
            if(s > maxs){
                maxs = s;
            }
        }
        int maxsum = -1;
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                s = 0;
                int a = nums[i];
                while(a){
                    s += a%10;
                    a /= 10;
                }
                int b = nums[j];
                while(b){
                    s += b%10;
                    b /= 10;
                }
                if(s == maxs){
                    if(nums[i] + nums[j] > maxsum){
                        maxsum = nums[i] + nums[j];
                    }
                }
            }
        }
        return maxsum;
