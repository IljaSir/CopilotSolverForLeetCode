Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j] + moveCost[i * n + k][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            ans = min(ans, dp[m - 1][i]);
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j] + moveCost[i * n + k][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            ans = min(ans, dp[m - 1][i]);
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int j = 0; j < n; ++j) {
            dp[0][j] = grid[0][j];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j] + moveCost[i * n + k][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int j = 0; j < n; ++j) {
            ans = min(ans, dp[m - 1][j]);
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
                }
            }
        }
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; ++i) {
            ans = min(ans, dp[m - 1][i]);
        }
        return ans; INT_MAX));
        for (int i = 0; i < n; i++) dp[0][i] = grid[0][i];
        for(int i = ; i < m; i++) {
            vctor<int> minCost(n, INT_MAX);
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    minCost[j] = min(minCost[j], dp[i - 1][k] + moveCost[grid[i - 1][k] * n + k][j]);
                }
            }
            for (int j = 0; j < n; j++) {
                dp[i][j] = minCost[j] + grid[i][j];
            }
        }
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = INT_MAX;
            }
        }
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[m - 1][i]);
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 1e

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int j = 0; j < n; ++j) {]);
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n;
        for(int i=0; i<m; i++{
            for(int j=0; j<n j++){
                dp[i][j] = INT_MAX;
            }
        }
        for(int i=0; i<n; i++){
            dp[0][i] = grid[0][i];
        }
        for(int i=1; i<m; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<n; k++){
                    dp[i][j] = min(dp[i][j], dp[i-1][k] + moveCost[grid[i-1][k]][k] + moveCost[grid[i][j]][j]);
                }
            }
        }
        int ans = INT_MAX;
        for(int i=0; i<n; i++){
            ans = min(ans, dp[m-1][i]);
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n));
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            vector<int> minCost(n, INT_MAX);
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    minCost[j] = min(minCost[j], dp[i - 1][k] + moveCost[grid[i - 1][k] * n + k][j]);
                }
            }
            for (int j = 0; j < n; j++) {
                dp[i][j] = minCost[j] + grid[i][j];
            }
        }
            dp[0][j] = grid[0][j];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + grid[i][j] + moveCost[i * n + k][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int j = 0; j < n; ++j) {
            ans = min(ans, dp[m - 1][j]);
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int k = 0; k < n; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
                }
            }
        }
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; i++) dp[0][i] = grid[0][i];
        for (int i = 1; i < m; i++) {
            vector<vector<int>> tmp(n, vector<int>(n, INT_MAX));
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    tmp[j][k] = min(tmp[j][k], dp[i - 1][j] + moveCost[grid[i - 1][j]][k] + grid[i][k]);
                }
            }
            dp[i] = *min_element(tmp.begin(), tmp.end());
        }
        return *min_element(dp.back().begin(), dp.back().end());

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = INT_MAX;
            }
        }
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            ans = min(ans, dp[m - 1][i]);
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 1e9));
        for (int j = 0; j < n; ++j)
            dp[0][j] = grid[0][j];
        for (int i = 1; i < m; ++i)
            for (int j = 0; j < n; ++j)
                for (int k = 0; k < n; ++k)
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + moveCost[grid[i - 1][k]][j] + grid[i][j]);
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

=======

        int m = grid.size();
        int n = grid[0].size();
        int dp[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                dp[i][j] = INT_MAX;
            }
        }
        for(int i=0; i<n; i++){
            dp[0][i] = grid[0][i];
        }
        for(int i=1; i<m; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<n; k++){
                    dp[i][j] = min(dp[i][j], dp[i-1][k] + moveCost[grid[i-1][k]][k] + moveCost[grid[i][j]][j]);
                }
            }
        }
        int ans = INT_MAX;
        for(int i=0; i<n; i++){
            ans = min(ans, dp[m-1][i]);
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n));
        for (int i = 0; i < n; i++) {
            dp[0][i] = grid[0][i];
        }
        for (int i = 1; i < m; i++) {
            vector<int> minCost(n, INT_MAX);
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    minCost[j] = min(minCost[j], dp[i - 1][k] + moveCost[grid[i - 1][k] * n + k][j]);
                }
            }
            for (int j = 0; j < n; j++) {
                dp[i][j] = minCost[j] + grid[i][j];
            }
        }
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());
