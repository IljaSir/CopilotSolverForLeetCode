Synthesizing 10/10 solutions

=======

        int n = s.size();
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') a++;
            if (s[i] == 'b') b++;
            if (s[i] == 'c') c++;
        }
        if (a < k || b < k || c < k) return -1;
        int l = 0, r = n - 1;
        int la = 0, lb = 0, lc = 0;
        while (l < r) {
            if (s[l] == 'a') {
                la++;
                if (la == k) break;
            } else if (s[l] == 'b') {
                lb++;
                if (lb == k) break;
            } else {
                lc++;
                if (lc == k) break;
            }
            if (s[r] == 'a') {
                la++;
                if (la == k) break;
            } else if (s[r] == 'b') {
                lb++;
                if (lb == k) break;
            } else {
                lc++;
                if (lc == k) break;
            }
            l++;
            r--;
        }
        if (l == r) {
            if (s[l] == 'a') la++;
            if (s[l] == 'b') lb++;
            if (s[l] == 'c') lc++;
        }
        if (la < k) la = k - la;
        if (lb < k) lb = k - lb;
        if (lc < k) lc = k - lc;
        return l + 1 + n - r + la + lb + lc;

=======

        int n = s.length();
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == 'a') ++a;
            else if (s[i] == 'b') ++b;
            else ++c;
        }
        int result = a + b + c;
        for (int i = k; i < n; ++i) {
            if (s[i] == 'a') ++a;
            else if (s[i] == 'b') ++b;
            else ++c;
            if (s[i - k] == 'a') --a;
            else if (s[i - k] == 'b') --b;
            else --c;
            result = min(result, a + b + c);
        }
        return result;

=======

        int n = s.size();
        int a = 0, b = 0, c = 0;
        int i = 0, j = n - 1;
        while (i < j) {
            if (s[i] == 'a') {
                a++;
            } else if (s[i] == 'b') {
                b++;
            } else {
                c++;
            }
            if (s[j] == 'a') {
                a++;
            } else if (s[j] == 'b') {
                b++;
            } else {
                c++;
            }
            if (a >= k && b >= k && c >= k) {
                return i + 1 + n - j;
            }
            i++;
            j--;
        }
        if (i == j) {
            if (s[i] == 'a') {
                a++;
            } else if (s[i] == 'b') {
                b++;
            } else {
                c++;
            }
        }
        if (a >= k && b >= k && c >= k) {
            return i + 1 + n - j;
        }
        return -1;
    }
    int takeCharacters1(string s, int k) {
        int n = s.size();
        int a = 0, b = 0, c = 0;
        int i = 0, j = n - 1;
        while (i < j) {
            if (s[i] == 'a') {
                a++;
            } else if (s[i] == 'b') {
                b++;
            } else {
                c++;
            }
            if (s[j] == 'a') {
                a++;
            } else if (s[j] == 'b') {
                b++;
            } else {
                c++;
            }
            if (a >= k && b >= k && c >= k) {
                return i + 1 + n - j;
            }
            if (a < k) {
                i++;
            }
            if (b < k) {
                i++;
            }
            if (c < k) {
                i++;
            }
            if (a < k) {
                j--;
            }
            if (b < k) {
                j--;
            }
            if (c < k) {
                j--;
            }
        }
        if (i == j) {

=======

        int n = s.length();
        int i = 0, j = n-1;
        int a = 0, b = 0, c = 0;
        while(i < j) {
            if(s[i] == 'a') {
                a++;
            } else if(s[i] == 'b') {
                b++;
            } else {
                c++;
            }
            if(s[j] == 'a') {
                a++;
            } else if(s[j] == 'b') {
                b++;
            } else {
                c++;
            }
            if(a >= k && b >= k && c >= k) {
                return i+j;
            }
            i++;
            j--;
        }
        return -1;

=======

        int n = s.size();
        if (n < k * 3) return -1;
        int left = 0, right = n - 1;
        int a = 0, b = 0, c = 0;
        int res = 0;
        while (left < right) {
            if (a < k) {
                if (s[left] == 'a') {
                    a++;
                }
                left++;
            }
            if (b < k) {
                if (s[right] == 'b') {
                    b++;
                }
                right--;
            }
            if (c < k) {
                if (s[left] == 'c') {
                    c++;
                }
                left++;
            }
            if (a == k && b == k && c == k) {
                res += left - 1;
                a = 0, b = 0, c = 0;
            }
        }
        if (a == k && b == k && c == k) {
            res += left - 1;
            a = 0, b = 0, c = 0;
        }
        if (a < k || b < k || c < k) return -1;
        return res;

=======

        int n = s.length();
        int left = 0, right = n - 1;
        int a = 0, b = 0, c = 0;
        while (left <= right && (a < k || b < k || c < k)) {
            if (s[left] == 'a') {
                a++;
            } else if (s[left] == 'b') {
                b++;
            } else {
                c++;
            }
            if (s[right] == 'a') {
                a++;
            } else if (s[right] == 'b') {
                b++;
            } else {
                c++;
            }
            left++;
            right--;
        }
        if (a >= k && b >= k && c >= k) {
            return (left - 1) * 2;
        }
        return -1;

=======

        int n = s.size();
        int a = 0, b = 0, c = 0;
        int i = 0, j = n - 1;
        for (; i < j; ++i, --j) {
            if (s[i] == 'a') ++a;
            if (s[i] == 'b') ++b;
            if (s[i] == 'c') ++c;
            if (s[j] == 'a') ++a;
            if (s[j] == 'b') ++b;
            if (s[j] == 'c') ++c;
            if (a >= k && b >= k && c >= k) return i + n - j;
        }
        if (i == j) {
            if (s[i] == 'a') ++a;
            if (s[i] == 'b') ++b;
            if (s[i] == 'c') ++c;
        }
        if (a >= k && b >= k && c >= k) return i + n - j;
        return -1;

=======

        int n = s.size();
        int i = 0, j = n - 1;
        int cnt = 0;
        while (i < j) {
            if (s[i] == s[j]) {
                cnt++;
                i++;
                j--;
            } else {
                break;
            }
        }
        if (cnt >= k) {
            return (n - 2 * k);
        } else {
            return -1;
        }

=======

        int n = s.length();
        if (k > n) return -1;
        int left = 0, right = n - 1;
        int count = 0;
        while (left < right) {
            if (s[left] == s[right]) {
                count++;
                left++;
                right--;
            } else {
                break;
            }
        }
        if (count >= k) return 2 * k;
        else return -1;

=======

        int n = s.length();
        if (n < k) return -1;
        int r = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == s[n - 1 - i]) {
                ++r;
            }
        }
        if (r == k) return k;
        return (k - r) * 2;
    }
    int takeCharacters2(string s, int k) {
        int n = s.length();
        if (n < k) return -1;
        int r = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == s[n - 1 - i]) {
                ++r;
            }
        }
        if (r == k) return k;
        return (k - r) * 2;
    }
    int takeCharacters3(string s, int k) {
        int n = s.length();
        if (n < k) return -1;
        int r = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == s[n - 1 - i]) {
                ++r;
            }
        }
        if (r == k) return k;
        return (k - r) * 2;
    }
    int takeCharacters4(string s, int k) {
        int n = s.length();
        if (n < k) return -1;
        int r = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == s[n - 1 - i]) {
                ++r;
            }
        }
        if (r == k) return k;
        return (k - r) * 2;
    }
    int takeCharacters5(string s, int k) {
        int n = s.length();
        if (n < k) return -1;
        int r = 0;
        for (int i = 0; i < k; ++i) {
            if (s[i] == s[n - 1 - i]) {
                ++r;
            }
        }
        if (r == k) return k;
        return (k - r) * 2;
