Synthesizing 10/10 solutions

=======

        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); ++i) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        pq.push({1, start});
        vector<double> probs(n, 0);
        probs[start] = 1;
        while (!pq.empty()) {
            auto [prob, node] = pq.top();
            pq.pop();
            if (node == end) {
                return prob;
            }
            for (auto& [next, p] : graph[node]) {
                if (prob * p > probs[next]) {
                    probs[next] = prob * p;
                    pq.push({probs[next], next});
                }
            }
        }
        return 0;

=======

        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start});
        vector<double> prob(n, 0);
        prob[start] = 1;
        while (!pq.empty()) {
            auto [p, node] = pq.top();
            pq.pop();
            if (prob[node] > p) {
                continue;
            }
            for (auto [next, nextProb] : graph[node]) {
                double newProb = p * nextProb;
                if (newProb > prob[next]) {
                    prob[next] = newProb;
                    pq.push({newProb, next});
                }
            }
        }
        return prob[end];

=======

        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        vector<double> prob(n, 0);
        prob[start] = 1;
        pq.push({1, start});
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            if (p.second == end) return p.first;
            if (prob[p.second] > p.first) continue;
            for (auto c: graph[p.second]) {
                if (prob[c.first] < p.first * c.second) {
                    prob[c.first] = p.first * c.second;
                    pq.push({prob[c.first], c.first});
                }
            }
        }
        return 0;

=======

        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start});
        vector<double> prob(n, 0.0);
        prob[start] = 1.0;
        while (!pq.empty()) {
            auto [curProb, curNode] = pq.top();
            pq.pop();
            if (curNode == end) {
                return curProb;
            }
            for (auto [nextNode, nextProb]: graph[curNode]) {
                if (curProb * nextProb > prob[nextNode]) {
                    prob[nextNode] = curProb * nextProb;
                    pq.push({prob[nextNode], nextNode});
                }
            }
        }
        return 0.0;

=======

        vector<vector<pair<int, double>>> g(n);
        for (int i = 0; i < edges.size(); ++i) {
            g[edges[i][0]].push_back({edges[i][1], succProb[i]});
            g[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        priority_queue<pair<double, int>> pq;
        vector<double> prob(n, 0);
        pq.push({1, start});
        prob[start] = 1;
        while (!pq.empty()) {
            auto [p, u] = pq.top();
            pq.pop();
            if (u == end) {
                return p;
            }
            for (auto [v, w]: g[u]) {
                if (prob[v] < p * w) {
                    prob[v] = p * w;
                    pq.push({prob[v], v});
                }
            }
        }
        return 0;

=======

        vector<vector<pair<int, double>>> adj(n);
        for (int i = 0; i < edges.size(); ++i) {
            adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<double> prob(n, 0);
        prob[start] = 1;
        priority_queue<pair<double, int>> pq;
        pq.push({1, start});
        while (!pq.empty()) {
            auto [p, u] = pq.top();
            pq.pop();
            if (u == end) {
                return p;
            }
            for (auto [v, w] : adj[u]) {
                if (p * w > prob[v]) {
                    prob[v] = p * w;
                    pq.push({prob[v], v});
                }
            }
        }
        return 0;

=======

        unordered_map<int, vector<pair<int, double>>> graph;
        for (int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<bool> visited(n, false);
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start});
        while (!pq.empty()) {
            auto [prob, node] = pq.top();
            pq.pop();
            if (node == end) return prob;
            if (visited[node]) continue;
            visited[node] = true;
            for (auto [next, p] : graph[node]) {
                if (!visited[next]) {
                    pq.push({prob * p, next});
                }
            }
        }
        return 0;

=======

        vector<vector<pair<int, double>>> graph(n);
        for (int i = 0; i < edges.size(); ++i) {
            graph[edges[i][0]].push_back(make_pair(edges[i][1], succProb[i]));
            graph[edges[i][1]].push_back(make_pair(edges[i][0], succProb[i]));
        }
        vector<double> prob(n, 0);
        prob[start] = 1;
        priority_queue<pair<double, int>> pq;
        pq.push(make_pair(1, start));
        while (!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            double p1 = p.first;
            int n1 = p.second;
            if (prob[n1] > p1) continue;
            for (auto p2 : graph[n1]) {
                int n2 = p2.first;
                double p3 = p2.second;
                if (prob[n2] < prob[n1] * p3) {
                    prob[n2] = prob[n1] * p3;
                    pq.push(make_pair(prob[n2], n2));
                }
            }
        }
        return prob[end];

=======

        vector<vector<pair<int, double>>> adj(n);
        for (int i = 0; i < edges.size(); ++i) {
            adj[edges[i][0]].push_back(make_pair(edges[i][1], succProb[i]));
            adj[edges[i][1]].push_back(make_pair(edges[i][0], succProb[i]));
        }
        vector<double> prob(n, 0.0);
        prob[start] = 1.0;
        priority_queue<pair<double, int>> q;
        q.push(make_pair(1.0, start));
        while (!q.empty()) {
            auto p = q.top();
            q.pop();
            int u = p.second;
            double w = p.first;
            if (u == end) {
                return prob[u];
            }
            if (prob[u] > w) {
                continue;
            }
            for (auto& p : adj[u]) {
                int v = p.first;
                double w2 = p.second;
                if (prob[v] < prob[u] * w2) {
                    prob[v] = prob[u] * w2;
                    q.push(make_pair(prob[v], v));
                }
            }
        }
        return 0.0;

=======

        vector<vector<pair<int,double>>> graph(n);
        for(int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        vector<double> prob(n, 0.0);
        prob[start] = 1.0;
        priority_queue<pair<double, int>> pq;
        pq.push({1.0, start});
        while(!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            int node = p.second;
            double probab = p.first;
            if(node == end) return probab;
            if(probab < prob[node]) continue;
            for(auto& e : graph[node]) {
                if(prob[node] * e.second > prob[e.first]) {
                    prob[e.first] = prob[node] * e.second;
                    pq.push({prob[e.first], e.first});
                }
            }
        }
        return 0.0;
