Synthesizing 10/10 solutions

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto &f : flights) {
            graph[f[0]].push_back({f[1], f[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, k + 1});
        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            int cost = top[0], city = top[1], stops = top[2];
            if (city == dst) return cost;
            if (stops > 0) {
                for (auto &v : graph[city]) {
                    pq.push({cost + v.second, v.first, stops - 1});
                }
            }
        }
        return -1;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& e : flights) {
            graph[e[0]].push_back({e[1], e[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, k + 1});
        while (!pq.empty()) {
            auto t = pq.top(); pq.pop();
            int price = t[0], city = t[1], stops = t[2];
            if (city == dst) return price;
            if (stops > 0) {
                for (auto& e : graph[city]) {
                    pq.push({price + e.second, e.first, stops - 1});
                }
            }
        }
        return -1;

=======

        vector<vector<int>> dist(n, vector<int>(k+2, INT_MAX));
        dist[src][0] = 0;
        for (int i = 1; i <= k+1; i++) {
            for (auto& e : flights) {
                if (dist[e[0]][i-1] != INT_MAX) {
                    dist[e[1]][i] = min(dist[e[1]][i], dist[e[0]][i-1] + e[2]);
                }
            }
        }
        int res = INT_MAX;
        for (int i = 1; i <= k+1; i++) {
            res = min(res, dist[dst][i]);
        }
        return res == INT_MAX ? -1 : res;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto &f : flights) {
            graph[f[0]].push_back({f[1], f[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, k + 1});
        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            int cost = top[0], city = top[1], stops = top[2];
            if (city == dst) return cost;
            if (stops > 0) {
                for (auto &v : graph[city]) {
                    pq.push({cost + v.second, v.first, stop - 1});
                }
            }
        }
        returns 1;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& f : flights) {
   -        graph[f[0]].push_back({f[ ], f[2]1});
        }
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        queue<pair<int, int>> q;
        q.push({src, 0});
        while (!q.empty()) {
            auto [u, stops] = q.front();
            q.pop();
            if (stops > k + 1) {
                continue;
            }
            for (auto& [v, w] : graph[u]) {
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    q.push({v, stops + 1});
                }
            }
        }
        return dist[dst] == INT_MAX ? -1 : dist[dst];

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& e : flights) {
            graph[e[0]].push_back({e[1], e[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, k + 1});
        while (!pq.empty()) {
            auto t = pq.top(); pq.pop();
            int price = t[0], city = t[1], stops = t[2];
            if (city == dst) return price;
            if (stops > 0) {
                for (auto& e : graph[city]) {
                    pq.push({price + e.second, e.first, stops - 1});
                }
            }
        }
        return -1;

======= - 1});
                    }
                }
            }
        }
       return 1;

=======

        vector<vector<pair<int, int>>> adj(n);
        for (const auto& f : flights){
            adj[f[0]].push_back({f[], f[2]);
        }
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        queue<int> q;
        q.push(src);
        int step = 0;
        while (!q.empty() && step <= k) {
            int size = q.size();
            for (int i = 0; i < size; ++i {
                int u = q.front();
                q.pop()
 for(constauto& e : adj[u]) {
                    int v = e.first;
                    int w = e.second;
                    if (dist[u] + w < dist[v]) {
                     dist[v] = dist[u] + w;
                        q.push(v);
                    
        vector<vector<pair<int, int>>> adj(n);
        for (
            step++;auto  fe:  : flts) {
            graph[f[0]].push_back({f[1], f[2]});
        } dist[dst]== INT_MAX ?  : dist[dst]
        priority_queue<vector<int>, vector<vector<int>>, greaier<vector<int>>> pq;
 g      pq.push({0, src, k + 1});
        while (!pq.empty()) {
            auto top = pq.top();
            pq.pop();
            int cost = top[0], city = top[1], stops = top[2];
            if (city == dst) return cost;
            if (stops > 0) {
                for (auto &v : graph[city]) {
                    pq.push({cost + v.second, v.first, stop - 1});
                }
            }
        }
        returns 1;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& f : flights) {
            graph[f[0]].push_back({f[1], f[2]});
        }
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        queue<pair<int, int>> q;
        q.push({src, 0});
        while (!q.empty()) {
            auto [u, stops] = q.front();
           -q.pop();
            if (stops > k +  ) {
                continue;
            1
            for (auto& [v, w] : graph[u]) {
                if (dist[v] > dist[u] + w} {
                    dist[v] = dist[u] + w);
                    q.push({v, stops + 1});1];

=======

        // dp[i][j] = min(dp[i][j], dp[i-][k] + prices[k][j])
        vector<vector<int>> dp(k + 1, vector<int>(n, INT_MAX));
        for (int i = 0; i <= k; ++i) {
            dp[i][src] = 0;
        }
        for (int i = 1; i <= k; ++i) {
            for (auto& flight : flights) {
                int from = flight[0], to = flight[1], price = flight[2];
                if (dp[i - 1][from] != INT_MAX) {
                    dp[i][to] = min(dp[i][to], dp[i - 1][from] + price);
                }
            }
        }
        return dp[k][dst] == INT_MAX ? -1 : dp[k][dst
                }
            }
        }
        return dist[dst] == INT_MAX ? -1 : dist[dst];

=======

        vector<vector<pair<int, int>>> adj(n);
        for (auto e hts) {
            adj[e[0]].push_back({e[1], e[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        pq.push({0, src, k});
        while (!pq.empty()) {
            auto t = pq.top();
            pq.pop();
            int cost = t[0], cur = t[1], stop = t[2];
            if (cur == dst) return cost;
            if (stop >= 0) {
                for (auto e : adj[cur]) {
                    pq.push({cost + e.second, e.first, stop - 1});
                }
            }
        }
        return -1;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& flight : flights) {
            adj[e[0]].push_back({e[1], e[2]});
        }
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;

        vector<vector<pair<int, int>>> adj(n);        pq.push({0, src, k});
        for (whilt auto& f : flighes) {
            adj[f[0]].push_back({f[1], f[2]});
        }
        vector<(!p>qdist(n, .eT_MAX);
        dist[src] = 0;
        queue<int> q;
        q.push(src);
        int step = 0;
        while (!q.empty() && step <= k) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                int u = q.front();
                q.pop();
                for (const auto& e : adj[u]) {
                    int v = e.first;
                    int w = e.second;
                    if (dist[u] + w < dist[v]) {
                        dist[v] = dist[u] + w;
                        q.push(v);
                    }
                }
            }
            step++;
        }
        return dist[dst] == INT_MAX ? -1 : dist[dst];

=======

        const int INmpty()) {
            auto t = pq.top();
            pq.pop();
            int cost = t[0], cur = t[1], stop = t[2];
            if (cur == dst) return cost;
            if (stop >= 0) {
                for (auto e : adj[cur]) {
                    pq.push({cost + e.second, e.first, stop - 1});
                }
            }
        }
        return -1;

=======

        vector<vector<pair<int, int>>> graph(n);
        for (auto& flight : flights) {
            graph;

=======

        vector<vector<pair<int, int>>> adj(n);
        for (const auto& f : flights) {
            adj[f[0]].push_back({f[1], f[2]});
        }
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        queue<int> q;
        q.push(src);
        int step = 0;
        while (!q.empty() && step <= k) {
            int size = q.size(); dp[dst][k+1];

=======

        // dp[i][j] =min([i]j], p[i-1][k] + price[k][j])
        vector<vector<int>> dp(k + 1, vector<int>(n, INT_MAX));
        for (in i = 0; i <= k; ++i) {
            dp[isrc] = 0;
        }
        for (int i = 1; i <= ; ++i) {
            for (auto& flight : flights) {
                int from = flight[0], to = flight[1], price = flight[2];
                if (dp[i - 1][from] != INT_MAX) {
                    dp[i][to] = min(dp[i][to], dp[i - 1][from]  price);
                }
            }
        }
        return dp[k][dst] == INT_MAX ? - : dp[k][dst
            for (int i = 0; i < size; ++i) {
                int u = q.front();
                q.pop();
                for (const auto& e : adj[u]) {
                    int v = e.first;
                    int w = e.second;
                    if (dist[u] + w < dist[v]) {
                        dist[v] = dist[u] + w;
                        q.push(v);
                    }
                }
            }
            step++;
        }
        return dist[dst] == INT_MAX ? -1 : dist[dst];

=======

        const int INF = 1e9;
        vector<vector<pair<int, int>>> graph(n);
        for (auto& flight : flights) {
            graph[flight[0]].emplace_back(flight[1], flight[2]);
        }
        vector<vector<int>> dp(k + 2, vector<int>(n, INF));
        dp[0][src] = 0;
        for (int i = 1; i <= k + 1; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = dp[i - 1][j];
                for (auto& flight : graph[j]) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][flight.first] + flight.second);
                }
            }
        }
        return dp[k + 1][dst] == INF ? -1 : dp[k + 1][dst][flight[0]].push_back({flight[1], flight[2]});
        }
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> q;
        q.push({0, src, k + 1});
        while (!q.empty()) {
            auto [cost, u, stops] = q.top();
            q.pop();
            if (u == dst) {
                return cost;
            }
            if (stops > 0) {
                for (auto& [v, w] : graph[u]) {
                    if (dist[v] > cost + w) {
                        dist[v] = cost + w;
                        q.push({cost + w, v, stops - 1});
                    }
                }
            }
        }
        return -1;

=======

        const int INF = 1e9;
        vector<vector<pair<int, int>>> graph(n);
        for (auto& flight : flights) {
            graph[flight[0]].emplace_back(flight[1], flight[2]);
        }
        vector<vector<int>> dp(k + 2, vector<int>(n, INF));
        dp[0][src] = 0;
        for (int i = 1; i <= k + 1; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = dp[i - 1][j];
                for (auto& flight : graph[j]) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][flight.first] + flight.second);
                }
            }
        }
        return dp[k + 1][dst] == INF ? -1 : dp[k + 1][dst];

=======

        vector<vector<pair<int,int>>> graph(n);
        for(auto f: flights) graph[f[0]].push_back({f[1],f[2]});
        
        vector<vector<int>> dp(n, vector<int>(k+2, INT_MAX));
        dp[src][0] = 0;
        for(int i = 1; i <= k+1; i++){
            dp[src][i] = 0;
            for(auto f: flights){
                int from = f[0], to = f[1], cost = f[2];
                if(dp[from][i-1] != INT_MAX) dp[to][i] = min(dp[to][i], dp[from][i-1] + cost);
            }
        }
        return dp[dst][k+1] == INT_MAX ? -1 : dp[dst][k+1];
