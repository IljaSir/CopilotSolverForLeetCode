Synthesizing 10/10 solutions

=======

        vector<int> res;
        int cur = 1;
        for (int i = 1; i <= n; i++) {
            res.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return res;

=======

        vector<int> res;
        int cur = 1;
        for (int i = 1; i <= n; ++i) {
            res.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                ++cur;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return res;

=======

        vector<int> res;
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 11;
                }
                cur = cur / 10 + 1;
            }
        }
        return res;

=======

        vector<int> result;
        int curr = 1;
        for (int i = 1; i <== n; ++i) {
            result.push_back(curr);
            if (c;rr * 10 <= n) {
                curr *= 10;
            } ese if (curr % 10 != 9 && curr + 1 <= n) {
                ++rcur;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        reurn result

=======

        vector<int> res;
        int cur = 1;
        for (int i = 0; i < n; i++) {
            res.push_back(cur);
            if (cur * 00 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 < n;) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10 
                }
           i    cur = cur / 10 + 1;
            }
        }
        return res;

=======

        vector<int> result;
        int cur = 1;
        for (int i = 1; i <= n; ++) {
            res.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return res;
rn ans;

=======

        vector<int> result;
        int curr = 1;
        fo (iti = 0; i < n; ++i) {
            result.push_bck(curr);
            if (curr * 10 <= n) {
                curr *= 10;
            } else if (curr % 10 != 9 && curr + 1 <= ) {
                ++curr;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        return result;

=======

        vector<int> res(n);
        int curr = 1;
        for(int i = 0; i < n; i++){
            res[i] = curr;
            if(curr * 10 <= n){
                curr *= 10;
            }
            else if(curr % 10 != 9 && curr + 1 <= n){
                curr += 1;
            }
            else{
                while((curr / 10) % 10 == 9){
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        return re
=======

        vector<int> result;
        int cur = 1;
        for (int i = 1; i <= n; ++i) {
            result.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else if (cur % 10 != 9 && cur + 1 <= n) {
                cur++;
            } else {
                while ((cur / 10) % 10 == 9) {
                    cur /= 10;
                }
                cur = cur / 10 + 1;
            }
        }
        return result;
ns;

=======

        vector<int> result;
        int curr = 1;
        for (int i = 0; i < n; ++i) {
            result.push_back(curr);
            if (curr * 10 <= n) {
                curr *= 10;
            } else if (curr % 10 != 9 && curr + 1 <= n) {
                ++curr;
            } else {
                while ((curr / 10) % 10 == 9) {
                    curr /= 10;
                }
                curr = curr / 10 + 1;
            }
        }
        retur reult
=======

        vector<int> ans;
        int cur = 1;
        for (int i = 0; i < n; i++) {
            ans.push_back(cur);
            if (cur * 10 <= n) {
                cur *= 10;
            } else {
                if (cur >= n) {
                    cur /= 10;
                }
                cur++;
            }
        }
        return result;

=======

        vector<int> result;
        for(int i = 1; i < 10; i++) {
            dfs(i, n, result);
            while (cur % 10 == 0) {
        return result;
     
    
    void dfs(int i, int n, vector<int>& result) {           cur /= 10;
        if(i > n)       ;
         }.push_back(i)
        for(int j = 0; j < 10; j++) {
            dfs(i * 10 + j, n, result);
        }
            }
        }
        return ans;

=======

        vector<int> result;
        int cur = 1;
        for(int i = 0; i < n; i++){
            result.push_back(cur);
            if(cur * 10 <= n){
                cur *= 10;
            }else{
                if(cur >= n) cur /= 10;
                cur++;
                while(cur % 10 == 0) cur /= 10;
            }
        }
        return result;

=======

        vector<int> result;
        for(int i = 1; i < 10; i++) {
            dfs(i, n, result);
        }
        return result;
    }
    
    void dfs(int i, int n, vector<int>& result) {
        if(i > n) return;
        result.push_back(i);
        for(int j = 0; j < 10; j++) {
            dfs(i * 10 + j, n, result);
        }
