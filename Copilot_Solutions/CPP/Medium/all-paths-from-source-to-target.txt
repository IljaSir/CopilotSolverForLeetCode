Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        vector<int> path;
        path.push_back(0);
        dfs(graph, res, path, 0);
        return res;
    }
    void dfs(vector<vector<int>>& graph, vector<vector<int>> &res, vector<int> &path, int node) {
        if (node == graph.size() - 1) {
            res.push_back(path);
            return;
        }
        for (int i = 0; i < graph[node].size(); i++) {
            path.push_back(graph[node][i]);
            dfs(graph, res, path, graph[node][i]);
            path.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> path;
        path.push_back(0);
        dfs(graph, result, path, 0);
        return result;
    }
    void dfs(vector<vector<int>>& graph, vector<vector<int>>& result, vector<int>& path, int node) {
        if (node == graph.size() - 1) {
            result.push_back(path);
            return;
        }
        for (int i = 0; i < graph[node].size(); i++) {
            path.push_back(graph[node][i]);
            dfs(graph, result, path, graph[node][i]);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        vector<int> path;
        path.push_back(0);
        dfs(graph, ans, path, 0);
        return ans;
    }
    
    void dfs(vector<vector<int>>& graph, vector<vector<int>>& ans, vector<int>& path, int node) {
        if (node == graph.size() - 1) {
            ans.push_back(path);
            return;
        }
        for (int i = 0; i < graph[node].size(); ++i) {
            path.push_back(graph[node][i]);
            dfs(graph, ans, path, graph[node][i]);
            path.pop_back();
        }

=======

        int n = graph.size();
        vector<vector<int>> res;
        vector<int> path;
        dfs(graph, 0, n - 1, path, res);
        return res;
    }
    
    void dfs(vector<vector<int>>& graph, int start, int end, vector<int> path, vector<vector<int>>& res) {
        path.push_back(start);
        if (start == end) {
            res.push_back(path);
            return;
        }
        for (int i = 0; i < graph[start].size(); i++) {
            dfs(graph, graph[start][i], end, path, res);
        }

=======

        vector<vector<int>> result;
        vector<int> path;
        dfs(graph, 0, path, result);
        return result;
    }
    void dfs(vector<vector<int>>& graph, int cur, vector<int>& path, vector<vector<int>>& result) {
        path.push_back(cur);
        if (cur == graph.size() - 1) {
            result.push_back(path);
        }
        for (int i = 0; i < graph[cur].size(); i++) {
            dfs(graph, graph[cur][i], path, result);
        }
        path.pop_back();

=======

        vector<vector<int>> res;
        vector<int> path;
        path.push_back(0);
        dfs(graph, 0, res, path);
        return res;
    }
    
    void dfs(vector<vector<int>>& graph, int u, vector<vector<int>>& res, vector<int>& path){
        int n = graph.size();
        if(u == n-1){
            res.push_back(path);
            return;
        }
        
        for(int v: graph[u]){
            path.push_back(v);
            dfs(graph, v, res, path);
            path.pop_back();
        }

=======

        vector<vector<int>> paths;
        vector<int> path;
        path.push_back(0);
        dfs(graph, path, paths, 0);
        return paths;
    }
    void dfs(vector<vector<int>>& graph, vector<int>& path, vector<vector<int>>& paths, int node){
        if(node == graph.size() - 1){
            paths.push_back(path);
            return;
        }
        for(int i = 0; i < graph[node].size(); i++){
            path.push_back(graph[node][i]);
            dfs(graph, path, paths, graph[node][i]);
            path.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> path;
        path.push_back(0);
        dfs(graph, 0, path, result);
        return result;
    }
    
    void dfs(vector<vector<int>>& graph, int curr, vector<int>& path, vector<vector<int>>& result) {
        if (curr == graph.size() - 1) {
            result.push_back(path);
            return;
        }
        
        for (int i = 0; i < graph[curr].size(); i++) {
            int next = graph[curr][i];
            path.push_back(next);
            dfs(graph, next, path, result);
            path.pop_back();
        }

=======

        vector<vector<int>> ans;
        int n = graph.size();
        vector<int> path;
        path.push_back(0);
        dfs(graph, ans, path, 0, n-1);
        return ans;
    }
    
    void dfs(vector<vector<int>>& graph, vector<vector<int>>& ans, vector<int>& path, int start, int end) {
        if (start == end) {
            ans.push_back(path);
            return;
        }
        
        for (int i = 0; i < graph[start].size(); i++) {
            path.push_back(graph[start][i]);
            dfs(graph, ans, path, graph[start][i], end);
            path.pop_back();
        }

=======

        vector<vector<int>> ret;
        vector<int> path;
        int n = graph.size();
        path.push_back(0);
        dfs(0, n, graph, path, ret);
        return ret;
    }
    void dfs(int u, int n, vector<vector<int>>& graph, vector<int>& path, vector<vector<int>>& ret) {
        if (u == n - 1) {
            ret.push_back(path);
            return;
        }
        for (int v : graph[u]) {
            path.push_back(v);
            dfs(v, n, graph, path, ret);
            path.pop_back();
        }
