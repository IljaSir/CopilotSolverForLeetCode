Synthesizing 9/10 solutions (Duplicates hidden)

=======

        long long res = 0;
        int n = nums1.size();
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        for (int i = 0; i < n; i++) {
            res += (long long)(nums1[i] - nums2[i]) * (nums1[i] - nums2[i]);
        }
        while (k1--) {
            int i = 0;
            while (i < n - 1 && nums1[i + 1] - nums1[i] <= nums1[i] - nums1[i - 1]) {
                i++;
            }
            res += (nums1[i] - nums1[i - 1]) * (nums1[i] - nums1[i - 1]) - (nums1[i + 1] - nums1[i]) * (nums1[i + 1] - nums1[i]);
            swap(nums1[i], nums1[i - 1]);
        }
        while (k2--) {
            int i = 0;
            while (i < n - 1 && nums2[i + 1] - nums2[i] <= nums2[i] - nums2[i - 1]) {
                i++;
            }
            res += (nums2[i] - nums2[i - 1]) * (nums2[i] - nums2[i - 1]) - (nums2[i + 1] - nums2[i]) * (nums2[i + 1] - nums2[i]);
            swap(nums2[i], nums2[i - 1]);
        }
        return res;

=======

        long long res = 0;
        int n = nums1.size();
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        for (int i = 0; i < n; ++i) {
            res += (long long)(nums1[i] - nums2[i]) * (nums1[i] - nums2[i]);
        }
        vector<pair<int, int>> diff;
        for (int i = 0; i < n; ++i) {
            if (nums1[i] > nums2[i]) {
                diff.push_back({nums1[i] - nums2[i], 1});
            } else if (nums1[i] < nums2[i]) {
                diff.push_back({nums2[i] - nums1[i], 2});
            }
        }
        sort(diff.begin(), diff.end());
        for (auto& p : diff) {
            if (p.second == 1 && k1 > 0) {
                res -= (long long)p.first * p.first * 2;
                --k1;
            } else if (p.second == 2 && k2 > 0) {
                res -= (long long)p.first * p.first * 2;
                --k2;
            }
            if (k1 == 0 && k2 == 0) {
                break;
            }
        }
        return res;

=======

        int n = nums1.size();
        vector<int> diff(n);
        for (int i = 0; i < n; ++i) {
            diff[i] = nums1[i] - nums2[i];
        }
        sort(diff.begin(), diff.end());
        auto getSum = [&](int k) {
            long long sum = 0;
            for (int i = 0; i < n; ++i) {
                int d = diff[i];
                if (d < 0) {
                    if (k > 0) {
                        sum += 1LL * d * d;
                        --k;
                    } else {
                        sum += 1LL * d * d;
                    }
                } else {
                    if (k > 0) {
                        sum += 1LL * d * d;
                        --k;
                    } else {
                        sum += 1LL * d * d;
                    }
                }
            }
            return sum;
        };
        long long ans = 1e18;
        for (int i = 0; i <= k1; ++i) {
            ans = min(ans, getSum(k2 - k1 + i));
        }
        return ans;

=======

        int n = nums1.size();
        vector<int> v1 = nums1, v2 = nums2;
        sort(v1.begin(), v1.end());
        sort(v2.begin(), v2.end());
        vector<long long> dp(n + 1, 0);
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + (long long)(nums1[i - 1] - nums2[i - 1]) * (nums1[i - 1] - nums2[i - 1]);
        }
        long long ans = dp[n];
        for (int i = 0; i < n; i++) {
            int delta1 = v1[i] - nums1[i];
            int delta2 = nums1[i] - v1[i - 1];
            int delta = min(delta1, delta2);
            if (delta * k1 >= (v1[i] - v1[i - 1])) {
                k1 -= (v1[i] - v1[i - 1]) / delta;
                ans = min(ans, dp[i] + (v1[i] - v1[i - 1]) * (v1[i] - v1[i - 1]) + dp[n] - dp[i + 1]);
            } else {
                ans = min(ans, dp[i] + (long long)k1 * delta * delta + dp[n] - dp[i + 1]);
                break;
            }
        }
        for (int i = 0; i < n; i++) {
            int delta1 = v2[i] - nums2[i];
            int delta2 = nums2[i] - v2[i - 1];
            int delta = min(delta1, delta2);
            if (delta * k2 >= (v2[i] - v2[i - 1])) {
                k2 -= (v2[i] - v2[i - 1]) / delta;
                ans = min(ans, dp[i] + (v2[i] - v2[i - 1]) * (v2[i] - v2[i - 1]) + dp[n] - dp[i + 1]);
            } else {
                ans = min(ans, dp[i] + (long long)k2 * delta * delta + dp[n] -

=======

        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int n = nums1.size();
        vector<int> dp(n + 1);
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] + (nums1[i - 1] - nums2[i - 1]) * (nums1[i - 1] - nums2[i - 1]);
        }
        long long ans = dp[n];
        for (int i = 0; i < n; i++) {
            int l = 0, r = n;
            while (l < r) {
                int mid = l + r >> 1;
                if (nums1[mid] < nums2[i]) l = mid + 1;
                else r = mid;
            }
            if (l <= i) {
                if (l) ans = min(ans, dp[l - 1] + dp[n] - dp[n - i + l - 1] + 1LL * (i - l + 1) * (nums1[l] - nums2[i]) * (nums1[l] - nums2[i]) + 1LL * (l - i + n - 1) * (nums1[l - 1] - nums2[i]) * (nums1[l - 1] - nums2[i]));
                else ans = min(ans, dp[n] - dp[n - i] + 1LL * (i + 1) * (nums1[l] - nums2[i]) * (nums1[l] - nums2[i]));
            } else {
                if (l < n) ans = min(ans, dp[i] + dp[n] - dp[n - l + i] + 1LL * (l - i) * (nums1[l] - nums2[i]) * (nums1[l] - nums2[i]) + 1LL * (l - i - 1) * (nums1[l - 1] - nums2[i]) * (nums1[l - 1] - nums2[i]));
                else ans = min(ans, dp[i] + 1LL * (l - i) * (nums1[l - 1] - nums2[i]) * (nums1[l - 1] - nums2[i

=======

        int n = nums1.size();
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        vector<long long> dp(n + 1, 1e18);
        dp[0] = 0;
        for (int i = 1; i <= k1; ++i) {
            vector<long long> ndp(n + 1, 1e18);
            for (int j = 1; j <= n; ++j) {
                ndp[j] = min(ndp[j], ndp[j - 1] + 1LL * (nums1[j - 1] - nums2[0]) * (nums1[j - 1] - nums2[0]));
                ndp[j] = min(ndp[j], dp[j] + 1LL * (nums1[j - 1] - nums2[j - 1]) * (nums1[j - 1] - nums2[j - 1]));
            }
            dp = ndp;
        }
        for (int i = 1; i <= k2; ++i) {
            vector<long long> ndp(n + 1, 1e18);
            for (int j = 1; j <= n; ++j) {
                ndp[j] = min(ndp[j], ndp[j - 1] + 1LL * (nums2[j - 1] - nums1[0]) * (nums2[j - 1] - nums1[0]));
                ndp[j] = min(ndp[j], dp[j] + 1LL * (nums1[j - 1] - nums2[j - 1]) * (nums1[j - 1] - nums2[j - 1]));
            }
            dp = ndp;
        }
        return dp[n];

=======

        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        int n = nums1.size();
        int i = 0, j = 0;
        int k = k1 + k2;
        while (k--) {
            if (i < n && j < n) {
                if (abs(nums1[i] - nums2[j]) < abs(nums1[i + 1] - nums2[j + 1])) {
                    ++i;
                } else {
                    ++j;
                }
            } else if (i < n) {
                ++i;
            } else {
                ++j;
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += (long long)(nums1[i] - nums2[i]) * (nums1[i] - nums2[i]);
        }
        return ans;

=======

        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        //cout << nums1 << nums2 << endl;
        int n = nums1.size();
        int i = 0, j = 0;
        while (k1-- > 0) {
            if (i < n && j < n) {
                if (nums1[i] < nums2[j]) {
                    ++i;
                } else {
                    ++j;
                }
            } else if (i < n) {
                ++i;
            } else {
                ++j;
            }
        }
        //cout << i << j << endl;
        long long ans = 0;
        for (int k = 0; k < n; ++k) {
            ans += (long long)(nums1[k] - nums2[k]) * (nums1[k] - nums2[k]);
        }
        //cout << ans << endl;
        while (k2-- > 0) {
            if (i < n && j < n) {
                if (nums1[i] < nums2[j]) {
                    ans += (long long)(nums2[j] - nums1[i]) * (nums2[j] - nums1[i]);
                    ans -= (long long)(nums1[i] - nums2[k]) * (nums1[i] - nums2[k]);
                    ++i;
                    ++j;
                } else {
                    ans += (long long)(nums1[i] - nums2[j]) * (nums1[i] - nums2[j]);
                    ans -= (long long)(nums2[j] - nums1[k]) * (nums2[j] - nums1[k]);
                    ++i;
                    ++j;
                }
            } else if (i < n) {
                ans += (long long)(nums1[i] - nums2[k]) * (nums1[i] - nums2[k]);
                ++i;
            } else {
                ans += (long long)(nums2[j] - nums1[k]) * (nums2[j] - nums1[k]);
                ++j;
            }
        }
        return ans;
