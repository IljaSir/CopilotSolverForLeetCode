Synthesizing 10/10 solutions

=======

        vector<int> res;
        int jumbo = (tomatoSlices - 2 * cheeseSlices) / 2;
        int small = cheeseSlices - jumbo;
        if (jumbo >= 0 && small >= 0 && 4 * jumbo + 2 * small == tomatoSlices) {
            res.push_back(jumbo);
            res.push_back(small);
        }
        return res;

=======

        vector<int> res;
        int a = (tomatoSlices - 2 * cheeseSlices) / 2;
        int b = cheeseSlices - a;
        if (a >= 0 && b >= 0 && a * 4 + b * 2 == tomatoSlices) {
            res.push_back(a);
            res.push_back(b);
        }
        return res;

=======

        vector<int> res;
        if (tomatoSlices % 2 == 1) return res;
        int x = tomatoSlices / 2 - cheeseSlices;
        int y = cheeseSlices - x;
        if (x >= 0 && y >= 0 && x + y == cheeseSlices && 4 * x + 2 * y == tomatoSlices) {
            res.push_back(x);
            res.push_back(y);
        }
        return res;

=======

        int jumbo = 0;
        int small = 0;
        if (tomatoSlices % 2 == 0) {
            jumbo = tomatoSlices / 2 - cheeseSlices;
            small = cheeseSlices - jumbo;
        }
        if (jumbo < 0 || small < 0) {
            return {};
        }
        return {jumbo, small};

=======

        int x = 0, y = 0;
        if (tomatoSlices % 2 == 0) {
            x = tomatoSlices / 2 - cheeseSlices;
            y = cheeseSlices - x;
            if (x >= 0 && y >= 0 && 4 * x + 2 * y == tomatoSlices)
                return {x, y};
        }
        return {};

=======

        if(tomatoSlices % 2) return {};
        if(tomatoSlices < 2 * cheeseSlices) return {};
        if(tomatoSlices > 4 * cheeseSlices) return {};
        int a = (tomatoSlices - 2 * cheeseSlices) / 2;
        int b = cheeseSlices - a;
        return {a, b};

=======

        vector<int> res;
        if (tomatoSlices % 2 == 1) {
            return res;
        }
        int small = tomatoSlices / 2 - cheeseSlices;
        int jumbo = cheeseSlices - small;
        if (small >= 0 && jumbo >= 0) {
            res.push_back(jumbo);
            res.push_back(small);
        }
        return res;

=======

        vector<int> ans;
        if (tomatoSlices % 2 == 1)
            return ans;
        if (tomatoSlices < 2 * cheeseSlices || tomatoSlices > 4 * cheeseSlices)
            return ans;
        ans.push_back((tomatoSlices - 2 * cheeseSlices) / 2);
        ans.push_back(cheeseSlices - ans[0]);
        return ans;

=======

        vector<int> res;
        if (tomatoSlices % 2 || tomatoSlices < 2 * cheeseSlices || tomatoSlices > 4 * cheeseSlices) {
            return res;
        }
        int jumbo = (tomatoSlices - 2 * cheeseSlices) / 2;
        int small = cheeseSlices - jumbo;
        res.push_back(jumbo);
        res.push_back(small);
        return res;

=======

        vector<int> res;
        int jumbo = 0;
        int small = 0;
        if(tomatoSlices < cheeseSlices) return res;
        if(tomatoSlices % 2 != 0) return res;
        if(tomatoSlices == 0 && cheeseSlices == 0) {
            res.push_back(0);
            res.push_back(0);
            return res;
        }
        if(tomatoSlices == 0 && cheeseSlices != 0) return res;
        if(tomatoSlices != 0 && cheeseSlices == 0) return res;
        if(tomatoSlices % 2 == 0) {
            jumbo = tomatoSlices / 2 - cheeseSlices;
            small = cheeseSlices - jumbo;
            if(jumbo < 0 || small < 0) return res;
            res.push_back(jumbo);
            res.push_back(small);
            return res;
        }
        return res;
