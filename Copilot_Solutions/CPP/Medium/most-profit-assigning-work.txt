Synthesizing 9/10 solutions

=======

        vector<pair<int, int>> jobs;
        for (int i = 0; i < difficulty.size(); i++) {
            jobs.push_back({difficulty[i], profit[i]});
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int totalProfit = 0;
        int bestProfit = 0;
        int j = 0;
        for (int i = 0; i < worker.size(); i++) {
            while (j < jobs.size() && jobs[j].first <= worker[i]) {
                bestProfit = max(bestProfit, jobs[j].second);
                j++;
            }
            totalProfit += bestProfit;
        }
        return totalProfit;

=======

        vector<pair<int, int>> jobs;
        for (int i = 0; i < difficulty.size(); ++i) {
            jobs.push_back(make_pair(difficulty[i], profit[i]));
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int maxProfit = 0;
        int bestProfit = 0;
        int i = 0;
        for (int ability: worker) {
            while (i < jobs.size() && jobs[i].first <= ability) {
                bestProfit = max(bestProfit, jobs[i].second);
                ++i;
            }
            maxProfit += bestProfit;
        }
        return maxProfit;

=======

        vector<pair<int, int>> jobs;
        for (int i = 0; i < difficulty.size(); ++i) {
            jobs.push_back(make_pair(difficulty[i], profit[i]));
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int ans = 0;
        int i = 0;
        int best = 0;
        for (int skill : worker) {
            while (i < jobs.size() && skill >= jobs[i].first) {
                best = max(best, jobs[i].second);
                ++i;
            }
            ans += best;
        }
        return ans;

=======

        int n = difficulty.size();
        vector<pair<int, int>> jobs;
        for (int i = 0; i < n; ++i) {
            jobs.emplace_back(difficulty[i], profit[i]);
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int ans = 0, best = 0, i = 0;
        for (int ability: worker) {
            while (i < n && ability >= jobs[i].first) {
                best = max(best, jobs[i++].second);
            }
            ans += best;
        }
        return ans;

=======

        int n = difficulty.size();
        vector<vector<int>> jobs(n, vector<int>(2, 0));
        for (int i = 0; i < n; ++i) {
            jobs[i][0] = difficulty[i];
            jobs[i][1] = profit[i];
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int ans = 0;
        int i = 0, best = 0;
        for (int ability: worker) {
            while (i < n && ability >= jobs[i][0]) {
                best = max(best, jobs[i][1]);
                ++i;
            }
            ans += best;
        }
        return ans;

=======

        int n = difficulty.size();
        vector<pair<int, int>> jobs;
        for (int i = 0; i < n; i++)
            jobs.push_back({difficulty[i], profit[i]});
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int ans = 0;
        int j = 0, best = 0;
        for (int skill: worker) {
            while (j < n && skill >= jobs[j].first)
                best = max(best, jobs[j++].second);
            ans += best;
        }
        return ans;

=======

        vector<pair<int, int>> vp;
        for (int i = 0; i < difficulty.size(); i++) {
            vp.push_back({difficulty[i], profit[i]});
        }
        sort(vp.begin(), vp.end());
        int maxProfit = 0;
        for (int i = 0; i < vp.size(); i++) {
            maxProfit = max(maxProfit, vp[i].second);
            vp[i].second = maxProfit;
        }
        int res = 0;
        for (int i = 0; i < worker.size(); i++) {
            int j = upper_bound(vp.begin(), vp.end(), make_pair(worker[i], INT_MAX)) - vp.begin();
            if (j > 0) {
                res += vp[j - 1].second;
            }
        }
        return res;

=======

        int n = difficulty.size();
        int m = worker.size();
        vector<pair<int, int>> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = {difficulty[i], profit[i]};
        }
        sort(dp.begin(), dp.end());
        sort(worker.begin(), worker.end());
        int res = 0;
        int maxProfit = 0;
        int j = 0;
        for (int i = 0; i < m; i++) {
            while (j < n && dp[j].first <= worker[i]) {
                maxProfit = max(maxProfit, dp[j].second);
                j++;
            }
            res += maxProfit;
        }
        return res;

=======

        vector<pair<int,int>> jobs;
        int n = difficulty.size();
        for(int i = 0; i < n; i++){
            jobs.push_back({difficulty[i], profit[i]});
        }
        sort(jobs.begin(), jobs.end());
        sort(worker.begin(), worker.end());
        int j = 0, maxp = 0, res = 0;
        for(int i = 0; i < worker.size(); i++){
            while(j < n && jobs[j].first <= worker[i]){
                maxp = max(maxp, jobs[j].second);
                j++;
            }
            res += maxp;
        }
        return res;
