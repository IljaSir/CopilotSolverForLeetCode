Synthesizing 10/10 solutions

=======

        vector<int> sums;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int res = 0;
        for (int i = left - 1; i < right; i++) {
            res += sums[i];
            res %= 1000000007;
        }
        return res;

=======

        vector<int> sums;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int ans = 0;
        for (int i = left - 1; i < right; i++) {
            ans += sums[i];
            ans %= 1000000007;
        }
        return ans;

=======

        vector<int> sums;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int ans = 0;
        for (int i = left - 1; i <= right - 1; i++) {
            ans = (ans + sums[i]) % 1000000007;
        }
        return ans;

=======

        vector<int> sums;
        for (int i = 0; i < nums.size(); ++i) {
            int sum = 0;
            for (int j = i; j < nums.size(); ++j) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int64_t sum = 0;
        for (int i = left - 1; i < right; ++i) {
            sum += sums[i];
        }
        return sum % 1000000007;

=======

        vector<int> v;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                v.push_back(sum);
            }
        }
        sort(v.begin(), v.end());
        int sum = 0;
        for (int i = left - 1; i < right; i++) {
            sum += v[i];
        }
        return sum;

=======

        vector<int> sums;
        for (int i = 0; i < n; ++i) {
            int sum = nums[i];
            sums.push_back(sum);
            for (int j = i+1; j < n; ++j) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int res = 0;
        for (int i = left-1; i < right; ++i) {
            res = (res + sums[i]) % 1000000007;
        }
        return res;

=======

        vector<int> sums;
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum = 0;
            for (int j = i; j < n; ++j) {
                sum += nums[j];
                sums.push_back(sum);
            }
        }
        sort(sums.begin(), sums.end());
        int mod = 1000000007;
        sum = 0;
        for (int i = left - 1; i < right; ++i) {
            sum += sums[i];
            sum %= mod;
        }
        return sum;

=======

        vector<int> sum;
        for (int i=0; i<n; i++) {
            int s = 0;
            for (int j=i; j<n; j++) {
                s += nums[j];
                sum.push_back(s);
            }
        }
        sort(sum.begin(), sum.end());
        int res = 0;
        for (int i=left-1; i<=right-1; i++) {
            res += sum[i];
            res %= 1000000007;
        }
        return res;

=======

        vector<int> sum;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int s = 0;
            for (int j = i; j < n; j++) {
                s += nums[j];
                sum.push_back(s);
            }
        }
        sort(sum.begin(), sum.end());
        for (int i = left - 1; i < right; i++) {
            ans += sum[i];
            ans %= 1000000007;
        }
        return ans;

=======

        vector<long> sum(n, 0);
        for (int i = 0; i < n; ++i) {
            sum[i] = nums[i];
            if (i > 0) sum[i] += sum[i-1];
        }
        vector<long> sums;
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                sums.push_back(sum[j] - (i > 0 ? sum[i-1] : 0));
            }
        }
        sort(sums.begin(), sums.end());
        long ans = 0;
        for (int i = left - 1; i < right; ++i) {
            ans += sums[i];
        }
        return ans % 1000000007;
