Synthesizing 10/10 solutions

=======

        unordered_map<string, string> m;
        for (auto& kv : knowledge) {
            m[kv[0]] = kv[1];
        }
        string res;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') {
                    ++j;
                }
                string key = s.substr(i + 1, j - i - 1);
                res += m.count(key) ? m[key] : "?";
                i = j;
            } else {
                res += s[i];
            }
        }
        return res;

=======

        unordered_map<string, string> m;
        for (auto& k : knowledge) {
            m[k[0]] = k[1];
        }
        string ans;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') {
                    ++j;
                }
                string key = s.substr(i + 1, j - i - 1);
                if (m.count(key)) {
                    ans += m[key];
                } else {
                    ans += '?';
                }
                i = j;
            } else {
                ans += s[i];
            }
        }
        return ans;

=======

        unordered_map<string, string> m;
        for (auto& v : knowledge) {
            m[v[0]] = v[1];
        }
        string res = "";
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') j++;
                if (j < s.size()) {
                    string k = s.substr(i + 1, j - i - 1);
                    if (m.find(k) != m.end()) {
                        res += m[k];
                    } else {
                        res += "?";
                    }
                    i = j;
                } else {
                    res += "?";
                }
            } else {
                res += s[i];
            }
        }
        return res;

=======

        unordered_map<string, string> mp;
        for (auto &v : knowledge) {
            mp[v[0]] = v[1];
        }
        string res;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                string key;
                while (s[++i] != ')') {
                    key += s[i];
                }
                res += mp.count(key) ? mp[key] : "?";
            } else {
                res += s[i];
            }
        }
        return res;

=======

        unordered_map<string, string> m;
        for (auto& k : knowledge) {
            m[k[0]] = k[1];
        }
        string ans;
        int n = s.size();
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < n && s[j] != ')') {
                    ++j;
                }
                string key = s.substr(i + 1, j - i - 1);
                if (m.count(key)) {
                    ans += m[key];
                } else {
                    ans += "?";
                }
                i = j;
            } else {
                ans += s[i];
            }
        }
        return ans;

=======

        unordered_map<string, string> kv;
        for (auto& item : knowledge) {
            kv[item[0]] = item[1];
        }
        string res;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') {
                    j++;
                }
                string key = s.substr(i + 1, j - i - 1);
                if (kv.count(key)) {
                    res += kv[key];
                } else {
                    res += '?';
                }
                i = j;
            } else {
                res += s[i];
            }
        }
        return res;

=======

        unordered_map<string, string> map;
        for (auto &v: knowledge) {
            map[v[0]] = v[1];
        }
        string ans;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') ++j;
                string key = s.substr(i + 1, j - i - 1);
                if (map.find(key) != map.end()) {
                    ans += map[key];
                } else {
                    ans += '?';
                }
                i = j;
            } else {
                ans += s[i];
            }
        }
        return ans;

=======

        unordered_map<string, string> map;
        for (auto &item : knowledge) {
            map[item[0]] = item[1];
        }
        string result;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (s[j] != ')') {
                    ++j;
                }
                string key = s.substr(i + 1, j - i - 1);
                if (map.find(key) != map.end()) {
                    result += map[key];
                } else {
                    result += '?';
                }
                i = j;
            } else {
                result += s[i];
            }
        }
        return result;

=======

        unordered_map<string, string> kv;
        for (auto& k: knowledge) {
            kv[k[0]] = k[1];
        }
        string ans;
        int i = 0;
        while (i < s.size()) {
            if (s[i] == '(') {
                int j = i + 1;
                while (s[j] != ')') ++j;
                string k = s.substr(i + 1, j - i - 1);
                if (kv.count(k)) {
                    ans += kv[k];
                } else {
                    ans += '?';
                }
                i = j + 1;
            } else {
                ans += s[i];
                ++i;
            }
        }
        return ans;

=======

        unordered_map<string, string> dict;
        for (auto &v : knowledge) {
            dict[v[0]] = v[1];
        }
        string ans;
        for (int i=0; i<s.size(); ++i) {
            if (s[i] == '(') {
                int j = i + 1;
                while (j < s.size() && s[j] != ')') {
                    ++j;
                }
                string key = s.substr(i+1, j-i-1);
                if (dict.count(key)) {
                    ans += dict[key];
                } else {
                    ans += '?';
                }
                i = j;
            } else {
                ans += s[i];
            }
        }
        return ans;
