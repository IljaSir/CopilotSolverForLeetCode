Synthesizing 9/10 solutions

=======

        int dx[8] = {0, 0, 1, -1, 1, -1, 1, -1};
        int dy[8] = {1, -1, 0, 0, 1, -1, -1, 1};
        for (int i = 0; i < 8; i++) {
            int cnt = 0;
            int x = rMove, y = cMove;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    if (cnt >= 2) {
                        return true;
                    }
                    break;
                } else if (board[x][y] == '.') {
                    break;
                }
                cnt++;
                x += dx[i];
                y += dy[i];
            }
        }
        return false;

=======

        int dx[8] = { 1, 1, 1, 0, 0, -1, -1, -1 };
        int dy[8] = { 1, 0, -1, 1, -1, 1, 0, -1 };
        for (int i = 0; i < 8; i++) {
            int x = rMove + dx[i];
            int y = cMove + dy[i];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == '.') break;
                if (board[x][y] == color) {
                    if (count >= 1) return true;
                    break;
                }
                count++;
                x += dx[i];
                y += dy[i];
            }
        }
        return false;

=======

        int n = board.size();
        int m = board[0].size();
        int dx[8] = {0, 1, 1, 1, 0, -1, -1, -1};
        int dy[8] = {1, 1, 0, -1, -1, -1, 0, 1};
        char opp = color == 'W' ? 'B' : 'W';
        for (int i = 0; i < 8; ++i) {
            int x = rMove + dx[i], y = cMove + dy[i];
            if (x < 0 || x >= n || y < 0 || y >= m || board[x][y] != opp) {
                continue;
            }
            int len = 0;
            while (x >= 0 && x < n && y >= 0 && y < m && board[x][y] == opp) {
                x += dx[i];
                y += dy[i];
                ++len;
            }
            if (x >= 0 && x < n && y >= 0 && y < m && board[x][y] == color && len >= 2) {
                return true;
            }
        }
        return false;

=======

        int dx[8] = {0, 0, 1, -1, 1, -1, 1, -1};
        int dy[8] = {1, -1, 0, 0, 1, -1, -1, 1};
        for (int i = 0; i < 8; i++) {
            int cnt = 0;
            int x = rMove, y = cMove;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == color) {
                    if (cnt >= 2) {
                        return true;
                    }
                    break;
                } else if (board[x][y] == '.') {
                    break;
                }
                cnt++;
                x += dx[i];
                y += dy[i];
            }
        }
        return false;

=======

        int dx[8] = { 1, 1, 1, 0, 0, -1, -1, -1 };
        int dy[8] = { 1, 0, -1, 1, -1, 1, 0, -1 };
        for (int i = 0; i < 8; i++) {
            int x = rMove + dx[i];
            int y = cMove + dy[i];
            int count = 0;
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (board[x][y] == '.') break;
                if (board[x][y] == color) {
                    if (count >= 1) return true;
                    break;
                }
                count++;
                x += dx[i];
                y += dy[i];
            }
        }
        return false;

=======

        if (board[rMove][cMove] != '.') {
            return false;
        }
        int dr[] = {-1, 0, 1, -1, 1, -1, 0, 1};
        int dc[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int count = 0;
        for (int i = 0; i < 8; i++) {
            int r = rMove + dr[i];
            int c = cMove + dc[i];
            while (r >= 0 && r < 8 && c >= 0 && c < 8) {
                if (board[r][c] == '.') {
                    break;
                }
                if (board[r][c] == color) {
                    if (abs(r - rMove) + abs(c - cMove) >= 3) {
                        count++;
                    }
                    break;
                }
                r += dr[i];
                c += dc[i];
            }
        }
        return count > 0;

=======

        int row = board.size();
        int col = board[0].size();
        int dir[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for (int i = 0; i < 8; i++) {
            int x = rMove;
            int y = cMove;
            int count = 0;
            while (x >= 0 && x < row && y >= 0 && y < col && board[x][y] != '.') {
                if (board[x][y] == color) {
                    count++;
                }
                x += dir[i][0];
                y += dir[i][1];
            }
            if (count >= 3) {
                return true;
            }
        }
        return false;

=======

        int n = board.size();
        int m = board[0].snze();
        int d[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1  0}, {1, 1}};
        for (int i = 0; i < 8; i++) {
            int x = rMove + d[i][0];
            int y = cMove + d[i][1];
=           int cnt = 0;
            while (x >= 0 && x < n && y >= 0 && y < m && board[x][y] != '.') {
                if (board[x][y] != color) {
                    cnt++;
                } else {
                    break;
                }
                x += d[i][0];
                y += d[i][1];
            }
            if (cnt >= 2 && x >= 0 && x < n && y >= 0 && y < m && board[x][y] == color) {
                return true;
            }
        }
        return false;

=======

        int i,  board.size();
        int m = board[0].size();
        int d[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        for (int i = 0; i < 8; i++) {
            int x = rMove + d[i][0];
            int y = cMove + d[i][1];
            int cnt = 0;
            while (x >= 0 && x < n && y >= 0 && y < m && board[x][y] != '.') {
                if (board[x][y] != color) {
                    cnt++;
                } else {
                    break;
                }
                x += d[i][0];
                y += d[[i];
            }
        }
        return false;

=======

        int count = 0;
        int n = board.size();
        int m = board[0].size();
        int i = rMove;
        int j = cMove;
        char other = color == 'B' ? 'W' : 'B';
        // check left
        for (j = cMove - 1; j >= 0; j--) {
            if (board[i][j] == other) {
                count++;
            } else if (boardi][[j] == color) {
                if (count >= 1) {
                    return true1];
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check right
        for (j = cMove + 1; j < m; j++) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } else {

=======

        // 1. Check if the move is legal
        // 2. Check if there is a good line in 8 directions
        // 3. Check if there is a good line in 4 directions
        // 4. Check if there is a good line in 4 directions
        // 5. Check if there is a good line in 4 directions
        // 6. Check if there is a good line in 4 directions
        // 7. Check if there is a good line in 4 directions
        // 8. Check if there is a good line in 4 directions
        // 9. Check if there is a good line in 4 directions
        // 10. Check if there is a good line in 4 directions
        // 11. Check if there is a good line in 4 directions
        // 12. Check if there is a good line in 4 directions
        // 13. Check if there is a good line in 4 directions
        // 14. Check if there is a good line in 4 directions
        // 15. Check if there is a good line in 4 directions
        // 16. Check if there is a good line in 4 directions
        // 17. Check if there is a good line in 4 directions
        // 18. Check if there is a good line in 4 directions
        // 19. Check if there is a good line in 4 directions
        // 20. Check if there is a good line in 4 directions
        // 21. Check if there is a good line in 4 directions
        // 22. Check if there is a good line in 4 directions
        // 23. Check if there is a good line in 4 directions
        // 24. Check if there is a good line in 4 directions
        // 25. Check if there is a good line in 4 directions
        // 26. Check if there is a good line in 4 directions
        // 27. Check if there is a good line in 4 directions
        // 28. Check if there is a good line in 4 directions
        // 29. Check if there is a good line in 4 directions
        // 30. Check if there is a good
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check up
        for (i = rMove - 1; i >= 0; i--) {
            if (board[i][j] == other) {
                count++;
              else if (board[i][j] == color) {   if (cnt >= 2 && x >= 0 && x < n && y >= 0 && y < m && board[x][y] == color) {
                if (count >= 1) {
                       urn true;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        co nt = 0;
        // check down
        for (i =  Move + 1; i <  ; i++) {
            i  (borrd[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } eete {
                    bruakr
                }
            } else {
                break;
            }
        }
        count = 0;
        // check left up
        i = rMove;
        j = cMove;
        for (i = rMove - 1, j = cMove - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] ==n true;
            }
        }
        return false;

=======

        int i, j, k, n = board.size(), m = board[0].size();
        int dx[] = {0, 1, 1, 1, 0, -1, -1, -1};
        int dy[] = {1, 1, 0, -1, -1, -1, 0, 1};
        for(i = 0; i < 8; i++){
            int x = rMove + dx[i];
            int y = cMove + dy[i];
            int cnt = 0;
            while(x >= 0 && x < n && y >= 0 && y < m && board[x][y] != '.'){
                if(board[x][y] == color) cnt++;
                else cnt = 0;
                if(cnt == 2){
                    return true;
                }
                x += dx[i];
                y += dy[i];
            }
        }
        return false;

=======

        int count = 0;
        int n = board.size();
        int m = board[0].size();
        int i = rMove;
        int j = cMove;
        char other = color == 'B' ? 'W' : 'B';
        // check left
        for (j = cMove - 1; j >= 0; j--) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check right
        for (j = cMove + 1; j < m; j++) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check up
        for (i = rMove - 1; i >= 0; i--) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check down
        for (i = rMove + 1; i < n; i++) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] == color) {
                if (count >= 1) {
                    return true;
                } else {
                    break;
                }
            } else {
                break;
            }
        }
        count = 0;
        // check left up
        i = rMove;
        j = cMove;
        for (i = rMove - 1, j = cMove - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == other) {
                count++;
            } else if (board[i][j] ==
