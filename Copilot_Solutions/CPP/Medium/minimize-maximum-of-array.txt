Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int avg = sum / (n - 1);
        if (sum % (n - 1) != 0) {
            avg++;
        }
        return avg;

=======

        int n = nums.size(), sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int avg = sum / (n - 1);
        if (sum % (n - 1)) avg++;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = max(ans, nums[i] - avg);
        }
        return ans;

=======

        int n = nums.size();
        int max = nums[0];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        int min = max;
        for (int i = 0; i < n; i++) {
            int temp = sum - (n - i) * nums[i];
            if (temp < min) {
                min = temp;
            }
        }
        return min;

=======

        long long sum = 0;
        int maxV = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            maxV = max(maxV, nums[i]);
        }
        return (sum - maxV) % (nums.size() - 1) == 0 ? (sum - maxV) / (nums.size() - 1) : (sum - maxV) / (nums.size() - 1) + 1;

=======

        long long sum = 0;
        for (int i = 0; i < nums.size(); i++) sum += nums[i];
        long long avg = sum / (nums.size() - 1);
        if (sum % (nums.size() - 1) != 0) avg++;
        return avg;

=======

        int sum = 0;
        int max = 0;
        for (int n : nums) {
            sum += n;
            max = std::max(max, n);
        }
        return std::max(0, max - (sum - max + 1));

=======

        int sum = accumulate(nums.begin(), nums.end(), 0);
        int n = nums.size();
        int avg = sum / n;
        int rem = sum % n;
        int ans = avg * (n - rem) + avg * (avg + 1) / 2 * rem;
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
        }
        int res = sum;
        int pre = 0;
        for (int i = 0; i < n - 1; ++i) {
            pre += nums[i];
            res = min(res, max(pre, sum - pre));
        }
        return res;

=======

        long long sum = 0;
        for (int num: nums) {
            sum += num;
        }
        long long res = sum;
        long long cur = 0;
        for (int i = 0; i < nums.size() - 1; ++i) {
            cur += nums[i];
            res = min(res, max(cur, sum - cur));
        }
        return res;

=======

        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        int minVal = sum;
        int currSum = 0;
        for(int i = 0; i < n - 1; i++){
            currSum += nums[i];
            minVal = min(minVal, max(currSum, sum - currSum));
        }
        return minVal;
