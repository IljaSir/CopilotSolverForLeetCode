Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> left(n), right(n);
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = max(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = min(right[i + 1], nums[i]);
        }
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] > left[i - 1] && nums[i] < right[i + 1]) {
                ans += 2;
            } else if (nums[i] > nums[i - 1] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> left(n, 0), right(n, 0);
        left[0] = nums[0];
        right[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = max(nums[i], left[i - 1]);
            right[n - 1 - i] = min(nums[n - 1 - i], right[n - i]);
        }
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] > left[i - 1] && nums[i] < right[i + 1]) {
                ans += 2;
            } else if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> left(n);
        vector<int> right(n);
        left[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            left[i] = max(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = min(right[i + 1], nums[i]);
        }
        for (int i = 1; i < n - 1; ++i) {
            if (nums[i] > left[i - 1] && nums[i] < right[i + 1]) {
                ans += 2;
            } else if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int ans = 0;
        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i=1; i<n; i++) {
            left[i] = max(left[i-1], nums[i]);
        }
        for(int i=n-2; i>=0; i--) {
            right[i] = min(right[i+1], nums[i]);
        }
        for(int i=1; i<n-1; i++) {
            if(nums[i] > left[i-1] && nums[i] < right[i+1]) {
                ans += 2;
            } else if(nums[i] > nums[i-1] && nums[i] < nums[i+1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> right(n);
        right[n-1] = nums[n-1];
        for (int i = n-2; i >= 0; --i) {
            right[i] = min(nums[i], right[i+1]);
        }
        int left = nums[0];
        int ans = 0;
        for (int i = 1; i < n-1; ++i) {
            if (left < nums[i] && nums[i] < right[i+1]) {
                ans += 2;
            } else if (nums[i-1] < nums[i] && nums[i] < nums[i+1]) {
                ans += 1;
            }
            left = max(left, nums[i]);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> maxLeft(n);
        vector<int> minRight(n);
        maxLeft[0] = nums[0];
        minRight[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            maxLeft[i] = max(maxLeft[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            minRight[i] = min(minRight[i + 1], nums[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] > maxLeft[i - 1] && nums[i] < minRight[i + 1]) {
                ans += 2;
            } else if (nums[i] > nums[i - 1] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        vector<int> leftMax(n, 0), rightMin(n, 0);
        leftMax[0] = nums[0];
        rightMin[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            leftMax[i] = max(leftMax[i - 1], nums[i]);
            rightMin[n - i - 1] = min(rightMin[n - i], nums[n - i - 1]);
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] > leftMax[i - 1] && nums[i] < rightMin[i + 1]) {
                sum += 2;
            } else if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                sum += 1;
            }
        }
        return sum;

=======

        int n = nums.size();
        int ans = 0;
        int maxl[n];
        int minr[n];
        maxl[0] = nums[0];
        minr[n - 1] = nums[n - 1];
        for (int i = 1; i < n; ++i) {
            maxl[i] = max(maxl[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; --i) {
            minr[i] = min(minr[i + 1], nums[i]);
        }
        for (int i = 1; i < n - 1; ++i) {
            if (nums[i] > maxl[i - 1] && nums[i] < minr[i + 1]) {
                ans += 2;
            } else if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;

=======

        int len = nums.size();
        vector<int> minRight(len, INT_MAX);
        for (int i = len-2; i >= 0; --i) {
            minRight[i] = min(minRight[i+1], nums[i+1]);
        }
        int maxLeft = nums[0];
        int sum = 0;
        for (int i = 1; i < len-1; ++i) {
            if (nums[i] > maxLeft && nums[i] < minRight[i]) {
                sum += 2;
            } else if (nums[i-1] < nums[i] && nums[i] < nums[i+1]) {
                sum += 1;
            }
            maxLeft = max(maxLeft, nums[i]);
        }
        return sum;

=======

        int n = nums.size();
        vector<int> min(n, 0);
        vector<int> max(n, 0);
        int ans = 0;
        min[0] = nums[0];
        for (int i = 1; i < n; i++) {
            min[i] = min[i - 1];
            if (nums[i] < min[i]) {
                min[i] = nums[i];
            }
        }
        max[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            max[i] = max[i + 1];
            if (nums[i] > max[i]) {
                max[i] = nums[i];
            }
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] > min[i - 1] && nums[i] < max[i + 1]) {
                ans += 2;
            } else if (nums[i - 1] < nums[i] && nums[i] < nums[i + 1]) {
                ans += 1;
            }
        }
        return ans;
