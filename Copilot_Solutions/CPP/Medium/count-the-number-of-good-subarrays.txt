Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> cnt(n + 1);
        int tot = 0;
        long long ans = 0;
        cnt[0] = 1;
        for (int i = 0; i < n; ++i) {
            tot += nums[i] & 1;
            if (tot >= k) {
                ans += cnt[tot - k];
            }
            ++cnt[tot];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(n + 1);
        cnt[0] = 1;
        int sum = 0;
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            if (sum >= k) {
                ans += cnt[sum - k];
            }
            ++cnt[sum];
        }
        return ans;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        for (int i = 0; i < n; ++i) {
            nums[i] &= 1;
        }
        return countGood(nums, k) - countGood(nums, k - 1);

=======

        int n = nums.size();
        vector<int> cnt(n + 1, 0);
        cnt[0] = 1;
        int sum = 0;
        long long res = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum >= k) {
                res += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return res;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            nums[i] &= 1;
        }
        return countGood(nums, k) - countGood(nums, k - 1);

=======

        int n = nums.size();
        vector<int> cnt(n + 1, 0);
        cnt[0] = 1;
        long long res = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum - k >= 0) {
                res += cnt[sum - k];
            }
            cnt[sum]++;
        }
        return res;

=======

        int n = nums.size();
        vector<int> cnt(n + 1);
        int tot = 0;
        long long ret = 0;
        cnt[0] = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i] & 1) {
                tot++;
            }
            if (tot >= k) {
                ret += cnt[tot - k];
            }
            cnt[tot]++;
        }
        return ret;

=======

        int n = nums.size();
        vector<int> cnt(n + 1);
        int odd = 0, even = 0;
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] & 1) {
                ++odd;
            } else {
                ++even;
            }
            ++cnt[odd - even];
            if (odd - even >= k) {
                res += cnt[odd - even - k];
            }
        }
        return res;

=======

        int n = nums.size();
        long long ans = 0;
        int cnt = 0;
        unordered_map<int, int> m;
        m[0] = 1;
        for (int i = 0; i < n; ++i) {
            cnt += nums[i] % 2;
            ans += m[cnt - k];
            ++m[cnt];
        }
        return ans;

=======

        vector<int> cnt(nums.size()+1);
        cnt[0] = 1;
        int sum = 0;
        long long res = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum >= k) {
                res += cnt[sum-k];
            }
            cnt[sum]++;
        }
        return res;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        for (int i = 0; i < nums.size(); i++) {
            nums[i] = nums[i] % 2;
        }
        return countGood(nums, k) - countGood(nums, k-1);

=======

        int n = nums.size();
        int cnt = 0;
        vector<int> cnts(n + 1, 0);
        cnts[0] = 1;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (sum - k >= 0) {
                cnt += cnts[sum - k];
            }
            cnts[sum]++;
        }
        return cnt;

=======

        long long res = 0;
        int n = nums.size();
        vector<int> cnt(n + 1);
        int i = 0, j = 0;
        int tot = 0;
        while (j < n) {
            if (cnt[nums[j]] == 0) {
                tot++;
            }
            cnt[nums[j]]++;
            j++;
            while (tot > k) {
                cnt[nums[i]]--;
                if (cnt[nums[i]] == 0) {
                    tot--;
                }
                i++;
            }
            res += j - i;
        }
        return res;
