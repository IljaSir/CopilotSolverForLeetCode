Synthesizing 9/10 solutions

=======

        vector<vector<int>> res = {{}};
        for (int num : nums) {
            int n = res.size();
            for (int i = 0; i < n; i++) {
                res.push_back(res[i]);
                res.back().push_back(num);
            }
        }
        return res;

=======

        vector<vector<int>> res;
        vector<int> path;
        dfs(nums, 0, path, res);
        return res;
    }
    void dfs(vector<int>& nums, int index, vector<int>& path, vector<vector<int>>& res) {
        if (index == nums.size()) {
            res.push_back(path);
            return;
        }
        dfs(nums, index + 1, path, res);
        path.push_back(nums[index]);
        dfs(nums, index + 1, path, res);
        path.pop_back();

=======

        vector<vector<int>> result;
        vector<int> temp;
        backtrack(result, temp, nums, 0);
        return result;
    }
    
    void backtrack(vector<vector<int>>& result, vector<int>& temp, vector<int>& nums, int start)
    {
        result.push_back(temp);
        for(int i = start; i < nums.size(); i++)
        {
            temp.push_back(nums[i]);
            backtrack(result, temp, nums, i + 1);
            temp.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        result.push_back(temp);
        for (int i = 0; i < nums.size(); i++) {
            int size = result.size();
            for (int j = 0; j < size; j++) {
                temp = result[j];
                temp.push_back(nums[i]);
                result.push_back(temp);
            }
        }
        return result;

=======

        vector<vector<int>> result;
        vector<int> subset;
        subsets(nums, 0, subset, result);
        return result;
    }
    
    void subsets(vector<int>& nums, int start, vector<int>& subset, vector<vector<int>>& result) {
        result.push_back(subset);
        for (int i = start; i < nums.size(); i++) {
            subset.push_back(nums[i]);
            subsets(nums, i + 1, subset, result);
            subset.pop_back();
        }

=======

        vector<vector<int>> res;
        vector<int> tmp;
        int n = nums.size();
        for (int i = 0; i < (1 << n); i++) {
            tmp.clear();
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    tmp.push_back(nums[j]);
                }
            }
            res.push_back(tmp);
        }
        return res;

=======

        vector<vector<int>> res;
        vector<int> tmp;
        dfs(nums, 0, tmp, res);
        return res;
    }
    void dfs(vector<int>& nums, int index, vector<int>& tmp, vector<vector<int>>& res){
        if(index == nums.size()){
            res.push_back(tmp);
            return;
        }
        tmp.push_back(nums[index]);
        dfs(nums, index+1, tmp, res);
        tmp.pop_back();
        dfs(nums, index+1, tmp, res);

=======

        int n = nums.size();
        vector<vector<int>> res;
        vector<int> t;
        res.push_back(t);
        for(int i = 0; i < n; i++){
            int m = res.size();
            for(int j = 0; j < m; j++){
                t = res[j];
                t.push_back(nums[i]);
                res.push_back(t);
            }
        }
        return res;

=======

        vector<vector<int>> result;
        vector<int> tmp;
        result.push_back(tmp);
        if(nums.size() == 0) {
            return result;
        }
        for(int i = 0; i < nums.size(); i++) {
            int size = result.size();
            for(int j = 0; j < size; j++) {
                tmp = result[j];
                tmp.push_back(nums[i]);
                result.push_back(tmp);
            }
        }
        return result;
