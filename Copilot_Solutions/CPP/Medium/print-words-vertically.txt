Synthesizing 10/10 solutions

=======

        vector<string> words;
        string word;
        for (char c : s) {
            if (c == ' ') {
                words.push_back(word);
                word.clear();
            } else {
                word.push_back(c);
            }
        }
        words.push_back(word);
        vector<string> res;
        for (int i = 0; i < words.size(); i++) {
            string w = words[i];
            while (w.size() < s.size()) w.push_back(' ');
            if (res.empty()) {
                res.push_back(w);
            } else {
                for (int j = 0; j < w.size(); j++) {
                    res[j].push_back(w[j]);
                }
            }
        }
        for (int i = 0; i < res.size(); i++) {
            while (res[i].back() == ' ') res[i].pop_back();
        }
        return res;

=======

        vector<string> words;
        string word;
        for (char c : s) {
            if (c == ' ') {
                words.push_back(word);
                word.clear();
            } else {
                word += c;
            }
        }
        words.push_back(word);
        int max_len = 0;
        for (auto& w : words) {
            max_len = max(max_len, (int)w.length());
        }
        vector<string> ans(max_len);
        for (int i = 0; i < max_len; i++) {
            for (auto& w : words) {
                if (i < w.length()) {
                    ans[i] += w[i];
                } else {
                    ans[i] += ' ';
                }
            }
            while (!ans[i].empty() && ans[i].back() == ' ')
                ans[i].pop_back();
        }
        return ans;

=======

        vector<string> words;
        string word;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == ' ') {
                words.push_back(word);
                word.clear();
            } else {
                word.push_back(s[i]);
            }
        }
        words.push_back(word);
        int maxLen = 0;
        for (int i = 0; i < words.size(); ++i) {
            maxLen = max(maxLen, (int)words[i].size());
        }
        vector<string> res;
        for (int i = 0; i < maxLen; ++i) {
            string line;
            for (int j = 0; j < words.size(); ++j) {
                if (i < words[j].size()) {
                    line.push_back(words[j][i]);
                } else {
                    line.push_back(' ');
                }
            }
            while (!line.empty() && line.back() == ' ') {
                line.pop_back();
            }
            res.push_back(line);
        }
        return res;

=======

        vector<string> res;
        vector<string> words;
        string word;
        for (auto c : s) {
            if (c == ' ') {
                words.push_back(word);
                word.clear();
            } else {
                word.push_back(c);
            }
        }
        words.push_back(word);
        int maxLen = 0;
        for (auto w : words) {
            maxLen = max(maxLen, (int)w.size());
        }
        for (int i = 0; i < maxLen; ++i) {
            string line;
            for (int j = 0; j < words.size(); ++j) {
                if (i < words[j].size()) {
                    line.push_back(words[j][i]);
                } else {
                    line.push_back(' ');
                }
            }
            while (!line.empty() && line.back() == ' ') {
                line.pop_back();
            }
            res.push_back(line);
        }
        return res;

=======

        vector<string> words;
        int n = s.size();
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && s[j] != ' ') {
                ++j;
            }
            string word = s.substr(i, j - i);
            words.push_back(word);
            i = j + 1;
        }
        int m = words.size();
        int maxLen = 0;
        for (int i = 0; i < m; ++i) {
            maxLen = max(maxLen, (int)words[i].size());
        }
        vector<string> ans(maxLen);
        for (int i = 0; i < maxLen; ++i) {
            for (int j = 0; j < m; ++j) {
                if (i < words[j].size()) {
                    ans[i] += words[j][i];
                } else {
                    ans[i] += ' ';
                }
            }
            while (ans[i].back() == ' ') {
                ans[i].pop_back();
            }
        }
        return ans;

=======

        vector<string> words;
        int maxLen = 0;
        string word;
        for (char c : s) {
            if (c == ' ') {
                maxLen = max(maxLen, (int)word.size());
                words.push_back(word);
                word = "";
            } else {
                word += c;
            }
        }
        maxLen = max(maxLen, (int)word.size());
        words.push_back(word);
        vector<string> result;
        for (int i = 0; i < maxLen; ++i) {
            string line;
            for (string& word : words) {
                if (i < word.size()) {
                    line += word[i];
                } else {
                    line += " ";
                }
            }
            while (line.back() == ' ') {
                line.pop_back();
            }
            result.push_back(line);
        }
        return result;

=======

        vector<string> res;
        vector<string> words;
        istringstream iss(s);
        string word;
        while (iss >> word) {
            words.push_back(word);
        }
        int maxLen = 0;
        for (auto& w : words) {
            maxLen = max(maxLen, (int)w.length());
        }
        for (int i = 0; i < maxLen; i++) {
            res.push_back("");
            for (int j = 0; j < words.size(); j++) {
                if (i < words[j].length()) {
                    res[i] += words[j][i];
                } else {
                    res[i] += " ";
                }
            }
            while (res[i].length() > 0 && res[i][res[i].length() - 1] == ' ') {
                res[i].pop_back();
            }
        }
        return res;

=======

        vector<string> words;
        int maxLen = 0;
        int curLen = 0;
        string word;
        for (auto c : s) {
            if (c == ' ') {
                words.push_back(word);
                maxLen = max(maxLen, curLen);
                curLen = 0;
                word = "";
            } else {
                word += c;
                curLen++;
            }
        }
        words.push_back(word);
        maxLen = max(maxLen, curLen);
        
        vector<string> res;
        for (int i = 0; i < maxLen; i++) {
            string s;
            for (auto w : words) {
                if (i < w.size()) {
                    s += w[i];
                } else {
                    s += ' ';
                }
            }
            while (s.back() == ' ') {
                s.pop_back();
            }
            res.push_back(s);
        }
        return res;

=======

        vector<string> result;
        int i = 0;
        int j = 0;
        int maxLen = 0;
        while (i < s.length()) {
            j = i;
            while (j < s.length() && s[j] != ' ') {
                j++;
            }
            maxLen = max(maxLen, j - i);
            i = j + 1;
        }
        i = 0;
        while (i < maxLen) {
            string word;
            j = 0;
            while (j < s.length()) {
                while (j < s.length() && s[j] == ' ') {
                    j++;
                }
                if (j < s.length()) {
                    if (i < j - i) {
                        word.push_back(' ');
                    } else {
                        word.push_back(s[j]);
                    }
                    j++;
                }
            }
            while (word.length() > 0 && word.back() == ' ') {
                word.pop_back();
            }
            result.push_back(word);
            i++;
        }
        return result;

=======

        vector<string> v;
        int i = 0, j = 0, maxLen = 0;
        while (i < s.size()) {
            string word;
            while (i < s.size() && s[i] != ' ') {
                word += s[i];
                i++;
            }
            if (word.size() > maxLen) {
                maxLen = word.size();
            }
            v.push_back(word);
            i++;
        }
        for (i = 0; i < v.size(); i++) {
            while (v[i].size() < maxLen) {
                v[i] += ' ';
            }
        }
        vector<string> ans;
        for (i = 0; i < maxLen; i++) {
            string line;
            for (j = 0; j < v.size(); j++) {
                line += v[j][i];
            }
            while (line[line.size() - 1] == ' ') {
                line.pop_back();
            }
            ans.push_back(line);
        }
        return ans;
