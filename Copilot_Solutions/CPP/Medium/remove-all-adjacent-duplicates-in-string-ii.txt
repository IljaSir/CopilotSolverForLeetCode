Synthesizing 10/10 solutions

=======

        stack<pair<char, int>> st;
        for (char c : s) {
            if (st.empty() || st.top().first != c) {
                st.push({c, 1});
            } else {
                if (++st.top().second == k) {
                    st.pop();
                }
            }
        }
        string ans;
        while (!st.empty()) {
            auto p = st.top();
            st.pop();
            ans = string(p.second, p.first) + ans;
        }
        return ans;

=======

        stack<pair<char, int>> stk;
        for (char c : s) {
            if (stk.empty() || stk.top().first != c) {
                stk.push({c, 1});
            } else {
                if (++stk.top().second == k) stk.pop();
            }
        }
        string res;
        while (!stk.empty()) {
            auto p = stk.top();
            stk.pop();
            res.insert(0, p.second, p.first);
        }
        return res;

=======

        stack<pair<char, int>> st;
        for (char c : s) {
            if (st.empty() || st.top().first != c) {
                st.push({c, 1});
            } else {
                st.top().second++;
                if (st.top().second == k) {
                    st.pop();
                }
            }
        }
        string res;
        while (!st.empty()) {
            res = string(st.top().second, st.top().first) + res;
            st.pop();
        }
        return res;

=======

        stack<pair<char, int>> st;
        for (char c : s) {
            if (st.empty() || st.top().first != c) {
                st.push({c, 1});
            } else {
                st.top().second++;
                if (st.top().second == k) {
                    st.pop();
                }
            }
        }
        string res;
        while (!st.empty()) {
            auto p = st.top();
            st.pop();
            res = string(p.second, p.first) + res;
        }
        return res;

=======

        stack<pair<char, int>> stk;
        for (char c: s) {
            if (stk.empty() || stk.top().first != c) {
                stk.push({c, 1});
            } else {
                stk.top().second++;
                if (stk.top().second == k) {
                    stk.pop();
                }
            }
        }
        string ans;
        while (!stk.empty()) {
            int cnt = stk.top().second;
            char c = stk.top().first;
            while (cnt--) {
                ans += c;
            }
            stk.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        int n = s.size();
        vector<int> cnt(n, 1);
        for (int i = 0; i < n; ++i) {
            if (i > 0 && s[i] == s[i - 1]) {
                cnt[i] = cnt[i - 1] + 1;
                if (cnt[i] == k) {
                    s.erase(i - k + 1, k);
                    i = i - k;
                    n = s.size();
                }
            }
        }
        return s;

=======

        string res;
        stack<pair<char, int>> st;
        for (char c : s) {
            if (st.empty() || st.top().first != c) {
                st.push({c, 1});
            } else {
                st.top().second++;
                if (st.top().second == k) {
                    st.pop();
                }
            }
        }
        while (!st.empty()) {
            auto p = st.top();
            st.pop();
            res = string(p.second, p.first) + res;
        }
        return res;

=======

        string res;
        stack<pair<char, int>> st;
        for (char c : s) {
            if (st.empty() || st.top().first != c) {
                st.push(make_pair(c, 1));
            } else if (++st.top().second == k) {
                st.pop();
            }
        }
        while (!st.empty()) {
            auto p = st.top();
            st.pop();
            res = string(p.second, p.first) + res;
        }
        return res;

=======

        int n = s.size();
        if (n == 0 || k == 0) return s;
        stack<pair<char, int>> st;
        for (int i = 0; i < n; i++) {
            if (st.empty() || st.top().first != s[i]) {
                st.push({s[i], 1});
            } else {
                st.top().second++;
                if (st.top().second == k) {
                    st.pop();
                }
            }
        }
        string ans = "";
        while (!st.empty()) {
            pair<char, int> p = st.top();
            st.pop();
            while (p.second--) {
                ans += p.first;
            }
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        if (s.length() < k) return s;
        stack<pair<char, int>> st;
        for (auto c : s) {
            if (!st.empty() && st.top().first == c) {
                auto p = st.top();
                st.pop();
                if (p.second == k - 1) continue;
                st.push({c, p.second + 1});
            } else {
                st.push({c, 1});
            }
        }
        string rs;
        while (!st.empty()) {
            auto p = st.top();
            st.pop();
            rs.insert(0, p.second, p.first);
        }
        return rs;
