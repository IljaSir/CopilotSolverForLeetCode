Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int l = 0, r = 0;
        int ans = 0;
        while (r < n) {
            if (nums[r] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[l] == 0) {
                    k++;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int n = nums.size();
        int left = 0, right = 0;
        int zeros = 0;
        int res = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeros++;
            }
            while (zeros > k) {
                if (nums[left] == 0) {
                    zeros--;
                }
                left++;
            }
            res = max(res, right - left + 1);
            right++;
        }
        return res;

=======

        int l = 0, r = 0, cnt = 0, ans = 0;
        while (r < nums.size()) {
            if (nums[r] == 0) cnt++;
            while (cnt > k) {
                if (nums[l] == 0) cnt--;
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int i = 0, j = 0;
        int n = nums.size();
        int cnt = 0;
        int ans = 0;
        while (j < n) {
            if (nums[j] == 1) {
                cnt++;
            }
            j++;
            if (j - i - cnt > k) {
                if (nums[i] == 1) {
                    cnt--;
                }
                i++;
            }
            ans = max(ans, j - i);
        }
        return ans;

=======

        int n = nums.size();
        int i = 0;
        int j = 0;
        int res = 0;
        int count = 0;
        while (j < n) {
            if (nums[j] == 0) {
                count++;
            }
            while (count > k) {
                if (nums[i] == 0) {
                    count--;
                }
                i++;
            }
            res = max(res, j - i + 1);
            j++;
        }
        return res;

=======

        int n = nums.size();
        int left = 0, right = 0;
        int maxLen = 0, zeroCount = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeroCount++;
            }
            while (zeroCount > k) {
                if (nums[left] == 0) {
                    zeroCount--;
                }
                left++;
            }
            maxLen = max(maxLen, right - left + 1);
            right++;
        }
        return maxLen;

=======

        int n = nums.size();
        int ans = 0;
        int l = 0;
        int r = 0;
        int zeroCnt = 0;
        while (r < n) {
            if (nums[r] == 0) {
                zeroCnt++;
            }
            while (zeroCnt > k) {
                if (nums[l] == 0) {
                    zeroCnt--;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int left = 0, right = 0, n = nums.size();
        int res = 0, zeros = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zeros++;
            }
            while (zeros > k) {
                if (nums[left] == 0) {
                    zeros--;
                }
                left++;
            }
            res = max(res, right - left + 1);
            right++;
        }
        return res;

=======

        int n = nums.size();
        int left = 0, right = 0;
        int maxLen = 0, count = 0;
        while (right < n) {
            if (nums[right] == 1) {
                right++;
                count++;
            } else {
                if (k > 0) {
                    k--;
                    right++;
                    count++;
                } else {
                    while (nums[left] == 1) {
                        left++;
                        count--;
                    }
                    left++;
                    count--;
                }
            }
            maxLen = max(maxLen, count);
        }
        return maxLen;

=======

        int i=0,j=0,zero=0;
        int ans=0;
        while(j<nums.size()){
            if(nums[j]==0) zero++;
            while(zero>k){
                if(nums[i]==0) zero--;
                i++;
            }
            ans=max(ans,j-i+1);
            j++;
        }
        return ans;
