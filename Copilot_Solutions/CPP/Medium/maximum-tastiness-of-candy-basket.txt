Synthesizing 9/10 solutions

=======

        sort(price.begin(), price.end());
        int ans = 0;
        for (int i = 0; i < k; ++i) {
            ans += price[i];
        }
        for (int i = k; i < price.size(); ++i) {
            ans = max(ans, ans - price[i - k] + price[i]);
        }
        return ans;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += price[n - 1 - i];
        }
        int max_ans = ans;
        for (int i = 0; i < k - 1; i++) {
            ans -= price[n - 1 - i];
            ans += price[i];
            max_ans = max(max_ans, ans);
        }
        return max_ans;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += price[n - i - 1];
        }
        int sum = ans;
        for (int i = 1; i <= n - k; i++) {
            sum -= price[i - 1];
            sum += price[n - k - i];
            ans = max(ans, sum);
        }
        return ans;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += price[n - i - 1];
        }
        int cur = ans;
        for (int i = 0; i < k - 1; i++) {
            cur -= price[n - i - 1];
            cur += price[i];
            ans = max(ans, cur);
        }
        return ans;

=======

        int n = price.size();
        sort(price.begin(), price.end());
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += price[i];
        }
        for (int i = k; i < n; i++) {
            ans = max(ans, ans - price[i - k] + price[i]);
        }
        return ans;

=======

        int n = price.size();
        sort(price.begin(), price.end());
        priority_queue<int, vector<int>, greater<int>> q;
        int ans = 0, sum = 0;
        for (int i = 0; i < n; ++i) {
            if (i >= k) {
                sum -= q.top();
                q.pop();
            }
            sum += price[i];
            q.push(price[i]);
            if (i >= k - 1) ans = max(ans, sum - q.top());
        }
        return ans;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int sum = accumulate(price.begin(), price.begin() + k, 0);
        int minSum = sum;
        for (int i = k; i < n; ++i) {
            sum += price[i] - price[i - k];
            minSum = min(minSum, sum);
        }
        return sum - minSum;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int ans = price[n - 1] - price[0];
        for (int i = 1; i <= k - 1; ++i) {
            ans = max(ans, price[n - 1 - i] - price[i]);
        }
        return ans;

=======

        sort(price.begin(), price.end());
        int n = price.size();
        int i = 0;
        int j = n - 1;
        int ans = 0;
        while (i + k - 1 < j) {
            ans = max(ans, price[j] - price[i]);
            ans = max(ans, price[j] - price[i + k - 1]);
            ans = max(ans, price[j - k + 1] - price[i]);
            ans = max(ans, price[j - k + 1] - price[i + k - 1]);
            i++;
            j--;
        }
        return ans;
