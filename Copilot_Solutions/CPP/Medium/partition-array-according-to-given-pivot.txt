Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int i = 0, j = 0, k = n - 1;
        while (j <= k) {
            if (nums[j] < pivot) {
                swap(nums[i], nums[j]);
                i++;
                j++;
            } else if (nums[j] == pivot) {
                j++;
            } else {
                swap(nums[j], nums[k]);
                k--;
            }
        }
        return nums;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        for (int i = 0; i <= r; ++i) {
            if (nums[i] < pivot) {
                swap(nums[i], nums[l]);
                ++l;
            } else if (nums[i] > pivot) {
                swap(nums[i], nums[r]);
                --r;
                --i;
            }
        }
        return nums;

=======

        int left = 0;
        int right = nums.size() - 1;
        int i = 0;
        while (i <= right) {
            if (nums[i] > pivot) {
                swap(nums[i], nums[right]);
                right--;
            } else if (nums[i] < pivot) {
                swap(nums[i], nums[left]);
                left++;
                i++;
            } else {
                i++;
            }
        }
        return nums;

=======

        int n = nums.size();
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] < pivot) {
                swap(nums[i], nums[j]);
                j++;
            }
        }
        int k = n - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > pivot) {
                swap(nums[i], nums[k]);
                k--;
            }
        }
        return nums;

=======

        int n = nums.size();
        int i = 0, j = n - 1, k = 0;
        while (k <= j) {
            if (nums[k] < pivot) {
                swap(nums[i], nums[k]);
                i++;
                k++;
            } else if (nums[k] > pivot) {
                swap(nums[j], nums[k]);
                j--;
            } else {
                k++;
            }
        }
        return nums;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        for (int i = 0; i <= r; ) {
            if (nums[i] < pivot) {
                swap(nums[i++], nums[l++]);
            } else if (nums[i] > pivot) {
                swap(nums[i], nums[r--]);
            } else {
                ++i;
            }
        }
        return nums;

=======

        int n = nums.size();
        int i = 0, j = 0, k = n-1;
        while(j <= k) {
            if(nums[j] < pivot) {
                swap(nums[i], nums[j]);
                i++;
                j++;
            } else if(nums[j] > pivot) {
                swap(nums[j], nums[k]);
                k--;
            } else {
                j++;
            }
        }
        return nums;

=======

        int n = nums.size();
        int j = 0;
        int k = n - 1;
        for (int i = 0; i <= k; i++) {
            if (nums[i] < pivot) {
                swap(nums[i], nums[j]);
                j++;
            } else if (nums[i] > pivot) {
                swap(nums[i], nums[k]);
                k--;
                i--;
            }
        }
        return nums;

=======

        int i = 0, j = nums.size()-1, k = 0;
        while(k <= j){
            if(nums[k] < pivot){
                swap(nums[i++], nums[k++]);
            }else if(nums[k] > pivot){
                swap(nums[j--], nums[k]);
            }else{
                k++;
            }
        }
        return nums;

=======

        int n = nums.size();
        int i = 0, j = n-1;
        int k = 0;
        while(k <= j){
            if(nums[k] < pivot){
                swap(nums[i], nums[k]);
                i++;
                k++;
            }
            else if(nums[k] > pivot){
                swap(nums[j], nums[k]);
                j--;
            }
            else{
                k++;
            }
        }
        return nums;
