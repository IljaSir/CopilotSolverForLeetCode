Synthesizing 10/10 solutions

=======

        int n = costs.size();
        vector<int> diff(n);
        for (int i = 0; i < n; i++) {
            diff[i] = costs[i][0] - costs[i][1];
        }
        sort(diff.begin(), diff.end());
        int sum = 0;
        for (int i = 0; i < n / 2; i++) {
            sum += costs[i][0] + costs[i + n / 2][1];
        }
        for (int i = 0; i < n / 2; i++) {
            sum += diff[i];
        }
        return sum;

=======

        int n = costs.size() / 2;
        vector<int> diff(n * 2);
        for (int i = 0; i < n * 2; ++i) {
            diff[i] = costs[i][0] - costs[i][1];
        }
        sort(diff.begin(), diff.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += costs[i][0] + costs[i + n][1];
        }
        for (int i = 0; i < n; ++i) {
            ans += diff[i];
        }
        return ans;

=======

        sort(costs.begin(), costs.end(), [](vector<int> &a, vector<int> &b) { return a[0] - a[1] < b[0] - b[1]; });
        int total = 0;
        for (int i = 0; i < costs.size(); ++i) {
            if (i < costs.size() / 2) {
                total += costs[i][0];
            } else {
                total += costs[i][1];
            }
        }
        return total;

=======

        int n = costs.size();
        vector<pair<int, int>> diff(n);
        for (int i = 0; i < n; i++) {
            diff[i] = {costs[i][0] - costs[i][1], i};
        }
        sort(diff.begin(), diff.end());
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            res += costs[diff[i].second][0];
        }
        for (int i = n / 2; i < n; i++) {
            res += costs[diff[i].second][1];
        }
        return res;

=======

        int n = costs.size();
        int res = 0;
        sort(costs.begin(), costs.end(), [](vector<int>& a, vector<int>& b){
            return a[0] - a[1] < b[0] - b[1];
        });
        for (int i = 0; i < n / 2; i++) {
            res += costs[i][0] + costs[n / 2 + i][1];
        }
        return res;

=======

        int n = costs.size() / 2;
        int res = 0;
        vector<int> diff;
        for (auto c : costs) {
            res += c[0];
            diff.push_back(c[1] - c[0]);
        }
        sort(diff.begin(), diff.end());
        for (int i = 0; i < n; i++) {
            res += diff[i];
        }
        return res;

=======

        int n = costs.size();
        int res = 0;
        sort(costs.begin(), costs.end(), [](vector<int> &a, vector<int> &b) {
            return a[0] - a[1] < b[0] - b[1];
        });
        for (int i = 0; i < n / 2; i++) {
            res += costs[i][0] + costs[i + n / 2][1];
        }
        return res;

=======

        int res = 0;
        vector<int> sub;
        for (auto cost : costs) {
            res += cost[0];
            sub.push_back(cost[1] - cost[0]);
        }
        sort(sub.begin(), sub.end());
        for (int i = 0; i < sub.size() / 2; i++) {
            res += sub[i];
        }
        return res;

=======

        int n = costs.size()/2;
        int res = 0;
        vector<int> diff(n*2, 0);
        for(int i = 0; i < costs.size(); i++) {
            diff[i] = costs[i][0] - costs[i][1];
            res += costs[i][1];
        }
        sort(diff.begin(), diff.end());
        for(int i = 0; i < n; i++) {
            res += diff[i];
        }
        return res;

=======

        auto cost = 0;
        auto n = costs.size();
        vector<int> diff(n);
        for (auto i = 0; i < n; i++) {
            cost += costs[i][0];
            diff[i] = costs[i][1] - costs[i][0];
        }
        sort(diff.begin(), diff.end());
        for (auto i = 0; i < n / 2; i++) {
            cost += diff[i];
        }
        return cost;
