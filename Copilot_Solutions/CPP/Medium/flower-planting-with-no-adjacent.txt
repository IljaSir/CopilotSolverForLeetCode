Synthesizing 10/10 solutions

=======

        vector<vector<int>> graph(n);
        for (auto& path : paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        vector<int> result(n);
        for (int i = 0; i < n; ++i) {
            bool used[5] = {false};
            for (int j : graph[i]) {
                used[result[j]] = true;
            }
            for (int color = 4; color > 0; --color) {
                if (!used[color]) {
                    result[i] = color;
                    break;
                }
            }
        }
        return result;

=======

        vector<vector<int>> adj(n);
        for (auto& p : paths) {
            adj[p[0] - 1].push_back(p[1] - 1);
            adj[p[1] - 1].push_back(p[0] - 1);
        }
        vector<int> ans(n);
        for (int i = 0; i < n; ++i) {
            vector<bool> used(5);
            for (auto& j : adj[i]) {
                used[ans[j]] = true;
            }
            for (int j = 1; j <= 4; ++j) {
                if (!used[j]) {
                    ans[i] = j;
                    break;
                }
            }
        }
        return ans;

=======

        vector<vector<int>> graph(n);
        for (auto& path: paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        vector<int> color(n);
        for (int i = 0; i < n; ++i) {
            vector<int> used(5);
            for (auto& j: graph[i]) {
                used[color[j]] = 1;
            }
            for (int c = 4; c >= 1; --c) {
                if (!used[c]) {
                    color[i] = c;
                }
            }
        }
        return color;

=======

        vector<vector<int>> G(n);
        for (auto& p : paths) {
            G[p[0]-1].push_back(p[1]-1);
            G[p[1]-1].push_back(p[0]-1);
        }
        vector<int> ret(n);
        for (int i = 0; i < n; ++i) {
            vector<bool> used(5);
            for (auto& j : G[i]) {
                used[ret[j]] = true;
            }
            for (int j = 1; j <= 4; ++j) {
                if (!used[j]) {
                    ret[i] = j;
                    break;
                }
            }
        }
        return ret;

=======

        vector<int> res(n, 0);
        vector<vector<int>> graph(n);
        for (auto path : paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            vector<bool> used(5, false);
            for (auto j : graph[i]) {
                used[res[j]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        vector<vector<int>> adj(n);
        for (auto &p : paths) {
            adj[p[0]-1].push_back(p[1]-1);
            adj[p[1]-1].push_back(p[0]-1);
        }
        vector<int> res(n);
        for (int i = 0; i < n; ++i) {
            vector<int> used(5);
            for (auto &j : adj[i]) {
                used[res[j]] = 1;
            }
            for (int j = 1; j <= 4; ++j) {
                if (!used[j]) {
                    res[i] = j;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> res(n, 0);
        vector<vector<int>> graph(n);
        for (auto& path : paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            vector<bool> used(5, false);
            for (auto& j : graph[i]) {
                used[res[j]] = true;
            }
            for (int k = 1; k <= 4; k++) {
                if (!used[k]) {
                    res[i] = k;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> result(n, 0);
        vector<vector<int>> graph(n);
        for (auto& path : paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        for (int i = 0; i < n; ++i) {
            vector<bool> used(5, false);
            for (int j : graph[i]) {
                used[result[j]] = true;
            }
            for (int j = 1; j <= 4; ++j) {
                if (!used[j]) {
                    result[i] = j;
                    break;
                }
            }
        }
        return result;

=======

        vector<vector<int>> adj(n);
        for(auto& p : paths) {
            adj[p[0] - 1].push_back(p[1] - 1);
            adj[p[1] - 1].push_back(p[0] - 1);
        }
        vector<int> ans(n, 0);
        for(int i = 0; i < n; i++) {
            vector<bool> used(5, false);
            for(auto& j : adj[i]) {
                used[ans[j]] = true;
            }
            for(int j = 1; j <= 4; j++) {
                if(!used[j]) {
                    ans[i] = j;
                    break;
                }
            }
        }
        return ans;

=======

        vector<int> result(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (auto& path : paths) {
            graph[path[0] - 1].push_back(path[1] - 1);
            graph[path[1] - 1].push_back(path[0] - 1);
        }
        for (int i = 0; i < n; i++) {
            bool used[5] = {false};
            for (auto& neighbor : graph[i]) {
                used[result[neighbor]] = true;
            }
            for (int j = 1; j <= 4; j++) {
                if (!used[j]) {
                    result[i] = j;
                    break;
                }
            }
        }
        return result;
