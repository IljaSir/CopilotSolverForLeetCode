Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int d = abs(target[0]) + abs(target[1]);
        for (auto& g : ghosts) {
            if (abs(g[0] - target[0]) + abs(g[1] - target[1]) <= d) {
                return false;
            }
        }
        return true;

=======

        int distance = abs(target[0]) + abs(target[1]);
        for (auto& ghost : ghosts) {
            if (abs(ghost[0] - target[0]) + abs(ghost[1] - target[1]) <= distance) {
                return false;
            }
        }
        return true;

=======

        int dist = abs(target[0]) + abs(target[1]);
        for (auto& ghost : ghosts) {
            if (dist >= abs(target[0] - ghost[0]) + abs(target[1] - ghost[1])) {
                return false;
            }
        }
        return true;

=======

        int distance = abs(target[0]) + abs(target[1]);
        for (auto& ghost : ghosts) {
            if (distance >= abs(ghost[0] - target[0]) + abs(ghost[1] - target[1])) {
                return false;
            }
        }
        return true;

=======

        int dist = abs(target[0]) + abs(target[1]);
        for (auto& ghost : ghosts) {
            int d = abs(ghost[0] - target[0]) + abs(ghost[1] - target[1]);
            if (d <= dist) return false;
        }
        return true;

=======

        int dist = abs(target[0]) + abs(target[1]);
        for (vector<int>& ghost : ghosts) {
            if (dist >= abs(ghost[0] - target[0]) + abs(ghost[1] - target[1])) {
                return false;
            }
        }
        return true;

=======

        int d = abs(target[0]) + abs(target[1]);
        for (auto &g : ghosts) {
            int gd = abs(g[0] - target[0]) + abs(g[1] - target[1]);
            if (gd <= d) return false;
        }
        return true;

=======

        int x = target[0], y = target[1];
        int d = abs(x) + abs(y);
        for (auto& g : ghosts) {
            if (abs(x - g[0]) + abs(y - g[1]) <= d) {
                return false;
            }
        }
        return true;

=======

        int n = ghosts.size();
        int x = target[0];
        int y = target[1];
        int dist = abs(x) + abs(y);
        for (int i = 0; i < n; ++i) {
            int x1 = ghosts[i][0];
            int y1 = ghosts[i][1];
            if (abs(x-x1) + abs(y-y1) <= dist) {
                return false;
            }
        }
        return true;
