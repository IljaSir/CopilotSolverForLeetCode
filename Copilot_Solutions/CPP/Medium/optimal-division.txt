Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (nums.size() == 1) {
            return to_string(nums[0]);
        }
        if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        }
        string res = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); ++i) {
            res += "/" + to_string(nums[i]);
        }
        res += ")";
        return res;

=======

        if (nums.size() == 1) {
            return to_string(nums[0]);
        }
        if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        }
        string ret = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); ++i) {
            ret += "/" + to_string(nums[i]);
        }
        return ret + ")";

=======

        if (nums.size() == 1) {
            return to_string(nums[0]);
        }
        if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        }
        string result = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); i++) {
            result += "/" + to_string(nums[i]);
        }
        result += ")";
        return result;

=======

        if (nums.size() == 1) {
            return to_string(nums[0]);
        }
        if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        }
        string ans = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); ++i) {
            ans += "/" + to_string(nums[i]);
        }
        ans += ")";
        return ans;

=======

        if (nums.size() == 0) return "";
        if (nums.size() == 1) return to_string(nums[0]);
        if (nums.size() == 2) return to_string(nums[0]) + "/" + to_string(nums[1]);
        string res = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); i++) {
            res += "/" + to_string(nums[i]);
        }
        res += ")";
        return res;

=======

        if (nums.size() == 1) return to_string(nums[0]);
        if (nums.size() == 2) return to_string(nums[0]) + "/" + to_string(nums[1]);
        string ans = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); i++) {
            ans += "/" + to_string(nums[i]);
        }
        ans += ")";
        return ans;

=======

        string res;
        if (nums.size() == 1) {
            res = to_string(nums[0]);
        } else if (nums.size() == 2) {
            res = to_string(nums[0]) + "/" + to_string(nums[1]);
        } else {
            res = to_string(nums[0]) + "/(" + to_string(nums[1]);
            for (int i = 2; i < nums.size(); ++i) {
                res += "/" + to_string(nums[i]);
            }
            res += ")";
        }
        return res;

=======

        string res;
        if (nums.size() == 1) {
            return to_string(nums[0]);
        }
        if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        }
        res = to_string(nums[0]) + "/(" + to_string(nums[1]);
        for (int i = 2; i < nums.size(); ++i) {
            res += "/" + to_string(nums[i]);
        }
        res += ")";
        return res;

=======

        string result;
        if (nums.size() == 1) {
            return to_string(nums[0]);
        } else if (nums.size() == 2) {
            return to_string(nums[0]) + "/" + to_string(nums[1]);
        } else {
            result = to_string(nums[0]) + "/(";
            for (int i = 1; i < nums.size(); ++i) {
                result += to_string(nums[i]);
                if (i != nums.size() - 1) {
                    result += "/";
                }
            }
            result += ")";
        }
        return result;
