Synthesizing 10/10 solutions

=======

        unordered_map<int, int> mp;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                mp[nums1[i] + nums2[j]]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < nums3.size(); i++) {
            for (int j = 0; j < nums4.size(); j++) {
                ans += mp[-nums3[i] - nums4[j]];
            }
        }
        return ans;

=======

        unordered_map<int,int> map;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                map[nums1[i] + nums2[j]]++;
            }
        }
        int count = 0;
        for (int i = 0; i < nums3.size(); i++) {
            for (int j = 0; j < nums4.size(); j++) {
                count += map[-nums3[i] - nums4[j]];
            }
        }
        return count;

=======

        unordered_map<int, int> m;
        for (int i : nums1) {
            for (int j : nums2) {
                m[i + j]++;
            }
        }
        int res = 0;
        for (int i : nums3) {
            for (int j : nums4) {
                res += m[-i - j];
            }
        }
        return res;

=======

        int n = nums1.size();
        unordered_map<int, int> m1;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                m1[nums1[i] + nums2[j]]++;
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cnt += m1[-nums3[i] - nums4[j]];
            }
        }
        return cnt;

=======

        unordered_map<int, int> m;
        for (auto a : nums1) {
            for (auto b : nums2) {
                m[a + b]++;
            }
        }
        int res = 0;
        for (auto c : nums3) {
            for (auto d : nums4) {
                if (m.count(-c - d)) {
                    res += m[-c - d];
                }
            }
        }
        return res;

=======

        int n = nums1.size();
        int res = 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                ++m[nums1[i] + nums2[j]];
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                res += m[-(nums3[i] + nums4[j])];
            }
        }
        return res;

=======

        int ans = 0;
        int n = nums1.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                mp[nums1[i] + nums2[j]]++;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans += mp[-nums3[i] - nums4[j]];
            }
        }
        return ans;

=======

        unordered_map<int, int> m;
        for (auto& a : nums1) {
            for (auto& b : nums2) {
                ++m[a + b];
            }
        }
        int ans = 0;
        for (auto& c : nums3) {
            for (auto& d : nums4) {
                ans += m[-c - d];
            }
        }
        return ans;

=======

        unordered_map<int, int> map;
        int count = 0;
        for (auto i : nums1) {
            for (auto j : nums2) {
                map[i + j]++;
            }
        }
        for (auto i : nums3) {
            for (auto j : nums4) {
                if (map.find(0 - i - j) != map.end()) {
                    count += map[0 - i - j];
                }
            }
        }
        return count;

=======

        int n = nums1.size();
        unordered_map<int, int> mp;
        for (auto &i : nums1) {
            for (auto &j : nums2) {
                mp[i + j]++;
            }
        }
        int ans = 0;
        for (auto &i : nums3) {
            for (auto &j : nums4) {
                ans += mp[-(i + j)];
            }
        }
        return ans;
