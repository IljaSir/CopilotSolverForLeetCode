Synthesizing 10/10 solutions (Duplicates hidden)

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(nums[i]);
            if (pq.size() > k) {
                pq.pop();
            }
        }
        return pq.top();

=======

        sort(nums.begin(), nums.end());
        return nums[nums.size() - k];

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (auto n : nums) {
            pq.push(n);
            if (pq.size() > k) {
                pq.pop();
            }
        }
        return pq.top();

=======

        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(nums[i]);
        }
        for (int i = 0; i < k - 1; i++) {
            pq.pop();
        }
        return pq.top();

=======

        priority_queue<int, vector<int>, greater<int>> q;
        for (int i = 0; i < nums.size(); ++i) {
            if (q.size() < k) {
                q.push(nums[i]);
            } else if (q.top() < nums[i]) {
                q.pop();
                q.push(nums[i]);
            }
        }
        return q.top();

=======

        int n = nums.size();
        priority_queue<int, vector<int>, greater<int>> q;
        for (int i = 0; i < n; i++) {
            q.push(nums[i]);
            if (q.size() > k) {
                q.pop();
            }
        }
        return q.top();

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < nums.size(); i ++) {
            if (pq.size() < k) {
                pq.push(nums[i]);
            } else {
                if (nums[i] > pq.top()) {
                    pq.pop();
                    pq.push(nums[i]);
                }
            }
        }
        return pq.top();

=======

        int n = nums.size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for(int i=0; i<n; i++) {
            if(pq.size() < k) {
                pq.push(nums[i]);
            } else {
                if(nums[i] > pq.top()) {
                    pq.pop();
                    pq.push(nums[i]);
                }
            }
        }
        return pq.top();
