Synthesizing 9/10 solutions

=======

        vector<int> dp(n+1);
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; ++i) {
            dp[i] = (2 * dp[i-1] + dp[i-3]) % 1000000007;
        }
        return dp[n];

=======

        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007;
            for (int j = 1; j <= i - 2; j++) {
                dp[i] = (dp[i] + dp[j] * dp[i - j - 1]) % 1000000007;
            }
        }
        return dp[n];

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 5;
        vector<int> dp(n + 1, 0);
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 5;
        for (int i = 4; i <= n; i++) {
            dp[i] = (2 * dp[i - 1] % 1000000007 + dp[i - 3]) % 1000000007;
        }
        return dp[n];

=======

        int mod = 1e9 + 7;
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = (dp[i - 1] * 2) % mod;
            if (i >= 2) {
                dp[i] = (dp[i] + dp[i - 2]) % mod;
            }
            if (i >= 3) {
                dp[i] = (dp[i] + dp[i - 3]) % mod;
            }
        }
        return dp[n];

=======

        int mod = 1e9 + 7;
        vector<long long> dp(n + 1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = (dp[i - 1] * 2) % mod;
            if (i >= 2) {
                dp[i] = (dp[i] + dp[i - 2]) % mod;
            }
            if (i >= 3) {
                dp[i] = (dp[i] + (dp[i - 3] * 2) % mod) % mod;
            }
        }
        return dp[n];

=======

        vector<long> dp(n + 1);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = (dp[i] + dp[i - 1]) % 1000000007;
            if (i >= 2) {
                dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
            }
            if (i >= 3) {
                dp[i] = (dp[i] + dp[i - 3] * 2) % 1000000007;
            }
        }
        return dp[n];

=======

        int mod = 1e9 + 7;
        vector<int> dp(n+1, 0);
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1];
            if (i >= 2) dp[i] = (dp[i] + dp[i-2]) % mod;
            if (i >= 3) dp[i] = (dp[i] + 2LL * dp[i-3]) % mod;
        }
        return dp[n];

=======

        int M = 1000000007;
        vector<long long> dp(n + 1);
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; ++i) {
            dp[i] = (dp[i - 1] + dp[i - 2] + 2 * dp[i - 3]) % M;
        }
        return dp[n];

=======

        const int MOD = 1e9 + 7;
        
        // f[i][j] = number of ways to tile a 2 x i board with j dominoes
        // f[i][j] = f[i-1][j] + f[i-2][j] + f[i-1][j-1] + f[i-2][j-1] + f[i-2][j-2]
        // f[i][j] = f[i-1][j] + f[i-2][j] + f[i-1][j-1] + f[i-2][j-1] + f[i-2][j-2]
        
        vector<vector<int>> f(n + 1, vector<int>(n + 1, 0));
        f[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            f[i][0] = f[i - 1][0];
            if (i >= 2) f[i][0] = (f[i][0] + f[i - 2][0]) % MOD;
            for (int j = 1; j <= n; ++j) {
                f[i][j] = f[i - 1][j];
                if (i >= 2) f[i][j] = (f[i][j] + f[i - 2][j]) % MOD;
                f[i][j] = (f[i][j] + f[i - 1][j - 1]) % MOD;
                if (i >= 2) f[i][j] = (f[i][j] + f[i - 2][j - 1]) % MOD;
                if (j >= 2) f[i][j] = (f[i][j] + f[i - 2][j - 2]) % MOD;
            }
        }
        
        return f[n][n];
