Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            res += nums[i] > nums[nums.size() - i - 1];
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            res += nums[i] > nums[i / 2];
        }
        return res;

=======

        int ans = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; ++i) {
            ans = max(ans, i + nums[i] - nums[n - 1]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> v = nums;
        sort(v.begin(), v.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] < v[i]) ans++;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; ++i) {
            ans = max(ans, i - (lower_bound(nums.begin(), nums.end(), nums[i]) - nums.begin()));
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > nums[n - i - 1]) {
                count++;
            }
        }
        return count;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (nums[i] > nums[i+1]) ans++;
            } else if (i == n-1) {
                if (nums[i] > nums[i-1]) ans++;
            } else {
                if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) ans++;
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int ans = 0;
        int n = nums.size();
        for (int i = 0; i < n; i++) {
            ans += i - lower_bound(nums.begin(), nums.end(), nums[i]) + 1;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            res = max(res, min(nums[i], i == 0 ? INT_MAX : nums[i - 1]));
        }
        return res;

=======

        sort(nums.begin(),nums.end());
        int n = nums.size();
        int res = 0;
        for(int i = 0;i<n;i++){
            if(i == n-1 || nums[i] != nums[i+1]){
                res += i;
            }
        }
        return res;
