Synthesizing 10/10 solutions (Duplicates hidden)

=======

        while (b != 0) {
            int carry = a & b;
            a = a ^ b;
            b = carry << 1;
        }
        return a;

=======

        if (b == 0) return a;
        int sum = a ^ b;
        int carry = (a & b) << 1;
        return getSum(sum, carry);

=======

        return b == 0 ? a : getSum(a ^ b, (unsigned int)(a & b) << 1);

=======

        if (b == 0) {
            return a;
        }
        int sum = a ^ b;
        int carry = (a & b) << 1;
        return getSum(sum, carry);

=======

        int sum = a;
        while (b != 0) {
            sum = a ^ b;
            b = (unsigned int)(a & b) << 1;
            a = sum;
        }
        return sum;

=======

        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);

=======

        int sum = a ^ b;
        int carry = (a & b) << 1;
        if (carry != 0) return getSum(sum, carry);
        return sum;
