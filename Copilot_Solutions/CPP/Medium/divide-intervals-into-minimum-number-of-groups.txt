Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = intervals.size();
        sort(intervals.begin(), intervals.end(), [](const vector<int> &a, const vector<int> &b){
            return a[1] < b[1];
        });
        int ans = 0;
        int pre = -1;
        for (int i = 0; i < n; i++) {
            if (intervals[i][0] > pre) {
                ans++;
                pre = intervals[i][1];
            }
        }
        return ans;

=======

        sort(intervals.begin(), intervals.end(), [](auto& a, auto& b) {
            return a[0] < b[0];
        });
        int ans = 0;
        for (int i = 0; i < intervals.size(); i++) {
            int r = intervals[i][1];
            while (i + 1 < intervals.size() && r >= intervals[i + 1][0]) {
                r = min(r, intervals[i + 1][1]);
                i++;
            }
            ans++;
        }
        return ans;

=======

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){
            return a[1] < b[1];
        });
        int ans = 0;
        int last = INT_MIN;
        for (auto& interval : intervals) {
            if (interval[0] > last) {
                ans++;
                last = interval[1];
            }
        }
        return ans;

=======

        int n = intervals.size();
        if (n < 2) return n;
        sort(intervals.begin(), intervals.end(), [](auto a, auto b) {
            return a[1] < b[1];
        });
        int ans = 1;
        int end = intervals[0][1];
        for (auto& interval : intervals) {
            if (interval[0] > end) {
                ans++;
                end = interval[1];
            }
        }
        return ans;

=======

        int n = intervals.size();
        vector<int> dp(n, 1);
        sort(intervals.begin(), intervals.end(), [](const vector<int> &a, const vector<int> &b) {
            return a[1] < b[1];
        });
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (intervals[j][1] < intervals[i][0]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                    break;
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b) {
            return a[0] < b[0];
        });
        int res = 0;
        int prev = -1;
        for (auto& interval : intervals) {
            if (interval[0] > prev) {
                ++res;
                prev = interval[1];
            } else {
                prev = min(prev, interval[1]);
            }
        }
        return res;

=======

        int n = intervals.size();
        vector<int> dp(n+1, 0);
        sort(intervals.begin(), intervals.end(), [](auto& a, auto& b) {
            return a[1] < b[1];
        });
        dp[0] = 1;
        for (int i = 1; i <= n; ++i) {
            dp[i] = dp[i-1];
            for (int j = i-1; j >= 0; --j) {
                if (intervals[j][1] < intervals[i-1][0]) {
                    dp[i] = max(dp[i], dp[j]+1);
                    break;
                }
            }
        }
        return dp[n];

=======

        int n = intervals.size();
        vector<int> dp(n+1, 0);
        sort(intervals.begin(), intervals.end());
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (intervals[j][1] < intervals[i][0]) {
                    dp[i] = max(dp[i], dp[j]+1);
                }
            }
        }
        return dp[n-1];
