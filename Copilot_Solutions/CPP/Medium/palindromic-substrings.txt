Synthesizing 10/10 solutions

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < 2 * n - 1; ++i) {
            int l = i / 2;
            int r = i / 2 + i % 2;
            while (l >= 0 && r < n && s[l] == s[r]) {
                --l;
                ++r;
                ++ans;
            }
        }
        return ans;

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < 2 * n - 1; ++i) {
            int l = i / 2;
            int r = i / 2 + i % 2;
            while (l >= 0 && r < n && s[l] == s[r]) {
                --l;
                ++r;
                ++ans;
            }
        }
        return ans;

=======

        int n = s.size();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                dp[i][j] = (s[i] == s[j]) && (j - i < 3 || dp[i + 1][j - 1]);
                if (dp[i][j]) ans++;
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; i - j >= 0 && i + j < n; j++) {
                if (s[i - j] != s[i + j]) {
                    break;
                }
                ans++;
            }
            for (int j = 0; i - j >= 0 && i + j + 1 < n; j++) {
                if (s[i - j] != s[i + j + 1]) {
                    break;
                }
                ans++;
            }
        }
        return ans;

=======

        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        int ans = 0;
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i; j < n; ++j) {
                dp[i][j] = (s[i] == s[j]) && (j - i < 2 || dp[i + 1][j - 1]);
                if (dp[i][j]) ++ans;
            }
        }
        return ans;

=======

        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        int res = 0;
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i; j < n; ++j) {
                dp[i][j] = s[i] == s[j] && (j - i < 2 || dp[i + 1][j - 1]);
                if (dp[i][j]) res++;
            }
        }
        return res;

=======

        int n = s.length();
        vector<vector<int>> dp(n, vector<int>(n));
        int ans = 0;
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i; j < n; ++j) {
                dp[i][j] = s[i] == s[j] && (j - i < 2 || dp[i + 1][j - 1]);
                ans += dp[i][j];
            }
        }
        return ans;

=======

        int n = s.length();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) dp[i][i] = 1;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) dp[i][i + 1] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                if (dp[i + 1][j - 1] == 1 && s[i] == s[j]) {
                    dp[i][j] = 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (dp[i][j] == 1) ans++;
            }
        }
        return ans;

=======

        int len = s.length();
        int ans = 0;
        for (int i = 0; i < len; ++i) {
            for (int j = 0; i - j >= 0 && i + j < len; ++j) {
                if (s[i - j] != s[i + j]) {
                    break;
                }
                ++ans;
            }
            for (int j = 0; i - j >= 0 && i + j + 1 < len; ++j) {
                if (s[i - j] != s[i + j + 1]) {
                    break;
                }
                ++ans;
            }
        }
        return ans;

=======

        int n = s.length();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        for(int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for(int i = 0; i < n - 1; ++i) {
            if(s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
            }
        }
        for(int i = 3; i <= n; ++i) {
            for(int j = 0; j < n - i + 1; ++j) {
                int k = j + i - 1;
                if(s[j] == s[k] && dp[j + 1][k - 1] == 1) {
                    dp[j][k] = 1;
                }
            }
        }
        int res = 0;
        for(int i = 0; i < n; ++i) {
            for(int j = 0; j < n; ++j) {
                res += dp[i][j];
            }
        }
        return res;
