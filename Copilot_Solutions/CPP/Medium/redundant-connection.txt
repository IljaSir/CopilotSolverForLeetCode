Synthesizing 10/10 solutions

=======

        int n = edges.size();
        vector<int> parent(n + 1);
        for (int i = 1; i <= n; ++i) {
            parent[i] = i;
        }
        for (int i = 0; i < n; ++i) {
            int u = edges[i][0], v = edges[i][1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                return edges[i];
            }
            parent[pv] = pu;
        }
        return {};

=======

        int n = edges.size();
        vector<int> parent(n + 1);
        for (int i = 0; i <= n; ++i) {
            parent[i] = i;
        }
        for (auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            if (find(parent, u) == find(parent, v)) {
                return edge;
            }
            parent[find(parent, u)] = find(parent, v);
        }
        return {};

=======

        vector<int> parent(edges.size() + 1, 0);
        for (int i = 0; i < parent.size(); i++) {
            parent[i] = i;
        }
        for (auto& edge : edges) {
            int p1 = find(parent, edge[0]);
            int p2 = find(parent, edge[1]);
            if (p1 == p2) {
                return edge;
            }
            parent[p1] = p2;
        }
        return {};
    }
    int find(vector<int>& parent, int node) {
        if (parent[node] == node) {
            return node;
        }
        return parent[node] = find(parent, parent[node]);

=======

        vector<int> parent(edges.size() + 1, 0);
        for (int i = 1; i <= edges.size(); ++i) {
            parent[i] = i;
        }
        for (auto& edge : edges) {
            int root1 = find(parent, edge[0]);
            int root2 = find(parent, edge[1]);
            if (root1 == root2) {
                return edge;
            }
            parent[root1] = root2;
        }
        return {};

=======

        vector<int> parent(edges.size() + 1, 0);
        for (int i = 0; i < parent.size(); ++i) {
            parent[i] = i;
        }
        for (auto e : edges) {
            int x = find(parent, e[0]);
            int y = find(parent, e[1]);
            if (x == y) {
                return e;
            }
            parent[x] = y;
        }
        return {};
    }
    
    int find(vector<int>& parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        vector<int> parent(edges.size() + 1);
        for (int i = 0; i < parent.size(); i++)
            parent[i] = i;
        
        for (int i = 0; i < edges.size(); i++) {
            int x = edges[i][0];
            int y = edges[i][1];
            
            if (find(parent, x) == find(parent, y))
                return edges[i];
            
            parent[find(parent, x)] = find(parent, y);
        }
        
        return vector<int>();
    }
    
    int find(vector<int>& parent, int x) {
        if (parent[x] != x)
            parent[x] = find(parent, parent[x]);
        
        return parent[x];

=======

        int n = edges.size();
        vector<int> parent(n + 1);
        for (int i = 1; i <= n; ++i) parent[i] = i;
        for (auto& e: edges) {
            int u = e[0], v = e[1];
            int pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) return e;
            parent[pu] = pv;
        }
        return {};
    }
    int find(vector<int>& parent, int u) {
        if (parent[u] != u) parent[u] = find(parent, parent[u]);
        return parent[u];

=======

        int n = edges.size();
        vector<int> parent(n+1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
        for (auto& e : edges) {
            int u = e[0];
            int v = e[1];
            int pu = find(parent, u);
            int pv = find(parent, v);
            if (pu == pv) return e;
            parent[pu] = pv;
        }
        return {};

=======

        int n = edges.size();
        vector<int> p(n+1, 0);
        for (int i = 1; i <= n; ++i) p[i] = i;
        for (auto edge : edges) {
            int x = edge[0], y = edge[1];
            if (find(p, x) == find(p, y)) return edge;
            p[find(p, x)] = find(p, y);
        }
        return {};
    }
    int find(vector<int> &p, int x) {
        if (p[x] != x) p[x] = find(p, p[x]);
        return p[x];

=======

        int n = edges.size();
        int *parent = new int[n + 1];
        for (int i = 1; i <= n; ++i) parent[i] = i;
        for (auto edge : edges) {
            int u = edge[0], v = edge[1];
            int pu = find(parent, u);
            int pv = find(parent, v);
            if (pu == pv) return edge;
            parent[pu] = pv;
        }
        return {};
    }
    int find(int *parent, int x) {
        if (parent[x] != x) parent[x] = find(parent, parent[x]);
        return parent[x];
