Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                for (int k = 0; k < nums.size(); k++) {
                    ans ^= ((nums[i] | nums[j]) & nums[k]);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] & (1 << i)) {
                    cnt++;
                }
            }
            ans += (1 << i) * cnt * (n - cnt);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] & (1 << i)) cnt++;
            }
            ans ^= (1 << i) * (cnt % 2);
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int cnt = 0;
            for (int num : nums) {
                if (num & (1 << i)) {
                    cnt++;
                }
            }
            ans ^= cnt * (nums.size() - cnt);
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int cnt = 0;
            for (int n : nums) {
                if (n & (1 << i)) ++cnt;
            }
            res |= (cnt % 2) << i;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 32; i++) {
            int ones = 0, zeros = 0;
            for (int j = 0; j < n; j++) {
                if ((nums[j] >> i) & 1) {
                    ones++;
                } else {
                    zeros++;
                }
            }
            res += (1 << i) * ones * zeros;
        }
        return res;
