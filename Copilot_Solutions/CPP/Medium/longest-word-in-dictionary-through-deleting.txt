Synthesizing 10/10 solutions

=======

        sort(dictionary.begin(), dictionary.end(), [](const string& a, const string& b) {
            if (a.size() == b.size()) {
                return a < b;
            }
            return a.size() > b.size();
        });
        for (const auto& word : dictionary) {
            if (isSubsequence(s, word)) {
                return word;
            }
        }
        return "";

=======

        sort(dictionary.begin(), dictionary.end(), [](const string& a, const string& b) {
            if (a.size() == b.size()) return a < b;
            return a.size() > b.size();
        });
        for (auto& word : dictionary) {
            if (isSubsequence(word, s)) return word;
        }
        return "";

=======

        sort(dictionary.begin(), dictionary.end(), [](const string& a, const string& b) {
            return a.length() == b.length() ? a < b : a.length() > b.length();
        });
        for (const string& word : dictionary) {
            int i = 0;
            for (char c : s) {
                if (i < word.length() && word[i] == c) {
                    i++;
                }
            }
            if (i == word.length()) {
                return word;
            }
        }
        return "";

=======

        string ans = "";
        for (string word : dictionary) {
            int i = 0;
            for (char c : s) {
                if (i < word.size() && c == word[i]) {
                    i++;
                }
            }
            if (i == word.size() && word.size() >= ans.size()) {
                if (word.size() > ans.size() || word < ans) {
                    ans = word;
                }
            }
        }
        return ans;

=======

        string res;
        for (string word : dictionary) {
            int i = 0;
            for (char c : s) {
                if (i < word.size() && c == word[i])
                    i++;
            }
            if (i == word.size() && word.size() >= res.size()) {
                if (word.size() > res.size() || word < res)
                    res = word;
            }
        }
        return res;

=======

        string ans;
        for (auto& word : dictionary) {
            int i = 0;
            for (auto& c : s) {
                if (i < word.size() && c == word[i]) {
                    ++i;
                }
            }
            if (i == word.size() && (ans.size() < word.size() || (ans.size() == word.size() && ans > word))) {
                ans = word;
            }
        }
        return ans;

=======

        int n = s.size();
        int m = dictionary.size();
        string res = "";
        for (int i = 0; i < m; i++) {
            int j = 0;
            int k = 0;
            while (j < n && k < dictionary[i].size()) {
                if (s[j] == dictionary[i][k]) {
                    k++;
                }
                j++;
            }
            if (k == dictionary[i].size()) {
                if (k > res.size() || (k == res.size() && dictionary[i] < res)) {
                    res = dictionary[i];
                }
            }
        }
        return res;

=======

        string ret = "";
        for (auto& word : dictionary) {
            int i = 0;
            for (auto c : s) {
                if (i < word.length() && word[i] == c) {
                    i++;
                }
            }
            if (i == word.length() && (i > ret.length() || (i == ret.length() && word < ret))) {
                ret = word;
            }
        }
        return ret;

=======

        string ans;
        for (auto& word: dictionary) {
            if (word.length() < ans.length()) continue;
            if (word.length() == ans.length() && word > ans) continue;
            if (isSubsequence(word, s)) {
                ans = word;
            }
        }
        return ans;
    }
    bool isSubsequence(string& s, string& t) {
        int i = 0, j = 0;
        while (i < s.length() && j < t.length()) {
            if (s[i] == t[j]) ++i;
            ++j;
        }
        return i == s.length();

=======

        int i, j, k, n = s.size(), m = dictionary.size();
        string ans = "";
        for (i = 0; i < m; i++) {
            j = 0;
            k = 0;
            while (j < n && k < dictionary[i].size()) {
                if (s[j] == dictionary[i][k]) {
                    j++;
                    k++;
                } else {
                    j++;
                }
            }
            if (k == dictionary[i].size()) {
                if (ans.size() < dictionary[i].size()) {
                    ans = dictionary[i];
                } else if (ans.size() == dictionary[i].size()) {
                    ans = ans < dictionary[i] ? ans : dictionary[i];
                }
            }
        }
        return ans;
