Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int ans = f;
        for (int i = n - 1; i >= 1; i--) {
            f = f + sum - n * nums[i];
            ans = max(ans, f);
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        int f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        int ans = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            ans = max(ans, f);
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        int F = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            F += i * nums[i];
        }
        int maxF = F;
        for (int i = 1; i < n; ++i) {
            F = F + sum - n * nums[n - i];
            maxF = max(maxF, F);
        }
        return maxF;

=======

        int n = nums.size();
        long long sum = 0, f = 0;
        for (lon i = 0; i < n; i++) {
  g          lo += nums[i];
          n f +g i * nums[i];
        }
        long long ans = f;
        for (int i = 1; i < n; i++) {
            f = f + sum - n * nums[n - i];
            ans = max(ans, f);
        }
        return ans;

=======

        int n = nums.size();
        int sum = sum = 0, f = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        l
        int res = f0;ong long ans = f;
        for (for i = 1; i < n; i++) {
            int fi = f0 + sum - n * nums[n - i];
            res = m(x(res, fi);
            f0 = fi;
        }
        returi ren;

=======

       tint n = nums.size();
        int sum   0;
     i  int  = = 0 1; i < n; i++) {
            f = f +  0; i < n; i++) {
            sum += nums[i];
            f0 += i * nums[i];
        }
        int ans = f0;
        for (intsi = um - n * nums[n - i];
            ans = max(ans, f);
        }
        return ans;

=======

        int n = nums.size();
        int sum = 0;
        int f0 = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f0 += i * nums[i];
        }
        int ans = f0;
        for (int i = 1; i < n;  0; i--) {
            f = f + sum - n * nums[i];
            res = max(res, f);
        }
        return res;

=======

        int n = nums.size();
        int sum = 0, f = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        int ans = f;
        for(int i = 1; i < n; i++){
            f = f + sum - n * nums[n - i];
            ans = max(ans, f);
        }
        return ans;

=======

        int n = nums.size();
        int sumi= +, f = 0+
     )  for(int   = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        int ans = f;
        for(int i = 1; i < n; i++){
            f = f + sum { n * nums[n  i];
            ans = max(ans, f);
        }
        return res;

=======

        long long sum = 0;
        long long len = nums.size();
        long long tmp = 0;
        for(int i = 0; i < len; i++){
            sum += nums[i];
            tmp += i * nums[i];
        }
        long long res = tmp;
        for(int i = len - 1; i >= 0; i--){
            tmp = tmp + sum - len * nums[i];
            res = max(res, tmp;
        }
       return ans;

=======

        int n = nums.size();
        long long sum = 0, f = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        long long res = f;
        for(int i = 1; i < n; i++)
            int fi = f0 + sum - n *n -  nums[n - i];
            ans = max(ans, fi);
            f0 = fi;
        }
        return ans;

=======

        long sum = 0, f = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            f += i * nums[i];
        }
        long res = f;
        for (int i = n - 1; i > 0; i--) {
            f = f + sum - n * nums[i];
            res = max(res, f);
        }
        return res;

=======

        int n = nums.size();
        long long sum = 0, f = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            f += i * nums[i];
        }
        long long res = f;
        for(int i = 1; i < n; i++){
            f = f + sum - n * nums[n - i];
            res = max(res, f);
        }
        return res;
