Synthesizing 10/10 solutions

=======

        int x = 0, y = 0;
        int dx = 0, dy = 1;
        for (char c : instructions) {
            if (c == 'G') {
                x += dx;
                y += dy;
            } else if (c == 'L') {
                int tmp = dx;
                dx = -dy;
                dy = tmp;
            } else if (c == 'R') {
                int tmp = dx;
                dx = dy;
                dy = -tmp;
            }
        }
        return (x == 0 && y == 0) || (dx != 0 || dy != 1);

=======

        int x = 0, y = 0;
        int dx = 0, dy = 1;
        for (char c : instructions) {
            if (c == 'G') {
                x += dx;
                y += dy;
            } else if (c == 'L') {
                int t = dx;
                dx = -dy;
                dy = t;
            } else {
                int t = dx;
                dx = dy;
                dy = -t;
            }
        }
        return (x == 0 && y == 0) || (dx != 0 || dy != 1);

=======

        int x = 0, y = 0;
        int dx = 0, dy = 1;
        for (char c : instructions) {
            if (c == 'G') {
                x += dx;
                y += dy;
            } else if (c == 'L') {
                int tmp = dx;
                dx = -dy;
                dy = tmp;
            } else {
                int tmp = dx;
                dx = dy;
                dy = -tmp;
            }
        }
        return (x == 0 && y == 0) || (dx != 0 || dy != 1);

=======

        int x = 0, y = 0;
        int dx = 0, dy = 1;
        for (int i = 0; i < instructions.size(); i++) {
            if (instructions[i] == 'G') {
                x += dx;
                y += dy;
            } else if (instructions[i] == 'L') {
                int tdx = dx;
                dx = -dy;
                dy = tdx;
            } else {
                int tdx = dx;
                dx = dy;
                dy = -tdx;
            }
        }
        return (x == 0 && y == 0) || (dx != 0 || dy != 1);

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        int dx[] = {0, 1, 0, -1};
        int dy[] = {1, 0, -1, 0};
        for (char c: instructions) {
            if (c == 'G') {
                x += dx[dir];
                y += dy[dir];
            } else if (c == 'L') {
                dir = (dir + 3) % 4;
            } else {
                dir = (dir + 1) % 4;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        for (int i = 0; i < instructions.length(); i++) {
            if (instructions[i] == 'G') {
                switch (dir) {
                    case 0: y++; break;
                    case 1: x--; break;
                    case 2: y--; break;
                    case 3: x++; break;
                }
            } else if (instructions[i] == 'L') {
                dir = (dir + 1) % 4;
            } else {
                dir = (dir - 1 + 4) % 4;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int x = 0, y = 0;
        int dir = 0;
        for (auto c : instructions) {
            switch (c) {
                case 'G':
                    switch (dir) {
                        case 0:
                            y++;
                            break;
                        case 1:
                            x++;
                            break;
                        case 2:
                            y--;
                            break;
                        case 3:
                            x--;
                            break;
                    }
                    break;
                case 'L':
                    dir = (dir + 3) % 4;
                    break;
                case 'R':
                    dir = (dir + 1) % 4;
                    break;
            }
        }
        return x == 0 && y == 0 || dir != 0;

=======

        int x = 0, y = 0;
        int dir = 0;
        for (int i = 0; i < instructions.length(); i++) {
            if (instructions[i] == 'R') {
                dir = (dir + 1) % 4;
            } else if (instructions[i] == 'L') {
                dir = (dir + 3) % 4;
            } else {
                if (dir == 0) y++;
                else if (dir == 1) x++;
                else if (dir == 2) y--;
                else x--;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        int dx[] = {0, 1, 0, -1};
        int dy[] = {1, 0, -1, 0};
        for (char c: instructions) {
            if (c == 'G') {
                x += dx[dir];
                y += dy[dir];
            } else if (c == 'L') {
                dir = (dir + 3) % 4;
            } else {
                dir = (dir + 1) % 4;
            }
        }
        return (x == 0 && y == 0) |;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int x = 0, y = 0;
        int dir = 0; // 0: north, 1: east, 2: south, 3: west
        for (auto c : instructions) {
            switch (c) {
                case 'G':
                    switch (dir) {
                        case 0:
                            y++;
                            break;
                        case 1:
                            x++;
                            break;
                        case 2:
                            y--;
                            break;
                        case 3:
                            x--;
                            break;
                    }
                    break;
                case 'L':
                    dir = (dir + 3) % 4;
                    break;
                case 'R':
                    dir = (dir + 1) % 4;
                    break| dir != 0;

=======

        int x = 0;
        int y = 0;
        int dir = 0;
        for (int i = 0; i < instructions.length(); i++) {
            if (instructions[i] == 'G') {
                switch (dir) {
                    case 0: y++; break;
                    case 1: x--; break;
                    case 2: y--; break;
                    case 3: x++; break;
                }
            } else if (instructions[i] == 'L') {
                dir = (dir + 1) % 4;
            } else {
                dir = (dir - 1 + 4) % 4;
            }
        }
        return (x == 0 && y == 0) || dir != 0;

=======

        int x = 0, y = 0;
        int dir = 0;
        for (char c: instructions) {
            if (c == 'G') {
                switch (dir) {
                    case 0: y++; break;
                    case 1: x++; break;
                    case 2: y--; break;
                    case 3: x--; break;
                }
            }
            else if (c == 'L') {
                dir = (dir + 3) % 4;
            }
            else if (c == 'R') {
                dir = (dir + 1) % 4;
            }
        }
        return (x == 0 && y == 0) || dir != 0;
