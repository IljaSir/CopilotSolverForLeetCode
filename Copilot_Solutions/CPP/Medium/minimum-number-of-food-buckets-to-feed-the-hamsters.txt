Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int n = hamsters.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters[i] == 'H') {
                if (i > 0 && hamsters[i - 1] == '.') {
                    res++;
                    hamsters[i - 1] = 'B';
                } else if (i < n - 1 && hamsters[i + 1] == '.') {
                    res++;
                    hamsters[i + 1] = 'B';
                } else {
                    return -1;
                }
            }
        }
        return res;

=======

        int n = hamsters.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters[i] == 'H') {
                if (i > 0 && hamsters[i - 1] == '.') {
                    hamsters[i - 1] = 'B';
                    res++;
                } else if (i < n - 1 && hamsters[i + 1] == '.') {
                    hamsters[i + 1] = 'B';
                    res++;
                } else {
                    return -1;
                }
            }
        }
        return res;

=======

        int n = hamsters.size();
        int left = 0, right = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters[i] == 'H') {
                if (i == 0 || hamsters[i - 1] == '.') {
                    left++;
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (hamsters[i] == 'H') {
                if (i == n - 1 || hamsters[i + 1] == '.') {
                    right++;
                }
            }
        }
        if (right == 0 || left == 0) {
            return -1;
        }
        return max(left, right);

=======

        int n = hamsters.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (hamsters[i] == 'H') {
                if (cnt == 0) {
                    ans++;
                }
                cnt = 2;
            } else {
                cnt = max(0, cnt - 1);
            }
        }
        if (cnt > 0) {
            return -1;
        }
        return ans;

=======

        int n = hamsters.size();
        if (n < 2) return 0;
        int ans = 0;
        if (hamsters[0] == 'H') ans++;
        if (hamsters[n - 1] == 'H') ans++;
        for (int i = 1; i < n - 1; i++) {
            if (hamsters[i] == 'H') {
                if (hamsters[i - 1] == '.' && hamsters[i + 1] == '.') {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = hamsters.size();
        int ans = 0;
        int i = 0;
        while(i < n) {
            if(hamsters[i] == 'H') {
                ++ans;
                if(i > 0 && hamsters[i-1] == 'H') {
                    --ans;
                }
                if(i < n-1 && hamsters[i+1] == 'H') {
                    --ans;
                }
                ++i;
            }
            ++i;
        }
        return ans;
