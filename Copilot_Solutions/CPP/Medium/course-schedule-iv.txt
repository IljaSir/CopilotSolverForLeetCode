Synthesizing 10/10 solutions

=======

        vector<vector<bool>> dp(numCourses, vector<bool>(numCourses, false));
        for (int i = 0; i < prerequisites.size(); i++) {
            dp[prerequisites[i][1]][prerequisites[i][0]] = true;
        }
        for (int k = 0; k < numCourses; k++) {
            for (int i = 0; i < numCourses; i++) {
                for (int j = 0; j < numCourses; j++) {
                    dp[i][j] = dp[i][j] || (dp[i][k] && dp[k][j]);
                }
            }
        }
        vector<bool> ans;
        for (int i = 0; i < queries.size(); i++) {
            ans.push_back(dp[queries[i][1]][queries[i][0]]);
        }
        return ans;

=======

        vector<vector<bool>> adj(numCourses, vector<bool>(numCourses, false));
        for (auto& p : prerequisites) {
            adj[p[0]][p[1]] = true;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    adj[i][j] = adj[i][j] || (adj[i][k] && adj[k][j]);
                }
            }
        }
        vector<bool> ans;
        for (auto& q : queries) {
            ans.push_back(adj[q[0]][q[1]]);
        }
        return ans;

=======

        vector<vector<bool>> reachable(numCourses, vector<bool>(numCourses, false));
        for (auto &p : prerequisites) {
            reachable[p[0]][p[1]] = true;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    reachable[i][j] = reachable[i][j] || (reachable[i][k] && reachable[k][j]);
                }
            }
        }
        vector<bool> ans;
        for (auto &q : queries) {
            ans.push_back(reachable[q[0]][q[1]]);
        }
        return ans;

=======

        vector<vector<int>> g(numCourses, vector<int>(numCourses, 0));
        for (auto& p: prerequisites) {
            g[p[0]][p[1]] = 1;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    g[i][j] = g[i][j] || (g[i][k] && g[k][j]);
                }
            }
        }
        vector<bool> res;
        for (auto& q: queries) {
            res.push_back(g[q[0]][q[1]]);
        }
        return res;

=======

        vector<vector<int>> g(numCourses, vector<int>(numCourses, 0));
        for (auto &p : prerequisites) {
            g[p[0]][p[1]] = 1;
        }
        for (int k = 0; k < numCourses; k++) {
            for (int i = 0; i < numCourses; i++) {
                for (int j = 0; j < numCourses; j++) {
                    g[i][j] |= g[i][k] & g[k][j];
                }
            }
        }
        vector<bool> res;
        for (auto &q : queries) {
            res.push_back(g[q[0]][q[1]]);
        }
        return res;

=======

        vector<vector<int>> g(numCourses, vector<int>(numCourses, 0));
        for (auto& p: prerequisites) {
            g[p[0]][p[1]] = 1;
        }
        for (int i = 0; i < numCourses; i++) {
            for (int j = 0; j < numCourses; j++) {
                for (int k = 0; k < numCourses; k++) {
                    if (g[j][i] && g[i][k]) {
                        g[j][k] = 1;
                    }
                }
            }
        }
        vector<bool> res;
        for (auto& q: queries) {
            res.push_back(g[q[0]][q[1]]);
        }
        return res;

=======

        vector<vector<int>> adj(numCourses, vector<int>(numCourses, 0));
        for (auto& p : prerequisites) {
            adj[p[1]][p[0]] = 1;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    adj[i][j] |= adj[i][k] & adj[k][j];
                }
            }
        }
        vector<bool> ans;
        for (auto& q : queries) {
            ans.push_back(adj[q[1]][q[0]]);
        }
        return ans;

=======

        vector<vector<int>> graph(numCourses, vector<int>(numCourses, 0));
        for (auto& e: prerequisites) {
            graph[e[0]][e[1]] = 1;
        }
        for (int i = 0; i < numCourses; ++i) {
            graph[i][i] = 1;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    graph[i][j] = graph[i][j] || (graph[i][k] && graph[k][j]);
                }
            }
        }
        vector<bool> ans;
        for (auto& q: queries) {
            ans.push_back(graph[q[0]][q[1]]);
        }
        return ans;

=======

        vector<vector<int>> g(numCourses);
        vector<vector<int>> dp(numCourses, vector<int>(numCourses, 0));
        for (auto& p : prerequisites) {
            g[p[0]].push_back(p[1]);
        }
        for (int i = 0; i < numCourses; i++) {
            vector<int> visited(numCourses, 0);
            dfs(g, dp, visited, i, i);
        }
        vector<bool> res;
        for (auto& q : queries) {
            res.push_back(dp[q[0]][q[1]] == 1);
        }
        return res;
    }
    void dfs(vector<vector<int>>& g, vector<vector<int>>& dp, vector<int>& visited, int cur, int start) {
        if (visited[cur] == 1) return;
        visited[cur] = 1;
        dp[start][cur] = 1;
        for (int i = 0; i < g[cur].size(); i++) {
            dfs(g, dp, visited, g[cur][i], start);
        }

=======

        vector<bool> res;
        vector<vector<bool>> graph(numCourses, vector<bool>(numCourses, false));
        for (auto &e : prerequisites) {
            graph[e[0]][e[1]] = true;
        }
        for (int k = 0; k < numCourses; ++k) {
            for (int i = 0; i < numCourses; ++i) {
                for (int j = 0; j < numCourses; ++j) {
                    graph[i][j] = graph[i][j] || (graph[i][k] && graph[k][j]);
                }
            }
        }
        for (auto &e : queries) {
            res.push_back(graph[e[0]][e[1]]);
        }
        return res;
