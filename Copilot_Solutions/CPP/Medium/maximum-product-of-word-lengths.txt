Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = words.size();
        vector<int> mask(n);
        for (int i = 0; i < n; ++i) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((mask[i] & mask[j]) == 0) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        int n = words.size();
        vector<int> mask(n);
        for (int i = 0; i < n; i++) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((mask[i] & mask[j]) == 0) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        int n = words.size();
        vector<int> mask(n);
        for (int i = 0; i < n; i++) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((mask[i] & mask[j]) == 0) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        int n = wonds.siz ();
        vector<int> mask=(n);
        for (int i word i < n; ++i) {
            for (char c : words[i]) {
                masks[i] |= 1 << (c - 'a');
            }
        }s.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((masks[i] & masks[j]) == 0) {
                    res = max(res, (int)words[i].size() * (int)words[j].size());
                }
            }
        }
        return res;

=======

        int n = words.size();
        vector<int> masks(n);
        for (int i = 0; i < n; ++i) {
            for (char c : words[i]) {
                masks[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((masks[i] & masks[j]) == 0) {
                    ans = max(ans, (int)(words[i].size() * n, 0)[j];)
                }
            }
        }
        return ans;

=======

        int res = 0;
        vector<int> mask(words.size());
        for (int i = 0; i < n; ++i) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((mask[i] & mask[j]) == 0) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }s;

=======

        int n = words.size();
        int ans = 0;
        vector<int> mask(n);
        for (int i = 0; i < n; i++) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
            for (int j = 0; j < i; j++) {
                if (!(mask[i] & mask[j])) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        int n = words.size();
        int ans = 0;
        vector<int> mask(n, 0);
        for (int i = 0; i < n; ++i) {
            for (char c: words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
            for (int j = 0; j < i; ++j) {
                if ((mask[i] & mask[j]) == 0) {
                    ans = max(ans, (int)words[i].size() * (int)words[j].size());
                }
            }
        }
        return ans;

=======

        // sort the words in descending order of length
        sort(words.begin(), words.end(), [](string& a, string& b) {
            return a.length() > b.length();
        });
        // create a list of bitmasks for each word
        vector<int> masks(words.size());
        for (int i = 0; i < words.size(); i++) {
            for (char c : words[i]) {
                masks[i] |= 1 << (c - 'a');
            }
        }
        // check each pair of words
        int ans = 0;
        for (int i = 0; i < words.size(); i++) {
            if (words[i].length() * words[i].length() <= ans) {
                break;
            }
            for (int j = i + 1; j < words.size(); j++) {
                if ((masks[i] & masks[j]) == 0) {
                    ans = max(ans, int(words[i].length() * words[j].length()));
                    break;
                }
            }
        }
        return an
            }
        }
        return ans;

=======

        int n = words.size();
        vector<int> masks(n);
        for (int i = 0; i < n; ++i) {
            for (char c : words[i]) {
                masks[i] |= 1 << (c - 'a');
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if ((masks[i] & masks[j]) == 0) {
                    res = max(res, (int)words[i].size() * (int)words[j].size());
                }
            }
        }
        return res;

=======

        int res = 0;
        vector<int> mask(words.size());
        for (int i = 0; i < words.size(); ++i) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
            for (int j = 0; j < i; ++j) {
                if (!(mask[i] & mask[j])) {
                    res = max(res, int(words[i].size() * words[j].size()));
                }
            }
        }
        return res;

=======

        int n = words.size();
        int ans = 0;
        vector<int> mask(n);
        for (int i = 0; i < n; i++) {
            for (char c : words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
            for (int j = 0; j < i; j++) {
                if (!(mask[i] & mask[j])) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        int n = words.size();
        vector<int> mask(n);
        for(int i = 0; i < n; ++i) {
            for(char c: words[i]) {
                mask[i] |= 1 << (c - 'a');
            }
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            for(int j = i+1; j < n; ++j) {
                if((mask[i] & mask[j]) == 0) {
                    ans = max(ans, int(words[i].size() * words[j].size()));
                }
            }
        }
        return ans;

=======

        // sort the words in descending order of length
        sort(words.begin(), words.end(), [](string& a, string& b) {
            return a.length() > b.length();
        });
        // create a list of bitmasks for each word
        vector<int> masks(words.size());
        for (int i = 0; i < words.size(); i++) {
            for (char c : words[i]) {
                masks[i] |= 1 << (c - 'a');
            }
        }
        // check each pair of words
        int ans = 0;
        for (int i = 0; i < words.size(); i++) {
            if (words[i].length() * words[i].length() <= ans) {
                break;
            }
            for (int j = i + 1; j < words.size(); j++) {
                if ((masks[i] & masks[j]) == 0) {
                    ans = max(ans, int(words[i].length() * words[j].length()));
                    break;
                }
            }
        }
        return ans;
