Synthesizing 10/10 solutions

=======

        vector<string> result;
        for (auto word : words) {
            if (match(word, pattern)) {
                result.push_back(word);
            }
        }
        return result;
    }
    
    bool match(string word, string pattern) {
        unordered_map<char, char> w2p;
        unordered_map<char, char> p2w;
        for (int i = 0; i < word.size(); i++) {
            if (w2p.find(word[i]) == w2p.end()) {
                w2p[word[i]] = pattern[i];
            }
            if (p2w.find(pattern[i]) == p2w.end()) {
                p2w[pattern[i]] = word[i];
            }
            if (w2p[word[i]] != pattern[i] || p2w[pattern[i]] != word[i]) {
                return false;
            }
        }
        return true;

=======

        vector<string> result;
        for (auto word : words) {
            if (match(word, pattern)) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> result;
        for (const auto& word : words) {
            if (isMatch(word, pattern)) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> ret;
        for (auto word: words) {
            if (match(word, pattern)) {
                ret.push_back(word);
            }
        }
        return ret;
    }
    bool match(string word, string pattern) {
        map<char, char> m;
        for (int i = 0; i < word.size(); i++) {
            if (m.find(pattern[i]) == m.end()) {
                m[pattern[i]] = word[i];
            }
            else {
                if (m[pattern[i]] != word[i]) {
                    return false;
                }
            }
        }
        map<char, char> m2;
        for (int i = 0; i < word.size(); i++) {
            if (m2.find(word[i]) == m2.end()) {
                m2[word[i]] = pattern[i];
            }
            else {
                if (m2[word[i]] != pattern[i]) {
                    return false;
                }
            }
        }
        return true;

=======

        vector<string> ans;
        for (string word : words) {
            if (match(word, pattern)) ans.push_back(word);
        }
        return ans;
    }
    bool match(string word, string pattern) {
        unordered_map<char, char> mp;
        unordered_set<char> st;
        for (int i = 0; i < word.size(); i++) {
            if (mp.find(word[i]) == mp.end()) {
                if (st.find(pattern[i]) != st.end()) return false;
                mp[word[i]] = pattern[i];
                st.insert(pattern[i]);
            } else {
                if (mp[word[i]] != pattern[i]) return false;
            }
        }
        return true;

=======

        vector<string> res;
        for (auto w : words) {
            if (isMatch(w, pattern)) res.push_back(w);
        }
        return res;
    }
    bool isMatch(string word, string pattern) {
        map<char, char> m;
        map<char, char> m2;
        for (int i = 0; i < word.size(); i++) {
            if (m.find(word[i]) == m.end() && m2.find(pattern[i]) == m2.end()) {
                m[word[i]] = pattern[i];
                m2[pattern[i]] = word[i];
            } else {
                if (m[word[i]] != pattern[i]) return false;
            }
        }
        return true;

=======

        vector<string> res;
        for (auto& w : words) {
            if (match(w, pattern)) res.push_back(w);
        }
        return res;

=======

        vector<string> result;
        for (auto word: words) {
            if (isMatch(word, pattern))
                result.push_back(word);
        }
        return result;

=======

        vector<string> res;
        for(string word : words){
            if(isMatch(word, pattern)){
                res.push_back(word);
            }
        }
        return res;

=======

        vector<string> res;
        for(auto w: words) {
            if(match(w, pattern))
                res.push_back(w);
        }
        return res;
    }
    bool match(string w, string pattern) {
        unordered_map<char, char> w2p, p2w;
        for(int i = 0; i < w.size(); i++) {
            if(w2p.find(w[i]) == w2p.end() && p2w.find(pattern[i]) == p2w.end()) {
                w2p[w[i]] = pattern[i];
                p2w[pattern[i]] = w[i];
            }
            else if(w2p[w[i]] != pattern[i] || p2w[pattern[i]] != w[i])
                return false;
        }
        return true;
