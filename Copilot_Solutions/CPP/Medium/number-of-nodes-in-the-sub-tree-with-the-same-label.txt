Synthesizing 10/10 solutions

=======

        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> ans(n);
        vector<int> visited(n);
        dfs(0, adj, labels, ans, visited);
        return ans;
    }
    
    vector<int> dfs(int node, vector<vector<int>>& adj, string& labels, vector<int>& ans, vector<int>& visited) {
        visited[node] = 1;
        vector<int> cnt(26);
        for (auto& v : adj[node]) {
            if (!visited[v]) {
                auto sub = dfs(v, adj, labels, ans, visited);
                for (int i = 0; i < 26; ++i) cnt[i] += sub[i];
            }
        }
        ans[node] = ++cnt[labels[node] - 'a'];
        return cnt;

=======

        vector<int> ans(n, 0);
        vector<vector<int>> graph(n);
        for (auto& e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        vector<int> visited(n, 0);
        dfs(graph, visited, 0, labels, ans);
        return ans;
    }
    vector<int> dfs(vector<vector<int>>& graph, vector<int>& visited, int node, string& labels, vector<int>& ans) {
        if (visited[node]) return vector<int>(26, 0);
        visited[node] = 1;
        vector<int> count(26, 0);
        count[labels[node] - 'a']++;
        for (auto& next : graph[node]) {
            auto nextCount = dfs(graph, visited, next, labels, ans);
            for (int i = 0; i < 26; i++) {
                count[i] += nextCount[i];
            }
        }
        ans[node] = count[labels[node] - 'a'];
        return count;

=======

        vector<int> result(n, 0);
        vector<vector<int>> graph(n);
        for (auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<bool> visited(n, false);
        dfs(0, graph, labels, visited, result);
        return result;
    }
    vector<int> dfs(int root, vector<vector<int>>& graph, string& labels, vector<bool>& visited, vector<int>& result) {
        visited[root] = true;
        vector<int> count(26, 0);
        count[labels[root] - 'a']++;
        for (auto node : graph[root]) {
            if (!visited[node]) {
                vector<int> subCount = dfs(node, graph, labels, visited, result);
                for (int i = 0; i < 26; i++) {
                    count[i] += subCount[i];
                }
            }
        }
        result[root] = count[labels[root] - 'a'];
        return count;

=======

        vector<int> ans(n, 0);
        vector<vector<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<bool> visited(n, false);
        dfs(0, adj, labels, visited, ans);
        return ans;

=======

        vector<vector<int>> adj(n);
        vector<int> res(n);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> visited(n);
        dfs(0, adj, labels, visited, res);
        return res;
    }
    vector<int> dfs(int root, vector<vector<int>>& adj, string& labels, vector<int>& visited, vector<int>& res) {
        vector<int> cnt(26);
        visited[root] = 1;
        for (auto& v : adj[root]) {
            if (!visited[v]) {
                auto sub = dfs(v, adj, labels, visited, res);
                for (int i = 0; i < 26; ++i) {
                    cnt[i] += sub[i];
                }
            }
        }
        cnt[labels[root] - 'a']++;
        res[root] = cnt[labels[root] - 'a'];
        return cnt;

=======

        vector<int> ans(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<bool> visited(n, false);
        dfs(0, graph, labels, visited, ans);
        return ans;
    }
    vector<int> dfs(int node, vector<vector<int>>& graph, string& labels, vector<bool>& visited, vector<int>& ans) {
        visited[node] = true;
        vector<int> count(26, 0);
        count[labels[node] - 'a']++;
        for (auto child : graph[node]) {
            if (!visited[child]) {
                auto childCount = dfs(child, graph, labels, visited, ans);
                for (int i = 0; i < 26; i++) {
                    count[i] += childCount[i];
                }
            }
        }
        ans[node] = count[labels[node] - 'a'];
        return count;

=======

        vector<int> ans(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (auto& edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        vector<int> visited(n, 0);
        dfs(graph, visited, labels, 0, ans);
        return ans;
    }
    vector<int> dfs(vector<vector<int>>& graph, vector<int>& visited, string& labels, int index, vector<int>& ans) {
        vector<int> count(26, 0);
        visited[index] = 1;
        for (auto& v : graph[index]) {
            if (!visited[v]) {
                vector<int> c = dfs(graph, visited, labels, v, ans);
                for (int i = 0; i < 26; ++i) {
                    count[i] += c[i];
                }
            }
        }
        ++count[labels[index] - 'a'];
        ans[index] = count[labels[index] - 'a'];
        return count;

=======

        vector<int> ans(n, 0);
        vector<vector<int>> adj(n, vector<int>());
        for (auto e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        vector<int> visited(n, 0);
        dfs(0, labels, adj, visited, ans);
        return ans;
    }
    vector<int> dfs(int i, string& labels, vector<vector<int>>& adj, vector<int>& visited, vector<int>& ans) {
        vector<int> count(26, 0);
        visited[i] = 1;
        count[labels[i] - 'a']++;
        for (auto j : adj[i]) {
            if (visited[j] == 0) {
                vector<int> subCount = dfs(j, labels, adj, visited, ans);
                for (int k = 0; k < 26; k++) {
                    count[k] += subCount[k];
                }
            }
        }
        ans[i] = count[labels[i] - 'a'];
        return count;

=======

        vector<vector<int>> adj(n);
        for(auto& edge: edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        vector<int> ans(n, 1);
        vector<int> count(26);
        vector<bool> visited(n, false);
        visited[0] = true;
        dfs(0, adj, labels, count, visited, ans);
        return ans;
    }
    
    void dfs(int node, vector<vector<int>>& adj, string& labels, vector<int>& count, vector<bool>& visited, vector<int>& ans) {
        count[labels[node] - 'a']++;
        for(auto& child: adj[node]) {
            if(!visited[child]) {
                visited[child] = true;
                dfs(child, adj, labels, count, visited, ans);
                ans[node] += ans[child];
            }
        }
        count[labels[node] - 'a']--;

=======

        vector<int> res(n, 0);
        unordered_map<int, vector<int>> adj;
        for (auto &e: edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        dfs(adj, labels, res, 0, -1);
        return res;
