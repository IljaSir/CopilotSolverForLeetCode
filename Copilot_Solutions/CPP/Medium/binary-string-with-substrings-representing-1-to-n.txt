Synthesizing 10/10 solutions

=======

        for (int i = 1; i <= n; ++i) {
            if (s.find(bitset<32>(i).to_string().substr(32 - __builtin_clz(i))) == string::npos) {
                return false;
            }
        }
        return true;

=======

        for (int i = n; i > n/2; i--) {
            if (s.find(bitset<32>(i).to_string().substr(32-__builtin_clz(i))) == string::npos)
                return false;
        }
        return true;

=======

        for (int i = 1; i <= n; ++i) {
            string binary = bitset<32>(i).to_string();
            if (s.find(binary.substr(binary.find('1'))) == string::npos) {
                return false;
            }
        }
        return true;

=======

        for (int i = 1; i <= n; i++)
        {
            string binary = "";
            int num = i;
            while (num > 0)
            {
                binary = to_string(num % 2) + binary;
                num /= 2;
            }
            if (s.find(binary) == string::npos)
                return false;
        }
        return true;

=======

        for (int i = 1; i <= n; i++) {
            int tmp = i;
            string str;
            while (tmp) {
                str += (tmp % 2) + '0';
                tmp /= 2;
            }
            reverse(str.begin(), str.end());
            if (s.find(str) == string::npos) {
                return false;
            }
        }
        return true;

=======

        if (n > s.length() * 8) return false;
        for (int i = 1; i <= n; i++) {
            if (s.find(to_binary(i)) == string::npos) return false;
        }
        return true;
    }
    
    string to_binary(int n) {
        string s;
        while (n > 0) {
            s = (n % 2 == 1 ? "1" : "0") + s;
            n /= 2;
        }
        return s;

=======

        for(int i = 1; i <= n; i++) {
            string tmp = "";
            int num = i;
            while(num > 0) {
                tmp = (num % 2 == 0 ? "0" : "1") + tmp;
                num /= 2;
            }
            if(s.find(tmp) == string::npos) {
                return false;
            }
        }
        return true;

=======

        int i = 0;
        for (i = 1; i <= n; i++) {
            string s1 = bitset<32>(i).to_string();
            if (s.find(s1) == string::npos) {
                return false;
            }
        }
        return true;

=======

        int m = s.size() - 1;
        for (int i = n; i > n/2; i--) {
            int j = i;
            while (j > 0) {
                if (s[m - j % 2] != '1') {
                    return false;
                }
                j /= 2;
            }
        }
        return true;

=======

        int i = 0;
        int j = s.size() - 1;
        while (i < j) {
            swap(s[i], s[j]);
            i++;
            j--;
        }
        int m = 0;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '1') {
                m |= (1 << i);
            }
        }
        for (int i = 1; i <= n; i++) {
            if ((m & i) == 0) {
                return false;
            }
        }
        return true;
