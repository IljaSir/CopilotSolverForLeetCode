Synthesizing 10/10 solutions

=======

        unordered_map<double, int> m;
        for (auto& r : rectangles) {
            m[r[0] * 1.0 / r[1]]++;
        }
        long long res = 0;
        for (auto& p : m) {
            res += (long long)p.second * (p.second - 1) / 2;
        }
        return res;

=======

        unordered_map<double, int> m;
        for (auto r: rectangles) {
            m[r[0] * 1.0 / r[1]]++;
        }
        long long ans = 0;
        for (auto p: m) {
            ans += p.second * (p.second - 1) / 2;
        }
        return ans;

=======

        map<pair<int, int>, int> m;
        for (auto& r : rectangles) {
            int g = gcd(r[0], r[1]);
            m[{r[0]/g, r[1]/g}]++;
        }
        long long res = 0;
        for (auto& p : m) {
            res += p.second * (p.second - 1) / 2;
        }
        return res;

=======

        unordered_map<double, int> m;
        for (auto& r : rectangles)
            m[1.0 * r[0] / r[1]]++;
        long long res = 0;
        for (auto& [k, v] : m)
            res += 1LL * v * (v - 1) / 2;
        return res;

=======

        long long res = 0;
        unordered_map<double, int> mp;
        for (auto& r : rectangles) {
            double ratio = (double)r[0] / r[1];
            res += mp[ratio]++;
        }
        return res;

=======

        long long ans = 0;
        unordered_map<double, int> mp;
        for (auto& r : rectangles) {
            double ratio = (double)r[0] / r[1];
            ans += mp[ratio];
            ++mp[ratio];
        }
        return ans;

=======

        map<double, int> mp;
        for (auto& rect : rectangles) {
            mp[(double)rect[0] / rect[1]]++;
        }
        long long ans = 0;
        for (auto& [_, cnt] : mp) {
            ans += (long long)cnt * (cnt - 1) / 2;
        }
        return ans;

=======

        unordered_map<double, int> ratioCount;
        for (auto& rect : rectangles) {
            ratioCount[1.0 * rect[0] / rect[1]]++;
        }
        long long res = 0;
        for (auto& [ratio, count] : ratioCount) {
            res += count * (count - 1) / 2;
        }
        return res;

=======

        long long res = 0;
        unordered_map<double, int> mp;
        for (auto &r : rectangles) {
            double ratio = (double)r[0] / (double)r[1];
            res += mp[ratio];
            mp[ratio]++;
        }
        return res;

=======

        map<double, long long> mp;
        for (auto & r : rectangles) {
            mp[r[0] * 1.0 / r[1]]++;
        }
        long long ans = 0;
        for (auto & p : mp) {
            ans += p.second * (p.second - 1) / 2;
        }
        return ans;
