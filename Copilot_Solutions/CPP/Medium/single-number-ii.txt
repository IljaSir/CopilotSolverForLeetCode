Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int ones = 0, twos = 0;
        for (int i = 0; i < nums.size(); i++) {
            ones = (ones ^ nums[i]) & ~twos;
            twos = (twos ^ nums[i]) & ~ones;
        }
        return ones;

=======

        int one = 0, two = 0, three = 0;
        for (int i = 0; i < nums.size(); i++) {
            two |= one & nums[i];
            one ^= nums[i];
            three = one & two;
            one &= ~three;
            two &= ~three;
        }
        return one;

=======

        int result = 0;
        for (int i = 0; i < 32; i++) {
            int sum = 0;
            for (int j = 0; j < nums.size(); j++) {
                if (nums[j] & (1 << i)) {
                    sum++;
                    sum %= 3;
                }
            }
            if (sum != 0) {
                result |= sum << i;
            }
        }
        return result;

=======

        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int sum = 0;
            for (int j = 0; j < nums.size(); j++) {
                if ((nums[j] >> i) & 1) {
                    sum++;
                }
            }
            if (sum % 3) {
                ans |= 1 << i;
            }
        }
        return ans;

=======

        int a = 0, b = 0;
        for (int n : nums) {
            a = (a ^ n) & ~b;
            b = (b ^ n) & ~a;
        }
        return a;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < 32; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (nums[j] & (1 << i)) {
                    cnt++;
                }
            }
            if (cnt % 3) {
                res |= (1 << i);
            }
        }
        return res;

=======

        int result = 0;
        for (int i = 0; i < sizeof(int) * 8; i++) {
            int sum = 0;
            for (int j = 0; j < nums.size(); j++) {
                sum += (nums[j] >> i) & 1;
            }
            result |= (sum % 3) << i;
        }
        return result;

=======

        int n = nums.size();
        int ones = 0, twos = 0, threes = 0;
        for (int i = 0; i < n; i++) {
            twos |= ones & nums[i];
            ones ^= nums[i];
            threes = ones & twos;
            ones &= ~threes;
            twos &= ~threes;
        }
        return ones;

=======

        int ans = 0;
        for (int i = 0; i < 32; ++i) {
            int cnt = 0;
            for (int num: nums) {
                cnt += (num >> i) & 1;
            }
            ans |= (cnt % 3) << i;
        }
        return ans;
