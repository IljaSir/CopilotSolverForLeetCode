Synthesizing 10/10 solutions

=======

        int h1 = stoi(loginTime.substr(0, 2));
        int m1 = stoi(loginTime.substr(3, 2));
        int h2 = stoi(logoutTime.substr(0, 2));
        int m2 = stoi(logoutTime.substr(3, 2));
        int t1 = h1 * 60 + m1;
        int t2 = h2 * 60 + m2;
        if (t1 > t2) t2 += 24 * 60;
        int res = 0;
        for (int i = t1 + 15 - (t1 % 15); i <= t2; i += 15) {
            if (i % 60 == 0) {
                ++res;
            }
        }
        return res;

=======

        int h1 = stoi(loginTime.substr(0, 2));
        int m1 = stoi(loginTime.substr(3, 2));
        int h2 = stoi(logoutTime.substr(0, 2));
        int m2 = stoi(logoutTime.substr(3, 2));
        if(h1 > h2 || (h1 == h2 && m1 > m2)){
            h2 += 24;
        }
        if(m1 % 15 != 0){
            m1 = m1 - m1 % 15 + 15;
        }
        if(m2 % 15 != 0){
            m2 = m2 - m2 % 15;
        }
        return (h2 - h1) * 4 + (m2 - m1) / 15;

=======

        int h1 = stoi(loginTime.substr(0, 2));
        int m1 = stoi(loginTime.substr(3, 2));
        int h2 = stoi(logoutTime.substr(0, 2));
        int m2 = stoi(logoutTime.substr(3, 2));
        if (h1 > h2 || (h1 == h2 && m1 > m2)) {
            h2 += 24;
        }
        if (m1 % 15 != 0) {
            m1 = (m1 / 15 + 1) * 15;
        }
        if (m2 % 15 != 0) {
            m2 = m2 / 15 * 15;
        }
        return max(0, (h2 - h1) * 4 + (m2 - m1) / 15);

=======

        int h1 = stoi(loginTime.substr(0,2));
        int m1 = stoi(loginTime.substr(3,2));
        int h2 = stoi(logoutTime.substr(0,2));
        int m2 = stoi(logoutTime.substr(3,2));
        int res = 0;
        if(h1 > h2 || (h1 == h2 && m1 > m2)) res += 24*4;
        res += (h2-h1)*4;
        res += m2/15 - m1/15;
        if(m1%15 != 0) res--;
        return max(0,res);

=======

        int login = stoi(loginTime.substr(0, 2)) * 60 + stoi(loginTime.substr(3, 2));
        int logout = stoi(logoutTime.substr(0, 2)) * 60 + stoi(logoutTime.substr(3, 2));
        if (logout < login) {
            logout += 24 * 60;
        }
        login = (login + 14) / 15 * 15;
        logout = logout / 15 * 15;
        return max(0, logout - login) / 15;

=======

        int l = stoi(loginTime.substr(0, 2)) * 60 + stoi(loginTime.substr(3, 2));
        int r = stoi(logoutTime.substr(0, 2)) * 60 + stoi(logoutTime.substr(3, 2));
        if (l > r) {
            r += 24 * 60;
        }
        l = (l + 14) / 15;
        r /= 15;
        return max(0, r - l);

=======

        int l = stoi(loginTime.substr(0, 2)) * 60 + stoi(loginTime.substr(3, 2));
        int r = stoi(logoutTime.substr(0, 2)) * 60 + stoi(logoutTime.substr(3, 2));
        if (l > r) r += 24 * 60;
        l = (l + 14) / 15;
        r = r / 15;
        return max(0, r - l);

=======

        int t1 = stoi(loginTime.substr(0, 2)) * 60 + stoi(loginTime.substr(3, 2));
        int t2 = stoi(logoutTime.substr(0, 2)) * 60 + stoi(logoutTime.substr(3, 2));
        if (t1 > t2) t2 += 24 * 60;
        t1 = (t1 + 14) / 15 * 15;
        t2 = t2 / 15 * 15;
        return max(0, t2 - t1) / 15;

=======

        int hour1 = stoi(loginTime.substr(0, 2));
        int min1 = stoi(loginTime.substr(3, 2));
        int hour2 = stoi(logoutTime.substr(0, 2));
        int min2 = stoi(logoutTime.substr(3, 2));
        if (hour1 > hour2 || (hour1 == hour2 && min1 > min2)) {
            hour2 += 24;
        }
        if (min1 % 15 != 0) {
            min1 = (min1 / 15 + 1) * 15;
        }
        if (min2 % 15 != 0) {
            min2 = min2 / 15 * 15;
        }
        return (hour2 - hour1) * 4 + (min2 - min1) / 15;

=======

        int loginHour = (loginTime[0] - '0') * 10 + (loginTime[1] - '0');
        int loginMin = (loginTime[3] - '0') * 10 + (loginTime[4] - '0');
        int logoutHour = (logoutTime[0] - '0') * 10 + (logoutTime[1] - '0');
        int logoutMin = (logoutTime[3] - '0') * 10 + (logoutTime[4] - '0');
        int login = loginHour * 60 + loginMin;
        int logout = logoutHour * 60 + logoutMin;
        if (logout < login) logout += 24 * 60;
        login = (login + 14) / 15 * 15;
        logout = logout / 15 * 15;
        return (logout - login) / 15;
