Synthesizing 10/10 solutions

=======

        vector<int> res(seq.size(), 0);
        int depth = 0;
        for (int i = 0; i < seq.size(); i++) {
            if (seq[i] == '(') {
                depth++;
                res[i] = depth % 2;
            } else {
                res[i] = depth % 2;
                depth--;
            }
        }
        return res;

=======

        int n = seq.size();
        vector<int> ans(n);
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            if (seq[i] == '(') {
                if (a < b) {
                    ++a;
                } else {
                    ++b;
                    ans[i] = 1;
                }
            } else {
                if (a > b) {
                    --a;
                } else {
                    --b;
                    ans[i] = 1;
                }
            }
        }
        return ans;

=======

        int depth = 0;
        vector<int> res;
        for (char c : seq) {
            if (c == '(') {
                ++depth;
                res.push_back(depth % 2);
            } else {
                res.push_back(depth % 2);
                --depth;
            }
        }
        return res;

=======

        vector<int> res;
        int depth = 0;
        for (char c: seq) {
            if (c == '(') {
                depth++;
                res.push_back(depth % 2);
            } else {
                res.push_back(depth % 2);
                depth--;
            }
        }
        return res;

=======

        int n = seq.size();
        vector<int> res(n);
        int d = 0;
        for (int i = 0; i < n; i++) {
            if (seq[i] == '(') {
                d++;
                res[i] = d % 2;
            } else {
                res[i] = d % 2;
                d--;
            }
        }
        return res;

=======

        vector<int> res;
        int depth = 0;
        for (char c : seq) {
            depth += c == '(' ? 1 : -1;
            res.push_back(depth % 2);
        }
        return res;

=======

        int n = seq.length();
        vector<int> ans(n);
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (seq[i] == '(') {
                cnt++;
                ans[i] = cnt % 2;
            } else {
                ans[i] = cnt % 2;
                cnt--;
            }
        }
        return ans;

=======

        int A = 0, B = 0;
        vector<int> res;
        for (char ch : seq) {
            if (ch == '(') {
                if (A < B) {
                    A++;
                    res.push_back(0);
                } else {
                    B++;
                    res.push_back(1);
                }
            } else {
                if (A > B) {
                    A--;
                    res.push_back(0);
                } else {
                    B--;
                    res.push_back(1);
                }
            }
        }
        return res;

=======

        vector<int> res;
        int depth = 0;
        for (char c : seq) {
            res.push_back(depth % 2);
            if (c == '(') {
                depth++;
            } else {
                depth--;
            }
        }
        return res;

=======

        vector<int> ans;
        int d = 0;
        for (auto c: seq) {
            if (c == '(') {
                ans.push_back(d);
                d = 1 - d;
            } else {
                d = 1 - d;
                ans.push_back(d);
            }
        }
        return ans;
