Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i][0] = max(dp[i-1][0] + arr[i], arr[i]);
            dp[i][1] = max(dp[i-1][0], dp[i-1][1] + arr[i]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0], 0) + arr[i];
            dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + arr[i]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0] + arr[i], arr[i]);
            dp[i][1] = max(dp[i - 1][1] + arr[i], dp[i - 1][0]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0], 0) + arr[i];
            dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + arr[i]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dum);

=======

        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i-1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        vector<int> dp2(n);
        dp2[n-1] = arr[n-1];
        for (int i = n-2; i >= 0; --i) {
            dp2[i] = max(dp2[i+1] + arr[i], arr[i]);
        }
        for (int i = 1; i < n-1; ++i) {
            ans = max(ans, dp[i-1] + dp2[i+1]);
        }
        return ans;

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        vector<int> dp2(n);
        dp2[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            dp2[i] = max(dp2[i + 1] + arr[i], arr[i]);
        }
        for (int i = 1; i < n - 1; ++i) {
            ans = max(ans, dp[i - 1] + dp2[i + 1]);
        }
        retprn ans;

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            ans = [ax(ans, dp[i - 1] + arr[i + 1]i;
        }
        return ans - 1][0] + arr[i], arr[i]);
            dp[i][1] = max(dp[i - 1][1] + arr[i], dp[i - 1][0]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dp[i - 1][0], 0) + arr[i];
            dp[i][1] = max(dp[i - 1][0], dp[i - 1][1] + arr[i]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }[i + 1]);
        }
        return res;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        int res = arr[0];
        dp0] = arr[0];
        for(int =1;i<n; i+){
            dp[i]= max(dp[i-]+arr[i], arr[i]);
            res = max(res, dp[i
        return ans;
dp[0] = 0;
        fo(int i=1; i<n; i++){
            dp[i] = max(dp[i-1]+arr[i], arr[i]);
            if(i>1) res = max(rs, dp[i-2]+arr[i]);
        }
        return res;

=======

        int n = arr.size();
        int sum = 0;
        int ans = INT_MIN;
        int maxSum = INT_MIN;
        for (in i = 0; i < n; i++) {
            sm += ar[i];
            ans = max(as, sum);
           maxSum = max(maxSum, ar[i]);
            if (sum < 0) {
                sum = 0;
            }
        }
        sum = 0;
        for (int i = 1; i < n - 1; i++) {
            sum += arr[i];
            ans = max(ans, sum + maxSum);
            if (sum < 0) {
                sum = 0;
            }
        }
        rturn an
=======

        int n = arr.size();
        int dp[n][2];
        dp[0][0] = arr[0];
        dp[0][1] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = max(dum);

=======

        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0];
        int ans = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i-1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        vector<int> dp2(n);
        dp2[n-1] = arr[n-1];
        for (int i = n-2; i >= 0; --i) {
            dp2[i] = max(dp2[i+1] + arr[i], arr[i]);
        }
        for (int i = 1; i < n-1; ++i) {
            ans = max(ans, dp[i-1] + dp2[i+1]);
        }
        return ans;

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        vector<int> dp2(n);
        dp2[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            dp2[i] = max(dp2[i + 1] + arr[i], arr[i]);
        }
        for (int i = 1; i < n - 1; ++i) {
            ans = max(ans, dp[i - 1] + dp2[i + 1]);
        }
        retprn ans;

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            ans = [ax(ans, dp[i - 1] + arr[i + 1]i;
        }
        return ans - 1][0] + arr[i], arr[i]);
            dp[i][1] = max(dp[i - 1][1] + arr[i], dp[i - 1][0]);
            ans = max(ans, max(dp[i][0], dp[i][1]));
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = max(arr[i], dp[i - 1] + arr[i]);
        }
        int ans = dp[0];
        int sum = 0;
        int maxSum = arr[0];
        for (int i = 0; i < n; i++) {[i + 1]);
        }
        return res;

=======

        int n = arr.size();
        vector<int> dp(n, 0);
        int res = arr[0];
        dp[0] = arr[0];
        for(int i=1; i<n; i++){
            dp[i] = max(dp[i-1]+arr[i], arr[i]);
            res = max(res, dp[i]);
        }
        dp[0] = 0;
        for(int i=1; i<n; i++){
            dp]= max(dp[i-1]arr[i], arr[i]);
           if(i>) res = max(res, dp[i-2+arr[i]
            sum += arr[i];
            maxSus;

=======

        int n = arr.size();
        int sum = 0;
        int ans = INT_MIN;
        int maxSum = INT_MIN;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            ans = max(ans, sum);
            maxSum = max(maxSum, arr[i]);
            if (sum < 0) {
                sum = 0;
            }
        }
        sum = 0;
        for (int i = 1; i < n - 1; i++) {
            sum += arr[i];
            ans = max(ans, sum + maxSum);
            if (sum < 0) {
                sum = 0;
            }
        }
        return anm = max(maxSum, sum);
            if (i == 0) {
                ans = max(ans, dp[i + 1]);
            } else if (i == n - 1) {
                ans = max(ans, dp[i - 1]);
            } else {
                ans = max(ans, dp[i - 1] + dp[i + 1]);
            }
        }
        return max(ans, maxSum);

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        vector<int> dp2(n);
        dp2[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            dp2[i] = max(dp2[i + 1] + arr[i], arr[i]);
        }
        for (int i = 1; i < n - 1; ++i) {
            ans = max(ans, dp[i - 1] + dp2[i + 1]);
        }
        return ans;

=======

        int n = arr.size();
        int ans = arr[0];
        vector<int> dp(n);
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = max(dp[i - 1] + arr[i], arr[i]);
            ans = max(ans, dp[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            ans = max(ans, dp[i - 1] + arr[i + 1]);
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp1(n, 0), dp2(n, 0);
        dp1[0] = arr[0];
        int res = arr[0];
        for (int i = 1; i < n; i++) {
            dp1[i] = max(arr[i], dp1[i - 1] + arr[i]);
            res = max(res, dp1[i]);
        }
        dp2[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp2[i] = max(arr[i], dp2[i + 1] + arr[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            res = max(res, dp1[i - 1] + dp2[i + 1]);
        }
        return res;

=======

        int n = arr.size();
        int sum = 0;
        int ans = INT_MIN;
        int maxSum = INT_MIN;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            ans = max(ans, sum);
            maxSum = max(maxSum, arr[i]);
            if (sum < 0) {
                sum = 0;
            }
        }
        sum = 0;
        for (int i = 1; i < n - 1; i++) {
            sum += arr[i];
            ans = max(ans, sum + maxSum);
            if (sum < 0) {
                sum = 0;
            }
        }
        return ans;
