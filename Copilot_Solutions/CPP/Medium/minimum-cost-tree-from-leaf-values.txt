Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n - 1; ++i) {
            dp[i][i + 1] = arr[i] * arr[i + 1];
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i + len <= n; ++i) {
                int j = i + len - 1;
                for (int k = i; k < j; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + *max_element(arr.begin() + i, arr.begin() + k + 1) * *max_element(arr.begin() + k + 1, arr.begin() + j + 1));
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> maxv(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            maxv[i][i] = arr[i];
            for (int j = i + 1; j < n; ++j) {
                maxv[i][j] = max(arr[j], maxv[i][j-1]);
            }
        }
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i + l - 1 < n; ++i) {
                int j = i + l - 1;
                dp[i][j] = INT_MAX;
                for (int k = i; k < j; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxv[i][k] * maxv[k+1][j]);
                }
            }
        }
        return dp[0][n-1];

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> maxVal(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            int curMax = arr[i];
            for (int j = i; j < n; j++) {
                curMax = max(curMax, arr[j]);
                maxVal[i][j] = curMax;
            }
        }
        for (int k = 1; k < n; k++) {
            for (int i = 0; i < n - k; i++) {
                int j = i + k;
                dp[i][j] = INT_MAX;
                for (int m = i; m < j; m++) {
                    dp[i][j] = min(dp[i][j], dp[i][m] + dp[m + 1][j] + maxVal[i][m] * maxVal[m + 1][j]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> maxs(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            maxs[i][i] = arr[i];
            for (int j = i + 1; j < n; ++j) {
                maxs[i][j] = max(maxs[i][j - 1], arr[j]);
            }
        }
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = INT_MAX;
                for (int k = i; k < j; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + maxs[i][k] * maxs[k + 1][j]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        vector<vector<int>> maxs(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            maxs[i][i] = arr[i];
            for (int j = i + 1; j < n; ++j) {
                maxs[i][j] = max(maxs[i][j - 1], arr[j]);
            }
        }
        for (int len = 2; len <= n; ++len) {
            for (int i = 0; i + len <= n; ++i) {
                int j = i + len - 1;
                dp[i][j] = INT_MAX;
                for (int k = i; k < j; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + maxs[i][k] * maxs[k + 1][j]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int N = arr.size();
        vector<vector<int>> dp(N, vector<int>(N, 0));
        vector<vector<int>> maxVal(N, vector<int>(N, 0));
        for (int i = 0; i < N; i++) {
            maxVal[i][i] = arr[i];
            for (int j = i+1; j < N; j++) {
                maxVal[i][j] = max(maxVal[i][j-1], arr[j]);
            }
        }
        for (int i = 0; i < N-1; i++) {
            dp[i][i+1] = arr[i] * arr[i+1];
        }
        for (int i = 2; i < N; i++) {
            for (int j = 0; j < N-i; j++) {
                dp[j][j+i] = INT_MAX;
                for (int k = j; k < j+i; k++) {
                    dp[j][j+i] = min(dp[j][j+i], dp[j][k] + dp[k+1][j+i] + maxVal[j][k] * maxVal[k+1][j+i]);
                }
            }
        }
        return dp[0][N-1];

=======

        int res = 0;
        int n = arr.size();
        vector<int> stack = {INT_MAX};
        for (int a : arr) {
            while (stack.back() <= a) {
                int mid = stack.back();
                stack.pop_back();
                res += mid * min(stack.back(), a);
            }
            stack.push_back(a);
        }
        for (int i = 2; i < stack.size(); ++i) res += stack[i] * stack[i - 1];
        return res;

=======

        int res = 0;
        while (arr.size() > 1) {
            int i = min_element(arr.begin(), arr.end()) - arr.begin();
            res += arr[i] * (i > 0 ? arr[i - 1] : 1) * (i < arr.size() - 1 ? arr[i + 1] : 1);
            arr.erase(arr.begin() + i);
        }
        return res;

=======

        int N = arr.size();
        vector<vector<int>> dp(N, vector<int>(N, 0));
        vector<vector<int>> maxVal(N, vector<int>(N, 0));
        for (int i = 0; i < N; i++) {
            maxVal[i][i] = arr[i];
            for (int j = i+1; j < N; j++) {
                maxVal[i][j] = max(maxVal[i][j-1], arr[j]);
            }
        }
        for (int i = 0; i < N-1; i++) {
            dp[i][i+1] = arr[i] * arr[i+1];
        }
        for (int i = 2; i < N; i++) {
            for (int j = 0; j < N-i; j++) {
                dp[j][j+i] = INT_MAX;
                for (int k = j; k < j+i; k++) {
                    dp[j][j+i] = min(dp[j][j+i], dp[j][k] + dp[k+1][j+i] + maxVal[j][k] * maxVal[k+1][j+i]);
             n dp[0][n - 1];

=======

        int n = arr.size();
        i t  }[n][n];
        int mn][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    m[i][j] = arr[i];
                } else {
                    m[i][j] = max(m[i][j-1], arr[j]);
                }
            }
        }
        for (int i = ; i < n; i++) {
            for (int j = i; j < n; j++) {
                dp[ij] = 0;
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <  i; j++) {
               dp[j][j+i] = INT_MAX;
                for (int k = j; k < j+i; k++) {
                    dp[j][j+i] = min(dp[j][j+i], dp[j][k] + dp[k+1][j+i] + m[j][k] * m[k+1][j+i]);
                }
            }
        }
        return dp[0][n-
            }
        }
        return dp[0][N-1];

=======

        int res = 0;
        int n = arr.size();
        vector<int> stack = {INT_MAX};
        for (int a : arr) {
            while (stack.back() <= a) {
                int mid = stack.back();
                stack.pop_back();
                res += mid * min(stack.back(), a);
            }
            stack.push_back(a);
        }
        for (int i = 2; i < stack.size(); ++i) res += stack[i] * stack[i - 1];
        return res;

=======

        int res = 0;
        while (arr.size() > 1) {
            int i = min_element(arr.begin(), arr.end()) - arr.begin();
            res += arr[i] * (i > 0 ? arr[i - 1] : 1) * (i < arr.size() - 1 ? arr[i + 1] : 1);
            arr.erase(arr.begin() + i);
        }
        return res;

=======

        int n = arr.size();
        if (n == 1) return 0;
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n - 1; ++i) {
            dp[i][i + 1] = arr[i] * arr[i + 1];
        }
        for (int len = 3; len <= n; ++len) {
            for (int i = 0; i <= n - len; ++i) {
                int j = i + len - 1;
                for (int k = i; k < j; ++k) {
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + *max_element(arr.begin() + i, arr.begin() + k + 1) * *max_element(arr.begin() + k + 1, arr.begin() + j + 1));
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = arr.size();
        int dp[n][n];
        int m[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    m[i][j] = arr[i];
                } else {
                    m[i][j] = max(m[i][j-1], arr[j]);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                dp[i][j] = 0;
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                dp[j][j+i] = INT_MAX;
                for (int k = j; k < j+i; k++) {
                    dp[j][j+i] = min(dp[j][j+i], dp[j][k] + dp[k+1][j+i] + m[j][k] * m[k+1][j+i]);
                }
            }
        }
        return dp[0][n-1];
