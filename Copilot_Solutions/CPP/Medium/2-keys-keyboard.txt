Synthesizing 10/10 solutions

=======

        int ans = 0, d = 2;
        while (n > 1) {
            while (n % d == 0) {
                ans += d;
                n /= d;
            }
            d++;
        }
        return ans;

=======

        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j < i; j++) {
                if (i % j == 0) {
                    dp[i] = min(dp[i], dp[j] + i / j);
                }
            }
        }
        return dp[n];

=======

        if (n == 1) return 0;
        int res = 0;
        for (int i = 2; i <= n; ++i) {
            while (n % i == 0) {
                res += i;
                n /= i;
            }
        }
        return res;

=======

        vector<int> dp(n+1, INT_MAX);
        dp[1] = 0;
        for (int i = 2; i <= n; ++i) {
            for (int j = 1; j <= i/2; ++j) {
                if (i % j == 0) {
                    dp[i] = min(dp[i], dp[j]+i/j);
                }
            }
        }
        return dp[n];

=======

        vector<int> dp(n+1);
        for (int i = 2; i <= n; i++) {
            dp[i] = INT_MAX;
            for (int j = 1; j*j <= i; j++) {
                if (i % j == 0) {
                    dp[i] = min(dp[i], dp[j] + i/j);
                    dp[i] = min(dp[i], dp[i/j] + j);
                }
            }
        }
        return dp[n];

=======

        int dp[n+1];
        dp[1] = 0;
        for(int i=2; i<=n; i++){
            dp[i] = i;
            for(int j=i-1; j>1; j--){
                if(i%j == 0){
                    dp[i] = dp[j] + (i/j);
                    break;
                }
            }
        }
        return dp[n];

=======

        int i = 2;
        int count = 0;
        while(n > 1){
            while(n % i == 0){
                count += i;
                n /= i;
            }
            i++;
        }
        return count;

=======

        int i = 2;
        int res = 0;
        while(i <= n){
            while(n%i == 0){
                res += i;
                n /= i;
            }
            i++;
        }
        return res;

=======

        if(n==1) return 0;
        if(n==2) return 2;
        if(n==3) return 3;
        if(n==4) return 4;
        
        int res = 0;
        for(int i=2; i<=n; i++){
            if(n%i==0){
                res += i;
                n /= i;
                i = 1;
            }
        }
        return res;

=======

        int i, j;
        int minStep = 0;
        for (i = 2; i <= n; i++) {
            while (n % i == 0) {
                minStep += i;
                n /= i;
            }
        }
        return minStep;
