Synthesizing 9/10 solutions

=======

        int n = price.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; ++i) {
            bool flag = true;
            for (int j = 0; j < n; ++j) {
                if (special[i][j] > needs[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; ++j) {
                    needs[j] -= special[i][j];
                }
                ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; ++j) {
                    needs[j] += special[i][j];
                }
            }
        }
        return ans;

=======

        int n = price.size();
        int m = special.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = true;
            for (int j = 0; j < n; j++) {
                if (needs[j] < special[i][j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; j++) {
                    needs[j] -= special[i][j];
                }
                res = min(res, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; j++) {
                    needs[j] += special[i][j];
                }
            }
        }
        return res;

=======

        int n = needs.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = false;
            for (int j = 0; j < n; j++) {
                if (special[i][j] > needs[j]) {
                    flag = true;
                    break;
                }
            }
            if (flag) continue;
            for (int j = 0; j < n; j++) {
                needs[j] -= special[i][j];
            }
            ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
            for (int j = 0; j < n; j++) {
                needs[j] += special[i][j];
            }
        }
        return ans;

=======

        int n = special.size();
        int m = price.size();
        int res = 0;
        for (int i = 0; i < m; ++i) {
            res += price[i] * needs[i];
        }
        for (int i = 0; i < n; ++i) {
            bool valid = true;
            for (int j = 0; j < m; ++j) {
                if (special[i][j] > needs[j]) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                for (int j = 0; j < m; ++j) {
                    needs[j] -= special[i][j];
                }
                res = min(res, special[i][m] + shoppingOffers(price, special, needs));
                for (int j = 0; j < m; ++j) {
                    needs[j] += special[i][j];
                }
            }
        }
        return res;

=======

        return dp(price, special, needs);
    }
    int dp(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int res = dot(needs, price);
        for (auto& s : special) {
            vector<int> clone = needs;
            int j = 0;
            for (; j < needs.size(); ++j) {
                int diff = clone[j] - s[j];
                if (diff < 0) break;
                clone[j] = diff;
            }
            if (j == needs.size()) {
                res = min(res, s.back() + dp(price, special, clone));
            }
        }
        return res;
    }
    int dot(vector<int>& a, vector<int>& b) {
        int sum = 0;
        for (int i = 0; i < a.size(); ++i) {
            sum += a[i] * b[i];
        }
        return sum;

=======

        int n = price.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; ++i) {
            bool flag = true;
            for (int j = 0; j < n; ++j) {
                if (special[i][j] > needs[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; ++j) {
                    needs[j] -= special[i][j];
                }
                ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; ++j) {
                    needs[j] += special[i][j];
                }
            }
        }
        return ans;

=======

        int n = price.size();
        int m = special.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = true;
            for (int j = 0; j < n; j++) {
                if (needs[j] < special[i][j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; j++) {
                    needs[j] -= special[i][j];
                }
                res = min(res, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; j++) {
                    needs[j] += special[i][j];
                }
            }
        }
        return res;

=======

        int n = needs.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = false;
            for (int j = 0; j < n; j++) {
                if (special[i][j] > needs[j]) {
                    flag = true;
                    break;
                }
            }
            if (flag) continue;
            for (int j = 0; j < n; j++) {
                needs[j] -= special[i][j];
            }
            ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
            for (int j = 0; j < n; j++) {
                needs[j] += special[i][j];
            }
        }
        return ans;

=======

        return dp(price, special, needs);
    }
    int dp(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int res = dot(needs, price);
        for (auto& s : special) {
            vector<int> clone = needs;
            int j = 0;
            for (; j < needs.size(); ++j) {
                int diff = clone[j] - s[j];
                if (d;

=======

        int n = needs.size();
        int N = 1 << n;
        vector<int> dp(N, 0);
        for (int i = 1; i < N; ++i) {
            int j = 0;
            while (!(i & (1 << j))) ++j;
            needs[j] -= 1;
            dp[i] = dp[i ^ (1 << j)] + price[j];
            for (auto& s : special) {
                int k = 0;
                for (; k < n; ++k) {
                    if (needs[k] < s[k]) break;
                }
                if (k == n) {
                    needs[j] += 1;
                    dp[i] = min(dp[i], dp[i ^ (1 << j)] + s[n]);
                    break;
                }
            }
            needs[j] += 1;
        }
        return dp[N - 1]iff < 0) break;
                clone[j] = diff;
            }
            if (j == needs.size()) {
                res = min(res, s.back() + dp(price, special, clone));
            }
        }
        return res;
    }
    int dot(vector<int>& a, vector<int>& b) {
        int sum = 0;
        for (int i = 0; i < a.size(); ++i) {
            sum += a[i] * b[i];
        }
        return sum;

=======

        int n = price.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; ++i) {
            bool flag = true;
            for (int j = 0; j < n; ++j) {
                if (special[i][j] > needs[j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; ++j) {
                    needs[j] -= special[i][j];
                }
                ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; ++j) {
                    needs[j] += special[i][j];
                }
            }
        }
        return ans;

=======

        int n = price.size();
        int m = special.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = true;
            for (int j = 0; j < n; j++) {
                if (needs[j] < special[i][j]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int j = 0; j < n; j++) {
                    needs[j] -= special[i][j];
                }
                res = min(res, shoppingOffers(price, special, needs) + special[i][n]);
                for (int j = 0; j < n; j++) {
                    needs[j] += special[i][j];
                }
            }
        }
        return res;

=======

        int n = needs.size();
        int m = special.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += price[i] * needs[i];
        }
        for (int i = 0; i < m; i++) {
            bool flag = false;
            for (int j = 0; j < n; j++) {
                if (special[i][j] > needs[j]) {
                    flag = true;
                    break;
                }
            }
            if (flag) continue;
            for (int j = 0; j < n; j++) {
                needs[j] -= special[i][j];
            }
            ans = min(ans, shoppingOffers(price, special, needs) + special[i][n]);
            for (int j = 0; j < n; j++) {
                needs[j] += special[i][j];
            }
        }
        return ans;

=======

        int n = needs.size();
        int m = special.size();
        vector<int> dp(1 << n, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < m; j++) {
                int tmp = i;
                for (int k = 0; k < n; k++) {
                    if (special[j][k] > needs[k] - (tmp & 1)) {
                   um;

=======

        int n = needs.size();
        int N = 1 << n;
        vector<int> dp(N, 0);
        for (int i = 1; i < N; ++i) {
            int j = 0;
            while (!(i & (1 << j))) ++j;
            needs[j] -= 1;
            dp[i] = dp[i ^ (1 << j)] + price[j];
            for (a to& s : special) {
                int k = 0;
                for (; k < n; ++k) {
                    if (needs[k] < s[k]) break;
                }
                if (k == n) {
                    needs[j] += 1;
                    dp[i] =  in(dp[i], dp[i ^ (1 << j)] + s[n]);
                    break;
                }
            }
            needs[j] += 1;
        }
        return dp[N - 1]   tmp = -1;
                        break;
                    }
                    tmp >>= 1;
                }
                if (tmp != -1) {
                    dp[i | (1 << n)] = min(dp[i | (1 << n)], dp[i] + special[j][n]);
                }
            }
            for (int j = 0; j < n; j++) {
                if (i & (1 << j)) {
                    dp[i] = min(dp[i], dp[i ^ (1 << j)] + price[j]);
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = needs.size();
        vector<int> dp(1 << n, 0);
        for (int i = 1; i < dp.size(); i++) {
            dp[i] = INT_MAX;
            for (int j = 0; j < n; j++) {
                if ((i >> j) & 1) {
                    dp[i] = min(dp[i], dp[i ^ (1 << j)] + price[j]);
                }
            }
        }
        for (auto& s : special) {
            vector<int> ns(needs);
            int mask = 0;
            for (int i = 0; i < n; i++) {
                if (ns[i] >= s[i]) {
                    ns[i] -= s[i];
                } else {
                    mask = -1;
                    break;
                }
                mask |= ns[i] << i;
            }
            if (mask != -1) {
                dp[mask] = min(dp[mask], dp[i] + s.back());
            }
        }
        return dp.back();

=======

        int n = price.size();
        vector<int> offer(n, 0);
        for (auto& s : special) {
            for (int i = 0; i < n; ++i) {
                offer[i] += s[i];
            }
        }
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += price[i] * needs[i];
        }
        return dfs(price, special, needs, sum);
    }
    int dfs(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int sum) {
        int n = price.size();
        int minSum = sum;
        for (auto& s : special) {
            bool flag = true;
            for (int i = 0; i < n; ++i) {
                if (needs[i] < s[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                for (int i = 0; i < n; ++i) {
                    needs[i] -= s[i];
                }
                minSum = min(minSum, dfs(price, special, needs, sum - s[n]));
                for (int i = 0; i < n; ++i) {
                    needs[i] += s[i];
                }
            }
        }
        return minSum;

=======

        int n = needs.size();
        int N = 1 << n;
        vector<int> dp(N, 0);
        for (int i = 1; i < N; ++i) {
            int j = 0;
            while (!(i & (1 << j))) ++j;
            needs[j] -= 1;
            dp[i] = dp[i ^ (1 << j)] + price[j];
            for (auto& s : special) {
                int k = 0;
                for (; k < n; ++k) {
                    if (needs[k] < s[k]) break;
                }
                if (k == n) {
                    needs[j] += 1;
                    dp[i] = min(dp[i], dp[i ^ (1 << j)] + s[n]);
                    break;
                }
            }
            needs[j] += 1;
        }
        return dp[N - 1];
