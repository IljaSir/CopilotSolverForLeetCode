Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> odd;
        odd.push_back(-1);
        for (int i = 0; i < n; ++i) {
            if (nums[i] & 1) {
                odd.push_back(i);
            }
        }
        odd.push_back(n);
        long long res = 0;
        for (int i = 1; i < odd.size() - 1; ++i) {
            res += (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd.push_back(i);
            }
        }
        long long ans = 0;
        for (int i = 0; i < odd.size(); i++) {
            int l = odd[i] - (i == 0 ? -1 : odd[i - 1]);
            int r = (i == odd.size() - 1 ? n : odd[i + 1]) - odd[i];
            ans += l * r;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd;
        odd.push_back(-1);
        for(int i = 0; i < n; i++) {
            if(nums[i] & 1) odd.push_back(i);
        }
        odd.push_back(n);
        long long res = 0;
        for(int i = 1; i < odd.size(); i++) {
            res += 1LL * (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd;
        for(int i = 0; i < n; ++i) {
            if(nums[i] & 1) {
                odd.push_back(i);
            }
        }
        long long ans = 0;
        for(int i = 0; i < odd.size(); ++i) {
            int left = 0, right = 0;
            if(i == 0) {
                left = odd[i] + 1;
            } else {
                left = odd[i] - odd[i - 1];
            }
            if(i == odd.size() - 1) {
                right = n - odd[i];
            } else {
                right = odd[i + 1] - odd[i];
            }
            ans += left * right;
        }
        return ans;

=======

        vector<int> sum(nums.size() + 1, 0);
        for (int i = 0; i < nums.size(); i++) {
            sum[i + 1] = sum[i] + nums[i] % 2;
        }
        long long ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j <= nums.size(); j++) {
                if ((sum[j] - sum[i]) % 2 == 0) {
                    ans++;
                }
            }
        }
        return ans;

=======

        vector<int> oddIndex;
        oddIndex.push_back(-1);
        for(int i = 0; i < nums.size(); i++){
            if(nums[i] % 2 == 1){
                oddIndex.push_back(i);
            }
        }
        oddIndex.push_back(nums.size());
        long long ans = 0;
        for(int i = 1; i < oddIndex.size(); i++){
            ans += (oddIndex[i] - oddIndex[i - 1]) * (oddIndex[i + 1] - oddIndex[i]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            a[i] = (nums[i] & 1) ? 1 : 0;
        }
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (a[i] == 0) {
                ans += 1;
                continue;
            }
            int l = i;
            int r = i;
            while (l > 0 && a[l - 1] == 1) {
                --l;
            }
            while (r < n - 1 && a[r + 1] == 1) {
                ++r;
            }
            ans += (long long)(i - l + 1) * (r - i + 1);
        }
        return ans;

=======

        long long ans = 0;
        int n = nums.size();
        vector<int> pre(n+1);
        for (int i = 0; i < n; ++i) {
            pre[i+1] = pre[i] + (nums[i] & 1);
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i+1; j <= n; ++j) {
                if ((pre[j] - pre[i]) & 1) {
                    ++ans;
                }
            }
        }
        return ans;

=======

        long long res = 0;
        int n = nums.size();
        vector<int> cnt(n+1);
        cnt[0] = 1;
        int odd = 0;
        for (int i = 0; i < n; i++) {
            odd += nums[i] % 2;
            res += cnt[odd];
            cnt[odd]++;
        }
        return res;

=======

        long long res = 0;
        int n = nums.size();
        int cnt = 0;
        vector<int> v;
        for (int i = 0; i < n; ++i) {
            if (nums[i] % 2 == 1) {
                v.push_back(cnt);
                cnt = 0;
            } else {
                cnt++;
            }
        }
        v.push_back(cnt);
        for (int i = 1; i < v.size(); ++i) {
            res += (long long)(v[i] + 1) * (long long)(v[i - 1] + 1);
        }
        return res;
