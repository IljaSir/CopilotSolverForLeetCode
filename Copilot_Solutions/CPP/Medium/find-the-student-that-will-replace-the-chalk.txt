Synthesizing 10/10 solutions

=======

        long long sum = 0;
        for (int i = 0; i < chalk.size(); i++) {
            sum += chalk[i];
        }
        k %= sum;
        for (int i = 0; i < chalk.size(); i++) {
            k -= chalk[i];
            if (k < 0) {
                return i;
            }
        }
        return -1;

=======

        long long sum = 0;
        for (int i = 0; i < chalk.size(); i++) {
            sum += chalk[i];
        }
        k %= sum;
        for (int i = 0; i < chalk.size(); i++) {
            if (chalk[i] > k) {
                return i;
            }
            k -= chalk[i];
        }
        return -1;

=======

        long long sum = 0;
        for (int i = 0; i < chalk.size(); ++i) {
            sum += chalk[i];
        }
        k %= sum;
        for (int i = 0; i < chalk.size(); ++i) {
            if (k < chalk[i]) {
                return i;
            }
            k -= chalk[i];
        }
        return -1;

=======

        long long sum = 0;
        for (int i = 0; i < chalk.size(); i++) {
            sum += chalk[i];
        }
        k = k % sum;
        for (int i = 0; i < chalk.size(); i++) {
            if (k < chalk[i]) {
                return i;
            }
            k -= chalk[i];
        }
        return -1;

=======

        long long sum = 0;
        for (int i = 0; i < chalk.size(); i++) {
            sum += chalk[i];
        }
        k = k % sum;
        for (int i = 0; i < chalk.size(); i++) {
            if (chalk[i] > k) {
                return i;
            }
            k -= chalk[i];
        }
        return 0;

=======

        int n = chalk.size();
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += chalk[i];
        }
        k %= sum;
        for (int i = 0; i < n; ++i) {
            if (k < chalk[i]) {
                return i;
            }
            k -= chalk[i];
        }
        return -1;

=======

        long long sum = 0;
        for (auto c : chalk) {
            sum += c;
        }
        k %= sum;
        for (int i = 0; i < chalk.size(); ++i) {
            if (k < chalk[i]) {
                return i;
            }
            k -= chalk[i];
        }
        return 0;

=======

        long long sum = 0;
        for (auto c : chalk) {
            sum += c;
        }
        k %= sum;
        for (int i = 0; i < chalk.size(); i++) {
            k -= chalk[i];
            if (k < 0) {
                return i;
            }
        }
        return 0;

=======

        long long int sum = 0;
        for(int i=0;i<chalk.size();i++)
            sum+=chalk[i];
        k = k%sum;
        for(int i=0;i<chalk.size();i++){
            if(k<chalk[i])
                return i;
            else
                k-=chalk[i];
        }
        return -1;

=======

        long long int sum = 0;
        for (int i = 0; i < chalk.size(); i++) {
            sum += chalk[i];
        }
        long long int rem = k % sum;
        for (int i = 0; i < chalk.size(); i++) {
            rem -= chalk[i];
            if (rem < 0) return i;
        }
        return -1;
