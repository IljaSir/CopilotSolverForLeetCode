Synthesizing 10/10 solutions

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                int j = st.top();
                st.pop();
                reverse(s.begin() + j + 1, s.begin() + i);
            }
        }
        string ans;
        for (char c : s) {
            if (c != '(' && c != ')') {
                ans += c;
            }
        }
        return ans;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                int j = st.top();
                st.pop();
                reverse(s.begin() + j + 1, s.begin() + i);
            }
        }
        string ans;
        for (auto c : s) {
            if (c != '(' && c != ')') {
                ans += c;
            }
        }
        return ans;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                reverse(s.begin() + st.top() + 1, s.begin() + i);
                st.pop();
            }
        }
        string ans;
        for (char c : s) {
            if (c != '(' && c != ')') {
                ans += c;
            }
        }
        return ans;

=======

        stack<int> st;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                int j = st.top();
                st.pop();
                reverse(s.begin() + j + 1, s.begin() + i);
            }
        }
        string res;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] != '(' && s[i] != ')') {
                res += s[i];
            }
        }
        return res;

=======

        stack<int> stk;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '(') {
                stk.push(i);
            } else if (s[i] == ')') {
                int left = stk.top();
                stk.pop();
                reverse(s.begin() + left + 1, s.begin() + i);
            }
        }
        string ans = "";
        for (int i = 0; i < s.length(); i++) {
            if (s[i] != '(' && s[i] != ')') {
                ans += s[i];
            }
        }
        return ans;

=======

        int n = s.length();
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                int l = st.top();
                st.pop();
                reverse(s.begin() + l, s.begin() + i);
            }
        }
        string ans;
        for (int i = 0; i < n; ++i) {
            if (s[i] != '(' && s[i] != ')') {
                ans.push_back(s[i]);
            }
        }
        return ans;

=======

        stack<char> stk;
        for (char c : s) {
            if (c == ')') {
                string tmp;
                while (stk.top() != '(') {
                    tmp += stk.top();
                    stk.pop();
                }
                stk.pop();
                for (char c : tmp) stk.push(c);
            } else {
                stk.push(c);
            }
        }
        string ans;
        while (!stk.empty()) {
            ans += stk.top();
            stk.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;

=======

        stack<int> st;
        for (auto i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                st.push(i);
            } else if (s[i] == ')') {
                auto j = st.top();
                st.pop();
                reverse(s.begin() + j, s.begin() + i);
            }
        }
        string result;
        for (auto c: s) {
            if (c != '(' && c != ')') {
                result.push_back(c);
            }
        }
        return result;

=======

        stack<char> stk;
        for (char ch : s) {
            if (ch == ')') {
                string tmp;
                while (stk.top() != '(') {
                    tmp.push_back(stk.top());
                    stk.pop();
                }
                stk.pop();
                for (char c : tmp) {
                    stk.push(c);
                }
            } else {
                stk.push(ch);
            }
        }
        string res;
        while (!stk.empty()) {
            res.push_back(stk.top());
            stk.pop();
        }
        reverse(res.begin(), res.end());
        return res;

=======

        stack<char> stk;
        for (char ch : s) {
            if (ch == ')') {
                string tmp;
                while (!stk.empty() && stk.top() != '(') {
                    tmp += stk.top();
                    stk.pop();
                }
                stk.pop();
                for (char c : tmp) {
                    stk.push(c);
                }
            } else {
                stk.push(ch);
            }
        }
        string ans;
        while (!stk.empty()) {
            ans += stk.top();
            stk.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
