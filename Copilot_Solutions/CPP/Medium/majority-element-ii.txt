Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int a = 0, b = 0, ca = 0, cb = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == a) {
                ++ca;
            } else if (nums[i] == b) {
                ++cb;
            } else if (ca == 0) {
                a = nums[i];
                ++ca;
            } else if (cb == 0) {
                b = nums[i];
                ++cb;
            } else {
                --ca;
                --cb;
            }
        }
        ca = 0;
        cb = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == a) {
                ++ca;
            } else if (nums[i] == b) {
                ++cb;
            }
        }
        vector<int> res;
        if (ca > n / 3) {
            res.push_back(a);
        }
        if (cb > n / 3) {
            res.push_back(b);
        }
        return res;

=======

        vector<int> result;
        if (nums.size() == 0) {
            return result;
        }
        int candidate1 = nums[0];
        int candidate2 = nums[0];
        int count1 = 0;
        int count2 = 0;
        for (auto num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (auto num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        if (count1 > nums.size() / 3) {
            result.push_back(candidate1);
        }
        if (count2 > nums.size() / 3) {
            result.push_back(candidate2);
        }
        return result;

=======

        vector<int> res;
        int n = nums.size();
        if (n == 0) return res;
        int n1 = nums[0], n2 = nums[0], c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == n1) {
                c1++;
            } else if (nums[i] == n2) {
                c2++;
            } else if (c1 == 0) {
                n1 = nums[i];
                c1 = 1;
            } else if (c2 == 0) {
                n2 = nums[i];
                c2 = 1;
            } else {
                c1--;
                c2--;
            }
        }
        c1 = 0;
        c2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == n1) {
                c1++;
            } else if (nums[i] == n2) {
                c2++;
            }
        }
        if (c1 > n / 3) res.push_back(n1);
        if (c2 > n / 3) res.push_back(n2);
        return res;

=======

        vector<int> res;
        int n = nums.size();
        if (n == 0) return res;
        int count1 = 0, count2 = 0;
        int candidate1 = 0, candidate2 = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i] == candidate1) {
                count1++;
            } else if (nums[i] == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = nums[i];
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0; count2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == candidate1) count1++;
            else if (nums[i] == candidate2) count2++;
        }
        if (count1 > n / 3) res.push_back(candidate1);
        if (count2 > n / 3) res.push_back(candidate2);
        return res;

=======

        int n = nums.size();
        int a = nums[0], b = nums[0];
        int cnt_a = 0, cnt_b = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == a) {
                cnt_a++;
            } else if (nums[i] == b) {
                cnt_b++;
            } else if (cnt_a == 0) {
                a = nums[i];
                cnt_a++;
            } else if (cnt_b == 0) {
                b = nums[i];
                cnt_b++;
            } else {
                cnt_a--;
                cnt_b--;
            }
        }
        cnt_a = cnt_b = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == a) {
                cnt_a++;
            } else if (nums[i] == b) {
                cnt_b++;
            }
        }
        vector<int> ans;
        if (cnt_a > n / 3) {
            ans.push_back(a);
        }
        if (cnt_b > n / 3) {
            ans.push_back(b);
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0) return {};
        if (n == 1) return {nums[0]};
        int c1 = 0, c2 = 0, m1 = 0, m2 = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == m1) {
                ++c1;
            } else if (nums[i] == m2) {
                ++c2;
            } else if (c1 == 0) {
                m1 = nums[i];
                c1 = 1;
            } else if (c2 == 0) {
                m2 = nums[i];
                c2 = 1;
            } else {
                --c1;
                --c2;
            }
        }
        c1 = 0;
        c2 = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == m1) {
                ++c1;
            } else if (nums[i] == m2) {
                ++c2;
            }
        }
        vector<int> res;
        if (c1 > n / 3) res.push_back(m1);
        if (c2 > n / 3) res.push_back(m2);
        return res;

=======

        vector<int> result;
        int n = nums.size();
        int count1 = 0, count2 = 0, candidate1 = 0, candidate2 = 1;
        for (int num : nums) {
            if (num == candidate1) {
                ++count1;
            } else if (num == candidate2) {
                ++count2;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                --count1;
                --count2;
            }
        }
        count1 = count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                ++count1;
            } else if (num == candidate2) {
                ++count2;
            }
        }
        if (count1 > n / 3) {
            result.push_back(candidate1);
        }
        if (count2 > n / 3) {
            result.push_back(candidate2);
        }
        return result;

=======

        int n = nums.size();
        vector<int> result;
        if (n == 0) return result;
        int candidate1 = nums[0], candidate2 = nums[0];
        int count1 = 0, count2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == candidate1) {
                count1++;
            } else if (nums[i] == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = nums[i];
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        count1 = 0, count2 = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == candidate1) {
                count1++;
            } else if (nums[i] == candidate2) {
                count2++;
            }
        }

        if (count1 > n / 3) {
            result.push_back(candidate1);
        }
        if (count2 > n / 3) {
            result.push_back(candidate2);
        }

        return result;

=======

        if (nums.size() == 0) {
            return {};
        }
        vector<int> res;
        int num1 = nums[0];
        int num2 = nums[0];
        int count1 = 0;
        int count2 = 0;
        for (auto num : nums) {
            if (num == num1) {
                count1++;
            } else if (num == num2) {
                count2++;
            } else if (count1 == 0) {
                num1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                num2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (auto num : nums) {
            if (num == num1) {
                count1++;
            } else if (num == num2) {
                count2++;
            }
        }
        if (count1 > nums.size() / 3) {
            res.push_back(num1);
        }
        if (count2 > nums.size() / 3) {
            res.push_back(num2);
        }
        return res;

=======

        // Boyer-Moore Voting Algorithm
        int n = nums.size();
        int count1 = 0, count2 = 0;
        int candidate1 = 0, candidate2 = 1;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        vector<int> res;
        if (count1 > n / 3) {
            res.push_back(candidate1);
        }
        if (count2 > n / 3) {
            res.push_back(candidate2);
        }
        return res;
