Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = 0; j < nums.size(); ++j) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) {
                    ++res;
                }
            }
        }
        return res;

=======

        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) ans++;
            }
        }
        return ans;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) {
                    res++;
                }
            }
        }
        return res;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) res++;
            }
        }
        return res;

=======

        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < nums.size(); j++) {
                if (i != j && nums[i] + nums[j] == target) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i == j) continue;
                if (nums[i] + nums[j] == target) {
                    res++;
                }
            }
        }
        return res;

=======

        int count = 0;
        for(int i = 0; i < nums.size(); i++){
            for(int j = 0; j < nums.size(); j++){
                if(i == j) continue;
                if(nums[i].length() + nums[j].length() != target.length()) continue;
                if(nums[i] + nums[j] == target) count++;
            }
        }
        return count;
