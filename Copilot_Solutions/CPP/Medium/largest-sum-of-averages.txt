Synthesizing 6/10 solutions

=======

        int n = nums.size();
        vector<double> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        vector<double> dp(n, 0);
        for (int i = 0; i < n; i++) {
            dp[i] = (sum[n] - sum[i]) / (n - i);
        }
        for (int i = 0; i < k - 1; i++) {
            for (int j = 0; j < n; j++) {
                for (int l = j + 1; l < n; l++) {
                    dp[j] = max(dp[j], (sum[l] - sum[j]) / (l - j) + dp[l]);
                }
            }
        }
        return dp[0];

=======

        int n = nums.size();
        vector<double> sums(n+1, 0);
        for (int i = 0; i < n; ++i) {
            sums[i+1] = sums[i] + nums[i];
        }
        vector<vector<double>> dp(n, vector<double>(k, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][0] = (sums[n] - sums[i]) / (n - i);
            for (int j = 1; j < k; ++j) {
                for (int l = i+1; l < n; ++l) {
                    dp[i][j] = max(dp[i][j], dp[l][j-1] + (sums[l] - sums[i]) / (l - i));
                }
            }
        }
        return dp[0][k-1];

=======

        int n = nums.size();
        vector<int> sums(n+1, 0);
        for (int i = 1; i <= n; i++) {
            sums[i] = sums[i-1] + nums[i-1];
        }
        vector<vector<double>> dp(n+1, vector<double>(n+1, 0));
        for (int i = 1; i <= n; i++) {
            dp[i][1] = (double)sums[i] / i;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 1; p < i; p++) {
                    dp[i][j] = max(dp[i][j], dp[p][j-1] + (double)(sums[i]-sums[p]) / (i-p));
                }
            }
        }
        return dp[n][k];

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for(int i=0; i<n; i++) sum[i+1] = sum[i] + nums[i];
        vector<vector<double>> dp(n, vector<double>(k+1, 0));
        for(int i=0; i<n; i++) dp[i][1] = (sum[n]-sum[i])/(double)(n-i);
        for(int i=n-2; i>=0; i--)
            for(int j=2; j<=k; j++)
                for(int l=i+1; l<n; l++)
                    dp[i][j] = max(dp[i][j], dp[l][j-1] + (sum[l]-sum[i])/(double)(l-i));
        return dp[0][k];

=======

        int n = nums.size();
        double dp[n + 1][k + 1];
        double sum[n + 1];
        sum[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= k; j++) {
                dp[i][j] = 0;
            }
        }
        for (int i = 1; i <= n; i++) {
            dp[i][1] = sum[i] / i;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 1; p < i; p++) {
                    dp[i][j] = max(dp[i][j], dp[p][j - 1] + (sum[i] - sum[p]) / (i - p));
                }
            }
        }
        return dp[n][k];

=======

        vector<double> sums(nums.size() + 1, 0);
        for(int i = 0; i < nums.size(); i++) sums[i + 1] = sums[i] + nums[i];
        vector<double> dp(nums.size(), 0);
        for(int i = 0; i < nums.size(); i++) dp[i] = (sums[nums.size()] - sums[i]) / (nums.size() - i);
        for(int i = 0; i < k - 1; i++) {
            for(int j = 0; j < nums.size(); j++) {
                for(int l = j + 1; l < nums.size(); l++) {
                    dp[j] = max(dp[j], (sums[l] - sums[j]) / (l - j) + dp[l]);
                }
            }
        }
        return dp[0];
