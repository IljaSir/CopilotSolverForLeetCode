Synthesizing 7/10 solutions (Duplicates hidden)

=======

        int n = piles.size();
        vector<int> sum(n + 1, 0);
        for (int i = n - 1; i >= 0; --i) {
            sum[i] = sum[i + 1] + piles[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = sum[i];
        }
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i + l - 1 < n; ++i) {
                int j = i + l - 1;
                for (int x = 1; x <= 2 * (j - i + 1); ++x) {
                    dp[i][j] = max(dp[i][j], sum[i] - dp[i + x][j]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = piles.size();
        vector<int> sum(n);
        sum[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = piles[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                for (int x = 1; x <= 2 * (j - i + 1); x++) {
                    if (i + x < n) {
                        dp[i][j] = max(dp[i][j], sum[i] - dp[i + x][j]);
                    } else {
                        dp[i][j] = max(dp[i][j], sum[i]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = piles.size();
        vector<int> s(n + 1);
        for (int i = n - 1; i >= 0; --i) {
            s[i] = s[i + 1] + piles[i];
        }
        vector<vector<int>> f(n, vector<int>(n));
        for (int i = n - 1; i >= 0; --i) {
            for (int m = 1; m <= n; ++m) {
                for (int x = 1; x <= 2 * m && i + x <= n; ++x) {
                    f[i][m] = max(f[i][m], s[i] - f[i + x][max(m, x)]);
                }
            }
        }
        return f[0][1];

=======

        int n = piles.size();
        vector<int> sum(n + 1);
        for (int i = n - 1; i >= 0; i--) sum[i] = sum[i + 1] + piles[i];
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n - 1; i >= 0; i--) {
            for (int m = 1; m <= n; m++) {
                if (i + 2 * m >= n) dp[i][m] = sum[i];
                else {
                    for (int x = 1; x <= 2 * m; x++) {
                        dp[i][m] = max(dp[i][m], sum[i] - dp[i + x][max(m, x)]);
                    }
                }
            }
        }
        return dp[0][1];

=======

        vector<int> sum(piles.size(), 0);
        sum[piles.size() - 1] = piles[piles.size() - 1];
        for (int i = piles.size() - 2; i >= 0; i--) {
            sum[i] = sum[i + 1] + piles[i];
        }
        vector<vector<int>> dp(piles.size(), vector<int>(piles.size(), 0));
        return helper(piles, 0, 1, dp, sum);
    }
    
    int helper(vector<int>& piles, int i, int M, vector<vector<int>>& dp, vector<int>& sum) {
        if (i == piles.size()) return 0;
        if (2 * M >= piles.size() - i) return sum[i];
        if (dp[i][M] != 0) return dp[i][M];
        int res = 0;
        for (int x = 1; x <= 2 * M; x++) {
            res = max(res, sum[i] - helper(piles, i + x, max(x, M), dp, sum));
        }
        dp[i][M] = res;
        return res;

=======

        int n = piles.size(), sum = 0;
        vector<int> dp(n);
        for (int i = n - 1; i >= 0; i--) {
            sum += piles[i];
            dp[i] = sum;
        }
        vector<vector<int>> memo(n, vector<int>(n));
        return helper(piles, 0, 1, dp, memo);
    }
    int helper(vector<int>& piles, int i, int m, vector<int>& dp, vector<vector<int>>& memo) {
        if (i + 2 * m >= piles.size()) return dp[i];
        if (memo[i][m] > 0) return memo[i][m];
        int res = 0;
        for (int x = 1; x <= 2 * m; x++) {
            res = max(res, dp[i] - helper(piles, i + x, max(x, m), dp, memo));
        }
        memo[i][m] = res;
        return res;
