Synthesizing 9/10 solutions

=======

        unordered_map<string, int> cnt;
        for (int i = 0; i + 10 <= s.length(); ++i) {
            ++cnt[s.substr(i, 10)];
        }
        vector<string> ans;
        for (auto& [k, v] : cnt) {
            if (v > 1) ans.push_back(k);
        }
        return ans;

=======

        unordered_set<string> seen;
        unordered_set<string> repeated;
        for (int i = 0; i + 9 < s.size(); i++) {
            string t = s.substr(i, 10);
            if (seen.count(t)) {
                repeated.insert(t);
            }
            seen.insert(t);
        }
        return vector<string>(repeated.begin(), repeated.end());

=======

        unordered_set<string> seen;
        unordered_set<string> repeated;
        for (int i = 0; i < s.size() - 9; i++) {
            string sub = s.substr(i, 10);
            if (seen.find(sub) != seen.end()) {
                repeated.insert(sub);
            }
            seen.insert(sub);
        }
        return vector<string>(repeated.begin(), repeated.end());

=======

        unordered_map<string, int> m;
        vector<string> res;
        for (int i = 0; i + 10 <= s.size(); i++) {
            string t = s.substr(i, 10);
            if (m[t]++ == 1) res.push_back(t);
        }
        return res;

=======

        vector<string> res;
        unordered_map<string, int> m;
        for (int i = 0; i <= s.length() - 10; ++i) {
            string str = s.substr(i, 10);
            if (++m[str] == 2) {
                res.push_back(str);
            }
        }
        return res;

=======

        vector<string> res;
        unordered_map<string, int> map;
        for (int i = 0; i + 9 < s.size(); i++) {
            string str = s.substr(i, 10);
            map[str]++;
            if (map[str] == 2) {
                res.push_back(str);
            }
        }
        return res;

=======

        unordered_map<string, int> m;
        vector<string> res;
        for (int i = 0; i < s.size() - 9; ++i) {
            string dna = s.substr(i, 10);
            if (m.count(dna) && m[dna] == 1) {
                res.push_back(dna);
                m[dna]++;
            } else if (!m.count(dna)) {
                m[dna] = 1;
            }
        }
        return res;

=======

        int len = s.length();
        if (len <= 10) return {};
        vector<string> res;
        unordered_map<string, int> mp;
        for (int i = 0; i <= len - 10; i++) {
            string sub = s.substr(i, 10);
            if (++mp[sub] == 2) res.push_back(sub);
        }
        return res;

=======

        int n = s.length();
        vector<string> ans;
        unordered_map<string, int> cnt;
        for (int i = 0; i < n - 9; i++) {
            string t = s.substr(i, 10);
            cnt[t]++;
            if (cnt[t] == 2) ans.push_back(t);
        }
        return ans;
