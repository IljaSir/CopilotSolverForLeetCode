Synthesizing 10/10 solutions (Duplicates hidden)

=======

        map<int, map<string, int>> m;
        set<string> foods;
        for (auto& order : orders) {
            m[stoi(order[1])][order[2]]++;
            foods.insert(order[2]);
        }
        vector<vector<string>> res;
        vector<string> header;
        header.push_back("Table");
        for (auto& food : foods) {
            header.push_back(food);
        }
        res.push_back(header);
        for (auto& [table, foodMap] : m) {
            vector<string> row;
            row.push_back(to_string(table));
            for (auto& food : foods) {
                row.push_back(to_string(foodMap[food]));
            }
            res.push_back(row);
        }
        return res;

=======

        map<int, map<string, int>> m;
        set<string> food;
        for (auto order : orders) {
            m[stoi(order[1])][order[2]]++;
            food.insert(order[2]);
        }
        vector<vector<string>> res;
        vector<string> header = {"Table"};
        for (auto f : food) {
            header.push_back(f);
        }
        res.push_back(header);
        for (auto it = m.begin(); it != m.end(); it++) {
            vector<string> row = {to_string(it->first)};
            for (auto f : food) {
                row.push_back(to_string(it->second[f]));
            }
            res.push_back(row);
        }
        return res;

=======

        map<int, map<string, int>> table;
        set<string> food;
        for (auto &order : orders) {
            table[stoi(order[1])][order[2]]++;
            food.insert(order[2]);
        }
        vector<vector<string>> res;
        vector<string> header;
        header.push_back("Table");
        for (auto &f : food) {
            header.push_back(f);
        }
        res.push_back(header);
        for (auto &t : table) {
            vector<string> row;
            row.push_back(to_string(t.first));
            for (auto &f : food) {
                row.push_back(to_string(t.second[f]));
            }
            res.push_back(row);
        }
        return res;

=======

        map<int, map<string, int>> foodTable;
        set<string> foodSet;
        set<int> tableSet;
        for (auto& order : orders) {
            foodTable[stoi(order[1])][order[2]]++;
            foodSet.insert(order[2]);
            tableSet.insert(stoi(order[1]));
        }
        
        vector<vector<string>> result;
        vector<string> header;
        header.push_back("Table");
        for (auto& food : foodSet) {
            header.push_back(food);
        }
        result.push_back(header);
        
        for (auto& table : tableSet) {
            vector<string> row;
            row.push_back(to_string(table));
            for (auto& food : foodSet) {
                row.push_back(to_string(foodTable[table][food]));
            }
            result.push_back(row);
        }
        
        return result;

=======

        map<int, map<string, int>> table;
        set<string> items;
        for (auto& order : orders) {
            int tableNumber = stoi(order[1]);
            string foodItem = order[2];
            table[tableNumber][foodItem]++;
            items.insert(foodItem);
        }
        vector<vector<string>> ans;
        ans.push_back({"Table"});
        for (auto& item : items) {
            ans[0].push_back(item);
        }
        for (auto& t : table) {
            vector<string> row;
            row.push_back(to_string(t.first));
            for (auto& item : items) {
                row.push_back(to_string(t.second[item]));
            }
            ans.push_back(row);
        }
        return ans;

=======

        vector<vector<string>> result;
        map<int, map<string, int>> m;
        set<string> foodItems;
        for (auto& order : orders) {
            int table = stoi(order[1]);
            string food = order[2];
            m[table][food]++;
            foodItems.insert(food);
        }
        vector<string> header;
        header.push_back("Table");
        for (auto& food : foodItems) {
            header.push_back(food);
        }
        result.push_back(header);
        for (auto& table : m) {
            vector<string> row;
            row.push_back(to_string(table.first));
            for (auto& food : foodItems) {
                row.push_back(to_string(table.second[food]));
            }
            result.push_back(row);
        }
        return result;

=======

        map<int, map<string, int>> table;
        set<string> food;
        for (auto& order : orders) {
            int tableNum = atoi(order[1].c_str());
            string foodItem = order[2];
            table[tableNum][foodItem]++;
            food.insert(foodItem);
        }
        vector<string> header;
        header.push_back("Table");
        for (auto& f : food) {
            header.push_back(f);
        }
        vector<vector<string>> result;
        result.push_back(header);
        for (auto& t : table) {
            vector<string> row;
            row.push_back(to_string(t.first));
            for (auto& f : food) {
                row.push_back(to_string(t.second[f]));
            }
            result.push_back(row);
        }
        return result;

=======

        vector<vector<string>> ret;
        map<int, map<string, int>> table;
        set<string> food;
        for (auto v : orders) {
            int t = stoi(v[1]);
            string f = v[2];
            table[t][f]++;
            food.insert(f);
        }
        vector<string> header;
        header.push_back("Table");
        for (auto f : food) {
            header.push_back(f);
        }
        ret.push_back(header);
        for (auto t : table) {
            vector<string> row;
            row.push_back(to_string(t.first));
            for (auto f : food) {
                row.push_back(to_string(t.second[f]));
            }
            ret.push_back(row);
        }
        return ret;

=======

        // map<Table, map<Food, Count>>
        map<int, map<string, int>> table;
        set<string> food;
        for (auto& order : orders) {
            int tableNumber = stoi(order[1]);
            string foodItem = order[2];
            table[tableNumber][foodItem]++;
            food.insert(foodItem);
        }
        
        vector<vector<string>> tableList;
        vector<string> header;
        header.push_back("Table");
        for (auto& foodItem : food) {
            header.push_back(foodItem);
        }
        tableList.push_back(header);
        
        for (auto& t : table) {
            vector<string> row;
            row.push_back(to_string(t.first));
            for (auto& foodItem : food) {
                row.push_back(to_string(t.second[foodItem]));
            }
            tableList.push_back(row);
        }
        
        return tableList;
