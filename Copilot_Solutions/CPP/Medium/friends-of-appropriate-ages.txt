Synthesizing 10/10 solutions

=======

        int res = 0;
        vector<int> count(121, 0);
        for (int a : ages) ++count[a];
        for (int i = 1; i <= 120; ++i) {
            for (int j = 1; j <= 120; ++j) {
                if (i * 0.5 + 7 >= j) continue;
                if (i < j) continue;
                if (i < 100 && 100 < j) continue;
                res += count[i] * (count[j] - (i == j));
            }
        }
        return res;

=======

        sort(ages.begin(), ages.end());
        int n = ages.size();
        int res = 0;
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && ages[j] == ages[i]) j++;
            int count = j - i;
            res += count * (count - 1);
            i = j;
        }
        i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && ages[j] <= ages[i] / 2 + 7) j++;
            res += (j - i - 1) * (i + 1);
            i = j;
        }
        return res;

=======

        int n = ages.size();
        int ans = 0;
        sort(ages.begin(), ages.end());
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            while (j < n && ages[j] <= 0.5 * ages[i] + 7) j++;
            ans += j - i - 1;
            j = i + 1;
            while (j < n && ages[j] == ages[i]) j++;
            ans += (j - i) * (j - i - 1) / 2;
            i = j - 1;
        }
        return ans;

=======

        int n = ages.size();
        int ans = 0;
        sort(ages.begin(), ages.end());
        for (int i = 0; i < n; ++i) {
            int age = ages[i];
            int left = age / 2 + 8;
            int right = age;
            auto it1 = lower_bound(ages.begin(), ages.end(), left);
            auto it2 = upper_bound(ages.begin(), ages.end(), right);
            int cnt = it2 - it1;
            if (cnt > 1) ans += cnt - 1;
        }
        return ans;

=======

        int res = 0;
        vector<int> ageCount(121, 0);
        for (int age : ages) {
            ageCount[age]++;
        }
        for (int ageA = 1; ageA <= 120; ageA++) {
            int countA = ageCount[ageA];
            for (int ageB = 1; ageB <= 120; ageB++) {
                int countB = ageCount[ageB];
                if (ageB <= 0.5 * ageA + 7) continue;
                if (ageB > ageA) continue;
                if (ageB > 100 && ageA < 100) continue;
                res += countA * countB;
                if (ageA == ageB) res -= countA;
            }
        }
        return res;

=======

        int n = ages.size();
        int res = 0;
        vector<int> cnt(121, 0);
        for (int age : ages) {
            cnt[age]++;
        }
        for (int i = 15; i <= 120; i++) {
            for (int j = i / 2 + 8; j <= i; j++) {
                if (j > 120) {
                    continue;
                }
                if (i == j) {
                    res += cnt[i] * (cnt[i] - 1);
                } else {
                    res += cnt[i] * cnt[j];
                }
            }
        }
        return res;

=======

        int res = 0;
        int freq[121] = {0};
        for (int age : ages) {
            freq[age]++;
        }
        for (int ageA = 1; ageA <= 120; ageA++) {
            int countA = freq[ageA];
            for (int ageB = 1; ageB <= 120; ageB++) {
                int countB = freq[ageB];
                if (ageB <= 0.5 * ageA + 7) continue;
                if (ageB > ageA) continue;
                if (ageB > 100 && ageA < 100) continue;
                res += countA * countB;
                if (ageA == ageB) {
                    res -= countA;
                }
            }
        }
        return res;

=======

        int res = 0;
        int n = ages.size();
        vector<int> cnt(121);
        for (int i = 0; i < n; ++i) {
            cnt[ages[i]]++;
        }
        for (int i = 1; i <= 120; ++i) {
            for (int j = 1; j <= 120; ++j) {
                if (i * 0.5 + 7 >= j) continue;
                if (i < j) continue;
                if (i < 100 && 100 < j) continue;
                res += cnt[i] * (cnt[j] - (i == j ? 1 : 0));
            }
        }
        return res;

=======

        int n = ages.size();
        int res = 0;
        vector<int> count(121, 0);
        for (int age : ages) ++count[age];
        for (int i = 0; i <= 120; ++i) {
            for (int j = 0; j <= 120; ++j) {
                if (request(i, j)) res += count[i] * (count[j] - (i == j ? 1 : 0));
            }
        }
        return res;

=======

        int res = 0;
        int age[121] = {0};
        for (int a : ages) age[a]++;
        for (int a = 1; a <= 120; a++) {
            if (age[a] == 0) continue;
            for (int b = 1; b <= 120; b++) {
                if (age[b] == 0) continue;
                if (b > 0.5 * a + 7 && b <= a) {
                    res += age[b] * (age[a] - (a == b ? 1 : 0));
                }
            }
        }
        return res;
