Synthesizing 10/10 solutions

=======

        int count[10] = {0};
        for (auto c : s) {
            if (c == 'z') count[0]++;
            if (c == 'w') count[2]++;
            if (c == 'x') count[6]++;
            if (c == 's') count[7]++; // 7-6
            if (c == 'g') count[8]++;
            if (c == 'u') count[4]++;
            if (c == 'f') count[5]++; // 5-4
            if (c == 'h') count[3]++; // 3-8
            if (c == 'i') count[9]++; // 9-8-5-6
            if (c == 'o') count[1]++; // 1-0-2-4
        }
        count[7] -= count[6];
        count[5] -= count[4];
        count[3] -= count[8];
        count[9] = count[9] - count[8] - count[5] - count[6];
        count[1] = count[1] - count[0] - count[2] - count[4];
        string res = "";
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count[i]; j++) {
                res += to_string(i);
            }
        }
        return res;

=======

        string res;
        vector<int> count(10, 0);
        for (char c : s) {
            if (c == 'z') count[0]++;
            if (c == 'w') count[2]++;
            if (c == 'u') count[4]++;
            if (c == 'x') count[6]++;
            if (c == 'g') count[8]++;
            if (c == 'o') count[1]++; // 1, 0, 2, 4
            if (c == 'h') count[3]++; // 3, 8
            if (c == 'f') count[5]++; // 5, 4
            if (c == 's') count[7]++; // 7, 6
            if (c == 'i') count[9]++; // 9, 5, 6, 8
        }
        count[1] -= count[0] + count[2] + count[4];
        count[3] -= count[8];
        count[5] -= count[4];
        count[7] -= count[6];
        count[9] -= count[5] + count[6] + count[8];
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < count[i]; ++j) {
                res += to_string(i);
            }
        }
        return res;

=======

        vector<int> count(26, 0);
        for (auto c : s) {
            count[c - 'a']++;
        }
        vector<int> digits(10, 0);
        digits[0] = count['z' - 'a'];
        digits[2] = count['w' - 'a'];
        digits[4] = count['u' - 'a'];
        digits[6] = count['x' - 'a'];
        digits[8] = count['g' - 'a'];
        digits[3] = count['h' - 'a'] - digits[8];
        digits[5] = count['f' - 'a'] - digits[4];
        digits[7] = count['s' - 'a'] - digits[6];
        digits[9] = count['i' - 'a'] - digits[5] - digits[6] - digits[8];
        digits[1] = count['n' - 'a'] - digits[7] - 2 * digits[9];
        string res;
        for (int i = 0; i < 10; i++) {
            res += string(digits[i], i + '0');
        }
        return res;

=======

        vector<int> count(26, 0);
        for (auto c : s) count[c - 'a']++;
        vector<int> digits(10, 0);
        digits[0] = count['z' - 'a'];
        digits[2] = count['w' - 'a'];
        digits[4] = count['u' - 'a'];
        digits[6] = count['x' - 'a'];
        digits[8] = count['g' - 'a'];
        digits[3] = count['h' - 'a'] - digits[8];
        digits[5] = count['f' - 'a'] - digits[4];
        digits[7] = count['s' - 'a'] - digits[6];
        digits[9] = count['i' - 'a'] - digits[5] - digits[6] - digits[8];
        digits[1] = count['n' - 'a'] - digits[7] - 2 * digits[9];
        string res;
        for (int i = 0; i < 10; i++) {
            res += string(digits[i], '0' + i);
        }
        return res;

=======

        vector<int> count(26, 0);
        for (char ch : s) {
            count[ch - 'a']++;
        }
        vector<int> digit(10, 0);
        digit[0] = count['z' - 'a'];
        digit[2] = count['w' - 'a'];
        digit[4] = count['u' - 'a'];
        digit[6] = count['x' - 'a'];
        digit[8] = count['g' - 'a'];
        digit[1] = count['o' - 'a'] - digit[0] - digit[2] - digit[4];
        digit[3] = count['h' - 'a'] - digit[8];
        digit[5] = count['f' - 'a'] - digit[4];
        digit[7] = count['v' - 'a'] - digit[5];
        digit[9] = count['i' - 'a'] - digit[5] - digit[6] - digit[8];
        
        string res;
        for (int i = 0; i < 10; i++) {
            res.append(digit[i], '0' + i);
        }
        return res;

=======

        vector<int> cnt(26, 0);
        for (char c: s) cnt[c - 'a']++;
        vector<int> num(10, 0);
        num[0] = cnt['z' - 'a'];
        num[2] = cnt['w' - 'a'];
        num[4] = cnt['u' - 'a'];
        num[6] = cnt['x' - 'a'];
        num[8] = cnt['g' - 'a'];
        num[3] = cnt['h' - 'a'] - num[8];
        num[5] = cnt['f' - 'a'] - num[4];
        num[7] = cnt['s' - 'a'] - num[6];
        num[9] = cnt['i' - 'a'] - num[5] - num[6] - num[8];
        num[1] = cnt['n' - 'a'] - num[7] - 2 * num[9];
        string res;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < num[i]; j++) res += to_string(i);
        }
        return res;

=======

        vector<int> cnt(26, 0);
        for (auto c : s) {
            cnt[c - 'a']++;
        }
        vector<int> digit(10, 0);
        digit[0] = cnt['z' - 'a'];
        digit[2] = cnt['w' - 'a'];
        digit[4] = cnt['u' - 'a'];
        digit[6] = cnt['x' - 'a'];
        digit[8] = cnt['g' - 'a'];
        digit[1] = cnt['o' - 'a'] - digit[0] - digit[2] - digit[4];
        digit[3] = cnt['h' - 'a'] - digit[8];
        digit[5] = cnt['f' - 'a'] - digit[4];
        digit[7] = cnt['v' - 'a'] - digit[5];
        digit[9] = cnt['i' - 'a'] - digit[5] - digit[6] - digit[8];
        string ans;
        for (int i = 0; i < 10; ++i) {
            ans.append(digit[i], '0' + i);
        }
        return ans;

=======

        int count[26] = {0};
        for (auto ch : s) {
            count[ch - 'a']++;
        }
        int digits[10] = {0};
        digits[0] = count['z' - 'a'];
        digits[2] = count['w' - 'a'];
        digits[4] = count['u' - 'a'];
        digits[6] = count['x' - 'a'];
        digits[8] = count['g' - 'a'];
        digits[3] = count['h' - 'a'] - digits[8];
        digits[5] = count['f' - 'a'] - digits[4];
        digits[7] = count['s' - 'a'] - digits[6];
        digits[1] = count['o' - 'a'] - digits[0] - digits[2] - digits[4];
        digits[9] = count['i' - 'a'] - digits[5] - digits[6] - digits[8];
        string result;
        for (int i = 0; i < 10; ++i) {
            result += string(digits[i], i + '0');
        }
        return result;

=======

        int letterCnt[26] = {0};
        for (char c : s) letterCnt[c - 'a']++;
        int digitCnt[10] = {0};
        digitCnt[0] = letterCnt['z' - 'a'];
        digitCnt[2] = letterCnt['w' - 'a'];
        digitCnt[4] = letterCnt['u' - 'a'];
        digitCnt[6] = letterCnt['x' - 'a'];
        digitCnt[8] = letterCnt['g' - 'a'];
        digitCnt[3] = letterCnt['h' - 'a'] - digitCnt[8];
        digitCnt[5] = letterCnt['f' - 'a'] - digitCnt[4];
        digitCnt[7] = letterCnt['s' - 'a'] - digitCnt[6];
        digitCnt[9] = letterCnt['i' - 'a'] - digitCnt[5] - digitCnt[6] - digitCnt[8];
        digitCnt[1] = letterCnt['o' - 'a'] - digitCnt[0] - digitCnt[2] - digitCnt[4];
        
        string res;
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < digitCnt[i]; ++j) {
                res.push_back(i + '0');
            }
        }
        return res;

=======

        // 0, 2, 4, 6, 8
        // 1, 3, 5, 7
        // 9
        int cnt[10] = {0};
        for (char c : s) {
            switch (c) {
                case 'z': cnt[0]++; break;
                case 'w': cnt[2]++; break;
                case 'u': cnt[4]++; break;
                case 'x': cnt[6]++; break;
                case 'g': cnt[8]++; break;
                case 'o': cnt[1]++; break;
                case 'h': cnt[3]++; break;
                case 'f': cnt[5]++; break;
                case 's': cnt[7]++; break;
                case 'i': cnt[9]++; break;
            }
        }
        
        cnt[1] -= cnt[0] + cnt[2] + cnt[4];
        cnt[3] -= cnt[8];
        cnt[5] -= cnt[4];
        cnt[7] -= cnt[6];
        cnt[9] -= cnt[5] + cnt[6] + cnt[8];
        
        string ans;
        for (int i = 0; i < 10; i++) {
            ans.append(cnt[i], '0' + i);
        }
        return ans;
