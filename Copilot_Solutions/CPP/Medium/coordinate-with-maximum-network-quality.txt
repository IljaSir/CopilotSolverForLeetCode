Synthesizing 7/10 solutions

=======

        vector<int> result;
        int maxQuality = 0;
        for (int x = 0; x <= 50; ++x) {
            for (int y = 0; y <= 50; ++y) {
                int quality = 0;
                for (auto& tower : towers) {
                    int distance = sqrt((x - tower[0]) * (x - tower[0]) + (y - tower[1]) * (y - tower[1]));
                    if (distance <= radius) {
                        quality += tower[2] / (1 + distance);
                    }
                }
                if (quality > maxQuality) {
                    maxQuality = quality;
                    result = {x, y};
                } else if (quality == maxQuality) {
                    if (result.empty() || x < result[0] || (x == result[0] && y < result[1])) {
                        result = {x, y};
                    }
                }
            }
        }
        return result;

=======

        int max = 0;
        vector<int> res;
        for (int x = 0; x <= 50; x++) {
            for (int y = 0; y <= 50; y++) {
                int sum = 0;
                for (auto tower : towers) {
                    int d = sqrt((x - tower[0]) * (x - tower[0]) + (y - tower[1]) * (y - tower[1]));
                    if (d <= radius) {
                        sum += tower[2] / (1 + d);
                    }
                }
                if (sum > max) {
                    max = sum;
                    res = {x, y};
                }
            }
        }
        return res;

=======

        vector<int> res;
        int max = 0;
        for (int i = 0; i < 51; ++i) {
            for (int j = 0; j < 51; ++j) {
                int sum = 0;
                for (auto& t : towers) {
                    int d = sqrt(pow(i - t[0], 2) + pow(j - t[1], 2));
                    if (d <= radius) {
                        sum += t[2] / (1 + d);
                    }
                }
                if (sum > max) {
                    max = sum;
                    res = {i, j};
                }
            }
        }
        return res;

=======

        int max_quality = 0;
        vector<int> result;
        for (int i = 0; i <= 50; ++i) {
            for (int j = 0; j <= 50; ++j) {
                int quality = 0;
                for (int k = 0; k < towers.size(); ++k) {
                    int distance = pow(i - towers[k][0], 2) + pow(j - towers[k][1], 2);
                    if (distance <= pow(radius, 2)) {
                        quality += towers[k][2] / (1 + sqrt(distance));
                    }
                }
                if (quality > max_quality) {
                    max_quality = quality;
                    result = {i, j};
                } else if (quality == max_quality) {
                    if (i < result[0] || (i == result[0] && j < result[1])) {
                        result = {i, j};
                    }
                }
            }
        }
        return result;

=======

        vector<int> res{0, 0};
        int ans = 0;
        for (int x = 0; x <= 50; x++) {
            for (int y = 0; y <= 50; y++) {
                int sum = 0;
                for (auto& t : towers) {
                    int d = (x - t[0]) * (x - t[0]) + (y - t[1]) * (y - t[1]);
                    if (d <= radius * radius) {
                        sum += floor(t[2] / (1.0 + sqrt(d)));
                    }
                }
                if (sum > ans) {
                    ans = sum;
                    res = {x, y};
                }
            }
        }
        return res;

=======

        int max = 0;
        vector<int> res;
        for(int i = 0; i < 51; i++){
            for(int j = 0; j < 51; j++){
                int sum = 0;
                for(int k = 0; k < towers.size(); k++){
                    int d = sqrt(pow(i - towers[k][0], 2) + pow(j - towers[k][1], 2));
                    if(d <= radius){
                        sum += floor(towers[k][2] / (1 + d));
                    }
                }
                if(sum > max){
                    max = sum;
                    res = {i, j};
                }else if(sum == max){
                    if(i < res[0]){
                        res = {i, j};
                    }else if(i == res[0] && j < res[1]){
                        res = {i, j};
                    }
                }
            }
        }
        return res;

=======

        vector<int> res;
        double max_val = 0;
        for(int x = 0; x <= 50; x++){
            for(int y = 0; y <= 50; y++){
                double q = 0;
                for(int i = 0; i < towers.size(); i++){
                    double d = sqrt((towers[i][0] - x) * (towers[i][0] - x) + (towers[i][1] - y) * (towers[i][1] - y));
                    if(d <= radius){
                        q += towers[i][2] / (1 + d);
                    }
                }
                if(q > max_val){
                    max_val = q;
                    res = {x, y};
                }
            }
        }
        return res;
