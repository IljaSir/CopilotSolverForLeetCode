Synthesizing 10/10 solutions

=======

        vector<int> primes;
        for (int i = left; i <= right; i++) {
            if (isPrime(i)) {
                primes.push_back(i);
            }
        }
        if (primes.size() < 2) {
            return {-1, -1};
        }
        int minDiff = primes[1] - primes[0];
        int minIndex = 0;
        for (int i = 2; i < primes.size(); i++) {
            if (primes[i] - primes[i - 1] < minDiff) {
                minDiff = primes[i] - primes[i - 1];
                minIndex = i - 1;
            }
        }
        return {primes[minIndex], primes[minIndex + 1]};
    }
    
    bool isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;

=======

        vector<int> ans(2, -1);
        for (int i = left; i <= right; i++) {
            if (isPrime(i)) {
                if (ans[0] == -1) {
                    ans[0] = i;
                } else if (ans[1] == -1) {
                    ans[1] = i;
                    break;
                } else if (i - ans[0] < ans[1] - ans[0]) {
                    ans[0] = i;
                } else {
                    ans[1] = i;
                    break;
                }
            }
        }
        return ans;
    }
    
    bool isPrime(int n) {
        if (n < 2) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;

=======

        vector<int> v;
        for(int i=left;i<=right;i++){
            if(isPrime(i)){
                v.push_back(i);
            }
        }
        if(v.size()==0){
            return {-1,-1};
        }
        int min=INT_MAX;
        int a=-1,b=-1;
        for(int i=0;i<v.size()-1;i++){
            if(v[i+1]-v[i]<min){
                min=v[i+1]-v[i];
                a=v[i];
                b=v[i+1];
            }
        }
        return {a,b};
    }
    bool isPrime(int n){
        if(n<=1){
            return false;
        }
        for(int i=2;i*i<=n;i++){
            if(n%i==0){
                return false;
            }
        }
        return true;

=======

        vector<int> ans(2, -1);
        int minGap = right - left + 1;
        for (int i = left; i <= right; ++i) {
            if (isPrime(i)) {
                if (i - ans[0] < minGap) {
                    ans[1] = i;
                    minGap = ans[1] - ans[0];
                }
                ans[0] = i;
            }
        }
        return ans;

=======

        int minDiff = INT_MAX;
        int min1 = -1;
        int min2 = -1;
        for (int i = left; i <= right; i++) {
            if (isPrime(i)) {
                int j = i + 1;
                while (j <= right) {
                    if (isPrime(j)) {
                        if (j - i < minDiff) {
                            minDiff = j - i;
                            min1 = i;
                            min2 = j;
                        }
                        break;
                    }
                    j++;
                }
                j = i - 1;
                while (j >= left) {
                    if (isPrime(j)) {
                        if (i - j < minDiff) {
                            minDiff = i - j;
                            min1 = j;
                            min2 = i;
                        }
                        break;
                    }
                    j--;
                }
            }
        }
        return {min1, min2};
    }
    
    bool isPrime(int n) {
        if (n == 1) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;

=======

        vector<int> result;
        int min_gap = INT_MAX;
        for (int i = left; i <= right; i++) {
            if (isPrime(i)) {
                for (int j = i + 1; j <= right; j++) {
                    if (isPrime(j)) {
                        int gap = j - i;
                        if (gap < min_gap) {
                            result.clear();
                            result.push_back(i);
                            result.push_back(j);
                            min_gap = gap;
                        }
                        break;
                    }
                }
            }
        }
        if (result.empty()) {
            result.push_back(-1);
            result.push_back(-1);
        }
        return result;
    }
    
    bool isPrime(int n) {
        if (n < 2) return false;
        if (n == 2) return true;
        if (n % 2 == 0) return false;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;

=======

        int i = left;
        int j = right;
        while (i >= 2) {
            if (isPrime(i)) {
                break;
            }
            --i;
        }
        while (j <= 1000000) {
            if (isPrime(j)) {
                break;
            }
            ++j;
        }
        if (i >= 2 && j <= 1000000) {
            return {i, j};
        }
        return {-1, -1};

=======

        vector<int> ans;
        int diff = right - left;
        if (diff < 2) {
            ans.push_back(-1);
            ans.push_back(-1);
            return ans;
        }
        int n1 = -1;
        int n2 = -1;
        for (int i = left; i <= right; i++) {
            if (isPrime(i)) {
                if (n1 == -1) {
                    n1 = i;
                } else {
                    if (n2 == -1) {
                        n2 = i;
                    } else {
                        if (i - n1 < n2 - n1) {
                            n2 = i;
                        }
                    }
                }
            }
        }
        ans.push_back(n1);
        ans.push_back(n2);
        return ans;

=======

        vector<int> ans;
        int min = INT_MAX;
        for(int i = left; i <= right; i++) {
            if(isPrime(i)) {
                if(i - left >= 2) {
                    if(i - left < min) {
                        min = i - left;
                        ans.clear();
                        ans.push_back(left);
                        ans.push_back(i);
                    }
                }
                left = i;
            }
        }
        if(ans.size() == 0) {
            ans.push_back(-1);
            ans.push_back(-1);
        }
        return ans;
    }
    bool isPrime(int n) {
        for(int i = 2; i <= sqrt(n); i++) {
            if(n % i == 0) {
                return false;
            }
        }
        return true;

=======

        int p = right;
        int q = left;
        while (p > 2) {
            if (isPrime(p)) break;
            p--;
        }
        while (q > 2) {
            if (isPrime(q)) break;
            q--;
        }
        if (p - q > 2) {
            return {q, p};
        }
        p = left;
        q = right;
        while (p < 1000001) {
            if (isPrime(p)) break;
            p++;
        }
        while (q < 1000001) {
            if (isPrime(q)) break;
            q++;
        }
        if (q - p > 2) {
            return {p, q};
        }
        return {-1, -1};
