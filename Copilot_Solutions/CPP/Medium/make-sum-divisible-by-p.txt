Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + nums[i]) % p;
        }
        if (sum == 0) {
            return 0;
        }
        int ans = n;
        int cur = 0;
        unordered_map<int, int> mp;
        mp[0] = -1;
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            mp[cur] = i;
            int need = (cur - sum + p) % p;
            if (mp.count(need)) {
                ans = min(ans, i - mp[need]);
            }
        }
        return ans < n ? ans : -1;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            sum %= p;
        }
        if (sum == 0) return 0;
        int res = n;
        int cur = 0;
        unordered_map<int, int> map;
        map[0] = -1;
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            cur %= p;
            map[cur] = i;
            int target = (cur - sum + p) % p;
            if (map.find(target) != map.end()) {
                res = min(res, i - map[target]);
            }
        }
        return res < n ? res : -1;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            sum %= p;
        }
        if (sum == 0) return 0;
        int res = n;
        unordered_map<int, int> m;
        m[0] = -1;
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += nums[i];
            cur %= p;
            m[cur] = i;
            int t = (cur - sum + p) % p;
            if (m.count(t)) {
                res = min(res, i - m[t]);
            }
        }
        return res == n ? -1 : res;

=======

        int sum = 0;
        for (int num : nums) {
            sum = (sum + num) % p;
        }
        if (sum == 0) {
            return 0;
        }
        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = -1;
        int cur = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            mp[cur] = i;
            int need = (cur - sum + p) % p;
            if (mp.count(need)) {
                ans = min(ans, i - mp[need]);
            }
        }
        return ans < n ? ans : -1;

=======

        int n = nums.size();
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            sum %= p;
        }
        if (sum == 0) {
            return 0;
        }
        unordered_map<int, int> mp;
        mp[0] = -1;
        long long cur = 0;
        int ans = n;
        for (int i = 0; i < n; i++) {
            cur += nums[i];
            cur %= p;
            int need = (cur - sum + p) % p;
            if (mp.count(need)) {
                ans = min(ans, i - mp[need]);
            }
            mp[cur] = i;
        }
        if (ans < n) {
            return ans;
        }
        return -1;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            nums[i] %= p;
            sum += nums[i];
        }
        sum %= p;
        if (sum == 0) {
            return 0;
        }
        int ans = n;
        unordered_map<int, int> mp;
        mp[0] = -1;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur = (cur + nums[i]) % p;
            mp[cur] = i;
            int need = (cur - sum + p) % p;
            if (mp.count(need)) {
                ans = min(ans, i - mp[need]);
            }
        }
        if (ans == n) {
            return -1;
        }
        return ans;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int mod = sum % p;
        if (mod == 0) return 0;
        unordered_map<int, int> mp;
        mp[0] = -1;
        int cur = 0;
        int res = n;
        for (int i = 0; i < n; ++i) {
            cur = (cur + nums[i]) % p;
            mp[cur] = i;
            int t = (cur - mod + p) % p;
            if (mp.count(t)) {
                res = min(res, i - mp[t]);
            }
        }
        return res == n ? -1 : res;

=======

        int n = nums.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            nums[i] = sum;
        }
        if (sum % p == 0) {
            return 0;
        }
        int target = sum % p;
        int res = n;
        unordered_map<int, int> mp;
        mp[0] = -1;
        for (int i = 0; i < n; ++i) {
            int cur = nums[i] % p;
            int want = (cur - target + p) % p;
            if (mp.count(want)) {
                res = min(res, i - mp[want]);
            }
            mp[cur] = i;
        }
        return res < n ? res : -1;

=======

        int sum = accumulate(nums.begin(), nums.end(), 0);
        int n = nums.size();
        int target = sum % p;
        if (target == 0) return 0;
        int res = n;
        unordered_map<int, int> mp;
        mp[0] = -1;
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            cur = (cur + nums[i]) % p;
            mp[cur] = i;
            int need = (cur - target + p) % p;
            if (mp.count(need)) {
                res = min(res, i - mp[need]);
            }
        }
        return res < n ? res : -1;

=======

        int n = nums.size();
        int res = n;
        vector<int> prefix(n+1, 0);
        for (int i = 0; i < n; i++) {
            prefix[i+1] = (prefix[i] + nums[i]) % p;
        }
        if (prefix[n] == 0) return 0;
        unordered_map<int, int> mp;
        mp[0] = n;
        for (int i = n - 1; i >= 0; i--) {
            mp[prefix[i]] = i;
            int target = (prefix[i] - p + p) % p;
            if (mp.count(target)) {
                res = min(res, i - mp[target]);
            }
        }
        return res == n ? -1 : res;
