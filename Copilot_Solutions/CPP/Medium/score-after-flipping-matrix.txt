Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int m = grid.size(), n = grid[0].size();
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] ^= 1;
                }
            }
        }
        for (int j = 1; j < n; j++) {
            int cnt = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    cnt++;
                }
            }
            if (cnt * 2 < m) {
                for (int i = 0; i < m; i++) {
                    grid[i][j] ^= 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            int val = 0;
            for (int j = 0; j < n; j++) {
                val = (val << 1) + grid[i][j];
            }
            ans += val;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = m * (1 << (n - 1));
        for (int j = 1; j < n; j++) {
            int nOnes = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][0] == 1) {
                    nOnes += grid[i][j];
                } else {
                    nOnes += (1 - grid[i][j]);
                }
            }
            int k = max(nOnes, m - nOnes);
            ans += k * (1 << (n - j - 1));
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = m * (1 << (n - 1));
        for (int j = 1; j < n; j++) {
            int nOnes = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][0] == 1) {
                    nOnes += grid[i][j];
                } else {
                    nOnes += (1 - grid[i][j]);
                }
            }
            int k = max(nOnes, m - nOnes);
            res += k * (1 << (n - j - 1));
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = m * (1 << (n - 1));
        for (int j = 1; j < n; ++j) {
            int nOnes = 0;
            for (int i = 0; i < m; ++i) {
                if (grid[i][0] == 1) {
                    nOnes += grid[i][j];
                } else {
                    nOnes += (1 - grid[i][j]);
                }
            }
            int k = max(nOnes, m - nOnes);
            ans += k * (1 << (n - j - 1));
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 0; j < n; j++) {
            int cnt = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) {
                    cnt++;
                }
            }
            if (cnt < m - cnt) {
                for (int i = 0; i < m; i++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res += grid[i][j] * (1 << (n - 1 - j));
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for (int i = 0; i < m; i++) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 0; j < n; j++) {
            int cnt = 0;
            for (int i = 0; i < m; i++) {
                if (grid[i][j] == 1) cnt++;
            }
            cnt = max(cnt, m - cnt);
            ans += (1 << (n - j - 1)) * cnt;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int sum = 0;
        for (int i = 0; i < m; ++i) {
            if (grid[i][0] == 0) {
                for (int j = 0; j < n; ++j) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j = 1; j < n; ++j) {
            int cnt = 0;
            for (int i = 0; i < m; ++i) {
                if (grid[i][j] == 1) {
                    ++cnt;
                }
            }
            if (cnt < m - cnt) {
                cnt = m - cnt;
            }
            sum += cnt * (1 << (n - j - 1));
        }
        sum += m * (1 << (n - 1));
        return sum;

=======

        int row = grid.size();
        int col = grid[0].size();
        int ans = 0;
        for (int i=0; i<row; i++) {
            if (grid[i][0] == 0) {
                for (int j=0; j<col; j++) {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for (int j=0; j<col; j++) {
            int cnt = 0;
            for (int i=0; i<row; i++) {
                if (grid[i][j] == 1) {
                    cnt++;
                }
            }
            ans += max(cnt, row - cnt) * pow(2, col - j - 1);
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ret = 0;
        for (int i = 0; i < m; i++) {
            ret += grid[i][0] ? 0 : 1 << (n - 1);
        }
        for (int j = 1; j < n; j++) {
            int cnt = 0;
            for (int i = 0; i < m; i++) {
                cnt += grid[i][j] ? 1 : 0;
            }
            ret += max(cnt, m - cnt) << (n - j - 1);
        }
        return ret;
