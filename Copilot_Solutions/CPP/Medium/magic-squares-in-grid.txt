Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < grid.size() - 2; i++) {
            for (int j = 0; j < grid[i].size() - 2; j++) {
                if (grid[i + 1][j + 1] != 5) continue;
                if (grid[i][j] > 9 || grid[i][j + 1] > 9 || grid[i][j + 2] > 9) continue;
                if (grid[i + 1][j] > 9 || grid[i + 1][j + 2] > 9) continue;
                if (grid[i + 2][j] > 9 || grid[i + 2][j + 1] > 9 || grid[i + 2][j + 2] > 9) continue;
                if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) continue;
                if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) continue;
                if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) continue;
                if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) continue;
                if (grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] != 15) continue;
                if (grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] != 15) continue;
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < grid.size() - 2; i++) {
            for (int j = 0; j < grid[0].size() - 2; j++) {
                if (grid[i + 1][j + 1] == 5 && isValid(grid, i, j)) {
                    count++;
                }
            }
        }
        return count;
    }
    
    bool isValid(vector<vector<int>>& grid, int row, int col) {
        int sum = 0;
        for (int i = 0; i < 3; i++) {
            sum += grid[row][col + i];
        }
        for (int i = 0; i < 3; i++) {
            int temp = 0;
            for (int j = 0; j < 3; j++) {
                temp += grid[row + i][col + j];
            }
            if (temp != sum) {
                return false;
            }
        }
        for (int i = 0; i < 3; i++) {
            int temp = 0;
            for (int j = 0; j < 3; j++) {
                temp += grid[row + j][col + i];
            }
            if (temp != sum) {
                return false;
            }
        }
        int temp = 0;
        for (int i = 0; i < 3; i++) {
            temp += grid[row + i][col + i];
        }
        if (temp != sum) {
            return false;
        }
        temp = 0;
        for (int i = 0; i < 3; i++) {
            temp += grid[row + i][col + 2 - i];
        }
        if (temp != sum) {
            return false;
        }
        vector<int> record(10, 0);
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                record[grid[row + i][col + j]]++;
            }
        }
        for (int i = 1; i <= 9; i++) {
            if (record[i] != 1) {
                return false;
            }
        }
        return true;

=======

        int ans = 0;
        for (int i = 0; i < grid.size() - 2; ++i) {
            for (int j = 0; j < grid[i].size() - 2; ++j) {
                if (grid[i + 1][j + 1] != 5) continue;
                if (magic(grid, i, j)) ++ans;
            }
        }
        return ans;
    }
    
    bool magic(vector<vector<int>>& grid, int i, int j) {
        vector<int> cnt(16);
        for (int x = 0; x < 3; ++x) {
            for (int y = 0; y < 3; ++y) {
                if (grid[i + x][j + y] < 1 || grid[i + x][j + y] > 9) return false;
                ++cnt[grid[i + x][j + y]];
            }
        }
        for (int i = 1; i <= 9; ++i) {
            if (cnt[i] != 1) return false;
        }
        if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) return false;
        if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] != 15) return false;
        if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) return false;
        if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) return false;
        if (grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] != 15) return false;
        if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) return false;
        if (grid[i][j] + grid[i + 1][j + 1] + grid[i + 2

=======

        int res = 0;
        for (int i = 0; i + 2 < grid.size(); ++i) {
            for (int j = 0; j + 2 < grid[0].size(); ++j) {
                if (grid[i + 1][j + 1] != 5) continue;  // optional skip
                if (magic(grid[i][j], grid[i][j + 1], grid[i][j + 2],
                          grid[i + 1][j], grid[i + 1][j + 1], grid[i + 1][j + 2],
                          grid[i + 2][j], grid[i + 2][j + 1], grid[i + 2][j + 2]))
                    res++;
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int res = 0;
        for (int i = 0; i < m - 2; i++) {
            for (int j = 0; j < n - 2; j++) {
                if (grid[i + 1][j + 1] != 5) {
                    continue;
                }
                if (magic(grid[i][j], grid[i][j + 1], grid[i][j + 2],
                          grid[i + 1][j], grid[i + 1][j + 1], grid[i + 1][j + 2],
                          grid[i + 2][j], grid[i + 2][j + 1], grid[i + 2][j + 2])) {
                    res++;
                }
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int ans = 0;
        for (int i = 0; i <= m - 3; ++i) {
            for (int j = 0; j <= n - 3; ++j) {
                if (grid[i + 1][j + 1] != 5) continue;
                if (magic(grid, i, j)) ++ans;
            }
        }
        return ans;
    }
    bool magic(vector<vector<int>>& grid, int i, int j) {
        vector<int> cnt(16, 0);
        for (int x = i; x < i + 3; ++x) {
            for (int y = j; y < j + 3; ++y) {
                if (grid[x][y] < 1 || grid[x][y] > 9) return false;
                ++cnt[grid[x][y]];
            }
        }
        for (int i = 1; i <= 9; ++i) {
            if (cnt[i] != 1) return false;
        }
        if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) return false;
        if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] != 15) return false;
        if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) return false;
        if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) return false;
        if (grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] != 15) return false;
        if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) return false;
        if (grid[i][j] + grid[i + 1][j + 1] + grid[i

=======

        int r = grid.size(), c = grid[0].size();
        int res = 0;
        for (int i = 0; i < r - 2; ++i) {
            for (int j = 0; j < c - 2; ++j) {
                if (grid[i + 1][j + 1] != 5) continue;
                vector<int> cnt(16);
                for (int k = 0; k < 3; ++k) {
                    for (int l = 0; l < 3; ++l) {
                        if (grid[i + k][j + l] < 1 || grid[i + k][j + l] > 9) goto next;
                        ++cnt[grid[i + k][j + l]];
                    }
                }
                for (int k = 1; k <= 9; ++k) {
                    if (cnt[k] != 1) goto next;
                }
                if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) goto next;
                if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) goto next;
                if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) goto next;
                if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) goto next;
                if (grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] != 15) goto next;
                if (grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] != 15) goto next;
                ++res;
            next:;
            }
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size(), ans = 0;
        for (int i = 0; i <= m - 3; i++) {
            for (int j = 0; j <= n - 3; j++) {
                if (grid[i + 1][j + 1] != 5) continue; // optional skip
                int s = grid[i][j] + grid[i][j + 1] + grid[i][j + 2] + grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] + grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2];
                if (s != 45) continue;
                if (grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] != 15) continue;
                if (grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] != 15) continue;
                if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) continue;
                if (grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] != 15) continue;
                if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) continue;
                if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) continue;
                if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] != 15) continue;
                if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) continue;
                ans++;
            }
        }
        return ans

=======

        int result = 0;
        int row = grid.size();
        int col = grid[0].size();
        for (int i = 0; i < row - 2; i++) {
            for (int j = 0; j < col - 2; j++) {
                if (grid[i + 1][j + 1] != 5) {
                    continue;
                }
                if (magic(grid, i, j)) {
                    result++;
                }
            }
        }
        return result;
    }
    bool magic(vector<vector<int>>& grid, int i, int j) {
        int row = grid.size();
        int col = grid[0].size();
        vector<int> count(10, 0);
        for (int k = 0; k < 3; k++) {
            for (int l = 0; l < 3; l++) {
                if (grid[i + k][j + l] < 1 || grid[i + k][j + l] > 9) {
                    return false;
                }
                count[grid[i + k][j + l]]++;
            }
        }
        for (int k = 1; k <= 9; k++) {
            if (count[k] != 1) {
                return false;
            }
        }
        if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) {
            return false;
        }
        if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] != 15) {
            return false;
        }
        if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) {
            return false;
        }
        if (grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) {
            return false;
        }
        if (grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] != 15) {
            return false;
        }
        if (grid[i][j +

=======

        int count = 0;
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0; i < row - 2; i++) {
            for(int j = 0; j < col - 2; j++) {
                if(grid[i + 1][j + 1] != 5) continue;
                if(grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != 15) continue;
                if(grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != 15) continue;
                if(grid[i][j] + grid[i + 1][j] + grid[i + 2][j] != 15) continue;
                if(grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != 15) continue;
                if(grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] != 15) continue;
                if(grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] != 15) continue;
                vector<int> v;
                v.push_back(grid[i][j]);
                v.push_back(grid[i][j + 1]);
                v.push_back(grid[i][j + 2]);
                v.push_back(grid[i + 1][j]);
                v.push_back(grid[i + 1][j + 1]);
                v.push_back(grid[i + 1][j + 2]);
                v.push_back(grid[i + 2][j]);
                v.push_back(grid[i + 2][j + 1]);
                v.push_back(grid[i + 2][j + 2]);
                sort(v.begin(), v.end());
                if(v[0] == 1 && v[1] == 2 && v[2] == 3 && v[3] == 4 && v[4] == 5 && v[5] == 6 && v[6] == 7 && v[7] == 8 && v[8] == 9
