Synthesizing 10/10 solutions

=======

        int n = stones.size();
        int ans = 0;
        for (int i = 1; i < n; i++) {
            ans = max(ans, stones[i] - stones[i - 1]);
        }
        return ans;
    }
    int minCost(vector<int>& stones) {
        int n = stones.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[0][i] = stones[i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = i; j < n; j++) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + stones[j] - stones[j - 1]);
            }
        }
        return dp[n - 1][n - 1];
    }
    int frogJump(vector<int>& stones) {
        int n = stones.size();
        int maxJump = maxJump(stones);
        vector<vector<int>> dp(n, vector<int>(maxJump + 1, 0));
        dp[0][0] = stones[0];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= maxJump; j++) {
                if (j == 0) {
                    dp[i][j] = dp[i - 1][j] + stones[i] - stones[i - 1];
                } else {
                    dp[i][j] = min(dp[i - 1][j - 1] + stones[i] - stones[i - 1], dp[i - 1][j] + stones[i] - stones[i - 1]);
                }
            }
        }
        return dp[n - 1][0];

=======

        int n = stones.size();
        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));
        dp[0][0] = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                int k = lower_bound(stones.begin(), stones.end(), stones[i] - stones[j]) - stones.begin();
                for (int p = k; p < i; ++p) {
                    dp[i][j] = min(dp[i][j], dp[p][j] + stones[i] - stones[p]);
                    dp[i][i] = min(dp[i][i], dp[p][j] + stones[i] - stones[j]);
                }
            }
        }
        return *min_element(dp[n - 1].begin(), dp[n - 1].end());

=======

        int n = stones.size();
        int maxJump = 0;
        for (int i = 1; i < n; i++) {
            maxJump = max(maxJump, stones[i] - stones[i - 1]);
        }
        return maxJump;
    }
    int minCost(vector<int>& stones) {
        int n = stones.size();
        int maxJump = maxJump(stones);
        vector<vector<int>> dp(n, vector<int>(maxJump + 1, INT_MAX));
        dp[0][0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= maxJump; j++) {
                int prev = stones[i] - j;
                auto it = lower_bound(stones.begin(), stones.begin() + i, prev);
                if (it != stones.end() && *it == prev) {
                    dp[i][j] = min(dp[i][j], dp[it - stones.begin()][j] + j);
                }
                if (j - 1 > 0 && dp[i - 1][j - 1] != INT_MAX) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + j);
                }
                if (j + 1 <= maxJump && dp[i - 1][j + 1] != INT_MAX) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j + 1] + j);
                }
                if (dp[i - 1][j] != INT_MAX) {
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + j);
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 1; i <= maxJump; i++) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = stones.size();
        int maxJump = 0;
        for (int i = 1; i < n; i++) {
            maxJump = max(maxJump, stones[i] - stones[i-1]);
        }
        return maxJump;
    }
    int minCost(vector<int>& stones) {
        int n = stones.size();
        int maxJump = maxJump(stones);
        vector<int> dp(n, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n && stones[j] - stones[i] <= maxJump; j++) {
                dp[j] = min(dp[j], dp[i] + stones[j] - stones[i]);
            }
        }
        return dp[n-1];

=======

        int n = stones.size();
        int m = 0;
        for (int i = 1; i < n; ++i) {
            m = max(m, stones[i] - stones[i - 1]);
        }
        return m;
    }
    int minCost(vector<int>& stones) {
        int n = stones.size();
        int m = maxJump(stones);
        vector<vector<int>> dp(n, vector<int>(m + 1, INT_MAX));
        dp[0][1] = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 1; j <= m; ++j) {
                if (dp[i - 1][j] == INT_MAX) continue;
                int k = stones[i] - stones[i - 1];
                if (k > j) {
                    dp[i][k] = min(dp[i][k], dp[i - 1][j]);
                } else {
                    dp[i][k] = min(dp[i][k], dp[i - 1][j]);
                    dp[i][j] = min(dp[i][j], dp[i - 1][j] + (j - k));
                }
            }
        }
        int ans = INT_MAX;
        for (int i = 1; i <= m; ++i) {
            ans = min(ans, dp[n - 1][i]);
        }
        return ans;

=======

        int n = stones.size();
        vector<int> dp(n, INT_MAX);
        dp[0] = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if (stones[j] - stones[i] > dp[i] + 1) break;
                dp[j] = min(dp[j], max(dp[i], stones[j] - stones[i]));
            }
        }
        return dp[n - 1];

=======

        int n = stones.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (stones[j] - stones[i] > ans) break;
                ans = max(ans, stones[j] - stones[i]);
            }
        }
        return ans;
    }
    int frogJump(vector<int>& stones) {
        int n = stones.size();
        int ans = 0;
        while (true) {
            int maxJump = maxJump(stones);
            if (maxJump < ans) break;
            ans = maxJump;
        }
        return ans;

=======

        int n = stones.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            dp[i] = stones[i] - stones[i - 1];
            for (int j = i - 2; j >= 0; --j) {
                if (stones[i] - stones[j] > i - j) {
                    break;
                }
                dp[i] = max(dp[i], min(dp[j], stones[i] - stones[j]));
            }
        }
        return dp.back();
    }
    int frogJump(vector<int>& stones) {
        int n = stones.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            dp[i] = stones[i] - stones[i - 1];
            for (int j = i - 2; j >= 0; --j) {
                if (stones[i] - stones[j] > i - j) {
                    break;
                }
                dp[i] = max(dp[i], min(dp[j], stones[i] - stones[j]));
            }
        }
        return dp.back();
    }
    int frogJump2(vector<int>& stones) {
        int n = stones.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            dp[i] = stones[i] - stones[i - 1];
            for (int j = i - 2; j >= 0; --j) {
                if (stones[i] - stones[j] > i - j) {
                    break;
                }
                dp[i] = max(dp[i], min(dp[j], stones[i] - stones[j]));
            }
        }
        return dp.back();
    }
    int frogJump3(vector<int>& stones) {
        int n = stones.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            dp[i] = stones[i] - stones[i - 1];
            for (int j = i - 2; j >= 0; --j) {
                if (stones[i] - stones[j] > i - j) {
                    break;
                }
                dp[i] = max(dp[i], min(dp[j], stones

=======

        int n = stones.size();
        vector<int> dp(n, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && stones[j] - stones[i] <= dp[i]) {
                dp[j] = min(dp[j], stones[j] - stones[i]);
                ++j;
            }
            --j;
            if (j + 1 < n) {
                dp[j + 1] = min(dp[j + 1], stones[j + 1] - stones[i]);
            }
        }
        return dp[n - 1];

=======

        int n = stones.size();
        int maxJump = 0;
        int lastStone = stones[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            if (stones[i] + maxJump >= lastStone) {
                maxJump = lastStone - stones[i];
            } else {
                maxJump++;
            }
        }
        return maxJump;
    }
    int jump(vector<int>& stones) {
        int n = stones.size();
        int maxJump = maxJump(stones);
        int lastStone = stones[n - 1];
        vector<int> dp(n, 0);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = INT_MAX;
            for (int j = i - 1; j >= 0; j--) {
                if (stones[i] - stones[j] <= maxJump) {
                    if (dp[j] != INT_MAX) {
                        dp[i] = min(dp[i], dp[j] + 1);
                    }
                } else {
                    break;
                }
            }
        }
        return dp[n - 1];
