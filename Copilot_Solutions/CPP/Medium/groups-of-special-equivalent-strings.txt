Synthesizing 9/10 solutions

=======

        unordered_set<string> s;
        for (auto w : words) {
            string odd, even;
            for (int i = 0; i < w.size(); ++i) {
                if (i % 2 == 0) even += w[i];
                else odd += w[i];
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            s.insert(odd+even);
        }
        return s.size();

=======

        unordered_set<string> s;
        for (auto& word : words) {
            string odd, even;
            for (int i = 0; i < word.size(); i++) {
                if (i % 2 == 0) even += word[i];
                else odd += word[i];
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            s.insert(odd + even);
        }
        return s.size();

=======

        unordered_set<string> s;
        for (auto& w : words) {
            string odd, even;
            for (int i = 0; i < w.size(); i++) {
                if (i % 2 == 0) even += w[i];
                else odd += w[i];
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            s.insert(odd+even);
        }
        return s.size();

=======

        unordered_set<string> set;
        for (string word : words) {
            string odd = "";
            string even = "";
            for (int i = 0; i < word.length(); i++) {
                if (i % 2 == 0) {
                    even += word[i];
                } else {
                    odd += word[i];
                }
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            set.insert(odd + even);
        }
        return set.size();

=======

        unordered_set<string> s;
        for (string w : words) {
            string odd, even;
            for (int i = 0; i < w.size(); ++i) {
                if (i & 1) odd += w[i];
                else even += w[i];
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            s.insert(odd + even);
        }
        return s.size();

=======

        set<pair<string, string>> s;
        for (string word : words) {
            pair<string, string> p;
            for (int i = 0; i < word.size(); ++i) {
                if (i % 2 == 0) p.first += word[i];
                else p.second += word[i];
            }
            sort(p.first.begin(), p.first.end());
            sort(p.second.begin(), p.second.end());
            s.insert(p);
        }
        return s.size();

=======

        unordered_set<string> set;
        for (string& word: words) {
            string even, odd;
            for (int i = 0; i < word.size(); i++) {
                if (i % 2 == 0) {
                    even += word[i];
                } else {
                    odd += word[i];
                }
            }
            sort(even.begin(), even.end());
            sort(odd.begin(), odd.end());
            set.insert(even + odd);
        }
        return set.size();

=======

        unordered_set<string> groups;
        for (auto &word: words) {
            string odd, even;
            for (int i = 0; i < word.size(); i++) {
                if (i % 2 == 0) {
                    even.push_back(word[i]);
                } else {
                    odd.push_back(word[i]);
                }
            }
            sort(odd.begin(), odd.end());
            sort(even.begin(), even.end());
            groups.insert(odd + even);
        }
        return groups.size();

=======

        unordered_set<string> res;
        for(auto& word: words)
        {
            int odd[26] = {0};
            int even[26] = {0};
            for(int i = 0; i < word.size(); i++)
            {
                if(i % 2 == 0)
                    even[word[i] - 'a']++;
                else
                    odd[word[i] - 'a']++;
            }
            res.insert(string(even, even + 26) + string(odd, odd + 26));
        }
        return res.size();
