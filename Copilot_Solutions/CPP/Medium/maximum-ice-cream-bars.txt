Synthesizing 10/10 solutions

=======

        int count[100001] = {0};
        for (int i = 0; i < costs.size(); i++) {
            count[costs[i]]++;
        }
        int ans = 0;
        for (int i = 1; i <= 100000; i++) {
            if (coins >= i) {
                int c = min(count[i], coins / i);
                ans += c;
                coins -= c * i;
            } else {
                break;
            }
        }
        return ans;

=======

        int n = costs.size();
        vector<int> count(100001, 0);
        for (int i = 0; i < n; i++) {
            count[costs[i]]++;
        }
        int ans = 0;
        for (int i = 1; i <= 100000; i++) {
            if (count[i] > 0) {
                if (i > coins) {
                    break;
                }
                if (count[i] <= coins / i) {
                    ans += count[i];
                    coins -= count[i] * i;
                } else {
                    ans += coins / i;
                    coins = 0;
                    break;
                }
            }
        }
        return ans;

=======

        int count[100001] = {0};
        int result = 0;
        for (int i = 0; i < costs.size(); i++) {
            count[costs[i]]++;
        }
        for (int i = 1; i <= 100000; i++) {
            if (coins >= i) {
                if (count[i] > 0) {
                    if (coins >= i * count[i]) {
                        coins -= i * count[i];
                        result += count[i];
                    } else {
                        result += coins / i;
                        coins = 0;
                    }
                }
            } else {
                break;
            }
        }
        return result;

=======

        int n = costs.size();
        vector<int> count(100001, 0);
        for (int i=0; i<n; i++) {
            count[costs[i]]++;
        }
        int ans = 0;
        for (int i=1; i<=100000; i++) {
            if (count[i] == 0) continue;
            if (coins >= i * count[i]) {
                ans += count[i];
                coins -= i * count[i];
            } else {
                ans += coins / i;
                break;
            }
        }
        return ans;

=======

        int n = costs.size();
        int cnt[100001] = {0};
        for (int i = 0; i < n; ++i) {
            ++cnt[costs[i]];
        }
        int res = 0;
        for (int i = 1; i <= 100000; ++i) {
            if (cnt[i] > 0) {
                if (coins >= i) {
                    int k = min(cnt[i], coins / i);
                    res += k;
                    coins -= k * i;
                }
            }
        }
        return res;

=======

        int n = costs.size();
        int count[100001] = {0};
        for(int i=0; i<n; i++){
            count[costs[i]]++;
        }
        int ans = 0;
        for(int i=1; i<=100000; i++){
            if(count[i] > 0){
                if(coins >= count[i]*i){
                    ans += count[i];
                    coins -= count[i]*i;
                }else{
                    ans += coins/i;
                    break;
                }
            }
        }
        return ans;

=======

        int n = costs.size();
        vector<int> cnt(100001);
        for (int x: costs) ++cnt[x];
        int ans = 0;
        for (int i = 1; i <= 100000; ++i) {
            if (coins >= i * cnt[i]) {
                ans += cnt[i];
                coins -= (i * cnt[i]);
            } else {
                ans += coins / i;
                break;
            }
        }
        return ans;

=======

        int bucket[costs.size()+1] = {0};
        for (int i = 0; i < costs.size(); ++i) {
            ++bucket[costs[i]];
        }
        int ans = 0;
        for (int i = 0; i < costs.size()+1; ++i) {
            if (bucket[i] == 0) continue;
            if (coins >= i) {
                int tmp = min(bucket[i], coins/i);
                ans += tmp;
                coins -= tmp*i;
            } else {
                break;
            }
        }
        return ans;

=======

        int count = 0;
        int n = costs.size();
        int max = 0;
        for(int i = 0; i < n; i++) {
            if(costs[i] > max) max = costs[i];
        }
        vector<int> cnt(max + 1, 0);
        for(int i = 0; i < n; i++) {
            cnt[costs[i]]++;
        }
        for(int i = 1; i <= max; i++) {
            if(coins >= i) {
                int k = min(cnt[i], coins / i);
                count += k;
                coins -= k * i;
            }
        }
        return count;

=======

        int max = 0;
        int c[100001] = {0};
        for (auto cost : costs) {
            c[cost]++;
        }
        for (int i = 1; i < 100001; i++) {
            if (c[i]) {
                if (coins >= i) {
                    int n = coins / i;
                    if (n >= c[i]) {
                        max += c[i];
                        coins -= c[i] * i;
                    } else {
                        max += n;
                        coins -= n * i;
                    }
                } else {
                    break;
                }
            }
        }
        return max;
