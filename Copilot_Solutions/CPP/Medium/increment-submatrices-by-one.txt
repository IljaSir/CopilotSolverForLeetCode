Synthesizing 10/10 solutions

=======

        vector<vector<int>> res(n, vector<int>(n, 0));
        for (auto& q : queries) {
            res[q[0]][q[1]]++;
            if (q[2] + 1 < n) res[q[2] + 1][q[1]]--;
            if (q[3] + 1 < n) res[q[0]][q[3] + 1]--;
            if (q[2] + 1 < n && q[3] + 1 < n) res[q[2] + 1][q[3] + 1]++;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i > 0) res[i][j] += res[i - 1][j];
                if (j > 0) res[i][j] += res[i][j - 1];
                if (i > 0 && j > 0) res[i][j] -= res[i - 1][j - 1];
            }
        }
        return res;

=======

        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto& q : queries) {
            for (int i = q[0]; i <= q[2]; ++i) {
                for (int j = q[1]; j <= q[3]; ++j) {
                    ++mat[i][j];
                }
            }
        }
        return mat;

=======

        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto& q : queries) {
            mat[q[0]][q[1]] += 1;
            if (q[2] + 1 < n) mat[q[2] + 1][q[1]] -= 1;
            if (q[3] + 1 < n) mat[q[0]][q[3] + 1] -= 1;
            if (q[2] + 1 < n && q[3] + 1 < n) mat[q[2] + 1][q[3] + 1] += 1;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j < n; ++j) mat[i][j] += mat[i][j - 1];
        }
        for (int j = 0; j < n; ++j) {
            for (int i = 1; i < n; ++i) mat[i][j] += mat[i - 1][j];
        }
        return mat;

=======

        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto &q : queries) {
            for (int i = q[0]; i <= q[2]; ++i) {
                for (int j = q[1]; j <= q[3]; ++j) {
                    mat[i][j] += 1;
                }
            }
        }
        return mat;

=======

        vector<vector<int>> res(n, vector<int>(n, 0));
        for (auto& q : queries) {
            int x1 = q[0], y1 = q[1], x2 = q[2], y2 = q[3];
            for (int i = x1; i <= x2; i++) {
                for (int j = y1; j <= y2; j++) {
                    res[i][j]++;
                }
            }
        }
        return res;

=======

        vector<vector<int>> result(n, vector<int>(n, 0));
        for (auto query : queries) {
            int row1 = query[0], col1 = query[1], row2 = query[2], col2 = query[3];
            for (int i = row1; i <= row2; i++) {
                for (int j = col1; j <= col2; j++) {
                    result[i][j] += 1;
                }
            }
        }
        return result;

=======

        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto& query : queries) {
            for (int row = query[0]; row <= query[2]; ++row) {
                for (int col = query[1]; col <= query[3]; ++col) {
                    ++mat[row][col];
                }
            }
        }
        return mat;

=======

        vector<vector<int>> mat(n, vector<int>(n));
        for (int i = 0; i < queries.size(); ++i) {
            int r1 = queries[i][0];
            int c1 = queries[i][1];
            int r2 = queries[i][2];
            int c2 = queries[i][3];
            mat[r1][c1] += 1;
            if (r2 + 1 < n) {
                mat[r2 + 1][c1] -= 1;
            }
            if (c2 + 1 < n) {
                mat[r1][c2 + 1] -= 1;
            }
            if (r2 + 1 < n && c2 + 1 < n) {
                mat[r2 + 1][c2 + 1] += 1;
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i > 0) {
                    mat[i][j] += mat[i - 1][j];
                }
                if (j > 0) {
                    mat[i][j] += mat[i][j - 1];
                }
                if (i > 0 && j > 0) {
                    mat[i][j] -= mat[i - 1][j - 1];
                }
            }
        }
        return mat;

=======

        vector<vector<int>> res(n, vector<int>(n, 0));
        for (auto& q: queries) {
            res[q[0]][q[1]]++;
            res[q[0]][q[3]+1]--;
            res[q[2]+1][q[1]]--;
            res[q[2]+1][q[3]+1]++;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j++) {
                res[i][j] += res[i][j-1];
            }
        }
        for (int j = 0; j < n; j++) {
            for (int i = 1; i < n; i++) {
                res[i][j] += res[i-1][j];
            }
        }
        return res;

=======

        vector<vector<int>> mat(n, vector<int>(n, 0));
        for (auto& query: queries)
        {
            int row1 = query[0];
            int col1 = query[1];
            int row2 = query[2];
            int col2 = query[3];
            for (int i = row1; i <= row2; ++i)
            {
                for (int j = col1; j <= col2; ++j)
                {
                    ++mat[i][j];
                }
            }
        }
        return mat;
