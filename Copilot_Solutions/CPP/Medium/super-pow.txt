Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (b.empty()) return 1;
        int last = b.back();
        b.pop_back();
        return powmod(superPow(a, b), 10) * powmod(a, last) % 1337;
    }
    int powmod(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res = (res * a) % 1337;
        }
        return res;

=======

        if (b.empty()) return 1;
        int last_digit = b.back();
        b.pop_back();
        return powmod(superPow(a, b), 10) * powmod(a, last_digit) % 1337;
    }
    int powmod(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res = res * a % 1337;
        }
        return res;

=======

        if (b.empty()) return 1;
        int last = b.back();
        b.pop_back();
        return powMod(superPow(a, b), 10) * powMod(a, last) % 1337;

=======

        int n = b.size();
        if (n == 0) return 1;
        int last = b[n - 1];
        b.pop_back();
        return powmod(superPow(a, b), 10) * powmod(a, last) % 1337;
    }
    int powmod(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res *= a;
            res %= 1337;
        }
        return res;

=======

        int power = 0;
        for(int i = 0; i < b.size(); ++i){
            power = (power * 10 + b[i]) % 1140;
        }
        if(power == 0) power += 1440;
        return fastPow(a, power, 1337);

=======

        int len = b.size();
        if (len == 0) return 1;
        int last = b[len - 1];
        b.pop_back();
        int part1 = pow(a, last);
        int part2 = pow(superPow(a, b), 10);
        return (part1 * part2) % 1337;
    }
    
    int pow(int a, int k) {
        a %= 1337;
        int res = 1;
        for (int i = 0; i < k; i++) {
            res *= a;
            res %= 1337;
        }
        return res;
