Synthesizing 10/10 solutions

=======

        int ans = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                for (int k = j+1; k < nums2.size(); k++) {
                    if (nums1[i] == sqrt(nums2[j]*nums2[k])) {
                        ans++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            for (int j = 0; j < nums1.size(); j++) {
                for (int k = j+1; k < nums1.size(); k++) {
                    if (nums2[i] == sqrt(nums1[j]*nums1[k])) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = 0; j < nums2.size(); ++j) {
                for (int k = j + 1; k < nums2.size(); ++k) {
                    if (nums1[i] * nums1[i] == nums2[j] * nums2[k]) {
                        count++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.size(); ++i) {
            for (int j = 0; j < nums1.size(); ++j) {
                for (int k = j + 1; k < nums1.size(); ++k) {
                    if (nums2[i] * nums2[i] == nums1[j] * nums1[k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int res = 0;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = 0; j < nums1.size(); j++) {
                for (int k = 0; k < nums2.size(); k++) {
                    if (nums1[i] * nums1[j] == nums2[k] * nums2[k] && i != j) {
                        res++;
                    }
                }
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            for (int j = 0; j < nums2.size(); j++) {
                for (int k = 0; k < nums1.size(); k++) {
                    if (nums2[i] * nums2[j] == nums1[k] * nums1[k] && i != j) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int res = 0;
        for (int i = 0; i < n1; i++) {
            for (int j = 0; j < n2; j++) {
                for (int k = j + 1; k < n2; k++) {
                    if (nums1[i] * nums1[i] == nums2[j] * nums2[k]) {
                        res++;
                    }
                }
            }
        }
        for (int i = 0; i < n2; i++) {
            for (int j = 0; j < n1; j++) {
                for (int k = j + 1; k < n1; k++) {
                    if (nums2[i] * nums2[i] == nums1[j] * nums1[k]) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        return solve(nums1, nums2) + solve(nums2, nums1);
    }
    
    int solve(vector<int>& nums1, vector<int>& nums2) {
        int ans = 0;
        unordered_map<long long, int> mp;
        for (auto& x: nums2) {
            mp[x * x]++;
        }
        for (int i = 0; i < nums1.size(); ++i) {
            for (int j = i + 1; j < nums1.size(); ++j) {
                ans += mp[nums1[i] * 1ll * nums1[j]];
            }
        }
        return ans;

=======

        int res = 0;
        unordered_map<long long, int> m1, m2;
        for (int i = 0; i < nums1.size(); i++) {
            for (int j = i + 1; j < nums1.size(); j++) {
                m1[1LL * nums1[i] * nums1[j]]++;
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            for (int j = i + 1; j < nums2.size(); j++) {
                m2[1LL * nums2[i] * nums2[j]]++;
            }
        }
        for (int i = 0; i < nums1.size(); i++) {
            if (m2.count(1LL * nums1[i] * nums1[i])) {
                res += m2[1LL * nums1[i] * nums1[i]];
            }
        }
        for (int i = 0; i < nums2.size(); i++) {
            if (m1.count(1LL * nums2[i] * nums2[i])) {
                res += m1[1LL * nums2[i] * nums2[i]];
            }
        }
        return res;

=======

        int n1 = nums1.size();
        int n2 = nums2.size();
        int ans = 0;
        for(int i = 0; i < n1; i++) {
            for(int j = 0; j < n2; j++) {
                for(int k = j + 1; k < n2; k++) {
                    long long p = (long long)nums1[i] * nums1[i];
                    long long q = (long long)nums2[j] * nums2[k];
                    if(p == q) {
                        ans++;
                    }
                }
            }
        }
        for(int i = 0; i < n2; i++) {
            for(int j = 0; j < n1; j++) {
                for(int k = j + 1; k < n1; k++) {
                    long long p = (long long)nums2[i] * nums2[i];
                    long long q = (long long)nums1[j] * nums1[k];
                    if(p == q) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n1 = nums1.size(), n2 = nums2.size();
        int ans = 0;
        unordered_map<long long, int> mp1, mp2;
        for (int i = 0; i < n1; i++) {
            for (int j = i + 1; j < n1; j++) {
                mp1[1LL * nums1[i] * nums1[j]]++;
            }
        }
        for (int i = 0; i < n2; i++) {
            for (int j = i + 1; j < n2; j++) {
                mp2[1LL * nums2[i] * nums2[j]]++;
            }
        }
        for (int i = 0; i < n1; i++) {
            long long x = 1LL * nums1[i] * nums1[i];
            if (mp2.count(x)) {
                ans += mp2[x];
            }
        }
        for (int i = 0; i < n2; i++) {
            long long x = 1LL * nums2[i] * nums2[i];
            if (mp1.count(x)) {
                ans += mp1[x];
            }
        }
        return ans;

=======

        int n1 = nums1.size(), n2 = nums2.size();
        int ans = 0;
        for(int i = 0; i < n1; i++){
            for(int j = i+1; j < n1; j++){
                long long prod = (long long)nums1[i]*(long long)nums1[j];
                for(int k = 0; k < n2; k++){
                    if(prod == (long long)nums2[k]*(long long)nums2[k]){
                        ans++;
                    }
                }
            }
        }
        for(int i = 0; i < n2; i++){
            for(int j = i+1; j < n2; j++){
                long long prod = (long long)nums2[i]*(long long)nums2[j];
                for(int k = 0; k < n1; k++){
                    if(prod == (long long)nums1[k]*(long long)nums1[k]){
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int res = 0;
        // type1
        for (int i = 0; i < nums1.size(); ++i) {
            long long num = (long long)nums1[i] * nums1[i];
            for (int j = 0; j < nums2.size(); ++j) {
                for (int k = j + 1; k < nums2.size(); ++k) {
                    if ((long long)nums2[j] * nums2[k] == num) {
                        res++;
                    }
                }
            }
        }
        // type2
        for (int i = 0; i < nums2.size(); ++i) {
            long long num = (long long)nums2[i] * nums2[i];
            for (int j = 0; j < nums1.size(); ++j) {
                for (int k = j + 1; k < nums1.size(); ++k) {
                    if ((long long)nums1[j] * nums1[k] == num) {
                        res++;
                    }
                }
            }
        }
        return res;
