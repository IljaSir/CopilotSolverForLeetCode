Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int l = 0, r = 0;
        int ans = 0;
        int cnt = 0;
        while (r < n) {
            if (nums[r] == 0) cnt++;
            while (cnt > 1) {
                if (nums[l] == 0) cnt--;
                l++;
            }
            ans = max(ans, r - l);
            r++;
        }
        return ans;

=======

        int n = nums.size();
        int i = 0, j = 0;
        int k = 1;
        int res = 0;
        while (j < n) {
            if (nums[j] == 0) k--;
            while (k < 0) {
                if (nums[i] == 0) k++;
                i++;
            }
            res = max(res, j - i);
            j++;
        }
        return res;

=======

        int n = nums.size();
        int left = 0, right = 0, zero = 0;
        int res = 0;
        while (right < n) {
            if (nums[right] == 0) {
                zero++;
            }
            while (zero > 1) {
                if (nums[left] == 0) {
                    zero--;
                }
                left++;
            }
            res = max(res, right - left);
            right++;
        }
        return res;

=======

        int n = nums.size();
        int l = 0, r = 0, res = 0, cnt = 0;
        while (r < n) {
            if (nums[r] == 0) cnt++;
            while (cnt > 1) {
                if (nums[l] == 0) cnt--;
                l++;
            }
            res = max(res, r - l);
            r++;
        }
        return res;

=======

        int n = nums.size();
        int l = 0;
        int r = 0;
        int k = 1;
        int maxLen = 0;
        while (r < n) {
            if (nums[r] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[l] == 0) {
                    k++;
                }
                l++;
            }
            maxLen = max(maxLen, r - l);
            r++;
        }
        return maxLen;

=======

        int n = nums.size();
        int res = 0, cnt = 0, l = 0, r = 0;
        while (r < n) {
            if (nums[r] == 1) {
                cnt++;
            }
            while (l <= r && cnt < r - l + 1) {
                if (nums[l] == 1) {
                    cnt--;
                }
                l++;
            }
            res = max(res, r - l);
            r++;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int l = 0, r = 0;
        int k = 1;
        while (r < n) {
            if (nums[r] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[l] == 0) {
                    k++;
                }
                l++;
            }
            res = max(res, r - l);
            r++;
        }
        return res;

=======

        int n = nums.size();
        int l = 0, r = 0, k = 1, ans = 0, cnt = 0;
        while (r < n) {
            if (nums[r] == 0) {
                cnt++;
            }
            while (cnt > k) {
                if (nums[l] == 0) {
                    cnt--;
                }
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans - 1;

=======

        int N = nums.size();
        int left = 0, right = 0, k = 1;
        int ans = 0;
        while (right < N) {
            if (nums[right] == 0) {
                k--;
            }
            while (k < 0) {
                if (nums[left] == 0) {
                    k++;
                }
                left++;
            }
            ans = max(ans, right - left);
            right++;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int l = 0, r = 0;
        int cnt = 0;
        while(r < n){
            if(nums[r] == 0) cnt++;
            while(cnt > 1){
                if(nums[l] == 0) cnt--;
                l++;
            }
            ans = max(ans, r-l);
            r++;
        }
        return ans;
