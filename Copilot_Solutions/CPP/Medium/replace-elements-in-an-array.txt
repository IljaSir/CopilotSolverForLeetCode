Synthesizing 4/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> res(n, 0);
        for (auto op : operations) {
            int l = op[0] - 1;
            int r = op[1] - 1;
            res[l]++;
            if (r + 1 < n) {
                res[r + 1]--;
            }
        }
        for (int i = 1; i < n; i++) {
            res[i] += res[i - 1];
        }
        return res;

=======

        int n = nums.size();
        int m = operations.size();
        vector<int> res(n);
        for (int i = 0; i < m; i++) {
            int idx = operations[i][0];
            int val = operations[i][1];
            if (idx > 0) {
                res[idx-1] -= val;
            }
            if (idx < n) {
                res[idx] += val;
            }
        }
        for (int i = 1; i < n; i++) {
            res[i] += res[i-1];
        }
        for (int i = 0; i < n; i++) {
            res[i] += nums[i];
        }
        return res;

=======

        unordered_map<int, int> m;
        for (const auto &op : operations) {
            ++m[op[0]];
            --m[op[1]];
        }
        int count = 0;
        for (auto &p : m) {
            count += p.second;
            p.second = count;
        }
        vector<int> res(nums.size());
        for (int i = 0; i < nums.size(); ++i) {
            res[i] = m[nums[i]];
        }
        return res;
