Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n % k != 0) return false;
        map<int, int> mp;
        for (int i = 0; i < n; i++) {
            mp[nums[i]]++;
        }
        for (auto it = mp.begin(); it != mp.end(); it++) {
            int cur = it->first;
            int cnt = it->second;
            if (cnt == 0) continue;
            for (int i = 0; i < k; i++) {
                if (mp[cur + i] < cnt) return false;
                mp[cur + i] -= cnt;
            }
        }
        return true;

=======

        int n = nums.size();
        if (n % k != 0) return false;
        sort(nums.begin(), nums.end());
        map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[nums[i]]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second > 0) {
                int start = it->first;
                for (int i = start; i < start + k; i++) {
                    if (m.find(i) == m.end() || m[i] < it->second) {
                        return false;
                    }
                    m[i] -= it->second;
                }
            }
        }
        return true;

=======

        if (nums.size() % k != 0) return false;
        map<int, int> m;
        for (auto n : nums) {
            m[n]++;
        }
        while (m.size() > 0) {
            int key = m.begin()->first;
            int count = m.begin()->second;
            for (int i = 0; i < k; i++) {
                if (m.find(key + i) == m.end() || m[key + i] < count) {
                    return false;
                }
                m[key + i] -= count;
                if (m[key + i] == 0) {
                    m.erase(key + i);
                }
            }
        }
        return true;

=======

        if (nums.size() % k != 0) return false;
        map<int, int> m;
        for (auto n : nums) m[n]++;
        while (!m.empty()) {
            auto it = m.begin();
            int x = it->first;
            for (int i = 0; i < k; i++) {
                if (m.find(x + i) == m.end()) return false;
                if (--m[x + i] == 0) m.erase(x + i);
            }
        }
        return true;

=======

        if (nums.size() % k != 0) return false;
        map<int, int> mp;
        for (int i : nums) mp[i]++;
        for (auto it = mp.begin(); it != mp.end(); it++) {
            if (it->second > 0) {
                for (int i = 1; i < k; i++) {
                    if (mp[it->first + i] >= it->second) {
                        mp[it->first + i] -= it->second;
                    } else {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        map<int, int> mp;
        for (int i = 0; i < nums.size(); i++) {
            mp[nums[i]]++;
        }
        while (!mp.empty()) {
            int start = mp.begin()->first;
            for (int i = 0; i < k; i++) {
                if (mp.find(start + i) == mp.end()) {
                    return false;
                }
                mp[start + i]--;
                if (mp[start + i] == 0) {
                    mp.erase(start + i);
                }
            }
        }
        return true;

=======

        if (nums.size() % k != 0) return false;
        map<int, int> m;
        for (int i : nums) m[i]++;
        while (!m.empty()) {
            int start = m.begin()->first;
            for (int i = 0; i < k; i++) {
                if (m.find(start + i) == m.end()) return false;
                if (--m[start + i] == 0) m.erase(start + i);
            }
        }
        return true;

=======

        map<int, int> m;
        for (auto x : nums) m[x]++;
        for (auto it = m.begin(); it != m.end(); it++) {
            if (it->second > 0) {
                for (int i = 1; i < k; i++) {
                    if (m.find(it->first + i) == m.end() || m[it->first + i] < it->second) return false;
                    m[it->first + i] -= it->second;
                }
            }
        }
        return true;

=======

        if(nums.size()%k!=0) return false;
        map<int,int> mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
        int count=0;
        for(auto it:mp){
            if(it.second>0){
                for(int i=0;i<k;i++){
                    if(mp.find(it.first+i)==mp.end() || mp[it.first+i]<it.second) return false;
                    mp[it.first+i]-=it.second;
                }
            }
        }
        return true;

=======

        if (nums.size() % k != 0) return false;
        map<int, int> m;
        for (auto x: nums) m[x]++;
        for (auto &x: m) {
            int y = x.second;
            if (y == 0) continue;
            for (int i = 0; i < k; i++) {
                if (m[x.first + i] < y) return false;
                m[x.first + i] -= y;
            }
        }
        return true;
