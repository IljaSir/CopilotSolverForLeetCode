Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = arr.size() - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = i + 1;
        while (j + 1 < arr.size() && arr[j + 1] < arr[i]) {
            j++;
        }
        int k = j;
        while (k + 1 < arr.size() && arr[k + 1] == arr[j]) {
            k++;
        }
        swap(arr[i], arr[k]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) i--;
        if (i < 0) return arr;
        int j = n - 1;
        while (j > i && arr[j] >= arr[i]) j--;
        int k = j;
        while (k > i && arr[k] == arr[j]) k--;
        swap(arr[i], arr[k + 1]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) i--;
        if (i < 0) return arr;
        int j = n - 1;
        while (arr[j] >= arr[i]) j--;
        while (arr[j] == arr[j - 1]) j--;
        swap(arr[i], arr[j]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) --i;
        if (i < 0) return arr;
        int j = n - 1;
        while (j > i && arr[j] >= arr[i]) --j;
        while (j > i && arr[j] == arr[j - 1]) --j;
        swap(arr[i], arr[j]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = n - 1;
        while (j > i && arr[j] >= arr[i]) {
            j--;
        }
        while (j > i && arr[j] == arr[j - 1]) {
            j--;
        }
        swap(arr[i], arr[j]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i < 0) {
            return arr;
        }
        int j = n - 1;
        while (j >= 0 && arr[j] >= arr[i]) {
            j--;
        }
        while (j > 0 && arr[j] == arr[j - 1]) {
            j--;
        }
        swap(arr[i], arr[j]);
        return arr;

=======

        int n = arr.size();
        int i = n - 2;
        while (i >= 0 && arr[i] <= arr[i + 1]) {
            i--;
        }
        if (i >= 0) {
            int j = n - 1;
            while (j >= 0 && arr[j] >= arr[i]) {
                j--;
            }
            while (j > 0 && arr[j] == arr[j - 1]) {
                j--;
            }
            swap(arr[i], arr[j]);
        }
        return arr;

=======

        int n = arr.size();
        int i = n - 1;
        while (i > 0 && arr[i - 1] <= arr[i]) {
            i--;
        }
        if (i == 0) {
            return arr;
        }
        int j = n - 1;
        while (j >= i && arr[j] >= arr[i - 1]) {
            j--;
        }
        int k = j;
        while (k >= i && arr[k] == arr[j]) {
            k--;
        }
        swap(arr[i - 1], arr[k + 1]);
        return arr;
