Synthesizing 10/10 solutions

=======

        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 6;
        if (n == 4) return 7;
        if (n % 4 == 0) return n + 1;
        if (n % 4 <= 2) return n + 2;
        return n - 1;

=======

        if (n <= 2) return n;
        if (n == 3) return 6;
        if (n == 4) return 7;
        if (n % 4 == 0) return n + 1;
        if (n % 4 <= 2) return n + 2;
        return n - 1;

=======

        int res = 0;
        switch (n % 4) {
            case 0: res = n; break;
            case 1: res = 1; break;
            case 2: res = n + 1; break;
            case 3: res = 0; break;
        }
        for (int i = n - 1; i >= 4; i -= 4) {
            res -= i * (i - 1) / (i - 2) + (i - 3);
        }
        return res;

=======

        int res = 0;
        if (n > 3) {
            res = n * (n - 1) / (n - 2) + (n - 3);
            n -= 4;
        }
        while (n > 0) {
            if (n > 2) {
                res -= n * (n - 1) / (n - 2);
                n -= 3;
            } else if (n > 1) {
                res -= n * (n - 1);
                n -= 2;
            } else {
                res -= n;
                n -= 1;
            }
        }
        return res;

=======

        int res = 0;
        int i = 0;
        while (n > 0) {
            if (i == 0) {
                res += n;
            } else if (i == 1) {
                res *= n;
            } else if (i == 2) {
                res /= n;
            } else {
                res += n;
            }
            n--;
            i++;
            if (i == 4) {
                i = 0;
            }
        }
        return res;

=======

        int res = 0;
        int flag = 0;
        while (n) {
            if (flag == 0) {
                res += n;
            } else if (flag == 1) {
                res *= n;
            } else if (flag == 2) {
                res /= n;
            } else {
                res += n;
                n -= 1;
                if (n) {
                    res -= n;
                }
            }
            n -= 1;
            flag = (flag + 1) % 4;
        }
        return res;

=======

        int result = 0;
        int temp = 0;
        int i = 0;
        while (n > 0) {
            if (i == 0) {
                temp = n;
            } else if (i == 1) {
                temp *= n;
            } else if (i == 2) {
                temp /= n;
            } else if (i == 3) {
                result += temp;
                temp = n;
            } else {
                result -= temp;
                temp = n;
            }
            n--;
            i++;
            if (i == 4) {
                i = 0;
            }
        }
        if (i == 0) {
            result += temp;
        } else if (i == 1) {
            result += temp;
        } else if (i == 2) {
            result += temp;
        } else if (i == 3) {
            result += temp;
        }
        return result;

=======

        int ret = 0;
        int tmp = n;
        n--;
        int i = 0;
        while(n > 0) {
            switch(i % 4) {
                case 0:
                    tmp *= n;
                    break;
                case 1:
                    tmp /= n;
                    break;
                case 2:
                    tmp += n;
                    break;
                case 3:
                    ret += tmp;
                    tmp = -n;
                    break;
            }
            n--;
            i++;
        }
        ret += tmp;
        return ret;

=======

        int res = 0;
        int count = 1;
        int num = n;
        while (num > 0) {
            if (count == 1) {
                res += num;
            } else if (count == 2) {
                res -= num;
            } else if (count == 3) {
                res *= num;
            } else if (count == 4) {
                res /= num;
            }
            if (count == 4) {
                count = 1;
            } else {
                count++;
            }
            num--;
        }
        if (count == 2) {
            res += 1;
        } else if (count == 3) {
            res += 2;
        } else if (count == 4) {
            res += 6;
        }
        return res;

=======

        int res = 0;
        int j = 0;
        int k = 0;
        for(int i = n; i > 0; i -= 4){
            int temp = i;
            if(i > 1){
                temp *= (i - 1);
            }
            if(i > 2){
                temp /= (i - 2);
            }
            if(i > 3){
                temp += (i - 3);
            }
            if(k % 2 == 0){
                res += temp;
            }else{
                res -= temp;
            }
            k++;
        }
        return res;
