Synthesizing 6/10 solutions

=======

        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> res(m, vector<int>(n, -1));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isWater[i][j] == 1) {
                    q.push({i, j});
                    res[i][j] = 0;
                }
            }
        }
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int x = p.first;
            int y = p.second;
            int val = res[x][y] + 1;
            if (x > 0 && res[x-1][y] == -1) {
                res[x-1][y] = val;
                q.push({x-1, y});
            }
            if (x < m-1 && res[x+1][y] == -1) {
                res[x+1][y] = val;
                q.push({x+1, y});
            }
            if (y > 0 && res[x][y-1] == -1) {
                res[x][y-1] = val;
                q.push({x, y-1});
            }
            if (y < n-1 && res[x][y+1] == -1) {
                res[x][y+1] = val;
                q.push({x, y+1});
            }
        }
        return res;

=======

        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> height(m, vector<int>(n, -1));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (isWater[i][j] == 1) {
                    height[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
        vector<pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (auto [dx, dy] : directions) {
                int nx = x + dx;
                int ny = y + dy;
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && height[nx][ny] == -1) {
                    height[nx][ny] = height[x][y] + 1;
                    q.push({nx, ny});
                }
            }
        }
        return height;

=======

        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> res(m, vector<int>(n, -1));
        queue<pair<int, int>> q;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(isWater[i][j] == 1) {
                    q.push(make_pair(i, j));
                    res[i][j] = 0;
                }
            }
        }
        int step = 0;
        while(!q.empty()) {
            int size = q.size();
            step++;
            while(size--) {
                auto p = q.front();
                q.pop();
                int x = p.first;
                int y = p.second;
                if(x > 0 && res[x - 1][y] == -1) {
                    res[x - 1][y] = step;
                    q.push(make_pair(x - 1, y));
                }
                if(x < m - 1 && res[x + 1][y] == -1) {
                    res[x + 1][y] = step;
                    q.push(make_pair(x + 1, y));
                }
                if(y > 0 && res[x][y - 1] == -1) {
                    res[x][y - 1] = step;
                    q.push(make_pair(x, y - 1));
                }
                if(y < n - 1 && res[x][y + 1] == -1) {
                    res[x][y + 1] = step;
                    q.push(make_pair(x, y + 1));
                }
            }
        }
        return res;

=======

        int m = isWater.size(), n = isWater[0].size();
        vector<vector<int>> res(m, vector<int>(n));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (isWater[i][j]) {
                    res[i][j] = 0;
                    q.push({i, j});
                }
                else res[i][j] = -1;
            }
        }
        while (!q.empty()) {
            auto p = q.front(); q.pop();
            int i = p.first, j = p.second;
            if (i && res[i - 1][j] == -1) {
                res[i - 1][j] = res[i][j] + 1;
                q.push({i - 1, j});
            }
            if (j && res[i][j - 1] == -1) {
                res[i][j - 1] = res[i][j] + 1;
                q.push({i, j - 1});
            }
            if (i < m - 1 && res[i + 1][j] == -1) {
                res[i + 1][j] = res[i][j] + 1;
                q.push({i + 1, j});
            }
            if (j < n - 1 && res[i][j + 1] == -1) {
                res[i][j + 1] = res[i][j] + 1;
                q.push({i, j + 1});
            }
        }
        return res;

=======

        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> height(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (isWater[i][j] == 1) {
                    q.push({i, j});
                    isWater[i][j] = 2;
                }
            }
        }
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int i = p.first;
            int j = p.second;
            if (i > 0 && isWater[i - 1][j] == 0) {
                height[i - 1][j] = height[i][j] + 1;
                isWater[i - 1][j] = 2;
                q.push({i - 1, j});
            }
            if (i < m - 1 && isWater[i + 1][j] == 0) {
                height[i + 1][j] = height[i][j] + 1;
                isWater[i + 1][j] = 2;
                q.push({i + 1, j});
            }
            if (j > 0 && isWater[i][j - 1] == 0) {
                height[i][j - 1] = height[i][j] + 1;
                isWater[i][j - 1] = 2;
                q.push({i, j - 1});
            }
            if (j < n - 1 && isWater[i][j + 1] == 0) {
                height[i][j + 1] = height[i][j] + 1;
                isWater[i][j + 1] = 2;
                q.push({i, j + 1});
            }
        }
        return height;

=======

        int m = isWater.size();
        int n = isWater[0].size();
        vector<vector<int>> ans(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        vector<vector<int>> d = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (isWater[i][j] == 1) {
                    ans[i][j] = 0;
                    q.push({i, j});
                } else {
                    ans[i][j] = -1;
                }
            }
        }
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int x = p.first;
            int y = p.second;
            for (int i = 0; i < 4; ++i) {
                int nx = x + d[i][0];
                int ny = y + d[i][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || ans[nx][ny] != -1) {
                    continue;
                }
                ans[nx][ny] = ans[x][y] + 1;
                q.push({nx, ny});
            }
        }
        return ans;
