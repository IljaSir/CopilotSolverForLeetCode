Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> avgs(n);
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            int count = 0;
            for (int j = i - k; j <= i + k; ++j) {
                if (j >= 0 && j < n) {
                    sum += nums[j];
                    count++;
                }
            }
            avgs[i] = count > 0 ? sum / count : -1;
        }
        return avgs;

=======

        int n = nums.size();
        vector<int> avgs(n, 0);
        vector<int> prefixSum(n, 0);
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            int left = i - k;
            int right = i + k;
            int total = 0;
            if (left < 0) {
                total = prefixSum[right];
            } else if (right >= n) {
                total = prefixSum[n - 1] - prefixSum[left - 1];
            } else {
                total = prefixSum[right] - prefixSum[left - 1];
            }
            if (right - left + 1 >= 2 * k + 1) {
                avgs[i] = total / (2 * k + 1);
            } else {
                avgs[i] = -1;
            }
        }
        return avgs;
    }
    vector<int> averageOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n, 0);
        vector<int> prefixSum(n, 0);
        prefixSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            int left = i - k;
            int right = i + k;
            int total = 0;
            if (left < 0) {
                total = prefixSum[right];
            } else if (right >= n) {
                total = prefixSum[n - 1] - prefixSum[left - 1];
            } else {
                total = prefixSum[right] - prefixSum[left - 1];
            }
            if (right - left + 1 >= 2 * k + 1) {
                avgs[i] = total / (2 * k + 1);
            } else {
                avgs[i] = -1;
            }
        }
        return avgs;

=======

        int n = nums.size();
        int sum = 0;
        vector<int> avgs(n);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i >= k) {
                sum -= nums[i - k];
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / k;
            }
        }
        return avgs;
    }
    vector<int> getAverages(vector<int>& nums, int k) {
        int n = nums.size();
        int sum = 0;
        vector<int> avgs(n);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i >= k) {
                sum -= nums[i - k];
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / k;
            }
        }
        return avgs;
    }
    vector<int> getAverages(vector<int>& nums, int k) {
        int n = nums.size();
        int sum = 0;
        vector<int> avgs(n);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i >= k) {
                sum -= nums[i - k];
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / k;
            }
        }
        return avgs;
    }
    vector<int> getAverages(vector<int>& nums, int k) {
        int n = nums.size();
        int sum = 0;
        vector<int> avgs(n);
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (i >= k) {
                sum -= nums[i - k];
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / k;
            }
        }
        return avgs;

=======

        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            count++;
            if (i >= k) {
                sum -= nums[i - k];
                count--;
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / count;
            }
        }
        return avgs;
    }
    vector<int> getAverages2(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            count++;
            if (i >= k) {
                sum -= nums[i - k];
                count--;
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = sum / count;
            }
        }
        return avgs;
    }
    vector<double> getAverages3(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> avgs(n);
        int sum = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            count++;
            if (i >= k) {
                sum -= nums[i - k];
                count--;
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = (double)sum / count;
            }
        }
        return avgs;
    }
    vector<double> getAverages4(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> avgs(n);
        int sum = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            count++;
            if (i >= k) {
                sum -= nums[i - k];
                count--;
            }
            if (i >= k - 1) {
                avgs[i - k + 1] = ((double)sum) / count;
            }
        }

=======

        int n = nums.size();
        vector<int> avgs(n, 0);
        int sum = 0, cnt = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            cnt++;
            if (i >= k) {
                sum -= nums[i-k];
                cnt--;
            }
            if (i >= k-1) {
                avgs[i] = sum / cnt;
            }
        }
        return avgs;
    }
    vector<int> kAverage(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n, -1);
        if (k == 0) {
            for (int i = 0; i < n; i++) {
                avgs[i] = nums[i];
            }
            return avgs;
        }
        if (k == n) {
            int sum = 0;
            for (int i = 0; i < n; i++) {
                sum += nums[i];
            }
            avgs[0] = sum / n;
            return avgs;
        }
        vector<int> left = getAverages(nums, k);
        reverse(nums.begin(), nums.end());
        vector<int> right = getAverages(nums, k);
        reverse(right.begin(), right.end());
        for (int i = 0; i < n; i++) {
            if (left[i] == -1 || right[i] == -1) {
                continue;
            }
            avgs[i] = (left[i] + right[i]) / 2;
        }
        return avgs;

=======

        vector<int> avgs(nums.size());
        int sum = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i > k) {
                sum -= nums[i - k - 1];
                count--;
            }
            if (i + k < nums.size()) {
                sum += nums[i + k];
                count++;
            }
            if (count > 0) {
                avgs[i] = sum / count;
            } else {
                avgs[i] = -1;
            }
        }
        return avgs;
    }
    vector<int> getAverages2(vector<int>& nums, int k) {
        vector<int> avgs(nums.size());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i > k) {
                sum -= nums[i - k - 1];
            }
            if (i + k < nums.size()) {
                sum += nums[i + k];
            }
            if (i >= k) {
                avgs[i - k] = sum / (2 * k + 1);
            }
        }
        return avgs;
    }
    vector<int> getAverages3(vector<int>& nums, int k) {
        vector<int> avgs(nums.size());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i > k) {
                sum -= nums[i - k - 1];
            }
            if (i + k < nums.size()) {
                sum += nums[i + k];
            }
            if (i >= k) {
                avgs[i - k] = sum / (2 * k + 1);
            }
        }
        return avgs;
    }
    vector<int> getAverages4(vector<int>& nums, int k) {
        vector<int> avgs(nums.size());
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (i > k) {
                sum -= nums[i - k - 1];
            }
            if (i + k < nums.size()) {
                sum += nums[i + k];
            }
            if (i >= k) {
                avgs[i - k] = sum /

=======

        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int i = 0;
        for (; i < k; ++i) {
            sum += nums[i];
        }
        for (int j = 0; j < n; ++j) {
            avgs[j] = sum / (i - j);
            if (i < n) {
                sum += nums[i];
            }
            ++i;
        }
        return avgs;
    }
    vector<int> getAverages2(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int i = 0;
        for (; i < k; ++i) {
            sum += nums[i];
        }
        for (int j = 0; j < n; ++j) {
            avgs[j] = sum / (i - j);
            if (i < n) {
                sum += nums[i];
            }
            ++i;
        }
        return avgs;
    }
    vector<int> getAverages3(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int i = 0;
        for (; i < k; ++i) {
            sum += nums[i];
        }
        for (int j = 0; j < n; ++j) {
            avgs[j] = sum / (i - j);
            if (i < n) {
                sum += nums[i];
            }
            ++i;
        }
        return avgs;
    }
    vector<int> getAverages4(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs(n);
        int sum = 0;
        int i = 0;
        for (; i < k; ++i) {
            sum += nums[i];
        }
        for (int j = 0; j < n; ++j) {
            avgs[j] = sum / (i - j);
            if (i < n) {
                sum += nums[i];
            }
            ++i;
        }
        return avgs;

=======

        vector<int> avgs;
        int n = nums.size();
        int sum = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (i < k) {
                sum += nums[i];
                count++;
            } else {
                avgs.push_back(sum / count);
                sum -= nums[i - k];
                sum += nums[i];
            }
        }
        avgs.push_back(sum / count);
        return avgs;
    }
    vector<int> kRadiusAverages(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> avgs = getAverages(nums, k);
        for (int i = 0; i < n; i++) {
            if (i < k) {
                avgs[i] = -1;
            } else if (i + k >= n) {
                avgs[i] = -1;
            }
        }
        return avgs;

=======

        int n = nums.size();
        vector<int> avgs(n, 0);
        int sum = 0;
        int start = 0;
        int end = 0;
        while (start < n) {
            while (end < n && end - start < k) {
                sum += nums[end];
                end++;
            }
            if (end - start == k) {
                avgs[start] = sum / k;
            }
            sum -= nums[start];
            start++;
        }
        return avgs;
    }
    vector<double> averageOfSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> avgs(n, 0);
        int sum = 0;
        int start = 0;
        int end = 0;
        while (start < n) {
            while (end < n && end - start < k) {
                sum += nums[end];
                end++;
            }
            if (end - start == k) {
                avgs[start] = (double)sum / k;
            }
            sum -= nums[start];
            start++;
        }
        return avgs;
    }
    vector<double> averageOfSubarrays2(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> avgs(n, 0);
        int sum = 0;
        int start = 0;
        int end = 0;
        while (end < n) {
            sum += nums[end];
            end++;
            if (end - start == k) {
                avgs[start] = (double)sum / k;
                sum -= nums[start];
                start++;
            }
        }
        return avgs;
    }
    vector<double> averageOfSubarrays3(vector<int>& nums, int k) {
        int n = nums.size();
        vector<double> avgs(n, 0);
        int sum = 0;
        int start = 0;
        int end = 0;
        while (end < n) {
            sum += nums[end];
            end++;
            if (end - start == k) {
                avgs[start] = (double)sum / k;
                sum -= nums[start];
                start++;
            }
        }
        return avgs;

=======

        vector<int> avgs;
        int n = nums.size();
        int sum = 0;
        int i = 0;
        for(; i < n; i++) {
            if(i <= k) {
                sum += nums[i];
                if(i == k) {
                    avgs.push_back(sum / (k + 1));
                }
            }
            else {
                sum += nums[i];
                sum -= nums[i - k - 1];
                avgs.push_back(sum / (k + 1));
            }
        }
        for(; i < n + k; i++) {
            sum -= nums[i - k - 1];
            avgs.push_back(sum / (k + 1));
        }
        for(int i = 0; i < k; i++) {
            avgs[i] = -1;
            avgs[avgs.size() - i - 1] = -1;
        }
        return avgs;
