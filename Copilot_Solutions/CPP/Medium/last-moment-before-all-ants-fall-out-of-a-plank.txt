Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < left.size(); ++i) {
            res = max(res, left[i]);
        }
        for (int i = 0; i < right.size(); ++i) {
            res = max(res, n - right[i]);
        }
        return res;

=======

        int maxLeft = 0;
        int maxRight = 0;
        for (int i = 0; i < left.size(); i++) {
            maxLeft = max(maxLeft, left[i]);
        }
        for (int i = 0; i < right.size(); i++) {
            maxRight = max(maxRight, n - right[i]);
        }
        return max(maxLeft, maxRight);

=======

        int mx = 0;
        for (int i = 0; i < left.size(); i++) {
            mx = max(mx, left[i]);
        }
        for (int i = 0; i < right.size(); i++) {
            mx = max(mx, n - right[i]);
        }
        return mx;

=======

        int l = 0;
        int r = 0;
        for (int i = 0; i < left.size(); i++) {
            l = max(l, left[i]);
        }
        for (int i = 0; i < right.size(); i++) {
            r = max(r, n - right[i]);
        }
        return max(l, r);

=======

        int l = 0, r = 0;
        for (auto x : left) {
            l = max(l, x);
        }
        for (auto x : right) {
            r = max(r, n - x);
        }
        return max(l, r);

=======

        int max = 0;
        for (auto i : left) {
            if (i > max) max = i;
        }
        for (auto i : right) {
            if (n - i > max) max = n - i;
        }
        return max;

=======

        int l = 0;
        for(int i = 0; i < left.size(); i++) {
            l = max(l, left[i]);
        }
        int r = 0;
        for(int i = 0; i < right.size(); i++) {
            r = max(r, n - right[i]);
        }
        return max(l, r);

=======

        int maxLeft = 0;
        for (int i=0; i<left.size(); i++) {
            maxLeft = max(maxLeft, left[i]);
        }
        int maxRight = 0;
        for (int i=0; i<right.size(); i++) {
            maxRight = max(maxRight, n-right[i]);
        }
        return max(maxLeft, maxRight);

=======

        int maxLeft = 0, maxRight = 0;
        for(int i=0;i<left.size();i++)
            maxLeft = max(maxLeft, left[i]);
        for(int i=0;i<right.size();i++)
            maxRight = max(maxRight, n-right[i]);
        return max(maxLeft, maxRight);

=======

        int max_left = 0;
        int max_right = 0;
        int i = 0;
        for (i = 0; i < left.size(); i++) {
            max_left = max(max_left, left[i]);
        }
        for (i = 0; i < right.size(); i++) {
            max_right = max(max_right, n - right[i]);
        }
        return max(max_left, max_right);
