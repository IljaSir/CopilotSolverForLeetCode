Synthesizing 10/10 solutions

=======

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int n = apples.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (apples[i] > 0) pq.push({i + days[i], apples[i]});
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                res++;
                pq.top().second--;
            }
        }
        int i = n;
        while (!pq.empty()) {
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                res++;
                pq.top().second--;
            }
            i++;
        }
        return res;

=======

        int n = apples.size();
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int res = 0;
        for (int i = 0; i < n || !pq.empty(); ++i) {
            if (i < n && apples[i] > 0) { pq.push({i + days[i], apples[i]}); }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) { pq.pop(); }
            if (!pq.empty()) {
                ++res;
                --pq.top().second;
            }
        }
        return res;

=======

        int n = apples.size();
        int ans = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                pq.push({i + days[i], apples[i]});
            }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans++;
                pq.top().second--;
            }
        }
        for (int i = n; !pq.empty(); i++) {
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans++;
                pq.top().second--;
            }
        }
        return ans;

=======

        int n = apples.size();
        int ans = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                pq.push({i + days[i], apples[i]});
            }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans++;
                pq.top().second--;
            }
        }
        int i = n;
        while (!pq.empty()) {
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans++;
                pq.top().second--;
            }
            i++;
        }
        return ans;

=======

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        int n = apples.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                q.push({i + days[i], apples[i]});
            }
            while (!q.empty() && q.top().first <= i) {
                q.pop();
            }
            if (!q.empty()) {
                ans++;
                if (--q.top().second == 0) {
                    q.pop();
                }
            }
        }
        int day = n;
        while (!q.empty()) {
            auto [d, a] = q.top(); q.pop();
            ans += min(d - day, a);
            day = d;
        }
        return ans;

=======

        int n = apples.size();
        int res = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        for (int i = 0; i < n; ++i) {
            if (apples[i] > 0) {
                pq.push({i + days[i], apples[i]});
            }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                res++;
                pq.top().second--;
            }
        }
        int i = n;
        while (!pq.empty()) {
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                res++;
                pq.top().second--;
            }
            i++;
        }
        return res;

=======

        int n = apples.size();
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
        int ans = 0;
        for (int i = 0; i < n || !q.empty(); ++i) {
            if (i < n && apples[i] > 0) {
                q.emplace(i + days[i], apples[i]);
            }
            while (!q.empty() && (q.top().first <= i || q.top().second == 0)) {
                q.pop();
            }
            if (!q.empty()) {
                --q.top().second;
                ++ans;
            }
        }
        return ans;

=======

        int n = apples.size();
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int i = 0, ans = 0;
        while (i < n || !pq.empty()) {
            if (i < n && apples[i] > 0) {
                pq.push({i + days[i], apples[i]});
            }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                ans++;
                pq.top().second--;
            }
            i++;
        }
        return ans;

=======

        int n = apples.size();
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        int res = 0, i = 0;
        while (i < n || !pq.empty()) {
            if (i < n && apples[i]) {
                pq.push({i + days[i], apples[i]});
            }
            while (!pq.empty() && (pq.top().first <= i || pq.top().second == 0)) {
                pq.pop();
            }
            if (!pq.empty()) {
                res++;
                pq.top().second--;
            }
            i++;
        }
        return res;

=======

        map<int, int> mp;
        int res = 0;
        int n = apples.size();
        for (int i = 0; i < n; i++) {
            if (apples[i] > 0) {
                mp[i + days[i]] += apples[i];
            }
            if (mp.size() > 0) {
                auto it = mp.begin();
                it->second--;
                if (it->second == 0) {
                    mp.erase(it);
                }
                res++;
            }
        }
        int i = n;
        while (mp.size() > 0) {
            auto it = mp.begin();
            if (it->first <= i) {
                mp.erase(it);
                continue;
            }
            int cnt = min(it->second, it->first - i);
            res += cnt;
            it->second -= cnt;
            i += cnt;
        }
        return res;
