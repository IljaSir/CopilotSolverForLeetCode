Synthesizing 10/10 solutions

=======

        int res = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int sum = 0;
            for (int j = i; j < nums.size(); ++j) {
                sum += nums[j];
                if (sum == k) {
                    ++res;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = i; j < n; ++j) {
                sum += nums[j];
                if (sum == k) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = i; j < n; ++j) {
                sum += nums[j];
                if (sum == k) {
                    ++ans;
                }
            }
        }
        return ans;

=======

        unordered_map<int, int> m;
        m[0] = 1;
        int sum = 0, ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (m.count(sum - k)) ans += m[sum - k];
            m[sum]++;
        }
        return ans;

=======

        unordered_map<int, int> mp;
        mp[0] = 1;
        int sum = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (mp.count(sum - k)) {
                count += mp[sum - k];
            }
            mp[sum]++;
        }
        return count;

=======

        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = 1;
        int ans = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            ans += mp[sum - k];
            mp[sum]++;
        }
        return ans;

=======

        unordered_map<int, int> map;
        int sum = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum == k) {
                count++;
            }
            if (map.find(sum - k) != map.end()) {
                count += map[sum - k];
            }
            if (map.find(sum) == map.end()) {
                map[sum] = 1;
            } else {
                map[sum]++;
            }
        }
        return count;

=======

        unordered_map<int, int> m;
        int sum = 0;
        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum == k) {
                res++;
            }
            if (m.find(sum - k) != m.end()) {
                res += m[sum - k];
            }
            m[sum]++;
        }
        return res;

=======

        unordered_map<int, int> preSum;
        preSum[0] = 1;
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            ans += preSum[sum - k];
            preSum[sum]++;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int sum = 0;
        unordered_map<int, int> mp;
        mp[0] = 1;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            if (mp.count(sum - k)) {
                ans += mp[sum - k];
            }
            mp[sum]++;
        }
        return ans;
