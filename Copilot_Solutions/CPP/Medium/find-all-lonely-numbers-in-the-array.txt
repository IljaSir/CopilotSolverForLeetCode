Synthesizing 10/10 solutions

=======

        vector<int> lonely;
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0) {
                if (nums[i] != nums[i + 1]) {
                    lonely.push_back(nums[i]);
                }
            } else if (i == nums.size() - 1) {
                if (nums[i - 1] != nums[i]) {
                    lonely.push_back(nums[i]);
                }
            } else {
                if (nums[i - 1] != nums[i] && nums[i] != nums[i + 1]) {
                    lonely.push_back(nums[i]);
                }
            }
        }
        return lonely;

=======

        vector<int> res;
        int n = nums.size();
        if (n == 1) {
            res.push_back(nums[0]);
            return res;
        }
        if (nums[0] != nums[1]) {
            res.push_back(nums[0]);
        }
        for (int i = 1; i < n - 1; i++) {
            if (nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                res.push_back(nums[i]);
            }
        }
        if (nums[n - 1] != nums[n - 2]) {
            res.push_back(nums[n - 1]);
        }
        return res;

=======

        vector<int> lonely;
        for (int i = 0; i < nums.size(); i++) {
            if (i == 0 && nums[i] != nums[i+1]) {
                lonely.push_back(nums[i]);
            } else if (i == nums.size()-1 && nums[i] != nums[i-1]) {
                lonely.push_back(nums[i]);
            } else if (nums[i] != nums[i-1] && nums[i] != nums[i+1]) {
                lonely.push_back(nums[i]);
            }
        }
        return lonely;

=======

        vector<int> lonely;
        for(int i = 0; i < nums.size(); i++) {
            if(i == 0) {
                if(nums[i] != nums[i+1]) {
                    lonely.push_back(nums[i]);
                }
            } else if(i == nums.size() - 1) {
                if(nums[i] != nums[i-1]) {
                    lonely.push_back(nums[i]);
                }
            } else {
                if(nums[i] != nums[i-1] && nums[i] != nums[i+1]) {
                    lonely.push_back(nums[i]);
                }
            }
        }
        return lonely;

=======

        vector<int> res;
        for(int i = 0; i < nums.size(); ++i) {
            if(i == 0) {
                if(nums[i] != nums[i+1]) {
                    res.push_back(nums[i]);
                }
            } else if(i == nums.size()-1) {
                if(nums[i] != nums[i-1]) {
                    res.push_back(nums[i]);
                }
            } else {
                if(nums[i] != nums[i-1] && nums[i] != nums[i+1]) {
                    res.push_back(nums[i]);
                }
            }
        }
        return res;

=======

        vector<int> result;
        int i = 0;
        while (i < nums.size()) {
            if (i == 0) {
                if (nums[i] != nums[i+1]) {
                    result.push_back(nums[i]);
                }
            } else if (i == nums.size() - 1) {
                if (nums[i] != nums[i-1]) {
                    result.push_back(nums[i]);
                }
            } else {
                if (nums[i] != nums[i+1] && nums[i] != nums[i-1]) {
                    result.push_back(nums[i]);
                }
            }
            i++;
        }
        return result;

=======

        vector<int> res;
        for(int i = 0; i < nums.size(); ++i) {
            if((i == 0 || nums[i] != nums[i-1]) && (i == nums.size()-1 || nums[i] != nums[i+1])) {
                res.push_back(nums[i]);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> res;
        int i = 0;
        while (i < n) {
            if (i == n - 1) {
                res.push_back(nums[i]);
                break;
            }
            if (nums[i] != nums[i + 1]) {
                res.push_back(nums[i]);
                i++;
            } else {
                i += 2;
            }
        }
        return res;
    }
    vector<int> getLonelyNodes(TreeNode* root) {
        vector<int> res;
        if (root == nullptr) {
            return res;
        }
        if (root->left && !root->right) {
            res.push_back(root->left->val);
        }
        if (!root->left && root->right) {
            res.push_back(root->right->val);
        }
        auto left = getLonelyNodes(root->left);
        auto right = getLonelyNodes(root->right);
        res.insert(res.end(), left.begin(), left.end());
        res.insert(res.end(), right.begin(), right.end());
        return res;
    }
    vector<int> getLonelyNodes2(TreeNode* root) {
        vector<int> res;
        if (root == nullptr) {
            return res;
        }
        if (root->left && !root->right) {
            res.push_back(root->left->val);
        }
        if (!root->left && root->right) {
            res.push_back(root->right->val);
        }
        auto left = getLonelyNodes(root->left);
        auto right = getLonelyNodes(root->right);
        res.insert(res.end(), left.begin(), left.end());
        res.insert(res.end(), right.begin(), right.end());
        return res;
    }
    vector<int> getLonelyNodes3(TreeNode* root) {
        vector<int> res;
        if (root == nullptr) {
            return res;
        }
        if (root->left && !root->right) {
            res.push_back(root->left->val);
        }
        if (!root->left && root->right) {
            res.push_back(root->right->val);
        }
        auto left = getLonelyNodes(root->left);
        auto right = getLonelyNodes(root->right);
        res.insert(res.end(), left.begin(), left.end());
        res.insert(res.end(), right.begin(), right.end());

=======

        vector<int> lonely;
        int i = 0;
        while (i < nums.size()) {
            if (i == 0 && nums.size() > 1 && nums[i] != nums[i + 1]) {
                lonely.push_back(nums[i]);
            } else if (i == nums.size() - 1 && nums[i] != nums[i - 1]) {
                lonely.push_back(nums[i]);
            } else if (i > 0 && i < nums.size() - 1 && nums[i] != nums[i - 1] && nums[i] != nums[i + 1]) {
                lonely.push_back(nums[i]);
            }
            i++;
        }
        return lonely;

=======

        vector<int> lonely;
        for (int i = 0; i < nums.size(); i++) {
            int pre = i - 1;
            int post = i + 1;
            bool lonely = true;
            if (pre >= 0 && nums[pre] == nums[i]) {
                lonely = false;
            }
            if (post < nums.size() && nums[post] == nums[i]) {
                lonely = false;
            }
            if (lonely) {
                lonely.push_back(nums[i]);
            }
        }
        return lonely;
