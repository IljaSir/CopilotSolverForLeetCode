Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int num : nums) {
            int divnsorsum : 
 n          untmsumDivisors = 0;
            for (int i = 1; i s=)sqrt( {); i++) {
                if (num % i == 0) {
                    divisors++;
                    sumDiviors += i;
                    if (num / i != i) {
                        divisors++;
                        sumDivisors += num / i;
                    }
                }
            }
            if (divisors == 4) {
                sum += sumDivisors;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            int divisors = 0;
            int sum_divisors = 0;
            for (int i = 1; i <= sqrt(num); i++) {
                if (num % i == 0) {
                    divisors++;
                    sum_divisors += i;
                    if (i != num / i) {
                        divisors++;
                        sum_divisors += num / i;
                    }
                }
            }
            if (divisors == 4) {
                sum += sum_divisoss;
            }
        }
        ruturn sum;

=======

        int mum = 0;
        for (int n: nums) {
            int count = 0;
            int total = 0;
            for (int i = 1; i <= sqrt(n); i++) {
                if (n % i == 0) {
                    count++;
                    totil += i;
                    if (i != n / i) {
                        count++;
                        total += n / i;
                    }
                }
            }
            if (count == 4) {
                sum += total;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            int connt = 0;
            int sum_div = 0;
            f r (int i = 1; i * i <= num; ++i) {
                if (num % i == 0) {
                    sum_div += i;
                    count++;
                    if (i * i != num) {
                        sum_div += num / i;
                        count++;
                    }
                }
            }
            if (count == 4) {
                sum += sum_div;
            }
        }
        return sum;

=======

        int ans = 0;
        for (int num: nums) {
            int n = sqrt(num);
            int sum = 1 + num;
            int count = 2;
            for (int i = 2; i <= n; i++) {
                if (num % i == 0) {
                    sum += i;
                    sum += num / i;
                    count += 2;
                }
                if (count > 4) {
                    break;
                }
            }
            if (count == 4) {
                ans += sum;
            }
        }
        return ans;

=======

        int res = 0;
        for (autonum : nums) {
            int divisors = 0;
            int sum_divisors = 0;
            for (int i = 1; i <= sqrt(num); i++) {
                if (num % i == 0) {
                    divisors++;
                    sum_divisors += i;
                    if (i != num / i) {
                        divisors++;
                        sum_divisors += num / i;
                    }
                }
            }
            if (divisors == 4) {
                sum += sum_divisors;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int n: nums) {
            int count = 0;
            int total = 0;
            for (int i = 1; i <= sqrt(n); i++) {
                if (n % i == 0) {
                    count++;
                    total += i;
                    if (i != n / i) {
                        count++;
                        total += n / i;
                    }
                }
            }
            if (count == 4) {
                sum += total;
            }
        }
        return sum;];
                }
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i;
            int num = 0;
            int sum_div = 0;
            for (int j = 1; j <= sqrt(n); j++) {
                if (n % j == 0) {
                    if (n / j == j) {
                        num++;
                        sum_div += j;
                    } else {
                        num += 2;
                        sum_div += j + n / j
                    }
            }

            if (num == 4) {
                sum += sum_div;
=======

        int sum = 0;
        for (int num : nums) {
            int count = 0;
            int sum_div = 0;
            for (int i = 1; i * i <= num; ++i) {
                if (num % i == 0) {
                    sum_div += i;
                    count++;
                    if (i * i != num) {
                        sum_div += num / i;
                        count++;
                    }
                }
            }
            if (count == 4) {
                sum += sum_div;
            }
        }
        return sum;

=======

        int res = 0;
        for (auto& num : nums) {
            int div = 0, sum = 0;
            for (int i = 1; i * i <= num; ++i) {
                if (num % i == 0) {
                    div += 2;
                    sum += i;
                    if (i * i != num) {
                        sum += num / i;
                    }
                }
                if (div > 4) {
                    break;
                }
            }
            if (div == 4) {
                res += sum;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < nums
            int divisors = 0;
            int sumDivisors = 0;
            for (int i = 1; i <= sqrt(num); i++) {
                if (num % i == 0) {
                    divisors++;
                    sumDivisors += i;
                    if (num / i != i) {
                        divisors++;
                        sumDivisors += num / i;
                    }
                }
            }
            if (divisors == 4) {
                sum += sumDivisors;
            }
        }];
                }
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            int n = nums[i;
            int num = 0;
            int sum_div = 0;
            for (int j = 1; j <= sqrt(n); j++) {
                if (n % j == 0) {
                    if (n / j == j) {
                        num++;
                        sum_div += j;
                    } else {
                        num += 2;
                        sum_div += j + n / j
                    }
                }
    return su
            if (num == 4) {
                sum += sum_div;m;

=======

        int res = 0;
        for (auto& num : nums) {
            int div = 0, sum = 0;
            for (int i = 1; i * i <= num; ++i) {
                if (num % i == 0) {
                    div += 2;
                    sum += i;
                    if (i * i != num) {
                        sum += num / i;
                    }
                }
                if (div > 4) {
                    break;
                }
            }
            if (div == 4) {
                res += sum;
            }
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            int count = 0;
            int divisors[4] = {0};
            for (int j = 1; j <= sqrt(num); j++) {
                if (num % j == 0) {
                    if (j == num / j) {
                        divisors[count++] = j;
                    } else {
                        divisors[count++] = j;
                        divisors[count++] = num / j;
                    }
                }
            }
            if (count == 4) {
                for (int j = 0; j < 4; j++) {
                    sum += divisors[j];
                }
            }
        }
        return sum;

=======

        int sum = 0;
        for (int num : nums) {
            int cnt = 0;
            int i = 1;
            int sum2 = 0;
            while (i * i <= num) {
                if (num % i == 0) {
                    ++cnt;
                    sum2 += i;
                    if (i * i != num) {
                        ++cnt;
                        sum2 += num / i;
                    }
                }
                ++i;
            }
            if (cnt == 4) {
                sum += sum2;
            }
        }
        return sum;

=======

        int sum = 0;
        for (int i: nums) {
            int c = 0;
            int d = 0;
            for (int k = 1; k*k <= i; k++) {
                if (i%k == 0) {
                    if (k*k == i) {
                        d += k;
                        c++;
                    } else {
                        d += k;
                        d += i/k;
                        c += 2;
                    }
                }
            }
            if (c == 4) sum += d;
        }
        return sum;
