Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            for (int j = i; j < n; ++j) {
                if (nums[j] % p == 0) {
                    ++cnt;
                }
                if (cnt <= k) {
                    ++ans;
                } else {
                    break;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            for (int j = i; j < n && cnt < k; ++j) {
                if (nums[j] % p == 0) {
                    ++cnt;
                }
                if (cnt <= k) {
                    ++ans;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = i; j < n; j++) {
                if (nums[j] % p == 0) {
                    cnt++;
                }
                if (cnt <= k) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = i; j < n; j++) {
                if (nums[j] % p == 0) {
                    cnt++;
                }
                if (cnt > k) {
                    break;
                }
                res++;
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            int j = i;
            while (j < n && cnt <= k) {
                if (nums[j] % p == 0) {
                    ++cnt;
                }
                if (cnt <= k) {
                    ++ans;
                }
                ++j;
            }
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int cnt = 0;
            int m = 0;
            for (int j = i; j < n; ++j) {
                if (nums[j] % p == 0) {
                    ++cnt;
                }
                if (cnt <= k) {
                    ++m;
                }
            }
            ans += m;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(p);
        int ans = 0;
        for (int l = 0, r = 0; r < n; ++r) {
            if (++cnt[nums[r] % p] == 1) --k;
            while (k < 0) {
                if (--cnt[nums[l] % p] == 0) ++k;
                ++l;
            }
            ans += r - l + 1;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int count = 0;
        int i = 0;
        int j = 0;
        while (i < n) {
            if (nums[i] % p == 0) {
                count++;
            }
            while (count > k) {
                if (nums[j] % p == 0) {
                    count--;
                }
                j++;
            }
            ans += i - j + 1;
            i++;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        int count = 0;
        int left = 0;
        int right = 0;
        unordered_map<int, int> map;
        while (right < n) {
            int r = nums[right];
            map[r]++;
            if (r % p == 0) {
                count++;
            }
            while (count > k) {
                int l = nums[left];
                map[l]--;
                if (l % p == 0) {
                    count--;
                }
                left++;
            }
            ans += map[r];
            right++;
        }
        return ans;
