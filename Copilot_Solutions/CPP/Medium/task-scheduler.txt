Synthesizing 10/10 solutions

=======

        int count[26] = {0};
        for (char c : tasks) {
            count[c - 'A']++;
        }
        sort(count, count + 26);
        int max_val = count[25] - 1, idle_slots = max_val * n;
        for (int i = 24; i >= 0 && count[i] > 0; i--) {
            idle_slots -= min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        vector<int> count(26, 0);
        for (char t : tasks) {
            ++count[t - 'A'];
        }
        sort(count.begin(), count.end());
        int max_val = count[25] - 1, idle_slots = max_val * n;
        for (int i = 24; i >= 0 && count[i] > 0; --i) {
            idle_slots -= min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        int count[26] = {0};
        for (char ch : tasks) {
            count[ch - 'A']++;
        }
        sort(count, count + 26);
        int max_val = count[25] - 1;
        int idle_slots = max_val * n;
        for (int i = 24; i >= 0 && count[i] > 0; i--) {
            idle_slots -= min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        vector<int> freq(26, 0);
        for (auto task : tasks) {
            freq[task - 'A']++;
        }
        sort(freq.begin(), freq.end());
        int max_freq = freq[25] - 1;
        int idle_slots = max_freq * n;
        for (int i = 24; i >= 0 && freq[i] > 0; i--) {
            idle_slots -= min(freq[i], max_freq);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        int count[26] = {0};
        for (char c: tasks) {
            count[c - 'A']++;
        }
        std::sort(count, count + 26);
        int max_val = count[25] - 1, idle_slots = max_val * n;
        for (int i = 24; i >= 0 && count[i] > 0; i--) {
            idle_slots -= std::min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        int count[26] = { 0 };
        for (auto task : tasks) {
            count[task - 'A']++;
        }
        sort(count, count + 26, greater<int>());
        int max_val = count[0] - 1, idle_slots = max_val * n;
        for (int i = 1; i < 26 && count[i] > 0; i++) {
            idle_slots -= min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + tasks.size() : tasks.size();

=======

        vector<int> taskCount(26, 0);
        for (auto t : tasks) {
            taskCount[t - 'A']++;
        }
        sort(taskCount.begin(), taskCount.end());
        int maxTaskCount = taskCount[25] - 1;
        int idleSlots = maxTaskCount * n;
        for (int i = 24; i >= 0; i--) {
            idleSlots -= min(taskCount[i], maxTaskCount);
        }
        return idleSlots > 0 ? idleSlots + tasks.size() : tasks.size();

=======

        int len = tasks.size();
        vector<int> count(26, 0);
        for (char c : tasks)
            ++count[c - 'A'];
        sort(count.begin(), count.end());
        int max_val = count[25] - 1, idle_slots = max_val * n;
        for (int i = 24; i >= 0 && count[i] > 0; --i) {
            idle_slots -= min(count[i], max_val);
        }
        return idle_slots > 0 ? idle_slots + len : len;

=======

        int res = 0;
        int m = tasks.size();
        vector<int> cnt(26, 0);
        for (auto c : tasks) {
            cnt[c - 'A']++;
        }
        sort(cnt.begin(), cnt.end());
        int maxCnt = cnt[25];
        int i = 25;
        while (i >= 0 && cnt[i] == maxCnt) {
            i--;
        }
        res = max((maxCnt - 1) * (n + 1) + 25 - i, m);
        return res;

=======

        int len = tasks.size();
        if (len == 0) return 0;
        if (n == 0) return len;
        int cnt[26] = {0};
        for (auto c : tasks) {
            cnt[c - 'A']++;
        }
        sort(cnt, cnt + 26);
        int max_cnt = cnt[25];
        int ret = (max_cnt - 1) * (n + 1) + 1;
        for (int i = 24; i >= 0; i--) {
            if (cnt[i] == max_cnt) ret++;
            else break;
        }
        return ret < len ? len : ret;
