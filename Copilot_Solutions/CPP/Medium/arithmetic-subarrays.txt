Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<bool> res;
        for (int i = 0; i < l.size(); ++i) {
            vector<int> tmp(nums.begin() + l[i], nums.begin() + r[i] + 1);
            sort(tmp.begin(), tmp.end());
            int diff = tmp[1] - tmp[0];
            bool isArithmetic = true;
            for (int j = 2; j < tmp.size(); ++j) {
                if (tmp[j] - tmp[j - 1] != diff) {
                    isArithmetic = false;
                    break;
                }
            }
            res.push_back(isArithmetic);
        }
        return res;

=======

        vector<bool> result;
        for (int i = 0; i < l.size(); i++) {
            vector<int> temp;
            for (int j = l[i]; j <= r[i]; j++) {
                temp.push_back(nums[j]);
            }
            sort(temp.begin(), temp.end());
            int diff = temp[1] - temp[0];
            bool flag = true;
            for (int j = 2; j < temp.size(); j++) {
                if (temp[j] - temp[j-1] != diff) {
                    flag = false;
                    break;
                }
            }
            result.push_back(flag);
        }
        return result;

=======

        vector<bool> result;
        for (int i = 0; i < l.size(); i++) {
            vector<int> temp;
            for (int j = l[i]; j <= r[i]; j++) {
                temp.push_back(nums[j]);
            }
            sort(temp.begin(), temp.end());
            int diff = temp[1] - temp[0];
            bool isArithmetic = true;
            for (int j = 1; j < temp.size() - 1; j++) {
                if (temp[j + 1] - temp[j] != diff) {
                    isArithmetic = false;
                    break;
                }
            }
            result.push_back(isArithmetic);
        }
        return result;

=======

        vector<bool> res;
        for (int i = 0; i < l.size(); i++) {
            vector<int> sub;
            for (int j = l[i]; j <= r[i]; j++) {
                sub.push_back(nums[j]);
            }
            sort(sub.begin(), sub.end());
            bool isArithmetic = true;
            for (int j = 1; j < sub.size(); j++) {
                if (sub[j] - sub[j-1] != sub[1] - sub[0]) {
                    isArithmetic = false;
                    break;
                }
            }
            res.push_back(isArithmetic);
        }
        return res;

=======

        vector<bool> res;
        for(int i = 0; i < l.size(); i++){
            vector<int> tmp(nums.begin()+l[i], nums.begin()+r[i]+1);
            sort(tmp.begin(), tmp.end());
            int diff = tmp[1] - tmp[0];
            bool flag = true;
            for(int j = 2; j < tmp.size(); j++){
                if(tmp[j] - tmp[j-1] != diff){
                    flag = false;
                    break;
                }
            }
            res.push_back(flag);
        }
        return res;

=======

        vector<bool> res;
        for(int i = 0; i < l.size(); i++){
            vector<int> sub;
            for(int j = l[i]; j <= r[i]; j++){
                sub.push_back(nums[j]);
            }
            sort(sub.begin(), sub.end());
            bool isArithmetic = true;
            for(int j = 1; j < sub.size() - 1; j++){
                if(sub[j + 1] - sub[j] != sub[j] - sub[j - 1]){
                    isArithmetic = false;
                    break;
                }
            }
            res.push_back(isArithmetic);
        }
        return res;

=======

        vector<bool> result;
        int n = l.size();
        for (int i = 0; i < n; ++i) {
            vector<int> temp;
            for (int j = l[i]; j <= r[i]; ++j) {
                temp.push_back(nums[j]);
            }
            sort(temp.begin(), temp.end());
            int diff = temp[1] - temp[0];
            bool flag = true;
            for (int j = 2; j < temp.size(); ++j) {
                if (temp[j] - temp[j - 1] != diff) {
                    flag = false;
                    break;
                }
            }
            result.push_back(flag);
        }
        return result;

=======

        int n = nums.size();
        int m = l.size();
        vector<bool> res(m, false);
        if (n < 2) return res;
        for (int i = 0; i < m; i++) {
            int left = l[i];
            int right = r[i];
            vector<int> cur(nums.begin() + left, nums.begin() + right + 1);
            sort(cur.begin(), cur.end());
            int d = cur[1] - cur[0];
            bool flag = true;
            for (int j = 2; j < cur.size(); j++) {
                if (cur[j] - cur[j - 1] != d) {
                    flag = false;
                    break;
                }
            }
            res[i] = flag;
        }
        return res;

=======

        vector<bool> ret;
        int n = l.size();
        for(int i = 0; i < n; i++) {
            int start = l[i];
            int end = r[i];
            vector<int> sub;
            for(int j = start; j <= end; j++) {
                sub.push_back(nums[j]);
            }
            sort(sub.begin(), sub.end());
            int diff = sub[1] - sub[0];
            bool isArithmetic = true;
            for(int k = 2; k < sub.size(); k++) {
                if(sub[k] - sub[k-1] != diff) {
                    isArithmetic = false;
                    break;
                }
            }
            ret.push_back(isArithmetic);
        }
        return ret;
