Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < customers.size(); i++) {
            if (grumpy[i] == 0) {
                sum += customers[i];
                customers[i] = 0;
            }
        }
        int maxSum = sum;
        for (int i = 0; i < minutes; i++) {
            sum += customers[i];
        }
        maxSum = max(maxSum, sum);
        for (int i = minutes; i < customers.size(); i++) {
            sum -= customers[i - minutes];
            sum += customers[i];
            maxSum = max(maxSum, sum);
        }
        return maxSum;

=======

        int n = customers.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            if (grumpy[i] == 0) {
                sum += customers[i];
                customers[i] = 0;
            }
        }
        int maxSum = sum;
        for (int i = 0; i < n; ++i) {
            sum += customers[i];
            if (i - minutes >= 0) {
                sum -= customers[i - minutes];
            }
            maxSum = max(maxSum, sum);
        }
        return maxSum;

=======

        int n = customers.size();
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            if (grumpy[i] == 0) {
                sum += customers[i];
                customers[i] = 0;
                grumpy[i] = 1;
            }
        }
        int maxSum = 0;
        for (int i = 0; i < minutes; ++i) {
            maxSum += customers[i];
        }
        int curSum = maxSum;
        for (int i = minutes; i < n; ++i) {
            curSum += customers[i] - customers[i - minutes];
            maxSum = max(maxSum, curSum);
        }
        return sum + maxSum;

=======

        int n = customers.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (grumpy[i] == 0) {
                sum += customers[i];
                customers[i] = 0;
            }
        }
        int maxSum = 0;
        int curSum = 0;
        for (int i = 0; i < minutes; i++) {
            curSum += customers[i];
        }
        maxSum = curSum;
        for (int i = minutes; i < n; i++) {
            curSum += customers[i] - customers[i - minutes];
            maxSum = max(maxSum, curSum);
        }
        return sum + maxSum;

=======

        int n = customers.size();
        int total = 0;
        for (int i = 0; i < n; i++) {
            if (grumpy[i] == 0) {
                total += customers[i];
                customers[i] = 0;
            }
        }
        int max_increase = 0;
        int increase = 0;
        for (int i = 0; i < minutes; i++) {
            increase += customers[i];
        }
        max_increase = increase;
        for (int i = minutes; i < n; i++) {
            increase += customers[i];
            increase -= customers[i - minutes];
            max_increase = max(max_increase, increase);
        }
        return total + max_increase;

=======

        int n = customers.size();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (!grumpy[i]) {
                sum += customers[i];
                customers[i] = 0;
            }
        }
        int maxIncrease = 0;
        int increase = 0;
        for (int i = 0; i < n; i++) {
            increase += customers[i];
            if (i >= minutes) {
                increase -= customers[i - minutes];
            }
            maxIncrease = max(maxIncrease, increase);
        }
        return sum + maxIncrease;

=======

        int n = customers.size();
        int maxSatisfied = 0;
        for (int i = 0; i < n; ++i) {
            if (!grumpy[i]) {
                maxSatisfied += customers[i];
            }
        }
        int maxIncrease = 0;
        for (int i = 0; i < minutes; ++i) {
            if (grumpy[i]) {
                maxIncrease += customers[i];
            }
        }
        int increase = maxIncrease;
        for (int i = 1; i <= n - minutes; ++i) {
            if (grumpy[i - 1]) {
                increase -= customers[i - 1];
            }
            if (grumpy[i + minutes - 1]) {
                increase += customers[i + minutes - 1];
            }
            maxIncrease = max(maxIncrease, increase);
        }
        return maxSatisfied + maxIncrease;

=======

        int n = customers.size();
        int ans = 0;
        int tmp = 0;
        for (int i = 0; i < n; ++i) {
            if (grumpy[i] == 0) {
                ans += customers[i];
            }
            else {
                tmp += customers[i];
            }
        }
        int max_tmp = tmp;
        for (int i = 0; i < n - minutes; ++i) {
            if (grumpy[i] == 1) {
                tmp -= customers[i];
            }
            if (grumpy[i + minutes] == 1) {
                tmp += customers[i + minutes];
            }
            max_tmp = max(max_tmp, tmp);
        }
        return ans + max_tmp;

=======

        int n = customers.size();
        int gain = 0;
        int max_gain = 0;
        for (int i = 0; i < n; i++) {
            if (grumpy[i] == 0) {
                gain += customers[i];
            }
            if (i < minutes) {
                max_gain += customers[i] * grumpy[i];
            } else {
                max_gain += customers[i] * grumpy[i] - customers[i - minutes] * grumpy[i - minutes];
            }
        }
        return gain + max_gain;

=======

        int res=0;
        for (int i=0;i<customers.size();i++){
            if (grumpy[i]==0) res+=customers[i];
        }
        int max=0;
        for (int i=0;i<minutes;i++){
            if (grumpy[i]==1) max+=customers[i];
        }
        int temp=max;
        for (int i=minutes;i<customers.size();i++){
            if (grumpy[i]==1) temp+=customers[i];
            if (grumpy[i-minutes]==1) temp-=customers[i-minutes];
            if (temp>max) max=temp;
        }
        return res+max;
