Synthesizing 10/10 solutions

=======

        int n = tasks.size();
        if (n == 0) return 0;
        sort(tasks.begin(), tasks.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (tasks[i] % 2 == 1) {
                ans++;
                tasks[i]++;
            }
        }
        for (int i = 0; i < n; i++) {
            if (tasks[i] == 0) continue;
            int d = tasks[i] / 2;
            int j = i + 1;
            while (j < n && tasks[j] == 0) j++;
            if (j < n && tasks[j] == tasks[i]) {
                tasks[j] -= 2;
                ans += d;
            } else {
                ans += d + 1;
            }
        }
        return ans;

=======

        int n = tasks.size();
        unordered_map<int, int> cnt;
        for (int i = 0; i < n; ++i) {
            int t = tasks[i];
            if (t % 2 == 0) {
                ++cnt[t];
            } else {
                ++cnt[t - 1];
                ++cnt[t + 1];
            }
        }
        int res = 0;
        for (auto [k, v]: cnt) {
            int r = v % 4;
            int q = v / 4;
            if (r == 0) {
                res += q * 2;
            } else if (r == 1) {
                res += (q * 2) + 1;
            } else if (r == 2) {
                res += (q * 2) + 2;
            } else {
                res += (q * 2) + 3;
            }
        }
        return res;

=======

        map<int, int> taskMap;
        for (auto task : tasks) {
            taskMap[task]++;
        }
        int round = 0;
        for (auto it = taskMap.begin(); it != taskMap.end(); it++) {
            int task = it->first;
            int count = it->second;
            if (count % 2 == 1) {
                if (taskMap[task + 1] > 0) {
                    taskMap[task + 1]--;
                    count++;
                } else {
                    return -1;
                }
            }
            round += count / 2;
        }
        return round;

=======

        int n = tasks.size();
        sort(tasks.begin(), tasks.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && tasks[j] == tasks[i]) j++;
            int cnt = j - i;
            ans = max(ans, (cnt + 1) / 2);
            i = j - 1;
        }
        return ans;

=======

        unordered_map<int, int> cnt;
        for (auto t : tasks) {
            int k = (t + 1) / 2;
            cnt[k]++;
        }
        int res = 0;
        for (auto [k, v] : cnt) {
            int r = v % 2;
            int q = v / 2;
            res += q;
            if (r) res++;
        }
        return res;

=======

        unordered_map<int, int> freq;
        for (int t : tasks) {
            freq[t]++;
        }
        int ans = 0;
        for (auto& [k, v] : freq) {
            int n = v / 3;
            ans += n;
            v %= 3;
            if (v == 1) {
                freq[k + 1]++;
            } else if (v == 2) {
                freq[k + 1]++;
                freq[k + 2]++;
            }
        }
        for (auto& [k, v] : freq) {
            if (v > 0) {
                ans += (v + 2) / 3;
            }
        }
        return ans;

=======

        unordered_map<int, int> taskMap;
        for (auto task: tasks) {
            taskMap[task]++;
        }
        int res = 0;
        int left = 0;
        for (auto it = taskMap.begin(); it != taskMap.end(); it++) {
            int task = it->first;
            int cnt = it->second;
            if (left > 0) {
                if (left % 2 == 1) {
                    if (cnt >= 2) {
                        cnt -= 2;
                        left = 0;
                    } else {
                        cnt = 0;
                        left = 1;
                    }
                } else {
                    if (cnt >= 1) {
                        cnt -= 1;
                        left = 0;
                    } else {
                        cnt = 0;
                        left = 1;
                    }
                }
            }
            res += cnt / 3;
            left += cnt % 3;
        }
        if (left > 0) {
            res++;
        }
        return res;

=======

        map<int, int> m;
        for (int a : tasks) {
            m[a]++;
        }
        int ans = 0;
        for (auto& p : m) {
            int a = p.first, b = p.second;
            int c = 0;
            if (b % 2 == 1) {
                c = 1;
                b--;
            }
            ans += b / 2 + c;
        }
        return ans;

=======

        int n = tasks.size();
        int res = 0;
        int cnt[4] = {0};
        for (int i = 0; i < n; i++) {
            int idx = (tasks[i] + 7) / 8;
            cnt[idx]++;
        }
        int cur = 0;
        for (int i = 1; i < 4; i++) {
            if (cnt[i] == 0) continue;
            int r = cur % 2;
            int t = (cnt[i] + 2 - r) / 2;
            res += t;
            cur = (t * 2 - cnt[i]) % 2;
        }
        return cur == 0 ? res : res + 1;

=======

        int n=tasks.size();
        int res=0;
        int cnt[3]={0};
        for(int i=0;i<n;i++){
            int x=tasks[i];
            if(x%2==0){
                int y=x/2;
                if(cnt[0]>=y){
                    cnt[0]-=y;
                }
                else{
                    y-=cnt[0];
                    cnt[0]=0;
                    cnt[1]+=y/3;
                    if(y%3!=0){
                        cnt[2]=3-y%3;
                    }
                }
            }
            else{
                int y=x/2+1;
                if(cnt[0]>=y){
                    cnt[0]-=y;
                }
                else{
                    y-=cnt[0];
                    cnt[0]=0;
                    cnt[1]+=y/3;
                    if(y%3!=0){
                        cnt[2]=3-y%3;
                    }
                }
            }
            cnt[0]++;
            res+=cnt[2]/3;
            cnt[1]+=cnt[2]/3;
            cnt[2]%=3;
            res+=cnt[1]/3;
            cnt[0]+=cnt[1]/3;
            cnt[1]%=3;
        }
        res+=cnt[2]/3;
        cnt[1]+=cnt[2]/3;
        cnt[2]%=3;
        res+=cnt[1]/3;
        cnt[0]+=cnt[1]/3;
        cnt[1]%=3;
        if(cnt[0]>0||cnt[1]>0||cnt[2]>0){
            res++;
        }
        return res;
