Synthesizing 10/10 solutions

=======

        sort(ranks.begin(), ranks.end());
        long long sum = 0;
        for (int i = 0; i < ranks.size(); i++) {
            sum += ranks[i];
            ranks[i] = sum;
        }
        long long l = 0, r = 1e18;
        while (l < r) {
            long long mid = l + r >> 1;
            long long cnt = 0;
            for (int i = 0; i < ranks.size(); i++) {
                long long n = sqrt(mid / ranks[i]);
                cnt += n;
            }
            if (cnt >= cars) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        sort(ranks.begin(), ranks.end());
        long long left = 1, right = 1e12;
        while (left < right) {
            long long mid = (left + right) >> 1;
            long long cnt = 0;
            for (int i = 0; i < ranks.size(); i++) {
                cnt += mid / (ranks[i] * ranks[i]);
            }
            if (cnt >= cars) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        long long l = 0, r = 1e18;
        while (l < r) {
            long long m = (l + r) >> 1;
            long long cnt = 0;
            for (int r: ranks) {
                cnt += (m / (r * r));
            }
            if (cnt >= cars) r = m;
            else l = m + 1;
        }
        return l;

=======

        long long l = 0, r = 1e18;
        while (l < r) {
            long long mid = (l + r) / 2;
            long long cnt = 0;
            for (int i = 0; i < ranks.size(); i++) {
                cnt += mid / (ranks[i] * ranks[i]);
            }
            if (cnt >= cars) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int r : ranks) pq.push(r);
        while (cars--) {
            int r = pq.top(); pq.pop();
            pq.push(r + 1);
        }
        return (long long)pq.top() * pq.top() * cars;

=======

        int n = ranks.size();
        sort(ranks.begin(), ranks.end());
        long long l = 0, r = 1e18;
        while (l < r) {
            long long mid = l + (r-l) / 2;
            int c = 0;
            for (int i = 0; i < n; i++) {
                long long t = (long long)ranks[i] * ranks[i];
                c += mid / t;
            }
            if (c >= cars) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int n = ranks.size();
        sort(ranks.begin(), ranks.end());
        long long ans = 1e18;
        for (int i = 0; i < n; i++) {
            long long cur = 0;
            int need = cars;
            for (int j = i; j < n; j++) {
                long long t = 1LL * ranks[j] * need * need;
                cur += t;
                need = (need + 1) / 2;
            }
            ans = min(ans, cur);
        }
        return ans;

=======

        long long ans = 0;
        sort(ranks.begin(), ranks.end());
        int n = ranks.size();
        for (int i = 0; i < n; i++) {
            long long x = ranks[i];
            long long y = cars / (i + 1);
            ans += x * y * y;
            cars -= y * (i + 1);
        }
        return ans;

=======

        long long res = 0;
        sort(ranks.begin(), ranks.end());
        int n = ranks.size();
        for(int i = 0; i < n; i++){
            int p = n - i - 1;
            long long cur = ranks[i] * (long long)(cars - p);
            res = max(res, cur);
        }
        return res;

=======

        auto check = [&](long long t) {
            long long tmp = 0;
            for (int r : ranks) {
                long long n = r;
                tmp += t / (n * n);
            }
            return tmp >= cars;
        };
        long long l = 0, r = 1e18;
        while (l < r) {
            long long m = l + (r - l) / 2;
            if (check(m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
