Synthesizing 10/10 solutions

=======

        vector<int> ans = {0};
        int head = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = ans.size() - 1; j >= 0; --j) {
                ans.push_back(head + ans[j]);
            }
            head <<= 1;
        }
        return ans;

=======

        vector<int> res(1, 0);
        for (int i = 0; i < n; i++) {
            int size = res.size();
            for (int j = size - 1; j >= 0; j--) {
                res.push_back(res[j] | (1 << i));
            }
        }
        return res;

=======

        vector<int> ans;
        ans.push_back(0);
        for (int i = 0; i < n; i++) {
            int size = ans.size();
            for (int j = size - 1; j >= 0; j--) {
                ans.push_back(ans[j] | (1 << i));
            }
        }
        return ans;

=======

        vector<int> res;
        res.push_back(0);
        for (int i = 0; i < n; i++) {
            int inc = 1 << i;
            for (int j = res.size() - 1; j >= 0; j--) {
                res.push_back(res[j] + inc);
            }
        }
        return res;

=======

        vector<int> ans;
        ans.push_back(0);
        for (int i = 0; i < n; i++) {
            int len = ans.size();
            for (int j = len - 1; j >= 0; j--) {
                ans.push_back(ans[j] | (1 << i));
            }
        }
        return ans;

=======

        vector<int> ans;
        ans.push_back(0);
        for (int i = 0; i < n; ++i) {
            for (int j = ans.size() - 1; j >= 0; --j) {
                ans.push_back(ans[j] | (1 << i));
            }
        }
        return ans;

=======

        vector<int> res;
        res.push_back(0);
        for(int i = 0; i < n; i++){
            int size = res.size();
            for(int j = size - 1; j >= 0; j--){
                res.push_back(res[j] | 1 << i);
            }
        }
        return res;

=======

        int size = 1 << n;
        vector<int> res(size);
        for (int i = 0; i < size; ++i) {
            res[i] = i ^ (i >> 1);
        }
        return res;

=======

        vector<int> result;
        int size = 1 << n;
        for (int i = 0; i < size; i++) {
            result.push_back((i >> 1) ^ i);
        }
        return result;

=======

        vector<int> ret;
        ret.push_back(0);
        for (int i = 0; i < n; i++) {
            int len = ret.size();
            for (int j = len - 1; j >= 0; j--) {
                ret.push_back(ret[j] | (1 << i));
            }
        }
        return ret;
