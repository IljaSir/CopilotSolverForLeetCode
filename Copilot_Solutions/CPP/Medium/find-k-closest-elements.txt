Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int left = 0, right = arr.size() - k;
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - arr[mid] > arr[mid + k] - x)
                left = mid + 1;
            else
                right = mid;
        }
        return vector<int>(arr.begin() + left, arr.begin() + left + k);

=======

        int n = arr.size();
        int l = 0, r = n - k;
        while (l < r) {
            int mid = (l + r) / 2;
            if (x - arr[mid] > arr[mid + k] - x) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return vector<int>(arr.begin() + l, arr.begin() + l + k);

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (r - l + 1 > k) {
            if (x - arr[l] <= arr[r] - x) {
                r--;
            } else {
                l++;
            }
        }
        return vector<int>(arr.begin() + l, arr.begin() + r + 1);

=======

        int n = arr.size();
        if (x <= arr[0]) {
            return vector<int>(arr.begin(), arr.begin() + k);
        } else if (x >= arr[n-1]) {
            return vector<int>(arr.end() - k, arr.end());
        }
        int l = 0, r = n - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (arr[m] < x) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        int i = l;
        int j = i + 1;
        while (j - i - 1 < k) {
            if (i == 0) {
                j++;
            } else if (j == n) {
                i--;
            } else {
                if (abs(arr[i-1] - x) <= abs(arr[j] - x)) {
                    i--;
                } else {
                    j++;
                }
            }
        }
        return vector<int>(arr.begin() + i, arr.begin() + j);

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (arr[m] >= x) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        int i = l, j = l;
        while (j - i + 1 < k) {
            if (i == 0) {
                ++j;
            } else if (j == n - 1) {
                --i;
            } else {
                if (x - arr[i - 1] <= arr[j + 1] - x) {
                    --i;
                } else {
                    ++j;
                }
            }
        }
        return vector<int>(arr.begin() + i, arr.begin() + j + 1);

=======

        int n = arr.size();
        int l = 0, r = n - k;
        while(l < r) {
            int mid = l + (r - l) / 2;
            if(x - arr[mid] > arr[mid + k] - x) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return vector<int>(arr.begin() + l, arr.begin() + l + k);

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (r - l + 1 > k) {
            if (x - arr[l] <= arr[r] - x) {
                r--;
            } else {
                l++;
            }
        }
        return vector<int>(arr.begin() + l, arr.begin() + r + 1);

=======
ack(arr[i]);
        }
        return ns;

=======

        vetor<int> res;
        int n = arr.size();
        int l = 0, r = n - 1;
        int m = 0;
        while (l < r) {
            m = l + (r - l) / 2;
            if (arr[m] < x) l = m + 1;
            else r = m;
        }
        if (l > 0 && abs(arr[l] - x) >= abs(arr[l - 1] - x)) l--;
        int i = l, j = l + 1;
        while (--) {
            if (i < 0) j++;
            else if (j >= n) i--;
            else if (abs] - x) <= abs(arr[j - x) i--;
            else j++
        i
        for (int p = i + 1; p < j; p++) res.push_back(arr[p]);nt n = arr.size();
        if (x <res;

=======

        vector<int> result;
        int left = 0;
        int right = arr.size()-1;
        while (right-left+1>k) {
            int leftDiff = abs(x-arr[left]);
            int rightDiff = abs(x-arr[right]);
            if (leftDiff>rightDiff) {
                left++;
            } else {
                right--;
            }
        }
        for (int i=left;i<=right;i++) {
            result.push_back(=rr[i]);
        }
        retur  reaultrr[0]) {
            return vector<int>(arr.begin(), arr.begin() + k);
        } else if (x >= arr[n-1]) {
            return vector<int>(arr.end() - k, arr.end());
        }
        int l = 0, r = n - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (arr[m] < x) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        int i = l;
        int j = i + 1;
        while (j - i - 1 < k) {
            if (i == 0) {
                j++;
            } else if (j == n) {
                i--;
            } else {
                if (abs(arr[i-1] - x) <= abs(arr[j] - x)) {
                    i--;
                } else {
                    j++;
                }
            }
        }
        return vector<int>(arr.begin() + i, arr.begin() + j);

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (arr[m] >= x) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        int i = l, j = l;
        while (j - i + 1 < k) {
            if (i == 0) {
                ++j;
            } else if (j == n - 1) {
                --i;
            } else {
                if (x - arr[i - 1] <= arr[j + 1] - x) {
                    --i;
                } else {
                    ++j;
                }
            }
        }
        return vector<int>(arr.begin() + i, arr.begin() + j + 1);

=======

        int n = arr.size();
        int l = 0, r = n - k;
        while(l < r) {
            int mid = l + (r - l) / 2;
            if(x - arr[mid] > arr[mid + k] - x) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return vector<int>(arr.begin() + l, arr.begin() + l + k);

=======

        int n = arr.size();
        int l = 0;
        int r = n - 1;
        while (r - l + 1 > k) {
            if (x - arr[l] > arr[r] - x) {
                l++;
            } else {
                r--;
            }
        }
        vector<int> ans;
        for (int i = l; i <= r; i++) {
            ans.push_back(arr[i]);
        }
        return ans;
