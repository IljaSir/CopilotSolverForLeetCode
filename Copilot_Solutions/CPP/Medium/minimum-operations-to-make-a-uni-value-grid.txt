Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> nums;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                nums.push_back(grid[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        int target = nums[nums.size() / 2];
        int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            if ((nums[i] - target) % x != 0) {
                return -1;
            }
            ans += abs(nums[i] - target) / x;
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> nums;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                nums.push_back(grid[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        int mid = nums[nums.size()/2];
        int ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int diff = abs(nums[i] - mid);
            if (diff % x != 0) {
                return -1;
            } else {
                ans += diff / x;
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> v;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                v.push_back(grid[i][j]);
            }
        }
        sort(v.begin(), v.end());
        int median = v[(m * n) / 2];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int diff = abs(grid[i][j] - median);
                if (diff % x != 0) {
                    return -1;
                }
                res += diff / x;
            }
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> nums;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                nums.push_back(grid[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        int mid = nums[nums.size() / 2], ans = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int diff = abs(nums[i] - mid);
            if (diff % x != 0) {
                return -1;
            }
            ans += diff / x;
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> v;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                v.push_back(grid[i][j]);
            }
        }
        sort(v.begin(), v.end());
        int median = v[m * n / 2];
        int ans = 0;
        for (int i = 0; i < m * n; i++) {
            int diff = abs(v[i] - median);
            if (diff % x) return -1;
            ans += diff / x;
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> v;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                v.push_back(grid[i][j]);
            }
        }
        sort(v.begin(), v.end());
        int ans = 0, mid = v[(m * n) / 2];
        for (int i = 0; i < m * n; i++) {
            int diff = abs(v[i] - mid);
            if (diff % x != 0) return -1;
            ans += diff / x;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> res;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                res.push_back(grid[i][j]);
            }
        }
        sort(res.begin(), res.end());
        int mid = res[res.size() / 2];
        int ans = 0;
        for (int i = 0; i < res.size(); ++i) {
            int d = abs(res[i] - mid);
            if (d % x != 0) {
                return -1;
            }
            ans += d / x;
        }
        return ans;

=======

        int n = grid.size();
        int m = grid[0].size();
        int cnt = n * m;
        vector<int> nums;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                nums.push_back(grid[i][j]);
            }
        }
        sort(nums.begin(), nums.end());
        int mid = nums[cnt / 2];
        int ans = 0;
        for (int i = 0; i < cnt; i++) {
            if (abs(nums[i] - mid) % x != 0) {
                return -1;
            }
            ans += abs(nums[i] - mid) / x;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        int cnt = 0;
        vector<int> nums(m*n);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                nums[cnt++] = grid[i][j];
            }
        }
        sort(nums.begin(), nums.end());
        int mid = nums[(m*n)/2];
        int res = 0;
        for (int i = 0; i < m*n; ++i) {
            if (abs(nums[i]-mid)%x != 0) {
                return -1;
            }
            res += abs(nums[i]-mid)/x;
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        int total = m * n;
        vector<int> v(total);
        int i = 0;
        for (auto& r : grid) {
            for (int c : r) {
                v[i++] = c;
            }
        }
        sort(v.begin(), v.end());
        int mid = v[total / 2];
        int ans = 0;
        for (int c : v) {
            if ((c - mid) % x != 0) {
                return -1;
            }
            ans += abs(c - mid) / x;
        }
        return ans;
