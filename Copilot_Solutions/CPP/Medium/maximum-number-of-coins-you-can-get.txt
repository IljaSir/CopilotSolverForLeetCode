Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(piles.begin(), piles.end(), greater<int>());
        int res = 0;
        for (int i = 1; i < piles.size(); i += 2) {
            res += piles[i];
        }
        return res;

=======

        sort(piles.begin(), piles.end());
        int ans = 0;
        for (int i = piles.size() / 3; i < piles.size(); i += 2) {
            ans += piles[i];
        }
        return ans;

=======

        sort(piles.begin(), piles.end());
        int n = piles.size();
        int ans = 0;
        for (int i = n - 2; i >= n / 3; i -= 2) {
            ans += piles[i];
        }
        return ans;

=======

        sort(piles.begin(), piles.end());
        int n = piles.size();
        int res = 0;
        for (int i = n - 2; i >= n / 3; i -= 2) {
            res += piles[i];
        }
        return res;

=======

        sort(piles.begin(), piles.end());
        int n = piles.size();
        int sum = 0;
        for (int i = n / 3; i < n; i += 2) {
            sum += piles[i];
        }
        return sum;

=======

        int n = piles.size() / 3;
        sort(piles.begin(), piles.end(), greater<int>());
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += piles[2 * i + 1];
        }
        return res;

=======

        sort(piles.begin(), piles.end());
        int ans = 0;
        int n = piles.size();
        for (int i = n-2; i >= n/3; i-=2) {
            ans += piles[i];
        }
        return ans;

=======

        sort(piles.begin(), piles.end());
        int n = piles.size();
        int i = n - 2;
        int res = 0;
        while (i >= n / 3) {
            res += piles[i];
            i -= 2;
        }
        return res;
