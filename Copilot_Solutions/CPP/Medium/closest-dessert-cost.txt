Synthesizing 10/10 solutions

=======

        int n = baseCosts.size();
        int m = toppingCosts.size();
        int minDiff = INT_MAX;
        int minCost = INT_MAX;
        for (int i = 0; i < n; ++i) {
            int cost = baseCosts[i];
            int diff = abs(target - cost);
            if (diff < minDiff) {
                minDiff = diff;
                minCost = cost;
            } else if (diff == minDiff) {
                minCost = min(minCost, cost);
            }
            dfs(toppingCosts, m, 0, cost, target, minDiff, minCost);
        }
        return minCost;
    }
    
    void dfs(vector<int>& toppingCosts, int m, int idx, int cost, int target, int& minDiff, int& minCost) {
        if (idx == m) {
            return;
        }
        int diff = abs(target - cost);
        if (diff < minDiff) {
            minDiff = diff;
            minCost = cost;
        } else if (diff == minDiff) {
            minCost = min(minCost, cost);
        }
        int toppingCost = toppingCosts[idx];
        for (int i = 0; i < 3; ++i) {
            cost += toppingCost * i;
            dfs(toppingCosts, m, idx + 1, cost, target, minDiff, minCost);
            cost -= toppingCost * i;
        }

=======

        int ans = baseCosts[0];
        for (auto base : baseCosts) {
            dfs(ans, base, toppingCosts, target, 0);
        }
        return ans;
    }
    void dfs(int& ans, int base, vector<int>& toppingCosts, int target, int idx) {
        if (idx >= toppingCosts.size()) {
            if (abs(ans - target) > abs(base - target)) {
                ans = base;
            } else if (abs(ans - target) == abs(base - target)) {
                ans = min(ans, base);
            }
            return;
        }
        dfs(ans, base, toppingCosts, target, idx + 1);
        dfs(ans, base + toppingCosts[idx], toppingCosts, target, idx + 1);
        dfs(ans, base + toppingCosts[idx] * 2, toppingCosts, target, idx + 1);

=======

        int ans = 0;
        int minDiff = INT_MAX;
        for (int base : baseCosts) {
            for (int i = 0; i < (1 << toppingCosts.size()); i++) {
                int cost = base;
                for (int j = 0; j < toppingCosts.size(); j++) {
                    if (i & (1 << j)) {
                        cost += toppingCosts[j];
                    }
                }
                if (abs(target - cost) < minDiff) {
                    ans = cost;
                    minDiff = abs(target - cost);
                }
                else if (abs(target - cost) == minDiff) {
                    ans = min(ans, cost);
                }
            }
        }
        return ans;

=======

        int res = 0;
        int diff = INT_MAX;
        for (int i = 0; i < baseCosts.size(); i++) {
            int cost = baseCosts[i];
            if (abs(target - cost) < diff) {
                res = cost;
                diff = abs(target - cost);
            }
            for (int j = 0; j < toppingCosts.size(); j++) {
                int cost1 = cost + toppingCosts[j];
                if (abs(target - cost1) < diff) {
                    res = cost1;
                    diff = abs(target - cost1);
                }
                for (int k = j + 1; k < toppingCosts.size(); k++) {
                    int cost2 = cost + toppingCosts[j] + toppingCosts[k];
                    if (abs(target - cost2) < diff) {
                        res = cost2;
                        diff = abs(target - cost2);
                    }
                }
            }
        }
        return res;

=======

        int res = 0;
        int minDiff = INT_MAX;
        for (int base : baseCosts) {
            int diff = abs(base - target);
            if (diff < minDiff) {
                minDiff = diff;
                res = base;
            }
            dfs(base, toppingCosts, 0, target, res, minDiff);
        }
        return res;

=======

        int res = 0;
        int minDiff = INT_MAX;
        for (auto base : baseCosts) {
            if (abs(base - target) < minDiff) {
                minDiff = abs(base - target);
                res = base;
            }
            dfs(toppingCosts, base, 0, target, minDiff, res);
        }
        return res;
    }
    
    void dfs(vector<int>& toppingCosts, int cost, int idx, int target, int& minDiff, int& res) {
        if (abs(cost - target) < minDiff) {
            minDiff = abs(cost - target);
            res = cost;
        }
        if (idx == toppingCosts.size()) return;
        dfs(toppingCosts, cost, idx + 1, target, minDiff, res);
        dfs(toppingCosts, cost + toppingCosts[idx], idx + 1, target, minDiff, res);
        dfs(toppingCosts, cost + toppingCosts[idx] * 2, idx + 1, target, minDiff, res);

=======

        int min_diff = INT_MAX;
        int min_cost = INT_MAX;
        for (int base : baseCosts) {
            int cost = base;
            int diff = abs(target - cost);
            if (diff < min_diff) {
                min_diff = diff;
                min_cost = cost;
            } else if (diff == min_diff) {
                min_cost = min(min_cost, cost);
            }
            for (int topping : toppingCosts) {
                cost += topping;
                diff = abs(target - cost);
                if (diff < min_diff) {
                    min_diff = diff;
                    min_cost = cost;
                } else if (diff == min_diff) {
                    min_cost = min(min_cost, cost);
                }
                cost -= topping;
                cost += topping * 2;
                diff = abs(target - cost);
                if (diff < min_diff) {
                    min_diff = diff;
                    min_cost = cost;
                } else if (diff == min_diff) {
                    min_cost = min(min_cost, cost);
                }
                cost -= topping * 2;
            }
        }
        return min_cost;

=======

        int ans = 0;
        for (int i = 0; i < baseCosts.size(); i++) {
            int base = baseCosts[i];
            ans = min(ans, base, target);
            for (int j = 0; j < toppingCosts.size(); j++) {
                int topping = toppingCosts[j];
                ans = min(ans, base + topping, target);
                for (int k = j + 1; k < toppingCosts.size(); k++) {
                    int topping2 = toppingCosts[k];
                    ans = min(ans, base + topping + topping2, target);
                }
            }
        }
        return ans;
    }
    
    int min(int a, int b, int target) {
        if (abs(a - target) < abs(b - target)) {
            return a;
        } else if (abs(a - target) > abs(b - target)) {
            return b;
        } else {
            return min(a, b);
        }

=======

        int ans = INT_MAX;
        for (auto c : baseCosts) {
            int t = c;
            if (abs(t - target) < abs(ans - target)) ans = t;
            if (t >= target) continue;
            for (int i = 0; i < toppingCosts.size(); ++i) {
                t += toppingCosts[i];
                if (abs(t - target) < abs(ans - target)) ans = t;
                if (t >= target) continue;
                for (int j = i + 1; j < toppingCosts.size(); ++j) {
                    t += toppingCosts[j];
                    if (abs(t - target) < abs(ans - target)) ans = t;
                    if (t >= target) continue;
                    t -= toppingCosts[j];
                }
                t -= toppingCosts[i];
            }
        }
        return ans;

=======

        int ans = 0, minDiff = 99999;
        for (int baseCost : baseCosts) {
            int diff = abs(target - baseCost);
            if (diff < minDiff) {
                ans = baseCost;
                minDiff = diff;
            }
            for (int i = 0; i < toppingCosts.size(); i++) {
                int sum = baseCost + toppingCosts[i];
                int diff = abs(target - sum);
                if (diff < minDiff) {
                    ans = sum;
                    minDiff = diff;
                }
                for (int j = i + 1; j < toppingCosts.size(); j++) {
                    int sum = baseCost + toppingCosts[i] + toppingCosts[j];
                    int diff = abs(target - sum);
                    if (diff < minDiff) {
                        ans = sum;
                        minDiff = diff;
                    }
                }
            }
        }
        return ans;
