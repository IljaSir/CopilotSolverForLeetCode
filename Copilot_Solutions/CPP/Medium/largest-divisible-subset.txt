Synthesizing 8/10 solutions

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        vector<int> parent(n, -1);
        int max_index = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] % nums[j] == 0) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        parent[i] = j;
                    }
                }
            }
            if (dp[i] > dp[max_index]) {
                max_index = i;
            }
        }
        vector<int> ans;
        while (max_index != -1) {
            ans.push_back(nums[max_index]);
            max_index = parent[max_index];
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0)
            return {};
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        vector<int> pre(n, -1);
        int maxIdx = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    pre[i] = j;
                }
            }
            if (dp[i] > dp[maxIdx])
                maxIdx = i;
        }
        vector<int> ans;
        while (maxIdx != -1) {
            ans.push_back(nums[maxIdx]);
            maxIdx = pre[maxIdx];
        }
        return ans;

=======

        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> parent(n, -1);
        sort(nums.begin(), nums.end());
        int max_idx = 0;
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] % nums[j] == 0) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        parent[i] = j;
                    }
                }
            }
            if (dp[i] > dp[max_idx]) {
                max_idx = i;
            }
        }
        vector<int> res;
        while (max_idx != -1) {
            res.push_back(nums[max_idx]);
            max_idx = parent[max_idx];
        }
        return res;

=======

        int n = nums.size();
        if (n == 0) return {};
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        vector<int> pre(n, -1);
        int maxLen = 1;
        int maxIdx = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0) {
                    if (dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        pre[i] = j;
                    }
                }
            }
            if (dp[i] > maxLen) {
                maxLen = dp[i];
                maxIdx = i;
            }
        }
        vector<int> ans;
        while (maxIdx != -1) {
            ans.push_back(nums[maxIdx]);
            maxIdx = pre[maxIdx];
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0) return {};
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        vector<int> pre(n, -1);
        int maxIdx = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    pre[i] = j;
                }
            }
            if (dp[i] > dp[maxIdx]) {
                maxIdx = i;
            }
        }
        vector<int> ans;
        for (int i = maxIdx; i != -1; i = pre[i]) {
            ans.push_back(nums[i]);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> parent(n, -1);
        int mx = 0, mxIdx = -1;
        for (int i = 0; i < n; ++i) {
            for (int j = i - 1; j >= 0; --j) {
                if (nums[i] % nums[j] == 0) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        parent[i] = j;
                    }
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
                mxIdx = i;
            }
        }
        vector<int> ans;
        int i = mxIdx;
        while (i != -1) {
            ans.push_back(nums[i]);
            i = parent[i];
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        int max_len = 1;
        int max_idx = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            if (dp[i] > max_len) {
                max_len = dp[i];
                max_idx = i;
            }
        }
        vector<int> res;
        int cur = nums[max_idx];
        int cur_len = max_len;
        for (int i = max_idx; i >= 0; i--) {
            if (cur % nums[i] == 0 && dp[i] == cur_len) {
                res.push_back(nums[i]);
                cur = nums[i];
                cur_len--;
            }
        }
        return res;

=======

        vector<int> dp(nums.size(), 1);
        vector<int> prev(nums.size(), -1);
        int max_index = 0;
        sort(nums.begin(), nums.end());
        for (int i = 1; i < nums.size(); i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    prev[i] = j;
                }
            }
            if (dp[i] > dp[max_index]) {
                max_index = i;
            }
        }
        vector<int> ans;
        while (max_index != -1) {
            ans.push_back(nums[max_index]);
            max_index = prev[max_index];
        }
        return ans;
