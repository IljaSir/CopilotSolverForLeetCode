Synthesizing 10/10 solutions

=======

        int n = s.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                count++;
            }
        }
        return (n - count);

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '1') {
                ++cnt;
            }
        }
        return min(cnt, n - cnt);

=======

        int count = 0;
        while (s.find("01") != string::npos) {
            count++;
            s.replace(s.find("01"), 2, "10");
        }
        return count;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                cnt++;
            }
        }
        return min(cnt, n - cnt);

=======

        int zero = 0;
        int one = 0;
        for(char c : s){
            if(c == '0'){
                zero++;
            }else{
                one++;
            }
        }
        return min(zero, one);

=======

        int ans = 0;
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '0') {
                count++;
            }
            else {
                if (count > 0) {
                    ans++;
                    count--;
                }
            }
        }
        return ans;

=======

        int n = s.size();
        int count = 0;
        for (int i = 0; i < n; i++)
            if (s[i] == '1')
                count++;
        return min(count, n - count);

=======

        int count = 0;
        for(int i = 0; i < s.size(); i++) {
            if(s[i] == '1') {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (auto c : s) {
            if (c == '0') {
                count++;
            }
            else {
                count--;
            }
        }
        return abs(count);

=======

        int i = 0, n = s.size();
        int cnt = 0;
        while (i < n) {
            while (i < n && s[i] == '0') {
                ++i;
            }
            if (i == n) {
                break;
            }
            while (i < n && s[i] == '1') {
                ++i;
                ++cnt;
            }
        }
        return cnt;
