Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l < n - 1 && arr[l] <= arr[l + 1]) l++;
        if (l == n - 1) return 0;
        while (r > 0 && arr[r - 1] <= arr[r]) r--;
        int res = min(n - l - 1, r);
        int i = 0, j = r;
        while (i <= l && j < n) {
            if (arr[i] <= arr[j]) {
                res = min(res, j - i - 1);
                i++;
            } else {
                j++;
            }
        }
        return res;

=======

        int n = arr.size();
        int l = 0, r = n - 1;
        while (l + 1 < n && arr[l] <= arr[l + 1]) l++;
        if (l == n - 1) return 0;
        while (r - 1 >= 0 && arr[r - 1] <= arr[r]) r--;
        int res = min(n - l - 1, r);
        int i = 0, j = r;
        while (i <= l && j < n) {
            if (arr[i] <= arr[j]) {
                res = min(res, j - i - 1);
                i++;
            } else {
                j++;
            }
        }
        return res;

=======

        int n = arr.size();
        int left = 0, right = n - 1;
        while (left < n - 1 && arr[left] <= arr[left + 1]) left++;
        if (left == n - 1) return 0;
        while (right > 0 && arr[right] >= arr[right - 1]) right--;
        int result = min(n - left - 1, right);
        int i = 0, j = right;
        while (i <= left && j < n) {
            if (arr[j] >= arr[i]) {
                result = min(result, j - i - 1);
                i++;
            } else {
                j++;
            }
        }
        return result;

=======

        int n = arr.size();
        int left = 0;
        while (left + 1 < n && arr[left] <= arr[left + 1]) {
            ++left;
        }
        if (left == n - 1) {
            return 0;
        }
        int right = n - 1;
        while (right > 0 && arr[right - 1] <= arr[right]) {
            --right;
        }
        int res = min(n - left - 1, right);
        int i = 0, j = right;
        while (i <= left && j < n) {
            if (arr[j] >= arr[i]) {
                res = min(res, j - i - 1);
                ++i;
            } else {
                ++j;
            }
        }
        return res;

=======

        int n = arr.size();
        int i = 1;
        while (i < n && arr[i] >= arr[i - 1]) {
            i++;
        }
        if (i == n) {
            return 0;
        }
        int j = n - 2;
        while (j >= 0 && arr[j] <= arr[j + 1]) {
            j--;
        }
        int res = min(n - i, j + 1);
        int k = 0;
        int l = j;
        while (k < i && l < n) {
            if (arr[l] >= arr[k]) {
                res = min(res, l - k - 1);
                k++;
            } else {
                l++;
            }
        }
        return res;

=======

        int left = 0;
        int right = arr.size() - 1;
        while (left < right && arr[left] <= arr[left + 1]) {
            left++;
        }
        if (left == right) {
            return 0;
        }
        while (right > left && arr[right - 1] <= arr[right]) {
            right--;
        }
        int result = min(arr.size() - left - 1, right);
        int i = 0;
        int j = right;
        while (i <= left && j < arr.size()) {
            if (arr[i] <= arr[j]) {
                result = min(result, j - i - 1);
                i++;
            } else {
                j++;
            }
        }
        return result;

=======

        int n = arr.size();
        int start = 0;
        while(start+1 < n && arr[start] <= arr[start+1]) {
            start++;
        }
        if(start == n-1) {
            return 0;
        }
        int end = n-1;
        while(end-1 >= 0 && arr[end] >= arr[end-1]) {
            end--;
        }
        int ans = min(n-start-1, end);
        int i = 0, j = end;
        while(i <= start && j < n) {
            if(arr[j] >= arr[i]) {
                ans = min(ans, j-i-1);
                i++;
            } else {
                j++;
            }
        }
        return ans;

=======

        // Find the first index from the left that is not sorted
        // Find the first index from the right that is not sorted
        // Find the first index from the left that is greater than the right index
        // Find the first index from the right that is less than the left index
        // Return the min of the difference between the indices
        int left = 0;
        int right = arr.size() - 1;
        while(left < arr.size() - 1 && arr[left] <= arr[left + 1]) left++;
        if(left == arr.size() - 1) return 0;
        while(right > 0 && arr[right] >= arr[right - 1]) right--;
        int result = min(arr.size() - left - 1, right);
        int i = 0;
        int j = right;
        while(i <= left && j < arr.size()) {
            if(arr[i] <= arr[j]) {
                result = min(result, j - i - 1);
                i++;
            } else {
                j++;
            }
        }
        return result;
