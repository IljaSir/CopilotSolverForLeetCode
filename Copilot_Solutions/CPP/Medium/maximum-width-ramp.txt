Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            if (stack.empty() || nums[stack.back()] > nums[i]) {
                stack.push_back(i);
            }
        }
        int res = 0;
        for (int i = n - 1; i >= res; --i) {
            while (!stack.empty() && nums[stack.back()] <= nums[i]) {
                res = max(res, i - stack.back());
                stack.pop_back();
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            if (stack.empty() || nums[stack.back()] > nums[i]) {
                stack.push_back(i);
            }
        }
        int res = 0;
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.empty() && nums[stack.back()] <= nums[i]) {
                res = max(res, i - stack.back());
                stack.pop_back();
            }
        }
        return res;

=======

        int ans = 0;
        for (int i = 0; i < nums.size() - 1; ++i) {
            for (int j = nums.size() - 1; j > i; --j) {
                if (nums[i] <= nums[j]) {
                    ans = max(ans, j - i);
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> s;
        for (int i = 0; i < n; ++i) {
            if (s.empty() || nums[s.back()] > nums[i]) {
                s.push_back(i);
            }
        }
        int ans = 0;
        for (int i = n - 1; i >= 0; --i) {
            while (!s.empty() && nums[s.back()] <= nums[i]) {
                ans = max(ans, i - s.back());
                s.pop_back();
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> mins(n);
        mins[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            mins[i] = min(mins[i + 1], nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int j = upper_bound(mins.begin() + i, mins.end(), nums[i]) - mins.begin();
            ans = max(ans, j - i);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            if (stk.empty() || nums[stk.back()] > nums[i]) {
                stk.push_back(i);
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.empty() && nums[stk.back()] <= nums[i]) {
                ans = max(ans, i - stk.back());
                stk.pop_back();
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<int> v;
        for (int i = 0; i < n; i++) {
            if (v.empty() || nums[i] < nums[v.back()]) {
                v.push_back(i);
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!v.empty() && nums[i] >= nums[v.back()]) {
                res = max(res, i - v.back());
                v.pop_back();
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> idx(n, 0);
        iota(idx.begin(), idx.end(), 0);
        sort(idx.begin(), idx.end(), [&nums](int i, int j) {
            return nums[i] < nums[j];
        });
        int m = n;
        for (int i = 0; i < n; i++) {
            ans = max(ans, idx[i] - m);
            m = min(m, idx[i]);
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> minVal(n, nums[0]);
        for (int i = 1; i < n; ++i) {
            minVal[i] = min(minVal[i - 1], nums[i]);
        }
        for (int i = n - 1; i > ans; --i) {
            int l = 0, r = i;
            while (l < r) {
                int mid = l + r + 1 >> 1;
                if (minVal[mid] <= nums[i]) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            ans = max(ans, i - l);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> r(n, n);
        int k = n;
        for (int i = n - 1; i >= 0; --i) {
            while (k < n && nums[i] > nums[r[k]])
                k = r[k];
            r[i] = k;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i)
            ans = max(ans, r[i] - i);
        return ans;
