Synthesizing 10/10 solutions

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> tmp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int cnt = 0;
                for (int k = max(0, i - 1); k < min(m, i + 2); k++) {
                    for (int l = max(0, j - 1); l < min(n, j + 2); l++) {
                        if (k == i && l == j) continue;
                        if (board[k][l] == 1) cnt++;
                    }
                }
                if (board[i][j] == 1) {
                    if (cnt == 2 || cnt == 3) tmp[i][j] = 1;
                } else {
                    if (cnt == 3) tmp[i][j] = 1;
                }
            }
        }
        board = tmp;

=======

        int m = board.size(), n = board[0].size();
        vector<vector<int>> res(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int cnt = 0;
                for (int k = i - 1; k <= i + 1; k++) {
                    for (int l = j - 1; l <= j + 1; l++) {
                        if (k >= 0 && k < m && l >= 0 && l < n && (k != i || l != j)) {
                            cnt += board[k][l] & 1;
                        }
                    }
                }
                if (board[i][j] == 1) {
                    if (cnt == 2 || cnt == 3) {
                        res[i][j] = 1;
                    }
                } else {
                    if (cnt == 3) {
                        res[i][j] = 1;
                    }
                }
            }
        }
        board = res;

=======

        int m = board.size(), n = board[0].size();
        vector<vector<int>> temp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int count = 0;
                if (i > 0) {
                    count += board[i - 1][j] & 1;
                    if (j > 0) count += board[i - 1][j - 1] & 1;
                    if (j < n - 1) count += board[i - 1][j + 1] & 1;
                }
                if (i < m - 1) {
                    count += board[i + 1][j] & 1;
                    if (j > 0) count += board[i + 1][j - 1] & 1;
                    if (j < n - 1) count += board[i + 1][j + 1] & 1;
                }
                if (j > 0) count += board[i][j - 1] & 1;
                if (j < n - 1) count += board[i][j + 1] & 1;
                if (board[i][j] == 1) {
                    if (count == 2 || count == 3) temp[i][j] = 1;
                } else {
                    if (count == 3) temp[i][j] = 1;
                }
            }
        }
        board = temp;

=======

        int m = board.size();
        int n = board[0].size();
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                count = 0;
                if(i > 0 && board[i-1][j] == 1) count++;
                if(i < m-1 && board[i+1][j] == 1) count++;
                if(j > 0 && board[i][j-1] == 1) count++;
                if(j < n-1 && board[i][j+1] == 1) count++;
                if(i > 0 && j > 0 && board[i-1][j-1] == 1) count++;
                if(i > 0 && j < n-1 && board[i-1][j+1] == 1) count++;
                if(i < m-1 && j > 0 && board[i+1][j-1] == 1) count++;
                if(i < m-1 && j < n-1 && board[i+1][j+1] == 1) count++;
                if(board[i][j] == 1 && (count < 2 || count > 3)) board[i][j] = 2;
                if(board[i][j] == 0 && count == 3) board[i][j] = 3;
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 2) board[i][j] = 0;
                else if(board[i][j] == 3) board[i][j] = 1;
            }
        }

=======

        int m = board.size(), n = board[0].size();
        vector<vector<int>> ans = board;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int cnt = 0;
                if (i - 1 >= 0) {
                    if (j - 1 >= 0) cnt += board[i - 1][j - 1];
                    cnt += board[i - 1][j];
                    if (j + 1 < n) cnt += board[i - 1][j + 1];
                }
                if (j - 1 >= 0) cnt += board[i][j - 1];
                if (j + 1 < n) cnt += board[i][j + 1];
                if (i + 1 < m) {
                    if (j - 1 >= 0) cnt += board[i + 1][j - 1];
                    cnt += board[i + 1][j];
                    if (j + 1 < n) cnt += board[i + 1][j + 1];
                }
                if (board[i][j] == 1) {
                    if (cnt < 2 || cnt > 3) ans[i][j] = 0;
                } else {
                    if (cnt == 3) ans[i][j] = 1;
                }
            }
        }
        board = ans;

=======

        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> temp(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int count = 0;
                if(i - 1 >= 0){
                    if(board[i - 1][j] == 1){
                        count++;
                    }
                    if(j - 1 >= 0){
                        if(board[i - 1][j - 1] == 1){
                            count++;
                        }
                    }
                    if(j + 1 < n){
                        if(board[i - 1][j + 1] == 1){
                            count++;
                        }
                    }
                }
                if(i + 1 < m){
                    if(board[i + 1][j] == 1){
                        count++;
                    }
                    if(j - 1 >= 0){
                        if(board[i + 1][j - 1] == 1){
                            count++;
                        }
                    }
                    if(j + 1 < n){
                        if(board[i + 1][j + 1] == 1){
                            count++;
                        }
                    }
                }
                if(j - 1 >= 0){
                    if(board[i][j - 1] == 1){
                        count++;
                    }
                }
                if(j + 1 < n){
                    if(board[i][j + 1] == 1){
                        count++;
                    }
                }
                if(board[i][j] == 1){
                    if(count < 2){
                        temp[i][j] = 0;
                    }
                    else if(count == 2 || count == 3){
                        temp[i][j] = 1;
                    }
                    else{
                        temp[i][j] = 0;
                    }
                }
                else{
                    if(count == 3){
                        temp[i][j] = 1;
                    }
                    else{
                        temp[i][j] = 0;
                    }
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = temp[i][j];
            }
        }

=======

        int m = board.size(), n = board[0].size();
        vector<vector<int>> tmp(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int cnt = 0;
                for (int x = max(0, i - 1); x <= min(m - 1, i + 1); ++x) {
                    for (int y = max(0, j - 1); y <= min(n - 1, j + 1); ++y) {
                        if (x == i && y == j) continue;
                        cnt += board[x][y] & 1;
                    }
                }
                if (board[i][j] == 1 && (cnt == 2 || cnt == 3)) tmp[i][j] = 1;
                if (board[i][j] == 0 && cnt == 3) tmp[i][j] = 1;
            }
        }
        board = tmp;

=======

        int n = board.size(), m = board[0].size();
        vector<vector<int>> next = board;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                int live = 0;
                for (int x = -1; x <= 1; ++x) {
                    for (int y = -1; y <= 1; ++y) {
                        if (x == 0 && y == 0) continue;
                        if (i + x < 0 || i + x >= n || j + y < 0 || j + y >= m) continue;
                        live += board[i + x][j + y];
                    }
                }
                if (board[i][j] == 1 && (live < 2 || live > 3)) next[i][j] = 0;
                else if (board[i][j] == 0 && live == 3) next[i][j] = 1;
            }
        }
        board = next;

=======

        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> tmp(n, vector<int>(m));
        for (int i=0; i<n; i++) {
            for (int j=0; j<m; j++) {
                int cnt = 0;
                if (i-1>=0 && j-1>=0) {
                    cnt += board[i-1][j-1];
                }
                if (i-1>=0) {
                    cnt += board[i-1][j];
                }
                if (i-1>=0 && j+1<m) {
                    cnt += board[i-1][j+1];
                }
                if (j-1>=0) {
                    cnt += board[i][j-1];
                }
                if (j+1<m) {
                    cnt += board[i][j+1];
                }
                if (i+1<n && j-1>=0) {
                    cnt += board[i+1][j-1];
                }
                if (i+1<n) {
                    cnt += board[i+1][j];
                }
                if (i+1<n && j+1<m) {
                    cnt += board[i+1][j+1];
                }
                if (board[i][j] == 1) {
                    if (cnt < 2) {
                        tmp[i][j] = 0;
                    } else if (cnt == 2 || cnt == 3) {
                        tmp[i][j] = 1;
                    } else if (cnt > 3) {
                        tmp[i][j] = 0;
                    }
                } else {
                    if (cnt == 3) {
                        tmp[i][j] = 1;
                    }
                }
            }
        }
        board = tmp;

=======

        int m = board.size();
        int n = board[0].size();
        int count = 0;
        int dir[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                count = 0;
                for(int k = 0; k < 8; k++) {
                    int x = i + dir[k][0];
                    int y = j + dir[k][1];
                    if(x >= 0 && x < m && y >= 0 && y < n) {
                        if(board[x][y] == 1 || board[x][y] == 2) {
                            count++;
                        }
                    }
                }
                if(board[i][j] == 1 && (count < 2 || count > 3)) {
                    board[i][j] = 2;
                }
                if(board[i][j] == 0 && count == 3) {
                    board[i][j] = 3;
                }
            }
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                board[i][j] %= 2;
            }
        }
