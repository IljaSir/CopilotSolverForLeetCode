Synthesizing 10/10 solutions

=======

        sort(arr.begin(), arr.end());
        string ans = "";
        do {
            if (arr[0] * 10 + arr[1] < 24 && arr[2] < 6) {
                ans = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        sort(arr.begin(), arr.end());
        string ans;
        do {
            if ((arr[0] == 2 && arr[1] < 4 || arr[0] < 2) && arr[2] < 6) {
                ans = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        sort(arr.begin(), arr.end());
        string ans = "";
        do {
            if (arr[0] * 10 + arr[1] < 24 && arr[2] < 6) {
                ans = max(ans, to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]));
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        string ans = "";
        sort(arr.begin(), arr.end());
        do {
            if (arr[0] > 2 || (arr[0] == 2 && arr[1] > 3)) continue;
            if (arr[2] > 5) continue;
            ans = max(ans, to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]));
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        sort(arr.begin(), arr.end());
        string ans = "";
        do {
            if (arr[0] * 10 + arr[1] < 24 && arr[2] < 6) {
                string tmp = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
                if (tmp > ans) {
                    ans = tmp;
                }
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        sort(arr.begin(), arr.end());
        string res;
        do {
            if (arr[0] < 2 && arr[1] < 4 && arr[2] < 6) {
                res = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return res;

=======

        string res = "";
        sort(arr.begin(), arr.end());
        do {
            if ((arr[0] > 2) || (arr[0] == 2 && arr[1] > 3) || (arr[2] > 5)) continue;
            res = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
        } while(next_permutation(arr.begin(), arr.end()));
        return res;

=======

        vector<int> v;
        sort(arr.begin(), arr.end());
        do {
            if (arr[0] * 10 + arr[1] < 24 && arr[2] < 6) {
                v.push_back(arr[0] * 10 + arr[1]);
                v.push_back(arr[2] * 10 + arr[3]);
            }
        } while (next_permutation(arr.begin(), arr.end()));
        sort(v.begin(), v.end());
        if (v.empty()) return "";
        return to_string(v.back() / 100) + to_string(v.back() / 10 % 10) + ":" + to_string(v.back() % 10) + to_string(v.back() % 100 / 10);

=======

        string ans;
        sort(arr.begin(), arr.end());
        do {
            if (arr[0] < 2 && arr[1] < 4 && arr[2] < 6) {
                string tmp = to_string(arr[0]) + to_string(arr[1]) + ":" + to_string(arr[2]) + to_string(arr[3]);
                if (tmp > ans) ans = tmp;
            }
        } while (next_permutation(arr.begin(), arr.end()));
        return ans;

=======

        string ans = "";
        int max = -1;
        string s = "";
        for(int i = 0; i < 4; i++) {
            s += to_string(arr[i]);
        }
        sort(s.begin(), s.end());
        while(next_permutation(s.begin(), s.end())) {
            string hh = s.substr(0, 2);
            string mm = s.substr(2, 2);
            if(hh < "24" && mm < "60") {
                string temp = hh + ":" + mm;
                if(temp > ans) {
                    ans = temp;
                }
            }
        }
        return ans;
