Synthesizing 10/10 solutions

=======

        int n = grid.size();
        vector<int> rowMax(n, 0);
        vector<int> colMax(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rowMax[i] = max(rowMax[i], grid[i][j]);
                colMax[j] = max(colMax[j], grid[i][j]);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                res += min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }
        return res;

=======

        int n = grid.size();
        vector<int> rowMax(n, 0);
        vector<int> colMax(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rowMax[i] = max(rowMax[i], grid[i][j]);
                colMax[j] = max(colMax[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans += min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> rowMax(n, 0);
        vector<int> colMax(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rowMax[i] = max(rowMax[i], grid[i][j]);
                colMax[i] = max(colMax[i], grid[j][i]);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                res += min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }
        return res;

=======

        int n = grid.size();
        vector<int> row(n, 0);
        vector<int> col(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                row[i] = max(row[i], grid[i][j]);
                col[j] = max(col[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                ans += min(row[i], col[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> row(n, 0), col(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                row[i] = max(row[i], grid[i][j]);
                col[j] = max(col[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                ans += min(row[i], col[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> rowMax(n), colMax(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                rowMax[i] = max(rowMax[i], grid[i][j]);
                colMax[j] = max(colMax[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                ans += min(rowMax[i], colMax[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> maxRow(n, 0);
        vector<int> maxCol(n, 0);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                maxRow[i] = max(maxRow[i], grid[i][j]);
                maxCol[j] = max(maxCol[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans += min(maxRow[i], maxCol[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> top(n, 0), left(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                top[i] = max(top[i], grid[i][j]);
                left[j] = max(left[j], grid[i][j]);
            }
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                res += min(top[i], left[j]) - grid[i][j];
            }
        }
        return res;

=======

        int n = grid.size();
        vector<int> top(n, 0);
        vector<int> left(n, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                top[i] = max(top[i], grid[i][j]);
                left[j] = max(left[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                ans += min(top[i], left[j]) - grid[i][j];
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> v1(n, 0);
        vector<int> v2(n, 0);
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                v1[i] = max(v1[i], grid[i][j]);
                v2[j] = max(v2[j], grid[i][j]);
            }
        }
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                ans += min(v1[i], v2[j]) - grid[i][j];
            }
        }
        return ans;
