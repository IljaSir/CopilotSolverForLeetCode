Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        vector<int> res;
        int i = 0, j = nums.size() - 1;
        while (i < j) {
            res.push_back(nums[i++]);
            res.push_back(nums[j--]);
        }
        if (i == j) {
            res.push_back(nums[i]);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = nums.size() - 1;
        vector<int> ans;
        while (i < j) {
            ans.push_back(nums[i++]);
            ans.push_back(nums[j--]);
        }
        if (i == j) ans.push_back(nums[i]);
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0;
        int j = nums.size() - 1;
        vector<int> res;
        while (i < j) {
            res.push_back(nums[i++]);
            res.push_back(nums[j--]);
        }
        if (i == j) {
            res.push_back(nums[i]);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        vector<int> res;
        int i = 0, j = nums.size() - 1;
        while (i < j) {
            res.push_back(nums[j]);
            res.push_back(nums[i]);
            --j;
            ++i;
        }
        if (i == j) {
            res.push_back(nums[i]);
        }
        return res;

=======

        vector<int> result(nums.size());
        sort(nums.begin(), nums.end());
        int j = 0;
        for (int i = 0; i < nums.size(); i += 2) {
            result[i] = nums[j++];
        }
        for (int i = 1; i < nums.size(); i += 2) {
            result[i] = nums[j++];
        }
        return result;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> ans(n);
        int i = 0, j = n/2;
        for (int k = 0; k < n; ++k) {
            if (k % 2 == 0) {
                ans[k] = nums[i++];
            } else {
                ans[k] = nums[j++];
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0;
        int j = (nums.size() - 1) / 2 + 1;
        vector<int> result;
        while (i < j) {
            result.push_back(nums[i]);
            result.push_back(nums[j]);
            i++;
            j++;
        }
        return result;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> res(n);
        int i = 0, j = n-1;
        int k = 0;
        while (i < j) {
            res[k++] = nums[i++];
            res[k++] = nums[j--];
        }
        if (i == j) {
            res[k] = nums[i];
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        vector<int> ans(nums.size());
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < nums.size()) {
            ans[k++] = nums[j];
            j += 2;
            i++;
        }
        i = 0;
        j = 1;
        while (i < nums.size()) {
            ans[k++] = nums[j];
            j += 2;
            i++;
        }
        return ans;
