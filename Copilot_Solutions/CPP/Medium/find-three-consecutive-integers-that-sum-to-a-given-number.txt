Synthesizing 10/10 solutions

=======

        if (num < 3) return {};
        if (num % 3 == 0) return {num / 3 - 1, num / 3, num / 3 + 1};
        if (num % 3 == 1) return {num / 3 - 1, num / 3, num / 3 + 2};
        return {num / 3, num / 3 + 1, num / 3 + 2};

=======

        vector<long long> res;
        if (num <= 2) {
            return res;
        }
        if (num % 3 == 0) {
            res.push_back(num / 3 - 1);
            res.push_back(num / 3);
            res.push_back(num / 3 + 1);
        } else if (num % 3 == 1) {
            res.push_back(num / 3 - 1);
            res.push_back(num / 3);
            res.push_back(num / 3 + 2);
        } else {
            res.push_back(num / 3);
            res.push_back(num / 3 + 1);
            res.push_back(num / 3 + 2);
        }
        return res;

=======

        long long i = 1;
        while (i * (i + 1) * (i + 2) < num) {
            i++;
        }
        if (i * (i + 1) * (i + 2) == num) {
            return {i, i + 1, i + 2};
        }
        return {};

=======

        vector<long long> res;
        if (num < 3)
            return res;
        long long a = num / 3;
        long long b = a + 1;
        long long c = b + 1;
        if (a % 2 == 1 && b % 2 == 0 && c % 2 == 1)
            res = {a - 1, b, c - 1};
        else if (a % 2 == 0 && b % 2 == 1 && c % 2 == 0)
            res = {a - 1, b, c - 1};
        else if (a % 2 == 1 && b % 2 == 1 && c % 2 == 1)
            res = {a - 1, b, c - 1};
        else if (a % 2 == 0 && b % 2 == 0 && c % 2 == 0)
            res = {a - 1, b, c - 1};
        return res;

=======

        vector<long long> result;
        if (num < 3) {
            return result;
        }
        
        long long n = num / 3;
        result.push_back(n);
        result.push_back(n + 1);
        result.push_back(n + 2);
        return result;

=======

        vector<long long> result;
        long long x = num - 3;
        if (x % 3 == 0) {
            x /= 3;
            result.push_back(x);
            result.push_back(x + 1);
            result.push_back(x + 2);
        }
        return result;

=======

        vector<long long> ans;
        if (num < 3) {
            return ans;
        }
        long long a = num - 3, b = num - 2, c = num - 1;
        if (a % 3 == 0) {
            ans.push_back(a / 3);
            ans.push_back(a / 3 + 1);
            ans.push_back(a / 3 + 2);
        }
        return ans;

=======

        vector<long long> res;
        // num = a + (a + 1) + (a + 2)
        // num = a + a + 1 + a + 2
        // num = 3a + 3
        // num - 3 = 3a
        // a = (num - 3) / 3
        long long a = (num - 3) / 3;
        if (a < 0) {
            return res;
        }
        res.push_back(a);
        res.push_back(a + 1);
        res.push_back(a + 2);
        return res;

=======

        for (long long i = 0; i < num; ++i) {
            long long sum = i * (i + 1) / 2;
            if (sum > num) break;
            long long a = num - sum;
            if (a % (i + 1) == 0) {
                long long b = a / (i + 1);
                return {b, b + 1, b + i + 1};
            }
        }
        return {};

=======

        for (long long i = 1; i < 1000000; i++) {
            long long a = num - i * (i + 1) * (i + 2) / 6;
            if (a < 0) break;
            if (a % (i * (i + 1) / 2) == 0) {
                long long b = a / (i * (i + 1) / 2);
                if (b > 0) return {b, b + 1, b + 2};
            }
        }
        return {};
