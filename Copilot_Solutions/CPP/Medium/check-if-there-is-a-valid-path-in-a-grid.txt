Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        return dfs(grid, 0, 0, visited);
    }
    
    bool dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited) {
        if (i == grid.size() - 1 && j == grid[0].size() - 1) return true;
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()) return false;
        if (visited[i][j]) return false;
        visited[i][j] = true;
        if (grid[i][j] == 1) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i, j - 1, visited);
        } else if (grid[i][j] == 2) {
            return dfs(grid, i + 1, j, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == 6) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        return dfs(grid, visited, 0, 0);
    }
    
    bool dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int i, int j) {
        int m = grid.size();
        int n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) return false;
        if (visited[i][j]) return false;
        visited[i][j] = true;
        if (i == m - 1 && j == n - 1) return true;
        switch (grid[i][j]) {
            case 1: return dfs(grid, visited, i, j + 1) || dfs(grid, visited, i, j - 1);
            case 2: return dfs(grid, visited, i + 1, j) || dfs(grid, visited, i - 1, j);
            case 3: return dfs(grid, visited, i, j - 1) || dfs(grid, visited, i + 1, j);
            case 4: return dfs(grid, visited, i, j + 1) || dfs(grid, visited, i + 1, j);
            case 5: return dfs(grid, visited, i, j - 1) || dfs(grid, visited, i - 1, j);
            case 6: return dfs(grid, visited, i, j + 1) || dfs(grid, visited, i - 1, j);
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        return dfs(grid, 0, 0, visited);
    }
    bool dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited) {
        int m = grid.size();
        int n = grid[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) {
            return false;
        }
        if (visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        if (grid[i][j] == 1) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i, j - 1, visited);
        }
        if (grid[i][j] == 2) {
            return dfs(grid, i + 1, j, visited) || dfs(grid, i - 1, j, visited);
        }
        if (grid[i][j] == 3) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        }
        if (grid[i][j] == 4) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        }
        if (grid[i][j] == 5) {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        }
        if (grid[i][j] == 6) {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dir = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};
        vector<vector<int>> valid = {{1, 1, 0, 0}, {0, 0, 1, 1}, {1, 0, 0, 1}, {0, 1, 0, 1}, {0, 0, 1, 1}, {1, 1, 0, 0}};
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        visited[0][0] = true;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x == m - 1 && y == n - 1) {
                return true;
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dir[i][0];
                int ny = y + dir[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny] && valid[grid[x][y] - 1][i] && valid[grid[nx][ny] - 1][(i + 2) % 4]) {
                    q.push({nx, ny});
                    visited[nx][ny] = true;
                }
            }
        }
        return false;

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        q.push({0, 0});
        visited[0][0] = 1;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x == m - 1 && y == n - 1)
                return true;
            if (grid[x][y] == 1) {
                if (y - 1 >= 0 && visited[x][y - 1] == 0 && (grid[x][y - 1] == 1 || grid[x][y - 1] == 4 || grid[x][y - 1] == 6)) {
                    q.push({x, y - 1});
                    visited[x][y - 1] = 1;
                }
                if (y + 1 < n && visited[x][y + 1] == 0 && (grid[x][y + 1] == 1 || grid[x][y + 1] == 3 || grid[x][y + 1] == 5)) {
                    q.push({x, y + 1});
                    visited[x][y + 1] = 1;
                }
            }
            if (grid[x][y] == 2) {
                if (x - 1 >= 0 && visited[x - 1][y] == 0 && (grid[x - 1][y] == 2 || grid[x - 1][y] == 3 || grid[x - 1][y] == 4)) {
                    q.push({x - 1, y});
                    visited[x - 1][y] = 1;
                }
                if (x + 1 < m && visited[x + 1][y] == 0 && (grid[x + 1][y] == 2 || grid[x + 1][y] == 5 || grid[x + 1][y] == 6)) {
                    q.push({x + 1, y});
                    visited[x + 1][y] = 1;
                }
            }
            if (grid[x][y] == 3) {
                if (y - 1

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        q.push({0, 0});
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x == m - 1 && y == n - 1) return true;
            visited[x][y] = 1;
            if (grid[x][y] == 1) {
                if (y - 1 >= 0 && !visited[x][y - 1] && (grid[x][y - 1] == 1 || grid[x][y - 1] == 4 || grid[x][y - 1] == 6)) {
                    q.push({x, y - 1});
                }
                if (y + 1 < n && !visited[x][y + 1] && (grid[x][y + 1] == 1 || grid[x][y + 1] == 3 || grid[x][y + 1] == 5)) {
                    q.push({x, y + 1});
                }
            }
            else if (grid[x][y] == 2) {
                if (x - 1 >= 0 && !visited[x - 1][y] && (grid[x - 1][y] == 2 || grid[x - 1][y] == 3 || grid[x - 1][y] == 4)) {
                    q.push({x - 1, y});
                }
                if (x + 1 < m && !visited[x + 1][y] && (grid[x + 1][y] == 2 || grid[x + 1][y] == 5 || grid[x + 1][y] == 6)) {
                    q.push({x + 1, y});
                }
            }
            else if (grid[x][y] == 3) {
                if (y - 1 >= 0 && !visited[x][y - 1] && (grid[x][y - 1] == 1 || grid[x][y - 1] == 4 || grid[x][y - 1] == 6)) {
                    q.push({x, y -

=======

        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        visited[0][0] = true;
        vector<vector<int>> dx = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        vector<vector<int>> dir = {{}, {0, 1}, {0, 1}, {0, 3}, {1, 2}, {1, 3}, {2, 3}};
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x == n - 1 && y == m - 1) return true;
            for (int d: dir[grid[x][y]]) {
                int nx = x + dx[d][0];
                int ny = y + dx[d][1];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m || visited[nx][ny]) continue;
                if (grid[nx][ny] == 1 && (d == 0 || d == 1)) continue;
                if (grid[nx][ny] == 2 && (d == 2 || d == 3)) continue;
                if (grid[nx][ny] == 3 && (d == 0 || d == 3)) continue;
                if (grid[nx][ny] == 4 && (d == 1 || d == 3)) continue;
                if (grid[nx][ny] == 5 && (d == 0 || d == 2)) continue;
                if (grid[nx][ny] == 6 && (d == 1 || d == 2)) continue;
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        return dfs(grid, visited, 0, 0, m, n);
    }
    
    bool dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int i, int j, int m, int n) {
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] == 1) {
            return false;
        }
        visited[i][j] = 1;
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        if (grid[i][j] == 1) {
            return dfs(grid, visited, i, j + 1, m, n) || dfs(grid, visited, i, j - 1, m, n);
        }
        if (grid[i][j] == 2) {
            return dfs(grid, visited, i + 1, j, m, n) || dfs(grid, visited, i - 1, j, m, n);
        }
        if (grid[i][j] == 3) {
            return dfs(grid, visited, i, j - 1, m, n) || dfs(grid, visited, i + 1, j, m, n);
        }
        if (grid[i][j] == 4) {
            return dfs(grid, visited, i, j + 1, m, n) || dfs(grid, visited, i + 1, j, m, n);
        }
        if (grid[i][j] == 5) {
            return dfs(grid, visited, i, j - 1, m, n) || dfs(grid, visited, i - 1, j, m, n);
        }
        if (grid[i][j] == 6) {
            return dfs(grid, visited, i, j + 1, m, n) || dfs(grid, visited, i - 1, j, m, n);
        }
        return false;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> path(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        q.push({0, 0});
        path[0][0] = 1;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x == m - 1 && y == n - 1)
                return true;
            if (grid[x][y] == 1) {
                if (y - 1 >= 0 && path[x][y - 1] == 0 && (grid[x][y - 1] == 1 || grid[x][y - 1] == 4 || grid[x][y - 1] == 6)) {
                    q.push({x, y - 1});
                    path[x][y - 1] = 1;
                }
                if (y + 1 < n && path[x][y + 1] == 0 && (grid[x][y + 1] == 1 || grid[x][y + 1] == 3 || grid[x][y + 1] == 5)) {
                    q.push({x, y + 1});
                    path[x][y + 1] = 1;
                }
            } else if (grid[x][y] == 2) {
                if (x - 1 >= 0 && path[x - 1][y] == 0 && (grid[x - 1][y] == 2 || grid[x - 1][y] == 3 || grid[x - 1][y] == 4)) {
                    q.push({x - 1, y});
                    path[x - 1][y] = 1;
                }
                if (x + 1 < m && path[x + 1][y] == 0 && (grid[x + 1][y] == 2 || grid[x + 1][y] == 5 || grid[x + 1][y] == 6)) {
                    q.push({x + 1, y});
                    path[x + 1][y] = 1;
                }
            } else if (grid[x][y] == 3) {
                if (y -

=======

        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        vector<vector<int>> dir2 = {{-1,0},{1,0},{0,1},{0,-1}};
        vector<vector<int>> dir3 = {{-1,0},{0,1},{1,0},{0,-1}};
        vector<vector<int>> dir4 = {{0,1},{1,0},{0,-1},{-1,0}};
        vector<vector<int>> dir5 = {{-1,0},{0,1},{0,-1}};
        vector<vector<int>> dir6 = {{0,1},{1,0},{0,-1}};
        vector<vector<int>> dir7 = {{-1,0},{0,1},{-1,0}};
        vector<vector<int>> dir8 = {{0,1},{1,0},{0,-1}};
        vector<vector<int>> dir9 = {{-1,0},{0,1},{0,-1}};
        vector<vector<int>> dir10 = {{-1,0},{1,0},{0,-1}};
        vector<vector<int>> dir11 = {{-1,0},{1,0},{0,1}};
        vector<vector<int>> dir12 = {{0,1},{1,0},{-1,0}};
        vector<vector<int>> dir13 = {{0,1},{0,-1},{-1,0}};
        vector<vector<int>> dir14 = {{0,1},{0,-1},{1,0}};
        vector<vector<int>> dir15 = {{1,0},{0,-1},{-1,0}};
        vector<vector<int>> dir16 = {{1,0},{0,1},{-1,0}};
        vector<vector<int>> dir17 = {{1,0},{0,1},{0,-1}};
        vector<vector<int>> dir18 = {{-1,0},{0,1},{1,0}};
        vector<vector<int>> dir19 = {{0,1},{-1,0},{1,0}};
        vector<vector<int>> dir20 = {{0,-1},{-1,0},{1,0}};
        vector<vector<int>> dir21 = {{0,1},{0,-1},{-1,0},{1,0}};
        vector<vector<int>> dir
