Synthesizing 10/10 solutions

=======

        vector<int> odd;
        odd.push_back(-1);
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] & 1) odd.push_back(i);
        }
        odd.push_back(nums.size());
        int res = 0;
        for (int i = 1; i + k < odd.size(); i++) {
            res += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd.push_back(i);
            }
        }
        int m = odd.size();
        if (m < k) {
            return 0;
        }
        int ans = 0;
        for (int i = 0; i <= m - k; i++) {
            int left = i == 0 ? odd[i] + 1 : odd[i] - odd[i - 1];
            int right = i == m - k ? n - odd[i + k - 1] : odd[i + k] - odd[i + k - 1];
            ans += left * right;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) odd.push_back(i);
        }
        int m = odd.size();
        if (m < k) return 0;
        int ans = 0;
        for (int i = 0; i <= m - k; i++) {
            int left = i == 0 ? odd[i] + 1 : odd[i] - odd[i - 1];
            int right = i == m - k ? n - odd[i + k - 1] : odd[i + k] - odd[i + k - 1];
            ans += left * right;
        }
        return ans;

=======

        int n = nums.size();
        int ans = 0;
        vector<int> odd;
        odd.push_back(-1);
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                odd.push_back(i);
            }
        }
        odd.push_back(n);
        for (int i = 1; i + k < odd.size(); i++) {
            ans += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd;
        odd.push_back(-1);
        for(int i=0;i<n;i++){
            if(nums[i] % 2 == 1){
                odd.push_back(i);
            }
        }
        odd.push_back(n);
        int ans = 0;
        for(int i=1;i+k<odd.size();i++){
            ans += (odd[i] - odd[i-1]) * (odd[i+k] - odd[i+k-1]);
        }
        return ans;

=======

        int n = nums.size();
        int odd[n+1];
        odd[0] = -1;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] & 1) {
                odd[++count] = i;
            }
        }
        odd[++count] = n;
        
        int ans = 0;
        for (int i = 1; i + k <= count; i++) {
            ans += (odd[i] - odd[i-1]) * (odd[i+k] - odd[i+k-1]);
        }
        return ans;

=======

        int odd = 0;
        vector<int> odd_index;
        odd_index.push_back(-1);
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] % 2 == 1) {
                odd++;
                odd_index.push_back(i);
            }
        }
        odd_index.push_back(nums.size());
        if (odd < k) return 0;
        int ans = 0;
        for (int i = 1; i <= odd - k + 1; i++) {
            ans += (odd_index[i] - odd_index[i - 1]) * (odd_index[i + k] - odd_index[i + k - 1]);
        }
        return ans;

=======

        int odd = 0, res = 0, n = nums.size();
        vector<int> pre(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            odd += nums[i] & 1;
            pre[odd] += 1;
            if (odd >= k) res += pre[odd - k];
        }
        return res;

=======

        int n = nums.size();
        int count = 0;
        int cnt = 0;
        int l = 0;
        int r = 0;
        while (r < n) {
            if (nums[r] % 2 == 1) {
                cnt++;
            }
            while (cnt == k) {
                count++;
                if (nums[l] % 2 == 1) {
                    cnt--;
                }
                l++;
            }
            r++;
        }
        return count;

=======

        int n = nums.size();
        int odd[n+1];
        int count = 0;
        for (int i = 0; i < n; i++) {
            odd[i] = count;
            if (nums[i] % 2 != 0) {
                count++;
            }
        }
        odd[n] = count;
        int ret = 0;
        for (int i = 0; i < n; i++) {
            if (odd[i] + k <= odd[n]) {
                int j = i;
                while (odd[j] < odd[i] + k) {
                    j++;
                }
                int left = j - i;
                int right = 1;
                while (j < n && nums[j] % 2 == 0) {
                    j++;
                    right++;
                }
                ret += left * right;
                i = j - 1;
            }
        }
        return ret;
