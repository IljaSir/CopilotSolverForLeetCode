Synthesizing 7/10 solutions (Duplicates hidden)

=======

        vector<string> res;
        int n = s.size();
        for (int i = 1; i < n - 2; ++i) {
            vector<string> A = f(s.substr(1, i)), B = f(s.substr(i + 1, n - i - 2));
            for (string a: A)
                for (string b: B)
                    res.push_back("(" + a + ", " + b + ")");
        }
        return res;
    }
    vector<string> f(string s) {
        int n = s.size();
        vector<string> res;
        for (int i = 1; i <= n; ++i) {
            string left = s.substr(0, i), right = s.substr(i);
            if ((left.size() == 1 || left[0] != '0') && right.back() != '0')
                res.push_back(left + (i == n ? "" : ".") + right);
        }
        return res;

=======

        vector<string> ans;
        for (int i = 1; i < s.size() - 2; ++i) {
            auto A = f(s.substr(1, i)), B = f(s.substr(i + 1, s.size() - i - 2));
            for (auto a: A) for (auto b: B) ans.push_back("(" + a + ", " + b + ")");
        }
        return ans;
    }
    vector<string> f(string s) {
        int n = s.size();
        vector<string> ans;
        for (int i = 1; i <= n; ++i) {
            string L = s.substr(0, i), R = s.substr(i);
            if ((L.size() == 1 || L[0] != '0') && R.back() != '0') ans.push_back(L + (i == n ? "" : ".") + R);
        }
        return ans;

=======

        vector<string> res;
        for (int i = 2; i < s.size() - 1; i++) {
            vector<string> left = make(s.substr(1, i - 1));
            vector<string> right = make(s.substr(i, s.size() - i - 1));
            for (auto l: left) {
                for (auto r: right) {
                    res.push_back("(" + l + ", " + r + ")");
                }
            }
        }
        return res;
    }
    vector<string> make(string s) {
        int n = s.size();
        vector<string> res;
        if (n == 0 || (n > 1 && s[0] == '0' && s[n - 1] == '0')) return res;
        if (n > 1 && s[0] == '0') {
            res.push_back("0." + s.substr(1));
            return res;
        }
        if (n == 1 || s[n - 1] == '0') {
            res.push_back(s);
            return res;
        }
        res.push_back(s);
        for (int i = 1; i < n; i++) {
            res.push_back(s.substr(0, i) + "." + s.substr(i));
        }
        return res;

=======

        vector<string> ret;
        for (int i = 2; i < s.length() - 1; i++) {
            vector<string> left = getValid(s.substr(1, i - 1));
            vector<string> right = getValid(s.substr(i, s.length() - i - 1));
            for (string l : left) {
                for (string r : right) {
                    ret.push_back("(" + l + ", " + r + ")");
                }
            }
        }
        return ret;
    }
    vector<string> getValid(string s) {
        vector<string> ret;
        if (s.length() == 1 || s[0] != '0') {
            ret.push_back(s);
        }
        if (s.length() > 1 && s[s.length() - 1] != '0') {
            for (int i = 1; i < s.length(); i++) {
                ret.push_back(s.substr(0, i) + "." + s.substr(i));
            }
        }
        return ret;

=======

        vector<string> ret;
        int len = s.size();
        for (int i = 2; i < len - 1; ++i) {
            auto left = getNumber(s.substr(1, i - 1));
            auto right = getNumber(s.substr(i, len - i - 1));
            for (auto l : left) {
                for (auto r : right) {
                    ret.push_back("(" + l + ", " + r + ")");
                }
            }
        }
        return ret;

=======

        vector<string> result;
        for(int i=2;i<s.size()-1;i++){
            vector<string> left = getValidNumber(s.substr(1, i-1));
            vector<string> right = getValidNumber(s.substr(i, s.size()-1-i));
            for(auto l:left){
                for(auto r:right){
                    result.push_back("("+l+", "+r+")");
                }
            }
        }
        return result;
    }
    vector<string> getValidNumber(string s){
        vector<string> result;
        if(s.size()==1){
            result.push_back(s);
            return result;
        }
        if(s[0]!='0'){
            result.push_back(s);
        }
        for(int i=1;i<s.size();i++){
            if(s[i]=='0' && s[s.size()-1]=='0') continue;
            string temp = s.substr(0, i)+"."+s.substr(i);
            result.push_back(temp);
        }
        return result;
