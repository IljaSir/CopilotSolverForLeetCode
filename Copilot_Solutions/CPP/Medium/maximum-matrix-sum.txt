Synthesizing 10/10 solutions

=======

        long long sum = 0;
        int min = INT_MAX;
        int count = 0;
        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[i].size(); j++) {
                if (matrix[i][j] < 0) {
                    count++;
                }
                if (abs(matrix[i][j]) < min) {
                    min = abs(matrix[i][j]);
                }
                sum += abs(matrix[i][j]);
            }
        }
        if (count % 2 != 0) {
            sum -= 2 * min;
        }
        return sum;

=======

        long long sum = 0;
        int n = matrix.size();
        int minv = INT_MAX;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum += abs(matrix[i][j]);
                minv = min(minv, abs(matrix[i][j]));
                if (matrix[i][j] < 0) cnt++;
            }
        }
        if (cnt % 2 != 0) sum -= 2 * minv;
        return sum;

=======

        long long sum = 0;
        int n = matrix.size();
        int min = INT_MAX;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum += abs(matrix[i][j]);
                if (matrix[i][j] < 0) {
                    count++;
                }
                if (abs(matrix[i][j]) < min) {
                    min = abs(matrix[i][j]);
                }
            }
        }
        if (count % 2 == 1) {
            sum -= 2 * min;
        }
        return sum;

=======

        int n = matrix.size();
        long long sum = 0;
        int min = INT_MAX;
        int neg = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                sum += abs(matrix[i][j]);
                if (matrix[i][j] < 0) neg++;
                if (abs(matrix[i][j]) < min) min = abs(matrix[i][j]);
            }
        }
        if (neg % 2 == 0) return sum;
        return sum - 2 * min;

=======

        int n = matrix.size();
        long long sum = 0;
        int min_abs = INT_MAX;
        int neg_cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int x = abs(matrix[i][j]);
                min_abs = min(min_abs, x);
                sum += x;
                if (matrix[i][j] < 0) {
                    neg_cnt++;
                }
            }
        }
        if (neg_cnt % 2 == 0) {
            return sum;
        } else {
            return sum - 2 * min_abs;
        }

=======

        int n = matrix.size();
        int min = INT_MAX;
        long long sum = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] < 0) {
                    ++cnt;
                }
                if (abs(matrix[i][j]) < min) {
                    min = abs(matrix[i][j]);
                }
                sum += abs(matrix[i][j]);
            }
        }
        if (cnt % 2 == 0) {
            return sum;
        } else {
            return sum - 2 * min;
        }

=======

        long long sum = 0;
        int n = matrix.size();
        int minabs = INT_MAX;
        int neg = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] < 0) {
                    neg++;
                }
                sum += abs(matrix[i][j]);
                minabs = min(minabs, abs(matrix[i][j]));
            }
        }
        if (neg % 2 == 0) {
            return sum;
        }
        return sum - 2 * minabs;

=======

        int n = matrix.size();
        int neg = 0;
        int zeros = 0;
        long long sum = 0;
        int min_abs = INT_MAX;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] < 0) {
                    neg++;
                }
                if (matrix[i][j] == 0) {
                    zeros++;
                }
                min_abs = min(min_abs, abs(matrix[i][j]));
                sum += abs(matrix[i][j]);
            }
        }
        if (zeros > 0) {
            return sum;
        }
        if (neg % 2 == 0) {
            return sum;
        }
        return sum - 2 * min_abs;

=======

        int n = matrix.size();
        int count = 0;
        long long sum = 0;
        int min = 100000;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] < 0) {
                    count++;
                }
                sum += abs(matrix[i][j]);
                min = std::min(min, abs(matrix[i][j]));
            }
        }
        if(count % 2 == 0) {
            return sum;
        }
        return sum - 2 * min;

=======

        int n = matrix.size();
        int min = 100000;
        long long sum = 0;
        int negative = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j] < 0){
                    negative++;
                }
                if(abs(matrix[i][j]) < min){
                    min = abs(matrix[i][j]);
                }
                sum += abs(matrix[i][j]);
            }
        }
        if(negative % 2 == 0){
            return sum;
        }else{
            return sum - 2 * min;
        }
