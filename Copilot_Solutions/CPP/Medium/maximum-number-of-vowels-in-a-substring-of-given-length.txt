Synthesizing 10/10 solutions

=======

        int n = s.length();
        vector<int> v(n, 0);
        if (s[0] == 'a' || s[0] == 'e' || s[0] == 'i' || s[0] == 'o' || s[0] == 'u') {
            v[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {
                v[i] = v[i - 1] + 1;
            } else {
                v[i] = v[i - 1];
            }
        }
        int maxV = v[k - 1];
        for (int i = 1; i < n - k + 1; i++) {
            maxV = max(maxV, v[i + k - 1] - v[i - 1]);
        }
        return maxV;

=======

        int n = s.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            cnt += isVowel(s[i]);
            if (i >= k) {
                cnt -= isVowel(s[i - k]);
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int maxVowels = 0;
        int currentVowels = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i < k) {
                if (isVowel(s[i])) {
                    currentVowels++;
                }
            } else {
                if (isVowel(s[i])) {
                    currentVowels++;
                }
                if (isVowel(s[i - k])) {
                    currentVowels--;
                }
            }
            maxVowels = max(maxVowels, currentVowels);
        }
        return maxVowels;

=======

        int n = s.size();
        int i = 0, j = 0;
        int cnt = 0;
        int ans = 0;
        while (j < n) {
            if (s[j] == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u') {
                cnt++;
            }
            if (j - i + 1 == k) {
                ans = max(ans, cnt);
                if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {
                    cnt--;
                }
                i++;
            }
            j++;
        }
        return ans;

=======

        int res = 0;
        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (i < k) {
                cnt += isVowel(s[i]);
            } else {
                res = max(res, cnt);
                cnt += isVowel(s[i]) - isVowel(s[i - k]);
            }
        }
        res = max(res, cnt);
        return res;

=======

        int n = s.size();
        int i = 0, j = 0;
        int cnt = 0, ans = 0;
        while (j < n) {
            if (isVowel(s[j])) {
                cnt++;
            }
            if (j-i+1 == k) {
                ans = max(ans, cnt);
                if (isVowel(s[i])) {
                    cnt--;
                }
                i++;
            }
            j++;
        }
        return ans;

=======

        int n = s.size();
        int left = 0, right = 0;
        int res = 0;
        int count = 0;
        while (right < n) {
            if (isVowel(s[right])) {
                ++count;
            }
            ++right;
            if (right - left > k) {
                if (isVowel(s[left])) {
                    --count;
                }
                ++left;
            }
            res = max(res, count);
        }
        return res;

=======

        int max = 0;
        int count = 0;
        int i = 0;
        int j = 0;
        while (j < s.size()) {
            if (isVowel(s[j])) {
                count++;
            }
            if (j - i + 1 > k) {
                if (isVowel(s[i])) {
                    count--;
                }
                i++;
            }
            if (j - i + 1 == k) {
                if (count > max) {
                    max = count;
                }
            }
            j++;
        }
        return max;

=======

        int n = s.size();
        int i = 0, j = 0, cnt = 0;
        int res = 0;
        while (j < n) {
            if (isVowel(s[j])) {
                cnt++;
            }
            if (j - i + 1 == k) {
                res = max(res, cnt);
                if (isVowel(s[i])) {
                    cnt--;
                }
                i++;
            }
            j++;
        }
        return res;

=======

        int n = s.length();
        int i = 0;
        int j = 0;
        int maxVowels = 0;
        int currVowels = 0;
        while(j < n) {
            if (j - i + 1 <= k) {
                if (s[j] == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u') {
                    currVowels++;
                }
                j++;
            } else {
                if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {
                    currVowels--;
                }
                i++;
            }
            maxVowels = max(maxVowels, currVowels);
        }
        return maxVowels;
