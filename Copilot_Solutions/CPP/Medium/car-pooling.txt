Synthesizing 10/10 solutions

=======

        vector<int> stops(1001, 0);
        for (auto trip : trips) {
            stops[trip[1]] += trip[0];
            stops[trip[2]] -= trip[0];
        }
        for (auto stop : stops) {
            capacity -= stop;
            if (capacity < 0) return false;
        }
        return true;

=======

        vector<int> delta(1001);
        for (auto& trip: trips) {
            delta[trip[1]] += trip[0];
            delta[trip[2]] -= trip[0];
        }
        for (int i = 0; i < 1001; ++i) {
            capacity -= delta[i];
            if (capacity < 0) return false;
        }
        return true;

=======

        vector<int> m(1001, 0);
        for (auto &t : trips) {
            m[t[1]] += t[0];
            m[t[2]] -= t[0];
        }
        for (int i = 0; i < 1001; ++i) {
            capacity -= m[i];
            if (capacity < 0) return false;
        }
        return true;

=======

        vector<int> v(1001, 0);
        for (auto t : trips) {
            v[t[1]] += t[0];
            v[t[2]] -= t[0];
        }
        int sum = 0;
        for (auto i : v) {
            sum += i;
            if (sum > capacity) return false;
        }
        return true;

=======

        vector<int> d(1001);
        for (auto& t : trips) {
            d[t[1]] += t[0];
            d[t[2]] -= t[0];
        }
        for (int i = 0; i < 1001; i++) {
            capacity -= d[i];
            if (capacity < 0) return false;
        }
        return true;

=======

        int n = trips.size();
        vector<int> pos(1001, 0);
        for (int i = 0; i < n; i++) {
            pos[trips[i][1]] += trips[i][0];
            pos[trips[i][2]] -= trips[i][0];
        }
        for (int i = 0; i < 1001; i++) {
            capacity -= pos[i];
            if (capacity < 0) return false;
        }
        return true;

=======

        vector<int> capacityChange(1001);
        for (auto& trip : trips) {
            capacityChange[trip[1]] += trip[0];
            capacityChange[trip[2]] -= trip[0];
        }
        int currentCapacity = 0;
        for (auto change : capacityChange) {
            currentCapacity += change;
            if (currentCapacity > capacity) return false;
        }
        return true;

=======

        vector<int> c(1001, 0);
        for (auto& t : trips) {
            c[t[1]] += t[0];
            c[t[2]] -= t[0];
        }
        int s = 0;
        for (auto& x : c) {
            s += x;
            if (s > capacity) return false;
        }
        return true;

=======

        int n = trips.size();
        vector<int> a(1001, 0);
        for (auto& t : trips) {
            a[t[1]] += t[0];
            a[t[2]] -= t[0];
        }
        int c = 0;
        for (auto& x : a) {
            c += x;
            if (c > capacity) return false;
        }
        return true;

=======

        int max = 0;
        for (auto &trip : trips) {
            if (max < trip[2]) {
                max = trip[2];
            }
        }
        vector<int> v(max + 1, 0);
        for (auto &trip : trips) {
            v[trip[1]] += trip[0];
            v[trip[2]] -= trip[0];
        }
        int sum = 0;
        for (int i = 0; i < v.size(); i++) {
            sum += v[i];
            if (sum > capacity) {
                return false;
            }
        }
        return true;
