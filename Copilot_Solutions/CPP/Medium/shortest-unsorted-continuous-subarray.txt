Synthesizing 10/10 solutions

=======

        int i = 0, j = nums.size() - 1;
        while (i < nums.size() - 1 && nums[i] <= nums[i + 1]) i++;
        while (j > 0 && nums[j] >= nums[j - 1]) j--;
        if (i >= j) return 0;
        int min = nums[i], max = nums[i];
        for (int k = i; k <= j; k++) {
            if (nums[k] < min) min = nums[k];
            if (nums[k] > max) max = nums[k];
        }
        while (i > 0 && nums[i - 1] > min) i--;
        while (j < nums.size() - 1 && nums[j + 1] < max) j++;
        return j - i + 1;

=======

        int n = nums.size();
        vector<int> sorted(nums);
        sort(sorted.begin(), sorted.end());
        int i = 0, j = n - 1;
        while (i < n && nums[i] == sorted[i]) i++;
        while (j >= 0 && nums[j] == sorted[j]) j--;
        return j - i >= 0 ? j - i + 1 : 0;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < n - 1 && nums[l] <= nums[l + 1]) l++;
        while (r > 0 && nums[r] >= nums[r - 1]) r--;
        if (l >= r) return 0;
        int mn = nums[l], mx = nums[l];
        for (int i = l + 1; i <= r; i++) {
            mn = min(mn, nums[i]);
            mx = max(mx, nums[i]);
        }
        while (l > 0 && nums[l - 1] > mn) l--;
        while (r < n - 1 && nums[r + 1] < mx) r++;
        return r - l + 1;

=======

        int n = nums.size();
        vector<int> sorted = nums;
        sort(sorted.begin(), sorted.end());
        int i = 0, j = n - 1;
        while(i < n && nums[i] == sorted[i])
            i++;
        while(j > i && nums[j] == sorted[j])
            j--;
        return j - i + 1;

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < r && nums[l] <= nums[l + 1]) l++;
        while (l < r && nums[r] >= nums[r - 1]) r--;
        if (l == r) return 0;
        int minVal = INT_MAX, maxVal = INT_MIN;
        for (int i = l; i <= r; i++) {
            minVal = min(minVal, nums[i]);
            maxVal = max(maxVal, nums[i]);
        }
        while (l > 0 && nums[l - 1] > minVal) l--;
        while (r < n - 1 && nums[r + 1] < maxVal) r++;
        return r - l + 1;

=======

        int n = nums.size();
        int l = 0, r = n-1;
        while(l < n-1 && nums[l] <= nums[l+1]) l++;
        if(l == n-1) return 0;
        while(r > 0 && nums[r] >= nums[r-1]) r--;
        int minNum = INT_MAX, maxNum = INT_MIN;
        for(int i = l; i <= r; i++){
            minNum = min(minNum, nums[i]);
            maxNum = max(maxNum, nums[i]);
        }
        while(l > 0 && nums[l-1] > minNum) l--;
        while(r < n-1 && nums[r+1] < maxNum) r++;
        return r-l+1;

=======

        vector<int> sortedNums = nums;
        sort(sortedNums.begin(), sortedNums.end());
        int start = 0, end = nums.size() - 1;
        while (start < end && nums[start] == sortedNums[start]) {
            ++start;
        }
        while (end > start && nums[end] == sortedNums[end]) {
            --end;
        }
        return end - start + 1;

=======

        int n = nums.size();
        int s = 0, e = n-1, i, max, min;
        for (s = 0; s < n-1; s++) {
            if (nums[s] > nums[s+1])
                break;
        }
        if (s == n-1)
            return 0;
        for(e = n - 1; e > 0; e--) {
            if(nums[e] < nums[e-1])
                break;
        }
        min = nums[s];
        max = nums[s];
        for(i = s + 1; i <= e; i++) {
            if(nums[i] < min)
                min = nums[i];
            if(nums[i] > max)
                max = nums[i];
        }
        for( i = 0; i < s; i++) {
            if(nums[i] > min) {
                s = i;
                break;
            }
        }
        for( i = n -1; i >= e+1; i--) {
            if(nums[i] < max) {
                e = i;
                break;
            }
        }
        return e - s + 1;

=======

        int n = nums.size();
        int l = n-1, r = 0;
        stack<int> s;
        for(int i = 0; i < n; i++) {
            while(!s.empty() && nums[s.top()] > nums[i]) {
                l = min(l, s.top());
                s.pop();
            }
            s.push(i);
        }
        while(!s.empty()) s.pop();
        for(int i = n-1; i >= 0; i--) {
            while(!s.empty() && nums[s.top()] < nums[i]) {
                r = max(r, s.top());
                s.pop();
            }
            s.push(i);
        }
        return max(0, r-l+1);

=======

        int n = nums.size();
        if(n <= 1) return 0;
        vector<int> sorted(nums);
        sort(sorted.begin(), sorted.end());
        int l = 0, r = n - 1;
        while(l < n && nums[l] == sorted[l]) l++;
        while(r > 0 && nums[r] == sorted[r]) r--;
        if(l < r) return r - l + 1;
        return 0;
