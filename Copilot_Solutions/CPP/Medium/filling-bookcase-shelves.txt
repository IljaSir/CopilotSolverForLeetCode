Synthesizing 10/10 solutions

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            int width = 0, height = 0;
            for (int j = i - 1; j >= 0; --j) {
                width += books[j][0];
                if (width > shelfWidth) {
                    break;
                }
                height = max(height, books[j][1]);
                dp[i] = min(dp[i], dp[j] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int width = 0, height = 0;
            for (int j = i; j < n; ++j) {
                width += books[j][0];
                if (width > shelfWidth) break;
                height = max(height, books[j][1]);
                dp[j + 1] = min(dp[j + 1], dp[i] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int width = books[i][0];
            int height = books[i][1];
            dp[i + 1] = dp[i] + height;
            for (int j = i - 1; j >= 0 && width + books[j][0] <= shelfWidth; --j) {
                width += books[j][0];
                height = max(height, books[j][1]);
                dp[i + 1] = min(dp[i + 1], dp[j] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int width = books[i][0];
            int height = books[i][1];
            dp[i + 1] = dp[i] + height;
            for (int j = i - 1; j >= 0 && width + books[j][0] <= shelfWidth; --j) {
                height = max(height, books[j][1]);
                width += books[j][0];
                dp[i + 1] = min(dp[i + 1], dp[j] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            int h = 0, w = 0;
            for (int j = i - 1; j >= 0; --j) {
                h = max(h, books[j][1]);
                w += books[j][0];
                if (w > shelfWidth) break;
                dp[i] = min(dp[i], dp[j] + h);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, INT_MAX);
        dp[0] = 0;
        for (int i = 0; i < n; i++) {
            int sum = 0, maxH = 0;
            for (int j = i; j < n; j++) {
                sum += books[j][0];
                maxH = max(maxH, books[j][1]);
                if (sum > shelfWidth) {
                    break;
                }
                dp[j + 1] = min(dp[j + 1], dp[i] + maxH);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            int w = books[i - 1][0], h = books[i - 1][1];
            dp[i] = dp[i - 1] + h;
            for (int j = i - 1, hh = h; j > 0 && w + books[j - 1][0] <= shelfWidth; --j) {
                hh = max(hh, books[j - 1][1]);
                w += books[j - 1][0];
                dp[i] = min(dp[i], dp[j - 1] + hh);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= n; ++i){
            int width = 0, height = 0;
            for(int j = i-1; j >= 0; --j){
                width += books[j][0];
                height = max(height, books[j][1]);
                if(width > shelfWidth) break;
                dp[i] = min(dp[i], dp[j] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n+1, 0);
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            int width = books[i][0];
            int height = books[i][1];
            dp[i+1] = dp[i] + height;
            for (int j = i-1; j >= 0; --j) {
                width += books[j][0];
                height = max(height, books[j][1]);
                if (width > shelfWidth)
                    break;
                dp[i+1] = min(dp[i+1], dp[j] + height);
            }
        }
        return dp[n];

=======

        int n = books.size();
        vector<int> dp(n+1, 0);
        for(int i=1; i<=n; i++){
            int width = books[i-1][0];
            int height = books[i-1][1];
            dp[i] = dp[i-1] + height;
            for(int j=i-1; j>0 && width + books[j-1][0] <= shelfWidth; j--){
                height = max(height, books[j-1][1]);
                width += books[j-1][0];
                dp[i] = min(dp[i], dp[j-1] + height);
            }
        }
        return dp[n];
