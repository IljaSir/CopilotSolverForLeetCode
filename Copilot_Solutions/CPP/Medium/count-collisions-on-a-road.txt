Synthesizing 10/10 solutions

=======

        int n = directions.size();
        int ans = 0;
        int l = 0, r = 0;
        for (int i = 0; i < n; ++i) {
            if (directions[i] == 'L') {
                l++;
            } else if (directions[i] == 'R') {
                r++;
            } else {
                ans += l + r;
                l = 0;
                r = 0;
            }
        }
        return ans;

=======

        int n = directions.size();
        int ans = 0;
        int l = 0, r = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'L') {
                ans += r;
                l++;
            } else if (directions[i] == 'R') {
                r++;
            } else {
                ans += r;
            }
        }
        return ans;

=======

        int n = directions.size();
        int left = 0, right = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'L') {
                left++;
            } else if (directions[i] == 'R') {
                right++;
                ans += left;
            } else {
                ans += left;
            }
        }
        return ans;

=======

        int n = directions.size();
        int l = 0, r = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'L') {
                l++;
            } else if (directions[i] == 'R') {
                r++;
            } else {
                ans += min(l, r);
                l = 0;
                r = 0;
            }
        }
        return ans;

=======

        int n = directions.size();
        int ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'L') {
                cnt++;
            } else if (directions[i] == 'R') {
                ans += cnt;
            } else {
                ans += cnt & 1;
            }
        }
        return ans;

=======

        int n = directions.size();
        int ans = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'L') {
                count++;
            } else if (directions[i] == 'R') {
                ans += count;
            } else {
                ans += count / 2;
                count = (count + 1) / 2;
            }
        }
        return ans;

=======

        int n = directions.size();
        int ans = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (directions[i] == 'R') {
                ans += count;
            } else if (directions[i] == 'L') {
                count++;
            } else {
                ans += count;
            }
        }
        return ans;

=======

        int n = directions.length();
        int ans = 0;
        int l = 0, r = 0;
        for(int i = 0; i < n; i++) {
            if(directions[i] == 'L') l++;
            else if(directions[i] == 'R') r++;
            else ans += l + r;
        }
        return ans;

=======

        int n = directions.size();
        int l = 0, r = n - 1;
        int ans = 0;
        while (l < r) {
            if (directions[l] == 'R' && directions[r] == 'L') {
                ans += 2;
                l++;
                r--;
            } else if (directions[l] == 'R' && directions[r] == 'R') {
                r--;
            } else if (directions[l] == 'L' && directions[r] == 'L') {
                l++;
            } else if (directions[l] == 'L' && directions[r] == 'R') {
                l++;
                r--;
            } else if (directions[l] == 'L' && directions[r] == 'S') {
                l++;
            } else if (directions[l] == 'R' && directions[r] == 'S') {
                r--;
            } else if (directions[l] == 'S' && directions[r] == 'R') {
                r--;
            } else if (directions[l] == 'S' && directions[r] == 'L') {
                l++;
            } else {
                l++;
                r--;
            }
        }
        return ans;

=======

        int n = directions.length();
        int num = 0;
        int l = 0, r = n - 1;
        while (l < r) {
            if (directions[l] == 'L') {
                l++;
                continue;
            }
            if (directions[r] == 'R') {
                r--;
                continue;
            }
            if (directions[l] == 'R' && directions[r] == 'L') {
                num += 2;
                l++;
                r--;
                continue;
            }
            if (directions[l] == 'S' && directions[r] == 'S') {
                l++;
                r--;
                continue;
            }
            if (directions[l] == 'S' && directions[r] == 'L') {
                num++;
                l++;
                r--;
                continue;
            }
            if (directions[l] == 'R' && directions[r] == 'S') {
                num++;
                l++;
                r--;
                continue;
            }
        }
        return num;
