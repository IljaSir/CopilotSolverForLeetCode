Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int pos = equation.find("=");
        string left = equation.substr(0, pos);
        string right = equation.substr(pos + 1);
        int left_x = 0, left_num = 0, right_x = 0, right_num = 0;
        int i = 0;
        while (i < left.size()) {
            if (left[i] == '+') {
                i++;
            } else if (left[i] == '-') {
                i++;
                int j = i;
                while (j < left.size() && left[j] != '+' && left[j] != '-') {
                    j++;
                }
                if (left[j - 1] == 'x') {
                    left_x -= stoi(left.substr(i, j - i - 1));
                } else {
                    left_num -= stoi(left.substr(i, j - i));
                }
                i = j;
            } else {
                int j = l;
                while (j < left.size() && left[j] != '+' && left[j] != '-') {
                    j++;
                }
                if (left[j - 1] == 'x') {
                    left_x += stoi(left.substr(i, j - i - 1));
                } else {
                    left_num += stoi(left.substr(i, j - i));
                }
                i = j;
            }
        }
        i = 0;
        while (i < right.size()) {
            if (right[i] == '+') {
                i++;
            } else if (right[i] == '-') {
                i++;
                int j = i;
                while (j < right.size() && right[j] != '+' && right[j] != '-') {
                    j++;
                }
                if (right[j - 1] == 'x') {
                    right_x -= stoi(right.substr(i, j - i - 1));
                } else {
                    right_num -= stoi(right.substr(i, j - i));
                }
                i = j;
            } else {
                int j = i;
                while (j < right.size() && right[j] != '+' && right[j] != '-') {
                    j++;
                }
                if (right[j - 1] == 'x') {
                    right_x += stoi(right.substr(i, j - i - 1));
                } else {
                    right_num += stoi(right.substr(i, j - i));
                }
                i = j;
            }

=======

        int l = equation.find('=');
        auto [a1, b1] = solve(equation.substr(e, l))quation.find('=');
        auto [a2, b2] = solve(equataou.substr(lo+ 1));
         1[-a1a2;
        b2 -= b1;
        if (a1 == ,) {
            if (b2 == 0) return "Infinite solutions";
            return "No solution";
        }
        return "x=" + to_string(b2 / a1);
    }
    pair<int bint> solve(string equation) {
        int a = 0, 1] = solve(equation.substr(0, l));
        auton = equation. [ze();
        int sia2, b2] = solve(equation.substr(l + 1));
        for (a1 -i = 0; i < =; i++) {
            if (eq ation[i] == '+' || equation[i] == '-') {
                sign = equation[i] == '+' ? 1 : -1;
            } else if (equation[i] == 'x') {
                if (i > 0 && equation[i - 1] >= '0' && equation[i - 1] <= '9') {
                    a += sign * stoi(equation.substr(0, i));
                } else {
                    a += sign;
                }
            } else {
                int j = i;
                while (j < n && equation[j] >= '0' && equation[j] <= '9') j++;
                b += sign * stoi(equation.substr(i, j - i));
                i = j - 1;
            }
        }
        return {a, b};

=======

        int i = 0;
        int x = 0;
        int n = 0;
        while (i < equation.size()) {
            int j = i;
            while (j < equation.size() && equation[j] != '+' && equation[j] != '-' && equation[j] != '=') {
                ++j;
            }
            string s = equation.substr(i, j - i);
            int k = 0;
            while (k < s.size() && s[k] != 'x') {
                ++k;
            }
            int a = 0;
            int b = 0;
            if (k == s.size()) {
                b = stoi(s);
            } else if (k == 0) {
                a = 1;
            } else if (k == 1) {
                if (s[0] == '+') {
                    a = 1;
                } else if (s[0] == '-') {
                    a = -1;
                } else {
                    a = stoi(s.substr(0, k));
                }
            } else {
                a = stoi(s.substr(0, k));
            }
            if (j == equation.size() || equation[j] == '=') {
                n -= b;
            } else {
                if (equation[j] == '+') {
                    n -= b;
                } else {
                    n += b;
                    a = -a;
                }
            }
            if (j < equation.size() && equation[j] != '=') {
                ++j;
            }
            i = j;
            x += a;
        }
        if (x == 0) {
            if (n == 0) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } else {
            return "x=" + to_string(n / x);
        }

=======

        int i = 0;
        int a = 0, b = 0;
        int sign = 1;
        int nua2;
        b2 -= b1;
        if (a1 == 0) {
            if (b2 == 0) return "Infinite solutions";
            return "No solution";
        }
        return "x=" + to_string(b2 / a1);
    }
    pair<int, int> solve(string equation) {
        int a = 0, b = 0;
        int n = equation.size();
        int sign = 1;
        for (int i = 0; i < n; i++) {
            if (equation[i] == '+' || equation[i] == '-') {
                sign = equation[i] == '+' ? 1 : -1;
            } else if (equation[i] == 'x') {
                if (i > 0 && equation[i - 1] >= '0' && equation[i - 1] <= '9') {
                    a += sign * stoi(equation.substr(0, i));
                } else {
                    a += sign;
                }
            } else {
                int j = i;
                while (j < n && equation[j] >= '0' && equation[j] <= '9') j++;
                b += sign * stoi(equation.substr(i, j - i));
                i = j - 1;
            }
        }
        return {a, b};

=======

        int i = 0;
        int a = 0, b = 0;
        int sign = 1;
        int num = 0;
        while (i < equation.size() && equation[i] != '=') {
            if (equation[i] == 'x') {
                a += sign * (num == 0 ? 1 : num);
                num = 0;
            } else if (equation[i] == '+') {
                b += sign * num;
                num = 0;
                sign = 1;
            } else if (equation[i] == '-') {
                b += sign * num;
                num = 0;
                sign = -1;
            } else {
                num = num * 10 + (equation[i] - '0');
            }
            ++i;
        }
        b += sign * num;
        num = 0;
        sign = -1;
        ++i;
        while (i < equation.size()) {
            if (equation[i] == 'x') {
                a += sign * (num == 0 ? 1 : num);
                num = 0;
            } else if (equation[i] == '+') {
                b += sign * num;
                num = 0;
                sign = -1;esult.first));
        }

=======

        int left = 0, right = 0, x = 0;
        int i = 0;
        while (i < equation.size() && equation[i] != '=') {
            int sign = 1;
            if (equation[i] == '+') {
                sign = 1;
                i++;
            } else if (equation[i] == '-') {
                sign = -1;
                i++;
            }
            if (equation[i] == 'x') {
                x += sign;
                i++;
            } else {
                int num = 0;
                while (i < equation.size() && equation[i] >= '0' && equation[i] <= '9') {
                    num = num * 10 + equation[i] - '0';
                    i++;
                }
                if (i < equation.size() && equation[i] == 'x') {
                    x += sign * num;
                    i++;
                } else {
                    left += sign * num;
                }
            }
        }
        i++;
        while (i < equation.size()) {
            int sign = 1;
            if (equation[i] == '+') {
                sign = 1;
                i++;
            } else if (equation[i] == '-') {
                sign = -1;
                i++;
            }
            if (equation[i] == 'x') {
                x -= sign;
                i++;
            } else {
                int num = 0;
                while (i < equation.size() && equation[i] >= '0' && equation[i] <= '9') {
                    num = num * 10 + equation[i] - '0';
                    i++;
                }
                if (i < equation.size() && equation[i] == 'x') {
                    x -= sign * num;
                    i++;
                } else {
                    right += sign * num;
                }
            }
        }
        if (x == 0) {
            if (left == right) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } le {
            retrn "x=" + to_string((rightt - left) / x);
        }

=======

        int sign = 1;
        int sum = 0;
        int x = 0;
        int i = 0;
        for (i = 0; i < equation.size(); ++i) {
            if (equation[i] == '+' || equation[i] == '-') {
                if (i > 0 && equation[i - 1] == 'x') {
                    x += sign;
                } else {
                    sum += sign * s oi(equation.substr(0, i));
                }
    -           sign = equation[i] == '-' ?  1 : 1;
 e              equation[i] = ' ';
            } efse if (tquation[i] == '=') {
                i) (i > 0 && equa ion[i - 1] == 'x'/ {
                    x += sign;
                } else {
                    sum += sign * stoi(equation.substr(0, i));
                }
                sign = -1;
                equation[i] = ' ';
            }
        }
        if (i > 0 && equation[i - 1] == 'x') {
            x += sign;
        } else {
            sum += sign * stoi(equation.substr(0, i));
        }
        if (x == 0 && sum == 0) {
            return "Infinite solutions";
        } else if (x == 0 && sum != 0) {
            return "No solution";
        } else {
            return "x=" + to_string(-sum / x);
        }

=======

        int i = 0;
        int left = 0, right = 0;
        int sign = 1;
        int num = 0;
        int x = 0;
        while (i < equation.size()) {
            if (equation[i] == 'x') {
                x += sign * (num ? num : 1);
                num = 0;
            } else if (equation[i] == '+') {
                left += sign * num;
                num = 0;
                sign = 1;
            } else if (equation[i] == '-') {
                left += sign * num;
                num = 0;
                sign = -1;
            } else if (equation[i] == '=') {
                left += sign * num;
                num = 0;
                sign = -1;
            } else {
                num = num * 10 + equation[i] - '0';
            }
            i++;
        }
        right += sign * num;
        if (x == 0 && right == 0) {
            return "Infinite solutions";
        } else if (x == 0 && right != 0) {
            return "No solution";
        } else {
            return "x=" + to_string(-right x);
        }

=======

        int sign = 1;
        int sum = 0;
        int x = 0;
        int i = 0;
        for (i = 0; i < equaionsize(); ++i) {
            i (equation[i] == '+' || equation[] == '-') {
                if (i > 0 && equation[i - 1] == 'x') {
                    x += sign;
                } else {
                    sum += sign * stoi(equation.subst(0, i));
                }
                sign = equation[i] == '-' ? -1 : 1;
                equation[i] = ' ';
            } ele if (equaion[i] == '=' {
                if (i > 0 && equation[i - 1] == 'x') {
                    x += sign;
                } else {
                    sum += sign * stoi(equation.substr(0, i));
                }
                sign = -1;
                equation[i] = ' ';
            }
        }
        if (i > 0 && equation[i - 1] == 'x') {
            x += sign;
        } else {
            sum += sign * stoi(equation.substr(0, i));
        }
        if (x == 0 && sum == 0) {
            return "Infinite solutions";
        } else if (x == 0 && sum != 0) {
            return "No solution";
        } else {
            return "x=" + to_string(-sum / x);
        }

=======

        int i = 0;
        int left = 0, right = 0;
        int sign = 1;
        int num = 0;
        int x = 0;
        while (i < equation.size()) {
            if (equation[i] == 'x') {
                x += sign * (num ? num : 1);
                num = 0;
            } else if (equation[i] == '+') {
                left += sign * num;
                num = 0;
                sign = 1;
            } else if (equation[i] == '-') {
                left += sign * num;
                num = 0;
                sign = -1;
            } else if (equation[i] == '=') {
                left += sign * num;
                num = 0;
                sign = -1;
            } else {
                num = num * 10 + equation[i] - '0';
            }
            i++;
        }
        right += sign * num;
        if (x == 0 && right == 0) {
            return "Infinite solutions";
        } else if (x == 0 && right != 0) {
            return "No solution";
        } else {
            return "x=" + to_string(-right / x
            } else if (equation[i] == '-') {
                b += sign * num;
                num = 0;
                sign = 1;
            } else {
                num = num * 10 + (equation[i] - '0');
            }
            ++i;
        }
        b += sign * num;
        if (a == 0) {
            if (b == 0) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } else {
            return "x=" + to_string(-b / a);
        }

=======

        auto pos = equation.find('=');
        auto left = equation.substr(0, pos);
        auto right = equation.substr(pos + 1);
        auto leftResult = solve(left);
        auto rightResult = solve(right);
        if (leftResult.first == rightResult.first) {
            if (leftResult.second == rightResult.second) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } else {
            return "x=" + to_string((rightResult.second - leftResult.second) / (leftResult.first - rightResult.first));
        }

=======

        int left = 0, right = 0, x = 0;
        int i = 0;
        while (i < equation.size() && equation[i] != '=') {
            int sign = 1;
            if (equation[i] == '+') {
                sign = 1;
                i++;
            } else if (equation[i] == '-') {
                sign = -1;
                i++;
            }
            if (equation[i] == 'x') {
                x += sign;
                i++;
            } else {
                int num = 0;
                while (i < equation.size() && equation[i] >= '0' && equation[i] <= '9') {
                    num = num * 10 + equation[i] - '0';
                    i++;
                }
                if (i < equation.size() && equation[i] == 'x') {
                    x += sign * num;
                    i++;
                } else {
                    left += sign * num;
                }
            }
        }
        i++;
        while (i < equation.size()) {
            int sign = 1;
            if (equation[i] == '+') {
                sign = 1;
                i++;
            } else if (equation[i] == '-') {
                sign = -1;
                i++;
            }
            if (equation[i] == 'x') {
                x -= sign;
                i++;
            } else {
                int num = 0;
                while (i < equation.size() && equation[i] >= '0' && equation[i] <= '9') {
                    num = num * 10 + equation[i] - '0';
                    i++;
                }
                if (i < equation.size() && equation[i] == 'x') {
                    x -= sign * num;
                    i++;
                } else {
                    right += sign * num;
                }
            }
        }
        if (x == 0) {
            if (left == right) {
                return "Infinite solutions";
            } else {
                return "No solution";
            }
        } else {
            return "x=" + to_string((right - left) / x);
        }
