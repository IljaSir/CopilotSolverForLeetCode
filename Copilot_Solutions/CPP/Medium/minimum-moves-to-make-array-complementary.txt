Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2);
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[min(a, b) + 1] -= 1;
            diff[a + b] -= 1;
            diff[a + b + 1] += 1;
            diff[max(a, b) + limit + 1] += 1;
        }
        int ans = n, cur = 0;
        for (int i = 2; i <= limit * 2; ++i) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2);
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[min(a, b) + 1] -= 1;
            diff[a + b] -= 1;
            diff[a + b + 1] += 1;
            diff[max(a, b) + limit + 1] += 1;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= limit * 2; ++i) {
            cur += diff[i];
            res = min(res, cur);
        }
        return res;

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2);
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[min(a, b) + 1]--;
            diff[a + b]--;
            diff[a + b + 1]++;
            diff[max(a, b) + limit + 1]++;
        }
        int ans = n, cur = 0;
        for (int i = 2; i <= limit * 2; ++i) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2);
        for (int i = 0; i < n / 2; ++i) {
            int a = nums[i], b = nums[n - 1 - i];
            int s = a + b;
            diff[2] += 2;
            diff[s] -= 1;
            diff[s + 1] += 1;
            diff[a + b + 1] -= 1;
            diff[a + b + limit + 1] += 1;
        }
        int ans = n, cur = n;
        for (int i = 2; i <= limit * 2; ++i) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2);
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[min(a, b) + 1]--;
            diff[a + b]--;
            diff[a + b + 1]++;
            diff[max(a, b) + limit + 1]++;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= limit * 2; i++) {
            cur += diff[i];
            res = min(res, cur);
        }
        return res;

=======

        int n = nums.size();
        vector<int> diff(limit * 2 + 2, 0);
        for (int i = 0; i < n / 2; i++) {
            int a = nums[i], b = nums[n - 1 - i];
            diff[2] += 2;
            diff[min(a, b) + 1] -= 1;
            diff[a + b] -= 1;
            diff[a + b + 1] += 1;
            diff[max(a, b) + limit + 1] += 1;
        }
        int ans = n, cur = 0;
        for (int i = 2; i <= limit * 2; i++) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(limit*2+2, 0);
        for (int i = 0; i < n/2; ++i) {
            int a = nums[i], b = nums[n-1-i];
            diff[2] += 2;
            diff[min(a,b)+1] -= 1;
            diff[a+b] -= 1;
            diff[a+b+1] += 1;
            diff[max(a,b)+limit+1] += 1;
        }
        int res = n, cur = 0;
        for (int i = 2; i <= limit*2; ++i) {
            cur += diff[i];
            res = min(res, cur);
        }
        return res;

=======

        int n = nums.size();
        vector<int> diff(limit*2+2, 0);
        for (int i = 0; i < n/2; ++i) {
            int a = nums[i], b = nums[n-1-i];
            diff[2] += 2;
            diff[min(a, b)+1] -= 1;
            diff[a+b] -= 1;
            diff[a+b+1] += 1;
            diff[max(a, b)+limit+1] += 1;
        }
        int ans = n, cur = 0;
        for (int i = 2; i <= limit*2; ++i) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> diff(limit*2+2);
        for (int i=0, j=n-1; i<j; i++, j--) {
            int a = nums[i], b = nums[j];
            diff[2] += 2;
            diff[min(a,b)+1] -= 1;
            diff[a+b] -= 1;
            diff[a+b+1] += 1;
            diff[max(a,b)+limit+1] += 1;
        }
        int ans = n, cur = 0;
        for (int i=2; i<=limit*2; i++) {
            cur += diff[i];
            ans = min(ans, cur);
        }
        return ans;
