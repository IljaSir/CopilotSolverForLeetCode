Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int a = 0, b = 0, c = 0;
        for (auto& t : triplets) {
            if (t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                a = max(a, t[0]);
                b = max(b, t[1]);
                c = max(c, t[2]);
            }
        }
        return a == target[0] && b == target[1] && c == target[2];

=======

        int a = 0, b = 0, c = 0;
        for (const auto& t : triplets) {
            if (t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                a = max(a, t[0]);
                b = max(b, t[1]);
                c = max(c, t[2]);
            }
        }
        return a == target[0] && b == target[1] && c == target[2];

=======

        int x = target[0], y = target[1], z = target[2];
        int a = 0, b = 0, c = 0;
        for (auto& t : triplets) {
            if (t[0] <= x && t[1] <= y && t[2] <= z) {
                a = max(a, t[0]);
                b = max(b, t[1]);
                c = max(c, t[2]);
            }
        }
        return a == x && b == y && c == z;

=======

        int r = 0, g = 0, b = 0;
        for (auto& t : triplets) {
            if (t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2]) {
                r = max(r, t[0]);
                g = max(g, t[1]);
                b = max(b, t[2]);
            }
        }
        return r == target[0] && g == target[1] && b == target[2];

=======

        int x = target[0], y = target[1], z = target[2];
        int a, b, c;
        a = b = c = 0;
        for (auto t : triplets) {
            if (t[0] <= x && t[1] <= y && t[2] <= z) {
                a = max(a, t[0]);
                b = max(b, t[1]);
                c = max(c, t[2]);
            }
        }
        return a == x && b == y && c == z;

=======

        int x = target[0], y = target[1], z = target[2];
        int x1 = 0, y1 = 0, z1 = 0;
        for (auto &v : triplets) {
            if (v[0] <= x && v[1] <= y && v[2] <= z) {
                x1 = max(x1, v[0]);
                y1 = max(y1, v[1]);
                z1 = max(z1, v[2]);
            }
        }
        return x1 == x && y1 == y && z1 == z;

=======

        int x = target[0], y = target[1], z = target[2], a, b, c;
        for (auto& t : triplets) {
            if (t[0] <= x && t[1] <= y && t[2] <= z) {
                a = max(a, t[0]);
                b = max(b, t[1]);
                c = max(c, t[2]);
            }
        }
        return a == x && b == y && c == z;
