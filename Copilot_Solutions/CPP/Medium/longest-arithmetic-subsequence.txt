Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<unordered_map<int, int>> dp(n);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i];
                if (dp[i].find(diff) != dp[i].end()) {
                    dp[j][diff] = dp[i][diff] + 1;
                } else {
                    dp[j][diff] = 2;
                }
                ans = max(ans, dp[j][diff]);
            }
        }
        return ans;

=======

        int n = nums.size();
        int res = 2;
        vector<unordered_map<int, int>> dp(n);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                int d = nums[i] - nums[j];
                dp[i][d] = dp[j][d] + 1;
                res = max(res, dp[i][d] + 1);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(1001, 1));
        int res = 2;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                int diff = nums[i] - nums[j] + 500;
                dp[i][diff] = dp[j][diff] + 1;
                res = max(res, dp[i][diff]);
            }
        }
        return res;

=======

        int n = nums.size();
        int dp[n][1001];
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int diff = nums[j] - nums[i] + 500;
                dp[j][diff] = max(dp[j][diff], dp[i][diff] + 1);
                ans = max(ans, dp[j][diff] + 1);
            }
        }
        return ans;

=======

        int n = nums.size();
        int dp[n][1001];
        memset(dp, 0, sizeof(dp));
        int ans = 0;
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                int diff = nums[i] - nums[j] + 500;
                dp[i][diff] = max(dp[i][diff], 1 + dp[j][diff]);
                ans = max(ans, dp[i][diff]);
            }
        }
        return ans + 1;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 2));
        int ans = 2;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = 0; k < i; k++) {
                    if (nums[i] - nums[k] == nums[j] - nums[i]) {
                        dp[i][j] = dp[k][i] + 1;
                        ans = max(ans, dp[i][j]);
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n, 1));
        int res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int d = nums[j] - nums[i];
                for (int k = i - 1; k >= 0; k--) {
                    if (nums[i] - nums[k] == d) {
                        dp[i][j] = dp[k][i] + 1;
                        break;
                    }
                }
                res = max(res, dp[i][j]);
            }
        }
        return res;

=======

        int n = nums.size();
        if (n < 2) return 0;
        int res = 0;
        vector<unordered_map<int, int>> dp(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                int diff = nums[i] - nums[j];
                if (dp[j].find(diff) != dp[j].end()) {
                    dp[i][diff] = dp[j][diff] + 1;
                } else {
                    dp[i][diff] = 2;
                }
                res = max(res, dp[i][diff]);
            }
        }
        return res;

=======

        int n = nums.size();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        int ans = 2;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                int target = 2 * nums[i] - nums[j];
                dp[i][j] = 2;
                for(int k = i - 1; k >= 0; k--) {
                    if(nums[k] == target) {
                        dp[i][j] = max(dp[i][j], dp[k][i] + 1);
                    }
                }
                ans = max(ans, dp[i][j]);
            }
        }
        return ans;

=======

        int n = nums.size();
        int dp[n][1001];
        memset(dp, 0, sizeof(dp));
        int max_len = 0;
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                int diff = nums[i] - nums[j] + 500;
                dp[i][diff] = max(dp[i][diff], dp[j][diff] + 1);
                max_len = max(max_len, dp[i][diff]);
            }
        }
        return max_len + 1;
