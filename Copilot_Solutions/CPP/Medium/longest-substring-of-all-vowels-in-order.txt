Synthesizing 10/10 solutions

=======

        int n = word.size();
        int ans = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && word[j] == word[i]) j++;
            if (word[i] != 'a') break;
            int k = j;
            while (k < n && word[k] > word[k - 1]) k++;
            if (word[k - 1] != 'u') {
                i = k;
                continue;
            }
            ans = max(ans, k - i);
            i = j;
        }
        return ans;

=======

        int n = word.length();
        if (n < 5) return 0;
        int i = 0;
        int j = 0;
        int res = 0;
        while (i < n) {
            while (i < n && word[i] != 'a') i++;
            if (i == n) break;
            j = i;
            while (j < n && word[j] == 'a') j++;
            if (j == n) break;
            while (j < n && word[j] == 'e') j++;
            while (j < n && word[j] == 'i') j++;
            while (j < n && word[j] == 'o') j++;
            while (j < n && word[j] == 'u') j++;
            if (j == n) break;
            res = max(res, j - i);
            i = j;
        }
        return res;

=======

        int maxLen = 0;
        char c = 'a';
        int len = 0;
        for (int i = 0; i < word.size(); i++) {
            if (word[i] == c) {
                len++;
            } else if (word[i] > c) {
                c = word[i];
                len++;
            } else {
                if (c == 'u') {
                    maxLen = max(maxLen, len);
                }
                c = word[i];
                len = 1;
            }
        }
        if (c == 'u') {
            maxLen = max(maxLen, len);
        }
        return maxLen;

=======

        int l = 0, r = 0, n = word.length();
        int res = 0;
        while (r < n) {
            while (r < n && word[r] == 'a') r++;
            while (r < n && word[r] == 'e') r++;
            while (r < n && word[r] == 'i') r++;
            while (r < n && word[r] == 'o') r++;
            while (r < n && word[r] == 'u') r++;
            if (word[r - 1] == 'u') res = max(res, r - l);
            while (r < n && word[r] != 'a') r++;
            l = r;
        }
        return res;

=======

        int n = word.length(), i = 0, j = 0, res = 0;
        while (i < n) {
            while (j < n && word[j] >= word[i]) {
                i = j;
                j++;
            }
            while (j < n && word[j] < word[i]) {
                i = j;
                j++;
            }
            if (word[i] != 'a') {
                i = j;
                j++;
            } else {
                while (j < n && word[j] == word[i]) {
                    j++;
                }
                if (word[j - 1] == 'u') {
                    res = max(res, j - i);
                }
                i = j;
                j++;
            }
        }
        return res;

=======

        int i = 0, j = 0, n = word.size(), ans = 0;
        while (j < n) {
            while (j < n && word[j] == word[j + 1]) {
                j++;
            }
            if (word[j] == 'a') {
                while (j < n && word[j] <= word[j + 1]) {
                    j++;
                }
                if (word[j] == 'u') {
                    ans = max(ans, j - i + 1);
                }
            }
            i = j;
            j++;
        }
        return ans;

=======

        int i = 0, j = 0, n = word.size(), ans = 0;
        while (i < n) {
            char c = word[i];
            if (c != 'a') return ans;
            while (j < n && word[j] == c) ++j;
            if (j == n) return ans;
            c = word[j];
            while (j < n && word[j] == c) ++j;
            if (j == n) return ans;
            c = word[j];
            while (j < n && word[j] == c) ++j;
            if (j == n) return ans;
            c = word[j];
            while (j < n && word[j] == c) ++j;
            if (j == n) return ans;
            c = word[j];
            while (j < n && word[j] == c) ++j;
            ans = max(ans, j - i);
            i = j;
        }
        return ans;

=======

        int l = 0, r = 0;
        int ans = 0;
        int n = word.size();
        while (r < n) {
            if (l == r) {
                if (word[r] != 'a') {
                    l++;
                    r++;
                } else {
                    r++;
                }
            } else {
                if (word[r] >= word[r-1]) {
                    if (word[r] == 'u') {
                        ans = max(ans, r - l + 1);
                        l = r;
                    }
                    r++;
                } else {
                    l = r;
                }
            }
        }
        return ans;

=======

        int n = word.size();
        int ans = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            char c = word[i];
            while (j < n && word[j] >= c) {
                c = word[j];
                j++;
            }
            if (c == 'u') {
                ans = max(ans, j - i);
            }
            i = j - 1;
        }
        return ans;

=======

        int n = word.size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            int j = i;
            int cnt = 1;
            while(j < n - 1 && word[j] <= word[j + 1]) {
                if(word[j] != word[j + 1]) {
                    cnt++;
                }
                j++;
            }
            if(cnt == 5) {
                ans = max(ans, j - i + 1);
            }
            i = j;
        }
        return ans;
