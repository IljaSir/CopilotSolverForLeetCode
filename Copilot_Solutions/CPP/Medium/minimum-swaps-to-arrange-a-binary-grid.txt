Synthesizing 9/10 solutions

=======

        int n = grid.size();
        vector<int> zeros(n);
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) cnt++;
                else break;
            }
            zeros[i] = cnt;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (zeros[i] >= n - i - 1) continue;
            int j = i + 1;
            while (j < n && zeros[j] < n - i - 1) j++;
            if (j == n) return -1;
            res += j - i;
            while (j > i) {
                zeros[j] = zeros[j - 1];
                j--;
            }
        }
        return res;

=======

        int n = grid.size();
        vector<int> zeros(n, 0);
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) cnt++;
                else break;
            }
            zeros[i] = cnt;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && zeros[j] < n - i - 1) j++;
            if (j == n) return -1;
            ans += j - i;
            while (j > i) {
                swap(zeros[j], zeros[j - 1]);
                j--;
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> zeros(n, 0);
        for (int i = 0; i < n; ++i) {
            int j = n - 1;
            while (j >= 0 && grid[i][j] == 0) --j;
            zeros[i] = j;
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (zeros[i] >= n - i - 1) continue;
            int j = i + 1;
            while (j < n && zeros[j] < n - i - 1) ++j;
            if (j == n) return -1;
            res += j - i;
            while (j > i) {
                swap(zeros[j], zeros[j - 1]);
                --j;
            }
        }
        return res;

=======

        int n = grid.size();
        vector<int> zeros(n, 0);
        for(int i = 0; i < n; ++i) {
            for(int j = n - 1; j >= 0; --j) {
                if(grid[i][j] == 0) {
                    zeros[i]++;
                } else {
                    break;
                }
            }
        }
        int ans = 0;
        for(int i = 0; i < n; ++i) {
            int j = i;
            while(j < n && zeros[j] < n - i - 1) {
                j++;
            }
            if(j == n) {
                return -1;
            }
            ans += j - i;
            for(int k = j; k > i; --k) {
                swap(zeros[k], zeros[k - 1]);
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> lastZero(n, n);
        for (int i = 0; i < n; ++i) {
            for (int j = n - 1; j >= 0; --j) {
                if (grid[i][j] == 0) {
                    lastZero[i] = j;
                } else {
                    break;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (lastZero[i] >= n - i - 1) {
                continue;
            }
            int j = i + 1;
            while (j < n && lastZero[j] < n - i - 1) {
                ++j;
            }
            if (j == n) {
                return -1;
            }
            ans += j - i;
            for (int k = j; k > i; --k) {
                swap(lastZero[k], lastZero[k - 1]);
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> rows(n);
        for (int i = 0; i < n; i++) {
            int j = n - 1;
            while (j >= 0 && grid[i][j] == 0) j--;
            rows[i] = j;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (rows[i] >= n - 1 - i) continue;
            int j = i + 1;
            while (j < n && rows[j] < n - 1 - i) j++;
            if (j == n) return -1;
            ans += j - i;
            while (j > i) {
                swap(rows[j], rows[j - 1]);
                j--;
            }
        }
        return ans;

=======

        int n = grid.size();
        vector<int> arr(n, 0);
        for (int i = 0; i < n; ++i) {
            int count = 0;
            for (int j = n - 1; j >= 0; --j) {
                if (grid[i][j] == 0) {
                    ++count;
                } else {
                    break;
                }
            }
            arr[i] = count;
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int minIdx = i;
            for (int j = i + 1; j < n; ++j) {
                if (arr[j] >= n - i - 1) {
                    minIdx = j;
                    break;
                }
            }
            if (minIdx == i) {
                return -1;
            }
            for (int j = minIdx; j > i; --j) {
                swap(arr[j], arr[j - 1]);
                ++res;
            }
        }
        return res;

=======

        vector<int> zeros(grid.size(), 0);
        for (int i = 0; i < grid.size(); ++i) {
            int j = grid.size() - 1;
            while (j >= 0 && grid[i][j] == 0) {
                ++zeros[i];
                --j;
            }
        }
        int res = 0;
        for (int i = 0; i < zeros.size(); ++i) {
            if (zeros[i] >= zeros.size() - i - 1) continue;
            int j = i + 1;
            while (j < zeros.size() && zeros[j] < zeros.size() - i - 1) ++j;
            if (j == zeros.size()) return -1;
            while (j > i) {
                swap(zeros[j], zeros[j - 1]);
                --j;
                ++res;
            }
        }
        return res;

=======

        int n = grid.size();
        int ans = 0;
        for(int i=0; i<n; i++) {
            int j = i;
            while(j<n && grid[j][i] == 0) j++;
            if(j == n) return -1;
            ans += j-i;
            for(int k=j; k>i; k--) {
                swap(grid[k], grid[k-1]);
            }
        }
        return ans;
