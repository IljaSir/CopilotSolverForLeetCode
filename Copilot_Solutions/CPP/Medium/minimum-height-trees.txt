Synthesizing 10/10 solutions

=======

        vector<int> res;
        if (n == 1) {
            res.push_back(0);
            return res;
        }
        vector<vector<int>> graph(n);
        vector<int> degree(n, 0);
        for (auto edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            res.clear();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int node = q.front();
                q.pop();
                res.push_back(node);
                for (int neighbor : graph[node]) {
                    degree[neighbor]--;
                    if (degree[neighbor] == 1) {
                        q.push(neighbor);
                    }
                }
            }
        }
        return res;

=======

        vector<int> ans;
        if (n == 1) {
            ans.push_back(0);
            return ans;
        }
        vector<vector<int>> graph(n);
        vector<int> degree(n, 0);
        for (auto edge: edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            ans.clear();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int node = q.front();
                q.pop();
                ans.push_back(node);
                for (auto neighbor: graph[node]) {
                    degree[neighbor]--;
                    if (degree[neighbor] == 1) {
                        q.push(neighbor);
                    }
                }
            }
        }
        return ans;

=======

        vector<int> res;
        if (n == 1) {
            res.push_back(0);
            return res;
        }
        vector<int> degree(n, 0);
        vector<vector<int>> graph(n, vector<int>());
        for (int i = 0; i < edges.size(); ++i) {
            ++degree[edges[i][0]];
            ++degree[edges[i][1]];
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (degree[i] == 1) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            res.clear();
            int k = q.size();
            for (int i = 0; i < k; ++i) {
                int t = q.front();
                q.pop();
                res.push_back(t);
                for (int j = 0; j < graph[t].size(); ++j) {
                    --degree[graph[t][j]];
                    if (degree[graph[t][j]] == 1) {
                        q.push(graph[t][j]);
                    }
                }
            }
        }
        return res;

=======

        vector<int> result;
        if (n == 1) {
            result.push_back(0);
            return result;
        }
        vector<unordered_set<int>> graph(n);
        for (auto edge : edges) {
            graph[edge[0]].insert(edge[1]);
            graph[edge[1]].insert(edge[0]);
        }
        vector<int> leaves;
        for (int i = 0; i < n; i++) {
            if (graph[i].size() == 1) {
                leaves.push_back(i);
            }
        }
        while (n > 2) {
            n -= leaves.size();
            vector<int> newLeaves;
            for (int i = 0; i < leaves.size(); i++) {
                int j = *graph[leaves[i]].begin();
                graph[j].erase(leaves[i]);
                if (graph[j].size() == 1) {
                    newLeaves.push_back(j);
                }
            }
            leaves = newLeaves;
        }
        return leaves;

=======

        vector<vector<int>> adj(n);
        vector<int> degree(n);
        for (auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        vector<int> leaves;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) {
                leaves.push_back(i);
            }
        }
        while (n > 2) {
            vector<int> newLeaves;
            for (auto& leaf : leaves) {
                for (auto& node : adj[leaf]) {
                    degree[node]--;
                    if (degree[node] == 1) {
                        newLeaves.push_back(node);
                    }
                }
            }
            leaves = newLeaves;
            n -= leaves.size();
        }
        return leaves;

=======

        vector<set<int>> adj(n);
        for (auto& e : edges) {
            adj[e[0]].insert(e[1]);
            adj[e[1]].insert(e[0]);
        }
        vector<int> leaves;
        for (int i = 0; i < n; ++i) {
            if (adj[i].size() == 1) {
                leaves.push_back(i);
            }
        }
        while (n > 2) {
            n -= leaves.size();
            vector<int> newLeaves;
            for (auto& i : leaves) {
                int j = *adj[i].begin();
                adj[j].erase(i);
                if (adj[j].size() == 1) {
                    newLeaves.push_back(j);
                }
            }
            leaves = newLeaves;
        }
        return leaves;

=======

        vector<int> res;
        if (n == 1) {
            res.push_back(0);
            return res;
        }
        vector<unordered_set<int>> graph(n);
        for (auto &edge : edges) {
            graph[edge[0]].insert(edge[1]);
            graph[edge[1]].insert(edge[0]);
        }
        queue<int> q;
        for (int i = 0; i < n; ++i) {
            if (graph[i].size() == 1) {
                q.push(i);
            }
        }
        while (n > 2) {
            int size = q.size();
            n -= size;
            for (int i = 0; i < size; ++i) {
                int t = q.front();
                q.pop();
                for (auto a : graph[t]) {
                    graph[a].erase(t);
                    if (graph[a].size() == 1) {
                        q.push(a);
                    }
                }
            }
        }
        while (!q.empty()) {
            res.push_back(q.front());
            q.pop();
        }
        return res;

=======

        vector<int> ret;
        if (n == 0) return ret;
        if (n == 1) {
            ret.push_back(0);
            return ret;
        }
        vector<vector<int>> graph(n);
        vector<int> degree(n, 0);
        for (auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) q.push(i);
        }
        while (!q.empty()) {
            ret.clear();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int node = q.front();
                q.pop();
                ret.push_back(node);
                for (int j = 0; j < graph[node].size(); j++) {
                    degree[graph[node][j]]--;
                    if (degree[graph[node][j]] == 1) q.push(graph[node][j]);
                }
            }
        }
        return ret;

=======

        if (n == 1) return {0};
        vector<int> ans;
        vector<int> degree(n);
        vector<vector<int>> graph(n);
        for (auto& edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            ans.clear();
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int node = q.front();
                q.pop();
                ans.push_back(node);
                for (int j = 0; j < graph[node].size(); j++) {
                    if (--degree[graph[node][j]] == 1) {
                        q.push(graph[node][j]);
                    }
                }
            }
        }
        return ans;

=======

        // 1. build graph
        vector<vector<int>> graph(n, vector<int>());
        for (auto &e : edges) {
            graph[e[0]].push_back(e[1]);
            graph[e[1]].push_back(e[0]);
        }
        
        // 2. find leaves
        vector<int> leaves;
        for (int i = 0; i < graph.size(); i++) {
            if (graph[i].size() == 1) {
                leaves.push_back(i);
            }
        }
        
        // 3. remove leaves
        while (n > 2) {
            n -= leaves.size();
            vector<int> newLeaves;
            for (int i = 0; i < leaves.size(); i++) {
                int j = graph[leaves[i]][0];
                graph[j].erase(find(graph[j].begin(), graph[j].end(), leaves[i]));
                if (graph[j].size() == 1) {
                    newLeaves.push_back(j);
                }
            }
            leaves = newLeaves;
        }
        
        return leaves;
