Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = scores.size();
        vector<pair<int, int>> players(n);
        for (int i = 0; i < n; ++i) {
            players[i] = {ages[i], scores[i]};
        }
        sort(players.begin(), players.end());
        vector<int> dp(n);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            dp[i] = players[i].second;
            for (int j = 0; j < i; ++j) {
                if (players[j].second <= players[i].second) {
                    dp[i] = max(dp[i], dp[j] + players[i].second);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.size();
        vector<pair<int, int>> players(n);
        for (int i = 0; i < n; ++i) {
            players[i] = {ages[i], scores[i]};
        }
        sort(players.begin(), players.end());
        vector<int> dp(n);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            dp[i] = players[i].second;
            for (int j = 0; j < i; ++j) {
                if (players[i].second >= players[j].second) {
                    dp[i] = max(dp[i], dp[j] + players[i].second);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({ages[i], scores[i]});
        }
        sort(v.begin(), v.end());
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = v[i].second;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (v[i].second >= v[j].second) {
                    dp[i] = max(dp[i], dp[j] + v[i].second);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = scores.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({ages[i], scores[i]});
        }
        sort(v.begin(), v.end());
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = v[i].second;
            for (int j = 0; j < i; j++) {
                if (v[i].second >= v[j].second) {
                    dp[i] = max(dp[i], dp[j] + v[i].second);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = scores.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({ages[i], scores[i]});
        }
        sort(v.begin(), v.end());
        vector<int> dp(n, 0);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = v[i].second;
            for (int j = 0; j < i; j++) {
                if (v[j].second <= v[i].second) {
                    dp[i] = max(dp[i], dp[j] + v[i].second);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;

=======

        int n = scores.size();
        vector<pair<int, int>> v;
        for (int i = 0; i < n; i++) {
            v.push_back({ages[i], scores[i]});
        }
        sort(v.begin(), v.end());
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = v[i].second;
            for (int j = 0; j < i; j++) {
                if (v[j].second <= v[i].second) {
                    dp[i] = max(dp[i], dp[j] + v[i].second);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = scores.size();
        vector<vector<int>> v(n);
        for (int i = 0; i < n; i++) {
            v[i] = {ages[i], scores[i]};
        }
        sort(v.begin(), v.end());
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = v[i][1];
            for (int j = 0; j < i; j++) {
                if (v[i][1] >= v[j][1]) {
                    dp[i] = max(dp[i], dp[j] + v[i][1]);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = scores.size();
        vector<pair<int, int>> players;
        for (int i = 0; i < n; i++)
            players.emplace_back(ages[i], scores[i]);
        sort(players.begin(), players.end());
        vector<int> dp(n);
        for (int i = 0; i < n; i++) {
            dp[i] = players[i].second;
            for (int j = 0; j < i; j++) {
                if (players[j].second <= players[i].second)
                    dp[i] = max(dp[i], dp[j] + players[i].second);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        vector<pair<int, int>> p;
        for(int i = 0; i < scores.size(); i++){
            p.push_back(make_pair(ages[i], scores[i]));
        }
        sort(p.begin(), p.end());
        vector<int> dp(scores.size(), 0);
        dp[0] = p[0].second;
        int res = dp[0];
        for(int i = 1; i < scores.size(); i++){
            dp[i] = p[i].second;
            for(int j = 0; j < i; j++){
                if(p[i].second >= p[j].second){
                    dp[i] = max(dp[i], dp[j] + p[i].second);
                }
            }
            res = max(res, dp[i]);
        }
        return res;
