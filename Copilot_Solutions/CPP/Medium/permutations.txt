Synthesizing 9/10 solutions

=======

        vector<vector<int>> result;
        if (nums.size() == 1) {
            result.push_back(nums);
            return result;
        }
        for (int i = 0; i < nums.size(); i++) {
            vector<int> temp = nums;
            temp.erase(temp.begin() + i);
            vector<vector<int>> tempResult = permute(temp);
            for (int j = 0; j < tempResult.size(); j++) {
                tempResult[j].insert(tempResult[j].begin(), nums[i]);
                result.push_back(tempResult[j]);
            }
        }
        return result;

=======

        vector<vector<int>> result;
        permute(nums, 0, result);
        return result;
    }
    
    void permute(vector<int>& nums, int i, vector<vector<int>>& result) {
        if (i == nums.size()) {
            result.push_back(nums);
            return;
        }
        
        for (int j = i; j < nums.size(); ++j) {
            swap(nums[i], nums[j]);
            permute(nums, i + 1, result);
            swap(nums[i], nums[j]);
        }

=======

        vector<vector<int>> result;
        sort(begin(nums), end(nums));
        do {
            result.push_back(nums);
        } while (next_permutation(begin(nums), end(nums)));
        return result;

=======

        vector<vector<int>> result;
        permute(nums, 0, result);
        return result;
    }
    
    void permute(vector<int>& nums, int begin, vector<vector<int>>& result) {
        if (begin == nums.size()) {
            result.push_back(nums);
            return;
        }
        
        for (int i = begin; i < nums.size(); ++i) {
            swap(nums[begin], nums[i]);
            permute(nums, begin + 1, result);
            swap(nums[begin], nums[i]);
        }

=======

        vector<vector<int>> result;
        backtrack(nums, 0, result);
        return result;
    }
    void backtrack(vector<int> nums, int start, vector<vector<int>>& result){
        if(start == nums.size()){
            result.push_back(nums);
            return;
        }
        for(int i = start; i < nums.size(); i++){
            swap(nums[start], nums[i]);
            backtrack(nums, start + 1, result);
        }

=======

        vector<vector<int>> ans;
        vector<int> v;
        permute(nums, ans, v);
        return ans;
    }
    
    void permute(vector<int>& nums, vector<vector<int>>& ans, vector<int>& v) {
        if (nums.empty()) {
            ans.push_back(v);
            return;
        }
        for (int i = 0; i < nums.size(); ++i) {
            v.push_back(nums[i]);
            int temp = nums[i];
            nums.erase(nums.begin() + i);
            permute(nums, ans, v);
            nums.insert(nums.begin() + i, temp);
            v.pop_back();
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        vector<bool> used(nums.size(), false);
        dfs(nums, used, temp, result);
        return result;
    }

    void dfs(vector<int>& nums, vector<bool>& used, vector<int>& temp, vector<vector<int>>& result) {
        if (temp.size() == nums.size()) {
            result.push_back(temp);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (used[i]) {
                continue;
            }
            used[i] = true;
            temp.push_back(nums[i]);
            dfs(nums, used, temp, result);
            temp.pop_back();
            used[i] = false;
        }

=======

        vector<vector<int>> result;
        vector<int> temp;
        vector<int> used(nums.size(), 0);
        permute(nums, temp, result, used);
        return result;
    }
    
    void permute(vector<int>& nums, vector<int>& temp, vector<vector<int>>& result, vector<int>& used) {
        if (temp.size() == nums.size()) {
            result.push_back(temp);
            return;
        }
        
        for (int i = 0; i < nums.size(); i++) {
            if (used[i] == 0) {
                used[i] = 1;
                temp.push_back(nums[i]);
                permute(nums, temp, result, used);
                used[i] = 0;
                temp.pop_back();
            }
        }

=======

        vector<vector<int>> res;
        int n = nums.size();
        vector<int> tmp;
        vector<bool> flag(n, false);
        dfs(res, tmp, flag, nums);
        return res;
    }
    void dfs(vector<vector<int>>& res, vector<int>& tmp, vector<bool>& flag, vector<int>& nums){
        if(tmp.size() == nums.size()){
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(flag[i]) continue;
            flag[i] = true;
            tmp.push_back(nums[i]);
            dfs(res, tmp, flag, nums);
            tmp.pop_back();
            flag[i] = false;
        }
