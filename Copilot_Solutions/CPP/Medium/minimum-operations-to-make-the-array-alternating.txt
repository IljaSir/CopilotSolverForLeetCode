Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int odd = 0, even = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (nums[i] % 2 == 0) {
                    even++;
                }
            } else {
                if (nums[i] % 2 == 1) {
                    odd++;
                }
            }
        }
        return min(odd, even) + abs(odd - even);

=======

        int n = nums.size();
        int odd = 0, even = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (nums[i] % 2 != 0) odd++;
                else even++;
            } else {
                if (nums[i] % 2 != 0) even++;
                else odd++;
            }
        }
        return min(odd, even);

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < n; i += 2) {
            if (nums[i] <= nums[i - 1]) {
                ans += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        for (int i = n - 2; i >= 0; i -= 2) {
            if (nums[i] <= nums[i + 1]) {
                ans += nums[i + 1] - nums[i] + 1;
                nums[i] = nums[i + 1] + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int even = 0, odd = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (nums[i] % 2 == 0) {
                    even++;
                }
            } else {
                if (nums[i] % 2 != 0) {
                    odd++;
                }
            }
        }
        int ans = min(even, odd);
        even = 0, odd = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                if (nums[i] % 2 != 0) {
                    even++;
                }
            } else {
                if (nums[i] % 2 == 0) {
                    odd++;
                }
            }
        }
        ans += min(even, odd);
        return ans;

=======

        int result = 0;
        for (int i = 1; i < nums.size(); i += 2) {
            if (nums[i] <= nums[i - 1]) {
                result += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        for (int i = nums.size() - 2; i >= 0; i -= 2) {
            if (nums[i] <= nums[i + 1]) {
                result += nums[i + 1] - nums[i] + 1;
                nums[i] = nums[i + 1] + 1;
            }
        }
        return result;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            if (i + 1 < n && nums[i] == nums[i + 1]) {
                ans++;
                nums[i + 1]++;
            }
            if (i + 2 < n && nums[i] == nums[i + 2]) {
                ans++;
                nums[i + 2]++;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> odd(n), even(n);
        odd[0] = 0;
        even[0] = 1;
        for (int i = 1; i < n; i++) {
            odd[i] = even[i] = 0x7fffffff;
            if (nums[i - 1] != nums[i]) {
                odd[i] = odd[i - 1];
                even[i] = even[i - 1] + 1;
            }
            if (nums[i - 1] != nums[i] - 1) {
                odd[i] = min(odd[i], even[i - 1]);
                even[i] = min(even[i], odd[i - 1] + 1);
            }
        }
        return min(odd[n - 1], even[n - 1]);

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            if (i + 1 < n) {
                if (nums[i] == nums[i + 1]) {
                    ans++;
                    nums[i + 1]++;
                }
            }
        }
        for (int i = 1; i < n; i += 2) {
            if (i + 1 < n) {
                if (nums[i] == nums[i + 1]) {
                    ans++;
                    nums[i + 1]++;
                }
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n <= 1) return 0;
        int res = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                res++;
                nums[i] = 0;
            }
        }
        for (int i = 2; i < n; i++) {
            if (nums[i] == nums[i - 2]) {
                res++;
                nums[i] = 0;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> odd(n, 0);
        vector<int> even(n, 0);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                odd[i] = nums[i];
                even[i] = nums[i] - 1;
            } else {
                odd[i] = nums[i] - 1;
                even[i] = nums[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (odd[i] <= odd[i+1]) {
                    res += odd[i+1] - odd[i] + 1;
                    odd[i+1] = odd[i] - 1;
                }
            } else if (i == n - 1) {
                if (odd[i] <= odd[i-1]) {
                    res += odd[i-1] - odd[i] + 1;
                    odd[i-1] = odd[i] - 1;
                }
            } else {
                if (odd[i] <= odd[i-1]) {
                    res += odd[i-1] - odd[i] + 1;
                    odd[i-1] = odd[i] - 1;
                }
                if (odd[i] <= odd[i+1]) {
                    res += odd[i+1] - odd[i] + 1;
                    odd[i+1] = odd[i] - 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (even[i] <= even[i+1]) {
                    res += even[i+1] - even[i] + 1;
                    even[i+1] = even[i] - 1;
                }
            } else if (i == n - 1) {
                if (even[i] <= even[i-1]) {
                    res += even[i-1] - even[i] + 1;
                    even[i-1] = even[i] - 1;
                }
            } else {
                if (even[i] <= even[i-1]) {
                    res += even[i-1] - even[i] + 1;
                    even
