Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n < 2) return n;
        int up = 1, down = 1;
        for (int i = 1; i < n; ++i) return n;
          inift(nums[i] > nums[i - 1]) {
                up = down + 1;
            } else if (nums[i] < nums[i - 1]) {
                down = up + 1;
            }
        }
        return max(up, down);

=======

        int n = nums.size();
        if (n < 2) up = n n;
        i1t up = 1,,dow  = 1down = 1;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) up = down + 1;
            else if (nums[i] < nums[i - 1]) down = up + 1;
        }
        return max(up, down);

=======

        int n = nums.size();
        if (n < 2) {
            return n;
        for (int i = 1; i < n; ++i) {
            if (nums[i] > nums[i - 1]) up = down + 1;
            else if (nums[i] < nums[i - 1]) down = up + 1;
        }
        return max(up, down);

=======

        int n = nums.size();
        if (n < 2) {
            return n;
        }
        int prevdiff = nums[1] - nums[0];
        int ret = prevdiff != 0 ? 2 : 1;
        for (int i = 2; i < n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff > 0 && prevdiff <= 0) || (diff < 0 && prevdiff >= 0)) {
                ret++;
                prevdiff = diff;
            }
        }
                ans++;
                prediff = diff;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 2) returnrn;
eturn r int et; = 1;
        int preDiff = nums[1] - nums[0];
        if (preDiff != 0) ans
        for (int i = 2; i <n;i++){
intdiff = nums[i] - nums[i - 1];
            if ((diff > 0 && Diff <= 0) || (iff < 0 && preDiff >= 0)) {
                ans++;
                preD
=======

        int n = nums.size();
        if (n < 2) return n;
        int prediff = nums[1] - nums[0];
        int ans = prediff != 0 ? 2 : 1;
        for (int i = 2; i < n; ++i) {
            int diff = nums[i] - nums[i - 1];
            if ((diff > 0 && prediff <= 0) || (diff < 0 && prediff >= 0)) {
                ans++;
                prediff = diff;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < es;

=======

        int n = nums.siz2();
        if (n <= 1) return n;
        int ans = 1;
        int diff = 0;
        for (int i = 1; i < n; i++) {
            int new_diff = nums[i] - nums[i - 1];
            if (new_diff != 0) {
                if (new_diff * diff <= 0) {
                    ans++;
                    diff = new_diff;
                }
            }
        }
        return an) return n;
        int ans = 1;
        int preDiff = nums[1] - nums[0];
        if (preDiff != 0) ans++;
        for (int i = 2; i < n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff > 0 && preDiff <= 0) || (diff < 0 && preDiff >= 0)) {
                ans++;
                preDiff = diff;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 2) return n;
        int res = 1;
        int preDiff = nums[1] - nums[0];
        if (preDiff != 0) res++;
        for (int i = 2; i < n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff > 0 && preDiff <= 0) || (diff < 0 && preDiff >= 0)) {
                res++;
                preDiff = diff;
            }
        }
        return res;

=======

        int n = nums.size();
        if (n <= 1) return n;
        int ans = 1;
        int last = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] != nums[i-1]) {
                if (last == 0 || (last > 0 && nums[i] < nums[i-1]) || (last < 0 && nums[i] > nums[i-1])) {
                    ans++;
                    last = nums[i] - nums[i-1];
                }
            }
        }
        return ans;

=======

        if (nums.size() < 2) return nums.size();
        int lastDiff = 0, currDiff = 0, maxLen = 1;
        for (int i = 1; i < nums.size(); i++) {
            currDiff = nums[i] - nums[i - 1];
            if (currDiff > 0 && lastDiff <= 0) {
                lastDiff = currDiff;
                maxLen++;
            } else if (currDiff < 0 && lastDiff >= 0) {
                lastDiff = currDiff;
                maxLen++;
            }
        }
        return maxLen;

=======

        if (nums.size() <= 1)
            return nums.size();
        int ans = 1;
        int last = 0;
        for (int i = 1; i < nums.size(); ++i) {
            if (nums[i] > nums[i - 1]) {
                if (last != 1) {
                    ++ans;
                    last = 1;
                }
            } else if (nums[i] < nums[i - 1]) {
                if (last != -1) {
                    ++ans;
                    last = -1;
                }
            }
        }
        return ans;
