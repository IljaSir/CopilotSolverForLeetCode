Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int max_so_far = nums[0], max_ending_here = nums[0];
        int min_so_far = nums[0], min_ending_here = nums[0];
        int sum = nums[0];
        for (int i = 1; i < n; i++) {
            sum += nums[i];
            max_ending_here = max(max_ending_here + nums[i], nums[i]);
            max_so_far = max(max_so_far, max_ending_here);
            min_ending_here = min(min_ending_here + nums[i], nums[i]);
            min_so_far = min(min_so_far, min_ending_here);
        }
        if (sum == min_so_far) return max_so_far;
        return max(max_so_far, sum - min_so_far);

=======

        int n = nums.size();
        int currMax = nums[0], maxSum = nums[0];
        int currMin = nums[0], minSum = nums[0];
        int totalSum = nums[0];
        for (int i = 1; i < n; i++) {
            currMax = max(currMax + nums[i], nums[i]);
            maxSum = max(maxSum, currMax);
            currMin = min(currMin + nums[i], nums[i]);
            minSum = min(minSum, currMin);
            totalSum += nums[i];
        }
        if (totalSum == minSum) return maxSum;
        return max(maxSum, totalSum - minSum);

=======

        int n = nums.size();
        int maxSum = nums[0];
        int minSum = nums[0];
        int total = nums[0];
        int currMax = nums[0];
        int currMin = nums[0];
        for (int i = 1; i < n; i++) {
            currMax = max(nums[i], currMax + nums[i]);
            maxSum = max(maxSum, currMax);
            currMin = min(nums[i], currMin + nums[i]);
            minSum = min(minSum, currMin);
            total += nums[i];
        }
        if (maxSum < 0) return maxSum;
        return max(maxSum, total - minSum);

=======

        int maxSum = INT_MIN;
        int minSum = INT_MAX;
        int sum = 0;
        int total = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            sum = max(sum, 0);
            
            total += nums[i];
            minSum = min(minSum, sum);
            sum = min(sum, 0);
        }
        if (maxSum < 0) {
            return maxSum;
        }
        return max(maxSum, total - minSum);

=======

        int n = nums.size();
        int maxSum = INT_MIN;
        int minSum = INT_MAX;
        int totalSum = 0;
        int currMax = 0;
        int currMin = 0;
        for (int i = 0; i < n; i++) {
            currMax = max(currMax + nums[i], nums[i]);
            maxSum = max(maxSum, currMax);
            currMin = min(currMin + nums[i], nums[i]);
            minSum = min(minSum, currMin);
            totalSum += nums[i];
        }
        if (totalSum == minSum) {
            return maxSum;
        }
        return max(maxSum, totalSum - minSum);

=======

        int n = nums.size();
        int maxSum = nums[0], minSum = nums[0];
        int curMax = nums[0], curMin = nums[0];
        int total = nums[0];
        for (int i = 1; i < n; i++) {
            curMax = max(nums[i], curMax + nums[i]);
            maxSum = max(maxSum, curMax);
            curMin = min(nums[i], curMin + nums[i]);
            minSum = min(minSum, curMin);
            total += nums[i];
        }
        if (maxSum < 0) return maxSum;
        return max(maxSum, total - minSum);

=======

        int n = nums.size();
        int maxSum = INT_MIN;
        int minSum = INT_MAX;
        int currMax = 0;
        int currMin = 0;
        int total = 0;
        for(int i = 0; i < n; i++) {
            currMax = max(nums[i], currMax + nums[i]);
            maxSum = max(maxSum, currMax);
            currMin = min(nums[i], currMin + nums[i]);
            minSum = min(minSum, currMin);
            total += nums[i];
        }
        if(total == minSum) return maxSum;
        return max(maxSum, total - minSum);

=======

        int maxSum = INT_MIN, minSum = INT_MAX, sum = 0, total = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            sum = max(sum, 0);
            total += nums[i];
            minSum = min(minSum, sum);
            sum = min(sum, 0);
        }
        return maxSum > 0 ? max(maxSum, total - minSum) : maxSum;

=======

        int n = nums.size();
        int ans = nums[0];
        int sum = nums[0];
        int min_sum = nums[0];
        int max_sum = nums[0];
        for (int i = 1; i < n; i++) {
            sum += nums[i];
            max_sum = max(max_sum + nums[i], nums[i]);
            min_sum = min(min_sum + nums[i], nums[i]);
            ans = max(ans, max(max_sum, sum - min_sum));
        }
        return ans;

=======

        int s = 0;
        int minSum = INT_MAX;
        int maxSum = INT_MIN;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            s += nums[i];
            sum += nums[i];
            if (sum < nums[i]) {
                sum = nums[i];
            }
            maxSum = max(maxSum, sum);
            if (sum > nums[i]) {
                sum = nums[i];
            }
            minSum = min(minSum, sum);
        }
        return max(s - minSum, maxSum);
