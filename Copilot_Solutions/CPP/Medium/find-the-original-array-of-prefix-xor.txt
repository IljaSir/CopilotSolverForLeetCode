Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = pref.size();
        vector<int> res(n);
        res[0] = pref[0];
        for (int i = 1; i < n; ++i) {
            res[i] = res[i - 1] ^ pref[i];
        }
        return res;

=======

        int n = pref.size();
        vector<int> arr(n);
        arr[0] = pref[0];
        for (int i = 1; i < n; ++i) {
            arr[i] = arr[i - 1] ^ pref[i];
        }
        return arr;

=======

        int n = pref.size();
        vector<int> ans(n, 0);
        ans[0] = pref[0];
        for (int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] ^ pref[i];
        }
        return ans;

=======

        vector<int> res;
        res.push_back(pref[0]);
        for (int i = 1; i < pref.size(); ++i) {
            res.push_back(res[i - 1] ^ pref[i]);
        }
        return res;

=======

        vector<int> res(pref.size());
        res[0] = pref[0];
        for (int i = 1; i < pref.size(); ++i) {
            res[i] = pref[i] ^ res[i - 1];
        }
        return res;

=======

        int n = pref.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; ++i) {
            ans[i] = ans[i - 1] ^ pref[i];
        }
        return ans;

=======

        int n = pref.size();
        vector<int> ans(n);
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            ans[i] = cur ^ pref[i];
            cur ^= ans[i];
        }
        return ans;

=======

        vector<int> res;
        int n = pref.size();
        res.push_back(pref[0]);
        for(int i = 1; i < n; i++){
            res.push_back(pref[i] ^ pref[i-1]);
        }
        return res;
