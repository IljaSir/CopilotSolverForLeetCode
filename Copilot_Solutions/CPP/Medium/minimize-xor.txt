Synthesizing 10/10 solutions

=======

        int res = 0;
        int mask = 1;
        for (int i = 0; i < 31; ++i) {
            if ((num1 & mask) != (num2 & mask)) {
                res |= mask;
            }
            mask <<= 1;
        }
        return res;

=======

        int ans = 0;
        int mask = 1;
        for (int i = 0; i < 32; ++i) {
            if ((mask & num1) != (mask & num2)) {
                ans |= mask;
            }
            mask <<= 1;
        }
        return ans;

=======

        int x = num1 ^ num2;
        int n = 0;
        while(x) {
            x >>= 1;
            n++;
        }
        return num2 ^ ((1 << n) - 1);

=======

        int mask = 1;
        int result = 0;
        while (mask <= num1) {
            if ((num1 & mask) != (num2 & mask)) {
                result |= mask;
            }
            mask <<= 1;
        }
        return result;

=======

        int mask = 1;
        int res = 0;
        while (num2 > 0) {
            if (num2 & 1) {
                res |= mask;
            }
            mask <<= 1;
            num2 >>= 1;
        }
        return res;

=======

        int res = num1 ^ num2;
        int mask = 1;
        while (mask <= res) {
            mask <<= 1;
        }
        mask--;
        return num2 & mask;

=======

        int x = num2 ^ num1;
        int i = 0;
        while(x) {
            i++;
            x = x >> 1;
        }
        int mask = (1 << i) - 1;
        return num2 & mask;

=======

        int ans = 0;
        int n = num2;
        int i = 0;
        while (n) {
            if (n & 1) {
                ans |= 1 << i;
            }
            else {
                if (num1 & (1 << i)) {
                    ans |= 1 << i;
                }
            }
            ++i;
            n >>= 1;
        }
        return ans;

=======

        return num1 ^ num2 & -(num1 ^ num2);

=======

        int x = num1 ^ num2;
        int i = 0;
        while (x > 0) {
            int t = x >> i;
            if (t & 1) {
                break;
            }
            ++i;
        }
        return num1 | (1 << i);
