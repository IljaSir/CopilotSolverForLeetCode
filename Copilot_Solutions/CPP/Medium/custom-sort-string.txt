Synthesizing 10/10 solutions (Duplicates hidden)

=======

        unordered_map<char, int> m;
        for (int i = 0; i < order.size(); ++i) {
            m[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&](char a, char b) {
            return m[a] < m[b];
        });
        return s;

=======

        unordered_map<char, int> m;
        for (int i = 0; i < order.size(); i++) {
            m[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&m](char a, char b) {
            return m[a] < m[b];
        });
        return s;

=======

        map<char, int> m;
        for (int i = 0; i < order.length(); ++i) {
            m[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&](char a, char b) {
            if (m.find(a) == m.end() && m.find(b) == m.end()) {
                return a < b;
            }
            if (m.find(a) == m.end()) {
                return false;
            }
            if (m.find(b) == m.end()) {
                return true;
            }
            return m[a] < m[b];
        });
        return s;

=======

        string res;
        unordered_map<char, int> m;
        for (int i = 0; i < s.size(); i++) {
            m[s[i]]++;
        }
        for (int i = 0; i < order.size(); i++) {
            if (m.find(order[i]) != m.end()) {
                for (int j = 0; j < m[order[i]]; j++) {
                    res += order[i];
                }
                m.erase(order[i]);
            }
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            for (int i = 0; i < it->second; i++) {
                res += it->first;
            }
        }
        return res;

=======

        unordered_map<char, int> m;
        for (int i = 0; i < order.length(); ++i) {
            m[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&](char& a, char& b) {
            return m[a] < m[b];
        });
        return s;

=======

        int count[26] = {0};
        for (char c : s) {
            count[c - 'a']++;
        }
        string ans;
        for (char c : order) {
            ans += string(count[c - 'a'], c);
            count[c - 'a'] = 0;
        }
        for (char c = 'a'; c <= 'z'; c++) {
            ans += string(count[c - 'a'], c);
        }
        return ans;

=======

        string ans;
        map<char, int> m;
        for (int i = 0; i < order.length(); i++) {
            m[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&](char a, char b) {
            return m[a] < m[b];
        });
        return s;

=======

        int len1 = order.length(), len2 = s.length();
        unordered_map<char, int> map;
        for (int i = 0; i < len1; i++) {
            map[order[i]] = i;
        }
        sort(s.begin(), s.end(), [&](char a, char b) {
            return map[a] < map[b];
        });
        return s;

=======

        int n = s.size();
        vector<int> cnt(26);
        for (int i=0; i<n; i++) {
            cnt[s[i]-'a']++;
        }
        string ans;
        for (int i=0; i<order.size(); i++) {
            int c = order[i]-'a';
            while (cnt[c]-- > 0) {
                ans.push_back(c+'a');
            }
        }
        for (int i=0; i<26; i++) {
            while (cnt[i]-- > 0) {
                ans.push_back(i+'a');
            }
        }
        return ans;
