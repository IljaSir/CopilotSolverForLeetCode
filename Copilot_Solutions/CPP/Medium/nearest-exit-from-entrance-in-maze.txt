Synthesizing 10/10 solutions

=======

        int m = maze.size();
        int n = maze[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        visited[entrance[0]][entrance[1]] = true;
        queue<vector<int>> q;
        q.push(entrance);
        int step = 0;
        while(!q.empty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                vector<int> cur = q.front();
                q.pop();
                if((cur[0] == 0 || cur[0] == m - 1 || cur[1] == 0 || cur[1] == n - 1) && (cur[0] != entrance[0] || cur[1] != entrance[1])) {
                    return step;
                }
                vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
                for(auto dir : dirs) {
                    int x = cur[0] + dir[0];
                    int y = cur[1] + dir[1];
                    if(x < 0 || x >= m || y < 0 || y >= n || maze[x][y] == '+' || visited[x][y]) {
                        continue;
                    }
                    q.push({x, y});
                    visited[x][y] = true;
                }
            }
            step++;
        }
        return -1;

=======

        int m = maze.size();
        int n = maze[0].size();
        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        visited[entrance[0]][entrance[1]] = true;
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if (x == 0 || x == m - 1 || y == 0 || y == n - 1) {
                    if (x != entrance[0] || y != entrance[1]) {
                        return step;
                    }
                }
                for (auto& dir : dirs) {
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny] && maze[nx][ny] == '.') {
                        q.push({nx, ny});
                        visited[nx][ny] = true;
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = maze.size(), n = maze[0].size();
        vector<vector<int>> steps(m, vector<int>(n, -1));
        steps[entrance[0]][entrance[1]] = 0;
        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        int res = INT_MAX;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (steps[x][y] >= res) continue;
            if (x == 0 || x == m - 1 || y == 0 || y == n - 1) {
                if (x != entrance[0] || y != entrance[1]) {
                    res = min(res, steps[x][y]);
                }
                continue;
            }
            for (int i = -1; i <= 1; ++i) {
                for (int j = -1; j <= 1; ++j) {
                    if (abs(i) + abs(j) != 1) continue;
                    int nx = x + i, ny = y + j;
                    if (maze[nx][ny] == '.') {
                        if (steps[nx][ny] == -1) {
                            steps[nx][ny] = steps[x][y] + 1;
                            q.push({nx, ny});
                        }
                    }
                }
            }
        }
        return res == INT_MAX ? -1 : res;

=======

        int m = maze.size(), n = maze[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        q.push(make_pair(entrance[0], entrance[1]));
        visited[entrance[0]][entrance[1]] = 1;
        int count = 0;
        while (!q.empty()) {
            count++;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto node = q.front();
                q.pop();
                int x = node.first, y = node.second;
                if (x == 0 || y == 0 || x == m-1 || y == n-1) {
                    if (x != entrance[0] || y != entrance[1]) {
                        return count-1;
                    }
                }
                if (x > 0 && maze[x-1][y] == '.' && visited[x-1][y] == 0) {
                    q.push(make_pair(x-1, y));
                    visited[x-1][y] = 1;
                }
                if (y > 0 && maze[x][y-1] == '.' && visited[x][y-1] == 0) {
                    q.push(make_pair(x, y-1));
                    visited[x][y-1] = 1;
                }
                if (x < m-1 && maze[x+1][y] == '.' && visited[x+1][y] == 0) {
                    q.push(make_pair(x+1, y));
                    visited[x+1][y] = 1;
                }
                if (y < n-1 && maze[x][y+1] == '.' && visited[x][y+1] == 0) {
                    q.push(make_pair(x, y+1));
                    visited[x][y+1] = 1;
                }
            }
        }
        return -1;

=======

        int row = entrance[0];
        int col = entrance[1];
        int m = maze.size();
        int n = maze[0].size();
        queue<pair<int, int>> q;
        q.push({row, col});
        maze[row][col] = '+';
        int step = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                auto [r, c] = q.front();
                q.pop();
                if (r == 0 || r == m - 1 || c == 0 || c == n - 1) {
                    if (r != row || c != col) {
                        return step;
                    }
                }
                if (r - 1 >= 0 && maze[r - 1][c] == '.') {
                    q.push({r - 1, c});
                    maze[r - 1][c] = '+';
                }
                if (r + 1 < m && maze[r + 1][c] == '.') {
                    q.push({r + 1, c});
                    maze[r + 1][c] = '+';
                }
                if (c - 1 >= 0 && maze[r][c - 1] == '.') {
                    q.push({r, c - 1});
                    maze[r][c - 1] = '+';
                }
                if (c + 1 < n && maze[r][c + 1] == '.') {
                    q.push({r, c + 1});
                    maze[r][c + 1] = '+';
                }
            }
            ++step;
        }
        return -1;

=======

        int m = maze.size();
        int n = maze[0].size();
        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        queue<vector<int>> q;
        q.push(entrance);
        int step = 0;
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                auto cur = q.front();
                q.pop();
                for(int j = 0; j < 4; j++){
                    int x = cur[0] + dir[j][0];
                    int y = cur[1] + dir[j][1];
                    if(x < 0 || x >= m || y < 0 || y >= n || maze[x][y] == '+') continue;
                    if((x == 0 || x == m - 1 || y == 0 || y == n - 1) && (x != entrance[0] || y != entrance[1])) return step + 1;
                    maze[x][y] = '+';
                    q.push({x,y});
                }
            }
            step++;
        }
        return -1;

=======

        int m = maze.size();
        int n = maze[0].size();
        int x = entrance[0];
        int y = entrance[1];
        queue<pair<int,int>> q;
        q.push({x,y});
        int step = 0;
        vector<vector<int>> visited(m, vector<int>(n, 0));
        visited[x][y] = 1;
        while(!q.empty()){
            int size = q.size();
            for(int i=0; i<size; i++){
                auto cur = q.front();
                q.pop();
                int x = cur.first;
                int y = cur.second;
                if(x == 0 || x == m-1 || y == 0 || y == n-1){
                    if(x == entrance[0] && y == entrance[1])
                        continue;
                    else
                        return step;
                }
                if(x-1>=0 && maze[x-1][y] == '.' && visited[x-1][y] == 0){
                    q.push({x-1,y});
                    visited[x-1][y] = 1;
                }
                if(x+1<m && maze[x+1][y] == '.' && visited[x+1][y] == 0){
                    q.push({x+1,y});
                    visited[x+1][y] = 1;
                }
                if(y-1>=0 && maze[x][y-1] == '.' && visited[x][y-1] == 0){
                    q.push({x,y-1});
                    visited[x][y-1] = 1;
                }
                if(y+1<n && maze[x][y+1] == '.' && visited[x][y+1] == 0){
                    q.push({x,y+1});
                    visited[x][y+1] = 1;
                }
            }
            step++;
        }
        return -1;

=======

        int m = maze.size();
        int n = maze[0].size();
        int x = entrance[0];
        int y = entrance[1];
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        queue<pair<int, int>> q;
        q.push({x, y});
        maze[x][y] = '+';
        int ans = 0;
        while (!q.empty()) {
            int size = q.size();
            ans++;
            while (size--) {
                auto [x, y] = q.front();
                q.pop();
                for (auto& d : dir) {
                    int nx = x + d[0];
                    int ny = y + d[1];
                    if (nx < 0 || nx >= m || ny < 0 || ny >= n || maze[nx][ny] == '+') continue;
                    if (nx == 0 || nx == m - 1 || ny == 0 || ny == n - 1) return ans;
                    q.push({nx, ny});
                    maze[nx][ny] = '+';
                }
            }
        }
        return -1;

=======

        int m = maze.size(), n = maze[0].size(), step = 0;
        queue<pair<int, int>> q;
        vector<vector<int>> dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        q.push({entrance[0], entrance[1]});
        while (!q.empty()) {
            step++;
            for (int i = q.size(); i > 0; i--) {
                auto t = q.front(); q.pop();
                for (auto d : dirs) {
                    int x = t.first + d[0], y = t.second + d[1];
                    if (x < 0 || x >= m || y < 0 || y >= n || maze[x][y] == '+') continue;
                    if ((x == 0 || x == m - 1 || y == 0 || y == n - 1) && (x != entrance[0] || y != entrance[1])) return step;
                    q.push({x, y});
                    maze[x][y] = '+';
                }
            }
        }
        return -1;

=======

        int n = maze.size(), m = maze[0].size();
        vector<vector<int>> dist(n, vector<int>(m, -1));
        vector<vector<int>> dir = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        queue<pair<int, int>> q;
        q.push({entrance[0], entrance[1]});
        dist[entrance[0]][entrance[1]] = 0;
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (auto& d : dir) {
                int nx = x + d[0], ny = y + d[1];
                if (nx < 0 || nx >= n || ny < 0 || ny >= m || maze[nx][ny] == '+' || dist[nx][ny] != -1) continue;
                dist[nx][ny] = dist[x][y] + 1;
                if (nx == 0 || nx == n - 1 || ny == 0 || ny == m - 1) {
                    return dist[nx][ny];
                }
                q.push({nx, ny});
            }
        }
        return -1;
