Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        for (auto& row : wall) {
            int sum = 0;
            for (int i = 0; i < row.size() - 1; ++i) {
                sum += row[i];
                ++m[sum];
            }
        }
        int maxCnt = 0;
        for (auto& [_, cnt] : m) {
            maxCnt = max(maxCnt, cnt);
        }
        return wall.size() - maxCnt;

=======

        unordered_map<int, int> m;
        int n = wall.size();
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < wall[i].size() - 1; j++) {
                sum += wall[i][j];
                m[sum]++;
            }
        }
        int res = n;
        for (auto& [k, v]: m) {
            res = min(res, n - v);
        }
        return res;

=======

        int n = wall.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < wall[i].size() - 1; j++) {
                sum += wall[i][j];
                m[sum]++;
            }
        }
        int maxn = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            maxn = max(maxn, it->second);
        }
        return n - maxn;

=======

        int n = wall.size();
        unordered_map<int, int> cnt;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = 0; j < wall[i].size() - 1; ++j) {
                sum += wall[i][j];
                cnt[sum]++;
            }
        }
        int ans = n;
        for (auto [key, value] : cnt) {
            ans = min(ans, n - value);
        }
        return ans;

=======

        map<int, int> m;
        int n = wall.size();
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = 0; j < wall[i].size() - 1; ++j) {
                sum += wall[i][j];
                ++m[sum];
            }
        }
        int maxCount = 0;
        for (auto it = m.begin(); it != m.end(); ++it) {
            maxCount = max(maxCount, it->second);
        }
        return n - maxCount;

=======

        unordered_map<int, int> m;
        for (auto &row : wall) {
            int sum = 0;
            for (int i = 0; i < row.size() - 1; i++) {
                sum += row[i];
                m[sum]++;
            }
        }
        int res = wall.size();
        for (auto &[_, cnt] : m) {
            res = min(res, wall.size() - cnt);
        }
        return res;

=======

        map<int, int> m;
        int n = wall.size();
        for (int i=0; i<n; i++) {
            int sum = 0;
            for (int j=0; j<wall[i].size()-1; j++) {
                sum += wall[i][j];
                m[sum] += 1;
            }
        }
        int max_count = 0;
        for (auto it=m.begin(); it!=m.end(); it++) {
            max_count = max(max_count, it->second);
        }
        return n - max_count;

=======

        int n = wall.size();
        unordered_map<int, int> count;
        int maxCnt = 0;
        for (int i = 0; i < n; ++i) {
            int sum = 0;
            for (int j = 0; j < wall[i].size() - 1; ++j) {
                sum += wall[i][j];
                maxCnt = max(maxCnt, ++count[sum]);
            }
        }
        return n - maxCnt;

=======

        int n = wall.size();
        int m = 0;
        for(int i = 0; i < n; i++) {
            m = max(m, (int)wall[i].size());
        }
        unordered_map<int, int> um;
        for(int i = 0; i < n; i++) {
            int s = 0;
            for(int j = 0; j < m; j++) {
                if(j < wall[i].size()) {
                    s += wall[i][j];
                    um[s]++;
                }
            }
        }
        int ans = n;
        for(auto it = um.begin(); it != um.end(); it++) {
            if(it->first != 0) {
                ans = min(ans, n - it->second);
            }
        }
        return ans;

=======

        unordered_map<int, int> h;
        int n = wall.size();
        for(int i = 0; i < n; i++) {
            int m = wall[i].size();
            int sum = 0;
            for(int j = 0; j < m - 1; j++) {
                sum += wall[i][j];
                h[sum]++;
            }
        }
        int ans = n;
        for(auto it = h.begin(); it != h.end(); it++) {
            ans = min(ans, n - it->second);
        }
        return ans;
