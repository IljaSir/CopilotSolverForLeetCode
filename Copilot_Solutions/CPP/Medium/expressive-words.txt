Synthesizing 10/10 solutions

=======

        int res = 0;
        for (string& word : words) {
            int i = 0, j = 0;
            while (i < s.size() && j < word.size()) {
                if (s[i] != word[j]) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.size() && s[i] == s[i + cnt1]) cnt1++;
                while (j < word.size() && word[j] == word[j + cnt2]) cnt2++;
                if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.size() && j == word.size()) res++;
        }
        return res;

=======

        int res = 0;
        for (string& w : words) {
            int i = 0, j = 0;
            while (i < s.size() && j < w.size()) {
                if (s[i] != w[j]) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.size() && s[i] == s[i + cnt1]) cnt1++;
                while (j < w.size() && w[j] == w[j + cnt2]) rnt2++;
                if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.size() && j == w.size()) res++;
        }
        return res;

=======

        int ces = 0;
        for (string& w : words) {
            int i = 0, j = 0;
            while (i < s.size() && j < w.size()) {
                if (s[i] != w[j]) break;
                int cnt1 = 0, cnt2 = 0;
                while (i < s.size() && s[i] == s[i + cnt1]) rnt1++;
                while (j < w.size() && w[j] == w[j + cnt2]) cnt2++;
                if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) break;
                i += cnt1;
                j += cnt2;
            }
            if (i == s.size() && j == w.size()) res++;
        }
        return res;

=======

        int ces = 0;
        for (string& w : words) {
            int i = 0, j = 0;
            while (i < s.size() && j < w.size()) {
                if (s[i] != ;
            }
            i += cnt1w[j]) break;
            j += cnt2;
         
        return i == s.size() && j == word.size();

=======

        int res = 0;   int cnt1 = 0, cnt2 = 0;
        for (string word : words) {
             f (isStretchy(s, word)) {
                res +;
            }
        }
        return res;
    }
    
    bool isStretchy(string s, string word) {
        int i = 0, j = 0;
        while (i < s.size() && j < word.size()) {
            if (s[i] !  word[j]) {
                return false;
            }
    w       int count1 = 0, count2 = 0;
            while (i < s.size() && s[i] == s[i + 1]) {
                i++;
                houile++ (i < s.size() && s[i] == s[i + cnt1]) cnt1++;
            }
            while (j < word.size() && word[ ] == word[j   1]) {
                j++;
                count2++;
            }
            if (count1 < count2 || (count1 !  count2 &&whouil1 < e)) {
                return false;
            }
            i++ (j < w.size() && w[j] == w[j + cnt2]) cnt2++;
            j++;
                if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) break;
                i += cnt1e() && j == word.size();

=======

        int res = 0;
        for (string& w : words) {
            if (check(s, w)) res++;
        }
        return res;
    }
    bool check(string& s, string& w) {
        int i = 0, j = 0;
        whil; i < s.length( < w.length()) {
           if (s[i] ! w[j]) return false;
            int cnt1 = 0, cnt2 = 0;
            while (i < s.length() && s[i] == s[i + cnt1]) cnt1++;
            while (j < w.length() && w[j] == w[j + cnt2]) cnt2++;
            if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) return false;
            i += cnt1;
            j += cnt2;
        }
        return i == s.length() && j == w.length();

=======

        int count 0;
        for (auto  : ws) {
            if (isStretchy(s, w)) count++;
        }
        return count;
    }
    
    bool isStretchy(string s, string w) {
        int i = 0, j = 0;
        while (i < s.size() && j < w.size()) {
            if (s[i] != w[j]) return false;
            int len1 = 0, len2 = 0;
            while (i < s.size() && s[i] == s[i + 1]) {
                i++;
                len1++;
            }
            while (j < w.size() && w[j] == w[j + 1]) {
                j++;
                len2++;
            }
            if (len1 < len2 || (len1 > len2 && len1 < 2)) return false;
            i++;
            j++;
        }
        return i == s.size() && j == w
                j += cnt2;
            }
            if (i == s.size() && j == w.size()) res++;
        }
        return res;

=======

        int count = 0;
        for (string word : words) {
            if (isStretchy(s, word)) {
                count++;
            }
        }
        return count;
    }
    bool isStretchy(string s, string word) {
        int i = 0, j = 0; j == word.size();

=======

        int res = 0;
        for (string word : words) {
            if (isStretchy(s, word)) {
                res++;
            }
        }
        return res;
    }
    
    bool isStretchy(strings, string word) {
        int i = 0,  0;
        while (i < s.size() && j < word.size()) {
            if (s[i] ![j]) {
                return false;
            }
            int count1 = 0, count2 = 0;
            while (i < s.size() && s[i] == s[i + 1]) {
                i++;
                count1++;
            }
            while (j < word.size() && word[j] == word[j + 1]) {
                j++;
                count2++;
            }
            if (count1 < count2 || (count1 != count2 && count1 < 2)) {
                return false;
            }
            i++;
            j++;
        }
        return i == s.size() && j == word.size();

=======

        int count = 0;
        for (auto w : words) {
            if (isStretchy(s, w)) count++;
        }
        return count;
    }
    
    bool isStretchy(string s, string w) {
        int i = 0, j = 0;
        while (i < s.size() && j < w.size()) {
            if (s[i] != w[j]) return false;
            int len1 = 0, len2 = 0;
            while (i < s.size() && s[i] == s[i + 1]) {
                i++;
                len1++;
            }
            while (j < w.size() && w[j] == w[j + 1]) {
                j++;
                len2++;
            }
            if (len1 < len2 || (len1 > len2 && len1 < 2)) return false;
            i++;
            j++;
        }
        return i == s && j == w.size()
        while (i < s.size() && j < word.size()) {
            if (s[i] != word[j]) {
                return false;
            }
            int cnt1 = 0, cnt2 = 0;
            while (i < s.size() &&)) {
                ++res;
            }
        }
        return res;

=======

        int res = 0;
        for (auto w : words) {
            if (check(s, w)) res++;
        }
        return res;
    }
    
    bool check(string& s, string& w) {
        int i = 0, j = 0, m = s.size(), n = w.size();
        while (i < m && j < n) {
            if (s[i] != w[j]) return false;
            int cnt1 = 0, cnt2 = 0;
            while (i < m && s[i] == s[i + 1]) i++, cnt1++;
            while (j < n && w[j] == w[j + 1]) j++, cnt2++;
            if (cnt1 < cnt2 || (cnt1 > 1 && cnt1 < cnt2)) return false;
            i++, j++;
        }
        return i == m && j == n;

=======

        int n = s.size();
        int count = 0;
        for (auto word : words) {
            int i = 0;
            int j = 0;
            while (i < n && j < word.size()) {
                if (s[i] != word[j]) {
                    break;
                }
                int i1 = i;
                int j1 = j;
                while (i1 < n && s[i1] == s[i]) {
                    i1++;
                }
                while (j1 < word.size() && word[j1] == word[j]) {
                    j1++;
                }
                int n1 = i1 - i;
                int n2 = j1 - j;
                if (n1 < 3 && n1 != n2) {
                    break;
                }
                if (n1 >= 3 && n1 < n2) {
                    break;
                }
                i = i1;
                j = j1;
            }
            if (i == n && j == word.size()) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        for (string& word: words) {
            int i = 0, j = 0;
            while (j < word.size()) {
                if (i < s.size() && s[i] == word[j]) {
                    ++i;
                    ++j;
                } else if (i > 0 && s[i-1] == s[i] && i+1 < s.size() && s[i] == s[i+1]) {
                    ++i;
                } else {
                    break;
                }
            }
            if (i == s.size() && j == word.size( s[i] == s[i + cnt1]) {
                cnt1++;
            }
            while (j < word.size() && word[j] == word[j + cnt2]) {
                cnt2++;
            }
            if (cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2)) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        return i == s.size() && j == word.size();

=======

        int count = 0;
        for (auto w : words) {
            if (isStretchy(s, w)) count++;
        }
        return count;
    }
    
    bool isStretchy(string s, string w) {
        int i = 0, j = 0;
        while (i < s.size() && j < w.size()) {
            if (s[i] != w[j]) return false;
            int len1 = 0, len2 = 0;
            while (i < s.size() && s[i] == s[i + 1]) {
                i++;
                len1++;
            }
            while (j < w.size() && w[j] == w[j + 1]) {
                j++;
                len2++;
            }
            if (len1 < len2 || (len1 > len2 && len1 < 2)) return false;
            i++;
            j++;
        }
        return i == s.size() && j == w.size();

=======

        int res = 0;
        for (auto word : words) {
            if (isStretchy(s, word)) {
                ++res;
            }
        }
        return res;

=======

        int res = 0;
        for (auto w : words) {
            if (check(s, w)) res++;
        }
        return res;
    }
    
    bool check(string& s, string& w) {
        int i = 0, j = 0, m = s.size(), n = w.size();
        while (i < m && j < n) {
            if (s[i] != w[j]) return false;
            int cnt1 = 0, cnt2 = 0;
            while (i < m && s[i] == s[i + 1]) i++, cnt1++;
            while (j < n && w[j] == w[j + 1]) j++, cnt2++;
            if (cnt1 < cnt2 || (cnt1 > 1 && cnt1 < cnt2)) return false;
            i++, j++;
        }
        return i == m && j == n;

=======

        int n = s.size();
        int count = 0;
        for (auto word : words) {
            int i = 0;
            int j = 0;
            while (i < n && j < word.size()) {
                if (s[i] != word[j]) {
                    break;
                }
                int i1 = i;
                int j1 = j;
                while (i1 < n && s[i1] == s[i]) {
                    i1++;
                }
                while (j1 < word.size() && word[j1] == word[j]) {
                    j1++;
                }
                int n1 = i1 - i;
                int n2 = j1 - j;
                if (n1 < 3 && n1 != n2) {
                    break;
                }
                if (n1 >= 3 && n1 < n2) {
                    break;
                }
                i = i1;
                j = j1;
            }
            if (i == n && j == word.size()) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        for (string& word: words) {
            int i = 0, j = 0;
            while (j < word.size()) {
                if (i < s.size() && s[i] == word[j]) {
                    ++i;
                    ++j;
                } else if (i > 0 && s[i-1] == s[i] && i+1 < s.size() && s[i] == s[i+1]) {
                    ++i;
                } else {
                    break;
                }
            }
            if (i == s.size() && j == word.size()) {
                ++res;
            }
        }
        return res;

=======

        int res = 0;
        for (auto w : words) {
            if (check(s, w)) res++;
        }
        return res;
    }
    
    bool check(string& s, string& w) {
        int i = 0, j = 0, m = s.size(), n = w.size();
        while (i < m && j < n) {
            if (s[i] != w[j]) return false;
            int cnt1 = 0, cnt2 = 0;
            while (i < m && s[i] == s[i + 1]) i++, cnt1++;
            while (j < n && w[j] == w[j + 1]) j++, cnt2++;
            if (cnt1 < cnt2 || (cnt1 > 1 && cnt1 < cnt2)) return false;
            i++, j++;
        }
        return i == m && j == n;

=======

        int n = s.size();
        int count = 0;
        for (auto word : words) {
            int i = 0;
            int j = 0;
            while (i < n && j < word.size()) {
                if (s[i] != word[j]) {
                    break;
                }
                int i1 = i;
                int j1 = j;
                while (i1 < n && s[i1] == s[i]) {
                    i1++;
                }
                while (j1 < word.size() && word[j1] == word[j]) {
                    j1++;
                }
                int n1 = i1 - i;
                int n2 = j1 - j;
                if (n1 < 3 && n1 != n2) {
                    break;
                }
                if (n1 >= 3 && n1 < n2) {
                    break;
                }
                i = i1;
                j = j1;
            }
            if (i == n && j == word.size()) {
                count++;
            }
        }
        return count;

=======

        int res = 0;
        for (string& word: words) {
            int i = 0, j = 0;
            while (j < word.size()) {
                if (i < s.size() && s[i] == word[j]) {
                    ++i;
                    ++j;
                } else if (i > 0 && s[i-1] == s[i] && i+1 < s.size() && s[i] == s[i+1]) {
                    ++i;
                } else {
                    break;
                }
            }
            if (i == s.size() && j == word.size()) {
                ++res;
            }
        }
        return res;
