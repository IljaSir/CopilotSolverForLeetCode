Synthesizing 10/10 solutions

=======

        int n = arr.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[arr[i]] = i;
        }
        vector<vector<int>> dp(n, vector<int>(n, 2));
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int k = arr[j] - arr[i];
                if (k < arr[i] && m.count(k)) {
                    dp[i][j] = dp[m[k]][i] + 1;
                }
                res = max(res, dp[i][j]);
            }
        }
        return res > 2 ? res : 0;

=======

        int n = arr.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) {
            mp[arr[i]] = i;
        }
        vector<vector<int>> dp(n, vector<int>(n, 2));
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (mp.find(arr[j] - arr[i]) != mp.end()) {
                    int k = mp[arr[j] - arr[i]];
                    if (k < i) {
                        dp[i][j] = dp[k][i] + 1;
                    }
                }
                ans = max(ans, dp[i][j]);
            }
        }
        return ans > 2 ? ans : 0;

=======

        int n = arr.size();
        unordered_map<int, int> mp;
        for (int i = 0; i < n; i++) mp[arr[i]] = i;
        vector<vector<int>> dp(n, vector<int>(n));
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (mp.count(arr[j] - arr[i])) {
                    int k = mp[arr[j] - arr[i]];
                    if (k < i) {
                        dp[i][j] = dp[k][i] + 1;
                        ans = max(ans, dp[i][j]);
                    }
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        unordered_set<int> s(arr.begin(), arr.end());
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = arr[i], b = arr[j], l = 2;
                while (s.count(a + b)) {
                    b = a + b;
                    a = b - a;
                    l++;
                }
                ans = max(ans, l);
            }
        }
        return ans > 2 ? ans : 0;

=======

        int n = arr.size(), ans = 0;
        vector<vector<int>> dp(n, vector<int>(n, 2));
        unordered_map<int, int> pos;
        for (int i = 0; i < n; ++i) pos[arr[i]] = i;
        for (int j = 0; j < n; ++j) {
            for (int k = j + 1; k < n; ++k) {
                int i = pos.find(arr[k] - arr[j]) == pos.end() ? -1 : pos[arr[k] - arr[j]];
                if (i >= 0 && i < j) {
                    dp[j][k] = dp[i][j] + 1;
                    ans = max(ans, dp[j][k]);
                }
            }
        }
        return ans >= 3 ? ans : 0;

=======

        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[arr[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int target = arr[j] - arr[i];
                if (m.find(target) != m.end() && m[target] < i) {
                    dp[i][j] = dp[m[target]][i] + 1;
                }
                ans = max(ans, dp[i][j]);
            }
        }
        return ans > 0 ? ans + 2 : 0;

=======

        int n = arr.size();
        if (n < 3) return 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[arr[i]] = i;
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                int target = arr[i] + arr[j];
                if (m.find(target) == m.end()) continue;
                dp[i][j] = dp[j][m[target]] + 1;
                res = max(res, dp[i][j]);
            }
        }
        return res == 0 ? 0 : res + 2;

=======

        int n = arr.size();
        if (n < 3) return 0;
        unordered_map<int, int> mp;
        for (int i = 0; i < n; ++i) {
            mp[arr[i]] = i;
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int ans = 0;
        for (int i = 2; i < n; ++i) {
            for (int j = i - 1; j >= 1; --j) {
                int k = mp.find(arr[i] - arr[j]) != mp.end() ? mp[arr[i] - arr[j]] : -1;
                if (k >= 0 && k < j) {
                    dp[j][i] = dp[k][j] + 1;
                    ans = max(ans, dp[j][i]);
                }
            }
        }
        return ans >= 2 ? ans + 2 : 0;

=======

        int n = arr.size();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        int res = 0;
        for (int i = 2; i < n; i++) {
            int l = 0;
            int r = i - 1;
            while (l < r) {
                if (arr[l] + arr[r] == arr[i]) {
                    dp[r][i] = dp[l][r] + 1;
                    res = max(res, dp[r][i]);
                    l++;
                    r--;
                } else if (arr[l] + arr[r] < arr[i]) {
                    l++;
                } else {
                    r--;
                }
            }
        }
        return res == 0 ? 0 : res + 2;

=======

        int n = arr.size();
        int maxLen = 0;
        unordered_map<int, int> pos;
        for (int i = 0; i < n; i++) {
            pos[arr[i]] = i;
        }
        vector<vector<int>> dp(n, vector<int>(n, 2));
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                int target = arr[j] - arr[i];
                if (target >= arr[i]) {
                    break;
                }
                if (pos.count(target)) {
                    dp[i][j] = dp[pos[target]][i] + 1;
                }
                maxLen = max(maxLen, dp[i][j]);
            }
        }
        return maxLen > 2 ? maxLen : 0;
