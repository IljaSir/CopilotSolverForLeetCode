Synthesizing 10/10 solutions

=======

        int res = 0;
        unordered_map<int, int> m;
        for (auto& r : reservedSeats) {
            m[r[0]] |= 1 << (r[1] - 1);
        }
        for (auto& [k, v] : m) {
            int cnt = 0;
            if ((v & 0b1111000000) == 0) {
                ++cnt;
            }
            if ((v & 0b111100) == 0) {
                ++cnt;
            }
            if ((v & 0b11110000) == 0) {
                ++cnt;
            }
            res += cnt;
        }
        res += (n - m.size()) * 2;
        return res;

=======

        unordered_map<int, int> reserved;
        for (auto& seat : reservedSeats) {
            reserved[seat[0]] |= (1 << (seat[1] - 1));
        }
        int ans = 0;
        for (auto& [row, mask] : reserved) {
            int left = 0b1111000000;
            int mid = 0b111100;
            int right = 0b111100000000;
            if ((mask & left) == 0) {
                ans += 1;
            }
            if ((mask & mid) == 0) {
                ans += 1;
            }
            if ((mask & right) == 0) {
                ans += 1;
            }
        }
        ans += (n - reserved.size()) * 2;
        return ans;

=======

        unordered_map<int, int> reserved;
        for (auto& v : reservedSeats) {
            reserved[v[0]] |= (1 << (v[1] - 1));
        }
        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            if (reserved.find(i) == reserved.end()) {
                ans += 2;
            } else {
                if (reserved[i] & 0b11111100) {
                    ans += 1;
                }
                if (reserved[i] & 0b00001111) {
                    ans += 1;
                }
                if (reserved[i] & 0b11110000) {
                    ans += 1;
                }
            }
        }
        return ans;

=======

        vector<int> seats(n, 0);
        for (auto& seat : reservedSeats) {
            int row = seat[0] - 1;
            int col = seat[1] - 1;
            seats[row] |= (1 << col);
        }
        int result = n * 2;
        for (int seat : seats) {
            if (seat & 0x3c) {
                result--;
            }
            if (seat & 0x3c0) {
                result--;
            }
            if (seat & 0x3c00) {
                result--;
            }
            if (seat & 0x3c000) {
                result--;
            }
            if (!(seat & 0x3c) && !(seat & 0x3c0) && !(seat & 0x3c00) && !(seat & 0x3c000)) {
                result++;
            }
        }
        return result;

=======

        int result = 2 * n;
        unordered_map<int, int> map;
        for (auto& seat : reservedSeats) {
            map[seat[0]] |= 1 << seat[1];
        }
        for (auto& pair : map) {
            int mask = pair.second;
            if ((mask & 0b1111111100) == 0) {
                result -= 2;
            } else if ((mask & 0b11111100) == 0) {
                result -= 1;
            } else if ((mask & 0b111100) == 0) {
                result -= 1;
            } else if ((mask & 0b1111000000) == 0) {
                result -= 1;
            }
        }
        return result;

=======

        int res = n * 2;
        map<int, vector<int>> m;
        for (auto &v: reservedSeats) {
            m[v[0]].push_back(v[1]);
        }
        for (auto &p: m) {
            vector<int> &v = p.second;
            bool l = false, r = false;
            for (auto &x: v) {
                if (x >= 2 && x <= 5) l = true;
                if (x >= 6 && x <= 9) r = true;
            }
            if (l && r) res -= 2;
            else if (l || r) res -= 1;
        }
        return res;

=======

        sort(reservedSeats.begin(), reservedSeats.end());
        int res = 2 * n;
        int prev = 0;
        for (int i = 0; i < reservedSeats.size(); i++) {
            if (reservedSeats[i][0] != prev) {
                prev = reservedSeats[i][0];
                res -= 2;
            }
            if (reservedSeats[i][1] >= 2 && reservedSeats[i][1] <= 5) {
                res++;
                break;
            }
        }
        for (int i = 0; i < reservedSeats.size(); i++) {
            if (reservedSeats[i][0] != prev) {
                prev = reservedSeats[i][0];
                res -= 2;
            }
            if (reservedSeats[i][1] >= 4 && reservedSeats[i][1] <= 7) {
                res++;
                break;
            }
        }
        for (int i = 0; i < reservedSeats.size(); i++) {
            if (reservedSeats[i][0] != prev) {
                prev = reservedSeats[i][0];
                res -= 2;
            }
            if (reservedSeats[i][1] >= 6 && reservedSeats[i][1] <= 9) {
                res++;
                break;
            }
        }
        return res;

=======

        int ans = 0;
        map<int, int> M;
        for (auto &v: reservedSeats) {
            M[v[0]] |= 1 << (v[1] - 1);
        }
        for (auto &v: M) {
            int r = v.second;
            if (r & 0b0001111000) continue;
            if (r & 0b0000000111) {
                if (r & 0b1110000000) continue;
                ans += 1;
            } else {
                ans += 2;
            }
        }
        return ans + 2 * (n - M.size());

=======

        int ans = 0;
        int m = reservedSeats.size();
        sort(reservedSeats.begin(), reservedSeats.end());
        int i = 0;
        while(i < m) {
            int j = i;
            while(j < m && reservedSeats[j][0] == reservedSeats[i][0]) j++;
            int cnt = 0;
            for(int k = i; k < j; k++) {
                if(reservedSeats[k][1] >= 2 && reservedSeats[k][1] <= 5) {
                    cnt |= 1;
                }
                if(reservedSeats[k][1] >= 6 && reservedSeats[k][1] <= 9) {
                    cnt |= 2;
                }
            }
            if(cnt == 0) {
                ans += 2;
            } else if(cnt == 1 || cnt == 2) {
                ans += 1;
            }
            i = j;
        }
        return ans + (n - reservedSeats.size()) * 2;

=======

        int ret = 0;
        unordered_map<int, vector<int>> m;
        for (auto &v : reservedSeats) {
            m[v[0]].push_back(v[1]);
        }
        for (auto &[k, v] : m) {
            ret += 2;
            bool left = true, right = true;
            for (auto &x : v) {
                if (x > 2 && x < 7) {
                    left = false;
                }
                if (x > 6 && x < 9) {
                    right = false;
                }
            }
            if (left && right) {
                ret++;
            } else if (left || right) {
                ret += 0.5;
            }
        }
        return ret + (n - m.size()) * 2;
