Synthesizing 10/10 solutions

=======

        int mod = 1e9 + 7;
        int dp[n + 1][2];
        dp[0][0] = dp[0][1] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][0] * dp[i - 1][1]) % mod;
        }
        return dp[n][0];

=======

        int a = 1, b = 1;
        for (int i = 0; i < n; ++i) {
            int c = a + b;
            a = b;
            b = c;
        }
        return a + b;

=======

        int mod = 1e9 + 7;
        vector<int> dp(n + 1);
        dp[0] = 1;
        dp[1] = 4;
        dp[2] = 9;
        for (int i = 3; i <= n; ++i) {
            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % mod;
        }
        return dp[n];

=======

        long long int dp[n+1][2];
        dp[0][0]=dp[0][1]=1;
        for(int i=1;i<=n;i++){
            dp[i][0]=(dp[i-1][0]+dp[i-1][1])%1000000007;
            dp[i][1]=(dp[i-1][0]+dp[i-1][1]+dp[i-1][1])%1000000007;
        }
        return (dp[n][0]+dp[n][1])%1000000007;

=======

        int a = 1, b = 1, c = 1, d = 1, e = 1, f = 1;
        for (int i = 1; i <= n; ++i) {
            int na = a + c + e;
            int nb = b + d + f;
            int nc = a + b + c + d + e + f;
            int nd = b + d + f;
            int ne = a + c + e;
            int nf = b + d + f;
            a = na % 1000000007;
            b = nb % 1000000007;
            c = nc % 1000000007;
            d = nd % 1000000007;
            e = ne % 1000000007;
            f = nf % 1000000007;
        }
        return (a + b + c + d + e + f) % 1000000007;

=======

        long long a = 1, b = 1, c = 1;
        for (int i = 1; i <= n; ++i) {
            c = (a + b) % 1000000007;
            a = b;
            b = c;
        }
        return c;

=======

        // write your code here
        int mod = 1e9 + 7;
        vector<long long> dp(n + 1, 0);
        dp[1] = 4;
        dp[2] = 9;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % mod;
            dp[i] = (dp[i] + dp[i - 2]) % mod;
        }
        return dp[n];

=======

        // dp[i] = dp[i - 1] * 2 + dp[i - 2]
        if (n == 1) return 4;
        if (n == 2) return 9;
        int dp1 = 4;
        int dp2 = 9;
        int dp = 0;
        for (int i = 3; i <= n; i++) {
            dp = dp2 * 2 + dp1;
            dp1 = dp2;
            dp2 = dp;
        }
        return dp;

=======

        int MOD = 1e9 + 7;
        int a = 1, b = 1;
        for (int i = 1; i <= n; ++i) {
            int c = (long long)(a + b) * (a + b) % MOD;
            a = b;
            b = c;
        }
        return b;

=======

        // n == 1, 4
        // n == 2, 9
        // n == 3, 25
        // n == 4, 64
        // n == 5, 169
        // n == 6, 441
        // n == 7, 1156
        // n == 8, 3025
        // n == 9, 7921
        // n == 10, 20736
        // n == 11, 54756
        // n == 12, 144489
        // n == 13, 381961
        // n == 14, 1012824
        // n == 15, 2696369
        // n == 16, 7157953
        // n == 17, 19130976
        // n == 18, 51021449
        // n == 19, 135577521
        // n == 20, 360273169
        // n == 21, 960747945
        // n == 22, 2562072896
        // n == 23, 6842105269
        // n == 24, 18326319905
        // n == 25, 48907103824
        // n == 26, 131128371089
        // n == 27, 352457744225
        // n == 28, 945150020576
        // n == 29, 2539979428416
        // n == 30, 6836063564496
        // n == 31, 18454929282441
        // n == 32, 49736582620096
        // n == 33, 133407831472225
        // n == 34, 359400884353489
        // n == 35, 969323030195225
        // n == 36, 2615348739311361
        // n == 37, 7028452667923969
        // n == 38, 18933458527957256
        // n == 39, 51173808071598849
        // n == 40, 137806862909114769
        //
