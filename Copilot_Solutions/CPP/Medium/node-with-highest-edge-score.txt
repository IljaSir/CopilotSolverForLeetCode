Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            score[edges[i]] += i;
        }
        int maxScore = *max_element(score.begin(), score.end());
        int maxNode = -1;
        for (int i = 0; i < n; ++i) {
            if (score[i] == maxScore) {
                if (maxNode == -1 || i < maxNode) {
                    maxNode = i;
                }
            }
        }
        return maxNode;

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            score[edges[i]] += i;
        }
        int maxScore = 0;
        int maxIndex = 0;
        for (int i = 0; i < n; ++i) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; i++) {
            score[edges[i]] += i;
        }
        int maxScore = 0;
        int maxNode = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxNode = i;
            }
        }
        return maxNode;

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; i++) {
            score[edges[i]]++;
        }
        int max_score = 0;
        int max_index = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] > max_score) {
                max_score = score[i];
                max_index = i;
            }
        }
        return max_index;

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            score[edges[i]]++;
        }
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < n; ++i) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxScoreNode = i;
            }
        }
        return maxScoreNode;

=======

        int n = edges.size();
        vector<int> in(n, 0);
        for (int i = 0; i < n; ++i) {
            ++in[edges[i]];
        }
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            score[edges[i]] += i;
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (in[i] == 0) {
                continue;
            }
            if (score[i] > score[res]) {
                res = i;
            } else if (score[i] == score[res]) {
                res = min(res, i);
            }
        }
        return res;

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; ++i) {
            score[edges[i]]++;
        }
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < n; ++i) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                maxScoreNode = i;
            }
        }
        return maxScoreNode;

=======

        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < edges.size(); i++) {
            int score = 0;
            for (int j = 0; j < edges.size(); j++) {
                if (edges[j] == i) {
                    score += j;
                }
            }
            if (score > maxScore) {
                maxScore = score;
                maxScoreNode = i;
            }
        }
        return maxScoreNode;
    }
    int findCenter(vector<vector<int>>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (auto& edge : edges) {
            node[edge[0]]++;
            node[edge[1]]++;
        }
        int maxNode = 0;
        int maxCount = 0;
        for (int i = 0; i < node.size(); i++) {
            if (node[i] > maxCount) {
                maxCount = node[i];
                maxNode = i;
            }
        }
        return maxNode;
    }
    int getNodeWithHighestEdgeScore(vector<int>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (int i = 0; i < edges.size(); i++) {
            node[i] = edges[i];
        }
        return edgeScore(node);
    }
    int getNodeWithHighestEdgeScore2(vector<int>& edges) {
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < edges.size(); i++) {
            int score = 0;
            for (int j = 0; j < edges.size(); j++) {
                if (edges[j] == i) {
                    score += j;
                }
            }
            if (score > maxScore) {
                maxScore = score;
                maxScoreNode = i;
            }
        }
        return maxScoreNode;
    }
    int getNodeWithHighestEdgeScore3(vector<int>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (int i = 0; i < edges.size(); i++) {
            node[edges[i]] += i;
        }
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i =

=======

        int n = edges.size();
        vector<int> score(n, 0);
        for (int i = 0; i < n; i++) {
            score[edges[i]]++;
        }
        int max_score = 0;
        int max_index = 0;
        for (int i = 0; i < n; i++) {
            if (score[i] > max_score) {
                max_score = score[i];
                max_index = i;
            }
        }
        return max_index;

=======

        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < edges.size(); i++) {
            int score = 0;
            for (int j = 0; j < edges.size(); j++) {
                if (edges[j] == i) {
                    score += j;
                }
            }
            if (score > maxScore) {
                maxScore = score;
                maxScoreNode = i;
            }
        }
        return maxScoreNode;
    }
    int findCenter(vector<vector<int>>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (auto& edge : edges) {
            node[edge[0]]++;
            node[edge[1]]++;
        }
        int maxNode = 0;
        int maxCount = 0;
        for (int i = 0; i < node.size(); i++) {
            if (node[i] > maxCount) {
                maxCount = node[i];
                maxNode = i;
            }
        }
        return maxNode;
    }
    int getNodeWithHighestEdgeScore(vector<int>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (int i = 0; i < edges.size(); i++) {
            node[i] = edges[i];
        }
        return edgeScore(node);
    }
    int getNodeWithHighestEdgeScore2(vector<int>& edges) {
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i = 0; i < edges.size(); i++) {
            int score = 0;
            for (int j = 0; j < edges.size(); j++) {
                if (edges[j] == i) {
                    score += j;
                }
            }
            if (score > maxScore) {
                maxScore = score;
                maxScoreNode = i;
            }
        }
        return maxScoreNode;
    }
    int getNodeWithHighestEdgeScore3(vector<int>& edges) {
        vector<int> node(edges.size() + 1, 0);
        for (int i = 0; i < edges.size(); i++) {
            node[edges[i]] += i;
        }
        int maxScore = 0;
        int maxScoreNode = 0;
        for (int i =

=======

        int n = edges.size();
        vector<int> in(n);
        for (int i = 0; i < n; ++i) {
            ++in[edges[i]];
        }
        int maxScore = 0;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (in[i] > maxScore) {
                maxScore = in[i];
                res = i;
            }
        }
        return res;

=======

        int n = edges.size();
        vector<int> score(n,0);
        for(int i=0; i<n; i++) {
            score[edges[i]]++;
        }
        int maxScore = 0;
        int maxNode = 0;
        for(int i=0; i<n; i++) {
            if(score[i] > maxScore) {
                maxScore = score[i];
                maxNode = i;
            }
        }
        return maxNode;
