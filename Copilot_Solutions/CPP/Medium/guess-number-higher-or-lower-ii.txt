Synthesizing 7/10 solutions

=======

        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int len = 2; len <= n; ++len) {
            for (int start = 1; start <= n - len + 1; ++start) {
                int end = start + len - 1;
                int globalMin = INT_MAX;
                for (int pivot = start; pivot <= end; ++pivot) {
                    int localMax = pivot + max(
                        pivot > start ? dp[start][pivot - 1] : 0,
                        pivot < end ? dp[pivot + 1][end] : 0
                    );
                    globalMin = min(globalMin, localMax);
                }
                dp[start][end] = globalMin;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int len = 2; len <= n; ++len) {
            for (int start = 1; start <= n - len + 1; ++start) {
                int minVal = INT_MAX;
                for (int piv = start + (len - 1) / 2; piv < start + len - 1; ++piv) {
                    int tmp = piv + max(dp[start][piv - 1], dp[piv + 1][start + len - 1]);
                    minVal = min(minVal, tmp);
                }
                dp[start][start + len - 1] = minVal;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int i = n - 1; i > 0; --i) {
            for (int j = i + 1; j <= n; ++j) {
                int global_min = INT_MAX;
                for (int k = i; k < j; ++k) {
                    int local_max = k + max(dp[i][k - 1], dp[k + 1][j]);
                    global_min = min(global_min, local_max);
                }
                dp[i][j] = global_min;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for (int len = 2; len <= n; ++len) {
            for (int start = 1; start <= n - len + 1; ++start) {
                int end = start + len - 1;
                int min_res = INT_MAX;
                for (int i = start; i < end; ++i) {
                    int res = i + max(dp[start][i-1], dp[i+1][end]);
                    min_res = min(min_res, res);
                }
                dp[start][end] = min_res;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        for (int len = 2; len <= n; len++) {
            for (int start = 1; start <= n - len + 1; start++) {
                int end = start + len - 1;
                int globalMin = INT_MAX;
                for (int pivot = start; pivot <= end; pivot++) {
                    int localMax = pivot + max(dp[start][pivot-1], dp[pivot+1][end]);
                    globalMin = min(globalMin, localMax);
                }
                dp[start][end] = globalMin;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= n; ++i) {
            for (int j = i - 1; j > 0; --j) {
                int globalMin = INT_MAX;
                for (int k = j + 1; k < i; ++k) {
                    int localMax = k + max(dp[j][k - 1], dp[k + 1][i]);
                    globalMin = min(globalMin, localMax);
                }
                dp[j][i] = j + 1 == i ? j : globalMin;
            }
        }
        return dp[1][n];

=======

        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int len = 1; len <= n; len++) {
            for (int i = 1; i + len - 1 <= n; i++) {
                int j = i + len - 1;
                dp[i][j] = INT_MAX;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = min(dp[i][j], k + max(dp[i][k - 1], dp[k + 1][j]));
                }
            }
        }
        return dp[1][n];
