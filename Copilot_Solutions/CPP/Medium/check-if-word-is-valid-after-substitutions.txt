Synthesizing 10/10 solutions (Duplicates hidden)

=======

        stack<char> st;
        for (char c : s) {
            if (c == 'c') {
                if (st.empty() || st.top() != 'b') return false;
                st.pop();
                if (st.empty() || st.top() != 'a') return false;
                st.pop();
            } else {
                st.push(c);
            }
        }
        return st.empty();

=======

        stack<char> st;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == 'c') {
                if (st.size() < 2) return false;
                char a = st.top();
                st.pop();
                char b = st.top();
                st.pop();
                if (a == 'b' && b == 'a') {
                    continue;
                } else {
                    return false;
                }
            } else {
                st.push(s[i]);
            }
        }
        return st.empty();

=======

        int n = s.size();
        if (n % 3 != 0) return false;
        stack<char> st;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'c') {
                if (st.empty() || st.top() != 'b') return false;
                st.pop();
                if (st.empty() || st.top() != 'a') return false;
                st.pop();
            } else {
                st.push(s[i]);
            }
        }
        return st.empty();

=======

        string t;
        for (int i = 0; i < s.size(); ++i) {
            t += s[i];
            if (t.size() >= 3 && t.substr(t.size() - 3) == "abc") {
                t.resize(t.size() - 3);
            }
        }
        return t.empty();

=======

        string t;
        for (char c : s) {
            t += c;
            if (t.size() >= 3 && t.substr(t.size() - 3) == "abc") t.resize(t.size() - 3);
        }
        return t.empty();

=======

        string t = "";
        for (char ch : s) {
            t += ch;
            if (t.length() >= 3) {
                if (t[t.length() - 1] == 'c' && t[t.length() - 2] == 'b' && t[t.length() - 3] == 'a') {
                    t = t.substr(0, t.length() - 3);
                }
            }
        }
        return t == "";

=======

        string t = "";
        for (auto c : s) {
            t.push_back(c);
            int n = t.size();
            if (n >= 3 && t[n-1] == 'c' && t[n-2] == 'b' && t[n-3] == 'a') {
                t.pop_back();
                t.pop_back();
                t.pop_back();
            }
        }
        return t.empty();

=======

        int n = s.length();
        if (n % 3 != 0) return false;
        if (n == 0) return true;
        string t = "";
        for (int i = 0; i < n; i++) {
            t += s[i];
            int m = t.length();
            if (m >= 3 && t.substr(m - 3, 3) == "abc") {
                t = t.substr(0, m - 3);
            }
        }
        return t.length() == 0;

=======

        if (s.empty()) return true;
        if (s.size() < 3) return false;
        string t;
        for (auto ch : s) {
            t.push_back(ch);
            if (t.size() >= 3 && t[t.size() - 3] == 'a' && t[t.size() - 2] == 'b' && t[t.size() - 1] == 'c') {
                t.pop_back();
                t.pop_back();
                t.pop_back();
            }
        }
        return t.empty();
