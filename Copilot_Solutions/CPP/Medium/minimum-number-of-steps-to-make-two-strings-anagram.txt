Synthesizing 10/10 solutions

=======

        int count[26] = {0};
        for (int i = 0; i < s.size(); ++i) {
            count[s[i] - 'a']++;
            count[t[i] - 'a']--;
        }
        int result = 0;
        for (int i = 0; i < 26; ++i) {
            if (count[i] > 0) {
                result += count[i];
            }
        }
        return result;

=======

        int a[26] = {0};
        for (char c : s) {
            a[c - 'a']++;
        }
        for (char c : t) {
            a[c - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += abs(a[i]);
        }
        return res / 2;

=======

        vector<int> vec(26, 0);
        for (char c : s) {
            vec[c - 'a']++;
        }
        for (char c : t) {
            vec[c - 'a']--;
        }
        int res = 0;
        for (int i : vec) {
            res += abs(i);
        }
        return res / 2;

=======

        int n = s.size();
        vector<int> count(26, 0);
        for (int i = 0; i < n; ++i) {
            ++count[s[i] - 'a'];
            --count[t[i] - 'a'];
        }
        int res = 0;
        for (int i = 0; i < 26; ++i) {
            if (count[i] > 0) {
                res += count[i];
            }
        }
        return res;

=======

        vector<int> cnt(26, 0);
        for (char c : s) {
            cnt[c - 'a']++;
        }
        int res = 0;
        for (char c : t) {
            if (cnt[c - 'a'] > 0) {
                cnt[c - 'a']--;
            } else {
                res++;
            }
        }
        return res;

=======

        unordered_map<char, int> m;
        for (char c : s) {
            m[c]++;
        }
        for (char c : t) {
            m[c]--;
        }
        int result = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            result += abs(it->second);
        }
        return result / 2;

=======

        int a[26] = {0};
        int b[26] = {0};
        int n = s.size();
        for(int i = 0; i < n; i++) {
            a[s[i] - 'a']++;
            b[t[i] - 'a']++;
        }
        int ans = 0;
        for(int i = 0; i < 26; i++) {
            if(a[i] < b[i]) {
                ans += b[i] - a[i];
            }
        }
        return ans;

=======

        int count = 0;
        int freq[26] = {0};
        for (char c : s) {
            freq[c - 'a']++;
        }
        for (char c : t) {
            if (freq[c - 'a'] > 0) {
                freq[c - 'a']--;
            } else {
                count++;
            }
        }
        return count;

=======

        unordered_map<char, int> mp;
        for (auto c : s) {
            mp[c]++;
        }
        int cnt = 0;
        for (auto c : t) {
            if (mp.count(c) && mp[c] > 0) {
                mp[c]--;
            } else {
                cnt++;
            }
        }
        return cnt;

=======

        int n = s.length();
        int m = t.length();
        if (n != m) return 0;
        unordered_map<char, int> map;
        for (auto c: s) map[c]++;
        for (auto c: t) map[c]--;
        int ans = 0;
        for (auto it: map) {
            ans += max(0, it.second);
        }
        return ans;
