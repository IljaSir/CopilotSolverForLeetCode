Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> sum(n+1, 0);
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i-1] + (s[i-1] - '0');
        }
        int minPart = n;
        for (int i = 0; i < n; i++) {
            int j = i;
            int part = 1;
            while (j < n) {
                int l = j;
                int r = n;
                while (r - l > 1) {
                    int mid = l + (r-l)/2;
                    if (sum[mid] - sum[j] <= k) {
                        l = mid;
                    } else {
                        r = mid;
                    }
                }
                if (l == j) {
                    part = -1;
                    break;
                }
                j = l;
                part++;
            }
            if (part != -1) {
                minPart = min(minPart, part);
            }
        }
        return minPart;

=======

        int n = s.size();
        vector<int> dp(1 << n, INT_MAX);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == INT_MAX) continue;
            int cur = 0;
            for (int i = 0; i < n; i++) {
                if (mask & (1 << i)) continue;
                cur = cur * 10 + s[i] - '0';
                if (cur > k) break;
                dp[mask | (1 << i)] = min(dp[mask | (1 << i)], dp[mask] + 1);
            }
        }
        return dp[(1 << n) - 1] == INT_MAX ? -1 : dp[(1 << n) - 1];

=======

        int n = s.length();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int mx = 0;
            for (int j = i; j < n; ++j) {
                mx = max(mx, s[j] - '0');
                if (mx > k) break;
                ans = max(ans, j - i + 1);
            }
        }
        return ans == n ? -1 : n - ans;

=======

        int n = s.size();
        vector<int> num(n+1);
        for (int i = 1; i <= n; ++i) {
            num[i] = num[i-1] * 10 + s[i-1] - '0';
            if (num[i] > k) return -1;
        }
        vector<int> dp(n+1, n);
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            int cur = 0;
            for (int j = i; j >= 1; --j) {
                cur = cur * 10 + s[j-1] - '0';
                if (cur > k) break;
                dp[i] = min(dp[i], dp[j-1] + 1);
            }
        }
        return dp[n];

=======

        int n = s.size();
        vector<int> dp(n + 1);
        for (int i = 0; i < n; ++i) {
            int mx = 0, mn = 10;
            for (int j = i; j < n; ++j) {
                mx = max(mx, s[j] - '0');
                mn = min(mn, s[j] - '0');
                if (mx - mn > k) break;
                dp[j + 1] = max(dp[j + 1], dp[i] + 1);
            }
        }
        return dp[n];

=======

        int n = s.size();
        int dp[n];
        for (int i = 0; i < n; i++) dp[i] = INT_MAX;
        dp[0] = s[0] - '0';
        for (int i = 1; i < n; i++) {
            dp[i] = s[i] - '0';
            for (int j = i; j >= 1; j--) {
                if (dp[j - 1] == INT_MAX) continue;
                dp[i] = min(dp[i], dp[j - 1] + (s[j] - '0'));
            }
        }
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (dp[i] <= k) {
                res = i;
                break;
            }
        }
        if (dp[res] == INT_MAX) return -1;
        int ans = 0;
        for (int i = 0; i <= res; i++) {
            if (s[i] == '1') {
                ans++;
            }
        }
        return ans;

=======

        int n = s.size();
        int ans = 1;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur = max(cur, s[i] - '0');
            if (cur > k) {
                ans++;
                cur = s[i] - '0';
            }
        }
        return ans;

=======

        int n = s.size();
        vector<int> dp(n+1, INT_MAX);
        dp[0] = 0;
        for(int i=1; i<=n; i++) {
            int cur = 0;
            for(int j=i; j>=1; j--) {
                cur = cur*10 + s[j-1] - '0';
                if(cur > k) break;
                if(dp[j-1] != INT_MAX) dp[i] = min(dp[i], dp[j-1]+1);
            }
        }
        return dp[n] == INT_MAX ? -1 : dp[n];

=======

        int n = s.size(), res = 0;
        for (int i = 0; i < n; ) {
            int j = i + 1;
            while (j < n && s[j - 1] <= s[j]) ++j;
            int len = j - i;
            if (len > k) return -1;
            res += (len + k - 1) / k;
            i = j;
        }
        return res;

=======

        int n = s.length();
        vector<int> prefixSum(n + 1);
        vector<int> last(10, -1);
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + (s[i] - '0');
            last[s[i] - '0'] = i;
        }
        int ans = INT_MAX;
        for (int i = 0; i < n; i++) {
            int curr = 0;
            int maxEnd = 0;
            for (int j = 0; j < 10; j++) {
                if (last[j] > i) {
                    maxEnd = max(maxEnd, last[j]);
                    curr++;
                }
            }
            if (curr == 0) {
                break;
            }
            ans = min(ans, curr + 1);
            i = maxEnd;
        }
        return ans == INT_MAX ? -1 : ans;
