Synthesizing 10/10 solutions

=======

        unordered_map<string, int> dp;
        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.size() < b.size();
        });
        int ans = 0;
        for (const string& word : words) {
            int best = 0;
            for (int i = 0; i < word.size(); ++i) {
                string prev = word.substr(0, i) + word.substr(i + 1);
                best = max(best, dp[prev] + 1);
            }
            dp[word] = best;
            ans = max(ans, best);
        }
        return ans;

=======

        sort(words.begin(), words.end(), [](const string& a, const string& b) { return a.size() < b.size(); });
        unordered_map<string, int> dp;
        int ans = 0;
        for (auto& w : words) {
            int best = 0;
            for (int i = 0; i < w.size(); ++i) {
                string prev = w.substr(0, i) + w.substr(i + 1);
                best = max(best, dp[prev] + 1);
            }
            dp[w] = best;
            ans = max(ans, best);
        }
        return ans;

=======

        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.size() < b.size();
        });
        int n = words.size();
        unordered_map<string, int> dp;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[words[i]] = 1;
            for (int j = 0; j < words[i].size(); j++) {
                string s = words[i].substr(0, j) + words[i].substr(j + 1);
                if (dp.count(s)) {
                    dp[words[i]] = max(dp[words[i]], 1 + dp[s]);
                }
            }
            ans = max(ans, dp[words[i]]);
        }
        return ans;

=======

        sort(words.begin(), words.end(), [](const string& a, const string& b) {return a.size() < b.size();});
        int n = words.size();
        vector<int> dp(n, 1);
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (words[j].size() - words[i].size() > 1) break;
                if (isPredecessor(words[i], words[j])) dp[j] = max(dp[j], dp[i] + 1);
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int n = words.size();
        sort(words.begin(), words.end(), [](string& a, string& b) { return a.size() < b.size(); });
        vector<int> dp(n, 1);
        int res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (words[i].size() == words[j].size()) continue;
                if (words[i].size() - words[j].size() > 1) break;
                if (isPredecessor(words[i], words[j])) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            res = max(res, dp[i]);
        }
        return res;
    }
    bool isPredecessor(string& a, string& b) {
        int i = 0, j = 0;
        while (i < a.size() && j < b.size()) {
            if (a[i] == b[j]) {
                i++;
                j++;
            } else {
                i++;
            }
        }
        return j == b.size();

=======

        sort(words.begin(), words.end(), [](string& a, string& b) {
            return a.size() < b.size();
        });
        unordered_map<string, int> mp;
        int res = 0;
        for (auto& word : words) {
            for (int i = 0; i < word.size(); ++i) {
                string prev = word.substr(0, i) + word.substr(i + 1);
                mp[word] = max(mp[word], mp[prev] + 1);
            }
            res = max(res, mp[word]);
        }
        return res;

=======

        int n = words.size();
        if (n == 1) return 1;
        sort(words.begin(), words.end(), [](const string& a, const string& b) {
            return a.length() < b.length();
        });
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (words[i].length() - words[j].length() > 1) continue;
                if (isPredecessor(words[j], words[i])) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
    
    bool isPredecessor(const string& a, const string& b) {
        int i = 0, j = 0;
        while (i < a.length() && j < b.length()) {
            if (a[i] == b[j]) {
                ++i;
                ++j;
            } else {
                ++j;
            }
        }
        return i == a.length();

=======

        sort(words.begin(), words.end(), [&](string& a, string& b) { return a.size() < b.size(); });
        int n = words.size();
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = i - 1; j >= 0 && words[i].size() - words[j].size() < 2; --j) {
                if (isPredecessor(words[j], words[i])) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return *max_element(dp.begin(), dp.end());

=======

        int ans = 0;
        unordered_map<string, int> dp;
        sort(words.begin(), words.end(), [](const string& a, const string& b) { return a.size() < b.size(); });
        for (string& w : words) {
            for (int i = 0; i < w.size(); ++i) {
                string pre = w.substr(0, i) + w.substr(i + 1);
                dp[w] = max(dp[w], dp[pre] + 1);
            }
            ans = max(ans, dp[w]);
        }
        return ans;

=======

        const int N = words.size();
        sort(words.begin(), words.end(), [](const string& a, const string& b) { return a.size() < b.size(); });
        vector<int> dp(N, 1);
        int ans = 1;
        for (int i = 1; i < N; ++i) {
            for (int j = 0; j < i; ++j) {
                if (words[i].size() - words[j].size() > 1) continue;
                if (check(words[i], words[j])) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            ans = max(ans, dp[i]);
        }
        return ans;
