Synthesizing 10/10 solutions

=======

        int m = board.size();
        int n = board[0].size();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if ((i == 0 || i == m - 1 || j == 0 || j == n - 1) && board[i][j] == 'O') {
                    dfs(board, i, j);
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '*') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    void dfs(vector<vector<char>>& board, int i, int j) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != 'O') {
            return;
        }
        board[i][j] = '*';
        dfs(board, i + 1, j);
        dfs(board, i - 1, j);
        dfs(board, i, j + 1);
        dfs(board, i, j - 1);

=======

        int n = board.size();
        if (n == 0) return;
        int m = board[0].size();
        if (m == 0) return;
        for (int i = 0; i < n; i++) {
            if (board[i][0] == 'O') {
                dfs(board, i, 0, n, m);
            }
            if (board[i][m - 1] == 'O') {
                dfs(board, i, m - 1, n, m);
            }
        }
        for (int j = 0; j < m; j++) {
            if (board[0][j] == 'O') {
                dfs(board, 0, j, n, m);
            }
            if (board[n - 1][j] == 'O') {
                dfs(board, n - 1, j, n, m);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }

=======

        int m = board.size();
        if (m == 0) return;
        int n = board[0].size();
        if (n == 0) return;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') {
                dfs(board, visited, i, 0);
            }
            if (board[i][n-1] == 'O') {
                dfs(board, visited, i, n-1);
            }
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O') {
                dfs(board, visited, 0, j);
            }
            if (board[m-1][j] == 'O') {
                dfs(board, visited, m-1, j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '*') {
                    board[i][j] = 'O';
                }
            }
        }

=======

        int row = board.size();
        if (row == 0) return;
        int col = board[0].size();
        if (col == 0) return;
        for (int i = 0; i < row; i++) {
            if (board[i][0] == 'O') dfs(board, i, 0);
            if (board[i][col-1] == 'O') dfs(board, i, col-1);
        }
        for (int j = 0; j < col; j++) {
            if (board[0][j] == 'O') dfs(board, 0, j);
            if (board[row-1][j] == 'O') dfs(board, row-1, j);
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == 'Q') board[i][j] = 'O';
            }
        }

=======

        int m = board.size();
        int n = board[0].size();
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    if(board[i][j] == 'O') {
                        dfs(board, i, j, m, n);
                    }
                }
            }
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if(board[i][j] == 'A') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    void dfs(vector<vector<char>>& board, int i, int j, int m, int n) {
        if(i < 0 || i >= m || j < 0 || j >= n || board[i][j] == 'X' || board[i][j] == 'A') {
            return;
        }
        board[i][j] = 'A';
        dfs(board, i - 1, j, m, n);
        dfs(board, i + 1, j, m, n);
        dfs(board, i, j - 1, m, n);
        dfs(board, i, j + 1, m, n);

=======

        if (board.empty() || board[0].empty()) return;
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        queue<pair<int, int>> q;
        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') {
                q.push({i, 0});
                visited[i][0] = true;
            }
            if (board[i][n - 1] == 'O') {
                q.push({i, n - 1});
                visited[i][n - 1] = true;
            }
        }
        for (int j = 1; j < n - 1; j++) {
            if (board[0][j] == 'O') {
                q.push({0, j});
                visited[0][j] = true;
            }
            if (board[m - 1][j] == 'O') {
                q.push({m - 1, j});
                visited[m - 1][j] = true;
            }
        }
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            for (auto [dx, dy] : vector<pair<int, int>>{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {
                int nx = x + dx, ny = y + dy;
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || board[nx][ny] == 'X' || visited[nx][ny]) continue;
                q.push({nx, ny});
                visited[nx][ny] = true;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O' && !visited[i][j]) board[i][j] = 'X';
            }
        }

=======

        int m = board.size();
        if (m == 0) return;
        int n = board[0].size();
        if (n == 0) return;
        int i, j;
        for (i = 0; i < m; ++i) {
            if (board[i][0] == 'O') dfs(board, i, 0);
            if (board[i][n - 1] == 'O') dfs(board, i, n - 1);
        }
        for (j = 0; j < n; ++j) {
            if (board[0][j] == 'O') dfs(board, 0, j);
            if (board[m - 1][j] == 'O') dfs(board, m - 1, j);
        }
        for (i = 0; i < m; ++i) {
            for (j = 0; j < n; ++j) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
    }
    void dfs(vector<vector<char>>& board, int i, int j) {
        int m = board.size();
        int n = board[0].size();
        if (i < 0 || i >= m || j < 0 || j >= n) return;
        if (board[i][j] == 'O') {
            board[i][j] = '#';
            dfs(board, i - 1, j);
            dfs(board, i + 1, j);
            dfs(board, i, j - 1);
            dfs(board, i, j + 1);
        }

=======

        int m = board.size();
        int n = board[0].size();
        int i, j;
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    if (board[i][j] == 'O') {
                        dfs(board, i, j);
                    }
                }
            }
        }
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if (board[i][j] == 'M') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    void dfs(vector<vector<char>>& board, int i, int j) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size()) {
            return;
        }
        if (board[i][j] == 'O') {
            board[i][j] = 'M';
        }
        if (i > 0 && board[i - 1][j] == 'O') {
            dfs(board, i - 1, j);
        }
        if (i < board.size() - 1 && board[i + 1][j] == 'O') {
            dfs(board, i + 1, j);
        }
        if (j > 0 && board[i][j - 1] == 'O') {
            dfs(board, i, j - 1);
        }
        if (j < board[0].size() - 1 && board[i][j + 1] == 'O') {
            dfs(board, i, j + 1);
        }

=======

        if (board.size() == 0 || board[0].size() == 0) return;
        int m = board.size(), n = board[0].size();
        queue<pair<int, int>> que;
        vector<vector<int>> visited(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 'O' && !visited[i][j]) {
                    visited[i][j] = 1;
                    que.push({i, j});
                    bool flag = true;
                    while (!que.empty()) {
                        int x = que.front().first, y = que.front().second;
                        que.pop();
                        if (x == 0 || x == m-1 || y == 0 || y == n-1) flag = false;
                        if (x > 0 && board[x-1][y] == 'O' && !visited[x-1][y]) {
                            visited[x-1][y] = 1;
                            que.push({x-1, y});
                        }
                        if (x < m-1 && board[x+1][y] == 'O' && !visited[x+1][y]) {
                            visited[x+1][y] = 1;
                            que.push({x+1, y});
                        }
                        if (y > 0 && board[x][y-1] == 'O' && !visited[x][y-1]) {
                            visited[x][y-1] = 1;
                            que.push({x, y-1});
                        }
                        if (y < n-1 && board[x][y+1] == 'O' && !visited[x][y+1]) {
                            visited[x][y+1] = 1;
                            que.push({x, y+1});
                        }
                    }
                    if (flag) {
                        while (!que.empty()) {
                            int x = que.front().first, y = que.front().second;
                            que.pop();
                            board[x][y] = 'X';
                        }
                    }
                }
            }
        }

=======

        int m = board.size();
        if (m == 0) return;
        int n = board[0].size();
        if (n == 0) return;
        // 从边缘的O开始，向内部扩散
        for (int i = 0; i < m; i++) {
            dfs(board, i, 0);
            dfs(board, i, n - 1);
        }
        for (int j = 1; j < n - 1; j++) {
            dfs(board, 0, j);
            dfs(board, m - 1, j);
        }
        // 将O变为X，将#变为O
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
