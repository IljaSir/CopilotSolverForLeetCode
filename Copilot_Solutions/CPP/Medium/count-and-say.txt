Synthesizing 10/10 solutions

=======

        if (n == 1) return "1";
        string s = countAndSay(n - 1);
        string res = "";
        for (int i = 0; i < s.size(); i++) {
            int j = i;
            while (j < s.size() && s[i] == s[j]) j++;
            res += to_string(j - i) + s[i];
            i = j - 1;
        }
        return res;

=======

        if (n == 1) return "1";
        string s = countAndSay(n - 1);
        string res;
        int count = 1;
        char c = s[0];
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == c) {
                count++;
            } else {
                res += to_string(count) + c;
                count = 1;
                c = s[i];
            }
        }
        res += to_string(count) + c;
        return res;

=======

        if (n == 1) {
            return "1";
        }
        string s = countAndSay(n - 1);
        string res;
        int len = s.size();
        for (int i = 0; i < len; ++i) {
            int cnt = 1;
            while (i + 1 < len && s[i] == s[i + 1]) {
                ++cnt;
                ++i;
            }
            res += to_string(cnt) + s[i];
        }
        return res;

=======

        if (n == 1) return "1";
        string s = countAndSay(n-1);
        string res;
        int count = 1;
        for (int i = 1; i < s.size(); i++) {
            if (s[i] == s[i-1]) {
                count++;
            } else {
                res += to_string(count) + s[i-1];
                count = 1;
            }
        }
        res += to_string(count) + s.back();
        return res;

=======

        string s = "1";
        for (int i = 1; i < n; ++i) {
            string t;
            int count = 1;
            char c = s[0];
            for (int j = 1; j < s.size(); ++j) {
                if (s[j] == c) {
                    ++count;
                } else {
                    t.push_back(count + '0');
                    t.push_back(c);
                    c = s[j];
                    count = 1;
                }
            }
            t.push_back(count + '0');
            t.push_back(c);
            s = t;
        }
        return s;

=======

        string res = "1";
        for (int i = 2; i <= n; ++i) {
            string tmp;
            int j = 0;
            while (j < res.size()) {
                int k = j;
                while (k < res.size() && res[k] == res[j]) ++k;
                tmp += to_string(k - j) + res[j];
                j = k;
            }
            res = tmp;
        }
        return res;

=======

        if (n == 1) {
            return "1";
        }
        string result = "1";
        for (int i = 2; i <= n; i++) {
            string temp;
            int count = 1;
            for (int j = 1; j < result.length(); j++) {
                if (result[j] != result[j - 1]) {
                    temp += to_string(count) + result[j - 1];
                    count = 1;
                } else {
                    count++;
                }
            }
            temp += to_string(count) + result[result.length() - 1];
            result = temp;
        }
        return result;

=======

        if (n == 1) {
            return "1";
        }
        string prev = countAndSay(n - 1);
        string res;
        char cur = prev[0];
        int count = 1;
        for (int i = 1; i < prev.size(); i++) {
            if (prev[i] == cur) {
                count++;
            } else {
                res += to_string(count) + cur;
                cur = prev[i];
                count = 1;
            }
        }
        res += to_string(count) + cur;
        return res;

=======

        if (n == 1) {
            return "1";
        }
        string prev = countAndSay(n - 1);
        string res = "";
        int i = 0;
        int len = prev.length();
        while (i < len) {
            int j = i + 1;
            while (j < len && prev[j] == prev[i]) {
                j++;
            }
            res += to_string(j - i) + prev[i];
            i = j;
        }
        return res;

=======

        string seq = "1";
        for (int i = 2; i <= n; ++i) {
            string nextSeq;
            char curChar = seq[0];
            int curCharCount = 1;
            for (int j = 1; j < seq.size(); ++j) {
                if (seq[j] == curChar) {
                    ++curCharCount;
                } else {
                    nextSeq += to_string(curCharCount) + curChar;
                    curChar = seq[j];
                    curCharCount = 1;
                }
            }
            nextSeq += to_string(curCharCount) + curChar;
            seq = nextSeq;
        }
        return seq;
