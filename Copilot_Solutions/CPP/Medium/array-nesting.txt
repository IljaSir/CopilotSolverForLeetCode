Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<bool> vis(n, false);
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (!vis[i]) {
                int cnt = 0;
                for (int j = i; !vis[j]; j = nums[j]) {
                    vis[j] = true;
                    ++cnt;
                }
                ans = max(ans, cnt);
            }
        }
        return ans;

=======

        int ret = 0;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            for (int j = i; nums[j] >= 0; count++) {
                int t = nums[j];
                nums[j] = -1;
                j = t;
            }
            ret = max(ret, count);
        }
        return ret;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int start = nums[i], count = 0;
            do {
                start = nums[start];
                count++;
            } while (start != nums[i]);
            res = max(res, count);
        }
        return res;

=======

        int n = nums.size(), res = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; ++i) {
            if (visited[i]) continue;
            int start = nums[i], count = 0;
            do {
                start = nums[start];
                ++count;
                visited[start] = true;
            } while (start != nums[i]);
            res = max(res, count);
        }
        return res;

=======

        int res = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] != -1) {
                int count = 0;
                int j = i;
                while (nums[j] != -1) {
                    int temp = nums[j];
                    nums[j] = -1;
                    j = temp;
                    count++;
                }
                res = max(res, count);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<bool> visited(n, false);
        int max_len = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                continue;
            }
            int len = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = nums[j];
                len++;
            }
            max_len = max(max_len, len);
        }
        return max_len;

=======

        int maxNesting = 0;
        for (int i = 0; i < nums.size(); ++i) {
            int nesting = 0;
            for (int j = i; nums[j] >= 0; ++nesting) {
                int temp = nums[j];
                nums[j] = -1;
                j = temp;
            }
            maxNesting = max(maxNesting, nesting);
        }
        return maxNesting;

=======

        int n = nums.size();
        int ans = 0;
        vector<bool> visited(n, false);
        for (int i = 0; i < n; i++) {
            int cnt = 0;
            int j = i;
            while (!visited[j]) {
                visited[j] = true;
                j = nums[j];
                cnt++;
            }
            ans = max(ans, cnt);
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            int cur = i;
            while (nums[cur] >= 0) {
                int next = nums[cur];
                nums[cur] = -1;
                cur = next;
                count++;
            }
            if (count > max) {
                max = count;
            }
        }
        return max;

=======

        int n=nums.size();
        vector<bool> visited(n,false);
        int ans=0;
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            int start=nums[i],count=0;
            do{
                start=nums[start];
                count++;
                visited[start]=true;
            }while(start!=nums[i]);
            ans=max(ans,count);
        }
        return ans;
