Synthesizing 10/10 solutions

=======

        int n = arr.size();
        vector<int> len(n + 2, 0);
        vector<int> cnt(n + 1, 0);
        int ans = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int l = len[a - 1], r = len[a + 1];
            cnt[l]--;
            cnt[r]--;
            cnt[l + r + 1]++;
            len[a - l] = len[a + r] = l + r + 1;
            if (cnt[m] > 0) {
                ans = i + 1;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> len(n + 2, 0);
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int left = len[a - 1], right = len[a + 1];
            if (left == m || right == m) res = i;
            len[a - left] = len[a + right] = left + right + 1;
        }
        return res;

=======

        int n = arr.size();
        if (n == m) return n;
        vector<int> len(n + 2, 0);
        int res = -1;
        for (int i = 0; i < n; i++) {
            int a = arr[i];
            int left = len[a - 1], right = len[a + 1];
            if (left == m || right == m) res = i;
            len[a - left] = len[a + right] = left + right + 1;
        }
        return res;

=======

        int n = arr.size();
        vector<int> len(n+2, 0);
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            int left = len[a-1], right = len[a+1];
            len[a] = len[a-left] = len[a+right] = left + right + 1;
            if (left == m || right == m) ans = i;
        }
        return ans;

=======

        int n = arr.size();
        int ans = -1;
        vector<int> len(n + 2, 0);
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            int left = len[a - 1], right = len[a + 1];
            int sum = left + right + 1;
            len[a - left] = len[a + right] = sum;
            if (left == m || right == m) {
                ans = i;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> dp(n + 2, 0);
        vector<int> len(n + 2, 0);
        int res = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            dp[a] = 1;
            len[a] = 1;
            if (dp[a - 1] == 1) {
                len[a] += len[a - 1];
                len[a - len[a - 1]] = len[a];
            }
            if (dp[a + 1] == 1) {
                len[a] += len[a + 1];
                len[a + len[a + 1]] = len[a];
            }
            if (len[a] == m) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = arr.size();
        if (n == m) return n;
        vector<int> left(n + 2, 0);
        vector<int> right(n + 2, 0);
        vector<int> cnt(n + 2, 0);
        int res = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            left[a] = a - 1;
            right[a] = a + 1;
            cnt[left[a]] += cnt[a] + 1;
            cnt[right[a]] += cnt[a] + 1;
            left[right[a]] = left[a];
            right[left[a]] = right[a];
            if (cnt[left[a]] == m || cnt[right[a]] == m) res = i + 1;
        }
        return res;

=======

        int n = arr.size();
        if (n == m) return n;
        vector<int> left(n + 2, 0), right(n + 2, 0);
        vector<int> cnt(n + 1, 0);
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            left[a] = right[a] = a;
            if (left[a - 1] > 0) {
                left[a] = left[a - 1];
                cnt[right[a] - left[a - 1] + 1]--;
            }
            if (right[a + 1] > 0) {
                right[a] = right[a + 1];
                cnt[right[a + 1] - left[a] + 1]--;
            }
            cnt[right[a] - left[a] + 1]++;
            if (cnt[m] > 0) ans = i + 1;
        }
        return ans;

=======

        int n = arr.size();
        if (n == m) return n;
        vector<int> cnt(n + 2, 0);
        vector<int> len(n + 2, 0);
        int res = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            cnt[a - 1] = cnt[a + 1] = 0;
            len[a] = len[a - cnt[a - 1] - 1] + len[a + cnt[a + 1] + 1] + 1;
            cnt[a - len[a - 1]] = cnt[a + len[a + 1]] = len[a];
            if (len[a - len[a - 1]] == m || len[a + len[a + 1]] == m) res = i + 1;
        }
        return res;

=======

        int n = arr.size();
        if (n == m) {
            return n;
        }
        vector<int> count(n+1, 0);
        vector<int> group(n+1, 0);
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            count[a] = 1;
            if (a-1 >= 1 && count[a-1] > 0) {
                group[group[a-1]] -= count[a-1];
                group[group[a]] += count[a-1];
                count[a] += count[a-1];
                count[a-1] = 0;
            }
            if (a+1 <= n && count[a+1] > 0) {
                group[group[a+1]] -= count[a+1];
                group[group[a]] += count[a+1];
                count[a] += count[a+1];
                count[a+1] = 0;
            }
            group[count[a]]++;
            if (group[m] > 0) {
                ans = i+1;
            }
        }
        return ans;
