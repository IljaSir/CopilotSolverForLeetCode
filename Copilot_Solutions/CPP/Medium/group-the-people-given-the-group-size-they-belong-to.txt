Synthesizing 10/10 solutions

=======

        vector<vector<int>> res;
        unordered_map<int, vector<int>> m;
        for (int i = 0; i < groupSizes.size(); i++) {
            m[groupSizes[i]].push_back(i);
            if (m[groupSizes[i]].size() == groupSizes[i]) {
                res.push_back(m[groupSizes[i]]);
                m[groupSizes[i]].clear();
            }
        }
        return res;

=======

        vector<vector<int>> res;
        map<int, vector<int>> m;
        for (int i = 0; i < groupSizes.size(); ++i) {
            m[groupSizes[i]].push_back(i);
            if (m[groupSizes[i]].size() == groupSizes[i]) {
                res.push_back(m[groupSizes[i]]);
                m[groupSizes[i]].clear();
            }
        }
        return res;

=======

        vector<vector<int>> ans;
        unordered_map<int, vector<int>> groups;
        for (int i = 0; i < groupSizes.size(); i++) {
            groups[groupSizes[i]].push_back(i);
            if (groups[groupSizes[i]].size() == groupSizes[i]) {
                ans.push_back(groups[groupSizes[i]]);
                groups[groupSizes[i]].clear();
            }
        }
        return ans;

=======

        vector<vector<int>> result;
        map<int, vector<int>> m;
        for (int i = 0; i < groupSizes.size(); i++) {
            m[groupSizes[i]].push_back(i);
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            vector<int> v = it->second;
            int size = it->first;
            for (int i = 0; i < v.size(); i += size) {
                result.push_back(vector<int>(v.begin() + i, v.begin() + i + size));
            }
        }
        return result;

=======

        vector<vector<int>> result;
        unordered_map<int, vector<int>> map;
        for (int i = 0; i < groupSizes.size(); i++) {
            map[groupSizes[i]].push_back(i);
        }
        for (auto it = map.begin(); it != map.end(); it++) {
            int size = it->first;
            vector<int> list = it->second;
            vector<int> temp;
            for (int i = 0; i < list.size(); i++) {
                temp.push_back(list[i]);
                if (temp.size() == size) {
                    result.push_back(temp);
                    temp.clear();
                }
            }
        }
        return result;

=======

        vector<vector<int>> result;
        map<int, vector<int>> m;
        for (int i = 0; i < groupSizes.size(); ++i) {
            m[groupSizes[i]].push_back(i);
            if (m[groupSizes[i]].size() == groupSizes[i]) {
                result.push_back(m[groupSizes[i]]);
                m[groupSizes[i]].clear();
            }
        }
        return result;

=======

        vector<vector<int>> result;
        map<int, vector<int>> groups;
        for (int i = 0; i < groupSizes.size(); ++i) {
            groups[groupSizes[i]].push_back(i);
        }
        for (auto it = groups.begin(); it != groups.end(); ++it) {
            int groupSize = it->first;
            vector<int> group = it->second;
            for (int i = 0; i < group.size(); i += groupSize) {
                result.push_back(vector<int>(group.begin() + i, group.begin() + i + groupSize));
            }
        }
        return result;

=======

        vector<vector<int>> result;
        unordered_map<int, vector<int>> group;
        for(int i=0; i<groupSizes.size(); i++){
            group[groupSizes[i]].push_back(i);
            if(group[groupSizes[i]].size() == groupSizes[i]){
                result.push_back(group[groupSizes[i]]);
                group[groupSizes[i]].clear();
            }
        }
        return result;

=======

        int n = groupSizes.size();
        vector<vector<int>> result;
        vector<vector<int>> group(n+1);
        for (int i = 0; i < n; ++i) {
            group[groupSizes[i]].push_back(i);
        }
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < group[i].size(); j += i) {
                result.push_back(vector<int>(group[i].begin()+j, group[i].begin()+j+i));
            }
        }
        return result;

=======

        int n = groupSizes.size();
        vector<vector<int>> res;
        vector<int> temp;
        unordered_map<int,vector<int>> m;
        for(int i=0;i<n;i++){
            m[groupSizes[i]].push_back(i);
            if(m[groupSizes[i]].size()==groupSizes[i]){
                res.push_back(m[groupSizes[i]]);
                m[groupSizes[i]].clear();
            }
        }
        return res;
