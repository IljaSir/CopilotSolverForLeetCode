Synthesizing 10/10 solutions

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < heights.size() - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            if (diff <= 0) continue;
            pq.push(diff);
            if (pq.size() > ladders) {
                bricks -= pq.top();
                pq.pop();
                if (bricks < 0) return i;
            }
        }
        return heights.size() - 1;

=======

        int n = heights.size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < n - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            if (diff > 0) {
                pq.push(diff);
                if (pq.size() > ladders) {
                    bricks -= pq.top();
                    pq.pop();
                }
                if (bricks < 0) return i;
            }
        }
        return n - 1;

=======

        int n = heights.size();
        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < n - 1; ++i) {
            int d = heights[i + 1] - heights[i];
            if (d > 0) {
                pq.push(d);
                if (pq.size() > ladders) {
                    bricks -= pq.top();
                    pq.pop();
                }
                if (bricks < 0) {
                    return i;
                }
            }
        }
        return n - 1;

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        for (int i = 0; i < heights.size() - 1; ++i) {
            if (heights[i] < heights[i + 1]) {
                pq.push(heights[i + 1] - heights[i]);
                if (pq.size() > ladders) {
                    bricks -= pq.top();
                    pq.pop();
                    if (bricks < 0) return i;
                }
            }
        }
        return heights.size() - 1;

=======

        priority_queue<int, vector<int>, greater<int>> pq;
        int n = heights.size();
        for (int i = 0; i < n - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            if (diff <= 0) continue;
            pq.push(diff);
            if (pq.size() > ladders) {
                bricks -= pq.top();
                pq.pop();
            }
            if (bricks < 0) return i;
        }
        return n - 1;

=======

        int n = heights.size();
        priority_queue<int, vector<int>, greater<int>> q;
        for (int i = 0; i < n - 1; i++) {
            int d = heights[i + 1] - heights[i];
            if (d > 0) {
                q.push(d);
                if (q.size() <= ladders) continue;
                int t = q.top(); q.pop();
                if (t <= bricks) {
                    bricks -= t;
                } else {
                    return i;
                }
            }
        }
        return n - 1;

=======

        priority_queue<int, vector<int>, greater<int>> minHeap;
        int n = heights.size();
        for (int i = 0; i < n - 1; ++i) {
            int diff = heights[i + 1] - heights[i];
            if (diff > 0) {
                minHeap.push(diff);
                if (minHeap.size() > ladders) {
                    bricks -= minHeap.top();
                    minHeap.pop();
                }
                if (bricks < 0) {
                    return i;
                }
            }
        }
        return n - 1;

=======

        int n = heights.size();
        priority_queue<int, vector<int>, greater<int>> pq;
        int i = 0;
        for (; i < n - 1; i++) {
            int diff = heights[i + 1] - heights[i];
            if (diff > 0) {
                if (ladders > 0) {
                    pq.push(diff);
                    ladders--;
                } else if (!pq.empty() && diff > pq.top()) {
                    bricks -= pq.top();
                    pq.pop();
                    pq.push(diff);
                } else {
                    bricks -= diff;
                }
                if (bricks < 0) {
                    break;
                }
            }
        }
        return i;

=======

        int n = heights.size();
        int i = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        while (i < n - 1) {
            int diff = heights[i + 1] - heights[i];
            if (diff > 0) {
                pq.push(diff);
                if (pq.size() > ladders) {
                    bricks -= pq.top();
                    pq.pop();
                }
                if (bricks < 0) {
                    break;
                }
            }
            i++;
        }
        return i;

=======

        int n = heights.size();
        int i = 0;
        priority_queue<int, vector<int>, greater<int>> pq;
        for (i = 0; i < n - 1; i++) {
            int d = heights[i + 1] - heights[i];
            if (d > 0) {
                pq.push(d);
                if (pq.size() > ladders) {
                    bricks -= pq.top();
                    pq.pop();
                }
                if (bricks < 0) {
                    break;
                }
            }
        }
        return i;
