Synthesizing 10/10 solutions

=======

        string s = to_string(num);
        sort(s.begin(), s.end());
        if (s[0] == '0') {
            for (int i = 1; i < s.size(); i++) {
                if (s[i] != '0') {
                    swap(s[0], s[i]);
                    break;
                }
            }
        }
        return stoll(s);

=======

        if (num == 0) return 0;
        bool isNeg = false;
        if (num < 0) {
            isNeg = true;
            num = -num;
        }
        vector<int> digits;
        while (num > 0) {
            digits.push_back(num % 10);
            num /= 10;
        }
        sort(digits.begin(), digits.end());
        long long res = 0;
        for (int i = 0; i < digits.size(); ++i) {
            res = res * 10 + digits[i];
        }
        if (isNeg) res = -res;
        return res;

=======

        string s = to_string(num);
        sort(s.begin(), s.end());
        if(s[0] == '0') {
            int i = 1;
            while(s[i] == '0') i++;
            swap(s[0], s[i]);
        }
        return stoll(s);

=======

        if(num < 10) return num;
        vector<int> digits;
        while(num) {
            digits.push_back(num % 10);
            num /= 10;
        }
        sort(digits.begin(), digits.end());
        long long res = 0;
        for(int d : digits) {
            res = res * 10 + d;
        }
        return res;

=======

        vector<int> digits;
        while(num){
            digits.push_back(num%10);
            num/=10;
        }
        sort(digits.begin(), digits.end());
        long long res=0;
        for(int i=0; i<digits.size(); i++){
            res*=10;
            res+=digits[i];
        }
        return res;
    }
    int minPartitions(string n) {
        long long num=0;
        for(int i=0; i<n.size(); i++){
            num*=10;
            num+=n[i]-'0';
        }
        long long res=smallestNumber(num);
        int ans=0;
        while(res){
            ans=max(ans, (int)(res%10));
            res/=10;
        }
        return ans;

=======

        string s = to_string(num);
        int n = s.size();
        if (n == 1) return num;
        sort(s.begin(), s.end());
        if (s[0] == '0') {
            int i = 1;
            while (s[i] == '0') ++i;
            swap(s[0], s[i]);
        }
        return stoll(s);

=======

        if(num==0) return 0;
        vector<int> v;
        bool neg = false;
        if(num<0) neg = true;
        num = abs(num);
        while(num>0){
            v.push_back(num%10);
            num/=10;
        }
        sort(v.begin(),v.end());
        long long ans = 0;
        for(auto x:v){
            ans = ans*10 + x;
        }
        if(neg) return -ans;
        return ans;

=======

        if(num<0)
        {
            num = -num;
            return -smallestNumber(num);
        }
        vector<int> digits;
        while(num)
        {
            digits.push_back(num%10);
            num /= 10;
        }
        sort(digits.begin(), digits.end());
        long long ans = 0;
        for(int i = 0; i < digits.size(); i++)
        {
            ans*=10;
            ans+=digits[i];
        }
        return ans;

=======

        long long res = 0;
        int arr[10] = {0};
        while(num){
            arr[num%10]++;
            num/=10;
        }
        for(int i=1;i<10;i++){
            while(arr[i]--){
                res = res*10 + i;
            }
        }
        while(arr[0]--){
            res = res*10;
        }
        return res;

=======

        long long val = 0;
        int sign = num < 0 ? -1 : 1;
        num = abs(num);
        vector<int> digits;
        while (num) {
            digits.push_back(num % 10);
            num /= 10;
        }
        sort(digits.begin(), digits.end());
        for (int i = 0; i < digits.size(); i++) {
            val = val * 10 + digits[i];
        }
        return val * sign;
