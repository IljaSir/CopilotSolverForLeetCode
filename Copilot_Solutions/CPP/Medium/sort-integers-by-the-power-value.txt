Synthesizing 10/10 solutions

=======

        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; ++i) {
            v.push_back({power(i), i});
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;
    }
    int power(int x) {
        int cnt = 0;
        while (x != 1) {
            if (x % 2 == 0) {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            ++cnt;
        }
        return cnt;

=======

        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; ++i) {
            int j = i;
            int cnt = 0;
            while (j != 1) {
                if (j & 1) {
                    j = 3 * j + 1;
                } else {
                    j >>= 1;
                }
                ++cnt;
            }
            v.push_back(make_pair(cnt, i));
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;

=======

        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; i++) {
            int count = 0;
            int n = i;
            while (n != 1) {
                if (n % 2 == 0) {
                    n /= 2;
                } else {
                    n = 3 * n + 1;
                }
                count++;
            }
            v.push_back({i, count});
        }
        sort(v.begin(), v.end(), [](pair<int, int> a, pair<int, int> b) {
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });
        return v[k - 1].first;

=======

        vector<pair<int, int>> powers;
        for (int i = lo; i <= hi; i++) {
            powers.push_back({i, power(i)});
        }
        sort(powers.begin(), powers.end(), [](const pair<int, int> &a, const pair<int, int> &b) {
            return a.second < b.second || (a.second == b.second && a.first < b.first);
        });
        return powers[k - 1].first;

=======

        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; i++) {
            int cnt = 0, x = i;
            while (x != 1) {
                if (x & 1) {
                    x = 3 * x + 1;
                } else {
                    x >>= 1;
                }
                cnt++;
            }
            v.push_back(make_pair(cnt, i));
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;

=======

        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; ++i) {
            int cnt = 0;
            for (int j = i; j > 1; ++cnt) {
                if (j & 1) j = 3 * j + 1;
                else j /= 2;
            }
            v.push_back({cnt, i});
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;

=======

        vector<pair<int,int>> v;
        for (int i = lo; i <= hi; i++) {
            int cnt = 0;
            int x = i;
            while (x != 1) {
                if (x % 2 == 0) {
                    x /= 2;
                } else {
                    x = 3 * x + 1;
                }
                cnt++;
            }
            v.emplace_back(cnt, i);
        }
        sort(v.begin(), v.end());
        return v[k-1].second;

=======

        int n = hi - lo + 1;
        vector<pair<int, int>> v;
        for (int i = lo; i <= hi; i++) {
            int j = i;
            int cnt = 0;
            while (j != 1) {
                if (j % 2 == 0) {
                    j /= 2;
                } else {
                    j = 3 * j + 1;
                }
                cnt++;
            }
            v.push_back({cnt, i});
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;

=======

        vector<pair<int, int>> v;
        for(int i = lo; i <= hi; i++){
            int t = i;
            int j = 0;
            while(t != 1){
                if(t % 2 == 0){
                    t /= 2;
                }else{
                    t = 3 * t + 1;
                }
                j++;
            }
            v.push_back(make_pair(i, j));
        }
        sort(v.begin(), v.end(), [](pair<int, int> &a, pair<int, int> &b){
            if(a.second == b.second){
                return a.first < b.first;
            }else{
                return a.second < b.second;
            }
        });
        return v[k - 1].first;

=======

        vector<pair<int,int>> v;
        for (int i = lo; i <= hi; i++) {
            int count = 0;
            long long int temp = i;
            while (temp != 1) {
                if (temp % 2 == 0) {
                    temp /= 2;
                } else {
                    temp = 3 * temp + 1;
                }
                count++;
            }
            v.push_back({count, i});
        }
        sort(v.begin(), v.end());
        return v[k - 1].second;
