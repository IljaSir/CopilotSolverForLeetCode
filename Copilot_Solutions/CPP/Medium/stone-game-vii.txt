Synthesizing 6/10 solutions

=======

        int n = stones.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + stones[i];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = max(sum[j + 1] - sum[i + 1] - dp[i + 1][j], sum[j] - sum[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.size();
        vector<int> sums(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            sums[i] = sums[i - 1] + stones[i - 1];
        }
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = max(sums[j + 1] - sums[i + 1] - dp[i + 1][j], sums[j] - sums[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.size();
        vector<int> pre(n + 1);
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + stones[i];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int len = 1; len < n; len++) {
            for (int i = 0; i < n - len; i++) {
                int j = i + len;
                dp[i][j] = max(pre[j + 1] - pre[i + 1] - dp[i + 1][j], pre[j] - pre[i] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.size();
        vector<int> sum(n+1);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i-1] + stones[i-1];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n-2; i >= 0; --i) {
            for (int j = i+1; j < n; ++j) {
                dp[i][j] = max(sum[j+1]-sum[i+1]-dp[i+1][j], sum[j]-sum[i]-dp[i][j-1]);
            }
        }
        return dp[0][n-1];

=======

        int n = stones.size();
        vector<int> sums(stones);
        for (int i = 1; i < n; ++i) {
            sums[i] += sums[i - 1];
        }
        vector<vector<int>> dp(n, vector<int>(n));
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = max(sums[j] - sums[i] - dp[i + 1][j], sums[j - 1] - (i > 0 ? sums[i - 1] : 0) - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];

=======

        int n = stones.size();
        vector<int> dp(n);
        vector<int> sum(n + 1);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + stones[i];
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[j] = max(sum[j + 1] - sum[i + 1] - dp[j], sum[j] - sum[i] - dp[j - 1]);
            }
        }
        return dp[n - 1];
