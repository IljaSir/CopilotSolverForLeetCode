Synthesizing 10/10 solutions

=======

        int n = chars.size();
        int i = 0;
        int j = 0;
        while (i < n) {
            int k = i;
            while (k < n && chars[k] == chars[i]) {
                k++;
            }
            chars[j++] = chars[i];
            if (k - i > 1) {
                string s = to_string(k - i);
                for (char c : s) {
                    chars[j++] = c;
                }
            }
            i = k;
        }
        return j;

=======

        int n = chars.size();
        int i = 0, j = 0;
        while (i < n) {
            int k = i;
            while (k < n && chars[k] == chars[i]) {
                k++;
            }
            chars[j++] = chars[i];
            if (k - i > 1) {
                for (char c : to_string(k - i)) {
                    chars[j++] = c;
                }
            }
            i = k;
        }
        return j;

=======

        int i = 0, j = 0;
        while (i < chars.size()) {
            int k = i + 1;
            while (k < chars.size() && chars[k] == chars[i]) {
                ++k;
            }
            chars[j++] = chars[i];
            if (k - i > 1) {
                string s = to_string(k - i);
                for (char c : s) {
                    chars[j++] = c;
                }
            }
            i = k;
        }
        return j;

=======

        int i = 0;
        int j = 0;
        while (i < chars.size()) {
            int k = i;
            while (k < chars.size() && chars[k] == chars[i]) k++;
            chars[j++] = chars[i];
            if (k - i > 1) {
                string s = to_string(k - i);
                for (auto ch : s) chars[j++] = ch;
            }
            i = k;
        }
        return j;

=======

        int n = chars.size();
        if (n == 1) {
            return 1;
        }
        int i = 0;
        int j = 0;
        while (i < n) {
            int count = 1;
            while (i < n - 1 && chars[i] == chars[i + 1]) {
                count++;
                i++;
            }
            chars[j++] = chars[i];
            if (count > 1) {
                string s = to_string(count);
                for (auto c : s) {
                    chars[j++] = c;
                }
            }
            i++;
        }
        return j;

=======

        int i = 0;
        int j = 0;
        int k = 0;
        int n = chars.size();
        while (i < n) {
            j = i;
            while (j < n && chars[j] == chars[i]) {
                ++j;
            }
            int cnt = j - i;
            chars[k++] = chars[i];
            if (cnt > 1) {
                string s = to_string(cnt);
                for (auto c : s) {
                    chars[k++] = c;
                }
            }
            i = j;
        }
        return k;

=======

        int len = 1;
        int count = 1;
        char last = chars[0];
        for (int i = 1; i < chars.size(); i++) {
            if (chars[i] == last) {
                count++;
            } else {
                if (count > 1) {
                    string s = to_string(count);
                    for (int j = 0; j < s.size(); j++) {
                        chars[len++] = s[j];
                    }
                }
                chars[len++] = chars[i];
                last = chars[i];
                count = 1;
            }
        }
        if (count > 1) {
            string s = to_string(count);
            for (int j = 0; j < s.size(); j++) {
                chars[len++] = s[j];
            }
        }
        return len;

=======

        if (chars.size() <= 1) {
            return chars.size();
        }
        int slow = 0;
        int fast = 0;
        while (fast < chars.size()) {
            int count = 0;
            while (fast < chars.size() && chars[fast] == chars[slow]) {
                fast++;
                count++;
            }
            chars[slow] = chars[slow];
            slow++;
            if (count == 1) {
                continue;
            }
            string countStr = to_string(count);
            for (char c : countStr) {
                chars[slow] = c;
                slow++;
            }
        }
        return slow;

=======

        int i = 0, j = 0, k = 0;
        int n = chars.size();
        while (i < n) {
            while (j < n && chars[j] == chars[i]) {
                ++j;
            }
            chars[k++] = chars[i];
            if (j - i > 1) {
                string s = to_string(j - i);
                for (char c : s) {
                    chars[k++] = c;
                }
            }
            i = j;
        }
        return k;

=======

        int i=0,j=0;
        while(j<chars.size()){
            int count=0;
            while(j<chars.size() && chars[i]==chars[j]){
                count++;
                j++;
            }
            chars[i++]=chars[j-1];
            if(count>1){
                string s=to_string(count);
                for(char c:s){
                    chars[i++]=c;
                }
            }
        }
        return i;
