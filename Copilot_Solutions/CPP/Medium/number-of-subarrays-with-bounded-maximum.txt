Synthesizing 10/10 solutions

=======

        int n = nums.size();
        int l = -1, r = -1, res = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] > right) l = i;
            if (nums[i] >= left) r = i;
            res += r - l;
        }
        return res;

=======

        int res = 0;
        int l = 0, r = 0;
        int cnt = 0;
        while (r < nums.size()) {
            if (nums[r] < left) {
                res += cnt;
            } else if (nums[r] >= left && nums[r] <= right) {
                cnt = r - l + 1;
                res += cnt;
            } else {
                l = r + 1;
                cnt = 0;
            }
            r++;
        }
        return res;

=======

        int ans = 0;
        int l = 0;
        int r = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] >= left && nums[i] <= right) {
                ans += i - l + 1;
                r = i;
            } else if (nums[i] < left) {
                ans += r - l + 1;
            } else {
                l = i + 1;
                r = i + 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        int leftIdx = -1;
        int rightIdx = -1;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] > right) {
                leftIdx = i;
            }
            if (nums[i] >= left) {
                rightIdx = i;
            }
            ans += rightIdx - leftIdx;
        }
        return ans;

=======

        int res = 0;
        int l = 0, r = 0;
        int n = nums.size();
        while (r < n) {
            if (nums[r] < left) {
                res += r - l;
            } else if (nums[r] > right) {
                l = r + 1;
            } else {
                int tmp = r;
                while (tmp < n && nums[tmp] <= right) {
                    tmp++;
                }
                res += (tmp - r) * (r - l + 1);
                l = r = tmp;
            }
            r++;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int l = 0, r = 0;
        while(r < n) {
            if (nums[r] < left) {
                res += r - l;
            } else if (nums[r] > right) {
                l = r + 1;
            } else {
                int tmp = r;
                while(r < n && nums[r] <= right) r++;
                res += (r - l) * (r - tmp);
                l = r;
            }
            r++;
        }
        return res;

=======

        int res = 0;
        int l = 0, r = 0, n = nums.size();
        while(r < n) {
            if (nums[r] >= left && nums[r] <= right) {
                res += r - l + 1;
            } else if (nums[r] < left) {
                res += r - l;
            } else {
                l = r + 1;
            }
            r++;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int prev = 0;
        int l = 0;
        int r = 0;
        while (r < n) {
            if (nums[r] >= left && nums[r] <= right) {
                prev = r - l + 1;
                res += prev;
            } else if (nums[r] < left) {
                res += prev;
            } else {
                prev = 0;
                l = r + 1;
            }
            r++;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int l = 0, r = 0;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            if (x >= left && x <= right) {
                res += i - l + 1;
                r = i;
            } else if (x < left) {
                res += r - l + 1;
            } else {
                l = i + 1;
                r = i;
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        int i = 0;
        int j = 0;
        int num = 0;
        while (j < n) {
            if (nums[j] >= left && nums[j] <= right) {
                // [i, j] is valid
                num = j - i + 1;
                ans += num;
            } else if (nums[j] < left) {
                // [i, j] is invalid
                ans += num;
            } else {
                // nums[j] > right
                i = j + 1;
                num = 0;
            }
            j++;
        }
        return ans;
