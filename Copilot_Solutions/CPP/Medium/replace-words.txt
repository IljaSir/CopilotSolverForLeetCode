Synthesizing 10/10 solutions

=======

        string str = "";
        for (int i = 0; i < sentence.size(); i++) {
            if (sentence[i] != ' ') {
                str += sentence[i];
            } else {
                for (int j = 0; j < dictionary.size(); j++) {
                    if (dictionary[j].size() <= str.size()) {
                        string temp = str.substr(0, dictionary[j].size());
                        if (temp == dictionary[j]) {
                            str = temp;
                            break;
                        }
                    }
                }
                sentence.replace(i - str.size(), str.size(), str);
                i -= str.size() - 1;
                str = "";
            }
        }
        for (int j = 0; j < dictionary.size(); j++) {
            if (dictionary[j].size() <= str.size()) {
                string temp = str.substr(0, dictionary[j].size());
                if (temp == dictionary[j]) {
                    str = temp;
                    break;
                }
            }
        }
        sentence.replace(sentence.size() - str.size(), str.size(), str);
        return sentence;

=======

        unordered_set<string> dict(dictionary.begin(), dictionary.end());
        istringstream ss(sentence);
        string word;
        string result;
        while (ss >> word) {
            string prefix;
            for (int i = 1; i <= word.size(); i++) {
                prefix = word.substr(0, i);
                if (dict.count(prefix)) {
                    break;
                }
            }
            result += prefix + " ";
        }
        result.pop_back();
        return result;

=======

        string word, ret;
        stringstream ss(sentence);
        unordered_set<string> dict(dictionary.begin(), dictionary.end());
        while (ss >> word) {
            for (int i = 1; i < word.size(); ++i) {
                if (dict.find(word.substr(0, i)) != dict.end()) {
                    word = word.substr(0, i);
                    break;
                }
            }
            ret += word + " ";
        }
        ret.pop_back();
        return ret;

=======

        string res;
        for (int i = 0; i < sentence.size(); ++i) {
            if (sentence[i] == ' ') {
                res += ' ';
                continue;
            }
            for (int j = i; j < sentence.size(); ++j) {
                if (sentence[j] == ' ') {
                    res += sentence.substr(i, j - i);
                    i = j - 1;
                    break;
                }
                string s = sentence.substr(i, j - i + 1);
                for (string& d : dictionary) {
                    if (s == d) {
                        res += d;
                        i = j;
                        break;
                    }
                }
            }
        }
        return res;

=======

        sort(dictionary.begin(), dictionary.end());
        string result;
        istringstream in(sentence);
        string word;
        while (in >> word) {
            if (!result.empty()) {
                result += " ";
            }
            for (auto& root : dictionary) {
                if (word.substr(0, root.size()) == root) {
                    word = root;
                    break;
                }
            }
            result += word;
        }
        return result;

=======

        string result = "";
        string word = "";
        for (auto c : sentence) {
            if (c == ' ') {
                result += getRoot(dictionary, word) + " ";
                word = "";
            } else {
                word += c;
            }
        }
        result += getRoot(dictionary, word);
        return result;
    }
    
    string getRoot(vector<string>& dictionary, string word) {
        for (auto root : dictionary) {
            if (word.find(root) == 0) {
                return root;
            }
        }
        return word;

=======

        set<string> dict;
        for (auto& word : dictionary) {
            dict.insert(word);
        }
        string res;
        string word;
        stringstream ss(sentence);
        while (ss >> word) {
            string prefix;
            for (int i = 1; i <= word.size(); ++i) {
                prefix = word.substr(0, i);
                if (dict.count(prefix)) {
                    break;
                }
            }
            res += prefix + " ";
        }
        res.pop_back();
        return res;

=======

        std::sort(dictionary.begin(), dictionary.end(), [](const string& a, const string& b) {return a.length() < b.length();});
        std::istringstream iss(sentence);
        std::string word;
        std::string result;
        while (iss >> word) {
            for (const auto& root : dictionary) {
                if (word.compare(0, root.length(), root) == 0) {
                    word = root;
                    break;
                }
            }
            if (!result.empty()) {
                result += " ";
            }
            result += word;
        }
        return result;

=======

        unordered_set<string> s;
        for (auto& w : dictionary) {
            s.insert(w);
        }
        string res;
        istringstream ss(sentence);
        string word;
        while (ss >> word) {
            string prefix;
            for (int i = 1; i <= word.length(); ++i) {
                prefix = word.substr(0, i);
                if (s.find(prefix) != s.end()) {
                    break;
                }
            }
            if (!res.empty()) {
                res += " ";
            }
            res += prefix;
        }
        return res;

=======

        string res;
        for (auto& word: sentence) {
            if (word == ' ') {
                res.push_back(word);
                continue;
            }
            string tmp;
            for (auto& dic: dictionary) {
                if (word.find(dic) == 0) {
                    if (tmp.empty() || tmp.size() > dic.size()) {
                        tmp = dic;
                    }
                }
            }
            if (tmp.empty()) {
                res.push_back(word);
            } else {
                res += tmp;
            }
        }
        return res;
