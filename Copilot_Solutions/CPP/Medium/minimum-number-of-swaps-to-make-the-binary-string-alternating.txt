Synthesizing 10/10 solutions

=======

        int n = s.size();
        int cnt0 = 0;
        int cnt1 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                cnt0++;
            } else {
                cnt1++;
            }
        }
        if (abs(cnt0 - cnt1) > 1) {
            return -1;
        }
        if (cnt0 > cnt1) {
            int ans = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '1') {
                    ans++;
                }
            }
            return ans;
        } else if (cnt0 < cnt1) {
            int ans = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '0') {
                    ans++;
                }
            }
            return ans;
        } else {
            int ans0 = 0;
            int ans1 = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '1') {
                    ans0++;
                }
                if (s[i] == '0') {
                    ans1++;
                }
            }
            return min(ans0, ans1);
        }

=======

        int n = s.size();
        int count0 = 0;
        int count1 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                count0++;
            } else {
                count1++;
            }
        }
        if (abs(count0 - count1) > 1) {
            return -1;
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] != s[i % 2]) {
                count++;
            }
        }
        if (count0 == count1) {
            return min(count / 2, (n - count) / 2);
        }
        if (count0 > count1) {
            return count / 2;
        }
        return (n - count) / 2;

=======

        int n = s.size();
        int c0 = 0, c1 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '0') {
                c0++;
            } else {
                c1++;
            }
        }
        if (abs(c0 - c1) > 1) {
            return -1;
        }
        if (c0 > c1) {
            int res = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '0') {
                    res++;
                }
            }
            return res;
        }
        if (c0 < c1) {
            int res = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '1') {
                    res++;
                }
            }
            return res;
        }
        int res1 = 0;
        for (int i = 0; i < n; i += 2) {
            if (s[i] == '0') {
                res1++;
            }
        }
        int res2 = 0;
        for (int i = 0; i < n; i += 2) {
            if (s[i] == '1') {
                res2++;
            }
        }
        return min(res1, res2);

=======

        int n = s.size();
        int cnt0 = 0, cnt1 = 0;
        for (auto c : s) {
            if (c == '0') cnt0++;
            else cnt1++;
        }
        if (abs(cnt0 - cnt1) > 1) return -1;
        int ans = 0;
        if (cnt0 > cnt1) {
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '1') ans++;
            }
        } else if (cnt1 > cnt0) {
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '0') ans++;
            }
        } else {
            int ans1 = 0, ans2 = 0;
            for (int i = 0; i < n; i += 2) {
                if (s[i] == '1') ans1++;
                else ans2++;
            }
            ans = min(ans1, ans2);
        }
        return ans;

=======

        int n = s.size();
        int cnt1 = 0, cnt2 = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (s[i] == '1') {
                    ++cnt1;
                }
                else {
                    ++cnt2;
                }
            }
            else {
                if (s[i] == '0') {
                    ++cnt1;
                }
                else {
                    ++cnt2;
                }
            }
        }
        if (cnt1 != cnt2 && cnt1 != cnt2 - 1 && cnt1 != cnt2 + 1) {
            return -1;
        }
        int ans = 0;
        if (cnt1 == cnt2) {
            int ans1 = 0, ans2 = 0;
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    if (s[i] == '1') {
                        ++ans1;
                    }
                }
                else {
                    if (s[i] == '0') {
                        ++ans1;
                    }
                }
            }
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    if (s[i] == '0') {
                        ++ans2;
                    }
                }
                else {
                    if (s[i] == '1') {
                        ++ans2;
                    }
                }
            }
            ans = min(ans1, ans2);
        }
        else if (cnt1 > cnt2) {
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    if (s[i] == '1') {
                        ++ans;
                    }
                }
                else {
                    if (s[i] == '0') {
                        ++ans;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < n; ++i) {
                if (i % 2 == 0) {
                    if (s[i] == '0') {
                        ++ans;
                    }
                }
                else {
                    if (s[i] == '1') {
                        ++ans;
                    }
                }

=======

        int n = s.size();
        int count0 = 0, count1 = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '0') {
                count0++;
            } else {
                count1++;
            }
        }
        if (abs(count0 - count1) > 1) {
            return -1;
        }
        if (count0 >= count1) {
            return countSwaps(s, '0');
        } else {
            return countSwaps(s, '1');
        }

=======

        int n = s.size();
        int cnt1 = 0;
        int cnt2 = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (s[i] == '1') {
                    ++cnt1;
                } else {
                    ++cnt2;
                }
            } else {
                if (s[i] == '0') {
                    ++cnt1;
                } else {
                    ++cnt2;
                }
            }
        }
        if (cnt1 == cnt2) {
            return min(cnt1, cnt2);
        }
        if (n % 2 == 0) {
            return -1;
        } else {
            return min(cnt1, cnt2);
        }

=======

        int n = s.size();
        int c1 = 0, c2 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == (i % 2 == 0 ? '0' : '1')) {
                c1++;
            } else {
                c2++;
            }
        }
        if (abs(c1 - c2) > 1) {
            return -1;
        }
        if (c1 > c2) {
            return c2;
        }
        return c1;

=======

        int n = s.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] != '0' + (i % 2)) {
                cnt++;
            }
        }
        if (cnt % 2 == 1) {
            return -1;
        }
        return min(cnt / 2, (n - cnt) / 2);

=======

        int n = s.size();
        int ans = INT_MAX;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '0') {
                cnt++;
            }
        }
        if (abs(cnt - (n - cnt)) > 1) {
            return -1;
        }
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (s[i] == '0') {
                    a++;
                }
            } else {
                if (s[i] == '1') {
                    a++;
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            if (i % 2 == 0) {
                if (s[i] == '1') {
                    b++;
                }
            } else {
                if (s[i] == '0') {
                    b++;
                }
            }
        }
        if (cnt == n - cnt) {
            return min(a, b) / 2;
        } else if (cnt > n - cnt) {
            return a / 2;
        } else {
            return b / 2;
        }
