Synthesizing 10/10 solutions

=======

        int n = nums.size();
        if (n < 3) return 0;
        vector<int> dp(n, 0);
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) {
                dp[i] = 1 + dp[i-1];
            }
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        int n = nums.size();
        if (n < 3) return 0;
        vector<int> dp(n, 0);
        int res = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) {
                dp[i] = dp[i-1] + 1;
                res += dp[i];
            }
        }
        return res;

=======

        int n = nums.size();
        if (n < 3) {
            return 0;
        }
        int ans = 0;
        int dp = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {
                dp++;
                ans += dp;
            } else {
                dp = 0;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        int dp = 0;
        int sum = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {
                dp++;
                sum += dp;
            } else {
                dp = 0;
            }
        }
        return sum;

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n - 2; i++) {
            int d = nums[i + 1] - nums[i];
            int j = i + 2;
            while (j < n && nums[j] - nums[j - 1] == d) {
                j++;
            }
            if (j - i >= 3) {
                res += (j - i - 2) * (j - i - 1) / 2;
            }
            i = j - 2;
        }
        return res;

=======

        int n = nums.size();
        if (n < 3) {
            return 0;
        }
        int res = 0;
        for (int i = 0; i < n - 2; ++i) {
            int diff = nums[i + 1] - nums[i];
            int j = i + 2;
            for (; j < n; ++j) {
                if (nums[j] - nums[j - 1] != diff) {
                    break;
                }
            }
            int len = j - i;
            res += (len - 1) * (len - 2) / 2;
            i = j - 2;
        }
        return res;

=======

        int n = nums.size();
        int dp[n];
        memset(dp, 0, sizeof(dp));
        int sum = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) {
                dp[i] = 1 + dp[i-1];
            }
            sum += dp[i];
        }
        return sum;

=======

        int n = nums.size();
        if (n < 3) return 0;
        int dp[n];
        dp[0] = 0;
        dp[1] = 0;
        int ans = 0;
        for (int i = 2; i < n; ++i) {
            if (nums[i] - nums[i-1] == nums[i-1] - nums[i-2]) {
                dp[i] = dp[i-1] + 1;
            } else {
                dp[i] = 0;
            }
            ans += dp[i];
        }
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        int ans = 0;
        int d = nums[1] - nums[0];
        int cnt = 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] - nums[i - 1] == d) {
                cnt++;
            } else {
                ans += (cnt + 1) * cnt / 2;
                d = nums[i] - nums[i - 1];
                cnt = 0;
            }
        }
        ans += (cnt + 1) * cnt / 2;
        return ans;

=======

        int n = nums.size();
        if (n < 3) return 0;
        int cnt = 0;
        for (int i = 0; i < n-2; ++i) {
            int d = nums[i+1] - nums[i];
            for (int j = i+2; j < n; ++j) {
                if (nums[j] - nums[j-1] == d)
                    cnt++;
                else
                    break;
            }
        }
        return cnt;
