Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int i = 0, j = 0, res = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] <= nums2[j]) {
                res = max(res, j - i);
                j++;
            } else {
                i++;
            }
        }
        return res;

=======

        int i = 0, j = 0, ans = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] <= nums2[j]) {
                ans = max(ans, j - i);
                j++;
            } else {
                i++;
            }
        }
        return ans;

=======

        int ans = 0;
        int i = 0, j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] <= nums2[j]) {
                ans = max(ans, j - i);
                ++j;
            }
            else {
                ++i;
            }
        }
        return ans;

=======

        int n1 = nums1.size(), n2 = nums2.size();
        int i = 0, j = 0;
        int ans = 0;
        while (i < n1 && j < n2) {
            if (nums1[i] > nums2[j]) {
                i++;
            } else {
                ans = max(ans, j - i);
                j++;
            }
        }
        return ans;

=======

        int i = 0, j = 0;
        int ans = 0;
        while(i < nums1.size() && j < nums2.size()){
            if(nums1[i] <= nums2[j]){
                ans = max(ans, j - i);
                j++;
            }else{
                i++;
            }
        }
        return ans;

=======

        int maxDistance = 0;
        int i = 0;
        int j = 0;
        while (i < nums1.size() && j < nums2.size()) {
            if (nums1[i] > nums2[j]) {
                i++;
                continue;
            }
            if (j - i > maxDistance) {
                maxDistance = j - i;
            }
            j++;
        }
        return maxDistance;

=======

        int ans = 0;
        for(int i = 0, j = 0; i < nums1.size() && j < nums2.size(); ) {
            if(nums1[i] > nums2[j]) {
                i++;
            } else {
                ans = max(ans, j - i);
                j++;
            }
        }
        return ans;

=======

        int i = 0, j = 0, ans = 0;
        while (i < nums1.size() && j < nums2.size())
            if (nums1[i] <= nums2[j])
                ans = max(ans, j++ - i);
            else
                i++;
        return ans;

=======

        int i=0,j=0;
        int res=0;
        while(j<nums2.size()){
            if(i<nums1.size()&&nums1[i]<=nums2[j]){
                res=max(res,j-i);
                j++;
            }else{
                i++;
            }
        }
        return res;
