Synthesizing 10/10 solutions

=======

        vector<int> stones = {a, b, c};
        sort(stones.begin(), stones.end());
        if (stones[1] - stones[0] == 1 && stones[2] - stones[1] == 1) {
            return {0, 0};
        }
        int minMove = 2;
        if (stones[1] - stones[0] <= 2 || stones[2] - stones[1] <= 2) {
            minMove = 1;
        }
        return {minMove, stones[2] - stones[0] - 2};

=======

        vector<int> ans(2, 0);
        int x = min(a, min(b, c));
        int z = max(a, max(b, c));
        int y = a + b + c - x - z;
        if (y - x == 1 && z - y == 1) {
            return ans;
        }
        if (y - x <= 2 || z - y <= 2) {
            ans[0] = 1;
        } else {
            ans[0] = 2;
        }
        ans[1] = y - x - 1 + z - y - 1;
        return ans;

=======

        vector<int> stones = {a, b, c};
        sort(stones.begin(), stones.end());
        int min = 2;
        if (stones[1] - stones[0] <= 2 || stones[2] - stones[1] <= 2) {
            if (stones[1] - stones[0] == 1 && stones[2] - stones[1] == 1) {
                min = 0;
            } else {
                min = 1;
            }
        }
        return {min, stones[2] - stones[0] - 2};

=======

        vector<int> stones = {a, b, c};
        sort(stones.begin(), stones.end());
        int min = 2;
        if (stones[1] - stones[0] == 1 && stones[2] - stones[1] == 1) {
            min = 0;
        } else if (stones[1] - stones[0] <= 2 || stones[2] - stones[1] <= 2) {
            min = 1;
        }
        return {min, stones[2] - stones[0] - 2};

=======

        vector<int> stones = {a, b, c};
        sort(stones.begin(), stones.end());
        int min = 0;
        int max = stones[2] - stones[0] - 2;
        if(stones[1] - stones[0] > 1 && stones[2] - stones[1] > 1){
            min = 2;
        } else if(stones[1] - stones[0] == 1 && stones[2] - stones[1] == 1){
            min = 0;
        } else {
            min = 1;
        }
        return {min, max};

=======

        vector<int> v = {a, b, c};
        sort(v.begin(), v.end());
        int min = 0;
        if (v[1] - v[0] > 1) min++;
        if (v[2] - v[1] > 1) min++;
        if (min == 2 && v[1] - v[0] == 2) min = 1;
        if (min == 2 && v[2] - v[1] == 2) min = 1;
        int max = v[2] - v[0] - 2;
        return {min, max};

=======

        vector<int> nums = {a, b, c};
        sort(nums.begin(), nums.end());
        int min = 0;
        if (nums[2] - nums[0] == 2) {
            min = 0;
        } else if (nums[2] - nums[1] <= 2 || nums[1] - nums[0] <= 2) {
            min = 1;
        } else {
            min = 2;
        }
        int max = nums[2] - nums[1] - 1 + nums[1] - nums[0] - 1;
        return vector<int>{min, max};

=======

        vector<int> v = {a, b, c};
        sort(v.begin(), v.end());
        int min = 0;
        int max = 0;
        int diff = v[1] - v[0];
        if (diff == 1) {
            min = 0;
        } else if (diff == 2) {
            min = 1;
        } else {
            min = 2;
        }
        diff = v[2] - v[1];
        if (diff == 1) {
            min = 0;
        } else if (diff == 2) {
            min = 1;
        } else {
            min = 2;
        }
        max = v[2] - v[0] - 2;
        return {min, max};

=======

        int arr[3] = {a,b,c};
        sort(arr, arr+3);
        int min = 0;
        int max = 0;
        if(arr[1] - arr[0] == 1 && arr[2] - arr[1] == 1){
            min = 0;
        }else if(arr[1] - arr[0] == 1 || arr[2] - arr[1] == 1 || arr[1] - arr[0] == 2 || arr[2] - arr[1] == 2){
            min = 1;
        }else{
            min = 2;
        }
        max = arr[1] - arr[0] - 1 + arr[2] - arr[1] - 1;
        return {min, max};

=======

        vector<int> v = {a,b,c};
        sort(v.begin(),v.end());
        int min = 0;
        int max = 0;
        if(v[1]-v[0] > 1) min++;
        if(v[2]-v[1] > 1) min++;
        if(v[1]-v[0] > 2) max += v[1]-v[0]-1;
        if(v[2]-v[1] > 2) max += v[2]-v[1]-1;
        return {min,max};
