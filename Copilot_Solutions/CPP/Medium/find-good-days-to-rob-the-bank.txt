Synthesizing 9/10 solutions (Duplicates hidden)

=======

        vector<int> res;
        int n = security.size();
        if (time == 0) {
            for (int i = 0; i < n; ++i) {
                res.push_back(i);
            }
            return res;
        }
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        left[0] = security[0];
        for (int i = 1; i < n; ++i) {
            if (i <= time) {
                left[i] = max(left[i-1], security[i]);
            } else {
                left[i] = max(left[i-1], security[i] - security[i-time-1]);
            }
        }
        right[n-1] = security[n-1];
        for (int i = n-2; i >= 0; --i) {
            if (n-i-1 <= time) {
                right[i] = max(right[i+1], security[i]);
            } else {
                right[i] = max(right[i+1], security[i] - security[i+time+1]);
            }
        }
        for (int i = time; i < n-time; ++i) {
            if (left[i] == right[i]) {
                res.push_back(i);
            }
        }
        return res;

=======

        int n = security.size();
        vector<int> prefix(n, 0);
        vector<int> suffix(n, 0);
        prefix[0] = security[0];
        suffix[n - 1] = security[n - 1];
        for (int i = 1; i < n; i++) {
            prefix[i] = max(prefix[i - 1], security[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = max(suffix[i + 1], security[i]);
        }
        vector<int> result;
        for (int i = 0; i < n; i++) {
            if (i - time >= 0 && i + time < n && prefix[i - time] <= security[i] && security[i] <= suffix[i + time]) {
                result.push_back(i);
            }
        }
        return result;

=======

        int n = security.size();
        vector<int> res;
        for (int i = time; i < n - time; ++i) {
            bool ok = true;
            for (int j = i - time; j < i; ++j) {
                if (security[j] > security[j + 1]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                for (int j = i + time; j > i; --j) {
                    if (security[j - 1] < security[j]) {
                        ok = false;
                        break;
                    }
                }
            }
            if (ok) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> result;
        int n = security.size();
        for (int i = time; i < n - time; ++i) {
            bool good = true;
            for (int j = 1; j <= time; ++j) {
                if (security[i - j] < security[i - j + 1]) {
                    good = false;
                    break;
                }
            }
            if (good) {
                for (int j = 1; j <= time; ++j) {
                    if (security[i + j] < security[i + j - 1]) {
                        good = false;
                        break;
                    }
                }
            }
            if (good) {
                result.push_back(i);
            }
        }
        return result;

=======

        int n = security.size();
        vector<int> res;
        vector<int> pre(n, 0), suf(n, 0);
        for (int i = 0; i < n; ++i) {
            if (i == 0) {
                pre[i] = security[i];
            } else {
                pre[i] = max(pre[i - 1], security[i]);
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            if (i == n - 1) {
                suf[i] = security[i];
            } else {
                suf[i] = max(suf[i + 1], security[i]);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (i - time < 0 || i + time >= n) {
                continue;
            }
            if (pre[i - 1] <= security[i] && suf[i + 1] <= security[i]) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> res;
        int n = security.size();
        vector<int> dp(n, 0);
        for (int i = 0; i < n; i++) {
            if (i - time - 1 >= 0) {
                dp[i] = max(dp[i], dp[i - time - 1]);
            }
            dp[i] = max(dp[i], security[i]);
            if (i + time < n) {
                dp[i + time] = max(dp[i + time], dp[i]);
            }
        }
        for (int i = 0; i < n; i++) {
            if (security[i] == dp[i]) {
                res.push_back(i);
            }
        }
        return res;

=======

        int n = security.size();
        vector<int> ans;
        vector<int> maxBefore(n), minAfter(n);
        for (int i = 0; i < n; ++i) {
            if (i == 0) {
                maxBefore[i] = security[i];
            } else {
                maxBefore[i] = max(maxBefore[i - 1], security[i]);
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            if (i == n - 1) {
                minAfter[i] = security[i];
            } else {
                minAfter[i] = min(minAfter[i + 1], security[i]);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (i - time >= 0 && i + time < n) {
                int left = maxBefore[i - time];
                int right = minAfter[i + time];
                if (left >= security[i] && right >= security[i]) {
                    ans.push_back(i);
                }
            }
        }
        return ans;

=======

        vector<int> res;
        int n = security.size();
        vector<int> maxBefore(n, 0);
        vector<int> minAfter(n, 0);
        for(int i = 0; i < n; i++){
            if(i == 0){
                maxBefore[i] = security[i];
            }else{
                maxBefore[i] = max(maxBefore[i - 1], security[i]);
            }
        }
        for(int i = n - 1; i >= 0; i--){
            if(i == n - 1){
                minAfter[i] = security[i];
            }else{
                minAfter[i] = min(minAfter[i + 1], security[i]);
            }
        }
        for(int i = 0; i < n; i++){
            if(i - time >= 0 && i + time < n){
                if(maxBefore[i - time] >= minAfter[i + time]){
                    res.push_back(i);
                }
            }else if(i - time < 0 && i + time < n){
                if(maxBefore[0] >= minAfter[i + time]){
                    res.push_back(i);
                }
            }else if(i - time >= 0 && i + time >= n){
                if(maxBefore[i - time] >= minAfter[n - 1]){
                    res.push_back(i);
                }
            }else{
                if(maxBefore[0] >= minAfter[n - 1]){
                    res.push_back(i);
                }
            }
        }
        return res;
