Synthesizing 10/10 solutions

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int a = 0, b = 0;
        int res = 0;
        while (i <= j) {
            if (a + plants[i] <= capacityA) {
                a += plants[i];
                i++;
            } else if (b + plants[j] <= capacityB) {
                b += plants[j];
                j--;
            } else {
                res++;
                a = 0;
                b = 0;
            }
        }
        return res;

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int a = capacityA, b = capacityB;
        int res = 0;
        while (i <= j) {
            if (a >= plants[i] && b >= plants[j]) {
                if (plants[i] < plants[j]) {
                    a -= plants[i];
                    ++i;
                } else if (plants[i] > plants[j]) {
                    b -= plants[j];
                    --j;
                } else {
                    a -= plants[i];
                    ++i;
                }
            } else if (a >= plants[i]) {
                a -= plants[i];
                ++i;
            } else if (b >= plants[j]) {
                b -= plants[j];
                --j;
            } else {
                a = capacityA;
                b = capacityB;
                ++res;
            }
        }
        return res;

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int ca = 0, cb = 0;
        int res = 0;
        while (i <= j) {
            if (ca < plants[i]) {
                ca = capacityA;
                ++res;
            }
            if (cb < plants[j]) {
                cb = capacityB;
                ++res;
            }
            ca -= plants[i];
            cb -= plants[j];
            ++i;
            --j;
        }
        if (ca > 0) --res;
        if (cb > 0) --res;
        return res;

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int cnt = 0;
        int a = capacityA, b = capacityB;
        while (i <= j) {
            if (a >= plants[i] && b >= plants[j]) {
                if (a >= b) {
                    a -= plants[i++];
                } else {
                    b -= plants[j--];
                }
            } else if (a >= plants[i]) {
                a -= plants[i++];
            } else if (b >= plants[j]) {
                b -= plants[j--];
            } else {
                a = capacityA;
                b = capacityB;
                ++cnt;
            }
        }
        return cnt;

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int count = 0;
        int waterA = 0, waterB = 0;
        while (i <= j) {
            if (waterA < plants[i]) {
                waterA = capacityA;
                ++count;
            }
            waterA -= plants[i];
            ++i;
            if (i > j) {
                break;
            }
            if (waterB < plants[j]) {
                waterB = capacityB;
                ++count;
            }
            waterB -= plants[j];
            --j;
        }
        return count;

=======

        int n = plants.size();
        int a = 0, b = n - 1;
        int cnt = 0;
        int ca = 0, cb = 0;
        while (a <= b) {
            if (a == b) {
                if (ca + cb < plants[a]) {
                    ++cnt;
                }
                break;
            }
            if (ca < plants[a]) {
                ca = capacityA;
                ++cnt;
            }
            if (cb < plants[b]) {
                cb = capacityB;
                ++cnt;
            }
            ca -= plants[a];
            cb -= plants[b];
            ++a;
            --b;
        }
        return cnt;

=======

        int n = plants.size();
        int i = 0, j = n - 1;
        int res = 0;
        int a = 0, b = 0;
        while (i < j) {
            if (a < plants[i]) {
                a = capacityA;
                ++res;
            }
            if (b < plants[j]) {
                b = capacityB;
                ++res;
            }
            a -= plants[i];
            b -= plants[j];
            ++i;
            --j;
        }
        if (i == j) {
            if (a + b < plants[i]) {
                res += 2;
            } else if (a < plants[i] || b < plants[i]) {
                ++res;
            }
        }
        return res;

=======

        int i = 0, j = plants.size() - 1;
        int a = capacityA, b = capacityB;
        int ret = 0;
        while (i <= j) {
            if (a >= plants[i] && b >= plants[j]) {
                if (a >= b) {
                    a -= plants[i++];
                } else {
                    b -= plants[j--];
                }
            } else if (a >= plants[i]) {
                a -= plants[i++];
            } else if (b >= plants[j]) {
                b -= plants[j--];
            } else {
                a = capacityA;
                b = capacityB;
                ++ret;
            }
        }
        return ret;

=======

        int n = plants.size();
        int i = 0, j = n-1;
        int refills = 0;
        int a = capacityA, b = capacityB;
        while (i <= j) {
            if (a < plants[i]) {
                refills++;
                a = capacityA;
            }
            if (b < plants[j]) {
                refills++;
                b = capacityB;
            }
            if (a >= plants[i]) {
                a -= plants[i];
                i++;
            }
            if (b >= plants[j]) {
                b -= plants[j];
                j--;
            }
        }
        return refills;

=======

        int n = plants.size();
        int a = 0, b = n - 1;
        int count = 0;
        while (a <= b) {
            int waterA = capacityA;
            int waterB = capacityB;
            while (a <= b && waterA >= plants[a]) {
                waterA -= plants[a];
                a++;
            }
            while (a <= b && waterB >= plants[b]) {
                waterB -= plants[b];
                b--;
            }
            if (a <= b) {
                count++;
            }
        }
        return count;
