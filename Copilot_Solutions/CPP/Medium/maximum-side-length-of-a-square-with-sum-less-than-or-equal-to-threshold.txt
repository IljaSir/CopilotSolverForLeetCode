Synthesizing 10/10 solutions

=======

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> sum(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }
        int l = 0, r = min(m, n);
        while (l < r) {
            int mid = l + r + 1 >> 1;
            bool ok = false;
            for (int i = mid; i <= m; ++i) {
                for (int j = mid; j <= n; ++j) {
                    int cur = sum[i][j] - sum[i - mid][j] - sum[i][j - mid] + sum[i - mid][j - mid];
                    if (cur <= threshold) {
                        ok = true;
                    }
                }
            }
            if (ok) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> sum(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }
        int ans = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int l = ans + 1;
                int r = min(m - i + 1, n - j + 1);
                while (l <= r) {
                    int mid = l + (r - l) / 2;
                    if (sum[i + mid - 1][j + mid - 1] - sum[i + mid - 1][j - 1] - sum[i - 1][j + mid - 1] + sum[i - 1][j - 1] > threshold) {
                        r = mid - 1;
                    } else {
                        ans = mid;
                        l = mid + 1;
                    }
                }
            }
        }
        return ans;

=======

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = mat[i - 1][j - 1] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
            }
        }
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int l = 0, r = min(m - i, n - j);
                while (l < r) {
                    int mid = (l + r + 1) / 2;
                    if (dp[i + mid][j + mid] - dp[i - 1][j + mid] - dp[i + mid][j - 1] + dp[i - 1][j - 1] > threshold) {
                        r = mid - 1;
                    } else {
                        l = mid;
                    }
                }
                ans = max(ans, l);
            }
        }
        return ans;

=======

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> sum(m+1, vector<int>(n+1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
            }
        }
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int l = 0, r = min(m - i + 1, n - j + 1);
                while (l < r) {
                    int mid = l + (r - l + 1) / 2;
                    if (sum[i+mid-1][j+mid-1] - sum[i-1][j+mid-1] - sum[i+mid-1][j-1] + sum[i-1][j-1] <= threshold) {
                        l = mid;
                    } else {
                        r = mid - 1;
                    }
                }
                ans = max(ans, l);
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> sums(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                sums[i][j] = sums[i][j - 1] + sums[i - 1][j] - sums[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }
        int l = 0, r = min(m, n);
        while (l < r) {
            int mid = (l + r + 1) / 2;
            bool found = false;
            for (int i = mid; i <= m; i++) {
                for (int j = mid; j <= n; j++) {
                    int area = sums[i][j] - sums[i - mid][j] - sums[i][j - mid] + sums[i - mid][j - mid];
                    if (area <= threshold) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
            if (found) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1] - dp[i][j] + mat[i][j];
            }
        }
        int l = 0, r = min(m, n);
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            bool ok = false;
            for (int i = mid; i <= m; i++) {
                for (int j = mid; j <= n; j++) {
                    if (dp[i][j] - dp[i - mid][j] - dp[i][j - mid] + dp[i - mid][j - mid] <= threshold) {
                        ok = true;
                    }
                }
            }
            if (ok) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                dp[i][j] = mat[i-1][j-1] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1];
            }
        }
        int ans = 0;
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                for(int k = ans+1; k <= min(m-i+1, n-j+1); k++){
                    int sum = dp[i+k-1][j+k-1] - dp[i+k-1][j-1] - dp[i-1][j+k-1] + dp[i-1][j-1];
                    if(sum <= threshold){
                        ans = k;
                    }
                }
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for(int i = 1; i <= m; ++i){
            for(int j = 1; j <= n; ++j){
                dp[i][j] = mat[i-1][j-1] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1];
            }
        }
        int ans = 0;
        for(int i = 1; i <= m; ++i){
            for(int j = 1; j <= n; ++j){
                int left = 0;
                int right = min(m-i, n-j)+1;
                while(left < right){
                    int mid = left + (right-left)/2;
                    int sum = dp[i+mid-1][j+mid-1] - dp[i+mid-1][j-1] - dp[i-1][j+mid-1] + dp[i-1][j-1];
                    if(sum <= threshold){
                        left = mid+1;
                    }
                    else{
                        right = mid;
                    }
                }
                ans = max(ans, left-1);
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        int ans = 0;
        int sum[m + 1][n + 1];
        memset(sum, 0, sizeof(sum));
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                sum[i][j] = mat[i - 1][j - 1] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
            }
        }
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                int k = min(m - i + 1, n - j + 1);
                while(k > ans) {
                    int t = sum[i + k - 1][j + k - 1] - sum[i - 1][j + k - 1] - sum[i + k - 1][j - 1] + sum[i - 1][j - 1];
                    if(t <= threshold) {
                        ans = k;
                        break;
                    }
                    k--;
                }
            }
        }
        return ans;

=======

        int rows = mat.size();
        int cols = mat[0].size();
        int maxLen = 0;
        vector<vector<int>> dp(rows+1, vector<int>(cols+1, 0));
        for(int i=1; i<=rows; i++){
            for(int j=1; j<=cols; j++){
                dp[i][j] = mat[i-1][j-1] + dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1];
                int len = min(i, j);
                while(len>maxLen){
                    if(dp[i][j]-dp[i][j-len]-dp[i-len][j]+dp[i-len][j-len]<=threshold){
                        maxLen = len;
                        break;
                    }
                    len--;
                }
            }
        }
        return maxLen;
