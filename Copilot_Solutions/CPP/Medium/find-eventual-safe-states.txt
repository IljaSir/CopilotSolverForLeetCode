Synthesizing 10/10 solutions

=======

        int n = graph.size();
        vector<int> color(n, 0);
        vector<int> res;
        for (int i = 0; i < n; ++i) {
            if (safe(graph, color, i)) {
                res.push_back(i);
            }
        }
        return res;
    }
    bool safe(vector<vector<int>>& graph, vector<int>& color, int x) {
        if (color[x] > 0) {
            return color[x] == 2;
        }
        color[x] = 1;
        for (auto& y : graph[x]) {
            if (!safe(graph, color, y)) {
                return false;
            }
        }
        color[x] = 2;
        return true;

=======

        int n = graph.size();
        vector<int> color(n, 0);
        vector<int> res;
        for (int i = 0; i < n; i++) {
            if (dfs(graph, i, color)) {
                res.push_back(i);
            }
        }
        return res;
    }
    bool dfs(vector<vector<int>>& graph, int i, vector<int>& color) {
        if (color[i] > 0) {
            return color[i] == 2;
        }
        color[i] = 1;
        for (auto j : graph[i]) {
            if (!dfs(graph, j, color)) {
                return false;
            }
        }
        color[i] = 2;
        return true;

=======

        int n = graph.size();
        vector<int> res;
        vector<int> color(n, 0);
        for (int i = 0; i < n; ++i) {
            if (dfs(graph, color, i)) {
                res.push_back(i);
            }
        }
        return res;
    }
    bool dfs(vector<vector<int>>& graph, vector<int>& color, int i) {
        if (color[i] > 0) {
            return color[i] == 2;
        }
        color[i] = 1;
        for (int j : graph[i]) {
            if (!dfs(graph, color, j)) {
                return false;
            }
        }
        color[i] = 2;
        return true;

=======

        vector<int> result;
        vector<int> color(graph.size(), 0);
        for (int i = 0; i < graph.size(); i++) {
            if (dfs(graph, color, i)) {
                result.push_back(i);
            }
        }
        return result;
    }

    bool dfs(vector<vector<int>>& graph, vector<int>& color, int i) {
        if (color[i] > 0) {
            return color[i] == 2;
        }
        color[i] = 1;
        for (auto j : graph[i]) {
            if (color[j] == 2) {
                continue;
            }
            if (color[j] == 1 || !dfs(graph, color, j)) {
                return false;
            }
        }
        color[i] = 2;
        return true;

=======

        int n = graph.size();
        vector<int> res;
        vector<int> color(n, 0);
        for (int i = 0; i < n; i++) {
            if (safe(graph, color, i)) {
                res.push_back(i);
            }
        }
        return res;
    }
    bool safe(vector<vector<int>>& graph, vector<int> &color, int x) {
        if (color[x] > 0) {
            return color[x] == 2;
        }
        color[x] = 1;
        for (int y : graph[x]) {
            if (!safe(graph, color, y)) {
                return false;
            }
        }
        color[x] = 2;
        return true;

=======

        vector<int> result;
        vector<int> visited(graph.size(), 0);
        for (int i = 0; i < graph.size(); ++i) {
            if (dfs(graph, visited, i)) {
                result.push_back(i);
            }
        }
        return result;

=======

        int n = graph.size();
        vector<vector<int>> rg(n);
        vector<int> deg(n);
        for (int i = 0; i < n; i++) {
            for (int j : graph[i]) {
                rg[j].push_back(i);
            }
            deg[i] = graph[i].size();
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (deg[i] == 0) {
                q.push(i);
            }
        }
        vector<int> ans;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            ans.push_back(u);
            for (int v : rg[u]) {
                if (--deg[v] == 0) {
                    q.push(v);
                }
            }
        }
        sort(ans.begin(), ans.end());
        return ans;

=======

        int n = graph.size();
        vector<int> degree(n, 0);
        vector<vector<int>> edges(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < graph[i].size(); j++) {
                edges[graph[i][j]].push_back(i);
                degree[i]++;
            }
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 0) {
                q.push(i);
            }
        }
        vector<int> res;
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            res.push_back(u);
            for (int v : edges[u]) {
                degree[v]--;
                if (degree[v] == 0) {
                    q.push(v);
                }
            }
        }
        sort(res.begin(), res.end());
        return res;

=======

        int n = graph.size();
        vector<int> safe;
        vector<int> state(n, 0);
        for (int i = 0; i < n; ++i) {
            if (dfs(graph, i, state)) {
                safe.push_back(i);
            }
        }
        return safe;

=======

        int n = graph.size();
        vector<int> degree(n,0);
        vector<vector<int>> out(n);
        for (int i = 0; i < n; i++) {
            degree[i] = graph[i].size();
            for (int j = 0; j < graph[i].size(); j++) {
                out[graph[i][j]].push_back(i);
            }
        }
        vector<int> ans;
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (degree[i] == 0) {
                q.push(i);
            }
        }
        while (!q.empty()) {
            int u = q.front();
            q.pop();
            ans.push_back(u);
            for (int i = 0; i < out[u].size(); i++) {
                int v = out[u][i];
                degree[v]--;
                if (degree[v] == 0) {
                    q.push(v);
                }
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
