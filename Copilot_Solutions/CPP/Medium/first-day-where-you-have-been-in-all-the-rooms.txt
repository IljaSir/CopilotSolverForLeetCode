Synthesizing 8/10 solutions (Duplicates hidden)

=======

        int n = nextVisit.size();
        vector<int> dp(n, 0);
        int mod = 1e9 + 7;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return dp.back();

=======

        int n = nextVisit.size();
        vector<int> dp(n, 0);
        int mod = 1e9 + 7;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return dp[n - 1];

=======

        int n = nextVisit.size();
        vector<int> dp(n, 0);
        int mod = 1e9 + 7;
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] + mod - dp[nextVisit[i - 1]] + 2) % mod;
        }
        return dp[n - 1];

=======

        int n = nextVisit.size();
        int mod = 1000000007;
        vector<long long> dp(n, 0);
        for (int i = 1; i < n; i++) {
            dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2 + mod) % mod;
        }
        return dp[n - 1];

=======

        int n = nextVisit.size();
        int mod = 1000000007;
        vector<long> dp(n, 0);
        for (int i = 1; i < n; i++) {
            dp[i] = (dp[i - 1] + 2 * (i - nextVisit[i]) + 2) % mod;
        }
        return dp[n - 1];

=======

        int n = nextVisit.size();
        vector<int> dp(n, 0);
        for (int i = 1; i < n; ++i) {
            dp[i] = (dp[i - 1] + dp[i] + 2) % 1000000007;
            if (nextVisit[i] < i - 1) {
                dp[i] = (dp[i] - dp[nextVisit[i]] + 1000000007) % 1000000007;
            }
        }
        return dp[n - 1];

=======

        int mod = 1e9+7;
        int n = nextVisit.size();
        vector<long long> dp(n, 0);
        for(int i = 1; i < n; i++){
            dp[i] = (2 * dp[i-1] - dp[nextVisit[i-1]] + 2 + 2*mod) % mod;
        }
        return dp[n-1];
