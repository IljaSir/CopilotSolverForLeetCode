Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> diff(n);
        for (int i = 0; i < n; ++i) {
            diff[i] = abs(s[i] - t[i]);
        }
        int ans = 0;
        int sum = 0;
        int l = 0;
        for (int r = 0; r < n; ++r) {
            sum += diff[r];
            while (sum > maxCost) {
                sum -= diff[l];
                ++l;
            }
            ans = max(ans, r - l + 1);
        }
        return ans;

=======

        int l = 0, r = 0, cost = 0, ans = 0;
        while (r < s.size()) {
            cost += abs(s[r] - t[r]);
            while (cost > maxCost) {
                cost -= abs(s[l] - t[l]);
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int l = 0;
        int r = 0;
        int cost = 0;
        int res = 0;
        while (r < s.size()) {
            cost += abs(s[r] - t[r]);
            r++;
            while (cost > maxCost) {
                cost -= abs(s[l] - t[l]);
                l++;
            }
            res = max(res, r - l);
        }
        return res;

=======

        int n = s.length();
        int l = 0, r = 0;
        int sum = 0;
        int ans = 0;
        while (r < n) {
            sum += abs(s[r] - t[r]);
            while (sum > maxCost) {
                sum -= abs(s[l] - t[l]);
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int l = 0, r = 0;
        int n = s.length();
        int cost = 0;
        int ans = 0;
        while (r < n) {
            cost += abs(s[r] - t[r]);
            r++;
            while (cost > maxCost) {
                cost -= abs(s[l] - t[l]);
                l++;
            }
            ans = max(ans, r - l);
        }
        return ans;

=======

        int n = s.size();
        int ans = 0;
        int cost = 0;
        int l = 0, r = 0;
        while (r < n) {
            cost += abs(s[r] - t[r]);
            while (cost > maxCost) {
                cost -= abs(s[l] - t[l]);
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int n = s.size();
        vector<int> sub(n, 0);
        for (int i = 0; i < n; i++) {
            sub[i] = abs(s[i] - t[i]);
        }
        int sum = 0;
        int l = 0, r = 0;
        int ans = 0;
        while (r < n) {
            sum += sub[r];
            while (sum > maxCost) {
                sum -= sub[l];
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int len = s.size();
        int left = 0, right = 0;
        int cost = 0;
        int maxLen = 0;
        while (right < len) {
            cost += abs(s[right] - t[right]);
            right++;
            while (cost > maxCost) {
                cost -= abs(s[left] - t[left]);
                left++;
            }
            maxLen = max(maxLen, right - left);
        }
        return maxLen;

=======

        int left = 0;
        int right = 0;
        int cost = 0;
        int res = 0;
        while(right < s.size()){
            cost += abs(s[right] - t[right]);
            while(cost > maxCost){
                cost -= abs(s[left] - t[left]);
                left++;
            }
            res = max(res, right - left + 1);
            right++;
        }
        return res;

=======

        int n = s.size();
        int ans = 0;
        int cost = 0;
        int l = 0;
        for(int r = 0; r < n; r++) {
            cost += abs(s[r] - t[r]);
            while(cost > maxCost) {
                cost -= abs(s[l] - t[l]);
                l++;
            }
            ans = max(ans, r - l + 1);
        }
        return ans;
