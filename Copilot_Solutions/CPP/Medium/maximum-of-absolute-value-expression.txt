Synthesizing 6/10 solutions (Duplicates hidden)

=======

        int n = arr1.size();
        vector<int> p1(n), p2(n), p3(n), p4(n);
        for (int i = 0; i < n; ++i) {
            p1[i] = arr1[i] + arr2[i] + i;
            p2[i] = arr1[i] + arr2[i] - i;
            p3[i] = arr1[i] - arr2[i] + i;
            p4[i] = arr1[i] - arr2[i] - i;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, p1[i] - *min_element(p1.begin(), p1.end()));
            ans = max(ans, p2[i] - *min_element(p2.begin(), p2.end()));
            ans = max(ans, p3[i] - *min_element(p3.begin(), p3.end()));
            ans = max(ans, p4[i] - *min_element(p4.begin(), p4.end()));
        }
        return ans;

=======

        int n = arr1.size();
        vector<int> x(n), y(n), z(n), w(n);
        for (int i = 0; i < n; ++i) {
            x[i] = arr1[i] + arr2[i] + i;
            y[i] = arr1[i] + arr2[i] - i;
            z[i] = arr1[i] - arr2[i] + i;
            w[i] = arr1[i] - arr2[i] - i;
        }
        return max({abs(*max_element(x.begin(), x.end()) - *min_element(x.begin(), x.end())),
                    abs(*max_element(y.begin(), y.end()) - *min_element(y.begin(), y.end())),
                    abs(*max_element(z.begin(), z.end()) - *min_element(z.begin(), z.end())),
                    abs(*max_element(w.begin(), w.end()) - *min_element(w.begin(), w.end()))});

=======

        int ans = 0;
        vector<int> v = {1,-1};
        for (int x : v) {
            for (int y : v) {
                int mi = INT_MAX;
                for (int i = 0; i < arr1.size(); ++i) {
                    mi = min(mi, arr1[i] * x + arr2[i] * y + i);
                    ans = max(ans, arr1[i] * x + arr2[i] * y + i - mi);
                }
            }
        }
        return ans;
