Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int mod = 1e9 + 7;
        long long res = 0;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int t = target - arr[i];
            int l = i + 1, r = n - 1;
            while (l < r) {
                if (arr[l] + arr[r] < t) {
                    ++l;
                } else if (arr[l] + arr[r] > t) {
                    --r;
                } else if (arr[l] != arr[r]) {
                    int left = 1, right = 1;
                    while (l + 1 < r && arr[l] == arr[l + 1]) {
                        ++l;
                        ++left;
                    }
                    while (r - 1 > l && arr[r] == arr[r - 1]) {
                        --r;
                        ++right;
                    }
                    res += left * right;
                    res %= mod;
                    ++l;
                    --r;
                } else {
                    res += (r - l + 1) * (r - l) / 2;
                    res %= mod;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> count(101, 0);
        for (int i = 0; i < arr.size(); ++i) {
            count[arr[i]]++;
        }
        int res = 0;
        for (int i = 0; i <= 100; ++i) {
            for (int j = i; j <= 100; ++j) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k) {
                    res += count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j < k) {
                    res += count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    res += count[i] * count[j] * count[k];
                }
            }
        }
        return res % (int)(1e9 + 7);

=======

        int n = arr.size();
        int MOD = 1e9 + 7;
        int ans = 0;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[i] == arr[j] && arr[j] == arr[k]) {
                        ans = (ans + (k - j + 1) * (k - j) / 2) % MOD;
                        break;
                    } else if (arr[i] == arr[j]) {
                        int l = k;
                        while (l > j && arr[l] == arr[k]) {
                            l--;
                        }
                        ans = (ans + (k - l) * (k - l + 1) / 2) % MOD;
                        k = l;
                    } else if (arr[j] == arr[k]) {
                        int l = j;
                        while (l < k && arr[l] == arr[j]) {
                            l++;
                        }
                        ans = (ans + (l - j) * (l - j + 1) / 2) % MOD;
                        j = l;
                    } else {
                        ans = (ans + 1) % MOD;
                        j++;
                        k--;
                    }
                } else if (sum < target) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        const int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[j] == arr[k]) {
                        ans += (k - j + 1) * (k - j) / 2;
                        ans %= mod;
                        break;
                    }
                    else {
                        int l = j + 1, r = k - 1;
                        while (l < r && arr[l] == arr[j]) ++l;
                        while (l < r && arr[r] == arr[k]) --r;
                        ans += (l - j) * (k - r);
                        ans %= mod;
                        j = l;
                        k = r;
                    }
                }
                else if (sum < target) {
                    ++j;
                }
                else {
                    --k;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        int mod = 1e9 + 7;
        long long res = 0;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int t = target - arr[i];
            int l = i + 1, r = n - 1;
            while (l < r) {
                if (arr[l] + arr[r] < t) {
                    ++l;
                } else if (arr[l] + arr[r] > t) {
                    --r;
                } else if (arr[l] != arr[r]) {
                    int left = 1, right = 1;
                    while (l + 1 < r && arr[l] == arr[l + 1]) {
                        ++l;
                        ++left;
                    }
                    while (r - 1 > l && arr[r] == arr[r - 1]) {
                        --r;
                        ++right;
                    }
                    res += left * right;
                    res %= mod;
                    ++l;
                    --r;
                } else {
                    res += (r - l + 1) * (r - l) / 2;
                    res %= mod;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> count(101, 0);
        for (int i = 0; i < arr.size(); ++i) {
            count[arr[i]]++;
        }
        int res = 0;
        for (int i = 0; i <= 100; ++i) {
            for (int j = i; j <= 100; ++j) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k) {
                    res += count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j < k) {
                    res += count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    res += count[i] * count[j] * count[k];
                }
            }
        }
        return res % (int)(1e9 + 7);

=======

        int n = arr.size();
        int MOD = 1e9 + 7;
        int ans = 0;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; i++) {
            int j = i + 1;
            int k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[i] == arr[j] && arr[j] == arr[k]) {
                        ans = (ans + (k - j + 1) * (k - j) / 2) % MOD;
                        break;
                    } else if (arr[i] == arr[j]) {
                        int l = k;
                        while (l > j && arr[l] == arr[k]) {
                            l--;
                        }
                        ans = (ans + (k - l) * (k - l + 1) / 2) % MOD;
                        k = l;
                    } else if (arr[j] == arr[k]) {
                        int l = j;
                        while (l < k && arr[l] == arr[j]) {
                            l++;
                        }
                        ans = (ans + (l - j) * (l - j + 1) / 2) % MOD;
                        j = l;
                    } else {
                        ans = (ans + 1) % MOD;
                        j++;
                        k--;
                    }
                } else if (sum < target) {
                    j++;;

=======

        int N = arr.size();
        if (N < 3) return 0;
        long long mod = 1000000007;
        sort(arr.begin(), arr.end());
        long long ans = 0;
        for (int i = 0; i < N; ++i) {
            int t = target - arr[i];
            int l = i + 1, r = N - 1;
            while (l < r) {
                if (arr[l] + arr[r] < t) {
                    ++l;
                } else if (arr[l] + arr[r] > t) {
                    --r;
                } else {
                    if (arr[l] != arr[r]) {
                        int left = 1, right = 1;
                        while (l + 1 < r && arr[l] == arr[l + 1]) {
                            ++left;
                            ++l;
                        }
                        while (r - 1 > l && arr[r] == arr[r - 1]) {
                            ++right;
                            --r;
                        }
                        ans += (left * right) % mod;
                        ans %= mod;
                        ++l;
                        --r;
                    } else {
                        ans += (r - l + 1) * (r - l) / 2;
                        ans %= mod;
                        break;
                    }
                }
            }
        }
        return ans
                } else {
                    k--;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        const int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[j] == arr[k]) {
                        ans += (k - j + 1) * (k - j) / 2;
                        ans %= mod;
                        break;
                    }
                    else {
                        int l = j + 1, r = k - 1;
                        while (l < r && arr[l] == arr[j]) ++l;
                        while (l < r && arr[r] == arr[k]) --r;
                        ans += (l - j) * (k - r);
                        ans %= mod;
                        j = l;
                        k = r;
                    }
                }
                else if (sum < target) {
                    ++j;
                }
                else {
                    --k;
                }
            }
        }
        return ans;

=======

        int n = arr.size();
        int mod = 1e9 + 7;
        long long res = 0;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int t = target - arr[i];
            int l = i + 1, r = n - 1;
            while (l < r) {
                if (arr[l] + arr[r] < t) {
                    ++l;
                } else if (arr[l] + arr[r] > t) {
                    --r;
                } else if (arr[l] != arr[r]) {
                    int left = 1, right = 1;
                    while (l + 1 < r && arr[l] == arr[l + 1]) {
                        ++l;
                        ++left;
                    }
                    while (r - 1 > l && arr[r] == arr[r - 1]) {
                        --r;
                        ++right;
                    }
                    res += left * right;
                    res %= mod;
                    ++l;
                    --r;
                } else {
                    res += (r - l + 1) * (r - l) / 2;
                    res %= mod;
                    break;
                }
            }
        }
        return res;

=======

        vector<int> count(101, 0);
        for (int i = 0; i < arr.size(); ++i) {
            count[arr[i]]++;
        }
        int res = 0;
        for (int i = 0; i <= 100; ++i) {
            for (int j = i; j <= 100; ++j) {
                int k = target - i - j;
                if (k < 0 || k > 100) continue;
                if (i == j && j == k) {
                    res += count[i] * (count[i] - 1) * (count[i] - 2) / 6;
                } else if (i == j && j < k) {
                    res += count[i] * (count[i] - 1) / 2 * count[k];
                } else if (j < k) {
                    res += count[i] * count[j] * count[k];
                }
            }
        }
        return res % (int)(1e9 + 7);

=======

        int n = arr.size();
        int ans = 0;
        const int mod = 1e9 + 7;
        sort(arr.begin(), arr.end());
        for (int i = 0; i < n; ++i) {
            int j = i + 1, k = n - 1;
            while (j < k) {
                int sum = arr[i] + arr[j] + arr[k];
                if (sum == target) {
                    if (arr[j] == arr[k]) {
                        ans += (k - j + 1) * (k - j) / 2;
                        ans %= mod;
                        break;
                    }
                    else {
                        int l = j + 1, r = k - 1;
                        while (l < r && arr[l] == arr[j]) ++l;
                        while (l < r && arr[r] == arr[k]) --r;
                        ans += (l - j) * (k - r);
                        ans %= mod;
                        j = l;
                        k = r;
                    }
                }
                else if (sum < target) {
                    ++j;
                }
                else {
                    --k;
                }
            }
        }
        return ans;

=======

        vector<int> cnt(101, 0);
        for (int num : arr) {
            cnt[num]++;
        }
        long long res = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k > 100 || k < 0) continue;
                if (i == j && j == k) {
                    res += cnt[i] * (cnt[i] - 1) * (cnt[i] - 2) / 6;
                } else if (i == j && j != k) {
                    res += cnt[i] * (cnt[i] - 1) / 2 * cnt[k];
                } else if (j < k) {
                    res += cnt[i] * cnt[j] * cnt[k];
                }
            }
        }
        return res % (int)(1e9 + 7);

=======

        vector<int> cnt(101, 0);
        for (int num : arr) {
            cnt[num]++;
        }
        long long res = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k > 100 || k < 0) continue;
                if (i == j && j == k) {
                    res += cnt[i] * (cnt[i] - 1) * (cnt[i] - 2) / 6;
                } else if (i == j && j != k) {
                    res += cnt[i] * (cnt[i] - 1) / 2 * cnt[k];
                } else if (j < k) {
                    res += cnt[i] * cnt[j] * cnt[k];
                }
            }
        }
        return res % (int)(1e9 + 7);

=======retun ans % 1000000007;

=======

        vctor<in> conts(101, 0);
        fo (auto : rr) {
            counts[n]++;
        }
        int res = 0;
        for (it i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    res += counts[i] * (counts[i] - 1) * (counts[i] - 2) / 6;
                } else if (i == j && j != k) {
                    res += counts[i] * (counts[i] - 1) / 2 * counts[k];
                } else if (i < j && j < k) {
                    res += counts[i] * counts[j] * counts[k];
                }
            }
        }
        return re

        map<int, int> m;
        for (auto i : arr) {
            m[i]++;
        }
        long long ans = 0;
        for (auto i : m) {
            for (auto j : m) {
                int k = target - i.first - j.first;
                if (m.count(k) == 0) {
                    continue;
                }
                if (i.first == j.first && j.first == k) {
                    ans += 1LL * i.second * (i.second - 1) * (i.second - 2) / 6;
                } else if (i.first == j.first && j.first < k) {
                    ans += 1LL * i.second * (i.second - 1) * m[k] / 2;
                } else if (j.first < i.first && i.first < k) {
                    ans += 1LL * i.second * j.second * m[k];
                }
            }
        }
        return ans % 1000000007;

=======

        vector<int> counts(101, 0);
        for (auto n : arr) {
            counts[n]++;
        }
        int res = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    res += counts[i] * (counts[i] - 1) * (counts[i] - 2) / 6;
                } else if (i == j && j != k) {
                    res += counts[i] * (counts[i] - 1) / 2 * counts[k];
                } else if (i < j && j < k) {
                    res += counts[i] * counts[j] * counts[k];
                }
            }
        }
        return res % 1000000007;

=======

        int mod = 1e9 + 7;
        int n = arr.size();
        vector<int> cnt(101, 0);
        for (int x : arr) {
            cnt[x]++;
        }
        long long ans = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = i; j <= 100; j++) {
                int k = target - i - j;
                if (k < 0 || k > 100) {
                    continue;
                }
                if (i == j && j == k) {
                    ans += (long long)cnt[i] * (cnt[i] - 1) * (cnt[i] - 2) / 6;
                } else if (i == j && j < k) {
                    ans += (long long)cnt[i] * (cnt[i] - 1) / 2 * cnt[k];
                } else if (j < k) {
                    ans += (long long)cnt[i] * cnt[j] * cnt[k];
                }
            }
        }
        return ans % mod;

=======

        int result = 0;
        map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            int t = target - arr[i];
            for (auto it = m.begin(); it != m.end(); it++) {
                if (m.find(t - it->first) != m.end()) {
                    result += it->second * m[t - it->first];
                    result %= 1000000007;
                }
            }
            m[arr[i]]++;
        }
        return result;
