Synthesizing 8/10 solutions

=======

        vector<int> result;
        for (auto& q : queries) {
            int count = 0;
            for (auto& p : points) {
                if ((p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]) <= q[2] * q[2]) {
                    ++count;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        vector<int> ans;
        for (auto q : queries) {
            int count = 0;
            for (auto p : points) {
                if ((p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]) <= q[2] * q[2]) {
                    count++;
                }
            }
            ans.push_back(count);
        }
        return ans;

=======

        vector<int> res;
        for (auto& q : queries) {
            int c = 0;
            for (auto& p : points) {
                if ((p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]) <= q[2] * q[2]) {
                    c++;
                }
            }
            res.push_back(c);
        }
        return res;

=======

        vector<int> res;
        for (auto q: queries) {
            int count = 0;
            for (auto p: points) {
                if ((p[0]-q[0])*(p[0]-q[0]) + (p[1]-q[1])*(p[1]-q[1]) <= q[2]*q[2])
                    count++;
            }
            res.push_back(count);
        }
        return res;

=======

        vector<int> res;
        for(auto& q : queries) {
            int x = q[0], y = q[1], r = q[2];
            int cnt = 0;
            for(auto& p : points) {
                int dis = (p[0]-x)*(p[0]-x) + (p[1]-y)*(p[1]-y);
                if(dis <= r*r) cnt++;
            }
            res.push_back(cnt);
        }
        return res;

=======

        vector<int> ans;
        for(auto& q: queries){
            int x = q[0], y = q[1], r = q[2];
            int count = 0;
            for(auto& p: points){
                int dx = x - p[0];
                int dy = y - p[1];
                if(dx*dx + dy*dy <= r*r){
                    count++;
                }
            }
            ans.push_back(count);
        }
        return ans;

=======

        vector<int> result;
        for(auto& query: queries){
            int count = 0;
            for(auto& point: points){
                if((point[0] - query[0]) * (point[0] - query[0]) + (point[1] - query[1]) * (point[1] - query[1]) <= query[2] * query[2]){
                    count++;
                }
            }
            result.push_back(count);
        }
        return result;

=======

        int n = points.size();
        int m = queries.size();
        vector<int> res(m, 0);
        for(int i = 0; i < m; i++)
        {
            int x = queries[i][0];
            int y = queries[i][1];
            int r = queries[i][2];
            for(int j = 0; j < n; j++)
            {
                int x1 = points[j][0];
                int y1 = points[j][1];
                if((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y) <= r * r)
                    res[i]++;
            }
        }
        return res;
