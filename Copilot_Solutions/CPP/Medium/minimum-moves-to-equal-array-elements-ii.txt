Synthesizing 10/10 solutions (Duplicates hidden)

=======

        sort(nums.begin(), nums.end());
        int i = 0, j = nums.size() - 1, ans = 0;
        while (i < j) {
            ans += nums[j--] - nums[i++];
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int mid = nums[nums.size() / 2];
        int ans = 0;
        for (int n : nums) {
            ans += abs(n - mid);
        }
        return ans;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int median = nums[n / 2];
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += abs(nums[i] - median);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int median = nums[n / 2];
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += abs(nums[i] - median);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int mid = nums[nums.size()/2];
        int res = 0;
        for (int num : nums) {
            res += abs(num - mid);
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int mid = nums[n/2];
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += abs(nums[i] - mid);
        }
        return res;

=======

        int ret = 0;
        sort(nums.begin(), nums.end());
        int mid = nums[nums.size() / 2];
        for (int i = 0; i < nums.size(); i++) {
            ret += abs(nums[i] - mid);
        }
        return ret;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int mid = nums[n/2];
        int ans = 0;
        for(int i = 0; i < n; i++) {
            ans += abs(nums[i] - mid);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int mid = nums[nums.size()/2];
        int res = 0;
        for (auto i : nums) {
            res += abs(mid - i);
        }
        return res;
