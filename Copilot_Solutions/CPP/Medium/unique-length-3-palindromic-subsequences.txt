Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; ++i) {
            dp[i][i] = 1;
        }
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i < n - l + 1; ++i) {
                int j = i + l - 1;
                dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                if (s[i] == s[j]) {
                    int k = i + 1;
                    while (k <= j && s[k] != s[i]) {
                        ++k;
                    }
                    if (k > j) {
                        dp[i][j] += 2;
                    } else if (k == j) {
                        dp[i][j] += 1;
                    } else {
                        dp[i][j] -= dp[k + 1][j - 1];
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (len == 2) {
                    if (s[i] == s[j]) {
                        dp[i][j] = 2;
                    } else {
                        dp[i][j] = 0;
                    }
                } else {
                    if (s[i] == s[j]) {
                        dp[i][j] = 2 + dp[i + 1][j - 1];
                    } else {
                        dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        vector<int> left(26, n), right(26, -1);
        for (int i = 0; i < n; ++i) {
            int c = s[i] - 'a';
            left[c] = min(left[c], i);
            right[c] = max(right[c], i);
        }
        int res = 0;
        for (int i = 0; i < 26; ++i) {
            if (left[i] < right[i]) {
                vector<int> count(26);
                for (int j = left[i] + 1; j < right[i]; ++j) {
                    count[s[j] - 'a']++;
                }
                for (int j = 0; j < 26; ++j) {
                    if (count[j]) {
                        ++res;
                    }
                }
            }
        }
        return res;

=======

        int res = 0;
        int n = s.size();
        vector<int> first(26, n), last(26, -1);
        for (int i = 0; i < n; ++i) {
            int c = s[i] - 'a';
            first[c] = min(first[c], i);
            last[c] = i;
        }
        for (int c = 0; c < 26; ++c) {
            if (first[c] < last[c]) {
                vector<bool> seen(26, false);
                for (int i = first[c] + 1; i < last[c]; ++i) {
                    seen[s[i] - 'a'] = true;
                }
                for (int i = 0; i < 26; ++i) {
                    if (seen[i]) {
                        ++res;
                    }
                }
            }
        }
        return res;

=======

        int n = s.length();
        int dp[n][n];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.size();
        int ans = 0;
        for (char c = 'a'; c <= 'z'; ++c) {
            int i = -1, j = -1;
            for (int k = 0; k < n; ++k) {
                if (s[k] == c) {
                    if (i == -1) i = k;
                    j = k;
                }
            }
            if (i != -1) {
                set<char> st;
                for (int k = i + 1; k < j; ++k) {
                    st.insert(s[k]);
                }
                ans += st.size();
            }
        }
        return ans;

=======

        int i, j, k, n = s.size();
        int ans = 0;
        for (i = 0; i < 26; i++) {
            int l = -1, r = -1;
            for (j = 0; j < n; j++) {
                if (s[j] == 'a' + i) {
                    l = j;
                    break;
                }
            }
            for (j = n - 1; j >= 0; j--) {
                if (s[j] == 'a' + i) {
                    r = j;
                    break;
                }
            }
            if (l == r) continue;
            int cnt[26] = {};
            for (j = l + 1; j < r; j++) {
                cnt[s[j] - 'a']++;
            }
            for (j = 0; j < 26; j++) {
                if (cnt[j]) ans++;
            }
        }
        return ans;

=======

        int N = s.size();
        vector<vector<int>> dp(N, vector<int>(N, 0));
        unordered_map<char, int> pos;
        for (int i = 0; i < N; i++) {
            if (pos.count(s[i])) {
                dp[pos[s[i]]][i] = 1;
            }
            pos[s[i]] = i;
        }
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                dp[i][j] += dp[i][j - 1];
            }
        }
        int res = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 2; j < N; j++) {
                if (s[i] == s[j]) {
                    res += dp[i + 1][j - 1];
                }
            }
        }
        return res;

=======

        int n = s.size();
        int dp[n][n]; // dp[i][j] = count of unique palindromic subsequences of length 3 in s[i..j] 
        memset(dp, 0, sizeof(dp));
        
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i + 1][j - 1];
                    int l = i + 1, r = j - 1;
                    while (l <= r && s[l] != s[i]) l++;
                    while (l <= r && s[r] != s[j]) r--;
                    if (l > r) dp[i][j] += 2;
                    else if (l == r) dp[i][j] += 1;
                    else dp[i][j] -= dp[l + 1][r - 1];
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
            }
        }
        return dp[0][n - 1];
