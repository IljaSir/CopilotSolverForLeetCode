Synthesizing 10/10 solutions

=======

        int n = word.size();
        vector<int> ans(n);
        int num = 0;
        for (int i = 0; i < n; ++i) {
            num = (num * 10 + word[i] - '0') % m;
            ans[i] = num == 0;
        }
        return ans;

=======

        int n = word.size();
        vector<int> ans(n);
        int r = 0;
        for (int i = 0; i < n; i++) {
            r = (r * 10 + word[i] - '0') % m;
            ans[i] = r == 0;
        }
        return ans;

=======

        vector<int> res;
        int mod = 0;
        for (int i = 0; i < word.size(); i++) {
            mod = (mod * 10 + (word[i] - '0')) % m;
            res.push_back(mod == 0);
        }
        return res;

=======

        int n = word.size();
        vector<int> res(n);
        int val = 0;
        for (int i = 0; i < n; i++) {
            val = (val * 10 + word[i] - '0') % m;
            res[i] = val == 0;
        }
        return res;

=======

        int n = word.length();
        vector<int> ans(n);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum * 10 + word[i] - '0') % m;
            ans[i] = sum == 0;
        }
        return ans;

=======

        vector<int> res;
        int n = word.size();
        int val = 0;
        for (int i = 0; i < n; ++i) {
            val = (val * 10 + (word[i] - '0')) % m;
            res.push_back(val == 0 ? 1 : 0);
        }
        return res;

=======

        vector<int> res;
        int n = word.size();
        int num = 0;
        for(int i = 0; i < n; i++){
            num = (num * 10 + word[i] - '0') % m;
            if(num % m == 0)
                res.push_back(1);
            else
                res.push_back(0);
        }
        return res;

=======

        int n = word.length();
        vector<int> ans(n, 0);
        int num = 0;
        for(int i = 0; i < n; i++){
            num = (num * 10 + (word[i] - '0')) % m;
            if(num == 0) ans[i] = 1;
        }
        return ans;

=======

        vector<int> res;
        int n = word.size();
        int t = 0;
        for(int i = 0; i < n; i++){
            t = (t * 10 + word[i] - '0') % m;
            res.push_back(t == 0 ? 1 : 0);
        }
        return res;

=======

        vector<int> result;
        int n = word.size();
        int current = 0;
        for(int i = 0; i < n; i++) {
            current = (current * 10 + (word[i] - '0')) % m;
            result.push_back(current == 0);
        }
        return result;
