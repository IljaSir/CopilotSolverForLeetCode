Synthesizing 10/10 solutions

=======

        long long result = 0;
        long long count = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                result += count * (count + 1) / 2;
                count = 0;
            }
        }
        result += count * (count + 1) / 2;
        return result;

=======

        long long ans = 0;
        int cnt = 0;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) {
                ++cnt;
            } else {
                ans += (long long) cnt * (cnt + 1) / 2;
                cnt = 0;
            }
        }
        ans += (long long) cnt * (cnt + 1) / 2;
        return ans;

=======

        long long res = 0;
        int n = nums.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) {
                count++;
            } else {
                res += (long long)count * (count + 1) / 2;
                count = 0;
            }
        }
        res += (long long)count * (count + 1) / 2;
        return res;

=======

        int n = nums.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                int j = i;
                while (j < n && nums[j] == 0) ++j;
                ans += (long long)(j - i) * (j - i + 1) / 2;
                i = j - 1;
            }
        }
        return ans;

=======

        long long n = nums.size();
        long long res = 0;
        long long cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                ++cnt;
            } else {
                res += cnt * (cnt + 1) / 2;
                cnt = 0;
            }
        }
        res += cnt * (cnt + 1) / 2;
        return res;

=======

        long long n = nums.size();
        long long ans = 0;
        long long i = 0;
        while (i < n) {
            if (nums[i] == 0) {
                long long j = i + 1;
                while (j < n && nums[j] == 0) {
                    ans += j - i;
                    j++;
                }
                ans += j - i;
                i = j;
            } else {
                i++;
            }
        }
        return ans;

=======

        long long result = 0;
        int i = 0;
        int j = 0;
        int n = nums.size();
        int count = 0;
        while (j < n) {
            if (nums[j] == 0) {
                count++;
            }
            while (count > 1) {
                if (nums[i] == 0) {
                    count--;
                }
                i++;
            }
            result += j - i + 1;
            j++;
        }
        return result;

=======

        long long res = 0;
        int n = nums.size();
        int i = 0;
        int j = 0;
        int zeroCount = 0;
        while (j < n) {
            if (nums[j] == 0) {
                zeroCount++;
            }
            while (zeroCount > 1) {
                if (nums[i] == 0) {
                    zeroCount--;
                }
                i++;
            }
            res += j - i + 1;
            j++;
        }
        return res;

=======

        long long ans = 0;
        for (auto i = 0, j = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) {
                j = i;
                while (j < nums.size() && nums[j] == 0) ++j;
                ans += (long long)(i - j + 1) * (j - i);
                i = j - 1;
            }
        }
        return ans;

=======

        long long cnt = 0;
        long long sum = 0;
        map<long long, long long> m;
        m[0] = 1;
        for (auto x : nums) {
            sum += x;
            cnt += m[sum];
            m[sum]++;
        }
        return cnt;
