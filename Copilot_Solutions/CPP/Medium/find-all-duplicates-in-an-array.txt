Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                result.push_back(index + 1);
            }
            nums[index] = -nums[index];
        }
        return result;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res.push_back(index + 1);
            }
            nums[index] = -nums[index];
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res.push_back(index + 1);
            } else {
                nums[index] = -nums[index];
            }
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < nums.size(); ++i) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                res.push_back(index + 1);
            }
            nums[index] = -nums[index];
        }
        return res;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); i++) {
            int index = abs(nums[i]) - 1;
            if (nums[index] < 0) {
                ans.push_back(index + 1);
            }
            nums[index] = -nums[index];
        }
        return ans;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int num = abs(nums[i]);
            if (nums[num - 1] < 0) {
                result.push_back(num);
            } else {
                nums[num - 1] *= -1;
            }
        }
        return result;

=======

        vector<int> res;
        for (auto x : nums) {
            int index = abs(x) - 1;
            if (nums[index] < 0) res.push_back(abs(x));
            nums[index] = -nums[index];
        }
        return res;
