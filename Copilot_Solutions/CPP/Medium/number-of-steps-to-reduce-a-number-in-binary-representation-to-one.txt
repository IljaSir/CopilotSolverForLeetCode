Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.size();
        int ans = 0;
        int carry = 0;
        for (int i = n - 1; i > 0; i--) {
            ans++;
            if (s[i] - '0' + carry == 1) {
                ans++;
                carry = 1;
            }
        }
        return ans + carry;

=======

        int ans = 0;
        int carry = 0;
        for (int i = s.length() - 1; i > 0; i--) {
            ans++;
            if (s[i] - '0' + carry == 1) {
                ans++;
                carry = 1;
            }
        }
        return ans + carry;

=======

        int n = s.size();
        int res = 0;
        int carry = 0;
        for (int i = n - 1; i > 0; i--) {
            res++;
            if (s[i] - '0' + carry == 1) {
                carry = 1;
                res++;
            }
        }
        return res + carry;

=======

        int ans = 0;
        int carry = 0;
        int n = s.size();
        for (int i = n - 1; i > 0; --i) {
            if (s[i] == '0') {
                ans += 1 + carry;
                carry = 0;
            } else {
                ans += 2 - carry;
                carry = 1;
            }
        }
        return ans + carry;

=======

        int n = s.size();
        int cnt = 0;
        int carry = 0;
        for (int i = n - 1; i > 0; --i) {
            if (s[i] == '0' + carry) {
                ++cnt;
                carry = 1;
            } else {
                cnt += 2;
            }
        }
        return cnt + carry;

=======

        int n = s.size();
        int ret = 0;
        int carry = 0;
        for (int i = n - 1; i > 0; --i) {
            ++ret;
            if (s[i] - '0' + carry == 1) {
                ++ret;
                carry = 1;
            }
        }
        return ret + carry;

=======

        int steps = 0;
        int carry = 0;
        int i = s.length() - 1;
        while (i > 0) {
            if (s[i] == '0') {
                if (carry == 1) {
                    steps += 2;
                } else {
                    steps += 1;
                }
            } else {
                if (carry == 1) {
                    steps += 1;
                } else {
                    steps += 2;
                    carry = 1;
                }
            }
            i--;
        }
        return steps + carry;

=======

        int i = s.length() - 1;
        int count = 0;
        int carry = 0;
        while (i > 0) {
            if (s[i] == '1') {
                if (carry == 0) {
                    carry = 1;
                    count++;
                }
                count++;
            } else {
                if (carry == 1) {
                    count++;
                }
            }
            i--;
        }
        return count + carry;

=======

        int count = 0;
        int n = s.size();
        int carry = 0;
        for(int i=n-1;i>=1;i--){
            if(s[i]=='1'){
                if(carry==0){
                    count++;
                    carry = 1;
                }
                count++;
            }
            else{
                if(carry==1){
                    count++;
                }
            }
        }
        return count+carry;
