Synthesizing 10/10 solutions

=======

        int n = s.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                count++;
            }
        }
        if (count == 0) {
            return (long long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        if (count % 3 != 0) {
            return 0;
        }
        int k = count / 3;
        int i = 0;
        while (i < n && k > 0) {
            if (s[i] == '1') {
                k--;
            }
            i++;
        }
        int j = n - 1;
        while (j >= 0 && k > 0) {
            if (s[j] == '1') {
                k--;
            }
            j--;
        }
        int left = 0;
        int right = 0;
        for (int x = i; x < n && s[x] == '0'; x++) {
            left++;
        }
        for (int x = j; x >= 0 && s[x] == '0'; x--) {
            right++;
        }
        return (long long)(left + 1) * (right + 1) % 1000000007;

=======

        int n = s.size();
        int n1 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') n1++;
        }
        if (n1 == 0) return (long long)(n - 1) * (n - 2) / 2 % 1000000007;
        if (n1 % 3 != 0) return 0;
        n1 /= 3;
        int c1 = 0, c2 = 0, c3 = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                c1++;
                if (c1 == n1) c2++;
                if (c1 == n1 * 2) c3++;
            }
        }
        return (long long)(c2 + 1) * (c3 + 1) % 1000000007;

=======

        int n = s.size();
        int one = 0;
        for (auto c : s) {
            one += c == '1';
        }
        if (one % 3 != 0) {
            return 0;
        }
        if (one == 0) {
            return (long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        one /= 3;
        int i = 0, j = 0, k = 0;
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] == '1') {
                c++;
            }
            if (c == 1) {
                j++;
            }
            if (c == one + 1) {
                k++;
            }
        }
        return (long)j * k % 1000000007;

=======

        int oneCount = 0;
        for (int i=0; i<s.length(); i++) {
            if (s[i] == '1') {
                oneCount++;
            }
        }
        if (oneCount % 3 != 0) {
            return 0;
        }
        if (oneCount == 0) {
            return (long long)(s.length() - 1) * (s.length() - 2) / 2 % 1000000007;
        }
        int target = oneCount / 3;
        int count = 0;
        int first = 0;
        int second = 0;
        for (int i=0; i<s.length(); i++) {
            if (s[i] == '1') {
                count++;
            }
            if (count == target) {
                first++;
            }
            if (count == target * 2) {
                second++;
            }
        }
        return (long long)first * second % 1000000007;

=======

        int n = s.size();
        int one = 0;
        for (char c : s)
            one += c == '1';
        if (one % 3 != 0)
            return 0;
        if (one == 0)
            return (long)(n - 1) * (n - 2) / 2 % 1000000007;
        int k = one / 3, i = 0, j = 0, cnt = 0;
        for (int l = 0; l < n; ++l) {
            if (s[l] == '1') {
                ++cnt;
                if (cnt == k + 1)
                    i = l;
                if (cnt == 2 * k + 1)
                    j = l;
            }
        }
        long res = 1;
        while (i < n - 1 && s[i] == '0') {
            ++i;
            ++res;
        }
        while (j < n - 1 && s[j] == '0') {
            ++j;
            ++res;
        }
        return res % 1000000007;

=======

        int n = s.size();
        int ones = 0;
        for (auto c : s) {
            if (c == '1') ones++;
        }
        if (ones == 0) {
            return (long long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        if (ones % 3 != 0) return 0;
        int k = ones / 3;
        int i = 0, j = 0;
        int cnt = 0;
        int first = 0, second = 0;
        while (i < n) {
            if (s[i] == '1') {
                cnt++;
                if (cnt == k) {
                    first = i + 1;
                }
                if (cnt == 2 * k) {
                    second = i + 1;
                    break;
                }
            }
            i++;
        }
        int res = 0;
        while (first < n && s[first] == '0') {
            first++;
        }
        while (second < n && s[second] == '0') {
            second++;
        }
        return (long long)(first - j) * (second - first) % 1000000007;

=======

        long long n = s.size();
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            sum += s[i] - '0';
        }
        if (sum == 0) {
            return (n - 1) * (n - 2) / 2 % 1000000007;
        }
        if (sum % 3 != 0) {
            return 0;
        }
        long long target = sum / 3;
        long long count = 0;
        long long ways = 1;
        for (int i = 0; i < n; ++i) {
            count += s[i] - '0';
            if (count == target) {
                ++ways;
            }
            if (count == target * 2) {
                return (ways - 1) * (ways - 1) % 1000000007;
            }
        }
        return 0;

=======

        int n = s.size();
        int mod = 1e9 + 7;
        int cnt = 0;
        for (auto c : s) {
            if (c == '1') cnt++;
        }
        if (cnt == 0) {
            return (long long)(n - 1) * (n - 2) / 2 % mod;
        }
        if (cnt % 3 != 0) return 0;
        int k = cnt / 3;
        int i = 0;
        int m1 = 0, m2 = 0;
        while (k > 0) {
            if (s[i++] == '1') k--;
        }
        while (s[i] == '0') i++;
        m1 = i;
        while (k > 0) {
            if (s[i++] == '1') k--;
        }
        while (s[i] == '0') i++;
        m2 = i - m1;
        return (long long)m1 * m2 % mod;

=======

        int n = s.length();
        int one = 0;
        for(int i = 0; i < n; i++) {
            one += (s[i] == '1');
        }
        if(one % 3 != 0) {
            return 0;
        }
        if(one == 0) {
            return (long long)(n - 1) * (n - 2) / 2 % 1000000007;
        }
        int target = one / 3;
        int cur = 0, first = 0, second = 0;
        for(int i = 0; i < n; i++) {
            if(s[i] == '1') {
                cur++;
            }
            if(cur == target) {
                first = i;
                break;
            }
        }
        for(int i = first + 1; i < n; i++) {
            if(s[i] == '1') {
                cur++;
            }
            if(cur == 2 * target) {
                second = i;
                break;
            }
        }
        return (long long)(first + 1) * (second - first) % 1000000007;

=======

        int oneCount = 0;
        for(auto c: s){
            if(c == '1')
                oneCount++;
        }
        if(oneCount % 3 != 0)
            return 0;
        if(oneCount == 0){
            return (long long)(s.size()-1)*(s.size()-2)/2 % 1000000007;
        }
        int oneCountPerPart = oneCount / 3;
        int oneCountPerPartIndex = 0;
        long long part1 = 0, part2 = 0;
        for(int i = 0; i < s.size(); i++){
            if(s[i] == '1'){
                oneCountPerPartIndex++;
            }
            if(oneCountPerPartIndex == oneCountPerPart){
                part1++;
            }
            if(oneCountPerPartIndex == oneCountPerPart * 2){
                part2++;
            }
        }
        return part1 * part2 % 1000000007;
