Synthesizing 10/10 solutions

=======

        int n = arr.size();
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto it = m.begin(); it != m.end(); it++) {
            v.push_back(it->second);
        }
        sort(v.begin(), v.end(), greater<int>());
        int ans = 0;
        int sum = 0;
        for (int i = 0; i < v.size(); i++) {
            sum += v[i];
            ans++;
            if (sum * 2 >= n) {
                break;
            }
        }
        return ans;

=======

        unordered_map<int, int> m;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto it = m.begin(); it != m.end(); it++) {
            v.push_back(it->second);
        }
        sort(v.begin(), v.end(), greater<int>());
        int n = arr.size();
        int sum = 0;
        int count = 0;
        for (int i = 0; i < v.size(); i++) {
            sum += v[i];
            count++;
            if (sum >= n / 2) {
                break;
            }
        }
        return count;

=======

        map<int, int> m;
        int n = arr.size();
        for (int i = 0; i < n; i++) {
            m[arr[i]]++;
        }
        vector<int> v;
        for (auto it = m.begin(); it != m.end(); it++) {
            v.push_back(it->second);
        }
        sort(v.begin(), v.end(), greater<int>());
        int sum = 0;
        int count = 0;
        for (int i = 0; i < v.size(); i++) {
            sum += v[i];
            count++;
            if (sum >= n / 2) {
                break;
            }
        }
        return count;

=======

        unordered_map<int, int> m;
        for (int i : arr) {
            ++m[i];
        }
        vector<int> v;
        for (auto i : m) {
            v.push_back(i.second);
        }
        sort(v.begin(), v.end(), greater<int>());
        int sum = 0, count = 0;
        for (int i : v) {
            sum += i;
            ++count;
            if (sum >= arr.size() / 2) {
                break;
            }
        }
        return count;

=======

        map<int, int> m;
        for (auto a: arr) m[a]++;
        vector<int> v;
        for (auto it = m.begin(); it != m.end(); it++) v.push_back(it->second);
        sort(v.begin(), v.end(), greater<int>());
        int n = arr.size(), i = 0, sum = 0;
        while (sum < n/2) sum += v[i++];
        return i;

=======

        int n = arr.size();
        vector<int> cnt(n + 1);
        for (int i = 0; i < n; ++i) {
            cnt[arr[i]]++;
        }
        sort(cnt.begin(), cnt.end(), greater<int>());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans++;
            n -= cnt[i];
            if (n <= n / 2) {
                break;
            }
        }
        return ans;

=======

        unordered_map<int, int> count;
        for (int i : arr) {
            ++count[i];
        }
        vector<int> a;
        for (auto p : count) {
            a.push_back(p.second);
        }
        sort(a.begin(), a.end(), greater<int>());
        int n = arr.size();
        int ans = 0;
        for (int i = 0; i < a.size(); ++i) {
            n -= a[i];
            ++ans;
            if (n <= arr.size() / 2) {
                break;
            }
        }
        return ans;

=======

        unordered_map<int, int> count;
        for (auto& i : arr) {
            count[i]++;
        }
        vector<int> v;
        for (auto& [k, v] : count) {
            v.push_back(v);
        }
        sort(v.begin(), v.end(), greater<int>());
        int sum = 0;
        for (int i = 0; i < v.size(); ++i) {
            sum += v[i];
            if (sum >= arr.size() / 2) {
                return i + 1;
            }
        }
        return 0;

=======

        unordered_map<int, int> m;
        vector<int> v;
        for (int i = 0; i < arr.size(); i++) {
            m[arr[i]]++;
        }
        for (auto& [k, v]: m) {
            v.push_back(v);
        }
        sort(v.begin(), v.end(), greater<int>());
        int sum = 0;
        int result = 0;
        for (int i = 0; i < v.size(); i++) {
            sum += v[i];
            result++;
            if (sum >= arr.size() / 2) {
                break;
            }
        }
        return result;

=======

        unordered_map<int, int> cnt;
        for (int i : arr) {
            ++cnt[i];
        }

        vector<int> freq;
        for (auto& kv : cnt) {
            freq.push_back(kv.second);
        }

        sort(freq.begin(), freq.end(), greater<int>());
        int n = arr.size();
        int ans = 0;
        int sum = 0;
        for (int i = 0; i < freq.size() && sum < n / 2; ++i) {
            sum += freq[i];
            ++ans;
        }

        return ans;
