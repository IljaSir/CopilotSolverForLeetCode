Synthesizing 10/10 solutions

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        queue<pair<int, int>> q;
        q.push(make_pair(row, col));
        visited[row][col] = 1;
        int cur_color = grid[row][col];
        while (!q.empty()) {
            pair<int, int> p = q.front();
            q.pop();
            int i = p.first;
            int j = p.second;
            if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
                grid[i][j] = color;
                continue;
            }
            if (grid[i - 1][j] != cur_color || grid[i + 1][j] != cur_color || grid[i][j - 1] != cur_color || grid[i][j + 1] != cur_color) {
                grid[i][j] = color;
                continue;
            }
            if (visited[i - 1][j] == 0) {
                q.push(make_pair(i - 1, j));
                visited[i - 1][j] = 1;
            }
            if (visited[i + 1][j] == 0) {
                q.push(make_pair(i + 1, j));
                visited[i + 1][j] = 1;
            }
            if (visited[i][j - 1] == 0) {
                q.push(make_pair(i, j - 1));
                visited[i][j - 1] = 1;
            }
            if (visited[i][j + 1] == 0) {
                q.push(make_pair(i, j + 1));
                visited[i][j + 1] = 1;
            }
        }
        return grid;

=======

        dfs(grid, row, col, grid[row][col], color);
        return grid;
    }
    
    void dfs(vector<vector<int>>& grid, int row, int col, int oldColor, int newColor) {
        if (row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || grid[row][col] != oldColor)
            return;
        grid[row][col] = -oldColor; // mark as visited
        dfs(grid, row+1, col, oldColor, newColor);
        dfs(grid, row-1, col, oldColor, newColor);
        dfs(grid, row, col+1, oldColor, newColor);
        dfs(grid, row, col-1, oldColor, newColor);
        if ((row > 0 && grid[row-1][col] == oldColor) || (col > 0 && grid[row][col-1] == oldColor) ||
            (row < grid.size()-1 && grid[row+1][col] == oldColor) || (col < grid[0].size()-1 && grid[row][col+1] == oldColor)) {
            grid[row][col] = oldColor;
        } else {
            grid[row][col] = newColor;
        }

=======

        int m = grid.size();
        int n = grid[0].size();
        int oldColor = grid[row][col];
        if (oldColor == color) return grid;
        queue<pair<int, int>> q;
        q.push({row, col});
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != oldColor) continue;
            grid[x][y] = -1;
            q.push({x - 1, y});
            q.push({x + 1, y});
            q.push({x, y - 1});
            q.push({x, y + 1});
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == -1) {
                    if (i == 0 || i == m - 1 || j == 0 || j == n - 1 || grid[i - 1][j] != oldColor || grid[i + 1][j] != oldColor || grid[i][j - 1] != oldColor || grid[i][j + 1] != oldColor) {
                        grid[i][j] = color;
                    }
                }
            }
        }
        return grid;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        int oldColor = grid[row][col];
        dfs(grid, visited, row, col, m, n, oldColor);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (visited[i][j]) {
                    grid[i][j] = color;
                }
            }
        }
        return grid;
    }
    
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int row, int col, int m, int n, int oldColor) {
        if (row < 0 || row >= m || col < 0 || col >= n || grid[row][col] != oldColor) {
            return;
        }
        if (visited[row][col]) {
            return;
        }
        visited[row][col] = true;
        if (row == 0 || row == m - 1 || col == 0 || col == n - 1) {
            grid[row][col] = -1;
        } else {
            if (grid[row + 1][col] != oldColor) {
                grid[row][col] = -1;
            }
            if (grid[row - 1][col] != oldColor) {
                grid[row][col] = -1;
            }
            if (grid[row][col + 1] != oldColor) {
                grid[row][col] = -1;
            }
            if (grid[row][col - 1] != oldColor) {
                grid[row][col] = -1;
            }
        }
        dfs(grid, visited, row + 1, col, m, n, oldColor);
        dfs(grid, visited, row - 1, col, m, n, oldColor);
        dfs(grid, visited, row, col + 1, m, n, oldColor);
        dfs(grid, visited, row, col - 1, m, n, oldColor);

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        int oldColor = grid[row][col];
        dfs(grid, row, col, color, oldColor, visited);
        return grid;
    }
    void dfs(vector<vector<int>>& grid, int row, int col, int color, int oldColor, vector<vector<int>>& visited) {
        int m = grid.size();
        int n = grid[0].size();
        if (row < 0 || row >= m || col < 0 || col >= n || visited[row][col] || grid[row][col] != oldColor) {
            return;
        }
        visited[row][col] = 1;
        dfs(grid, row - 1, col, color, oldColor, visited);
        dfs(grid, row + 1, col, color, oldColor, visited);
        dfs(grid, row, col - 1, color, oldColor, visited);
        dfs(grid, row, col + 1, color, oldColor, visited);
        if (row > 0 && row < m - 1 && col > 0 && col < n - 1 && grid[row - 1][col] == oldColor && grid[row + 1][col] == oldColor && grid[row][col - 1] == oldColor && grid[row][col + 1] == oldColor) {
            return;
        }
        grid[row][col] = color;

=======

        int m = grid.size();
        int n = grid[0].size();
        int oldColor = grid[row][col];
        vector<vector<int>> visited(m, vector<int>(n, 0));
        dfs(grid, visited, row, col, oldColor);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == -1) {
                    grid[i][j] = color;
                } else if (grid[i][j] == -2) {
                    grid[i][j] = oldColor;
                } else if (grid[i][j] == oldColor) {
                    if (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                        grid[i][j] = -1;
                    } else {
                        if (grid[i - 1][j] != oldColor || grid[i + 1][j] != oldColor || grid[i][j - 1] != oldColor || grid[i][j + 1] != oldColor) {
                            grid[i][j] = -1;
                        }
                    }
                }
            }
        }
        return grid;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int row, int col, int oldColor) {
        if (row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || visited[row][col] == 1 || grid[row][col] != oldColor) {
            return;
        }
        visited[row][col] = 1;
        grid[row][col] = -2;
        dfs(grid, visited, row + 1, col, oldColor);
        dfs(grid, visited, row - 1, col, oldColor);
        dfs(grid, visited, row, col + 1, oldColor);
        dfs(grid, visited, row, col - 1, oldColor);

=======

        int m = grid.size();
        int n = grid[0].size();
        int oldColor = grid[row][col];
        vector<vector<int>> visited(m, vector<int>(n, 0));
        dfs(grid, visited, row, col, color, oldColor);
        return grid;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& visited, int row, int col, int color, int oldColor) {
        int m = grid.size();
        int n = grid[0].size();
        if (row < 0 || row >= m || col < 0 || col >= n) return;
        if (visited[row][col] == 1) return;
        if (grid[row][col] != oldColor) return;
        visited[row][col] = 1;
        if (row == 0 || row == m-1 || col == 0 || col == n-1) {
            grid[row][col] = color;
        } else if (grid[row+1][col] != oldColor || grid[row-1][col] != oldColor || grid[row][col+1] != oldColor || grid[row][col-1] != oldColor) {
            grid[row][col] = color;
        }
        dfs(grid, visited, row+1, col, color, oldColor);
        dfs(grid, visited, row-1, col, color, oldColor);
        dfs(grid, visited, row, col+1, color, oldColor);
        dfs(grid, visited, row, col-1, color, oldColor);

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n, 0));
        vector<vector<int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int val = grid[row][col];
        queue<pair<int, int>> q;
        q.push({row, col});
        visited[row][col] = 1;
        while (!q.empty()) {
            auto p = q.front();
            q.pop();
            int x = p.first;
            int y = p.second;
            int cnt = 0;
            for (auto& dir : dirs) {
                int xx = x + dir[0];
                int yy = y + dir[1];
                if (xx < 0 || xx >= m || yy < 0 || yy >= n) {
                    grid[x][y] = color;
                    continue;
                }
                if (grid[xx][yy] != val) {
                    grid[x][y] = color;
                    continue;
                }
                if (!visited[xx][yy]) {
                    visited[xx][yy] = 1;
                    q.push({xx, yy});
                }
            }
        }
        return grid;

=======

        int n = grid.size();
        int m = grid[0].size();
        int oldColor = grid[row][col];
        if (oldColor == color) return grid;
        dfs(grid, row, col, oldColor, color);
        return grid;
    }
    void dfs(vector<vector<int>>& grid, int row, int col, int oldColor, int newColor) {
        int n = grid.size();
        int m = grid[0].size();
        if (row < 0 || row >= n || col < 0 || col >= m) return;
        if (grid[row][col] != oldColor) return;
        grid[row][col] = -1;
        dfs(grid, row-1, col, oldColor, newColor);
        dfs(grid, row+1, col, oldColor, newColor);
        dfs(grid, row, col-1, oldColor, newColor);
        dfs(grid, row, col+1, oldColor, newColor);
        if (row > 0 && row < n-1 && col > 0 && col < m-1) {
            if (grid[row-1][col] == oldColor && grid[row+1][col] == oldColor && grid[row][col-1] == oldColor && grid[row][col+1] == oldColor) {
                grid[row][col] = oldColor;
            }
        }
        if (grid[row][col] == -1) {
            grid[row][col] = newColor;
        }

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> res = grid;
        if (m == 1 || n == 1) return res;
        
        int target = grid[row][col];
        if (color == target) return res;
        
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        dfs(grid, res, visited, row, col, color, target);
        return res;
    }
    
    void dfs(vector<vector<int>>& grid, vector<vector<int>>& res, vector<vector<bool>>& visited, int row, int col, int color, int target) {
        int m = grid.size();
        int n = grid[0].size();
        if (row < 0 || row >= m || col < 0 || col >= n) return;
        if (grid[row][col] != target) return;
        if (visited[row][col]) return;
        visited[row][col] = true;
        
        if (row == 0 || col == 0 || row == m - 1 || col == n - 1) {
            res[row][col] = color;
        } else {
            if (grid[row - 1][col] != target || grid[row + 1][col] != target || grid[row][col - 1] != target || grid[row][col + 1] != target) {
                res[row][col] = color;
            }
        }
        
        dfs(grid, res, visited, row - 1, col, color, target);
        dfs(grid, res, visited, row + 1, col, color, target);
        dfs(grid, res, visited, row, col - 1, color, target);
        dfs(grid, res, visited, row, col + 1, color, target);
