Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = grid.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == grid[j][i]) {
                    count++;
                }
            }
        }
        return count;

=======

        int n = grid.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (grid[i][k] != grid[k][j]) {
                        goto NEXT;
                    }
                }
                ans++;
                NEXT: ;
            }
        }
        return ans;

=======

        int n = grid.size();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == grid[j][i]) {
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int count = 0;
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid.size(); j++) {
                for (int k = 0; k < grid.size(); k++) {
                    if (grid[i][j] == grid[k][j] && grid[i][j] == grid[i][k]) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                for (int k = 0; k < n; k++) {
                    for (int l = 0; l < m; l++) {
                        if (grid[i][j] == grid[k][l] && i != k && j != l) {
                            count++;
                        }
                    }
                }
            }
        }
        return count / 2;

=======

        int n = grid.size();
        int m = grid[0].size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == grid[j][i]) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = grid.size();
        int r[n], c[n];
        for (int i = 0; i < n; i++) {
            r[i] = 0;
            c[i] = 0;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                r[i] = r[i] * 10 + grid[i][j];
                c[j] = c[j] * 10 + grid[i][j];
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (r[i] == r[j]) count++;
                if (c[i] == c[j]) count++;
            }
        }
        return count;

=======

        int n = grid.size();
        int m = grid[0].size();
        int result = 0;
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == grid[j][i]) {
                    result++;
                }
            }
        }
        return result;
