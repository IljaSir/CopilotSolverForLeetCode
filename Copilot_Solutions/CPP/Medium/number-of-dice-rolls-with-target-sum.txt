Synthesizing 10/10 solutions

=======

        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int kk = 1; kk <= k; kk++) {
                    if (j < kk) continue;
                    dp[i][j] = (dp[i][j] + dp[i-1][j-kk]) % 1000000007;
                }
            }
        }
        return dp[n][target];

=======

        int dp[n + 1][target + 1];
        memset(dp, 0, sizeof(dp));
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int l = 1; l <= k; l++) {
                    if (j >= l)
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - l]) % 1000000007;
                }
            }
        }
        return dp[n][target];

=======

        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for (int i=1; i<=n; i++) {
            for (int j=1; j<=target; j++) {
                for (int l=1; l<=k; l++) {
                    if (j-l >= 0) {
                        dp[i][j] = (dp[i][j] + dp[i-1][j-l]) % 1000000007;
                    }
                }
            }
        }
        return dp[n][target];

=======

        int M = 1e9 + 7;
        vector<vector<int>> dp(n + 1, vector<int>(target + 1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int d = 1; d <= k; ++d) {
                    if (j < d) {
                        break;
                    }
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - d]) % M;
                }
            }
        }
        return dp[n][target];

=======

        const int MOD = 1e9 + 7;
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int p = 1; p <= k; ++p) {
                    if (j >= p) {
                        dp[i][j] = (dp[i][j] + dp[i-1][j-p]) % MOD;
                    }
                }
            }
        }
        return dp[n][target];

=======

        const int MOD = 1e9+7;
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int l = 1; l <= k; ++l) {
                    if (j - l >= 0) {
                        dp[i][j] = (dp[i][j] + dp[i-1][j-l]) % MOD;
                    }
                }
            }
        }
        return dp[n][target];

=======

        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        for(int i = 1; i <= min(k, target); i++) {
            dp[1][i] = 1;
        }
        for(int i = 2; i <= n; i++) {
            for(int j = 1; j <= target; j++) {
                for(int l = 1; l <= k; l++) {
                    if(j-l >= 0) {
                        dp[i][j] += dp[i-1][j-l];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        return dp[n][target];

=======

        const int M = 1e9 + 7;
        vector<vector<long>> dp(n+1, vector<long>(target+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int d = 1; d <= k; ++d) {
                    if (j - d >= 0) {
                        dp[i][j] += dp[i-1][j-d];
                        dp[i][j] %= M;
                    }
                }
            }
        }
        return dp[n][target];

=======

        if (n * k < target) return 0;
        if (n > target) return 0;
        vector<vector<int>> dp(n+1, vector<int>(target+1, 0));
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= target; ++j) {
                for (int m = 1; m <= k; ++m) {
                    if (j - m >= 0) {
                        dp[i][j] += dp[i-1][j-m];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        return dp[n][target];

=======

        int mod = 1e9 + 7;
        int dp[31][1001] = {0};
        for (int i = 1; i <= k; ++i) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; ++i) {
            for (int j = i; j <= target; ++j) {
                for (int l = 1; l <= k; ++l) {
                    if (j - l < 0) break;
                    dp[i][j] = (dp[i][j] + dp[i-1][j-l]) % mod;
                }
            }
        }
        return dp[n][target];
