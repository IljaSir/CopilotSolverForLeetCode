Synthesizing 10/10 solutions

=======

        vector<long long> ans;
        long long sum = 0;
        for (long long i = 2; i <= finalSum; i += 2) {
            sum += i;
            ans.push_back(i);
            if (sum >= finalSum) {
                break;
            }
        }
        return ans;

=======

        vector<long long> res;
        long long sum = 0;
        long long i = 2;
        while(sum < finalSum){
            res.push_back(i);
            sum += i;
            i += 2;
        }
        if(sum > finalSum){
            res[res.size()-1] -= sum - finalSum;
        }
        return res;

=======

        vector<long long> result;
        int i = 1;
        while (finalSum > 0) {
            if (finalSum % 2 == 0) {
                result.push_back(i);
                finalSum -= i;
            }
            i++;
        }
        return result;

=======

        int n = finalSum / 2;
        vector<long long> ans(n);
        for (int i = 0; i < n; i++) {
            ans[i] = 2;
        }
        ans[n - 1] += finalSum % 2;
        return ans;

=======

        vector<long long> res;
        long long sum = 0;
        while (finalSum > 0) {
            if (finalSum % 2 == 0) {
                sum += finalSum;
                res.push_back(finalSum);
                finalSum = 0;
            } else {
                sum += finalSum - 1;
                res.push_back(finalSum - 1);
                finalSum = 1;
            }
        }
        return res;

=======

        vector<long long> result;
        long long sum = 0;
        for(long long i = 2; i <= finalSum; i += 2) {
            if(sum + i <= finalSum / 2) {
                result.push_back(i);
                sum += i;
            }
        }
        return result;

=======

        vector<long long> ans;
        long long sum = 0;
        int cnt = 0;
        while (finalSum > 0) {
            if (finalSum >= 2) {
                ans.push_back(2);
                finalSum -= 2;
                ++cnt;
            }
            else {
                ans.push_back(1);
                finalSum -= 1;
            }
        }
        return ans;

=======

        if (finalSum % 2 != 0) return {};
        vector<long long> res;
        long long n = finalSum / 2;
        while (n >= 2) {
            res.push_back(n);
            n /= 2;
        }
        return res;

=======

        vector<long long> res;
        long long n = 1;
        while (finalSum > 0) {
            if (finalSum <= n) {
                res.push_back(finalSum);
                break;
            }
            res.push_back(n);
            finalSum -= n;
            n <<= 1;
        }
        return res;

=======

        vector<long long> res;
        long long sum = 0;
        int i = 1;
        while(sum < finalSum) {
            sum += 2;
            res.push_back(2);
        }
        if(sum == finalSum) return res;
        int j = 0;
        while(sum > finalSum) {
            sum -= 2;
            res[j] = 1;
            j++;
        }
        return res;
