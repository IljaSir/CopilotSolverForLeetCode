Synthesizing 10/10 solutions

=======

        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); ++i) {
            pq.push(nums[i]);
        }
        for (int i = 0; i < k; ++i) {
            int x = pq.top();
            pq.pop();
            pq.push(x / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    long long maxKelements(vector<int>& nums, int k) {
        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); ++i) {
            pq.push(nums[i]);
        }
        for (int i = 0; i < k; ++i) {
            int x = pq.top();
            pq.pop();
            pq.push(x / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maxScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> leftSum(n + 1);
        vector<int> rightSum(n + 1);
        for (int i = 0; i < n; ++i) {
            leftSum[i + 1] = leftSum[i] + nums[i];
        }
        for (int i = n - 1; i >= 0; --i) {
            rightSum[i] = rightSum[i + 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i <= k; ++i) {
            if (i <= n && k - i <= n) {
                ans = max(ans, leftSum[i] + rightSum[k - i]);
            }
        }
        return ans;
    }
    int maxScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> leftSum(n + 1);
        vector<int> rightSum(n + 1);
        for (int i = 0; i < n; ++i) {
            leftSum[i + 1] = leftSum[i] + nums[i];
        }
        for (int i = n - 1; i >= 0;

=======

        priority_queue<int> pq;
        for (int num : nums) {
            pq.push(num);
        }
        for (int i = 0; i < k; i++) {
            int num = pq.top();
            pq.pop();
            pq.push(num / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maxScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> left(k + 1, 0);
        vector<int> right(k + 1, 0);
        for (int i = 1; i <= k; i++) {
            left[i] = left[i - 1] + nums[i - 1];
        }
        for (int i = 1; i <= k; i++) {
            right[i] = right[i - 1] + nums[n - i];
        }
        int ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = max(ans, left[i] + right[k - i] + maxKelements(nums, k - i));
        }
        return ans;

=======

        long long sum = 0;
        priority_queue<int, vector<int>, greater<int>> q;
        for (int i = 0; i < nums.size(); i++) {
            q.push(nums[i]);
        }
        while (k--) {
            int t = q.top();
            q.pop();
            sum += t;
            q.push((t + 2) / 3);
        }
        return sum;
    }
    long long minKelements(vector<int>& nums, int k) {
        long long sum = 0;
        priority_queue<int> q;
        for (int i = 0; i < nums.size(); i++) {
            q.push(nums[i]);
        }
        while (k--) {
            int t = q.top();
            q.pop();
            sum += t;
            q.push((t + 2) / 3);
        }
        return sum;
    }
    int maximumScore(int64_t a, int64_t b, int64_t c) {
        int64_t sum = a + b + c;
        int64_t maxK = sum / 3;
        int64_t minK = (sum + 2) / 3;
        vector<int> nums;
        nums.push_back(a);
        nums.push_back(b);
        nums.push_back(c);
        int64_t maxSum = maxKelements(nums, maxK);
        int64_t minSum = minKelements(nums, minK);
        return maxSum - minSum;
    }
    int maximumScore(vector<int>& nums, int k) {
        int64_t a = nums[k];
        int64_t b = nums[k];
        int64_t c = nums[k];
        for (int i = k - 1; i >= 0; i--) {
            b = min(b, (int64_t)nums[i]);
            a += b;
        }
        for (int i = k + 1; i < nums.size(); i++) {
            c = min(c, (int64_t)nums[i]);
            a += c;
        }
        return maximumScore(a, b, c);

=======

        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(nums[i]);
        }
        while (k--) {
            int t = pq.top();
            pq.pop();
            pq.push(t / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maxScore(vector<int>& nums, int k) {
        long long ans = 0;
        for (int i = 0; i <= k; i++) {
            ans = max(ans, maxKelements(nums, k - i) + accumulate(nums.begin(), nums.begin() + i, 0LL));
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int num : nums) {
            pq.push(num);
        }
        for (int i = 0; i < k; ++i) {
            int x = pq.top();
            pq.pop();
            pq.push(x / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maximumScore(int64_t a, int64_t b, int64_t c) {
        if (a < b) {
            swap(a, b);
        }
        if (b < c) {
            swap(b, c);
        }
        if (a < b) {
            swap(a, b);
        }
        if (a >= b + c) {
            return (int)(b + c);
        }
        return (int)(a + (b + c - a) / 2);
    }
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> left(n);
        vector<int> right(n);
        for (int i = 0; i < n; ++i) {
            left[i] = i;
            while (left[i] > 0 && nums[left[i] - 1] >= nums[i]) {
                left[i] = left[left[i] - 1];
            }
        }
        for (int i = n - 1; i >= 0; --i) {
            right[i] = i;
            while (right[i] < n - 1 && nums[right[i] + 1] >= nums[i]) {
                right[i] = right[right[i] + 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int l = left[i], r = right[i];
            if (l <= k && k <= r) {
                ans = max(ans, nums[i] * (r - l + 1));
            }
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int n : nums) {
            pq.push(n);
        }
        while (k--) {
            int top = pq.top();
            pq.pop();
            pq.push(top / 3);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> left(n, k);
        vector<int> right(n, k);
        for (int i = k - 1; i >= 0; i--) {
            if (nums[i] >= nums[left[i + 1]]) {
                left[i] = left[i + 1];
            }
        }
        for (int i = k + 1; i < n; i++) {
            if (nums[i] >= nums[right[i - 1]]) {
                right[i] = right[i - 1];
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            int l = left[i];
            int r = right[i];
            int k = i - l + 1 + r - i;
            ans = max(ans, maxKelements(nums, k));
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int n : nums) {
            pq.push(n);
        }
        while (k-- > 0) {
            int n = pq.top();
            pq.pop();
            pq.push(n / 3);
            if (n % 3 == 0) {
                pq.push(n / 3);
                pq.push(n / 3);
            }
            else if (n % 3 == 1) {
                pq.push(n / 3);
                pq.push(n / 3 + 1);
            }
            else {
                pq.push(n / 3 + 1);
                pq.push(n / 3 + 1);
            }
        }
        long long res = 0;
        while (!pq.empty()) {
            res += pq.top();
            pq.pop();
        }
        return res;
    }
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> left(n, -1), right(n, n);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                left[i] = s.top();
            }
            s.push(i);
        }
        while (!s.empty()) {
            s.pop();
        }
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && nums[s.top()] >= nums[i]) {
                s.pop();
            }
            if (!s.empty()) {
                right[i] = s.top();
            }
            s.push(i);
        }
        long long res = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] < k && k < right[i]) {
                int l = k - left[i], r = right[i] - k;
                res = max(res, maxKelements(nums, l) + maxKelements(nums, r) + nums[i]);
            }
        }
        return res;

=======

        priority_queue<int, vector<int>, greater<int> > pq;
        for (int i = 0; i < nums.size(); ++i) {
            pq.push(nums[i]);
        }
        long long ans = 0;
        while (k-- > 0) {
            int x = pq.top();
            pq.pop();
            ans += x;
            pq.push((x + 2) / 3);
        }
        return ans;
    }
    long long maxScore(vector<int>& nums, int k) {
        long long ans = 0;
        for (int i = 0; i < k; ++i) {
            ans += nums[i];
        }
        long long cur = ans;
        for (int i = 0; i < k; ++i) {
            cur = cur - nums[k - 1 - i] + nums[nums.size() - 1 - i];
            ans = max(ans, cur);
        }
        return ans + maxKelements(nums, k);

=======

        priority_queue<long long, vector<long long>, greater<long long>> pq;
        for (int num : nums) {
            pq.push(num);
        }
        while (k--) {
            int top = pq.top();
            pq.pop();
            pq.push((top + 1) / 2);
        }
        long long ans = 0;
        while (!pq.empty()) {
            ans += pq.top();
            pq.pop();
        }
        return ans;
    }
    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        int l = k, r = k;
        long long ans = nums[k];
        while (l > 0 || r < n - 1) {
            if (l == 0) {
                r++;
            } else if (r == n - 1) {
                l--;
            } else {
                if (nums[l - 1] < nums[r + 1]) {
                    r++;
                } else {
                    l--;
                }
            }
            ans = max(ans, (long long)nums[k] * (r - l + 1) + maxKelements(nums, k - l) + maxKelements(nums, r - k));
        }
        return ans;

=======

        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(nums[i]);
        }
        while (k-- > 0) {
            int val = pq.top(); pq.pop();
            pq.push(val/3);
        }
        long long sum = 0;
        while (!pq.empty()) {
            sum += pq.top(); pq.pop();
        }
        return sum;
    }
    long long maxScore(vector<int>& nums, int k) {
        long long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        long long res = sum;
        for (int i = k; i < nums.size(); i++) {
            sum += nums[i];
            sum -= nums[i-k];
            res = max(res, sum);
        }
        return res + maxKelements(nums, k);
