Synthesizing 10/10 solutions

=======

        int n = s.size();
        if (n < 2) {
            return s;
        }
        int maxLen = 1;
        int begin = 0;
        // dp[i][j] 表示 s[i..j] 是否是回文串
        vector<vector<int>> dp(n, vector<int>(n));
        // 初始化：所有长度为 1 的子串都是回文串
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        // 递推开始
        // 先枚举子串长度
        for (int L = 2; L <= n; L++) {
            // 枚举左边界，左边界的上限设置可以宽松一些
            for (int i = 0; i < n; i++) {
                // 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得
                int j = L + i - 1;
                // 如果右边界越界，就可以退出当前循环
                if (j >= n) {
                    break;
                }

                if (s[i] != s[j]) {
                    dp[i][j] = false;
                } else {
                    if (j - i < 3) {
                        dp[i][j] = true;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1];
                    }
                }

                // 只要 dp[i][L] == true 成立，就表示子串 s[i..L] 是回文，此时记录回文长度和起始位置
                if (dp[i][j] && j - i + 1 > maxLen) {
                    maxLen = j - i + 1;
                    begin = i;
                }
            }
        }
        return s.substr(begin, maxLen);

=======

        int n = s.size();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        int start = 0, end = 0;
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
            for (int j = 0; j < i; j++) {
                if (s[i] == s[j] && (i - j <= 2 || dp[j + 1][i - 1])) {
                    dp[j][i] = true;
                    if (i - j > end - start) {
                        start = j;
                        end = i;
                    }
                }
            }
        }
        return s.substr(start, end - start + 1);

=======

        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int maxLen = 1;
        int start = 0;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
            if (i < n - 1) {
                if (s[i] == s[i + 1]) {
                    dp[i][i + 1] = 1;
                    maxLen = 2;
                    start = i;
                }
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1] == 1) {
                    dp[i][j] = 1;
                    maxLen = len;
                    start = i;
                }
            }
        }
        return s.substr(start, maxLen);

=======

        int n = s.length();
        vector<vector<bool>> dp(n, vector<bool>(n, false));
        string ans = "";
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                dp[i][j] = (s[i] == s[j]) && ((j - i < 3) || dp[i + 1][j - 1]);
                if (dp[i][j] && ans.length() < j - i + 1) {
                    ans = s.substr(i, j - i + 1);
                }
            }
        }
        return ans;

=======

        int n = s.length();
        if (n <= 1) return s;
        int maxLen = 1, start = 0;
        for (int i = 0; i < n;) {
            if (n - i <= maxLen / 2) break;
            int left = i, right = i;
            while (right < n - 1 && s[right] == s[right + 1]) right++;
            i = right + 1;
            while (right < n - 1 && left > 0 && s[right + 1] == s[left - 1]) {
                right++;
                left--;
            }
            int newLen = right - left + 1;
            if (newLen > maxLen) {
                maxLen = newLen;
                start = left;
            }
        }
        return s.substr(start, maxLen);

=======

        int n = s.size();
        if (n <= 1) return s;
        vector<vector<bool>> dp(n, vector<bool>(n));
        int start = 0, maxLen = 1;
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
            if (i < n - 1 && s[i] == s[i + 1]) {
                dp[i][i + 1] = true;
                start = i;
                maxLen = 2;
            }
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s[i] == s[j] && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                    start = i;
                    maxLen = len;
                }
            }
        }
        return s.substr(start, maxLen);

=======

        int n = s.length();
        int dp[n][n];
        int maxlen = 1;
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        int start = 0;
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                start = i;
                maxlen = 2;
            }
        }
        for (int k = 3; k <= n; k++) {
            for (int i = 0; i < n - k + 1; i++) {
                int j = i + k - 1;
                if (dp[i + 1][j - 1] && s[i] == s[j]) {
                    dp[i][j] = 1;
                    if (k > maxlen) {
                        start = i;
                        maxlen = k;
                    }
                }
            }
        }
        return s.substr(start, maxlen);

=======

        int n = s.size();
        if (n == 0) return "";
        int start = 0;
        int maxlen = 1;
        for (int i = 0; i < n; ) {
            if (n - i <= maxlen / 2) break;
            int j = i, k = i;
            while (k < n - 1 && s[k] == s[k + 1]) ++k; // Skip duplicate characters.
            i = k + 1;
            while (k < n - 1 && j > 0 && s[k + 1] == s[j - 1]) {++k; --j;} // Expand.
            int newlen = k - j + 1;
            if (newlen > maxlen) {start = j; maxlen = newlen;}
        }
        return s.substr(start, maxlen);

=======

        int maxLen = 0;
        int start = 0;
        int end = 0;
        for(int i = 0; i < s.length(); i++) {
            int len1 = expandFromMiddle(s, i, i);
            int len2 = expandFromMiddle(s, i, i + 1);
            int len = max(len1, len2);
            if(len > maxLen) {
                maxLen = len;
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substr(start, end - start + 1);
    }
    int expandFromMiddle(string s, int left, int right) {
        if(s.empty() || left > right) return 0;
        while(left >= 0 && right < s.length() && s[left] == s[right]) {
            left--;
            right++;
        }
        return right - left - 1;

=======

        int n = s.length();
        string ans = "";
        int start = 0, len = 0;
        for (int i = 0; i < n; i++) {
            int l = i, r = i;
            while (l >= 0 && r < n && s[l] == s[r]) {
                l--;
                r++;
            }
            if (r - l - 1 > len) {
                start = l + 1;
                len = r - l - 1;
            }
            l = i;
            r = i + 1;
            while (l >= 0 && r < n && s[l] == s[r]) {
                l--;
                r++;
            }
            if (r - l - 1 > len) {
                start = l + 1;
                len = r - l - 1;
            }
        }
        return s.substr(start, len);
