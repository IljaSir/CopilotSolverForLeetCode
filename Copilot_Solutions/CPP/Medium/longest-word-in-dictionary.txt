Synthesizing 10/10 solutions

=======

        sort(words.begin(), words.end());
        unordered_set<string> s;
        string res;
        for (string word : words) {
            if (word.size() == 1 || s.count(word.substr(0, word.size() - 1))) {
                res = word.size() > res.size() ? word : res;
                s.insert(word);
            }
        }
        return res;

=======

        sort(words.begin(), words.end());
        unordered_set<string> s;
        string res;
        for (string word : words) {
            if (word.length() == 1 || s.count(word.substr(0, word.length() - 1))) {
                res = word.length() > res.length() ? word : res;
                s.insert(word);
            }
        }
        return res;

=======

        sort(words.begin(), words.end());
        unordered_set<string> s;
        string res;
        for (auto w : words) {
            if (w.size() == 1 || s.count(w.substr(0, w.size() - 1))) {
                res = w.size() > res.size() ? w : res;
                s.insert(w);
            }
        }
        return res;

=======

        sort(words.begin(), words.end());
        unordered_set<string> st;
        string res;
        for (string w: words) {
            if (w.size() == 1 || st.count(w.substr(0, w.size() - 1))) {
                res = w.size() > res.size() ? w : res;
                st.insert(w);
            }
        }
        return res;

=======

        string res;
        unordered_set<string> s;
        sort(words.begin(), words.end());
        for (auto w : words) {
            if (w.size() == 1 || s.count(w.substr(0, w.size() - 1))) {
                res = w.size() > res.size() ? w : res;
                s.insert(w);
            }
        }
        return res;

=======

        sort(words.begin(), words.end());
        unordered_set<string> s;
        string res = "";
        for (auto w: words) {
            if (w.size() == 1 || s.count(w.substr(0, w.size()-1))) {
                res = w.size() > res.size() ? w : res;
                s.insert(w);
            }
        }
        return res;

=======

        sort(words.begin(), words.end());
        unordered_set<string> s;
        string ans = "";
        for (auto w: words) {
            if (w.size() == 1 || s.count(w.substr(0, w.size() - 1))) {
                ans = w.size() > ans.size() ? w : ans;
                s.insert(w);
            }
        }
        return ans;

=======

        unordered_set<string> dict(words.begin(), words.end());
        string res;
        for (string word: words) {
            if (word.size() > res.size() || (word.size() == res.size() && word < res)) {
                string prefix;
                for (int i = 0; i < word.size(); ++i) {
                    prefix += word[i];
                    if (!dict.count(prefix)) {
                        break;
                    }
                    if (i == word.size() - 1) {
                        res = word;
                    }
                }
            }
        }
        return res;

=======

        unordered_set<string> dict(words.begin(), words.end());
        sort(words.begin(), words.end(), [](string& a, string& b) {
            if (a.size() == b.size()) {
                return a < b;
            }
            return a.size() > b.size();
        });
        for (string& word : words) {
            bool ok = true;
            for (int i = 1; i < word.size(); i++) {
                if (dict.find(word.substr(0, i)) == dict.end()) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                return word;
            }
        }
        return "";

=======

        sort(words.begin(), words.end());
        unordered_set<string> us;
        string ans = "";
        for (auto& w: words) {
            if (w.size() == 1 || us.count(w.substr(0, w.size() - 1))) {
                ans = w.size() > ans.size() ? w : ans;
                us.insert(w);
            }
        }
        return ans;
