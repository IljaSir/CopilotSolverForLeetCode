Synthesizing 10/10 solutions

=======

        int i = 0, j = 0;
        while (i < groups.size() && j < nums.size()) {
            if (groups[i][0] != nums[j]) {
                j++;
                continue;
            }
            int k = 0;
            while (k < groups[i].size() && j < nums.size() && groups[i][k] == nums[j]) {
                k++;
                j++;
            }
            if (k == groups[i].size()) {
                i++;
            }
        }
        return i == groups.size();

=======

        int i = 0;
        for (auto &group : groups) {
            auto it = search(nums.begin() + i, nums.end(), group.begin(), group.end());
            if (it == nums.end()) return false;
            i = distance(nums.begin(), it) + group.size();
        }
        return true;

=======

        int i = 0;
        int j = 0;
        while (i < groups.size() && j < nums.size()) {
            if (nums[j] == groups[i][0]) {
                int k = 0;
                while (k < groups[i].size() && j < nums.size() && nums[j] == groups[i][k]) {
                    k++;
                    j++;
                }
                if (k == groups[i].size()) {
                    i++;
                } else {
                    j = j - k + 1;
                }
            } else {
                j++;
            }
        }
        return i == groups.size();

=======

        int n = groups.size();
        int m = nums.size();
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            int k = 0;
            while (k < groups[i].size() && j < m && nums[j] == groups[i][k]) {
                j++;
                k++;
            }
            if (k == groups[i].size()) {
                i++;
            } else {
                j = j - k + 1;
            }
        }
        return i == n;

=======

        int i = 0;
        for (auto& group : groups) {
            int j = 0;
            while (i < nums.size() && j < group.size()) {
                if (nums[i] == group[j]) {
                    ++i;
                    ++j;
                }
                else {
                    i = i - j + 1;
                    j = 0;
                }
            }
            if (j != group.size()) {
                return false;
            }
        }
        return true;

=======

        int i = 0;
        for (auto &group : groups) {
            bool found = false;
            for (; i <= nums.size() - group.size(); ++i) {
                if (nums[i] == group[0]) {
                    found = true;
                    for (int j = 1; j < group.size(); ++j) {
                        if (nums[i + j] != group[j]) {
                            found = false;
                            break;
                        }
                    }
                }
                if (found) {
                    i += group.size();
                    break;
                }
            }
            if (!found) return false;
        }
        return true;

=======

        int i = 0, j = 0, k;
        while (i < groups.size()) {
            while (j < nums.size()) {
                k = 0;
                while (k < groups[i].size() && j + k < nums.size() && nums[j + k] == groups[i][k]) ++k;
                if (k == groups[i].size()) break;
                ++j;
            }
            if (j == nums.size()) break;
            ++i;
            j += groups[i - 1].size();
        }
        return i == groups.size();

=======

        int n = groups.size();
        int m = nums.size();
        int i = 0;
        int j = 0;
        int k = 0;
        while(i < n && j < m) {
            if (nums[j] == groups[i][k]) {
                k++;
                if (k == groups[i].size()) {
                    i++;
                    k = 0;
                }
                j++;
            } else {
                j = j - k + 1;
                k = 0;
            }
        }
        return i == n;

=======

        int i = 0;
        while(i < groups.size()){
            bool flag = false;
            for(int j = 0; j < nums.size(); j++){
                if(nums[j] == groups[i][0]){
                    int k = 0;
                    while(k < groups[i].size() && j + k < nums.size() && nums[j + k] == groups[i][k]){
                        k++;
                    }
                    if(k == groups[i].size()){
                        i++;
                        flag = true;
                        break;
                    }
                }
            }
            if(!flag){
                return false;
            }
        }
        return true;

=======

        int i=0;
        for(auto g:groups){
            int j=0;
            while(i<nums.size() && j<g.size()){
                if(nums[i]==g[j]){
                    i++;
                    j++;
                }else{
                    i++;
                }
            }
            if(j<g.size()) return false;
        }
        return true;
