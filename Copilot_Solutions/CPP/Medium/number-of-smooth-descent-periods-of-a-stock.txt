Synthesizing 10/10 solutions

=======

        long long count = 0;
        for (int i = 1; i < prices.size(); ++i) {
            if (prices[i] < prices[i-1]) {
                count += prices[i-1] - prices[i];
            }
        }
        return count;

=======

        int n = prices.size();
        long long dp[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (prices[i] == prices[i - 1] + 1) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = 1;
            }
        }
        long long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dp[i];
        }
        return ans;

=======

        long long ans = 0;
        int n = prices.size();
        int i = 0;
        while (i < n) {
            int j = i + 1;
            while (j < n && prices[j] == prices[j - 1] + 1) {
                ++j;
            }
            ans += (j - i) * (j - i - 1) / 2;
            i = j;
        }
        return ans;

=======

        long long count = 0;
        for (int i = 1; i < prices.size(); i++) {
            if (prices[i] == prices[i - 1] + 1) {
                count++;
            } else if (prices[i] < prices[i - 1]) {
                count += prices[i - 1] - prices[i] + 1;
            }
        }
        return count;

=======

        long long ans = 0;
        int n = prices.size();
        for (int i = 1; i < n; i++) {
            int diff = prices[i] - prices[i - 1];
            if (diff == 1) {
                ans += i;
            }
        }
        return ans;

=======

        long long res = 0;
        int n = prices.size();
        for (int i = 1; i < n; i++) {
            int j = i;
            while (j < n && prices[j] - prices[j - 1] == 1) {
                j++;
            }
            if (j > i) {
                res += (j - i + 1) * (j - i) / 2;
                i = j - 1;
            }
        }
        return res;
    }
    int numberOfSmoothDescentPeriods(vector<int>& prices) {
        int n = prices.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && prices[j] - prices[j - 1] == 1) {
                j++;
            }
            if (j > i) {
                res += (j - i + 1) * (j - i) / 2;
                i = j - 1;
            }
        }
        return res;

=======

        long long n = prices.size();
        long long ans = 0;
        for (int i = 1; i < n; ++i) {
            int diff = prices[i] - prices[i-1];
            if (diff == 1) {
                ans += i;
            } else if (diff > 1) {
                ans += (i*(i+1))/2;
            }
        }
        return ans;

=======

        long long total = 0;
        int n = prices.size();
        int count = 0;
        for (int i = 1; i < n; ++i) {
            if (prices[i] == prices[i - 1] - 1) {
                count++;
            } else {
                total += (count + 1) * count / 2;
                count = 0;
            }
        }
        total += (count + 1) * count / 2;
        return total;
    }
    int numberOfSmoothDescentPeriods(vector<int>& prices) {
        int n = prices.size();
        int count = 0;
        for (int i = 1; i < n; ++i) {
            if (prices[i] == prices[i - 1] - 1) {
                count++;
            } else {
                count = 0;
            }
        }
        return count;
    }
    int numberOfSmoothDescentPeriods1(vector<int>& prices) {
        int n = prices.size();
        int count = 0;
        int total = 0;
        for (int i = 1; i < n; ++i) {
            if (prices[i] == prices[i - 1] - 1) {
                count++;
            } else {
                total += count;
                count = 0;
            }
        }
        total += count;
        return total;

=======

        long long n = prices.size();
        long long ans = 0;
        for(long long i = 0; i < n; i++) {
            long long j = i;
            while(j < n - 1 && prices[j] - prices[j + 1] == 1) {
                j++;
            }
            ans += (j - i + 1) * (j - i) / 2;
            i = j;
        }
        return ans;

=======

        long long n = prices.size();
        long long ans = 0;
        long long i = 0;
        while(i < n) {
            long long j = i + 1;
            long long count = 0;
            while(j < n and prices[j] == prices[j - 1] - 1) {
                count++;
                j++;
            }
            ans += (count * (count + 1)) / 2;
            i = j;
        }
        return ans;
    }
    int numberOfSmoothDescentPeriods(vector<int>& prices) {
        long long n = prices.size();
        long long ans = 0;
        long long i = 0;
        while(i < n) {
            long long j = i + 1;
            long long count = 0;
            while(j < n and prices[j] == prices[j - 1] - 1) {
                count++;
                j++;
            }
            ans += getDescentPeriods(prices) - ((count * (count + 1)) / 2);
            i = j;
        }
        return ans;
