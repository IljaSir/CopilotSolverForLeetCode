Synthesizing 10/10 solutions

=======

        int left = 1, right = 1e6;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int sum = 0;
            for (int num : nums) {
                sum += (num + mid - 1) / mid;
            }
            if (sum > threshold) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int l = 1, r = 1e6;
        while (l < r) {
            int m = l + (r - l) / 2;
            int sum = 0;
            for (int n : nums) {
                sum += (n + m - 1) / m;
            }
            if (sum > threshold) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;

=======

        int l = 1, r = 1e6;
        while (l < r) {
            int m = l + (r - l) / 2;
            int sum = 0;
            for (int n : nums) sum += (n + m - 1) / m;
            if (sum > threshold) l = m + 1;
            else r = m;
        }
        return l;

=======

        int l = 1, r = 1e6;
        while (l < r) {
            int m = l + (r - l) / 2;
            int sum = 0;
            for (int n : nums) {
                sum += (n + m - 1) / m;
            }
            if (sum <= threshold) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;

=======

        int l = 1, r = 1000000;
        while (l < r) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int n : nums) sum += (n + m - 1) / m;
            if (sum > threshold) l = m + 1;
            else r = m;
        }
        return l;

=======

        int l = 1, r = 1000000;
        while (l < r) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int n : nums) {
                sum += (n + m - 1) / m;
            }
            if (sum > threshold) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;

=======

        int l = 1, r = 1000000;
        while (l < r) {
            int m = (l + r) / 2;
            int sum = 0;
            for (int x : nums) {
                sum += (x + m - 1) / m;
            }
            if (sum > threshold) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;

=======

        int l = 1, r = 1000000;
        while (l < r) {
            int mid = (l + r) >> 1;
            int sum = 0;
            for (int i = 0; i < nums.size(); i++) {
                sum += (nums[i] + mid - 1) / mid;
            }
            if (sum > threshold) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        int l = 1, r = 1e6;
        while (l < r) {
            int mid = (l + r) >> 1;
            int sum = 0;
            for (auto num : nums) {
                sum += (num + mid - 1) / mid;
            }
            if (sum > threshold) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        const int MIN = 1;
        const int MAX = 1000000;
        int left = MIN;
        int right = MAX;
        while (left < right) {
            int mid = (left + right) / 2;
            int sum = 0;
            for (int num : nums) {
                sum += (num + mid - 1) / mid;
            }
            if (sum <= threshold) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
