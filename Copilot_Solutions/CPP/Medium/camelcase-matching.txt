Synthesizing 10/10 solutions

=======

        vector<bool> res;
        for (int i = 0; i < queries.size(); ++i) {
            int j = 0;
            for (int k = 0; k < queries[i].size(); ++k) {
                if (j < pattern.size() && pattern[j] == queries[i][k]) {
                    ++j;
                } else if (queries[i][k] >= 'A' && queries[i][k] <= 'Z') {
                    j = -1;
                    break;
                }
            }
            res.push_back(j == pattern.size());
        }
        return res;

=======

        vector<bool> res;
        for (auto &q: queries) {
            int i = 0;
            for (auto &c: q) {
                if (i < pattern.size() && c == pattern[i]) {
                    i++;
                } else if (c >= 'A' && c <= 'Z') {
                    res.push_back(false);
                    goto next;
                }
            }
            res.push_back(i == pattern.size());
        next:;
        }
        return res;

=======

        vector<bool> res;
        for (auto& s: queries) {
            int i = 0;
            for (auto& c: s) {
                if (i < pattern.size() && c == pattern[i]) {
                    i++;
                } else if (isupper(c)) {
                    i = -1;
                    break;
                }
            }
            res.push_back(i == pattern.size());
        }
        return res;

=======

        vector<bool> res;
        for (auto& query : queries) {
            res.push_back(match(query, pattern));
        }
        return res;

=======

        vector<bool> res;
        for (auto &s : queries) {
            int i = 0;
            for (auto c : s) {
                if (i < pattern.size() && c == pattern[i]) {
                    i++;
                } else if (isupper(c)) {
                    i = -1;
                    break;
                }
            }
            res.push_back(i == pattern.size());
        }
        return res;

=======

        vector<bool> result;
        for (auto& query: queries) {
            int i = 0;
            for (auto& c: query) {
                if (i < pattern.size() && c == pattern[i]) {
                    i++;
                } else if (isupper(c)) {
                    i = -1;
                    break;
                }
            }
            result.push_back(i == pattern.size());
        }
        return result;

=======

        vector<bool> res;
        for (auto& query : queries) {
            int i = 0;
            int j = 0;
            for (; i < query.size() && j < pattern.size(); ++i) {
                if (query[i] == pattern[j]) {
                    ++j;
                } else if (query[i] >= 'A' && query[i] <= 'Z') {
                    break;
                }
            }
            if (j == pattern.size()) {
                for (; i < query.size(); ++i) {
                    if (query[i] >= 'A' && query[i] <= 'Z') {
                        break;
                    }
                }
            }
            res.push_back(i == query.size());
        }
        return res;

=======

        vector<bool> ans;
        for (auto &q: queries) {
            int i = 0, j = 0;
            for (; i < q.length() && j < pattern.length(); ++i) {
                if (q[i] == pattern[j]) {
                    ++j;
                } else if (q[i] >= 'A' && q[i] <= 'Z') {
                    break;
                }
            }
            if (j == pattern.length()) {
                for (; i < q.length(); ++i) {
                    if (q[i] >= 'A' && q[i] <= 'Z') {
                        break;
                    }
                }
                ans.push_back(i == q.length());
            } else {
                ans.push_back(false);
            }
        }
        return ans;

=======

        vector<bool> result;
        for (auto &s : queries) {
            result.push_back(match(s, pattern));
        }
        return result;
    }
    bool match(string &s, string &p) {
        int i = 0;
        for (auto &c : s) {
            if (i < p.size() && c == p[i]) {
                ++i;
            } else if (c >= 'A' && c <= 'Z') {
                return false;
            }
        }
        return i == p.size();

=======

        vector<bool> result;
        for (auto& query : queries) {
            int j = 0;
            bool match = true;
            for (auto& ch : query) {
                if (j < pattern.size() && ch == pattern[j]) {
                    j++;
                } else if (isupper(ch)) {
                    match = false;
                    break;
                }
            }
            result.push_back(match && j == pattern.size());
        }
        return result;
