Synthesizing 10/10 solutions

=======

        long long res = 0;
        for (int i = 0; i < word.size(); i++) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                res += word.size() - i;
            }
        }
        return res;

=======

        int n = word.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                ans += n - i;
            }
        }
        return ans;

=======

        long long n = word.size();
        long long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                ans += (i + 1) * (n - i);
            }
        }
        return ans;

=======

        long long sum = 0;
        int count = 0;
        for (int i = 0; i < word.size(); i++) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                count++;
            }
        }
        for (int i = 0; i < word.size(); i++) {
            sum += count;
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                count--;
            }
        }
        return sum;

=======

        long long ans = 0;
        int n = word.size();
        for(int i = 0; i < n; i++) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                ans += (i + 1) * (n - i);
            }
        }
        return ans;

=======

        int n = word.size();
        long long ans = 0;
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (isVowel(word[i])) {
                cnt++;
            }
            ans += cnt;
        }
        return ans;

=======

        long long ans = 0;
        int n = word.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                count++;
            }
        }
        for (int i = 0; i < n; i++) {
            ans += count;
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                count--;
            }
        }
        return ans;

=======

        long long vowelCount = 0;
        int n = word.length();
        for (int i = 0; i < n; i++) {
            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                vowelCount += (n - i) * (i + 1);
            }
        }
        return vowelCount;

=======

        long long ans = 0;
        int n = word.length();
        for(int i = 0; i < n; i++) {
            ans += (n - i) * (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u');
        }
        return ans;

=======

        int n = word.length();
        vector<int> dp(n, 0);
        int sum = 0;
        for(int i = 0; i < n; i++) {
            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {
                dp[i] = i + 1;
                sum += dp[i];
            }
        }
        return sum;
