Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return x;
        }
        if (n == -1) {
            return 1 / x;
        }
        double half = myPow(x, n / 2);
        return half * half * myPow(x, n % 2);

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1 / x;
        double half = myPow(x, n / 2);
        double rest = myPow(x, n % 2);
        return half * half * rest;

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1 / x;
        double t = myPow(x, n / 2);
        return t * t * myPow(x, n % 2);

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 1 / myPow(x, -n);
        }
        if (n % 2 == 0) {
            return myPow(x * x, n / 2);
        }
        return x * myPow(x, n - 1);

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 1 / myPow(x, -n);
        }
        if (n % 2 == 0) {
            return myPow(x * x, n / 2);
        } else {
            return x * myPow(x * x, n / 2);
        }

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n == -1) return 1/x;
        double y = myPow(x, n/2);
        if (n % 2 == 0) return y * y;
        else return y * y * x;

=======

        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 1 / myPow(x, -n);
        }
        if (n % 2 == 1) {
            return myPow(x, n - 1) * x;
        }
        return myPow(x * x, n / 2);

=======

        if (n == 0) return 1;
        if (n == 1) return x;
        if (n < 0) {
            if (n == INT_MIN) {
                return 1 / (myPow(x, INT_MAX) * x);
            } else {
                return 1 / myPow(x, -n);
            }
        }
        double half = myPow(x, n / 2);
        if (n % 2 == 0) return half * half;
        else return half * half * x;

=======

        double ans = 1;
        long nn = n;
        if (n < 0) {
            nn = -nn;
            x = 1 / x;
        }
        while (nn) {
            if (nn & 1) ans *= x;
            x *= x;
            nn >>= 1;
        }
        return ans;
