Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> res(n, 0);
        for (int i = 1; i < n; i++) {
            res[0] += nums[i] - nums[0];
        }
        for (int i = 1; i < n; i++) {
            res[i] = res[i - 1] + (nums[i] - nums[i - 1]) * i - (nums[i] - nums[i - 1]) * (n - i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> prefix(n);
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            int left = i * nums[i] - (i > 0 ? prefix[i - 1] : 0);
            int right = (prefix[n - 1] - prefix[i]) - (n - i - 1) * nums[i];
            ans[i] = left + right;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n+1, 0);
        for (int i = 0; i < n; i++) {
            sum[i+1] = sum[i] + nums[i];
        }
        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            ans[i] = (nums[i] * i - sum[i]) + (sum[n] - sum[i+1] - nums[i]*(n-i-1));
        }
        return ans;

=======

        int n = nums.size();
        vector<int> prefix(n + 1);
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            int left = nums[i] * i - prefix[i];
            int right = prefix[n] - prefix[i + 1] - nums[i] * (n - i - 1);
            ans[i] = left + right;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            ans[0] += nums[i] - nums[0];
            sum += nums[i];
        }
        for (int i = 1; i < n; ++i) {
            ans[i] = ans[i - 1] + (nums[i] - nums[i - 1]) * i - (sum - nums[i] * n);
        }
        return ans;

=======

        int n = nums.size();
        vector<int> res(n, 0);
        int sum = 0;
        for (int i = 1; i < n; i++) {
            sum += (i - 1) * (nums[i] - nums[i - 1]);
        }
        res[0] = sum;
        for (int i = 1; i < n; i++) {
            sum += (nums[i] - nums[i - 1]) * (i - (n - i));
            res[i] = sum;
        }
        return res;

=======

        int size = nums.size();
        vector<int> result(size);
        for (int i = 0; i < size; i++) {
            result[i] = i * nums[i] - accumulate(nums.begin(), nums.begin() + i, 0);
            result[i] += accumulate(nums.begin() + i + 1, nums.end(), 0) - (size - i - 1) * nums[i];
        }
        return result;

=======

        int n = nums.size();
        vector<int> res;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int left = 0;
        for (int i = 0; i < n; i++) {
            res.push_back((nums[i] * i - left) + (sum - left - nums[i] * (n - i - 1)));
            left += nums[i];
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n);
        int sum = 0;
        for(int i = 0; i < n; i++) {
            sum += (nums[i] - nums[0]);
        }
        ans[0] = sum;
        for(int i = 1; i < n; i++) {
            int diff = nums[i] - nums[i-1];
            sum = sum + (diff * (i-2*i+1)) + diff;
            ans[i] = sum;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> res(n, 0);
        int sum = 0;
        for(int i = 1; i < n; i++) sum += (i * (nums[i] - nums[i - 1]));
        res[0] = sum;
        for(int i = 1; i < n; i++) {
            sum += (nums[i - 1] - nums[i]) * (n - i) + (nums[i] - nums[i - 1]) * i;
            res[i] = sum;
        }
        return res;
