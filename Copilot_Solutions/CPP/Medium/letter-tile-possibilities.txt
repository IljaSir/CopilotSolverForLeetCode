Synthesizing 10/10 solutions

=======

        vector<int> count(26, 0);
        for (char c : tiles) {
            count[c - 'A']++;
        }
        return dfs(count);
    }
    int dfs(vector<int>& count) {
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) continue;
            sum++;
            count[i]--;
            sum += dfs(count);
            count[i]++;
        }
        return sum;

=======

        int n = tiles.length();
        vector<int> count(26, 0);
        for (int i = 0; i < n; i++) {
            count[tiles[i] - 'A']++;
        }
        return dfs(count);
    }
    
    int dfs(vector<int> &count) {
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] == 0) {
                continue;
            }
            res++;
            count[i]--;
            res += dfs(count);
            count[i]++;
        }
        return res;

=======

        vector<int> counter(26);
        for (char c : tiles) {
            counter[c - 'A']++;
        }
        return dfs(counter);
    }
    
    int dfs(vector<int>& counter) {
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            if (counter[i] == 0) continue;
            sum++;
            counter[i]--;
            sum += dfs(counter);
            counter[i]++;
        }
        return sum;

=======

        vector<int> cnt(26, 0);
        for (char c : tiles) {
            ++cnt[c - 'A'];
        }
        return dfs(cnt);
    }
    int dfs(vector<int>& cnt) {
        int ans = 0;
        for (int i = 0; i < 26; ++i) {
            if (cnt[i] == 0) {
                continue;
            }
            ++ans;
            --cnt[i];
            ans += dfs(cnt);
            ++cnt[i];
        }
        return ans;

=======

        unordered_map<char, int> count;
        for (char c : tiles) {
            count[c]++;
        }
        return dfs(count);
    }
    
    int dfs(unordered_map<char, int> count) {
        int res = 0;
        for (auto& [c, n] : count) {
            if (n == 0) {
                continue;
            }
            res++;
            count[c]--;
            res += dfs(count);
            count[c]++;
        }
        return res;

=======

        int n = tiles.size();
        vector<int> count(26);
        for (char c : tiles) {
            count[c - 'A']++;
        }
        return dfs(count);
    }
    int dfs(vector<int> &count) {
        int ans = 0;
        for (int i = 0; i < 26; ++i) {
            if (count[i] == 0) {
                continue;
            }
            ans++;
            count[i]--;
            ans += dfs(count);
            count[i]++;
        }
        return ans;

=======

        int n = tiles.size();
        int ans = 0;
        vector<int> cnt(26, 0);
        for (char c : tiles) {
            cnt[c - 'A']++;
        }
        function<void(int)> dfs = [&](int i) {
            if (i == 26) return;
            for (int j = 1; j <= cnt[i]; j++) {
                ans++;
                cnt[i] -= j;
                dfs(i + 1);
                cnt[i] += j;
            }
            dfs(i + 1);
        };
        dfs(0);
        return ans;

=======

        int n = tiles.size();
        int ans = 0;
        vector<int> cnt(26, 0);
        for (auto c : tiles) {
            cnt[c - 'A']++;
        }
        function<void(int)> dfs = [&](int k) {
            if (k == 0) return;
            for (int i = 0; i < 26; i++) {
                if (cnt[i] > 0) {
                    cnt[i]--;
                    ans++;
                    dfs(k - 1);
                    cnt[i]++;
                }
            }
        };
        for (int i = 1; i <= n; i++) {
            dfs(i);
        }
        return ans;

=======

        vector<int> chars(26, 0);
        for (auto c : tiles) {
            chars[c-'A']++;
        }
        return dfs(chars);
    }
    
    int dfs(vector<int> &chars) {
        int ret = 0;
        for (int i = 0; i < 26; i++) {
            if (chars[i] > 0) {
                ret++;
                chars[i]--;
                ret += dfs(chars);
                chars[i]++;
            }
        }
        return ret;

=======

        int ans = 0;
        int n = tiles.size();
        sort(tiles.begin(), tiles.end());
        vector<bool> used(n, false);
        function<void(int)> dfs = [&](int i) {
            if (i == n) return;
            for (int j = 0; j < n; ++j) {
                if (used[j]) continue;
                if (j > 0 && tiles[j] == tiles[j-1] && !used[j-1]) continue;
                used[j] = true;
                ans++;
                dfs(i+1);
                used[j] = false;
            }
        };
        dfs(0);
        return ans;
