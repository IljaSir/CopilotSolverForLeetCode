Synthesizing 9/10 solutions

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = upper_bound(nums.begin(), nums.end(), 2 * nums[i]) - nums.begin();
            ans = max(ans, j - i);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j + 1 < n && nums[j + 1] <= nums[i] * 2) {
                j++;
            }
            ans = max(ans, j - i + 1);
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size(), i = 0, j = n - 1, res = 0;
        while (i < j) {
            if (nums[i] * 2 <= nums[j]) {
                ++res;
                ++i;
            }
            --j;
        }
        return res;

=======

        int n = nums.size();
        int res = 0;
        int j = 0;
        for (int i = 0; i < n; ++i) {
            while (j < n && 2 * nums[i] > nums[j]) ++j;
            res += j - i - 1;
        }
        return res;

=======

        sort(nums.begin(), nums.end());
        int ans = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(nums[i] <= 2 * nums[ans]) {
                ans++;
            } else {
                ans = i + 1;
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int i = 0;
        int j = 0;
        int n = nums.size();
        int ans = 0;
        while (j < n) {
            if (nums[j] >= 2 * nums[i]) {
                ans++;
                i++;
            }
            j++;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; i++) {
            int idx = lower_bound(nums.begin(), nums.end(), 2 * nums[i]) - nums.begin();
            cnt[i] = idx;
        }
        int ans = 0;
        int maxIdx = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (cnt[i] > maxIdx) {
                maxIdx = cnt[i];
                ans++;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> cnt(n);
        for (int i = 0; i < n; ++i) {
            int t = upper_bound(nums.begin(), nums.end(), nums[i] * 2) - nums.begin();
            cnt[t - 1]++;
        }
        int ans = 0;
        for (int i = n - 1; i >= 0; --i) {
            ans += cnt[i];
            cnt[i] = ans;
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (cnt[i] > i + 1) {
                res = max(res, i + 1);
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> cnt(n, 0);
        for (int i = 0; i < n; ++i) {
            int x = nums[i];
            int k = lower_bound(nums.begin(), nums.end(), 2 * x) - nums.begin();
            cnt[k - 1]++;
        }
        for (int i = n - 2; i >= 0; --i) {
            cnt[i] += cnt[i + 1];
        }
        int res = 0;
        for (int i = 0; i < n; ++i) {
            res = max(res, min(cnt[i], i + 1));
        }
        return res;
