Synthesizing 2/10 solutions

=======

        vector<int> ans;
        vector<int> candles;
        for (int i = 0; i < s.size(); i++) {
            if (s[i] == '|')
                candles.push_back(i);
        }
        for (int i = 0; i < queries.size(); i++) {
            int left = queries[i][0], right = queries[i][1];
            int cnt = 0;
            for (int j = 0; j < candles.size(); j++) {
                if (candles[j] >= left && candles[j] <= right)
                    cnt++;
            }
            ans.push_back(cnt - 1);
        }
        return ans;

=======

        vector<int> res;
        int n = s.length();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (s[i] == '*') {
                cnt++;
            }
            left[i] = cnt;
        }
        cnt = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] == '*') {
                cnt++;
            }
            right[i] = cnt;
        }
        for (auto& q : queries) {
            int l = q[0];
            int r = q[1];
            res.push_back(left[r] - left[l] - (s[l] == '*' ? 1 : 0));
        }
        return res;
