Synthesizing 10/10 solutions

=======

        vector<int> cnt1(26), cnt2(26);
        for (char c: word1) cnt1[c - 'a']++;
        for (char c: word2) cnt2[c - 'a']++;
        for (int i = 0; i < 26; ++i) {
            if ((cnt1[i] == 0) != (cnt2[i] == 0)) return false;
        }
        sort(cnt1.begin(), cnt1.end());
        sort(cnt2.begin(), cnt2.end());
        return cnt1 == cnt2;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        vector<int> cnt1(26, 0);
        vector<int> cnt2(26, 0);
        for (int i = 0; i < word1.length(); i++) {
            cnt1[word1[i] - 'a']++;
            cnt2[word2[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if ((cnt1[i] && cnt2[i] == 0) || (cnt1[i] == 0 && cnt2[i])) {
                return false;
            }
        }
        sort(cnt1.begin(), cnt1.end());
        sort(cnt2.begin(), cnt2.end());
        return cnt1 == cnt2;

=======

        int n = word1.length();
        int m = word2.length();
        if (n != m) return false;
        vector<int> cnt1(26, 0);
        vector<int> cnt2(26, 0);
        for (int i = 0; i < n; i++) {
            cnt1[word1[i] - 'a']++;
            cnt2[word2[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if ((cnt1[i] > 0 && cnt2[i] == 0) || (cnt1[i] == 0 && cnt2[i] > 0)) return false;
        }
        sort(cnt1.begin(), cnt1.end());
        sort(cnt2.begin(), cnt2.end());
        for (int i = 0; i < 26; i++) {
            if (cnt1[i] != cnt2[i]) return false;
        }
        return true;

=======

        if (word1.size() != word2.size()) return false;
        int m1[26] = {0};
        int m2[26] = {0};
        for (char c : word1) m1[c - 'a']++;
        for (char c : word2) m2[c - 'a']++;
        for (int i = 0; i < 26; i++) {
            if (m1[i] == 0 && m2[i] != 0) return false;
            if (m1[i] != 0 && m2[i] == 0) return false;
        }
        sort(m1, m1 + 26);
        sort(m2, m2 + 26);
        for (int i = 0; i < 26; i++) {
            if (m1[i] != m2[i]) return false;
        }
        return true;

=======

        if(word1.size() != word2.size())
            return false;
        int count1[26] = {0};
        int count2[26] = {0};
        for(int i = 0; i < word1.size(); i++) {
            count1[word1[i] - 'a']++;
            count2[word2[i] - 'a']++;
        }
        for(int i = 0; i < 26; i++) {
            if((count1[i] > 0 && count2[i] == 0) || (count1[i] == 0 && count2[i] > 0))
                return false;
        }
        sort(count1, count1 + 26);
        sort(count2, count2 + 26);
        for(int i = 0; i < 26; i++) {
            if(count1[i] != count2[i])
                return false;
        }
        return true;

=======

        if (word1.length() != word2.length()) return false;
        vector<int> cnt1(26, 0);
        vector<int> cnt2(26, 0);
        for (char c : word1) {
            cnt1[c - 'a']++;
        }
        for (char c : word2) {
            cnt2[c - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (cnt1[i] == 0 && cnt2[i] > 0 || cnt1[i] > 0 && cnt2[i] == 0) {
                return false;
            }
        }
        sort(cnt1.begin(), cnt1.end());
        sort(cnt2.begin(), cnt2.end());
        return cnt1 == cnt2;

=======

        if (word1.length() != word2.length()) return false;
        int cnt1[26] = {0}, cnt2[26] = {0};
        for (auto c : word1) cnt1[c - 'a']++;
        for (auto c : word2) cnt2[c - 'a']++;
        for (int i = 0; i < 26; i++) {
            if ((!cnt1[i] && cnt2[i]) || (cnt1[i] && !cnt2[i])) return false;
        }
        sort(cnt1, cnt1 + 26);
        sort(cnt2, cnt2 + 26);
        for (int i = 0; i < 26; i++) {
            if (cnt1[i] != cnt2[i]) return false;
        }
        return true;

=======

        if (word1.length() != word2.length()) return false;
        vector<int> c1(26, 0);
        vector<int> c2(26, 0);
        for (char c: word1) c1[c - 'a']++;
        for (char c: word2) c2[c - 'a']++;
        for (int i = 0; i < 26; i++) {
            if ((c1[i] == 0) ^ (c2[i] == 0)) return false;
        }
        sort(c1.begin(), c1.end());
        sort(c2.begin(), c2.end());
        return c1 == c2;

=======

        if (word1.size() != word2.size()) return false;
        int arr1[26] = {0};
        int arr2[26] = {0};
        for (auto c : word1) arr1[c - 'a']++;
        for (auto c : word2) arr2[c - 'a']++;
        for (int i = 0; i < 26; i++) {
            if ((arr1[i] == 0) ^ (arr2[i] == 0)) return false;
        }
        sort(arr1, arr1 + 26);
        sort(arr2, arr2 + 26);
        for (int i = 0; i < 26; i++) {
            if (arr1[i] != arr2[i]) return false;
        }
        return true;

=======

        int len1 = word1.length();
        int len2 = word2.length();
        if (len1 != len2) return false;
        int charMap1[26] = {0};
        int charMap2[26] = {0};
        for (int i = 0; i < len1; i++) {
            charMap1[word1[i] - 'a']++;
            charMap2[word2[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (charMap1[i] == 0 && charMap2[i] != 0) return false;
            if (charMap1[i] != 0 && charMap2[i] == 0) return false;
        }
        sort(charMap1, charMap1 + 26);
        sort(charMap2, charMap2 + 26);
        for (int i = 0; i < 26; i++) {
            if (charMap1[i] != charMap2[i]) return false;
        }
        return true;
