Synthesizing 10/10 solutions (Duplicates hidden)

=======

        vector<int> dp(5, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 3; j >= 0; --j) {
                dp[j] += dp[j + 1];
            }
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        int dp[5] = {1, 1, 1, 1, 1};
        for (int i = 1; i < n; ++i) {
            for (int j = 1; j < 5; ++j) {
                dp[j] += dp[j - 1];
            }
        }
        return dp[4];

=======

        int dp[5] = {1, 1, 1, 1, 1};
        for (int i = 2; i <= n; ++i) {
            for (int j = 3; j >= 0; --j) {
                dp[j] += dp[j + 1];
            }
        }
        return accumulate(dp, dp + 5, 0);

=======

        int a = 1, e = 1, i = 1, o = 1, u = 1;
        for (int k = 1; k < n; k++) {
            a = a + e + i + o + u;
            e = e + i + o + u;
            i = i + o + u;
            o = o + u;
        }
        return a + e + i + o + u;

=======

        int a=1,e=1,i=1,o=1,u=1;
        for(int j=2;j<=n;j++){
            a=a+e+i+o+u;
            e=e+i+o+u;
            i=i+o+u;
            o=o+u;
        }
        return a+e+i+o+u;

=======

        vector<vector<int>> dp(n+1, vector<int>(5, 0));
        for(int i = 1; i <= n; ++i){
            for(int j = 0; j < 5; ++j){
                if(i == 1){
                    dp[i][j] = 1;
                }else{
                    for(int k = j; k < 5; ++k){
                        dp[i][j] += dp[i-1][k];
                    }
                }
            }
        }
        int res = 0;
        for(int i = 0; i < 5; ++i){
            res += dp[n][i];
        }
        return res;

=======

        int dp[6] = {1, 1, 1, 1, 1, 0};
        for(int i = 1; i <= n; i++)
            for(int j = 4; j >= 0; j--)
                dp[j] += dp[j + 1];
        return dp[0];

=======

        const int N = 5;
        vector<int> dp(N, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = N - 2; j >= 0; --j) {
                dp[j] += dp[j + 1];
            }
        }
        return accumulate(dp.begin(), dp.end(), 0);

=======

        int dp[6][n+1];
        for(int i=0;i<6;i++) {
            dp[i][0] = 0;
            dp[i][1] = i;
        }
        for(int i=0;i<=n;i++) {
            dp[0][i] = 0;
        }
        for(int i=1;i<=n;i++) {
            for(int j=1;j<6;j++) {
                dp[j][i] = dp[j][i-1] + dp[j-1][i];
            }
        }
        return dp[5][n];
