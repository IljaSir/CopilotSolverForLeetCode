Synthesizing 10/10 solutions

=======

        vector<int> cnt(26, 0);
        for (string &w : words2) {
            vector<int> cnt2(26, 0);
            for (char c : w) {
                cnt2[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                cnt[i] = max(cnt[i], cnt2[i]);
            }
        }
        vector<string> res;
        for (string &w : words1) {
            vector<int> cnt2(26, 0);
            for (char c : w) {
                cnt2[c - 'a']++;
            }
            bool ok = true;
            for (int i = 0; i < 26; i++) {
                if (cnt[i] > cnt2[i]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res.push_back(w);
            }
        }
        return res;

=======

        vector<int> maxFreq(26, 0);
        for (string &word : words2) {
            vector<int> freq = count(word);
            for (int i = 0; i < 26; i++) {
                maxFreq[i] = max(maxFreq[i], freq[i]);
            }
        }
        vector<string> res;
        for (string &word : words1) {
            vector<int> freq = count(word);
            bool flag = true;
            for (int i = 0; i < 26; i++) {
                if (freq[i] < maxFreq[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                res.push_back(word);
            }
        }
        return res;
    }
    
    vector<int> count(string &word) {
        vector<int> freq(26, 0);
        for (char ch : word) {
            freq[ch - 'a']++;
        }
        return freq;

=======

        vector<string> res;
        vector<int> count(26, 0);
        for (string word : words2) {
            vector<int> tmp(26, 0);
            for (char c : word) tmp[c - 'a']++;
            for (int i = 0; i < 26; i++) {
                count[i] = max(count[i], tmp[i]);
            }
        }
        for (string word : words1) {
            vector<int> tmp(26, 0);
            for (char c : word) tmp[c - 'a']++;
            bool ok = true;
            for (int i = 0; i < 26; i++) {
                if (tmp[i] < count[i]) {
                    ok = false;
                    break;
                }
            }
            if (ok) res.push_back(word);
        }
        return res;

=======

        vector<int> freq(26, 0);
        for (auto& w : words2) {
            vector<int> f(26, 0);
            for (auto& c : w) {
                f[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                freq[i] = max(freq[i], f[i]);
            }
        }
        vector<string> res;
        for (auto& w : words1) {
            vector<int> f(26, 0);
            for (auto& c : w) {
                f[c - 'a']++;
            }
            bool ok = true;
            for (int i = 0; i < 26; i++) {
                if (freq[i] > f[i]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res.push_back(w);
            }
        }
        return res;

=======

        vector<string> result;
        vector<int> count(26, 0);
        for (auto& word : words2) {
            vector<int> tmp(26, 0);
            for (auto& c : word) {
                tmp[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                count[i] = max(count[i], tmp[i]);
            }
        }
        for (auto& word : words1) {
            vector<int> tmp(26, 0);
            for (auto& c : word) {
                tmp[c - 'a']++;
            }
            bool flag = true;
            for (int i = 0; i < 26; i++) {
                if (tmp[i] < count[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) result.push_back(word);
        }
        return result;

=======

        vector<int> maxLetters(26);
        for (string word : words2) {
            vector<int> letters(26);
            for (char c : word) {
                letters[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                maxLetters[i] = max(maxLetters[i], letters[i]);
            }
        }
        
        vector<string> ans;
        for (string word : words1) {
            vector<int> letters(26);
            for (char c : word) {
                letters[c - 'a']++;
            }
            bool isUniversal = true;
            for (int i = 0; i < 26; i++) {
                if (letters[i] < maxLetters[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                ans.push_back(word);
            }
        }
        return ans;

=======

        vector<string> result;
        vector<int> maxCount(26, 0);
        for (auto w : words2) {
            vector<int> count = countLetters(w);
            for (int i = 0; i < 26; ++i) {
                maxCount[i] = max(maxCount[i], count[i]);
            }
        }
        for (auto w : words1) {
            vector<int> count = countLetters(w);
            bool isUniversal = true;
            for (int i = 0; i < 26; ++i) {
                if (count[i] < maxCount[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                result.push_back(w);
            }
        }
        return result;
    }
    
    vector<int> countLetters(string word) {
        vector<int> count(26, 0);
        for (auto c : word) {
            count[c - 'a']++;
        }
        return count;

=======

        vector<string> res;
        vector<int> maxCount(26,0);
        for(auto word:words2){
            vector<int> count(26,0);
            for(auto ch:word){
                count[ch-'a']++;
            }
            for(int i=0;i<26;i++){
                maxCount[i]=max(maxCount[i],count[i]);
            }
        }
        for(auto word:words1){
            vector<int> count(26,0);
            for(auto ch:word){
                count[ch-'a']++;
            }
            bool flag=true;
            for(int i=0;i<26;i++){
                if(count[i]<maxCount[i]){
                    flag=false;
                    break;
                }
            }
            if(flag)
                res.push_back(word);
        }
        return res;

=======

        vector<string> result;
        vector<int> cnts(26, 0);
        for (string& word : words2) {
            vector<int> cnts2(26, 0);
            for (char c : word) {
                cnts2[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                cnts[i] = max(cnts[i], cnts2[i]);
            }
        }
        for (string& word : words1) {
            vector<int> cnts2(26, 0);
            for (char c : word) {
                cnts2[c - 'a']++;
            }
            bool isUniversal = true;
            for (int i = 0; i < 26; i++) {
                if (cnts2[i] < cnts[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> res;
        vector<int> count(26, 0);
        for (string word : words2) {
            vector<int> tmp(26, 0);
            for (char c : word) tmp[c - 'a']++;
            for (int i = 0; i < 26; i++) {
                count[i] = max(count[i], tmp[i]);
            }
        }
        for (string word : words1) {
            vector<int> tmp(26, 0);
            for (char c : word) tmp[c - 'a']++;
            bool ok = true;
            for (int i = 0; i < 26; i++) {
                if (tmp[i] < count[i]) {
                    ok = false;
                    break;
                }
            }
            if (ok) res.push_back(word);
        }
        return res;

=======

        vector<int> freq(26, 0);
        for (auto& w : words2) {
            vector<int> f(26, 0);
            for (auto& c : w) {
                f[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                freq[i] = max(freq[i], f[i]);
            }
        }
        vector<string> res;
        for (auto& w : words1) {
            vector<int> f(26, 0);
            for (auto& c : w) {
                f[c - 'a']++;
            }
            bool ok = true;
            for (int i = 0; i < 26; i++) {
                if (freq[i] > f[i]) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res.push_back(w);
            }
        }
        return res;

=======

        vector<string> result;
        vector<int> count(26, 0);
        for (auto& word : words2) {
            vector<int> tmp(26, 0);
            for (auto& c : word) {
                tmp[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                count[i] = max(count[i], tmp[i]);
            }
        }
        for (auto& word : words1) {
            vector<int> tmp(26, 0);
            for (auto& c : word) {
                tmp[c - 'a']++;
            }
            bool flag = true;
            for (int i = 0; i < 26; i++) {
                if (tmp[i] < count[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) result.push_back(word);
        }
        return result;

=======

        vector<int> maxLetters(26);
        for (string word : words2) {
            vector<int> letters(26);
            for (char c : word) {
                letters[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                maxLetters[i] = max(maxLetters[i], letters[i]);
            }
        }
        
        vector<string> ans;
        for (string word : words1) {
            vector<int> letters(26);
            for (char c : word) {
                letters[c - 'a']++;
            }
            bool isUniversal = true;
            for (int i = 0; i < 26; i++) {
                if (letters[i] < maxLetters[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                ans.push_back(word);
            }
        }
        return ans;

=======

        vector<string> result;
        vector<int> maxCount(26, 0);
        for (auto w : words2) {
            vector<int> count = countLetters(w);
            for (int i = 0; i < 26; ++i) {
                maxCount[i] = max(maxCount[i], count[i]);
            }
        }
        for (auto w : words1) {
            vector<int> count = countLetters(w);
            bool isUniversal = true;
            for (int i = 0; i < 26; ++i) {
                if (count[i] < maxCount[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                result.push_back(w);
            }
        }
        return result;
    }
    
    vector<int> countLetters(string word) {
        vector<int> count(26, 0);
        for (auto c : word) {
            count[c - 'a']++;
        }
        return count;

=======

        vector<string> result;
        vector<int> cnts(26, 0);
        for (string& word : words2) {
            vector<int> cnts2(26, 0);
            for (char c : word) {
                cnts2[c - 'a']++;
            }
            for (int i = 0; i < 26; i++) {
                cnts[i] = max(cnts[i], cnts2[i]);
            }
        }
        for (string& word : words1) {
            vector<int> cnts2(26, 0);
            for (char c : word) {
                cnts2[c - 'a']++;
            }
            bool isUniversal = true;
            for (int i = 0; i < 26; i++) {
                if (cnts2[i] < cnts[i]) {
                    isUniversal = false;
                    break;
                }
            }
            if (isUniversal) {
                result.push_back(word);
            }
        }
        return result;

=======

        vector<string> out;
        int freq[26] = {0};
        for (string word: words2) {
            int f[26] = {0};
            for (char c: word) {
                f[c-'a']++;
            }
            for (int i = 0; i < 26; ++i) {
                freq[i] = max(freq[i], f[i]);
            }
        }
        for (string word: words1) {
            int f[26] = {0};
            for (char c: word) {
                f[c-'a']++;
            }
            bool flag = true;
            for (int i = 0; i < 26; ++i) {
                if (f[i] < freq[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                out.push_back(word);
            }
        }
        return out;
