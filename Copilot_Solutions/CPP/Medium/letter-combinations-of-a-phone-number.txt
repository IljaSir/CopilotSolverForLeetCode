Synthesizing 10/10 solutions

=======

        vector<string> result;
        if (digits.empty()) return result;
        vector<string> dict = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        vector<int> index(digits.size(), 0);
        int i = 0;
        while (i >= 0) {
            if (i == digits.size()) {
                string temp;
                for (int j = 0; j < digits.size(); ++j) {
                    temp.push_back(dict[digits[j] - '2'][index[j]]);
                }
                result.push_back(temp);
                --i;
            }
            else if (index[i] < dict[digits[i] - '2'].size()) {
                ++i;
            }
            else {
                index[i] = 0;
                --i;
            }
        }
        return result;

=======

        if (digits.empty()) return {};
        vector<string> res;
        vector<string> dict = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        res.push_back("");
        for (int i = 0; i < digits.size(); i++) {
            vector<string> tmp;
            string str = dict[digits[i] - '2'];
            for (int j = 0; j < str.size(); j++) {
                for (int k = 0; k < res.size(); k++) {
                    tmp.push_back(res[k] + str[j]);
                }
            }
            res = tmp;
        }
        return res;

=======

        vector<string> res;
        if(digits.empty()) return res;
        unordered_map<char, string> mp;
        mp['2'] = "abc";
        mp['3'] = "def";
        mp['4'] = "ghi";
        mp['5'] = "jkl";
        mp['6'] = "mno";
        mp['7'] = "pqrs";
        mp['8'] = "tuv";
        mp['9'] = "wxyz";
        res.push_back("");
        for(int i = 0; i < digits.size(); ++i) {
            vector<string> tmp;
            for(int j = 0; j < mp[digits[i]].size(); ++j) {
                for(int k = 0; k < res.size(); ++k) {
                    tmp.push_back(res[k] + mp[digits[i]][j]);
                }
            }
            res = tmp;
        }
        return res;

=======

        vector<string> result;
        if (digits.size() == 0) return result;
        vector<string> dict = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        int n = digits.size();
        int i = 0;
        while (i < n && digits[i] == '1') i++;
        if (i == n) return result;
        string s;
        s.push_back(dict[digits[i] - '2'][0]);
        result.push_back(s);
        for (i = i + 1; i < n; i++) {
            if (digits[i] == '1') continue;
            vector<string> tmp;
            for (int j = 0; j < dict[digits[i] - '2'].size(); j++) {
                for (int k = 0; k < result.size(); k++) {
                    string s = result[k];
                    s.push_back(dict[digits[i] - '2'][j]);
                    tmp.push_back(s);
                }
            }
            result = tmp;
        }
        return result;

=======

        vector<string> result;
        if (digits.empty()) return result;
        vector<string> phone = {"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        result.push_back("");
        for (char d : digits) {
            int x = d - '2';
            if (x < 0 || x > 7) continue;
            vector<string> temp;
            for (char c : phone[x]) {
                for (string s : result) {
                    temp.push_back(s + c);
                }
            }
            result = temp;
        }
        return result;

=======

        vector<string> ans;
        if (digits.size() == 0) return ans;
        unordered_map<char, string> mp = {
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };
        string s;
        dfs(ans, mp, digits, 0, s);
        return ans;
    }
    void dfs(vector<string>& ans, unordered_map<char, string>& mp, string& digits, int idx, string& s) {
        if (idx == digits.size()) {
            ans.push_back(s);
            return;
        }
        char c = digits[idx];
        for (char ch : mp[c]) {
            s.push_back(ch);
            dfs(ans, mp, digits, idx + 1, s);
            s.pop_back();
        }

=======

        vector<string> ret;
        if (digits.empty()) return ret;
        vector<vector<char>> dict = {
            {'a', 'b', 'c'},
            {'d', 'e', 'f'},
            {'g', 'h', 'i'},
            {'j', 'k', 'l'},
            {'m', 'n', 'o'},
            {'p', 'q', 'r', 's'},
            {'t', 'u', 'v'},
            {'w', 'x', 'y', 'z'}
        };
        ret.push_back("");
        for (auto d : digits) {
            vector<string> tmp;
            for (auto c : dict[d - '2']) {
                for (auto s : ret) {
                    tmp.push_back(s + c);
                }
            }
            ret.swap(tmp);
        }
        return ret;

=======

        if (digits.empty()) return {};
        vector<string> res;
        string s;
        dfs(digits, 0, s, res);
        return res;
    }
    
    void dfs(string digits, int i, string s, vector<string>& res) {
        if (i == digits.size()) {
            res.push_back(s);
            return;
        }
        for (char c : m[digits[i]]) {
            dfs(digits, i + 1, s + c, res);
        }

=======

        if (digits.empty()) return {};
        vector<string> result;
        string tmp;
        dfs(digits, 0, tmp, result);
        return result;
    }
    void dfs(string& digits, int index, string& tmp, vector<string>& result) {
        if (index == digits.size()) {
            result.push_back(tmp);
            return;
        }
        for (char c : m[digits[index] - '0']) {
            tmp.push_back(c);
            dfs(digits, index + 1, tmp, result);
            tmp.pop_back();
        }

=======

        vector<string> result;
        if(digits.size() == 0){
            return result;
        }
        int digit = digits[0] - '0';
        vector<string> next = letterCombinations(digits.substr(1));
        if(digit == 2){
            if(next.size() == 0){
                return {"a", "b", "c"};
            }
            for(int i = 0; i < next.size(); i++){
                result.push_back("a" + next[i]);
                result.push_back("b" + next[i]);
                result.push_back("c" + next[i]);
            }
        }else if(digit == 3){
            if(next.size() == 0){
                return {"d", "e", "f"};
            }
            for(int i = 0; i < next.size(); i++){
                result.push_back("d" + next[i]);
                result.push_back("e" + next[i]);
                result.push_back("f" + next[i]);
            }
        }else if(digit == 4){
            if(next.size() == 0){
                return {"g", "h", "i"};
            }
            for(int i = 0; i < next.size(); i++){
                result.push_back("g" + next[i]);
                result.push_back("h" + next[i]);
                result.push_back("i" + next[i]);
            }
        }else if(digit == 5){
            if(next.size() == 0){
                return {"j", "k", "l"};
            }
            for(int i = 0; i < next.size(); i++){
                result.push_back("j" + next[i]);
                result.push_back("k" + next[i]);
                result.push_back("l" + next[i]);
            }
        }else if(digit == 6){
            if(next.size() == 0){
                return {"m", "n", "o"};
            }
            for(int i = 0; i < next.size(); i++){
                result.push_back("m" + next[i]);
                result.push_back("n" + next[i]);
                result.push_back("o" + next[i]);
            }
        }else if(digit == 7){
            if(next.size() == 0){
                return {"p", "q", "r", "s"};
            }
            for(int i = 0; i
