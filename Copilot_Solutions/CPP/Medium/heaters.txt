Synthesizing 10/10 solutions

=======

        sort(heaters.begin(), heaters.end());
        int res = 0;
        for (int house : houses) {
            int i = lower_bound(heaters.begin(), heaters.end(), house) - heaters.begin();
            int dist1 = i - 1 >= 0 ? house - heaters[i - 1] : INT_MAX;
            int dist2 = i < heaters.size() ? heaters[i] - house : INT_MAX;
            res = max(res, min(dist1, dist2));
        }
        return res;

=======

        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        int i = 0, j = 0, res = 0;
        while (i < houses.size()) {
            while (j < heaters.size() - 1 && abs(heaters[j + 1] - houses[i]) <= abs(heaters[j] - houses[i])) {
                ++j;
            }
            res = max(res, abs(heaters[j] - houses[i]));
            ++i;
        }
        return res;

=======

        sort(heaters.begin(), heaters.end());
        int result = 0;
        for (int house : houses) {
            int left = 0, right = heaters.size() - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (heaters[mid] < house) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            int dist1 = abs(heaters[left] - house);
            int dist2 = INT_MAX;
            if (left + 1 < heaters.size()) {
                dist2 = abs(heaters[left + 1] - house);
            }
            result = max(result, min(dist1, dist2));
        }
        return result;

=======

        sort(heaters.begin(), heaters.end());
        int radius = 0;
        for (int house : houses) {
            auto it = lower_bound(heaters.begin(), heaters.end(), house);
            int dist1 = it == heaters.end() ? INT_MAX : *it - house;
            int dist2 = it == heaters.begin() ? INT_MAX : house - *(it - 1);
            radius = max(radius, min(dist1, dist2));
        }
        return radius;

=======

        sort(heaters.begin(), heaters.end());
        int n = heaters.size();
        int res = 0;
        for (auto house : houses) {
            int l = 0, r = n - 1;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (heaters[mid] < house) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            int dist1 = abs(heaters[l] - house);
            int dist2 = INT_MAX;
            if (l > 0) {
                dist2 = abs(heaters[l - 1] - house);
            }
            res = max(res, min(dist1, dist2));
        }
        return res;

=======

        int res = 0;
        int i = 0;
        sort(heaters.begin(), heaters.end());
        for (int house : houses) {
            while (i < heaters.size() - 1 && heaters[i] + heaters[i + 1] <= house * 2) {
                i++;
            }
            res = max(res, abs(heaters[i] - house));
        }
        return res;

=======

        sort(heaters.begin(), heaters.end());
        int max_radius = 0;
        for (int house : houses) {
            int left = 0;
            int right = heaters.size() - 1;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (heaters[mid] < house) {
                    left = mid + 1;
                }
                else {
                    right = mid;
                }
            }
            int radius = abs(heaters[left] - house);
            if (left > 0) {
                radius = min(radius, abs(heaters[left - 1] - house));
            }
            max_radius = max(max_radius, radius);
        }
        return max_radius;

=======

        sort(heaters.begin(), heaters.end());
        int max = 0;
        for (int i = 0; i < houses.size(); i++) {
            int left = 0;
            int right = heaters.size();
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (heaters[mid] < houses[i]) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
            int dist1 = (right == 0) ? INT_MAX : houses[i] - heaters[right - 1];
            int dist2 = (right == heaters.size()) ? INT_MAX : heaters[right] - houses[i];
            max = std::max(max, std::min(dist1, dist2));
        }
        return max;

=======

        // sort the houses and heaters
        sort(houses.begin(), houses.end());
        sort(heaters.begin(), heaters.end());
        int i = 0, j = 0, n = houses.size(), m = heaters.size(), res = 0;
        while (i < n) {
            // find the heater that is closest to the current house
            while (j < m - 1 && abs(heaters[j] - houses[i]) >= abs(heaters[j + 1] - houses[i])) ++j;
            res = max(res, abs(heaters[j] - houses[i]));
            ++i;
        }
        return res;

=======

        std::sort(heaters.begin(), heaters.end());
        int max = 0;
        for (auto house : houses) {
            int min = INT_MAX;
            for (auto heater : heaters) {
                int distance = abs(house - heater);
                if (distance < min) {
                    min = distance;
                }
            }
            if (min > max) {
                max = min;
            }
        }
        return max;
