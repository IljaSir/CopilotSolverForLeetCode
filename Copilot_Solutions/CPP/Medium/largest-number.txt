Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end(), [](const int& a, const int& b) {
            return to_string(a) + to_string(b) > to_string(b) + to_string(a);
        });
        string res;
        for (int i = 0; i < nums.size(); ++i) {
            res += to_string(nums[i]);
        }
        if (res[0] == '0') {
            return "0";
        }
        return res;

=======

        sort(nums.begin(), nums.end(), [](int a, int b) {
            string sa = to_string(a);
            string sb = to_string(b);
            return sa + sb > sb + sa;
        });
        string ans;
        for (int i = 0; i < nums.size(); i++) {
            ans += to_string(nums[i]);
        }
        if (ans[0] == '0') {
            return "0";
        }
        return ans;

=======

        sort(nums.begin(), nums.end(), [](int a, int b) {
            return to_string(a) + to_string(b) > to_string(b) + to_string(a);
        });
        string res;
        for (int i = 0; i < nums.size(); i++) {
            res += to_string(nums[i]);
        }
        if (res[0] == '0') return "0";
        return res;

=======

        vector<string> nums_str;
        for (int i = 0; i < nums.size(); i++) {
            nums_str.push_back(to_string(nums[i]));
        }
        sort(nums_str.begin(), nums_str.end(), [](const string &a, const string &b) {
            return a + b > b + a;
        });
        string res;
        for (string &s: nums_str) {
            res += s;
        }
        if (res[0] == '0') {
            return "0";
        } else {
            return res;
        }

=======

        std::sort(nums.begin(), nums.end(), [](int a, int b) {
            string s1 = std::to_string(a);
            string s2 = std::to_string(b);
            return s1 + s2 > s2 + s1;
        });
        if (nums[0] == 0) return "0";
        string res;
        for (int num : nums) {
            res += std::to_string(num);
        }
        return res;

=======

        sort(nums.begin(), nums.end(), [](int a, int b) {
            return to_string(a) + to_string(b) > to_string(b) + to_string(a);
        });
        string ans;
        for (auto i : nums) ans += to_string(i);
        if (ans[0] == '0') return "0";
        return ans;

=======

        vector<string> str;
        for (int i = 0; i < nums.size(); i++) {
            str.push_back(to_string(nums[i]));
        }
        sort(str.begin(), str.end(), [](string &a, string &b) {
            return a + b > b + a;
        });
        if (str[0] == "0") return "0";
        string res;
        for (int i = 0; i < str.size(); i++) {
            res += str[i];
        }
        return res;

=======

        vector<string> numStrs;
        for (int num : nums) {
            numStrs.push_back(to_string(num));
        }
        sort(numStrs.begin(), numStrs.end(), [](const string& s1, const string& s2) {
            return s1 + s2 > s2 + s1;
        });
        string res;
        for (string& numStr : numStrs) {
            res += numStr;
        }
        while (res.size() > 1 && res[0] == '0') {
            res.erase(0, 1);
        }
        return res;

=======

        vector<string> str;
        for (auto i : nums) {
            str.push_back(to_string(i));
        }
        sort(str.begin(), str.end(), [](const string& a, const string& b) {
            return a + b > b + a;
        });
        string res;
        for (auto i : str) {
            res += i;
        }
        while (res.size() > 1 && res[0] == '0') {
            res.erase(res.begin());
        }
        return res;

=======

        sort(nums.begin(), nums.end(), [](int a, int b){
            auto sa = to_string(a), sb = to_string(b);
            return sa + sb > sb + sa;
        });
        string s;
        for (auto n : nums) s += to_string(n);
        while (s.size() > 1 && s[0] == '0') s.erase(s.begin());
        return s;
