Synthesizing 9/10 solutions (Duplicates hidden)

=======

        vector<int> res;
        for (int i = 0; i < expression.size(); i++) {
            if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {
                vector<int> left = diffWaysToCompute(expression.substr(0, i));
                vector<int> right = diffWaysToCompute(expression.substr(i + 1));
                for (int l : left) {
                    for (int r : right) {
                        if (expression[i] == '+') {
                            res.push_back(l + r);
                        } else if (expression[i] == '-') {
                            res.push_back(l - r);
                        } else if (expression[i] == '*') {
                            res.push_back(l * r);
                        }
                    }
                }
            }
        }
        if (res.empty()) {
            res.push_back(stoi(expression));
        }
        return res;

=======

        vector<int> res;
        for (int i = 0; i < expression.size(); i++) {
            if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {
                vector<int> left = diffWaysToCompute(expression.substr(0, i));
                vector<int> right = diffWaysToCompute(expression.substr(i + 1));
                for (int j = 0; j < left.size(); j++) {
                    for (int k = 0; k < right.size(); k++) {
                        if (expression[i] == '+') {
                            res.push_back(left[j] + right[k]);
                        } else if (expression[i] == '-') {
                            res.push_back(left[j] - right[k]);
                        } else {
                            res.push_back(left[j] * right[k]);
                        }
                    }
                }
            }
        }
        if (res.empty()) {
            res.push_back(stoi(expression));
        }
        return res;

=======

        vector<int> result;
        for (int i = 0; i < expression.length(); i++) {
            char c = expression[i];
            if (c == '+' || c == '-' || c == '*') {
                vector<int> left = diffWaysToCompute(expression.substr(0, i));
                vector<int> right = diffWaysToCompute(expression.substr(i + 1, expression.length() - i - 1));
                for (int l : left) {
                    for (int r : right) {
                        if (c == '+') result.push_back(l + r);
                        else if (c == '-') result.push_back(l - r);
                        else if (c == '*') result.push_back(l * r);
                    }
                }
            }
        }
        if (result.empty()) result.push_back(stoi(expression));
        return result;

=======

        vector<int> res;
        int n = expression.size();
        for (int i = 0; i < n; i++) {
            char c = expression[i];
            if (c == '+' || c == '-' || c == '*') {
                vector<int> left = diffWaysToCompute(expression.substr(0, i));
                vector<int> right = diffWaysToCompute(expression.substr(i + 1));
                for (int l : left) {
                    for (int r : right) {
                        if (c == '+') {
                            res.push_back(l + r);
                        } else if (c == '-') {
                            res.push_back(l - r);
                        } else if (c == '*') {
                            res.push_back(l * r);
                        }
                    }
                }
            }
        }
        if (res.empty()) {
            res.push_back(stoi(expression));
        }
        return res;

=======

        vector<int> res;
        int len = expression.size();
        for (int i = 0; i < len; i++) {
            if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {
                vector<int> left = diffWaysToCompute(expression.substr(0, i));
                vector<int> right = diffWaysToCompute(expression.substr(i + 1));
                for (int l : left) {
                    for (int r : right) {
                        if (expression[i] == '+') res.push_back(l + r);
                        else if (expression[i] == '-') res.push_back(l - r);
                        else res.push_back(l * r);
                    }
                }
            }
        }
        if (res.empty()) res.push_back(stoi(expression));
        return res;

=======

        vector<int> res;
        int len = expression.length();
        for (int i = 0; i < len; i++) {
            char c = expression[i];
            if (c == '+' || c == '-' || c == '*') {
                vector<int> res1 = diffWaysToCompute(expression.substr(0, i));
                vector<int> res2 = diffWaysToCompute(expression.substr(i + 1));
                for (int j = 0; j < res1.size(); j++) {
                    for (int k = 0; k < res2.size(); k++) {
                        if (c == '+') {
                            res.push_back(res1[j] + res2[k]);
                        } else if (c == '-') {
                            res.push_back(res1[j] - res2[k]);
                        } else {
                            res.push_back(res1[j] * res2[k]);
                        }
                    }
                }
            }
        }
        if (res.empty()) {
            res.push_back(atoi(expression.c_str()));
        }
        return res;

=======

        int n = expression.size();
        vector<int> nums;
        vector<char> ops;
        string num;
        for (int i = 0; i < n; i++) {
            if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {
                nums.push_back(stoi(num));
                ops.push_back(expression[i]);
                num = "";
            } else {
                num += expression[i];
            }
        }
        nums.push_back(stoi(num));
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>()));
        for (int i = 0; i < n; i += 2) {
            dp[i][i].push_back(nums[i / 2]);
        }
        for (int l = 2; l <= n; l += 2) {
            for (int i = 0; i + l - 1 < n; i += 2) {
                int j = i + l - 1;
                for (int k = i; k < j; k += 2) {
                    for (int a : dp[i][k]) {
                        for (int b : dp[k + 2][j]) {
                            if (ops[k / 2] == '+') {
                                dp[i][j].push_back(a + b);
                            } else if (ops[k / 2] == '-') {
                                dp[i][j].push_back(a - b);
                            } else {
                                dp[i][j].push_back(a * b);
                            }
                        }
                    }
                }
            }
        }
        return dp[0][n - 1];
