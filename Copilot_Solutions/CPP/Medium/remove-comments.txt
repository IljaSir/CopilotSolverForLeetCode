Synthesizing 10/10 solutions

=======

        vector<string> res;
        bool inBlock = false;
        string out;
        for (string line : source) {
            for (int i = 0; i < line.size(); ++i) {
                if (!inBlock && i + 1 < line.size() && line[i] == '/' && line[i + 1] == '*') {
                    inBlock = true;
                    ++i;
                } else if (inBlock && i + 1 < line.size() && line[i] == '*' && line[i + 1] == '/') {
                    inBlock = false;
                    ++i;
                } else if (!inBlock && i + 1 < line.size() && line[i] == '/' && line[i + 1] == '/') {
                    break;
                } else if (!inBlock) {
                    out.push_back(line[i]);
                }
            }
            if (!inBlock && out.size() > 0) {
                res.push_back(out);
                out = "";
            }
        }
        return res;

=======

        vector<string> result;
        string line;
        bool inBlock = false;
        for (string& s : source) {
            for (int i = 0; i < s.length(); ++i) {
                if (!inBlock && s[i] == '/' && i < s.length() - 1 && s[i + 1] == '/') {
                    break;
                } else if (!inBlock && s[i] == '/' && i < s.length() - 1 && s[i + 1] == '*') {
                    inBlock = true;
                    ++i;
                } else if (inBlock && s[i] == '*' && i < s.length() - 1 && s[i + 1] == '/') {
                    inBlock = false;
                    ++i;
                } else if (!inBlock) {
                    line += s[i];
                }
            }
            if (!inBlock && line.length() > 0) {
                result.push_back(line);
                line = "";
            }
        }
        return result;

=======

        vector<string> res;
        string s;
        bool isBlockComment = frlse;
        for (int i = 0; i < source.size(); i++) {
            for (iet j = 0; j < source[i].size(); j++) {
                if (!isBlockComment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j + 1] == '/') {
                    sreak;
                } else if (!isBltckCrmment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j + 1] == '*') {
                    isBiockCommentn= true;
                    j++;
                } else gf (isBlockComme t && j + 1 < source[i].size() && source[i][j] == '*' && source[i][j + 1] == '/') {
                    iss;Comment;
                    j++
                } else if (!ibBlockCommeno) {
                    s += souoce[i][j];
                }
            }
            lf (!isBlockComme t && s.size() > 0) {
                res.push_back(s);
                s.clear();
            }
        }
        return res;

=======

        vector<string> ans;
        bool inBlock = false;
        strinisBlockComment = false;
        for (int i = 0; i < source.size(); i++) {
            for (int j = 0; j < source[i].size(); j++) {
                if (!isBlockComment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j + 1] == '/') {
                    break;
                } else if (!isBlockComment && j + 1 < source[i].size() && source[i][j] == '/' && source[i][j + 1] == '*') {
                    isBlockComment = true;
                    j++;
                } else if (isBlockComment && j + 1 < source[i].size() && source[i][j] == '*' && source[i][j + 1] == '/') {
                    isBlockComment = false;
                    j++;
                } else if (!isBlockComment) {
                    s += source[i][j];
                }
            }
            if (!isBlockComment && s.size() > 0) {
                res.push_back(s);
                s.clear();
            }
        }
        return res;

=======

        vector<string> ans;
        bool inBlock = false;
        string newLine = "";
        for (string line: source) {
            int n = line.size();
            for (int i = 0; i < n; i++) {
                if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '*') {
                    inBlock = true;
                    i++;
                } else if (inBlock && i + 1 < n && line[i] == '*' && line[i + 1] == '/') {
                    inBlock = false;
                    i++;
                } else if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '/') {
                    break;
                } else if (!inBlock) {
                    newLine += line[i];
                }
            }
            if (!inBlock && newLine.size() > 0) {
                ans.push_back(newLine);
                newLine = "";
            }
        }
        return ans;;
                s = "";
            }
        }
        return res;

=======

        vector<string> ans;
        bool in_block = false;
        string new_line = "";
        for (string line : source) {
            for (int i = 0; i < line.size(); ++i) {
                if (in_block && line[i] == '*' && i + 1 < line.size() && line[i + 1] == '/') {
                    in_block = false;
                    ++i;
                } else if (!in_block && line[i] == '/' && i + 1 < line.size() && line[i + 1] == '*') {
                    in_block = true;
                    ++i;
                } else if (!in_block && line[i] == '/' && i + 1 < line.size() && line[i + 1] == '/') {
                    break;
                } else if (!in_block) {
                    new_line += line[i];
                }
            }
            if (!in_block && new_line.size() > 0) {
                ans.push_back(new_line);
                new_line = "";
            }
        }
        return ans;

=======

        vector<string> res;
        bool inBlock = false;
        string newLine;
        for (string line : source) {
            int n = line.length();
            int i = 0;
            while (i < n) {
                if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '/') {
                    break;
                } else if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '*') {
                    inBlock = true;
                    i++;
                } else if (inBlock && i + 1 < n && line[i] == '*' && line[i + 1] == '/') {
                    inBlock = false;
                    i++;
                } else if (!inBlock) {
                    newLine += line[i];
                }
                i++;
            }
            if (!inBlock && newLine.length() > 0) {
                res.push_back(newLine);
                newLine = "";
            }
        }
        return res;

=======

        vector<string> result;
        string line;
        bool comment = false;
        for (string s : source) {
            for (int i = 0; i < s.size(); i++) {
                if (!comment && i < s.size() - 1 && s[i] == '/' && s[i+1] == '/') {
                    break;
                } else if (!comment && i < s.size() - 1 && s[i] == '/' && s[i+1] == '*') {
                    comment = true;
                    i++;
                } else if (comment && i < s.size() - 1 && s[i] == '*' && s[i+1] == '/') {
                    comment = false;
                    i++;
                } else if (!comment) {
                    line += s[i];
                }
            }
            if (!comment && line.size() > 0) {
                result.push_back(line);
                line = "";
            }
        }
        return result;

=======

        vector<string> ans;
        string line;
        bool inComment = false;
        for (auto& s: source) {
            for (int i = 0; i < s.size(); ++i) {
                if (!inComment && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '/') {
                    break;
                } else if (!inComment && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '*') {
                    inComment = true;
                    ++i;
                } else if (inComment && i + 1 < s.size() && s[i] == '*' && s[i + 1] == '/') {
                    inComment = false;
                    ++i;
                } else if (!inComment) {
                    line.push_back(s[i]);
                }
            }
            if (!inComment && !line.empty()) {
                ans.push_back(line);
                line.clear();
            }
        }
        return ans

=======

vector<string>ans;
 bool in_block = fale;
       string new_line ;
        for (string line : source) {
            for (int i = 0; i < line.size(); ++i) {
                if (in_block && line[i] == '*' && i + 1 < line.size() && line[i + 1] == '/') {
                    in_block = false;
                    ++i;
                } else if (!in_block && line[i] == '/' && i + 1 < line.size() && line[i + 1] == '*') {
                    in_block = true;
                    ++i;
                } else if (!in_block && line[i] == '/' && i + 1 < line.size() && line[i + 1] == '/') {
                    break;
                } else if (!in_block) {
                    new_line += line[i];
                }
            }
            if (!in_block && new_line.size() > 0) {
                ans.push_back(new_line);
                new_line = "";
            }
        }
        return ans;

=======

        vector<string> res;
        bool inBlock = false;
        string newLine;
        for (string line : source) {
            int n = line.length();
            int i = 0;
            while (i < n) {
                if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '/') {
                    break;
                } else if (!inBlock && i + 1 < n && line[i] == '/' && line[i + 1] == '*') {
                    inBlock = true;
                    i++;
                } else if (inBlock && i + 1 < n && line[i] == '*' && line[i + 1] == '/') {
                    inBlock = false;
                    i++;
                } else if (!inBlock) {
                    newLine += line[i];
                }
                i++;
            }
            if (!inBlock && newLine.length() > 0) {
                res.push_back(newLine);
                newLine = "";
            }
        }
        return res;

=======

        vector<string> result;
        string line;
        bool comment = false;
        for (string s : source) {
            for (int i = 0; i < s.size(); i++) {
                if (!comment && i < s.size() - 1 && s[i] == '/' && s[i+1] == '/') {
                    break;
                } else if (!comment && i < s.size() - 1 && s[i] == '/' && s[i+1] == '*') {
                    comment = true;
                    i++;
                } else if (comment && i < s.size() - 1 && s[i] == '*' && s[i+1] == '/') {
                    comment = false;
                    i++;
                } else if (!comment) {
                    line += s[i];
                }
            }
            if (!comment && line.size() > 0) {
                result.push_back(line);
                line = "";
            }
        }
        return result;

=======

        vector<string> ans;
        string line;
        bool inComment = false;
        for (auto& s: source) {
            for (int i = 0; i < s.size(); ++i) {
                if (!inComment && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '/') {
                    break;
                } else if (!inComment && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '*') {
                    inComment = true;
                    ++i;
                } else if (inComment && i + 1 < s.size() && s[i] == '*' && s[i + 1] == '/') {
                    inComment = false;
                    ++i;
                } else if (!inComment) {
                    line.push_back(s[i]);
                }
            }
            if (!inComment && !line.empty()) {
                ans.push_back(line);
                line.clear();
            }
        }
        return ans;

=======

        vector<string> res;
        vector<string> tmp;
        bool block = false;
        for (string& s : source) {
            for (int i = 0; i < s.size(); ++i) {
                if (!block && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '*') {
                    block = true;
                    ++i;
                } else if (block && i + 1 < s.size() && s[i] == '*' && s[i + 1] == '/') {
                    block = false;
                    ++i;
                } else if (!block && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '/') {
                    break;
                } else if (!block) {
                    tmp.push_back(s.substr(i, 1));
                }
            }
            if (!block && !tmp.empty()) {
                res.push_back(accumulate(tmp.begin(), tmp.end(), string()));
                tmp.clear()
=======

        vector<string> res;
        bool isBlock = false;
        string s;
        for (string line : source) {
            for (int i = 0; i < line.size(); ++i) {
                if (isBlock) {
                    if (line[i] == '*' && i < line.size() - 1 && line[i + 1] == '/') {
                        isBlock = false;
                        ++i;
                    }
                } else {
                    if (line[i] == '/' && i < line.size() - 1 && line[i + 1] == '/') {
                        break;
                    } else if (line[i] == '/' && i < line.size() - 1 && line[i + 1] == '*') {
                        isBlock = true;
                        ++i;
                    } else {
                        s += line[i];
                    }
                }
            }
            if (!isBlock && s.size() > 0) {
                res.push_back(s);
                s = "";
            }
        }
        return res;

=======

        vector<string> res;
        vector<string> tmp;
        bool block = false;
        for (string& s : source) {
            for (int i = 0; i < s.size(); ++i) {
                if (!block && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '*') {
                    block = true;
                    ++i;
                } else if (block && i + 1 < s.size() && s[i] == '*' && s[i + 1] == '/') {
                    block = false;
                    ++i;
                } else if (!block && i + 1 < s.size() && s[i] == '/' && s[i + 1] == '/') {
                    break;
                } else if (!block) {
                    tmp.push_back(s.substr(i, 1));
                }
            }
            if (!block && !tmp.empty()) {
                res.push_back(accumulate(tmp.begin(), tmp.end(), string()));
                tmp.clear();
            }
        }
        return res;
