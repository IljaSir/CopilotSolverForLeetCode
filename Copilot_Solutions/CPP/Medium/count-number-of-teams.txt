Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if ((rating[i] > rating[j] && rating[j] > rating[k]) ||
                        (rating[i] < rating[j] && rating[j] < rating[k])) {
                        res++;
                    }
                }
            }
        }
        return res;

=======

        int n = rating.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if ((rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k])) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int l = 0, r = 0;
            for (int j = 0; j < i; ++j) {
                if (rating[j] < rating[i]) ++l;
            }
            for (int j = i + 1; j < n; ++j) {
                if (rating[j] < rating[i]) ++r;
            }
            res += l * r + (i - l) * (n - i - 1 - r);
        }
        return res;

=======

        int n = rating.size();
        int ans = 0;
        for (int i = 1; i < n-1; i++) {
            int l = 0, r = 0;
            for (int j = 0; j < i; j++) {
                if (rating[j] < rating[i]) l++;
            }
            for (int k = i+1; k < n; k++) {
                if (rating[i] < rating[k]) r++;
            }
            ans += l * r;
            l = r = 0;
            for (int j = 0; j < i; j++) {
                if (rating[j] > rating[i]) l++;
            }
            for (int k = i+1; k < n; k++) {
                if (rating[i] > rating[k]) r++;
            }
            ans += l * r;
        }
        return ans;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = 0;
            for (int j = 0; j < i; j++) {
                if (rating[j] < rating[i]) l++;
                if (rating[j] > rating[i]) r++;
            }
            for (int j = i+1; j < n; j++) {
                if (rating[j] < rating[i]) res += l;
                if (rating[j] > rating[i]) res += r;
            }
        }
        return res;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int l = 0, r = 0;
            for (int j = 0; j < i; j++) {
                if (rating[j] < rating[i]) l++;
                else if (rating[j] > rating[i]) r++;
            }
            res += l * (n - i - 1 - r);
            res += r * (i - l);
        }
        return res;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int leftBig = 0, leftSmall = 0, rightBig = 0, rightSmall = 0;
            for (int j = 0; j < i; ++j) {
                if (rating[j] > rating[i]) leftBig++;
                if (rating[j] < rating[i]) leftSmall++;
            }
            for (int j = i + 1; j < n; ++j) {
                if (rating[j] > rating[i]) rightBig++;
                if (rating[j] < rating[i]) rightSmall++;
            }
            res += leftBig * rightSmall + leftSmall * rightBig;
        }
        return res;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            int leftLess = 0, leftGreater = 0, rightLess = 0, rightGreater = 0;
            for (int j = 0; j < i; j++) {
                if (rating[j] < rating[i]) {
                    leftLess++;
                } else {
                    leftGreater++;
                }
            }
            for (int j = i + 1; j < n; j++) {
                if (rating[j] < rating[i]) {
                    rightLess++;
                } else {
                    rightGreater++;
                }
            }
            res += leftLess * rightGreater + leftGreater * rightLess;
        }
        return res;

=======

        int n = rating.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            int leftSmaller = 0, leftBigger = 0;
            int rightSmaller = 0, rightBigger = 0;
            for (int j = 0; j < i; ++j) {
                if (rating[j] < rating[i]) {
                    ++leftSmaller;
                } else {
                    ++leftBigger;
                }
            }
            for (int j = i + 1; j < n; ++j) {
                if (rating[j] < rating[i]) {
                    ++rightSmaller;
                } else {
                    ++rightBigger;
                }
            }
            res += leftSmaller * rightBigger + leftBigger * rightSmaller;
        }
        return res;
