Synthesizing 10/10 solutions

=======

        vector<int> res;
        for (int num : nums) {
            int newNum = 0;
            while (num > 0) {
                newNum = newNum * 10 + mapping[num % 10];
                num /= 10;
            }
            res.push_back(newNum);
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> res;
        for (int num : nums) {
            int mapped = 0;
            while (num > 0) {
                mapped = mapped * 10 + mapping[num % 10];
                num /= 10;
            }
            res.push_back(mapped);
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> result;
        for (auto num : nums) {
            int newNum = 0;
            while (num > 0) {
                newNum = newNum * 10 + mapping[num % 10];
                num /= 10;
            }
            result.push_back(newNum);
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        for(int i = 0; i < nums.size(); ++i) {
            int num = 0;
            while(nums[i] > 0) {
                num = num * 10 + mapping[nums[i] % 10];
                nums[i] /= 10;
            }
            res.push_back(num);
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            int newNum = 0;
            while (num) {
                newNum = newNum * 10 + mapping[num % 10];
                num /= 10;
            }
            ans.push_back(newNum);
        }
        sort(ans.begin(), ans.end());
        return ans;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int j = 0;
            int temp = 0;
            while (nums[i] > 0) {
                temp += mapping[nums[i] % 10] * pow(10, j);
                nums[i] /= 10;
                j++;
            }
            result.push_back(temp);
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> res;
        for(auto n : nums) {
            int val = 0;
            while(n) {
                val = val*10 + mapping[n%10];
                n /= 10;
            }
            res.push_back(val);
        }
        sort(res.begin(), res.end());
        return res;

=======

        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            int sum = 0;
            int mul = 1;
            while (num > 0) {
                int d = num % 10;
                sum += mul * mapping[d];
                mul *= 10;
                num /= 10;
            }
            result.push_back(sum);
        }
        sort(result.begin(), result.end());
        return result;

=======

        vector<int> ans;
        for (int i = 0; i < nums.size(); i++) {
            int num = nums[i];
            int mappedNum = 0;
            int power = 0;
            while (num > 0) {
                mappedNum += mapping[num % 10] * pow(10, power++);
                num /= 10;
            }
            ans.push_back(mappedNum);
        }
        sort(ans.begin(), ans.end());
        return ans;

=======

        vector<int> answer;
        for (int num : nums) {
            int new_num = 0;
            int base = 1;
            while (num) {
                new_num += mapping[num % 10] * base;
                base *= 10;
                num /= 10;
            }
            answer.push_back(new_num);
        }
        sort(answer.begin(), answer.end());
        return answer;
