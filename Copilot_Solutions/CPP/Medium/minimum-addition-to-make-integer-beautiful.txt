Synthesizing 10/10 solutions

=======

        long long sum = 0;
        long long x = n;
        while (x) {
            sum += x % 10;
            x /= 10;
        }
        if (sum <= target) return 0;
        long long base = 1;
        long long ans = 0;
        while (n) {
            int d = n % 10;
            if (sum - d + target > target) {
                ans += (target - d) * base;
                sum -= d;
                sum += target;
            }
            base *= 10;
            n /= 10;
        }
        return ans;

=======

        long long sum = 0;
        long long x = n;
        while (x > 0) {
            sum += x % 10;
            x /= 10;
        }
        if (sum > target) {
            long long base = 1;
            long long add = 0;
            while (sum > target) {
                long long d = n / base % 10;
                if (d < 9) {
                    long long a = min(9 - d, sum - target);
                    n += a * base;
                    sum -= a;
                }
                base *= 10;
            }
        }
        return n - sum;

=======

        long long sum = 0;
        long long m = n;
        while (m) {
            sum += m % 10;
            m /= 10;
        }
        if (sum <= target) return 0;
        long long ans = 0;
        int base = 1;
        while (sum > target) {
            int t = n % 10;
            if (t == 0) {
                n /= 10;
                base *= 10;
                continue;
            }
            ans += (10 - t) * base;
            n += (10 - t);
            sum = sum - t + (10 - t);
            base *= 10;
        }
        return ans;

=======

        int sum = 0;
        for (long long i = n; i; i /= 10) {
            sum += i % 10;
        }
        if (sum <= target) {
            return 0;
        }
        long long res = 0;
        long long base = 1;
        for (long long i = n; i; i /= 10) {
            int digit = i % 10;
            int need = target - sum + digit;
            if (need > 0) {
                res += base * need;
                sum += need;
            }
            base *= 10;
        }
        return res;

=======

        long long sum = 0;
        long long tmp = n;
        while (tmp != 0) {
            sum += tmp % 10;
            tmp /= 10;
        }
        if (sum <= target) return 0;
        long long ans = 0;
        long long base = 1;
        while (n != 0) {
            int d = n % 10;
            if (d == 0) {
                base *= 10;
                n /= 10;
                continue;
            }
            sum -= d;
            if (sum + target >= d) {
                ans += (target - d) * base;
                sum += target;
            } else {
                ans += (10 - d) * base;
                sum += 10;
            }
            base *= 10;
            n /= 10;
        }
        return ans;

=======

        long long res = 0, base = 1;
        while (n) {
            int digit = n % 10;
            if (digit < target) {
                res += (target - digit) * base;
            }
            base *= 10;
            n /= 10;
        }
        return res;

=======

        long long sum = 0;
        long long m = n;
        while(m > 0) {
            sum += m % 10;
            m /= 10;
        }
        if(sum <= target) return 0;
        long long res = 0;
        long long p = 1;
        while(sum > target) {
            long long x = n % 10;
            res += (10 - x) * p;
            n /= 10;
            sum -= x;
            p *= 10;
        }
        return res;

=======

        long long sum = 0, tmp = 1;
        while (n > 0) {
            sum += (n % 10) * tmp;
            n /= 10;
            tmp *= 10;
        }
        long long ans = 0;
        while (sum > target) {
            long long x = sum / target;
            ans += x;
            sum -= x * target;
            sum += x;
        }
        return ans;

=======

        long long res = 0;
        long long m = 1;
        while (n) {
            int d = n % 10;
            n /= 10;
            if (d < target) {
                res += (target - d) * m;
            }
            m *= 10;
        }
        return res;

=======

        long long ans = 0;
        int cnt[10] = {0};
        while (n) {
            cnt[n%10]++;
            n /= 10;
        }
        int sum = 0;
        for (int i = 0; i < 10; ++i) {
            sum += cnt[i]*i;
        }
        if (sum > target) {
            for (int i = 0; i < 10; ++i) {
                if (sum <= target) break;
                if (cnt[i] == 0) continue;
                int x = min(cnt[i], sum-target);
                ans += x*i;
                sum -= x;
            }
        }
        return ans;
