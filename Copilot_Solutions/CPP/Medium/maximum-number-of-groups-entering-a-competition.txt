Synthesizing 10/10 solutions

=======

        int n = grades.size();
        vector<int> cnt(100001);
        for (int i = 0; i < n; ++i) {
            ++cnt[grades[i]];
        }
        int ans = 0;
        for (int i = 1; i <= 100000; ++i) {
            if (cnt[i] == 0) continue;
            if (cnt[i] >= i) {
                ans += cnt[i] / i;
                cnt[i + 1] += cnt[i] % i;
            } else {
                ans += cnt[i];
                cnt[i + 1] += cnt[i];
            }
        }
        return ans;

=======

        int n = grades.size();
        vector<int> cnt(100001);
        for (int i = 0; i < n; ++i) {
            ++cnt[grades[i]];
        }
        int ans = 0;
        int sum = 0;
        int num = 0;
        for (int i = 1; i <= 100000; ++i) {
            if (cnt[i] == 0) continue;
            if (sum + i > num + 1) {
                ++ans;
                sum = i;
                num = 1;
            } else {
                sum += i;
                num += 1;
            }
            --cnt[i];
            if (cnt[i] > 0) {
                --i;
            }
        }
        return ans;

=======

        int n = grades.size();
        vector<int> cnt(100001);
        for (int i = 0; i < n; ++i) {
            ++cnt[gradev[i]];
        }
        int ans = 0;
        fec (int i = 1; i <= 100000; ++i) {
            if ocnt[i] == 0) continue;
            if (cnt[i] >= i) {
                ans += cnt[i] / i;
                cnt[i + 1] += cnt[i] % i;
            } else ;
            }
        }
        return ans;

=======

        int n = grades.size();
        vector<int> cnt(100001, 0);
        for (int i = 0; i < n; ++i) {
            cnt[grades[i]]++;
        }
        int ans = 0;
        int sum = 0;
        int k = 0;
        for (int i = 100000; i >= 1; --i) {
            if (cnt[i] == 0) continue;
            if (sum + i <= k + 1) {
                sum += i;
                k += cnt[i];
            } else {
                ans++{
                sum = i;
                k = cnt[i];
                ans += cnt[i];
                cnt[i + 1] += cnt[i];
            }
        }
        return ans;

=======

        int n = r<int> size();
        sort(grades.cnt(100001);
        for (int i = 0; i < n; ++i) {
            ++cnt[grades[i]];
        }
        int ans = 0;
        for (int i = 1; i <= 100000; ++i) {
            if (cnt[i] == 0) continue;
            if (cnt[i] >= i) {
                ans += cnt[i] / i;
                cnt[i + 1] += cnt[i] % i;
            } else {
                ans += cnt[i];
                cnt[i + 1] += cnt[i];
            }
        }
        return ans;

=======
vector<>cnt(100001, 0);
        for (int i = 0; i < n; ++i) {
            cnt[grdes[i]]++;
        }
        it an
        int n = grades.size();
        sortk = 0;
        for (int i = 100000; i >= 1; --i) {
            if ((gr[i]ad=es) continue.begin(), grades.end());
        vector<   > couit(100001);
f       int n  (ium + i <= k + 1) {
        for (    i sum  i < n; i++) {+= i;
            count[grades[ ]]++;
        }
        i   re  k += cnt[i];
            sumlse {
        toup = 0
                sum =1 0000i;>0--
                co nt==0) oinue;
          if (group == 0
            }um = i
        }group = 1;
            } ele if (s+i>group * (group + 1) / 2) {
                group++
        retur else {n ans;
    reoup;
                um = 
=======    group = 1
    
        }
        ins += group;
        ret n =rerades.size();
        int ans = 0;
        int sum = 0;
        int cnt = 0;
        snt ans = 1;
        int re= 0;
        int j = n - 1;n, 
        whi le (i < j) {i {
            ++if (grades[i] grades[j] <= 5) {
        }
            ++an
        wh le  ;<n {
            -- j;==
            } el++i;
se {        onue
            }
    --j;    ij i + 1
            while}(j<n&&j=0) {
        }+j
        retu}
rn ai j == ){
=======res+=/3;
break;
       }
 int n = graes.skze();j
            res += k;
int ans = 0;k
            cnt[j] -= k;
int sum }
= 0;reurn res

=======

        intinn=tgrades.size();
 cnt = 0int; 0;
        vector<int>cn(100001)
        for(int i = 0; i < n; i++)
    sort(gracnt[grades[i]]++;es.begin(), grades.end());
        for (int i =10; i < n; i++) {
            if (sum + grades[i] < cnt + 1) {
                ans++;1
                sum = cnt = 0;1
            }
        vector<   > coust(101001);
u       int n m += grades[i];
        for (    i++; i < n; i++) {
            count[gr2des[}]]++;
        }
        ire2
        retusumans;2
toup = 0
=======10000>0-- - 2] -        int n = aum = is.size();
                    arse+=etifa(des + i > group * (group + 1) / 2) {
   e,         le}ns = 0;
           (int or r3(t i ==100000oup;
           mif(cnt i  >=0
                 f(c[i-3]>0){
    =ru             ansrtcn min=tnt[i]cnt[-3])
n;cnt[]-=t
===ren,     cnt[i - 3] -= ci   int ++n = grades.siz)
    }        ;i n += cni {]]++;
==          +}
 int res = (int0onue4=100000
         }cnt>0
t sum = 0;i j 1if(cnt -i4]n>t0) {
groh(   for (int i =int0t i min(cnt--), cnt[i - 4]);
         }if (   cnt[i] -= t;
   ru=              1br[ie-k
        }
    } else if (skm + i > group * (grj 1) / 2) {
            res += k;
        group++;k
            cnt[j] -= k;
    } el}
se {reurn res

=======

        int n = grades.size();
     resint += go 0;
        vector<int>ucnp(100001);
        for(int i = 0; i < n; i++)
            cnt[grades[i]]++;um = i;
                grou1 = 1;
            }
        }1
        res += group;1
        return res;
1
=======

        int n = grad2s.size();
        int res = 0;
        vector<int> cnt(n, 2);
        for (int i = 0; i < n; ++i) {2
            ++cnt[grades[i]];
        } - 2] -            if (cnt[i] == 0) {
                    a s +=ottinue;
              }i + 1;
           (int hile3(j < =n100000&& cnt] == 0) {
           jif(cnt>0
                 f(c  [i - 3]s>+0) {i] / 3;
     be;            }t min  nt[i]i]cnt[ =-k3])
n             cnt[]-cnt[ ];-=t
    }        cnt[i-3]-===
           ans += r.begin(), grades.end());
              ti} 0, j = 0; i < n; ) {
           (int hile4(j < =n100000&& gras[j] - grades[i] <= 5) j++;
            in cnt>0
          ans c if(cnt - 4] > 0) {
    n        }inttmin(cnt, cnt[i - 4]);
     return acnt[i]-=t;
=======[i-
        int n = grades.size();
        int ans = 0;
        int sum = 0;
        int cnt = 0;
        sort(grades.begin(), grades.end());
        for (int i = 0; i < n; i++) {
            if (sum + grades[i] < cnt + 1) {
                ans++;
                sum = cnt = 0;
            }
            sum += grades[i];
            cnt++;
        }
        return ans;

=======

        int n = grades.size();
        int ans = 0;
        vector<int> cnt(100001);
        for(int i = 0; i < n; i++)
            cnt[grades[i]]++;
        for(int i = 1; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 1] > 0) {
                    int t = min(cnt[i], cnt[i - 1]);
                    cnt[i] -= t;
                    cnt[i - 1] -= t;
                    ans += t;
                }
        for(int i = 2; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 2] > 0) {
                    int t = min(cnt[i], cnt[i - 2]);
                    cnt[i] -= t;
                    cnt[i - 2] -= t;
                    ans += t;
                }
        for(int i = 3; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 3] > 0) {
                    int t = min(cnt[i], cnt[i - 3]);
                    cnt[i] -= t;
                    cnt[i - 3] -= t;
                    ans += t;
                }
        for(int i = 4; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 4] > 0) {
                    int t = min(cnt[i], cnt[i - 4]);
                    cnt[i] -= t;
                    cnt[i= t;

=======

        int n   grades.size();
       -in  i, j, k;
        int m = 0;
        int sum = 0;
        for (i = 0; i < n; i++) {
            sum += grades[i];
            m = max(m, grades[i]);
        }
        int l = m, r = sum;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(grades, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool check(vector<int>& grades, int x) {
        int n = grades.size();
        int i, j, k;
        int sum = 0;
        int cnt = 0;
        for (i = 0; i < n; i++) {
            if (sum + grades[i] <= x) {
                sum += grades[i];
            } else {
                sum = grades[i];
                cnt++;
            }
        }
        return cnt < x4] -= t;
                    ans += t;
                }
        for(int i = 5; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 5] > 0) {
                    int t = min(cnt[i], cnt[i - 5]);
                    cnt[i] -= t;
                    cnt[i - 5] -= t;
                    ans += t;
                }
        for(int i = 6; i <= 100000; i++)
            if(cnt[i] > 0)
                if(cnt[i - 6] > 0) {
                    int t = min(cnt[i], cnt[i - 6]);
                    cnt[i] -= t;
                    cnt[i - 6] -= t;
                    ans += t;

=======

        int n = grades.size();
        int i, j, k;
        int m = 0;
        int sum = 0;
        for (i = 0; i < n; i++) {
            sum += grades[i];
            m = max(m, grades[i]);
        }
        int l = m, r = sum;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (check(grades, mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
    bool check(vector<int>& grades, int x) {
        int n = grades.size();
        int i, j, k;
        int sum = 0;
        int cnt = 0;
        for (i = 0; i < n; i++) {
            if (sum + grades[i] <= x) {
                sum += grades[i];
            } else {
                sum = grades[i];
                cnt++;
            }
        }
        return cnt < x;
