Synthesizing 10/10 solutions

=======

        if (intervals.size() == 0) {
            return 0;
        }
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        int end = intervals[0][1];
        int count = 1;
        for (int i = 1; i < intervals.size(); i++) {
            if (end <= intervals[i][0]) {
                count++;
                end = intervals[i][1];
            }
        }
        return intervals.size() - count;

=======

        if (intervals.size() == 0) return 0;
        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b) {
            return a[1] < b[1];
        });
        int count = 1;
        int end = intervals[0][1];
        for (int i = 1; i < intervals.size(); i++) {
            if (intervals[i][0] >= end) {
                count++;
                end = intervals[i][1];
            }
        }
        return intervals.size() - count;

=======

        if (intervals.size() == 0) return 0;
        sort(intervals.begin(), intervals.end(), [](auto& a, auto& b) {
            return a[1] < b[1];
        });
        int ans = 1;
        int end = intervals[0][1];
        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i][0] >= end) {
                ++ans;
                end = intervals[i][1];
            }
        }
        return intervals.size() - ans;

=======

        int n = intervals.size();
        if (n <= 1) return 0;
        sort(intervals.begin(), intervals.end(), [](const auto& a, const auto& b) {
            return a[1] < b[1];
        });
        int cnt = 1;
        int end = intervals[0][1];
        for (int i = 1; i < n; ++i) {
            if (intervals[i][0] >= end) {
                ++cnt;
                end = intervals[i][1];
            }
        }
        return n - cnt;

=======

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });
        int n = intervals.size();
        int count = 1;
        int end = intervals[0][1];
        for (int i = 1; i < n; i++) {
            if (intervals[i][0] >= end) {
                end = intervals[i][1];
                count++;
            }
        }
        return n - count;

=======

        sort(intervals.begin(), intervals.end(), [](vector<int> &a, vector<int> &b) {
            return a[1] < b[1];
        });
        int n = intervals.size();
        int ans = 0;
        int end = intervals[0][1];
        for (int i = 1; i < n; ++i) {
            if (intervals[i][0] < end) {
                ++ans;
            } else {
                end = intervals[i][1];
            }
        }
        return ans;

=======

        if (intervals.empty()) return 0;
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){return a[1] < b[1];});
        int count = 0;
        int prev = intervals[0][1];
        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i][0] < prev) {
                ++count;
            } else {
                prev = intervals[i][1];
            }
        }
        return count;

=======

        int n = intervals.size();
        if (n == 0) return 0;
        sort(intervals.begin(), intervals.end(), [](const auto& a, const auto& b) {
            if (a[1] == b[1]) return a[0] < b[0];
            return a[1] < b[1];
        });
        int res = 0;
        int end = intervals[0][1];
        for (int i = 1; i < n; ++i) {
            if (intervals[i][0] < end) {
                ++res;
            } else {
                end = intervals[i][1];
            }
        }
        return res;

=======

        sort(intervals.begin(), intervals.end(), [](vector<int> a, vector<int> b) {
            return a[1] < b[1];
        });
        int res = 0;
        int cur = INT_MIN;
        for (auto interval : intervals) {
            if (interval[0] >= cur) {
                res++;
                cur = interval[1];
            }
        }
        return intervals.size() - res;

=======

        sort(intervals.begin(), intervals.end(), [](vector<int>& a, vector<int>& b){return a[1] < b[1];});
        int i = 0;
        int count = 0;
        for (int j = 1; j < intervals.size(); j++) {
            if (intervals[i][1] > intervals[j][0]) {
                count++;
            } else {
                i = j;
            }
        }
        return count;
