Synthesizing 10/10 solutions

=======

        int sign = 1, base = 0, i = 0;
        while (s[i] == ' ') { i++; }
        if (s[i] == '-' || s[i] == '+') {
            sign = (s[i++] == '-') ? -1 : 1;
        }
        while (s[i] >= '0' && s[i] <= '9') {
            if (base > INT_MAX / 10 || (base == INT_MAX / 10 && s[i] - '0' > 7)) {
                return (sign == 1) ? INT_MAX : INT_MIN;
            }
            base = 10 * base + (s[i++] - '0');
        }
        return base * sign;

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == ' ') {
            i++;
        }
        if (i == n) {
            return 0;
        }
        bool isNegative = false;
        if (s[i] == '-') {
            isNegative = true;
            i++;
        } else if (s[i] == '+') {
            i++;
        }
        int result = 0;
        while (i < n && isdigit(s[i])) {
            int digit = s[i] - '0';
            if (isNegative) {
                if (result < INT_MIN / 10) {
                    return INT_MIN;
                }
                result *= 10;
                if (result < INT_MIN + digit) {
                    return INT_MIN;
                }
                result -= digit;
            } else {
                if (result > INT_MAX / 10) {
                    return INT_MAX;
                }
                result *= 10;
                if (result > INT_MAX - digit) {
                    return INT_MAX;
                }
                result += digit;
            }
            i++;
        }
        return result;

=======

        int n = s.size();
        int i = 0;
        while (i < n && s[i] == ' ') {
            i++;
        }
        if (i == n) {
            return 0;
        }
        bool neg = false;
        if (s[i] == '-') {
            neg = true;
            i++;
        } else if (s[i] == '+') {
            i++;
        }
        long long ans = 0;
        while (i < n && isdigit(s[i])) {
            ans = ans * 10 + s[i] - '0';
            if (ans > INT_MAX) {
                break;
            }
            i++;
        }
        if (neg) {
            ans = -ans;
        }
        if (ans < INT_MIN) {
            return INT_MIN;
        }
        if (ans > INT_MAX) {
            return INT_MAX;
        }
        return ans;

=======

        int i = 0;
        int sign = 1;
        int res = 0;
        while (s[i] == ' ') {
            i++;
        }
        if (s[i] == '-') {
            sign = -1;
            i++;
        } else if (s[i] == '+') {
            i++;
        }
        while (s[i] >= '0' && s[i] <= '9') {
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && s[i] - '0' > INT_MAX % 10)) {
                return sign == 1 ? INT_MAX : INT_MIN;
            }
            res = res * 10 + s[i] - '0';
            i++;
        }
        return sign * res;

=======

        int i = 0, n = s.size();
        while (i < n && s[i] == ' ') {
            i++;
        }
        int sign = 1;
        if (i < n) {
            if (s[i] == '-') {
                sign = -1;
                i++;
            } else if (s[i] == '+') {
                sign = 1;
                i++;
            }
        }
        long long res = 0;
        while (i < n && isdigit(s[i])) {
            res = res * 10 + s[i] - '0';
            i++;
            if (sign == 1 && res > INT_MAX) {
                return INT_MAX;
            }
            if (sign == -1 && -res < INT_MIN) {
                return INT_MIN;
            }
        }
        return res * sign;

=======

        int i = 0;
        while (i < s.size() && s[i] == ' ') {
            ++i;
        }
        if (i == s.size()) {
            return 0;
        }
        bool isNegative = false;
        if (s[i] == '-') {
            isNegative = true;
            ++i;
        } else if (s[i] == '+') {
            ++i;
        }
        long long res = 0;
        while (i < s.size() && s[i] >= '0' && s[i] <= '9') {
            res = res * 10 + s[i] - '0';
            if (res > INT_MAX) {
                break;
            }
            ++i;
        }
        if (isNegative) {
            res = -res;
        }
        if (res < INT_MIN) {
            return INT_MIN;
        }
        if (res > INT_MAX) {
            return INT_MAX;
        }
        return res;

=======

        int i = 0;
        int sign = 1;
        int res = 0;
        while (s[i] == ' ') i++;
        if (s[i] == '-') {
            sign = -1;
            i++;
        } else if (s[i] == '+') {
            sign = 1;
            i++;
        }
        while (s[i] >= '0' && s[i] <= '9') {
            int digit = s[i] - '0';
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && digit > INT_MAX % 10)) {
                if (sign == 1) return INT_MAX;
                return INT_MIN;
            }
            res = res * 10 + digit;
            i++;
        }
        return sign * res;

=======

        int i = 0;
        int n = s.length();
        while (i < n && s[i] == ' ') {
            ++i;
        }
        if (i >= n) {
            return 0;
        }
        bool isNegative = false;
        if (s[i] == '-') {
            isNegative = true;
            ++i;
        } else if (s[i] == '+') {
            ++i;
        }
        int64_t result = 0;
        while (i < n && isdigit(s[i])) {
            result = result * 10 + s[i] - '0';
            if (result > INT_MAX) {
                break;
            }
            ++i;
        }
        if (isNegative) {
            result = -result;
        }
        if (result > INT_MAX) {
            return INT_MAX;
        }
        if (result < INT_MIN) {
            return INT_MIN;
        }
        return result;

=======

        int i = 0, sign = 1, res = 0;
        while (s[i] == ' ') i++;
        if (s[i] == '-' || s[i] == '+') {
            sign = (s[i++] == '-') ? -1 : 1;
        }
        while (s[i] >= '0' && s[i] <= '9') {
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && s[i] - '0' > 7)) {
                return (sign == 1) ? INT_MAX : INT_MIN;
            }
            res = res * 10 + (s[i++] - '0');
        }
        return res * sign;

=======

        int i = 0;
        int n = s.size();
        int sign = 1;
        int res = 0;
        // ignore leading whitespace
        while (i < n && s[i] == ' ') {
            i++;
        }
        // check sign
        if (i < n && (s[i] == '-' || s[i] == '+')) {
            sign = s[i] == '-' ? -1 : 1;
            i++;
        }
        while (i < n && s[i] >= '0' && s[i] <= '9') {
            int digit = s[i] - '0';
            // check overflow
            if (res > INT_MAX / 10 || (res == INT_MAX / 10 && digit > 7)) {
                return sign == 1 ? INT_MAX : INT_MIN;
            }
            res = res * 10 + digit;
            i++;
        }
        return res * sign;
