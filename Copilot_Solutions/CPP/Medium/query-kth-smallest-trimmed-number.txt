Synthesizing 9/10 solutions

=======

        int n = nums.size();
        vector<int> ans;
        for (int i = 0; i < queries.size(); i++) {
            int k = queries[i][0];
            int trim = queries[i][1];
            vector<int> a;
            for (int j = 0; j < n; j++) {
                string s = nums[j].substr(0, trim);
                int x = stoi(s);
                a.push_back(x);
            }
            sort(a.begin(), a.end());
            ans.push_back(a[k-1]);
        }
        return ans;

=======

        vector<int> res;
        for (auto& q : queries) {
            int k = q[0], trim = q[1];
            vector<int> v;
            for (auto& n : nums) {
                v.push_back(stoi(n.substr(0, n.size()-trim)));
            }
            nth_element(v.begin(), v.begin() + k, v.end());
            res.push_back(v[k]);
        }
        return res;

=======

        vector<int> result;
        for (auto& q : queries) {
            int k = q[0];
            int trim = q[1];
            vector<int> v;
            for (auto& s : nums) {
                v.push_back(stoi(s.substr(0, trim)));
            }
            sort(v.begin(), v.end());
            result.push_back(v[k-1]);
        }
        return result;

=======

        vector<int> answer;
        for (auto query : queries) {
            int k = query[0];
            int trim = query[1];
            vector<int> v;
            for (auto num : nums) {
                v.push_back(stoi(num.substr(0, num.length() - trim + 1)));
            }
            sort(v.begin(), v.end());
            answer.push_back(v[k - 1]);
        }
        return answer;

=======

        vector<int> res;
        for (auto &q : queries) {
            int k = q[0], trim = q[1];
            vector<int> tmp;
            for (auto &s : nums) {
                tmp.push_back(stoi(s.substr(0, trim)));
            }
            sort(tmp.begin(), tmp.end());
            res.push_back(tmp[k - 1]);
        }
        return res;

=======

        vector<int> ans;
        for (auto& q : queries) {
            int k = q[0], trim = q[1];
            vector<int> cur;
            for (auto& num : nums) {
                cur.push_back(stoi(num.substr(0, num.size() - trim)));
            }
            sort(cur.begin(), cur.end());
            ans.push_back(cur[k - 1]);
        }
        return ans;

=======

        vector<int> res;
        for (auto& q : queries) {
            int k = q[0], trim = q[1];
            vector<int> nums2;
            for (auto& s : nums) {
                nums2.push_back(stoi(s.substr(0, s.length() - trim + 1)));
            }
            nth_element(nums2.begin(), nums2.begin() + k, nums2.end());
            res.push_back(nums2[k]);
        }
        return res;

=======

        vector<int> result;
        for (vector<int> q : queries) {
            int k = q[0], trim = q[1];
            vector<int> trimmedNums;
            for (string num : nums) {
                trimmedNums.push_back(stoi(num.substr(0, num.length() - trim)));
            }
            sort(trimmedNums.begin(), trimmedNums.end());
            result.push_back(trimmedNums[k - 1]);
        }
        return result;

=======

        vector<int> result;
        for (auto &q : queries) {
            int k = q[0];
            int trim = q[1];
            vector<int> nums_trim;
            for (auto &n : nums) {
                nums_trim.push_back(stoi(n.substr(0, trim)));
            }
            nth_element(nums_trim.begin(), nums_trim.begin() + k, nums_trim.end());
            result.push_back(nums_trim[k]);
        }
        return result;
