Synthesizing 10/10 solutions

=======

        sort(arr.begin(), arr.end());
        int m = arr[(arr.size() - 1) / 2];
        sort(arr.begin(), arr.end(), [m](int a, int b) {
            return abs(a - m) == abs(b - m) ? a > b : abs(a - m) > abs(b - m);
        });
        return vector<int>(arr.begin(), arr.begin() + k);

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        int m = arr[(n - 1) / 2];
        sort(arr.begin(), arr.end(), [&](int a, int b) {
            return abs(a - m) == abs(b - m) ? a > b : abs(a - m) > abs(b - m);
        });
        arr.resize(k);
        return arr;

=======

        vector<int> res;
        int n = arr.size();
        sort(arr.begin(), arr.end());
        int m = arr[(n - 1) / 2];
        int i = 0, j = n - 1;
        while (k--) {
            if (abs(arr[i] - m) > abs(arr[j] - m)) {
                res.push_back(arr[i++]);
            } else {
                res.push_back(arr[j--]);
            }
        }
        return res;

=======

        sort(arr.begin(), arr.end());
        int n = arr.size(), m = arr[(n - 1) / 2];
        auto cmp = [&](int a, int b) {
            return abs(a - m) > abs(b - m) || (abs(a - m) == abs(b - m) && a > b);
        };
        sort(arr.begin(), arr.end(), cmp);
        return vector<int>(arr.begin(), arr.begin() + k);

=======

        sort(arr.begin(), arr.end());
        int mid = arr[(arr.size()-1)/2];
        sort(arr.begin(), arr.end(), [&](int a, int b){
            return abs(a-mid) > abs(b-mid) || (abs(a-mid) == abs(b-mid) && a > b);
        });
        vector<int> res;
        for(int i = 0; i < k; i++) res.push_back(arr[i]);
        return res;

=======

        sort(arr.begin(), arr.end());
        int n = arr.size();
        int median = arr[(n-1)/2];
        sort(arr.begin(), arr.end(), [median](int a, int b){
            if(abs(a-median) == abs(b-median)){
                return a > b;
            }
            return abs(a-median) > abs(b-median);
        });
        vector<int> res;
        for(int i = 0; i < k; i++){
            res.push_back(arr[i]);
        }
        return res;

=======

        int n = arr.size();
        sort(arr.begin(), arr.end());
        int m = arr[(n-1)/2];
        auto cmp = [&](int a, int b) {
            if (abs(a-m) != abs(b-m)) {
                return abs(a-m) > abs(b-m);
            }
            return a > b;
        };
        priority_queue<int, vector<int>, decltype(cmp)> pq(cmp);
        for (int i = 0; i < n; i++) {
            pq.push(arr[i]);
            if (pq.size() > k) {
                pq.pop();
            }
        }
        vector<int> ans;
        while (!pq.empty()) {
            ans.push_back(pq.top());
            pq.pop();
        }
        return ans;

=======

        vector<int> res;
        sort(arr.begin(), arr.end());
        int m = arr[(arr.size() - 1) / 2];
        auto cmp = [&](int a, int b) {
            int x = abs(a - m);
            int y = abs(b - m);
            if (x > y) return true;
            if (x < y) return false;
            return a > b;
        };
        sort(arr.begin(), arr.end(), cmp);
        for (int i = 0; i < k; ++i) {
            res.push_back(arr[i]);
        }
        return res;

=======

        vector<int> res;
        int median = findMedian(arr);
        sort(arr.begin(), arr.end(), [&](int a, int b){
            return abs(a-median)>abs(b-median) || (abs(a-median)==abs(b-median) && a>b);
        });
        for(int i=0;i<k;i++) res.push_back(arr[i]);
        return res;

=======

        int n = arr.size();
        int m = arr[n/2];
        sort(arr.begin(), arr.end(), [m](int a, int b) {
            return abs(a-m) == abs(b-m) ? (a > b) : (abs(a-m) > abs(b-m));
        });
        return {arr.begin(), arr.begin()+k};
