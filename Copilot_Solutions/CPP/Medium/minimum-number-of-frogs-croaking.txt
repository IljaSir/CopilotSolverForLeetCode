Synthesizing 10/10 solutions

=======

        int n = croakOfFrogs.size();
        if (n % 5 != 0) return -1;
        int c = 0, r = 0, o = 0, a = 0, k = 0, res = 0;
        for (char ch : croakOfFrogs) {
            if (ch == 'c') {
                c++;
                res = max(res, c);
            }
            else if (ch == 'r') {
                r++;
                if (r > c) return -1;
            }
            else if (ch == 'o') {
                o++;
                if (o > r) return -1;
            }
            else if (ch == 'a') {
                a++;
                if (a > o) return -1;
            }
            else if (ch == 'k') {
                k++;
                if (k > a) return -1;
                c--;
                r--;
                o--;
                a--;
                k--;
            }
        }
        return c == 0 ? res : -1;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0;
        for (int i = 0; i < croakOfFrogs.length(); i++) {
            if (croakOfFrogs[i] == 'c') {
                c++;
                frogs = max(frogs, c);
            } else if (croakOfFrogs[i] == 'r') {
                if (c == 0) return -1;
                c--;
                r++;
            } else if (croakOfFrogs[i] == 'o') {
                if (r == 0) return -1;
                r--;
                o++;
            } else if (croakOfFrogs[i] == 'a') {
                if (o == 0) return -1;
                o--;
                a++;
            } else if (croakOfFrogs[i] == 'k') {
                if (a == 0) return -1;
                a--;
                k++;
            }
        }
        return c == 0 && r == 0 && o == 0 && a == 0 && k == 0 ? frogs : -1;

=======

        int n = croakOfFrogs.size();
        int c = 0, r = 0, o = 0, a = 0, k = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (croakOfFrogs[i] == 'c') {
                c++;
            } else if (croakOfFrogs[i] == 'r') {
                r++;
            } else if (croakOfFrogs[i] == 'o') {
                o++;
            } else if (croakOfFrogs[i] == 'a') {
                a++;
            } else if (croakOfFrogs[i] == 'k') {
                k++;
            }
            if (c < r || r < o || o < a || a < k) {
                return -1;
            }
            ans = max(ans, c - k);
        }
        if (c != r || r != o || o != a || a != k) {
            return -1;
        }
        return ans;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0, maxFrogs = 0;
        for (char ch : croakOfFrogs) {
            switch (ch) {
                case 'c':
                    ++c;
                    ++frogs;
                    break;
                case 'r':
                    if (c <= r) {
                        return -1;
                    }
                    ++r;
                    break;
                case 'o':
                    if (r <= o) {
                        return -1;
                    }
                    ++o;
                    break;
                case 'a':
                    if (o <= a) {
                        return -1;
                    }
                    ++a;
                    break;
                case 'k':
                    if (a <= k) {
                        return -1;
                    }
                    ++k;
                    --frogs;
                    break;
            }
            maxFrogs = max(maxFrogs, frogs);
        }
        if (c != r || r != o || o != a || a != k) {
            return -1;
        }
        return maxFrogs;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0, max_frogs = 0;
        for (char ch : croakOfFrogs) {
            if (ch == 'c') {
                c++;
                frogs++;
                max_frogs = max(max_frogs, frogs);
            } else if (ch == 'r') {
                if (c <= r) return -1;
                r++;
            } else if (ch == 'o') {
                if (r <= o) return -1;
                o++;
            } else if (ch == 'a') {
                if (o <= a) return -1;
                a++;
            } else if (ch == 'k') {
                if (a <= k) return -1;
                k++;
                frogs--;
            }
        }
        return c == r && r == o && o == a && a == k ? max_frogs : -1;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0, maxFrogs = 0;
        for (char ch: croakOfFrogs) {
            if (ch == 'c') {
                c++;
                frogs++;
            } else if (ch == 'r') {
                if (c == 0) return -1;
                r++;
                c--;
            } else if (ch == 'o') {
                if (r == 0) return -1;
                o++;
                r--;
            } else if (ch == 'a') {
                if (o == 0) return -1;
                a++;
                o--;
            } else if (ch == 'k') {
                if (a == 0) return -1;
                k++;
                a--;
                frogs--;
            }
            maxFrogs = max(maxFrogs, frogs);
        }
        if (c != 0 || r != 0 || o != 0 || a != 0 || k != 0) return -1;
        return maxFrogs;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0, frogs = 0, maxFrogs = 0;
        for (char ch: croakOfFrogs) {
            switch(ch) {
                case 'c':
                    c++;
                    frogs++;
                    break;
                case 'r':
                    r++;
                    break;
                case 'o':
                    o++;
                    break;
                case 'a':
                    a++;
                    break;
                case 'k':
                    k++;
                    frogs--;
                    break;
            }
            if (r > c || o > r || a > o || k > a) {
                return -1;
            }
            maxFrogs = max(maxFrogs, frogs);
        }
        return maxFrogs;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0;
        int maxFrogs = 0;
        for (auto ch : croakOfFrogs) {
            switch(ch) {
                case 'c': ++c; break;
                case 'r': ++r; break;
                case 'o': ++o; break;
                case 'a': ++a; break;
                case 'k': ++k; break;
            }
            maxFrogs = max(maxFrogs, c - k);
            if (r > c || o > r || a > o || k > a) return -1;
        }
        return c == k ? maxFrogs : -1;

=======

        int c = 0, r = 0, o = 0, a = 0, k = 0;
        int maxFrogs = 0;
        for (auto ch : croakOfFrogs) {
            switch (ch) {
                case 'c':
                    c++;
                    maxFrogs = max(maxFrogs, c);
                    break;
                case 'r':
                    if (c == 0) return -1;
                    c--;
                    r++;
                    break;
                case 'o':
                    if (r == 0) return -1;
                    r--;
                    o++;
                    break;
                case 'a':
                    if (o == 0) return -1;
                    o--;
                    a++;
                    break;
                case 'k':
                    if (a == 0) return -1;
                    a--;
                    k++;
                    break;
            }
        }
        if (c != 0 || r != 0 || o != 0 || a != 0) return -1;
        return maxFrogs;

=======

        int n = croakOfFrogs.size();
        if (n % 5) return -1;
        int cnt[5] = {0};
        int res = 0;
        for (char c : croakOfFrogs) {
            if (c == 'c') {
                if (cnt[0] < cnt[1]) return -1;
                ++cnt[0];
            } else if (c == 'r') {
                if (cnt[1] < cnt[2]) return -1;
                ++cnt[1];
            } else if (c == 'o') {
                if (cnt[2] < cnt[3]) return -1;
                ++cnt[2];
            } else if (c == 'a') {
                if (cnt[3] < cnt[4]) return -1;
                ++cnt[3];
            } else if (c == 'k') {
                if (cnt[4] < cnt[0]) return -1;
                ++cnt[4];
            }
            res = max(res, cnt[0] - cnt[4]);
        }
        return res;
