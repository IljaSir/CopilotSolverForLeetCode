Synthesizing 10/10 solutions

=======

        int n = arr.size();
        int odd = 0;
        int even = 1;
        int res = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (sum % 2 == 0) {
                res += odd;
                even++;
            } else {
                res += even;
                odd++;
            }
        }
        return res % 1000000007;

=======

        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0] % 2;
        int ans = dp[0];
        for (int i = 1; i < n; i++) {
            dp[i] = dp[i - 1] + arr[i] % 2;
            ans += dp[i];
        }
        return ans % int(1e9 + 7);

=======

        int n = arr.size();
        int odd = 0, even = 1;
        int sum = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (sum % 2 == 1) {
                ans += even;
                odd++;
            } else {
                ans += odd;
                even++;
            }
        }
        return ans % 1000000007;

=======

        int sum = 0;
        int odd = 0;
        int even = 1;
        int res = 0;
        int mod = 1e9 + 7;
        for (int i = 0; i < arr.size(); ++i) {
            sum += arr[i];
            if (sum & 1) {
                res = (res + even) % mod;
                ++odd;
            } else {
                res = (res + odd) % mod;
                ++even;
            }
        }
        return res;

=======

        int n = arr.size();
        vector<int> odd(n, 0);
        vector<int> even(n, 0);
        if (arr[0] % 2) {
            odd[0] = 1;
        } else {
            even[0] = 1;
        }
        for (int i = 1; i < n; ++i) {
            if (arr[i] % 2) {
                odd[i] = even[i - 1] + 1;
                even[i] = odd[i - 1];
            } else {
                even[i] = even[i - 1] + 1;
                odd[i] = odd[i - 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans += odd[i];
            ans %= 1000000007;
        }
        return ans;

=======

        int n = arr.size();
        int odd = 0, even = 1;
        int sum = 0;
        int ans = 0;
        int mod = 1e9+7;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
            if (sum % 2 == 0) {
                ans = (ans + odd) % mod;
                even++;
            } else {
                ans = (ans + even) % mod;
                odd++;
            }
        }
        return ans;

=======

        int size = arr.size();
        int sum = 0;
        int odd = 0;
        int even = 1;
        int res = 0;
        for (int i = 0; i < size; i++) {
            sum += arr[i];
            if (sum % 2 == 1) {
                res += even;
                odd++;
            } else {
                res += odd;
                even++;
            }
            res %= 1000000007;
        }
        return res;

=======

        const int mod = 1e9 + 7;
        long long odd = 0, even = 1, sum = 0, res = 0;
        for (int i = 0; i < arr.size(); i++) {
            sum += arr[i];
            if (sum % 2) {
                res += even;
                odd++;
            }
            else {
                res += odd;
                even++;
            }
        }
        return res % mod;

=======

        long long ans = 0;
        long long sum = 0;
        long long cnt[2] = {1, 0};
        for (int i : arr) {
            sum += i;
            ans += cnt[sum % 2];
            cnt[sum % 2]++;
        }
        return ans % 1000000007;

=======

        int n = arr.size();
        int mod = 1000000007;
        int odd = 0, even = 1;
        int sum = 0;
        int ans = 0;
        for (auto num : arr) {
            sum += num;
            if (sum % 2 == 0) {
                ans = (ans + odd) % mod;
                even++;
            } else {
                ans = (ans + even) % mod;
                odd++;
            }
        }
        return ans;
