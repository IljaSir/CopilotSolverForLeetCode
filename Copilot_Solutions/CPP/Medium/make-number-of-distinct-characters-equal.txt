Synthesizing 10/10 solutions

=======

        int n1 = word1.length();
        int n2 = word2.length();
        if (n1 != n2) {
            return false;
        }
        int count1[26] = {0};
        int count2[26] = {0};
        for (int i = 0; i < n1; i++) {
            count1[word1[i] - 'a']++;
            count2[word2[i] - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                diff++;
            }
        }
        return diff == 2;

=======

        int n = word1.length();
        int m = word2.length();
        if (n != m) {
            return false;
        }
        int count[26] = {0};
        for (int i = 0; i < n; i++) {
            count[word1[i] - 'a']++;
            count[word2[i] - 'a']--;
        }
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            sum += abs(count[i]);
        }
        return sum == 2;

=======

        int n = word1.size(), m = word2.size();
        int count1[26] = {0}, count2[26] = {0};
        for (int i = 0; i < n; i++) {
            count1[word1[i] - 'a']++;
        }
        for (int i = 0; i < m; i++) {
            count2[word2[i] - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                diff++;
            }
        }
        return diff <= 2;
    }
    bool buddyStrings(string word1, string word2) {
        int n = word1.size(), m = word2.size();
        if (n != m) return false;
        int count1[26] = {0}, count2[26] = {0};
        for (int i = 0; i < n; i++) {
            count1[word1[i] - 'a']++;
        }
        for (int i = 0; i < m; i++) {
            count2[word2[i] - 'a']++;
        }
        int diff = 0;
        for (int i = 0; i < 26; i++) {
            if (count1[i] != count2[i]) {
                diff++;
            }
        }
        if (diff == 0) {
            for (int i = 0; i < 26; i++) {
                if (count1[i] > 1) {
                    return true;
                }
            }
            return false;
        }
        if (diff != 2) return false;
        int ind1 = -1, ind2 = -1;
        for (int i = 0; i < n; i++) {
            if (word1[i] != word2[i]) {
                if (ind1 == -1) {
                    ind1 = i;
                } else {
                    ind2 = i;
                }
            }
        }
        if (ind1 == -1 || ind2 == -1) return false;
        swap(word1[ind1], word1[ind2]);
        return word1 == word2;

=======

        int n1 = word1.size();
        int n2 = word2.size();
        if(n1 != n2) return false;
        int cnt[26] = {0};
        for(int i = 0; i < n1; ++i) {
            ++cnt[word1[i]-'a'];
            --cnt[word2[i]-'a'];
        }
        int cnt1 = 0;
        int cnt2 = 0;
        for(int i = 0; i < 26; ++i) {
            if(cnt[i] > 0) ++cnt1;
            if(cnt[i] < 0) ++cnt2;
        }
        if(cnt1 == 0 && cnt2 == 0) return false;
        if(cnt1 == 1 || cnt2 == 1) return true;
        return false;
    }
    bool buddyStrings(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();
        if(n1 != n2) return false;
        if(word1 == word2) {
            int cnt[26] = {0};
            for(int i = 0; i < n1; ++i) {
                ++cnt[word1[i]-'a'];
            }
            for(int i = 0; i < 26; ++i) {
                if(cnt[i] > 1) return true;
            }
            return false;
        }
        int diff = 0;
        int idx1 = -1;
        int idx2 = -1;
        for(int i = 0; i < n1; ++i) {
            if(word1[i] != word2[i]) {
                ++diff;
                if(diff > 2) return false;
                if(idx1 == -1) idx1 = i;
                else idx2 = i;
            }
        }
        if(diff != 2) return false;
        swap(word1[idx1], word1[idx2]);
        return word1 == word2;

=======

        if(word1.length() != word2.length()) return false;
        int n = word1.length();
        int a[26] = {0};
        int b[26] = {0};
        for(int i = 0; i < n; i++){
            a[word1[i]-'a']++;
            b[word2[i]-'a']++;
        }
        int cnt = 0;
        for(int i = 0; i < 26; i++){
            if(a[i] != b[i]) cnt++;
        }
        return cnt <= 2;

=======

        if (word1.length() != word2.length()) {
            return false;
        }
        if (word1 == word2) {
            return true;
        }
        vector<int> a(26, 0);
        vector<int> b(26, 0);
        for (int i = 0; i < word1.length(); i++) {
            a[word1[i] - 97]++;
            b[word2[i] - 97]++;
        }
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (a[i] > 0 && b[i] > 0) {
                count++;
            }
        }
        if (count == 0) {
            return false;
        }
        return true;

=======

        int n = word1.size();
        int m = word2.size();
        int i = 0, j = 0;
        int count = 0;
        while(i < n && j < m) {
            if(word1[i] != word2[j]) {
                count++;
            }
            i++;
            j++;
        }
        if(count > 2) {
            return false;
        }
        return true;
    }
    bool areDistinct(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        int i = 0, j = 0;
        int count = 0;
        unordered_map<char, int> mp;
        while(i < n && j < m) {
            if(word1[i] != word2[j]) {
                mp[word1[i]]++;
                mp[word2[j]]++;
            }
            i++;
            j++;
        }
        for(auto x: mp) {
            if(x.second > 1) {
                return false;
            }
        }
        return true;
    }
    bool areSame(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        int i = 0, j = 0;
        int count = 0;
        while(i < n && j < m) {
            if(word1[i] != word2[j]) {
                return false;
            }
            i++;
            j++;
        }
        return true;
    }
    bool areSameDistinct(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        int i = 0, j = 0;
        int count = 0;
        unordered_map<char, int> mp;
        while(i < n && j < m) {
            if(word1[i] != word2[j]) {
                mp[word1[i]]++;
                mp[word2[j]]++;
            }
            i++;
            j++;
        }
        for(auto x: mp) {
            if(x.second > 1) {
                return false;
            }
        }
        return true;

=======

        int n = word1.length(), m = word2.length();
        if (n != m) return false;
        if (word1 == word2) return true;
        vector<int> w1(26), w2(26);
        for (int i = 0; i < n; i++) {
            w1[word1[i] - 'a']++;
            w2[word2[i] - 'a']++;
        }
        int cnt = 0;
        for (int i = 0; i < 26; i++) {
            if (w1[i] && w2[i]) cnt++;
        }
        return cnt >= 1;

=======

        int n = word1.size();
        int m = word2.size();
        int i = 0;
        int j = 0;
        int count = 0;
        while(i < n && j < m)
        {
            if(word1[i] == word2[j])
            {
                i++;
                j++;
            }
            else
            {
                if(count == 1)
                    return false;
                else
                {
                    if(word1[i] < word2[j])
                    {
                        i++;
                    }
                    else
                    {
                        j++;
                    }
                    count++;
                }
            }
        }
        return true;
    }
    bool buddyStrings(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        if(n != m)
            return false;
        if(n == 1)
            return false;
        if(word1 == word2)
        {
            int count[26] = {0};
            for(int i = 0; i < n; i++)
            {
                count[word1[i] - 'a']++;
            }
            for(int i = 0; i < 26; i++)
            {
                if(count[i] > 1)
                    return true;
            }
            return false;
        }
        else
        {
            return isItPossible(word1, word2);
        }

=======

        int n = word1.size();
        int m = word2.size();
        if(n != m)
            return false;
        int cnt = 0;
        unordered_map<char,int> mp1, mp2;
        for(int i = 0; i < n; i++){
            mp1[word1[i]]++;
            mp2[word2[i]]++;
        }
        for(auto it = mp1.begin(); it != mp1.end(); it++){
            if(mp2.find(it->first) == mp2.end())
                cnt += it->second;
            else{
                if(mp2[it->first] < it->second){
                    cnt += (it->second - mp2[it->first]);
                }
            }
        }
        for(auto it = mp2.begin(); it != mp2.end(); it++){
            if(mp1.find(it->first) == mp1.end())
                cnt += it->second;
            else{
                if(mp1[it->first] < it->second){
                    cnt += (it->second - mp1[it->first]);
                }
            }
        }
        if(cnt == 2)
            return true;
        return false;
    }
    
    bool buddyStrings(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        if(n != m)
            return false;
        if(word1 == word2){
            unordered_map<char,int> mp;
            for(int i = 0; i < n; i++){
                mp[word1[i]]++;
            }
            for(auto it = mp.begin(); it != mp.end(); it++){
                if(it->second >= 2)
                    return true;
            }
            return false;
        }
        else{
            return isItPossible(word1, word2);
        }
