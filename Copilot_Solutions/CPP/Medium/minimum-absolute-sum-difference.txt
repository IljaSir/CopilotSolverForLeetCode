Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums1.size();
        vector<int> sorted = nums1;
        sort(sorted.begin(), sorted.end());
        int ans = 0, maxn = 0;
        for (int i = 0; i < n; i++) {
            int diff = abs(nums1[i] - nums2[i]);
            ans = (ans + diff) % 1000000007;
            int j = lower_bound(sorted.begin(), sorted.end(), nums2[i]) - sorted.begin();
            if (j < n) {
                maxn = max(maxn, diff - (sorted[j] - nums2[i]));
            }
            if (j > 0) {
                maxn = max(maxn, diff - (nums2[i] - sorted[j - 1]));
            }
        }
        return (ans - maxn + 1000000007) % 1000000007;

=======

        int n = nums1.size();
        vector<int> nums3 = nums1;
        sort(nums3.begin(), nums3.end());
        int maxDiff = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int diff = abs(nums1[i] - nums2[i]);
            sum = (sum + diff) % 1000000007;
            int index = lower_bound(nums3.begin(), nums3.end(), nums2[i]) - nums3.begin();
            if (index < n) {
                maxDiff = max(maxDiff, diff - (nums3[index] - nums2[i]));
            }
            if (index > 0) {
                maxDiff = max(maxDiff, diff - (nums2[i] - nums3[index - 1]));
            }
        }
        return (sum - maxDiff + 1000000007) % 1000000007;

=======

        int n = nums1.size();
        vector<int> sortedNums1(nums1);
        sort(sortedNums1.begin(), sortedNums1.end());
        long sum = 0;
        long maxDiff = 0;
        for (int i = 0; i < n; i++) {
            long diff = abs(nums1[i] - nums2[i]);
            sum += diff;
            int j = lower_bound(sortedNums1.begin(), sortedNums1.end(), nums2[i]) - sortedNums1.begin();
            if (j < n) {
                maxDiff = max(maxDiff, diff - (sortedNums1[j] - nums2[i]));
            }
            if (j > 0) {
                maxDiff = max(maxDiff, diff - (nums2[i] - sortedNums1[j - 1]));
            }
        }
        return (sum - maxDiff) % 1000000007;

=======

        int n = nums1.size();
        int mod = 1e9 + 7;
        vector<int> nums3(nums1);
        sort(nums3.begin(), nums3.end());
        int sum = 0, maxn = 0;
        for (int i = 0; i < n; ++i) {
            int diff = abs(nums1[i] - nums2[i]);
            sum = (sum + diff) % mod;
            int j = lower_bound(nums3.begin(), nums3.end(), nums2[i]) - nums3.begin();
            if (j < n) {
                maxn = max(maxn, diff - (nums3[j] - nums2[i]));
            }
            if (j > 0) {
                maxn = max(maxn, diff - (nums2[i] - nums3[j - 1]));
            }
        }
        return (sum - maxn + mod) % mod;

=======

        int n = nums1.size();
        long long sum = 0;
        int maxn = 0;
        multiset<int> s(nums1.begin(), nums1.end());
        for(int i = 0; i < n; ++i) {
            int diff = abs(nums1[i] - nums2[i]);
            sum += diff;
            auto it = s.lower_bound(nums2[i]);
            if(it != s.end()) {
                maxn = max(maxn, diff - (*it - nums2[i]));
            }
            if(it != s.begin()) {
                maxn = max(maxn, diff - (nums2[i] - *prev(it)));
            }
        }
        return (sum - maxn) % (int)(1e9 + 7);

=======

        int n = nums1.size();
        long long sum = 0;
        long long mod = 1e9 + 7;
        vector<int> nums1_copy = nums1;
        sort(nums1_copy.begin(), nums1_copy.end());
        long long res = 0;
        for (int i = 0; i < n; ++i) {
            int diff = abs(nums1[i] - nums2[i]);
            sum += diff;
            int pos = lower_bound(nums1_copy.begin(), nums1_copy.end(), nums2[i]) - nums1_copy.begin();
            if (pos < n) {
                res = max(res, (long long)diff - (nums1_copy[pos] - nums2[i]));
            }
            if (pos > 0) {
                res = max(res, (long long)diff - (nums2[i] - nums1_copy[pos - 1]));
            }
        }
        return (sum - res) % mod;

=======

        int n = nums1.size();
        int mod = 1e9 + 7;
        long long sum = 0;
        vector<int> sorted(nums1);
        sort(sorted.begin(), sorted.end());
        int maxn = 0;
        for (int i = 0; i < n; i++) {
            int diff = abs(nums1[i] - nums2[i]);
            sum += diff;
            int j = lower_bound(sorted.begin(), sorted.end(), nums2[i]) - sorted.begin();
            if (j < n) {
                maxn = max(maxn, diff - (sorted[j] - nums2[i]));
            }
            if (j > 0) {
                maxn = max(maxn, diff - (nums2[i] - sorted[j - 1]));
            }
        }
        return (sum - maxn) % mod;

=======

        int n = nums1.size();
        int diff = 0;
        int maxDiff = 0;
        int maxDiffIndex = 0;
        int minAbsDiff = 0;
        int minAbsDiffIndex = 0;
        for (int i = 0; i < n; i++) {
            diff = abs(nums1[i] - nums2[i]);
            minAbsDiff = diff;
            minAbsDiffIndex = i;
            for (int j = 0; j < n; j++) {
                if (abs(nums1[j] - nums2[i]) < minAbsDiff) {
                    minAbsDiff = abs(nums1[j] - nums2[i]);
                    minAbsDiffIndex = j;
                }
            }
            if (diff - minAbsDiff > maxDiff) {
                maxDiff = diff - minAbsDiff;
                maxDiffIndex = i;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += abs(nums1[i] - nums2[i]);
        }
        return sum - maxDiff;
