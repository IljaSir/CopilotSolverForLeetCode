Synthesizing 10/10 solutions

=======

        int ans = 0, maxn = 0;
        for (int i = 0; i < arr.size(); ++i) {
            maxn = max(maxn, arr[i]);
            if (maxn == i) ans++;
        }
        return ans;

=======

        int max = 0;
        int count = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (max == i) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        int max = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (max == i) {
                count++;
            }
        }
        return count;

=======

        int n = arr.size();
        int res = 0;
        int maxVal = 0;
        for (int i = 0; i < n; i++) {
            maxVal = max(maxVal, arr[i]);
            if (maxVal == i) {
                res++;
            }
        }
        return res;

=======

        int n = arr.size();
        int ans = 0;
        int maxVal = 0;
        for (int i = 0; i < n; ++i) {
            maxVal = max(maxVal, arr[i]);
            if (maxVal == i) {
                ++ans;
            }
        }
        return ans;

=======

        int n = arr.size();
        int ans = 0;
        int maxn = 0;
        for (int i = 0; i < n; ++i) {
            maxn = max(maxn, arr[i]);
            if (maxn == i) {
                ans++;
            }
        }
        return ans;

=======

        int n = arr.size();
        vector<int> max(n);
        max[0] = arr[0];
        for (int i = 1; i < n; ++i) {
            max[i] = max[i - 1] > arr[i] ? max[i - 1] : arr[i];
        }
        int count = 0;
        for (int i = 0; i < n; ++i) {
            if (i == max[i]) {
                ++count;
            }
        }
        return count;

=======

        int n = arr.size();
        vector<int> a(n);
        for (int i = 0; i < n; i++) {
            a[i] = arr[i];
        }
        sort(a.begin(), a.end());
        unordered_map<int, int> cnt;
        int res = 0;
        for (int i = 0; i < n; i++) {
            cnt[a[i]]++;
            cnt[arr[i]]--;
            if (cnt[a[i]] == 0) {
                cnt.erase(a[i]);
            }
            if (cnt[arr[i]] == 0) {
                cnt.erase(arr[i]);
            }
            if (cnt.empty()) {
                res++;
            }
        }
        return res;

=======

        int n = arr.size();
        vector<int> maxs(n, arr[0]);
        for (int i = 1; i < n; i++) {
            maxs[i] = max(maxs[i - 1], arr[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (maxs[i] == i) {
                res++;
            }
        }
        return res;

=======

        int n = arr.size();
        int chunk = 0;
        int max = 0;
        for (int i = 0; i < n; ++i) {
            if (arr[i] > max) {
                max = arr[i];
            }
            if (max == i) {
                ++chunk;
            }
        }
        return chunk;
