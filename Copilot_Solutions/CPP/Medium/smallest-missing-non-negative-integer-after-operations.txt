Synthesizing 10/10 solutions

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int mex = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] <= mex) {
                mex = nums[i] + value;
            } else {
                break;
            }
        }
        return mex;

=======

        vector<int> arr;
        for (int i = 0; i < nums.size(); i++) {
            arr.push_back(nums[i] + value);
            arr.push_back(nums[i] - value);
        }
        sort(arr.begin(), arr.end());
        int res = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] < res) continue;
            if (arr[i] > res) break;
            res++;
        }
        return res;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = max(ans, (nums[i] - ans) / value);
            ans += (nums[i] - ans) % value > 0;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; ++i) {
            if (nums[i] < 0) {
                value -= nums[i];
                res++;
            }
        }
        if (value <= 0) return res;
        int last = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] >= 0) {
                if (nums[i] - last > value) {
                    return res + value / (nums[i] - last) + (value % (nums[i] - last) != 0);
                } else {
                    value -= nums[i] - last;
                    res++;
                    last = nums[i];
                }
            }
        }
        return res + value / (last + 1) + (value % (last + 1) != 0);

=======

        int n = nums.size();
        vector<int> a(n);
        for(int i = 0; i < n; i++) {
            a[i] = nums[i] - value;
        }
        sort(a.begin(), a.end());
        int ans = 0;
        for(int i = 0; i < n; i++) {
            if(a[i] <= ans) {
                ans += 1;
            } else {
                break;
            }
        }
        return ans;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = 0, r = n - 1;
        int res = 0;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] - res * value <= 0) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
            res++;
        }
        return res;
    }
    int minOperations(vector<int>& nums, int x) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int target = sum - x;
        if (target == 0) return n;
        int res = -1;
        int l = 0, r = 0;
        int cur = 0;
        while (r < n) {
            while (r < n && cur < target) {
                cur += nums[r++];
            }
            if (cur == target) {
                res = max(res, r - l);
            }
            while (l < r && cur >= target) {
                cur -= nums[l++];
            }
            if (cur == target) {
                res = max(res, r - l);
            }
        }
        return res == -1 ? -1 : n - res;
    }
    int minOperations2(vector<int>& nums, int x) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int target = sum - x;
        if (target == 0) return n;
        int res = -1;
        int l = 0, r = 0;
        int cur = 0;
        while (r < n) {
            while (r < n && cur < target) {
                cur += nums[r++];
            }
            if (cur == target) {
                res = max(res, r - l);
            }
            while (l < r && cur >= target) {
                cur -= nums[l++];
            }
            if (cur == target) {
                res = max(res, r - l);
            }
        }
        return res == -1 ? -1 : n - res;

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int cur = 0;
        for (int i = 0; i < n; ++i) {
            int nxt = nums[i];
            if (nxt - cur > value) {
                return cur + value;
            }
            value -= nxt - cur;
            cur = nxt;
        }
        return cur + value;

=======

        int n = nums.size();
        sort(nums.begin(), nums.end());
        int m = nums[0];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (m < 0) {
                if (nums[i] > 0) {
                    ans += nums[i] / value;
                    if (nums[i] % value != 0) {
                        ans++;
                    }
                }
            } else {
                ans += (nums[i] - m) / value;
                if ((nums[i] - m) % value != 0) {
                    ans++;
                }
            }
            m = nums[i] + value;
        }
        return ans;
    }
    int smallestMissingValueSubtract(vector<int>& nums, int value) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        int m = nums[0];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (m < 0) {
                if (nums[i] > 0) {
                    ans += nums[i] / value;
                    if (nums[i] % value != 0) {
                        ans++;
                    }
                }
            } else {
                ans += (nums[i] - m) / value;
                if ((nums[i] - m) % value != 0) {
                    ans++;
                }
            }
            m = nums[i] - value;
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }
        int* count = new int[max + 1];
        for (int i = 0; i < max + 1; i++) {
            count[i] = 0;
        }
        for (int i = 0; i < nums.size(); i++) {
            count[nums[i]]++;
        }
        int sum = 0;
        for (int i = 0; i < max + 1; i++) {
            sum += count[i];
            if (sum == i) {
                continue;
            } else {
                return i;
            }
        }
        return max + 1;
    }
    int maximumMinimumPath(vector<vector<int>>& A) {
        int row = A.size();
        int column = A[0].size();
        int** dp = new int*[row];
        for (int i = 0; i < row; i++) {
            dp[i] = new int[column];
            for (int j = 0; j < column; j++) {
                dp[i][j] = 0;
            }
        }
        dp[0][0] = A[0][0];
        for (int i = 1; i < row; i++) {
            dp[i][0] = min(dp[i - 1][0], A[i][0]);
        }
        for (int j = 1; j < column; j++) {
            dp[0][j] = min(dp[0][j - 1], A[0][j]);
        }
        for (int i = 1; i < row; i++) {
            for (int j = 1; j < column; j++) {
                dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]), A[i][j]);
            }
        }
        return dp[row - 1][column - 1];

=======

        sort(nums.begin(), nums.end());
        int n = nums.size();
        int i = 0;
        int mx = 0;
        while (i < n && nums[i] < 0) {
            int j = i;
            while (j < n && nums[j] == nums[i]) {
                j++;
            }
            int cur = nums[i] + (j - i) * value;
            if (cur >= 0) {
                break;
            }
            mx = max(mx, j - i);
            i = j;
        }
        int ans = mx;
        for (int j = i; j < n; j++) {
            if (nums[j] - nums[i] > value * (j - i)) {
                ans = max(ans, j - i);
            }
        }
        return ans + 1;
