Synthesizing 10/10 solutions

=======

        int cnt = 0, n = binary.size();
        for (int i = 0; i < n; i++) {
            if (binary[i] == '0') cnt++;
        }
        if (cnt == 0) return binary;
        string ans = "";
        for (int i = 0; i < n; i++) {
            if (i < cnt - 1) ans += "1";
            else if (i == cnt - 1) ans += "0";
            else ans += "1";
        }
        return ans;

=======

        int n = binary.size();
        int i = 0;
        while (i < n && binary[i] == '1') {
            i++;
        }
        int j = i;
        while (j < n && binary[j] == '0') {
            j++;
        }
        int k = j;
        while (k < n && binary[k] == '1') {
            k++;
        }
        int cnt = k - j;
        binary[i] = '1';
        for (int i = 0; i < cnt; i++) {
            binary[j + i] = '1';
        }
        return binary;

=======

        int n = binary.length();
        int one = 0;
        int zero = 0;
        for (int i = 0; i < n; i++) {
            if (binary[i] == '0') {
                zero++;
            } else {
                one++;
            }
        }
        string res;
        res += '1';
        for (int i = 0; i < zero - 1; i++) {
            res += '1';
        }
        for (int i = 0; i < one; i++) {
            res += '0';
        }
        return res;

=======

        int n = binary.size();
        int count = 0;
        int i = 0;
        while (i < n && binary[i] == '1') {
            i++;
        }
        while (i < n) {
            if (binary[i] == '0') {
                count++;
            }
            i++;
        }
        string res = "";
        for (int j = 0; j < i - count - 1; j++) {
            res += "1";
        }
        res += "0";
        for (int j = 0; j < count; j++) {
            res += "1";
        }
        return res;

=======

        int n = binary.size();
        int i = 0;
        while (i < n && binary[i] == '1') {
            i++;
        }
        int cnt = 0;
        while (i < n) {
            cnt += binary[i] == '0';
            i++;
        }
        string ans = "";
        for (int i = 0; i < n - cnt - 1; i++) {
            ans += '1';
        }
        ans += '0';
        for (int i = 0; i < cnt; i++) {
            ans += '1';
        }
        return ans;

=======

        int n = binary.size();
        int i = 0;
        while (i < n && binary[i] == '1') {
            ++i;
        }
        
        int j = n - 1;
        while (j >= 0 && binary[j] == '1') {
            --j;
        }
        
        int count = 0;
        for (int k = i; k <= j; ++k) {
            if (binary[k] == '0') {
                ++count;
            }
        }
        
        string res;
        for (int k = 0; k < i; ++k) {
            res += '1';
        }
        
        if (i <= j) {
            res += '1';
            --count;
        }
        
        for (int k = 0; k < count; ++k) {
            res += '0';
        }
        
        for (int k = j + 1; k < n; ++k) {
            res += '1';
        }
        
        return res;

=======

        int n = binary.size();
        int i = 0;
        int j = n - 1;
        while (i < n && binary[i] == '1') i++;
        while (j >= 0 && binary[j] == '0') j--;
        if (i > j) return binary;
        string res = binary.substr(0, i);
        res += string(j - i, '1');
        res += string(n - j, '0');
        return res;

=======

        int n = binary.size();
        int cnt = 0;
        int i = 0;
        for (; i < n; i++) {
            if (binary[i] == '1') {
                cnt++;
            } else {
                break;
            }
        }
        if (i == n) {
            return binary;
        }
        int j = n - 1;
        while (binary[j] == '0') {
            j--;
        }
        int cnt2 = n - j - 1;
        return string(cnt, '1') + string(n - cnt - cnt2, '0') + string(cnt2, '1');

=======

        int n = binary.length();
        int i = 0;
        while (i < n) {
            if (binary[i] == '0') {
                break;
            }
            i++;
        }
        int j = i + 1;
        while (j < n) {
            if (binary[j] == '0') {
                i++;
            }
            j++;
        }
        for (int k = 0; k < n; k++) {
            if (k < i) {
                binary[k] = '1';
            } else {
                binary[k] = '0';
            }
        }
        return binary;

=======

        int n = binary.size();
        int cnt = 0;
        for (char c : binary) {
            if (c == '1') cnt++;
        }
        if (cnt == n) return binary;
        int i = 0;
        while (i < n && binary[i] == '1') i++;
        int j = i;
        while (j < n && binary[j] == '0') j++;
        string res = binary.substr(0, i);
        res += "1";
        res += string(j - i - 1, '1');
        res += string(n - j, '0');
        return res;
