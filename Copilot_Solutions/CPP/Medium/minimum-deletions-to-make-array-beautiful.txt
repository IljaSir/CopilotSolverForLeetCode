Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                count++;
                i++;
            }
        }
        return count;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                ans++;
                i++;
            }
        }
        return ans;

=======

        int n = nums.size();
        int dp[n];
        dp[0] = 0;
        dp[1] = nums[0] == nums[1] ? 1 : 0;
        for (int i = 2; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            } else {
                dp[i] = dp[i - 2];
            }
        }
        return dp[n - 1];

=======

        int n = nums.size();
        int res = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                res++;
                if (i + 2 < n && nums[i + 2] == nums[i]) {
                    nums[i + 1] = -1;
                }
            }
        }
        return res;

=======

        int n = nums.size();
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                ans++;
            } else if (i < n - 1 && nums[i] == nums[i + 1]) {
                ans++;
                nums[i + 1] = nums[i] - 1;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0) return 0;
        vector<int> dp(n, 1);
        for (int i = 1; i < n; i++) {
            if (nums[i] != nums[i - 1]) {
                dp[i] = dp[i - 1] + 1;
            }
        }
        return n - *max_element(dp.begin(), dp.end());

=======

        int n = nums.size();
        if (n == 0) return 0;
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i-1]) {
                ans++;
                i++;
            }
        }
        return ans;

=======

        int n = nums.size();
        if (n == 0) return 0;
        int dp[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i-1]) {
                dp[i] = dp[i-1] + 1;
            } else {
                dp[i] = dp[i-1];
            }
        }
        return dp[n-1];
    }
    int minimumDeletions(string s) {
        int n = s.length();
        vector<int> nums;
        for (int i = 0; i < n; i++) {
            if (s[i] == 'a') {
                nums.push_back(1);
            } else {
                nums.push_back(2);
            }
        }
        return min(minDeletion(nums), minDeletion(vector<int>(nums.rbegin(), nums.rend())));

=======

        int n = nums.size();
        int ans = 0;
        for(int i = 1; i < n; ++i) {
            if(nums[i] == nums[i - 1]) {
                ans++;
                if(i < n - 1 && nums[i + 1] != nums[i - 1]) {
                    nums[i] = nums[i - 1] + 1;
                }
            }
        }
        return ans;
    }
    int minimumDeletions(string s) {
        int n = s.size();
        vector<int> a(n), b(n);
        for(int i = 0; i < n; ++i) {
            a[i] = (s[i] == 'a');
            b[i] = (s[i] == 'b');
        }
        for(int i = n - 2; i >= 0; --i) {
            a[i] += a[i + 1];
            b[i] += b[i + 1];
        }
        int ans = a[0] + b[0];
        for(int i = 0; i < n; ++i) {
            ans = min(ans, a[i] + b[i] - (s[i] == 'a'));
        }
        return ans;
    }
    int minimumDeletions(string s) {
        int n = s.size();
        vector<int> a(n), b(n);
        for(int i = 0; i < n; ++i) {
            a[i] = (s[i] == 'a');
            b[i] = (s[i] == 'b');
        }
        for(int i = n - 2; i >= 0; --i) {
            a[i] += a[i + 1];
            b[i] += b[i + 1];
        }
        int ans = a[0] + b[0];
        for(int i = 0; i < n; ++i) {
            ans = min(ans, a[i] + b[i] - (s[i] == 'a'));
        }
        return ans;
