Synthesizing 10/10 solutions

=======

        int n = dist.size();
        if (hour < n - 1) return -1;
        int l = 1, r = 1e7;
        while (l < r) {
            int mid = (l + r) >> 1;
            double time = 0;
            for (int i = 0; i < n - 1; i++) {
                time += ceil(dist[i] * 1.0 / mid);
            }
            time += dist[n - 1] * 1.0 / mid;
            if (time <= hour) r = mid;
            else l = mid + 1;
        }
        return l;

=======

        int n = dist.size();
        if (hour <= n - 1) return -1;
        int l = 1, r = 1e7;
        while (l < r) {
            int m = l + (r - l) / 2;
            double sum = 0;
            for (int i = 0; i < n - 1; ++i) {
                sum += (dist[i] + m - 1) / m;
            }
            sum += (double)dist.back() / m;
            if (sum <= hour) r = m;
            else l = m + 1;
        }
        return l;

=======

        int n = dist.size();
        if (n - 1 >= hour) {
            return -1;
        }
        int l = 1, r = 1e7;
        while (l < r) {
            int mid = l + (r - l) / 2;
            double time = 0;
            for (int i = 0; i < n - 1; i++) {
                time += ceil((double)dist[i] / (double)mid);
            }
            time += (double)dist[n - 1] / (double)mid;
            if (time <= hour) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;

=======

        int n = dist.size();
        int l = 1, r = 1e7;
        while (l < r) {
            int mid = (l + r) / 2;
            double t = 0;
            for (int i = 0; i < n - 1; i++)
                t += ceil(dist[i] * 1.0 / mid);
            t += dist[n - 1] * 1.0 / mid;
            if (t > hour)
                l = mid + 1;
            else
                r = mid;
        }
        return l == 1e7 ? -1 : l;

=======

        int n = dist.size();
        int l = 1, r = 1e7;
        while (l < r) {
            int mid = (l + r) / 2;
            double t = 0;
            for (int i = 0; i < n - 1; i++) {
                t += ceil(dist[i] * 1.0 / mid);
            }
            t += (dist[n - 1] * 1.0 / mid);
            if (t > hour) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return r == 1e7 ? -1 : r;

=======

        int n = dist.size();
        int l = 1, r = 1e7;
        while (l < r) {
            int mid = (l + r) / 2;
            double time = 0;
            for (int i = 0; i < n - 1; i++) {
                time += ceil(dist[i] * 1.0 / mid);
            }
            time += dist[n - 1] * 1.0 / mid;
            if (time <= hour) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l > 1e7 ? -1 : l;

=======

        int n = dist.size();
        if (n-1 > hour) return -1;
        int l = 1, r = 1e7;
        while (l < r) {
            int m = (l+r)/2;
            double t = 0;
            for (int i = 0; i < n-1; i++) {
                t += ceil(dist[i]*1.0/m);
            }
            t += dist[n-1]*1.0/m;
            if (t <= hour) r = m;
            else l = m+1;
        }
        return l;

=======

        int n = dist.size();
        int l = 1, r = 1e7;
        while(l < r) {
            int mid = (l + r) / 2;
            double t = 0;
            for(int i = 0; i < n - 1; ++i) {
                t += ceil(dist[i] * 1.0 / mid);
            }
            t += dist[n - 1] * 1.0 / mid;
            if(t <= hour) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l >= 1e7 ? -1 : l;

=======

        int n = dist.size();
        int l = 1, r = 1e7;
        while(l < r) {
            int m = l + (r - l) / 2;
            double time = 0;
            for(int i = 0; i < n - 1; i++) {
                time += (dist[i] + m - 1) / m;
            }
            time += 1.0 * dist[n - 1] / m;
            if(time <= hour) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l == 1e7 ? -1 : l;

=======

        long long int n = dist.size();
        long long int max_speed = 1e7;
        long long int min_speed = 1;
        long long int ans = -1;
        while(min_speed <= max_speed) {
            long long int mid = (min_speed + max_speed) / 2;
            double time = 0;
            for(int i = 0; i < n - 1; i++) {
                time += ceil((double)dist[i] / mid);
            }
            time += (double)dist[n - 1] / mid;
            if(time <= hour) {
                ans = mid;
                max_speed = mid - 1;
            } else {
                min_speed = mid + 1;
            }
        }
        return ans;
