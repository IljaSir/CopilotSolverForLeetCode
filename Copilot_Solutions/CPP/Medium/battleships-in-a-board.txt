Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (board[i][j] == 'X') {
                    if ((i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.')) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (board[i][j] == 'X') {
                    if (i > 0 && board[i - 1][j] == 'X') {
                        continue;
                    }
                    if (j > 0 && board[i][j - 1] == 'X') {
                        continue;
                    }
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[i].size(); j++) {
                if (board[i][j] == 'X') {
                    if (i == 0 && j == 0) {
                        count++;
                    } else if (i == 0) {
                        if (board[i][j-1] == '.') {
                            count++;
                        }
                    } else if (j == 0) {
                        if (board[i-1][j] == '.') {
                            count++;
                        }
                    } else {
                        if (board[i][j-1] == '.' && board[i-1][j] == '.') {
                            count++;
                        }
                    }
                }
            }
        }
        return count;

=======

        int m = board.size();
        int n = board[0].size();
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'X') {
                    if ((i == 0 || board[i - 1][j] == '.') && (j == 0 || board[i][j - 1] == '.')) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int m = board.size();
        int n = board[0].size();
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'X') {
                    if (i > 0 && board[i - 1][j] == 'X') {
                        continue;
                    }
                    if (j > 0 && board[i][j - 1] == 'X') {
                        continue;
                    }
                    count++;
                }
            }
        }
        return count;

=======

        int m = board.size();
        int n = board[0].size();
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'X') {
                    if (i > 0 && board[i - 1][j] == 'X') {
                        continue;
                    }
                    if (j > 0 && board[i][j - 1] == 'X') {
                        continue;
                    }
                    res++;
                }
            }
        }
        return res;

=======

        int count = 0;
        for (int r = 0; r < board.size(); r++) {
            for (int c = 0; c < board[0].size(); c++) {
                if (board[r][c] == 'X') {
                    if ((r == 0 || board[r - 1][c] == '.') && (c == 0 || board[r][c - 1] == '.')) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int m = board.size();
        int n = board[0].size();
        int cnt = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 'X' && (i == 0 || board[i-1][j] == '.') && (j == 0 || board[i][j-1] == '.')){
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int n = board.size(), m = board[0].size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == 'X') {
                    ++res;
                    if (i > 0 && board[i - 1][j] == 'X') {
                        --res;
                    }
                    if (j > 0 && board[i][j - 1] == 'X') {
                        --res;
                    }
                }
            }
        }
        return res;
