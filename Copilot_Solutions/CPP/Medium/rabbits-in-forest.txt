Synthesizing 10/10 solutions

=======

        unordered_map<int, int> m;
        for (auto a : answers) {
            m[a]++;
        }
        int res = 0;
        for (auto it = m.begin(); it != m.end(); it++) {
            int count = it->second;
            int color = it->first;
            while (count > 0) {
                res += (color + 1);
                count -= (color + 1);
            }
        }
        return res;

=======

        unordered_map<int, int> count;
        for (int ans : answers) {
            ++count[ans];
        }
        int ans = 0;
        for (auto [x, y] : count) {
            ans += (y + x) / (x + 1) * (x + 1);
        }
        return ans;

=======

        int n = answers.size();
        int res = 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            m[answers[i]]++;
        }
        for (auto it = m.begin(); it != m.end(); it++) {
            int x = it->first;
            int y = it->second;
            res += (y + x) / (x + 1) * (x + 1);
        }
        return res;

=======

        int n = answers.size();
        if (n == 0) return 0;
        if (n == 1) return answers[0] + 1;
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            ++m[answers[i]];
        }
        int ans = 0;
        for (auto& p : m) {
            int x = p.first;
            int y = p.second;
            ans += (y + x) / (x + 1) * (x + 1);
        }
        return ans;

=======

        int n = answers.size();
        if (n == 0) return 0;
        int res = 0;
        unordered_map<int, int> m;
        for (int i = 0; i < n; ++i) {
            if (m[answers[i]] > 0) {
                --m[answers[i]];
            } else {
                res += answers[i] + 1;
                m[answers[i]] = answers[i];
            }
        }
        return res;

=======

        int ans = 0;
        unordered_map<int, int> m;
        for(int i = 0; i < answers.size(); i++){
            m[answers[i]]++;
        }
        for(auto it = m.begin(); it != m.end(); it++){
            int key = it->first;
            int value = it->second;
            ans += (value + key) / (key + 1) * (key + 1);
        }
        return ans;

=======

        int n = answers.size();
        if (n == 0) return 0;
        sort(answers.begin(), answers.end());
        int ans = 1;
        int cnt = 1;
        for (int i = 1; i < n; i++) {
            if (answers[i] == answers[i - 1]) {
                cnt++;
                if (cnt > answers[i] + 1) {
                    ans += answers[i] + 1;
                    cnt = 1;
                }
            } else {
                ans += answers[i - 1] + 1;
                cnt = 1;
            }
        }
        ans += answers[n - 1];
        return ans;

=======

        int result = 0;
        unordered_map<int, int> m;
        for (auto& a : answers) {
            if (m.find(a) == m.end()) {
                m[a] = a;
                result += a + 1;
            } else {
                if (m[a] == 0) {
                    m[a] = a;
                    result += a + 1;
                } else {
                    m[a]--;
                }
            }
        }
        return result;

=======

        map<int, int> m;
        for (auto &ans : answers) {
            m[ans]++;
        }
        int res = 0;
        for (auto &kv : m) {
            res += (kv.second + kv.first) / (kv.first + 1) * (kv.first + 1);
        }
        return res;

=======

        if (answers.empty()) return 0;
        int res = 0;
        unordered_map<int, int> m;
        for (auto& answer : answers) {
            if (m[answer] == 0) {
                res += answer + 1;
            }
            m[answer] = (m[answer] + 1) % (answer + 1);
        }
        return res;
