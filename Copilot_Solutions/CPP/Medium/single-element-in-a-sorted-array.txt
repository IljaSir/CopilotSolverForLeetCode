Synthesizing 10/10 solutions

=======

        int low = 0, high = nums.size() - 1;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (mid % 2 == 1) mid--;
            if (nums[mid] == nums[mid + 1]) {
                low = mid + 2;
            } else {
                high = mid;
            }
        }
        return nums[low];

=======

        int l = 0, r = nums.size() - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (mid % 2 == 1) mid--;
            if (nums[mid] == nums[mid + 1]) l = mid + 2;
            else r = mid;
        }
        return nums[l];

=======

        int l = 0, r = nums.size() - 1, m;
        while (l < r) {
            m = l + (r - l) / 2;
            if (m % 2 == 1) --m;
            if (nums[m] == nums[m + 1]) l = m + 2;
            else r = m;
        }
        return nums[l];

=======

        int l = 0, r = nums.size() - 1;
        while (l < r) {
            int mid = (l + r) / 2;
            if (mid % 2 == 1) mid--;
            if (nums[mid] == nums[mid + 1]) {
                l = mid + 2;
            } else {
                r = mid;
            }
        }
        return nums[l];

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (mid % 2 == 1) mid--;
            if (nums[mid] == nums[mid + 1]) l = mid + 2;
            else r = mid;
        }
        return nums[l];

=======

        int l = 0;
        int r = nums.size() - 1;
        
        while (l < r) {
            int m = l + (r - l) / 2;
            if (m % 2 == 1) {
                m--;
            }
            if (nums[m] == nums[m+1]) {
                l = m + 2;
            } else {
                r = m;
            }
        }
        
        return nums[l];

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int m = (l + r) >> 1;
            if (m & 1) --m;
            if (nums[m] == nums[m + 1]) {
                l = m + 2;
            } else {
                r = m;
            }
        }
        return nums[l];

=======

        int n = nums.size();
        int l = 0, r = n - 1;
        while (l < r) {
            int m = (l + r) >> 1;
            if (m % 2 == 1) m--;
            if (nums[m] == nums[m + 1]) {
                l = m + 2;
            } else {
                r = m;
            }
        }
        return nums[l];

=======

        int len = nums.size();
        int i = 0;
        while (i < len) {
            if (i == len - 1) {
                return nums[i];
            }
            if (nums[i] == nums[i + 1]) {
                i += 2;
            } else {
                return nums[i];
            }
        }
        return nums[i];

=======

        int n = nums.size();
        int l = 0, r = n-1;
        while(l<=r){
            int m = l+(r-l)/2;
            if(m>0 && nums[m]==nums[m-1]){
                if((m-1)%2) r = m-2;
                else l = m+1;
            }
            else if(m<n-1 && nums[m]==nums[m+1]){
                if(m%2) r = m-1;
                else l = m+2;
            }
            else return nums[m];
        }
        return -1;
