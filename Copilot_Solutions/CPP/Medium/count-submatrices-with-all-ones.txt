Synthesizing 10/10 solutions

=======

        int m = mat.size();
        int n = mat[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                }
                int width = INT_MAX;
                for (int k = i; k >= 0; k--) {
                    width = min(width, dp[k][j]);
                    ans += width;
                }
            }
        }
        return ans;

=======

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) continue;
                dp[i][j] = j > 0 ? dp[i][j - 1] + 1 : 1;
                int width = dp[i][j];
                for (int k = i; k >= 0; k--) {
                    width = min(width, dp[k][j]);
                    res += width;
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0 && mat[i][j] == 1) {
                    mat[i][j] += mat[i - 1][j];
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int minVal = INT_MAX;
                for (int k = i; k >= 0; k--) {
                    minVal = min(minVal, mat[k][j]);
                    ans += minVal;
                }
            }
        }
        return ans;

=======

        int m = mat.size();
        int n = mat[0].size();
        int res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                    int minW = dp[i][j];
                    for (int k = i; k >= 0; k--) {
                        minW = min(minW, dp[k][j]);
                        res += minW;
                    }
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        int res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 0) continue;
                dp[i][j] = j == 0 ? 1 : dp[i][j-1] + 1;
                int width = dp[i][j];
                for (int k = i; k >= 0; k--) {
                    width = min(width, dp[k][j]);
                    res += width;
                }
            }
        }
        return res;

=======

        int m = mat.size(), n = mat[0].size();
        int res = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) continue;
                dp[i][j] = j == 0 ? 1 : dp[i][j - 1] + 1;
                int width = dp[i][j];
                for (int k = i; k >= 0; --k) {
                    width = min(width, dp[k][j]);
                    res += width;
                }
            }
        }
        return res;

=======

        int m = mat.size(), n = mat[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int ret = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 0) continue;
                dp[i][j] = j == 0 ? 1 : dp[i][j-1] + 1;
                int minlen = dp[i][j];
                for (int k = i; k >= 0; --k) {
                    minlen = min(minlen, dp[k][j]);
                    ret += minlen;
                }
            }
        }
        return ret;

=======

        int m = mat.size();
        int n = mat[0].size();
        int res = 0;
        vector<vector<int>> dp(m, vector<int>(n));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 1) {
                    dp[i][j] = (j == 0 ? 0 : dp[i][j - 1]) + 1;
                    int min_width = dp[i][j];
                    for (int k = i; k >= 0; --k) {
                        min_width = min(min_width, dp[k][j]);
                        res += min_width;
                    }
                }
            }
        }
        return res;

=======

        int m = mat.size();
        int n = mat[0].size();
        int res = 0;
        vector<int> height(n, 0);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                height[j] = mat[i][j] == 0 ? 0 : height[j] + 1;
            }
            res += count(height);
        }
        return res;
    }
    int count(vector<int>& height) {
        int res = 0;
        for (int i = 0; i < height.size(); i++) {
            int minh = INT_MAX;
            for (int j = i; j < height.size(); j++) {
                minh = min(minh, height[j]);
                res += minh;
            }
        }
        return res;

=======

        int n = mat.size(), m = mat[0].size();
        int res = 0;
        vector<int> dp(m, 0);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (mat[i][j] == 1) {
                    dp[j] += 1;
                } else {
                    dp[j] = 0;
                }
            }
            res += count(dp);
        }
        return res;
