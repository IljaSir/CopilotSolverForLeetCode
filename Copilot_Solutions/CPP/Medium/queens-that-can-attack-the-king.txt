Synthesizing 10/10 solutions

=======

        vector<vector<int>> result;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto queen : queens) {
            board[queen[0]][queen[1]] = 1;
        }
        int x = king[0];
        int y = king[1];
        // left
        for (int i = x; i >= 0; i--) {
            if (board[i][y] == 1) {
                result.push_back({i, y});
                break;
            }
        }
        // right
        for (int i = x; i < 8; i++) {
            if (board[i][y] == 1) {
                result.push_back({i, y});
                break;
            }
        }
        // up
        for (int i = y; i >= 0; i--) {
            if (board[x][i] == 1) {
                result.push_back({x, i});
                break;
            }
        }
        // down
        for (int i = y; i < 8; i++) {
            if (board[x][i] == 1) {
                result.push_back({x, i});
                break;
            }
        }
        // left-up
        for (int i = x, j = y; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                result.push_back({i, j});
                break;
            }
        }
        // left-down
        for (int i = x, j = y; i >= 0 && j < 8; i--, j++) {
            if (board[i][j] == 1) {
                result.push_back({i, j});
                break;
            }
        }
        // right-up
        for (int i = x, j = y; i < 8 && j >= 0; i++, j--) {
            if (board[i][j] == 1) {
                result.push_back({i, j});
                break;
            }
        }
        // right-down
        for (int i = x, j = y; i < 8 && j < 8; i++, j++) {
            if (board[i][j] == 1) {
                result.push_back({i, j});

=======

        vector<vector<int>> res;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto& q : queens) {
            board[q[0]][q[1]] = 1;
        }
        int x = king[0], y = king[1];
        int dx[] = {0, 0, 1, 1, 1, -1, -1, -1};
        int dy[] = {1, -1, 0, 1, -1, 0, 1, -1};
        for (int i = 0; i < 8; ++i) {
            for (int j = 1; j < 8; ++j) {
                int nx = x + dx[i] * j;
                int ny = y + dy[i] * j;
                if (nx < 0 || nx >= 8 || ny < 0 || ny >= 8) break;
                if (board[nx][ny] == 1) {
                    res.push_back({nx, ny});
                    break;
                }
            }
        }
        return res;

=======

        vector<vector<int>> ans;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto& q : queens) {
            board[q[0]][q[1]] = 1;
        }
        for (int i = king[0] - 1; i >= 0; --i) {
            if (board[i][king[1]]) {
                ans.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[0] + 1; i < 8; ++i) {
            if (board[i][king[1]]) {
                ans.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[1] - 1; i >= 0; --i) {
            if (board[king[0]][i]) {
                ans.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[1] + 1; i < 8; ++i) {
            if (board[king[0]][i]) {
                ans.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] - 1; i >= 0 && j >= 0; --i, --j) {
            if (board[i][j]) {
                ans.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] + 1; i < 8 && j < 8; ++i, ++j) {
            if (board[i][j]) {
                ans.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] + 1; i >= 0 && j < 8; --i, ++j) {
            if (board[i][j]) {
                ans.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] - 1; i < 8 && j >= 0; ++i, --j) {

=======

        vector<vector<int>> res;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto& queen : queens) {
            board[queen[0]][queen[1]] = 1;
        }
        for (int i = king[0] - 1; i >= 0; --i) {
            if (board[i][king[1]] == 1) {
                res.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[0] + 1; i < 8; ++i) {
            if (board[i][king[1]] == 1) {
                res.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[1] - 1; i >= 0; --i) {
            if (board[king[0]][i] == 1) {
                res.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[1] + 1; i < 8; ++i) {
            if (board[king[0]][i] == 1) {
                res.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] - 1; i >= 0 && j >= 0; --i, --j) {
            if (board[i][j] == 1) {
                res.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] + 1; i < 8 && j < 8; ++i, ++j) {
            if (board[i][j] == 1) {
                res.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] - 1; i < 8 && j >= 0; ++i, --j) {
            if (board[i][j] == 1) {
                res.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] -

=======

        vector<vector<int>> res;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto &q : queens) {
            board[q[0]][q[1]] = 1;
        }
        int x = king[0];
        int y = king[1];
        for (int i = 1; i < 8; ++i) {
            if (x + i < 8 && y + i < 8 && board[x + i][y + i] == 1) {
                res.push_back({x + i, y + i});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (x - i >= 0 && y - i >= 0 && board[x - i][y - i] == 1) {
                res.push_back({x - i, y - i});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (x + i < 8 && y - i >= 0 && board[x + i][y - i] == 1) {
                res.push_back({x + i, y - i});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (x - i >= 0 && y + i < 8 && board[x - i][y + i] == 1) {
                res.push_back({x - i, y + i});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (x + i < 8 && board[x + i][y] == 1) {
                res.push_back({x + i, y});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (x - i >= 0 && board[x - i][y] == 1) {
                res.push_back({x - i, y});
                break;
            }
        }
        for (int i = 1; i < 8; ++i) {
            if (y + i < 8 && board[x][y + i] == 1) {

=======

        vector<vector<int>> result;
        vector<vector<bool>> board(8, vector<bool>(8, false));
        for (auto& q : queens) {
            board[q[0]][q[1]] = true;
        }
        for (int i = king[0] - 1; i >= 0; i--) {
            if (board[i][king[1]]) {
                result.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[0] + 1; i < 8; i++) {
            if (board[i][king[1]]) {
                result.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[1] - 1; i >= 0; i--) {
            if (board[king[0]][i]) {
                result.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[1] + 1; i < 8; i++) {
            if (board[king[0]][i]) {
                result.push_back({king[0], i});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j]) {
                result.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] + 1; i < 8 && j < 8; i++, j++) {
            if (board[i][j]) {
                result.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] + 1; i >= 0 && j < 8; i--, j++) {
            if (board[i][j]) {
                result.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] - 1; i < 8 && j >= 0; i++, j--) {
            if (board[i][j]) {
                result.push_back({

=======

        vector<vector<int>> res;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto& queen: queens) {
            board[queen[0]][queen[1]] = 1;
        }
        int x = king[0];
        int y = king[1];
        int x1 = x;
        int y1 = y;
        // up
        while (x1 >= 0) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            x1--;
        }
        // down
        x1 = x;
        y1 = y;
        while (x1 < 8) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            x1++;
        }
        // left
        x1 = x;
        y1 = y;
        while (y1 >= 0) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            y1--;
        }
        // right
        x1 = x;
        y1 = y;
        while (y1 < 8) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            y1++;
        }
        // up-left
        x1 = x;
        y1 = y;
        while (x1 >= 0 && y1 >= 0) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            x1--;
            y1--;
        }
        // up-right
        x1 = x;
        y1 = y;
        while (x1 >= 0 && y1 < 8) {
            if (board[x1][y1] == 1) {
                res.push_back({x1, y1});
                break;
            }
            x1--;
            y1++;
        }
        // down-left
        x1 = x;
        y1 = y;
        while (x1 < 8 && y1 >=

=======

        vector<vector<int>> ret;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (auto& queen : queens) {
            board[queen[0]][queen[1]] = 1;
        }
        for (int i = king[0] - 1; i >= 0; i--) {
            if (board[i][king[1]] == 1) {
                ret.push_back({i, king[1]});
                break;
            }
        }
        for (int i = king[0] + 1; i < 8; i++) {
            if (board[i][king[1]] == 1) {
                ret.push_back({i, king[1]});
                break;
            }
        }
        for (int j = king[1] - 1; j >= 0; j--) {
            if (board[king[0]][j] == 1) {
                ret.push_back({king[0], j});
                break;
            }
        }
        for (int j = king[1] + 1; j < 8; j++) {
            if (board[king[0]][j] == 1) {
                ret.push_back({king[0], j});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                ret.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] + 1; i < 8 && j < 8; i++, j++) {
            if (board[i][j] == 1) {
                ret.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] - 1, j = king[1] + 1; i >= 0 && j < 8; i--, j++) {
            if (board[i][j] == 1) {
                ret.push_back({i, j});
                break;
            }
        }
        for (int i = king[0] + 1, j = king[1] -

=======

        int n = queens.size();
        vector<vector<int>> ans;
        vector<vector<int>> board(8, vector<int>(8, 0));
        for (int i = 0; i < n; ++i) {
            board[queens[i][0]][queens[i][1]] = 1;
        }
        int x = king[0], y = king[1];
        int i = x, j = y;
        while (i >= 0 && j >= 0) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            --i;
            --j;
        }
        i = x;
        j = y;
        while (i >= 0 && j < 8) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            --i;
            ++j;
        }
        i = x;
        j = y;
        while (i < 8 && j >= 0) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            ++i;
            --j;
        }
        i = x;
        j = y;
        while (i < 8 && j < 8) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            ++i;
            ++j;
        }
        i = x;
        j = y;
        while (i >= 0) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            --i;
        }
        i = x;
        j = y;
        while (i < 8) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            ++i;
        }
        i = x;
        j = y;
        while (j >= 0) {
            if (board[i][j] == 1) {
                ans.push_back({i, j});
                break;
            }
            --j;
        }
        i = x;
        j = y;
        while (j <

=======

        vector<vector<int>> ans;
        bool flag[8][8];
        memset(flag, 0, sizeof(flag));
        for (auto& v : queens) {
            flag[v[0]][v[1]] = true;
        }
        vector<int> dx = {0, 0, 1, -1, 1, -1, 1, -1};
        vector<int> dy = {1, -1, 0, 0, 1, -1, -1, 1};
        for (int i = 0; i < 8; i++) {
            int x = king[0] + dx[i];
            int y = king[1] + dy[i];
            while (x >= 0 && x < 8 && y >= 0 && y < 8) {
                if (flag[x][y]) {
                    ans.push_back({x, y});
                    break;
                }
                x += dx[i];
                y += dy[i];
            }
        }
        return ans;
