Synthesizing 10/10 solutions

=======

        unordered_map<string, string> dict = {
            {"&quot;", "\""},
            {"&apos;", "'"},
            {"&amp;", "&"},
            {"&gt;", ">"},
            {"&lt;", "<"},
            {"&fraul;", "/"},
        };
        snordered_map<string, string> dict = {
            {"&quot;", "\""}, ++i) {
            if(text[] == '&') {
                for (auto& p : dict) {
                    if (text.substr(i, p.first.size()) == p.first) {
                        res = p.second;
                        i = p.first.size( - 1;
                        goto next;
                   }
                }
            }
            res += text[i];
        next:
            continue;
        }
        return res;

=======

        string res;
        for (int i = 0; i < text.size(); i++) 
            {"&apos;", "'"},
            {"&amp;", "&"},
            {"&gt;", ">"},
            {"&lt;", "<"},
            {"&frasl;", "/"},
        };
        string res;
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
                for (auto& p : dict) {
                    if (text.substr(i, p.first.size()) == p.first) {
                        res += p.second;
                        i += p.first.size() - 1;
                        goto next;
                    }
                }
            }
            res += text[i];
        next:
            continue;
        }
        return res;

=======

        string res;
        for (int i = 0; i < text.size(); i++) {
            if (text[i] == '&') {
                if (text.substr(i, 6) == "&quot;") {
                    res += '\"';
                    i += 5;
                } else if (text.substr(i, 6) == "&apos;") {
                    res += '\'';
                    i += 5;
                } else if (text.substr(i, 5) == "&amp;") {
                    res += '&';
                    i += 4;
                } else if (text.substr(i, 4) == "&gt;") {
                    res += '>';
                    i += 3;
                } else if (text.substr(i, 4) == "&lt;") {
                    res += '<';
                    i += 3;
                } else if (text.substr(i, 6) == "&frasl;") {
                    res += '/';
                    i += 5;
                } else {
                    res += text[i];
                }
            } else {
                res += text[i];
            }
        }
        return res;

=======

        string result;
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
                if (text.substr(i, 6) == "&quot;") {
                    result += '"';
                    i += 5;
                } else if (text.substr(i, 6) == "&apos;") {
                    result += '\'';
                    i += 5;
                } else if (text.substr(i, 5) == "&amp;") {
                    result += '&';
                    i += 4;
                } else if (text.substr(i, 4) == "&gt;") {
                    result += '>';
                    i += 3;
                } else if (text.substr(i, 4) == "&lt;") {
                    result += '<';
                    i += 3;
                } else if (text.substr(i, 7) == "&frasl;") {
                    result += '/';
                    i += 6;
                } else {
                    result += text[i];
                }
            } else {
                result += text[i];
            }
        }
        return result;

=======

        string result;
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
                if (text.substr(i, 6) == "&quot;") {
                    result += '\"';
                    i += 5;
                } else if (text.substr(i, 6) == "&apos;") {
                    result += '\'';
                    i += 5;
                } else if (text.substr(i, 5) == "&amp;") {
                    result += '&';
                    i += 4;
                } else if (text.substr(i, 4) == "&gt;") {
                    result += '>';
                    i += 3;
                } else if (text.substr(i, 4) == "&lt;") {
                    result += '<';
                    i += 3;
                } else if (text.substr(i, 7) == "&frasl;") {
                    result += '/';
                    i += 6;
                } else {
                    result += text[i];
                }
            } else {
                result += text[i];
            }
        }
        return result;

=======

        string res;
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
       
         if (i + 5 < text.size() && text.substr(i, 6) == "&quot;") {
        int i = 0;                    res += '\"';
               re ult    i += 5;
        while (i < text.size()) {
            if (text[i] == '&') {
                i  (text.substr(i, 6) == "&qu t;") {
                     esult += '\"';
                    i += 6;
                } else if (text.substr  , 6) == "&apos;") {
                    result += '\'';
                    i += 6;
                } else if (text.substr(i, 5) == "&amp;") {
                    result += '&';
                    i += 5;
                } else if (text.substr(i, 4) == "&gt;") {
                    result += '>';
                    i += 4;
                } else if (text.substr(i, 4) == "&lt;") {
                    result += '<';
                    i += 4;
                } else if (text.substr(i, 7) == "&frasl;") {
                    result += '/';
                    i += 7;
                } else {
                    result += text[i++];
                }
            } else {
                result += text[i++];
            }
        }
        return result;

=======

        string s = "";
        for (i  } else if (i + 5 < text.size() && text.substr(i, 6) == "&apos;") {
                    res += '\'';
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&gt;") {
                    res += '>';
                    i += 3;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&lt;") {
                    res += '<';
                    i += 3;
                } else if (i + 5 < text.size() && text.substr(i, 6) == "&frasl;") {
                    res += '/';
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&amp;") {
                    res += '&';
                    i += 3;
                } else {
                    res += text[i];
                }
            } else {
                res += text[i];
            }
        }
        return res;

=======

        string s = "";
        for (int i = 0; i < text.size(); i++) {
            if (text[i] == '&') {
                if (i + 5 < text.size() && text[i + 1] == 'a' && text[i + 2] == 'm' && text[i + 3] == 'p' && text[i + 4] == ';') {
                    s += '&';
                    i += 4;
                } else if (i + 6 < text.size() && text[i + 1] == 'q' && text[i + 2] == 'u' && text[i + 3] == 'o' && text[i + 4] == 't' && text[i + 5] == ';') {
                    s += '"';
                    i += 5;
                } else if (i + 6 < text.size() && text[i + 1] == 'a' && text[i + 2] == 'p' && text[i + 3] == 'o' && text[i + 4] == 's' && text[i + 5] == ';') {
                    s += '\'';
                    i += 5;
                } else if (i + 5 < text.size() && text[i + 1] == 'g' && text[i + 2] == 't' && text[i + 3] == ';') {
                    s += '>';
                    i += 3;
                } else if (i + 5 < text.size() && text[i + 1] == 'l' && text[i + 2] == 't' && text[i + 3] == ';') {
                    s += '<';
                    i += 3;
                } else if (i + 7 < text.size() && text[i + 1] == 'f' && text[i + 2] == 'r' && text[i + 3] == 'a' && text[i + 4] == 's' && text[i + 5] == 'l' && text[i + 6] == ';') {
                    s += '/';
                    i += 6;
                } else {
                    s += text[i];
                }
            } else {
                s += text[i];
            }
        }
        return s;

=======

        string ans = "";
        for(int i = 0; i < text.size(); i++){
            if(text[i] == '&'){
              se
                an  += t xt[i];if(i + 3 < text.size() && text.substr(i, 4) == "&gt;"){
        }
        return  ns;

=======

        string result;
        for(i t i = 0; i < text.size(); ++i) {
            if(text[i] != '&') {
                result.push_back(text[i]);
            } else {
                if(text[i + 1] == 'a') {
                    if(text[i + 2] == 'm') {
                        result.push_back('&');
                        i += 4;
                    } el e {
                        result.push_back('\'');
                        i an 5;
                    }
  s             } else if( += '> + 1' == 'g') {
                    result.push_back('>');
                    i += 3;
                  else if(text[i + 1] == 'l') {           i += 3;
                      sul .p sh_back('<');
                    i += 3;
                } else if(text[i + 1] == 'q') {
                    result.push_back('"');
                    i += 5;
                } else if(text[i + 1] == 'f') {
                     esult.push_back('/');
                    i += 5;
                }
            }
        }
        retur  result;

=======

         uto pos = text.fi}d("&");
        if (pos == tring::npos) {
            return text;
        }
        string result = "";
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
                if (i + 5 < text.size() && text.substr(i, 6) == "&quot;") {
                    result += "\"";
                    i += 5;
                } else if (i + 5 < text.size() && text.substr(i, 6) == "&apos;") {
                    result += "'";
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&gt;") {
                    result += ">";
                    i += 3;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&lt;") {
                    result += "<";
                    i += 3;
                } else if (i + 5 < text.size() && text.substr(i, 6) == "&frasl;") {
                    result += "/";
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&amp;") {
                    result += "&";
                    i += 3;
                } else {
                    result += text[i];
                }
            } else {
                result += text[i];
            }
        }
        return result
                else if(i + 3 < text.size() && text.substr(i, 4) == "&lt;"){
                    ans += '<';
                    i += 3;
                }
                else if(i + 4 < text.size() && text.substr(i, 5) == "&amp;"){
                    ans += '&';
                    i += 4;
                }
                else if(i + 5 < text.size() && text.substr(i, 6) == "&quot;"){
                    ans += '\"';
                    i += 5;
                }
                else if(i + 5 < text.size() && text.substr(i, 6) == "&apos;"){
                    ans += '\'';
                    i += 5;
                }
                else if(i + 6 < text.size() && text.substr(i, 7) == "&frasl;"){
                    ans += '/';
                    i += 6;
                }
                else
                    ans += text[i];
            }
            else
                ans += text[i];
        }
        return ans;

=======

        string result;
        for(int i = 0; i < text.size(); ++i) {
            if(text[i] != '&') {
                result.push_back(text[i]);
            } else {
                if(text[i + 1] == 'a') {
                    if(text[i + 2] == 'm') {
                        result.push_back('&');
                        i += 4;
                    } else {
                        result.push_back('\'');
                        i += 5;
                    }
                } else if(text[i + 1] == 'g') {
                    result.push_back('>');
                    i += 3;
                } else if(text[i + 1] == 'l') {
                    result.push_back('<');
                    i += 3;
                } else if(text[i + 1] == 'q') {
                    result.push_back('"');
                    i += 5;
                } else if(text[i + 1] == 'f') {
                    result.push_back('/');
                    i += 5;
                }
            }
        }
        return result;

=======

        auto pos = text.find("&");
        if (pos == string::npos) {
            return text;
        }
        string result = "";
        for (int i = 0; i < text.size(); ++i) {
            if (text[i] == '&') {
                if (i + 5 < text.size() && text.substr(i, 6) == "&quot;") {
                    result += "\"";
                    i += 5;
                } else if (i + 5 < text.size() && text.substr(i, 6) == "&apos;") {
                    result += "'";
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&gt;") {
                    result += ">";
                    i += 3;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&lt;") {
                    result += "<";
                    i += 3;
                } else if (i + 5 < text.size() && text.substr(i, 6) == "&frasl;") {
                    result += "/";
                    i += 5;
                } else if (i + 3 < text.size() && text.substr(i, 4) == "&amp;") {
                    result += "&";
                    i += 3;
                } else {
                    result += text[i];
                }
            } else {
                result += text[i];
            }
        }
        return result;
