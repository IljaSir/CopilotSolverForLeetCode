Synthesizing 10/10 solutions

=======

        int ans = 0;
        for (int i = 0; i < target.size(); i++) {
            if (target[i] == '1') {
                ans++;
                while (i < target.size() && target[i] == '1') {
                    i++;
                }
            }
        }
        return ans;

=======

        int ans = 0;
        char cur = '0';
        for (auto c : target) {
            if (c != cur) {
                ans++;
                cur = c;
            }
        }
        return ans;

=======

        int n = target.size();
        int ans = 0;
        char cur = '0';
        for (int i = 0; i < n; i++) {
            if (cur != target[i]) {
                ans++;
                cur = target[i];
            }
        }
        return ans;

=======

        int n = target.size();
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (target[i] == '1') {
                ans++;
                while (i < n && target[i] == '1') {
                    i++;
                }
                i--;
            }
        }
        return ans;

=======

        int n = target.size();
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (target[i] == '1') {
                if (i == 0 || target[i - 1] == '0') {
                    ++res;
                }
            }
        }
        return res;

=======

        int n = target.size();
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (target[i] == '1') {
                if (i == 0 || target[i - 1] == '0') {
                    res++;
                }
            }
        }
        return res;

=======

        int n = target.length();
        int ans = 0;
        char prev = '0';
        for(int i = 0; i < n; i++) {
            if(target[i] != prev) {
                ans++;
                prev = target[i];
            }
        }
        return ans;

=======

        int n = target.size();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (target[i] == '1') count++;
            while (i < n - 1 && target[i] == target[i + 1]) i++;
        }
        return count;

=======

        int count = 0;
        int n = target.size();
        bool prev = false;
        for(int i = 0; i < n; i++) {
            if(target[i] == '1' && !prev) {
                count++;
                prev = true;
            }
            else if(target[i] == '0' && prev) {
                count++;
                prev = false;
            }
        }
        return count;

=======

        int n = target.size();
        int cnt = 0;
        for(int i=0;i<n-1;i++)
        {
            if(target[i]!=target[i+1])cnt++;
        }
        if(target[n-1]=='1')cnt++;
        return cnt;
