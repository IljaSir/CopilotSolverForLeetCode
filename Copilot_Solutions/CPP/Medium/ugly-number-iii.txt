Synthesizing 9/10 solutions

=======

        long long ab = lcm(a, b);
        long long ac = lcm(a, c);
        long long bc = lcm(b, c);
        long long abc = lcm(ab, c);
        long long l = 1, r = 2 * 1e9;
        while (l < r) {
            long long m = l + (r - l) / 2;
            long long cnt = m / a + m / b + m / c - m / ab - m / ac - m / bc + m / abc;
            if (cnt >= n) r = m;
            else l = m + 1;
        }
        return l;

=======

        int64_t ab = (int64_t)a * b / gcd(a, b);
        int64_t ac = (int64_t)a * c / gcd(a, c);
        int64_t bc = (int64_t)b * c / gcd(b, c);
        int64_t abc = (int64_t)ab * c / gcd(ab, c);
        int64_t l = 1, r = 2 * 1e9;
        while (l < r) {
            int64_t m = (l + r) >> 1;
            int64_t cnt = m / a + m / b + m / c - m / ab - m / ac - m / bc + m / abc;
            if (cnt < n) l = m + 1;
            else r = m;
        }
        return l;

=======

        int l = 1, r = 2e9;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (cnt(m, a, b, c) < n) l = m + 1;
            else r = m;
        }
        return l;
    }
    
    long long cnt(int m, int a, int b, int c) {
        return m / a + m / b + m / c - m / lcm(a, b) - m / lcm(a, c) - m / lcm(b, c) + m / lcm(lcm(a, b), c);

=======

        long long l = 1, r = 2e9;
        while (l < r) {
            long long mid = l + r >> 1;
            if (mid / a + mid / b + mid / c - mid / lcm(a, b) - mid / lcm(a, c) - mid / lcm(b, c) + mid / lcm(lcm(a, b), c) < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
    int gcd(int a, int b) {
        return b ? gcd(b, a % b) : a;

=======

        int l = 1, r = 2e9;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid, a, b, c) >= n) r = mid;
            else l = mid + 1;
        }
        return l;
    }
    long long check(int mid, int a, int b, int c) {
        return mid / a + mid / b + mid / c - mid / lcm(a, b) - mid / lcm(a, c) - mid / lcm(b, c) + mid / lcm(a, lcm(b, c));
    }
    long long gcd(long long a, long long b) {
        return b ? gcd(b, a % b) : a;

=======

        if (n == 1) return 1;
        int l = 1, r = 2e9;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (count(m, a, b, c) >= n) r = m;
            else l = m + 1;
        }
        return l;
    }
    long count(long x, long a, long b, long c) {
        return x / a + x / b + x / c - x / lcm(a, b) - x / lcm(b, c) - x / lcm(a, c) + x / lcm(a, lcm(b, c));

=======

        int64_t l = 1, r = 2 * 1000000000;
        int64_t ab = lcm(a, b);
        int64_t bc = lcm(b, c);
        int64_t ac = lcm(a, c);
        int64_t abc = lcm(ab, c);
        while (l < r) {
            int64_t m = l + (r - l) / 2;
            int64_t cnt = m / a + m / b + m / c - m / ab - m / bc - m / ac + m / abc;
            if (cnt < n) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;
    }
    
    int64_t gcd(int64_t a, int64_t b) {
        return b == 0 ? a : gcd(b, a % b);

=======

        long long int l = 1, r = 2 * 1e9, mid, ans = 0;
        while (l <= r) {
            mid = (l + r) / 2;
            long long int cnt = mid / a + mid / b + mid / c - mid / lcm(a, b) - mid / lcm(a, c) - mid / lcm(b, c) + mid / lcm(a, lcm(b, c));
            if (cnt >= n) {
                ans = mid;
                r = mid - 1;
            } else l = mid + 1;
        }
        return ans;
    }
    long long int gcd(long long int a, long long int b) {
        if (b == 0) return a;
        return gcd(b, a % b);

=======

        long long int l = 0, r = 2 * 1e9, mid;
        long long int ab = (a * b) / __gcd(a, b);
        long long int bc = (b * c) / __gcd(b, c);
        long long int ac = (a * c) / __gcd(a, c);
        long long int abc = (ab * c) / __gcd(ab, c);
        while (l < r) {
            mid = (l + r) / 2;
            long long int cnt = mid / a + mid / b + mid / c - mid / ab - mid / bc - mid / ac + mid / abc;
            if (cnt < n) l = mid + 1;
            else r = mid;
        }
        return l;
