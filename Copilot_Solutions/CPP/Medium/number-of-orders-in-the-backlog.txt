Synthesizing 10/10 solutions

=======

        priority_queue<pair<int, int>> buy;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell;
        for (auto& order : orders) {
            if (order[2] == 0) {
                while (order[1] && !sell.empty() && sell.top().first <= order[0]) {
                    auto& p = sell.top();
                    if (p.second > order[1]) {
                        p.second -= order[1];
                        order[1] = 0;
                    } else {
                        order[1] -= p.second;
                        sell.pop();
                    }
                }
                if (order[1]) {
                    buy.push({order[0], order[1]});
                }
            } else {
                while (order[1] && !buy.empty() && buy.top().first >= order[0]) {
                    auto& p = buy.top();
                    if (p.second > order[1]) {
                        p.second -= order[1];
                        order[1] = 0;
                    } else {
                        order[1] -= p.second;
                        buy.pop();
                    }
                }
                if (order[1]) {
                    sell.push({order[0], order[1]});
                }
            }
        }
        int64_t res = 0;
        while (!buy.empty()) {
            res += buy.top().second;
            buy.pop();
        }
        while (!sell.empty()) {
            res += sell.top().second;
            sell.pop();
        }
        return res % 1000000007;

=======

        priority_queue<pair<int, int>> buy;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell;
        for (auto& order : orders) {
            int price = order[0], amount = order[1], orderType = order[2];
            if (orderType == 0) {
                // buy
                while (amount > 0 && !sell.empty() && sell.top().first <= price) {
                    auto& top = sell.top();
                    if (top.second <= amount) {
                        amount -= top.second;
                        sell.pop();
                    } else {
                        top.second -= amount;
                        amount = 0;
                    }
                }
                if (amount > 0) {
                    buy.push({price, amount});
                }
            } else {
                // sell
                while (amount > 0 && !buy.empty() && buy.top().first >= price) {
                    auto& top = buy.top();
                    if (top.second <= amount) {
                        amount -= top.second;
                        buy.pop();
                    } else {
                        top.second -= amount;
                        amount = 0;
                    }
                }
                if (amount > 0) {
                    sell.push({price, amount});
                }
            }
        }
        int res = 0;
        while (!buy.empty()) {
            res += buy.top().second;
            buy.pop();
        }
        while (!sell.empty()) {
            res += sell.top().second;
            sell.pop();
        }
        return res % 1000000007;

=======

        priority_queue<pair<int, int>> buy;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell;
        for (auto& o : orders) {
            if (o[2] == 0) {
                // buy
                while (o[1] > 0 && !sell.empty() && sell.top().first <= o[0]) {
                    auto s = sell.top();
                    sell.pop();
                    if (s.second > o[1]) {
                        s.second -= o[1];
                        o[1] = 0;
                        sell.push(s);
                    } else {
                        o[1] -= s.second;
                    }
                }
                if (o[1] > 0) {
                    buy.push({o[0], o[1]});
                }
            } else {
                // sell
                while (o[1] > 0 && !buy.empty() && buy.top().first >= o[0]) {
                    auto b = buy.top();
                    buy.pop();
                    if (b.second > o[1]) {
                        b.second -= o[1];
                        o[1] = 0;
                        buy.push(b);
                    } else {
                        o[1] -= b.second;
                    }
                }
                if (o[1] > 0) {
                    sell.push({o[0], o[1]});
                }
            }
        }
        long long res = 0;
        while (!buy.empty()) {
            res += buy.top().second;
            buy.pop();
        }
        while (!sell.empty()) {
            res += sell.top().second;
            sell.pop();
        }
        return res % (1000000007);

=======

        priority_queue<pair<int, int>> buy;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell;
        for (auto &order : orders) {
            int price = order[0];
            int amount = order[1];
            int type = order[2];
            if (type == 0) {
                while (amount > 0 && !sell.empty() && sell.top().first <= price) {
                    auto s = sell.top();
                    sell.pop();
                    int sAmount = s.second;
                    if (sAmount >= amount) {
                        sAmount -= amount;
                        amount = 0;
                        if (sAmount > 0) {
                            sell.push({s.first, sAmount});
                        }
                    } else {
                        amount -= sAmount;
                    }
                }
                if (amount > 0) {
                    buy.push({price, amount});
                }
            } else {
                while (amount > 0 && !buy.empty() && buy.top().first >= price) {
                    auto b = buy.top();
                    buy.pop();
                    int bAmount = b.second;
                    if (bAmount >= amount) {
                        bAmount -= amount;
                        amount = 0;
                        if (bAmount > 0) {
                            buy.push({b.first, bAmount});
                        }
                    } else {
                        amount -= bAmount;
                    }
                }
                if (amount > 0) {
                    sell.push({price, amount});
                }
            }
        }
        int ans = 0;
        while (!buy.empty()) {
            ans += buy.top().second;
            ans %= 1000000007;
            buy.pop();
        }
        while (!sell.empty()) {
            ans += sell.top().second;
            ans %= 1000000007;
            sell.pop();
        }
        return ans;

=======

        priority_queue<pair<int, int>> buy; // price, amount
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell; // price, amount
        for (auto& order : orders) {
            if (order[2] == 0) {
                while (order[1] && !sell.empty() && sell.top().first <= order[0]) {
                    auto top = sell.top();
                    sell.pop();
                    if (top.second > order[1]) {
                        top.second -= order[1];
                        sell.push(top);
                        order[1] = 0;
                    } else {
                        order[1] -= top.second;
                    }
                }
                if (order[1]) {
                    buy.push({order[0], order[1]});
                }
            } else {
                while (order[1] && !buy.empty() && buy.top().first >= order[0]) {
                    auto top = buy.top();
                    buy.pop();
                    if (top.second > order[1]) {
                        top.second -= order[1];
                        buy.push(top);
                        order[1] = 0;
                    } else {
                        order[1] -= top.second;
                    }
                }
                if (order[1]) {
                    sell.push({order[0], order[1]});
                }
            }
        }
        int res = 0;
        while (!buy.empty()) {
            res = (res + buy.top().second) % 1000000007;
            buy.pop();
        }
        while (!sell.empty()) {
            res = (res + sell.top().second) % 1000000007;
            sell.pop();
        }
        return res;

=======

        priority_queue<pair<int,int>> buy;
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> sell;
        for (auto& order: orders) {
            if (order[2] == 0) {
                while (!sell.empty() && sell.top().first <= order[0] && order[1] > 0) {
                    int a = min(order[1], sell.top().second);
                    order[1] -= a;
                    sell.top().second -= a;
                    if (sell.top().second == 0) {
                        sell.pop();
                    }
                }
                if (order[1] > 0) {
                    buy.push({order[0], order[1]});
                }
            } else {
                while (!buy.empty() && buy.top().first >= order[0] && order[1] > 0) {
                    int a = min(order[1], buy.top().second);
                    order[1] -= a;
                    buy.top().second -= a;
                    if (buy.top().second == 0) {
                        buy.pop();
                    }
                }
                if (order[1] > 0) {
                    sell.push({order[0], order[1]});
                }
            }
        }
        long long res = 0;
        while (!buy.empty()) {
            res += buy.top().second;
            buy.pop();
        }
        while (!sell.empty()) {
            res += sell.top().second;
            sell.pop();
        }
        return res % 1000000007;

=======

        const int MOD = 1e9+7;
        priority_queue<pair<int, int>> buy;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> sell;
        for (auto& order: orders) {
            if (order[2] == 0) {
                int price = order[0], amount = order[1];
                while (!sell.empty() && sell.top().first <= price) {
                    if (sell.top().second > amount) {
                        sell.top().second -= amount;
                        amount = 0;
                        break;
                    } else {
                        amount -= sell.top().second;
                        sell.pop();
                    }
                }
                if (amount > 0) buy.push({price, amount});
            } else {
                int price = order[0], amount = order[1];
                while (!buy.empty() && buy.top().first >= price) {
                    if (buy.top().second > amount) {
                        buy.top().second -= amount;
                        amount = 0;
                        break;
                    } else {
                        amount -= buy.top().second;
                        buy.pop();
                    }
                }
                if (amount > 0) sell.push({price, amount});
            }
        }
        int ans = 0;
        while (!buy.empty()) {
            ans = (ans + buy.top().second) % MOD;
            buy.pop();
        }
        while (!sell.empty()) {
            ans = (ans + sell.top().second) % MOD;
            sell.pop();
        }
        return ans;

=======

        priority_queue<pair<int,int>> buy;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> sell;
        for (auto& order : orders) {
            int price = order[0];
            int amount = order[1];
            int orderType = order[2];
            if (orderType == 0) {
                while (amount > 0 && !sell.empty() && sell.top().first <= price) {
                    auto top = sell.top();
                    sell.pop();
                    if (top.second > amount) {
                        top.second -= amount;
                        amount = 0;
                        sell.push(top);
                    } else {
                        amount -= top.second;
                    }
                }
                if (amount > 0) {
                    buy.push({price, amount});
                }
            } else {
                while (amount > 0 && !buy.empty() && buy.top().first >= price) {
                    auto top = buy.top();
                    buy.pop();
                    if (top.second > amount) {
                        top.second -= amount;
                        amount = 0;
                        buy.push(top);
                    } else {
                        amount -= top.second;
                    }
                }
                if (amount > 0) {
                    sell.push({price, amount});
                }
            }
        }
        int ans = 0;
        while (!buy.empty()) {
            ans = (ans + buy.top().second) % 1000000007;
            buy.pop();
        }
        while (!sell.empty()) {
            ans = (ans + sell.top().second) % 1000000007;
            sell.pop();
        }
        return ans;

=======

        map<int, int> buy, sell;
        for (auto& o: orders) {
            if (o[2] == 0) {
                // buy
                while (o[1] > 0 && sell.size() > 0 && sell.begin()->first <= o[0]) {
                    auto& [p, c] = *sell.begin();
                    int take = min(c, o[1]);
                    c -= take;
                    o[1] -= take;
                    if (c == 0) sell.erase(sell.begin());
                }
                if (o[1] > 0) buy[o[0]] += o[1];
            } else {
                // sell
                while (o[1] > 0 && buy.size() > 0 && buy.rbegin()->first >= o[0]) {
                    auto& [p, c] = *buy.rbegin();
                    int take = min(c, o[1]);
                    c -= take;
                    o[1] -= take;
                    if (c == 0) buy.erase(prev(buy.end()));
                }
                if (o[1] > 0) sell[o[0]] += o[1];
            }
        }
        long long ans = 0;
        for (auto& [p, c]: buy) {
            ans += c;
            ans %= 1000000007;
        }
        for (auto& [p, c]: sell) {
            ans += c;
            ans %= 1000000007;
        }
        return ans;

=======

        long long ans = 0;
        map<int, long long> sell, buy;
        for (auto& order : orders) {
            int price = order[0];
            long long amount = order[1];
            int orderType = order[2];
            if (orderType == 0) {
                // buy
                while (amount > 0 && !sell.empty() && sell.begin()->first <= price) {
                    auto it = sell.begin();
                    if (it->second <= amount) {
                        amount -= it->second;
                        sell.erase(it);
                    } else {
                        it->second -= amount;
                        amount = 0;
                    }
                }
                if (amount > 0) {
                    buy[price] += amount;
                }
            } else {
                // sell
                while (amount > 0 && !buy.empty() && buy.rbegin()->first >= price) {
                    auto it = buy.rbegin();
                    if (it->second <= amount) {
                        amount -= it->second;
                        buy.erase(--it.base());
                    } else {
                        it->second -= amount;
                        amount = 0;
                    }
                }
                if (amount > 0) {
                    sell[price] += amount;
                }
            }
        }
        for (auto& item : buy) {
            ans = (ans + item.second) % 1000000007;
        }
        for (auto& item : sell) {
            ans = (ans + item.second) % 1000000007;
        }
        return ans;
