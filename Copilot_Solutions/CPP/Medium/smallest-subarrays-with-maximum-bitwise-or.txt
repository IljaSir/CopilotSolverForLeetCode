Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] >= nums[i]) st.pop();
            ans[i] = st.empty() ? i + 1 : i - st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] <= nums[i]) st.pop();
            ans[i] = st.empty() ? i + 1 : i - st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] >= nums[i]) st.pop();
            ans[i] = st.empty() ? i + 1 : i - st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] >= nums[i]) st.pop();
            ans[i] = st.empty() ? i + 1 : i - st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<int> ans(n);
        stack<int> st;
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] >= nums[i]) st.pop();
            ans[i] = st.empty() ? i + 1 : i - st.top();
            st.push(i);
        }

=======

        int n = nums.size();
        vector<int> ans(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && nums[stack.back()] < nums[i]) {
                ans[stack.back()] = i - stack.back();
                stack.pop_back();
            }
            stack.push_back(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int p) {
        int n = nums.size();
        vector<int> ans(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && nums[stack.back()] > nums[i]) {
                ans[stack.back()] = i - stack.back();
                stack.pop_back();
            }
            stack.push_back(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int p, int q) {
        int n = nums.size();
        vector<int> ans(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && nums[stack.back()] > nums[i]) {
                ans[stack.back()] = i - stack.back();
                stack.pop_back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.empty() && nums[stack.back()] >= nums[i]) {
                ans[stack.back()] = min(ans[stack.back()], stack.back() - i);
                stack.pop_back();
            }
            stack.push_back(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int p, int q, int r) {
        int n = nums.size();
        vector<int> ans(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && nums[stack.back()] > nums[i]) {
                ans[stack.back()] = i - stack.back();
                stack.pop_back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for (int i = n - 1; i >=

=======

        int n = nums.size();
        vector<int> res(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[i]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = i - stack.back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[i]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = min(res[i], stack.back() - i);
            }
            stack.push_back(i);
        }
        return res;
    }
    vector<int> smallestSubarrays(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[i]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = i - stack.back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[i]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = min(res[i], stack.back() - i);
            }
            stack.push_back(i);
        }
        return res;
    }
    vector<int> smallestSubarrays(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[i]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = i - stack.back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for

=======

        int n = nums.size();
        vector<int> res(n, n);
        vector<int> stack;
        for (int i = 0; i < n; ++i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[stack.back()]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = i - stack.back();
            }
            stack.push_back(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stack.empty() && (nums[stack.back()] | nums[i]) == nums[stack.back()]) {
                stack.pop_back();
            }
            if (!stack.empty()) {
                res[i] = min(res[i], stack.back() - i);
            }
            stack.push_back(i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> ans(n, n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && nums[i] >= nums[stk.top()]) {
                ans[stk.top()] = i - stk.top();
                stk.pop();
            }
            stk.push(i);
        }
        return ans;
    }
    vector<int> maxBitwiseORs(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> s1 = smallestSubarrays(nums);
        reverse(nums.begin(), nums.end());
        vector<int> s2 = smallestSubarrays(nums);
        reverse(s2.begin(), s2.end());
        for (int i = 0; i < n; ++i) {
            ans[i] = max(ans[i], nums[i]);
            if (i + s1[i] < n) ans[i] = max(ans[i], ans[i + s1[i]] | nums[i]);
            if (i - s2[i] >= 0) ans[i] = max(ans[i], ans[i - s2[i]] | nums[i]);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, vector<int>& maxBitwiseORs) {
        int n = nums.size();
        vector<int> ans(n, n);
        stack<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && maxBitwiseORs[i] >= maxBitwiseORs[stk.top()]) {
                ans[stk.top()] = i - stk.top();
                stk.pop();
            }
            stk.push(i);
        }
        return ans;
    }
    vector<int> minSubarray(vector<int>& nums, int k) {
        vector<int> maxBitwiseORs = maxBitwiseORs(nums);
        vector<int> ans = minSubarray(nums, maxBitwiseORs);
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < n; ++j) {
                if (j + ans[j] < n) ans[j] = min(ans[j], ans[j + ans[j]]);
            }
            for (int j = n -

=======

        int n = nums.size();
        vector<int> res(n, n);
        vector<int> stk;
        for (int i = 0; i < n; ++i) {
            while (!stk.empty() && (nums[stk.back()] | nums[i]) == nums[stk.back()]) {
                res[stk.back()] = i - stk.back();
                stk.pop_back();
            }
            stk.push_back(i);
        }
        stk.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.empty() && (nums[stk.back()] | nums[i]) == nums[stk.back()]) {
                res[stk.back()] = min(res[stk.back()], stk.back() - i);
                stk.pop_back();
            }
            stk.push_back(i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n);
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && (nums[i] | nums[stk.back()]) == nums[stk.back()]) {
                stk.pop_back();
            }
            res[i] = stk.empty() ? i + 1 : i - stk.back();
            stk.push_back(i);
        }
        return res;
    }
    vector<int> smallestSubarrays2(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n);
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && (nums[i] | nums[stk.back()]) == nums[stk.back()]) {
                stk.pop_back();
            }
            res[i] = stk.empty() ? i + 1 : i - stk.back();
            stk.push_back(i);
        }
        return res;
    }
    vector<int> smallestSubarrays3(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n);
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && (nums[i] | nums[stk.back()]) == nums[stk.back()]) {
                stk.pop_back();
            }
            res[i] = stk.empty() ? i + 1 : i - stk.back();
            stk.push_back(i);
        }
        return res;
    }
    vector<int> smallestSubarrays4(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n);
        vector<int> stk;
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && (nums[i] | nums[stk.back()]) == nums[stk.back()]) {
                stk.pop_back();
            }
            res[i] = stk.empty() ? i + 1 : i - stk.back();
            stk.push_back(i);
        }
        return res;

=======

        int n = nums.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            while (!s.empty() && (t | nums[s.top()]) > t) {
                t |= nums[s.top()];
                s.pop();
            }
            s.push(i);
            res[i] = s.size();
        }
        return res;
    }
    vector<int> smallestSubarrays2(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            while (!s.empty() && (t | nums[s.top()]) > t) {
                t |= nums[s.top()];
                s.pop();
            }
            while (!s.empty() && nums[s.top()] <= nums[i]) {
                s.pop();
            }
            s.push(i);
            res[i] = s.size();
        }
        return res;
    }
    vector<int> smallestSubarrays3(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            while (!s.empty() && (t | nums[s.top()]) > t) {
                t |= nums[s.top()];
                s.pop();
            }
            while (!s.empty() && nums[s.top()] < nums[i]) {
                s.pop();
            }
            s.push(i);
            res[i] = s.size();
        }
        return res;
    }
    vector<int> smallestSubarrays4(vector<int>& nums) {
        int n = nums.size();
        vector<int> res(n, 0);
        stack<int> s;
        for (int i = 0; i < n; i++) {
            int t = nums[i];
            while (!s.empty() && (t | nums[s.top()]) > t) {
                t |= nums[s.top()];
                s.pop();
            }
            while (!s.empty() && nums[s.top()] <= nums[i]) {
                s.pop();
            }
            s.push(i);
            res[i] = i - s.top() +

=======

        vector<int> res(nums.size(), 0);
        int n = nums.size();
        vector<int> max_or(n, 0);
        max_or[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            max_or[i] = max_or[i + 1] | nums[i];
        }
        vector<int> max_or_idx(n, 0);
        max_or_idx[n - 1] = n - 1;
        for (int i = n - 2; i >= 0; --i) {
            if (max_or[i] == max_or[i + 1]) {
                max_or_idx[i] = max_or_idx[i + 1];
            } else {
                max_or_idx[i] = i;
            }
        }
        int max_bit = 0;
        for (int i = 0; i < n; ++i) {
            max_bit = max(max_bit, nums[i]);
        }
        int bit = 0;
        while (max_bit > 0) {
            max_bit >>= 1;
            bit++;
        }
        vector<int> bit_count(bit, 0);
        vector<int> bit_idx(bit, 0);
        int i = 0;
        int j = 0;
        while (i < n) {
            while (j < n && bit_count[bit - 1] == 0) {
                for (int k = 0; k < bit; ++k) {
                    if ((nums[j] & (1 << k)) > 0) {
                        if (bit_count[k] == 0) {
                            bit_idx[k] = j;
                        }
                        bit_count[k]++;
                    }
                }
                j++;
            }
            if (bit_count[bit - 1] > 0) {
                res[i] = j - i;
            }
            for (int k = 0; k < bit; ++k) {
                if ((nums[i] & (1 << k)) > 0) {
                    if (bit_count[k] == 1) {
                        res[i] = j - bit_idx[k];
                    }
                    bit_count[k]--;
                }
            }
            i++;
        }
        for (int i = 0; i < n; ++i) {
            int j

=======

        int n = nums.size();
        vector<int> ans(n, 0);
        for (int i = 0; i < n; i++) {
            int j = i;
            int max_bitwise_or = nums[i];
            while (j + 1 < n && (max_bitwise_or | nums[j + 1]) > max_bitwise_or) {
                max_bitwise_or |= nums[++j];
            }
            ans[i] = j - i + 1;
        }
        return ans;
