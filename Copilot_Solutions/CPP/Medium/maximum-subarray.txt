Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int sum = 0;
        int max = nums[0];
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (sum > max) {
                max = sum;
            }
            if (sum < 0) {
                sum = 0;
            }
        }
        return max;

=======

        int sum = 0;
        int maxSum = nums[0];
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            if (sum < 0) {
                sum = 0;
            }
        }
        return maxSum;

=======

        int maxSum = INT_MIN;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            sum = max(sum, 0);
        }
        return maxSum;

=======

        int sum = 0;
        int maxSum = nums[0];
        for (int i = 0; i < nums.size(); ++i) {
            sum += nums[i];
            maxSum = max(maxSum, sum);
            if (sum < 0) {
                sum = 0;
            }
        }
        return maxSum;

=======

        int maxSum = nums[0];
        int curSum = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            curSum = max(curSum + nums[i], nums[i]);
            maxSum = max(curSum, maxSum);
        }
        return maxSum;

=======

        int max_sum = nums[0];
        int cur_sum = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            cur_sum = max(nums[i], cur_sum + nums[i]);
            max_sum = max(max_sum, cur_sum);
        }
        return max_sum;

=======

        int max_sum = nums[0];
        int current_sum = nums[0];
        for (int i = 1; i < nums.size(); i++) {
            current_sum = max(nums[i], current_sum + nums[i]);
            max_sum = max(max_sum, current_sum);
        }
        return max_sum;

=======

        int sum = nums[0];
        int maxSum = sum;
        for (int i = 1; i < nums.size(); i++) {
            if (sum < 0) {
                sum = nums[i];
            } else {
                sum += nums[i];
            }
            if (sum > maxSum) {
                maxSum = sum;
            }
        }
        return maxSum;

=======

        int len = nums.size();
        int maxSum = nums[0];
        int curSum = 0;
        for (int i = 0; i < len; i++) {
            if (curSum > 0) {
                curSum += nums[i];
            } else {
                curSum = nums[i];
            }
            maxSum = max(maxSum, curSum);
        }
        return maxSum;
