Synthesizing 10/10 solutions

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> ans(n, -1);
        for (int i = 0; i < n; ++i) {
            int x = 0, y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y + 1 < n && grid[x][y+1] == 1) {
                        ++x; ++y;
                    } else {
                        break;
                    }
                } else {
                    if (y - 1 >= 0 && grid[x][y-1] == -1) {
                        ++x; --y;
                    } else {
                        break;
                    }
                }
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> ans(n, -1);
        for (int i = 0; i < n; ++i) {
            int x = 0, y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y == n - 1 || grid[x][y + 1] == -1) {
                        break;
                    }
                    ++x;
                    ++y;
                } else {
                    if (y == 0 || grid[x][y - 1] == 1) {
                        break;
                    }
                    ++x;
                    --y;
                }
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> res(n, -1);
        for (int i = 0; i < n; ++i) {
            int x = 0, y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y < n - 1 && grid[x][y + 1] == 1) {
                        ++y;
                    } else {
                        break;
                    }
                } else {
                    if (y > 0 && grid[x][y - 1] == -1) {
                        --y;
                    } else {
                        break;
                    }
                }
                ++x;
            }
            if (x == m) {
                res[i] = y;
            }
        }
        return res;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans(n, -1);
        for (int i = 0; i < n; ++i) {
            int x = 0;
            int y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y == n - 1 || grid[x][y + 1] == -1) {
                        break;
                    }
                    ++y;
                } else {
                    if (y == 0 || grid[x][y - 1] == 1) {
                        break;
                    }
                    --y;
                }
                ++x;
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans(n, -1);
        for (int i = 0; i < n; i++) {
            int x = 0, y = i;
            while (x < m) {
                if (grid[x][y] == 1 && y + 1 < n && grid[x][y + 1] == 1) {
                    x++;
                    y++;
                } else if (grid[x][y] == -1 && y - 1 >= 0 && grid[x][y - 1] == -1) {
                    x++;
                    y--;
                } else {
                    break;
                }
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans(n, -1);
        for (int i = 0; i < n; i++) {
            int x = 0;
            int y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y == n - 1) {
                        break;
                    }
                    if (grid[x][y + 1] == 1) {
                        y++;
                    } else {
                        break;
                    }
                } else {
                    if (y == 0) {
                        break;
                    }
                    if (grid[x][y - 1] == -1) {
                        y--;
                    } else {
                        break;
                    }
                }
                x++;
            }
            if (x == m) {
                ans[i] = y;
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            int col = i;
            for (int row = 0; row < m; row++) {
                if (grid[row][col] == 1) {
                    if (col + 1 < n && grid[row][col + 1] == 1) {
                        col++;
                    } else {
                        ans.push_back(-1);
                        break;
                    }
                } else {
                    if (col - 1 >= 0 && grid[row][col - 1] == -1) {
                        col--;
                    } else {
                        ans.push_back(-1);
                        break;
                    }
                }
                if (row == m - 1) {
                    ans.push_back(col);
                }
            }
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            int x = 0, y = i;
            while (x < m) {
                if (grid[x][y] == 1) {
                    if (y == n - 1 || grid[x][y + 1] == -1) {
                        ans[i] = -1;
                        break;
                    }
                    y++;
                } else {
                    if (y == 0 || grid[x][y - 1] == 1) {
                        ans[i] = -1;
                        break;
                    }
                    y--;
                }
                x++;
            }
            if (x == m) ans[i] = y;
        }
        return ans;

=======

        int m = grid.size();
        int n = grid[0].size();
        vector<int> res(n);
        for (int i = 0; i < n; ++i) {
            int c = i;
            for (int r = 0; r < m; ++r) {
                if (grid[r][c] == 1) {
                    if (c == n - 1 || grid[r][c + 1] == -1) {
                        c = -1;
                        break;
                    }
                    ++c;
                }
                else {
                    if (c == 0 || grid[r][c - 1] == 1) {
                        c = -1;
                        break;
                    }
                    --c;
                }
            }
            res[i] = c;
        }
        return res;

=======

        int m = grid.size(), n = grid[0].size();
        vector<int> res(n, 0);
        for (int i = 0; i < n; i++) {
            int r = 0, c = i;
            while (r < m) {
                if (grid[r][c] == 1) {
                    if (c == n - 1 || grid[r][c + 1] == -1) {
                        res[i] = -1;
                        break;
                    } else {
                        c++;
                    }
                } else {
                    if (c == 0 || grid[r][c - 1] == 1) {
                        res[i] = -1;
                        break;
                    } else {
                        c--;
                    }
                }
                r++;
            }
            if (r == m) {
                res[i] = c;
            }
        }
        return res;
