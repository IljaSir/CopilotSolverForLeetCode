Synthesizing 10/10 solutions

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        int l = 0;
        int maxCnt = 0;
        int res = 0;
        for (int r = 0; r < n; r++) {
            maxCnt = max(maxCnt, ++cnt[s[r] - 'A']);
            while (r - l + 1 - maxCnt > k) {
                cnt[s[l] - 'A']--;
                l++;
            }
            res = max(res, r - l + 1);
        }
        return res;

=======

        int n = s.size();
        vector<int> cnt(26, 0);
        int left = 0, right = 0;
        int maxCnt = 0;
        int maxLen = 0;
        while (right < n) {
            cnt[s[right] - 'A']++;
            maxCnt = max(maxCnt, cnt[s[right] - 'A']);
            while (right - left + 1 - maxCnt > k) {
                cnt[s[left] - 'A']--;
                left++;
            }
            maxLen = max(maxLen, right - left + 1);
            right++;
        }
        return maxLen;

=======

        int n = s.size();
        int res = 0;
        vector<int> cnt(26, 0);
        int maxCnt = 0;
        int left = 0;
        for (int right = 0; right < n; right++) {
            maxCnt = max(maxCnt, ++cnt[s[right] - 'A']);
            while (right - left + 1 - maxCnt > k) {
                cnt[s[left] - 'A']--;
                left++;
            }
            res = max(res, right - left + 1);
        }
        return res;

=======

        int n = s.size();
        int l = 0, r = 0, maxn = 0;
        vector<int> cnt(26, 0);
        while (r < n) {
            cnt[s[r] - 'A']++;
            maxn = max(maxn, cnt[s[r] - 'A']);
            if (r - l + 1 - maxn > k) {
                cnt[s[l] - 'A']--;
                l++;
            }
            r++;
        }
        return r - l;

=======

        int left = 0, right = 0, maxCount = 0, maxLen = 0;
        vector<int> count(26, 0);
        while (right < s.size()) {
            maxCount = max(maxCount, ++count[s[right] - 'A']);
            while (right - left + 1 - maxCount > k) {
                count[s[left++] - 'A']--;
            }
            maxLen = max(maxLen, right - left + 1);
            right++;
        }
        return maxLen;

=======

        int n = s.size();
        int l = 0, r = 0;
        int ans = 0;
        int maxCnt = 0;
        vector<int> cnt(26, 0);
        while (r < n) {
            cnt[s[r] - 'A']++;
            maxCnt = max(maxCnt, cnt[s[r] - 'A']);
            while (r - l + 1 - maxCnt > k) {
                cnt[s[l] - 'A']--;
                l++;
            }
            ans = max(ans, r - l + 1);
            r++;
        }
        return ans;

=======

        int n = s.size();
        int l = 0, r = 0, maxCnt = 0;
        vector<int> cnt(26, 0);
        while (r < n) {
            cnt[s[r] - 'A']++;
            maxCnt = max(maxCnt, cnt[s[r] - 'A']);
            if (r - l + 1 > maxCnt + k) {
                cnt[s[l] - 'A']--;
                l++;
            }
            r++;
        }
        return r - l;

=======

        int i = 0, j = 0, n = s.length(), maxCount = 0, res = 0;
        vector<int> count(26, 0);
        while (j < n) {
            maxCount = max(maxCount, ++count[s[j++] - 'A']);
            while (j - i - maxCount > k) {
                --count[s[i++] - 'A'];
            }
            res = max(res, j - i);
        }
        return res;

=======

        int res = 0;
        for (char c = 'A'; c <= 'Z'; ++c) {
            int i = 0, j = 0, count = 0, maxCount = 0;
            while (j < s.size()) {
                if (s[j] == c) {
                    ++count;
                    ++maxCount;
                }
                ++j;
                if (j - i > count + k) {
                    if (s[i] == c) {
                        --maxCount;
                    }
                    ++i;
                }
                res = max(res, j - i);
            }
        }
        return res;

=======

        int len = s.length();
        if (len <= 1) {
            return 1;
        }
        int maxLen = 0;
        for (int i = 0; i < len; i++) {
            int curMax = 0;
            int curK = k;
            int j = i;
            for (; j < len; j++) {
                if (s[j] == s[i]) {
                    curMax++;
                } else {
                    if (curK > 0) {
                        curMax++;
                        curK--;
                    } else {
                        break;
                    }
                }
            }
            maxLen = max(maxLen, curMax);
        }
        return maxLen;
