Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int ans = 0;
        for (int i = 1; i < n - 1; ++i) {
            int l = i + 1;
            int r = n - 1;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (sum[m] - sum[i] >= sum[i]) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            if (sum[l] - sum[i] < sum[i]) {
                continue;
            }
            int ll = i + 1;
            int rr = n - 1;
            while (ll < rr) {
                int m = ll + (rr - ll + 1) / 2;
                if (sum[n] - sum[m] >= sum[m] - sum[i]) {
                    ll = m;
                } else {
                    rr = m - 1;
                }
            }
            ans = (ans + ll - l + 1) % 1000000007;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; ++i) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int ans = 0;
        for (int i = 1; i < n - 1; ++i) {
            int l = 0, r = i - 1;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (sum[i] - sum[m] >= sum[m + 1]) {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
            int left = l;
            l = i + 1, r = n - 1;
            while (l < r) {
                int m = l + (r - l) / 2;
                if (sum[m] - sum[i] > sum[n] - sum[m + 1]) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            int right = l;
            if (sum[i] - sum[left] >= sum[left + 1] && sum[right] - sum[i] >= sum[n] - sum[right + 1]) {
                ans += right - left;
                ans %= 1000000007;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n);
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int ans = 0;
        int mod = 1e9 + 7;
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (sum[mid] - sum[i] < sum[i]) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            int left = l;
            l = i + 1, r = n - 1;
            while (l < r) {
                int mid = l + (r - l + 1) / 2;
                if (sum[n - 1] - sum[mid - 1] >= sum[mid - 1] - sum[i]) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            int right = l;
            if (left <= right) {
                ans = (ans + right - left + 1) % mod;
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 1; i <= n; ++i) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        int ans = 0;
        for (int i = 1; i <= n - 2; ++i) {
            int l = i + 1, r = n;
            int s1 = sum[i];
            while (l < r) {
                int mid = l + (r - l) / 2;
                int s2 = sum[mid] - sum[i];
                int s3 = sum[n] - sum[mid];
                if (s2 >= s1) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            int s2 = sum[l] - sum[i];
            int s3 = sum[n] - sum[l];
            if (s2 < s1) {
                break;
            }
            if (s2 > s3) {
                continue;
            }
            int left = l, right = n;
            while (left < right) {
                int mid = left + (right - left + 1) / 2;
                int s2 = sum[mid] - sum[i];
                int s3 = sum[n] - sum[mid];
                if (s2 <= s3) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            ans = (ans + left - l + 1) % 1000000007;
        }
        return ans;

=======

        int n = nums.size();
        vector<int> preSum(n);
        preSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            preSum[i] = preSum[i-1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n-2; ++i) {
            int l = i+1;
            int r = n-1;
            while (l < r) {
                int mid = l + (r-l)/2;
                int left = preSum[i];
                int right = preSum[n-1] - preSum[mid];
                int midSum = preSum[mid] - preSum[i];
                if (left <= midSum && midSum <= right) {
                    r = mid;
                } else if (left > midSum) {
                    l = mid+1;
                } else {
                    r = mid;
                }
            }
            int left = preSum[i];
            int right = preSum[n-1] - preSum[r];
            int midSum = preSum[r] - preSum[i];
            if (left <= midSum && midSum <= right) {
                ans = (ans + n-r) % 1000000007;
            }
        }
        return ans;

=======

        int mod = 1000000007;
        int n = nums.size();
        vector<int> sum(n, 0);
        sum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n - 2; ++i) {
            int left = sum[i];
            int l = i + 1, r = n - 1;
            while (l < r) {
                int mid = (l + r) / 2;
                int right = sum[n - 1] - sum[mid];
                if (right >= left) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            int l1 = l;
            l = i + 1, r = n - 1;
            while (l < r) {
                int mid = (l + r) / 2;
                int right = sum[n - 1] - sum[mid];
                if (right > left) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            int l2 = l;
            if (l1 <= l2) {
                ans += l2 - l1;
                ans %= mod;
            }
        }
        return ans;

=======

        const int MOD = 1000000007;
        int n = nums.size();
        vector<int> preSum(n, 0);
        preSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            preSum[i] = preSum[i-1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n-2; ++i) {
            int l = i+1, r = n-1;
            int leftSum = preSum[i];
            while (l < r) {
                int m = l + (r-l)/2;
                int midSum = preSum[m] - preSum[i];
                int rightSum = preSum[n-1] - preSum[m];
                if (leftSum <= midSum && midSum <= rightSum) {
                    l = m+1;
                } else if (leftSum > midSum) {
                    l = m+1;
                } else {
                    r = m;
                }
            }
            int m = l;
            int midSum = preSum[m] - preSum[i];
            int rightSum = preSum[n-1] - preSum[m];
            if (leftSum <= midSum && midSum <= rightSum) {
                ans = (ans + (m-i)) % MOD;
            }
        }
        return ans;

=======

        const int mod = 1000000007;
        int n = nums.size();
        vector<int> sum(n + 1, 0);
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        int res = 0;
        for (int i = 1; i <= n - 2; i++) {
            int l = i + 1, r = n - 1;
            int s1 = sum[i];
            while (l < r) {
                int mid = (l + r + 1) >> 1;
                int s2 = sum[mid] - sum[i];
                int s3 = sum[n] - sum[mid];
                if (s1 <= s2 && s2 <= s3) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            int s2 = sum[l] - sum[i];
            int s3 = sum[n] - sum[l];
            if (s1 <= s2 && s2 <= s3) {
                res = (res + (l - i)) % mod;
            }
        }
        return res;

=======

        int n = nums.size();
        vector<int> prefix(n+1, 0);
        for(int i = 1; i <= n; i++) {
            prefix[i] = prefix[i-1] + nums[i-1];
        }
        int ans = 0;
        for(int i = 1; i <= n; i++) {
            int l = i;
            int r = n;
            while(l < r) {
                int mid = (l + r) / 2;
                if(prefix[mid] - prefix[i-1] < prefix[i-1]) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            int left = l;
            if(left > n) {
                break;
            }
            l = i;
            r = n;
            while(l < r) {
                int mid = (l + r + 1) / 2;
                if(prefix[mid] - prefix[i-1] <= prefix[n] - prefix[mid]) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            int right = l;
            if(right < left) {
                continue;
            }
            ans += right - left + 1;
            ans %= 1000000007;
        }
        return ans;

=======

        int n = nums.size();
        int res = 0;
        vector<int> preSum(n, 0);
        preSum[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            preSum[i] = preSum[i-1] + nums[i];
        }
        for (int i = 0; i < n-2; ++i) {
            int leftSum = preSum[i];
            int leftMax = leftSum;
            int leftMin = leftSum;
            int rightMin = preSum[n-1] - leftSum;
            int rightMax = rightMin;
            int midMin = max(leftMin, preSum[i+1] - rightMax);
            int midMax = min(rightMin, preSum[n-1] - leftMax);
            if (midMin <= midMax) {
                int l = i + 1;
                int r = n - 1;
                while (l < r) {
                    int mid = l + (r - l) / 2;
                    if (preSum[mid] - leftSum >= midMin) {
                        r = mid;
                    } else {
                        l = mid + 1;
                    }
                }
                int left = l;
                l = i + 1;
                r = n - 1;
                while (l < r) {
                    int mid = l + (r - l) / 2;
                    if (preSum[mid] - leftSum <= midMax) {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                }
                int right = l;
                res = (res + right - left) % 1000000007;
            }
        }
        return res;
