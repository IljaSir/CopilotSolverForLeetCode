Synthesizing 10/10 solutions

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0, r = m * n - 1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            int x = mid / n, y = mid % n;
            if (matrix[x][y] == target) {
                return true;
            } else if (matrix[x][y] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0;
        int r = m * n - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            int x = mid / n;
            int y = mid % n;
            if (matrix[x][y] == target) {
                return true;
            } else if (matrix[x][y] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0;
        int r = m * n - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            int midValue = matrix[mid / n][mid % n];
            if (midValue == target) {
                return true;
            } else if (midValue < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0;
        int r = m * n - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int midVal = matrix[mid / n][mid % n];
            if (midVal == target) {
                return true;
            } else if (midVal > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int left = 0;
        int right = m * n - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            int value = matrix[mid / n][mid % n];
            if (value == target) {
                return true;
            } else if (value > target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        if (m == 0) return false;
        int n = matrix[0].size();
        if (n == 0) return false;
        int l = 0;
        int r = m * n - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            int x = mid / n;
            int y = mid % n;
            if (matrix[x][y] == target) {
                return true;
            } else if (matrix[x][y] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int left = 0;
        int right = m * n - 1;
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            if (matrix[mid / n][mid % n] <= target) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return matrix[left / n][left % n] == target;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0;
        int r = m*n-1;
        while(l<=r){
            int mid = (l+r)/2;
            int i = mid/n;
            int j = mid%n;
            if(matrix[i][j]==target){
                return true;
            }
            if(matrix[i][j]<target){
                l = mid+1;
            }else{
                r = mid-1;
            }
        }
        return false;

=======

        int m = matrix.size();
        int n = matrix[0].size();
        int l = 0;
        int r = m*n-1;
        while (l <= r) {
            int mid = (l+r)/2;
            int midVal = matrix[mid/n][mid%n];
            if (midVal == target) {
                return true;
            }
            if (midVal < target) {
                l = mid+1;
            } else {
                r = mid-1;
            }
        }
        return false;

=======

        int row = matrix.size();
        int col = matrix[0].size();
        int left = 0;
        int right = row*col-1;
        while(left <= right){
            int mid = left + (right-left)/2;
            int mid_val = matrix[mid/col][mid%col];
            if(mid_val == target){
                return true;
            }else if(mid_val < target){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return false;
