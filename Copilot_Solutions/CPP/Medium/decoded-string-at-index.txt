Synthesizing 10/10 solutions (Duplicates hidden)

=======

        long long n = 0;
        for (char c : s) {
            if (isdigit(c)) {
                n *= c - '0';
            } else {
                n++;
            }
        }
        for (int i = s.size() - 1; i >= 0; i--) {
            k %= n;
            if (k == 0 && isalpha(s[i])) {
                return string(1, s[i]);
            }
            if (isdigit(s[i])) {
                n /= s[i] - '0';
            } else {
                n--;
            }
        }
        return "";

=======

        long long n = 0;
        for (char c : s) {
            if (isdigit(c)) {
                n *= c - '0';
            } else {
                ++n;
            }
        }
        for (int i = s.size() - 1; i >= 0; --i) {
            k %= n;
            if (k == 0 && isalpha(s[i])) {
                return string(1, s[i]);
            }
            if (isdigit(s[i])) {
                n /= s[i] - '0';
            } else {
                --n;
            }
        }
        return "";

=======

        long long n = 0;
        int i = 0;
        while (n < k) {
            n = isdigit(s[i]) ? n * (s[i] - '0') : n + 1;
            ++i;
        }
        while (i--) {
            if (isdigit(s[i])) {
                n /= s[i] - '0';
                k %= n;
            } else if (k == n || k == 0) {
                return string(1, s[i]);
            } else {
                --n;
            }
        }
        return "";

=======

        long long n = 0;
        int len = s.size();
        for (int i = 0; i < len; i++) {
            if (isdigit(s[i])) {
                n *= s[i] - '0';
            } else {
                n++;
            }
        }
        for (int i = len - 1; i >= 0; i--) {
            k %= n;
            if (k == 0 && isalpha(s[i])) {
                return string(1, s[i]);
            }
            if (isdigit(s[i])) {
                n /= s[i] - '0';
            } else {
                n--;
            }
        }
        return "";

=======

        long n = 0;
        for (char c : s) {
            if (isdigit(c)) n *= (c - '0');
            else n++;
        }
        for (int i = s.size() - 1; i >= 0; i--) {
            k %= n;
            if (k == 0 && isalpha(s[i])) return string(1, s[i]);
            if (isdigit(s[i])) n /= (s[i] - '0');
            else n--;
        }
        return "";

=======

        long long n = 0;
        for (char c : s) {
            n = isdigit(c) ? n * (c - '0') : n + 1;
        }
        for (auto it = s.rbegin(); it != s.rend(); ++it) {
            char c = *it;
            k %= n;
            if (k == 0 && isalpha(c)) {
                return string(1, c);
            }
            if (isdigit(c)) {
                n /= c - '0';
            } else {
                n--;
            }
        }
        return "";

=======

        long long n = 0;
        for (auto c : s) {
            if (isdigit(c)) {
                n *= c - '0';
            } else {
                n++;
            }
        }
        for (auto it = s.rbegin(); it != s.rend(); ++it) {
            k %= n;
            if (k == 0 && isalpha(*it)) {
                return string(1, *it);
            }
            if (isdigit(*it)) {
                n /= *it - '0';
            } else {
                n--;
            }
        }
        return "";

=======

        long long len = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] >= 'a' && s[i] <= 'z') {
                len++;
            } else {
                len *= (s[i] - '0');
            }
        }
        for (int i = s.length() - 1; i >= 0; --i) {
            if (s[i] >= 'a' && s[i] <= 'z') {
                if (k % len == 0) {
                    return string(1, s[i]);
                } else {
                    len--;
                }
            } else {
                len /= (s[i] - '0');
                k %= len;
            }
        }
        return "";
