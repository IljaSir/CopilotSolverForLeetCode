Synthesizing 10/10 solutions

=======

        int n = text.size();
        int res = 0;
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && text[j] == text[i]) ++j;
            int cnt = j - i;
            res = max(res, cnt);
            int k = j;
            while (k < n && text[k] == text[i]) ++k;
            if (k < n && text[k] == text[j]) {
                res = max(res, cnt + 1);
                while (k < n && text[k] == text[i]) ++k;
                res = max(res, k - j + 1);
            }
            i = j;
        }
        return res;

=======

        int n = text.size();
        vector<int> count(26, 0);
        for (int i = 0; i < n; i++) {
            count[text[i] - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res = max(res, count[i]);
        }
        int i = 0;
        while (i < n) {
            int j = i;
            while (j < n && text[j] == text[i]) {
                j++;
            }
            int k = j;
            while (k < n && text[k] != text[i]) {
                k++;
            }
            if (k < n) {
                int l = k;
                while (l < n && text[l] == text[k]) {
                    l++;
                }
                res = max(res, j - i + l - k);
            }
            i = j;
        }
        return res;

=======

        int n = text.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && text[j] == text[i]) j++;
            int cnt1 = j - i;
            int cnt2 = 0;
            if (j < n && text[j] != text[i]) {
                int k = j;
                while (k < n && text[k] == text[j]) k++;
                cnt2 = k - j;
            }
            ans = max(ans, min(cnt1 + cnt2 + 1, n));
            i = j;
        }
        return ans;

=======

        int n = text.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && text[j] == text[i]) {
                j++;
            }
            int k = j;
            while (k < n && text[k] != text[i]) {
                k++;
            }
            int l = k;
            while (l < n && text[l] == text[i]) {
                l++;
            }
            ans = max(ans, min(j - i + 1 + (k - j), l - k + j - i));
            i = j - 1;
        }
        return ans;

=======

        int n = text.size();
        int res = 0;
        for (int i = 0; i < n; ) {
            int j = i;
            while (j < n && text[i] == text[j]) ++j;
            int cnt = j - i;
            int l = i, r = j;
            while (l > 0 && r < n && text[l - 1] == text[r] && cnt < r - l + 1) {
                ++cnt;
                --l;
                ++r;
            }
            res = max(res, cnt);
            i = j;
        }
        return res;

=======

        int n = text.size();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && text[j] == text[i]) {
                j++;
            }
            int k = j;
            while (k < n && text[k] != text[i]) {
                k++;
            }
            int l = k;
            while (l < n && text[l] == text[i]) {
                l++;
            }
            ans = max(ans, min(j - i + 1 + (k - j), l - k + j - i));
            i = j - 1;
        }
        return ans;

=======;
                }
            }
            i = j
        }
   returnres;

=======

        int n = text.size();
        vector<int> cnt(26, 0);
        for (auto ch : text) {
            cnt[ch-'a']++;

        int res = 0;
        for (int i = 0, j = 0; i < n; i = j) {
            while (j < n && text[i] == text[j]) {
   int          j++;
            n = text.size();
        vectontrk <in;
            while (k < n && text[k] == text[j] && cnt[text[k] - 'a'] > j - i) {
                k++t> count(26, 0);
            for (char c : text) {
              s = max(res, k - i);
        }
        re  count[;

=======

        int maxLen = 0;
        int n = text.size();
        vector<int> count(26, 0);
        for (int i = 0; i < n; i++) {
            count[text[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            int left = 0;
            int right = 0;
            int k = 1;
            int curLen = 0;
            while (right < n) {
                if (text[right] == i + 'a' || k > 0) {
                    if (text[right] != i + 'a') {
                        k--;
                    }
                    right++;
                    curLen++;
                } else {
                    if (text[left] != i + 'a') {
                        k++;
                    }
                    left++;
                    curLen--;
                }
                if (curLen + k > count[i]) {
                    curLen--;
                    if (text[left] != i + 'a') {
                        k++;
                    }
                    left++;
                }
                maxLen = max(maxLen, curLen);
            }
        }
        return maxLen;

=======

        int maxLen = 0;
        int n = text.length();
        vector<int> count(26, 0);
        vector<int> last(26, -1);
        for (int i = 0; i < n; ++i) {
            char c = text[i];
            int idx = c - 'a';
            count[idx]++;
            last[idx] = i;
        }
        for (int i = 0; i < 26; ++i) {
            if (count[i] == 0) continue;
            int len = 0;
            int j = 0;
            while (j < n) {
                if (text[j] == 'a' + i) {
                    if (j + 1 < n && text[j + 1] == 'a' + i) {
                        len += 2;
                        j += 2;
                    } else {
                        len++;
                        j++;
                    }
                } else {
                    int idx = text[j] - 'a';
                    if (j + 1 < n && text[j + 1] == 'a' + i && count[idx] > 1 && last[idx] > j) {
                        len += 2;
                        j += 2;
                    } else {
                        len++;
                        j++;
                    }
                }
                maxLen = max(maxLen, len);
                if (j < n && text[j] == 'a' + i) {
                    len = 0;
                }
            }
        }
        return maxLenc - 'a']++;
        }
        int i = 0;
        int res = 0;
        while (i < n) {
            int j = i;
            while (j < n && text[j] == text[i]) {
                j++;
            }
            int same = j - i;
            res = max(res, same);
            if (j < n) {
                int k = j + 1;
                while (k < n && text[k] == text[i]) {
                    k++;
                }
                if (k - j - 1 == count[text[i] - 'a'] - same) {
                    res = max(res, min(k - i, count[text[i] - 'a']));
                }
            }
            i = j;
        }
        return res;

=======

        int n = text.size();
        vector<int> cnt(26, 0);
        for (auto ch : text) {
            cnt[ch - 'a']++;
        }
        int res = 0;
        for (int i = 0, j = 0; i < n; i = j) {
            while (j < n && text[i] == text[j]) {
                j++;
            }
            int k = j;
            while (k < n && text[k] == text[j] && cnt[text[k] - 'a'] > j - i) {
                k++;
            }
            res = max(res, k - i);
        }
        return res;

=======

        int maxLen = 0;
        int n = text.size();
        vector<int> count(26, 0);
        for (int i = 0; i < n; i++) {
            count[text[i] - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            int left = 0;
            int right = 0;
            int k = 1;
            int curLen = 0;
            while (right < n) {
                if (text[right] == i + 'a' || k > 0) {
                    if (text[right] != i + 'a') {
                        k--;
                    }
                    right++;
                    curLen++;
                } else {
                    if (text[left] != i + 'a') {
                        k++;
                    }
                    left++;
                    curLen--;
                }
                if (curLen + k > count[i]) {
                    curLen--;
                    if (text[left] != i + 'a') {
                        k++;
                    }
                    left++;
                }
                maxLen = max(maxLen, curLen);
            }
        }
        return maxLen;

=======

        int maxLen = 0;
        int n = text.length();
        vector<int> count(26, 0);
        vector<int> last(26, -1);
        for (int i = 0; i < n; ++i) {
            char c = text[i];
            int idx = c - 'a';
            count[idx]++;
            last[idx] = i;
        }
        for (int i = 0; i < 26; ++i) {
            if (count[i] == 0) continue;
            int len = 0;
            int j = 0;
            while (j < n) {
                if (text[j] == 'a' + i) {
                    if (j + 1 < n && text[j + 1] == 'a' + i) {
                        len += 2;
                        j += 2;
                    } else {
                        len++;
                        j++;
                    }
                } else {
                    int idx = text[j] - 'a';
                    if (j + 1 < n && text[j + 1] == 'a' + i && count[idx] > 1 && last[idx] > j) {
                        len += 2;
                        j += 2;
                    } else {
                        len++;
                        j++;
                    }
                }
                maxLen = max(maxLen, len);
                if (j < n && text[j] == 'a' + i) {
                    len = 0;
                }
            }
        }
        return maxLen;

=======

        vector<int> v(26, 0);
        for (char c : text) {
            ++v[c - 'a'];
        }
        int n = text.size();
        int i = 0, j = 0;
        int res = 0;
        while (i < n) {
            int c = text[i] - 'a';
            int k = 1;
            while (i + k < n && text[i + k] == text[i]) {
                ++k;
            }
            if (k < v[c]) {
                int l = i + k;
                while (l < n && text[l] == text[i]) {
                    ++l;
                }
                if (l < n && text[l] == text[i - 1]) {
                    res = max(res, l - i + 1);
                } else {
                    res = max(res, l - i);
                }
            }
            res = max(res, k);
            i += k;
        }
        return res;
