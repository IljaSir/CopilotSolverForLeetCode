Synthesizing 10/10 solutions

=======

        int n = nums.size();
        vector<int> prefix(n + 1);
        for (int i = 0; i < n; ++i) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int maxScore = 0;
        vector<int> ans;
        for (int i = 0; i <= n; ++i) {
            int score = prefix[i] + (n - i) - (prefix[n] - prefix[i]);
            if (score > maxScore) {
                maxScore = score;
                ans = {i};
            } else if (score == maxScore) {
                ans.push_back(i);
            }
        }
        return ans;

=======

        int n = nums.size();
        vector<int> prefix(n+1, 0);
        for (int i = 0; i < n; ++i) {
            prefix[i+1] = prefix[i] + nums[i];
        }
        int max_score = 0;
        vector<int> res;
        for (int i = 0; i <= n; ++i) {
            int score = prefix[i] + (n-i) - (prefix[n] - prefix[i]);
            if (score > max_score) {
                max_score = score;
                res = {i};
            } else if (score == max_score) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> left(nums.size(), 0);
        vector<int> right(nums.size(), 0);
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            left[i] = sum;
        }
        sum = 0;
        for (int i = nums.size() - 1; i >= 0; i--) {
            sum += nums[i];
            right[i] = sum;
        }
        int maxScore = 0;
        vector<int> result;
        for (int i = 0; i < nums.size(); i++) {
            int score = left[i] + right[i];
            if (score > maxScore) {
                result.clear();
                result.push_back(i + 1);
                maxScore = score;
            } else if (score == maxScore) {
                result.push_back(i + 1);
            }
        }
        return result;

=======

        int n = nums.size();
        vector<int> left(n, 0);
        vector<int> right(n, 0);
        int leftSum = 0;
        int rightSum = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                leftSum++;
            }
            left[i] = leftSum;
        }
        for (int i = n - 1; i >= 0; --i) {
            if (nums[i] == 1) {
                rightSum++;
            }
            right[i] = rightSum;
        }
        int maxScore = 0;
        vector<int> res;
        for (int i = 0; i < n; ++i) {
            int score = left[i] + right[i];
            if (score > maxScore) {
                maxScore = score;
                res.clear();
                res.push_back(i);
            } else if (score == maxScore) {
                res.push_back(i);
            }
        }
        return res;

=======

        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        int maxScore = 0;
        vector<int> res;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 0) {
                sum++;
            } else {
                sum--;
            }
            if (sum > maxScore) {
                maxScore = sum;
                res = {i + 1};
            } else if (sum == maxScore) {
                res.push_back(i + 1);
            }
        }
        return res;

=======

        int n = nums.size();
        int count1 = 0;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 1) {
                count1++;
            }
        }
        int count0 = 0;
        int maxScore = 0;
        vector<int> result;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                count0++;
            } else {
                count1--;
            }
            int score = count0 + count1;
            if(score > maxScore) {
                maxScore = score;
                result.clear();
                result.push_back(i);
            } else if(score == maxScore) {
                result.push_back(i);
            }
        }
        return result;

=======

        int n = nums.size();
        vector<int> result;
        int maxScore = 0;
        int leftZeros = 0;
        int rightOnes = accumulate(nums.begin(), nums.end(), 0);
        for (int i = 0; i < n; i++) {
            if (nums[i] == 0) leftZeros++;
            else rightOnes--;
            int score = leftZeros + rightOnes;
            if (score > maxScore) {
                maxScore = score;
                result = { i + 1 };
            } else if (score == maxScore) {
                result.push_back(i + 1);
            }
        }
        return result;

=======

        vector<int> result;
        int n = nums.size();
        vector<int> zeros(n, 0);
        vector<int> ones(n, 0);
        for(int i = 0; i < n; i++) {
            zeros[i] = nums[i] == 0 ? 1 : 0;
            ones[i] = nums[i] == 1 ? 1 : 0;
        }
        for(int i = 1; i < n; i++) {
            zeros[i] += zeros[i - 1];
            ones[i] += ones[i - 1];
        }
        int maxScore = 0;
        for(int i = 0; i < n; i++) {
            int score = zeros[i] + ones[n - 1] - ones[i];
            if(score > maxScore) {
                maxScore = score;
                result.clear();
                result.push_back(i + 1);
            } else if(score == maxScore) {
                result.push_back(i + 1);
            }
        }
        return result;

=======

        int n = nums.size();
        vector<int> res;
        int max = 0;
        int ones = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 1) {
                ++ones;
            }
            int score = i + 1 - ones;
            if (score > max) {
                res.clear();
                max = score;
                res.push_back(i);
            }
            else if (score == max) {
                res.push_back(i);
            }
        }
        return res;

=======

        vector<int> ans;
        int n = nums.size();
        int sum = 0;
        for(int i=0; i<n; i++) sum += nums[i];
        int max_score = INT_MIN;
        int score = 0;
        for(int i=0; i<n; i++) {
            score = sum + i;
            if(score > max_score) {
                max_score = score;
                ans.clear();
                ans.push_back(i);
            } else if(score == max_score) {
                ans.push_back(i);
            }
            if(nums[i] == 1) sum--;
        }
        return ans;
