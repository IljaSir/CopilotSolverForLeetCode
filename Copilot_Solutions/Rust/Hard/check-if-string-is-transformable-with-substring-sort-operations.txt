Synthesizing 7/10 solutions (Duplicates hidden)

=======

        let mut s = s.chars().map(|c| c.to_digit(10).unwrap() as usize).collect::<Vec<usize>>();
        let mut t = t.chars().map(|c| c.to_digit(10).unwrap() as usize).collect::<Vec<usize>>();
        
        let mut pos = vec![0; 10];
        for i in 0..s.len() {
            pos[s[i]] = i;
        }
        
        for i in 0..t.len() {
            let mut j = pos[t[i]];
            while j < i {
                if s[j] < s[j+1] {
                    s.swap(j, j+1);
                } else {
                    return false;
                }
                j += 1;
            }
        }
        
        true

=======

        let mut s = s.chars().map(|c| c.to_digit(10).unwrap() as usize).collect::<Vec<usize>>();
        let mut t = t.chars().map(|c| c.to_digit(10).unwrap() as usize).collect::<Vec<usize>>();
        let mut pos = vec![0; 10];
        for i in 0..s.len() {
            pos[s[i]] = i;
        }
        for i in 0..s.len() {
            let c = t[i];
            let p = pos[c];
            for j in 0..c {
                if pos[j] < p {
                    return false;
                }
            }
            for j in c + 1..10 {
                pos[j] -= 1;
            }
        }
        true

=======

        let mut pos = vec![vec![]; 10];
        for (i, c) in s.chars().enumerate() {
            pos[c as usize - '0' as usize].push(i);
        }
        for c in t.chars() {
            let c = c as usize - '0' as usize;
            if pos[c].is_empty() {
                return false;
            }
            let i = pos[c].remove(0);
            for j in 0..c {
                if !pos[j].is_empty() && pos[j][0] < i {
                    return false;
                }
            }
        }
        true

=======

        
    }
}

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut t: Vec<char> = t.chars().collect();
        let mut pos: Vec<Vec<usize>> = vec![vec![]; 10];
        for i in 0..s.len() {
            let x = s[i] as usize - '0' as usize;
            pos[x].push(i);
        }
        for i in 0..t.len() {
            let x = t[i] as usize - '0' as usize;
            if pos[x].len() == 0 {
                return false;
            }
            let y = pos[x][0];
            for j in 0..x {
                if pos[j].len() > 0 && pos[j][0] < y {
                    return false;
                }
            }
            pos[x].remove(0);
        }
        true
    }
}
