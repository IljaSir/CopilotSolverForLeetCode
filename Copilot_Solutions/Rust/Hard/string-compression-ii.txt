Synthesizing 6/10 solutions (Duplicates hidden)

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut dp = vec![vec![0; k as usize + 1]; n + 1];
        for i in 1..=n {
            let mut cnt = vec![0; 26];
            let mut cur = 0;
            for j in i..=n {
                cnt[(s[j - 1] - b'a') as usize] += 1;
                if cnt[(s[j - 1] - b'a') as usize] == 1 {
                    cur += 1;
                }
                if cnt[(s[j - 1] - b'a') as usize] == 2 {
                    cur -= 1;
                }
                let mut t = cur;
                if cnt[(s[j - 1] - b'a') as usize] > 2 {
                    t += 1;
                }
                for l in 0..=k as usize {
                    if l < j - i + 1 {
                        dp[j][l] = dp[i - 1][l];
                    } else {
                        dp[j][l] = dp[j][l].min(dp[i - 1][l - (j - i + 1)] + t);
                    }
                }
            }
        }
        dp[n][k as usize] as i32
    }
}

=======

        let n = s.len();
        let s = s.into_bytes();
        let mut dp = vec![vec![0; n + 1]; n + 1];
        for i in 0..=n {
            for j in 0..=n {
                dp[i][j] = n;
            }
        }
        for i in 0..=n {
            dp[i][0] = 0;
        }
        for i in 0..n {
            let mut count = vec![0; 26];
            for j in i..n {
                count[(s[j] - b'a') as usize] += 1;
                let mut max = 0;
                let mut sum = 0;
                for c in &count {
                    max = max.max(*c);
                    sum += *c;
                }
                let same = j - i + 1 - max;
                for t in 0..=same {
                    let cost = if max < 10 {
                        1
                    } else if max < 100 {
                        2
                    } else {
                        3
                    };
                    dp[j + 1][t + 1] = dp[j + 1][t + 1].min(dp[i][t] + cost);
                }
            }
        }
        for i in 0..=n {
            if dp[n][i] <= k {
                return i as i32;
            }
        }
        n as i32

=======

        
    }
}

=======

        let n = s.len();
        let mut dp = vec![vec![0; k as usize + 1]; n + 1];
        for i in 1..=n {
            let mut count = vec![0; 26];
            let mut max_char_count = 0;
            for j in i..=n {
                let idx = s.as_bytes()[j - 1] - b'a';
                count[idx as usize] += 1;
                max_char_count = max_char_count.max(count[idx as usize]);
                let mut delete_count = j - i + 1 - max_char_count;
                for l in 0..=k as usize {
                    if delete_count <= l {
                        dp[j][l] = dp[j][l].max(dp[i - 1][l - delete_count] + 1 + if max_char_count > 9 { 2 } else if max_char_count > 1 { 1 } else { 0 });
                    }
                }
            }
        }
        n as i32 - dp[n][k as usize]
    }
}

=======

        let n = s.len();
        let s = s.as_bytes();
        let mut dp = vec![vec![vec![0; n + 1]; n + 1]; n + 1];
        for i in 0..n {
            for j in 0..n {
                for l in 0..n {
                    dp[i][j][l] = n as i32;
                }
            }
        }
        for i in 0..n {
            dp[i][i][1] = 1;
        }
        for l in 2..=n {
            for i in 0..n {
                let j = i + l - 1;
                if j >= n {
                    break;
                }
                for p in i..j {
                    for q in 0..=k {
                        dp[i][j][q as usize] = dp[i][j][q as usize].min(dp[i][p][q as usize] + dp[p + 1][j][0]);
                    }
                }
                let mut count = 1;
                for p in i + 1..=j {
                    if s[p] == s[i] {
                        count += 1;
                    } else {
                        break;
                    }
                }
                let mut t = count.to_string().len() as i32 + 1;
                if count == 2 || count == 3 {
                    t -= 1;
                }
                for q in 0..=k {
                    dp[i][j][q as usize] = dp[i][j][q as usize].min(dp[i + count][j][q as usize] + t);
                }
                for p in i + 1..=j {
                    for q in 0..k {
                        dp[i][j][(q + 1) as usize] = dp[i][j][(q + 1) as usize].min(dp[i][p - 1][q as usize] + dp[p][j][0]);
                    }
                }
            }
        }
        dp[0][n - 1][k as usize]
