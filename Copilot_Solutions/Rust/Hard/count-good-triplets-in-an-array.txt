Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 0..nums1.len() {
            for j in i + 1..nums1.len() {
                for k in j + 1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] &&
                        nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        count += 1;
                    }
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums1.len() {
            for j in i + 1..nums1.len() {
                for k in j + 1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        count += 1;
                    }
                }
            }
        }
        count as i64

=======

        let mut ans = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                for k in j+1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        ans += 1;
                    }
                }
            }
        }
        ans
    }
}

=======

        let mut count = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                for k in j+1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in i + 1..nums1.len() {
                for k in j + 1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        res += 1;
                    }
                }
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                for k in j+1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        res += 1;
                    }
                }
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        let n = nums1.len();
        for i in 0..n {
            for j in i+1..n {
                for k in j+1..n {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        ans += 1;
                    }
                }
            }
        }
        ans as i64

=======

        let mut res = 0;
        let n = nums1.len();
        for i in 0..n {
            for j in i+1..n {
                for k in j+1..n {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] && nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                        res += 1;
                    }
                }
            }
        }
        res

=======

        let mut good_triplets = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                for k in j+1..nums1.len() {
                    if nums1[i] < nums1[j] && nums1[j] < nums1[k] {
                        if nums2[i] < nums2[j] && nums2[j] < nums2[k] {
                            good_triplets += 1;
                        }
                    }
                }
            }
        }
        good_triplets as i64

=======

        let mut c = 0;
        for (i, n1) in nums1.iter().enumerate() {
            for (j, n2) in nums2.iter().enumerate() {
                if n1 == n2 && i < j {
                    for (k, n3) in nums2.iter().enumerate() {
                        if n1 == n3 && j < k {
                            c += 1;
                        }
                    }
                }
            }
        }
        c
    }
}
