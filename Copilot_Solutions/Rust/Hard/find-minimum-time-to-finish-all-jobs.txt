Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let mut jobs = jobs;
        jobs.sort();
        let mut left = jobs[0];
        let mut right = jobs.iter().sum();
        while left < right {
            let mid = left + (right - left) / 2;
            if Solution::check(&jobs, k, mid) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left
    }
    fn check(jobs: &Vec<i32>, k: i32, limit: i32) -> bool {
        let mut workloads = vec![0; k as usize];
        Solution::backtrack(jobs, &mut workloads, 0, limit)
    }
    fn backtrack(jobs: &Vec<i32>, workloads: &mut Vec<i32>, i: usize, limit: i32) -> bool {
        if i >= jobs.len() {
            return true;
        }
        let cur = jobs[i];
        for j in 0..workloads.len() {
            if workloads[j] + cur <= limit {
                workloads[j] += cur;
                if Solution::backtrack(jobs, workloads, i + 1, limit) {
                    return true;
                }
                workloads[j] -= cur;
            }
            if workloads[j] == 0 || workloads[j] + cur == limit {
                break;
            }
        }
        false

=======

        let mut jobs = jobs;
        jobs.sort();
        let k = k as usize;
        let mut ans = std::i32::MAX;
        let mut workers = vec![0; k];
        let mut used = vec![false; k];
        let mut dfs = |jobs: &mut Vec<i32>, workers: &mut Vec<i32>, used: &mut Vec<bool>, idx: usize, max: &mut i32| {
            if idx == jobs.len() {
                *max = std::cmp::min(*max, workers.iter().max().unwrap().clone());
                return;
            }
            let mut seen = std::collections::HashSet::new();
            for i in 0..k {
                if used[i] || seen.contains(&workers[i]) {
                    continue;
                }
                seen.insert(workers[i]);
                used[i] = true;
                workers[i] += jobs[idx];
                dfs(jobs, workers, used, idx + 1, max);
                workers[i] -= jobs[idx];
                used[i] = false;
            }
        };
        dfs(&mut jobs, &mut workers, &mut used, 0, &mut ans);
        ans
    }
}
