Synthesizing 6/10 solutions

=======

        let n = n as usize;
        let mut dp = vec![vec![vec![0; 3]; 2]; n + 1];
        dp[0][0][0] = 1;
        for i in 0..n {
            for j in 0..2 {
                for k in 0..3 {
                    dp[i + 1][j][0] = (dp[i + 1][j][0] + dp[i][j][k]) % 1000000007;
                    if k < 2 {
                        dp[i + 1][j][k + 1] = (dp[i + 1][j][k + 1] + dp[i][j][k]) % 1000000007;
                    }
                    if j < 1 {
                        dp[i + 1][j + 1][0] = (dp[i + 1][j + 1][0] + dp[i][j][k]) % 1000000007;
                    }
                }
            }
        }
        let mut res = 0;
        for j in 0..2 {
            for k in 0..3 {
                res = (res + dp[n][j][k]) % 1000000007;
            }
        }
        res

=======

        let n = n as usize;
        let mut dp = vec![vec![vec![0; 3]; 2]; n + 1];
        dp[0][0][0] = 1;
        for i in 0..n {
            for j in 0..2 {
                for k in 0..3 {
                    dp[i + 1][j][0] = (dp[i + 1][j][0] + dp[i][j][k]) % 1000000007;
                    if j == 0 {
                        dp[i + 1][j + 1][0] = (dp[i + 1][j + 1][0] + dp[i][j][k]) % 1000000007;
                    }
                    if k < 2 {
                        dp[i + 1][j][k + 1] = (dp[i + 1][j][k + 1] + dp[i][j][k]) % 1000000007;
                    }
                }
            }
        }
        let mut ans = 0;
        for j in 0..2 {
            for k in 0..3 {
                ans = (ans + dp[n][j][k]) % 1000000007;
            }
        }
        ans

=======

        let n = n as usize;
        let mut dp = vec![vec![vec![0; 3]; 2]; n+1];
        dp[0][0][0] = 1;
        for i in 1..n+1 {
            for j in 0..2 {
                for k in 0..3 {
                    dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][k]) % 1000000007;
                    if j > 0 {
                        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j-1][k]) % 1000000007;
                    }
                    if k > 0 {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k-1]) % 1000000007;
                    }
                }
            }
        }
        let mut sum = 0;
        for j in 0..2 {
            for k in 0..3 {
                sum = (sum + dp[n][j][k]) % 1000000007;
            }
        }
        sum

=======

        
    }
}

=======

        let n = n as usize;
        let mut dp = vec![vec![vec![0; 3]; 2]; n+1];
        dp[0][0][0] = 1;
        let mod_num = 1_000_000_007;
        for i in 1..=n {
            for absent in 0..=1 {
                for late in 0..=2 {
                    dp[i][absent][0] = (dp[i][absent][0] + dp[i-1][absent][late]) % mod_num;
                    if absent == 0 {
                        dp[i][1][0] = (dp[i][1][0] + dp[i-1][0][late]) % mod_num;
                    }
                    if late < 2 {
                        dp[i][absent][late+1] = (dp[i][absent][late+1] + dp[i-1][absent][late]) % mod_num;
                    }
                }
            }
        }
        (dp[n][0][0] + dp[n][1][0]) % mod_num

=======

        let mut a = 1;
        let mut p = 1;
        let mut l = 1;
        let mut la = 0;
        let mut lp = 0;
        let mut ll = 0;
        let mut modu = 1000000007;
        for _ in 1..n {
            let na = (a + p + l) % modu;
            let np = a;
            let nl = p;
            let nla = (la + lp + ll) % modu;
            let nlp = la;
            let nll = lp;
            a = na;
            p = np;
            l = nl;
            la = nla;
            lp = nlp;
            ll = nll;
        }
        (a + p + l + la + lp + ll) % modu
