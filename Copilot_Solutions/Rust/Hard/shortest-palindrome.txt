Synthesizing 10/10 solutions

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut i = 0;
        for j in (0..n).rev() {
            if s[i] == s[j] {
                i += 1;
            }
        }
        if i == n {
            return String::from_utf8(s.to_vec()).unwrap();
        }
        let rem = &s[i..];
        let mut rem_rev = rem.to_vec();
        rem_rev.reverse();
        let mut left = rem_rev;
        left.extend_from_slice(s);
        let mut right = s.to_vec();
        right.extend_from_slice(&rem_rev);
        let mut left = Self::shortest_palindrome(String::from_utf8(left).unwrap());
        let mut right = Self::shortest_palindrome(String::from_utf8(right).unwrap());
        if left.len() < right.len() {
            left
        } else {
            right
        }
    }
}

=======

        let mut s = s.as_bytes().to_vec();
        let mut t = s.clone();
        t.reverse();
        let mut f = vec![0; s.len()];
        for i in 1..s.len() {
            let mut j = f[i - 1];
            while j > 0 && s[i] != s[j] {
                j = f[j - 1];
            }
            f[i] = if s[i] == s[j] { j + 1 } else { 0 };
        }
        let mut j = 0;
        for i in 0..t.len() {
            while j > 0 && s[j] != t[i] {
                j = f[j - 1];
            }
            if s[j] == t[i] {
                j += 1;
            }
        }
        let mut res = vec![0; t.len() + s.len() - j];
        res[..t.len()].copy_from_slice(&t);
        res[t.len()..].copy_from_slice(&s[j..]);
        String::from_utf8(res).unwrap()

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = s.clone();
        t.reverse();
        let mut i = 0;
        for j in 0..s.len() {
            if s[j] == t[i] {
                i += 1;
            }
        }
        if i == s.len() {
            return s.into_iter().collect::<String>();
        }
        let mut r = t[..i].to_vec();
        r.reverse();
        r.extend(s);
        r.into_iter().collect::<String>()

=======

        let n = s.len();
        let mut s = s.as_bytes();
        let mut rev = s.to_vec();
        rev.reverse();
        let mut f = vec![0; n + 1];
        for i in 1..=n {
            let mut j = f[i];
            while j > 0 && s[i - 1] != rev[j] {
                j = f[j];
            }
            if s[i - 1] == rev[j] {
                j += 1;
            }
            f[i + 1] = j;
        }
        let mut res = rev[..n - f[n]].to_vec();
        res.extend_from_slice(s);
        String::from_utf8(res).unwrap()
    }
}

=======

        let mut rev = s.clone();
        rev.reverse();
        let mut str = s + "#" + &rev;
        let mut lps = vec![0; str.len()];
        let mut i = 1;
        let mut j = 0;
        while i < str.len() {
            if str.as_bytes()[i] == str.as_bytes()[j] {
                j += 1;
                lps[i] = j;
                i += 1;
            } else {
                if j != 0 {
                    j = lps[j - 1];
                } else {
                    lps[i] = 0;
                    i += 1;
                }
            }
        }
        let mut res = s.clone();
        rev = s.clone();
        rev.reverse();
        res.push_str(&rev[lps[str.len() - 1]..]);
        res

=======

        let mut s = s.as_bytes();
        let mut i = s.len();
        while i > 0 {
            if Self::check_palindrome(&s[..i]) {
                break;
            }
            i -= 1;
        }
        let mut ret = Vec::new();
        for &c in &s[i..] {
            ret.push(c);
        }
        ret.reverse();
        for &c in s {
            ret.push(c);
        }
        String::from_utf8(ret).unwrap()
    }
    fn check_palindrome(s: &[u8]) -> bool {
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            if s[i] != s[j] {
                return false;
            }
            i += 1;
            j -= 1;
        }
        true

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let n = s.len();
        let mut rev = s.clone();
        rev.reverse();
        let mut s = s.iter().chain(&['#']).chain(rev.iter()).collect::<String>();
        let n = s.len();
        let mut f = vec![0; n];
        for i in 1..n {
            let mut j = f[i-1];
            while j > 0 && s.chars().nth(i) != s.chars().nth(j) {
                j = f[j-1];
            }
            if s.chars().nth(i) == s.chars().nth(j) {
                j += 1;
            }
            f[i] = j;
        }
        let mut res = s.chars().skip(n/2).collect::<String>();
        res.reverse();
        res = res.chars().chain(s.chars().skip(f[n-1])).collect::<String>();
        res

=======

        let s = s.as_bytes();
        let mut r = s.to_vec();
        r.reverse();
        let mut ss = s.to_vec();
        ss.push(b'#');
        ss.extend(r);
        let ss = String::from_utf8(ss).unwrap();
        let mut f = vec![0; ss.len()];
        for i in 1..ss.len() {
            let mut j = f[i - 1];
            while j > 0 && ss.as_bytes()[i] != ss.as_bytes()[j] {
                j = f[j - 1];
            }
            if ss.as_bytes()[i] == ss.as_bytes()[j] {
                j += 1;
            }
            f[i] = j;
        }
        let mut r = s.to_vec();
        r.reverse();
        let mut ss = r.to_vec();
        ss.extend(s);
        let ss = String::from_utf8(ss).unwrap();
        let mut f = vec![0; ss.len()];
        for i in 1..ss.len() {
            let mut j = f[i - 1];
            while j > 0 && ss.as_bytes()[i] != ss.as_bytes()[j] {
                j = f[j - 1];
            }
            if ss.as_bytes()[i] == ss.as_bytes()[j] {
                j += 1;
            }
            f[i] = j;
        }
        let mut r = String::new();
        for i in 0..f[ss.len() - 1] {
            r.push(ss.as_bytes()[i] as char);
        }
        let mut r = r.as_bytes().to_vec();
        r.reverse();
        let mut r = String::from_utf8(r).unwrap();
        r.push_str(&ss);
        r
    }
}

=======

        let s = s.as_bytes();
        let mut r = s.to_vec();
        r.reverse();
        let mut t = [0; 100_000];
        let mut i = 1;
        let mut j = 0;
        while i < s.len() {
            if s[i] == s[j] {
                t[i] = j + 1;
                i += 1;
                j += 1;
            } else if j > 0 {
                j = t[j - 1];
            } else {
                i += 1;
            }
        }
        let mut i = 0;
        let mut j = 0;
        while i < r.len() {
            if r[i] == s[j] {
                i += 1;
                j += 1;
            } else if j > 0 {
                j = t[j - 1];
            } else {
                i += 1;
            }
        }
        let mut ans = Vec::new();
        ans.extend_from_slice(&r[..r.len() - j]);
        ans.extend_from_slice(s);
        String::from_utf8(ans).unwrap()

=======

        let s = s.as_bytes();
        let mut ss = s.to_vec();
        ss.reverse();
        let ss = ss.as_slice();
        let mut kmp = vec![0; s.len()];
        let mut j = 0;
        for i in 1..s.len() {
            while j > 0 && s[i] != s[j] {
                j = kmp[j - 1];
            }
            if s[i] == s[j] {
                j += 1;
            }
            kmp[i] = j;
        }
        j = 0;
        for i in 0..ss.len() {
            while j > 0 && ss[i] != s[j] {
                j = kmp[j - 1];
            }
            if ss[i] == s[j] {
                j += 1;
            }
        }
        let mut ans = vec![];
        ans.extend_from_slice(&ss[..ss.len() - j]);
        ans.extend_from_slice(s);
        unsafe { String::from_utf8_unchecked(ans) }
