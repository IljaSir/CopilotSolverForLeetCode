Synthesizing 6/10 solutions (Duplicates hidden)

=======

        let n = n as usize;
        let k = k as usize;
        let mut dp = vec![vec![0; k + 1]; n + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            dp[i][0] = 1;
            for j in 1..=k {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                if j >= i {
                    dp[i][j] -= dp[i - 1][j - i];
                }
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }
        }
        dp[n][k] as i32

=======

        let n = n as usize;
        let k = k as usize;
        let mut dp = vec![vec![0; k+1]; n+1];
        for i in 1..=n {
            dp[i][0] = 1;
        }
        for i in 2..=n {
            for j in 1..=k {
                let mut sum = dp[i-1][j];
                if j >= i {
                    sum += dp[i-1][j-i];
                }
                dp[i][j] = (sum + dp[i][j-1]) % 1000000007;
            }
        }
        dp[n][k] as i32

=======

        let n = n as usize;
        let k = k as usize;
        let mut dp = vec![vec![0; k + 1]; n + 1];
        let modu = 1000000007;
        for i in 1..=n {
            dp[i][0] = 1;
        }
        for i in 1..=n {
            for j in 1..=k {
                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % modu;
                if j >= i {
                    dp[i][j] = (dp[i][j] + modu - dp[i - 1][j - i]) % modu;
                }
            }
        }
        dp[n][k]
    }
}

=======

        
    }
}

=======

        let n: usize = n as usize;
        let k: usize = k as usize;
        let mut dp = vec![vec![0; k + 1]; n + 1];
        let m = 1_000_000_007;
        dp[0][0] = 1;
        for i in 1..=n {
            dp[i][0] = 1;
            for j in 1..=k {
                dp[i][j] = dp[i][j - 1];
                if j >= i {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j] - dp[i - 1][j - i]) % m;
                } else {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j]) % m;
                }
            }
        }
        (dp[n][k] + m) % m
