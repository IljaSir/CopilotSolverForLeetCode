Synthesizing 9/10 solutions

=======

        let mut left = 0;
        let mut right = s.len() - 1;
        let mut res = 0;
        while left < right {
            if s.chars().nth(left).unwrap() == '1' {
                res += 1;
                while left < right && s.chars().nth(right).unwrap() == '1' {
                    right -= 1;
                }
                if left < right && s.chars().nth(right).unwrap() == '0' {
                    res += 1;
                    right -= 1;
                }
            } else {
                left += 1;
            }
        }
        if left == right && s.chars().nth(left).unwrap() == '1' {
            res += 1;
        }
        res

=======

        let mut left = 0;
        let mut right = 0;
        for c in s.chars() {
            if c == '1' {
                left += 1;
            }
        }
        let mut ans = left;
        for c in s.chars() {
            if c == '1' {
                left -= 1;
            } else {
                right += 1;
            }
            ans = ans.min(left + right);
        }
        ans

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = s.len() - 1;
        let mut res = 0;
        while i < j {
            if s[i] == '1' {
                res += 1;
                while i < j && s[j] == '1' {
                    j -= 1;
                    res += 1;
                }
                j -= 1;
            } else {
                i += 1;
            }
        }
        if i == j && s[i] == '1' {
            res += 1;
        }
        res

=======

        let mut res = 0;
        let mut count = 0;
        for c in s.chars() {
            if c == '0' {
                count = 0;
            } else {
                count += 1;
                if count % 2 == 1 {
                    res += 2;
                }
            }
        }
        res - if count % 2 == 1 { 1 } else { 0 }

=======

        let mut zero = 0;
        let mut one = 0;
        let mut res = 0;
        for c in s.chars() {
            if c == '0' {
                zero += 1;
                res = res.max(one);
            } else {
                one += 1;
            }
        }
        res.max(one) * 2 - (zero > 0) as i32

=======

        let mut ans = 0;
        let mut cnt = 0;
        for c in s.chars() {
            if c == '1' {
                cnt += 1;
            } else {
                ans += cnt / 2;
                cnt = 0;
            }
        }
        ans += cnt / 2;
        ans * 2 + cnt % 2

=======

        let mut ans = 0;
        let mut left = 0;
        let mut right = s.len() - 1;
        let s = s.as_bytes();
        while left < right {
            if s[left] == b'1' && s[right] == b'1' {
                ans += 2;
                left += 1;
                right -= 1;
            } else if s[left] == b'0' {
                left += 1;
            } else if s[right] == b'0' {
                right -= 1;
            }
        }
        if left == right && s[left] == b'1' {
            ans += 1;
        }
        ans

=======

        let mut count = 0;
        let mut res = 0;
        let mut last = 0;
        for c in s.chars() {
            if c == '1' {
                count += 1;
            } else {
                if count > 0 {
                    res += 2;
                    last = 2;
                } else {
                    last = 1;
                }
            }
        }
        if count > 0 {
            res - last + 1
        } else {
            0
        }

=======

        let mut count = 0;
        let mut max = 0;
        let mut last = '0';
        for c in s.chars() {
            if c == '1' {
                count += 1;
                if last == '0' {
                    max = count;
                }
            } else {
                count = 0;
            }
            last = c;
        }
        let mut result = 0;
        if max > 0 {
            result = 2 * (max - 1);
            if max < s.len() {
                result += 1;
            }
        }
        result
