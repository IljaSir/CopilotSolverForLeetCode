Synthesizing 5/10 solutions

=======

        let n = nums.len();
        let mut nums = nums;
        nums.sort();
        let mut ans = n as i32;
        for i in 0..n {
            let j = nums.lower_bound(&(nums[i] + n as i32));
            ans = ans.min(n as i32 - (j - i) as i32);
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = nums.len() as i32;
        let mut i = 0;
        let mut j = 0;
        while i < nums.len() {
            while j < nums.len() && nums[j] - nums[i] < nums.len() as i32 {
                j += 1;
            }
            ans = ans.min((nums.len() - (j - i)) as i32);
            i += 1;
        }
        ans

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut ans = nums.len() as i32;
        let mut l = 0;
        let mut r = 0;
        while r < nums.len() {
            while r < nums.len() && nums[r] - nums[l] < nums.len() as i32 {
                r += 1;
            }
            ans = ans.min((nums.len() - (r - l)) as i32);
            l += 1;
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let len = nums.len();
        let mut ans = len;
        let mut i = 0;
        for j in 0..len {
            while nums[j] - nums[i] >= len as i32 {
                i += 1;
            }
            ans = ans.min(len - (j - i + 1));
        }
        ans as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut res = nums.len() as i32;
        let mut start = 0;
        let mut end = 0;
        while end < nums.len() {
            if nums[end] - nums[start] >= nums.len() as i32 {
                start += 1;
            } else {
                res = res.min(nums.len() as i32 - (end - start + 1) as i32);
                end += 1;
            }
        }
        res
