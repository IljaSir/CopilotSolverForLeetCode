Synthesizing 10/10 solutions

=======

        let mut res = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let mut max = 0;
            let mut sum = 0;
            for k in i..j {
                max = max.max(cost[k]);
                sum += cost[k];
            }
            res += sum - max;
            i = j;
        }
        res
    }
}

=======

        let mut result = 0;
        let mut i = 1;
        while i < nums.len() {
            if nums[i] == nums[i - 1] {
                if cost[i] > cost[i - 1] {
                    result += cost[i - 1] as i64;
                    cost[i] = cost[i - 1];
                } else {
                    result += cost[i] as i64;
                }
            }
            i += 1;
        }
        result
    }
}

=======

        let mut sum = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            if j > i + 1 {
                let mut max = 0;
                let mut max_idx = 0;
                for k in i..j {
                    if cost[k] > max {
                        max = cost[k];
                        max_idx = k;
                    }
                }
                for k in i..j {
                    if k != max_idx {
                        sum += cost[k];
                    }
                }
            }
            i = j;
        }
        sum

=======

        let mut sum = 0;
        let mut max = 0;
        for i in 1..nums.len() {
            if nums[i-1] == nums[i] {
                sum += cost[i-1];
                max = max.max(cost[i-1]);
            } else {
                sum += max;
                max = 0;
            }
        }
        sum += max;
        sum

=======

        let mut sum = 0;
        let mut max = 0;
        let mut prev = nums[0];
        for i in 0..nums.len() {
            if nums[i] == prev {
                max = max.max(cost[i]);
                sum += cost[i];
            } else {
                sum -= max;
                max = cost[i];
                prev = nums[i];
            }
        }
        sum as i64
    }
}

=======

        let mut sum = 0;
        let mut max = 0;
        let mut prev = nums[0];
        for i in 0..nums.len() {
            if prev == nums[i] {
                sum += cost[i];
                max = max.max(cost[i]);
            } else {
                sum -= max;
                max = 0;
                prev = nums[i];
            }
        }
        sum

=======

        let mut ans = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut max_cost = cost[i];
            let mut sum = cost[i];
            while j < nums.len() && nums[j] == nums[i] {
                max_cost = max_cost.max(cost[j]);
                sum += cost[j];
                j += 1;
            }
            ans += sum - max_cost;
            i = j;
        }
        ans
    }
}

=======

        let mut cost = cost;
        let mut nums = nums;
        let mut sum = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i-1] {
                if cost[i] < cost[i-1] {
                    sum += cost[i] as i64;
                    cost[i] = cost[i-1];
                } else {
                    sum += cost[i-1] as i64;
                }
            }
        }
        sum
    }
}

=======

        let mut sum = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut max = cost[i];
            let mut max_idx = i;
            while j < nums.len() && nums[j] == nums[i] {
                if cost[j] > max {
                    max = cost[j];
                    max_idx = j;
                }
                j += 1;
            }
            for k in i..j {
                if k != max_idx {
                    sum += cost[k];
                }
            }
            i = j;
        }
        sum
    }
}

=======

        let mut ans = 0i64;
        let mut i = 0;
        while i < nums.len() {
            let mut max = 0i64;
            let mut sum = 0i64;
            let mut j = i;
            while j < nums.len() && nums[i] == nums[j] {
                max = max.max(cost[j] as i64);
                sum += cost[j] as i64;
                j += 1;
            }
            ans += sum - max;
            i = j;
        }
        ans
