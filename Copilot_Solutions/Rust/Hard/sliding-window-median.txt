Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut res = vec![];
        let mut window = vec![];
        for i in 0..nums.len() {
            if window.len() < k as usize {
                window.push(nums[i]);
            } else {
                window.remove(0);
                window.push(nums[i]);
            }
            if window.len() == k as usize {
                let mut w = window.clone();
                w.sort();
                if w.len() % 2 == 0 {
                    res.push((w[w.len() / 2 - 1] + w[w.len() / 2]) as f64 / 2.0);
                } else {
                    res.push(w[w.len() / 2] as f64);
                }
            }
        }
        res

=======

        let mut res = Vec::new();
        let mut window = nums[0..k as usize].to_vec();
        window.sort();
        let mut k = k as usize;
        let mut i = 0;
        while i + k <= nums.len() {
            if k % 2 == 0 {
                res.push((window[k / 2 - 1] + window[k / 2]) as f64 / 2.0);
            } else {
                res.push(window[k / 2] as f64);
            }
            if i + k == nums.len() {
                break;
            }
            window.remove(window.binary_search(&nums[i]).unwrap());
            window.insert(window.binary_search(&nums[i + k]).unwrap_or_else(|x| x), nums[i + k]);
            i += 1;
        }
        res

=======

        let mut res = vec![];
        let mut v = nums;
        let mut i = 0;
        let mut j = k as usize;
        while j <= v.len() {
            let mut tmp = v[i..j].to_vec();
            tmp.sort();
            if k % 2 == 0 {
                res.push((tmp[(k / 2 - 1) as usize] + tmp[(k / 2) as usize]) as f64 / 2.0);
            } else {
                res.push(tmp[(k / 2) as usize] as f64);
            }
            i += 1;
            j += 1;
        }
        res
    }
}

=======

        let mut l = 0;
        let mut r = k as usize;
        let mut ret = Vec::new();
        let mut nums = nums;
        while r <= nums.len() {
            let mut curr = nums[l..r].to_vec();
            curr.sort();
            if k % 2 == 0 {
                ret.push((curr[(k/2) as usize - 1] + curr[k as usize/2]) as f64 / 2.0);
            } else {
                ret.push(curr[k as usize/2] as f64);
            }
            l += 1;
            r += 1;
        }
        ret

=======

        let mut v = vec![];
        let mut i = 0;
        let mut j = k as usize;
        let mut v2 = nums[i..j].to_vec();
        v2.sort();
        let mut m = v2.len() / 2;
        if v2.len() % 2 == 0 {
            v.push((v2[m] + v2[m - 1]) as f64 / 2.0);
        } else {
            v.push(v2[m] as f64);
        }
        i += 1;
        j += 1;
        while j <= nums.len() {
            let mut f = false;
            let mut c = 0;
            while c < v2.len() {
                if nums[i - 1] == v2[c] {
                    v2.remove(c);
                    f = true;
                    break;
                }
                c += 1;
            }
            if !f {
                let mut d = 0;
                while d < v2.len() {
                    if nums[i - 1] < v2[d] {
                        v2.insert(d, nums[i - 1]);
                        break;
                    }
                    d += 1;
                }
            }
            if nums[j - 1] > v2[v2.len() - 1] {
                v2.push(nums[j - 1]);
            } else {
                let mut e = 0;
                while e < v2.len() {
                    if nums[j - 1] < v2[e] {
                        v2.insert(e, nums[j - 1]);
                        break;
                    }
                    e += 1;
                }
            }
            m = v2.len() / 2;
            if v2.len() % 2 == 0 {
                v.push((v2[m] + v2[m - 1]) as f64 / 2.0);
            } else {
                v.push(v2[m] as f64);
            }
            i += 1;
            j += 1;
        }
        v
    }
}
