Synthesizing 9/10 solutions

=======

        let n = nums.len();
        let mut s = vec![0; n + 1];
        for i in 0..n {
            s[i + 1] = s[i] + nums[i];
        }
        let mut res = 0;
        for i in 0..n {
            for j in i..n {
                if s[j + 1] - s[i] >= min_k && s[j + 1] - s[i] <= max_k {
                    res += 1;
                }
            }
        }
        res

=======

        let mut res = 0;
        let mut left = 0;
        let mut right = 0;
        let mut min = 0;
        let mut max = 0;
        while right < nums.len() {
            if nums[right] >= min_k {
                min += 1;
            }
            if nums[right] > max_k {
                max += 1;
            }
            while left <= right && max > 0 {
                if nums[left] >= min_k {
                    min -= 1;
                }
                if nums[left] > max_k {
                    max -= 1;
                }
                left += 1;
            }
            res += min as i64;
            right += 1;
        }
        res

=======

        let mut res = 0;
        let mut l = 0;
        let mut r = 0;
        let mut min = 0;
        let mut max = 0;
        while r < nums.len() {
            if nums[r] >= min_k {
                min = r;
            }
            if nums[r] > max_k {
                max = r;
            }
            if max > min {
                l = max;
            }
            res += l as i64 - min as i64 + 1;
            r += 1;
        }
        res

=======

        let mut res = 0;
        let mut left = 0;
        let mut right = 0;
        let mut min = 0;
        let mut max = 0;
        while right < nums.len() {
            if nums[right] >= min_k {
                min += 1;
            }
            if nums[right] > max_k {
                max += 1;
            }
            while min > 0 && max > 0 {
                if nums[left] >= min_k {
                    min -= 1;
                }
                if nums[left] > max_k {
                    max -= 1;
                }
                left += 1;
            }
            res += (left) as i64;
            right += 1;
        }
        res

=======

        let mut res = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut min = nums[i];
            let mut max = nums[i];
            let mut j = i;
            while j < nums.len() {
                min = min.min(nums[j]);
                max = max.max(nums[j]);
                if min >= min_k && max <= max_k {
                    res += 1;
                } else {
                    break;
                }
                j += 1;
            }
            i += 1;
        }
        res
    }
}

=======

        let mut ans = 0;
        let mut min = 0;
        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        while j < nums.len() {
            if nums[j] >= min_k {
                min += 1;
            }
            if nums[j] > max_k {
                max += 1;
            }
            while min > 0 && max == 0 {
                ans += min as i64;
                if nums[i] >= min_k {
                    min -= 1;
                }
                if nums[i] > max_k {
                    max -= 1;
                }
                i += 1;
            }
            j += 1;
        }
        ans

=======

        let mut result = 0;
        let mut left = 0;
        let mut right = 0;
        let mut min = 0;
        let mut max = 0;
        while right < nums.len() {
            if nums[right] < min_k {
                min += 1;
            }
            if nums[right] > max_k {
                max += 1;
            }
            while min > 0 || max > 0 {
                if nums[left] < min_k {
                    min -= 1;
                }
                if nums[left] > max_k {
                    max -= 1;
                }
                left += 1;
            }
            result += (right - left + 1) as i64;
            right += 1;
        }
        result
    }
}

=======

        let mut ans = 0;
        let mut cnt = 0;
        let mut min = 0;
        let mut max = 0;
        let mut l = 0;
        let mut r = 0;
        while r < nums.len() {
            if nums[r] >= min_k {
                min += 1;
            }
            if nums[r] > max_k {
                max += 1;
            }
            while max > 0 {
                if nums[l] > max_k {
                    max -= 1;
                }
                l += 1;
            }
            while min > 0 {
                if nums[l] >= min_k {
                    min -= 1;
                }
                cnt += 1;
                l += 1;
            }
            ans += cnt;
            r += 1;
        }
        ans
    }
}

=======

        let mut res = 0;
        let mut dp = vec![0; nums.len()];
        for i in 0..nums.len() {
            let mut min = nums[i];
            let mut max = nums[i];
            let mut j = i;
            while j < nums.len() {
                if nums[j] < min {
                    min = nums[j];
                }
                if nums[j] > max {
                    max = nums[j];
                }
                if min >= min_k && max <= max_k {
                    dp[j] += 1;
                    res += 1;
                } else {
                    break;
                }
                j += 1;
            }
        }
        res
