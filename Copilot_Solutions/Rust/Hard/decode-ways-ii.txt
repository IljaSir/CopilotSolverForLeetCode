Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![0; s.len()+1];
        dp[0] = 1;
        dp[1] = match s.chars().nth(0).unwrap() {
            '*' => 9,
            '0' => 0,
            _ => 1,
        };
        let modulo = 10_i32.pow(9) + 7;
        for i in 1..s.len() {
            let c = s.chars().nth(i).unwrap();
            let p = s.chars().nth(i-1).unwrap();
            if c == '*' {
                dp[i+1] += dp[i] * 9;
                if p == '1' {
                    dp[i+1] += dp[i-1] * 9;
                } else if p == '2' {
                    dp[i+1] += dp[i-1] * 6;
                } else if p == '*' {
                    dp[i+1] += dp[i-1] * 15;
                }
            } else {
                if c != '0' {
                    dp[i+1] += dp[i];
                }
                if p == '1' {
                    dp[i+1] += dp[i-1];
                } else if p == '2' && c <= '6' {
                    dp[i+1] += dp[i-1];
                } else if p == '*' {
                    if c <= '6' {
                        dp[i+1] += dp[i-1] * 2;
                    } else {
                        dp[i+1] += dp[i-1];
                    }
                }
            }
            dp[i+1] %= modulo;
        }
        dp[s.len()]

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut dp = vec![0; n + 1];
        dp[n] = 1;
        if s[n - 1] == b'*' {
            dp[n - 1] = 9;
        } else if s[n - 1] != b'0' {
            dp[n - 1] = 1;
        }
        for i in (0..n - 1).rev() {
            if s[i] == b'0' {
                continue;
            } else if s[i] == b'1' {
                if s[i + 1] == b'*' {
                    dp[i] = (dp[i] + 9 * dp[i + 1]) % 1000000007;
                } else {
                    dp[i] = (dp[i] + dp[i + 1]) % 1000000007;
                }
                if i < n - 2 {
                    if s[i + 2] == b'*' {
                        dp[i] = (dp[i] + 9 * dp[i + 2]) % 1000000007;
                    } else {
                        dp[i] = (dp[i] + dp[i + 2]) % 1000000007;
                    }
                }
            } else if s[i] == b'2' {
                if s[i + 1] == b'*' {
                    dp[i] = (dp[i] + 6 * dp[i + 1]) % 1000000007;
                } else if s[i + 1] < b'7' {
                    dp[i] = (dp[i] + dp[i + 1]) % 1000000007;
                }
                if i < n - 2 {
                    if s[i + 2] == b'*' {
                        dp[i] = (dp[i] + 6 * dp[i + 2]) % 1000000007;
                    } else if s[i + 2] < b'7' {
                        dp[i] = (dp[i] + dp[i + 2]) % 1000000007;
                    }
                }
            } else if s[i] == b'*' {
                dp[i] = (dp[i] + 9 * dp[i + 1]) % 100000000

=======

        let n = s.len();
        let modu = 1000000007;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 0..n {
            if s.as_bytes()[i] == b'0' {
                dp[i + 1] = 0;
            } else if s.as_bytes()[i] == b'*' {
                dp[i + 1] = 9 * dp[i];
            } else {
                dp[i + 1] = dp[i];
            }
            if i > 0 {
                if s.as_bytes()[i - 1] == b'1' {
                    if s.as_bytes()[i] == b'*' {
                        dp[i + 1] += 9 * dp[i - 1];
                    } else {
                        dp[i + 1] += dp[i - 1];
                    }
                } else if s.as_bytes()[i - 1] == b'2' {
                    if s.as_bytes()[i] == b'*' {
                        dp[i + 1] += 6 * dp[i - 1];
                    } else if s.as_bytes()[i] <= b'6' {
                        dp[i + 1] += dp[i - 1];
                    }
                } else if s.as_bytes()[i - 1] == b'*' {
                    if s.as_bytes()[i] == b'*' {
                        dp[i + 1] += 15 * dp[i - 1];
                    } else if s.as_bytes()[i] <= b'6' {
                        dp[i + 1] += 2 * dp[i - 1];
                    } else {
                        dp[i + 1] += dp[i - 1];
                    }
                }
            }
            dp[i + 1] %= modu;
        }
        dp[n]

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut dp = vec![0; n + 1];
        let modu = 1_000_000_007;
        dp[0] = 1;
        for i in 1..=n {
            let c = s[i - 1];
            if c == b'0' {
                if i == 1 || s[i - 2] != b'1' && s[i - 2] != b'2' {
                    return 0;
                }
                dp[i] = dp[i - 2];
            } else if c == b'*' {
                dp[i] = 9 * dp[i - 1];
                if i > 1 {
                    if s[i - 2] == b'1' {
                        dp[i] += 9 * dp[i - 2];
                    } else if s[i - 2] == b'2' {
                        dp[i] += 6 * dp[i - 2];
                    } else if s[i - 2] == b'*' {
                        dp[i] += 15 * dp[i - 2];
                    }
                }
            } else {
                dp[i] = dp[i - 1];
                if i > 1 {
                    if s[i - 2] == b'1' || s[i - 2] == b'2' && c <= b'6' {
                        dp[i] += dp[i - 2];
                    } else if s[i - 2] == b'*' {
                        if c <= b'6' {
                            dp[i] += 2 * dp[i - 2];
                        } else {
                            dp[i] += dp[i - 2];
                        }
                    }
                }
            }
            dp[i] %= modu;
        }
        dp[n] as i32

=======

        let s = s.as_bytes();
        let n = s.len();
        if n == 0 { return 0; }
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 0..n {
            if s[i] == b'0' {
                continue;
            }
            let mut ways = 0;
            if s[i] == b'*' {
                ways += 9 * dp[i];
            } else {
                ways += dp[i];
            }
            if i > 0 {
                if s[i] == b'*' {
                    if s[i - 1] == b'1' {
                        ways += 9 * dp[i - 1];
                    } else if s[i - 1] == b'2' {
                        ways += 6 * dp[i - 1];
                    } else if s[i - 1] == b'*' {
                        ways += 15 * dp[i - 1];
                    }
                } else {
                    if s[i - 1] == b'1' {
                        ways += dp[i - 1];
                    } else if s[i - 1] == b'2' && s[i] <= b'6' {
                        ways += dp[i - 1];
                    } else if s[i - 1] == b'*' {
                        if s[i] <= b'6' {
                            ways += 2 * dp[i - 1];
                        } else {
                            ways += dp[i - 1];
                        }
                    }
                }
            }
            dp[i + 1] = ways % 1000000007;
        }
        dp[n]

=======

        
    }
}

=======

        let n = s.len();
        let mut dp = vec![0; n + 1];
        dp[n] = 1;
        let mut modu = 1_000_000_007;
        for i in (0..n).rev() {
            if s[i..i + 1] == "*" {
                dp[i] += dp[i + 1] * 9;
                if i + 1 < n {
                    if s[i + 1..i + 2] == "*" {
                        dp[i] += dp[i + 2] * 15;
                    } else if s[i + 1..i + 2] <= "6" {
                        dp[i] += dp[i + 2] * 2;
                    } else {
                        dp[i] += dp[i + 2];
                    }
                }
            } else if s[i..i + 1] != "0" {
                dp[i] += dp[i + 1];
                if i + 1 < n {
                    if s[i + 1..i + 2] == "*" {
                        if s[i..i + 1] <= "1" {
                            dp[i] += dp[i + 2] * 9;
                        } else {
                            dp[i] += dp[i + 2] * 7;
                        }
                    } else if s[i..i + 2] <= "26" {
                        dp[i] += dp[i + 2];
                    }
                }
            }
            dp[i] %= modu;
        }
        dp[0]

=======

        let mut dp = vec![0; s.len()];
        let mut s = s.as_bytes();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'0' {
                if i == 0 {
                    return 0;
                }
                if i == 1 {
                    if s[0] == b'1' || s[0] == b'2' {
                        dp[0] = 1;
                    } else {
                        return 0;
                    }
                }
                if s[i - 1] == b'1' || s[i - 1] == b'2' {
                    dp[i] = dp[i - 2];
                } else {
                    return 0;
                }
            } else if s[i] == b'*' {
                if i == 0 {
                    dp[0] = 9;
                } else {
                    dp[i] = dp[i - 1] * 9;
                    if s[i - 1] == b'1' {
                        dp[i] += dp[i - 2] * 9;
                    } else if s[i - 1] == b'2' {
                        dp[i] += dp[i - 2] * 6;
                    } else if s[i - 1] == b'*' {
                        dp[i] += dp[i - 2] * 15;
                    }
                }
            } else {
                if i == 0 {
                    dp[0] = 1;
                } else {
                    dp[i] = dp[i - 1];
                    if s[i - 1] == b'1' || (s[i - 1] == b'2' && s[i] <= b'6') {
                        dp[i] += dp[i - 2];
                    } else if s[i - 1] == b'*' {
                        dp[i] += dp[i - 2] * if s[i] <= b'6' { 2 } else { 1 };
                    }
                }
            }
            i += 1;
        }
        dp[s.len() - 1] as i32 % 1000000007
