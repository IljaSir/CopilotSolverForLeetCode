Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 1..=n {
            if Self::is_special(i) {
                count += 1;
            }
        }
        count
    }
    
    fn is_special(n: i32) -> bool {
        let mut digits: Vec<u32> = Vec::new();
        let mut n = n;
        while n > 0 {
            let digit = (n % 10) as u32;
            if digits.contains(&digit) {
                return false;
            }
            digits.push(digit);
            n /= 10;
        }
        true

=======

        let mut count = 0;
        for i in 1..=n {
            if i < 10 {
                count += 1;
            } else if i < 100 {
                if i / 10 != i % 10 {
                    count += 1;
                }
            } else if i < 1000 {
                if i / 100 != i / 10 % 10 && i / 100 != i % 10 && i / 10 % 10 != i % 10 {
                    count += 1;
                }
            } else if i < 10000 {
                if i / 1000 != i / 100 % 10 && i / 1000 != i / 10 % 10 && i / 1000 != i % 10
                    && i / 100 % 10 != i / 10 % 10 && i / 100 % 10 != i % 10
                    && i / 10 % 10 != i % 10 {
                    count += 1;
                }
            } else if i < 100000 {
                if i / 10000 != i / 1000 % 10 && i / 10000 != i / 100 % 10 && i / 10000 != i / 10 % 10 && i / 10000 != i % 10
                    && i / 1000 % 10 != i / 100 % 10 && i / 1000 % 10 != i / 10 % 10 && i / 1000 % 10 != i % 10
                    && i / 100 % 10 != i / 10 % 10 && i / 100 % 10 != i % 10
                    && i / 10 % 10 != i % 10 {
                    count += 1;
                }
            } else if i < 1000000 {
                if i / 100000 != i / 10000 % 10 && i / 100000 != i / 1000 % 10 && i / 100000 != i / 100 % 10 && i / 100000 != i / 10 % 10 && i / 100000 != i % 10
                    && i / 10000 % 10 != i / 1000 % 10 && i / 10000 %

=======

        let mut count = 0;
        for i in 1..=n {
            let mut set = std::collections::HashSet::new();
            let mut x = i;
            while x > 0 {
                set.insert(x % 10);
                x /= 10;
            }
            if set.len() == (i as f64).log10().floor() as usize + 1 {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 1..=n {
            let mut digits = vec![false; 10];
            let mut j = i;
            while j > 0 {
                let d = j % 10;
                if digits[d as usize] {
                    break;
                }
                digits[d as usize] = true;
                j /= 10;
            }
            if j == 0 {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for i in 1..=n {
            let mut temp = i;
            let mut digits = vec![];
            while temp > 0 {
                let digit = temp % 10;
                temp /= 10;
                if digits.contains(&digit) {
                    break;
                } else {
                    digits.push(digit);
                }
            }
            if digits.len() == i.to_string().len() {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        for i in 1..=n {
            let mut s = std::collections::HashSet::new();
            let mut j = i;
            while j > 0 {
                let d = j % 10;
                if s.contains(&d) {
                    break;
                }
                s.insert(d);
                j /= 10;
            }
            if j == 0 {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        for i in 1..=n {
            let mut m = i;
            let mut digits = vec![false; 10];
            let mut is_special = true;
            while m > 0 {
                let digit = m % 10;
                if digits[digit as usize] {
                    is_special = false;
                    break;
                }
                digits[digit as usize] = true;
                m /= 10;
            }
            if is_special {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut i = 1;
        while i <= n {
            let mut digits = vec![];
            let mut num = i;
            while num > 0 {
                digits.push(num % 10);
                num /= 10;
            }
            digits.sort();
            let mut flag = true;
            for i in 0..digits.len()-1 {
                if digits[i] == digits[i+1] {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
            i += 1;
        }
        count

=======

        let mut result = 0;
        let mut i = 1;
        while i <= n {
            let mut j = i;
            let mut digits = vec![];
            while j > 0 {
                let digit = j % 10;
                j /= 10;
                if digits.contains(&digit) {
                    break;
                }
                digits.push(digit);
            }
            if j == 0 {
                result += 1;
            }
            i += 1;
        }
        result
    }
}

=======

        let mut i = 1;
        let mut j = 10;
        let mut count = 0;
        while i <= n {
            count += 9 * i / j;
            i *= 10;
            j *= 10;
        }
        count
