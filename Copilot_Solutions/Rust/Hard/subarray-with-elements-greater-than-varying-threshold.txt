Synthesizing 10/10 solutions

=======

        let mut left = 1;
        let mut right = nums.len() as i32;
        let mut ans = -1;
        while left <= right {
            let mid = left + (right - left) / 2;
            let mut sum = 0;
            for i in 0..mid as usize {
                sum += nums[i];
            }
            if sum >= threshold {
                ans = mid;
                right = mid - 1;
            } else {
                for i in mid as usize..nums.len() {
                    sum += nums[i] - nums[i - mid as usize];
                    if sum >= threshold {
                        ans = mid;
                        right = mid - 1;
                        break;
                    }
                }
            }
            if ans == -1 {
                left = mid + 1;
            }
        }
        ans

=======

        let mut l = 1;
        let mut r = nums.len();
        while l < r {
            let m = (l + r) / 2;
            let mut sum = 0;
            for i in 0..m {
                sum += nums[i];
            }
            let mut valid = sum > threshold * m as i32;
            for i in m..nums.len() {
                sum += nums[i];
                sum -= nums[i - m];
                if sum > threshold * m as i32 {
                    valid = true;
                    break;
                }
            }
            if valid {
                l = m + 1;
            } else {
                r = m;
            }
        }
        if l == nums.len() {
            -1
        } else {
            l as i32
        }

=======

        let n = nums.len();
        let mut sum = 0;
        for i in 0..n {
            sum += nums[i];
        }
        let mut k = n;
        while k > 0 {
            if sum / k as i32 >= threshold {
                return k as i32;
            }
            sum -= nums[n - k];
            k -= 1;
        }
        -1
    }
}

=======

        let mut left = 0;
        let mut right = nums.len();
        let mut sum = nums.iter().sum::<i32>();
        while left < right {
            let mid = (left + right) / 2;
            if sum > threshold * mid as i32 {
                left = mid + 1;
            } else {
                right = mid;
            }
            sum -= nums[mid];
        }
        if left == nums.len() {
            -1
        } else {
            left as i32
        }

=======

        let mut l = 1;
        let mut r = nums.len();
        while l < r {
            let m = (l + r) / 2;
            if Self::valid(&nums, m, threshold) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        if Self::valid(&nums, l, threshold) {
            l as i32
        } else {
            -1
        }
    }
    fn valid(nums: &Vec<i32>, k: usize, threshold: i32) -> bool {
        let mut sum = 0;
        for i in 0..k {
            sum += nums[i];
        }
        if sum >= threshold {
            return true;
        }
        for i in k..nums.len() {
            sum += nums[i] - nums[i - k];
            if sum >= threshold {
                return true;
            }
        }
        false

=======

        let mut l = 1;
        let mut r = nums.len() as i32;
        while l <= r {
            let m = (l + r) / 2;
            if Self::is_valid(&nums, threshold, m) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        r
    }
    fn is_valid(nums: &Vec<i32>, threshold: i32, size: i32) -> bool {
        let mut sum = nums[..size as usize].iter().sum::<i32>();
        if sum > threshold * size {
            return true;
        }
        for i in size as usize..nums.len() {
            sum += nums[i];
            sum -= nums[i - size as usize];
            if sum > threshold * size {
                return true;
            }
        }
        false

=======

        let mut sum = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if i > 0 {
                sum -= nums[i-1];
            }
            if i >= nums.len() - 1 {
                if sum > max {
                    max = sum;
                }
                sum -= nums[i + 1 - nums.len()];
            }
        }
        let mut k = 1;
        while max > threshold * k {
            k += 1;
        }
        if k > nums.len() {
            return -1;
        }
        k as i32

=======

        let mut l = 0;
        let mut r = nums.len();
        let mut s = nums.iter().sum::<i32>();
        while l < r {
            let mid = (l + r) / 2;
            if s > threshold * mid as i32 {
                l = mid + 1;
            } else {
                r = mid;
            }
            s -= nums[mid];
        }
        if l == nums.len() {
            -1
        } else {
            l as i32
        }

=======

        let mut l = 0;
        let mut r = nums.len();
        let mut ans = -1;
        while l < r {
            let mut sum = 0;
            let mid = (l + r) / 2;
            for i in 0..mid {
                sum += nums[i];
            }
            let mut ok = false;
            for i in mid..nums.len() {
                sum += nums[i];
                if sum > threshold {
                    ok = true;
                    break;
                }
                sum -= nums[i - mid];
            }
            if ok {
                ans = mid as i32;
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        ans

=======

        // 1. find the max value in nums
        let max = nums.iter().fold(0, |acc, &x| acc.max(x));
        // 2. binary search for the subarray size
        let mut l = 1;
        let mut r = nums.len();
        while l <= r {
            let mid = (l + r) / 2;
            let sum = nums.windows(mid).map(|w| w.iter().sum::<i32>()).max().unwrap();
            if sum > threshold {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        if l > nums.len() { -1 } else { l as i32 }
    }
}
