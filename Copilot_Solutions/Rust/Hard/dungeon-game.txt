Synthesizing 10/10 solutions

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = dungeon[m - 1][n - 1].max(0) + 1;
        for i in (0..m - 1).rev() {
            dp[i][n - 1] = (dp[i + 1][n - 1] - dungeon[i][n - 1]).max(1);
        }
        for j in (0..n - 1).rev() {
            dp[m - 1][j] = (dp[m - 1][j + 1] - dungeon[m - 1][j]).max(1);
        }
        for i in (0..m - 1).rev() {
            for j in (0..n - 1).rev() {
                let min = dp[i + 1][j].min(dp[i][j + 1]);
                dp[i][j] = (min - dungeon[i][j]).max(1);
            }
        }
        dp[0][0]

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = dungeon[m - 1][n - 1].max(0) + 1;
        for i in (0..m - 1).rev() {
            dp[i][n - 1] = (dp[i + 1][n - 1] - dungeon[i][n - 1]).max(1);
        }
        for j in (0..n - 1).rev() {
            dp[m - 1][j] = (dp[m - 1][j + 1] - dungeon[m - 1][j]).max(1);
        }
        for i in (0..m - 1).rev() {
            for j in (0..n - 1).rev() {
                dp[i][j] = (dp[i + 1][j].min(dp[i][j + 1]) - dungeon[i][j]).max(1);
            }
        }
        dp[0][0]

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = dungeon[m - 1][n - 1].max(0) + 1;
        for i in (0..m - 1).rev() {
            dp[i][n - 1] = (dp[i + 1][n - 1] - dungeon[i][n - 1]).max(1);
        }
        for j in (0..n - 1).rev() {
            dp[m - 1][j] = (dp[m - 1][j + 1] - dungeon[m - 1][j]).max(1);
        }
        for i in (0..m - 1).rev() {
            for j in (0..n - 1).rev() {
                let right = (dp[i][j + 1] - dungeon[i][j]).max(1);
                let down = (dp[i + 1][j] - dungeon[i][j]).max(1);
                dp[i][j] = right.min(down);
            }
        }
        dp[0][0]
    }
}

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![std::i32::MAX; n+1]; m+1];
        dp[m][n-1] = 1;
        dp[m-1][n] = 1;
        for i in (0..m).rev() {
            for j in (0..n).rev() {
                let need = (dp[i+1][j].min(dp[i][j+1]) - dungeon[i][j]).max(1);
                dp[i][j] = need;
            }
        }
        dp[0][0]

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m-1][n-1] = dungeon[m-1][n-1].max(0) + 1;
        for i in (0..m).rev() {
            for j in (0..n).rev() {
                if i == m-1 && j == n-1 {
                    continue;
                }
                let mut right = i32::MAX;
                let mut down = i32::MAX;
                if i < m-1 {
                    right = dp[i+1][j];
                }
                if j < n-1 {
                    down = dp[i][j+1];
                }
                let min = right.min(down);
                dp[i][j] = min - dungeon[i][j];
                if dp[i][j] <= 0 {
                    dp[i][j] = 1;
                }
            }
        }
        dp[0][0]

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m-1][n-1] = if dungeon[m-1][n-1] > 0 { 1 } else { 1 - dungeon[m-1][n-1] };
        for i in (0..m-1).rev() {
            dp[i][n-1] = if dp[i+1][n-1] > dungeon[i][n-1] { dp[i+1][n-1] - dungeon[i][n-1] } else { 1 };
        }
        for j in (0..n-1).rev() {
            dp[m-1][j] = if dp[m-1][j+1] > dungeon[m-1][j] { dp[m-1][j+1] - dungeon[m-1][j] } else { 1 };
        }
        for i in (0..m-1).rev() {
            for j in (0..n-1).rev() {
                dp[i][j] = if dp[i+1][j] < dp[i][j+1] {
                    if dp[i+1][j] > dungeon[i][j] { dp[i+1][j] - dungeon[i][j] } else { 1 }
                } else {
                    if dp[i][j+1] > dungeon[i][j] { dp[i][j+1] - dungeon[i][j] } else { 1 }
                };
            }
        }
        dp[0][0]

=======

        let (m, n) = (dungeon.len(), dungeon[0].len());
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = dungeon[m - 1][n - 1].max(0);
        for j in (0..n - 1).rev() {
            dp[m - 1][j] = (dp[m - 1][j + 1] - dungeon[m - 1][j]).max(0);
        }
        for i in (0..m - 1).rev() {
            dp[i][n - 1] = (dp[i + 1][n - 1] - dungeon[i][n - 1]).max(0);
        }
        for i in (0..m - 1).rev() {
            for j in (0..n - 1).rev() {
                dp[i][j] = (dp[i + 1][j].min(dp[i][j + 1]) - dungeon[i][j]).max(0);
            }
        }
        dp[0][0] + 1

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = (1 - dungeon[m - 1][n - 1]).max(1);
        for i in (0..m).rev() {
            for j in (0..n).rev() {
                if i == m - 1 && j == n - 1 {
                    continue;
                }
                if i == m - 1 {
                    dp[i][j] = (dp[i][j + 1] - dungeon[i][j]).max(1);
                }
                else if j == n - 1 {
                    dp[i][j] = (dp[i + 1][j] - dungeon[i][j]).max(1);
                }
                else {
                    dp[i][j] = ((dp[i + 1][j].min(dp[i][j + 1])) - dungeon[i][j]).max(1);
                }
            }
        }
        dp[0][0]

=======

        let m = dungeon.len();
        let n = dungeon[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[m - 1][n - 1] = 1 - dungeon[m - 1][n - 1].min(0);
        for i in (0..m - 1).rev() {
            dp[i][n - 1] = (dp[i + 1][n - 1] - dungeon[i][n - 1]).max(1);
        }
        for j in (0..n - 1).rev() {
            dp[m - 1][j] = (dp[m - 1][j + 1] - dungeon[m - 1][j]).max(1);
        }
        for i in (0..m - 1).rev() {
            for j in (0..n - 1).rev() {
                dp[i][j] = ((dp[i + 1][j] - dungeon[i][j]).min(dp[i][j + 1] - dungeon[i][j])).max(1);
            }
        }
        dp[0][0]

=======

        let mut dp: Vec<Vec<i32>> = vec![vec![0; dungeon[0].len()]; dungeon.len()];
        for i in (0..dungeon.len()).rev() {
            for j in (0..dungeon[0].len()).rev() {
                if i == dungeon.len() - 1 && j == dungeon[0].len() - 1 {
                    dp[i][j] = dungeon[i][j].max(0) + 1;
                } else if i == dungeon.len() - 1 {
                    dp[i][j] = (dp[i][j + 1] - dungeon[i][j]).max(1);
                } else if j == dungeon[0].len() - 1 {
                    dp[i][j] = (dp[i + 1][j] - dungeon[i][j]).max(1);
                } else {
                    dp[i][j] = (dp[i + 1][j].min(dp[i][j + 1]) - dungeon[i][j]).max(1);
                }
            }
        }
        dp[0][0]
