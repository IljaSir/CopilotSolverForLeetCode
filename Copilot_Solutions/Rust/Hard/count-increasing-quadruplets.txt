Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            count += 1;
                        }
                    }
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            count += 1;
                        }
                    }
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            count += 1;
                        }
                    }
                }
            }
        }
        count as i64
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len()-3 {
            for j in i+1..nums.len()-2 {
                for k in j+1..nums.len()-1 {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            count += 1;
                        }
                    }
                }
            }
        }
        count as i64
    }
}

=======

        let n = nums.len();
        let mut ans = 0;
        for i in 0..n {
            for j in i+1..n {
                for k in j+1..n {
                    for l in k+1..n {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            ans += 1;
                        }
                    }
                }
            }
        }
        ans
    }
}

=======

        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            res += 1;
                        }
                    }
                }
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[j] < nums[l] {
                            res += 1;
                        }
                    }
                }
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            res += 1;
                        }
                    }
                }
            }
        }
        res as i64

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                for k in j+1..nums.len() {
                    for l in k+1..nums.len() {
                        if nums[i] < nums[k] && nums[k] < nums[j] && nums[j] < nums[l] {
                            ans += 1;
                        }
                    }
                }
            }
        }
        ans
