Synthesizing 10/10 solutions

=======

        let n = grid.len();
        let m = grid[0].len();
        let mut dp = vec![vec![std::i32::MAX; m]; n];
        dp[0][0] = 0;
        let mut q = std::collections::BinaryHeap::new();
        q.push((0, 0, 0));
        while let Some((t, i, j)) = q.pop() {
            let t = -t;
            if i == n - 1 && j == m - 1 {
                return t;
            }
            if i > 0 {
                let t2 = std::cmp::max(t, grid[i - 1][j]);
                if t2 < dp[i - 1][j] {
                    dp[i - 1][j] = t2;
                    q.push((-(t2 as i32), i - 1, j));
                }
            }
            if i + 1 < n {
                let t2 = std::cmp::max(t, grid[i + 1][j]);
                if t2 < dp[i + 1][j] {
                    dp[i + 1][j] = t2;
                    q.push((-(t2 as i32), i + 1, j));
                }
            }
            if j > 0 {
                let t2 = std::cmp::max(t, grid[i][j - 1]);
                if t2 < dp[i][j - 1] {
                    dp[i][j - 1] = t2;
                    q.push((-(t2 as i32), i, j - 1));
                }
            }
            if j + 1 < m {
                let t2 = std::cmp::max(t, grid[i][j + 1]);
                if t2 < dp[i][j + 1] {
                    dp[i][j + 1] = t2;
                    q.push((-(t2 as i32), i, j + 1));
                }
            }
        }
        -1
    }
}

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut q = std::collections::BinaryHeap::new();
        let mut visited = vec![vec![false; n]; m];
        q.push(std::cmp::Reverse((0, 0, 0)));
        visited[0][0] = true;
        let mut ans = 0;
        while !q.is_empty() {
            let std::cmp::Reverse((t, x, y)) = q.pop().unwrap();
            ans = t;
            if x == m - 1 && y == n - 1 {
                break;
            }
            for &(dx, dy) in &[(0, 1), (0, -1), (1, 0), (-1, 0)] {
                let nx = x as i32 + dx;
                let ny = y as i32 + dy;
                if nx >= 0 && nx < m as i32 && ny >= 0 && ny < n as i32 {
                    let nx = nx as usize;
                    let ny = ny as usize;
                    if !visited[nx][ny] && t + 1 >= grid[nx][ny] {
                        visited[nx][ny] = true;
                        q.push(std::cmp::Reverse((grid[nx][ny], nx, ny)));
                    }
                }
            }
        }
        if visited[m - 1][n - 1] {
            ans
        } else {
            -1
        }
    }
}

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut queue = std::collections::BinaryHeap::new();
        let mut visited = vec![vec![false; n]; m];
        queue.push(std::cmp::Reverse((0, 0, 0)));
        while let Some(std::cmp::Reverse((t, x, y))) = queue.pop() {
            if x == m - 1 && y == n - 1 {
                return t;
            }
            if visited[x][y] {
                continue;
            }
            visited[x][y] = true;
            if x > 0 {
                queue.push(std::cmp::Reverse((t.max(grid[x][y]), x - 1, y)));
            }
            if x < m - 1 {
                queue.push(std::cmp::Reverse((t.max(grid[x][y]), x + 1, y)));
            }
            if y > 0 {
                queue.push(std::cmp::Reverse((t.max(grid[x][y]), x, y - 1)));
            }
            if y < n - 1 {
                queue.push(std::cmp::Reverse((t.max(grid[x][y]), x, y + 1)));
            }
        }
        -1

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut dp = vec![vec![std::i32::MAX; n]; m];
        let mut q = std::collections::BinaryHeap::new();
        q.push(std::cmp::Reverse((0, 0, 0)));
        let mut ans = -1;
        while !q.is_empty() {
            let (t, x, y) = q.pop().unwrap().0;
            if t >= dp[x][y] {
                continue;
            }
            dp[x][y] = t;
            if x == m - 1 && y == n - 1 {
                ans = t;
                break;
            }
            if x > 0 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x - 1][y]), x - 1, y)));
            }
            if x + 1 < m {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x + 1][y]), x + 1, y)));
            }
            if y > 0 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y - 1]), x, y - 1)));
            }
            if y + 1 < n {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y + 1]), x, y + 1)));
            }
        }
        ans

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut q = std::collections::BinaryHeap::new();
        let mut visited = vec![vec![false; n]; m];
        let mut res = 0;
        q.push(std::cmp::Reverse((0, 0, 0)));
        while !q.is_empty() {
            let (t, x, y) = q.pop().unwrap().0;
            if x == m - 1 && y == n - 1 {
                res = t;
                break;
            }
            if visited[x][y] {
                continue;
            }
            visited[x][y] = true;
            if x > 0 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y]), x - 1, y)));
            }
            if x < m - 1 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y]), x + 1, y)));
            }
            if y > 0 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y]), x, y - 1)));
            }
            if y < n - 1 {
                q.push(std::cmp::Reverse((std::cmp::max(t, grid[x][y]), x, y + 1)));
            }
        }
        if visited[m - 1][n - 1] {
            res
        } else {
            -1
        }

=======

        let mut visited = vec![vec![false; grid[0].len()]; grid.len()];
        let mut q = std::collections::VecDeque::new();
        q.push_back((0, 0, 0));
        visited[0][0] = true;
        let mut t = 0;
        while !q.is_empty() {
            let (i, j, tt) = q.pop_front().unwrap();
            if i == grid.len() - 1 && j == grid[0].len() - 1 {
                t = tt;
                break;
            }
            for (ii, jj) in vec![(i, j + 1), (i, j - 1), (i - 1, j), (i + 1, j)] {
                if ii >= 0 && ii < grid.len() && jj >= 0 && jj < grid[0].len() && !visited[ii][jj] {
                    if tt + 1 >= grid[ii][jj] {
                        q.push_back((ii, jj, tt + 1));
                        visited[ii][jj] = true;
                    } else {
                        q.push_back((ii, jj, grid[ii][jj]));
                        visited[ii][jj] = true;
                    }
                }
            }
        }
        if visited[grid.len() - 1][grid[0].len() - 1] {
            t
        } else {
            -1
        }
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let mut queue = std::collections::BinaryHeap::new();
        queue.push(std::cmp::Reverse((0, 0, 0)));
        let mut visited = vec![vec![false; n]; m];
        while let Some(std::cmp::Reverse((t, x, y))) = queue.pop() {
            if x == m - 1 && y == n - 1 {
                return t;
            }
            if visited[x][y] {
                continue;
            }
            visited[x][y] = true;
            for (dx, dy) in vec![(0, 1), (0, -1), (1, 0), (-1, 0)] {
                let nx = x as i32 + dx;
                let ny = y as i32 + dy;
                if nx >= 0 && ny >= 0 && nx < m as i32 && ny < n as i32 {
                    let nx = nx as usize;
                    let ny = ny as usize;
                    if visited[nx][ny] {
                        continue;
                    }
                    let nt = t.max(grid[nx][ny]);
                    queue.push(std::cmp::Reverse((nt, nx, ny)));
                }
            }
        }
        -1

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut pq = std::collections::BinaryHeap::new();
        let mut visited = vec![vec![false; n]; m];
        let mut dist = vec![vec![std::i32::MAX; n]; m];
        dist[0][0] = 0;
        pq.push((0, 0, 0));
        while let Some((d, x, y)) = pq.pop() {
            if visited[x][y] {
                continue;
            }
            visited[x][y] = true;
            if x == m - 1 && y == n - 1 {
                return d;
            }
            for (dx, dy) in &[(0, 1), (0, -1), (1, 0), (-1, 0)] {
                let (nx, ny) = (x as i32 + dx, y as i32 + dy);
                if nx >= 0 && nx < m as i32 && ny >= 0 && ny < n as i32 {
                    let (nx, ny) = (nx as usize, ny as usize);
                    let nd = std::cmp::max(d, grid[nx][ny]);
                    if dist[nx][ny] > nd {
                        dist[nx][ny] = nd;
                        pq.push((nd, nx, ny));
                    }
                }
            }
        }
        -1

=======

        let mut grid = grid;
        let n = grid.len();
        let m = grid[0].len();
        let mut q = std::collections::VecDeque::new();
        q.push_back((0, 0, 0));
        let mut visited = vec![vec![false; m]; n];
        visited[0][0] = true;
        while let Some((x, y, t)) = q.pop_front() {
            if x == n - 1 && y == m - 1 {
                return t;
            }
            if x > 0 && !visited[x - 1][y] && grid[x - 1][y] <= t + 1 {
                visited[x - 1][y] = true;
                q.push_back((x - 1, y, t + 1));
            }
            if x < n - 1 && !visited[x + 1][y] && grid[x + 1][y] <= t + 1 {
                visited[x + 1][y] = true;
                q.push_back((x + 1, y, t + 1));
            }
            if y > 0 && !visited[x][y - 1] && grid[x][y - 1] <= t + 1 {
                visited[x][y - 1] = true;
                q.push_back((x, y - 1, t + 1));
            }
            if y < m - 1 && !visited[x][y + 1] && grid[x][y + 1] <= t + 1 {
                visited[x][y + 1] = true;
                q.push_back((x, y + 1, t + 1));
            }
        }
        -1

=======

        let mut queue = std::collections::VecDeque::new();
        let mut visited = std::collections::HashSet::new();
        let mut ans = 0;
        queue.push_back((0,0));
        while !queue.is_empty() {
            let mut next = std::collections::VecDeque::new();
            while !queue.is_empty() {
                let (x, y) = queue.pop_front().unwrap();
                if x == grid.len() - 1 && y == grid[0].len() - 1 {
                    return ans;
                }
                if visited.contains(&(x,y)) {
                    continue;
                }
                visited.insert((x,y));
                if x > 0 && ans >= grid[x-1][y] {
                    next.push_back((x-1,y));
                }
                if x < grid.len() - 1 && ans >= grid[x+1][y] {
                    next.push_back((x+1,y));
                }
                if y > 0 && ans >= grid[x][y-1] {
                    next.push_back((x,y-1));
                }
                if y < grid[0].len() - 1 && ans >= grid[x][y+1] {
                    next.push_back((x,y+1));
                }
            }
            queue = next;
            ans += 1;
        }
        return -1;
    }
}
