Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for t in types {
            for i in t[0]..=target {
                dp[i as usize] = (dp[i as usize] + dp[(i - t[1]) as usize]) % 1000000007;
            }
        }
        dp[target as usize]

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for t in types {
            for i in t[1]..=target {
                dp[i as usize] = (dp[i as usize] + dp[(i-t[1]) as usize]) % 1000000007;
            }
        }
        dp[target as usize]

=======

        let target = target as usize;
        let mut dp = vec![0; target + 1];
        dp[0] = 1;
        for t in types {
            for i in t[0] as usize..=target {
                dp[i] = (dp[i] + dp[i - t[0] as usize]) % 1000000007;
            }
        }
        dp[target]

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for type_ in types {
            for i in type_[1] as usize..=target as usize {
                dp[i] = (dp[i] + dp[i - type_[1] as usize]) % 1000000007;
            }
        }
        dp[target as usize]

=======

        let mut dp = vec![0; (target + 1) as usize];
        dp[0] = 1;
        for type_ in types {
            for i in type_[1]..=target {
                dp[i as usize] += dp[(i - type_[1]) as usize];
            }
        }
        dp[target as usize]
    }
}

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for v in types {
            for i in v[0]..=target {
                dp[i as usize] = (dp[i as usize] + dp[(i - v[1]) as usize]) % 1000000007;
            }
        }
        dp[target as usize]

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for i in 1..=target as usize {
            for t in &types {
                let (count, marks) = (t[0] as usize, t[1] as usize);
                if i >= marks {
                    dp[i] += dp[i - marks] * count;
                    dp[i] %= 1000000007;
                }
            }
        }
        dp[target as usize]
    }
}

=======

        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for i in 1..=target {
            for j in 0..types.len() {
                let type_ = types[j].clone();
                if i >= type_[1] {
                    dp[i as usize] += dp[(i - type_[1]) as usize];
                    dp[i as usize] %= 1000000007;
                }
            }
        }
        dp[target as usize]
    }
}

=======

        let mut dp = vec![0; (target + 1) as usize];
        dp[0] = 1;
        for type_ in types {
            for j in 0..=target {
                if j + type_[1] <= target {
                    dp[(j + type_[1]) as usize] += dp[j as usize] * type_[0];
                    dp[(j + type_[1]) as usize] %= 1000000007;
                }
            }
        }
        dp[target as usize]
