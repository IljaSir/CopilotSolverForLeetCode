Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let n = nums1.len();
        let mut dp = vec![vec![std::i32::MAX; 1 << n]; n];
        Self::dfs(&nums1, &nums2, 0, 0, &mut dp)
    }
    fn dfs(nums1: &Vec<i32>, nums2: &Vec<i32>, i: usize, mask: usize, dp: &mut Vec<Vec<i32>>) -> i32 {
        if i == nums1.len() {
            return 0;
        }
        if dp[i][mask] != std::i32::MAX {
            return dp[i][mask];
        }
        let mut best = std::i32::MAX;
        for j in 0..nums2.len() {
            if (1 << j) & mask == 0 {
                best = best.min((nums1[i] ^ nums2[j]) + Self::dfs(nums1, nums2, i + 1, mask | (1 << j), dp));
            }
        }
        dp[i][mask] = best;
        best

=======

        let n = nums1.len();
        let mut dp = vec![vec![0; 1 << n]; n];
        for i in 0..n {
            for j in 0..(1 << n) {
                dp[i][j] = -1;
            }
        }
        Self::dfs(0, 0, &nums1, &nums2, &mut dp)
    }
    fn dfs(i: usize, mask: usize, nums1: &Vec<i32>, nums2: &Vec<i32>, dp: &mut Vec<Vec<i32>>) -> i32 {
        let n = nums1.len();
        if i == n {
            return 0;
        }
        if dp[i][mask] != -1 {
            return dp[i][mask];
        }
        let mut ans = std::i32::MAX;
        for j in 0..n {
            if (mask & (1 << j)) == 0 {
                ans = ans.min(Self::dfs(i + 1, mask | (1 << j), nums1, nums2, dp) + (nums1[i] ^ nums2[j]));
            }
        }
        dp[i][mask] = ans;
        ans

=======

        let n = nums1.len();
        let mut dp = vec![vec![0; 1 << n]; n];
        for i in 0..n {
            for j in 0..(1 << n) {
                let mut min = i32::MAX;
                for k in 0..n {
                    if j & (1 << k) == 0 {
                        let val = dp[i][j];
                        let new_val = if i == 0 {
                            val
                        } else {
                            val.min(dp[i - 1][j | (1 << k)])
                        };
                        min = min.min(new_val + (nums1[i] ^ nums2[k]));
                    }
                }
                dp[i][j] = min;
            }
        }
        dp[n - 1][0]

=======

        let n = nums1.len();
        let mut dp = vec![vec![0; n]; 1 << n];
        for i in 0..(1 << n) {
            for j in 0..n {
                if i & (1 << j) != 0 {
                    continue;
                }
                for k in 0..n {
                    if i & (1 << k) != 0 {
                        continue;
                    }
                    dp[i | (1 << k)][k] = std::cmp::max(dp[i | (1 << k)][k], dp[i][j] + (nums1[j] ^ nums2[k]));
                }
            }
        }
        let mut res = 0;
        for i in 0..n {
            res = std::cmp::max(res, dp[(1 << n) - 1][i]);
        }
        res
    }
}

=======

        
    }
}
