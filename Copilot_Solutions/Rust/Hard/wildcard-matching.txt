Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let mut dp = vec![vec![false; p.len() + 1]; s.len() + 1];
        dp[0][0] = true;
        for i in 1..=p.len() {
            if p[i - 1] != b'*' {
                break;
            }
            dp[0][i] = true;
        }
        for i in 1..=s.len() {
            for j in 1..=p.len() {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == b'?');
                }
            }
        }
        dp[s.len()][p.len()]

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let mut dp = vec![vec![false; p.len() + 1]; s.len() + 1];
        dp[0][0] = true;
        for i in 0..=s.len() {
            for j in 1..=p.len() {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 1] || (i > 0 && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (p[j - 1] == b'?' || s[i - 1] == p[j - 1]);
                }
            }
        }
        dp[s.len()][p.len()]

=======

        let (s, p) = (s.as_bytes(), p.as_bytes());
        let (m, n) = (s.len(), p.len());
        let mut dp = vec![vec![false; n + 1]; m + 1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 1] || (i > 0 && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (p[j - 1] == b'?' || s[i - 1] == p[j - 1]);
                }
            }
        }
        dp[m][n]

=======

        let (s, p) = (s.into_bytes(), p.into_bytes());
        let (m, n) = (s.len(), p.len());
        let mut dp = vec![vec![false; n + 1]; m + 1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 1] || (i > 0 && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (p[j - 1] == b'?' || p[j - 1] == s[i - 1]);
                }
            }
        }
        dp[m][n]

=======

        let s: Vec<char> = s.chars().collect();
        let p: Vec<char> = p.chars().collect();
        let mut dp = vec![vec![false; s.len() + 1]; p.len() + 1];
        dp[0][0] = true;
        for i in 1..=p.len() {
            if p[i - 1] == '*' {
                dp[i][0] = true;
            } else {
                break;
            }
        }
        for i in 1..=p.len() {
            for j in 1..=s.len() {
                if p[i - 1] == '?' || p[i - 1] == s[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if p[i - 1] == '*' {
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
            }
        }
        dp[p.len()][s.len()]

=======

        let s = s.into_bytes();
        let p = p.into_bytes();
        let (m, n) = (s.len(), p.len());
        let mut dp = vec![vec![false; n + 1]; m + 1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 1] || (i > 0 && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (p[j - 1] == b'?' || p[j - 1] == s[i - 1]);
                }
            }
        }
        dp[m][n]

=======

        let mut s = s.chars();
        let mut p = p.chars();
        let mut s_match = None;
        let mut p_match = None;
        loop {
            match (s.next(), p.next()) {
                (Some(c), Some('?')) => (),
                (Some(c), Some('*')) => {
                    s_match = Some(s);
                    p_match = Some(p);
                }
                (Some(c), Some(d)) if c == d => (),
                (Some(c), None) => return false,
                (None, Some('*')) => (),
                (None, Some(_)) => return s_match.is_some(),
                (None, None) => return true,
                (Some(_), Some(_)) => {
                    if let Some(s) = s_match {
                        s_match = Some(s);
                        p_match = p_match.and_then(|mut p| p.next());
                        continue;
                    } else {
                        return false;
                    }
                }
            }
            if let Some(mut s) = s_match {
                s_match = s.next().map(|_| s);
            }
            if let Some(mut p) = p_match {
                p_match = p.next().map(|_| p);
            }
        }
