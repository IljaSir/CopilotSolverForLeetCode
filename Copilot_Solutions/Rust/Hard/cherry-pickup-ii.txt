Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut dp = vec![vec![vec![0; n]; n]; m];
        for i in (0..m).rev() {
            for j in 0..n {
                for k in 0..n {
                    let mut val = grid[i][j];
                    if j != k {
                        val += grid[i][k];
                    }
                    if i != m - 1 {
                        let mut t = 0;
                        for p in (j as i32-1).max(0) as usize..=(j+1).min(n-1) {
                            for q in (k as i32-1).max(0) as usize..=(k+1).min(n-1) {
                                t = t.max(dp[i+1][p][q]);
                            }
                        }
                        val += t;
                    }
                    dp[i][j][k] = val;
                }
            }
        }
        dp[0][0][n-1]

=======

        let mut dp = vec![vec![vec![0; 70]; 70]; 70];
        let n = grid.len();
        let m = grid[0].len();
        dp[0][0][m - 1] = grid[0][0] + grid[0][m - 1];
        for i in 1..n {
            for j in 0..m {
                for k in 0..m {
                    let mut val = 0;
                    for p in j - 1..j + 2 {
                        for q in k - 1..k + 2 {
                            if p >= 0 && p < m && q >= 0 && q < m {
                                val = std::cmp::max(val, dp[i - 1][p][q]);
                            }
                        }
                    }
                    dp[i][j][k] = val + grid[i][j] + if j != k { grid[i][k] } else { 0 };
                }
            }
        }
        dp[n - 1][m - 1][m - 1]
