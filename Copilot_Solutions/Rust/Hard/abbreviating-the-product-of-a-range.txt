Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut product = 1;
        for i in left..=right {
            product *= i;
        }
        let mut count = 0;
        while product % 10 == 0 {
            product /= 10;
            count += 1;
        }
        let mut result = String::new();
        if product.to_string().len() > 10 {
            result.push_str(&product.to_string()[..5]);
            result.push_str("...");
            result.push_str(&product.to_string()[product.to_string().len() - 5..]);
            result.push_str("e");
            result.push_str(&count.to_string());
        } else {
            result.push_str(&product.to_string());
            result.push_str("e");
            result.push_str(&count.to_string());
        }
        result

=======

        let mut product = 1;
        let mut trailing_zeros = 0;
        for i in left..=right {
            product *= i;
            while product % 10 == 0 {
                product /= 10;
                trailing_zeros += 1;
            }
            product %= 100_000;
        }
        let mut result = product.to_string();
        if trailing_zeros > 0 {
            result += &format!("e{}", trailing_zeros);
        }
        result

=======

        let mut product = 1;
        let mut trail_zero = 0;
        for i in left..=right {
            product *= i;
            while product % 10 == 0 {
                product /= 10;
                trail_zero += 1;
            }
            product %= 100_000;
        }
        if product < 10_000 {
            format!("{}e{}", product, trail_zero)
        } else {
            format!("{}...{}e{}", product / 10, product % 10, trail_zero)
        }

=======

        let mut num = 1;
        for i in left..=right {
            num *= i;
        }
        let mut num = num.to_string();
        let mut count = 0;
        while num.ends_with('0') {
            num.pop();
            count += 1;
        }
        let d = num.len();
        if d > 10 {
            format!("{}...{}e{}", &num[..5], &num[d - 5..], count)
        } else {
            format!("{}e{}", num, count)
        }

=======

        let mut product = 1;
        for i in left..=right {
            product *= i;
        }
        let mut str = product.to_string();
        let mut zeros = 0;
        let mut i = str.len() - 1;
        while i > 0 && str.chars().nth(i).unwrap() == '0' {
            zeros += 1;
            i -= 1;
        }
        str.truncate(str.len() - zeros);
        if str.len() > 10 {
            format!("{}...{}e{}", &str[0..5], &str[str.len() - 5..], zeros)
        } else {
            format!("{}e{}", str, zeros)
        }
