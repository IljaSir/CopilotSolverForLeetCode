Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                nums.push(nums1[i]);
                i += 1;
            } else {
                nums.push(nums2[j]);
                j += 1;
            }
        }
        while i < nums1.len() {
            nums.push(nums1[i]);
            i += 1;
        }
        while j < nums2.len() {
            nums.push(nums2[j]);
            j += 1;
        }
        let n = nums.len();
        if n % 2 == 0 {
            (nums[n / 2 - 1] + nums[n / 2]) as f64 / 2.0
        } else {
            nums[n / 2] as f64
        }

=======

        let mut nums: Vec<i32> = Vec::new();
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                nums.push(nums1[i]);
                i += 1;
            } else {
                nums.push(nums2[j]);
                j += 1;
            }
        }
        while i < nums1.len() {
            nums.push(nums1[i]);
            i += 1;
        }
        while j < nums2.len() {
            nums.push(nums2[j]);
            j += 1;
        }
        let mid = nums.len() / 2;
        if nums.len() % 2 == 0 {
            (nums[mid - 1] + nums[mid]) as f64 / 2.0
        } else {
            nums[mid] as f64
        }
    }
}

=======

        let mut nums = nums1;
        nums.extend(nums2);
        nums.sort();
        let len = nums.len();
        if len % 2 == 0 {
            (nums[len / 2 - 1] + nums[len / 2]) as f64 / 2.0
        } else {
            nums[len / 2] as f64
        }

=======

        let mut nums = nums1;
        nums.append(&mut nums2.clone());
        nums.sort();
        let len = nums.len();
        if len % 2 == 0 {
            (nums[len / 2 - 1] + nums[len / 2]) as f64 / 2.0
        } else {
            nums[len / 2] as f64
        }

=======

        let mut nums = nums1;
        nums.extend(nums2);
        nums.sort();
        let len = nums.len();
        if len % 2 == 0 {
            (nums[len / 2] + nums[len / 2 - 1]) as f64 / 2.0
        } else {
            nums[len / 2] as f64
        }
    }
}

=======

        let mut nums = nums1;
        nums.extend_from_slice(&nums2);
        nums.sort();
        let len = nums.len();
        if len % 2 == 0 {
            (nums[len / 2 - 1] + nums[len / 2]) as f64 / 2.0
        } else {
            nums[len / 2] as f64
        }

=======

        let mut nums = nums1.clone();
        nums.append(&mut nums2.clone());
        nums.sort_unstable();
        let len = nums.len();
        if len % 2 == 0 {
            (nums[len / 2 - 1] + nums[len / 2]) as f64 / 2.0
        } else {
            nums[len / 2] as f64
        }

=======

        let (mut i, mut j) = (0, 0);
        let (mut nums1, mut nums2) = (nums1, nums2);
        let mut res = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] <= nums2[j] {
                res.push(nums1[i]);
                i += 1;
            } else {
                res.push(nums2[j]);
                j += 1;
            }
        }
        if i < nums1.len() {
            res.extend(&nums1[i..]);
        }
        if j < nums2.len() {
            res.extend(&nums2[j..]);
        }
        let n = res.len();
        if n % 2 == 0 {
            (res[n / 2] + res[n / 2 - 1]) as f64 / 2.0
        } else {
            res[n / 2] as f64
        }
    }
}
