Synthesizing 5/10 solutions

=======

        let k = k as u64;
        let mut l = 0;
        let mut r = 5 * k;
        while l < r {
            let m = l + (r - l) / 2;
            let t = Self::trailing_zeros(m);
            if t > k {
                r = m;
            } else if t < k {
                l = m + 1;
            } else {
                return 5;
            }
        }
        0
    }
    fn trailing_zeros(n: u64) -> u64 {
        let mut n = n;
        let mut res = 0;
        while n > 0 {
            n /= 5;
            res += n;
        }
        res

=======

        let k = k as i64;
        let mut l = 0;
        let mut r = 5 * (k + 1) as i64;
        while l < r {
            let mid = l + (r - l) / 2;
            let count = Self::trailing_zeroes(mid);
            if count == k {
                return 5;
            } else if count < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        0
    }
    
    fn trailing_zeroes(n: i64) -> i64 {
        let mut n = n;
        let mut count = 0;
        while n > 0 {
            n /= 5;
            count += n;
        }
        count

=======

        let mut l = 0;
        let mut r = 5 * (k as i64) + 1;
        while l < r {
            let mid = l + (r - l) / 2;
            if Solution::fzf(mid) < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        if Solution::fzf(l) == k {
            5
        } else {
            0
        }
    }
    pub fn fzf(n: i64) -> i32 {
        let mut n = n;
        let mut res = 0;
        while n > 0 {
            res += (n / 5) as i32;
            n /= 5;
        }
        res

=======

        let mut left = k;
        let mut right = k + 1;
        while Self::trailing_zeroes(left) == k {
            left *= 5;
        }
        while Self::trailing_zeroes(right) == k {
            right *= 5;
        }
        (right - left) / 5
    }
    
    fn trailing_zeroes(mut n: i32) -> i32 {
        let mut result = 0;
        while n > 0 {
            result += n / 5;
            n /= 5;
        }
        result

=======

        5
