Synthesizing 10/10 solutions

=======

        let mut res = vec![-1; nums.len()];
        let mut stack = vec![];
        for i in (0..nums.len()).rev() {
            while !stack.is_empty() && nums[stack[stack.len() - 1]] <= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                res[i] = nums[stack[stack.len() - 1]];
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut result = Vec::with_capacity(nums.len());
        for i in 0..nums.len() {
            let mut j = i + 1;
            while j < nums.len() {
                if nums[j] > nums[i] {
                    result.push(nums[j]);
                    break;
                }
                j += 1;
            }
            if j == nums.len() {
                result.push(-1);
            }
        }
        result
    }
}

=======

        let mut stack = Vec::new();
        let mut res = vec![-1; nums.len()];
        for i in 0..nums.len() {
            while let Some(&top) = stack.last() {
                if nums[top] < nums[i] {
                    res[top] = nums[i];
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack = Vec::new();
        let mut result = vec![-1; nums.len()];
        for i in 0..nums.len() {
            while let Some(&j) = stack.last() {
                if nums[j] < nums[i] {
                    result[j] = nums[i];
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        result
    }
}

=======

        let mut stack = Vec::new();
        let mut res = vec![-1; nums.len()];
        for i in 0..nums.len() {
            while let Some(&x) = stack.last() {
                if nums[x] < nums[i] {
                    res[x] = nums[i];
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack = vec![];
        let mut res = vec![-1; nums.len()];
        for (i, &num) in nums.iter().enumerate() {
            while let Some(&top) = stack.last() {
                if top > num {
                    res[i] = top;
                    break;
                } else {
                    stack.pop();
                }
            }
            stack.push(num);
        }
        res
    }
}

=======

        let mut stack: Vec<i32> = Vec::new();
        let mut res: Vec<i32> = vec![-1; nums.len()];
        for i in 0..nums.len() {
            while let Some(&last) = stack.last() {
                if nums[last as usize] < nums[i] {
                    res[last as usize] = nums[i];
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i as i32);
        }
        res
    }
}

=======

        let mut stack = vec![];
        let mut res = vec![-1; nums.len()];
        for i in (0..nums.len()).rev() {
            while stack.len() > 0 && nums[i] > nums[stack[stack.len() - 1]] {
                stack.pop();
            }
            if stack.len() > 0 {
                res[i] = nums[stack[stack.len() - 1]];
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack = vec![];
        let mut res = vec![-1; nums.len()];
        for (i, x) in nums.iter().enumerate() {
            while let Some(&top) = stack.last() {
                if nums[top] < *x {
                    res[top] = *x;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stk = Vec::new();
        let mut ans = vec![-1; nums.len()];
        let mut max = -1;
        for i in 0..nums.len() {
            while let Some(&top) = stk.last() {
                if nums[top] < nums[i] {
                    ans[top] = nums[i];
                    stk.pop();
                } else {
                    break;
                }
            }
            if nums[i] > max {
                max = nums[i];
            } else {
                stk.push(i);
            }
        }
        ans
    }
}
