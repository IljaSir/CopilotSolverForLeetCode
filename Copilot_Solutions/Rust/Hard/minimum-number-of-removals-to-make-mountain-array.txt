Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut lis = vec![1; n];
        let mut lds = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    lis[i] = lis[i].max(lis[j] + 1);
                }
                if nums[n - 1 - i] > nums[n - 1 - j] {
                    lds[n - 1 - i] = lds[n - 1 - i].max(lds[n - 1 - j] + 1);
                }
            }
        }
        let mut ans = 0;
        for i in 0..n {
            if lis[i] > 1 && lds[i] > 1 {
                ans = ans.max(lis[i] + lds[i] - 1);
            }
        }
        (n as i32) - ans

=======

        let n = nums.len();
        let mut dp1 = vec![1; n];
        let mut dp2 = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp1[i] = dp1[i].max(dp1[j] + 1);
                }
            }
        }
        for i in (0..n - 1).rev() {
            for j in (i + 1)..n {
                if nums[i] > nums[j] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut res = 0;
        for i in 0..n {
            if dp1[i] > 1 && dp2[i] > 1 {
                res = res.max(dp1[i] + dp2[i] - 1);
            }
        }
        (n - res) as i32
    }
}

=======

        let n = nums.len();
        let mut l = vec![1; n];
        let mut r = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    l[i] = l[i].max(l[j] + 1);
                }
            }
        }
        for i in (0..n - 1).rev() {
            for j in (i + 1)..n {
                if nums[i] > nums[j] {
                    r[i] = r[i].max(r[j] + 1);
                }
            }
        }
        let mut ans = n;
        for i in 1..n - 1 {
            if l[i] > 1 && r[i] > 1 {
                ans = ans.min(n - l[i] - r[i] + 1);
            }
        }
        ans as i32

=======

        let n = nums.len();
        let mut l = vec![1; n];
        let mut r = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    l[i] = l[i].max(l[j] + 1);
                }
            }
        }
        for i in (0..n-1).rev() {
            for j in i+1..n {
                if nums[i] > nums[j] {
                    r[i] = r[i].max(r[j] + 1);
                }
            }
        }
        let mut res = n as i32;
        for i in 1..n-1 {
            res = res.min(n as i32 - l[i] - r[i] + 1);
        }
        res

=======

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        let mut dp2 = vec![1; n];
        for i in (0..n-1).rev() {
            for j in i+1..n {
                if nums[j] < nums[i] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut ans = 0;
        for i in 0..n {
            ans = ans.max(dp[i] + dp2[i] - 1);
        }
        (n - ans) as i32

=======

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        let mut dp2 = vec![1; n];
        for i in (0..n-1).rev() {
            for j in i+1..n {
                if nums[j] < nums[i] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut res = 0;
        for i in 0..n {
            if dp[i] > 1 && dp2[i] > 1 {
                res = res.max(dp[i] + dp2[i] - 1);
            }
        }
        (n - res) as i32

=======

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 0..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        let mut dp2 = vec![1; n];
        for i in (0..n).rev() {
            for j in (i + 1)..n {
                if nums[j] < nums[i] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut res = 0;
        for i in 0..n {
            if dp[i] > 1 && dp2[i] > 1 {
                res = res.max(dp[i] + dp2[i] - 1);
            }
        }
        n as i32 - res

=======

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 0..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        let mut dp2 = vec![1; n];
        for i in (0..n).rev() {
            for j in i + 1..n {
                if nums[j] < nums[i] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut ans = 0;
        for i in 0..n {
            if dp[i] > 1 && dp2[i] > 1 {
                ans = ans.max(dp[i] + dp2[i] - 1);
            }
        }
        (n - ans) as i32

=======

        let n = nums.len();
        let mut dp = vec![0; n];
        for i in 1..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        let mut dp2 = vec![0; n];
        for i in (0..n-1).rev() {
            for j in (i+1)..n {
                if nums[j] < nums[i] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
        }
        let mut res = 0;
        for i in 0..n {
            if dp[i] > 0 && dp2[i] > 0 {
                res = res.max(dp[i] + dp2[i] + 1);
            }
        }
        n as i32 - res

=======

        let mut dp = vec![1; nums.len()];
        let mut dp2 = vec![1; nums.len()];
        let mut max = 0;
        for i in 1..nums.len() {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
            max = max.max(dp[i]);
        }
        for i in (0..nums.len() - 1).rev() {
            for j in (i + 1..nums.len()).rev() {
                if nums[i] > nums[j] {
                    dp2[i] = dp2[i].max(dp2[j] + 1);
                }
            }
            max = max.max(dp2[i]);
        }
        (nums.len() - max) as i32
