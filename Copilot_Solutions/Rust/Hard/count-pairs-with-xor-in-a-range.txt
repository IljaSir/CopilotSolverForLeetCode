Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let xor = nums[i] ^ nums[j];
                if xor >= low && xor <= high {
                    res += 1;
                }
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let xor = nums[i] ^ nums[j];
                if xor >= low && xor <= high {
                    ans += 1;
                }
            }
        }
        ans
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let x = nums[i] ^ nums[j];
                if x >= low && x <= high {
                    count += 1;
                }
            }
        }
        count

=======

        let mut cnt = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let xor = nums[i] ^ nums[j];
                if xor >= low && xor <= high {
                    cnt += 1;
                }
            }
        }
        cnt
    }
}

=======

        let mut cnt = 0;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                let x = nums[i] ^ nums[j];
                if x >= low && x <= high {
                    cnt += 1;
                }
            }
        }
        cnt
    }
}

=======

        let mut ans = 0;
        let n = nums.len();
        for i in 0..n {
            for j in i + 1..n {
                let xor = nums[i] ^ nums[j];
                if xor >= low && xor <= high {
                    ans += 1;
                }
            }
        }
        ans

=======

        
    }
}

=======

        let mut cnt = 0;
        let mut freq = vec![0; 1 << 17];
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let xor = nums[i] ^ nums[j];
                if low <= xor && xor <= high {
                    cnt += 1;
                }
            }
        }
        cnt
    }
}
