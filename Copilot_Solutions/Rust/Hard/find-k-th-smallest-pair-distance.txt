Synthesizing 6/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = nums.len();
        let mut nums = nums;
        nums.sort();
        let mut lo = 0;
        let mut hi = nums[n-1] - nums[0];
        while lo < hi {
            let mi = lo + (hi - lo) / 2;
            let mut count = 0;
            let mut left = 0;
            for right in 0..n {
                while nums[right] - nums[left] > mi {
                    left += 1;
                }
                count += right - left;
            }
            if count >= k {
                hi = mi;
            } else {
                lo = mi + 1;
            }
        }
        lo

=======

        let mut nums = nums;
        nums.sort_unstable();
        let n = nums.len();
        let k = k as usize;
        let mut left = 0;
        let mut right = nums[n - 1] - nums[0];
        while left < right {
            let mid = left + (right - left) / 2;
            let mut count = 0;
            let mut start = 0;
            for end in 0..n {
                while nums[end] - nums[start] > mid {
                    start += 1;
                }
                count += end - start;
            }
            if count >= k {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left as i32
