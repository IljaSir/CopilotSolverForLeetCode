Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let m = matrix.len();
        if m == 0 {
            return 0;
        }
        let n = matrix[0].len();
        if n == 0 {
            return 0;
        }
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if matrix[i][j] == '1' {
                    dp[i][j] = if i == 0 { 1 } else { dp[i - 1][j] + 1 };
                }
            }
        }
        let mut max_area = 0;
        for i in 0..m {
            let mut stack = vec![];
            for j in 0..n {
                while !stack.is_empty() && dp[i][stack[stack.len() - 1]] > dp[i][j] {
                    let idx = stack.pop().unwrap();
                    let width = if stack.is_empty() { j } else { j - stack[stack.len() - 1] - 1 };
                    max_area = max_area.max(dp[i][idx] * width);
                }
                stack.push(j);
            }
            while !stack.is_empty() {
                let idx = stack.pop().unwrap();
                let width = if stack.is_empty() { n } else { n - stack[stack.len() - 1] - 1 };
                max_area = max_area.max(dp[i][idx] * width);
            }
        }
        max_area
    }
}

=======

        if matrix.is_empty() {
            return 0;
        }
        let mut max_area = 0;
        let mut heights = vec![0; matrix[0].len()];
        for row in matrix {
            for (i, c) in row.iter().enumerate() {
                heights[i] = if *c == '1' { heights[i] + 1 } else { 0 };
            }
            max_area = max_area.max(Self::largest_rectangle_area(&heights));
        }
        max_area
    }
    fn largest_rectangle_area(heights: &[i32]) -> i32 {
        let mut max_area = 0;
        let mut stack = vec![];
        let mut heights = heights.to_vec();
        heights.push(0);
        for (i, &height) in heights.iter().enumerate() {
            while let Some(&top) = stack.last() {
                if heights[top] < height {
                    break;
                }
                stack.pop();
                let left = if let Some(&left) = stack.last() {
                    left
                } else {
                    0
                };
                let area = heights[top] * (i - left) as i32;
                max_area = max_area.max(area);
            }
            stack.push(i);
        }
        max_area
    }
}
