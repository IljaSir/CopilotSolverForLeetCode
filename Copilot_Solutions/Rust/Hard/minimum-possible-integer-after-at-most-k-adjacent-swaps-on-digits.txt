Synthesizing 6/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut num: Vec<char> = num.chars().collect();
        let mut k = k;
        for i in 0..num.len() {
            if k == 0 {
                break;
            }
            let mut min = i;
            for j in i + 1..num.len() {
                if num[j] < num[min] {
                    min = j;
                }
                if j - i > k as usize {
                    break;
                }
            }
            for j in (min + 1..=i).rev() {
                num.swap(j, j - 1);
            }
            k -= (min - i) as i32;
        }
        num.iter().collect()

=======

        let mut num = num.into_bytes();
        let mut k = k as usize;
        let n = num.len();
        let mut pos = vec![0; n];
        for i in 0..n {
            pos[i] = i;
        }
        for i in 0..n {
            let mut j = i;
            for k in (i..n).take(k + 1) {
                if num[pos[k]] < num[pos[j]] {
                    j = k;
                }
            }
            k -= j - i;
            let mut t = j;
            while t > i {
                pos.swap(t - 1, t);
                t -= 1;
            }
        }
        let mut res = String::new();
        for i in 0..n {
            res.push(num[pos[i]] as char);
        }
        res

=======

        let mut num = num.chars().collect::<Vec<_>>();
        let mut k = k;
        let mut i = 0;
        while i < num.len() - 1 && k > 0 {
            let mut min = i;
            let mut j = i + 1;
            while j < num.len() && j - i <= k as usize {
                if num[j] < num[min] {
                    min = j;
                }
                j += 1;
            }
            for j in (min + 1..=i + k as usize).rev() {
                num.swap(j, j - 1);
            }
            k -= (min - i) as i32;
            i += 1;
        }
        num.into_iter().collect()

=======

        let mut v = num.chars().collect::<Vec<char>>();
        let mut k = k;
        for i in 0..v.len() {
            let mut idx = i;
            let mut j = i + 1;
            while j < v.len() && j <= i + k as usize {
                if v[j] < v[idx] {
                    idx = j;
                }
                j += 1;
            }
            k -= idx as i32 - i as i32;
            let mut j = idx;
            while j > i {
                v.swap(j, j - 1);
                j -= 1;
            }
        }
        v.iter().collect()
