Synthesizing 9/10 solutions

=======

        let mut ans = 0;
        let mut pos = vec![0; row.len()];
        for i in 0..row.len() {
            pos[row[i] as usize] = i;
        }
        for i in (0..row.len()).step_by(2) {
            if row[i] % 2 == 0 {
                if row[i + 1] != row[i] + 1 {
                    let j = pos[row[i] as usize + 1];
                    pos[row[i + 1] as usize] = j;
                    row.swap(i + 1, j);
                    ans += 1;
                }
            } else {
                if row[i + 1] != row[i] - 1 {
                    let j = pos[row[i] as usize - 1];
                    pos[row[i + 1] as usize] = j;
                    row.swap(i + 1, j);
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut row = row;
        let mut ans = 0;
        for i in (0..row.len()).step_by(2) {
            if row[i] % 2 == 0 {
                if row[i + 1] != row[i] + 1 {
                    let mut j = i + 1;
                    while row[j] != row[i] + 1 {
                        j += 1;
                    }
                    row.swap(i + 1, j);
                    ans += 1;
                }
            } else {
                if row[i + 1] != row[i] - 1 {
                    let mut j = i + 1;
                    while row[j] != row[i] - 1 {
                        j += 1;
                    }
                    row.swap(i + 1, j);
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut row = row;
        let mut ans = 0;
        for i in (0..row.len()).step_by(2) {
            if row[i] % 2 == 0 {
                if row[i + 1] != row[i] + 1 {
                    let idx = row.iter().position(|&x| x == row[i] + 1).unwrap();
                    row.swap(i + 1, idx);
                    ans += 1;
                }
            } else {
                if row[i + 1] != row[i] - 1 {
                    let idx = row.iter().position(|&x| x == row[i] - 1).unwrap();
                    row.swap(i + 1, idx);
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut row = row;
        let mut count = 0;
        for i in (0..row.len()).step_by(2) {
            let mut j = i + 1;
            while row[j] != row[i] ^ 1 {
                j += 1;
            }
            if j != i + 1 {
                row.swap(i + 1, j);
                count += 1;
            }
        }
        count

=======

        let mut row = row;
        let mut res = 0;
        for i in 0..row.len() / 2 {
            if row[2 * i + 1] == row[2 * i] ^ 1 {
                continue;
            }
            for j in 2 * i + 2..row.len() {
                if row[j] == row[2 * i] ^ 1 {
                    row.swap(j, 2 * i + 1);
                    break;
                }
            }
            res += 1;
        }
        res

=======

        let mut count = 0;
        let mut row = row;
        for i in 0..row.len() / 2 {
            if row[2 * i] / 2 == row[2 * i + 1] / 2 {
                continue;
            }
            let mut j = 2 * i + 1;
            while row[j] / 2 != row[2 * i] / 2 {
                j += 1;
            }
            row.swap(j, 2 * i + 1);
            count += 1;
        }
        count

=======

        let mut row = row;
        let mut swaps = 0;
        for i in 0..row.len() / 2 {
            let couple = row[2 * i] / 2 * 2;
            if row[2 * i + 1] == couple + 1 {
                continue;
            }
            swaps += 1;
            for j in 2 * i + 2..row.len() {
                if row[j] == couple + 1 {
                    row[j] = row[2 * i + 1];
                    row[2 * i + 1] = couple + 1;
                    break;
                }
            }
        }
        swaps
    }
}

=======

        let mut r = row;
        let mut c = 0;
        for i in 0..r.len()/2 {
            if r[2*i+1]-r[2*i] != 1 {
                c += 1;
                for j in 2*i+2..r.len() {
                    if r[j] == r[2*i]+1 {
                        r.swap(j, 2*i+1);
                        break;
                    }
                }
            }
        }
        c

=======

        
    }
}
