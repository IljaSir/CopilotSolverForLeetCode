Synthesizing 9/10 solutions

=======

        let mut s = 0;
        for c in corridor.chars() {
            if c == 'S' {
                s += 1;
            }
        }
        if s % 2 != 0 {
            return 0;
        }
        let n = s / 2;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        let mut cur = 0;
        for c in corridor.chars() {
            if c == 'S' {
                cur += 1;
            }
            if cur <= n {
                dp[cur] = (dp[cur] + dp[cur - 1]) % 1000000007;
            }
        }
        dp[n]

=======

        
    }
}

=======

        let mut res = 1;
        let mut cnt = 0;
        for c in corridor.chars() {
            if c == 'S' {
                cnt += 1;
            } else {
                if cnt > 0 {
                    res = (res * cnt) % 1_000_000_007;
                    cnt -= 1;
                }
            }
        }
        if cnt > 0 {
            0
        } else {
            (res - 1) as i32
        }
    }
}

=======

        let mut cnt = 0;
        let mut prev = 'S';
        for c in corridor.chars() {
            if c == 'S' {
                if prev == 'S' {
                    cnt += 1;
                }
                prev = 'S';
            } else {
                prev = 'P';
            }
        }
        let mut n = 1;
        for _ in 0..cnt {
            n = (n * 2) % 1_000_000_007;
        }
        if n != 0 {
            n -= 1;
        }
        n as i32

=======

        let mut dp = vec![0, 1];
        let mut s = 0;
        for c in corridor.chars() {
            if c == 'S' {
                s += 1;
            }
            if c == 'P' {
                dp[0] = dp[0] + dp[1];
                dp[1] = dp[0];
            }
        }
        if s % 2 == 0 {
            dp[0] as i32
        } else {
            0
        }
    }
}

=======

        let mut dp = vec![0; 3];
        for c in corridor.chars() {
            match c {
                'S' => {
                    dp[0] += dp[0];
                    dp[1] += dp[1];
                    dp[2] += dp[2];
                    dp[0] += 1;
                }
                'P' => {
                    dp[1] += dp[0];
                    dp[2] += dp[1];
                }
                _ => {}
            }
            dp[0] %= 1_000_000_007;
            dp[1] %= 1_000_000_007;
            dp[2] %= 1_000_000_007;
        }
        dp[2] as i32
    }
}

=======

        let mut c = corridor.chars().collect::<Vec<char>>();
        let n = c.len();
        let mut dp = vec![vec![0; 3]; n];
        dp[0][0] = 1;
        dp[0][1] = 1;
        for i in 1..n {
            if c[i] == 'S' {
                dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % 1000000007;
                dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) % 1000000007;
                dp[i][2] = dp[i-1][1];
            }
        }
        dp[n-1][1]

=======

        let mut ways = 1;
        let mut plants = 0;
        let mut seats = 0;
        let mut last = 'S';
        for c in corridor.chars() {
            match c {
                'S' => {
                    if last == 'P' {
                        if plants == 2 {
                            ways *= 2;
                        }
                        if plants == 1 {
                            ways *= 1;
                        }
                        if plants == 0 {
                            ways *= 0;
                        }
                        ways %= 1_000_000_007;
                        plants = 0;
                    }
                    seats += 1;
                    last = 'S';
                }
                'P' => {
                    plants += 1;
                    last = 'P';
                }
                _ => {}
            }
        }
        if plants == 2 {
            ways *= 2;
        }
        if plants == 1 {
            ways *= 1;
        }
        if plants == 0 {
            ways *= 0;
        }
        ways %= 1_000_000_007;
        ways -= 1;
        if ways < 0 {
            ways += 1_000_000_007;
        }
        ways
    }
}

=======

        let modu = 1000000007;
        let mut s = 0;
        let mut p = 0;
        let mut last_s = 0;
        let mut last_p = 0;
        let mut ans = 1;
        for c in corridor.chars() {
            if c == 'S' {
                s += 1;
                if p > 0 {
                    ans = ans * (last_s + last_p) % modu;
                    last_p = 0;
                }
                last_s += 1;
            } else {
                p += 1;
                last_p += 1;
            }
        }
        if s == 2 {
            ans = 2;
        }
        ans
