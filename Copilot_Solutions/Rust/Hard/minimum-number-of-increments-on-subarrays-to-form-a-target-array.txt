Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut res = target[0];
        for i in 1..target.len() {
            res += (target[i] - target[i - 1]).max(0);
        }
        res

=======

        let mut ans = target[0];
        for i in 1..target.len() {
            ans += (target[i] - target[i-1]).max(0);
        }
        ans

=======

        let mut res = 0;
        let mut prev = 0;
        for i in 0..target.len() {
            if target[i] > prev {
                res += target[i] - prev;
            }
            prev = target[i];
        }
        res

=======

        let mut ans = target[0];
        for i in 1..target.len() {
            ans += std::cmp::max(target[i] - target[i-1], 0);
        }
        ans

=======

        let mut prev = 0;
        let mut ret = 0;
        for i in target {
            if i > prev {
                ret += i - prev;
            }
            prev = i;
        }
        ret

=======

        let mut ans = 0;
        for i in 1..target.len() {
            ans += target[i-1].max(target[i] - target[i-1]);
        }
        ans += target[target.len()-1];
        ans
