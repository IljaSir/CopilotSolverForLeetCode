Synthesizing 9/10 solutions

=======

        let mut board = vec![vec!['.'; n as usize]; n as usize];
        let mut res = vec![];
        backtrack(&mut board, 0, &mut res);
        res
    }
}

=======

        let mut board = vec![vec!['.'; n as usize]; n as usize];
        let mut result = vec![];
        Self::solve(&mut board, 0, &mut result);
        result
    }
    
    fn solve(board: &mut Vec<Vec<char>>, row: usize, result: &mut Vec<Vec<String>>) {
        if row == board.len() {
            result.push(board.iter().map(|s| s.iter().collect()).collect());
            return;
        }
        for col in 0..board.len() {
            if !Self::is_valid(board, row, col) {
                continue;
            }
            board[row][col] = 'Q';
            Self::solve(board, row + 1, result);
            board[row][col] = '.';
        }
    }
    
    fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize) -> bool {
        for i in 0..board.len() {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        for i in 0..board.len() {
            if board[row][i] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32;
        let mut j = col as i32;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32;
        let mut j = col as i32;
        while i < board.len() as i32 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i += 1;
            j -= 1;
        }
        let mut i = row as i32;
        let mut j = col as i32;
        while i < board.len() as i32 && j < board.len() as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i += 1;
            j += 1;
        }
        let mut i = row as i32;
        let mut j = col as i32;
        while i >= 0 && j < board

=======

        let mut res = vec![];
        let mut board = vec![vec!['.'; n as usize]; n as usize];
        Self::dfs(0, &mut board, &mut res);
        res
    }
    fn dfs(row: usize, board: &mut Vec<Vec<char>>, res: &mut Vec<Vec<String>>) {
        if row == board.len() {
            res.push(board.iter().map(|v| v.iter().collect()).collect());
            return;
        }
        for col in 0..board.len() {
            if !Self::is_valid(row, col, board) {
                continue;
            }
            board[row][col] = 'Q';
            Self::dfs(row + 1, board, res);
            board[row][col] = '.';
        }
    }
    fn is_valid(row: usize, col: usize, board: &Vec<Vec<char>>) -> bool {
        for i in 0..row {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 - 1;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 + 1;
        while i >= 0 && j < board.len() as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j += 1;
        }
        true

=======

        let mut res = vec![];
        let mut board = vec![vec!['.'; n as usize]; n as usize];
        Self::helper(0, n as usize, &mut board, &mut res);
        res
    }
    fn helper(row: usize, n: usize, board: &mut Vec<Vec<char>>, res: &mut Vec<Vec<String>>) {
        if row == n {
            res.push(board.iter().map(|v| v.iter().collect()).collect());
            return;
        }
        for col in 0..n {
            if Self::is_valid(row, col, n, board) {
                board[row][col] = 'Q';
                Self::helper(row + 1, n, board, res);
                board[row][col] = '.';
            }
        }
    }
    fn is_valid(row: usize, col: usize, n: usize, board: &Vec<Vec<char>>) -> bool {
        for i in 0..row {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 - 1;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 + 1;
        while i >= 0 && j < n as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j += 1;
        }
        true

=======

        let mut result = Vec::new();
        let mut board = vec![vec!['.'; n as usize]; n as usize];
        Self::helper(n as usize, 0, &mut board, &mut result);
        result
    }
    fn helper(n: usize, row: usize, board: &mut Vec<Vec<char>>, result: &mut Vec<Vec<String>>) {
        if row == n {
            result.push(board.iter().map(|row| row.iter().collect()).collect());
            return;
        }
        for col in 0..n {
            if Self::is_valid(board, row, col) {
                board[row][col] = 'Q';
                Self::helper(n, row + 1, board, result);
                board[row][col] = '.';
            }
        }
    }
    fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize) -> bool {
        for i in 0..row {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        for i in 0..col {
            if board[row][i] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 - 1;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 + 1;
        while i >= 0 && j < board[row].len() as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j += 1;
        }
        true

=======

        let mut result: Vec<Vec<String>> = vec![];
        let mut board: Vec<String> = vec![];
        for _ in 0..n {
            board.push(".".repeat(n as usize));
        }
        let mut col: Vec<bool> = vec![false; n as usize];
        let mut diag1: Vec<bool> = vec![false; 2 * n as usize - 1];
        let mut diag2: Vec<bool> = vec![false; 2 * n as usize - 1];
        Self::backtrack(&mut result, &mut board, 0, n, &mut col, &mut diag1, &mut diag2);
        return result;
    }
    fn backtrack(result: &mut Vec<Vec<String>>, board: &mut Vec<String>, row: usize, n: i32, col: &mut Vec<bool>, diag1: &mut Vec<bool>, diag2: &mut Vec<bool>) {
        if row == n as usize {
            result.push(board.clone());
            return;
        }
        for i in 0..n as usize {
            if col[i] || diag1[row + i] || diag2[n as usize - 1 + row - i] {
                continue;
            }
            let mut s = board[row].clone();
            s.replace_range(i..i+1, "Q");
            board[row] = s;
            col[i] = true;
            diag1[row + i] = true;
            diag2[n as usize - 1 + row - i] = true;
            Self::backtrack(result, board, row + 1, n, col, diag1, diag2);
            s = board[row].clone();
            s.replace_range(i..i+1, ".");
            board[row] = s;
            col[i] = false;
            diag1[row + i] = false;
            diag2[n as usize - 1 + row - i] = false;
        }

=======

        let mut board = vec![vec!['.'; n as usize]; n as usize];
        let mut res = vec![];
        Solution::dfs(n as usize, &mut board, 0, &mut res);
        res
    }
    
    fn dfs(n: usize, board: &mut Vec<Vec<char>>, row: usize, res: &mut Vec<Vec<String>>) {
        if row == n {
            let mut tmp = vec![];
            for i in 0..n {
                let mut s = String::new();
                for j in 0..n {
                    s.push(board[i][j]);
                }
                tmp.push(s);
            }
            res.push(tmp);
            return;
        }
        
        for col in 0..n {
            if !Solution::valid(board, row, col) {
                continue;
            }
            board[row][col] = 'Q';
            Solution::dfs(n, board, row + 1, res);
            board[row][col] = '.';
        }
    }
    
    fn valid(board: &Vec<Vec<char>>, row: usize, col: usize) -> bool {
        let n = board.len();
        for i in 0..n {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 - 1;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 + 1;
        while i >= 0 && j < n as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j += 1;
        }
        true

=======

        let mut res: Vec<Vec<String>> = Vec::new();
        let mut board: Vec<String> = vec![String::new(); n as usize];
        let mut cols: Vec<bool> = vec![false; n as usize];
        let mut diag1: Vec<bool> = vec![false; 2 * n as usize - 1];
        let mut diag2: Vec<bool> = vec![false; 2 * n as usize - 1];
        Self::backtrack(&mut res, &mut board, &mut cols, &mut diag1, &mut diag2, n as usize);
        res
    }
    
    fn backtrack(res: &mut Vec<Vec<String>>, board: &mut Vec<String>, cols: &mut Vec<bool>, diag1: &mut Vec<bool>, diag2: &mut Vec<bool>, n: usize) {
        if board.len() == n {
            res.push(board.clone());
            return;
        }
        for i in 0..n {
            let id1 = n - 1 + board.len() as i32 - i as i32;
            let id2 = board.len() + i;
            if cols[i] || diag1[id1 as usize] || diag2[id2 as usize] {
                continue;
            }
            cols[i] = true;
            diag1[id1 as usize] = true;
            diag2[id2 as usize] = true;
            board[board.len()] = Self::generate_row(i, n);
            Self::backtrack(res, board, cols, diag1, diag2, n);
            board.pop();
            cols[i] = false;
            diag1[id1 as usize] = false;
            diag2[id2 as usize] = false;
        }
    }
    
    fn generate_row(i: usize, n: usize) -> String {
        let mut s = String::new();
        for j in 0..n {
            if j == i {
                s.push('Q');
            } else {
                s.push('.');
            }
        }
        s

=======

        let mut solutions = Vec::new();
        let n = n as usize;
        let mut board = vec![vec!['.'; n]; n];
        Self::backtrack(&mut solutions, &mut board, 0, n);
        solutions
    }
    fn backtrack(solutions: &mut Vec<Vec<String>>, board: &mut Vec<Vec<char>>, row: usize, n: usize) {
        if row == n {
            solutions.push(board.iter().map(|row| row.iter().collect()).collect());
            return;
        }
        for col in 0..n {
            if !Self::is_valid(board, row, col, n) {
                continue;
            }
            board[row][col] = 'Q';
            Self::backtrack(solutions, board, row + 1, n);
            board[row][col] = '.';
        }
    }
    fn is_valid(board: &Vec<Vec<char>>, row: usize, col: usize, n: usize) -> bool {
        for i in 0..row {
            if board[i][col] == 'Q' {
                return false;
            }
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 - 1;
        while i >= 0 && j >= 0 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        let mut i = row as i32 - 1;
        let mut j = col as i32 + 1;
        while i >= 0 && j < n as i32 {
            if board[i as usize][j as usize] == 'Q' {
                return false;
            }
            i -= 1;
            j += 1;
        }
        true
