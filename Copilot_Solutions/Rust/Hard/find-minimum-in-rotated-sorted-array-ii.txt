Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = left + (right - left) / 2;
            if nums[mid] < nums[right] {
                right = mid;
            } else if nums[mid] > nums[right] {
                left = mid + 1;
            } else {
                right -= 1;
            }
        }
        nums[left]

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = (left + right) / 2;
            if nums[mid] < nums[right] {
                right = mid;
            } else if nums[mid] > nums[right] {
                left = mid + 1;
            } else {
                right -= 1;
            }
        }
        nums[left]

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let mid = l + (r - l) / 2;
            if nums[mid] < nums[r] {
                r = mid;
            } else if nums[mid] > nums[r] {
                l = mid + 1;
            } else {
                r = r - 1;
            }
        }
        nums[l]

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let m = (l + r) / 2;
            if nums[m] > nums[r] {
                l = m + 1;
            } else if nums[m] < nums[r] {
                r = m;
            } else {
                r -= 1;
            }
        }
        nums[l]

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let mid = (l + r) / 2;
            if nums[mid] > nums[r] {
                l = mid + 1;
            } else if nums[mid] < nums[r] {
                r = mid;
            } else {
                r -= 1;
            }
        }
        nums[l]

=======

        let n = nums.len();
        let mut l = 0;
        let mut r = n - 1;
        while l < r {
            let mid = l + (r - l) / 2;
            if nums[mid] < nums[r] {
                r = mid;
            } else if nums[mid] > nums[r] {
                l = mid + 1;
            } else {
                r -= 1;
            }
        }
        nums[l]

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = (left + right) >> 1;
            if nums[mid] < nums[right] {
                right = mid;
            } else if nums[mid] > nums[right] {
                left = mid + 1;
            } else {
                right -= 1;
            }
        }
        nums[left]

=======

        nums.iter().min().unwrap().clone()
    }
}
