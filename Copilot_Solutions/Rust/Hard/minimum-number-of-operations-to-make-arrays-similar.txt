Synthesizing 10/10 solutions

=======

        let mut diff = 0;
        for i in 0..nums.len() {
            diff += (nums[i] - target[i]) as i64;
        }
        if diff % 2 != 0 {
            return -1;
        }
        let mut ans = 0;
        for i in 0..nums.len() {
            if nums[i] % 2 != target[i] % 2 {
                ans += 1;
            }
        }
        ans / 2

=======

        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        for i in 0..nums.len() {
            let d = nums[i] - target[i];
            if d == 0 {
                continue;
            }
            if d > 0 {
                a += d as i64;
            } else {
                b += -d as i64;
            }
            c += 1;
        }
        a.max(b) + (c - a.min(b)) / 2
    }
}

=======

        let mut diff = vec![0; nums.len()];
        for i in 0..nums.len() {
            diff[i] = nums[i] - target[i];
        }
        diff.sort();
        let mut ans = 0;
        let mut i = 0;
        let mut j = diff.len() - 1;
        while i < j {
            ans += diff[j] - diff[i];
            i += 1;
            j -= 1;
        }
        ans
    }
}

=======

        let mut diff = Vec::new();
        for i in 0..nums.len() {
            let d = nums[i] - target[i];
            if d != 0 {
                diff.push(d);
            }
        }
        diff.sort();
        let mut i = 0;
        let mut j = diff.len() - 1;
        let mut res = 0;
        while i < j {
            let mut k = 1;
            while i + k < j && diff[i + k] + diff[j] == 0 {
                k += 1;
            }
            if i + k >= j {
                res += 1;
                break;
            }
            if diff[i] + diff[j] == 0 {
                res += 1;
                i += k;
                j -= 1;
            } else if diff[i] + diff[j] > 0 {
                res += 1;
                j -= 1;
            } else {
                res += 1;
                i += k;
            }
        }
        if i == j {
            res += 1;
        }
        res
    }
}

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            let diff = nums[i] - target[i];
            if diff % 2 == 0 {
                if i % 2 == 0 {
                    even += diff.abs();
                } else {
                    odd += diff.abs();
                }
            }
        }
        if odd != even {
            return -1;
        }
        odd / 2
    }
}

=======

        let mut diff = 0;
        for i in 0..nums.len() {
            diff += (nums[i] - target[i]) as i64;
        }
        if diff % 2 == 0 {
            diff / 2
        } else {
            -1
        }
    }
}

=======

        let mut diff = vec![0; nums.len()];
        for i in 0..nums.len() {
            diff[i] = nums[i] - target[i];
        }
        let mut odd = 0;
        let mut even = 0;
        for i in 0..diff.len() {
            if i % 2 == 0 {
                even += diff[i];
            } else {
                odd += diff[i];
            }
        }
        if even != odd {
            return -1;
        }
        let mut ans = 0;
        for i in 0..diff.len() {
            if diff[i] != 0 {
                ans += 1;
                let mut j = i + 1;
                while j < diff.len() && diff[j] == 0 {
                    j += 1;
                }
                diff[j] += diff[i];
            }
        }
        ans

=======

        let mut a = 0;
        let mut b = 0;
        for i in 0..nums.len() {
            let diff = nums[i] - target[i];
            if diff < 0 {
                b -= diff;
            } else {
                a += diff;
            }
        }
        (a + b) / 2

=======

        let mut diff = 0;
        let mut count = 0;
        for (n, t) in nums.iter().zip(target.iter()) {
            diff += n - t;
            if diff != 0 {
                count += 1;
            }
        }
        (count + 1) / 2

=======

        let mut res = 0;
        let mut diff = vec![0; 200001];
        for i in 0..nums.len() {
            let n = nums[i] as i64;
            let t = target[i] as i64;
            if n > t {
                diff[(n - t) as usize] += 1;
            } else if n < t {
                diff[(t - n) as usize + 100000] += 1;
            }
        }
        for i in 0..200001 {
            res += (diff[i] + 1) / 2;
        }
        res
    }
}
