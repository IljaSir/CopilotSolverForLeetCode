Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut res = 0;
        let mut count = vec![0; 26];
        for c in s.chars() {
            let i = c as usize - 'a' as usize;
            count[i] += 1;
            let mut min = 100001;
            let mut max = 0;
            for &c in count.iter() {
                if c > 0 {
                    min = min.min(c);
                    max = max.max(c);
                }
            }
            res = res.max(max - min);
        }
        res

=======

        let mut ans = 0;
        let mut cnt = vec![0; 26];
        let mut s = s.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            for j in i..s.len() {
                let idx = (s[j] as u8 - b'a') as usize;
                cnt[idx] += 1;
                let mut max = 0;
                let mut min = s.len();
                for k in 0..26 {
                    max = max.max(cnt[k]);
                    min = min.min(cnt[k]);
                }
                ans = ans.max(max - min);
            }
            for j in i..s.len() {
                let idx = (s[j] as u8 - b'a') as usize;
                cnt[idx] -= 1;
            }
        }
        ans as i32
    }
}

=======

        let mut max = 0;
        let mut counts = vec![0; 26];
        let mut prev = vec![0; 26];
        let mut next = vec![0; 26];
        let mut c = s.chars();
        let mut n = c.next();
        while let Some(c) = n {
            next[c as usize - 'a' as usize] += 1;
            n = c.next();
        }
        let mut n = c.next();
        while let Some(c) = n {
            prev.copy_from_slice(&next);
            next.copy_from_slice(&counts);
            next[c as usize - 'a' as usize] += 1;
            let mut min = i32::MAX;
            let mut max = 0;
            for i in 0..26 {
                let diff = (prev[i] - next[i]).abs();
                if diff < min {
                    min = diff;
                }
                if diff > max {
                    max = diff;
                }
            }
            let diff = max - min;
            if diff > max {
                max = diff;
            }
            n = c.next();
        }
        max
