Synthesizing 10/10 solutions

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let mut dp = vec![vec![false; p.len() + 1]; s.len() + 1];
        dp[0][0] = true;
        for i in 0..=s.len() {
            for j in 1..=p.len() {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 2] || i > 0 && dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == b'.');
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == b'.');
                }
            }
        }
        dp[s.len()][p.len()]

=======

        let s: Vec<char> = s.chars().collect();
        let p: Vec<char> = p.chars().collect();
        let mut dp = vec![vec![false; p.len() + 1]; s.len() + 1];
        dp[0][0] = true;
        for i in 0..=s.len() {
            for j in 1..=p.len() {
                if p[j - 1] == '*' {
                    dp[i][j] = dp[i][j - 2] || i > 0 && dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.');
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
                }
            }
        }
        dp[s.len()][p.len()]
    }
}

=======

        let s: Vec<char> = s.chars().collect();
        let p: Vec<char> = p.chars().collect();
        let m = s.len();
        let n = p.len();
        let mut dp = vec![vec![false; n + 1]; m + 1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j - 1] == '*' {
                    dp[i][j] = dp[i][j - 2] || (i > 0 && dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
                }
            }
        }
        dp[m][n]
    }
}

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let m = s.len();
        let n = p.len();
        let mut dp = vec![vec![false; n + 1]; m + 1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j - 1] == b'*' {
                    dp[i][j] = dp[i][j - 2];
                    if matches(s, p, i, j - 1) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                } else {
                    if matches(s, p, i, j) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
                }
            }
        }
        dp[m][n]
    }
}

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let mut dp = vec![vec![false; p.len()+1]; s.len()+1];
        dp[0][0] = true;
        for i in 0..=s.len() {
            for j in 1..=p.len() {
                if p[j-1] == b'*' {
                    dp[i][j] = dp[i][j-2] || (i>0 && (p[j-2]==b'.' || p[j-2]==s[i-1]) && dp[i-1][j]);
                } else {
                    dp[i][j] = i>0 && dp[i-1][j-1] && (p[j-1]==b'.' || p[j-1]==s[i-1]);
                }
            }
        }
        dp[s.len()][p.len()]

=======

        let (s, p) = (s.into_bytes(), p.into_bytes());
        let (n, m) = (s.len(), p.len());
        let mut f = vec![vec![false; m + 1]; n + 1];
        f[0][0] = true;
        for i in 0..=n {
            for j in 1..=m {
                if p[j - 1] == b'*' {
                    f[i][j] |= f[i][j - 2];
                    if i > 0 && (s[i - 1] == p[j - 2] || p[j - 2] == b'.') {
                        f[i][j] |= f[i - 1][j];
                    }
                } else {
                    if i > 0 && (s[i - 1] == p[j - 1] || p[j - 1] == b'.') {
                        f[i][j] |= f[i - 1][j - 1];
                    }
                }
            }
        }
        f[n][m]
    }
}

=======

        let (s, p) = (s.into_bytes(), p.into_bytes());
        let (n, m) = (s.len(), p.len());
        let mut f = vec![vec![false; m + 1]; n + 1];
        f[0][0] = true;
        for i in 0..=n {
            for j in 1..=m {
                if p[j - 1] == b'*' {
                    f[i][j] |= f[i][j - 2];
                    if i > 0 && (p[j - 2] == b'.' || p[j - 2] == s[i - 1]) {
                        f[i][j] |= f[i - 1][j];
                    }
                } else {
                    if i > 0 && (p[j - 1] == b'.' || p[j - 1] == s[i - 1]) {
                        f[i][j] |= f[i - 1][j - 1];
                    }
                }
            }
        }
        f[n][m]

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let (n, m) = (s.len(), p.len());
        let mut dp = vec![vec![false; m + 1]; n + 1];
        dp[0][0] = true;
        for j in 1..=m {
            if p[j - 1] == b'*' {
                dp[0][j] = dp[0][j - 2];
            }
        }
        for i in 1..=n {
            for j in 1..=m {
                if p[j - 1] == b'.' || p[j - 1] == s[i - 1] {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if p[j - 1] == b'*' {
                    if p[j - 2] == s[i - 1] || p[j - 2] == b'.' {
                        dp[i][j] = dp[i][j - 2] || dp[i - 1][j];
                    } else {
                        dp[i][j] = dp[i][j - 2];
                    }
                }
            }
        }
        dp[n][m]

=======

        let s = s.as_bytes();
        let p = p.as_bytes();
        let (m, n) = (s.len(), p.len());
        let mut dp = vec![vec![false; n+1]; m+1];
        dp[0][0] = true;
        for i in 0..=m {
            for j in 1..=n {
                if p[j-1] == b'*' {
                    dp[i][j] = dp[i][j-2] || (i > 0 && dp[i-1][j] && (s[i-1] == p[j-2] || p[j-2] == b'.'));
                } else {
                    dp[i][j] = i > 0 && dp[i-1][j-1] && (s[i-1] == p[j-1] || p[j-1] == b'.');
                }
            }
        }
        dp[m][n]

=======

        let (s,p): (Vec<char>,Vec<char>) = (s.chars().collect(),p.chars().collect());
        let (mut i,mut j): (usize,usize) = (0,0);
        let (mut star,mut ss): (usize,usize) = (0,0);
        while i < s.len() {
            if j < p.len() && (s[i] == p[j] || p[j] == '.') {
                i += 1;
                j += 1;
            } else if j < p.len() && p[j] == '*' {
                star = j;
                j += 1;
                ss = i;
            } else if star != 0 {
                j = star + 1;
                ss += 1;
                i = ss;
            } else {
                return false;
            }
        }
        while j < p.len() && p[j] == '*' {
            j += 1;
        }
        j == p.len()
