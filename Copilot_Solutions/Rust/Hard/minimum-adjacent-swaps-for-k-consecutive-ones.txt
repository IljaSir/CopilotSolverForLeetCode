Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let mut ones = Vec::new();
        for i in 0..nums.len() {
            if nums[i] == 1 {
                ones.push(i as i32);
            }
        }
        let mut ans = std::i32::MAX;
        let mut l = 0;
        let mut r = k as usize - 1;
        while r < ones.len() {
            let mut cost = 0;
            let mid = (l + r) / 2;
            for i in l..=r {
                cost += (ones[i] - ones[mid]).abs();
            }
            ans = ans.min(cost);
            l += 1;
            r += 1;
        }
        ans

=======

        let mut ones = vec![];
        for (i, &n) in nums.iter().enumerate() {
            if n == 1 {
                ones.push(i);
            }
        }
        let mut ans = std::i32::MAX;
        let mut sum = 0;
        for i in 0..k as usize {
            sum += ones[i];
        }
        ans = ans.min(sum as i32 - (k * (k - 1) / 2) as i32);
        for i in k as usize..ones.len() {
            sum += ones[i];
            sum -= ones[i - k as usize];
            ans = ans.min(sum as i32 - (k * (k - 1) / 2) as i32);
        }
        ans
