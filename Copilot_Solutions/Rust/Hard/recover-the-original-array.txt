Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let n = nums.len() / 2;
        let mut nums = nums;
        nums.sort();
        let mut res = vec![0; n];
        for i in 0..n {
            res[i] = nums[i] + nums[2 * n - i - 1];
            res[i] /= 2;
        }
        res

=======

        
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len() / 2;
        let mut ans = vec![0; n];
        for i in 0..n {
            ans[i] = nums[i] + (nums[i + n] - nums[i]) / 2;
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let k = nums[nums.len() / 2] - nums[0];
        nums.iter().map(|n| n - k).collect()

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let k = (nums[n/2] - nums[n/2-1]).abs();
        let mut res = Vec::new();
        for i in 0..n/2 {
            res.push(nums[i] + k);
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut result = vec![0; nums.len()/2];
        let n = nums.len();
        for i in 0..n/2 {
            result[i] = (nums[i] + nums[n-1-i])/2;
        }
        result
    }
}
