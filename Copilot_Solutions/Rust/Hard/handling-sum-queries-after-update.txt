Synthesizing 6/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        let mut result = Vec::new();
        for query in queries {
            match query[0] {
                1 => {
                    for i in query[1] as usize..=query[2] as usize {
                        nums1[i] = 1 - nums1[i];
                    }
                },
                2 => {
                    let mut sum = 0;
                    for i in 0..nums1.len() {
                        sum += nums1[i] as i64 * nums2[i] as i64;
                    }
                    result.push(sum * query[1] as i64);
                },
                3 => {
                    let mut sum = 0;
                    for i in 0..nums1.len() {
                        sum += nums2[i] as i64;
                    }
                    result.push(sum);
                },
                _ => (),
            }
        }
        result

=======

        let mut nums1 = nums1;
        let mut res = vec![];
        let mut sum = nums2.iter().sum::<i32>() as i64;
        for q in queries {
            if q[0] == 1 {
                let l = q[1] as usize;
                let r = q[2] as usize;
                for i in l..=r {
                    nums1[i] ^= 1;
                    sum += if nums1[i] == 1 { 1 } else { -1 } * nums2[i] as i64;
                }
            } else if q[0] == 2 {
                let p = q[1] as i64;
                sum += nums1.iter().sum::<i32>() as i64 * p;
            } else {
                res.push(sum);
            }
        }
        res
    }
}
