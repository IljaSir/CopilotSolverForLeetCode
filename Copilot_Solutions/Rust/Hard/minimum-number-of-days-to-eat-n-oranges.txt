Synthesizing 10/10 solutions

=======

        let mut dp = vec![0; n as usize + 1];
        dp[0] = 0;
        dp[1] = 1;
        for i in 2..=n as usize {
            dp[i] = (dp[i/2] + i%2 + 1).min(dp[i/3] + i%3 + 1);
        }
        dp[n as usize]

=======

        let mut dp = vec![0; n as usize + 1];
        for i in 1..=n as usize {
            dp[i] = dp[i - 1] + 1;
            if i % 2 == 0 {
                dp[i] = dp[i].min(dp[i / 2] + 1);
            }
            if i % 3 == 0 {
                dp[i] = dp[i].min(dp[i / 3] + 1);
            }
        }
        dp[n as usize]

=======

        let mut dp = vec![0; n as usize + 1];
        for i in 1..=n {
            dp[i as usize] = 1 + dp[(i - 1) as usize];
            if i % 2 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 2) as usize]);
            }
            if i % 3 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 3) as usize]);
            }
        }
        dp[n as usize]

=======

        let mut dp = vec![0; n as usize + 1];
        for i in 1..=n {
            dp[i as usize] = 1 + dp[(i - 1) as usize];
            if i % 2 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 2) as usize]);
            }
            if i % 3 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 3) as usize]);
            }
        }
        dp[n as usize]
    }
}

=======

        let mut dp = vec![0; n as usize + 1];
        for i in 2..=n {
            dp[i as usize] = 1 + dp[(i - 1) as usize].min(dp[(i % 2 + i / 2) as usize].min(dp[(i % 3 + i / 3 * 2) as usize]));
        }
        dp[n as usize]

=======

        let n = n as i64;
        let mut dp = vec![0; n as usize + 1];
        for i in 1..=n {
            dp[i as usize] = dp[(i / 2) as usize] + dp[(i / 3) as usize] + dp[(i / 5) as usize] + 1;
        }
        dp[n as usize]
    }
}

=======

        let n = n as u64;
        let mut dp = vec![0u64; (n + 1) as usize];
        dp[1] = 1;
        for i in 2..=n {
            dp[i as usize] = 1 + dp[(i - 1) as usize];
            if i % 2 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 2) as usize]);
            }
            if i % 3 == 0 {
                dp[i as usize] = dp[i as usize].min(1 + dp[(i / 3) as usize]);
            }
        }
        dp[n as usize] as i32

=======

        let mut n = n as u32;
        let mut memo = vec![0; (n + 1) as usize];
        memo[0] = 0;
        memo[1] = 1;
        for i in 2..=n {
            memo[i as usize] = 1 + memo[(i - 1) as usize];
            if i % 2 == 0 {
                memo[i as usize] = memo[i as usize].min(1 + memo[(i / 2) as usize]);
            }
            if i % 3 == 0 {
                memo[i as usize] = memo[i as usize].min(1 + memo[(i / 3) as usize]);
            }
        }
        memo[n as usize]

=======

        let mut n = n as i64;
        let mut memo = vec![0; 2000001];
        let mut q = std::collections::VecDeque::new();
        q.push_back(n);
        while let Some(x) = q.pop_front() {
            if x <= 1 {
                return memo[x as usize];
            }
            if memo[x as usize] > 0 {
                continue;
            }
            memo[x as usize] = memo[(x - 1) as usize] + 1;
            q.push_back(x - 1);
            if x % 2 == 0 {
                memo[x as usize] = std::cmp::min(memo[x as usize], memo[(x / 2) as usize] + 1);
                q.push_back(x / 2);
            }
            if x % 3 == 0 {
                memo[x as usize] = std::cmp::min(memo[x as usize], memo[(x / 3) as usize] + 1);
                q.push_back(x / 3);
            }
        }
        memo[n as usize]

=======

        let mut memo = vec![-1; n as usize + 1];
        //println!("n={}", n);
        Self::f(n, &mut memo)
    }
    pub fn f(n: i32, memo: &mut Vec<i32>) -> i32 {
        if n <= 1 {
            return n;
        }
        if memo[n as usize] != -1 {
            return memo[n as usize];
        }
        let r = 1 + n.min(Self::f(n / 2, memo) + n % 2 + Self::f(n / 3, memo) + n % 3);
        memo[n as usize] = r;
        r
    }
}
