Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut sum = 0;
        let mut count = vec![0; 26];
        let mut n = 0;
        for c in s.chars() {
            if count[(c as u8 - b'a') as usize] == 0 {
                n += 1;
            }
            count[(c as u8 - b'a') as usize] += 1;
            sum += n;
        }
        sum
    }
}

=======

        let mut result: i64 = 0;
        let mut count: Vec<i64> = vec![0; 26];
        let mut distinct: i64 = 0;
        for (i, ch) in s.chars().enumerate() {
            let idx = (ch as u8 - 'a' as u8) as i64;
            count[idx as usize] += 1;
            if count[idx as usize] == 1 {
                distinct += 1;
            }
            result += distinct;
        }
        result

=======

        let s = s.as_bytes();
        let mut cnt = [0; 26];
        let mut ans = 0;
        for (i, &c) in s.iter().enumerate() {
            let j = (c - b'a') as usize;
            cnt[j] += 1;
            let mut sum = 0;
            for &c in &cnt {
                if c > 0 {
                    sum += 1;
                }
            }
            ans += sum * (i + 1) as i64;
        }
        ans
