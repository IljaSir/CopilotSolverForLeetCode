Synthesizing 7/10 solutions (Duplicates hidden)

=======

        let mut rooms = vec![0; n as usize];
        for meeting in meetings {
            let (start, end) = (meeting[0] as usize, meeting[1] as usize);
            for i in start..end {
                rooms[i] += 1;
            }
        }
        rooms.iter().enumerate().max_by_key(|(_, &count)| count).unwrap().0 as i32
    }
}

=======

        let mut rooms = vec![0; n as usize];
        for m in meetings {
            let (start, end) = (m[0] as usize, m[1] as usize);
            for i in start..end {
                rooms[i] += 1;
            }
        }
        rooms.iter().enumerate().max_by_key(|&(_, &v)| v).unwrap().0 as i32

=======

        let mut events = Vec::new();
        for m in meetings {
            events.push((m[0], 1));
            events.push((m[1], -1));
        }
        events.sort();
        let mut max = 0;
        let mut curr = 0;
        let mut room = 0;
        for e in events {
            curr += e.1;
            if curr > max {
                max = curr;
                room = e.0;
            }
        }
        room

=======

        let mut events = meetings.into_iter().map(|v| (v[0], 1)).collect::<Vec<_>>();
        events.extend(meetings.into_iter().map(|v| (v[1], -1)));
        events.sort_unstable_by_key(|v| v.0);
        let mut max = 0;
        let mut max_room = 0;
        let mut room = 0;
        for (_, delta) in events {
            room += delta;
            if room > max {
                max = room;
                max_room = room;
            }
        }
        max_room
    }
}

=======

        
    }
}

=======

        let mut rooms = vec![0; n as usize];
        let mut max = 0;
        for meeting in meetings {
            let (start, end) = (meeting[0] as usize, meeting[1] as usize);
            for i in start..end {
                rooms[i] += 1;
                max = max.max(rooms[i]);
            }
        }
        rooms.iter().position(|&x| x == max).unwrap() as i32
