Synthesizing 10/10 solutions

=======

        let mut buy1 = std::i32::MIN;
        let mut sell1 = 0;
        let mut buy2 = std::i32::MIN;
        let mut sell2 = 0;
        for price in prices {
            buy1 = buy1.max(-price);
            sell1 = sell1.max(buy1 + price);
            buy2 = buy2.max(sell1 - price);
            sell2 = sell2.max(buy2 + price);
        }
        sell2
    }
}

=======

        let mut buy1 = std::i32::MIN;
        let mut sell1 = 0;
        let mut buy2 = std::i32::MIN;
        let mut sell2 = 0;
        for p in prices {
            buy1 = buy1.max(-p);
            sell1 = sell1.max(buy1 + p);
            buy2 = buy2.max(sell1 - p);
            sell2 = sell2.max(buy2 + p);
        }
        sell2
    }
}

=======

        let mut buy1 = std::i32::MAX;
        let mut sell1 = 0;
        let mut buy2 = std::i32::MAX;
        let mut sell2 = 0;
        for price in prices {
            buy1 = buy1.min(price);
            sell1 = sell1.max(price - buy1);
            buy2 = buy2.min(price - sell1);
            sell2 = sell2.max(price - buy2);
        }
        sell2
    }
}

=======

        let n = prices.len();
        if n < 2 {
            return 0;
        }
        let mut dp = vec![vec![0; n]; 3];
        for i in 1..=2 {
            let mut tmp_max = dp[i-1][0] - prices[0];
            for j in 1..n {
                dp[i][j] = dp[i][j-1].max(tmp_max + prices[j]);
                tmp_max = tmp_max.max(dp[i-1][j] - prices[j]);
            }
        }
        dp[2][n-1]
    }
}

=======

        let mut dp = vec![vec![0; 3]; prices.len()];
        for i in 1..prices.len() {
            let diff = prices[i] - prices[i - 1];
            for j in 1..3 {
                dp[i][j] = std::cmp::max(dp[i - 1][j], dp[i - 1][j - 1] + diff);
            }
        }
        dp[prices.len() - 1][2]

=======

        let mut dp = vec![vec![0; 3]; prices.len()];
        for i in 1..prices.len() {
            let diff = prices[i] - prices[i - 1];
            for k in 1..=2 {
                dp[i][k] = std::cmp::max(dp[i - 1][k], dp[i - 1][k - 1] + diff);
                dp[i][k] = std::cmp::max(dp[i][k], dp[i - 1][k - 1]);
                dp[i][k] = std::cmp::max(dp[i][k], dp[i][k - 1]);
            }
        }
        dp[prices.len() - 1][2]

=======

        let mut dp = vec![vec![vec![0; 2]; 3]; prices.len()];
        for i in 0..prices.len() {
            for k in 1..3 {
                if i == 0 {
                    dp[i][k][0] = 0;
                    dp[i][k][1] = -prices[i];
                    continue;
                }
                dp[i][k][0] = std::cmp::max(dp[i - 1][k][0], dp[i - 1][k][1] + prices[i]);
                dp[i][k][1] = std::cmp::max(dp[i - 1][k][1], dp[i - 1][k - 1][0] - prices[i]);
            }
        }
        dp[prices.len() - 1][2][0]

=======

        let mut dp = vec![vec![0; 3]; prices.len() + 1];
        for i in 1..=prices.len() {
            for j in 1..=2 {
                let mut max = dp[i - 1][j];
                for k in 0..i {
                    max = max.max(dp[k][j - 1] + prices[i - 1] - prices[k]);
                }
                dp[i][j] = max;
            }
        }
        dp[prices.len()][2]
    }
}

=======

        let mut dp = vec![vec![0; 5]; prices.len()];
        for i in 0..prices.len() {
            for j in 0..5 {
                dp[i][j] = match j {
                    0 => 0,
                    1 => {
                        if i == 0 {
                            -prices[i]
                        } else {
                            std::cmp::max(dp[i - 1][1], -prices[i])
                        }
                    }
                    2 => {
                        if i == 0 {
                            0
                        } else {
                            std::cmp::max(dp[i - 1][2], dp[i - 1][1] + prices[i])
                        }
                    }
                    3 => {
                        if i == 0 {
                            -prices[i]
                        } else {
                            std::cmp::max(dp[i - 1][3], dp[i - 1][2] - prices[i])
                        }
                    }
                    4 => {
                        if i == 0 {
                            0
                        } else {
                            std::cmp::max(dp[i - 1][4], dp[i - 1][3] + prices[i])
                        }
                    }
                    _ => unreachable!(),
                }
            }
        }
        dp[prices.len() - 1][4]
    }
}

=======

        let mut profit = 0;
        let mut min = 0;
        let mut max = 0;
        let mut min_index = 0;
        let mut max_index = 0;
        for i in 0..prices.len() {
            if prices[i] < min {
                min = prices[i];
                min_index = i;
                max = 0;
                max_index = 0;
            }
            if prices[i] > max {
                max = prices[i];
                max_index = i;
            }
            if min_index < max_index && max - min > profit {
                profit = max - min;
            }
        }
        profit
    }
}
