Synthesizing 10/10 solutions

=======

        let mut pos = std::collections::HashMap::new();
        for (i, &x) in target.iter().enumerate() {
            pos.insert(x, i);
        }
        let mut d = vec![];
        for &x in arr.iter() {
            if let Some(&i) = pos.get(&x) {
                let p = d.binary_search(&i).unwrap_or_else(|x| x);
                if p < d.len() {
                    d[p] = i;
                } else {
                    d.push(i);
                }
            }
        }
        (target.len() - d.len()) as i32

=======

        let mut pos = vec![0; target.len()];
        for (i, &x) in target.iter().enumerate() {
            pos[x as usize - 1] = i;
        }
        let mut d = vec![];
        for &x in arr.iter() {
            let p = pos[x as usize - 1];
            if p > 0 {
                let idx = d.lower_bound(&p);
                if idx == d.len() {
                    d.push(p);
                } else {
                    d[idx] = p;
                }
            }
        }
        target.len() as i32 - d.len() as i32
    }
}

=======

        let mut pos = vec![0; target.len()];
        for (i, &x) in target.iter().enumerate() {
            pos[x as usize - 1] = i;
        }
        let mut d = Vec::new();
        for &x in arr.iter() {
            let idx = pos[x as usize - 1];
            if idx > 0 {
                let p = d.binary_search(&idx).unwrap_or_else(|x| x);
                if p == d.len() {
                    d.push(idx);
                } else {
                    d[p] = idx;
                }
            }
        }
        (target.len() - d.len()) as i32

=======

        let mut pos = vec![0; target.len()];
        for i in 0..target.len() {
            pos[target[i] as usize - 1] = i as i32;
        }
        let mut d = vec![];
        for i in arr {
            if pos[i as usize - 1] > 0 {
                let idx = d.binary_search(&pos[i as usize - 1]).unwrap_or_else(|x| x);
                if idx == d.len() {
                    d.push(pos[i as usize - 1]);
                } else {
                    d[idx] = pos[i as usize - 1];
                }
            }
        }
        target.len() as i32 - d.len() as i32

=======

        let mut m = std::collections::HashMap::new();
        for (i, &v) in target.iter().enumerate() {
            m.insert(v, i);
        }
        let mut v = Vec::new();
        for &v1 in arr.iter() {
            if let Some(&v2) = m.get(&v1) {
                if let Some(&v3) = v.last() {
                    if v3 < v2 {
                        v.push(v2);
                    } else {
                        let i = v.binary_search(&v2).unwrap_err();
                        v[i] = v2;
                    }
                } else {
                    v.push(v2);
                }
            }
        }
        (target.len() - v.len()) as i32
    }
}

=======

        let mut pos = vec![0; target.len()];
        for (i, v) in target.iter().enumerate() {
            pos[*v as usize - 1] = i;
        }
        let mut d = vec![];
        for v in arr {
            if pos[v as usize - 1] > 0 {
                let p = pos[v as usize - 1];
                if let Err(i) = d.binary_search(&p) {
                    if i > 0 {
                        d[i - 1] = p;
                    } else {
                        d.push(p);
                    }
                }
            }
        }
        (target.len() - d.len()) as i32
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for (i, &v) in target.iter().enumerate() {
            map.insert(v, i);
        }
        let mut dp = vec![0];
        for &v in arr.iter() {
            if let Some(&i) = map.get(&v) {
                if let Err(j) = dp.binary_search(&i) {
                    if j == dp.len() {
                        dp.push(i);
                    } else {
                        dp[j] = i;
                    }
                }
            }
        }
        (target.len() - dp.len()) as i32

=======

        let mut pos = vec![0; 100001];
        for (i, &x) in target.iter().enumerate() {
            pos[x as usize] = i + 1;
        }
        let mut dp = vec![0; target.len() + 1];
        let mut len = 0;
        for &x in arr.iter() {
            if pos[x as usize] > 0 {
                let mut l = 0;
                let mut r = len;
                while l < r {
                    let mid = (l + r + 1) / 2;
                    if dp[mid] < pos[x as usize] {
                        l = mid;
                    } else {
                        r = mid - 1;
                    }
                }
                len = len.max(l + 1);
                dp[l + 1] = pos[x as usize];
            }
        }
        target.len() as i32 - len

=======

        let mut mp = std::collections::HashMap::new();
        for (i, &t) in target.iter().enumerate() {
            mp.insert(t, i);
        }
        let mut dp = vec![];
        for &a in &arr {
            if let Some(&i) = mp.get(&a) {
                let mut l = 0;
                let mut r = dp.len();
                while l < r {
                    let m = (l + r) / 2;
                    if dp[m] < i {
                        l = m + 1;
                    } else {
                        r = m;
                    }
                }
                if l == dp.len() {
                    dp.push(i);
                } else {
                    dp[l] = i;
                }
            }
        }
        (target.len() - dp.len()) as i32

=======

        
    }
}
