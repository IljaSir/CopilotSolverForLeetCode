Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let m = nums1.len();
        let n = nums2.len();
        let mut dp = vec![vec![0; n]; m];
        dp[0][0] = nums1[0] * nums2[0];
        for i in 1..m {
            dp[i][0] = std::cmp::max(dp[i-1][0], nums1[i] * nums2[0]);
        }
        for j in 1..n {
            dp[0][j] = std::cmp::max(dp[0][j-1], nums1[0] * nums2[j]);
        }
        for i in 1..m {
            for j in 1..n {
                dp[i][j] = std::cmp::max(dp[i-1][j-1] + nums1[i] * nums2[j], dp[i-1][j]);
                dp[i][j] = std::cmp::max(dp[i][j], dp[i][j-1]);
            }
        }
        dp[m-1][n-1]

=======

        let m = nums1.len();
        let n = nums2.len();
        let mut dp = vec![vec![std::i32::MIN; n + 1]; m + 1];
        for i in 1..=m {
            for j in 1..=n {
                dp[i][j] = dp[i - 1][j - 1].max(dp[i - 1][j].max(dp[i][j - 1]));
                dp[i][j] = dp[i][j].max(dp[i - 1][j - 1] + nums1[i - 1] * nums2[j - 1]);
            }
        }
        dp[m][n]

=======

        let (n1, n2) = (nums1.len(), nums2.len());
        let mut dp = vec![vec![0; n2]; n1];
        dp[0][0] = nums1[0] * nums2[0];
        for i in 1..n1 {
            dp[i][0] = dp[i - 1][0].max(nums1[i] * nums2[0]);
        }
        for j in 1..n2 {
            dp[0][j] = dp[0][j - 1].max(nums1[0] * nums2[j]);
        }
        for i in 1..n1 {
            for j in 1..n2 {
                dp[i][j] = dp[i - 1][j - 1].max(dp[i - 1][j]).max(dp[i][j - 1]);
                dp[i][j] = dp[i][j].max(dp[i - 1][j - 1] + nums1[i] * nums2[j]);
            }
        }
        dp[n1 - 1][n2 - 1]

=======

        
    }
}
