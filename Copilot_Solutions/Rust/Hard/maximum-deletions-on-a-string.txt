Synthesizing 9/10 solutions

=======

        let s = s.as_bytes();
        let mut cnt = 0;
        let mut i = 0;
        while i < s.len() {
            let mut j = i + 1;
            while j < s.len() && s[j] == s[i] {
                j += 1;
            }
            let l = j - i;
            cnt += l / 2;
            i = j;
        }
        cnt

=======

        let mut stack: Vec<char> = vec![];
        for c in s.chars() {
            if let Some(&x) = stack.last() {
                if x == c {
                    stack.pop();
                } else {
                    stack.push(c);
                }
            } else {
                stack.push(c);
            }
        }
        stack.len() as i32
    }
}

=======

        let s: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = s.len() - 1;
        let mut res = 0;
        while i < j {
            let mut k = i + 1;
            while k <= j && s[k] != s[i] {
                k += 1;
            }
            if k > j {
                res += 1;
                break;
            }
            if k - i == j - k + 1 {
                res += 2;
                break;
            }
            if k - i > j - k + 1 {
                res += 1;
                j = k - 2;
            } else {
                res += 1;
                i = k;
            }
        }
        res
    }
}

=======

        let mut i = 0;
        let mut j = s.len() - 1;
        let mut count = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        while i < j {
            if s[i] == s[j] {
                let mut k = 1;
                while i + k < j && s[i + k] == s[j - k] {
                    k += 1;
                }
                i += k;
                j -= k;
                count += 2;
            } else {
                return count;
            }
        }
        if i == j {
            count += 1;
        }
        count

=======

        let mut s = s;
        let mut count = 0;
        while !s.is_empty() {
            let mut i = 0;
            let mut j = 0;
            while j < s.len() {
                if s.as_bytes()[i] == s.as_bytes()[j] {
                    j += 1;
                } else {
                    i = j;
                }
            }
            count += 1;
            s = s.split_off(i);
        }
        count
    }
}

=======

        let mut res = 0;
        let mut i = 0;
        let mut j = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        while i < s.len() {
            j = i + 1;
            while j < s.len() && s[i] == s[j] {
                j += 1;
            }
            if j - i > 1 {
                res += 1;
                i = j;
            } else {
                i += 1;
            }
        }
        res
    }
}

=======

        let mut s = s.into_bytes();
        let n = s.len();
        let mut dp = vec![0; n];
        for i in 0..n {
            dp[i] = i;
            for j in 0..i {
                if s[j..i] == s[(j + i) / 2..i + (j + i) / 2] {
                    dp[i] = dp[i].min(dp[j] + i / (i - j) - 1);
                }
            }
        }
        dp[n - 1] as i32
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut s = s.chars().collect::<Vec<_>>();
        while i < s.len() {
            if s[i] == s[j] {
                j += 1;
                if j - i > 1 && j == s.len() {
                    count += 1;
                    i = j;
                    j = i;
                }
            } else {
                if j - i > 1 {
                    count += 1;
                    i = j;
                    j = i;
                } else {
                    i += 1;
                    j = i;
                }
            }
        }
        count

=======

        
    }
}
