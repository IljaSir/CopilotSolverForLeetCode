Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut candies = vec![1; ratings.len()];
        for i in 1..ratings.len() {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..ratings.len() - 1).rev() {
            if ratings[i] > ratings[i + 1] {
                candies[i] = candies[i].max(candies[i + 1] + 1);
            }
        }
        candies.iter().sum()

=======

        let mut candies = vec![1; ratings.len()];
        for i in 1..ratings.len() {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..ratings.len() - 1).rev() {
            if ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1] {
                candies[i] = candies[i + 1] + 1;
            }
        }
        candies.iter().sum()

=======

        let n = ratings.len();
        let mut candies = vec![1; n];
        for i in 1..n {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..n - 1).rev() {
            if ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1] {
                candies[i] = candies[i + 1] + 1;
            }
        }
        candies.iter().sum()

=======

        let n = ratings.len();
        let mut candies = vec![1; n];
        for i in 1..n {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        let mut sum = candies[n - 1];
        for i in (0..n - 1).rev() {
            if ratings[i] > ratings[i + 1] {
                candies[i] = candies[i + 1] + 1;
            }
            sum += candies[i];
        }
        sum

=======

        let n = ratings.len();
        let mut candies = vec![1; n];
        for i in 1..n {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..n - 1).rev() {
            if ratings[i] > ratings[i + 1] {
                candies[i] = candies[i].max(candies[i + 1] + 1);
            }
        }
        candies.iter().sum()

=======

        let n = ratings.len();
        let mut candies = vec![1; n];
        for i in 1..n {
            if ratings[i - 1] < ratings[i] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..n - 1).rev() {
            if ratings[i] > ratings[i + 1] && candies[i] <= candies[i + 1] {
                candies[i] = candies[i + 1] + 1;
            }
        }
        candies.iter().sum()

=======

        let mut candies = vec![1; ratings.len()];
        for i in 0..ratings.len() - 1 {
            if ratings[i] < ratings[i + 1] {
                candies[i + 1] = candies[i] + 1;
            }
        }
        for i in (1..ratings.len()).rev() {
            if ratings[i - 1] > ratings[i] && candies[i - 1] <= candies[i] {
                candies[i - 1] = candies[i] + 1;
            }
        }
        candies.iter().sum()

=======

        if ratings.len() == 1 {
            return 1;
        }
        let mut candies = vec![1; ratings.len()];
        for i in 1..ratings.len() {
            if ratings[i] > ratings[i - 1] {
                candies[i] = candies[i - 1] + 1;
            }
        }
        for i in (0..ratings.len() - 1).rev() {
            if ratings[i] > ratings[i + 1] {
                candies[i] = candies[i + 1] + 1;
            }
        }
        candies.iter().sum()
