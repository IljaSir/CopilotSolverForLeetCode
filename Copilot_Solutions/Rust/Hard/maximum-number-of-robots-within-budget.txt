Synthesizing 5/10 solutions

=======

        let mut charge_times = charge_times;
        charge_times.sort_unstable();
        let mut running_costs = running_costs;
        running_costs.sort_unstable();
        let mut left = 0;
        let mut right = charge_times.len() as i32;
        while left < right {
            let mid = (left + right + 1) / 2;
            let mut cost = 0;
            for i in 0..mid as usize {
                cost += charge_times[i as usize] as i64 + mid as i64 * running_costs[i as usize] as i64;
            }
            if cost <= budget {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        left

=======

        let mut charge_times = charge_times;
        let mut running_costs = running_costs;
        let n = charge_times.len();
        charge_times.sort_unstable();
        running_costs.sort_unstable();
        let mut l = 0;
        let mut r = n;
        while l < r {
            let mid = (l + r + 1) / 2;
            let mut sum = 0;
            for i in 0..mid {
                sum += charge_times[i] as i64 + running_costs[i] as i64 * mid as i64;
            }
            if sum <= budget {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        l as i32

=======

        
    }
}

=======

        let n = charge_times.len();
        let mut charge_times = charge_times;
        charge_times.sort();
        let mut running_costs = running_costs;
        running_costs.sort();
        let mut prefix_sum = vec![0; n + 1];
        for i in 0..n {
            prefix_sum[i + 1] = prefix_sum[i] + running_costs[i];
        }
        let mut ans = 0;
        for i in 0..n {
            let mut l = i;
            let mut r = n;
            while l < r {
                let mid = (l + r + 1) / 2;
                if charge_times[i] as i64 + prefix_sum[mid] as i64 - prefix_sum[i] as i64 <= budget {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            ans = ans.max(l - i + 1);
        }
        ans as i32

=======

        let n = charge_times.len();
        let mut charge_times = charge_times;
        charge_times.sort();
        let mut running_costs = running_costs;
        running_costs.sort();
        let mut total = 0;
        let mut max = 0;
        let mut i = 0;
        let mut j = n - 1;
        loop {
            if i < n && j >= 0 && charge_times[i] + running_costs[j] <= budget - total {
                total += charge_times[i] + running_costs[j];
                i += 1;
                j -= 1;
                max += 1;
            } else {
                break;
            }
        }
        max
