Synthesizing 10/10 solutions

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let n = s.len();
        let m = t.len();
        let mut dp = vec![vec![0; m + 1]; n + 1];
        for i in 0..n {
            for j in 0..m {
                if s[i] == t[j] {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                } else {
                    dp[i + 1][j + 1] = dp[i + 1][j].max(dp[i][j + 1]);
                }
            }
        }
        let lcs = dp[n][m];
        let mut ans = n + m - 2 * lcs;
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut l = 0;
        while i < n && j < m {
            if s[i] == t[j] {
                k = i;
                l = j;
                i += 1;
                j += 1;
            } else {
                if dp[i + 1][j] > dp[i][j + 1] {
                    i += 1;
                } else {
                    j += 1;
                }
            }
        }
        ans = ans.min((l - k + 1).max(lcs));
        i = n - 1;
        j = m - 1;
        k = n - 1;
        l = m - 1;
        while i >= 0 && j >= 0 {
            if s[i] == t[j] {
                k = i;
                l = j;
                i -= 1;
                j -= 1;
            } else {
                if dp[i + 1][j] > dp[i][j + 1] {
                    i -= 1;
                } else {
                    j -= 1;
                }
            }
        }
        ans = ans.min((l - k + 1).max(lcs));
        ans as i32

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let mut dp = vec![vec![0; t.len() + 1]; s.len() + 1];
        for i in 1..=s.len() {
            for j in 1..=t.len() {
                if s[i - 1] == t[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
                }
            }
        }
        let mut i = s.len();
        let mut j = t.len();
        let mut ans = 0;
        while i > 0 && j > 0 {
            if s[i - 1] == t[j - 1] {
                if dp[i][j] == dp[i - 1][j - 1] + 1 {
                    ans += 1;
                    i -= 1;
                    j -= 1;
                } else {
                    break;
                }
            } else {
                if dp[i][j] == dp[i - 1][j] {
                    i -= 1;
                } else {
                    j -= 1;
                }
            }
        }
        ans as i32

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let n = s.len();
        let m = t.len();
        let mut dp = vec![vec![0; m + 1]; 2];
        let mut ans = m;
        for i in 0..n {
            for j in 0..m {
                dp[(i + 1) & 1][j + 1] = if s[i] == t[j] {
                    dp[i & 1][j] + 1
                } else {
                    0
                };
                if dp[(i + 1) & 1][j + 1] > 0 {
                    ans = ans.min(m - j - 1 + i - dp[(i + 1) & 1][j + 1] + 1);
                }
            }
        }
        ans as i32
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = t.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        let mut ans = 0;
        while i < s.len() {
            while i < s.len() && s[i] != t[j] {
                i += 1;
            }
            let mut i = i;
            let mut j = j;
            while i < s.len() && j < t.len() && s[i] == t[j] {
                i += 1;
                j += 1;
            }
            if i < s.len() && j < t.len() {
                ans = ans.max(i - j + 1);
            }
            if i == s.len() {
                break;
            }
            i += 1;
            j += 1;
        }
        ans as i32

=======

        let s: Vec<char> = s.chars().collect();
        let t: Vec<char> = t.chars().collect();
        let mut ret = 0;
        let mut i = 0;
        let mut j = 0;
        let mut n = 0;
        let mut m = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                if n > 0 {
                    ret += 1;
                }
                n = 0;
                m = 0;
                i += 1;
                j += 1;
            } else {
                n += 1;
                m += 1;
                i += 1;
            }
        }
        ret + m

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = t.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                i += 1;
                j += 1;
            } else {
                i += 1;
                count += 1;
            }
        }
        count

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let mut s = s.iter().zip(0..).collect::<Vec<_>>();
        let mut t = t.iter().zip(0..).collect::<Vec<_>>();
        s.sort();
        t.sort();
        let mut i = 0;
        let mut j = 0;
        let mut min = std::i32::MAX;
        let mut max = std::i32::MIN;
        while i < s.len() && j < t.len() {
            if s[i].0 == t[j].0 {
                min = min.min(t[j].1 as i32);
                max = max.max(t[j].1 as i32);
                i += 1;
                j += 1;
            } else if s[i].0 < t[j].0 {
                i += 1;
            } else {
                j += 1;
            }
        }
        if min == std::i32::MAX {
            return 0;
        } else {
            return max - min + 1;
        }
    }
}

=======

        let mut s = s.as_bytes();
        let mut t = t.as_bytes();
        let mut l = 0;
        let mut r = t.len() - 1;
        while l < r {
            if t[l] == s[l] {
                l += 1;
            } else if t[r] == s[r] {
                r -= 1;
            } else {
                break;
            }
        }
        if l >= r {
            0
        } else {
            (r - l + 1) as i32
        }

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let mut i = 0;
        let mut j = 0;
        let mut min = 100001;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                let mut k = 0;
                while i + k < s.len() && j + k < t.len() && s[i + k] == t[j + k] {
                    k += 1;
                }
                if k < min {
                    min = k;
                }
                i += 1;
                j += 1;
            } else {
                i += 1;
            }
        }
        if min == 100001 {
            return 0;
        }
        (t.len() - min) as i32

=======

        
    }
}
