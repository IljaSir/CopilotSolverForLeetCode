Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut left = 0;
        let mut right = height.len() - 1;
        let mut left_max = 0;
        let mut right_max = 0;
        let mut ans = 0;
        while left < right {
            if height[left] < height[right] {
                if height[left] >= left_max {
                    left_max = height[left];
                } else {
                    ans += left_max - height[left];
                }
                left += 1;
            } else {
                if height[right] >= right_max {
                    right_max = height[right];
                } else {
                    ans += right_max - height[right];
                }
                right -= 1;
            }
        }
        ans

=======

        let mut left = 0;
        let mut right = height.len() - 1;
        let mut left_max = 0;
        let mut right_max = 0;
        let mut ans = 0;
        while left < right {
            if height[left] < height[right] {
                if height[left] >= left_max {
                    left_max = height[left];
                } else {
                    ans += left_max - height[left];
                }
                left += 1;
            } else {
                if height[right] >= right_max {
                    right_max = height[right];
                } else {
                    ans += right_max - height[right];
                }
                right -= 1;
            }
        }
        ans
    }
}

=======

        let mut left = 0;
        let mut right = height.len() - 1;
        let mut left_max = 0;
        let mut right_max = 0;
        let mut res = 0;
        while left < right {
            if height[left] < height[right] {
                if height[left] >= left_max {
                    left_max = height[left];
                } else {
                    res += left_max - height[left];
                }
                left += 1;
            } else {
                if height[right] >= right_max {
                    right_max = height[right];
                } else {
                    res += right_max - height[right];
                }
                right -= 1;
            }
        }
        res

=======

        let mut ans = 0;
        let mut left = 0;
        let mut right = height.len() - 1;
        let mut l_max = 0;
        let mut r_max = 0;
        while left < right {
            if height[left] < height[right] {
                if height[left] >= l_max {
                    l_max = height[left];
                } else {
                    ans += l_max - height[left];
                }
                left += 1;
            } else {
                if height[right] >= r_max {
                    r_max = height[right];
                } else {
                    ans += r_max - height[right];
                }
                right -= 1;
            }
        }
        ans
    }
}

=======

        let mut max = 0;
        let mut max_index = 0;
        for i in 0..height.len() {
            if height[i] > max {
                max = height[i];
                max_index = i;
            }
        }
        let mut left_max = 0;
        let mut res = 0;
        for i in 0..max_index {
            if height[i] > left_max {
                left_max = height[i];
            } else {
                res += left_max - height[i];
            }
        }
        let mut right_max = 0;
        for i in (max_index+1..height.len()).rev() {
            if height[i] > right_max {
                right_max = height[i];
            } else {
                res += right_max - height[i];
            }
        }
        res
    }
}
