Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut dp = vec![vec![0; 1001]; s.len()];
        dp[0][s.chars().nth(0).unwrap().to_digit(10).unwrap() as usize] = 1;
        for i in 1..s.len() {
            let c = s.chars().nth(i).unwrap();
            if c == '*' {
                for j in 0..1001 {
                    for k in 0..1001 {
                        if dp[i - 2][j] > 0 && dp[i - 2][k] > 0 {
                            dp[i][j * k] = 1;
                        }
                    }
                }
            } else if c == '+' {
                for j in 0..1001 {
                    for k in 0..1001 {
                        if dp[i - 2][j] > 0 && dp[i - 2][k] > 0 {
                            dp[i][j + k] = 1;
                        }
                    }
                }
            } else {
                for j in 0..1001 {
                    if dp[i - 2][j] > 0 {
                        dp[i][j * 10 + c.to_digit(10).unwrap() as usize] = 1;
                    }
                }
            }
        }
        let mut res = 0;
        for i in 0..answers.len() {
            let ans = answers[i];
            if ans == dp[s.len() - 1][ans as usize] {
                res += 5;
            } else if ans <= 1000 {
                let mut flag = true;
                for j in 0..s.len() {
                    if dp[j][ans as usize] > 0 {
                        flag = false;
                        break;
                    }
                }
                if flag {
                    res += 2;
                }
            }
        }
        res

=======

        let n = s.len();
        let mut dp = vec![vec![vec![0; 1001]; n + 1]; n + 1];
        for i in 0..n {
            if let Ok(d) = s[i..i + 1].parse::<i32>() {
                dp[i][i + 1][d as usize] = 1;
            }
        }
        for l in 2..=n {
            for i in 0..=n - l {
                let j = i + l;
                for k in i + 1..j {
                    for a in 0..=1000 {
                        for b in 0..=1000 {
                            let c = a + b;
                            if c <= 1000 {
                                dp[i][j][c] += dp[i][k][a] * dp[k][j][b];
                            }
                        }
                    }
                }
                if s[i..j].contains('*') {
                    for k in i + 1..j {
                        for a in 0..=1000 {
                            for b in 0..=1000 {
                                let c = a * b;
                                if c <= 1000 {
                                    dp[i][j][c] += dp[i][k][a] * dp[k][j][b];
                                }
                            }
                        }
                    }
                }
            }
        }
        let mut res = 0;
        for a in answers {
            if dp[0][n][a as usize] > 0 {
                res += 5;
            } else {
                for b in 0..=1000 {
                    if dp[0][n][b] > 0 && a == (b as i32) {
                        res += 2;
                        break;
                    }
                }
            }
        }
        res

=======

        let mut ans = 0;
        let mut exp = 0;
        let mut mul = 1;
        for c in s.chars() {
            if c == '+' {
                exp += mul;
                mul = 1;
            } else if c == '*' {
                mul *= 2;
            } else {
                exp += mul * (c as i32 - '0' as i32);
            }
        }
        for &a in &answers {
            if a == exp {
                ans += 5;
            } else if a < exp {
                let mut flag = false;
                let mut exp2 = 0;
                let mut mul2 = 1;
                for c in s.chars() {
                    if c == '+' {
                        exp2 += mul2;
                        mul2 = 1;
                    } else if c == '*' {
                        mul2 *= 2;
                    } else {
                        exp2 += mul2 * (c as i32 - '0' as i32);
                        if exp2 == a {
                            flag = true;
                            break;
                        }
                    }
                }
                if flag {
                    ans += 2;
                }
            }
        }
        ans

=======

        let mut ans = 0;
        let mut n = 0;
        let mut op = '+';
        let mut nums = Vec::new();
        for c in s.chars() {
            if c == '+' || c == '*' {
                op = c;
            } else {
                let x = c as i32 - '0' as i32;
                if op == '+' {
                    n += x;
                } else {
                    n *= x;
                }
                if c == '*' {
                    nums.push(n);
                    n = 0;
                }
            }
        }
        nums.push(n);
        let mut n = 0;
        let mut op = '+';
        let mut nums2 = Vec::new();
        for c in s.chars() {
            if c == '+' || c == '*' {
                op = c;
            } else {
                let x = c as i32 - '0' as i32;
                if op == '+' {
                    n += x;
                } else {
                    n *= x;
                }
                if c == '*' {
                    nums2.push(n);
                    n = 0;
                }
            }
        }
        nums2.push(n);
        let mut res = 0;
        for x in nums2 {
            res += x;
        }
        for x in answers {
            if x == res {
                ans += 5;
            } else {
                let mut ok = true;
                for i in 0..nums.len() {
                    if nums[i] != x {
                        ok = false;
                    }
                }
                if ok {
                    ans += 2;
                }
            }
        }
        ans

=======

        let mut res = 0;
        let mut n = s.len();
        let mut dp = vec![vec![vec![false; n]; n]; 1001];
        let mut calc = |l, r| {
            let mut ret = vec![];
            for i in l..r {
                let ch = s.as_bytes()[i] as char;
                if ch == '+' {
                    let left = calc(l, i);
                    let right = calc(i + 1, r);
                    for &l in &left {
                        for &r in &right {
                            ret.push(l + r);
                        }
                    }
                } else if ch == '*' {
                    let left = calc(l, i);
                    let right = calc(i + 1, r);
                    for &l in &left {
                        for &r in &right {
                            ret.push(l * r);
                        }
                    }
                }
            }
            if ret.is_empty() {
                ret.push(s[l..r].parse().unwrap());
            }
            ret
        };
        let mut ans = calc(0, n);
        ans.sort();
        ans.dedup();
        for &a in &ans {
            dp[a as usize][0][n - 1] = true;
        }
        for i in 0..n {
            if s.as_bytes()[i] as char >= '0' && s.as_bytes()[i] as char <= '9' {
                dp[s.as_bytes()[i] as usize - '0' as usize][i][i] = true;
            }
        }
        for len in 1..n {
            for i in 0..=n - len - 1 {
                for j in i..i + len {
                    for k in 0..=1000 {
                        if dp[k][i][j] && dp[k][j + 1][i + len] {
                            dp[k][i][i + len] = true;
                        }
                    }
                }
                for k in 0..=1000 {
                    if dp[k][i][i + len] {
                        for l in 0..=1000 {
                            if dp[l][i + len + 1][n - 1] {
                                dp[k + l][0][n - 1] = true;
                            }
                        }
                    }
                }
            }
        }
        for &

=======

        let mut res = 0;
        for &a in &answers {
            let mut stack = vec![];
            let mut cur = 0;
            let mut is_op = false;
            let mut is_mul = false;
            for c in s.chars() {
                if c == '+' || c == '*' {
                    if is_op {
                        if is_mul {
                            stack.push(stack.pop().unwrap() * cur);
                        } else {
                            stack.push(cur);
                        }
                    } else {
                        stack.push(cur);
                    }
                    cur = 0;
                    is_op = true;
                    is_mul = c == '*';
                } else {
                    cur = cur * 10 + (c as u8 - b'0') as i32;
                    is_op = false;
                }
            }
            if is_op {
                if is_mul {
                    stack.push(stack.pop().unwrap() * cur);
                } else {
                    stack.push(cur);
                }
            } else {
                stack.push(cur);
            }
            let mut ret = 0;
            while !stack.is_empty() {
                ret += stack.pop().unwrap();
            }
            if ret == a {
                res += 5;
            } else if a == stack[0] + stack[1] * stack[2] {
                res += 2;
            }
        }
        res
    }
}
