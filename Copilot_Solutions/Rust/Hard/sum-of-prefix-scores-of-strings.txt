Synthesizing 10/10 solutions

=======

        let mut res = vec![0; words.len()];
        let mut map = std::collections::HashMap::new();
        for (i, word) in words.iter().enumerate() {
            let mut prefix = String::new();
            for c in word.chars() {
                prefix.push(c);
                if let Some(v) = map.get_mut(&prefix) {
                    *v += 1;
                } else {
                    map.insert(prefix.clone(), 1);
                }
                res[i] += 1;
            }
        }
        res
    }
}

=======

        let mut ans = vec![0; words.len()];
        let mut map = std::collections::HashMap::new();
        for (i, word) in words.iter().enumerate() {
            let mut s = String::new();
            for c in word.chars() {
                s.push(c);
                *map.entry(s.clone()).or_insert(0) += 1;
                ans[i] += map[&s];
            }
        }
        ans
    }
}

=======

        let mut res = vec![0; words.len()];
        let mut map = std::collections::HashMap::new();
        for (i, word) in words.iter().enumerate() {
            let mut cur = String::new();
            for ch in word.chars() {
                cur.push(ch);
                *map.entry(cur.clone()).or_insert(0) += 1;
                res[i] += map.get(&cur).unwrap();
            }
        }
        res
    }
}

=======

        let mut scores: Vec<i32> = vec![0; words.len()];
        let mut i = 0;
        while i < words.len() {
            let mut j = 0;
            while j < words.len() {
                if i != j && words[i].starts_with(&words[j]) {
                    scores[i] += 1;
                }
                j += 1;
            }
            i += 1;
        }
        scores
    }
}

=======

        let mut result: Vec<i32> = vec![0; words.len()];
        let mut score: i32 = 0;
        for (i, word) in words.iter().enumerate() {
            score += word.len() as i32;
            result[i] = score;
        }
        result
    }
}

=======

        let mut result = vec![0; words.len()];
        let mut count = vec![0; 26];
        for (i, word) in words.iter().enumerate() {
            for c in word.chars() {
                let idx = (c as u8 - 'a' as u8) as usize;
                count[idx] += 1;
                result[i] += count[idx];
            }
        }
        result
    }
}

=======

        let mut result = vec![0; words.len()];
        let mut map: HashMap<String, i32> = HashMap::new();
        for i in 0..words.len() {
            let mut word = String::new();
            for ch in words[i].chars() {
                word.push(ch);
                *map.entry(word.clone()).or_insert(0) += 1;
            }
        }
        for i in 0..words.len() {
            let mut word = String::new();
            for ch in words[i].chars() {
                word.push(ch);
                result[i] += map.get(&word).unwrap();
            }
        }
        result
    }
}

=======

        let mut result = Vec::with_capacity(words.len());
        for (i, word) in words.iter().enumerate() {
            let mut count = 0;
            for j in 0..i {
                if word.starts_with(&words[j]) {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
    }
}

=======

        let mut scores: Vec<i32> = Vec::new();
        let mut prefix: String = String::new();
        for word in words {
            let mut score = 0;
            for c in word.chars() {
                prefix.push(c);
                score += 1;
                scores.push(score);
            }
            prefix.clear();
        }
        scores
    }
}

=======

        let mut res = vec![0; words.len()];
        let mut prefix = vec![' '; words.len()];
        let mut count = vec![0; words.len()];
        for (i, word) in words.iter().enumerate() {
            for (j, c) in word.chars().enumerate() {
                if prefix[j] != c {
                    prefix[j] = c;
                    count[j] = 0;
                }
                count[j] += 1;
                res[i] += count[j];
            }
        }
        res
