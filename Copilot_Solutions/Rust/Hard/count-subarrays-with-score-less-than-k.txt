Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let n = nums.len();
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + nums[i];
        }
        let mut res = 0;
        let mut deque = Vec::new();
        for i in 0..=n {
            while !deque.is_empty() && sum[i] - sum[deque[0]] >= k {
                deque.remove(0);
            }
            res += deque.len();
            while !deque.is_empty() && sum[i] <= sum[*deque.last().unwrap()] {
                deque.pop();
            }
            deque.push(i);
        }
        res as i64

=======

        let mut res = 0;
        let mut prod = 1;
        let mut left = 0;
        for right in 0..nums.len() {
            prod *= nums[right] as i64;
            while prod >= k {
                prod /= nums[left] as i64;
                left += 1;
            }
            res += right - left + 1;
        }
        res as i64

=======

        let (mut l, mut r, mut sum, mut res) = (0, 0, 0, 0);
        while r < nums.len() {
            sum += nums[r] as i64;
            while l <= r && sum * (r - l + 1) as i64 >= k {
                sum -= nums[l] as i64;
                l += 1;
            }
            res += r - l + 1;
            r += 1;
        }
        res as i64
    }
}

=======

        let mut res = 0;
        let mut p = 1;
        let mut i = 0;
        for j in 0..nums.len() {
            p *= nums[j] as i64;
            while p >= k {
                p /= nums[i] as i64;
                i += 1;
            }
            res += j - i + 1;
        }
        res as i64
    }
}

=======

        let mut res = 0;
        let mut prod = 1;
        let mut start = 0;
        let mut end = 0;
        while end < nums.len() {
            prod *= nums[end] as i64;
            end += 1;
            while prod >= k && start < end {
                prod /= nums[start] as i64;
                start += 1;
            }
            res += (end - start) as i64;
        }
        res
    }
}

=======

        let mut sum = 0;
        let mut res = 0;
        let mut queue = std::collections::VecDeque::new();
        for i in 0..nums.len() {
            sum += nums[i] as i64;
            while !queue.is_empty() && sum - queue.front().unwrap() >= k {
                queue.pop_front();
            }
            res += queue.len() as i64;
            while !queue.is_empty() && sum <= *queue.back().unwrap() {
                queue.pop_back();
            }
            queue.push_back(sum);
        }
        res
    }
}

=======

        let mut ans = 0;
        let mut p = 1;
        let mut l = 0;
        let mut r = 0;
        while r < nums.len() {
            p *= nums[r] as i64;
            while l <= r && p >= k {
                p /= nums[l] as i64;
                l += 1;
            }
            ans += r - l + 1;
            r += 1;
        }
        ans as i64
    }
}

=======

        let mut ans = 0;
        let mut sum = 0;
        let mut left = 0;
        for (right, &num) in nums.iter().enumerate() {
            sum += num as i64;
            while sum * (right - left + 1) as i64 >= k {
                sum -= nums[left] as i64;
                left += 1;
            }
            ans += (right - left + 1) as i64;
        }
        ans
    }
}

=======

        
    }
}
