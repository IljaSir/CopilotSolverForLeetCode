Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut ans = 1;
        let n = pieces.len();
        for i in 0..n {
            let x = positions[i][0] as usize;
            let y = positions[i][1] as usize;
            let mut cnt = 0;
            if pieces[i] == "rook" {
                cnt = 14;
            } else if pieces[i] == "bishop" {
                cnt = 12;
            } else {
                cnt = 22;
            }
            for j in 0..n {
                if i == j {
                    continue;
                }
                let x1 = positions[j][0] as usize;
                let y1 = positions[j][1] as usize;
                if x == x1 || y == y1 {
                    cnt -= 1;
                }
                if (x + y) % 2 == (x1 + y1) % 2 {
                    if (x + y) == (x1 + y1) || (x - y) == (x1 - y1) {
                        cnt -= 1;
                    }
                }
            }
            ans *= cnt;
        }
        ans as i32

=======

        let mut ans = 1;
        let n = pieces.len();
        for i in 0..n {
            let (x, y) = (positions[i][0] - 1, positions[i][1] - 1);
            let mut cnt = 0;
            for j in 0..n {
                if i == j {
                    continue;
                }
                let (x1, y1) = (positions[j][0] - 1, positions[j][1] - 1);
                if pieces[i] == "rook" {
                    if x == x1 || y == y1 {
                        cnt += 1;
                    }
                } else if pieces[i] == "bishop" {
                    if (x - x1).abs() == (y - y1).abs() {
                        cnt += 1;
                    }
                } else {
                    if x == x1 || y == y1 || (x - x1).abs() == (y - y1).abs() {
                        cnt += 1;
                    }
                }
            }
            ans *= 15 - cnt;
        }
        ans as i32

=======

        
    }
}

=======

        let mut ans = 1;
        for i in 0..pieces.len() {
            let p = &pieces[i];
            let pos = &positions[i];
            let x = pos[0] as usize;
            let y = pos[1] as usize;
            let mut cnt = 0;
            if p == "rook" {
                cnt = 14;
                for j in 0..pieces.len() {
                    let p2 = &pieces[j];
                    let pos2 = &positions[j];
                    let x2 = pos2[0] as usize;
                    let y2 = pos2[1] as usize;
                    if p2 == "rook" {
                        if x == x2 || y == y2 {
                            cnt -= 1;
                        }
                    } else if p2 == "queen" {
                        if x == x2 || y == y2 {
                            cnt -= 1;
                        } else if x + y == x2 + y2 || x - y == x2 - y2 {
                            cnt -= 1;
                        }
                    } else {
                        if x + y == x2 + y2 || x - y == x2 - y2 {
                            cnt -= 1;
                        }
                    }
                }
            } else if p == "queen" {
                cnt = 21;
                for j in 0..pieces.len() {
                    let p2 = &pieces[j];
                    let pos2 = &positions[j];
                    let x2 = pos2[0] as usize;
                    let y2 = pos2[1] as usize;
                    if p2 == "rook" {
                        if x == x2 || y == y2 {
                            cnt -= 1;
                        }
                    } else if p2 == "queen" {
                        if x == x2 || y == y2 {
                            cnt -= 1;
                        } else if x + y == x2 + y2 || x - y == x2 - y2 {
                            cnt -= 1;
                        }
                    } else {
                        if x + y == x2 + y2 || x - y == x2 - y2 {
                            cnt -= 1;
                        }
                    }
                }
            } else {
                cnt = 11;
                for j in 0..pieces.len() {
                    let p2 = &pieces[j];
                    let pos2 =

=======

        let mut result = 1;
        for i in 0..pieces.len() {
            match pieces[i].as_str() {
                "rook" => result *= 14 + 1,
                "queen" => result *= 21 + 1,
                "bishop" => result *= 12 + 1,
                _ => (),
            }
        }
        result - 1

=======

        let mut ans = 1;
        let mut r = 0;
        let mut c = 0;
        let mut d = 0;
        for i in 0..pieces.len() {
            let (x, y) = (positions[i][0] as i64, positions[i][1] as i64);
            match pieces[i].as_str() {
                "rook" => {
                    r += 1;
                    ans *= 15 - (x + y + 8 - x + 8 - y);
                },
                "bishop" => {
                    d += 1;
                    ans *= 15 - (x + y + x + 8 - y);
                },
                "queen" => {
                    c += 1;
                    ans *= 15 - (x + y + 8 - x + 8 - y + x + y + x + 8 - y);
                },
                _ => (),
            }
        }
        ans * 2i64.pow(r) * 2i64.pow(c) * 2i64.pow(d)
    }
}

=======

        0
    }
}

=======

        let mut ans = 1;
        for (i, p) in pieces.iter().enumerate() {
            let mut r = positions[i][0];
            let mut c = positions[i][1];
            let mut cnt = 0;
            if p == "rook" {
                cnt = 14;
                for j in 0..positions.len() {
                    if i == j {
                        continue;
                    }
                    let r1 = positions[j][0];
                    let c1 = positions[j][1];
                    if r == r1 || c == c1 {
                        cnt -= 1;
                    }
                }
            } else if p == "queen" {
                cnt = 21;
                for j in 0..positions.len() {
                    if i == j {
                        continue;
                    }
                    let r1 = positions[j][0];
                    let c1 = positions[j][1];
                    if r == r1 || c == c1 || (r1 - r).abs() == (c1 - c).abs() {
                        cnt -= 1;
                    }
                }
            } else {
                cnt = 11;
                for j in 0..positions.len() {
                    if i == j {
                        continue;
                    }
                    let r1 = positions[j][0];
                    let c1 = positions[j][1];
                    if (r1 - r).abs() == (c1 - c).abs() {
                        cnt -= 1;
                    }
                }
            }
            ans *= cnt;
        }
        ans

=======

        let n = pieces.len();
        let mut ans = 0;
        let mut v = vec![vec![0; 8]; 8];
        let mut dfs = |pieces: &Vec<String>, positions: &Vec<Vec<i32>>, i: usize| {
            if i == n {
                ans += 1;
                return;
            }
            for j in 0..8 {
                for k in 0..8 {
                    if v[j][k] != 0 {
                        continue;
                    }
                    if pieces[i] == "rook" {
                        if v[j].iter().any(|x| *x != 0) {
                            continue;
                        }
                        if v.iter().any(|x| x[k] != 0) {
                            continue;
                        }
                    } else if pieces[i] == "bishop" {
                        for l in 0..8 {
                            for m in 0..8 {
                                if (l - j).abs() == (m - k).abs() && v[l][m] != 0 {
                                    continue;
                                }
                            }
                        }
                    } else {
                        for l in 0..8 {
                            for m in 0..8 {
                                if (l - j).abs() == (m - k).abs() && v[l][m] != 0 {
                                    continue;
                                }
                                if v[l].iter().any(|x| *x != 0) {
                                    continue;
                                }
                                if v.iter().any(|x| x[m] != 0) {
                                    continue;
                                }
                            }
                        }
                    }
                    v[j][k] = i as i32 + 1;
                    dfs(pieces, positions, i + 1);
                    v[j][k] = 0;
                }
            }
        };
        dfs(&pieces, &positions, 0);
        ans
