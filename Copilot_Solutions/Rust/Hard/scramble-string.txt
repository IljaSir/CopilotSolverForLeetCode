Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let n = s1.len();
        let mut dp = vec![vec![vec![false; n + 1]; n]; n];
        for i in 0..n {
            for j in 0..n {
                dp[i][j][1] = s1[i] == s2[j];
            }
        }
        for len in 2..=n {
            for i in 0..=n - len {
                for j in 0..=n - len {
                    for k in 1..len {
                        if (dp[i][j][k] && dp[i + k][j + k][len - k])
                            || (dp[i][j + len - k][k] && dp[i + k][j][len - k])
                        {
                            dp[i][j][len] = true;
                            break;
                        }
                    }
                }
            }
        }
        dp[0][0][n]

=======

        let s1: Vec<char> = s1.chars().collect();
        let s2: Vec<char> = s2.chars().collect();
        let n = s1.len();
        let mut dp = vec![vec![vec![false; n + 1]; n]; n];
        for i in 0..n {
            for j in 0..n {
                dp[i][j][1] = s1[i] == s2[j];
            }
        }
        for l in 2..=n {
            for i in 0..=n - l {
                for j in 0..=n - l {
                    for k in 1..l {
                        if dp[i][j][k] && dp[i + k][j + k][l - k] || dp[i][j + l - k][k] && dp[i + k][j][l - k] {
                            dp[i][j][l] = true;
                            break;
                        }
                    }
                }
            }
        }
        dp[0][0][n]

=======

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let n = s1.len();
        let mut f = vec![vec![vec![false; n + 1]; n]; n];
        for i in 0..n {
            for j in 0..n {
                f[i][j][1] = s1[i] == s2[j];
            }
        }
        for l in 2..=n {
            for i in 0..=n - l {
                for j in 0..=n - l {
                    for k in 1..l {
                        if (f[i][j][k] && f[i + k][j + k][l - k]) || (f[i][j + l - k][k] && f[i + k][j][l - k]) {
                            f[i][j][l] = true;
                            break;
                        }
                    }
                }
            }
        }
        f[0][0][n]

=======

        let s1: Vec<char> = s1.chars().collect();
        let s2: Vec<char> = s2.chars().collect();
        let n = s1.len();
        let mut dp: Vec<Vec<Vec<bool>>> = vec![vec![vec![false; n + 1]; n]; n];
        for i in 0..n {
            for j in 0..n {
                dp[i][j][1] = s1[i] == s2[j];
            }
        }
        for l in 2..=n {
            for i in 0..=n - l {
                for j in 0..=n - l {
                    for k in 1..l {
                        if (dp[i][j][k] && dp[i + k][j + k][l - k]) || (dp[i][j + l - k][k] && dp[i + k][j][l - k]) {
                            dp[i][j][l] = true;
                            break;
                        }
                    }
                }
            }
        }
        dp[0][0][n]

=======

        
    }
}

=======

        if s1 == s2 {
            return true;
        }
        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut c1 = [0; 26];
        let mut c2 = [0; 26];
        for i in 0..s1.len() {
            c1[(s1[i] - b'a') as usize] += 1;
            c2[(s2[i] - b'a') as usize] += 1;
        }
        if c1 != c2 {
            return false;
        }
        let n = s1.len();
        for i in 1..n {
            if (Solution::is_scramble(String::from_utf8_lossy(&s1[..i]).to_string(), String::from_utf8_lossy(&s2[..i]).to_string())
                && Solution::is_scramble(String::from_utf8_lossy(&s1[i..]).to_string(), String::from_utf8_lossy(&s2[i..]).to_string()))
                || (Solution::is_scramble(String::from_utf8_lossy(&s1[..i]).to_string(), String::from_utf8_lossy(&s2[n - i..]).to_string())
                    && Solution::is_scramble(String::from_utf8_lossy(&s1[i..]).to_string(), String::from_utf8_lossy(&s2[..n - i]).to_string()))
            {
                return true;
            }
        }
        false

=======

        if s1 == s2 {
            return true;
        }
        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut s1_count = [0; 26];
        let mut s2_count = [0; 26];
        for i in 0..s1.len() {
            s1_count[s1[i] as usize - 'a' as usize] += 1;
            s2_count[s2[i] as usize - 'a' as usize] += 1;
        }
        for i in 0..26 {
            if s1_count[i] != s2_count[i] {
                return false;
            }
        }
        for i in 1..s1.len() {
            if Self::is_scramble(String::from_utf8(s1[..i].to_vec()).unwrap(), String::from_utf8(s2[..i].to_vec()).unwrap()) && Self::is_scramble(String::from_utf8(s1[i..].to_vec()).unwrap(), String::from_utf8(s2[i..].to_vec()).unwrap()) {
                return true;
            }
            if Self::is_scramble(String::from_utf8(s1[..i].to_vec()).unwrap(), String::from_utf8(s2[s1.len() - i..].to_vec()).unwrap()) && Self::is_scramble(String::from_utf8(s1[i..].to_vec()).unwrap(), String::from_utf8(s2[..s1.len() - i].to_vec()).unwrap()) {
                return true;
            }
        }
        false
