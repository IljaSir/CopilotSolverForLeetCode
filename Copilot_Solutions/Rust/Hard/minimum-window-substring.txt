Synthesizing 10/10 solutions (Duplicates hidden)

=======

        use std::collections::HashMap;
        let mut map: HashMap<char, usize> = HashMap::new();
        for c in t.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        let mut count = map.len();
        let mut left = 0;
        let mut right = 0;
        let mut ans = (0, std::usize::MAX);
        while right < s.len() {
            if let Some(v) = map.get_mut(&s.chars().nth(right).unwrap()) {
                *v -= 1;
                if *v == 0 {
                    count -= 1;
                }
            }
            right += 1;
            while count == 0 {
                if right - left < ans.1 - ans.0 {
                    ans = (left, right);
                }
                if let Some(v) = map.get_mut(&s.chars().nth(left).unwrap()) {
                    *v += 1;
                    if *v > 0 {
                        count += 1;
                    }
                }
                left += 1;
            }
        }
        if ans.1 > s.len() {
            return "".to_string();
        }
        return s[ans.0..ans.1].to_string();
    }
}

=======

        let mut t_map = std::collections::HashMap::new();
        for c in t.chars() {
            *t_map.entry(c).or_insert(0) += 1;
        }
        let mut s_map = std::collections::HashMap::new();
        let mut count = 0;
        let mut left = 0;
        let mut right = 0;
        let mut min_len = std::usize::MAX;
        let mut min_left = 0;
        let mut min_right = 0;
        for c in s.chars() {
            *s_map.entry(c).or_insert(0) += 1;
            if t_map.contains_key(&c) {
                if s_map[&c] <= t_map[&c] {
                    count += 1;
                }
            }
            while count == t.len() {
                if right - left + 1 < min_len {
                    min_len = right - left + 1;
                    min_left = left;
                    min_right = right;
                }
                if t_map.contains_key(&s.chars().nth(left).unwrap()) {
                    s_map.entry(s.chars().nth(left).unwrap()).and_modify(|e| *e -= 1);
                    if s_map[&s.chars().nth(left).unwrap()] < t_map[&s.chars().nth(left).unwrap()] {
                        count -= 1;
                    }
                }
                left += 1;
            }
            right += 1;
        }
        if min_len == std::usize::MAX {
            "".to_string()
        } else {
            s[min_left..=min_right].to_string()
        }
    }
}

=======

        let mut map = vec![0; 128];
        for c in t.chars() {
            map[c as usize] += 1;
        }
        let mut left = 0;
        let mut right = 0;
        let mut count = t.len();
        let mut res = String::new();
        while right < s.len() {
            let c = s.chars().nth(right).unwrap();
            if map[c as usize] > 0 {
                count -= 1;
            }
            map[c as usize] -= 1;
            if count == 0 {
                while left < right {
                    let c = s.chars().nth(left).unwrap();
                    if map[c as usize] == 0 {
                        break;
                    }
                    map[c as usize] += 1;
                    left += 1;
                }
                if res.is_empty() || right - left + 1 < res.len() {
                    res = s[left..=right].to_string();
                }
                map[s.chars().nth(left).unwrap() as usize] += 1;
                count += 1;
                left += 1;
            }
            right += 1;
        }
        res
    }
}

=======

        
    }
}

=======

        let mut res = String::new();
        let mut need = std::collections::HashMap::new();
        let mut window = std::collections::HashMap::new();
        for c in t.chars() {
            *need.entry(c).or_insert(0) += 1;
        }
        let mut left = 0;
        let mut right = 0;
        let mut valid = 0;
        let mut start = 0;
        let mut len = usize::MAX;
        while right < s.len() {
            let c = s.chars().nth(right).unwrap();
            right += 1;
            if need.contains_key(&c) {
                *window.entry(c).or_insert(0) += 1;
                if *need.get(&c).unwrap() == *window.get(&c).unwrap() {
                    valid += 1;
                }
            }
            while valid == need.len() {
                if right - left < len {
                    start = left;
                    len = right - left;
                }
                let d = s.chars().nth(left).unwrap();
                left += 1;
                if need.contains_key(&d) {
                    if *need.get(&d).unwrap() == *window.get(&d).unwrap() {
                        valid -= 1;
                    }
                    *window.get_mut(&d).unwrap() -= 1;
                }
            }
        }
        if len == usize::MAX {
            return res;
        }
        res = s.chars().skip(start).take(len).collect();
        res

=======

        let mut t = t.chars().collect::<Vec<char>>();
        t.sort();
        let mut s = s.chars().collect::<Vec<char>>();
        s.sort();
        let mut i = 0;
        let mut j = 0;
        let mut ans = "".to_string();
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                j += 1;
            }
            i += 1;
        }
        if j == t.len() {
            ans = s[..i].iter().collect();
        }
        ans
    }
}

=======

        let mut map: Vec<i32> = vec![0; 128];
        let mut count = t.len();
        for c in t.chars() {
            map[c as usize] += 1;
        }
        let (mut l, mut r) = (0, 0);
        let (mut ans_l, mut ans_r) = (0, std::usize::MAX);
        while r < s.len() {
            map[s.as_bytes()[r] as usize] -= 1;
            if map[s.as_bytes()[r] as usize] >= 0 {
                count -= 1;
            }
            while count == 0 {
                if r - l < ans_r - ans_l {
                    ans_l = l;
                    ans_r = r;
                }
                map[s.as_bytes()[l] as usize] += 1;
                if map[s.as_bytes()[l] as usize] > 0 {
                    count += 1;
                }
                l += 1;
            }
            r += 1;
        }
        if ans_r == std::usize::MAX {
            return "".to_string();
        }
        return s[ans_l..=ans_r].to_string();
    }
}

=======

        let (mut left, mut right, mut min_left, mut min_len) = (0, 0, 0, s.len() + 1);
        let (mut count, mut t_map) = (t.len(), vec![0; 128]);
        for c in t.chars() {
            t_map[c as usize] += 1;
        }
        for c in s.chars() {
            if t_map[c as usize] > 0 {
                count -= 1;
            }
            t_map[c as usize] -= 1;
            while count == 0 {
                if right - left + 1 < min_len {
                    min_len = right - left + 1;
                    min_left = left;
                }
                let c = s.chars().nth(left).unwrap();
                t_map[c as usize] += 1;
                if t_map[c as usize] > 0 {
                    count += 1;
                }
                left += 1;
            }
            right += 1;
        }
        if min_len == s.len() + 1 {
            return String::new();
        }
        s[min_left..min_left + min_len].to_string()

=======

        let (mut l, mut r) = (0, 0);
        let (mut chars, mut ans) = (vec![0; 256], String::new());
        let (mut count, mut min) = (t.len(), usize::MAX);
        for c in t.chars() {
            chars[c as usize] += 1;
        }
        for c in s.chars() {
            r += 1;
            if chars[c as usize] > 0 {
                count -= 1;
            }
            chars[c as usize] -= 1;
            while count == 0 {
                if r - l < min {
                    min = r - l;
                    ans = s[l..r].to_string();
                }
                chars[s.chars().nth(l).unwrap() as usize] += 1;
                if chars[s.chars().nth(l).unwrap() as usize] > 0 {
                    count += 1;
                }
                l += 1;
            }
        }
        ans
