Synthesizing 6/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut result = vec![];
        let mut min = usize::MAX;
        let mut visited = std::collections::HashSet::new();
        let mut queue = std::collections::VecDeque::new();
        queue.push_back(s);
        visited.insert(s);
        while !queue.is_empty() {
            let s = queue.pop_front().unwrap();
            if Solution::is_valid(&s) {
                result.push(s);
                min = min.min(result.last().unwrap().len());
            }
            if result.last().unwrap().len() == min {
                continue;
            }
            for i in 0..s.len() {
                if !s.chars().nth(i).unwrap().is_ascii_punctuation() {
                    continue;
                }
                let mut new_s = s.clone();
                new_s.remove(i);
                if !visited.contains(&new_s) {
                    queue.push_back(new_s);
                    visited.insert(new_s);
                }
            }
        }
        result
    }
    fn is_valid(s: &str) -> bool {
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                count += 1;
            } else if c == ')' {
                count -= 1;
                if count < 0 {
                    return false;
                }
            }
        }
        count == 0

=======

        let mut ans: Vec<String> = Vec::new();
        let mut min = s.len();
        let mut visited: HashSet<String> = HashSet::new();
        let mut q: VecDeque<String> = VecDeque::new();
        q.push_back(s);
        while !q.is_empty() {
            let s = q.pop_front().unwrap();
            if visited.contains(&s) {
                continue;
            }
            visited.insert(s.clone());
            if min < s.len() {
                continue;
            }
            if Solution::is_valid(&s) {
                if min > s.len() {
                    min = s.len();
                    ans.clear();
                }
                ans.push(s);
            } else {
                for i in 0..s.len() {
                    if s.as_bytes()[i] == b'(' || s.as_bytes()[i] == b')' {
                        let mut t = s.clone();
                        t.remove(i);
                        q.push_back(t);
                    }
                }
            }
        }
        ans
    }
    fn is_valid(s: &String) -> bool {
        let mut cnt = 0;
        for i in 0..s.len() {
            if s.as_bytes()[i] == b'(' {
                cnt += 1;
            } else if s.as_bytes()[i] == b')' {
                cnt -= 1;
            }
            if cnt < 0 {
                return false;
            }
        }
        cnt == 0
