Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let (s, t) = (s.as_bytes(), t.as_bytes());
        let (n, m) = (s.len(), t.len());
        let mut dp = vec![vec![0; m + 1]; n + 1];
        for i in 0..=n {
            dp[i][m] = 1;
        }
        for i in (0..n).rev() {
            for j in (0..m).rev() {
                if s[i] == t[j] {
                    dp[i][j] = dp[i + 1][j + 1] + dp[i + 1][j];
                } else {
                    dp[i][j] = dp[i + 1][j];
                }
            }
        }
        dp[0][0]
    }
}

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let (m, n) = (s.len(), t.len());
        let mut dp = vec![vec![0; n + 1]; m + 1];
        for i in 0..=m {
            dp[i][0] = 1;
        }
        for i in 1..=m {
            for j in 1..=n {
                dp[i][j] = dp[i - 1][j];
                if s[i - 1] == t[j - 1] {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        dp[m][n]

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let n = s.len();
        let m = t.len();
        let mut f = vec![vec![0; m + 1]; n + 1];
        for i in 0..=n {
            f[i][0] = 1;
        }
        for i in 1..=n {
            for j in 1..=m {
                f[i][j] = f[i - 1][j];
                if s[i - 1] == t[j - 1] {
                    f[i][j] += f[i - 1][j - 1];
                }
            }
        }
        f[n][m]

=======

        let (s, t) = (s.as_bytes(), t.as_bytes());
        let mut dp = vec![vec![0; t.len() + 1]; s.len() + 1];
        for i in 0..=s.len() {
            dp[i][0] = 1;
        }
        for i in 1..=s.len() {
            for j in 1..=t.len() {
                if s[i - 1] == t[j - 1] {
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        dp[s.len()][t.len()]

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let (n, m) = (s.len(), t.len());
        let mut dp = vec![vec![0; m + 1]; n + 1];
        for i in 0..=n {
            dp[i][0] = 1;
        }
        for i in 1..=n {
            for j in 1..=m {
                dp[i][j] = dp[i - 1][j];
                if s[i - 1] == t[j - 1] {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
        }
        dp[n][m]

=======

        let s = s.into_bytes();
        let t = t.into_bytes();
        let n = s.len();
        let m = t.len();
        let mut dp = vec![vec![0; n + 1]; m + 1];
        for i in 0..=n {
            dp[0][i] = 1;
        }
        for i in 1..=m {
            for j in 1..=n {
                if s[j - 1] == t[i - 1] {
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i][j - 1];
                }
            }
        }
        dp[m][n]

=======

        
    }
}
