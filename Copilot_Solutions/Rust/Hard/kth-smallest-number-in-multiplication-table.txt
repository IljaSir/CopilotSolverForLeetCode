Synthesizing 10/10 solutions

=======

        let (m, n, k) = (m as usize, n as usize, k as usize);
        let (mut l, mut r) = (1, m * n);
        while l < r {
            let mid = (l + r) >> 1;
            if Self::count(m, n, mid) < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l as i32
    }
    
    fn count(m: usize, n: usize, x: usize) -> usize {
        let mut count = 0;
        for i in 1..=m {
            count += std::cmp::min(x / i, n);
        }
        count

=======

        let (m, n, k) = (m as usize, n as usize, k as usize);
        let mut l = 1;
        let mut r = m * n;
        while l < r {
            let mid = (l + r) / 2;
            let mut cnt = 0;
            for i in 1..=m {
                cnt += (mid / i).min(n);
            }
            if cnt < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l as i32

=======

        let (m, n, k) = (m as usize, n as usize, k as usize);
        let mut l = 1;
        let mut r = m * n;
        while l < r {
            let mid = (l + r) / 2;
            let mut cnt = 0;
            for i in 1..=m {
                cnt += std::cmp::min(mid / i, n);
            }
            if cnt < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l as i32

=======

        let (m, n) = (m as usize, n as usize);
        let (mut l, mut r) = (1, m * n);
        while l < r {
            let mid = (l + r) >> 1;
            let cnt = (1..=n).map(|i| (mid / i).min(m)).sum::<usize>();
            if cnt < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l as i32

=======

        let mut l = 1;
        let mut r = m * n;
        while l < r {
            let mid = (l + r) / 2;
            let mut cnt = 0;
            for i in 1..=m {
                cnt += (mid / i).min(n);
            }
            if cnt < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l

=======

        let (mut l, mut r) = (1, m * n);
        while l < r {
            let mid = (l + r) / 2;
            let mut cnt = 0;
            for i in 1..=m {
                cnt += (mid / i).min(n);
            }
            if cnt < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = m * n;
        while l < r {
            let mid = (l + r) / 2;
            if Solution::count(m, n, mid) < k {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l
    }
    fn count(m: i32, n: i32, mid: i32) -> i32 {
        let mut res = 0;
        for i in 1..=m {
            res += std::cmp::min(n, mid / i);
        }
        res

=======

        let mut lo = 1;
        let mut hi = m * n;
        while lo < hi {
            let mi = lo + (hi - lo) / 2;
            let count = (1..=m).map(|i| (mi / i).min(n)).sum::<i32>();
            if count < k {
                lo = mi + 1;
            } else {
                hi = mi;
            }
        }
        lo
    }
}

=======

        let mut lo = 1;
        let mut hi = m*n;
        while lo < hi {
            let mid = lo + (hi-lo)/2;
            if Solution::count(m, n, mid) < k {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        lo
    }
    fn count(m: i32, n: i32, mid: i32) -> i32 {
        let mut sum = 0;
        for i in 1..=m {
            sum += std::cmp::min(mid/i, n);
        }
        sum

=======

        
    }
}
