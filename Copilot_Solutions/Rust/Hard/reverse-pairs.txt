Synthesizing 10/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[i] > 2 * nums[j] {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[i] > 2*nums[j] {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut nums = nums;
        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() {
                if nums[i] > 2 * nums[j] {
                    count += 1;
                }
                j += 1;
            }
            i += 1;
        }
        count
    }
}

=======

        let mut nums = nums.clone();
        let mut cnt = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() {
                if nums[i] > 2 * nums[j] {
                    cnt += 1;
                }
                j += 1;
            }
            i += 1;
        }
        cnt
    }
}

=======

        let mut res = 0;
        let mut nums = nums;
        nums.reverse();
        let mut tree = vec![0; 5 * 10_000 + 1];
        for num in nums {
            res += Self::query(&tree, (num * 2 + 1) as usize);
            Self::update(&mut tree, num as usize);
        }
        res
    }
    fn query(tree: &[i32], idx: usize) -> i32 {
        let mut idx = idx;
        let mut res = 0;
        while idx > 0 {
            res += tree[idx];
            idx -= idx & idx.wrapping_neg();
        }
        res
    }
    fn update(tree: &mut [i32], idx: usize) {
        let mut idx = idx;
        while idx < tree.len() {
            tree[idx] += 1;
            idx += idx & idx.wrapping_neg();
        }
