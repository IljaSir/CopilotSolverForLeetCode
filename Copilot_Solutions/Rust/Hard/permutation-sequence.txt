Synthesizing 10/10 solutions

=======

        let mut n = n;
        let mut k = k;
        let mut result = String::new();
        let mut nums = Vec::new();
        for i in 1..=n {
            nums.push(i);
        }
        let mut factorial = 1;
        for i in 1..n {
            factorial *= i;
        }
        k -= 1;
        while n > 0 {
            let index = k / factorial;
            result += nums[index as usize].to_string().as_str();
            nums.remove(index as usize);
            k %= factorial;
            if n > 1 {
                factorial /= n - 1;
            }
            n -= 1;
        }
        result

=======

        let mut nums: Vec<i32> = (1..=n).collect();
        let mut k = k;
        let mut res = String::new();
        for i in (1..n).rev() {
            let mut j = (k - 1) / Solution::factorial(i) as i32;
            k -= j * Solution::factorial(i) as i32;
            j = j as usize;
            res.push_str(&nums[j].to_string());
            nums.remove(j);
        }
        res.push_str(&nums[0].to_string());
        res
    }
    fn factorial(n: i32) -> i32 {
        if n == 0 {
            return 1;
        }
        let mut res = 1;
        for i in 1..=n {
            res *= i;
        }
        res

=======

        let mut nums = vec![];
        let mut factorial = vec![1; n as usize];
        for i in 1..n as usize {
            factorial[i] = factorial[i - 1] * i;
            nums.push((i + 1) as i32);
        }
        nums.push(1);
        let mut k = k - 1;
        let mut ans = String::new();
        for i in (0..n as usize).rev() {
            let idx = (k / factorial[i]) as usize;
            k %= factorial[i];
            ans.push(std::char::from_digit(nums[idx] as u32, 10).unwrap());
            nums.remove(idx);
        }
        ans

=======

        let mut nums: Vec<i32> = Vec::new();
        let mut k = k;
        let mut fact = 1;
        for i in 1..n {
            fact *= i;
            nums.push(i);
        }
        nums.push(n);
        let mut res = String::new();
        k -= 1;
        for i in (1..n).rev() {
            let idx = k / fact;
            res.push((nums[idx as usize] + 48) as u8 as char);
            nums.remove(idx as usize);
            k -= idx * fact;
            fact /= i;
        }
        res.push((nums[0] + 48) as u8 as char);
        res

=======

        let mut n = n;
        let mut k = k;
        let mut fac = vec![1; n as usize];
        let mut nums = vec![];
        for i in 1..n {
            fac[i as usize] = fac[(i - 1) as usize] * i;
            nums.push(i);
        }
        nums.push(n);
        let mut ans = String::new();
        k -= 1;
        for i in (0..n).rev() {
            let j = (k / fac[i as usize]) as usize;
            k %= fac[i as usize];
            ans.push((nums[j] + '0' as i32) as u8 as char);
            nums.remove(j);
        }
        ans

=======

        let mut k = k;
        let mut n = n;
        let mut v = Vec::new();
        let mut f = 1;
        for i in 1..=n {
            f *= i;
            v.push(i);
        }
        let mut res = String::new();
        for i in 0..n {
            f /= n - i;
            let mut j = (k - 1) / f;
            k -= j * f;
            res.push((v[j as usize] + 48) as u8 as char);
            v.remove(j as usize);
        }
        res

=======

        let mut k = k;
        let mut n = n;
        let mut nums = vec![1];
        for i in 1..=n {
            nums.push(nums[i as usize - 1] * i);
        }
        let mut res = vec![];
        let mut nums = (1..=n).collect::<Vec<i32>>();
        while n > 0 {
            let i = (k - 1) / nums[n as usize - 1];
            res.push(nums[i as usize]);
            nums.remove(i as usize);
            k -= i * nums[n as usize - 1];
            n -= 1;
        }
        res.iter().map(|x| x.to_string()).collect::<String>()

=======

        let mut n = n;
        let mut k = k;
        let mut ans = String::new();
        let mut nums = (1..=n).collect::<Vec<i32>>();
        let mut fac = (1..=n).fold(1, |a, b| a * b);
        for i in 0..n {
            fac /= n - i;
            let mut j = (k - 1) / fac;
            k -= j * fac;
            ans.push((nums[j as usize] + '0' as i32) as u8 as char);
            nums.remove(j as usize);
        }
        ans

=======

        let mut n = n;
        let mut k = k;
        let mut r = String::new();
        let mut v = Vec::new();
        let mut f = 1;
        for i in 1..=n {
            v.push(i);
            f *= i;
        }
        for i in (1..=n).rev() {
            f /= i;
            let j = (k - 1) / f;
            r.push((v[j as usize] + '0' as i32) as u8 as char);
            v.remove(j as usize);
            k -= j * f;
        }
        r
    }
}

=======

        let mut nums = Vec::new();
        let mut fact = Vec::new();
        let mut k = k;
        let n = n as usize;
        fact.push(1);
        for i in 1..n {
            fact.push(fact[i - 1] * i as i32);
        }
        for i in 1..=n as i32 {
            nums.push(i);
        }
        let mut res = String::new();
        for i in (1..n).rev() {
            let idx = ((k - 1) / fact[i - 1]) as usize;
            res.push((b'0' + nums[idx] as u8) as char);
            nums.remove(idx);
            k -= idx as i32 * fact[i - 1];
        }
        res.push((b'0' + nums[0] as u8) as char);
        res
