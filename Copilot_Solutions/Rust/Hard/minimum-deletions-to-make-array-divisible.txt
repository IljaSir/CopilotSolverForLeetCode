Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut nums_divide = nums_divide;
        nums_divide.sort();
        let mut i = 0;
        let mut j = 0;
        let mut res = 0;
        while i < nums.len() && j < nums_divide.len() {
            if nums_divide[j] % nums[i] == 0 {
                j += 1;
            } else {
                res += 1;
                i += 1;
            }
        }
        if j < nums_divide.len() {
            return -1;
        }
        res as i32
    }
}

=======

        let mut nums = nums;
        let mut nums_divide = nums_divide;
        nums.sort();
        let mut res = -1;
        for i in 0..nums_divide.len() {
            if nums_divide[i] % nums[0] != 0 {
                return -1;
            }
            nums_divide[i] /= nums[0];
            if res == -1 || res > nums_divide[i] {
                res = nums_divide[i];
            }
        }
        res
    }
}

=======

        let mut nums = nums;
        let mut nums_divide = nums_divide;
        nums.sort();
        nums_divide.sort();
        let mut ans = -1;
        for i in nums_divide[0]..=nums_divide[nums_divide.len()-1] {
            let mut cnt = 0;
            for j in 0..nums.len() {
                if nums[j] % i != 0 {
                    cnt += 1;
                }
            }
            if ans == -1 || cnt < ans {
                ans = cnt;
            }
        }
        ans

=======

        let mut nums = nums;
        let mut nums_divide = nums_divide;
        let mut min = i32::MAX;
        for &num in nums.iter() {
            if num < min {
                min = num;
            }
        }
        let mut ans = 0;
        for &num in nums_divide.iter() {
            if num % min != 0 {
                return -1;
            }
            ans += num / min - 1;
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut min = nums[0];
        for i in 1..nums.len() {
            min = gcd(min, nums[i]);
        }
        let mut ans = 0;
        for i in 0..nums_divide.len() {
            if nums_divide[i] % min != 0 {
                ans = -1;
                break;
            } else {
                ans += nums_divide[i] / min - 1;
            }
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut cur = nums[0];
        for num in nums_divide {
            if num % cur != 0 {
                res += 1;
                cur = num;
            }
        }
        res
    }
}
