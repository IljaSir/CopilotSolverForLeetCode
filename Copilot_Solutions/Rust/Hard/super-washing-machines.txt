Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let sum = machines.iter().sum::<i32>();
        if sum % machines.len() as i32 != 0 {
            return -1;
        }
        let avg = sum / machines.len() as i32;
        let mut count = 0;
        let mut res = 0;
        for i in 0..machines.len() {
            count += machines[i] - avg;
            let tmp = (count as i64).abs() as i32;
            res = res.max(tmp);
            if count < 0 {
                res = res.max(machines[i] - avg);
            }
        }
        res

=======

        let sum = machines.iter().sum::<i32>();
        if sum % machines.len() as i32 != 0 {
            return -1;
        }
        let avg = sum / machines.len() as i32;
        let mut max = 0;
        let mut sum = 0;
        for i in 0..machines.len() {
            sum += machines[i] - avg;
            max = max.max(sum.abs()).max(machines[i] - avg);
        }
        max
    }
}

=======

        let sum = machines.iter().sum::<i32>();
        if sum % machines.len() as i32 != 0 {
            return -1;
        }
        let avg = sum / machines.len() as i32;
        let mut ans = 0;
        let mut cur = 0;
        for i in 0..machines.len() {
            let diff = machines[i] - avg;
            cur += diff;
            ans = ans.max(diff.abs()).max(cur.abs());
        }
        ans
    }
}

=======

        let sum = machines.iter().sum::<i32>();
        if sum % machines.len() as i32 != 0 {
            return -1;
        }
        let avg = sum / machines.len() as i32;
        let mut left = 0;
        let mut right = sum - machines[0];
        let mut max = 0;
        for i in 0..machines.len() {
            let cur = machines[i];
            let mut need = 0;
            if cur > avg {
                need = cur - avg;
            } else {
                need = avg - cur;
            }
            if i > 0 {
                left += machines[i - 1];
                right -= machines[i];
            }
            if left > right {
                need += left - right;
            } else {
                need += right - left;
            }
            if need > max {
                max = need;
            }
        }
        max

=======

        let total = machines.iter().sum::<i32>();
        if total % machines.len() as i32 != 0 {
            return -1;
        }
        let avg = total / machines.len() as i32;
        let mut ans = 0;
        let mut sum = 0;
        for num in machines {
            let diff = num - avg;
            sum += diff;
            ans = ans.max(sum.abs()).max(diff);
        }
        ans
    }
}

=======

        
    }
}
