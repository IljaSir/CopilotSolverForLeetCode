Synthesizing 10/10 solutions

=======

        let mut max = 0;
        let mut res = 0;
        for i in 0..arr.len() {
            max = max.max(arr[i]);
            if max == i as i32 {
                res += 1;
            }
        }
        res

=======

        let mut max = 0;
        let mut count = 0;
        for i in 0..arr.len() {
            if arr[i] > max {
                max = arr[i];
            }
            if max == i as i32 {
                count += 1;
            }
        }
        count

=======

        let mut max = 0;
        let mut ans = 0;
        for (i, &x) in arr.iter().enumerate() {
            max = max.max(x);
            if max == i as i32 {
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut max = 0;
        let mut res = 0;
        for (i, &x) in arr.iter().enumerate() {
            max = max.max(x);
            if max == i as i32 {
                res += 1;
            }
        }
        res

=======

        let mut max = 0;
        let mut res = 0;
        for (i, &v) in arr.iter().enumerate() {
            max = max.max(v);
            if max == i as i32 {
                res += 1;
            }
        }
        res
    }
}

=======

        let mut max = 0;
        let mut res = 0;
        for (i, &a) in arr.iter().enumerate() {
            max = max.max(a);
            if max == i as i32 {
                res += 1;
            }
        }
        res

=======

        let mut count = 0;
        let mut max = 0;
        for (i, n) in arr.iter().enumerate() {
            max = std::cmp::max(max, *n);
            if max == i as i32 {
                count += 1;
            }
        }
        count

=======

        let mut max = 0;
        let mut res = 0;
        for (i, &a) in arr.iter().enumerate() {
            max = max.max(a);
            if i == max as usize {
                res += 1;
            }
        }
        res

=======

        let mut max = -1;
        let mut chunks = 0;
        for (i, &x) in arr.iter().enumerate() {
            max = max.max(x);
            if max == i as i32 {
                chunks += 1;
            }
        }
        chunks

=======

        let mut maxs = vec![0; arr.len()];
        let mut mins = vec![0; arr.len()];
        let mut max = 0;
        let mut min = 0;
        for i in 0..arr.len() {
            max = std::cmp::max(max, arr[i]);
            maxs[i] = max;
        }
        for i in (0..arr.len()).rev() {
            min = std::cmp::min(min, arr[i]);
            mins[i] = min;
        }
        let mut ret = 0;
        for i in 0..arr.len() {
            if maxs[i] <= mins[i+1] {
                ret += 1;
            }
        }
        ret
    }
}
