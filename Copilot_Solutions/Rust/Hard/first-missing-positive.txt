Synthesizing 9/10 solutions

=======

        let mut nums = nums;
        let n = nums.len();
        for i in 0..n {
            while nums[i] > 0 && nums[i] <= n as i32 && nums[nums[i] as usize - 1] != nums[i] {
                nums.swap(i, nums[i] as usize - 1);
            }
        }
        for i in 0..n {
            if nums[i] != (i + 1) as i32 {
                return (i + 1) as i32;
            }
        }
        (n + 1) as i32

=======

        let mut nums = nums;
        let n = nums.len();
        for i in 0..n {
            while nums[i] > 0 && nums[i] <= n as i32 && nums[nums[i] as usize - 1] != nums[i] {
                let j = nums[i] as usize - 1;
                nums.swap(i, j);
            }
        }

        for i in 0..n {
            if nums[i] != (i + 1) as i32 {
                return (i + 1) as i32;
            }
        }
        (n + 1) as i32

=======

        let mut nums = nums;
        let len = nums.len() as i32;
        for i in 0..nums.len() {
            while nums[i] > 0 && nums[i] <= len && nums[nums[i] as usize - 1] != nums[i] {
                nums.swap(i, nums[i] as usize - 1);
            }
        }
        for i in 0..nums.len() {
            if nums[i] != i as i32 + 1 {
                return i as i32 + 1;
            }
        }
        len + 1
    }
}

=======

        if nums.len() == 0 {
            return 1;
        }
        let mut nums = nums;
        for i in 0..nums.len() {
            if nums[i] <= 0 {
                nums[i] = nums.len() as i32 + 1;
            }
        }
        for i in 0..nums.len() {
            let mut index = nums[i].abs() as usize;
            if index > nums.len() {
                continue;
            }
            index -= 1;
            nums[index] = -nums[index].abs();
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                return (i + 1) as i32;
            }
        }
        (nums.len() + 1) as i32

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == (i + 1) as i32 || nums[i] <= 0 || nums[i] > nums.len() as i32 {
                i += 1;
            } else if nums[(nums[i] - 1) as usize] != nums[i] {
                nums.swap(i, (nums[i] - 1) as usize);
            } else {
                i += 1;
            }
        }
        let mut i = 0;
        while i < nums.len() && nums[i] == (i + 1) as i32 {
            i += 1;
        }
        (i + 1) as i32
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 1;
        for n in nums {
            if n == i {
                i += 1;
            }
        }
        i
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut n = 1;
        for i in 0..nums.len() {
            if nums[i] > 0 && nums[i] == n {
                n += 1;
            }
        }
        n

=======

        let mut i = 0;
        let mut nums = nums;
        let n = nums.len();
        while i < n {
            let mut j = nums[i] as usize;
            if j > 0 && j <= n && nums[i] != nums[j - 1] {
                nums.swap(i, j - 1);
            } else {
                i += 1;
            }
        }
        for i in 0..n {
            if i as i32 + 1 != nums[i] {
                return i as i32 + 1;
            }
        }
        n as i32 + 1
    }
}

=======

        
    }
}
