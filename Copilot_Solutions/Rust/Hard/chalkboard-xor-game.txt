Synthesizing 10/10 solutions

=======

        if nums.len() % 2 == 0 {
            return true;
        }
        let mut xor = 0;
        for n in nums {
            xor ^= n;
        }
        xor == 0

=======

        nums.len() % 2 == 0 || nums.iter().fold(0, |a, b| a ^ b) == 0

=======

        nums.len() % 2 == 0 || nums.iter().fold(0, |a, b| a ^ b) == 0
    }
}

=======

        if nums.len() % 2 == 0 {
            return true;
        }
        let mut xor = 0;
        for i in 0..nums.len() {
            xor ^= nums[i];
        }
        xor == 0
    }
}

=======

        nums.len() % 2 == 0 || nums.iter().fold(0, |acc, &x| acc ^ x) == 0
    }
}

=======

        let mut xor = 0;
        for i in 0..nums.len() {
            xor ^= nums[i];
        }
        xor == 0 || nums.len() % 2 == 0

=======

        let mut xor = 0;
        for num in nums {
            xor ^= num;
        }
        xor == 0 || nums.len() % 2 == 0

=======

        let xor = nums.iter().fold(0, |acc, x| acc ^ x);
        xor == 0 || nums.len() % 2 == 0
    }
}

=======

        let mut sum = 0;
        for n in nums.iter() {
            sum ^= n;
        }
        sum == 0 || nums.len() % 2 == 0
    }
}

=======

        let mut xor = 0;
        for n in &nums {
            xor ^= n;
        }
        xor == 0 || nums.len() % 2 == 0
