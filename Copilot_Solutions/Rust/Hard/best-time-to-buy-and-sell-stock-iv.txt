Synthesizing 10/10 solutions

=======

        let n = prices.len();
        if n < 2 {
            return 0;
        }
        let k = k as usize;
        let mut dp = vec![vec![vec![0; 2]; k + 1]; n];
        for j in 0..=k {
            dp[0][j][0] = 0;
            dp[0][j][1] = -prices[0];
        }
        for i in 1..n {
            for j in 0..=k {
                if j == 0 {
                    dp[i][j][0] = dp[i - 1][j][0];
                    dp[i][j][1] = std::cmp::max(dp[i - 1][j][1], dp[i - 1][j][0] - prices[i]);
                } else {
                    dp[i][j][0] = std::cmp::max(dp[i - 1][j][0], dp[i - 1][j - 1][1] + prices[i]);
                    dp[i][j][1] = std::cmp::max(dp[i - 1][j][1], dp[i - 1][j][0] - prices[i]);
                }
            }
        }
        dp[n - 1][k][0]

=======

        let k = k as usize;
        let n = prices.len();
        if n == 0 {
            return 0;
        }
        let mut dp = vec![vec![0; n]; k + 1];
        for i in 1..=k {
            let mut min_cost = prices[0];
            for j in 1..n {
                min_cost = min_cost.min(prices[j] - dp[i - 1][j - 1]);
                dp[i][j] = dp[i][j - 1].max(prices[j] - min_cost);
            }
        }
        dp[k][n - 1]

=======

        let n = prices.len();
        if n < 2 {
            return 0;
        }
        let k = k as usize;
        let mut dp = vec![vec![0; n]; 2];
        for i in 1..=k {
            let mut max_diff = -prices[0];
            for j in 1..n {
                dp[i % 2][j] = std::cmp::max(dp[i % 2][j - 1], prices[j] + max_diff);
                max_diff = std::cmp::max(max_diff, dp[(i - 1) % 2][j - 1] - prices[j]);
            }
        }
        dp[k % 2][n - 1]
    }
}

=======

        let mut dp = vec![vec![0; prices.len()]; k as usize + 1];
        for i in 1..=k as usize {
            let mut tmp_max = dp[i-1][0] - prices[0];
            for j in 1..prices.len() {
                dp[i][j] = std::cmp::max(dp[i][j-1], prices[j] + tmp_max);
                tmp_max = std::cmp::max(tmp_max, dp[i-1][j] - prices[j]);
            }
        }
        dp[k as usize][prices.len() - 1]
    }
}

=======

        let n = prices.len();
        if n <= 1 {
            return 0;
        }
        let mut dp = vec![vec![vec![0; 2]; n]; k as usize + 1];
        for i in 0..n {
            dp[0][i][0] = 0;
            dp[0][i][1] = std::i32::MIN;
        }
        for i in 0..k as usize + 1 {
            dp[i][0][0] = 0;
            dp[i][0][1] = -prices[0];
        }
        for i in 1..k as usize + 1 {
            for j in 1..n {
                dp[i][j][0] = std::cmp::max(dp[i][j - 1][0], dp[i][j - 1][1] + prices[j]);
                dp[i][j][1] = std::cmp::max(dp[i][j - 1][1], dp[i - 1][j - 1][0] - prices[j]);
            }
        }
        dp[k as usize][n - 1][0]
    }
}

=======

        let mut dp = vec![vec![0; prices.len()]; k as usize + 1];
        for t in 1..=k as usize {
            let mut tmp_max = dp[t-1][0] - prices[0];
            for d in 1..prices.len() {
                dp[t][d] = std::cmp::max(dp[t][d-1], tmp_max + prices[d]);
                tmp_max = std::cmp::max(tmp_max, dp[t-1][d] - prices[d]);
            }
        }
        dp[k as usize][prices.len() - 1]
    }
}

=======

        let k = k as usize;
        let n = prices.len();
        if k >= n / 2 {
            return Self::max_profit_k_inf(prices);
        }
        let mut dp = vec![vec![0; n]; k + 1];
        for i in 1..=k {
            let mut tmp_max = -prices[0];
            for j in 1..n {
                dp[i][j] = dp[i][j - 1].max(prices[j] + tmp_max);
                tmp_max = tmp_max.max(dp[i - 1][j - 1] - prices[j]);
            }
        }
        dp[k][n - 1]
    }

    fn max_profit_k_inf(prices: Vec<i32>) -> i32 {
        let mut res = 0;
        for i in 1..prices.len() {
            res += prices[i].max(0) - prices[i - 1].max(0);
        }
        res

=======

        let n = prices.len();
        if n < 2 {
            return 0;
        }
        if k >= n as i32 {
            return Self::max_profit_unlimited(prices);
        }
        let mut dp = vec![vec![0; n]; k as usize + 1];
        for i in 1..=k as usize {
            let mut max = -prices[0];
            for j in 1..n {
                dp[i][j] = dp[i][j - 1].max(prices[j] + max);
                max = max.max(dp[i - 1][j - 1] - prices[j]);
            }
        }
        dp[k as usize][n - 1]
    }
    fn max_profit_unlimited(prices: Vec<i32>) -> i32 {
        let mut profit = 0;
        for i in 1..prices.len() {
            if prices[i] > prices[i - 1] {
                profit += prices[i] - prices[i - 1];
            }
        }
        profit

=======

        let mut dp = vec![vec![vec![0; prices.len()]; k as usize + 1]; 2];
        let mut max = 0;
        for i in 1..=k {
            for j in 1..prices.len() {
                dp[1][i as usize][j] = dp[1][i as usize][j - 1];
                for k in 0..j {
                    dp[1][i as usize][j] = dp[1][i as usize][j].max(dp[0][i as usize - 1][k] + prices[j] - prices[k]);
                }
                max = max.max(dp[1][i as usize][j]);
            }
            dp[0] = dp[1].clone();
        }
        max

=======

        let mut profit = 0;
        let mut i = 0;
        let mut buy = 0;
        let mut sell = 0;
        let mut k = k;
        while i < prices.len() {
            while i < prices.len() - 1 && prices[i] >= prices[i + 1] {
                i += 1;
            }
            buy = prices[i];
            while i < prices.len() - 1 && prices[i] <= prices[i + 1] {
                i += 1;
            }
            sell = prices[i];
            profit += sell - buy;
            k -= 1;
            if k == 0 {
                break;
            }
            i += 1;
        }
        profit
    }
}
