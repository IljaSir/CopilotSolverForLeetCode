Synthesizing 4/10 solutions

=======

        
    }
}

=======

        let mut prime_factors = prime_factors as i64;
        let mut ans = 1;
        while prime_factors > 4 {
            ans = ans * 3 % 1000000007;
            prime_factors -= 3;
        }
        ans = ans * prime_factors % 1000000007;
        ans as i32

=======

        let m = 1000000007;
        if prime_factors <= 3 {
            return prime_factors;
        }
        let a = prime_factors / 3;
        let b = prime_factors % 3;
        let mut res = 1;
        for _ in 0..a-1 {
            res = (res * 3) % m;
        }
        if b == 0 {
            res = (res * 3) % m;
        } else if b == 1 {
            res = (res * 4) % m;
        } else {
            res = (res * 6) % m;
        }
        res

=======

        if prime_factors <= 3 {
            return prime_factors;
        }
        let mut p = prime_factors;
        let mut r = 1;
        while p > 4 {
            r = (r * 3) % 1000000007;
            p -= 3;
        }
        (r * p) % 1000000007
