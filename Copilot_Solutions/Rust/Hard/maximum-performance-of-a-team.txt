Synthesizing 10/10 solutions

=======

        let mut v = Vec::new();
        for i in 0..n {
            v.push((speed[i as usize], efficiency[i as usize]));
        }
        v.sort_by(|a, b| b.1.cmp(&a.1));
        let mut ans = 0;
        let mut sum = 0;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 0..n {
            sum += v[i as usize].0;
            heap.push(-v[i as usize].0);
            if heap.len() > k as usize {
                sum += heap.pop().unwrap();
            }
            ans = ans.max(sum * v[i as usize].1);
        }
        (ans % 1_000_000_007) as i32

=======

        let mut v = vec![];
        for i in 0..n {
            v.push((speed[i as usize], efficiency[i as usize]));
        }
        v.sort_by(|a, b| b.1.cmp(&a.1));
        let mut q = std::collections::BinaryHeap::new();
        let mut sum = 0;
        let mut ans = 0;
        for (s, e) in v {
            sum += s;
            q.push(s);
            if q.len() > k as usize {
                sum -= q.pop().unwrap();
            }
            ans = ans.max(sum * e);
        }
        (ans % 1_000_000_007) as i32

=======

        let mut engineers = Vec::new();
        for i in 0..n {
            engineers.push((speed[i as usize], efficiency[i as usize]));
        }
        engineers.sort_by(|a, b| b.1.cmp(&a.1));
        let mut res = 0;
        let mut speed_sum = 0;
        let mut pq = std::collections::BinaryHeap::new();
        for i in 0..n {
            if pq.len() == k as usize {
                speed_sum -= pq.pop().unwrap();
            }
            speed_sum += engineers[i as usize].0;
            pq.push(engineers[i as usize].0);
            res = res.max(speed_sum * engineers[i as usize].1);
        }
        (res % 1_000_000_007) as i32

=======

        let mut engineers: Vec<(i32, i32)> = speed.into_iter().zip(efficiency.into_iter()).collect();
        engineers.sort_by(|a, b| b.1.cmp(&a.1));
        let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = std::collections::BinaryHeap::new();
        let mut sum = 0;
        let mut ans = 0;
        for (speed, efficiency) in engineers {
            heap.push(std::cmp::Reverse(speed));
            sum += speed;
            if heap.len() > k as usize {
                sum -= heap.pop().unwrap().0;
            }
            ans = ans.max(sum * efficiency);
        }
        (ans % 1_000_000_007) as i32
    }
}

=======

        let mut v: Vec<(i32, i32)> = speed.into_iter().zip(efficiency.into_iter()).collect();
        v.sort_by(|a, b| b.1.cmp(&a.1));
        let mut ans = 0;
        let mut sum = 0;
        let mut pq = std::collections::BinaryHeap::new();
        for (s, e) in v {
            sum += s;
            pq.push(-s);
            if pq.len() > k as usize {
                sum += pq.pop().unwrap();
            }
            ans = ans.max(sum * e);
        }
        (ans % 1000000007) as i32

=======

        let mut vec = Vec::new();
        for i in 0..n as usize {
            vec.push((speed[i], efficiency[i]));
        }
        vec.sort_by(|a, b| b.1.cmp(&a.1));
        let mut heap = std::collections::BinaryHeap::new();
        let mut res = 0;
        let mut sum = 0;
        for i in 0..n as usize {
            sum += vec[i].0;
            heap.push(-vec[i].0);
            if heap.len() > k as usize {
                sum += heap.pop().unwrap();
            }
            res = std::cmp::max(res, sum * vec[i].1);
        }
        (res % 1000000007) as i32
    }
}

=======

        let mut pairs: Vec<(i32, i32)> = speed.iter().zip(efficiency.iter()).map(|(s, e)| (*s, *e)).collect();
        pairs.sort_by_key(|(s, e)| -e);
        let mut heap: std::collections::BinaryHeap<i32> = std::collections::BinaryHeap::new();
        let mut sum = 0;
        let mut res = 0;
        for (s, e) in pairs {
            heap.push(-s);
            sum += s;
            if heap.len() > k as usize {
                sum += heap.pop().unwrap();
            }
            res = res.max(sum * e);
        }
        (res % (1e9 as i32 + 7)) as i32

=======

        let mut v = Vec::new();
        for i in 0..n {
            v.push((speed[i as usize], efficiency[i as usize]));
        }
        v.sort_by_key(|x| -(x.1 as i64));
        let mut q = std::collections::BinaryHeap::new();
        let mut res = 0;
        let mut sum = 0;
        for i in 0..n {
            let (s, e) = v[i as usize];
            q.push(s);
            sum += s;
            if q.len() > k as usize {
                sum -= q.pop().unwrap();
            }
            res = res.max(sum * e as i64);
        }
        (res % 1000000007) as i32

=======

        let mut v = Vec::new();
        for i in 0..n {
            v.push((speed[i as usize], efficiency[i as usize]));
        }
        v.sort_by_key(|&(_, e)| -e);
        let mut sum = 0;
        let mut res = 0;
        let mut pq = std::collections::BinaryHeap::new();
        for (s, e) in v {
            sum += s;
            pq.push(-s);
            if pq.len() > k as usize {
                sum += pq.pop().unwrap();
            }
            res = res.max(sum * e as i64);
        }
        (res % 1000000007) as i32

=======

        let k = k as usize;
        let mut engineers: Vec<(i32, i32)> = speed.into_iter().zip(efficiency.into_iter()).collect();
        engineers.sort_by_key(|e| -e.1);
        let mut speed_heap = std::collections::BinaryHeap::new();
        let mut sum = 0;
        let mut ans = 0;
        for (s, e) in engineers {
            sum += s;
            speed_heap.push(-s);
            if speed_heap.len() > k {
                if let Some(&x) = speed_heap.peek() {
                    sum += x;
                }
                speed_heap.pop();
            }
            ans = ans.max(sum * e);
        }
        (ans % 1_000_000_007) as i32
