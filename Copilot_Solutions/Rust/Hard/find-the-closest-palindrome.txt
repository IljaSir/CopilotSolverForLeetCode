Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut s = n.chars().collect::<Vec<_>>();
        let l = s.len();
        let mut i = 0;
        let mut j = l - 1;
        while i < j {
            s[j] = s[i];
            i += 1;
            j -= 1;
        }
        let mut s1 = s.clone();
        let mut s2 = s.clone();
        let mut s3 = s.clone();
        let mut s4 = s.clone();
        let mut s5 = s.clone();
        let mut s6 = s.clone();
        let mut i = (l - 1) / 2;
        while i >= 0 {
            if s[i] != '9' {
                s1[i] = (s[i] as u8 + 1) as char;
                s1[l - 1 - i] = (s[i] as u8 + 1) as char;
                break;
            }
            i -= 1;
        }
        if i < 0 {
            s1[0] = '1';
            s1.push('1');
        }
        i = (l - 1) / 2;
        while i >= 0 {
            if s[i] != '0' {
                s2[i] = (s[i] as u8 - 1) as char;
                s2[l - 1 - i] = (s[i] as u8 - 1) as char;
                break;
            }
            i -= 1;
        }
        if i < 0 {
            s2.pop();
            s2[0] = '9';
        }
        i = (l - 1) / 2;
        while i >= 0 {
            if s[i] != '0' {
                s3[i] = (s[i] as u8 - 1) as char;
                s3[l - 1 - i] = (s[i] as u8 - 1) as char;
                break;
            }
            i -= 1;
        }
        if i < 0 {
            s3.pop();
            s3[0] = '9';
        }
        i = (l - 1) / 2;
        while i >= 0 {
            if s[i] != '9' {
                s4[i] = (s[i

=======

        let mut n: i64 = n.parse().unwrap();
        let mut v: Vec<i64> = vec![0, 1, -1, 10, -10, 100, -100, 1000, -1000, 10000, -10000, 100000, -100000, 1000000, -1000000, 10000000, -10000000, 100000000, -100000000, 1000000000, -1000000000, 10000000000, -10000000000];
        if n == 1 {
            return "0".to_string();
        }
        let mut min = n;
        let mut diff = min - 0;
        let mut min_diff = diff;
        for i in 0..v.len() {
            let mut num = n + v[i];
            if num == 0 {
                continue;
            }
            let mut rev = 0;
            let mut num2 = num;
            while num2 > 0 {
                rev = rev * 10 + num2 % 10;
                num2 /= 10;
            }
            if rev == num {
                return rev.to_string();
            }
            diff = rev - num;
            if diff < 0 {
                diff = diff * -1;
            }
            if diff < min_diff {
                min_diff = diff;
                min = rev;
            } else if diff == min_diff && rev < min {
                min = rev;
            }
        }
        min.to_string()

=======

        let n: Vec<char> = n.chars().collect();
        let len = n.len();
        let mut res = String::new();
        let mut i = 0;
        while i < (len + 1) / 2 {
            res.push(n[i]);
            i += 1;
        }
        if len % 2 == 1 {
            i -= 1;
        }
        while i > 0 {
            i -= 1;
            res.push(n[i]);
        }
        let res = res.parse::<i64>().unwrap();
        let mut res1 = res - 1;
        let mut res2 = res + 1;
        let mut res3 = res;
        let mut res4 = res;
        let mut res5 = res;
        let mut res6 = res;
        let mut res7 = res;
        let mut res8 = res;
        let mut res9 = res;
        let mut res10 = res;
        let mut res11 = res;
        let mut res12 = res;
        let mut res13 = res;
        let mut res14 = res;
        let mut res15 = res;
        let mut res16 = res;
        let mut res17 = res;
        let mut res18 = res;
        let mut res19 = res;
        let mut res20 = res;
        let mut res21 = res;
        let mut res22 = res;
        let mut res23 = res;
        let mut res24 = res;
        let mut res25 = res;
        let mut res26 = res;
        let mut res27 = res;
        let mut res28 = res;
        let mut res29 = res;
        let mut res30 = res;
        let mut res31 = res;
        let mut res32 = res;
        let mut res33 = res;
        let mut res34 = res;
        let mut res35 = res;
        let mut res36 = res;
        let mut res37 = res;
        let mut res38 = res;
        let mut res39 = res;
        let mut res40 = res;
        let mut res41 = res;
        let mut res42 = res;
        let mut res43 = res;
        let mut res44 = res;
        let mut res45 = res;
        let mut res46 = res;
        let mut res47 = res;

=======

        let n: i64 = n.parse().unwrap();
        let mut candidates = vec![0; 4];
        let mut prefix = n / 10i64.pow((n.to_string().len() - 1) as u32);
        let mut suffix = n - prefix * 10i64.pow((n.to_string().len() - 1) as u32);
        let mut prefix = prefix.to_string();
        let mut suffix = suffix.to_string();
        if suffix.len() == 0 {
            suffix = "0".to_string();
        }
        if suffix.len() == 1 {
            suffix = "0".to_string();
        }
        let mut prefix = prefix.parse::<i64>().unwrap();
        let mut suffix = suffix.parse::<i64>().unwrap();
        candidates[0] = prefix * 10i64.pow((n.to_string().len() - 1) as u32) + suffix;
        if prefix > 1 {
            prefix -= 1;
            suffix = 10i64.pow((n.to_string().len() - 1) as u32) - 1;
            candidates[1] = prefix * 10i64.pow((n.to_string().len() - 1) as u32) + suffix;
        } else {
            candidates[1] = 10i64.pow((n.to_string().len() - 1) as u32) - 1;
        }
        prefix = n / 10i64.pow((n.to_string().len() - 1) as u32);
        suffix = n - prefix * 10i64.pow((n.to_string().len() - 1) as u32);
        let mut prefix = prefix.to_string();
        let mut suffix = suffix.to_string();
        if suffix.len() == 0 {
            suffix = "0".to_string();
        }
        if suffix.len() == 1 {
            suffix = "0".to_string();
        }
        let mut prefix = prefix.parse::<i64>().unwrap();
        let mut suffix = suffix.parse::<i64>().unwrap();
        candidates[2] = prefix * 10i64.pow((n.to_string().len() - 1) as u32) + suffix;
        if prefix > 1 {
            prefix -= 1;
            suffix = 10i64.pow((n.to_string().len() -
