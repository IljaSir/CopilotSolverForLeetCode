Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut res = 0;
        let mut set = std::collections::HashSet::new();
        for i in 0..ideas.len() {
            for j in i+1..ideas.len() {
                let mut a = ideas[i].clone();
                let mut b = ideas[j].clone();
                let tmp = a.as_bytes()[0];
                a.as_bytes_mut()[0] = b.as_bytes()[0];
                b.as_bytes_mut()[0] = tmp;
                if !set.contains(&a) && !set.contains(&b) {
                    res += 1;
                    set.insert(a);
                    set.insert(b);
                }
            }
        }
        res

=======

        let mut names = HashSet::new();
        for i in 0..ideas.len() {
            for j in i+1..ideas.len() {
                let mut ideaA = ideas[i].clone();
                let mut ideaB = ideas[j].clone();
                let mut a = ideaA.chars().nth(0).unwrap();
                let mut b = ideaB.chars().nth(0).unwrap();
                ideaA.replace_range(0..1, &b.to_string());
                ideaB.replace_range(0..1, &a.to_string());
                if !ideas.contains(&ideaA) && !ideas.contains(&ideaB) {
                    names.insert(ideaA + " " + &ideaB);
                }
            }
        }
        names.len() as i64
    }
}

=======

        let mut res = 0;
        let mut set = std::collections::HashSet::new();
        let mut vec = vec![];
        for i in 0..ideas.len() {
            let mut s = ideas[i].clone();
            for j in i+1..ideas.len() {
                let mut s1 = s.clone();
                let mut s2 = ideas[j].clone();
                let c1 = s1.remove(0);
                let c2 = s2.remove(0);
                s1.insert(0, c2);
                s2.insert(0, c1);
                if !set.contains(&s1) && !set.contains(&s2) {
                    res += 1;
                    vec.push(s1);
                    vec.push(s2);
                }
            }
            set.insert(s);
        }
        for s in vec {
            set.insert(s);
        }
        res + set.len() as i64
    }
}
