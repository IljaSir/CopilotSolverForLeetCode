Synthesizing 4/10 solutions

=======

        
    }
}

=======

        let mut tasks = tasks;
        tasks.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut dp = vec![0; tasks.len()];
        dp[0] = tasks[0][2];
        for i in 1..tasks.len() {
            let mut j = i - 1;
            while j >= 0 && tasks[j][1] >= tasks[i][0] {
                j -= 1;
            }
            if j >= 0 {
                dp[i] = dp[j] + tasks[i][2];
            } else {
                dp[i] = tasks[i][2];
            }
            if i > 0 {
                dp[i] = dp[i].min(dp[i - 1]);
            }
        }
        dp[tasks.len() - 1]

=======

        let mut tasks = tasks;
        tasks.sort_by_key(|x| x[0]);
        let mut dp = vec![0; tasks.len()];
        dp[0] = tasks[0][2];
        for i in 1..tasks.len() {
            dp[i] = tasks[i][2];
            for j in (0..i).rev() {
                if tasks[j][1] <= tasks[i][0] {
                    dp[i] = dp[i].max(dp[j] + tasks[i][2]);
                    break;
                }
            }
        }
        dp.into_iter().max().unwrap()

=======

        let mut t = tasks;
        t.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut dp = vec![0; t.len()];
        for i in 0..t.len() {
            let mut j = i;
            while j > 0 {
                if t[j - 1][1] < t[i][0] {
                    break;
                }
                j -= 1;
            }
            dp[i] = if j > 0 {
                dp[j - 1] + t[i][1] - t[i][0] + 1
            } else {
                t[i][1] - t[i][0] + 1
            };
            if i > 0 {
                dp[i] = dp[i].min(dp[i - 1]);
            }
        }
        dp[t.len() - 1]
    }
}
