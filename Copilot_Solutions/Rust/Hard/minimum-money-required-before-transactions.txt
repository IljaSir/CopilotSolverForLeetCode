Synthesizing 6/10 solutions

=======

        let mut transactions: Vec<(i64, i64)> = transactions.iter().map(|x| (x[0] as i64, x[1] as i64)).collect();
        transactions.sort_unstable_by(|a, b| a.0.cmp(&b.0));
        let mut money = 0;
        let mut max = 0;
        for (cost, cashback) in transactions {
            max = std::cmp::max(max, cost);
            money = std::cmp::max(money, max - cost + cashback);
        }
        money

=======

        let mut sum = 0;
        for t in transactions.iter() {
            sum += t[0] as i64;
        }
        sum
    }
}

=======

        let mut transactions = transactions;
        transactions.sort_by_key(|x| x[0]);
        let mut money = 0;
        for t in transactions {
            money += t[0] as i64;
        }
        let mut res = money;
        for t in transactions {
            money -= t[0] as i64;
            res = res.min(money + t[1] as i64);
        }
        res

=======

        transactions.iter().map(|x| x[0] as i64).sum()

=======

        let mut money = 0;
        let mut cost = 0;
        for t in transactions {
            money += t[1] as i64;
            cost += t[0] as i64;
        }
        cost - money

=======

        let mut ans = 0;
        let mut money = 0;
        let mut c = 0;
        for t in transactions {
            ans += t[0] as i64;
            money += t[1] as i64;
            c = c.max(t[0] - t[1]);
        }
        ans - money + c as i64
