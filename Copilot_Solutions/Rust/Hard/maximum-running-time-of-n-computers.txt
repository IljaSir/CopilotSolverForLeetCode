Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = n as usize;
        let mut batteries = batteries;
        batteries.sort();
        let mut lo = 0;
        let mut hi = batteries.len() - 1;
        let mut ans = 0;
        while lo <= hi {
            let mid = lo + (hi - lo) / 2;
            let mut cur = 0;
            let mut ok = true;
            for i in 0..n {
                if cur >= batteries[mid] {
                    ok = false;
                    break;
                }
                cur += batteries[mid + i];
            }
            if ok {
                lo = mid + 1;
                ans = batteries[mid];
            } else {
                hi = mid - 1;
            }
        }
        ans as i64 * n as i64

=======

        let mut batteries = batteries;
        batteries.sort();
        let mut l = 0;
        let mut r = batteries.len() as i64;
        while l < r {
            let m = l + (r - l) / 2;
            if Solution::check(&batteries, m as usize, n as usize) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l
    }
    fn check(batteries: &Vec<i32>, m: usize, n: usize) -> bool {
        let mut t = 0;
        let mut i = 0;
        while i < n {
            let j = i + m;
            if j >= batteries.len() {
                return false;
            }
            t += batteries[j] as i64;
            i += 1;
            if t < i as i64 {
                return false;
            }
        }
        true

=======

        let n = n as usize;
        let mut batteries = batteries;
        batteries.sort();
        let mut l = 0;
        let mut r = batteries[n - 1] as i64;
        let mut res = 0;
        while l <= r {
            let mid = (l + r) / 2;
            let mut ok = true;
            let mut cnt = 0;
            for i in 0..n {
                cnt += (mid / batteries[i] as i64) as usize;
                if cnt >= n {
                    break;
                }
            }
            if cnt >= n {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        res

=======

        let n = n as usize;
        let mut batteries = batteries;
        batteries.sort();
        let mut res = 0;
        for i in 0..n {
            res = res.max(batteries[i] * (n - i) as i32);
        }
        res as i64

=======

        let n = n as usize;
        let mut batteries = batteries;
        batteries.sort();
        let mut sum = 0;
        let mut ans = 0;
        for i in 0..n {
            ans = ans.max(sum + batteries[i] as i64);
            sum += batteries[i] as i64;
        }
        ans
