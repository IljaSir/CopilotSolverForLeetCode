Synthesizing 3/10 solutions

=======

        let (mut x, mut y) = (1, 1);
        while x <= target_x && y <= target_y {
            if x == target_x && y == target_y {
                return true;
            }
            if x < y {
                x += y;
            } else if x > y {
                y += x;
            } else {
                x *= 2;
            }
        }
        false

=======

        let (mut x, mut y) = (target_x, target_y);
        while x > 0 && y > 0 {
            if x < y {
                std::mem::swap(&mut x, &mut y);
            }
            x %= y;
        }
        x + y == 1

=======

        let mut x = 1;
        let mut y = 1;
        while x < target_x || y < target_y {
            if x < target_x && y < target_y {
                if target_x - x > target_y - y {
                    x += y;
                } else {
                    y += x;
                }
            } else if x < target_x {
                x += y;
            } else {
                y += x;
            }
        }
        x == target_x && y == target_y
