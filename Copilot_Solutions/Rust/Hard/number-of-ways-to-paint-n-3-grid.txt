Synthesizing 5/10 solutions

=======

        
    }
}

=======

        let mut dp = vec![vec![0; 3]; 2];
        dp[0][0] = 6;
        dp[0][1] = 6;
        dp[0][2] = 6;
        for i in 1..n as usize {
            dp[i % 2][0] = (dp[(i - 1) % 2][1] + dp[(i - 1) % 2][2]) % 1000000007;
            dp[i % 2][1] = (dp[(i - 1) % 2][0] + dp[(i - 1) % 2][2]) % 1000000007;
            dp[i % 2][2] = (dp[(i - 1) % 2][0] + dp[(i - 1) % 2][1]) % 1000000007;
        }
        let ans = (dp[(n - 1) as usize % 2][0] + dp[(n - 1) as usize % 2][1] + dp[(n - 1) as usize % 2][2]) % 1000000007;
        ans as i32

=======

        let mut dp = vec![(6, 6); n as usize];
        for i in 1..n as usize {
            dp[i] = (
                (dp[i-1].0 * 3 + dp[i-1].1 * 2) % 1000000007,
                (dp[i-1].0 * 2 + dp[i-1].1 * 2) % 1000000007,
            );
        }
        (dp[n as usize - 1].0 + dp[n as usize - 1].1) % 1000000007

=======

        let mut dp = vec![[6, 6]; n as usize];
        for i in 1..n as usize {
            dp[i][0] = dp[i - 1].iter().sum::<i32>() % 1_000_000_007;
            dp[i][1] = dp[i - 1].iter().sum::<i32>() % 1_000_000_007;
            for j in 0..2 {
                dp[i][j] -= dp[i - 1][j];
                dp[i][j] %= 1_000_000_007;
            }
        }
        (dp[n as usize - 1].iter().sum::<i32>() % 1_000_000_007) as i32

=======

        let mut dp = vec![vec![0; 3]; n as usize + 1];
        for i in 0..3 {
            dp[0][i] = 1;
        }
        for i in 1..(n as usize + 1) {
            for j in 0..3 {
                for k in 0..3 {
                    if j != k {
                        dp[i][j] += dp[i - 1][k];
                        dp[i][j] %= 1000000007;
                    }
                }
            }
        }
        let mut ans = 0;
        for i in 0..3 {
            ans += dp[n as usize][i];
            ans %= 1000000007;
        }
        ans
