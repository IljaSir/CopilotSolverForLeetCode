Synthesizing 10/10 solutions

=======

        let n = stone_value.len();
        let mut dp = vec![0; n + 1];
        dp[n] = 0;
        for i in (0..n).rev() {
            let mut sum = 0;
            for j in 0..3 {
                if i + j < n {
                    sum += stone_value[i + j];
                    dp[i] = dp[i].max(sum - dp[i + j + 1]);
                }
            }
        }
        if dp[0] > 0 {
            "Alice".to_string()
        } else if dp[0] < 0 {
            "Bob".to_string()
        } else {
            "Tie".to_string()
        }

=======

        let n = stone_value.len();
        let mut dp = vec![0; n+1];
        for i in (0..n).rev() {
            let mut sum = 0;
            dp[i] = i32::MIN;
            for j in 0..3 {
                if i+j < n {
                    sum += stone_value[i+j];
                    dp[i] = i32::max(dp[i], sum - dp[i+j+1]);
                }
            }
        }
        if dp[0] > 0 { "Alice" } else if dp[0] == 0 { "Tie" } else { "Bob" }.to_string()

=======

        let mut dp = vec![0; stone_value.len()];
        let mut sum = 0;
        for i in (0..stone_value.len()).rev() {
            sum += stone_value[i];
            dp[i] = sum - dp[i];
            if i + 1 < stone_value.len() {
                dp[i] = dp[i].max(sum - stone_value[i + 1] - dp[i + 1]);
            }
            if i + 2 < stone_value.len() {
                dp[i] = dp[i].max(sum - stone_value[i + 1] - stone_value[i + 2] - dp[i + 2]);
            }
        }
        if dp[0] * 2 == sum {
            "Tie".to_string()
        } else if dp[0] * 2 > sum {
            "Alice".to_string()
        } else {
            "Bob".to_string()
        }

=======

        let mut dp = vec![0; stone_value.len()];
        let mut sum = vec![0; stone_value.len()];
        sum[stone_value.len() - 1] = stone_value[stone_value.len() - 1];
        for i in (0..stone_value.len() - 1).rev() {
            sum[i] = sum[i + 1] + stone_value[i];
        }
        for i in (0..stone_value.len()).rev() {
            dp[i] = sum[i] - dp[i];
            if i + 1 < stone_value.len() {
                dp[i] = std::cmp::max(dp[i], sum[i] - dp[i + 1]);
            }
            if i + 2 < stone_value.len() {
                dp[i] = std::cmp::max(dp[i], sum[i] - dp[i + 2]);
            }
            if i + 3 < stone_value.len() {
                dp[i] = std::cmp::max(dp[i], sum[i] - dp[i + 3]);
            }
        }
        if dp[0] == sum[0] - dp[0] {
            return String::from("Tie");
        } else if dp[0] > sum[0] - dp[0] {
            return String::from("Alice");
        } else {
            return String::from("Bob");
        }
    }
}

=======

        let mut dp = vec![0; stone_value.len()];
        let mut sum = vec![0; stone_value.len()];
        sum[stone_value.len() - 1] = stone_value[stone_value.len() - 1];
        for i in (0..stone_value.len() - 1).rev() {
            sum[i] = sum[i + 1] + stone_value[i];
        }
        dp[stone_value.len() - 1] = stone_value[stone_value.len() - 1];
        if stone_value.len() > 1 {
            dp[stone_value.len() - 2] = stone_value[stone_value.len() - 2] + stone_value[stone_value.len() - 1];
        }
        if stone_value.len() > 2 {
            dp[stone_value.len() - 3] = stone_value[stone_value.len() - 3] + stone_value[stone_value.len() - 2] + stone_value[stone_value.len() - 1];
        }
        for i in (0..stone_value.len() - 3).rev() {
            dp[i] = sum[i] - dp[i + 1].min(dp[i + 2].min(dp[i + 3]));
        }
        let alice = dp[0];
        let bob = sum[0] - alice;
        if alice > bob {
            "Alice".to_string()
        } else if alice < bob {
            "Bob".to_string()
        } else {
            "Tie".to_string()
        }

=======

        let mut dp = vec![0; stone_value.len()];
        let mut sum = 0;
        for i in (0..stone_value.len()).rev() {
            sum += stone_value[i];
            dp[i] = sum;
            for j in 1..=3 {
                if i+j < stone_value.len() {
                    dp[i] = std::cmp::max(dp[i], sum - dp[i+j]);
                }
            }
        }
        let alice = dp[0];
        let bob = sum - alice;
        if alice > bob {
            "Alice".to_string()
        } else if alice < bob {
            "Bob".to_string()
        } else {
            "Tie".to_string()
        }

=======

        let mut dp = vec![0; stone_value.len() + 3];
        for i in (0..stone_value.len()).rev() {
            dp[i] = i32::min_value();
            for k in 0..3 {
                if i + k < stone_value.len() {
                    dp[i] = i32::max(dp[i], stone_value[i + k] - dp[i + k + 1]);
                }
            }
        }
        if dp[0] > 0 {
            "Alice".to_owned()
        } else if dp[0] < 0 {
            "Bob".to_owned()
        } else {
            "Tie".to_owned()
        }
    }
}

=======

        let n = stone_value.len();
        let mut dp = vec![0; n+3];
        for i in (0..n).rev() {
            let mut sum = 0;
            dp[i] = i32::min_value();
            for j in 0..3 {
                if i+j < n {
                    sum += stone_value[i+j];
                    dp[i] = dp[i].max(sum - dp[i+j+1]);
                }
            }
        }
        match dp[0].cmp(&0) {
            std::cmp::Ordering::Less => "Bob".to_string(),
            std::cmp::Ordering::Equal => "Tie".to_string(),
            std::cmp::Ordering::Greater => "Alice".to_string(),
        }

=======

        let n = stone_value.len();
        let mut dp = vec![0; n + 1];
        for i in (0..n).rev() {
            let mut sum = 0;
            let mut max = std::i32::MIN;
            for j in 0..3 {
                if i + j < n {
                    sum += stone_value[i + j];
                    max = std::cmp::max(max, sum - dp[i + j + 1]);
                }
            }
            dp[i] = max;
        }
        if dp[0] == 0 {
            "Tie".to_string()
        } else if dp[0] > 0 {
            "Alice".to_string()
        } else {
            "Bob".to_string()
        }

=======

        let mut dp = vec![0; stone_value.len()];
        let mut sum = vec![0; stone_value.len()];
        for i in (0..stone_value.len()).rev() {
            sum[i] = stone_value[i] + if i + 1 < stone_value.len() { sum[i + 1] } else { 0 };
            dp[i] = sum[i];
            if i + 1 < stone_value.len() {
                dp[i] = dp[i].max(sum[i] - dp[i + 1]);
            }
            if i + 2 < stone_value.len() {
                dp[i] = dp[i].max(sum[i] - dp[i + 2]);
            }
            if i + 3 < stone_value.len() {
                dp[i] = dp[i].max(sum[i] - dp[i + 3]);
            }
        }
        if dp[0] * 2 == sum[0] {
            return "Tie".to_string();
        }
        if dp[0] * 2 > sum[0] {
            return "Alice".to_string();
        }
        return "Bob".to_string();
