Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut cnt = vec![0; 60];
        for &num in &nums {
            for i in 0..60 {
                if num & (1 << i) != 0 {
                    cnt[i] += 1;
                }
            }
        }
        for &num in &nums {
            let mut sum = 0;
            for i in 0..60 {
                if num & (1 << i) != 0 {
                    sum += cnt[i];
                } else {
                    sum += nums.len() - cnt[i];
                }
            }
            if sum >= k {
                ans += 1;
            }
        }
        ans

=======

        let mut ans = 0;
        let mut count = vec![0; 60];
        for &num in &nums {
            for i in 0..60 {
                if num & (1 << i) > 0 {
                    count[i] += 1;
                }
            }
        }
        for &num in &nums {
            let mut cur = 0;
            for i in 0..60 {
                if num & (1 << i) > 0 {
                    cur += count[i];
                } else {
                    cur += nums.len() - count[i];
                }
            }
            ans += cur as i64;
        }
        ans / 2

=======

        let mut res: i64 = 0;
        let mut count = vec![0; 60];
        for n in nums {
            for i in 0..60 {
                if n & (1 << i) > 0 {
                    count[i] += 1;
                }
            }
        }
        for n in nums {
            let mut bits = 0;
            for i in 0..60 {
                if n & (1 << i) > 0 {
                    if count[i] > 0 {
                        bits += 1;
                    }
                    count[i] -= 1;
                } else if count[i] > 0 {
                    bits += 1;
                }
            }
            if bits >= k {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut count = vec![0; 60];
        for num in nums {
            let mut num = num;
            let mut i = 0;
            while num > 0 {
                count[i] += num & 1;
                num >>= 1;
                i += 1;
            }
        }
        for i in 0..60 {
            for j in i..60 {
                if i == j {
                    res += count[i] * (count[i] - 1) / 2;
                } else if count[i] + count[j] >= k {
                    res += count[i] * count[j];
                }
            }
        }
        res

=======

        let mut res = 0;
        let mut count = vec![0; 60];
        for num in nums {
            let mut num = num;
            let mut i = 0;
            while num > 0 {
                count[i] += num & 1;
                num >>= 1;
                i += 1;
            }
        }
        for num in nums {
            let mut num = num;
            let mut i = 0;
            let mut sum = 0;
            while num > 0 {
                if num & 1 == 1 {
                    sum += count[i];
                }
                num >>= 1;
                i += 1;
            }
            res += (1 << i) - sum;
        }
        res / 2

=======

        let mut count = 0;
        let mut bit_count = vec![0; 32];
        for &n in &nums {
            for i in 0..32 {
                if n & (1 << i) > 0 {
                    bit_count[i] += 1;
                }
            }
        }
        for &n in &nums {
            let mut cur = 0;
            for i in 0..32 {
                if n & (1 << i) > 0 {
                    cur += 1 << i;
                } else {
                    cur += bit_count[i] << i;
                }
            }
            if cur >= k {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut res = 0;
        let mut count = vec![0; 60];
        for num in nums.iter() {
            let mut n = *num;
            let mut i = 0;
            while n > 0 {
                if n & 1 > 0 {
                    count[i] += 1;
                }
                n >>= 1;
                i += 1;
            }
        }
        for num in nums.iter() {
            let mut n = *num;
            let mut i = 0;
            let mut cnt = 0;
            while n > 0 {
                if n & 1 > 0 {
                    cnt += count[i];
                }
                n >>= 1;
                i += 1;
            }
            res += cnt;
        }
        res as i64
    }
}

=======

        let mut ans = 0;
        let mut count = vec![0; 61];
        for &num in &nums {
            for i in 0..61 {
                if (num & (1 << i)) > 0 {
                    count[i] += 1;
                }
            }
        }
        for &num in &nums {
            let mut sum = 0;
            for i in 0..61 {
                if (num & (1 << i)) > 0 {
                    sum += count[i];
                } else {
                    sum += nums.len() - count[i];
                }
            }
            ans += sum - 1;
        }
        ans / 2

=======

        let mut res = 0;
        let mut cnt = vec![0; 61];
        for &num in nums.iter() {
            let mut num = num;
            let mut cnt1 = 0;
            while num > 0 {
                cnt1 += num & 1;
                num >>= 1;
            }
            for i in 0..61 {
                if cnt1 + i >= k {
                    res += cnt[i];
                }
            }
            cnt[cnt1 as usize] += 1;
        }
        res

=======

        let mut c = vec![0; 32];
        let mut res = 0;
        for &num in nums.iter() {
            for i in 0..32 {
                if (num & (1 << i)) != 0 {
                    c[i] += 1;
                }
            }
        }
        for &num in nums.iter() {
            let mut cnt = 0;
            for i in 0..32 {
                if (num & (1 << i)) != 0 {
                    cnt += c[i];
                } else {
                    cnt += nums.len() - c[i];
                }
            }
            if cnt >= k as usize {
                res += 1;
            }
        }
        res
