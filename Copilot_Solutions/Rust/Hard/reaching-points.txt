Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if sx > tx || sy > ty {
            return false;
        }
        if sx == tx {
            return (ty - sy) % sx == 0;
        }
        if sy == ty {
            return (tx - sx) % sy == 0;
        }
        if tx > ty {
            return Self::reaching_points(sx, sy, tx % ty, ty);
        } else {
            return Self::reaching_points(sx, sy, tx, ty % tx);
        }

=======

        let mut tx = tx;
        let mut ty = ty;
        while tx >= sx && ty >= sy {
            if tx == ty {
                break;
            }
            if tx > ty {
                if ty > sy {
                    tx %= ty;
                } else {
                    return (tx - sx) % ty == 0;
                }
            } else {
                if tx > sx {
                    ty %= tx;
                } else {
                    return (ty - sy) % tx == 0;
                }
            }
        }
        tx == sx && ty == sy

=======

        let (mut x, mut y) = (tx, ty);
        while x >= sx && y >= sy {
            if x == y {
                break;
            }
            if x > y {
                if y > sy {
                    x %= y;
                } else {
                    return (x - sx) % y == 0;
                }
            } else {
                if x > sx {
                    y %= x;
                } else {
                    return (y - sy) % x == 0;
                }
            }
        }
        x == sx && y == sy

=======

        let mut x = tx;
        let mut y = ty;
        while x >= sx && y >= sy {
            if x == y {
                break;
            }
            if x > y {
                if y > sy {
                    x %= y;
                } else {
                    return (x - sx) % y == 0;
                }
            } else {
                if x > sx {
                    y %= x;
                } else {
                    return (y - sy) % x == 0;
                }
            }
        }
        x == sx && y == sy

=======

        let mut x = tx;
        let mut y = ty;
        while x > sx && y > sy {
            if x > y {
                x %= y;
            } else {
                y %= x;
            }
        }
        if sx == x {
            (ty - sy) % x == 0
        } else if sy == y {
            (tx - sx) % y == 0
        } else {
            false
        }

=======

        let (mut x, mut y) = (tx, ty);
        while x >= sx && y >= sy {
            if x == sx && y == sy {
                return true;
            }
            if x > y {
                x -= y;
            } else {
                y -= x;
            }
        }
        false
    }
}

=======

        let (mut x, mut y) = (tx, ty);
        while x >= sx && y >= sy {
            if x == sx && y == sy {
                return true;
            }
            if x >= y {
                x -= y;
            } else {
                y -= x;
            }
        }
        false

=======

        let (mut sx, mut sy, mut tx, mut ty) = (sx, sy, tx, ty);
        while tx >= sx && ty >= sy {
            if tx == ty {
                break;
            }
            if tx > ty {
                if ty > sy {
                    tx %= ty;
                } else {
                    return (tx - sx) % ty == 0;
                }
            } else {
                if tx > sx {
                    ty %= tx;
                } else {
                    return (ty - sy) % tx == 0;
                }
            }
        }
        tx == sx && ty == sy

=======

        let (mut x, mut y) = (tx, ty);
        while x >= sx && y >= sy {
            if x == sx && y == sy {
                return true;
            } else if x >= y {
                x = x - y;
            } else {
                y = y - x;
            }
        }
        false
