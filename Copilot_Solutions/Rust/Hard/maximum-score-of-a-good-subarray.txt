Synthesizing 10/10 solutions

=======

        let k = k as usize;
        let mut res = nums[k];
        let mut l = k;
        let mut r = k;
        let mut min = nums[k];
        while l > 0 || r < nums.len() - 1 {
            if l == 0 {
                r += 1;
            } else if r == nums.len() - 1 {
                l -= 1;
            } else {
                if nums[l - 1] >= nums[r + 1] {
                    l -= 1;
                } else {
                    r += 1;
                }
            }
            min = min.min(nums[l].min(nums[r]));
            res = res.max(min * (r - l + 1) as i32);
        }
        res

=======

        let mut l = k as usize;
        let mut r = k as usize;
        let mut res = nums[k as usize];
        let mut min = nums[k as usize];
        while l > 0 || r < nums.len() - 1 {
            if l == 0 {
                r += 1;
            } else if r == nums.len() - 1 {
                l -= 1;
            } else if nums[l-1] > nums[r+1] {
                l -= 1;
            } else {
                r += 1;
            }
            min = min.min(nums[l].min(nums[r]));
            res = res.max(min * (r - l + 1) as i32);
        }
        res

=======

        let n = nums.len();
        let mut l = k as usize;
        let mut r = k as usize;
        let mut res = nums[k as usize];
        let mut min = nums[k as usize];
        while l > 0 || r < n - 1 {
            if (l == 0) || (r < n - 1 && nums[l - 1] < nums[r + 1]) {
                r += 1;
                min = min.min(nums[r]);
            } else {
                l -= 1;
                min = min.min(nums[l]);
            }
            res = res.max(min * (r - l + 1) as i32);
        }
        res

=======

        let k = k as usize;
        let mut l = k;
        let mut r = k;
        let mut min = nums[k];
        let mut res = min;
        while l > 0 || r < nums.len() - 1 {
            let a = if l == 0 { 0 } else { nums[l - 1] };
            let b = if r == nums.len() - 1 { 0 } else { nums[r + 1] };
            if a >= b {
                l -= 1;
            } else {
                r += 1;
            }
            min = std::cmp::min(min, nums[l].min(nums[r]));
            res = std::cmp::max(res, min * (r - l + 1) as i32);
        }
        res

=======

        let k = k as usize;
        let mut left = k;
        let mut right = k;
        let mut min_val = nums[k];
        let mut max_score = min_val;
        while left > 0 || right < nums.len() - 1 {
            let left_val = if left == 0 { std::i32::MAX } else { nums[left - 1] };
            let right_val = if right == nums.len() - 1 { std::i32::MAX } else { nums[right + 1] };
            if left_val < right_val {
                right += 1;
                min_val = min_val.min(nums[right]);
            } else {
                left -= 1;
                min_val = min_val.min(nums[left]);
            }
            max_score = max_score.max(min_val * (right - left + 1) as i32);
        }
        max_score

=======

        let k = k as usize;
        let mut left = k;
        let mut right = k;
        let mut max = nums[k];
        let mut min = nums[k];
        while left > 0 || right < nums.len() - 1 {
            if left == 0 {
                right += 1;
            } else if right == nums.len() - 1 {
                left -= 1;
            } else if nums[left-1] < nums[right+1] {
                right += 1;
            } else {
                left -= 1;
            }
            min = std::cmp::min(min, nums[left]);
            min = std::cmp::min(min, nums[right]);
            max = std::cmp::max(max, min * (right - left + 1) as i32);
        }
        max

=======

        let mut stack = vec![];
        let mut res = 0;
        let mut k = k as usize;
        let mut nums = nums;
        nums.push(0);
        for i in 0..nums.len() {
            while !stack.is_empty() && nums[*stack.last().unwrap()] >= nums[i] {
                let j = stack.pop().unwrap();
                let left = if stack.is_empty() { 0 } else { *stack.last().unwrap() + 1 };
                let right = i - 1;
                if left <= k && k <= right {
                    res = res.max(nums[j] * (right - left + 1) as i32);
                }
            }
            stack.push(i);
        }
        res

=======

        let k = k as usize;
        let mut res = nums[k];
        let mut l = k as i32;
        let mut r = k as i32;
        let mut min_num = nums[k];
        while l > 0 || r < nums.len() as i32 - 1 {
            if (l == 0) || (r < nums.len() as i32 - 1 && nums[l as usize - 1] < nums[r as usize + 1]) {
                r += 1;
                min_num = min_num.min(nums[r as usize]);
            } else {
                l -= 1;
                min_num = min_num.min(nums[l as usize]);
            }
            res = res.max(min_num * (r - l + 1));
        }
        res

=======

        let k = k as usize;
        let mut min = nums[k];
        let mut max = min;
        let mut l = k;
        let mut r = k;
        let mut n = nums.len();
        while l > 0 || r < n-1 {
            if l == 0 {
                r += 1;
            } else if r == n-1 {
                l -= 1;
            } else if nums[l-1] < nums[r+1] {
                r += 1;
            } else {
                l -= 1;
            }
            if nums[l] < nums[r] {
                min = nums[l].min(min);
            } else {
                min = nums[r].min(min);
            }
            max = max.max(min * (r-l+1) as i32);
        }
        max

=======

        let mut k = k as usize;
        let mut left = k;
        let mut right = k;
        let mut max = nums[k];
        let mut ans = max;
        while left > 0 || right < nums.len() - 1 {
            let l = if left == 0 { i32::MIN } else { nums[left - 1] };
            let r = if right == nums.len() - 1 { i32::MIN } else { nums[right + 1] };
            if l < r {
                right += 1;
                max = max.min(nums[right]);
            } else {
                left -= 1;
                max = max.min(nums[left]);
            }
            ans = ans.max(max * (right - left + 1) as i32);
        }
        ans
