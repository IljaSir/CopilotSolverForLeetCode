Synthesizing 6/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = edges.len();
        let mut res = 0;
        let mut visited = vec![false; n];
        for i in 0..n {
            if visited[i] {
                continue;
            }
            let mut start = i;
            let mut end = i;
            let mut length = 0;
            while edges[end] != -1 {
                start = end;
                end = edges[end] as usize;
                length += 1;
                if visited[start] {
                    break;
                }
                visited[start] = true;
            }
            if start == end {
                res = res.max(length);
            }
        }
        if res == 0 {
            -1
        } else {
            res as i32
        }
    }
}

=======

        let mut visited = vec![false; edges.len()];
        let mut max_cycle = 0;
        for i in 0..edges.len() {
            if visited[i] {
                continue;
            }
            let mut cycle = 0;
            let mut j = i;
            while !visited[j] {
                visited[j] = true;
                j = edges[j] as usize;
                cycle += 1;
            }
            if j != i {
                cycle = 0;
            }
            max_cycle = max_cycle.max(cycle);
        }
        if max_cycle == 0 {
            return -1;
        }
        max_cycle
