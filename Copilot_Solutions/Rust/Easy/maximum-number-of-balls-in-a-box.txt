Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut n = i;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        map.values().max().unwrap().clone()

=======

        let mut map = std::collections::HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut n = i;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        *map.values().max().unwrap()
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut num = i;
            while num > 0 {
                sum += num % 10;
                num /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        let mut max = 0;
        for (_, v) in map {
            max = max.max(v);
        }
        max

=======

        let mut map = std::collections::HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut num = i;
            while num > 0 {
                sum += num % 10;
                num /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        map.values().max().unwrap().clone()
    }
}

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut n = i;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        *map.values().max().unwrap()

=======

        let mut map = std::collections::HashMap::new();
        let mut max = 0;
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut n = i;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            let count = map.entry(sum).or_insert(0);
            *count += 1;
            if *count > max {
                max = *count;
            }
        }
        max

=======

        let mut map: HashMap<i32, i32> = HashMap::new();
        for i in low_limit..=high_limit {
            let mut sum = 0;
            let mut j = i;
            while j > 0 {
                sum += j % 10;
                j /= 10;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        map.values().max().unwrap().clone()

=======

        let mut boxes = vec![0; 46];
        for n in low_limit..=high_limit {
            let mut sum = 0;
            let mut n = n;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            boxes[sum as usize] += 1;
        }
        boxes.into_iter().max().unwrap()

=======

        let mut boxs = vec![0; 46];
        for i in low_limit..=high_limit {
            let mut num = i;
            let mut sum = 0;
            while num > 0 {
                sum += num % 10;
                num /= 10;
            }
            boxs[sum as usize] += 1;
        }
        return *boxs.iter().max().unwrap();

=======

        let mut ball_count = vec![0;46];
        for i in low_limit..high_limit+1{
            let mut sum = 0;
            let mut j = i;
            while j > 0{
                sum += j % 10;
                j /= 10;
            }
            ball_count[sum as usize] += 1;
        }
        ball_count.into_iter().max().unwrap()
