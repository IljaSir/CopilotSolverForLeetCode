Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + nums[i];
        }
        for i in 0..n {
            for j in i + 2..n + 1 {
                if sum[j] - sum[i] == sum[i + 1] - sum[0] {
                    return true;
                }
            }
        }
        false
    }
}

=======

        let n = nums.len();
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + nums[i];
        }
        for i in 0..n - 1 {
            for j in i + 2..n + 1 {
                if sum[j] - sum[i] == sum[i + 1] - sum[0] {
                    return true;
                }
            }
        }
        false
    }
}

=======

        let mut sum = 0;
        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in 0..nums.len() {
            sum += nums[i];
            if i > 0 && sum == 0 {
                return true;
            }
            if map.contains_key(&sum) {
                if i - map.get(&sum).unwrap() > 1 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false
    }
}

=======

        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if i > 0 && sum == 0 {
                return true;
            }
            if map.contains_key(&sum) {
                return true;
            } else {
                map.insert(sum, i);
            }
        }
        false
    }
}

=======

        let mut sum: i32 = 0;
        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in 0..nums.len() {
            sum += nums[i];
            if map.contains_key(&sum) {
                if i - map[&sum] > 1 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false

=======

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            sum += nums[i];
            if sum == 0 || map.contains_key(&sum) {
                return true;
            } else {
                map.insert(sum, i);
            }
        }
        false
    }
}

=======

        let mut s = 0;
        let mut m = std::collections::HashMap::new();
        for i in 0..nums.len() {
            s += nums[i];
            if m.contains_key(&s) {
                if i - m[&s] >= 2 {
                    return true;
                }
            } else {
                m.insert(s, i);
            }
        }
        false
    }
}

=======

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            sum += nums[i];
            if i > 0 {
                if sum == 0 || map.contains_key(&sum) {
                    return true;
                }
                map.insert(sum, i);
            }
        }
        false

=======

        let mut s = 0;
        let mut h = std::collections::HashMap::new();
        for i in 0..nums.len() {
            s += nums[i];
            if h.contains_key(&s) {
                if i - h[&s] > 1 {
                    return true;
                }
            } else {
                h.insert(s, i);
            }
        }
        false
    }
}

=======

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            sum += nums[i];
            if sum == 0 || (map.contains_key(&sum) && i - map.get(&sum).unwrap() > 1) {
                return true;
            } else if !map.contains_key(&sum) {
                map.insert(sum, i);
            }
        }
        false
    }
}
