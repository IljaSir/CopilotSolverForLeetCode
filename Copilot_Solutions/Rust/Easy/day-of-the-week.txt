Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut days = 0;
        for i in 1971..year {
            if i % 4 == 0 && (i % 100 != 0 || i % 400 == 0) {
                days += 366;
            } else {
                days += 365;
            }
        }
        let mut months = vec![31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) {
            months[1] = 29;
        }
        for i in 0..month - 1 {
            days += months[i as usize];
        }
        days += day;
        days %= 7;
        let mut res = vec!["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        res[days as usize].to_string()

=======

        let mut year = year;
        let mut month = month;
        if month == 1 || month == 2 {
            month += 12;
            year -= 1;
        }
        let c = year / 100;
        let y = year % 100;
        let w = (c / 4) - 2 * c + y + (y / 4) + (13 * (month + 1) / 5) + day - 1;
        let mut w = w % 7;
        if w < 0 {
            w += 7;
        }
        match w {
            0 => "Sunday".to_string(),
            1 => "Monday".to_string(),
            2 => "Tuesday".to_string(),
            3 => "Wednesday".to_string(),
            4 => "Thursday".to_string(),
            5 => "Friday".to_string(),
            6 => "Saturday".to_string(),
            _ => "error".to_string(),
        }

=======

        let mut days = vec!["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        let mut months = vec![31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        let mut sum = 0;
        let mut y = 1971;
        while y < year {
            if y % 4 == 0 && (y % 100 != 0 || y % 400 == 0) {
                sum += 366;
            } else {
                sum += 365;
            }
            y += 1;
        }
        let mut m = 0;
        while m < month - 1 {
            if m == 1 && year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) {
                sum += 29;
            } else {
                sum += months[m as usize];
            }
            m += 1;
        }
        sum += day;
        days[(sum + 4) as usize % 7].to_string()
    }
}

=======

        let mut days = 0;
        for y in 1971..year {
            days += if Self::is_leap(y) {366} else {365};
        }
        for m in 1..month {
            days += match m {
                4 | 6 | 9 | 11 => 30,
                2 => if Self::is_leap(year) {29} else {28},
                _ => 31,
            };
        }
        days += day - 1;
        let week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        week[(days % 7) as usize].to_string()

=======

        let mut days = 0;
        let mut y = 1971;
        while y < year {
            days += if Solution::is_leap_year(y) { 366 } else { 365 };
            y += 1;
        }
        let mut m = 1;
        while m < month {
            days += Solution::days_in_month(m, year);
            m += 1;
        }
        days += day - 1;
        let d = days % 7;
        match d {
            0 => "Sunday".to_string(),
            1 => "Monday".to_string(),
            2 => "Tuesday".to_string(),
            3 => "Wednesday".to_string(),
            4 => "Thursday".to_string(),
            5 => "Friday".to_string(),
            6 => "Saturday".to_string(),
            _ => unreachable!(),
        }
    }
    
    pub fn days_in_month(month: i32, year: i32) -> i32 {
        match month {
            1 | 3 | 5 | 7 | 8 | 10 | 12 => 31,
            4 | 6 | 9 | 11 => 30,
            2 => if Solution::is_leap_year(year) { 29 } else { 28 },
            _ => unreachable!(),
        }

=======

        
    }
}

=======

        let mut y = year;
        let mut m = month;
        let mut d = day;
        if month < 3 {
            y -= 1;
            m += 12;
        }
        let mut w = y + y/4 - y/100 + y/400 + (13*m+8)/5 + d;
        w %= 7;
        match w {
            0 => "Sunday".to_string(),
            1 => "Monday".to_string(),
            2 => "Tuesday".to_string(),
            3 => "Wednesday".to_string(),
            4 => "Thursday".to_string(),
            5 => "Friday".to_string(),
            6 => "Saturday".to_string(),
            _ => String::from(""),
        }

=======

        let mut days = vec!["Sunday".to_string(),"Monday".to_string(),"Tuesday".to_string(),"Wednesday".to_string(),"Thursday".to_string(),"Friday".to_string(),"Saturday".to_string()];
        let mut year = year;
        let mut month = month;
        let mut day = day;
        if month == 1 || month == 2 {
            month += 12;
            year -= 1;
        }
        let week = (day + 2 * month + 3 * (month + 1) / 5 + year + year / 4 - year / 100 + year / 400) % 7;
        days[week as usize].clone()
