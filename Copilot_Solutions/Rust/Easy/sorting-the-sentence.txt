Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut words = s.split_whitespace().collect::<Vec<&str>>();
        words.sort_by(|a, b| a.chars().last().unwrap().cmp(&b.chars().last().unwrap()));
        words.iter().map(|w| w[..w.len() - 1].to_string()).collect::<Vec<String>>().join(" ")
    }
}

=======

        let mut words = s.split(" ").collect::<Vec<_>>();
        words.sort_by(|a, b| a[a.len() - 1..].cmp(&b[b.len() - 1..]));
        words.iter().map(|w| w[..w.len() - 1].to_string()).collect::<Vec<_>>().join(" ")

=======

        let mut words = s.split(' ').collect::<Vec<&str>>();
        words.sort_by(|a, b| a.chars().last().unwrap().cmp(&b.chars().last().unwrap()));
        words.iter().map(|s| s[..s.len()-1].to_string()).collect::<Vec<String>>().join(" ")
    }
}

=======

        let mut words = s.split(' ').collect::<Vec<&str>>();
        words.sort_by_key(|w| w.as_bytes()[w.len() - 1]);
        words.iter().map(|w| &w[..w.len() - 1]).collect::<Vec<&str>>().join(" ")

=======

        let mut words: Vec<String> = s.split_whitespace().map(|w| w.to_string()).collect();
        words.sort_by_key(|w| w.pop().unwrap());
        words.join(" ")

=======

        let mut words = s.split(" ").collect::<Vec<&str>>();
        words.sort_by_key(|word| word.chars().last().unwrap());
        words.iter().map(|word| &word[0..word.len()-1]).collect::<Vec<&str>>().join(" ")

=======

        let mut words: Vec<String> = s.split_whitespace().map(|w| w.to_string()).collect();
        words.sort_by(|a, b| {
            let a = &a[a.len()-1..];
            let b = &b[b.len()-1..];
            a.cmp(b)
        });
        words.iter().map(|w| w[0..w.len()-1].to_string()).collect::<Vec<String>>().join(" ")
    }
}

=======

        let mut words: Vec<String> = vec!["".to_string(); 10];
        for word in s.split(" ") {
            let mut chars = word.chars();
            let mut ch = chars.next_back().unwrap();
            let mut num = 0;
            while ch.is_digit(10) {
                num += (ch as u8 - '0' as u8) as usize;
                num *= 10;
                ch = chars.next_back().unwrap();
            }
            num /= 10;
            words[num] = format!("{}{}", ch, chars.as_str());
        }
        words[1..].join(" ")
    }
}

=======

        let mut words = s.split(" ");
        let mut ret = vec![];
        while let Some(word) = words.next() {
            let mut chars = word.chars();
            let mut num = 0;
            while let Some(c) = chars.next() {
                if c.is_digit(10) {
                    num = c.to_digit(10).unwrap();
                } else {
                    ret.push((num, c.to_string()));
                }
            }
        }
        ret.sort_by(|a, b| a.0.cmp(&b.0));
        let mut result = String::new();
        for (_, word) in ret {
            result.push_str(&word);
            result.push(' ');
        }
        result.pop();
        result
    }
}
