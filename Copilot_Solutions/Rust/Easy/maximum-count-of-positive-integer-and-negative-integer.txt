Synthesizing 10/10 solutions

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] >= 0 {
                pos += 1;
                neg = 0;
                if pos > max {
                    max = pos;
                }
            } else {
                neg += 1;
                pos = 0;
                if neg > max {
                    max = neg;
                }
            }
        }
        max

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] > 0 {
                pos += 1;
            }
            if nums[i] < 0 {
                neg += 1;
            }
            if nums[i] == 0 {
                if pos > neg {
                    neg = 0;
                } else {
                    pos = 0;
                }
            }
            if pos > max {
                max = pos;
            }
            if neg > max {
                max = neg;
            }
        }
        max

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] > 0 {
                pos += 1;
                neg = 0;
            } else if nums[i] < 0 {
                neg += 1;
                pos = 0;
            } else {
                pos = 0;
                neg = 0;
            }
            if pos > max {
                max = pos;
            }
            if neg > max {
                max = neg;
            }
        }
        max as i32
    }
}

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] > 0 {
                pos += 1;
                neg = 0;
            } else if nums[i] < 0 {
                pos = 0;
                neg += 1;
            } else {
                pos = 0;
                neg = 0;
            }
            max = max.max(pos).max(neg);
        }
        max

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] < 0 {
                neg += 1;
                pos = 0;
            } else if nums[i] > 0 {
                pos += 1;
                neg = 0;
            } else {
                pos = 0;
                neg = 0;
            }
            if pos > max {
                max = pos;
            }
            if neg > max {
                max = neg;
            }
        }
        max
    }
}

=======

        let mut n = 0;
        let mut p = 0;
        for i in nums {
            if i < 0 {
                n += 1;
            } else {
                p += 1;
            }
        }
        if n > p {
            n
        } else {
            p
        }

=======

        let mut pos = 0;
        let mut neg = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] < 0 {
                if pos > 0 {
                    max = std::cmp::max(max, pos);
                    pos = 0;
                }
                neg += 1;
            } else if nums[i] > 0 {
                if neg > 0 {
                    max = std::cmp::max(max, neg);
                    neg = 0;
                }
                pos += 1;
            } else {
                max = std::cmp::max(max, neg);
                max = std::cmp::max(max, pos);
                neg = 0;
                pos = 0;
            }
        }
        if pos > 0 {
            max = std::cmp::max(max, pos);
        }
        if neg > 0 {
            max = std::cmp::max(max, neg);
        }
        max
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] >= 0 {
                count += 1;
            } else {
                max = std::cmp::max(count, max);
                count = 0;
            }
        }
        std::cmp::max(count, max)
    }
}

=======

        nums.iter().filter(|&n| n < &0).count().max(nums.iter().filter(|&n| n > &0).count()) as i32

=======

        let mut count = 0;
        let mut max = 0;
        let mut prev = 0;
        for i in nums {
            if i >= 0 {
                if prev < 0 {
                    max = max.max(count);
                    count = 0;
                }
                count += 1;
            } else {
                if prev >= 0 {
                    max = max.max(count);
                    count = 0;
                }
                count += 1;
            }
            prev = i;
        }
        max.max(count)
