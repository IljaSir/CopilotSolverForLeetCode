Synthesizing 10/10 solutions (Duplicates hidden)

=======

        s.split_whitespace()
            .map(|s| s.chars().rev().collect::<String>())
            .collect::<Vec<String>>()
            .join(" ")

=======

        s.split_whitespace().map(|word| word.chars().rev().collect::<String>()).collect::<Vec<String>>().join(" ")

=======

        let mut res = String::new();
        let mut temp = String::new();
        for c in s.chars() {
            if c == ' ' {
                res.push_str(&(temp.chars().rev().collect::<String>()));
                res.push(' ');
                temp.clear();
            } else {
                temp.push(c);
            }
        }
        res.push_str(&(temp.chars().rev().collect::<String>()));
        res

=======

        let mut res = String::new();
        for word in s.split_whitespace() {
            let mut chars: Vec<char> = word.chars().collect();
            chars.reverse();
            res.push_str(&chars.iter().collect::<String>());
            res.push(' ');
        }
        res.pop();
        res

=======

        let mut result = String::new();
        let mut words = s.split_whitespace();
        while let Some(word) = words.next() {
            result.push_str(&word.chars().rev().collect::<String>());
            if let Some(_) = words.next() {
                result.push(' ');
            }
        }
        result
    }
}

=======

        let mut buf = String::new();
        let mut word = Vec::new();
        for c in s.chars() {
            if c == ' ' {
                word.reverse();
                buf.push_str(&word.iter().collect::<String>());
                buf.push(' ');
                word.clear();
            } else {
                word.push(c);
            }
        }
        word.reverse();
        buf.push_str(&word.iter().collect::<String>());
        buf
    }
}

=======

        let mut s = s;
        let mut result = String::new();
        while let Some(index) = s.find(' ') {
            let word = s.drain(..index + 1).collect::<String>();
            result.push_str(&word.chars().rev().collect::<String>());
        }
        if !s.is_empty() {
            result.push_str(&s.chars().rev().collect::<String>());
        }
        result

=======

        let mut result = "".to_string();
        let mut words = s.split(" ");
        for word in words {
            let mut chars = word.chars();
            let mut chars_vec: Vec<char> = Vec::new();
            for char in chars {
                chars_vec.push(char);
            }
            chars_vec.reverse();
            let mut chars_str = "".to_string();
            for char in chars_vec {
                chars_str.push(char);
            }
            result.push_str(&chars_str);
            result.push_str(" ");
        }
        result.pop();
        result
    }
}
