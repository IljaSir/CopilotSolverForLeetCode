Synthesizing 10/10 solutions

=======

        let mut s = s.chars().collect::<Vec<_>>();
        s.sort();
        let mut res = Vec::new();
        while !s.is_empty() {
            let mut i = 0;
            while i < s.len() {
                if i == 0 || s[i] != s[i - 1] {
                    res.push(s[i]);
                }
                i += 1;
            }
            s.drain(0..i);
            let mut i = s.len();
            while i > 0 {
                if i == s.len() || s[i] != s[i - 1] {
                    res.push(s[i - 1]);
                }
                i -= 1;
            }
            s.drain(i..s.len());
        }
        res.iter().collect()

=======

        let mut s = s.into_bytes();
        s.sort();
        let mut result = Vec::new();
        let mut i = 0;
        while i < s.len() {
            let mut j = i + 1;
            while j < s.len() && s[j] == s[i] {
                j += 1;
            }
            result.push(s[i]);
            i = j;
        }
        let mut i = result.len();
        while i > 0 {
            let mut j = i - 1;
            while j > 0 && result[j] == result[j - 1] {
                j -= 1;
            }
            result.push(result[j]);
            i = j;
        }
        unsafe { String::from_utf8_unchecked(result) }

=======

        let mut s: Vec<char> = s.chars().collect();
        s.sort();
        let mut ret = String::new();
        loop {
            let mut i = 0;
            while i < s.len() {
                ret.push(s[i]);
                s.remove(i);
            }
            if s.len() == 0 {
                break;
            }
            i = s.len() - 1;
            while i > 0 {
                ret.push(s[i]);
                s.remove(i);
                i -= 1;
            }
            if s.len() == 0 {
                break;
            }
        }
        ret

=======

        let mut s = s.into_bytes();
        s.sort_unstable();
        let mut res = Vec::new();
        let mut i = 0;
        while i < s.len() {
            let mut j = i;
            while j < s.len() && s[j] == s[i] {
                j += 1;
            }
            res.extend_from_slice(&s[i..j]);
            i = j;
        }
        let mut i = 0;
        let mut j = res.len();
        let mut res2 = Vec::new();
        while i < j {
            let mut k = i + 1;
            while k < j && res[k] == res[i] {
                k += 1;
            }
            res2.extend_from_slice(&res[i..k]);
            i = k;
        }
        res2.reverse();
        let mut i = 0;
        let mut j = res2.len();
        let mut res3 = Vec::new();
        while i < j {
            let mut k = i + 1;
            while k < j && res2[k] == res2[i] {
                k += 1;
            }
            res3.extend_from_slice(&res2[i..k]);
            i = k;
        }
        res3.reverse();
        res3.extend(res3.iter().rev());
        String::from_utf8(res3).unwrap()

=======

        let mut s = s.into_bytes();
        s.sort();
        let mut i = 0;
        let mut j = 0;
        let mut res = Vec::new();
        while i < s.len() {
            while j < s.len() && s[j] == s[i] {
                j += 1;
            }
            res.push(s[i]);
            i = j;
        }
        let mut i = res.len() - 2;
        let mut j = res.len() - 2;
        while i > 0 {
            while j > 0 && res[j] == res[i] {
                j -= 1;
            }
            res.push(res[i]);
            i = j;
        }
        String::from_utf8(res).unwrap()

=======

        let mut s = s;
        let mut v = vec![0; 26];
        let mut r = String::new();
        for c in s.chars() {
            v[c as usize - 'a' as usize] += 1;
        }
        while r.len() < s.len() {
            for i in 0..26 {
                if v[i] > 0 {
                    r.push((i + 'a' as usize) as u8 as char);
                    v[i] -= 1;
                }
            }
            for i in (0..26).rev() {
                if v[i] > 0 {
                    r.push((i + 'a' as usize) as u8 as char);
                    v[i] -= 1;
                }
            }
        }
        r

=======

        let mut s = s;
        let mut s = s.as_bytes_mut();
        s.sort();
        let mut s = String::from_utf8(s.to_vec()).unwrap();
        let mut result = String::new();
        let mut i = 0;
        while s.len() > 0 {
            let mut j = 0;
            let mut k = 0;
            let mut prev = s.chars().nth(0).unwrap();
            while j < s.len() {
                let c = s.chars().nth(j).unwrap();
                if prev != c {
                    result.push(prev);
                    prev = c;
                    k = j;
                }
                j += 1;
            }
            if prev != s.chars().nth(s.len() - 1).unwrap() {
                result.push(prev);
            }
            s.drain(k..);
            s = s.chars().rev().collect::<String>();
        }
        result
    }
}

=======

        let mut result = String::new();
        let mut s = s.chars().collect::<Vec<_>>();
        s.sort();
        let mut i = 0;
        while i < s.len() {
            let mut j = i;
            while j < s.len() && s[j] == s[i] {
                j += 1;
            }
            for k in i..j {
                result.push(s[k]);
            }
            i = j;
        }
        i = s.len();
        while i > 0 {
            let mut j = i;
            while j > 0 && s[j - 1] == s[i - 1] {
                j -= 1;
            }
            for k in (j..i).rev() {
                result.push(s[k]);
            }
            i = j;
        }
        result

=======

        let mut s = s;
        let mut v = s.as_bytes().to_vec();
        v.sort();
        s = String::from_utf8(v).unwrap();
        let mut result = String::new();
        loop {
            let mut last = ' ';
            let mut i = 0;
            while i < s.len() {
                let c = s.chars().nth(i).unwrap();
                if c != last {
                    result.push(c);
                    last = c;
                    s.remove(i);
                } else {
                    i += 1;
                }
            }
            if s.is_empty() {
                break;
            }
            last = ' ';
            i = s.len() - 1;
            while i < s.len() {
                let c = s.chars().nth(i).unwrap();
                if c != last {
                    result.push(c);
                    last = c;
                    s.remove(i);
                } else {
                    i -= 1;
                }
            }
            if s.is_empty() {
                break;
            }
        }
        result

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        chars.sort();
        let mut res = String::new();
        let mut flag = true;
        while !chars.is_empty() {
            let mut last = chars[0];
            res.push(last);
            chars.remove(0);
            let mut i = 0;
            while i < chars.len() {
                if flag && chars[i] > last || !flag && chars[i] < last {
                    last = chars[i];
                    res.push(last);
                    chars.remove(i);
                } else {
                    i += 1;
                }
            }
            flag = !flag;
        }
        res
