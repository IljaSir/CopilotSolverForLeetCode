Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        left as i32

=======

        let (mut left, mut right) = (0, nums.len() - 1);
        while left <= right {
            let mid = left + (right - left) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] > target {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        left as i32

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let mid = (l + r) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        l as i32

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = (left + right) / 2;
            if nums[mid] < target {
                left = mid + 1;
            } else if nums[mid] > target {
                right = mid - 1;
            } else {
                return mid as i32;
            }
        }
        left as i32

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut mid = 0;
        while left <= right {
            mid = (left + right) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        if nums[mid] < target {
            return (mid + 1) as i32;
        } else {
            return mid as i32;
        }
    }
}

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut mid = 0;
        while left <= right {
            mid = (left + right) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        left as i32

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = left + (right - left) / 2;
            if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        if nums[left] < target {
            left as i32 + 1
        } else {
            left as i32
        }

=======

        let mut i = 0;
        let mut j = nums.len() - 1;
        while i <= j {
            let m = (i + j) / 2;
            if nums[m] == target {
                return m as i32;
            }
            if nums[m] < target {
                i = m + 1;
            } else {
                j = m - 1;
            }
        }
        i as i32

=======

        if nums.is_empty() { return 0; }
        let mut low = 0;
        let mut high = nums.len() - 1;
        while low <= high {
            let mid = low + (high - low) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        low as i32

=======

        let mut l: i32 = 0;
        let mut r: i32 = nums.len() as i32 - 1;
        let mut mid = (l + r) / 2;
        while l <= r {
            if target < nums[mid as usize] {
                r = mid - 1;
            } else if target > nums[mid as usize] {
                l = mid + 1;
            } else {
                return mid;
            }
            mid = (l + r) / 2;
        }
        return l;
