Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let count = map.entry(c).or_insert(0);
            *count += 1;
        }
        let mut ans = 0;
        let mut has_odd = false;
        for (_, v) in map {
            if v % 2 == 0 {
                ans += v;
            } else {
                ans += v - 1;
                has_odd = true;
            }
        }
        if has_odd {
            ans + 1
        } else {
            ans
        }

=======

        let mut count = 0;
        let mut odd = false;
        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        for v in map.values() {
            if v % 2 == 0 {
                count += v;
            } else {
                count += v - 1;
                odd = true;
            }
        }
        if odd {
            count += 1;
        }
        count

=======

        let mut map = std::collections::HashMap::new();
        s.chars().for_each(|c| {
            *map.entry(c).or_insert(0) += 1;
        });
        let mut result = 0;
        let mut has_odd = false;
        for (_, v) in map {
            if v % 2 == 0 {
                result += v;
            } else {
                has_odd = true;
                result += v - 1;
            }
        }
        if has_odd {
            result += 1;
        }
        result

=======

        let mut count = [0; 128];
        for c in s.as_bytes() {
            count[*c as usize] += 1;
        }
        let mut ans = 0;
        for c in count.iter() {
            ans += c / 2 * 2;
            if ans % 2 == 0 && *c % 2 == 1 {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        let mut flag = false;
        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let counter = map.entry(c).or_insert(0);
            *counter += 1;
        }
        for (_, v) in map.iter() {
            if v % 2 == 0 {
                count += v;
            } else {
                flag = true;
                count += v - 1;
            }
        }
        if flag {
            count += 1;
        }
        count

=======

        let mut cnt = [0; 128];
        for c in s.chars() {
            cnt[c as usize] += 1;
        }
        let mut odd = 0;
        for c in cnt.iter() {
            if c % 2 == 1 {
                odd += 1;
            }
        }
        s.len() as i32 - odd + (odd > 0) as i32

=======

        let mut count = 0;
        let mut is_odd = false;
        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let counter = map.entry(c).or_insert(0);
            *counter += 1;
        }
        for (_, v) in map {
            if v % 2 == 0 {
                count += v;
            } else {
                count += v - 1;
                is_odd = true;
            }
        }
        if is_odd {
            count += 1;
        }
        count

=======

        let mut chars = vec![0; 128];
        for c in s.chars() {
            chars[c as usize] += 1;
        }
        let mut result = 0;
        for c in chars {
            if c % 2 == 0 {
                result += c;
            } else {
                result += c - 1;
                if result % 2 == 0 {
                    result += 1;
                }
            }
        }
        result

=======

        let mut counts = [0; 52];
        for c in s.chars() {
            let i = if c.is_ascii_lowercase() {
                c as u8 - 'a' as u8
            } else {
                c as u8 - 'A' as u8 + 26
            };
            counts[i as usize] += 1;
        }
        let mut longest = 0;
        let mut has_odd = false;
        for &count in counts.iter() {
            if count % 2 == 0 {
                longest += count;
            } else {
                has_odd = true;
                longest += count - 1;
            }
        }
        if has_odd {
            longest + 1
        } else {
            longest
        }

=======

        let mut count = 0;
        let mut table = [0; 128];
        for c in s.chars() {
            table[c as usize] += 1;
        }
        for i in 0..table.len() {
            count += table[i] / 2 * 2;
            if count % 2 == 0 && table[i] % 2 == 1 {
                count += 1;
            }
        }
        count
