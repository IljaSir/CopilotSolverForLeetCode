Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in left..=right {
            let bits = i.count_ones();
            if bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19 {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for i in left..=right {
            let n = i.count_ones();
            if n == 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19 {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        for i in left..=right {
            let bits = i.count_ones();
            if bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19 {
                ans += 1;
            }
        }
        ans

=======

        let mut prime = vec![2, 3, 5, 7, 11, 13, 17, 19];
        let mut count = 0;
        for i in left..=right {
            let mut num = i;
            let mut bit = 0;
            while num > 0 {
                if num & 1 == 1 {
                    bit += 1;
                }
                num >>= 1;
            }
            if prime.contains(&bit) {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for i in left..=right {
            let mut num = i;
            let mut bits = 0;
            while num > 0 {
                if num & 1 == 1 {
                    bits += 1;
                }
                num >>= 1;
            }
            if bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19 {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for i in left..=right {
            let mut j = i;
            let mut bits = 0;
            while j > 0 {
                bits += j & 1;
                j >>= 1;
            }
            if bits == 2 || bits == 3 || bits == 5 || bits == 7 || bits == 11 || bits == 13 || bits == 17 || bits == 19 {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        for i in left..=right {
            let mut count = 0;
            let mut j = i;
            while j > 0 {
                count += j & 1;
                j >>= 1;
            }
            if count == 2 || count == 3 || count == 5 || count == 7 || count == 11 || count == 13 || count == 17 || count == 19 {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        for i in left..=right {
            let mut set_bits = 0;
            let mut n = i;
            while n > 0 {
                set_bits += n & 1;
                n >>= 1;
            }
            count += match set_bits {
                2 | 3 | 5 | 7 | 11 | 13 | 17 | 19 => 1,
                _ => 0,
            };
        }
        count

=======

        let mut count = 0;
        for i in left..=right {
            let mut num = i;
            let mut num_of_one = 0;
            while num > 0 {
                num_of_one += num & 1;
                num >>= 1;
            }
            if num_of_one == 2 || num_of_one == 3 || num_of_one == 5 || num_of_one == 7 || num_of_one == 11 || num_of_one == 13 || num_of_one == 17 || num_of_one == 19 {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut i = left;
        while i <= right {
            let mut n = i;
            let mut count_1 = 0;
            while n > 0 {
                count_1 += n & 1;
                n = n >> 1;
            }
            if count_1 == 2 || count_1 == 3 || count_1 == 5 || count_1 == 7 || count_1 == 11 || count_1 == 13 || count_1 == 17 || count_1 == 19 {
                count += 1;
            }
            i += 1;
        }
        count
