Synthesizing 10/10 solutions

=======

        let mut max = 0;
        for sentence in sentences {
            let words: Vec<&str> = sentence.split(" ").collect();
            if words.len() > max {
                max = words.len();
            }
        }
        max as i32
    }
}

=======

        let mut max = 0;
        for sentence in sentences {
            let words = sentence.split(' ').collect::<Vec<&str>>();
            if words.len() > max {
                max = words.len();
            }
        }
        max as i32
    }
}

=======

        let mut max = 0;
        for s in sentences {
            let mut count = 0;
            for c in s.chars() {
                if c == ' ' {
                    count += 1;
                }
            }
            if count > max {
                max = count;
            }
        }
        max + 1

=======

        let mut max = 0;
        for sentence in sentences {
            let words = sentence.split(" ").count();
            if words > max {
                max = words;
            }
        }
        max as i32

=======

        let mut max = 0;
        for sentence in sentences {
            let word_count = sentence.split(" ").count();
            if word_count > max {
                max = word_count;
            }
        }
        max as i32
    }
}

=======

        let mut max_words = 0;
        for sentence in sentences.iter() {
            let words = sentence.split(" ").count();
            if words > max_words {
                max_words = words;
            }
        }
        max_words as i32
    }
}

=======

        let mut max = 0;
        for sentence in sentences {
            let words = sentence.split(" ");
            let mut count = 0;
            for _ in words {
                count += 1;
            }
            if count > max {
                max = count;
            }
        }
        return max as i32;
    }
}

=======

        sentences.into_iter().map(|s| s.split(' ').count() as i32).max().unwrap()
    }
}

=======

        sentences.iter().map(|x| x.split_whitespace().count() as i32).max().unwrap()
    }
}

=======

        let mut max = 0;
        for s in sentences {
            let mut count = 0;
            for _ in s.split_whitespace() {
                count += 1;
            }
            max = std::cmp::max(max, count);
        }
        max
    }
}
