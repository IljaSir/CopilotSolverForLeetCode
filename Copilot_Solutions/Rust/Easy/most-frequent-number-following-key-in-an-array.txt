Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut cnt = 0;
        for i in 0..nums.len() - 1 {
            if nums[i] == key {
                let mut j = i + 1;
                while j < nums.len() && nums[j] == nums[i + 1] {
                    j += 1;
                }
                if j - i > cnt {
                    ans = nums[i + 1];
                    cnt = j - i;
                }
            }
        }
        ans
    }
}

=======

        let mut ans = 0;
        let mut max = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                count = 0;
            } else if count == 0 {
                count = 1;
                ans = nums[i];
            } else if nums[i] == ans {
                count += 1;
            } else {
                count -= 1;
            }
            if count > max {
                max = count;
                ans = nums[i];
            }
        }
        ans

=======

        let mut res = 0;
        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == key && i < nums.len() - 1 {
                let mut j = i + 1;
                while j < nums.len() && nums[j] != key {
                    j += 1;
                }
                if j < nums.len() {
                    let mut k = j + 1;
                    while k < nums.len() && nums[k] == nums[j] {
                        k += 1;
                    }
                    if k - j > count {
                        count = k - j;
                        res = nums[j];
                    }
                    i = k;
                } else {
                    break;
                }
            } else {
                i += 1;
            }
        }
        res
    }
}

=======

        let mut target = 0;
        let mut count = 0;
        let mut temp = 0;
        for i in 0..nums.len() - 1 {
            if nums[i] == key {
                if nums[i + 1] == target {
                    temp += 1;
                } else {
                    temp = 1;
                }
                target = nums[i + 1];
                if temp > count {
                    count = temp;
                }
            }
        }
        target

=======

        let mut count = 0;
        let mut max = 0;
        let mut max_num = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                count = 0;
                for j in i+1..nums.len() {
                    if nums[j] != key {
                        count += 1;
                    } else {
                        break;
                    }
                }
                if count > max {
                    max = count;
                    max_num = nums[i+1];
                }
            }
        }
        max_num

=======

        let mut max = 0;
        let mut max_count = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                if count > max_count {
                    max_count = count;
                    max = nums[i - 1];
                }
                count = 0;
            } else {
                count += 1;
            }
        }
        if count > max_count {
            max = nums[nums.len() - 1];
        }
        max

=======

        let mut count = 0;
        let mut max = 0;
        let mut max_num = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                count = 0;
                for j in (i + 1)..nums.len() {
                    if nums[j] == nums[i] {
                        break;
                    } else {
                        count += 1;
                    }
                }
                if count > max {
                    max = count;
                    max_num = nums[i];
                }
            }
        }
        max_num

=======

        let mut count = 0;
        let mut target = 0;
        let mut temp = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                temp = 0;
                for j in i+1..nums.len() {
                    if nums[j] == target {
                        temp += 1;
                    }
                    if temp > count {
                        count = temp;
                        target = nums[j];
                    }
                }
            }
        }
        target
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        let mut max_num = 0;
        for i in 0..nums.len() {
            if nums[i] == key {
                for j in i + 1..nums.len() {
                    if nums[j] == key {
                        break;
                    }
                    if nums[j] != nums[i] {
                        count += 1;
                    }
                    if count > max {
                        max = count;
                        max_num = nums[j];
                    }
                }
                count = 0;
            }
        }
        return max_num;

=======

        let mut counts = std::collections::HashMap::new();
        let mut last_key = None;
        for i in 0..nums.len() {
            if last_key == Some(key) && nums[i] != key {
                *counts.entry(nums[i]).or_insert(0) += 1;
            }
            if nums[i] == key {
                last_key = Some(key);
            } else {
                last_key = None;
            }
        }
        let mut max = (0, 0);
        for (k, v) in counts {
            if v > max.1 {
                max = (k, v);
            }
        }
        max.0
