Synthesizing 10/10 solutions

=======

        let mut set = std::collections::HashSet::new();
        for s in arr {
            set.insert(s);
        }
        let mut v = set.into_iter().collect::<Vec<String>>();
        v.sort();
        if v.len() < k as usize {
            return "".to_string();
        }
        v[k as usize - 1].to_string()
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for s in arr {
            let c = map.entry(s).or_insert(0);
            *c += 1;
        }
        let mut v = map.into_iter().collect::<Vec<(String, i32)>>();
        v.sort_by(|a, b| a.1.cmp(&b.1));
        if v.len() < k as usize {
            return String::new();
        }
        v[k as usize - 1].0

=======

        let mut map = std::collections::HashMap::new();
        for s in arr {
            let count = map.entry(s).or_insert(0);
            *count += 1;
        }
        let mut v = map.into_iter().filter(|(_, v)| *v == 1).collect::<Vec<_>>();
        v.sort_by(|a, b| a.0.cmp(&b.0));
        if v.len() < k as usize {
            return String::new();
        }
        v[k as usize - 1].0

=======

        let mut map = std::collections::HashMap::new();
        for s in arr {
            let count = map.entry(s).or_insert(0);
            *count += 1;
        }
        let mut v = map.into_iter().filter(|(_, count)| *count == 1).collect::<Vec<_>>();
        v.sort_by_key(|(s, _)| s.clone());
        if v.len() < k as usize {
            return "".to_string();
        }
        v[k as usize - 1].0

=======

        let mut map = std::collections::HashMap::new();
        for s in arr {
            *map.entry(s).or_insert(0) += 1;
        }
        let mut vec = map.into_iter().filter(|(_, v)| *v == 1).collect::<Vec<_>>();
        vec.sort_by_key(|(k, _)| k.clone());
        if vec.len() < k as usize {
            return "".to_string();
        }
        vec[k as usize - 1].0
    }
}

=======

        let mut count = std::collections::HashMap::new();
        for s in arr {
            let c = count.entry(s).or_insert(0);
            *c += 1;
        }
        let mut count = count.into_iter().collect::<Vec<_>>();
        count.sort_by(|a, b| a.0.cmp(&b.0));
        count.sort_by(|a, b| b.1.cmp(&a.1));
        if count.len() < k as usize {
            return "".to_string();
        }
        count[k as usize - 1].0.to_string()

=======

        let mut map = std::collections::HashMap::new();
        for s in arr {
            map.entry(s).and_modify(|v| *v += 1).or_insert(1);
        }
        let mut v = map.iter().filter(|(_, &v)| v == 1).collect::<Vec<_>>();
        v.sort_by(|a, b| a.0.cmp(b.0));
        if v.len() < k as usize {
            return "".to_string();
        }
        v[k as usize - 1].0.to_string()

=======

        let mut distinct = std::collections::HashSet::new();
        for s in arr {
            distinct.insert(s);
            if distinct.len() == k as usize {
                return distinct.iter().next().unwrap().clone();
            }
        }
        "".to_string()
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = map.iter().collect::<Vec<_>>();
        v.sort_by(|a, b| a.1.cmp(&b.1));
        if k as usize > v.len() {
            return "".to_string();
        }
        v[k as usize - 1].0.to_string()
    }
}

=======

        arr.iter().filter(|s| arr.iter().filter(|t| s == t).count() == 1).nth((k-1) as usize).map(|s| s.clone()).unwrap_or("".to_string())
