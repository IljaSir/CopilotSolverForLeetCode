Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let count = map.entry(c).or_insert(0);
            *count += 1;
            if *count == 2 {
                return c;
            }
        }
        '0'
    }
}

=======

        let mut chars: Vec<char> = s.chars().collect();
        chars.sort();
        for i in 0..chars.len() - 1 {
            if chars[i] == chars[i + 1] {
                return chars[i];
            }
        }
        return ' ';
    }
}

=======

        let mut seen = vec![false; 26];
        for c in s.chars() {
            let idx = (c as u8 - 'a' as u8) as usize;
            if seen[idx] {
                return c;
            }
            seen[idx] = true;
        }
        ' '
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let count = map.entry(c).or_insert(0);
            *count += 1;
        }
        for (c, count) in map {
            if count > 1 {
                return c;
            }
        }
        ' '
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            if let Some(x) = map.get(&c) {
                return c;
            } else {
                map.insert(c, 1);
            }
        }
        ' '
    }
}

=======

        let mut v = vec![0; 26];
        for c in s.chars() {
            let i = (c as u8 - 'a' as u8) as usize;
            if v[i] == 1 {
                return c;
            }
            v[i] += 1;
        }
        'a'
    }
}

=======

        let mut seen: [bool; 26] = [false; 26];
        for c in s.chars() {
            let idx = (c as u8 - 97) as usize;
            if seen[idx] {
                return c;
            } else {
                seen[idx] = true;
            }
        }
        ' '
    }
}

=======

        let mut res = ' ';
        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            if map.contains_key(&c) {
                res = c;
                break;
            } else {
                map.insert(c, 1);
            }
        }
        res
    }
}

=======

        let mut letters = vec![0; 26];
        for c in s.chars() {
            let i = c as usize - 'a' as usize;
            if letters[i] == 1 {
                return c;
            }
            letters[i] += 1;
        }
        ' '
    }
}

=======

        let mut a = s.chars().collect::<Vec<_>>();
        let mut b = a.clone();
        a.sort();
        b.sort();
        b.reverse();
        for i in 0..a.len()-1 {
            if a[i] == a[i+1] {
                return a[i];
            }
        }
        return b[0];
    }
}
