Synthesizing 10/10 solutions

=======

        let mut v = Vec::new();
        for i in 0..names.len() {
            v.push((names[i].clone(), heights[i]));
        }
        v.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                b.1.cmp(&a.1)
            }
        });
        v.iter().map(|x| x.0.clone()).collect()

=======

        let mut v: Vec<_> = names.iter().zip(heights.iter()).collect();
        v.sort_by(|a, b| b.1.cmp(a.1));
        v.iter().map(|x| x.0.to_string()).collect()

=======

        let mut names_heights = names
            .into_iter()
            .zip(heights)
            .collect::<Vec<(String, i32)>>();
        
        names_heights.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                b.1.cmp(&a.1)
            }
        });
        
        names_heights.into_iter().map(|x| x.0).collect::<Vec<String>>()

=======

        let mut sorted: Vec<(i32, String)> = heights.iter().zip(names.iter().map(|s| s.to_string())).collect();
        sorted.sort_by(|a, b| b.0.cmp(&a.0));
        sorted.iter().map(|s| s.1.to_owned()).collect()
    }
}

=======

        let mut names = names;
        let mut heights = heights;
        let mut res = vec![];
        for i in 0..heights.len() {
            for j in i..heights.len() {
                if heights[i] < heights[j] {
                    heights.swap(i, j);
                    names.swap(i, j);
                }
            }
        }
        for i in 0..heights.len() {
            res.push(names[i].clone());
        }
        res
    }
}

=======

        let mut result = names.clone();
        let mut sorted_heights = heights.clone();
        sorted_heights.sort();
        sorted_heights.reverse();
        for i in 0..sorted_heights.len() {
            let index = heights.iter().position(|&x| x == sorted_heights[i]).unwrap();
            result[i] = names[index].clone();
        }
        result
    }
}

=======

        let mut names_heights = names.iter().zip(heights.iter()).collect::<Vec<_>>();
        names_heights.sort_by_key(|&(_, &height)| height);
        names_heights.reverse();
        names_heights.into_iter().map(|(name, _)| name.to_string()).collect()
    }
}

=======

        let mut names = names;
        let mut heights = heights;
        let mut heights_names = vec![];
        for i in 0..heights.len() {
            heights_names.push((heights[i], names[i].clone()));
        }
        heights_names.sort_unstable_by(|a, b| b.cmp(&a));
        let mut result = vec![];
        for i in 0..heights.len() {
            result.push(heights_names[i].1);
        }
        result
    }
}

=======

        let mut names = names;
        let mut heights = heights;
        let mut res = vec![];
        let mut i = 0;
        while i < heights.len() {
            let mut j = i + 1;
            while j < heights.len() {
                if heights[i] < heights[j] {
                    heights.swap(i, j);
                    names.swap(i, j);
                }
                j += 1;
            }
            i += 1;
        }
        i = 0;
        while i < heights.len() {
            let mut j = i + 1;
            while j < heights.len() {
                if heights[i] == heights[j] {
                    if names[i] > names[j] {
                        names.swap(i, j);
                    }
                }
                j += 1;
            }
            i += 1;
        }
        i = 0;
        while i < heights.len() {
            res.push(names[i].clone());
            i += 1;
        }
        res
    }
}

=======

        let mut names: Vec<_> = names.into_iter().map(|n| n.as_str()).collect();
        let mut heights = heights;
        let mut idx = (0..names.len()).collect::<Vec<_>>();
        idx.sort_by_key(|&i| (heights[i], names[i]));
        idx.reverse();
        idx.into_iter().map(|i| names[i].to_string()).collect()
    }
}
