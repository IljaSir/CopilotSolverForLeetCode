Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            for j in 1..strs.len() {
                if strs[j].chars().nth(i).unwrap() < strs[j-1].chars().nth(i).unwrap() {
                    count += 1;
                    break;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            for j in 1..strs.len() {
                if strs[j].as_bytes()[i] < strs[j-1].as_bytes()[i] {
                    count += 1;
                    break;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            for j in 0..strs.len()-1 {
                if strs[j].as_bytes()[i] > strs[j+1].as_bytes()[i] {
                    count += 1;
                    break;
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            for j in 0..strs.len() - 1 {
                if strs[j].chars().nth(i) > strs[j + 1].chars().nth(i) {
                    count += 1;
                    break;
                }
            }
        }
        count

=======

        let mut cnt = 0;
        for i in 0..strs[0].len() {
            for j in 1..strs.len() {
                if strs[j].chars().nth(i).unwrap() < strs[j-1].chars().nth(i).unwrap() {
                    cnt += 1;
                    break;
                }
            }
        }
        cnt
    }
}

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            for j in 1..strs.len() {
                if strs[j].chars().nth(i) < strs[j - 1].chars().nth(i) {
                    count += 1;
                    break;
                }
            }
        }
        count

=======

        let mut cnt = 0;
        for i in 0..strs[0].len() {
            for j in 1..strs.len() {
                if strs[j].as_bytes()[i] < strs[j - 1].as_bytes()[i] {
                    cnt += 1;
                    break;
                }
            }
        }
        cnt
    }
}

=======

        let mut count = 0;
        for i in 0..strs[0].len() {
            let mut prev = '0';
            for j in 0..strs.len() {
                if prev > strs[j].chars().nth(i).unwrap() {
                    count += 1;
                    break;
                }
                prev = strs[j].chars().nth(i).unwrap();
            }
        }
        count

=======

        let mut result = 0;
        let mut strs = strs;
        for i in 0..strs[0].len() {
            for j in 0..strs.len() - 1 {
                if strs[j].as_bytes()[i] > strs[j + 1].as_bytes()[i] {
                    result += 1;
                    break;
                }
            }
        }
        result
    }
}
