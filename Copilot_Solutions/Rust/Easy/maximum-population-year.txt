Synthesizing 10/10 solutions

=======

        let mut years = vec![0; 101];
        for log in logs {
            years[(log[0] - 1950) as usize] += 1;
            years[(log[1] - 1950) as usize] -= 1;
        }
        let mut sum = 0;
        let mut max = 0;
        let mut max_year = 0;
        for (i, &year) in years.iter().enumerate() {
            sum += year;
            if sum > max {
                max = sum;
                max_year = i;
            }
        }
        max_year as i32 + 1950

=======

        let mut years = [0; 101];
        for log in logs {
            years[(log[0] - 1950) as usize] += 1;
            years[(log[1] - 1950) as usize] -= 1;
        }
        let mut max = 0;
        let mut max_year = 0;
        let mut count = 0;
        for i in 0..101 {
            count += years[i];
            if count > max {
                max = count;
                max_year = i;
            }
        }
        max_year as i32 + 1950

=======

        let mut v = vec![0; 101];
        for log in logs {
            v[(log[0] - 1950) as usize] += 1;
            v[(log[1] - 1950) as usize] -= 1;
        }
        let mut max = 0;
        let mut res = 0;
        let mut cur = 0;
        for i in 0..v.len() {
            cur += v[i];
            if cur > max {
                max = cur;
                res = i;
            }
        }
        res as i32 + 1950

=======

        let mut births = vec![0; 101];
        let mut deaths = vec![0; 101];
        for log in logs {
            births[(log[0] - 1950) as usize] += 1;
            deaths[(log[1] - 1950) as usize] += 1;
        }
        let mut max = 0;
        let mut max_year = 0;
        let mut current = 0;
        for year in 0..101 {
            current += births[year] - deaths[year];
            if current > max {
                max_year = year;
                max = current;
            }
        }
        max_year as i32 + 1950
    }
}

=======

        let mut year = vec![0; 101];
        for log in logs {
            year[log[0] as usize - 1950] += 1;
            year[log[1] as usize - 1950] -= 1;
        }
        let mut max = 0;
        let mut sum = 0;
        let mut ans = 1950;
        for i in 0..101 {
            sum += year[i];
            if sum > max {
                max = sum;
                ans = 1950 + i;
            }
        }
        ans

=======

        let mut birth = vec![0; 101];
        let mut death = vec![0; 101];
        for log in logs {
            birth[log[0] as usize - 1950] += 1;
            death[log[1] as usize - 1950] += 1;
        }
        let mut max = 0;
        let mut sum = 0;
        let mut year = 0;
        for i in 0..101 {
            sum += birth[i];
            sum -= death[i];
            if sum > max {
                max = sum;
                year = i;
            }
        }
        year as i32 + 1950

=======

        let mut years = vec![0; 101];
        for log in logs {
            for year in log[0] - 1950..log[1] - 1950 {
                years[year as usize] += 1;
            }
        }
        years.iter().enumerate().max_by_key(|&(_, &v)| v).unwrap().0 as i32 + 1950

=======

        let mut res = 0;
        let mut max = 0;
        let mut v = vec![0; 101];
        for log in logs {
            v[(log[0] - 1950) as usize] += 1;
            v[(log[1] - 1950) as usize] -= 1;
        }
        let mut cur = 0;
        for i in 0..101 {
            cur += v[i];
            if cur > max {
                max = cur;
                res = i;
            }
        }
        res as i32 + 1950

=======

        let mut year = 1950;
        let mut max = 0;
        let mut max_year = 0;
        while year <= 2050 {
            let mut count = 0;
            for log in &logs {
                if year >= log[0] && year < log[1] {
                    count += 1;
                }
            }
            if count > max {
                max = count;
                max_year = year;
            }
            year += 1;
        }
        max_year
    }
}

=======

        let mut years: Vec<i32> = Vec::new();
        for i in 0..logs.len() {
            let v = logs[i].clone();
            years.push(v[0]);
            years.push(v[1]);
        }
        years.sort();
        let mut max = 0;
        let mut result = 0;
        for i in 0..years.len() {
            let mut count = 0;
            for j in 0..logs.len() {
                let v = logs[j].clone();
                if years[i] >= v[0] && years[i] < v[1] {
                    count += 1;
                }
            }
            if count > max {
                max = count;
                result = years[i];
            }
        }
        result
    }
}
