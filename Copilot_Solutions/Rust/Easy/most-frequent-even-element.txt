Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for n in nums {
            if n % 2 == 0 {
                *map.entry(n).or_insert(0) += 1;
            }
        }
        let mut max = 0;
        let mut ret = -1;
        for (k, v) in map.iter() {
            if *v > max {
                max = *v;
                ret = *k;
            }
        }
        ret

=======

        let mut map = std::collections::HashMap::new();
        for &n in nums.iter() {
            if n % 2 == 0 {
                *map.entry(n).or_insert(0) += 1;
            }
        }
        let mut candidates = map.iter().map(|(&k, &v)| (k, v)).collect::<Vec<_>>();
        candidates.sort_by_key(|&(_, v)| std::cmp::Reverse(v));
        if candidates.len() == 0 {
            return -1;
        }
        candidates[0].0
    }
}

=======

        let mut even_count = std::collections::HashMap::new();
        for n in nums {
            if n % 2 == 0 {
                *even_count.entry(n).or_insert(0) += 1;
            }
        }
        if even_count.len() == 0 {
            return -1;
        }
        let mut max_count = 0;
        let mut max_num = 0;
        for (k, v) in even_count.iter() {
            if *v > max_count {
                max_count = *v;
                max_num = *k;
            } else if *v == max_count {
                max_num = std::cmp::min(max_num, *k);
            }
        }
        max_num

=======

        let mut map = std::collections::HashMap::new();
        let mut max = 0;
        let mut res = -1;
        for n in nums {
            if n % 2 == 0 {
                *map.entry(n).or_insert(0) += 1;
                if map[&n] > max {
                    max = map[&n];
                    res = n;
                } else if map[&n] == max && n < res {
                    res = n;
                }
            }
        }
        res

=======

        let mut count = vec![0; 100001];
        for n in nums {
            if n % 2 == 0 {
                count[n as usize] += 1;
            }
        }
        let mut max = 0;
        let mut ans = -1;
        for i in 0..100001 {
            if count[i] > max {
                ans = i as i32;
                max = count[i];
            }
        }
        ans

=======

        let mut counts = vec![0; 100001];
        for n in nums {
            if n % 2 == 0 {
                counts[n as usize] += 1;
            }
        }
        let mut max = 0;
        let mut max_index = -1;
        for i in 0..counts.len() {
            if counts[i] > max {
                max = counts[i];
                max_index = i as i32;
            }
        }
        max_index
    }
}

=======

        let mut map = std::collections::HashMap::new();
        let mut max = 0;
        for num in nums {
            if num % 2 == 0 {
                let count = map.entry(num).or_insert(0);
                *count += 1;
                if *count > max {
                    max = *count;
                }
            }
        }
        let mut result = -1;
        for (k, v) in map {
            if v == max {
                if result == -1 {
                    result = k;
                } else if k < result {
                    result = k;
                }
            }
        }
        result

=======

        let mut freq = std::collections::HashMap::new();
        for x in nums {
            if x % 2 == 0 {
                let count = freq.entry(x).or_insert(0);
                *count += 1;
            }
        }
        let mut max = 0;
        let mut res = -1;
        for (k, v) in freq {
            if v > max {
                max = v;
                res = k;
            } else if v == max && k < res {
                res = k;
            }
        }
        res

=======

        let mut even = Vec::new();
        for num in nums {
            if num % 2 == 0 {
                even.push(num);
            }
        }
        let mut map = std::collections::HashMap::new();
        for num in even {
            let count = map.entry(num).or_insert(0);
            *count += 1;
        }
        let mut max = 0;
        let mut result = -1;
        for (key, value) in map {
            if value > max || (value == max && key < result) {
                max = value;
                result = key;
            }
        }
        result
    }
}

=======

        let mut counts = [0; 100001];
        for &num in nums.iter() {
            counts[num as usize] += 1;
        }
        let mut max = 0;
        let mut result = -1;
        for i in 0..100001 {
            if i % 2 == 0 && counts[i] > max {
                max = counts[i];
                result = i as i32;
            }
        }
        result
