Synthesizing 10/10 solutions

=======

        for (i, c) in num.chars().rev().enumerate() {
            if c.to_digit(10).unwrap() % 2 != 0 {
                return num[..num.len() - i].to_string();
            }
        }
        "".to_string()

=======

        let mut ret = String::new();
        for c in num.chars() {
            if c == '1' || c == '3' || c == '5' || c == '7' || c == '9' {
                ret.push(c);
            }
        }
        ret

=======

        let mut i = num.len() - 1;
        while i > 0 {
            if num.as_bytes()[i] % 2 == 1 {
                return num[0..=i].to_string();
            }
            i -= 1;
        }
        String::from("")
    }
}

=======

        let mut result = String::new();
        for c in num.chars() {
            if c.to_digit(10).unwrap() % 2 == 1 {
                result.push(c);
            }
        }
        result
    }
}

=======

        let mut i = num.len();
        while i > 0 {
            if num[i-1..i].parse::<i32>().unwrap() % 2 == 1 {
                return num[..i].to_string();
            }
            i -= 1;
        }
        return "".to_string();

=======

        let mut chars = num.chars().collect::<Vec<char>>();
        let mut i = chars.len() - 1;
        while i > 0 && chars[i] as i32 % 2 == 0 {
            i -= 1;
        }
        if chars[i] as i32 % 2 == 0 {
            return "".to_string();
        }
        chars[0..i + 1].iter().collect::<String>()

=======

        let mut ans = String::new();
        for (i, c) in num.chars().enumerate() {
            if c.to_digit(10).unwrap() % 2 == 1 {
                ans = num[0..=i].to_string();
            }
        }
        ans
    }
}

=======

        let mut i = num.len();
        while i > 0 {
            let s = num.get(0..i).unwrap();
            if s.parse::<i32>().unwrap() % 2 == 1 {
                return s.to_string();
            }
            i -= 1;
        }
        "".to_string()

=======

        let mut num = num;
        let mut index = 0;
        for (i, c) in num.chars().enumerate() {
            if c.to_digit(10).unwrap() % 2 == 1 {
                index = i;
            }
        }
        if index == 0 {
            return "".to_string();
        }
        num.truncate(index + 1);
        num

=======

        let mut n = num.len();
        let mut res = String::new();
        let mut flag = false;
        for i in num.chars() {
            if i.to_digit(10).unwrap() % 2 == 1 {
                flag = true;
            }
            if flag {
                res.push(i);
            }
            n -= 1;
        }
        res
    }
}
