Synthesizing 9/10 solutions

=======

        let m = matrix.len();
        let n = matrix[0].len();
        let mut result = vec![vec![0; m]; n];
        for i in 0..m {
            for j in 0..n {
                result[j][i] = matrix[i][j];
            }
        }
        result

=======

        let mut result = vec![vec![0; matrix.len()]; matrix[0].len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                result[j][i] = matrix[i][j];
            }
        }
        result

=======

        let mut res = vec![vec![0; matrix.len()]; matrix[0].len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                res[j][i] = matrix[i][j];
            }
        }
        res

=======

        let mut ret = vec![vec![0; matrix.len()]; matrix[0].len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                ret[j][i] = matrix[i][j];
            }
        }
        return ret;

=======

        let mut result = Vec::with_capacity(matrix[0].len());
        for i in 0..matrix[0].len() {
            let mut row = Vec::with_capacity(matrix.len());
            for j in 0..matrix.len() {
                row.push(matrix[j][i]);
            }
            result.push(row);
        }
        result
    }
}

=======

        let mut res: Vec<Vec<i32>> = vec![];
        for i in 0..matrix[0].len() {
            let mut tmp: Vec<i32> = vec![];
            for j in 0..matrix.len() {
                tmp.push(matrix[j][i]);
            }
            res.push(tmp);
        }
        res

=======

        let mut res: Vec<Vec<i32>> = vec![];
        let m = matrix.len();
        let n = matrix[0].len();
        for i in 0..n {
            let mut row: Vec<i32> = vec![];
            for j in 0..m {
                row.push(matrix[j][i]);
            }
            res.push(row);
        }
        res
    }
}

=======

        let mut matrix_t: Vec<Vec<i32>> = Vec::new();
        for i in 0..matrix[0].len() {
            let mut row: Vec<i32> = Vec::new();
            for j in 0..matrix.len() {
                row.push(matrix[j][i]);
            }
            matrix_t.push(row);
        }
        matrix_t
    }
}

=======

        
    }
}
