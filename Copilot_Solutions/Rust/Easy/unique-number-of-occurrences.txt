Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for n in arr {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut set = std::collections::HashSet::new();
        for (_, v) in map {
            if set.contains(&v) {
                return false;
            }
            set.insert(v);
        }
        true

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut set = std::collections::HashSet::new();
        for (_, v) in map.iter() {
            if set.contains(v) {
                return false;
            }
            set.insert(v);
        }
        true
    }
}

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in arr {
            map.entry(i).and_modify(|e| *e += 1).or_insert(1);
        }
        let mut set = std::collections::HashSet::new();
        for i in map.values() {
            if set.contains(i) {
                return false;
            }
            set.insert(i);
        }
        true
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut set = std::collections::HashSet::new();
        for (_, v) in map {
            if set.contains(&v) {
                return false;
            }
            set.insert(v);
        }
        true

=======

        let mut counter = std::collections::HashMap::new();
        for i in arr {
            *counter.entry(i).or_insert(0) += 1;
        }
        let mut counter2 = std::collections::HashMap::new();
        for (_, v) in counter {
            *counter2.entry(v).or_insert(0) += 1;
        }
        for (_, v) in counter2 {
            if v > 1 {
                return false;
            }
        }
        true

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for num in &arr {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut set = std::collections::HashSet::new();
        for (_, v) in map {
            if !set.insert(v) {
                return false;
            }
        }
        true

=======

        let mut count = std::collections::HashMap::new();
        for v in arr {
            *count.entry(v).or_insert(0) += 1;
        }
        let mut set = std::collections::HashSet::new();
        for (_, v) in count {
            if set.contains(&v) {
                return false;
            }
            set.insert(v);
        }
        true

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in &arr {
            *map.entry(*i).or_insert(0) += 1;
        }
        let mut set = std::collections::HashSet::new();
        for i in map.values() {
            if !set.insert(i) {
                return false;
            }
        }
        true
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = Vec::new();
        for i in map.values() {
            v.push(*i);
        }
        v.sort();
        for i in 1..v.len() {
            if v[i - 1] == v[i] {
                return false;
            }
        }
        true

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            map.entry(i).and_modify(|x| *x += 1).or_insert(1);
        }
        let mut map2 = std::collections::HashMap::new();
        for i in map.values() {
            map2.entry(i).and_modify(|x| *x += 1).or_insert(1);
        }
        map2.values().all(|x| *x == 1)
    }
}
