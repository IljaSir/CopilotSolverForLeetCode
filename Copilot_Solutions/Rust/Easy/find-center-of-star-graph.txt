Synthesizing 8/10 solutions (Duplicates hidden)

=======

        if edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1] {
            edges[0][0]
        } else {
            edges[0][1]
        }
    }
}

=======

        if edges[0][0] == edges[1][0] || edges[0][0] == edges[1][1] {
            edges[0][0]
        } else {
            edges[0][1]
        }

=======

        let mut count = vec![0; edges.len()+2];
        for edge in edges {
            count[edge[0] as usize] += 1;
            count[edge[1] as usize] += 1;
        }
        for i in 1..count.len() {
            if count[i] == edges.len() {
                return i as i32;
            }
        }
        return 0;

=======

        let mut count = vec![0; edges.len() + 1];
        for edge in edges {
            count[edge[0] as usize - 1] += 1;
            count[edge[1] as usize - 1] += 1;
        }
        for i in 0..count.len() {
            if count[i] == edges.len() {
                return i as i32 + 1;
            }
        }
        0

=======

        let mut freq = vec![0; 100001];
        for edge in edges {
            freq[edge[0] as usize] += 1;
            freq[edge[1] as usize] += 1;
        }
        for i in 1..freq.len() {
            if freq[i] == edges.len() {
                return i as i32;
            }
        }
        0
