Synthesizing 10/10 solutions

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut f = vec![0; n + 1];
        for i in 2..=n {
            let mut j = f[i - 1];
            while j > 0 && s[i - 1] != s[j] {
                j = f[j];
            }
            if s[i - 1] == s[j] {
                j += 1;
            }
            f[i] = j;
        }
        f[n] > 0 && n % (n - f[n]) == 0

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut next = vec![0; n];
        next[0] = -1;
        let mut k = -1;
        for i in 1..n {
            while k > -1 && s[(k + 1) as usize] != s[i] {
                k = next[k as usize];
            }
            if s[(k + 1) as usize] == s[i] {
                k += 1;
            }
            next[i] = k;
        }
        next[n - 1] != -1 && (n as i32) % (n as i32 - next[n - 1] - 1) == 0
    }
}

=======

        let s = s.as_bytes();
        let n = s.len();
        for i in 1..=n/2 {
            if n % i == 0 {
                let mut ok = true;
                for j in i..n {
                    if s[j] != s[j-i] {
                        ok = false;
                        break;
                    }
                }
                if ok {
                    return true;
                }
            }
        }
        false

=======

        let s = s.as_bytes();
        let mut k = 0;
        for i in 1..s.len() {
            if s[k] == s[i] {
                k += 1;
            } else {
                k = 0;
            }
        }
        if k == 0 {
            return false;
        }
        let mut i = 0;
        while i < s.len() - k {
            if s[i] != s[i + k] {
                return false;
            }
            i += 1;
        }
        true

=======

        let s = s.as_bytes();
        let len = s.len();
        for i in 1..len {
            if len % i == 0 {
                let mut j = i;
                while j < len && s[j] == s[j % i] {
                    j += 1;
                }
                if j == len {
                    return true;
                }
            }
        }
        false

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut i = 1;
        while i <= n / 2 {
            if n % i == 0 {
                let mut j = i;
                while j < n {
                    if s[j] != s[j % i] {
                        break;
                    }
                    j += 1;
                }
                if j == n {
                    return true;
                }
            }
            i += 1;
        }
        false

=======

        let s = s.into_bytes();
        let mut i = 1;
        while i * 2 <= s.len() {
            if s.len() % i == 0 {
                let mut j = i;
                while j < s.len() && s[j] == s[j % i] {
                    j += 1;
                }
                if j == s.len() {
                    return true;
                }
            }
            i += 1;
        }
        false

=======

        let s = s.as_bytes();
        let len = s.len();
        for i in 1..=len / 2 {
            if len % i == 0 {
                let mut ok = true;
                for j in i..len {
                    if s[j] != s[j % i] {
                        ok = false;
                        break;
                    }
                }
                if ok {
                    return true;
                }
            }
        }
        false

=======

        for i in 1..s.len() {
            if s.len() % i == 0 {
                let mut ok = true;
                for j in 0..s.len() {
                    if s.as_bytes()[j] != s.as_bytes()[j % i] {
                        ok = false;
                        break;
                    }
                }
                if ok {
                    return true;
                }
            }
        }
        false
    }
}

=======

        let mut s = s;
        let mut l = s.len();
        while l > 1 {
            if s.len() % l == 0 {
                let mut p = s.clone();
                p.truncate(l);
                let mut i = l;
                while i < s.len() {
                    if s[i..(i + l)] != p {
                        break;
                    }
                    i += l;
                }
                if i == s.len() {
                    return true;
                }
            }
            l -= 1;
        }
        false
    }
}
