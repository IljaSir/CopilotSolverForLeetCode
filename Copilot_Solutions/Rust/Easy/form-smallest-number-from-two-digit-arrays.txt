Synthesizing 10/10 solutions

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut res = 0;
        let mut base = 1;
        while i < nums1.len() || j < nums2.len() {
            if i == nums1.len() {
                res += nums2[j] * base;
                j += 1;
            } else if j == nums2.len() {
                res += nums1[i] * base;
                i += 1;
            } else {
                if nums1[i] < nums2[j] {
                    res += nums1[i] * base;
                    i += 1;
                } else {
                    res += nums2[j] * base;
                    j += 1;
                }
            }
            base *= 10;
        }
        res

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut ans = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                ans.push(nums1[i]);
                i += 1;
            } else {
                ans.push(nums2[j]);
                j += 1;
            }
        }
        if i < nums1.len() {
            ans.extend_from_slice(&nums1[i..]);
        }
        if j < nums2.len() {
            ans.extend_from_slice(&nums2[j..]);
        }
        ans.iter().fold(0, |acc, &x| acc * 10 + x)
    }
}

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut num = 0;
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                num = num * 10 + nums1[i];
                i += 1;
            } else {
                num = num * 10 + nums2[j];
                j += 1;
            }
        }
        while i < nums1.len() {
            num = num * 10 + nums1[i];
            i += 1;
        }
        while j < nums2.len() {
            num = num * 10 + nums2[j];
            j += 1;
        }
        num

=======

        let mut nums = nums1;
        for num in nums2 {
            nums.push(num);
        }
        nums.sort();
        let mut result = 0;
        for num in nums {
            result = result * 10 + num;
        }
        result
    }
}

=======

        let mut nums = nums1;
        nums.extend(nums2);
        nums.sort();
        nums.iter().fold(0, |acc, x| acc * 10 + x)

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut result = 0;
        let mut n1 = 0;
        let mut n2 = 0;
        while n1 < nums1.len() && n2 < nums2.len() {
            if nums1[n1] < nums2[n2] {
                result = result * 10 + nums1[n1];
                n1 += 1;
            } else {
                result = result * 10 + nums2[n2];
                n2 += 1;
            }
        }
        while n1 < nums1.len() {
            result = result * 10 + nums1[n1];
            n1 += 1;
        }
        while n2 < nums2.len() {
            result = result * 10 + nums2[n2];
            n2 += 1;
        }
        result
    }
}

=======

        let mut nums1 = nums1;
        nums1.append(&mut nums2.clone());
        nums1.sort();
        nums1.into_iter().rev().fold(0, |acc, x| acc * 10 + x)
    }
}

=======

        let mut s1 = nums1.into_iter().collect::<std::collections::HashSet<i32>>();
        let mut s2 = nums2.into_iter().collect::<std::collections::HashSet<i32>>();
        let mut s = s1.union(&s2).cloned().collect::<Vec<i32>>();
        s.sort();
        s.into_iter().fold(0, |acc, x| acc * 10 + x)
    }
}

=======

        let mut s = nums1;
        s.extend(nums2);
        s.sort();
        s.iter().fold(0, |acc, &x| acc * 10 + x)

=======

        
    }
}
