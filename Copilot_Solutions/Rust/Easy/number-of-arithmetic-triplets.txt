Synthesizing 10/10 solutions

=======

        let mut res = 0;
        let mut dp = vec![0; nums.len()];
        for i in 0..nums.len() {
            for j in 0..i {
                if nums[i] - nums[j] == diff {
                    dp[i] += dp[j] + 1;
                    res += dp[j];
                }
            }
        }
        res

=======

        let mut dp = vec![0; 201];
        let mut res = 0;
        for i in 0..nums.len() {
            if nums[i] >= diff {
                res += dp[(nums[i] - diff) as usize];
            }
            dp[nums[i] as usize] += 1;
        }
        res

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for i in (2..nums.len()).rev() {
            for j in 0..i {
                if nums[i] - nums[j] == diff {
                    *map.entry((j, nums[i])).or_insert(0) += 1;
                }
            }
            if let Some(v) = map.get(&(i, nums[i] + diff)) {
                res += v;
            }
        }
        res

=======

        let mut count = 0;
        let mut dp = vec![0; 201];
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[j] - nums[i] == diff {
                    count += dp[(nums[i] - diff) as usize];
                    dp[nums[j] as usize] += 1;
                }
            }
        }
        count

=======

        let mut dp = vec![0; 200];
        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[j] - nums[i] == diff {
                    res += dp[(nums[i] - diff) as usize];
                    dp[nums[i] as usize] += 1;
                }
            }
        }
        res

=======

        let mut res = 0;
        let mut dp = vec![0; 201];
        let mut cnt = vec![0; 201];
        for num in nums {
            if num - diff >= 0 {
                res += dp[(num - diff) as usize];
            }
            dp[num as usize] += cnt[(num - diff) as usize];
            cnt[num as usize] += 1;
        }
        res
    }
}

=======

        let mut res = 0;
        let mut dp = vec![0; 201];
        for i in 0..nums.len() {
            for k in 0..i {
                if nums[i] - nums[k] == diff {
                    dp[nums[i] as usize] += dp[nums[k] as usize] + 1;
                }
            }
            res += dp[nums[i] as usize];
        }
        res

=======

        let mut cnt = 0;
        let mut map = std::collections::HashMap::new();
        for (i, &x) in nums.iter().enumerate() {
            if let Some(&y) = map.get(&(x-diff)) {
                cnt += y;
            }
            *map.entry(x).or_insert(0) += i as i32;
        }
        cnt

=======

        let mut count = 0;
        let mut index = 0;
        let mut i = 0;
        let mut j = 1;
        let mut k = 2;
        let len = nums.len();
        while index < len {
            if j >= len || k >= len {
                index += 1;
                i = index;
                j = index + 1;
                k = index + 2;
            }
            if nums[j] - nums[i] == diff && nums[k] - nums[j] == diff {
                count += 1;
            }
            j += 1;
            k += 1;
        }
        count

=======

        let mut c = 0;
        let mut m = std::collections::HashMap::new();
        for (i, x) in nums.iter().enumerate() {
            if let Some(&j) = m.get(&(x - diff)) {
                c += j;
            }
            *m.entry(x).or_insert(0) += i as i32;
        }
        c
    }
}
