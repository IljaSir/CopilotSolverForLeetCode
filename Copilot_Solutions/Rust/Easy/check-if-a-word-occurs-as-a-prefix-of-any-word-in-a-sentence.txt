Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let words: Vec<&str> = sentence.split(" ").collect();
        for (i, word) in words.iter().enumerate() {
            if word.starts_with(&search_word) {
                return (i + 1) as i32;
            }
        }
        -1

=======

        let words: Vec<&str> = sentence.split(" ").collect();
        for (i, word) in words.iter().enumerate() {
            if word.starts_with(&search_word) {
                return (i + 1) as i32;
            }
        }
        return -1;

=======

        let mut i = 1;
        for word in sentence.split_whitespace() {
            if word.starts_with(&search_word) {
                return i;
            }
            i += 1;
        }
        -1

=======

        let mut index = 1;
        for word in sentence.split(' ') {
            if word.starts_with(&search_word) {
                return index;
            }
            index += 1;
        }
        -1

=======

        let mut count = 1;
        for word in sentence.split_whitespace() {
            if word.starts_with(&search_word) {
                return count;
            }
            count += 1;
        }
        -1

=======

        let mut i = 1;
        for w in sentence.split(' ') {
            if w.starts_with(&search_word) {
                return i;
            }
            i += 1;
        }
        -1

=======

        let mut index = 0;
        for word in sentence.split(' ') {
            index += 1;
            if word.starts_with(&search_word) {
                return index;
            }
        }
        -1

=======

        let words: Vec<&str> = sentence.split(' ').collect();
        let mut i = 1;
        for word in words {
            if word.starts_with(&search_word) {
                return i;
            }
            i += 1;
        }
        -1

=======

        let mut i = 0;
        for w in sentence.split_whitespace() {
            i += 1;
            if w.starts_with(&search_word) {
                return i as i32;
            }
        }
        -1
