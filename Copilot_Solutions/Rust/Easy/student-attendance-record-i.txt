Synthesizing 10/10 solutions

=======

        let mut absent = 0;
        let mut late = 0;
        for c in s.chars() {
            match c {
                'A' => {
                    absent += 1;
                    late = 0;
                }
                'L' => {
                    late += 1;
                }
                _ => {
                    late = 0;
                }
            }
            if absent > 1 || late > 2 {
                return false;
            }
        }
        true

=======

        let mut a = 0;
        let mut l = 0;
        for c in s.chars() {
            if c == 'A' {
                a += 1;
                l = 0;
            } else if c == 'L' {
                l += 1;
            } else {
                l = 0;
            }
            if a > 1 || l > 2 {
                return false;
            }
        }
        true
    }
}

=======

        let mut a = 0;
        let mut l = 0;
        for c in s.chars() {
            if c == 'A' {
                a += 1;
                l = 0;
            } else if c == 'L' {
                l += 1;
            } else {
                l = 0;
            }
            if a >= 2 || l >= 3 {
                return false;
            }
        }
        true

=======

        let mut a = 0;
        let mut l = 0;
        for c in s.chars() {
            match c {
                'A' => {
                    a += 1;
                    l = 0;
                }
                'L' => {
                    l += 1;
                }
                _ => {
                    l = 0;
                }
            }
            if a > 1 || l > 2 {
                return false;
            }
        }
        true

=======

        let mut absent = 0;
        let mut late = 0;
        for c in s.chars() {
            match c {
                'A' => {
                    absent += 1;
                    late = 0;
                    if absent > 1 {
                        return false;
                    }
                }
                'L' => {
                    late += 1;
                    if late > 2 {
                        return false;
                    }
                }
                _ => {
                    late = 0;
                }
            }
        }
        true

=======

        let mut absent = 0;
        let mut late = 0;
        for c in s.chars() {
            if c == 'A' {
                absent += 1;
            } else if c == 'L' {
                late += 1;
            } else {
                late = 0;
            }
            if absent > 1 || late > 2 {
                return false;
            }
        }
        true

=======

        let mut absent = 0;
        let mut late = 0;
        for c in s.chars() {
            match c {
                'L' => {
                    late += 1;
                    if late > 2 {
                        return false;
                    }
                },
                'A' => {
                    absent += 1;
                    if absent > 1 {
                        return false;
                    }
                    late = 0;
                },
                _ => {
                    late = 0;
                }
            }
        }
        true

=======

        let mut num_a = 0;
        let mut num_l = 0;
        for c in s.chars() {
            match c {
                'A' => {
                    num_a += 1;
                    if num_a > 1 {
                        return false;
                    }
                    num_l = 0;
                }
                'L' => {
                    num_l += 1;
                    if num_l > 2 {
                        return false;
                    }
                }
                _ => num_l = 0,
            }
        }
        true

=======

        let mut a_cnt = 0;
        let mut l_cnt = 0;
        for c in s.chars() {
            match c {
                'A' => {
                    if a_cnt == 1 {
                        return false;
                    }
                    a_cnt += 1;
                    l_cnt = 0;
                }
                'L' => {
                    if l_cnt == 2 {
                        return false;
                    }
                    l_cnt += 1;
                }
                _ => {
                    l_cnt = 0;
                }
            }
        }
        true

=======

        s.chars().filter(|&c| c == 'A').count() < 2 && !s.contains("LLL")
