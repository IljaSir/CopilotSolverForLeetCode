Synthesizing 9/10 solutions

=======

        let mut result = vec![' '; s.len()];
        for (i, c) in s.chars().enumerate() {
            result[indices[i] as usize] = c;
        }
        result.into_iter().collect()

=======

        let mut result = vec![' '; indices.len()];
        for (i, c) in s.chars().enumerate() {
            result[indices[i] as usize] = c;
        }
        result.into_iter().collect()

=======

        let mut result = s.clone();
        for i in 0..s.len() {
            result.replace_range(indices[i] as usize..indices[i] as usize + 1, &s[i..i+1]);
        }
        result
    }
}

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        let mut result = chars.clone();
        for i in 0..indices.len() {
            result[indices[i] as usize] = chars[i];
        }
        result.iter().collect()
    }
}

=======

        let mut vec: Vec<char> = vec![' '; s.len()];
        for (i, c) in s.chars().enumerate() {
            vec[indices[i] as usize] = c;
        }
        vec.iter().collect()

=======

        let mut v: Vec<char> = s.chars().collect();
        let mut s = String::new();
        for i in 0..indices.len() {
            v[indices[i] as usize] = s.chars().nth(i).unwrap();
        }
        for i in 0..v.len() {
            s.push(v[i]);
        }
        s

=======

        let mut result = String::new();
        let mut result_chars = vec![' '; indices.len()];
        for (i, c) in s.chars().enumerate() {
            result_chars[indices[i] as usize] = c;
        }
        for c in result_chars {
            result.push(c);
        }
        result
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut res = s.clone();
        for (i, c) in s.into_iter().enumerate() {
            let j = indices[i] as usize;
            res[j] = c;
        }
        res.into_iter().collect()
    }
}

=======

        let mut s = s;
        let mut res = String::new();
        let mut v = Vec::new();
        for i in 0..indices.len() {
            v.push((indices[i], s.chars().nth(i).unwrap()));
        }
        v.sort();
        for i in 0..v.len() {
            res.push(v[i].1);
        }
        res
    }
}
