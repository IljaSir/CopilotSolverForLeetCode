Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] > target {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        -1

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        -1

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = (left + right) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        -1

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let m = l + (r - l) / 2;
            if nums[m] == target {
                return m as i32;
            } else if nums[m] > target {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        -1

=======

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let m = (l + r) / 2;
            if nums[m] == target {
                return m as i32;
            } else if nums[m] < target {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        -1

=======

        let mut start = 0;
        let mut end = nums.len() - 1;
        while start <= end {
            let mid = start + (end - start) / 2;
            if nums[mid] == target {
                return mid as i32;
            } else if nums[mid] < target {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        -1

=======

        let mut lo = 0;
        let mut hi = nums.len() as i32 - 1;
        while lo <= hi {
            let mid = lo + (hi - lo) / 2;
            if nums[mid as usize] == target {
                return mid;
            } else if nums[mid as usize] < target {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        -1

=======

        let mut l = 0;
        let mut r = nums.len();
        while l < r {
            let m = (l + r) / 2;
            if nums[m] < target {
                l = m + 1;
            } else {
                r = m;
            }
        }
        if l < nums.len() && nums[l] == target {
            l as i32
        } else {
            -1
        }
    }
}

=======

        let (mut l, mut r) = (0, nums.len()-1);
        while l <= r {
            let m = l + (r-l)/2;
            if nums[m] == target {
                return m as i32;
            } else if nums[m] < target {
                l = m+1;
            } else {
                r = m-1;
            }
        }
        -1
