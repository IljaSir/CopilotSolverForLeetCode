Synthesizing 10/10 solutions

=======

        if n % 2 == 0 {
            "a".repeat(n as usize - 1) + "b"
        } else {
            "a".repeat(n as usize)
        }

=======

        let mut s = String::new();
        if n % 2 == 0 {
            for _ in 0..n-1 {
                s.push('a');
            }
            s.push('b');
        } else {
            for _ in 0..n {
                s.push('a');
            }
        }
        s

=======

        if n % 2 == 0 {
            return "a".repeat(n as usize - 1) + "b";
        } else {
            return "a".repeat(n as usize);
        }

=======

        if n % 2 == 0 {
            format!("{}{}", "a".repeat((n-1) as usize), "b")
        } else {
            "a".repeat(n as usize)
        }

=======

        let mut result = String::new();
        if n % 2 == 0 {
            result.push('a');
            for _ in 1..n {
                result.push('b');
            }
        } else {
            for _ in 0..n {
                result.push('a');
            }
        }
        result

=======

        if n % 2 == 0 {
            let mut s = String::new();
            for _ in 0..n-1 {
                s.push('a');
            }
            s.push('z');
            s
        } else {
            let mut s = String::new();
            for _ in 0..n {
                s.push('a');
            }
            s
        }
    }
}

=======

        let mut s = String::new();
        let mut c = 'a';
        for _ in 0..n-1 {
            s.push(c);
            c = (c as u8 + 1) as char;
        }
        if n % 2 == 0 {
            s.push(c);
        } else {
            s.push((c as u8 + 1) as char);
        }
        s
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        while i < n {
            if i == n - 1 && n % 2 == 0 {
                res.push('z');
            } else {
                res.push('a');
            }
            i += 1;
        }
        res

=======

        let mut s: String = String::new();
        let n = n as usize;
        let mut c = 'a';
        if n % 2 == 0 {
            for _ in 0..n-1 {
                s.push(c);
            }
            c = 'b';
        }
        for _ in 0..n {
            s.push(c);
        }
        s
    }
}

=======

        String::from_utf8(vec![b'a'; n as usize]).unwrap()
    }
}
