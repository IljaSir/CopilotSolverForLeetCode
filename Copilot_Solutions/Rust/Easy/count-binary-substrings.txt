Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut pre = 0;
        let mut cur = 1;
        for i in 1..s.len() {
            if s.as_bytes()[i] == s.as_bytes()[i-1] {
                cur += 1;
            } else {
                pre = cur;
                cur = 1;
            }
            if pre >= cur {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        let mut prev = 0;
        let mut cur = 1;
        for i in 1..s.len() {
            if s.as_bytes()[i] == s.as_bytes()[i-1] {
                cur += 1;
            } else {
                prev = std::cmp::max(prev, cur);
                cur = 1;
            }
            if prev >= cur {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut prev = 0;
        let mut cur = 1;
        for i in 1..s.len() {
            if s.as_bytes()[i] == s.as_bytes()[i-1] {
                cur += 1;
            } else {
                count += std::cmp::min(prev, cur);
                prev = cur;
                cur = 1;
            }
        }
        count + std::cmp::min(prev, cur)

=======

        let mut last = 0;
        let mut cur = 1;
        let mut ans = 0;
        let chars = s.chars().collect::<Vec<char>>();
        for i in 1..chars.len() {
            if chars[i] == chars[i-1] {
                cur += 1;
            } else {
                last = cur;
                cur = 1;
            }
            if last >= cur {
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut last = 0;
        let mut cur = 1;
        let mut ans = 0;
        let s = s.chars().collect::<Vec<char>>();
        for i in 1..s.len() {
            if s[i] == s[i - 1] {
                cur += 1;
            } else {
                last = cur;
                cur = 1;
            }
            if last >= cur {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        let mut prev = 0;
        let mut cur = 1;
        for i in 0..s.len() - 1 {
            if s.chars().nth(i) == s.chars().nth(i + 1) {
                cur += 1;
            } else {
                prev = cur;
                cur = 1;
            }
            if prev >= cur {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut last = 0;
        let mut current = 1;
        let mut chars = s.chars();
        let mut prev = chars.next().unwrap();
        for c in chars {
            if c == prev {
                current += 1;
            } else {
                last = current;
                current = 1;
                prev = c;
            }
            if last >= current {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut last = 0;
        let mut cur = 1;
        let mut chars = s.chars();
        let mut last_char = chars.next().unwrap();
        for c in chars {
            if c == last_char {
                cur += 1;
            } else {
                count += std::cmp::min(cur, last);
                last = cur;
                cur = 1;
                last_char = c;
            }
        }
        count + std::cmp::min(cur, last)
    }
}

=======

        let mut cnt = 0;
        let mut cur = 1;
        let mut pre = 0;
        let mut chars = s.chars();
        let mut last = chars.next();
        for c in chars {
            if c == last.unwrap() {
                cur += 1;
            } else {
                cnt += std::cmp::min(pre, cur);
                pre = cur;
                cur = 1;
            }
            last = Some(c);
        }
        cnt + std::cmp::min(pre, cur)

=======

        
    }
}
