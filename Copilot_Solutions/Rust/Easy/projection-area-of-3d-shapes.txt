Synthesizing 10/10 solutions

=======

        let mut top = 0;
        let mut front = 0;
        let mut side = 0;
        for i in 0..grid.len() {
            let mut max = 0;
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    top += 1;
                }
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            front += max;
        }
        for j in 0..grid[0].len() {
            let mut max = 0;
            for i in 0..grid.len() {
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            side += max;
        }
        top + front + side

=======

        let mut area = 0;
        let n = grid.len();
        for i in 0..n {
            let mut max_row = 0;
            let mut max_col = 0;
            for j in 0..n {
                if grid[i][j] > 0 {
                    area += 1;
                }
                max_row = max_row.max(grid[i][j]);
                max_col = max_col.max(grid[j][i]);
            }
            area += max_row + max_col;
        }
        area

=======

        let mut xy = 0;
        let mut xz = 0;
        let mut yz = 0;
        for i in 0..grid.len() {
            let mut max = 0;
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    xy += 1;
                }
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            xz += max;
        }
        for j in 0..grid[0].len() {
            let mut max = 0;
            for i in 0..grid.len() {
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            yz += max;
        }
        xy + xz + yz
    }
}

=======

        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        for i in 0..grid.len() {
            let mut max = 0;
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    x += 1;
                }
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            y += max;
        }
        for i in 0..grid[0].len() {
            let mut max = 0;
            for j in 0..grid.len() {
                if grid[j][i] > max {
                    max = grid[j][i];
                }
            }
            z += max;
        }
        x + y + z

=======

        let mut total = 0;
        for i in 0..grid.len() {
            let mut max_row = 0;
            let mut max_col = 0;
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    total += 1;
                }
                if grid[i][j] > max_row {
                    max_row = grid[i][j];
                }
                if grid[j][i] > max_col {
                    max_col = grid[j][i];
                }
            }
            total += max_row + max_col;
        }
        total
    }
}

=======

        let mut res = 0;
        let mut max_row = vec![0; grid.len()];
        let mut max_col = vec![0; grid.len()];
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                if grid[i][j] > 0 {
                    res += 1;
                }
                max_row[i] = max_row[i].max(grid[i][j]);
                max_col[j] = max_col[j].max(grid[i][j]);
            }
        }
        res + max_row.iter().sum::<i32>() + max_col.iter().sum::<i32>()
    }
}

=======

        let mut top = 0;
        let mut front = 0;
        let mut side = 0;
        let mut max = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    top += 1;
                }
                if grid[i][j] > max {
                    max = grid[i][j];
                }
            }
            front += max;
            max = 0;
        }
        for i in 0..grid[0].len() {
            for j in 0..grid.len() {
                if grid[j][i] > max {
                    max = grid[j][i];
                }
            }
            side += max;
            max = 0;
        }
        top + front + side

=======

        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        for i in grid.iter() {
            let mut max = 0;
            for j in i.iter() {
                if *j > 0 {
                    z += 1;
                }
                if *j > max {
                    max = *j;
                }
            }
            y += max;
        }
        for i in 0..grid[0].len() {
            let mut max = 0;
            for j in 0..grid.len() {
                if grid[j][i] > max {
                    max = grid[j][i];
                }
            }
            x += max;
        }
        x + y + z

=======

        let mut count = 0;
        let mut max = 0;
        let mut maxs = vec![0; grid.len()];
        for i in 0..grid.len() {
            max = 0;
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    count += 1;
                }
                if grid[i][j] > max {
                    max = grid[i][j];
                }
                if grid[i][j] > maxs[j] {
                    maxs[j] = grid[i][j];
                }
            }
            count += max;
        }
        for i in 0..maxs.len() {
            count += maxs[i];
        }
        count

=======

        
    }
}
