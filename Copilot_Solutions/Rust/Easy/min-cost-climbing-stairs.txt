Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = cost[i] + std::cmp::min(dp[i-1], dp[i-2]);
        }
        return std::cmp::min(dp[cost.len()-1], dp[cost.len()-2]);

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = cost[i] + dp[i-2].min(dp[i-1]);
        }
        dp[cost.len()-1].min(dp[cost.len()-2])

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = cost[i] + dp[i - 1].min(dp[i - 2]);
        }
        dp[cost.len() - 1].min(dp[cost.len() - 2])

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = cost[i] + i32::min(dp[i-1], dp[i-2]);
        }
        return i32::min(dp[cost.len()-1], dp[cost.len()-2]);

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = cost[i] + dp[i - 1].min(dp[i - 2]);
        }
        dp[cost.len() - 1].min(dp[cost.len() - 2])
    }
}

=======

        let mut dp = vec![0; cost.len()];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for i in 2..cost.len() {
            dp[i] = i32::min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        i32::min(dp[cost.len() - 1], dp[cost.len() - 2])

=======

        let n = cost.len();
        let mut dp = vec![0; n + 1];
        for i in 2..=n {
            dp[i] = i32::min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }
        dp[n]

=======

        let n = cost.len();
        let mut dp = vec![0; n+1];
        for i in 2..n+1 {
            dp[i] = cost[i-1] + dp[i-1].min(dp[i-2]);
        }
        dp[n].min(dp[n-1])

=======

        let mut dp = vec![0; cost.len() + 1];
        for i in 2..cost.len() + 1 {
            dp[i] = i32::min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]);
        }
        dp[cost.len()]
