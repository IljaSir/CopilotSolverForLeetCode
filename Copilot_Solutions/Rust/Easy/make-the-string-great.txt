Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if let Some(&top) = stack.last() {
                if (top as i32 - c as i32).abs() == 32 {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if let Some(&last) = stack.last() {
                if last != c && last.to_ascii_lowercase() == c.to_ascii_lowercase() {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if let Some(&last) = stack.last() {
                if last != c && last.to_ascii_lowercase() == c.to_ascii_lowercase() {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()
    }
}

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if let Some(&top) = stack.last() {
                if top != c && top.to_ascii_uppercase() == c.to_ascii_uppercase() {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.iter().collect()

=======

        let mut stack = Vec::new();
        for ch in s.chars() {
            if let Some(&last) = stack.last() {
                if last != ch && last.to_ascii_lowercase() == ch.to_ascii_lowercase() {
                    stack.pop();
                    continue;
                }
            }
            stack.push(ch);
        }
        stack.into_iter().collect()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match stack.last() {
                Some(&x) if x != c && x.to_ascii_lowercase() == c.to_ascii_lowercase() => {
                    stack.pop();
                }
                _ => stack.push(c),
            }
        }
        stack.into_iter().collect()

=======

        let mut res = String::new();
        for c in s.chars() {
            if let Some(&x) = res.as_bytes().last() {
                if (x as i32 - c as i32).abs() == 32 {
                    res.pop();
                    continue;
                }
            }
            res.push(c);
        }
        res

=======

        let mut stack = vec![];
        for ch in s.chars() {
            match stack.last() {
                Some(&c) => {
                    if (c as u8 - ch as u8).abs() == 32 {
                        stack.pop();
                    } else {
                        stack.push(ch);
                    }
                }
                None => {
                    stack.push(ch);
                }
            }
        }
        stack.iter().collect()
    }
}

=======

        let mut v = Vec::new();
        for c in s.chars() {
            if let Some(&c0) = v.last() {
                if c0.is_ascii_lowercase() {
                    if c0.to_ascii_uppercase() == c {
                        v.pop();
                        continue;
                    }
                } else {
                    if c0.to_ascii_lowercase() == c {
                        v.pop();
                        continue;
                    }
                }
            }
            v.push(c);
        }
        v.into_iter().collect()
