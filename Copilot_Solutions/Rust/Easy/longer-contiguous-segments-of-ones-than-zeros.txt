Synthesizing 10/10 solutions

=======

        let mut max0 = 0;
        let mut max1 = 0;
        let mut cur0 = 0;
        let mut cur1 = 0;
        for c in s.chars() {
            if c == '0' {
                cur0 += 1;
                cur1 = 0;
            } else {
                cur1 += 1;
                cur0 = 0;
            }
            max0 = max0.max(cur0);
            max1 = max1.max(cur1);
        }
        max1 > max0
    }
}

=======

        let mut max0 = 0;
        let mut max1 = 0;
        let mut count0 = 0;
        let mut count1 = 0;
        for c in s.chars() {
            if c == '0' {
                count0 += 1;
                count1 = 0;
            } else {
                count1 += 1;
                count0 = 0;
            }
            max0 = max0.max(count0);
            max1 = max1.max(count1);
        }
        max1 > max0
    }
}

=======

        let mut max1 = 0;
        let mut max0 = 0;
        let mut cur1 = 0;
        let mut cur0 = 0;
        for c in s.chars() {
            if c == '1' {
                cur1 += 1;
                cur0 = 0;
            } else {
                cur0 += 1;
                cur1 = 0;
            }
            max1 = max1.max(cur1);
            max0 = max0.max(cur0);
        }
        max1 > max0
    }
}

=======

        let mut max_ones = 0;
        let mut max_zeros = 0;
        let mut current_ones = 0;
        let mut current_zeros = 0;
        for c in s.chars() {
            if c == '1' {
                current_ones += 1;
                max_ones = max_ones.max(current_ones);
                current_zeros = 0;
            } else {
                current_zeros += 1;
                max_zeros = max_zeros.max(current_zeros);
                current_ones = 0;
            }
        }
        max_ones > max_zeros
    }
}

=======

        let mut max_ones = 0;
        let mut max_zeros = 0;
        let mut count_ones = 0;
        let mut count_zeros = 0;
        for c in s.chars() {
            if c == '0' {
                count_zeros += 1;
                count_ones = 0;
            } else {
                count_ones += 1;
                count_zeros = 0;
            }
            max_ones = max_ones.max(count_ones);
            max_zeros = max_zeros.max(count_zeros);
        }
        max_ones > max_zeros
    }
}

=======

        let mut max_1 = 0;
        let mut max_0 = 0;
        let mut curr_1 = 0;
        let mut curr_0 = 0;
        for c in s.chars() {
            if c == '1' {
                curr_1 += 1;
                max_1 = max_1.max(curr_1);
                curr_0 = 0;
            } else {
                curr_0 += 1;
                max_0 = max_0.max(curr_0);
                curr_1 = 0;
            }
        }
        max_1 > max_0
    }
}

=======

        let mut max_one = 0;
        let mut max_zero = 0;
        let mut counter_one = 0;
        let mut counter_zero = 0;
        for c in s.chars() {
            if c == '1' {
                counter_one += 1;
                counter_zero = 0;
            } else {
                counter_zero += 1;
                counter_one = 0;
            }
            max_one = std::cmp::max(max_one, counter_one);
            max_zero = std::cmp::max(max_zero, counter_zero);
        }
        max_one > max_zero
    }
}

=======

        let mut max = 0;
        let mut max1 = 0;
        let mut count = 0;
        let mut count1 = 0;
        for i in s.chars() {
            if i == '0' {
                count += 1;
                count1 = 0;
            } else {
                count1 += 1;
                count = 0;
            }
            max = max.max(count);
            max1 = max1.max(count1);
        }
        max1 > max

=======

        let mut max_ones = 0;
        let mut max_zeros = 0;
        let mut count = 0;
        let mut prev = ' ';
        for c in s.chars() {
            if c != prev {
                count = 1;
                prev = c;
            } else {
                count += 1;
            }
            if c == '1' {
                max_ones = max_ones.max(count);
            } else {
                max_zeros = max_zeros.max(count);
            }
        }
        max_ones > max_zeros
    }
}

=======

        let mut count = 0;
        let mut max_count = 0;
        let mut max_count_1 = 0;
        let mut prev = ' ';
        for c in s.chars() {
            if prev == ' ' {
                prev = c;
                count = 1;
            } else if prev == c {
                count += 1;
            } else {
                if prev == '1' {
                    max_count_1 = max_count_1.max(count);
                } else {
                    max_count = max_count.max(count);
                }
                prev = c;
                count = 1;
            }
        }
        if prev == '1' {
            max_count_1 = max_count_1.max(count);
        } else {
            max_count = max_count.max(count);
        }
        max_count_1 > max_count
    }
}
