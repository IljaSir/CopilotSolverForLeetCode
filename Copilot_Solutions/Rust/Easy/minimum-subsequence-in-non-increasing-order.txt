Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut ret = vec![];
        let mut temp = 0;
        for i in (0..nums.len()).rev() {
            ret.push(nums[i]);
            temp += nums[i];
            if temp > sum - temp {
                break;
            }
        }
        ret

=======

        let mut nums = nums;
        nums.sort();
        let mut sum: i32 = 0;
        for i in &nums {
            sum += i;
        }
        let mut res: Vec<i32> = Vec::new();
        let mut tmp: i32 = 0;
        for i in (0..nums.len()).rev() {
            tmp += nums[i];
            sum -= nums[i];
            res.push(nums[i]);
            if tmp > sum {
                return res;
            }
        }
        res
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        let mut res = Vec::new();
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut cur_sum = 0;
        for i in (0..nums.len()).rev() {
            cur_sum += nums[i];
            res.push(nums[i]);
            if cur_sum > sum - cur_sum {
                break;
            }
        }
        res
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for n in &nums {
            sum += n;
        }
        let mut result = vec![];
        let mut sub_sum = 0;
        while sub_sum <= sum {
            let n = nums.pop().unwrap();
            result.push(n);
            sub_sum += n;
            sum -= n;
        }
        result
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let sum = nums.iter().sum::<i32>();
        let mut res = vec![];
        let mut cur_sum = 0;
        while cur_sum <= sum / 2 {
            let num = nums.pop().unwrap();
            cur_sum += num;
            res.push(num);
        }
        res

=======

        let mut nums = nums;
        nums.sort_unstable();
        let sum: i32 = nums.iter().sum();
        let mut s = 0;
        let mut i = nums.len();
        while s <= sum - s {
            i -= 1;
            s += nums[i];
        }
        nums[i..].to_vec()

=======

        let mut nums = nums;
        nums.sort_by(|a, b| b.cmp(a));
        let mut ret = Vec::new();
        let mut sum = nums.iter().sum::<i32>();
        let mut temp = 0;
        for i in nums {
            ret.push(i);
            temp += i;
            sum -= i;
            if temp > sum {
                break;
            }
        }
        ret

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for i in &nums {
            sum += i;
        }
        let mut res = vec![];
        let mut sum_sub = 0;
        for i in (0..nums.len()).rev() {
            sum_sub += nums[i];
            res.push(nums[i]);
            if sum_sub > sum - sum_sub {
                break;
            }
        }
        res
    }
}

=======

        let mut nums = nums;
        let mut sum = 0;
        for i in &nums {
            sum += i;
        }
        let mut half = 0;
        nums.sort();
        let mut res = Vec::new();
        for i in (0..nums.len()).rev() {
            half += nums[i];
            res.push(nums[i]);
            if half > sum - half {
                break;
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for &num in &nums {
            sum += num;
        }
        let mut sub = 0;
        for (i, &num) in nums.iter().rev().enumerate() {
            sub += num;
            if sub > sum - sub {
                return nums[i..].to_vec();
            }
        }
        unreachable!()
    }
}
