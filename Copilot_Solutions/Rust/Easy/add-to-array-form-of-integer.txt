Synthesizing 10/10 solutions

=======

        let mut res = Vec::new();
        let mut k = k;
        let mut i = num.len() - 1;
        while k > 0 || i >= 0 {
            if i >= 0 {
                k += num[i] as i32;
            }
            res.push(k % 10);
            k /= 10;
            i -= 1;
        }
        res.reverse();
        res

=======

        let mut ans = Vec::new();
        let mut k = k;
        let mut i = num.len() - 1;
        while i >= 0 || k > 0 {
            if i >= 0 {
                k += num[i] as i32;
            }
            ans.push(k % 10);
            k /= 10;
            i -= 1;
        }
        ans.reverse();
        ans

=======

        let mut k = k;
        let mut num = num;
        let mut i = num.len() - 1;
        while k > 0 {
            if i >= 0 {
                num[i] += k % 10;
                k /= 10;
                if num[i] >= 10 {
                    num[i] -= 10;
                    k += 1;
                }
                i -= 1;
            } else {
                num.insert(0, k % 10);
                k /= 10;
            }
        }
        num
    }
}

=======

        let mut res = vec![];
        let mut k = k;
        let mut i = num.len();
        while i > 0 || k > 0 {
            i -= 1;
            let n = if i < num.len() { num[i] } else { 0 };
            let mut s = n + k % 10;
            k /= 10;
            if s >= 10 {
                k += 1;
                s -= 10;
            }
            res.insert(0, s);
        }
        res
    }
}

=======

        let mut num = num;
        let mut k = k;
        let mut carry = 0;
        let mut i = num.len();
        while i > 0 || k > 0 || carry > 0 {
            i -= 1;
            let mut digit = carry;
            if i < num.len() {
                digit += num[i];
            }
            if k > 0 {
                digit += k % 10;
                k /= 10;
            }
            carry = digit / 10;
            digit %= 10;
            if i < num.len() {
                num[i] = digit;
            } else {
                num.insert(0, digit);
            }
        }
        num

=======

        let mut num = num;
        let mut k = k;
        let mut i = num.len() - 1;
        while k > 0 {
            if i >= 0 {
                let mut sum = num[i] + k % 10;
                k /= 10;
                if sum >= 10 {
                    k += 1;
                    sum -= 10;
                }
                num[i] = sum;
                i -= 1;
            } else {
                num.insert(0, k % 10);
                k /= 10;
            }
        }
        num

=======

        let mut carry = 0;
        let mut k = k;
        let mut res = Vec::new();
        for i in (0..num.len()).rev() {
            let mut sum = num[i] + (k % 10) + carry;
            k /= 10;
            if sum >= 10 {
                sum -= 10;
                carry = 1;
            } else {
                carry = 0;
            }
            res.push(sum);
        }
        while k > 0 {
            let mut sum = k % 10 + carry;
            k /= 10;
            if sum >= 10 {
                sum -= 10;
                carry = 1;
            } else {
                carry = 0;
            }
            res.push(sum);
        }
        if carry > 0 {
            res.push(carry);
        }
        res.reverse();
        res

=======

        let mut s = String::new();
        for i in num {
            s.push_str(&i.to_string());
        }
        let mut n = s.parse::<i32>().unwrap();
        n += k;
        n.to_string().chars().map(|x| x.to_digit(10).unwrap() as i32).collect()
    }
}

=======

        let mut k = k;
        let mut result = Vec::new();
        let mut i = num.len();
        while i > 0 || k > 0 {
            i -= 1;
            let mut n = k % 10;
            if i < num.len() {
                n += num[i];
            }
            result.push(n % 10);
            k = k / 10 + n / 10;
        }
        result.reverse();
        result
    }
}

=======

        let mut res = Vec::new();
        let mut k = k;
        let mut i = num.len() - 1;
        while i < num.len() {
            let mut n = num[i] + k % 10;
            k /= 10;
            if n >= 10 {
                k += 1;
                n -= 10;
            }
            res.push(n);
            if i == 0 {
                break;
            }
            i -= 1;
        }
        while k > 0 {
            res.push(k % 10);
            k /= 10;
        }
        res.reverse();
        res
    }
}
