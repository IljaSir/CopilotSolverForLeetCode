Synthesizing 10/10 solutions

=======

        if s.len() != goal.len() {
            return false;
        }
        if s == goal {
            let mut set = std::collections::HashSet::new();
            for c in s.chars() {
                if set.contains(&c) {
                    return true;
                }
                set.insert(c);
            }
            return false;
        }
        let mut diff = Vec::new();
        for (a, b) in s.chars().zip(goal.chars()) {
            if a != b {
                diff.push((a, b));
            }
            if diff.len() > 2 {
                return false;
            }
        }
        if diff.len() == 2 {
            return diff[0].0 == diff[1].1 && diff[0].1 == diff[1].0;
        }
        false
    }
}

=======

        let s: Vec<char> = s.chars().collect();
        let goal: Vec<char> = goal.chars().collect();
        if s.len() != goal.len() {
            return false;
        }
        let mut diff: Vec<usize> = Vec::new();
        for i in 0..s.len() {
            if s[i] != goal[i] {
                diff.push(i);
            }
        }
        if diff.len() == 0 {
            let mut set: std::collections::HashSet<char> = std::collections::HashSet::new();
            for i in 0..s.len() {
                if set.contains(&s[i]) {
                    return true;
                }
                set.insert(s[i]);
            }
            return false;
        }
        if diff.len() != 2 {
            return false;
        }
        return s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]];

=======

        let s = s.as_bytes();
        let goal = goal.as_bytes();
        if s.len() != goal.len() {
            return false;
        }
        let mut diff = Vec::new();
        for i in 0..s.len() {
            if s[i] != goal[i] {
                diff.push(i);
            }
        }
        if diff.len() == 0 {
            let mut m = [0; 26];
            for i in 0..s.len() {
                m[(s[i] - b'a') as usize] += 1;
            }
            for i in 0..26 {
                if m[i] >= 2 {
                    return true;
                }
            }
            return false;
        }
        if diff.len() != 2 {
            return false;
        }
        s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]]

=======

        let s = s.as_bytes();
        let goal = goal.as_bytes();
        if s.len() != goal.len() {
            return false;
        }
        if s == goal {
            let mut count = vec![0; 26];
            for i in 0..s.len() {
                count[(s[i] - b'a') as usize] += 1;
            }
            return count.iter().any(|&x| x > 1);
        }
        let mut diff = vec![];
        for i in 0..s.len() {
            if s[i] != goal[i] {
                diff.push(i);
            }
        }
        if diff.len() != 2 {
            return false;
        }
        s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]]

=======

        let s = s.as_bytes();
        let goal = goal.as_bytes();
        let n = s.len();
        if n != goal.len() {
            return false;
        }
        let mut diff = Vec::new();
        for i in 0..n {
            if s[i] != goal[i] {
                diff.push(i);
            }
        }
        if diff.len() == 2 {
            s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]]
        } else if diff.is_empty() {
            let mut seen = [false; 26];
            for &c in s {
                let i = (c - b'a') as usize;
                if seen[i] {
                    return true;
                }
                seen[i] = true;
            }
            false
        } else {
            false
        }

=======

        let s = s.as_bytes();
        let goal = goal.as_bytes();
        if s.len() != goal.len() {
            return false;
        }
        let mut diff = 0;
        let mut diff1 = 0;
        let mut diff2 = 0;
        let mut cnt = [0; 26];
        for i in 0..s.len() {
            if s[i] != goal[i] {
                diff += 1;
                if diff == 1 {
                    diff1 = i;
                } else if diff == 2 {
                    diff2 = i;
                } else {
                    return false;
                }
            }
            cnt[(s[i] - b'a') as usize] += 1;
        }
        if diff == 0 {
            cnt.iter().any(|&x| x > 1)
        } else if diff == 2 {
            s[diff1] == goal[diff2] && s[diff2] == goal[diff1]
        } else {
            false
        }

=======

        let s = s.into_bytes();
        let goal = goal.into_bytes();
        let n = s.len();
        if n != goal.len() {
            return false;
        }
        let mut diff: Vec<usize> = vec![];
        for i in 0..n {
            if s[i] != goal[i] {
                diff.push(i);
            }
        }
        if diff.len() == 0 {
            let mut cnt = vec![0; 26];
            for i in 0..n {
                cnt[(s[i] - b'a') as usize] += 1;
            }
            for i in 0..26 {
                if cnt[i] > 1 {
                    return true;
                }
            }
            return false;
        }
        if diff.len() != 2 {
            return false;
        }
        return s[diff[0]] == goal[diff[1]] && s[diff[1]] == goal[diff[0]];

=======

        if s.len() != goal.len() {
            return false;
        }
        let mut diff = vec![];
        let mut counts = vec![0; 26];
        for (c1, c2) in s.chars().zip(goal.chars()) {
            if c1 != c2 {
                diff.push((c1, c2));
                if diff.len() > 2 {
                    return false;
                }
            }
            counts[c1 as usize - 'a' as usize] += 1;
        }
        if diff.len() == 1 {
            return false;
        }
        if diff.is_empty() {
            return counts.into_iter().any(|c| c > 1);
        }
        diff[0] == diff[1].swap()

=======

        if s.len() != goal.len() {
            return false;
        }
        let mut diff = 0;
        let mut diff1 = 0;
        let mut diff2 = 0;
        let mut s1 = 0;
        let mut s2 = 0;
        let mut g1 = 0;
        let mut g2 = 0;
        for i in 0..s.len() {
            if s.as_bytes()[i] != goal.as_bytes()[i] {
                diff += 1;
                if diff == 1 {
                    diff1 = i;
                } else if diff == 2 {
                    diff2 = i;
                    s1 = s.as_bytes()[diff1];
                    s2 = s.as_bytes()[diff2];
                    g1 = goal.as_bytes()[diff1];
                    g2 = goal.as_bytes()[diff2];
                } else {
                    return false;
                }
            }
        }
        if diff == 0 {
            let mut map = vec![0; 26];
            for i in 0..s.len() {
                map[(s.as_bytes()[i] - 'a' as u8) as usize] += 1;
            }
            for i in 0..26 {
                if map[i] >= 2 {
                    return true;
                }
            }
            return false;
        } else if diff == 2 {
            return s1 == g2 && s2 == g1;
        } else {
            return false;
        }
    }
}

=======

        if s.len() != goal.len() {
            return false;
        }
        let mut diff = 0;
        let mut diff1 = -1;
        let mut diff2 = -1;
        let mut seen = [false; 26];
        for i in 0..s.len() {
            if s.as_bytes()[i] != goal.as_bytes()[i] {
                diff += 1;
                if diff1 == -1 {
                    diff1 = i as i32;
                } else {
                    diff2 = i as i32;
                }
            }
            seen[(s.as_bytes()[i] - 'a' as u8) as usize] = true;
        }
        if diff == 0 {
            for i in 0..26 {
                if seen[i] {
                    return true;
                }
            }
            return false;
        }
        if diff == 2 {
            if s.as_bytes()[diff1 as usize] == goal.as_bytes()[diff2 as usize] && s.as_bytes()[diff2 as usize] == goal.as_bytes()[diff1 as usize] {
                return true;
            }
        }
        return false;
