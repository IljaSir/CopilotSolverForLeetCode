Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut sign = 1;
        for num in nums {
            if num == 0 {
                return 0;
            }
            if num < 0 {
                sign *= -1;
            }
        }
        sign

=======

        let mut res = 1;
        for i in nums {
            if i == 0 {
                return 0;
            } else if i < 0 {
                res *= -1;
            }
        }
        res

=======

        let mut result = 1;
        for i in nums {
            if i == 0 {
                return 0;
            } else if i < 0 {
                result *= -1;
            }
        }
        result

=======

        let mut product = 1;
        for num in nums {
            if num == 0 {
                return 0;
            } else if num < 0 {
                product *= -1;
            }
        }
        return product;
    }
}

=======

        let mut res = 1;
        for i in nums {
            if i == 0 {
                return 0;
            } else if i < 0 {
                res *= -1;
            }
        }
        return res;

=======

        let mut prod = 1;
        for x in nums {
            if x == 0 {
                return 0;
            }
            if x < 0 {
                prod *= -1;
            }
        }
        prod

=======

        let mut sign = 1;
        for x in nums.iter() {
            if *x == 0 {
                return 0;
            } else if *x < 0 {
                sign = -sign;
            }
        }
        sign

=======

        let mut product = 1;
        for num in nums {
            product *= num;
        }
        if product < 0 {
            -1
        } else if product > 0 {
            1
        } else {
            0
        }

=======

        nums.iter().fold(1, |acc, x| acc * x.signum())
