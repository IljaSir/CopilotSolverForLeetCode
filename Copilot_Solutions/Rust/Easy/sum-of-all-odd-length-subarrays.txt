Synthesizing 10/10 solutions

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            for j in i..arr.len() {
                if (j - i + 1) % 2 == 1 {
                    sum += arr[i..=j].iter().sum::<i32>();
                }
            }
        }
        sum
    }
}

=======

        let mut ans = 0;
        let n = arr.len();
        for i in 0..n {
            let left = i + 1;
            let right = n - i;
            let left_even = (left + 1) / 2;
            let left_odd = left / 2;
            let right_even = (right + 1) / 2;
            let right_odd = right / 2;
            ans += (left_even * right_even + left_odd * right_odd) as i32 * arr[i];
        }
        ans

=======

        let mut sum = 0;
        let len = arr.len();
        for i in 0..len {
            for j in i..len {
                if (j - i + 1) % 2 == 1 {
                    sum += arr[i..=j].iter().sum::<i32>();
                }
            }
        }
        sum

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            let mut j = i;
            while j < arr.len() {
                for k in i..=j {
                    sum += arr[k];
                }
                j += 2;
            }
        }
        sum
    }
}

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            let mut j = i;
            while j < arr.len() {
                sum += arr[j..=j].iter().sum::<i32>();
                j += 2;
            }
        }
        sum

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            let mut j = i;
            let mut k = 1;
            while j < arr.len() {
                sum += arr[j];
                if k % 2 == 1 {
                    j += 2 * i + 1;
                } else {
                    j += 2 * (arr.len() - i - 1) + 1;
                }
                k += 1;
            }
        }
        sum

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            let mut j = 0;
            while j + i < arr.len() {
                sum += arr[i + j];
                j += 2;
            }
        }
        sum

=======

        let mut sum = 0;
        for i in 0..arr.len() {
            let mut start = 0;
            while start + i < arr.len() {
                for j in start..start + i + 1 {
                    sum += arr[j];
                }
                start += 1;
            }
        }
        sum
    }
}

=======

        let mut res = 0;
        let mut i = 0;
        while i < arr.len() {
            let mut j = 0;
            while j < arr.len() - i {
                res += arr[j..j+i+1].iter().sum::<i32>();
                j += 1;
            }
            i += 2;
        }
        res
    }
}

=======

        let mut sum = 0;
        let len = arr.len();
        for i in 0..len {
            let mut start = 0;
            let mut end = len - i;
            while end <= len {
                sum += arr[start..end].iter().sum::<i32>();
                start += 1;
                end += 1;
            }
        }
        sum
    }
}
