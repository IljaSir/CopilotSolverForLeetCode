Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        let mut candidate = 0;
        for num in nums {
            if count == 0 {
                candidate = num;
            }
            if num == candidate {
                count += 1;
            } else {
                count -= 1;
            }
        }
        candidate

=======

        let mut count = 0;
        let mut candidate = 0;
        for num in nums {
            if count == 0 {
                candidate = num;
            }
            if candidate == num {
                count += 1;
            } else {
                count -= 1;
            }
        }
        candidate

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            let count = map.entry(num).or_insert(0);
            *count += 1;
            if *count > nums.len() / 2 {
                return num;
            }
        }
        0
    }
}

=======

        let mut count = 0;
        let mut majority = 0;
        for num in nums {
            if count == 0 {
                majority = num;
            }
            if num == majority {
                count += 1;
            } else {
                count -= 1;
            }
        }
        majority
    }
}

=======

        let mut count = 0;
        let mut candidate = 0;
        for i in 0..nums.len() {
            if count == 0 {
                candidate = nums[i];
            }
            if nums[i] == candidate {
                count += 1;
            } else {
                count -= 1;
            }
        }
        candidate

=======

        let mut map = std::collections::HashMap::new();
        for i in nums {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut max = 0;
        let mut result = 0;
        for (k, v) in map {
            if v > max {
                max = v;
                result = k;
            }
        }
        result

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            let count = map.entry(num).or_insert(0);
            *count += 1;
        }
        let mut max = 0;
        let mut max_num = 0;
        for (num, count) in map {
            if count > max {
                max = count;
                max_num = num;
            }
        }
        max_num
    }
}

=======

        let mut count = 0;
        let mut res = nums[0];
        for num in nums {
            if count == 0 {
                res = num;
            }
            count += if num == res { 1 } else { -1 };
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        for &i in nums.iter() {
            *map.entry(i).or_insert(0) += 1;
        }
        map.into_iter().max_by_key(|&(_, v)| v).unwrap().0
    }
}
