Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut l = 0;
        let mut r = letters.len();
        while l < r {
            let m = l + (r - l) / 2;
            if letters[m] <= target {
                l = m + 1;
            } else {
                r = m;
            }
        }
        letters[l % letters.len()]
    }
}

=======

        let mut l = 0;
        let mut r = letters.len();
        while l < r {
            let m = l + (r - l) / 2;
            if letters[m] <= target {
                l = m + 1;
            } else {
                r = m;
            }
        }
        if l == letters.len() {
            letters[0]
        } else {
            letters[l]
        }

=======

        let mut left = 0;
        let mut right = letters.len() - 1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if letters[mid] > target {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        if left >= letters.len() {
            letters[0]
        } else {
            letters[left]
        }
    }
}

=======

        let mut l = 0;
        let mut r = letters.len() - 1;
        while l <= r {
            let mid = l + (r - l) / 2;
            if letters[mid] <= target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        letters[l % letters.len()]

=======

        let mut left = 0;
        let mut right = letters.len() - 1;
        while left < right {
            let mid = (left + right) / 2;
            if letters[mid] > target {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        if letters[left] > target {
            letters[left]
        } else {
            letters[0]
        }

=======

        let mut l = 0;
        let mut r = letters.len() - 1;
        while l <= r {
            let m = l + (r - l) / 2;
            if letters[m] > target {
                r = m - 1;
            } else {
                l = m + 1;
            }
        }
        if l < letters.len() {
            letters[l]
        } else {
            letters[0]
        }

=======

        let mut l = 0;
        let mut r = letters.len() - 1;
        let mut ans = letters[0];
        while l <= r {
            let m = (l + r) / 2;
            if letters[m] <= target {
                l = m + 1;
            } else {
                ans = letters[m];
                r = m - 1;
            }
        }
        ans
    }
}

=======

        let mut left = 0;
        let mut right = letters.len() - 1;
        let mut mid;
        while left < right {
            mid = (left + right) / 2;
            if letters[mid] > target {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        if letters[left] <= target {
            letters[0]
        } else {
            letters[left]
        }

=======

        let mut ans = letters[0];
        for i in 1..letters.len() {
            if letters[i] > target {
                ans = letters[i];
                break;
            }
        }
        ans
