Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        for i in 0..nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }
        nums.retain(|&x| x > 0);
        for _ in 0..nums.len() {
            nums.push(0);
        }
        nums

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
            i += 1;
        }
        nums.sort_by(|a, b| b.cmp(a));
        nums
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
            i += 1;
        }
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == 0 {
                nums.swap(i, i + 1);
                i = 0;
            } else {
                i += 1;
            }
        }
        nums
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
            i += 1;
        }
        let mut result = Vec::new();
        for n in nums {
            if n != 0 {
                result.push(n);
            }
        }
        let zeros = nums.len() - result.len();
        for _ in 0..zeros {
            result.push(0);
        }
        result
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
            i += 1;
        }
        nums.sort_by_key(|&k| k == 0);
        nums
    }
}

=======

        let mut nums = nums;
        let n = nums.len();
        for i in 0..n-1 {
            if nums[i] == nums[i+1] {
                nums[i] *= 2;
                nums[i+1] = 0;
            }
        }
        nums.retain(|&x| x != 0);
        let mut zeros = vec![0; n-nums.len()];
        nums.append(&mut zeros);
        nums

=======

        let mut nums = nums;
        let n = nums.len();
        for i in 0..n-1 {
            if nums[i] == nums[i+1] {
                nums[i] *= 2;
                nums[i+1] = 0;
            }
        }
        nums.sort_by(|a, b| b.cmp(&a));
        nums

=======

        
    }
}
