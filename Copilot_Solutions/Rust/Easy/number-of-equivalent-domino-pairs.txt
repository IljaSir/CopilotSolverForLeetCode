Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 0..dominoes.len() {
            for j in (i+1)..dominoes.len() {
                if (dominoes[i][0] == dominoes[j][0] && dominoes[i][1] == dominoes[j][1]) || (dominoes[i][0] == dominoes[j][1] && dominoes[i][1] == dominoes[j][0]) {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for domino in dominoes {
            let key = domino[0].min(domino[1]) * 10 + domino[0].max(domino[1]);
            *map.entry(key).or_insert(0) += 1;
        }
        for v in map.values() {
            count += v * (v - 1) / 2;
        }
        count

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for domino in dominoes {
            let key = if domino[0] < domino[1] {
                (domino[0], domino[1])
            } else {
                (domino[1], domino[0])
            };
            *map.entry(key).or_insert(0) += 1;
        }
        for v in map.values() {
            count += v * (v - 1) / 2;
        }
        count

=======

        let mut counter = vec![0; 100];
        let mut result = 0;
        for domino in dominoes {
            let x = domino[0];
            let y = domino[1];
            let key = if x < y { x * 10 + y } else { y * 10 + x };
            result += counter[key as usize];
            counter[key as usize] += 1;
        }
        result

=======

        let mut count = 0;
        let mut map = vec![0; 100];
        for domino in dominoes {
            let x = domino[0];
            let y = domino[1];
            let key = if x < y { x * 10 + y } else { y * 10 + x };
            count += map[key as usize];
            map[key as usize] += 1;
        }
        count

=======

        let mut count: Vec<i32> = vec![0; 100];
        let mut result = 0;
        for domino in dominoes {
            let (a, b) = (domino[0], domino[1]);
            let index = if a < b { a * 10 + b } else { b * 10 + a };
            result += count[index as usize];
            count[index as usize] += 1;
        }
        result

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for domino in dominoes {
            let mut k = domino[0];
            let mut v = domino[1];
            if k > v {
                std::mem::swap(&mut k, &mut v);
            }
            let key = k * 10 + v;
            *map.entry(key).or_insert(0) += 1;
        }
        for (_, v) in map {
            count += v * (v - 1) / 2;
        }
        count

=======

        let mut count = 0;
        let mut count_map = std::collections::HashMap::new();
        for domino in dominoes {
            let mut key = domino[0] * 10 + domino[1];
            if domino[0] > domino[1] {
                key = domino[1] * 10 + domino[0];
            }
            let count = count_map.entry(key).or_insert(0);
            *count += 1;
        }
        for count in count_map.values() {
            count * (count - 1) / 2
        }
        count

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        let mut res = 0;
        for domino in dominoes {
            let domino = if domino[0] < domino[1] {
                domino[0] * 10 + domino[1]
            } else {
                domino[1] * 10 + domino[0]
            };
            if let Some(cnt) = map.get_mut(&domino) {
                res += *cnt;
                *cnt += 1;
            } else {
                map.insert(domino, 1);
            }
        }
        res
    }
}

=======

        let mut count = 0;
        let mut a = [0; 100];
        for dominoe in dominoes {
            let x = std::cmp::min(dominoe[0], dominoe[1]);
            let y = std::cmp::max(dominoe[0], dominoe[1]);
            count += a[x * 10 + y];
            a[x * 10 + y] += 1;
        }
        count
