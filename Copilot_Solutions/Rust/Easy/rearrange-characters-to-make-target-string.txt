Synthesizing 10/10 solutions

=======

        let mut s = s.chars().collect::<Vec<char>>();
        s.sort();
        let mut target = target.chars().collect::<Vec<char>>();
        target.sort();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while i < s.len() && j < target.len() {
            if s[i] == target[j] {
                i += 1;
                j += 1;
                if j == target.len() {
                    count += 1;
                    j = 0;
                }
            } else {
                i += 1;
            }
        }
        if j == 0 {
            count
        } else {
            0
        }
    }
}

=======

        let mut s = s.into_bytes();
        let mut target = target.into_bytes();
        s.sort();
        target.sort();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < target.len() {
            if s[i] == target[j] {
                i += 1;
                j += 1;
            } else {
                i += 1;
            }
        }
        if j == target.len() {
            1
        } else {
            0
        }
    }
}

=======

        let mut s = s.into_bytes();
        s.sort();
        let mut target = target.into_bytes();
        target.sort();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < target.len() {
            if s[i] == target[j] {
                i += 1;
                j += 1;
            } else {
                i += 1;
            }
        }
        if j == target.len() {
            1
        } else {
            0
        }
    }
}

=======

        let mut count = vec![0; 26];
        for c in s.chars() {
            count[(c as u8 - b'a') as usize] += 1;
        }
        let mut target_count = vec![0; 26];
        for c in target.chars() {
            target_count[(c as u8 - b'a') as usize] += 1;
        }
        let mut max = 0;
        let mut min = 0;
        for i in 0..26 {
            if target_count[i] > 0 {
                if count[i] == 0 {
                    return 0;
                }
                max = max.max(count[i] / target_count[i]);
                min = min.max(count[i] % target_count[i]);
            }
        }
        if min == 0 {
            max
        } else {
            max + 1
        }
    }
}

=======

        let mut s = s.into_bytes();
        s.sort();
        let mut target = target.into_bytes();
        target.sort();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while i < s.len() && j < target.len() {
            if s[i] == target[j] {
                i += 1;
                j += 1;
                if j == target.len() {
                    count += 1;
                    j = 0;
                }
            } else {
                i += 1;
            }
        }
        count
    }
}

=======

        let mut s = s.into_bytes();
        let mut target = target.into_bytes();
        s.sort_unstable();
        target.sort_unstable();
        let mut i = 0;
        for j in 0..s.len() {
            if i < target.len() && s[j] == target[i] {
                i += 1;
            }
        }
        if i == target.len() {
            1
        } else {
            0
        }

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut target = target.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while j < target.len() {
            if i >= s.len() {
                return 0;
            }
            if s[i] == target[j] {
                i += 1;
                j += 1;
                if j == target.len() {
                    count += 1;
                    j = 0;
                }
            } else {
                i += 1;
            }
        }
        count
    }
}

=======

        let mut count = [0; 26];
        let mut freq = [0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        for c in target.chars() {
            freq[c as usize - 'a' as usize] += 1;
        }
        let mut ans = 0;
        let mut flag = true;
        while flag {
            flag = false;
            for i in 0..26 {
                if freq[i] > 0 && count[i] > 0 {
                    freq[i] -= 1;
                    count[i] -= 1;
                    flag = true;
                }
            }
            if flag { ans += 1; }
        }
        for i in 0..26 {
            if freq[i] > 0 { return 0; }
        }
        ans
    }
}

=======

        let mut s = s.into_bytes();
        let mut target = target.into_bytes();
        let mut res = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        s.sort();
        target.sort();
        while i < s.len() && j < target.len() {
            if s[i] == target[j] {
                i += 1;
                j += 1;
            } else {
                i += 1;
            }
        }
        if j == target.len() {
            res = 1;
            k = i;
            while i < s.len() {
                if s[i] == s[k] {
                    res += 1;
                } else {
                    break;
                }
                i += 1;
            }
        }
        res
    }
}

=======

        let mut s = s.into_bytes();
        let target = target.into_bytes();
        let mut i = 0;
        let mut j = 0;
        let mut found = false;
        let mut count = 0;
        while i < s.len() {
            if s[i] == target[j] {
                s.swap(i, j);
                j += 1;
                found = true;
                if j == target.len() {
                    j = 0;
                    count += 1;
                }
            }
            i += 1;
        }
        if !found {
            return 0;
        }
        if j != 0 {
            return -1;
        }
        count
    }
}
