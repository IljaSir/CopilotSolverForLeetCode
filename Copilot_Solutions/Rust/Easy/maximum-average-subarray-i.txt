Synthesizing 10/10 solutions

=======

        let k = k as usize;
        let mut sum = 0;
        for i in 0..k {
            sum += nums[i];
        }
        let mut max = sum;
        for i in k..nums.len() {
            sum = sum - nums[i - k] + nums[i];
            if sum > max {
                max = sum;
            }
        }
        max as f64 / k as f64

=======

        let mut sum = 0;
        for i in 0..k as usize {
            sum += nums[i];
        }
        let mut max = sum;
        for i in k as usize..nums.len() {
            sum += nums[i] - nums[i - k as usize];
            max = max.max(sum);
        }
        max as f64 / k as f64

=======

        let mut sum = 0;
        for i in 0..k as usize {
            sum += nums[i];
        }
        let mut max = sum;
        for i in k as usize..nums.len() {
            sum = sum - nums[i - k as usize] + nums[i];
            max = max.max(sum);
        }
        max as f64 / k as f64

=======

        let mut sum = 0;
        let k = k as usize;
        for i in 0..k {
            sum += nums[i];
        }
        let mut max_sum = sum;
        for i in k..nums.len() {
            sum += nums[i];
            sum -= nums[i - k];
            max_sum = max_sum.max(sum);
        }
        max_sum as f64 / k as f64

=======

        let n = nums.len();
        let k = k as usize;
        let mut sum = 0;
        for i in 0..k {
            sum += nums[i];
        }
        let mut max_sum = sum;
        for i in k..n {
            sum += nums[i] - nums[i-k];
            max_sum = max_sum.max(sum);
        }
        max_sum as f64 / k as f64

=======

        let mut sum = nums.iter().take(k as usize).sum::<i32>() as f64;
        let mut max = sum;
        for i in k as usize..nums.len() {
            sum += nums[i] as f64 - nums[i - k as usize] as f64;
            max = max.max(sum);
        }
        max / k as f64

=======

        let k = k as usize;
        let mut sum = nums[0..k].iter().sum::<i32>() as f64;
        let mut res = sum / k as f64;
        for i in k..nums.len() {
            sum += nums[i] as f64 - nums[i - k] as f64;
            res = res.max(sum / k as f64);
        }
        res

=======

        let mut sum = 0;
        let mut max = 0;
        let k = k as usize;
        for i in 0..k {
            sum += nums[i];
        }
        max = sum;
        for i in k..nums.len() {
            sum += nums[i];
            sum -= nums[i - k];
            max = max.max(sum);
        }
        max as f64 / k as f64

=======

        let mut sum = 0;
        let k = k as usize;
        let mut max = 0;
        for i in 0..k {
            sum += nums[i];
        }
        max = sum;
        for i in k..nums.len() {
            sum = sum - nums[i-k] + nums[i];
            if sum > max {
                max = sum;
            }
        }
        max as f64 / k as f64

=======

        let mut max_sum = nums[..k as usize].iter().sum::<i32>();
        let mut curr_sum = max_sum;
        for i in k as usize..nums.len() {
            curr_sum = curr_sum - nums[i-k as usize] + nums[i];
            max_sum = std::cmp::max(max_sum, curr_sum);
        }
        max_sum as f64 / k as f64
