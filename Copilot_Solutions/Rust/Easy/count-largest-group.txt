Synthesizing 7/10 solutions

=======

        let mut count = vec![0; 37];
        for i in 1..=n {
            let mut j = i;
            let mut sum = 0;
            while j > 0 {
                sum += j % 10;
                j /= 10;
            }
            count[sum] += 1;
        }
        let mut max = 0;
        let mut res = 0;
        for i in 1..=36 {
            if count[i] > max {
                max = count[i];
                res = 1;
            } else if count[i] == max {
                res += 1;
            }
        }
        res

=======

        let mut count = vec![0; 37];
        for i in 1..=n {
            let mut sum = 0;
            let mut j = i;
            while j > 0 {
                sum += j % 10;
                j /= 10;
            }
            count[sum as usize] += 1;
        }
        let mut max = 0;
        let mut ans = 0;
        for i in 1..=36 {
            if count[i] > max {
                max = count[i];
                ans = 1;
            } else if count[i] == max {
                ans += 1;
            }
        }
        ans

=======

        let mut sum = vec![0; 37];
        for i in 1..=n {
            let mut j = i;
            let mut s = 0;
            while j > 0 {
                s += j % 10;
                j /= 10;
            }
            sum[s] += 1;
        }
        let mut max = 0;
        let mut res = 0;
        for i in 1..=36 {
            if sum[i] == max {
                res += 1;
            } else if sum[i] > max {
                max = sum[i];
                res = 1;
            }
        }
        res

=======

        
    }
}

=======

        let mut v = vec![0; 37];
        for i in 1..=n {
            v[i.to_string().chars().map(|c| c.to_digit(10).unwrap() as usize).sum::<u32>() as usize] += 1;
        }
        let max = v.iter().max().unwrap();
        v.iter().filter(|&x| x == max).count() as i32

=======

        let mut map = vec![0; 37];
        for i in 1..=n {
            map[Self::sum_of_digit(i)] += 1;
        }
        let mut max = 0;
        let mut count = 0;
        for i in 0..37 {
            if map[i] > max {
                max = map[i];
                count = 1;
            } else if map[i] == max {
                count += 1;
            }
        }
        count
    }
    fn sum_of_digit(n: i32) -> usize {
        let mut sum = 0;
        let mut n = n;
        while n > 0 {
            sum += n % 10;
            n /= 10;
        }
        sum as usize

=======

        let mut count = vec![0; 37];
        for i in 1..=n {
            count[Self::sum_digits(i)] += 1;
        }
        count.sort();
        let largest = count.last().unwrap();
        count.iter().rev().take_while(|&&x| x == *largest).count() as i32
    }
    
    fn sum_digits(mut n: i32) -> usize {
        let mut sum = 0;
        while n > 0 {
            sum += n % 10;
            n /= 10;
        }
        sum as usize
