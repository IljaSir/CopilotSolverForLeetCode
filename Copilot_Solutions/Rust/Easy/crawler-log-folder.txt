Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut depth = 0;
        for log in logs {
            if log == "../" {
                if depth > 0 {
                    depth -= 1;
                }
            } else if log != "./" {
                depth += 1;
            }
        }
        depth

=======

        let mut depth = 0;
        for log in logs {
            if log == "./" {
                continue;
            } else if log == "../" {
                if depth > 0 {
                    depth -= 1;
                }
            } else {
                depth += 1;
            }
        }
        depth

=======

        let mut depth = 0;
        for log in logs {
            match log.as_str() {
                "../" => {
                    if depth > 0 {
                        depth -= 1;
                    }
                }
                "./" => {}
                _ => {
                    depth += 1;
                }
            }
        }
        depth

=======

        let mut depth = 0;
        for log in logs {
            match log.as_str() {
                "../" => depth = depth.saturating_sub(1),
                "./" => (),
                _ => depth += 1,
            }
        }
        depth

=======

        let mut result = 0;
        for log in logs {
            match log.as_str() {
                "../" => {
                    if result > 0 {
                        result -= 1;
                    }
                },
                "./" => {},
                _ => result += 1,
            }
        }
        result
    }
}

=======

        let mut depth = 0;
        for log in logs {
            let log = log.as_str();
            if log == "../" {
                if depth > 0 {
                    depth -= 1;
                }
            } else if log != "./" {
                depth += 1;
            }
        }
        depth

=======

        let mut ans = 0;
        for s in logs {
            if s == "../" {
                ans = ans.max(0) - 1;
            } else if s != "./" {
                ans += 1;
            }
        }
        ans

=======

        let mut stack: Vec<String> = Vec::new();
        for log in logs {
            match log.as_str() {
                "../" => {
                    if stack.len() > 0 {
                        stack.pop();
                    }
                },
                "./" => {
                    continue;
                },
                _ => {
                    stack.push(log);
                }
            }
        }
        return stack.len() as i32;
    }
}
