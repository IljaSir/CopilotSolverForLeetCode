Synthesizing 10/10 solutions

=======

        let mut a = amount[0];
        let mut b = amount[1];
        let mut c = amount[2];
        let mut ans = 0;
        while a > 0 || b > 0 || c > 0 {
            if a > 0 && b > 0 {
                a -= 1;
                b -= 1;
                ans += 1;
            }
            if b > 0 && c > 0 {
                b -= 1;
                c -= 1;
                ans += 1;
            }
            if a > 0 && c > 0 {
                a -= 1;
                c -= 1;
                ans += 1;
            }
            if a > 0 {
                a -= 1;
                ans += 1;
            }
            if b > 0 {
                b -= 1;
                ans += 1;
            }
            if c > 0 {
                c -= 1;
                ans += 1;
            }
        }
        ans

=======

        let mut a = amount[0];
        let mut b = amount[1];
        let mut c = amount[2];
        let mut ans = 0;
        while a > 0 || b > 0 || c > 0 {
            ans += 1;
            if a > 0 {
                a -= 1;
            }
            if b > 0 {
                b -= 1;
            }
            if c > 0 {
                c -= 1;
            }
            if a > 0 && b > 0 {
                a -= 1;
                b -= 1;
            }
            if b > 0 && c > 0 {
                b -= 1;
                c -= 1;
            }
            if c > 0 && a > 0 {
                c -= 1;
                a -= 1;
            }
            if a > 0 && b > 0 && c > 0 {
                a -= 1;
                b -= 1;
                c -= 1;
            }
        }
        ans

=======

        let mut amount = amount;
        let mut ans = 0;
        while amount[0] > 0 || amount[1] > 0 || amount[2] > 0 {
            if amount[0] > 0 && amount[1] > 0 {
                amount[0] -= 1;
                amount[1] -= 1;
                ans += 1;
            } else if amount[1] > 0 && amount[2] > 0 {
                amount[1] -= 1;
                amount[2] -= 1;
                ans += 1;
            } else if amount[0] > 0 && amount[2] > 0 {
                amount[0] -= 1;
                amount[2] -= 1;
                ans += 1;
            } else {
                let m = amount.iter().max().unwrap();
                let i = amount.iter().position(|&x| x == *m).unwrap();
                amount[i] -= 1;
                ans += 1;
            }
        }
        ans

=======

        let mut amount = amount;
        let mut ans = 0;
        while amount[0] > 0 || amount[1] > 0 || amount[2] > 0 {
            if amount[0] > 0 && amount[1] > 0 {
                amount[0] -= 1;
                amount[1] -= 1;
                ans += 2;
            } else if amount[1] > 0 && amount[2] > 0 {
                amount[1] -= 1;
                amount[2] -= 1;
                ans += 2;
            } else if amount[0] > 0 && amount[2] > 0 {
                amount[0] -= 1;
                amount[2] -= 1;
                ans += 2;
            } else {
                let max = amount.iter().max().unwrap();
                let idx = amount.iter().position(|&x| x == *max).unwrap();
                amount[idx] -= 1;
                ans += 1;
            }
        }
        ans

=======

        let mut result = 0;
        let mut cold = amount[0];
        let mut warm = amount[1];
        let mut hot = amount[2];
        while cold > 0 || warm > 0 || hot > 0 {
            if cold > 0 && warm > 0 {
                cold -= 1;
                warm -= 1;
            } else if cold > 0 && hot > 0 {
                cold -= 1;
                hot -= 1;
            } else if warm > 0 && hot > 0 {
                warm -= 1;
                hot -= 1;
            } else if cold > 0 {
                cold -= 1;
            } else if warm > 0 {
                warm -= 1;
            } else if hot > 0 {
                hot -= 1;
            }
            result += 1;
        }
        result

=======

        let mut a = amount[0];
        let mut b = amount[1];
        let mut c = amount[2];
        let mut ans = 0;
        if a > 0 {
            ans += 1;
            a -= 1;
        }
        if b > 0 {
            ans += 1;
            b -= 1;
        }
        if c > 0 {
            ans += 1;
            c -= 1;
        }
        let mut max = a;
        if b > max {
            max = b;
        }
        if c > max {
            max = c;
        }
        ans += max;
        ans

=======

        let mut amount = amount;
        let mut res = 0;
        let mut n = 0;
        while amount[0] > 0 || amount[1] > 0 || amount[2] > 0 {
            res += 1;
            n = 0;
            for i in 0..3 {
                if amount[i] > 0 {
                    amount[i] -= 1;
                    n += 1;
                }
            }
            if n == 0 {
                amount[0] += 2;
            }
            if n == 1 {
                amount[1] += 1;
            }
            if n == 2 {
                amount[2] += 1;
            }
        }
        res

=======

        let mut amount = amount;
        let mut res = 0;
        let mut i = 0;
        while amount.iter().any(|x| *x > 0) {
            if amount[i] > 0 {
                amount[i] -= 1;
            }
            i = (i + 1) % 3;
            res += 1;
        }
        res

=======

        let mut total = 0;
        let mut extra = 0;
        for i in 0..3 {
            total += amount[i];
            if i > 0 {
                extra += (amount[i-1] - amount[i]).abs();
            }
        }
        (total + extra/2) as i32

=======

        let mut cache = vec![vec![-1; 101]; 101];
        Solution::fill_cups_helper(&amount, 0, 0, &mut cache)
    }
    fn fill_cups_helper(amount: &Vec<i32>, cold: i32, warm: i32, cache: &mut Vec<Vec<i32>>) -> i32 {
        let hot = amount[0] + amount[1] + amount[2] - cold - warm;
        if hot < 0 {
            return 0;
        }
        if cold < 0 || warm < 0 || hot < 0 {
            return 0x3f3f3f3f;
        }
        if cold == 0 && warm == 0 && hot == 0 {
            return 0;
        }
        if cache[cold as usize][warm as usize] != -1 {
            return cache[cold as usize][warm as usize];
        }
        let mut result = 0x3f3f3f3f;
        if amount[0] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 1, warm - 1, cache) + 1);
        }
        if amount[1] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 1, warm - 1, cache) + 1);
        }
        if amount[2] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 1, warm - 1, cache) + 1);
        }
        if amount[0] > 0 && amount[1] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 1, warm - 2, cache) + 2);
        }
        if amount[0] > 0 && amount[2] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 1, warm - 2, cache) + 2);
        }
        if amount[1] > 0 && amount[2] > 0 {
            result = result.min(Solution::fill_cups_helper(amount, cold - 2, warm - 1, cache) + 2);
        }
        if amount[0]
