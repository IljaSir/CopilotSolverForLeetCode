Synthesizing 10/10 solutions

=======

        let mut word: Vec<char> = word.chars().collect();
        let mut i = 0;
        while i < word.len() {
            if word[i] == ch {
                break;
            }
            i += 1;
        }
        if i < word.len() {
            word[0..=i].reverse();
        }
        word.iter().collect()

=======

        let mut word: Vec<char> = word.chars().collect();
        let mut i = 0;
        while i < word.len() {
            if word[i] == ch {
                break;
            }
            i += 1;
        }
        if i < word.len() {
            word[0..=i].reverse();
        }
        word.iter().collect()
    }
}

=======

        let mut chars = word.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < chars.len() && chars[i] != ch {
            i += 1;
        }
        if i < chars.len() {
            let mut j = 0;
            while j < i {
                chars.swap(j, i);
                j += 1;
                i -= 1;
            }
        }
        chars.into_iter().collect::<String>()
    }
}

=======

        let mut s = word.into_bytes();
        let mut i = 0;
        while i < s.len() && s[i] != ch as u8 {
            i += 1;
        }
        if i < s.len() {
            let mut j = 0;
            while j < i {
                s.swap(j, i);
                j += 1;
                i -= 1;
            }
        }
        String::from_utf8(s).unwrap()
    }
}

=======

        let mut word = word.as_bytes().to_vec();
        let mut index = 0;
        for i in 0..word.len() {
            if word[i] == ch as u8 {
                index = i;
                break;
            }
        }
        for i in 0..index/2 + 1 {
            word.swap(i, index-i);
        }
        String::from_utf8(word).unwrap()
    }
}

=======

        let mut v = word.chars().collect::<Vec<char>>();
        for i in 0..v.len() {
            if v[i] == ch {
                v[0..=i].reverse();
                return v.into_iter().collect();
            }
        }
        word

=======

        let mut tmp = word.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < tmp.len() {
            if tmp[i] == ch {
                break;
            }
            i += 1;
        }
        if i < tmp.len() {
            tmp[0..=i].reverse();
        }
        tmp.iter().collect()

=======

        let mut s = word.clone();
        let mut i = 0;
        for c in word.chars() {
            if c == ch {
                break;
            }
            i += 1;
        }
        if i < word.len() {
            let mut j = 0;
            while j < i {
                s.remove(j);
                s.insert(i, word.chars().nth(j).unwrap());
                j += 1;
                i -= 1;
            }
        }
        s

=======

        let mut index = 0;
        let mut result = String::new();
        for c in word.chars() {
            if c == ch {
                break;
            }
            index += 1;
        }
        for i in (0..=index).rev() {
            result.push(word.chars().nth(i).unwrap());
        }
        result.push_str(&word[index + 1..]);
        result
    }
}

=======

        let mut ret = word.clone();
        let mut i = 0;
        for c in word.chars() {
            if c == ch {
                ret.replace_range(0..i+1, &word[0..i+1].chars().rev().collect::<String>());
                break;
            }
            i += 1;
        }
        ret
