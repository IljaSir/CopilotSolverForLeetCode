Synthesizing 10/10 solutions

=======

        let mut res = -1;
        for i in 1..children {
            if money - (i * 8) >= (children - i) {
                res = i;
            }
        }
        res

=======

        let mut res = 0;
        let mut m = money;
        for i in 0..children {
            if m < 8 {
                break;
            }
            m -= 8;
            res += 1;
        }
        if m >= 8 {
            return -1;
        }
        res

=======

        if money < children + 1 {
            return -1;
        }
        if money == children + 1 {
            return children;
        }
        let mut children = children;
        let mut money = money;
        while children > 0 {
            if money - 8 < children + 1 {
                break;
            }
            money -= 8;
            children -= 1;
        }
        children
    }
}

=======

        let mut m = money - children;
        if m < 0 || m % 3 != 0 {
            return -1;
        }
        m /= 3;
        if m > 8 {
            m = 8;
        }
        m
    }
}

=======

        if money < children {
            return -1;
        }
        if money - children * 3 < 0 {
            return -1;
        }
        (money - children * 3) / 4
    }
}

=======

        let mut result = 0;
        for i in 1..children {
            let sum = 8 * i + (i + 1) * i / 2;
            if sum <= money {
                result = i;
            }
        }
        if result == 0 {
            return -1;
        }
        result

=======

        let mut res = 0;
        let mut left = money;
        for i in 1..children {
            if left >= 9 {
                res += 1;
                left -= 9;
            } else {
                break;
            }
        }
        if left >= 8 {
            res += 1;
        }
        res
    }
}

=======

        let mut money = money;
        let mut children = children;
        let mut max = 0;
        while money >= children + 1 && children > 1 {
            money -= 8;
            children -= 1;
            max += 1;
        }
        if money < children + 1 {
            -1
        } else {
            max
        }

=======

        let mut x = money - children;
        if x < 3 {
            return -1;
        } else if x == 3 {
            return 0;
        }
        x -= 3;
        let mut y = x / 7;
        if y > children - 1 {
            y = children - 1;
        }
        y

=======

        if money < 2 * children {
            return -1;
        }
        let mut ans = 0;
        for i in 2..=children {
            let mut x = money - i;
            if x % (children + 1) == 0 {
                ans += 1;
            }
        }
        ans
