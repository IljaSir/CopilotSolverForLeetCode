Synthesizing 10/10 solutions

=======

        let mut v1 = vec![0; 26];
        let mut v2 = vec![0; 26];
        for c in word1.chars() {
            v1[c as usize - 'a' as usize] += 1;
        }
        for c in word2.chars() {
            v2[c as usize - 'a' as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            if v1[i] != v2[i] {
                diff += 1;
                if diff > 3 {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut count1 = vec![0; 26];
        let mut count2 = vec![0; 26];
        for c in word1.chars() {
            count1[c as usize - 'a' as usize] += 1;
        }
        for c in word2.chars() {
            count2[c as usize - 'a' as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (count1[i] - count2[i]).abs();
        }
        diff <= 6

=======

        let mut count1 = [0; 26];
        let mut count2 = [0; 26];
        for c in word1.chars() {
            count1[c as usize - 'a' as usize] += 1;
        }
        for c in word2.chars() {
            count2[c as usize - 'a' as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (count1[i] - count2[i]).abs();
        }
        diff <= 3
    }
}

=======

        let mut freq1 = vec![0; 26];
        let mut freq2 = vec![0; 26];
        for (c1, c2) in word1.chars().zip(word2.chars()) {
            freq1[c1 as usize - 'a' as usize] += 1;
            freq2[c2 as usize - 'a' as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (freq1[i] - freq2[i]).abs();
            if diff > 3 {
                return false;
            }
        }
        true

=======

        let mut c1 = [0; 26];
        let mut c2 = [0; 26];
        for c in word1.chars() {
            c1[c as usize - 97] += 1;
        }
        for c in word2.chars() {
            c2[c as usize - 97] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (c1[i] - c2[i]).abs();
            if diff > 6 {
                return false;
            }
        }
        true

=======

        let mut v1 = vec![0; 26];
        let mut v2 = vec![0; 26];
        for c in word1.chars() {
            v1[(c as u8 - 'a' as u8) as usize] += 1;
        }
        for c in word2.chars() {
            v2[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (v1[i] - v2[i]).abs();
            if diff > 6 {
                return false;
            }
        }
        true

=======

        let mut count1 = [0; 26];
        let mut count2 = [0; 26];
        for (c1, c2) in word1.chars().zip(word2.chars()) {
            count1[c1 as usize - 'a' as usize] += 1;
            count2[c2 as usize - 'a' as usize] += 1;
        }
        count1.iter().zip(count2.iter()).filter(|(c1, c2)| c1 != c2).count() <= 3

=======

        let mut word1 = word1.chars().collect::<Vec<char>>();
        let mut word2 = word2.chars().collect::<Vec<char>>();
        word1.sort();
        word2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut diff = 0;
        while i < word1.len() && j < word2.len() {
            if word1[i] == word2[j] {
                i += 1;
                j += 1;
            } else if word1[i] != word2[j] {
                diff += 1;
                if diff > 3 {
                    return false;
                }
                if i + 1 < word1.len() && word1[i] == word1[i + 1] {
                    i += 1;
                } else if j + 1 < word2.len() && word2[j] == word2[j + 1] {
                    j += 1;
                } else {
                    i += 1;
                    j += 1;
                }
            }
        }
        if i < word1.len() || j < word2.len() {
            diff += 1;
        }
        diff <= 3

=======

        let mut a = vec![0; 26];
        let mut b = vec![0; 26];
        for c in word1.chars() {
            a[(c as u8 - 'a' as u8) as usize] += 1;
        }
        for c in word2.chars() {
            b[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (a[i] - b[i]).abs();
        }
        diff <= 3
    }
}

=======

        let mut char_map1: [i32; 26] = [0; 26];
        let mut char_map2: [i32; 26] = [0; 26];
        for c in word1.chars() {
            char_map1[c as usize - 'a' as usize] += 1;
        }
        for c in word2.chars() {
            char_map2[c as usize - 'a' as usize] += 1;
        }
        let mut diff = 0;
        for i in 0..26 {
            diff += (char_map1[i] - char_map2[i]).abs();
        }
        diff <= 6
    }
}
