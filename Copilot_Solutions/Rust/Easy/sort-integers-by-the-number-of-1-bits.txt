Synthesizing 10/10 solutions

=======

        let mut arr = arr;
        arr.sort_by(|a, b| {
            let a1 = a.count_ones();
            let b1 = b.count_ones();
            if a1 == b1 {
                a.cmp(b)
            } else {
                a1.cmp(&b1)
            }
        });
        arr

=======

        let mut arr = arr;
        arr.sort_by(|a, b| {
            let a1 = a.count_ones();
            let b1 = b.count_ones();
            if a1 == b1 {
                a.cmp(b)
            } else {
                a1.cmp(&b1)
            }
        });
        arr
    }
}

=======

        let mut arr = arr;
        arr.sort_unstable_by(|a, b| {
            let a1 = a.count_ones();
            let b1 = b.count_ones();
            if a1 == b1 {
                a.cmp(b)
            } else {
                a1.cmp(&b1)
            }
        });
        arr

=======

        let mut arr = arr;
        arr.sort_unstable_by(|a, b| {
            let count_a = a.count_ones();
            let count_b = b.count_ones();
            if count_a == count_b {
                a.cmp(&b)
            } else {
                count_a.cmp(&count_b)
            }
        });
        arr

=======

        let mut arr = arr;
        arr.sort();
        arr.sort_by_key(|x| x.count_ones());
        arr

=======

        let mut arr: Vec<(i32, i32)> = arr.into_iter().map(|x| (x, x.count_ones())).collect();
        arr.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        arr.into_iter().map(|x| x.0).collect()

=======

        let mut arr = arr;
        arr.sort();
        arr.sort_by_key(|&x| x.count_ones());
        arr

=======

        let mut arr = arr;
        arr.sort_by_key(|x| (x.count_ones(), *x));
        arr

=======

        let mut arr = arr;
        arr.sort_by_key(|n| (n.count_ones(), *n));
        arr

=======

        let mut arr = arr;
        arr.sort();
        arr.sort_by(|a, b| {
            let mut a = *a;
            let mut b = *b;
            let mut a_bits = 0;
            let mut b_bits = 0;
            while a > 0 {
                a_bits += a % 2;
                a /= 2;
            }
            while b > 0 {
                b_bits += b % 2;
                b /= 2;
            }
            a_bits.cmp(&b_bits)
        });
        arr
