Synthesizing 10/10 solutions

=======

        let mut chars: Vec<char> = s.chars().filter(|c| c.is_alphanumeric()).collect();
        for i in 0..chars.len() / 2 {
            if chars[i].to_ascii_lowercase() != chars[chars.len() - i - 1].to_ascii_lowercase() {
                return false;
            }
        }
        true

=======

        let s = s.to_lowercase().chars().filter(|c| c.is_alphanumeric()).collect::<String>();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if s.chars().nth(l).unwrap() != s.chars().nth(r).unwrap() {
                return false;
            }
            l += 1;
            r -= 1;
        }
        true

=======

        let s = s.to_lowercase();
        let mut s = s.chars().filter(|c| c.is_alphanumeric()).collect::<String>();
        s == s.chars().rev().collect::<String>()

=======

        let s = s.to_lowercase();
        let s: String = s.chars().filter(|c| c.is_alphanumeric()).collect();
        let s = s.as_bytes();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            if s[i] != s[j] {
                return false;
            }
            i += 1;
            j -= 1;
        }
        true

=======

        let mut s = s;
        s.retain(|c| c.is_alphanumeric());
        s.make_ascii_lowercase();
        s == s.chars().rev().collect::<String>()
    }
}

=======

        let mut s = s.chars().filter(|c| c.is_alphanumeric()).map(|c| c.to_ascii_lowercase()).collect::<Vec<_>>();
        s.reverse();
        let t = s.clone();
        s.reverse();
        s == t

=======

        let mut v = s
            .chars()
            .filter(|c| c.is_alphanumeric())
            .map(|c| c.to_ascii_lowercase())
            .collect::<Vec<char>>();
        let l = v.len();
        for i in 0..l / 2 {
            if v[i] != v[l - i - 1] {
                return false;
            }
        }
        true

=======

        let mut s = s.chars().collect::<Vec<char>>();
        s.retain(|&x| x.is_alphanumeric());
        s = s.into_iter().map(|x| x.to_ascii_lowercase()).collect();
        s == s.into_iter().rev().collect()
    }
}

=======

        let mut s = s;
        s = s.to_lowercase();
        s = s.chars().filter(|c| c.is_alphanumeric()).collect();
        let mut s_rev = s.clone();
        s_rev = s_rev.chars().rev().collect();
        s == s_rev
    }
}

=======

        let s = s.to_lowercase();
        let mut s = s.chars().filter(|c| c.is_alphanumeric()).collect::<String>();
        s = s.chars().rev().collect::<String>();
        let mut s1 = s.clone();
        s1 = s1.chars().rev().collect::<String>();
        s == s1
