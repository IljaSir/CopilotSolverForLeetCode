Synthesizing 10/10 solutions

=======

        let mut n = n;
        let mut last = -1;
        let mut ans = 0;
        for i in 0..32 {
            if (n & 1) != 0 {
                if last >= 0 {
                    ans = ans.max(i - last);
                }
                last = i;
            }
            n >>= 1;
        }
        ans
    }
}

=======

        let mut n = n;
        let mut max = 0;
        let mut last = -1;
        let mut i = 0;
        while n > 0 {
            if n & 1 == 1 {
                if last >= 0 {
                    max = max.max(i - last);
                }
                last = i;
            }
            n >>= 1;
            i += 1;
        }
        max
    }
}

=======

        let mut max = 0;
        let mut last = -1;
        for i in 0..32 {
            if (n & (1 << i)) > 0 {
                if last >= 0 {
                    max = max.max(i - last);
                }
                last = i;
            }
        }
        max

=======

        let mut n = n;
        let mut max = 0;
        let mut last = -1;
        for i in 0..32 {
            if n & 1 == 1 {
                if last >= 0 {
                    max = max.max(i - last);
                }
                last = i;
            }
            n >>= 1;
        }
        max
    }
}

=======

        let mut n = n;
        let mut max = 0;
        let mut last = -1;
        let mut i = 0;
        while n > 0 {
            if n % 2 == 1 {
                if last >= 0 {
                    max = max.max(i - last);
                }
                last = i;
            }
            n /= 2;
            i += 1;
        }
        max
    }
}

=======

        let mut pos = -1;
        let mut max = 0;
        for i in 0..32 {
            if n & (1 << i) > 0 {
                if pos >= 0 {
                    max = max.max(i - pos);
                }
                pos = i;
            }
        }
        max

=======

        let mut n = n;
        let mut max = 0;
        let mut count = 0;
        let mut flag = false;
        while n > 0 {
            if n & 1 == 1 {
                if flag {
                    if count > max {
                        max = count;
                    }
                    count = 1;
                } else {
                    flag = true;
                    count = 1;
                }
            } else if flag {
                count += 1;
            }
            n >>= 1;
        }
        max

=======

        let mut max = 0;
        let mut last = -1;
        let mut n = n;
        for i in 0..32 {
            if n & 1 == 1 {
                if last != -1 && i - last > max {
                    max = i - last;
                }
                last = i;
            }
            n >>= 1;
        }
        max
    }
}

=======

        let mut max_gap = 0;
        let mut current_gap = 0;
        let mut found_one = false;
        let mut n = n;
        while n > 0 {
            if n & 1 == 1 {
                if found_one {
                    if current_gap > max_gap {
                        max_gap = current_gap;
                    }
                    current_gap = 0;
                } else {
                    found_one = true;
                }
            } else if found_one {
                current_gap += 1;
            }
            n = n >> 1;
        }
        max_gap

=======

        let mut ones = vec![];
        let mut n = n;
        while n > 0 {
            ones.push(n % 2);
            n = n / 2;
        }
        let mut max = 0;
        let mut last = -1;
        for (i, &v) in ones.iter().enumerate() {
            if v == 1 {
                if last != -1 {
                    let d = i as i32 - last;
                    if d > max {
                        max = d;
                    }
                }
                last = i as i32;
            }
        }
        max
    }
}
