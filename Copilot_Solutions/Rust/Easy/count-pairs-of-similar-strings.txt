Synthesizing 9/10 solutions

=======

        let mut count = 0;
        for i in 0..words.len() {
            for j in i+1..words.len() {
                if Solution::is_similar(&words[i], &words[j]) {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..words.len() {
            for j in i+1..words.len() {
                if words[i].len() != words[j].len() {
                    continue;
                }
                let mut diff = 0;
                for (a, b) in words[i].chars().zip(words[j].chars()) {
                    if a != b {
                        diff += 1;
                    }
                    if diff > 2 {
                        break;
                    }
                }
                if diff == 2 || diff == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..words.len() {
            for j in i + 1..words.len() {
                if Self::is_similar(&words[i], &words[j]) {
                    count += 1;
                }
            }
        }
        count
    }
    fn is_similar(w1: &str, w2: &str) -> bool {
        if w1.len() != w2.len() {
            return false;
        }
        let mut count = 0;
        for i in 0..w1.len() {
            if w1.chars().nth(i).unwrap() != w2.chars().nth(i).unwrap() {
                count += 1;
            }
            if count > 2 {
                return false;
            }
        }
        true

=======

        let mut count = 0;
        for i in 0..words.len() {
            for j in (i+1)..words.len() {
                if words[i].len() == words[j].len() {
                    let mut diff = 0;
                    for k in 0..words[i].len() {
                        if words[i].chars().nth(k).unwrap() != words[j].chars().nth(k).unwrap() {
                            diff += 1;
                        }
                        if diff > 2 {
                            break;
                        }
                    }
                    if diff == 2 {
                        count += 1;
                    }
                }
            }
        }
        count

=======

        let mut ans = 0;
        for i in 0..words.len() {
            for j in i+1..words.len() {
                if words[i].len() == words[j].len() {
                    let mut cnt = 0;
                    for k in 0..words[i].len() {
                        if words[i].chars().nth(k).unwrap() != words[j].chars().nth(k).unwrap() {
                            cnt += 1;
                        }
                        if cnt > 2 {
                            break;
                        }
                    }
                    if cnt <= 2 {
                        ans += 1;
                    }
                }
            }
        }
        ans

=======

        let mut cnt = 0;
        for i in 0..words.len() {
            for j in i+1..words.len() {
                let mut a = [0; 26];
                let mut b = [0; 26];
                for c in words[i].as_bytes() {
                    a[(c - b'a') as usize] += 1;
                }
                for c in words[j].as_bytes() {
                    b[(c - b'a') as usize] += 1;
                }
                if a == b {
                    cnt += 1;
                }
            }
        }
        cnt

=======

        let mut res = 0;
        for i in 0..words.len() {
            for j in i+1..words.len() {
                let mut word1 = words[i].clone();
                let mut word2 = words[j].clone();
                word1.sort();
                word2.sort();
                if word1 == word2 {
                    res += 1;
                }
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        let mut map = vec![0; 26];
        for i in 0..words.len() {
            for j in i + 1..words.len() {
                if words[i].len() != words[j].len() {
                    continue;
                }
                for k in 0..26 {
                    map[k] = 0;
                }
                let mut flag = true;
                for k in 0..words[i].len() {
                    let a = words[i].chars().nth(k).unwrap() as usize - 'a' as usize;
                    let b = words[j].chars().nth(k).unwrap() as usize - 'a' as usize;
                    map[a] += 1;
                    map[b] -= 1;
                    if map[a] < 0 {
                        flag = false;
                        break;
                    }
                }
                if flag {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for (i, word) in words.iter().enumerate() {
            let mut sorted = word.chars().collect::<Vec<_>>();
            sorted.sort();
            for (j, c) in sorted.iter().enumerate() {
                if let Some(pair) = map.get_mut(c) {
                    count += pair.len();
                    for k in 0..j {
                        pair.push((i, sorted[k]));
                    }
                } else {
                    map.insert(*c, vec![(i, sorted[j])]);
                }
            }
        }
        count
    }
}
