Synthesizing 10/10 solutions

=======

        let mut v = Vec::new();
        for c in s.chars() {
            if c.is_digit(10) {
                v.push(c.to_digit(10).unwrap());
            }
        }
        v.sort();
        v.dedup();
        if v.len() < 2 {
            return -1;
        }
        v[v.len()-2] as i32

=======

        let mut v: Vec<i32> = s.chars()
            .filter(|c| c.is_digit(10))
            .map(|c| c.to_digit(10).unwrap() as i32)
            .collect();
        v.sort();
        v.dedup();
        if v.len() < 2 {
            -1
        } else {
            v[v.len() - 2]
        }

=======

        let mut v = vec![];
        for c in s.chars() {
            if c.is_digit(10) {
                v.push(c.to_digit(10).unwrap());
            }
        }
        v.sort();
        v.dedup();
        if v.len() > 1 {
            return v[v.len() - 2] as i32;
        } else {
            return -1;
        }

=======

        let mut v = vec![false; 10];
        for c in s.chars() {
            if c >= '0' && c <= '9' {
                v[c as usize - '0' as usize] = true;
            }
        }
        let mut i = 9;
        let mut cnt = 0;
        while i >= 0 {
            if v[i as usize] {
                cnt += 1;
            }
            if cnt == 2 {
                return i;
            }
            i -= 1;
        }
        -1

=======

        let mut digits: Vec<i32> = s.chars().filter(|x| x.is_digit(10)).map(|x| x.to_digit(10).unwrap() as i32).collect();
        digits.sort_unstable();
        digits.dedup();
        if digits.len() > 1 {
            return digits[digits.len() - 2];
        }
        -1

=======

        let mut v = vec![];
        for c in s.chars() {
            if c.is_digit(10) {
                v.push(c.to_digit(10).unwrap());
            }
        }
        if v.len() == 0 {
            return -1;
        }
        v.sort();
        v.dedup();
        if v.len() < 2 {
            return -1;
        }
        v[v.len() - 2] as i32

=======

        let mut digits = vec![];
        for ch in s.chars() {
            if ch.is_digit(10) {
                digits.push(ch.to_digit(10).unwrap() as i32);
            }
        }
        if digits.is_empty() {
            return -1;
        }
        digits.sort();
        digits.dedup();
        if digits.len() == 1 {
            return -1;
        }
        digits[digits.len() - 2]

=======

        let mut digits = s.chars().filter(|c| c.is_digit(10)).map(|c| c.to_digit(10).unwrap()).collect::<Vec<u32>>();
        digits.sort();
        digits.dedup();
        digits.pop().unwrap_or(0) as i32
    }
}

=======

        let mut max = 0;
        let mut second_max = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                let n = c.to_digit(10).unwrap();
                if n > max {
                    second_max = max;
                    max = n;
                } else if n > second_max && n < max {
                    second_max = n;
                }
            }
        }
        if second_max == 0 {
            -1
        } else {
            second_max as i32
        }

=======

        let mut v = vec![];
        for c in s.chars() {
            if c.is_numeric() {
                v.push(c as i32 - '0' as i32);
            }
        }
        v.sort();
        v.dedup();
        if v.len() > 1 {
            v[v.len() - 2]
        } else {
            -1
        }
