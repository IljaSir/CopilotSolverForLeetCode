Synthesizing 10/10 solutions

=======

        let mut s = s;
        for word in words {
            if s.starts_with(&word) {
                s = s[word.len()..].to_string();
            } else {
                return false;
            }
        }
        s.len() == 0

=======

        let mut s = s;
        for word in words {
            if s.starts_with(&word) {
                s = s[word.len()..].to_string();
            } else {
                return false;
            }
        }
        s == ""
    }
}

=======

        let mut s = s;
        for w in words {
            if s.starts_with(&w) {
                s = s[w.len()..].to_string();
            } else {
                return false;
            }
        }
        s.is_empty()

=======

        let mut s = s;
        for word in words.iter() {
            if s.starts_with(word) {
                s = s[word.len()..].to_string();
            } else {
                return false;
            }
        }
        s.len() == 0
    }
}

=======

        let mut s = s;
        for i in 0..words.len() {
            if s.starts_with(&words[i]) {
                s = s[words[i].len()..].to_string();
            } else {
                return false;
            }
        }
        s.len() == 0

=======

        let mut s = s;
        for w in words {
            if s.starts_with(&w) {
                s = s[w.len()..].to_string();
            } else {
                return false;
            }
            if s.is_empty() {
                return true;
            }
        }
        false
    }
}

=======

        let mut s = s;
        for word in words {
            if !s.starts_with(&word) {
                return false;
            }
            s = s[word.len()..].to_string();
        }
        s.len() == 0
    }
}

=======

        let mut ss = s;
        let mut i = 0;
        while i < words.len() {
            if ss.starts_with(&words[i]) {
                ss = ss[words[i].len()..].to_string();
                i += 1;
            } else {
                return false;
            }
        }
        ss == ""

=======

        let mut idx = 0;
        for word in words {
            let len = word.len();
            if idx + len > s.len() || &s[idx..idx+len] != word {
                return false;
            }
            idx += len;
        }
        return true;

=======

        let mut i = 0;
        for word in words {
            if i == s.len() {
                break;
            }
            for j in 0..word.len() {
                if word.as_bytes()[j] != s.as_bytes()[i] {
                    return false;
                }
                i += 1;
            }
        }
        return i == s.len();
