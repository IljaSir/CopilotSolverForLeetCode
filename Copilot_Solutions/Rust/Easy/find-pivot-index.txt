Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = nums.iter().sum();
        for i in 0..nums.len() {
            right -= nums[i];
            if left == right {
                return i as i32;
            }
            left += nums[i];
        }
        -1

=======

        let sum: i32 = nums.iter().sum();
        let mut left_sum = 0;
        for i in 0..nums.len() {
            if left_sum == sum - left_sum - nums[i] {
                return i as i32;
            }
            left_sum += nums[i];
        }
        -1

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut left = 0;
        for i in 0..nums.len() {
            if left * 2 == sum - nums[i] {
                return i as i32;
            }
            left += nums[i];
        }
        -1
    }
}

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut left = 0;
        for i in 0..nums.len() {
            if left * 2 == sum - nums[i] {
                return i as i32;
            }
            left += nums[i];
        }
        return -1;

=======

        let mut left = 0;
        let mut right = nums.iter().sum::<i32>();
        for (i, num) in nums.iter().enumerate() {
            right -= num;
            if left == right {
                return i as i32;
            }
            left += num;
        }
        -1

=======

        let sum: i32 = nums.iter().sum();
        let mut left_sum: i32 = 0;
        for (i, n) in nums.iter().enumerate() {
            if left_sum == sum - left_sum - n {
                return i as i32;
            }
            left_sum += n;
        }
        -1
    }
}

=======

        let sum = nums.iter().sum::<i32>();
        let mut left = 0;
        for (i, &n) in nums.iter().enumerate() {
            if left * 2 == sum - n {
                return i as i32;
            }
            left += n;
        }
        -1
    }
}

=======

        let mut left = 0;
        let mut right = nums.iter().sum::<i32>();
        for (i, n) in nums.iter().enumerate() {
            if i > 0 {
                left += nums[i - 1];
            }
            right -= n;
            if left == right {
                return i as i32;
            }
        }
        -1
    }
}

=======

        let mut left: i32 = 0;
        let mut right: i32 = nums.iter().sum();
        for (i, v) in nums.iter().enumerate() {
            if left == right - v {
                return i as i32;
            }
            left += v;
            right -= v;
        }
        -1
    }
}

=======

        let mut s: i32 = 0;
        let mut sum: i32 = 0;
        for i in 0..nums.len() {
            s += nums[i];
        }
        for i in 0..nums.len() {
            if sum == s - sum - nums[i] {
                return i as i32;
            }
            sum += nums[i];
        }
        -1
