Synthesizing 10/10 solutions

=======

        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j && nums[i] + nums[j] == target {
                    return vec![i as i32, j as i32];
                }
            }
        }
        vec![]

=======

        let mut result = Vec::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[i] + nums[j] == target {
                    result.push(i as i32);
                    result.push(j as i32);
                    break;
                }
            }
        }
        result
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[i] + nums[j] == target {
                    result.push(i as i32);
                    result.push(j as i32);
                }
            }
        }
        result

=======

        let mut map = std::collections::HashMap::new();
        for (i, &num) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&(target - num)) {
                return vec![j as i32, i as i32];
            }
            map.insert(num, i);
        }
        vec![]

=======

        let mut map = std::collections::HashMap::new();
        for (i, &num) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&(target - num)) {
                return vec![j, i as i32];
            }
            map.insert(num, i as i32);
        }
        vec![]

=======

        let mut map = std::collections::HashMap::new();
        for (i, num) in nums.iter().enumerate() {
            if let Some(j) = map.get(&(target - num)) {
                return vec![*j as i32, i as i32];
            }
            map.insert(num, i);
        }
        vec![]
    }
}

=======

        let mut hash = std::collections::HashMap::new();
        for (i, x) in nums.iter().enumerate() {
            if let Some(j) = hash.get(&(target - x)) {
                return vec![*j as i32, i as i32];
            }
            hash.insert(x, i);
        }
        vec![]

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for (i, n) in nums.iter().enumerate() {
            let t = target - n;
            if map.contains_key(&t) {
                return vec![*map.get(&t).unwrap(), i as i32];
            }
            map.insert(*n, i as i32);
        }
        vec![]

=======

        let mut res: Vec<i32> = vec![];
        let mut i = 0;
        while i < nums.len() {
            let mut j = 0;
            while j < nums.len() {
                if i != j {
                    if nums[i] + nums[j] == target {
                        res.push(i as i32);
                        res.push(j as i32);
                        return res;
                    }
                }
                j += 1;
            }
            i += 1;
        }
        res

=======

        let mut ret: Vec<i32> = Vec::new();
        let mut index: i32 = 0;
        for num in &nums {
            let mut i = index + 1;
            for n in &nums[(index + 1) as usize..] {
                if num + n == target {
                    ret.push(index);
                    ret.push(i);
                    return ret;
                }
                i += 1;
            }
            index += 1;
        }
        ret
    }
}
