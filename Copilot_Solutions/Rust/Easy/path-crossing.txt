Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut x = 0;
        let mut y = 0;
        let mut set = std::collections::HashSet::new();
        set.insert((x, y));
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => (),
            }
            if !set.insert((x, y)) {
                return true;
            }
        }
        false

=======

        let mut x = 0;
        let mut y = 0;
        let mut visited = std::collections::HashSet::new();
        visited.insert((x, y));
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => (),
            }
            if visited.contains(&(x, y)) {
                return true;
            }
            visited.insert((x, y));
        }
        false

=======

        let mut x = 0;
        let mut y = 0;
        let mut visited = std::collections::HashSet::new();
        visited.insert((0, 0));
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => {}
            }
            if visited.contains(&(x, y)) {
                return true;
            } else {
                visited.insert((x, y));
            }
        }
        false

=======

        let mut x = 0;
        let mut y = 0;
        let mut visited = vec![(x, y)];
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => (),
            }
            if visited.contains(&(x, y)) {
                return true;
            }
            visited.push((x, y));
        }
        false

=======

        let mut x = 0;
        let mut y = 0;
        let mut visited = vec![(x, y)];
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => panic!("invalid character"),
            }
            if visited.contains(&(x, y)) {
                return true;
            }
            visited.push((x, y));
        }
        false

=======

        let mut visited = vec![(0, 0)];
        let mut x = 0;
        let mut y = 0;
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => (),
            }
            if visited.contains(&(x, y)) {
                return true;
            } else {
                visited.push((x, y));
            }
        }
        false

=======

        let mut x = 0;
        let mut y = 0;
        let mut map = std::collections::HashMap::new();
        map.insert((x, y), 1);
        for c in path.chars() {
            match c {
                'N' => y += 1,
                'S' => y -= 1,
                'E' => x += 1,
                'W' => x -= 1,
                _ => (),
            }
            if map.contains_key(&(x, y)) {
                return true;
            } else {
                map.insert((x, y), 1);
            }
        }
        false
