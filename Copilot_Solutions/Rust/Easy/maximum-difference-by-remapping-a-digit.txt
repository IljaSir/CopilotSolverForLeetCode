Synthesizing 10/10 solutions

=======

        let mut digits = Vec::new();
        let mut n = num;
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let n = digits.len();
        let mut min = 0;
        let mut max = 0;
        for i in 0..n {
            let mut d = digits[i];
            if d == 9 {
                min = min * 10 + d;
                max = max * 10 + d;
            } else {
                let mut min_ = min * 10 + d;
                let mut max_ = max * 10 + d;
                for j in i+1..n {
                    let d_ = digits[j];
                    if d_ == 9 {
                        min_ = min_ * 10 + d_;
                        max_ = max_ * 10 + d_;
                    } else {
                        min_ = min_ * 10 + if d_ < d { d_ } else { d };
                        max_ = max_ * 10 + if d_ < d { d } else { d_ };
                    }
                }
                for _ in i+1..n {
                    min_ = min_ * 10 + 9;
                    max_ = max_ * 10 + 9;
                }
                min = min_;
                max = max_;
                break;
            }
        }
        max - min
    }
}

=======

        let mut min = i32::MAX;
        let mut max = i32::MIN;
        let num = num.to_string();
        for i in 0..10 {
            for j in 0..10 {
                let mut s = num.clone();
                s = s.replace(&i.to_string(), &j.to_string());
                let n = s.parse::<i32>().unwrap();
                if n < min {
                    min = n;
                }
                if n > max {
                    max = n;
                }
            }
        }
        max - min

=======

        let mut min = num;
        let mut max = num;
        let mut n = num;
        let mut digits = Vec::new();
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        for i in 0..digits.len() {
            for j in 0..10 {
                if digits[i] != j {
                    let mut x = 0;
                    for k in 0..digits.len() {
                        if k == i {
                            x = x * 10 + j;
                        } else {
                            x = x * 10 + digits[k];
                        }
                    }
                    min = min.min(x);
                    max = max.max(x);
                }
            }
        }
        max - min

=======

        let mut max = 0;
        let mut min = 10;
        let mut n = num;
        while n > 0 {
            let d = n % 10;
            max = max.max(d);
            min = min.min(d);
            n /= 10;
        }
        max * 1111 + min * 111
    }
}

=======

        let mut max = 0;
        let mut min = 0;
        let mut n = num;
        let mut digits = Vec::new();
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut is_max = true;
        for i in 0..digits.len() {
            let mut d = digits[i];
            if d == 9 && is_max {
                max = max * 10 + 9;
                min = min * 10 + d;
            } else if d == 0 && !is_max {
                min = min * 10;
                max = max * 10 + d;
            } else {
                if is_max {
                    max = max * 10 + 9;
                    min = min * 10 + d;
                    is_max = false;
                } else {
                    min = min * 10;
                    max = max * 10 + d;
                }
            }
        }
        max - min

=======

        let mut min = num;
        let mut max = num;
        let mut d = 0;
        let mut n = num;
        while n > 0 {
            let t = n % 10;
            n /= 10;
            for i in 0..10 {
                let mut x = num;
                let mut y = 0;
                let mut p = 1;
                while x > 0 {
                    let mut c = x % 10;
                    x /= 10;
                    if c == t {
                        c = i;
                    }
                    y += c * p;
                    p *= 10;
                }
                if y < min {
                    min = y;
                }
                if y > max {
                    max = y;
                }
            }
            d += 1;
        }
        max - min

=======

        let num = num.to_string();
        let mut max = num.clone();
        let mut min = num.clone();
        for i in 0..10 {
            let mut tmp = num.clone();
            tmp = tmp.replace(i.to_string().as_str(), "0");
            if tmp != "0" {
                min = min.min(tmp);
            }
            let tmp = num.clone();
            let tmp = tmp.replace(i.to_string().as_str(), "9");
            max = max.max(tmp);
        }
        max.parse::<i32>().unwrap() - min.parse::<i32>().unwrap()

=======

        let mut num = num.to_string();
        let mut min = num.clone();
        let mut max = num.clone();
        for d in 0..10 {
            let mut temp = num.clone();
            temp = temp.replace(&d.to_string(), "0");
            if temp != num {
                let temp = temp.parse::<i32>().unwrap();
                if temp < min.parse::<i32>().unwrap() {
                    min = temp.to_string();
                }
            }
        }
        for d in 0..10 {
            let mut temp = num.clone();
            temp = temp.replace(&d.to_string(), "9");
            if temp != num {
                let temp = temp.parse::<i32>().unwrap();
                if temp > max.parse::<i32>().unwrap() {
                    max = temp.to_string();
                }
            }
        }
        max.parse::<i32>().unwrap() - min.parse::<i32>().unwrap()

=======

        let s = num.to_string();
        let mut min = s.clone();
        let mut max = s.clone();
        for i in 0..10 {
            let j = 9 - i;
            let mut min2 = min.replace(&i.to_string(), &j.to_string());
            let mut max2 = max.replace(&i.to_string(), &j.to_string());
            if min2.starts_with("0") {
                min2 = min2[1..].to_string();
            }
            if max2.starts_with("0") {
                max2 = max2[1..].to_string();
            }
            min = min2;
            max = max2;
        }
        max.parse::<i32>().unwrap() - min.parse::<i32>().unwrap()

=======

        
    }
}
