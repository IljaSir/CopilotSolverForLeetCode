Synthesizing 10/10 solutions

=======

        let mut result = vec![];
        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            if nums[left].abs() > nums[right].abs() {
                result.push(nums[left] * nums[left]);
                left += 1;
            } else {
                result.push(nums[right] * nums[right]);
                right -= 1;
            }
        }
        result.reverse();
        result
    }
}

=======

        let mut result = Vec::new();
        for i in 0..nums.len() {
            result.push(nums[i] * nums[i]);
        }
        result.sort();
        result
    }
}

=======

        nums.into_iter().map(|x| x.pow(2)).collect::<Vec<i32>>().into_iter().sorted().collect()
    }
}

=======

        let mut result: Vec<i32> = vec![];
        for num in nums {
            result.push(num * num);
        }
        result.sort();
        result

=======

        let mut result = vec![0; nums.len()];
        let mut l = 0;
        let mut r = nums.len() - 1;
        for i in (0..nums.len()).rev() {
            let left = nums[l].abs();
            let right = nums[r].abs();
            if left > right {
                result[i] = left * left;
                l += 1;
            } else {
                result[i] = right * right;
                r -= 1;
            }
        }
        result

=======

        let mut res = Vec::new();
        for i in nums {
            res.push(i * i);
        }
        res.sort();
        res

=======

        let mut result = vec![0;nums.len()];
        let mut i = 0;
        let mut j = nums.len()-1;
        let mut k = nums.len()-1;
        while i <= j {
            if nums[i].abs() > nums[j].abs() {
                result[k] = nums[i]*nums[i];
                i += 1;
            } else {
                result[k] = nums[j]*nums[j];
                j -= 1;
            }
            k -= 1;
        }
        result

=======

        let mut result = vec![0; nums.len()];
        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut idx = right;
        while left <= right {
            if nums[left].abs() > nums[right].abs() {
                result[idx] = nums[left].pow(2);
                left += 1;
            } else {
                result[idx] = nums[right].pow(2);
                right -= 1;
            }
            if idx == 0 {
                break;
            }
            idx -= 1;
        }
        result

=======

        let mut result = Vec::new();
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i <= j {
            let num_i = nums[i] * nums[i];
            let num_j = nums[j] * nums[j];
            if num_i > num_j {
                result.insert(0, num_i);
                i += 1;
            } else {
                result.insert(0, num_j);
                j -= 1;
            }
        }
        result
    }
}

=======

        let mut r = nums.iter().map(|x| x*x).collect::<Vec<i32>>();
        r.sort();
        r
