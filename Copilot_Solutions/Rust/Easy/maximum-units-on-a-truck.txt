Synthesizing 10/10 solutions

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut ans = 0;
        let mut truck_size = truck_size;
        for box_type in box_types {
            if truck_size == 0 {
                break;
            }
            if truck_size >= box_type[0] {
                ans += box_type[0] * box_type[1];
                truck_size -= box_type[0];
            } else {
                ans += truck_size * box_type[1];
                truck_size = 0;
            }
        }
        ans

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut truck_size = truck_size;
        let mut result = 0;
        for box_type in box_types {
            if truck_size == 0 {
                break;
            }
            if truck_size >= box_type[0] {
                result += box_type[0] * box_type[1];
                truck_size -= box_type[0];
            } else {
                result += truck_size * box_type[1];
                truck_size = 0;
            }
        }
        result

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut truck_size = truck_size;
        let mut units = 0;
        for box_type in box_types {
            let n = box_type[0];
            let u = box_type[1];
            if truck_size <= n {
                units += truck_size * u;
                break;
            } else {
                units += n * u;
                truck_size -= n;
            }
        }
        units

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut truck_size = truck_size;
        let mut units = 0;
        for box_type in box_types {
            let count = std::cmp::min(truck_size, box_type[0]);
            units += count * box_type[1];
            truck_size -= count;
            if truck_size == 0 {
                break;
            }
        }
        units

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut units = 0;
        let mut truck_size = truck_size;
        for box_type in &box_types {
            let count = box_type[0].min(truck_size);
            units += count * box_type[1];
            truck_size -= count;
            if truck_size == 0 {
                break;
            }
        }
        units

=======

        let mut truck_size = truck_size;
        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut result = 0;
        for box_type in box_types {
            if truck_size == 0 {
                break;
            }
            if truck_size >= box_type[0] {
                result += box_type[0] * box_type[1];
                truck_size -= box_type[0];
            } else {
                result += truck_size * box_type[1];
                truck_size = 0;
            }
        }
        result

=======

        let mut box_types = box_types;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut res = 0;
        for box_type in box_types {
            let n = box_type[0];
            let u = box_type[1];
            if n <= truck_size {
                res += n * u;
                truck_size -= n;
            } else {
                res += u * truck_size;
                break;
            }
        }
        res

=======

        let mut box_types = box_types;
        let mut truck_size = truck_size;
        let mut sum = 0;
        box_types.sort_by(|a, b| b[1].cmp(&a[1]));
        for i in 0..box_types.len() {
            let n = box_types[i][0];
            let u = box_types[i][1];
            if n <= truck_size {
                sum += n * u;
                truck_size -= n;
            } else {
                sum += truck_size * u;
                break;
            }
        }
        sum

=======

        let mut box_types = box_types;
        box_types.sort_by_key(|x| x[1]);
        let mut truck_size = truck_size;
        let mut total = 0;
        while truck_size > 0 && !box_types.is_empty() {
            let box_type = box_types.pop().unwrap();
            if box_type[0] <= truck_size {
                total += box_type[0] * box_type[1];
                truck_size -= box_type[0];
            } else {
                total += truck_size * box_type[1];
                truck_size = 0;
            }
        }
        total

=======

        let mut sorted = box_types.clone();
        sorted.sort_by(|a, b| b[1].cmp(&a[1]));
        let mut count = 0;
        for box_type in sorted {
            let amount = std::cmp::min(box_type[0], truck_size - count);
            count += amount;
            if count == truck_size {
                return count * box_type[1];
            }
        }
        return count * sorted[sorted.len() - 1][1];
    }
}
