Synthesizing 10/10 solutions

=======

        let mut min = nums[0];
        for i in 0..nums.len() {
            if nums[i].abs() < min.abs() {
                min = nums[i];
            } else if nums[i].abs() == min.abs() && nums[i] > min {
                min = nums[i];
            }
        }
        return min;
    }
}

=======

        let mut closest = nums[0];
        for i in 1..nums.len() {
            if (closest.abs() > nums[i].abs()) || (closest.abs() == nums[i].abs() && closest < nums[i]) {
                closest = nums[i];
            }
        }
        closest
    }
}

=======

        let mut min = std::i32::MAX;
        let mut ans = 0;
        for num in nums {
            if num.abs() < min {
                min = num.abs();
                ans = num;
            } else if num.abs() == min && num > ans {
                ans = num;
            }
        }
        ans

=======

        let mut closest = std::i32::MAX;
        let mut closest_num = 0;
        for num in nums {
            if num.abs() < closest {
                closest = num.abs();
                closest_num = num;
            } else if num.abs() == closest && num > closest_num {
                closest_num = num;
            }
        }
        closest_num

=======

        let mut closest = nums[0];
        let mut min = nums[0].abs();
        for num in nums {
            if num.abs() < min {
                closest = num;
                min = num.abs();
            } else if num.abs() == min && num > closest {
                closest = num;
            }
        }
        closest

=======

        let mut closest = nums[0];
        for i in 1..nums.len() {
            let num = nums[i];
            if num == 0 {
                return 0;
            }
            if num.abs() < closest.abs() {
                closest = num;
            }
            if num.abs() == closest.abs() && num > closest {
                closest = num;
            }
        }
        closest

=======

        let mut closest = nums[0];
        for i in 1..nums.len() {
            let n = nums[i];
            if closest.abs() > n.abs() {
                closest = n;
            } else if closest.abs() == n.abs() {
                if closest < n {
                    closest = n;
                }
            }
        }
        closest
    }
}

=======

        let mut closest_number = 0;
        let mut closest_number_distance = i32::max_value();
        for number in nums {
            let distance = number.abs();
            if distance < closest_number_distance {
                closest_number_distance = distance;
                closest_number = number;
            } else if distance == closest_number_distance {
                closest_number = std::cmp::max(closest_number, number);
            }
        }
        closest_number

=======

        let mut closest = 0;
        let mut distance = i32::MAX;
        for &num in nums.iter() {
            let d = num.abs();
            if d < distance || (d == distance && num > closest) {
                closest = num;
                distance = d;
            }
        }
        closest
    }
}

=======

        let mut closest = 100001;
        let mut closest_val = 0;
        for i in nums {
            let abs = i.abs();
            if abs < closest {
                closest = abs;
                closest_val = i;
            }
            else if abs == closest {
                if i > closest_val {
                    closest_val = i;
                }
            }
        }
        closest_val
    }
}
