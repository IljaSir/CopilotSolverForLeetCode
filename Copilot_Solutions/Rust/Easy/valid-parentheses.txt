Synthesizing 10/10 solutions

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' => stack.push(')'),
                '[' => stack.push(']'),
                '{' => stack.push('}'),
                ')' | ']' | '}' => {
                    if stack.pop() != Some(c) {
                        return false;
                    }
                }
                _ => unreachable!(),
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' => stack.push(')'),
                '[' => stack.push(']'),
                '{' => stack.push('}'),
                ')' | ']' | '}' => {
                    if stack.is_empty() || stack.pop().unwrap() != c {
                        return false;
                    }
                }
                _ => unreachable!(),
            }
        }
        stack.is_empty()
    }
}

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => stack.push(c),
                ')' => {
                    if stack.pop() != Some('(') {
                        return false;
                    }
                }
                ']' => {
                    if stack.pop() != Some('[') {
                        return false;
                    }
                }
                '}' => {
                    if stack.pop() != Some('{') {
                        return false;
                    }
                }
                _ => unreachable!(),
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => stack.push(c),
                ')' => {
                    if stack.pop() != Some('(') {
                        return false;
                    }
                }
                ']' => {
                    if stack.pop() != Some('[') {
                        return false;
                    }
                }
                '}' => {
                    if stack.pop() != Some('{') {
                        return false;
                    }
                }
                _ => {}
            }
        }
        stack.is_empty()

=======

        let mut stack = vec![];
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => stack.push(c),
                ')' => {
                    if stack.pop() != Some('(') {
                        return false;
                    }
                }
                ']' => {
                    if stack.pop() != Some('[') {
                        return false;
                    }
                }
                '}' => {
                    if stack.pop() != Some('{') {
                        return false;
                    }
                }
                _ => (),
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' | '{' | '[' => stack.push(c),
                ')' if stack.pop() != Some('(') => return false,
                '}' if stack.pop() != Some('{') => return false,
                ']' if stack.pop() != Some('[') => return false,
                _ => continue,
            }
        }
        stack.is_empty()
    }
}

=======

        let mut stack: Vec<char> = vec![];
        for c in s.chars() {
            if c == '(' || c == '[' || c == '{' {
                stack.push(c);
            } else if c == ')' {
                if let Some(x) = stack.pop() {
                    if x != '(' {
                        return false;
                    }
                } else {
                    return false;
                }
            } else if c == ']' {
                if let Some(x) = stack.pop() {
                    if x != '[' {
                        return false;
                    }
                } else {
                    return false;
                }
            } else if c == '}' {
                if let Some(x) = stack.pop() {
                    if x != '{' {
                        return false;
                    }
                } else {
                    return false;
                }
            }
        }
        stack.is_empty()
    }
}

=======

        let mut stack = vec![];
        for c in s.chars() {
            match c {
                '(' => stack.push(')'),
                '[' => stack.push(']'),
                '{' => stack.push('}'),
                ')' => {
                    if stack.pop() != Some(')') {
                        return false;
                    }
                }
                ']' => {
                    if stack.pop() != Some(']') {
                        return false;
                    }
                }
                '}' => {
                    if stack.pop() != Some('}') {
                        return false;
                    }
                }
                _ => unreachable!(),
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => stack.push(c),
                ')' | ']' | '}' => {
                    let last = stack.pop().unwrap_or(' ');
                    if !((c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{')) {
                        return false;
                    }
                },
                _ => return false,
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                '(' | '[' | '{' => stack.push(c),
                ')' | ']' | '}' => {
                    if let Some(d) = stack.pop() {
                        if (d == '(' && c != ')') || (d == '[' && c != ']') || (d == '{' && c != '}') {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
                _ => return false,
            }
        }
        stack.is_empty()
