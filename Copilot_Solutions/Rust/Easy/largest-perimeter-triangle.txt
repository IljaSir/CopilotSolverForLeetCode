Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        nums.sort();
        for i in (2..nums.len()).rev() {
            if nums[i - 2] + nums[i - 1] > nums[i] {
                return nums[i - 2] + nums[i - 1] + nums[i];
            }
        }
        0
    }
}

=======

        let mut nums = nums;
        nums.sort();
        for i in (0..nums.len() - 2).rev() {
            if nums[i] + nums[i + 1] > nums[i + 2] {
                return nums[i] + nums[i + 1] + nums[i + 2];
            }
        }
        0
    }
}

=======

        let mut nums = nums;
        nums.sort();
        for i in (2..nums.len()).rev() {
            if nums[i] < nums[i - 1] + nums[i - 2] {
                return nums[i] + nums[i - 1] + nums[i - 2];
            }
        }
        0
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        for i in (2..nums.len()).rev() {
            if nums[i-2] + nums[i-1] > nums[i] {
                return nums[i-2] + nums[i-1] + nums[i];
            }
        }
        0

=======

        let mut nums = nums;
        nums.sort_unstable();
        for i in (2..nums.len()).rev() {
            if nums[i] < nums[i-1] + nums[i-2] {
                return nums[i] + nums[i-1] + nums[i-2];
            }
        }
        0

=======

        let mut nums = nums;
        nums.sort();
        let mut i = nums.len() - 1;
        while i >= 2 {
            if nums[i - 2] + nums[i - 1] > nums[i] {
                return nums[i - 2] + nums[i - 1] + nums[i];
            }
            i -= 1;
        }
        0

=======

        let mut nums = nums;
        nums.sort();
        let mut i = nums.len() - 1;
        while i >= 2 {
            if nums[i-1] + nums[i-2] > nums[i] {
                return nums[i] + nums[i-1] + nums[i-2];
            }
            i -= 1;
        }
        0
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut i = nums.len() - 1;
        while i >= 2 {
            if nums[i-2] + nums[i-1] > nums[i] {
                return nums[i-2] + nums[i-1] + nums[i];
            }
            i -= 1;
        }
        0
    }
}
