Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut min_price = i32::MAX;
        let mut max_profit = 0;
        for i in 0..prices.len() {
            if prices[i] < min_price {
                min_price = prices[i];
            } else if prices[i] - min_price > max_profit {
                max_profit = prices[i] - min_price;
            }
        }
        max_profit
    }
}

=======

        let mut min_price = prices[0];
        let mut max_profit = 0;
        for i in 1..prices.len() {
            if prices[i] < min_price {
                min_price = prices[i];
            } else if prices[i] - min_price > max_profit {
                max_profit = prices[i] - min_price;
            }
        }
        max_profit

=======

        let mut max_profit = 0;
        let mut min_price = std::i32::MAX;
        for price in prices {
            if price < min_price {
                min_price = price;
            } else if price - min_price > max_profit {
                max_profit = price - min_price;
            }
        }
        max_profit
    }
}

=======

        let mut max_profit = 0;
        let mut min_price = std::i32::MAX;
        for price in prices {
            if price < min_price {
                min_price = price;
            } else if price - min_price > max_profit {
                max_profit = price - min_price;
            }
        }
        return max_profit;
    }
}

=======

        let mut max_profit = 0;
        let mut min_price = i32::MAX;
        for price in prices {
            if price < min_price {
                min_price = price;
            } else if price - min_price > max_profit {
                max_profit = price - min_price;
            }
        }
        max_profit
    }
}

=======

        let mut min = prices[0];
        let mut max = 0;
        for i in 1..prices.len() {
            if prices[i] < min {
                min = prices[i];
            } else if prices[i] - min > max {
                max = prices[i] - min;
            }
        }
        max
    }
}

=======

        let mut min = std::i32::MAX;
        let mut max = 0;
        for i in 0..prices.len() {
            min = min.min(prices[i]);
            max = max.max(prices[i] - min);
        }
        max

=======

        let (mut min, mut max) = (prices[0], 0);
        for i in 1..prices.len() {
            if prices[i] < min {
                min = prices[i];
            } else if prices[i] - min > max {
                max = prices[i] - min;
            }
        }
        max
    }
}

=======

        let mut min = std::i32::MAX;
        let mut max = 0;
        for price in prices.iter() {
            if *price < min {
                min = *price;
            } else if *price - min > max {
                max = *price - min;
            }
        }
        max
    }
}
