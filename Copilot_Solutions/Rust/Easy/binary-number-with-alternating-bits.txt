Synthesizing 10/10 solutions

=======

        let mut n = n;
        let mut last_bit = n & 1;
        n >>= 1;
        while n > 0 {
            let bit = n & 1;
            if bit == last_bit {
                return false;
            }
            last_bit = bit;
            n >>= 1;
        }
        true

=======

        let mut n = n;
        let mut last = n & 1;
        n >>= 1;
        while n > 0 {
            let cur = n & 1;
            if cur == last {
                return false;
            }
            last = cur;
            n >>= 1;
        }
        true

=======

        let mut n = n;
        let mut last = n & 1;
        n >>= 1;
        while n > 0 {
            let cur = n & 1;
            if cur == last {
                return false;
            }
            n >>= 1;
            last = cur;
        }
        true

=======

        let mut n = n;
        let mut prev = n & 1;
        n >>= 1;
        while n > 0 {
            let cur = n & 1;
            if cur == prev {
                return false;
            }
            prev = cur;
            n >>= 1;
        }
        true

=======

        let mut n = n;
        let mut last_bit = n & 1;
        n >>= 1;
        while n > 0 {
            if last_bit == (n & 1) {
                return false;
            }
            last_bit = n & 1;
            n >>= 1;
        }
        true

=======

        let mut n = n;
        let mut last = n & 1;
        n >>= 1;
        while n > 0 {
            let b = n & 1;
            if b == last {
                return false;
            }
            last = b;
            n >>= 1;
        }
        true
    }
}

=======

        let mut n = n;
        let mut last = n & 1;
        n >>= 1;
        while n > 0 {
            let curr = n & 1;
            if curr == last {
                return false;
            }
            last = curr;
            n >>= 1;
        }
        true

=======

        let mut n = n;
        let mut last = n & 1;
        n >>= 1;
        while n > 0 {
            let t = n & 1;
            if t == last {
                return false;
            }
            last = t;
            n >>= 1;
        }
        true
    }
}

=======

        let mut last_bit = n & 1;
        let mut n = n >> 1;
        while n != 0 {
            if (n & 1) == last_bit {
                return false;
            }
            last_bit = n & 1;
            n = n >> 1;
        }
        true

=======

        let mut n = n;
        let mut flag = n & 1;
        n >>= 1;
        while n > 0 {
            if flag == (n & 1) {
                return false;
            }
            flag = n & 1;
            n >>= 1;
        }
        true
