Synthesizing 10/10 solutions

=======

        let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        let mut count = 0;
        for (i, c) in s.chars().enumerate() {
            if vowels.contains(&c) {
                if i < s.len() / 2 {
                    count += 1;
                } else {
                    count -= 1;
                }
            }
        }
        count == 0
    }
}

=======

        let mut a = 0;
        let mut b = 0;
        let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        for i in 0..s.len() {
            if vowels.contains(&s.chars().nth(i).unwrap()) {
                if i < s.len() / 2 {
                    a += 1;
                } else {
                    b += 1;
                }
            }
        }
        a == b

=======

        let mut a = 0;
        let mut b = 0;
        let mut i = 0;
        for c in s.chars() {
            if i < s.len() / 2 {
                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {
                    a += 1;
                }
            } else {
                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' {
                    b += 1;
                }
            }
            i += 1;
        }
        return a == b;

=======

        let mut a = 0;
        let mut b = 0;
        let mut vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        for (i, c) in s.chars().enumerate() {
            if vowels.contains(&c) {
                if i < s.len() / 2 {
                    a += 1;
                } else {
                    b += 1;
                }
            }
        }
        a == b
    }
}

=======

        let mut a = 0;
        let mut b = 0;
        let mut i = 0;
        for c in s.chars() {
            if i < s.len() / 2 {
                if c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {
                    a += 1;
                }
            } else {
                if c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U' {
                    b += 1;
                }
            }
            i += 1;
        }
        a == b

=======

        let mut count = 0;
        let mut chars = s.chars();
        for _ in 0..s.len()/2 {
            match chars.next().unwrap() {
                'a'|'e'|'i'|'o'|'u'|'A'|'E'|'I'|'O'|'U' => count += 1,
                _ => count -= 1
            }
            match chars.next_back().unwrap() {
                'a'|'e'|'i'|'o'|'u'|'A'|'E'|'I'|'O'|'U' => count += 1,
                _ => count -= 1
            }
        }
        return count == 0;
    }
}

=======

        let mut count = 0;
        let mut a = s.chars().take(s.len() / 2);
        let mut b = s.chars().skip(s.len() / 2);
        for _ in 0..s.len() / 2 {
            if "aeiouAEIOU".contains(a.next().unwrap()) {
                count += 1;
            }
            if "aeiouAEIOU".contains(b.next().unwrap()) {
                count -= 1;
            }
        }
        count == 0

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = s.len() - 1;
        let mut s = s.chars().collect::<Vec<char>>();
        while i < j {
            count += match s[i] {
                'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => 1,
                _ => 0,
            };
            count -= match s[j] {
                'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => 1,
                _ => 0,
            };
            i += 1;
            j -= 1;
        }
        count == 0

=======

        let mut vowels = 0;
        let mut i = 0;
        let mut j = s.len() - 1;

        while i < j {
            if is_vowel(s.chars().nth(i).unwrap()) {
                vowels += 1;
            }
            if is_vowel(s.chars().nth(j).unwrap()) {
                vowels -= 1;
            }
            i += 1;
            j -= 1;
        }

        vowels == 0
    }
}

=======

        let mut a = 0;
        let mut b = 0;
        let s = s.into_bytes();
        let s_len = s.len();
        for (i, v) in s.iter().enumerate() {
            if i < s_len/2 {
                a += match v {
                    b'a' | b'e' | b'i' | b'o' | b'u' | b'A' | b'E' | b'I' | b'O' | b'U' => 1,
                    _ => 0,
                };
            } else {
                b += match v {
                    b'a' | b'e' | b'i' | b'o' | b'u' | b'A' | b'E' | b'I' | b'O' | b'U' => 1,
                    _ => 0,
                };
            }
        }
        a == b
