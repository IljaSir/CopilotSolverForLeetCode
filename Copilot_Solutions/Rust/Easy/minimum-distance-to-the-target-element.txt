Synthesizing 10/10 solutions

=======

        let mut min = std::i32::MAX;
        for i in 0..nums.len() {
            if nums[i] == target {
                let d = (i as i32 - start).abs();
                if d < min {
                    min = d;
                }
            }
        }
        min

=======

        let mut min = 1000;
        for i in 0..nums.len() {
            if nums[i] == target {
                if (i as i32 - start).abs() < min {
                    min = (i as i32 - start).abs();
                }
            }
        }
        min

=======

        let mut min = std::i32::MAX;
        for i in 0..nums.len() {
            if nums[i] == target {
                let distance = (i as i32 - start).abs();
                if distance < min {
                    min = distance;
                }
            }
        }
        min

=======

        nums.iter().enumerate().filter(|(_, x)| **x == target).map(|(i, _)| (i as i32 - start).abs()).min().unwrap()

=======

        let mut min = 1000;
        for i in 0..nums.len() {
            if nums[i] == target {
                let d = (i as i32 - start).abs();
                if d < min {
                    min = d;
                }
            }
        }
        min

=======

        let mut min = 1000;
        for i in 0..nums.len() {
            if nums[i] == target {
                let diff = (i as i32 - start).abs();
                if diff < min {
                    min = diff;
                }
            }
        }
        min

=======

        let mut min = i32::max_value();
        for (i, v) in nums.iter().enumerate() {
            if *v == target {
                let diff = (i as i32 - start).abs();
                if diff < min {
                    min = diff;
                }
            }
        }
        min

=======

        let mut min = 1000;
        for (i, v) in nums.iter().enumerate() {
            if *v == target && (start as usize - i).abs() < min {
                min = (start as usize - i).abs();
            }
        }
        min as i32

=======

        let mut min = 1000;
        for (i, &a) in nums.iter().enumerate() {
            if a == target && (i as i32 - start).abs() < min {
                min = (i as i32 - start).abs();
            }
        }
        min

=======

        let mut min = nums.len();
        let mut i = 0;
        for n in nums {
            if n == target && min > (start - i).abs() as usize {
                min = (start - i).abs() as usize;
            }
            i += 1;
        }
        min as i32
