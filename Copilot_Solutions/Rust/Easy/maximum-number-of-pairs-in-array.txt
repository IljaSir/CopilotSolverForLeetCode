Synthesizing 10/10 solutions

=======

        let mut count = vec![0; 101];
        for n in nums {
            count[n as usize] += 1;
        }
        let mut pairs = 0;
        let mut left = 0;
        for i in 1..=100 {
            let c = count[i];
            if c > 0 {
                pairs += count[i - 1] * c;
                left += c;
            }
        }
        vec![pairs, left as i32]
    }
}

=======

        let mut count = [0; 101];
        for n in nums.iter() {
            count[*n as usize] += 1;
        }
        let mut pairs = 0;
        let mut left = 0;
        for i in 0..count.len() {
            if count[i] > 1 {
                pairs += count[i] * (count[i] - 1) / 2;
                left += count[i] % 2;
            } else {
                left += count[i];
            }
        }
        vec![pairs, left]
    }
}

=======

        let mut count = vec![0; 101];
        for n in nums {
            count[n as usize] += 1;
        }
        let mut res = 0;
        let mut left = 0;
        for i in 0..101 {
            for j in i+1..101 {
                res += count[i] * count[j];
            }
            left += count[i] * (count[i] - 1) / 2;
        }
        vec![res, left]
    }
}

=======

        let mut count = vec![0; 101];
        for num in nums {
            count[num as usize] += 1;
        }
        let mut ans = 0;
        for i in 0..=100 {
            for j in i..=100 {
                if i == j {
                    ans += count[i] * (count[i] - 1) / 2;
                } else {
                    ans += count[i] * count[j];
                }
            }
        }
        vec![ans, nums.len() as i32 - ans]

=======

        let mut count = [0; 101];
        for &n in &nums {
            count[n as usize] += 1;
        }
        let mut pairs = 0;
        let mut leftover = 0;
        for i in 1..=100 {
            for j in i..=100 {
                if i == j {
                    let n = count[i];
                    pairs += n * (n - 1) / 2;
                } else {
                    pairs += count[i] * count[j];
                }
            }
            leftover += count[i] % 2;
        }
        vec![pairs, leftover]

=======

        let mut counts = [0; 101];
        for n in nums {
            counts[n as usize] += 1;
        }
        let mut pairs = 0;
        let mut singles = 0;
        for i in 0..101 {
            if counts[i] > 1 {
                pairs += counts[i] * (counts[i] - 1) / 2;
            }
            if counts[i] > 0 {
                singles += counts[i] - 1;
            }
        }
        vec![pairs, singles]

=======

        let mut count = vec![0; 101];
        for &num in nums.iter() {
            count[num as usize] += 1;
        }
        let mut left = 0;
        let mut pairs = 0;
        for i in 0..=100 {
            let c = count[i];
            if c > 1 {
                pairs += c * (c - 1) / 2;
            }
            left += c;
        }
        vec![pairs, left - 2 * pairs]
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut pairs = 0;
        let mut left = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            if j - i > 1 {
                pairs += (j - i) / 2;
                left += (j - i) % 2;
            } else {
                left += 1;
            }
            i = j;
        }
        vec![pairs, left]

=======

        let mut pairs = 0;
        let mut left = 0;
        let mut count = vec![0; 101];
        for n in nums {
            left += count[n as usize];
            pairs += count[n as usize];
            count[n as usize] += 1;
        }
        vec![pairs, left]

=======

        let mut cnt = vec![0; 101];
        let mut pairs = 0;
        for &n in &nums {
            pairs += cnt[n as usize];
            for i in 0..=(n as usize) {
                cnt[i] += 1;
            }
        }
        vec![pairs, nums.len() as i32 - pairs]
    }
}
