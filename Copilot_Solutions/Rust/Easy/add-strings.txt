Synthesizing 10/10 solutions

=======

        let (mut num1, mut num2) = (num1.into_bytes(), num2.into_bytes());
        let (mut i, mut j) = (num1.len() - 1, num2.len() - 1);
        let mut carry = 0;
        let mut ans = Vec::new();
        while i < num1.len() || j < num2.len() || carry > 0 {
            let mut sum = carry;
            if i < num1.len() {
                sum += num1[i] - b'0';
                i += 1;
            }
            if j < num2.len() {
                sum += num2[j] - b'0';
                j += 1;
            }
            carry = sum / 10;
            ans.push((sum % 10 + b'0') as char);
        }
        ans.into_iter().rev().collect()

=======

        let mut i = num1.len() - 1;
        let mut j = num2.len() - 1;
        let mut carry = 0;
        let mut res = String::new();
        while i < num1.len() || j < num2.len() || carry > 0 {
            let mut sum = carry;
            if i < num1.len() {
                sum += (num1.as_bytes()[i] - b'0') as i32;
                i -= 1;
            }
            if j < num2.len() {
                sum += (num2.as_bytes()[j] - b'0') as i32;
                j -= 1;
            }
            carry = sum / 10;
            res.push((sum % 10 + b'0') as char);
        }
        res.chars().rev().collect()

=======

        let mut num1 = num1;
        let mut num2 = num2;
        let mut result = String::new();
        let mut carry = 0;
        while num1.len() > 0 || num2.len() > 0 {
            let mut sum = carry;
            if num1.len() > 0 {
                sum += num1.pop().unwrap() as i32 - '0' as i32;
            }
            if num2.len() > 0 {
                sum += num2.pop().unwrap() as i32 - '0' as i32;
            }
            result.push((sum % 10 + '0' as i32) as u8 as char);
            carry = sum / 10;
        }
        if carry > 0 {
            result.push((carry + '0' as i32) as u8 as char);
        }
        result.chars().rev().collect()
    }
}

=======

        let mut carry = 0;
        let mut i = num1.len() - 1;
        let mut j = num2.len() - 1;
        let mut sum = String::new();
        while i < num1.len() || j < num2.len() || carry != 0 {
            let mut v1 = 0;
            let mut v2 = 0;
            if i < num1.len() {
                v1 = num1.chars().nth(i).unwrap() as i32 - '0' as i32;
                i -= 1;
            }
            if j < num2.len() {
                v2 = num2.chars().nth(j).unwrap() as i32 - '0' as i32;
                j -= 1;
            }
            let mut v = v1 + v2 + carry;
            carry = 0;
            if v > 9 {
                carry = 1;
                v -= 10;
            }
            sum.insert(0, (v as u8 + '0' as u8) as char);
        }
        sum

=======

        let mut n1 = num1.chars().rev().collect::<Vec<char>>();
        let mut n2 = num2.chars().rev().collect::<Vec<char>>();
        let mut ret = String::new();
        let mut carry = 0;
        while !n1.is_empty() || !n2.is_empty() {
            let mut sum = carry;
            if !n1.is_empty() {
                sum += n1.pop().unwrap() as i32 - '0' as i32;
            }
            if !n2.is_empty() {
                sum += n2.pop().unwrap() as i32 - '0' as i32;
            }
            ret.push((sum % 10 + '0' as i32) as u8 as char);
            carry = sum / 10;
        }
        if carry > 0 {
            ret.push(carry as u8 as char);
        }
        ret.chars().rev().collect()
    }
}

=======

        let mut result = String::new();
        let mut carry = 0;
        let (mut num1, mut num2) = (num1, num2);
        while num1.len() > 0 || num2.len() > 0 {
            let (mut n1, mut n2) = (0, 0);
            if num1.len() > 0 {
                n1 = num1.pop().unwrap() as i32 - '0' as i32;
            }
            if num2.len() > 0 {
                n2 = num2.pop().unwrap() as i32 - '0' as i32;
            }
            let sum = n1 + n2 + carry;
            carry = sum / 10;
            result.insert(0, (sum % 10 + '0' as i32) as u8 as char);
        }
        if carry > 0 {
            result.insert(0, (carry + '0' as i32) as u8 as char);
        }
        result

=======

        let mut c = 0;
        let mut ret = String::new();
        let mut i = num1.len();
        let mut j = num2.len();
        while i > 0 || j > 0 {
            let mut v = c;
            if i > 0 {
                i -= 1;
                v += num1.chars().nth(i).unwrap().to_digit(10).unwrap();
            }
            if j > 0 {
                j -= 1;
                v += num2.chars().nth(j).unwrap().to_digit(10).unwrap();
            }
            c = v / 10;
            ret.push_str(&(v % 10).to_string());
        }
        if c > 0 {
            ret.push_str(&c.to_string());
        }
        ret.chars().rev().collect()

=======

        let mut num1 = num1.as_bytes();
        let mut num2 = num2.as_bytes();
        let mut carry = 0;
        let mut out = String::new();
        while !num1.is_empty() || !num2.is_empty() {
            let mut sum = carry;
            if let Some(n1) = num1.pop() {
                sum += n1 - b'0';
            }
            if let Some(n2) = num2.pop() {
                sum += n2 - b'0';
            }
            out.push((sum % 10 + b'0') as char);
            carry = sum / 10;
        }
        if carry > 0 {
            out.push((carry + b'0') as char);
        }
        out.chars().rev().collect()

=======

        let mut r = String::new();
        let mut c = 0;
        let (mut n1, mut n2) = (num1.into_bytes(), num2.into_bytes());
        while !n1.is_empty() || !n2.is_empty() || c > 0 {
            if let Some(n) = n1.pop() { c += (n - b'0') as i32; }
            if let Some(n) = n2.pop() { c += (n - b'0') as i32; }
            r.push((c % 10 + b'0') as char);
            c /= 10;
        }
        r.chars().rev().collect()

=======

        
    }
}
