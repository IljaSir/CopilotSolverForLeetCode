Synthesizing 10/10 solutions

=======

        let mut res = String::new();
        for i in 0..words.len() {
            let mut count = 0;
            for j in 1..words[i].len() {
                if (words[i].as_bytes()[j] - words[i].as_bytes()[j-1]) % 2 == 0 {
                    count += 1;
                }
            }
            if count == words[i].len() - 1 {
                res = words[i].clone();
                break;
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        for i in 0..words.len() {
            let mut odd = true;
            for j in 1..words[i].len() {
                if (words[i].as_bytes()[j] as i32 - words[i].as_bytes()[j-1] as i32) % 2 == 0 {
                    odd = false;
                    break;
                }
            }
            if odd {
                res = words[i].clone();
                break;
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut diff = Vec::new();
        for word in words {
            let mut temp = Vec::new();
            for i in 1..word.len() {
                temp.push(word.as_bytes()[i] - word.as_bytes()[i-1]);
            }
            diff.push(temp);
        }
        for i in 1..diff.len() {
            if diff[i] != diff[i-1] {
                if i == 1 {
                    res = words[i-1].to_string();
                } else {
                    res = words[i].to_string();
                }
                break;
            }
        }
        res
    }
}

=======

        for word in words.iter() {
            let mut odd = true;
            let mut diff = 0;
            for i in 0..word.len()-1 {
                let d = (word.chars().nth(i+1).unwrap() as i32) - (word.chars().nth(i).unwrap() as i32);
                if i == 0 {
                    diff = d;
                }
                else {
                    if d != diff {
                        odd = false;
                        break;
                    }
                }
            }
            if odd {
                return word.to_string();
            }
        }
        return "".to_string();
    }
}

=======

        let mut ret = String::new();
        let mut diff = Vec::new();
        for word in words {
            let mut tmp = Vec::new();
            for (i, c) in word.chars().enumerate() {
                if i != 0 {
                    tmp.push(c as i32 - word.chars().nth(i - 1).unwrap() as i32);
                }
            }
            if diff.contains(&tmp) {
                diff.retain(|x| x != &tmp);
            } else {
                diff.push(tmp);
            }
        }
        for word in words {
            let mut tmp = Vec::new();
            for (i, c) in word.chars().enumerate() {
                if i != 0 {
                    tmp.push(c as i32 - word.chars().nth(i - 1).unwrap() as i32);
                }
            }
            if tmp == diff[0] {
                ret = word;
                break;
            }
        }
        ret

=======

        let mut count = vec![vec![0; 26]; 2];
        for word in words {
            let mut prev = 0;
            for c in word.bytes() {
                count[(c - b'a') as usize][prev] += 1;
                prev = c - b'a';
            }
        }
        for i in 0..26 {
            if count[i][0] % 2 == 1 {
                return (b'a' + i as u8) as char;
            }
        }
        for i in 0..26 {
            if count[i][1] % 2 == 1 {
                return (b'a' + i as u8) as char;
            }
        }
        "".to_string()
    }
}

=======

        let mut words = words;
        let mut res = String::new();
        let mut diff = vec![];
        for i in 0..words.len() {
            let mut tmp = vec![];
            for j in 0..words[i].len() - 1 {
                tmp.push(words[i].as_bytes()[j + 1] - words[i].as_bytes()[j]);
            }
            diff.push(tmp);
        }
        let mut count = 0;
        for i in 0..diff.len() {
            let mut tmp = 0;
            for j in 0..diff[i].len() {
                tmp += diff[i][j];
            }
            if tmp != 0 {
                count += 1;
                res = words[i].to_string();
            }
        }
        if count == 1 {
            res
        } else {
            String::new()
        }

=======

        let mut res = String::new();
        for w in words {
            let mut diff = vec![];
            let mut odd = 0;
            let mut even = 0;
            for i in 1..w.len() {
                let d = w.as_bytes()[i] as i32 - w.as_bytes()[i - 1] as i32;
                diff.push(d);
                if i % 2 == 0 {
                    even += d;
                } else {
                    odd += d;
                }
            }
            if even != odd {
                res = w;
                break;
            }
        }
        res
    }
}

=======

        let mut result = String::from("");
        let mut count = 0;
        let mut diff: Vec<i32> = Vec::new();
        for i in 0..words.len() {
            let mut temp: Vec<i32> = Vec::new();
            for j in 0..words[i].len() - 1 {
                temp.push(words[i].chars().nth(j + 1).unwrap() as i32 - words[i].chars().nth(j).unwrap() as i32);
            }
            if i == 0 {
                diff = temp;
            } else {
                if temp != diff {
                    count += 1;
                    result = words[i].clone();
                }
            }
        }
        result
    }
}

=======

        let mut res = String::from("");
        let mut odd = false;
        let mut diff = 0;
        for i in 0..words.len() {
            let mut tmp = Vec::new();
            for j in 0..words[i].len() - 1 {
                tmp.push(words[i].as_bytes()[j + 1] - words[i].as_bytes()[j]);
            }
            println!("{:?}", tmp);
            let mut odd_tmp = false;
            for k in 0..tmp.len() {
                if k == 0 {
                    diff = tmp[k];
                } else {
                    if tmp[k] != diff {
                        odd_tmp = true;
                        break;
                    }
                }
            }
            if odd_tmp {
                odd = true;
                res = words[i].clone();
                break;
            }
        }
        if odd {
            res
        } else {
            String::from("")
        }
