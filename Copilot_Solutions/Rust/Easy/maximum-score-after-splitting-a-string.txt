Synthesizing 10/10 solutions

=======

        let mut zeros = 0;
        let mut ones = 0;
        let mut max_score = 0;
        for c in s.chars() {
            if c == '0' {
                zeros += 1;
            } else {
                ones += 1;
            }
        }
        let mut left_zeros = 0;
        let mut right_ones = ones;
        for c in s.chars() {
            if c == '0' {
                left_zeros += 1;
            } else {
                right_ones -= 1;
            }
            max_score = max_score.max(left_zeros + right_ones);
        }
        max_score

=======

        let mut ones = 0;
        let mut zeros = 0;
        let mut ans = 0;
        for c in s.chars() {
            if c == '1' {
                ones += 1;
            }
        }
        for c in s.chars() {
            if c == '0' {
                zeros += 1;
            } else {
                ones -= 1;
            }
            ans = ans.max(zeros + ones);
        }
        ans

=======

        let mut max_score = 0;
        let mut left = 0;
        let mut right = 0;
        for c in s.chars() {
            if c == '1' {
                right += 1;
            }
        }
        for (i, c) in s.chars().enumerate() {
            if i == s.len() - 1 {
                break;
            }
            if c == '0' {
                left += 1;
            } else {
                right -= 1;
            }
            if left + right > max_score {
                max_score = left + right;
            }
        }
        max_score

=======

        let mut result = 0;
        let mut ones = 0;
        let mut zeros = 0;
        for ch in s.chars() {
            if ch == '1' {
                ones += 1;
            }
        }
        for ch in s.chars() {
            if ch == '0' {
                zeros += 1;
            } else {
                ones -= 1;
            }
            result = result.max(zeros + ones);
        }
        result
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        let mut left = 0;
        let mut right = 0;
        for c in s.chars() {
            if c == '1' {
                right += 1;
            }
        }
        for c in s.chars() {
            if c == '1' {
                right -= 1;
            } else {
                left += 1;
            }
            count = left + right;
            if count > max {
                max = count;
            }
        }
        max

=======

        let mut count = 0;
        let mut max = 0;
        for c in s.chars() {
            if c == '1' {
                count += 1;
            }
        }
        let mut count1 = 0;
        for c in s.chars() {
            if c == '0' {
                count1 += 1;
            } else {
                count -= 1;
            }
            if count + count1 > max {
                max = count + count1;
            }
        }
        max

=======

        let mut s = s.into_bytes();
        let mut one = 0;
        let mut zero = 0;
        for i in 0..s.len() {
            if s[i] == b'1' {
                one += 1;
            }
        }
        let mut max = 0;
        for i in 0..s.len() - 1 {
            if s[i] == b'1' {
                one -= 1;
            } else {
                zero += 1;
            }
            if one + zero > max {
                max = one + zero;
            }
        }
        max

=======

        let mut sum: i32 = 0;
        for c in s.chars() {
            if c == '1' { sum += 1; }
        }
        let mut max: i32 = sum;
        let mut left: i32 = 0;
        for c in s.chars() {
            if c == '1' { sum -= 1; } else { left += 1; }
            let tmp = sum + left;
            if tmp > max { max = tmp; }
        }
        max

=======

        let mut count = 0;
        let mut max = 0;
        let mut count0 = 0;
        let mut count1 = 0;
        for c in s.chars() {
            match c {
                '0' => count0 += 1,
                '1' => count1 += 1,
                _ => (),
            }
        }
        for c in s.chars() {
            match c {
                '0' => {
                    count0 -= 1;
                    count += 1;
                },
                '1' => {
                    count1 -= 1;
                },
                _ => (),
            }
            if count + count1 > max {
                max = count + count1;
            }
        }
        max
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        let mut l = 0;
        let mut r = 0;
        let mut i = 0;
        for c in s.chars() {
            if c == '0' {
                l += 1;
            } else {
                r += 1;
            }
            if i == s.len() - 1 {
                break;
            }
            if l == r {
                count += 1;
                if count > max {
                    max = count;
                }
            }
            i += 1;
        }
        max
