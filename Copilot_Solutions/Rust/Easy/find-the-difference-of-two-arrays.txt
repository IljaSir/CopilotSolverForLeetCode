Synthesizing 10/10 solutions

=======

        let mut nums1: Vec<i32> = nums1;
        let mut nums2: Vec<i32> = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut result: Vec<Vec<i32>> = vec![vec![], vec![]];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                i += 1;
                j += 1;
            } else if nums1[i] > nums2[j] {
                result[1].push(nums2[j]);
                j += 1;
            } else {
                result[0].push(nums1[i]);
                i += 1;
            }
        }
        if i < nums1.len() {
            result[0].extend_from_slice(&nums1[i..]);
        }
        if j < nums2.len() {
            result[1].extend_from_slice(&nums2[j..]);
        }
        result
    }
}

=======

        let mut result: Vec<Vec<i32>> = vec![vec![], vec![]];
        for i in nums1 {
            if !nums2.contains(&i) {
                result[0].push(i);
            }
        }
        for i in nums2 {
            if !nums1.contains(&i) {
                result[1].push(i);
            }
        }
        result
    }
}

=======

        let mut diff = vec![vec![], vec![]];
        for i in nums1 {
            if !nums2.contains(&i) {
                diff[0].push(i);
            }
        }
        for i in nums2 {
            if !nums1.contains(&i) {
                diff[1].push(i);
            }
        }
        diff

=======

        let mut diff1 = Vec::new();
        let mut diff2 = Vec::new();
        let mut set1 = std::collections::HashSet::new();
        let mut set2 = std::collections::HashSet::new();
        for num in nums1 {
            if set2.contains(&num) {
                set2.remove(&num);
            } else {
                set1.insert(num);
            }
        }
        for num in nums2 {
            if set1.contains(&num) {
                set1.remove(&num);
            } else {
                set2.insert(num);
            }
        }
        for num in set1 {
            diff1.push(num);
        }
        for num in set2 {
            diff2.push(num);
        }
        vec![diff1, diff2]
    }
}

=======

        let mut result = vec![vec![], vec![]];
        let mut set1 = std::collections::HashSet::new();
        let mut set2 = std::collections::HashSet::new();
        for n in nums1 {
            set1.insert(n);
        }
        for n in nums2 {
            set2.insert(n);
        }
        for n in set1.difference(&set2) {
            result[0].push(*n);
        }
        for n in set2.difference(&set1) {
            result[1].push(*n);
        }
        result
    }
}

=======

        let mut res = vec![vec![], vec![]];
        let mut map = std::collections::HashMap::new();
        for num in nums1 {
            *map.entry(num).or_insert(0) += 1;
        }
        for num in nums2 {
            *map.entry(num).or_insert(0) -= 1;
        }
        for (k, v) in map {
            if v > 0 {
                res[0].push(k);
            } else if v < 0 {
                res[1].push(k);
            }
        }
        res

=======

        let mut a = nums1.clone();
        let mut b = nums2.clone();
        a.sort();
        b.sort();
        let mut i = 0;
        let mut j = 0;
        let mut res = vec![vec![],vec![]];
        while i < a.len() && j < b.len() {
            if a[i] < b[j] {
                res[0].push(a[i]);
                i += 1;
            } else if a[i] > b[j] {
                res[1].push(b[j]);
                j += 1;
            } else {
                i += 1;
                j += 1;
            }
        }
        while i < a.len() {
            res[0].push(a[i]);
            i += 1;
        }
        while j < b.len() {
            res[1].push(b[j]);
            j += 1;
        }
        res
    }
}

=======

        let mut result = vec![vec![], vec![]];
        let mut s1 = std::collections::HashSet::new();
        let mut s2 = std::collections::HashSet::new();
        for i in nums1 {
            s1.insert(i);
        }
        for i in nums2 {
            s2.insert(i);
        }
        for i in s1 {
            if !s2.contains(&i) {
                result[0].push(i);
            }
        }
        for i in s2 {
            if !s1.contains(&i) {
                result[1].push(i);
            }
        }
        result

=======

        let mut ans = vec![vec![],vec![]];
        let mut s1 = std::collections::HashSet::new();
        let mut s2 = std::collections::HashSet::new();
        for i in nums1 {
            s1.insert(i);
        }
        for i in nums2 {
            s2.insert(i);
        }
        for i in s1 {
            if !s2.contains(&i) {
                ans[0].push(i);
            }
        }
        for i in s2 {
            if !s1.contains(&i) {
                ans[1].push(i);
            }
        }
        ans

=======

        let mut v1 = nums1.clone();
        let mut v2 = nums2.clone();
        v1.sort();
        v2.sort();
        let mut res = vec![vec![],vec![]];
        for i in 0..v1.len() {
            if v2.get(i).is_some() {
                if v1[i] != v2[i] {
                    res[1].push(v2[i]);
                    res[0].push(v1[i]);
                }
            } else {
                res[0].push(v1[i]);
            }
        }
        if v2.len() > v1.len() {
            for i in v1.len()..v2.len() {
                res[1].push(v2[i]);
            }
        }
        res
