Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        let mut left = 0;
        let mut right = s.len() as i32;
        for c in s.chars() {
            if c == 'I' {
                result.push(left);
                left += 1;
            } else {
                result.push(right);
                right -= 1;
            }
        }
        result.push(left);
        result

=======

        let mut res = vec![];
        let mut min = 0;
        let mut max = s.len() as i32;
        for c in s.chars() {
            if c == 'I' {
                res.push(min);
                min += 1;
            } else {
                res.push(max);
                max -= 1;
            }
        }
        res.push(min);
        res
    }
}

=======

        let mut result = Vec::new();
        let mut max = s.len() as i32;
        let mut min = 0;
        for c in s.chars() {
            if c == 'I' {
                result.push(min);
                min += 1;
            } else {
                result.push(max);
                max -= 1;
            }
        }
        result.push(max);
        result

=======

        let mut res: Vec<i32> = Vec::new();
        let mut min = 0;
        let mut max = s.len() as i32;
        for c in s.chars() {
            match c {
                'I' => {
                    res.push(min);
                    min += 1;
                }
                'D' => {
                    res.push(max);
                    max -= 1;
                }
                _ => {}
            }
        }
        res.push(max);
        res
    }
}

=======

        let mut v: Vec<i32> = Vec::new();
        let mut min = 0;
        let mut max = s.len() as i32;
        for c in s.chars() {
            if c == 'I' {
                v.push(min);
                min += 1;
            } else {
                v.push(max);
                max -= 1;
            }
        }
        v.push(min);
        v

=======

        let mut ret = Vec::new();
        let mut max = s.len() as i32;
        let mut min = 0;
        for c in s.chars() {
            match c {
                'I' => {
                    ret.push(min);
                    min += 1;
                }
                'D' => {
                    ret.push(max);
                    max -= 1;
                }
                _ => {}
            }
        }
        ret.push(min);
        ret
    }
}

=======

        let mut nums = Vec::new();
        let mut i = 0;
        let mut d = s.len() as i32;
        for c in s.chars() {
            if c == 'I' {
                nums.push(i);
                i += 1;
            } else {
                nums.push(d);
                d -= 1;
            }
        }
        nums.push(i);
        nums
    }
}

=======

        let mut v: Vec<i32> = Vec::new();
        let mut a = 0;
        let mut b = s.len() as i32;
        for c in s.chars() {
            if c == 'I' {
                v.push(a);
                a += 1;
            } else {
                v.push(b);
                b -= 1;
            }
        }
        v.push(a);
        v

=======

        let mut r = Vec::with_capacity(s.len() + 1);
        let mut d = s.len() as i32;
        let mut i = 0;
        for c in s.chars() {
            if c == 'I' {
                r.push(i);
                i += 1;
            }
            else {
                r.push(d);
                d -= 1;
            }
        }
        r.push(i);
        r
    }
}

=======

        
    }
}
