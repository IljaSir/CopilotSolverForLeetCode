Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..arr1.len() {
            let mut flag = true;
            for j in 0..arr2.len() {
                if (arr1[i] - arr2[j]).abs() <= d {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut res = 0;
        for i in 0..arr1.len() {
            let mut flag = true;
            for j in 0..arr2.len() {
                if (arr1[i] - arr2[j]).abs() <= d {
                    flag = false;
                    break;
                }
            }
            if flag {
                res += 1;
            }
        }
        res

=======

        let mut result = 0;
        for i in 0..arr1.len() {
            let mut flag = true;
            for j in 0..arr2.len() {
                if (arr1[i] - arr2[j]).abs() <= d {
                    flag = false;
                    break;
                }
            }
            if flag {
                result += 1;
            }
        }
        result
    }
}

=======

        let mut result = 0;
        for i in 0..arr1.len() {
            let mut flag = true;
            for j in 0..arr2.len() {
                if (arr1[i] - arr2[j]).abs() <= d {
                    flag = false;
                    break;
                }
            }
            if flag {
                result += 1;
            }
        }
        result

=======

        let mut count = 0;
        for i in arr1 {
            let mut flag = true;
            for j in &arr2 {
                if (i - j).abs() <= d {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
        count

=======

        arr1.iter().filter(|&&x| arr2.iter().all(|&y| (x-y).abs() > d)).count() as i32

=======

        arr1.iter().filter(|&&x| arr2.iter().all(|&y| (x-y).abs() > d)).count() as i32
    }
}

=======

        let mut count = 0;
        for i in arr1 {
            let mut ok = true;
            for j in &arr2 {
                if (i - j).abs() <= d {
                    ok = false;
                    break;
                }
            }
            if ok {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for a in arr1 {
            if arr2.iter().all(|&b| (a - b).abs() > d) {
                count += 1;
            }
        }
        count
    }
}
