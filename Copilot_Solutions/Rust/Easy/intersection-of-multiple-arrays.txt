Synthesizing 10/10 solutions

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..nums[0].len() {
            let mut flag = true;
            for j in 1..nums.len() {
                if !nums[j].contains(&nums[0][i]) {
                    flag = false;
                    break;
                }
            }
            if flag {
                result.push(nums[0][i]);
            }
        }
        result
    }
}

=======

        let mut result = nums[0].clone();
        for i in 1..nums.len() {
            result = result.into_iter().filter(|x| nums[i].contains(x)).collect();
        }
        result
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums[i].len() {
                if let Some(v) = map.get_mut(&nums[i][j]) {
                    *v += 1;
                } else {
                    map.insert(nums[i][j], 1);
                }
            }
        }
        for (k, v) in map {
            if v == nums.len() {
                result.push(k);
            }
        }
        result

=======

        let mut a = nums[0].clone();
        for i in 1..nums.len() {
            let mut b = Vec::new();
            for j in 0..nums[i].len() {
                if a.contains(&nums[i][j]) {
                    b.push(nums[i][j]);
                }
            }
            a = b;
        }
        a
    }
}

=======

        let mut ans = Vec::new();
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums[i].len() {
                if let Some(v) = map.get_mut(&nums[i][j]) {
                    *v += 1;
                } else {
                    map.insert(nums[i][j], 1);
                }
            }
        }
        for (k, v) in map {
            if v == nums.len() {
                ans.push(k);
            }
        }
        ans
    }
}

=======

        let mut arr = nums[0].clone();
        for i in 1..nums.len() {
            arr = arr
                .iter()
                .filter(|&x| nums[i].contains(x))
                .map(|x| *x)
                .collect();
        }
        arr
    }
}

=======

        let mut res = vec![];
        let mut set = nums[0].iter().cloned().collect::<HashSet<i32>>();
        for i in 1..nums.len() {
            set = set.intersection(&nums[i].iter().cloned().collect::<HashSet<i32>>()).cloned().collect::<HashSet<i32>>();
        }
        for i in set {
            res.push(i);
        }
        res
    }
}

=======

        let mut result = vec![];
        let mut map = std::collections::HashMap::new();
        for i in nums.iter() {
            for j in i.iter() {
                let count = map.entry(j).or_insert(0);
                *count += 1;
            }
        }
        for (key, value) in map.iter() {
            if *value == nums.len() {
                result.push(**key);
            }
        }
        result.sort();
        result
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        let mut first = nums[0].clone();
        for i in 1..nums.len() {
            let mut second = nums[i].clone();
            let mut temp: Vec<i32> = Vec::new();
            for j in 0..first.len() {
                let mut flag = false;
                for k in 0..second.len() {
                    if first[j] == second[k] {
                        flag = true;
                        break;
                    }
                }
                if flag {
                    temp.push(first[j]);
                }
            }
            first = temp.clone();
        }
        result = first.clone();
        result.sort();
        result
    }
}

=======

        let mut res = Vec::new();
        let mut map = std::collections::HashMap::new();
        for num in nums.iter() {
            for i in num {
                if let Some(v) = map.get_mut(i) {
                    *v += 1;
                } else {
                    map.insert(i, 1);
                }
            }
        }
        for (k, v) in map {
            if *v == nums.len() {
                res.push(*k);
            }
        }
        res
    }
}
