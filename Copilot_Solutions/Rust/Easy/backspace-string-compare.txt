Synthesizing 10/10 solutions

=======

        let s: Vec<char> = s.chars().collect();
        let t: Vec<char> = t.chars().collect();
        let mut i = s.len() - 1;
        let mut j = t.len() - 1;
        let mut skip_s = 0;
        let mut skip_t = 0;
        while i >= 0 || j >= 0 {
            while i >= 0 {
                if s[i] == '#' {
                    skip_s += 1;
                    i -= 1;
                } else if skip_s > 0 {
                    skip_s -= 1;
                    i -= 1;
                } else {
                    break;
                }
            }
            while j >= 0 {
                if t[j] == '#' {
                    skip_t += 1;
                    j -= 1;
                } else if skip_t > 0 {
                    skip_t -= 1;
                    j -= 1;
                } else {
                    break;
                }
            }
            if i >= 0 && j >= 0 && s[i] != t[j] {
                return false;
            }
            if (i >= 0) != (j >= 0) {
                return false;
            }
            i -= 1;
            j -= 1;
        }
        return true;

=======

        let mut s_stack = Vec::new();
        let mut t_stack = Vec::new();
        for c in s.chars() {
            if c == '#' {
                s_stack.pop();
            } else {
                s_stack.push(c);
            }
        }
        for c in t.chars() {
            if c == '#' {
                t_stack.pop();
            } else {
                t_stack.push(c);
            }
        }
        s_stack == t_stack

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = t.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < s.len() {
            if s[i] == '#' {
                s.remove(i);
                if i > 0 {
                    s.remove(i - 1);
                    i -= 1;
                }
            } else {
                i += 1;
            }
        }
        i = 0;
        while i < t.len() {
            if t[i] == '#' {
                t.remove(i);
                if i > 0 {
                    t.remove(i - 1);
                    i -= 1;
                }
            } else {
                i += 1;
            }
        }
        s == t
    }
}

=======

        let mut s1 = String::new();
        let mut s2 = String::new();
        for c in s.chars() {
            if c == '#' {
                s1.pop();
            } else {
                s1.push(c);
            }
        }
        for c in t.chars() {
            if c == '#' {
                s2.pop();
            } else {
                s2.push(c);
            }
        }
        s1 == s2

=======

        let mut s1 = String::new();
        let mut t1 = String::new();
        for c in s.chars() {
            if c == '#' {
                s1.pop();
            } else {
                s1.push(c);
            }
        }
        for c in t.chars() {
            if c == '#' {
                t1.pop();
            } else {
                t1.push(c);
            }
        }
        s1 == t1

=======

        let mut s1 = Vec::new();
        let mut s2 = Vec::new();
        for c in s.chars() {
            if c == '#' {
                if !s1.is_empty() {
                    s1.pop();
                }
            } else {
                s1.push(c);
            }
        }
        for c in t.chars() {
            if c == '#' {
                if !s2.is_empty() {
                    s2.pop();
                }
            } else {
                s2.push(c);
            }
        }
        s1 == s2

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut t: Vec<char> = t.chars().collect();
        let mut s_index = s.len() - 1;
        let mut t_index = t.len() - 1;
        while s_index < s.len() && t_index < t.len() {
            let mut s_count = 0;
            let mut t_count = 0;
            while s_index < s.len() && (s[s_index] == '#' || s_count > 0) {
                if s[s_index] == '#' {
                    s_count += 1;
                } else if s_count > 0 {
                    s_count -= 1;
                }
                s_index -= 1;
            }
            while t_index < t.len() && (t[t_index] == '#' || t_count > 0) {
                if t[t_index] == '#' {
                    t_count += 1;
                } else if t_count > 0 {
                    t_count -= 1;
                }
                t_index -= 1;
            }
            if s_index < s.len() && t_index < t.len() && s[s_index] != t[t_index] {
                return false;
            }
            s_index -= 1;
            t_index -= 1;
        }
        s_index < s.len() || t_index < t.len()
    }
}

=======

        let mut s = s;
        let mut t = t;
        let mut i = 0;
        while i < s.len() {
            if s.as_bytes()[i] == b'#' {
                if i != 0 {
                    s.remove(i);
                    s.remove(i-1);
                    i -= 1;
                } else {
                    s.remove(i);
                }
            } else {
                i += 1;
            }
        }
        i = 0;
        while i < t.len() {
            if t.as_bytes()[i] == b'#' {
                if i != 0 {
                    t.remove(i);
                    t.remove(i-1);
                    i -= 1;
                } else {
                    t.remove(i);
                }
            } else {
                i += 1;
            }
        }
        s == t

=======

        let mut s1 = s.clone();
        let mut t1 = t.clone();
        let mut i = 0;
        while i < s1.len() {
            if s1.chars().nth(i) == Some('#') {
                if i > 0 {
                    s1.remove(i);
                    s1.remove(i-1);
                    i -= 1;
                } else {
                    s1.remove(i);
                }
            } else {
                i += 1;
            }
        }
        i = 0;
        while i < t1.len() {
            if t1.chars().nth(i) == Some('#') {
                if i > 0 {
                    t1.remove(i);
                    t1.remove(i-1);
                    i -= 1;
                } else {
                    t1.remove(i);
                }
            } else {
                i += 1;
            }
        }
        s1 == t1
    }
}

=======

        let mut s = s;
        let mut t = t;
        let mut s_iter = s.chars().rev();
        let mut t_iter = t.chars().rev();
        let mut s_pop = s_iter.next();
        let mut t_pop = t_iter.next();
        let mut s_count = 0;
        let mut t_count = 0;
        while s_pop.is_some() || t_pop.is_some() {
            if s_pop.is_some() {
                if s_pop.unwrap() == '#' {
                    s_count += 1;
                } else if s_count > 0 {
                    s_count -= 1;
                } else {
                    s_pop = None;
                    continue;
                }
                s_pop = s_iter.next();
            }
            if t_pop.is_some() {
                if t_pop.unwrap() == '#' {
                    t_count += 1;
                } else if t_count > 0 {
                    t_count -= 1;
                } else {
                    t_pop = None;
                    continue;
                }
                t_pop = t_iter.next();
            }
        }
        s_pop == t_pop
    }
}
