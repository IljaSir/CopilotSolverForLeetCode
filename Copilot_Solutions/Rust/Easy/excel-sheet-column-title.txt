Synthesizing 10/10 solutions

=======

        let mut s = String::new();
        let mut n = column_number;
        while n > 0 {
            n -= 1;
            let c = ('A' as u8 + (n % 26) as u8) as char;
            s.push(c);
            n /= 26;
        }
        s.chars().rev().collect()
    }
}

=======

        let mut result = String::new();
        let mut column_number = column_number;
        while column_number > 0 {
            column_number -= 1;
            result.push((b'A' + (column_number % 26) as u8) as char);
            column_number /= 26;
        }
        result.chars().rev().collect()
    }
}

=======

        let mut result = String::new();
        let mut column_number = column_number;
        while column_number > 0 {
            column_number -= 1;
            result.push(('A' as u8 + (column_number % 26) as u8) as char);
            column_number /= 26;
        }
        result.chars().rev().collect()

=======

        let mut result = String::new();
        let mut n = column_number;
        while n > 0 {
            n -= 1;
            result.insert(0, (b'A' + (n % 26) as u8) as char);
            n /= 26;
        }
        result

=======

        let mut res = String::new();
        let mut column_number = column_number;
        while column_number > 0 {
            column_number -= 1;
            res.insert(0, (column_number % 26 + 65) as u8 as char);
            column_number /= 26;
        }
        res
    }
}

=======

        let mut column_number = column_number;
        let mut s = String::new();
        while column_number > 0 {
            column_number -= 1;
            let c = (column_number % 26) as u8 + 'A' as u8;
            s.push(c as char);
            column_number /= 26;
        }
        s.chars().rev().collect()
    }
}

=======

        let mut res = String::new();
        let mut num = column_number;
        while num > 0 {
            num -= 1;
            let c = (num % 26) as u8 + b'A';
            res.push(c as char);
            num /= 26;
        }
        res.chars().rev().collect()
    }
}

=======

        let mut res = String::new();
        let mut n = column_number;
        while n > 0 {
            let c = (n - 1) % 26;
            n = (n - 1) / 26;
            res.push((c + 65) as u8 as char);
        }
        res.chars().rev().collect()
    }
}

=======

        let mut column_number = column_number;
        let mut res = Vec::new();
        while column_number > 0 {
            let n = column_number % 26;
            if n == 0 {
                res.push('Z');
                column_number = column_number / 26 - 1;
            } else {
                res.push((n as u8 + b'A' - 1) as char);
                column_number = column_number / 26;
            }
        }
        res.into_iter().rev().collect()
    }
}

=======

        let mut column_number = column_number;
        let mut result = String::new();
        while column_number > 0 {
            let remainder = column_number % 26;
            let ch = if remainder == 0 { 'Z' } else { (remainder - 1 + 'A' as i32) as u8 as char };
            result.insert(0, ch);
            column_number = (column_number - 1) / 26;
        }
        result
    }
}
