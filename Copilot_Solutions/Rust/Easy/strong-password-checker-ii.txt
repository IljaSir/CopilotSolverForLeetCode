Synthesizing 10/10 solutions

=======

        let mut cnt = 0;
        if !password.chars().any(|c| c.is_ascii_lowercase()) {
            cnt += 1;
        }
        if !password.chars().any(|c| c.is_ascii_uppercase()) {
            cnt += 1;
        }
        if !password.chars().any(|c| c.is_ascii_digit()) {
            cnt += 1;
        }
        if !password.chars().any(|c| {
            "!@#$%^&*()-+".contains(c)
        }) {
            cnt += 1;
        }
        let mut chs = vec![];
        for c in password.chars() {
            if chs.last().map_or(false, |&ch| ch == c) {
                chs.last_mut().unwrap().1 += 1;
            } else {
                chs.push((c, 1));
            }
        }
        let mut del = 0;
        let mut rep = 0;
        for (_, cnt) in chs {
            if cnt >= 3 {
                del += cnt / 3;
                if cnt % 3 == 0 {
                    rep += 1;
                }
            }
        }
        if password.len() < 6 {
            cnt = cnt.max(6 - password.len());
        } else if password.len() > 20 {
            let del = password.len() - 20;
            if del <= del {
                cnt = cnt.max(del);
            } else {
                cnt = cnt.max(del - rep);
            }
        }
        cnt == 0
    }
}

=======

        let mut count = 0;
        let mut has_lower = false;
        let mut has_upper = false;
        let mut has_digit = false;
        let mut has_special = false;
        for c in password.chars() {
            if c.is_lowercase() {
                has_lower = true;
            } else if c.is_uppercase() {
                has_upper = true;
            } else if c.is_digit(10) {
                has_digit = true;
            } else if !c.is_alphanumeric() {
                has_special = true;
            }
        }
        if !has_lower {
            count += 1;
        }
        if !has_upper {
            count += 1;
        }
        if !has_digit {
            count += 1;
        }
        if !has_special {
            count += 1;
        }
        let len = password.len();
        if len < 6 {
            let need = 6 - len;
            if need <= count {
                count = need;
            } else {
                count += (need - count) / 2;
            }
        } else if len > 20 {
            let need = len - 20;
            if need <= count {
                count = need;
            } else {
                count += (need - count) / 2;
            }
        }
        count == 0
    }
}

=======

        let mut has_lower = false;
        let mut has_upper = false;
        let mut has_digit = false;
        let mut has_special = false;
        let mut has_repeated = false;
        let mut repeated_count = 0;
        let mut repeated_char = ' ';
        let mut repeated_count_max = 0;
        for (i, c) in password.chars().enumerate() {
            if c.is_alphabetic() {
                if c.is_lowercase() {
                    has_lower = true;
                } else {
                    has_upper = true;
                }
            } else if c.is_digit(10) {
                has_digit = true;
            } else {
                has_special = true;
            }
            if c == repeated_char {
                repeated_count += 1;
            } else {
                repeated_count = 1;
                repeated_char = c;
            }
            if repeated_count == 3 {
                has_repeated = true;
                if i + 1 < password.len() && password.chars().nth(i + 1).unwrap() == repeated_char {
                    repeated_count_max = 2;
                } else {
                    repeated_count_max = 1;
                }
            }
        }
        let mut missing = 0;
        if !has_lower {
            missing += 1;
        }
        if !has_upper {
            missing += 1;
        }
        if !has_digit {
            missing += 1;
        }
        if !has_special {
            missing += 1;
        }
        let mut replace = 0;
        if password.len() < 6 {
            replace = 6 - password.len();
        } else if password.len() > 20 {
            replace = password.len() - 20;
        }
        if replace > 0 {
            if replace <= missing {
                missing -= replace;
                replace = 0;
            } else {
                replace -= missing;
                missing = 0;
            }
            if replace > 0 {
                if replace >= repeated_count_max {
                    replace -= repeated_count_max;
                    repeated_count_max = 0;
                } else {
                    repeated_count_max -= replace;
                    replace = 0;
                }
                if replace > 0 {
                    if replace >= repeated_count_max {
                        replace -= repeated_count_max;
                        repeated_count_max = 0;
                    } else {
                        repeated_count_max -= replace;
                        replace = 0;
                    }
                }

=======

        let mut count = 0;
        let mut upper = false;
        let mut lower = false;
        let mut digit = false;
        let mut special = false;
        for c in password.chars() {
            if c.is_uppercase() {
                upper = true;
            } else if c.is_lowercase() {
                lower = true;
            } else if c.is_digit(10) {
                digit = true;
            } else if c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+' {
                special = true;
            }
            count += 1;
        }
        return count >= 8 && upper && lower && digit && special;
    }
}

=======

        let mut has_lower = false;
        let mut has_upper = false;
        let mut has_digit = false;
        let mut has_special = false;
        let mut repeat_count = 0;
        let mut repeat_char = ' ';
        let mut repeat_len = 0;
        let mut repeat_max = 0;
        for c in password.chars() {
            if c.is_lowercase() {
                has_lower = true;
            } else if c.is_uppercase() {
                has_upper = true;
            } else if c.is_digit(10) {
                has_digit = true;
            } else if c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+' {
                has_special = true;
            }
            if c == repeat_char {
                repeat_len += 1;
            } else {
                repeat_char = c;
                repeat_count = 1;
                repeat_len = 1;
            }
            repeat_max = repeat_max.max(repeat_len);
        }
        let mut change_count = 0;
        if !has_lower {
            change_count += 1;
        }
        if !has_upper {
            change_count += 1;
        }
        if !has_digit {
            change_count += 1;
        }
        if !has_special {
            change_count += 1;
        }
        let mut delete_count = 0;
        if password.len() < 6 {
            delete_count = 6 - password.len();
            change_count = change_count.max(delete_count);
        } else if password.len() > 20 {
            delete_count = password.len() - 20;
            change_count += delete_count;
        }
        change_count <= repeat_max

=======

        let mut lower = false;
        let mut upper = false;
        let mut digit = false;
        let mut special = false;
        let mut repeat = 0;
        let mut repeat_count = 0;
        let mut repeat_count_max = 0;
        let mut repeat_count_max_count = 0;
        let mut repeat_count_max_count_max = 0;
        let mut repeat_count_max_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count_count_max = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count = 0;
        let mut repeat_count_max_count_max_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count_count_max_count_count = 0;
        let mut

=======

        let mut has_lower = false;
        let mut has_upper = false;
        let mut has_digit = false;
        let mut has_special = false;
        let mut has_repeated = false;
        let mut repeated_count = 1;
        let mut prev = ' ';
        for c in password.chars() {
            match c {
                'a'..='z' => has_lower = true,
                'A'..='Z' => has_upper = true,
                '0'..='9' => has_digit = true,
                '!'|'@'|'#'|'$'|'%'|'^'|'&'|'*'|'('|')'|'-'|'+' => has_special = true,
                _ => (),
            }
            if c == prev {
                repeated_count += 1;
            } else {
                repeated_count = 1;
            }
            if repeated_count >= 3 {
                has_repeated = true;
            }
            prev = c;
        }
        let mut missing = 0;
        if !has_lower { missing += 1; }
        if !has_upper { missing += 1; }
        if !has_digit { missing += 1; }
        if !has_special { missing += 1; }
        if password.len() < 8 {
            if password.len() + missing >= 8 {
                return true;
            } else {
                return false;
            }
        }
        let mut count = 0;
        if has_repeated {
            count += 1;
        }
        if has_lower {
            count += 1;
        }
        if has_upper {
            count += 1;
        }
        if has_digit {
            count += 1;
        }
        if has_special {
            count += 1;
        }
        if count == 3 && missing == 1 && password.len() == 8 {
            return true;
        }
        if count == 4 && missing == 0 && password.len() == 8 {
            return true;
        }
        if count == 4 && missing == 1 && password.len() == 9 {
            return true;
        }
        if count == 5 && missing == 0 && password.len() == 9 {
            return true;
        }
        if count == 5 && missing == 1 && password.len() == 10 {
            return true;
        }
        if count ==

=======

        let mut has_lower = false;
        let mut has_upper = false;
        let mut has_digit = false;
        let mut has_special = false;
        let mut same_count = 0;
        let mut same_char = '0';
        let mut same_count_max = 0;
        let mut same_count_max_count = 0;
        let mut same_count_max_count_max = 0;
        for c in password.chars() {
            if c.is_lowercase() {
                has_lower = true;
            } else if c.is_uppercase() {
                has_upper = true;
            } else if c.is_digit(10) {
                has_digit = true;
            } else if c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+' {
                has_special = true;
            }
            if c == same_char {
                same_count += 1;
            } else {
                if same_count > 2 {
                    same_count_max = std::cmp::max(same_count_max, same_count);
                    same_count_max_count = 1;
                    same_count_max_count_max = 1;
                } else if same_count == 2 {
                    same_count_max_count += 1;
                    same_count_max_count_max = std::cmp::max(same_count_max_count_max, same_count_max_count);
                }
                same_char = c;
                same_count = 1;
            }
        }
        if same_count > 2 {
            same_count_max = std::cmp::max(same_count_max, same_count);
            same_count_max_count = 1;
            same_count_max_count_max = 1;
        } else if same_count == 2 {
            same_count_max_count += 1;
            same_count_max_count_max = std::cmp::max(same_count_max_count_max, same_count_max_count);
        }
        let mut replace_count = 0;
        if !has_lower {
            replace_count += 1;
        }
        if !has_upper {
            replace_count += 1;
        }
        if !has_digit {
            replace_count += 1;
        }
        if !has_special {
            replace_count += 1;
        }
        if password.len() < 6 {
            replace_count = std

=======

        let mut count = 0;
        let mut isLower = false;
        let mut isUpper = false;
        let mut isDigit = false;
        let mut isSpecial = false;
        let mut isRepeat = false;
        for c in password.chars() {
            if c.is_lowercase() {
                isLower = true;
            }
            if c.is_uppercase() {
                isUpper = true;
            }
            if c.is_digit(10) {
                isDigit = true;
            }
            if c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '+' {
                isSpecial = true;
            }
        }
        let mut i = 0;
        let mut j = 0;
        while j < password.len() {
            if password.chars().nth(j).unwrap() == password.chars().nth(i).unwrap() {
                j += 1;
            } else {
                if j - i > 2 {
                    isRepeat = true;
                }
                i = j;
            }
        }
        if !isLower {
            count += 1;
        }
        if !isUpper {
            count += 1;
        }
        if !isDigit {
            count += 1;
        }
        if !isSpecial {
            count += 1;
        }
        if password.len() < 6 {
            if count == 0 {
                return true;
            } else {
                return password.len() + count >= 6;
            }
        }
        if password.len() > 20 {
            if isRepeat {
                return false;
            } else {
                return password.len() - count <= 20;
            }
        }
        if password.len() + count > 20 {
            return false;
        }
        return true;
    }
}

=======

        let mut password = password.as_bytes();
        let mut n = password.len();
        let mut lower = false;
        let mut upper = false;
        let mut digit = false;
        let mut repeat = false;
        let mut i = 0;
        while i < n {
            if password[i].is_ascii_lowercase() {
                lower = true;
            } else if password[i].is_ascii_uppercase() {
                upper = true;
            } else if password[i].is_ascii_digit() {
                digit = true;
            }
            let mut j = i;
            while j < n && password[i] == password[j] {
                j += 1;
            }
            if j - i >= 3 {
                repeat = true;
            }
            i = j;
        }
        let mut missing = 0;
        if !lower {
            missing += 1;
        }
        if !upper {
            missing += 1;
        }
        if !digit {
            missing += 1;
        }
        if n < 6 {
            return missing + n >= 6;
        }
        if n <= 20 {
            return !repeat || missing == 0;
        }
        let mut delete = n - 20;
        i = 2;
        while i < n && delete > 0 {
            if password[i] == password[i - 1] && password[i] == password[i - 2] {
                let mut j = i + 1;
                while j < n && password[j] == password[i] {
                    j += 1;
                }
                let mut size = j - i;
                if size % 3 == 0 {
                    size -= 1;
                }
                delete -= size / 3;
                i = j;
            } else {
                i += 1;
            }
        }
        if delete == 0 {
            return !repeat || missing == 0;
        }
        let mut replace = 0;
        if repeat {
            replace = 1;
            delete -= 1;
        }
        replace += delete / 3;
        replace >= missing
