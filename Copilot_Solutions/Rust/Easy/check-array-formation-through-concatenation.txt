Synthesizing 10/10 solutions

=======

        let mut i = 0;
        while i < arr.len() {
            let mut j = 0;
            while j < pieces.len() {
                if pieces[j][0] == arr[i] {
                    break;
                }
                j += 1;
            }
            if j == pieces.len() {
                return false;
            }
            let mut k = 0;
            while k < pieces[j].len() {
                if pieces[j][k] != arr[i] {
                    return false;
                }
                i += 1;
                k += 1;
            }
        }
        true

=======

        let mut map = std::collections::HashMap::new();
        for piece in pieces {
            map.insert(piece[0], piece);
        }
        let mut i = 0;
        while i < arr.len() {
            if let Some(piece) = map.get(&arr[i]) {
                for j in 0..piece.len() {
                    if piece[j] != arr[i + j] {
                        return false;
                    }
                }
                i += piece.len();
            } else {
                return false;
            }
        }
        true
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for piece in pieces {
            map.insert(piece[0], piece);
        }
        let mut i = 0;
        while i < arr.len() {
            if let Some(piece) = map.get(&arr[i]) {
                for j in 0..piece.len() {
                    if arr[i + j] != piece[j] {
                        return false;
                    }
                }
                i += piece.len();
            } else {
                return false;
            }
        }
        true

=======

        let mut i = 0;
        while i < arr.len() {
            let mut j = 0;
            while j < pieces.len() {
                if arr[i] == pieces[j][0] {
                    for k in 0..pieces[j].len() {
                        if pieces[j][k] != arr[i + k] {
                            return false;
                        }
                    }
                    i += pieces[j].len();
                    break;
                }
                j += 1;
            }
            if j == pieces.len() {
                return false;
            }
        }
        true

=======

        let mut i = 0;
        while i < arr.len() {
            let mut found = false;
            for piece in &pieces {
                if arr[i] == piece[0] {
                    found = true;
                    for j in 1..piece.len() {
                        if arr[i+j] != piece[j] {
                            return false;
                        }
                    }
                    i += piece.len();
                    break;
                }
            }
            if !found {
                return false;
            }
        }
        true

=======

        let mut pieces = pieces;
        pieces.sort_by(|a, b| a[0].cmp(&b[0]));
        let mut i = 0;
        while i < arr.len() {
            let mut j = 0;
            while j < pieces.len() {
                if arr[i] == pieces[j][0] {
                    for k in 0..pieces[j].len() {
                        if arr[i] != pieces[j][k] {
                            return false;
                        }
                        i += 1;
                    }
                    break;
                }
                j += 1;
            }
            if j == pieces.len() {
                return false;
            }
        }
        true
    }
}

=======

        let mut pieces = pieces;
        pieces.sort_by(|a, b| a[0].cmp(&b[0]));
        let mut i = 0;
        while i < arr.len() {
            let mut j = 0;
            while j < pieces.len() {
                if pieces[j][0] == arr[i] {
                    let mut k = 0;
                    while k < pieces[j].len() {
                        if pieces[j][k] != arr[i + k] {
                            return false;
                        }
                        k += 1;
                    }
                    i += pieces[j].len();
                    j = pieces.len() + 1;
                }
                j += 1;
            }
            if j == pieces.len() {
                return false;
            }
        }
        true

=======

        let mut d = std::collections::HashMap::new();
        for p in pieces {
            d.insert(p[0], p);
        }
        let mut i = 0;
        while i < arr.len() {
            if let Some(p) = d.get(&arr[i]) {
                for j in 0..p.len() {
                    if arr[i + j] != p[j] {
                        return false;
                    }
                }
                i += p.len();
            } else {
                return false;
            }
        }
        true
    }
}

=======

        let mut pieces = pieces;
        pieces.sort_by_key(|x| x[0]);
        let mut i = 0;
        while i < arr.len() {
            for piece in pieces.iter() {
                if arr[i] == piece[0] {
                    for v in piece.iter() {
                        if i >= arr.len() || arr[i] != *v {
                            return false;
                        }
                        i += 1;
                    }
                    break;
                }
            }
            if i < arr.len() && arr[i] != pieces[0][0] {
                return false;
            }
        }
        true

=======

        let mut all = vec![];
        for piece in pieces {
            all.extend(piece);
        }
        all == arr
    }
}
