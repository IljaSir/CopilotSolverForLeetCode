Synthesizing 10/10 solutions

=======

        let mut ans = vec![0; nums.len()];
        for i in 0..nums.len() {
            ans[i] = nums[nums[i] as usize];
        }
        ans
    }
}

=======

        let mut ans = Vec::new();
        for i in 0..nums.len() {
            ans.push(nums[nums[i] as usize]);
        }
        ans
    }
}

=======

        let mut ans = Vec::new();
        for i in 0..nums.len() {
            ans.push(nums[nums[i] as usize]);
        }
        ans

=======

        let mut ans = vec![];
        for i in 0..nums.len() {
            ans.push(nums[nums[i] as usize]);
        }
        ans

=======

        let mut ans: Vec<i32> = vec![];
        for i in 0..nums.len() {
            ans.push(nums[nums[i] as usize]);
        }
        ans

=======

        nums.iter().map(|&x| nums[x as usize]).collect()
    }
}

=======

        nums.iter().map(|&x| nums[x as usize]).collect()

=======

        let mut result = vec![];
        for i in 0..nums.len() {
            result.push(nums[nums[i] as usize])
        }
        result
    }
}

=======

        let mut ans = Vec::new();
        for (i, n) in nums.iter().enumerate() {
            ans.push(nums[*n as usize]);
        }
        ans
    }
}

=======

        
    }
}
