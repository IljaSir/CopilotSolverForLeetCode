Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut odd = 0;
        let mut even = 0;
        for p in position {
            if p % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        if odd < even {
            odd
        } else {
            even
        }

=======

        let mut odd = 0;
        let mut even = 0;
        for p in position {
            if p % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        if even > odd {
            return odd;
        }
        even

=======

        let mut odd = 0;
        let mut even = 0;
        for i in position {
            if i % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        if odd > even {
            even
        } else {
            odd
        }

=======

        let mut odd = 0;
        let mut even = 0;
        for i in position {
            if i % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        if even > odd {
            odd
        } else {
            even
        }

=======

        let mut odd = 0;
        let mut even = 0;
        for i in position {
            if i % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        if odd < even {
            odd
        } else {
            even
        }

=======

        let mut even = 0;
        let mut odd = 0;
        for &p in position.iter() {
            if p % 2 == 0 {
                even += 1;
            } else {
                odd += 1;
            }
        }
        std::cmp::min(even, odd)
    }
}
