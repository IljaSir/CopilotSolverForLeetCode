Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = nums.len();
        let mut dp = vec![vec![0; n]; n];
        for i in 0..n {
            dp[i][i] = nums[i];
        }
        for i in 0..n {
            for j in i+1..n {
                dp[i][j] = dp[i][j-1] + nums[j];
            }
        }
        let mut ans = 0;
        let mut visited = vec![false; n];
        for i in 0..n {
            for j in i+1..n {
                let mut k = i;
                let mut l = j;
                while k < l {
                    let m = (k + l) / 2;
                    let a = dp[i][m] - dp[i][i-1];
                    let b = dp[m+1][j] - dp[m+1][j-1];
                    if a == b {
                        if !visited[m] {
                            visited[m] = true;
                            ans += 1;
                        }
                        k = m + 1;
                        l = m;
                    } else if a > b {
                        l = m;
                    } else {
                        k = m + 1;
                    }
                }
            }
        }
        ans as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut dp = vec![vec![false; nums.len()]; nums.len()];
        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i..nums.len() {
                if i == j {
                    dp[i][j] = true;
                    ans += 1;
                } else {
                    let mut k = i;
                    while k < j {
                        if dp[i][k] && dp[k + 1][j] {
                            let mut l = k + 1;
                            while l < j {
                                if nums[l] == nums[k + 1] {
                                    l += 1;
                                } else {
                                    break;
                                }
                            }
                            if nums[j] == nums[k] {
                                dp[i][j] = true;
                                ans += 1;
                                break;
                            } else {
                                k = l;
                            }
                        } else {
                            k += 1;
                        }
                    }
                }
            }
        }
        ans

=======

        let mut res = Vec::new();
        let mut nums = nums;
        nums.sort();
        let mut dp = vec![vec![false; nums.len() + 1]; nums.len() + 1];
        for i in 0..nums.len() {
            dp[i][i + 1] = true;
        }
        for i in (0..nums.len()).rev() {
            for j in (i + 2)..=nums.len() {
                for k in (i + 1)..j {
                    if dp[i][k] && dp[k][j] {
                        dp[i][j] = true;
                        break;
                    }
                }
                if dp[i][j] {
                    let sum = nums[i..j].iter().sum::<i32>() as f64;
                    let avg = sum / (j - i) as f64;
                    if !res.contains(&avg) {
                        res.push(avg);
                    }
                }
            }
        }
        res.len() as i32
