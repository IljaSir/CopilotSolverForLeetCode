Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if n == 0 {
            return 0;
        }
        if n == 1 || n == 2 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        for _ in 3..=n {
            let d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        c

=======

        if n == 0 {
            return 0;
        }
        if n == 1 || n == 2 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        for i in 3..=n {
            let d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        c

=======

        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        let mut d = 0;
        for _ in 0..n {
            d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        a

=======

        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        let mut d = 0;
        for _ in 0..n {
            d = a + b + c;
            a = b;
            b = c;
            c = d;
        }
        d

=======

        if n == 0 { return 0; }
        if n == 1 { return 1; }
        if n == 2 { return 1; }
        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        for _ in 3..=n {
            let tmp = a + b + c;
            a = b;
            b = c;
            c = tmp;
        }
        c

=======

        let mut a = 0;
        let mut b = 1;
        let mut c = 1;
        for _ in 0..n {
            let t = a + b + c;
            a = b;
            b = c;
            c = t;
        }
        a
    }
}

=======

        if n == 0 {
            return 0;
        }
        if n == 1 || n == 2 {
            return 1;
        }
        let mut v = vec![0; (n + 1) as usize];
        v[0] = 0;
        v[1] = 1;
        v[2] = 1;
        for i in 3..=(n as usize) {
            v[i] = v[i - 1] + v[i - 2] + v[i - 3];
        }
        v[n as usize]

=======

        match n {
            0 => 0,
            1 => 1,
            2 => 1,
            3..=i32::MAX => {
                let mut a = 0;
                let mut b = 1;
                let mut c = 1;
                for _ in 3..=n {
                    let t = a + b + c;
                    a = b;
                    b = c;
                    c = t;
                }
                c
            }
        }

=======

        
    }
}
