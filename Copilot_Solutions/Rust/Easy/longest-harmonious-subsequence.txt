Synthesizing 10/10 solutions

=======

        use std::collections::HashMap;
        let mut map: HashMap<i32, i32> = HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut max = 0;
        for (key, value) in map.iter() {
            if map.contains_key(&(key + 1)) {
                max = max.max(value + map.get(&(key + 1)).unwrap());
            }
        }
        max

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut max = 0;
        for (&k, &v) in map.iter() {
            if let Some(&v2) = map.get(&(k + 1)) {
                max = max.max(v + v2);
            }
        }
        max
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut max = 0;
        for (k, v) in map.iter() {
            if map.contains_key(&(k + 1)) {
                max = std::cmp::max(max, v + map[&(k + 1)]);
            }
        }
        max
    }
}

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for num in nums {
            let count = map.entry(num).or_insert(0);
            *count += 1;
        }
        let mut res = 0;
        for (num, count) in map.iter() {
            if map.contains_key(&(num + 1)) {
                res = res.max(*count + map[&(num + 1)]);
            }
        }
        res

=======

        use std::collections::HashMap;
        let mut hm: HashMap<i32, i32> = HashMap::new();
        for n in nums.iter() {
            *hm.entry(*n).or_insert(0) += 1;
        }
        let mut max = 0;
        for (k, v) in hm.iter() {
            if hm.contains_key(&(k + 1)) {
                max = max.max(v + hm.get(&(k + 1)).unwrap());
            }
        }
        max

=======

        let mut map = std::collections::HashMap::new();
        for n in nums {
            let count = map.entry(n).or_insert(0);
            *count += 1;
        }
        let mut max = 0;
        for (k, v) in map.iter() {
            if let Some(v2) = map.get(&(k + 1)) {
                let sum = v + v2;
                if sum > max {
                    max = sum;
                }
            }
        }
        max

=======

        let mut map = std::collections::HashMap::new();
        for i in nums {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut res = 0;
        for (k, v) in map.iter() {
            if let Some(v2) = map.get(&(k+1)) {
                res = res.max(v + v2);
            }
        }
        res

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for n in nums.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut result = 0;
        for (n, c) in map.iter() {
            if let Some(c2) = map.get(&(n+1)) {
                result = result.max(c+c2);
            }
        }
        result

=======

        let mut counter = std::collections::HashMap::new();
        for num in nums {
            *counter.entry(num).or_insert(0) += 1;
        }
        let mut max = 0;
        for (k, v) in counter.iter() {
            if let Some(w) = counter.get(&(k + 1)) {
                max = std::cmp::max(max, v + w);
            }
        }
        max
    }
}

=======

        use std::collections::HashMap;
        let mut h = HashMap::new();
        for num in nums {
            *h.entry(num).or_insert(0) += 1;
        }
        let mut ans: i32 = 0;
        for (k, v) in h.iter() {
            if h.contains_key(&(k + 1)) {
                ans = ans.max(v + h[&(k + 1)]);
            }
        }
        ans
