Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        for i in 1..points.len() {
            ans += (points[i][0] - points[i - 1][0]).abs().max((points[i][1] - points[i - 1][1]).abs());
        }
        ans

=======

        let mut sum = 0;
        for i in 1..points.len() {
            let x = (points[i][0] - points[i - 1][0]).abs();
            let y = (points[i][1] - points[i - 1][1]).abs();
            sum += x.max(y);
        }
        sum

=======

        let mut ans = 0;
        for i in 1..points.len() {
            let (x1, y1) = (points[i-1][0], points[i-1][1]);
            let (x2, y2) = (points[i][0], points[i][1]);
            ans += (x2-x1).abs().max((y2-y1).abs());
        }
        ans

=======

        let mut time = 0;
        for i in 1..points.len() {
            let (x1, y1) = (points[i-1][0], points[i-1][1]);
            let (x2, y2) = (points[i][0], points[i][1]);
            let (dx, dy) = (x2 - x1, y2 - y1);
            time += dx.max(dy).abs();
        }
        time

=======

        let mut time = 0;
        for i in 0..points.len() - 1 {
            let x = (points[i][0] - points[i + 1][0]).abs();
            let y = (points[i][1] - points[i + 1][1]).abs();
            time += x.max(y);
        }
        time
    }
}

=======

        let mut time = 0;
        for i in 0..points.len()-1 {
            time += (points[i][0] - points[i+1][0]).abs().max((points[i][1] - points[i+1][1]).abs());
        }
        time
    }
}

=======

        let mut result = 0;
        for i in 0..(points.len() - 1) {
            result += (points[i][0] - points[i + 1][0]).abs().max((points[i][1] - points[i + 1][1]).abs());
        }
        result
    }
}

=======

        let mut total = 0;
        for i in 1..points.len() {
            let (x, y) = (points[i][0] - points[i-1][0], points[i][1] - points[i-1][1]);
            total += x.abs().max(y.abs());
        }
        total

=======

        let mut time = 0;
        for i in 1..points.len() {
            let dif_x = (points[i][0] - points[i - 1][0]).abs();
            let dif_y = (points[i][1] - points[i - 1][1]).abs();
            time += dif_x.max(dif_y);
        }
        time

=======

        let mut time = 0;
        let mut last = &points[0];
        for point in points.iter().skip(1) {
            time += (point[0] - last[0]).abs().max((point[1] - last[1]).abs());
            last = point;
        }
        time
    }
}
