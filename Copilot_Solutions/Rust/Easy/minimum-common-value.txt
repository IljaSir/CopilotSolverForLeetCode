Synthesizing 10/10 solutions

=======

        let (mut i, mut j) = (0, 0);
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                return nums1[i];
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        -1
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut result = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                result = nums1[i];
                break;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                min = nums1[i];
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        min
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if min == -1 || min > nums1[i] {
                    min = nums1[i];
                }
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        min
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if min == -1 || nums1[i] < min {
                    min = nums1[i];
                }
                i += 1;
                j += 1;
            } else if nums1[i] > nums2[j] {
                j += 1;
            } else {
                i += 1;
            }
        }
        min
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if min == -1 {
                    min = nums1[i];
                } else {
                    min = min.min(nums1[i]);
                }
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        min

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                min = nums1[i];
                break;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        min
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if min == -1 {
                    min = nums1[i];
                } else {
                    min = min.min(nums1[i]);
                }
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        min
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut common = -1;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                common = nums1[i];
                break;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        common
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut min = i32::MAX;

        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if nums1[i] < min {
                    min = nums1[i];
                }
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }

        if min == i32::MAX {
            min = -1;
        }

        min
