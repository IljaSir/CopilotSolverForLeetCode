Synthesizing 10/10 solutions

=======

        let mut count = 0;
        let s: Vec<char> = s.chars().collect();
        for i in 0..s.len()-2 {
            if s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let s = s.into_bytes();
        for i in 0..s.len() - 2 {
            if s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2] {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        let bytes = s.as_bytes();
        for i in 2..bytes.len() {
            if bytes[i] != bytes[i - 1] && bytes[i] != bytes[i - 2] && bytes[i - 1] != bytes[i - 2] {
                ans += 1;
            }
        }
        ans

=======

        let mut res = 0;
        let chars: Vec<char> = s.chars().collect();
        for i in 0..(chars.len() - 2) {
            if chars[i] != chars[i + 1] && chars[i + 1] != chars[i + 2] && chars[i] != chars[i + 2] {
                res += 1;
            }
        }
        res

=======

        let mut c = 0;
        let s = s.as_bytes();
        for i in 0..s.len() - 2 {
            if s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2] {
                c += 1;
            }
        }
        c

=======

        let mut ans = 0;
        let s = s.as_bytes();
        for i in 0..(s.len() - 2) {
            if s[i] != s[i+1] && s[i+1] != s[i+2] && s[i+2] != s[i] {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        for i in 0..s.len() - 2 {
            let sub = &s[i..i + 3];
            if sub.chars().nth(0) != sub.chars().nth(1) &&
                sub.chars().nth(0) != sub.chars().nth(2) &&
                sub.chars().nth(1) != sub.chars().nth(2) {
                    count += 1;
                }
        }
        count

=======

        let s = s.as_bytes();
        let mut res = 0;
        for i in 0..s.len() {
            if i + 2 < s.len() {
                if s[i] != s[i + 1] && s[i] != s[i + 2] && s[i + 1] != s[i + 2] {
                    res += 1;
                }
            }
        }
        res

=======

        let mut count = 0;
        for i in 0..s.len() - 2 {
            let mut set = std::collections::HashSet::new();
            let mut is_good = true;
            for c in s[i..i+3].chars() {
                if set.contains(&c) {
                    is_good = false;
                    break;
                } else {
                    set.insert(c);
                }
            }
            if is_good {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut set = std::collections::HashSet::new();
        while k < s.len() {
            if set.contains(&s.as_bytes()[k]) {
                set.clear();
                i += 1;
                j = i;
                k = i;
            } else {
                set.insert(s.as_bytes()[k]);
                k += 1;
            }
            if k - j == 3 {
                count += 1;
                j += 1;
            }
        }
        count
