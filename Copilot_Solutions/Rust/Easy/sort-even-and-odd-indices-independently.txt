Synthesizing 10/10 solutions

=======

        let mut odd = Vec::new();
        let mut even = Vec::new();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                even.push(nums[i]);
            } else {
                odd.push(nums[i]);
            }
        }
        even.sort();
        odd.sort_by(|a, b| b.cmp(a));
        let mut result = Vec::new();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                result.push(even[i / 2]);
            } else {
                result.push(odd[(i - 1) / 2]);
            }
        }
        result
    }
}

=======

        let mut even = nums.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, &x)| x).collect::<Vec<i32>>();
        let mut odd = nums.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).collect::<Vec<i32>>();
        even.sort();
        odd.sort();
        odd.reverse();
        even.iter().zip(odd.iter()).flat_map(|(x, y)| vec![*x, *y]).collect::<Vec<i32>>()
    }
}

=======

        let mut nums = nums;
        nums[1..].sort_by(|a, b| b.cmp(a));
        nums[0..].sort_by(|a, b| a.cmp(b));
        return nums;

=======

        let n = nums.len();
        let mut nums = nums;
        let mut odd = vec![];
        let mut even = vec![];
        for i in 0..n {
            if i % 2 == 0 {
                even.push(nums[i]);
            } else {
                odd.push(nums[i]);
            }
        }
        even.sort();
        odd.sort();
        odd.reverse();
        let mut res = vec![];
        for i in 0..n {
            if i % 2 == 0 {
                res.push(even[i / 2]);
            } else {
                res.push(odd[i / 2]);
            }
        }
        res

=======

        let mut odds = nums.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, &v)| v).collect::<Vec<i32>>();
        let mut evens = nums.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, &v)| v).collect::<Vec<i32>>();
        odds.sort();
        odds.reverse();
        evens.sort();
        let mut result = Vec::new();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                result.push(evens[i / 2]);
            } else {
                result.push(odds[i / 2]);
            }
        }
        result
    }
}

=======

        let mut nums = nums;
        let mut odd = nums.iter().filter(|&x| x % 2 == 1).collect::<Vec<_>>();
        let mut even = nums.iter().filter(|&x| x % 2 == 0).collect::<Vec<_>>();
        odd.sort();
        even.sort();
        let mut odd = odd.iter().rev().map(|x| **x).collect::<Vec<_>>();
        let mut even = even.iter().map(|x| **x).collect::<Vec<_>>();
        let mut result = vec![];
        while !odd.is_empty() || !even.is_empty() {
            if !even.is_empty() {
                result.push(even.remove(0));
            }
            if !odd.is_empty() {
                result.push(odd.remove(0));
            }
        }
        result
    }
}

=======

        let mut nums = nums;
        let mut odd = nums.iter().enumerate().filter(|&(i, _)| i % 2 == 1).map(|(_, &x)| x).collect::<Vec<i32>>();
        let mut even = nums.iter().enumerate().filter(|&(i, _)| i % 2 == 0).map(|(_, &x)| x).collect::<Vec<i32>>();
        odd.sort();
        odd.reverse();
        even.sort();
        let mut result = Vec::new();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                result.push(even[i / 2]);
            } else {
                result.push(odd[i / 2]);
            }
        }
        result
    }
}

=======

        let mut nums = nums;
        let mut odd = nums.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, &x)| x).collect::<Vec<i32>>();
        let mut even = nums.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, &x)| x).collect::<Vec<i32>>();
        odd.sort_by(|a, b| b.cmp(a));
        even.sort_by(|a, b| a.cmp(b));
        let mut i = 0;
        while i < nums.len() {
            if i % 2 == 1 {
                nums[i] = odd.pop().unwrap();
            } else {
                nums[i] = even.pop().unwrap();
            }
            i += 1;
        }
        nums

=======

        let mut nums = nums;
        let mut odd = nums.iter().enumerate().filter(|(i, _)| i % 2 == 1).map(|(_, v)| v).collect::<Vec<_>>();
        let mut even = nums.iter().enumerate().filter(|(i, _)| i % 2 == 0).map(|(_, v)| v).collect::<Vec<_>>();
        odd.sort();
        even.sort();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                nums[i] = even[i / 2];
            } else {
                nums[i] = odd[i / 2];
            }
        }
        nums
    }
}

=======

        let mut nums = nums;
        let (mut even, mut odd) = (0, 1);
        while odd < nums.len() {
            if nums[odd] > nums[even] {
                nums.swap(odd, even);
            }
            even += 2;
            odd += 2;
        }
        even = 0;
        odd = 1;
        while odd < nums.len() {
            if nums[odd] < nums[even] {
                nums.swap(odd, even);
            }
            even += 2;
            odd += 2;
        }
        nums
