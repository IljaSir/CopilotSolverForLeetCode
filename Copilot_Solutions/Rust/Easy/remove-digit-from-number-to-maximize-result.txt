Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut res = String::new();
        let mut found = false;
        for c in number.chars() {
            if c == digit && !found {
                found = true;
            } else {
                res.push(c);
            }
        }
        res

=======

        let mut s: Vec<char> = number.chars().collect();
        let mut i = 0;
        while i < s.len() {
            if s[i] == digit {
                s.remove(i);
                break;
            }
            i += 1;
        }
        s.into_iter().collect()
    }
}

=======

        let mut res = String::new();
        let mut skip = false;
        for c in number.chars() {
            if c == digit && !skip {
                skip = true;
                continue;
            }
            res.push(c);
        }
        res

=======

        let mut result = String::new();
        let mut remove = false;
        for c in number.chars() {
            if c == digit && !remove {
                remove = true;
            } else {
                result.push(c);
            }
        }
        result
    }
}

=======

        let mut v = number.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < v.len() {
            if v[i] == digit {
                v.remove(i);
                break;
            }
            i += 1;
        }
        v.into_iter().collect()
    }
}

=======

        let mut result = "".to_string();
        let mut found = false;
        for c in number.chars() {
            if c == digit && !found {
                found = true;
            } else {
                result.push(c);
            }
        }
        result

=======

        let mut ret = String::new();
        let mut flag = false;
        for c in number.chars() {
            if c == digit && !flag {
                flag = true;
            } else {
                ret.push(c);
            }
        }
        ret

=======

        let mut res = String::new();
        let mut cnt = 1;
        for c in number.chars() {
            if c == digit {
                if cnt > 0 {
                    cnt -= 1;
                } else {
                    res.push(c);
                }
            } else {
                res.push(c);
            }
        }
        res
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut res = String::new();
        while j < number.len() {
            if number.as_bytes()[j] == digit as u8 {
                j += 1;
            } else if i != j {
                res.push(number.as_bytes()[j] as char);
                j += 1;
            } else {
                res.push(number.as_bytes()[j] as char);
                i += 1;
                j += 1;
            }
        }
        res
