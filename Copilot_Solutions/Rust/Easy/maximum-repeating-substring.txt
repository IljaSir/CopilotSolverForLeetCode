Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut s = word.clone();
        while sequence.contains(&s) {
            ans += 1;
            s += &word;
        }
        ans

=======

        let mut res = 0;
        let mut s = word.clone();
        while sequence.contains(&s) {
            res += 1;
            s = format!("{}{}", s, word);
        }
        res
    }
}

=======

        let mut count = 0;
        let mut new_word = word.clone();
        while sequence.contains(&new_word) {
            count += 1;
            new_word.push_str(&word);
        }
        count

=======

        let mut n = 0;
        let mut s = word.clone();
        while sequence.contains(&s) {
            n += 1;
            s += &word;
        }
        n
    }
}

=======

        let mut i = 1;
        let mut s = word.clone();
        while sequence.contains(&s) {
            i += 1;
            s = format!("{}{}", s, word);
        }
        i - 1
    }
}

=======

        let mut res = 0;
        let mut tmp = String::from(&word);
        while sequence.contains(&tmp) {
            res += 1;
            tmp.push_str(&word);
        }
        res

=======

        let mut s = word;
        for i in 1..=sequence.len() / word.len() {
            if !sequence.contains(&s) {
                return (i - 1) as i32;
            }
            s += &word;
        }
        sequence.len() as i32 / word.len() as i32

=======

        let mut n = 0;
        let mut s = String::from("");
        while s.len() <= sequence.len() {
            s += &word;
            if sequence.contains(&s) {
                n += 1;
            }
        }
        n

=======

        let mut k = 0;
        let mut seq = String::from(sequence);
        while seq.contains(&word) {
            k += 1;
            seq = seq.replace(&word, "");
        }
        k

=======

        let mut k = 0;
        let mut i = 0;
        let mut j = 0;
        let mut seq = sequence.chars().collect::<Vec<char>>();
        let mut wrd = word.chars().collect::<Vec<char>>();
        while i < seq.len() {
            if seq[i] == wrd[j] {
                i += 1;
                j += 1;
                if j == wrd.len() {
                    k += 1;
                    j = 0;
                }
            } else {
                i += 1;
                j = 0;
            }
        }
        k
