Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut res = vec![0; n as usize];
        for i in 0..logs.len() {
            if i == 0 {
                res[logs[i][0] as usize] += logs[i][1];
            } else {
                res[logs[i][0] as usize] += logs[i][1] - logs[i - 1][1];
            }
        }
        let mut max = 0;
        let mut id = 0;
        for i in 0..res.len() {
            if res[i] > max {
                max = res[i];
                id = i;
            }
        }
        id as i32

=======

        let mut tasks = vec![0; n as usize];
        for i in 0..logs.len() {
            if i == 0 {
                tasks[logs[i][0] as usize] += logs[i][1];
            } else {
                tasks[logs[i][0] as usize] += logs[i][1] - logs[i-1][1];
            }
        }
        let mut max = 0;
        let mut id = 0;
        for i in 0..tasks.len() {
            if tasks[i] > max {
                max = tasks[i];
                id = i as i32;
            }
        }
        id

=======

        let mut res = vec![0; n as usize];
        for i in 1..logs.len() {
            let t = logs[i][1] - logs[i-1][1];
            res[logs[i][0] as usize] += t;
        }
        res.iter().enumerate().max_by_key(|(_, v)| *v).unwrap().0 as i32

=======

        let mut res = 0;
        let mut max = 0;
        for i in 0..n {
            let mut sum = 0;
            for j in 0..logs.len() {
                if logs[j][0] == i {
                    if j > 0 {
                        sum += logs[j][1] - logs[j - 1][1];
                    } else {
                        sum += logs[j][1];
                    }
                }
            }
            if sum > max {
                max = sum;
                res = i;
            }
        }
        res
    }
}

=======

        let mut max = 0;
        let mut max_id = 0;
        let mut times = vec![0; n as usize];
        for i in 0..logs.len() {
            let (id, t) = (logs[i][0], logs[i][1]);
            if i == 0 {
                times[id as usize] = t;
            } else {
                times[id as usize] = t - logs[i - 1][1];
            }
            if times[id as usize] > max {
                max = times[id as usize];
                max_id = id;
            }
        }
        max_id
    }
}
