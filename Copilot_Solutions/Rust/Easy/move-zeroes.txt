Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut i = 0;
        let mut j = 0;
        while j < nums.len() {
            if nums[j] != 0 {
                nums[i] = nums[j];
                i += 1;
            }
            j += 1;
        }
        while i < nums.len() {
            nums[i] = 0;
            i += 1;
        }

=======

        let mut i = 0;
        let mut j = 0;
        while j < nums.len() {
            if nums[j] != 0 {
                nums[i] = nums[j];
                i += 1;
            }
            j += 1;
        }
        while i < nums.len() {
            nums[i] = 0;
            i += 1;
        }
    }
}

=======

        let mut i = 0;
        for j in 0..nums.len() {
            if nums[j] != 0 {
                nums[i] = nums[j];
                i += 1;
            }
        }
        for j in i..nums.len() {
            nums[j] = 0;
        }

=======

        let mut i = 0;
        let mut j = 0;
        while i < nums.len() {
            if nums[i] != 0 {
                nums[j] = nums[i];
                j += 1;
            }
            i += 1;
        }
        while j < nums.len() {
            nums[j] = 0;
            j += 1;
        }

=======

        let mut i = 0;
        let mut j = 0;
        while j < nums.len() {
            if nums[j] != 0 {
                nums.swap(i, j);
                i += 1;
            }
            j += 1;
        }
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] != 0 {
                nums[count] = nums[i];
                count += 1;
            }
        }
        for i in count..nums.len() {
            nums[i] = 0;
        }

=======

        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                count += 1;
            } else {
                nums[i - count] = nums[i];
            }
            i += 1;
        }
        i = 0;
        while i < count {
            nums[nums.len() - 1 - i] = 0;
            i += 1;
        }
    }
}
