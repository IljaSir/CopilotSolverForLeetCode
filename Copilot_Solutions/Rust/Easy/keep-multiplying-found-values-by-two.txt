Synthesizing 9/10 solutions

=======

        let mut original = original;
        for n in nums {
            if n == original {
                original *= 2;
            }
        }
        original
    }
}

=======

        let mut result = original;
        for num in nums {
            if num == result {
                result *= 2;
            }
        }
        result

=======

        let mut result = original;
        for n in nums {
            if n == result {
                result *= 2;
            }
        }
        result

=======

        let mut original = original;
        for i in nums {
            if i == original {
                original *= 2;
            }
        }
        original

=======

        let mut result = original;
        for i in nums {
            if i == result {
                result *= 2;
            }
        }
        result

=======

        let mut x = original;
        for i in 0..nums.len() {
            if x == nums[i] {
                x *= 2;
            }
        }
        return x;

=======

        let mut original = original;
        
        for num in nums {
            if num == original {
                original *= 2;
            }
        }
        
        original

=======

        let mut found = false;
        let mut result = original;
        for num in nums {
            if num == original {
                found = true;
                result *= 2;
            }
        }
        if found {
            result
        } else {
            original
        }

=======

        nums.iter().fold(original, |acc, x| if *x == acc {acc*2} else {acc})
