Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut num = num;
        let mut count = 0;
        while num != 0 {
            if num % 2 == 0 {
                num /= 2;
            } else {
                num -= 1;
            }
            count += 1;
        }
        count

=======

        if num == 0 {
            return 0;
        }
        if num % 2 == 0 {
            return 1 + Self::number_of_steps(num / 2);
        } else {
            return 1 + Self::number_of_steps(num - 1);
        }
    }
}

=======

        let mut n = num;
        let mut count = 0;
        while n > 0 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n -= 1;
            }
            count += 1;
        }
        count

=======

        let mut n = num;
        let mut count = 0;
        while n > 0 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n -= 1;
            }
            count += 1;
        }
        count
    }
}

=======

        if num == 0 {
            return 0;
        }
        if num % 2 == 0 {
            return 1 + Solution::number_of_steps(num / 2);
        } else {
            return 1 + Solution::number_of_steps(num - 1);
        }
    }
}

=======

        let mut count = 0;
        let mut num = num;
        while num > 0 {
            if num % 2 == 0 {
                num /= 2;
            } else {
                num -= 1;
            }
            count += 1;
        }
        count

=======

        let mut steps = 0;
        let mut n = num;
        while n > 0 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n -= 1;
            }
            steps += 1;
        }
        steps

=======

        let mut num = num;
        let mut cnt = 0;
        while num > 0 {
            if num % 2 == 0 {
                num /= 2;
            } else {
                num -= 1;
            }
            cnt += 1;
        }
        cnt
    }
}

=======

        let mut n = num;
        let mut s = 0;
        while n > 0 {
            if n % 2 == 0 {
                n = n / 2;
            } else {
                n = n - 1;
            }
            s += 1;
        }
        s
    }
}
