Synthesizing 10/10 solutions

=======

        nums.iter().map(|n| n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).collect::<Vec<i32>>()).flatten().collect()

=======

        let mut result = Vec::new();
        for num in nums {
            let mut num = num;
            while num > 0 {
                result.push(num % 10);
                num /= 10;
            }
        }
        result.reverse();
        result
    }
}

=======

        let mut result = Vec::new();
        for num in nums {
            let mut n = num;
            while n > 0 {
                result.push(n % 10);
                n /= 10;
            }
        }
        result.reverse();
        result
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        for num in nums {
            let mut num = num;
            while num > 0 {
                result.push(num % 10);
                num /= 10;
            }
        }
        result.reverse();
        result
    }
}

=======

        let mut result = vec![];
        for num in nums {
            let mut num = num;
            while num > 0 {
                result.push(num % 10);
                num /= 10;
            }
        }
        result.reverse();
        result
    }
}

=======

        nums.into_iter().flat_map(|n| {
            let mut n = n;
            let mut digits = Vec::new();
            while n > 0 {
                digits.push(n % 10);
                n /= 10;
            }
            digits.reverse();
            digits
        }).collect()

=======

        let mut res: Vec<i32> = vec![];
        for n in nums {
            let mut n = n;
            while n > 0 {
                res.push(n % 10);
                n /= 10;
            }
        }
        res

=======

        let mut result = Vec::new();
        for num in nums {
            let mut num = num;
            while num > 0 {
                result.push(num % 10);
                num = num / 10;
            }
            result.reverse();
        }
        result
    }
}

=======

        let mut answer: Vec<i32> = Vec::new();
        for i in nums {
            let mut i = i;
            while i > 0 {
                answer.push(i % 10);
                i /= 10;
            }
        }
        answer
    }
}

=======

        let mut answer = Vec::new();
        for n in nums.iter() {
            let mut n = *n;
            while n > 0 {
                answer.push(n % 10);
                n /= 10;
            }
        }
        answer
    }
}
