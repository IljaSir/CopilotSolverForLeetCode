Synthesizing 10/10 solutions

=======

        let n = n as i64;
        let mut l = 0;
        let mut r = n;
        while l < r {
            let m = l + (r - l + 1) / 2;
            if m * (m + 1) / 2 <= n {
                l = m;
            } else {
                r = m - 1;
            }
        }
        l as i32

=======

        let n = n as i64;
        let mut left = 0;
        let mut right = n;
        while left <= right {
            let mid = left + (right - left) / 2;
            let sum = (1 + mid) * mid / 2;
            if sum == n {
                return mid as i32;
            } else if sum < n {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        right as i32

=======

        let mut i = 0;
        let mut sum = 0;
        while sum <= n {
            i += 1;
            sum += i;
        }
        i - 1

=======

        (((2 * n as i64 + 0.25) as f64).sqrt() - 0.5) as i32

=======

        let n = n as i64;
        let mut i = 0;
        while i * (i + 1) / 2 <= n {
            i += 1;
        }
        (i - 1) as i32

=======

        let n = n as u64;
        let mut left = 0;
        let mut right = n;
        while left <= right {
            let mid = left + (right - left) / 2;
            if mid * (mid + 1) / 2 == n {
                return mid as i32;
            } else if mid * (mid + 1) / 2 < n {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        right as i32

=======

        let n = n as i64;
        let mut l = 0;
        let mut r = n + 1;
        while l < r {
            let mid = (l + r) / 2;
            if mid * (mid + 1) / 2 <= n {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        (l - 1) as i32

=======

        let n = n as i64;
        let mut l = 0;
        let mut r = n;
        while l <= r {
            let mid = (l + r) / 2;
            let sum = mid * (mid + 1) / 2;
            if sum == n {
                return mid as i32;
            } else if sum < n {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        r as i32

=======

        let mut i = 1;
        let mut count = 0;
        while n >= i {
            count += 1;
            i += 1;
        }
        count

=======

        let mut sum = 0;
        let mut count = 0;
        let mut n = n as i64;
        while sum <= n {
            count += 1;
            sum += count;
        }
        count - 1
