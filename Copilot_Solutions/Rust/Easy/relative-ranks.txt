Synthesizing 10/10 solutions

=======

        let mut score = score;
        score.sort_by(|a, b| b.cmp(a));
        let mut result = vec![];
        for i in 0..score.len() {
            if i == 0 {
                result.push("Gold Medal".to_string());
            } else if i == 1 {
                result.push("Silver Medal".to_string());
            } else if i == 2 {
                result.push("Bronze Medal".to_string());
            } else {
                result.push((i + 1).to_string());
            }
        }
        for i in 0..score.len() {
            for j in 0..score.len() {
                if score[i] == score[j] {
                    score[i] = -1;
                    result[j] = result[i].clone();
                }
            }
        }
        result
    }
}

=======

        let mut score = score;
        score.sort_by(|a, b| b.cmp(a));
        let mut result = Vec::new();
        for i in 0..score.len() {
            if i == 0 {
                result.push("Gold Medal".to_string());
            } else if i == 1 {
                result.push("Silver Medal".to_string());
            } else if i == 2 {
                result.push("Bronze Medal".to_string());
            } else {
                result.push((i + 1).to_string());
            }
        }
        let mut score_map = HashMap::new();
        for i in 0..score.len() {
            score_map.insert(score[i], i);
        }
        for i in 0..result.len() {
            let index = score_map.get(&score[i]).unwrap();
            result[*index] = result[i].clone();
        }
        result
    }
}

=======

        let mut s = score.clone();
        s.sort();
        let mut res = Vec::new();
        for i in 0..score.len() {
            let idx = s.binary_search(&score[i]).unwrap();
            if idx == s.len() - 1 {
                res.push("Gold Medal".to_string());
            } else if idx == s.len() - 2 {
                res.push("Silver Medal".to_string());
            } else if idx == s.len() - 3 {
                res.push("Bronze Medal".to_string());
            } else {
                res.push((s.len() - idx).to_string());
            }
        }
        res

=======

        let mut s = score.clone();
        s.sort();
        s.reverse();
        let mut res = Vec::new();
        for i in 0..score.len() {
            let mut rank = s.iter().position(|&x| x == score[i]).unwrap() + 1;
            if rank == 1 {
                res.push("Gold Medal".to_string());
            } else if rank == 2 {
                res.push("Silver Medal".to_string());
            } else if rank == 3 {
                res.push("Bronze Medal".to_string());
            } else {
                res.push(rank.to_string());
            }
        }
        res

=======

        let mut sorted_scores = score.clone();
        sorted_scores.sort();
        sorted_scores.reverse();
        let mut ranks = vec![];
        for s in score {
            let rank = sorted_scores.iter().position(|&x| x == s).unwrap() + 1;
            if rank == 1 {
                ranks.push("Gold Medal".to_string());
            } else if rank == 2 {
                ranks.push("Silver Medal".to_string());
            } else if rank == 3 {
                ranks.push("Bronze Medal".to_string());
            } else {
                ranks.push(rank.to_string());
            }
        }
        ranks

=======

        let mut scores = score.clone();
        scores.sort();
        scores.reverse();
        let mut map = std::collections::HashMap::new();
        for i in 0..scores.len() {
            let s = scores[i];
            map.insert(s, i);
        }
        let mut res = vec![];
        for s in score {
            let rank = map.get(&s).unwrap();
            let r = match rank {
                0 => "Gold Medal",
                1 => "Silver Medal",
                2 => "Bronze Medal",
                _ => &rank.to_string(),
            };
            res.push(r.to_string());
        }
        res
    }
}

=======

        let mut v = score.clone();
        v.sort_by(|a, b| b.cmp(a));
        let mut r = vec![];
        for i in 0..score.len() {
            let mut s = String::new();
            let n = v.iter().position(|&x| x == score[i]).unwrap();
            match n {
                0 => s.push_str("Gold Medal"),
                1 => s.push_str("Silver Medal"),
                2 => s.push_str("Bronze Medal"),
                _ => s.push_str(&n.to_string()),
            }
            r.push(s);
        }
        r

=======

        let mut score = score;
        let mut ranks = vec![];
        let mut map = std::collections::HashMap::new();
        score.sort_by(|a, b| b.cmp(a));
        for i in 0..score.len() {
            let rank = match i {
                0 => "Gold Medal",
                1 => "Silver Medal",
                2 => "Bronze Medal",
                _ => &(i + 1).to_string(),
            };
            map.insert(score[i], rank.to_string());
        }
        for i in 0..score.len() {
            ranks.push(map.get(&score[i]).unwrap().to_string());
        }
        ranks
    }
}

=======

        let mut score = score;
        score.sort();
        let mut result = vec!["".to_string(); score.len()];
        for i in 0..score.len() {
            let rank = score.len() - i;
            let index = score.binary_search(&score[rank - 1]).unwrap();
            match rank {
                1 => result[index] = "Gold Medal".to_string(),
                2 => result[index] = "Silver Medal".to_string(),
                3 => result[index] = "Bronze Medal".to_string(),
                _ => result[index] = rank.to_string(),
            }
        }
        result
    }
}

=======

        let mut score = score;
        let mut rank = vec!["".to_string(); score.len()];
        score.sort_by(|a,b| b.cmp(a));
        for i in 0..score.len() {
            let s = match i {
                0 => "Gold Medal",
                1 => "Silver Medal",
                2 => "Bronze Medal",
                _ => (i+1).to_string().as_str(),
            };
            rank[score[i] as usize] = s.to_string();
        }
        rank
