Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut result = Vec::new();
        let mut num = 0;
        for i in nums {
            num = (num * 2 + i) % 5;
            result.push(num == 0);
        }
        result
    }
}

=======

        let mut result = Vec::new();
        let mut num = 0;
        for i in nums {
            num = (num * 2 + i) % 5;
            result.push(num == 0);
        }
        result

=======

        let mut ans = Vec::new();
        let mut num = 0;
        for i in nums {
            num = (num * 2 + i) % 5;
            ans.push(num == 0);
        }
        ans

=======

        let mut ans = Vec::new();
        let mut num = 0;
        for i in 0..nums.len() {
            num = (num * 2 + nums[i]) % 5;
            ans.push(num == 0);
        }
        ans

=======

        let mut ans = vec![];
        let mut num = 0;
        for i in nums {
            num = ((num << 1) + i) % 5;
            ans.push(num == 0);
        }
        ans

=======

        let mut answer = Vec::new();
        let mut num = 0;
        for i in nums {
            num = (num * 2 + i) % 5;
            answer.push(num == 0);
        }
        answer

=======

        let mut result = Vec::new();
        let mut current = 0;
        for i in 0..nums.len() {
            current = (current * 2 + nums[i]) % 5;
            result.push(current == 0);
        }
        result

=======

        let mut result = vec![];
        let mut num = 0;
        for i in nums.iter() {
            num = (num << 1) + i;
            result.push(num % 5 == 0);
            num = num % 5;
        }
        result

=======

        let mut x = 0;
        let mut answer = Vec::with_capacity(nums.len());
        for n in nums {
            x = (x << 1) + n;
            answer.push(x % 5 == 0);
            x %= 5;
        }
        answer
