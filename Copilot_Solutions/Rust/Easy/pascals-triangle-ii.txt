Synthesizing 10/10 solutions

=======

        let row_index = row_index as usize;
        let mut row = vec![1; row_index + 1];
        for i in 1..row_index {
            for j in (1..i + 1).rev() {
                row[j] = row[j] + row[j - 1];
            }
        }
        row
    }
}

=======

        let mut row = vec![1; row_index as usize + 1];
        for i in 1..row_index as usize {
            for j in (1..i + 1).rev() {
                row[j] += row[j - 1];
            }
        }
        row

=======

        let mut row = vec![1; row_index as usize + 1];
        for i in 1..row_index {
            for j in (1..i + 1).rev() {
                row[j as usize] += row[j as usize - 1];
            }
        }
        row
    }
}

=======

        let mut row = vec![1; (row_index + 1) as usize];
        for i in 1..row_index {
            for j in (1..(i + 1) as usize).rev() {
                row[j] += row[j - 1];
            }
        }
        row
    }
}

=======

        let mut row = vec![1; (row_index + 1) as usize];
        for i in 1..row_index {
            for j in (1..row.len() - 1).rev() {
                row[j] = row[j] + row[j - 1];
            }
        }
        row

=======

        let mut row = vec![1; (row_index + 1) as usize];
        for i in 1..row_index {
            let mut prev = 1;
            for j in 1..i + 1 {
                let t = row[j as usize];
                row[j as usize] = row[j as usize] + prev;
                prev = t;
            }
        }
        row
    }
}

=======

        let mut result = vec![1];
        for i in 1..=row_index {
            let mut row = vec![1];
            for j in 1..i {
                row.push(result[j as usize - 1] + result[j as usize]);
            }
            row.push(1);
            result = row;
        }
        result
    }
}

=======

        let mut res: Vec<i32> = Vec::new();
        let mut row = 0;
        while row <= row_index {
            res.push(1);
            for i in (1..row).rev() {
                res[i as usize] = res[i as usize] + res[(i - 1) as usize];
            }
            row += 1;
        }
        res
    }
}

=======

        let mut row = vec![1];
        for i in 0..row_index {
            row = Self::next_row(&row);
        }
        row
    }
    
    fn next_row(row: &[i32]) -> Vec<i32> {
        let mut next = vec![1];
        for i in 1..row.len() {
            next.push(row[i-1] + row[i]);
        }
        next.push(1);
        next

=======

        let mut result = vec![];
        let mut row = vec![1];
        for _ in 0..row_index {
            row = Self::next_row(&row);
        }
        row
    }
    fn next_row(row: &Vec<i32>) -> Vec<i32> {
        let mut result = vec![1];
        for i in 0..row.len() - 1 {
            result.push(row[i] + row[i + 1]);
        }
        result.push(1);
        result
    }
}
