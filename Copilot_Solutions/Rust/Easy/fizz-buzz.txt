Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        for i in 1..=n {
            if i % 3 == 0 && i % 5 == 0 {
                result.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                result.push("Fizz".to_string());
            } else if i % 5 == 0 {
                result.push("Buzz".to_string());
            } else {
                result.push(i.to_string());
            }
        }
        result

=======

        let mut result = vec![];
        for i in 1..=n {
            if i % 3 == 0 && i % 5 == 0 {
                result.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                result.push("Fizz".to_string());
            } else if i % 5 == 0 {
                result.push("Buzz".to_string());
            } else {
                result.push(i.to_string());
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in 1..=n {
            if i % 15 == 0 {
                result.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                result.push("Fizz".to_string());
            } else if i % 5 == 0 {
                result.push("Buzz".to_string());
            } else {
                result.push(i.to_string());
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in 1..=n {
            if i % 3 == 0 && i % 5 == 0 {
                result.push(String::from("FizzBuzz"));
            } else if i % 3 == 0 {
                result.push(String::from("Fizz"));
            } else if i % 5 == 0 {
                result.push(String::from("Buzz"));
            } else {
                result.push(i.to_string());
            }
        }
        result

=======

        (1..=n).map(|i| {
            match (i % 3, i % 5) {
                (0, 0) => "FizzBuzz".to_string(),
                (0, _) => "Fizz".to_string(),
                (_, 0) => "Buzz".to_string(),
                _ => i.to_string(),
            }
        }).collect()

=======

        let mut res = vec![];
        for i in 1..=n {
            if i % 15 == 0 {
                res.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                res.push("Fizz".to_string());
            } else if i % 5 == 0 {
                res.push("Buzz".to_string());
            } else {
                res.push(i.to_string());
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in 1..=n {
            if i % 15 == 0 {
                result.push(String::from("FizzBuzz"));
            } else if i % 3 == 0 {
                result.push(String::from("Fizz"));
            } else if i % 5 == 0 {
                result.push(String::from("Buzz"));
            } else {
                result.push(i.to_string());
            }
        }
        result
    }
}

=======

        let mut answer: Vec<String> = Vec::new();
        for i in 1..=n {
            if i % 3 == 0 && i % 5 == 0 {
                answer.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                answer.push("Fizz".to_string());
            } else if i % 5 == 0 {
                answer.push("Buzz".to_string());
            } else {
                answer.push(i.to_string());
            }
        }
        answer
    }
}

=======

        let mut result = Vec::new();
        for i in 1..n+1 {
            if i % 3 == 0 && i % 5 == 0 {
                result.push("FizzBuzz".to_string());
            } else if i % 3 == 0 {
                result.push("Fizz".to_string());
            } else if i % 5 == 0 {
                result.push("Buzz".to_string());
            } else {
                result.push(i.to_string());
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in 1..=n {
            if i % 15 == 0 {
                result.push("FizzBuzz".to_string())
            } else if i % 3 == 0 {
                result.push("Fizz".to_string())
            } else if i % 5 == 0 {
                result.push("Buzz".to_string())
            } else {
                result.push(i.to_string())
            }
        }
        result
