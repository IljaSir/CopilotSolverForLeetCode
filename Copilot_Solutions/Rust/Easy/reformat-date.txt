Synthesizing 10/10 solutions

=======

        let mut month_map: HashMap<&str, &str> = HashMap::new();
        month_map.insert("Jan", "01");
        month_map.insert("Feb", "02");
        month_map.insert("Mar", "03");
        month_map.insert("Apr", "04");
        month_map.insert("May", "05");
        month_map.insert("Jun", "06");
        month_map.insert("Jul", "07");
        month_map.insert("Aug", "08");
        month_map.insert("Sep", "09");
        month_map.insert("Oct", "10");
        month_map.insert("Nov", "11");
        month_map.insert("Dec", "12");
        
        let mut split_date: Vec<&str> = date.split(" ").collect();
        let year = split_date.pop().unwrap();
        let month = split_date.pop().unwrap();
        let day = split_date.pop().unwrap();
        let day = day.trim_end_matches("st").trim_end_matches("nd").trim_end_matches("rd").trim_end_matches("th");
        let mut day = day.to_string();
        if day.len() == 1 {
            day = format!("0{}", day);
        }
        let month = month_map.get(month).unwrap();
        format!("{}-{}-{}", year, month, day)

=======

        let mut date = date.split_whitespace().collect::<Vec<&str>>();
        let month = match date[1] {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => panic!("Wrong month"),
        };
        let mut day = date[0].to_string();
        day.pop();
        day.pop();
        if day.len() == 1 {
            day = format!("0{}", day);
        }
        format!("{}-{}-{}", date[2], month, day)

=======

        let mut date = date.split_ascii_whitespace().collect::<Vec<&str>>();
        let mut month = match date[1] {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => "",
        };
        let mut day = date[0].to_string();
        if day.len() == 4 {
            day = day[0..2].to_string();
        } else {
            day = day[0..1].to_string();
        }
        if day.len() == 1 {
            day = "0".to_string() + &day;
        }
        date[2].to_string() + "-" + &month + "-" + &day

=======

        let mut parts = date.split(" ");
        let day = parts.next().unwrap();
        let month = parts.next().unwrap();
        let year = parts.next().unwrap();
        let mut month = match month {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => "00",
        };
        let mut day = day.to_string();
        day.pop();
        if day.len() == 1 {
            day = format!("0{}", day);
        }
        format!("{}-{}-{}", year, month, day)

=======

        let mut month = String::new();
        let mut day = String::new();
        let mut year = String::new();
        let mut state = 0;
        for c in date.chars() {
            if c == ' ' {
                state += 1;
                continue;
            }
            if state == 0 {
                day.push(c);
            } else if state == 1 {
                month.push(c);
            } else {
                year.push(c);
            }
        }
        let month = match month.as_str() {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => panic!("Unexpected month"),
        };
        let day = match day.as_str() {
            "1st" => "01",
            "2nd" => "02",
            "3rd" => "03",
            "4th" => "04",
            "5th" => "05",
            "6th" => "06",
            "7th" => "07",
            "8th" => "08",
            "9th" => "09",
            "10th" => "10",
            "11th" => "11",
            "12th" => "12",
            "13th" => "13",
            "14th" => "14",
            "15th" => "15",
            "16th" => "16",
            "17th" => "17",
            "18th" => "18",
            "19th" => "19",
            "20th" => "20",
            "21st" => "21",
            "22nd" => "22",
            "23rd" => "23",
            "24th" => "24",
            "25th" => "25",
            "26th" => "26",
            "27th" => "27",
            "28th" => "28",
            "29th" => "29",
            "30th" => "30",
            "31

=======

        let mut date = date.split_whitespace().collect::<Vec<&str>>();
        let mut day = date[0].to_string();
        let mut month = date[1].to_string();
        let year = date[2].to_string();
        let mut month_num = String::new();
        day.pop();
        day.pop();
        if day.len() == 1 {
            day.insert(0, '0');
        }
        match month.as_str() {
            "Jan" => month_num = "01".to_string(),
            "Feb" => month_num = "02".to_string(),
            "Mar" => month_num = "03".to_string(),
            "Apr" => month_num = "04".to_string(),
            "May" => month_num = "05".to_string(),
            "Jun" => month_num = "06".to_string(),
            "Jul" => month_num = "07".to_string(),
            "Aug" => month_num = "08".to_string(),
            "Sep" => month_num = "09".to_string(),
            "Oct" => month_num = "10".to_string(),
            "Nov" => month_num = "11".to_string(),
            "Dec" => month_num = "12".to_string(),
            _ => month_num = "00".to_string(),
        }
        let mut result = String::new();
        result.push_str(year.as_str());
        result.push_str("-");
        result.push_str(month_num.as_str());
        result.push_str("-");
        result.push_str(day.as_str());
        result

=======

        let mut date = date.split_ascii_whitespace().collect::<Vec<&str>>();
        let day = &date[0][..date[0].len()-2];
        let month = date[1];
        let year = date[2];
        let mut month = match month {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => "00",
        };
        let mut day = if day.len() == 1 {
            format!("0{}", day)
        } else {
            day.to_string()
        };
        format!("{}-{}-{}", year, month, day)

=======

        let mut date = date.split_whitespace().collect::<Vec<&str>>();
        let mut day = date[0].trim_end_matches(|c: char| !c.is_ascii_digit()).to_string();
        let month = match date[1] {
            "Jan" => "01",
            "Feb" => "02",
            "Mar" => "03",
            "Apr" => "04",
            "May" => "05",
            "Jun" => "06",
            "Jul" => "07",
            "Aug" => "08",
            "Sep" => "09",
            "Oct" => "10",
            "Nov" => "11",
            "Dec" => "12",
            _ => "",
        };
        if day.len() == 1 {
            day = format!("0{}", day);
        }
        format!("{}-{}-{}", date[2], month, day)

=======

        let mut month = String::new();
        let mut day = String::new();
        let mut year = String::new();
        let mut month_num = 0;
        let mut day_num = 0;
        let mut year_num = 0;
        let mut start = 0;
        let mut end = 0;
        let mut i = 0;
        for c in date.chars() {
            if c >= '0' && c <= '9' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'a' && c <= 'z' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'A' && c <= 'Z' {
                if start == 0 {
                    start = i;
                }
                end = i;
            }
            i += 1;
        }
        day = date[start..=end].to_string();
        //println!("{}", day);
        start = 0;
        end = 0;
        i = 0;
        for c in date.chars() {
            if c >= '0' && c <= '9' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'a' && c <= 'z' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'A' && c <= 'Z' {
                if start == 0 {
                    start = i;
                }
                end = i;
            }
            i += 1;
        }
        month = date[start..=end].to_string();
        //println!("{}", month);
        start = 0;
        end = 0;
        i = 0;
        for c in date.chars() {
            if c >= '0' && c <= '9' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'a' && c <= 'z' {
                if start == 0 {
                    start = i;
                }
                end = i;
            } else if c >= 'A' && c <= 'Z' {
                if start == 0 {
                    start = i;
                }

=======

        let mut day = 0;
        let mut month = 0;
        let mut year = 0;
        
        let mut date = date.split_ascii_whitespace();
        let day_str = date.next().unwrap();
        let month_str = date.next().unwrap();
        let year_str = date.next().unwrap();
        
        if let Ok(d) = day_str[..day_str.len()-2].parse() {
            day = d;
        }
        
        match month_str {
            "Jan" => month = 1,
            "Feb" => month = 2,
            "Mar" => month = 3,
            "Apr" => month = 4,
            "May" => month = 5,
            "Jun" => month = 6,
            "Jul" => month = 7,
            "Aug" => month = 8,
            "Sep" => month = 9,
            "Oct" => month = 10,
            "Nov" => month = 11,
            "Dec" => month = 12,
            _ => (),
        }
        
        if let Ok(y) = year_str.parse() {
            year = y;
        }
        
        format!("{:04}-{:02}-{:02}", year, month, day)
