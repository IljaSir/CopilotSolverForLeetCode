Synthesizing 10/10 solutions

=======

        let morse: Vec<&str> = vec![".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."];
        let mut set = std::collections::HashSet::new();
        for word in words {
            let mut m = String::new();
            for c in word.chars() {
                m.push_str(morse[c as usize - 97]);
            }
            set.insert(m);
        }
        set.len() as i32
    }
}

=======

        let morse = vec![
            ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."
        ];
        let mut set = std::collections::HashSet::new();
        for word in words {
            let mut code = String::new();
            for ch in word.chars() {
                code.push_str(morse[(ch as u8 - 'a' as u8) as usize]);
            }
            set.insert(code);
        }
        set.len() as i32

=======

        let morse = vec![
            ".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."
        ];
        let mut result = vec![];
        for word in words {
            let mut morse_code = String::new();
            for c in word.chars() {
                morse_code.push_str(morse[(c as u8 - 97) as usize]);
            }
            if !result.contains(&morse_code) {
                result.push(morse_code);
            }
        }
        result.len() as i32

=======

        let morse: Vec<String> = vec![
            ".-".to_string(),
            "-...".to_string(),
            "-.-.".to_string(),
            "-..".to_string(),
            ".".to_string(),
            "..-.".to_string(),
            "--.".to_string(),
            "....".to_string(),
            "..".to_string(),
            ".---".to_string(),
            "-.-".to_string(),
            ".-..".to_string(),
            "--".to_string(),
            "-.".to_string(),
            "---".to_string(),
            ".--.".to_string(),
            "--.-".to_string(),
            ".-.".to_string(),
            "...".to_string(),
            "-".to_string(),
            "..-".to_string(),
            "...-".to_string(),
            ".--".to_string(),
            "-..-".to_string(),
            "-.--".to_string(),
            "--..".to_string(),
        ];
        let mut res: Vec<String> = vec![];
        for w in words {
            let mut s: String = "".to_string();
            for c in w.chars() {
                s.push_str(morse.get((c as u8 - 'a' as u8) as usize).unwrap());
            }
            if !res.contains(&s) {
                res.push(s);
            }
        }
        res.len() as i32
    }
}

=======

        let morse_code = vec![".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."];
        let mut set = std::collections::HashSet::new();
        for word in words {
            let mut morse = String::new();
            for c in word.chars() {
                morse.push_str(morse_code[(c as u8 - 'a' as u8) as usize]);
            }
            set.insert(morse);
        }
        set.len() as i32

=======

        let morses = vec![
            ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..",
            "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-",
            "-.--", "--..",
        ];
        let mut set = std::collections::HashSet::new();
        for word in words {
            let mut s = String::new();
            for c in word.chars() {
                s.push_str(morses[(c as u8 - b'a') as usize]);
            }
            set.insert(s);
        }
        set.len() as i32

=======

        let morse_table = [
            ".-",
            "-...",
            "-.-.",
            "-..",
            ".",
            "..-.",
            "--.",
            "....",
            "..",
            ".---",
            "-.-",
            ".-..",
            "--",
            "-.",
            "---",
            ".--.",
            "--.-",
            ".-.",
            "...",
            "-",
            "..-",
            "...-",
            ".--",
            "-..-",
            "-.--",
            "--..",
        ];
        let mut morse_code_map = std::collections::HashSet::new();
        for word in words {
            let mut morse_code = String::new();
            for c in word.chars() {
                morse_code.push_str(morse_table[(c as u8 - 'a' as u8) as usize]);
            }
            morse_code_map.insert(morse_code);
        }
        morse_code_map.len() as i32
    }
}

=======

        let morsedict = vec![".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."];
        let mut morsewords = vec![];
        for word in words.iter() {
            let mut morseword = String::new();
            for c in word.chars() {
                morseword.push_str(morsedict[(c as u8 - b'a') as usize]);
            }
            morsewords.push(morseword);
        }
        morsewords.sort();
        morsewords.dedup();
        morsewords.len() as i32
    }
}

=======

        let mut morse: Vec<String> = vec![];
        for word in words {
            let mut morse_word = "".to_string();
            for c in word.chars() {
                morse_word.push_str(Solution::morse_code(c));
            }
            morse.push(morse_word);
        }
        morse.sort();
        morse.dedup();
        morse.len() as i32
    }
    fn morse_code(c: char) -> &'static str {
        match c {
            'a' => ".-",
            'b' => "-...",
            'c' => "-.-.",
            'd' => "-..",
            'e' => ".",
            'f' => "..-.",
            'g' => "--.",
            'h' => "....",
            'i' => "..",
            'j' => ".---",
            'k' => "-.-",
            'l' => ".-..",
            'm' => "--",
            'n' => "-.",
            'o' => "---",
            'p' => ".--.",
            'q' => "--.-",
            'r' => ".-.",
            's' => "...",
            't' => "-",
            'u' => "..-",
            'v' => "...-",
            'w' => ".--",
            'x' => "-..-",
            'y' => "-.--",
            'z' => "--..",
            _ => "",
        }

=======

        let mut morse = vec![];
        let mut morse_code = vec![];
        let mut morse_code_set = vec![];
        let mut morse_code_set_size = 0;
        let morse_code_map = vec![
            ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..",
            "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-",
            "-.--", "--..",
        ];
        for word in words {
            morse.push(word);
        }
        for word in morse {
            let mut morse_code_word = String::new();
            for chr in word.chars() {
                morse_code_word.push_str(morse_code_map[(chr as u8 - 97) as usize]);
            }
            morse_code.push(morse_code_word);
        }
        for code in morse_code {
            if !morse_code_set.contains(&code) {
                morse_code_set.push(code);
            }
        }
        morse_code_set_size = morse_code_set.len() as i32;
        morse_code_set_size
    }
}
