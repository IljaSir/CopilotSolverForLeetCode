Synthesizing 10/10 solutions

=======

        let mut chars: Vec<char> = s.chars().collect();
        let vowels: Vec<char> = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        let mut left: usize = 0;
        let mut right: usize = chars.len() - 1;
        while left < right {
            let left_char = chars[left];
            let right_char = chars[right];
            if vowels.contains(&left_char) && vowels.contains(&right_char) {
                chars[left] = right_char;
                chars[right] = left_char;
                left += 1;
                right -= 1;
            } else if vowels.contains(&left_char) {
                right -= 1;
            } else if vowels.contains(&right_char) {
                left += 1;
            } else {
                left += 1;
                right -= 1;
            }
        }
        chars.iter().collect()

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = chars.len() - 1;
        while i < j {
            while i < j && !Self::is_vowel(chars[i]) {
                i += 1;
            }
            while i < j && !Self::is_vowel(chars[j]) {
                j -= 1;
            }
            if i < j {
                chars.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        chars.iter().collect()
    }
    
    fn is_vowel(c: char) -> bool {
        match c {
            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true,
            _ => false,
        }

=======

        let mut v = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = v.len() - 1;
        while i < j {
            while i < j && !Self::is_vowel(v[i]) {
                i += 1;
            }
            while i < j && !Self::is_vowel(v[j]) {
                j -= 1;
            }
            if i < j {
                v.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        v.into_iter().collect()
    }
    fn is_vowel(c: char) -> bool {
        match c {
            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true,
            _ => false,
        }

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if !is_vowel(s[l]) {
                l += 1;
                continue;
            }
            if !is_vowel(s[r]) {
                r -= 1;
                continue;
            }
            s.swap(l, r);
            l += 1;
            r -= 1;
        }
        s.iter().collect()
    }
}

=======

        let mut v = s.chars().collect::<Vec<_>>();
        let mut i = 0;
        let mut j = v.len() - 1;
        while i < j {
            if !Self::is_vowel(v[i]) {
                i += 1;
                continue;
            }
            if !Self::is_vowel(v[j]) {
                j -= 1;
                continue;
            }
            v.swap(i, j);
            i += 1;
            j -= 1;
        }
        v.into_iter().collect()
    }
    fn is_vowel(c: char) -> bool {
        match c {
            'a' | 'e' | 'i' | 'o' | 'u' | 'A' | 'E' | 'I' | 'O' | 'U' => true,
            _ => false,
        }

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let vowels = vec!['a', 'e', 'i', 'o', 'u'];
        let mut left = 0;
        let mut right = s.len() - 1;
        while left < right {
            if vowels.contains(&s[left].to_ascii_lowercase()) && vowels.contains(&s[right].to_ascii_lowercase()) {
                s.swap(left, right);
                left += 1;
                right -= 1;
            } else if vowels.contains(&s[left].to_ascii_lowercase()) {
                right -= 1;
            } else if vowels.contains(&s[right].to_ascii_lowercase()) {
                left += 1;
            } else {
                left += 1;
                right -= 1;
            }
        }
        s.iter().collect()

=======

        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            if b"aeiouAEIOU".contains(&s[i]) && b"aeiouAEIOU".contains(&s[j]) {
                s.swap(i, j);
                i += 1;
                j -= 1;
            } else if b"aeiouAEIOU".contains(&s[i]) {
                j -= 1;
            } else if b"aeiouAEIOU".contains(&s[j]) {
                i += 1;
            } else {
                i += 1;
                j -= 1;
            }
        }
        String::from_utf8(s).unwrap()

=======

        let mut v: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = v.len() - 1;
        while i < j {
            let mut i_is_vowel = false;
            let mut j_is_vowel = false;
            if v[i] == 'a' || v[i] == 'e' || v[i] == 'i' || v[i] == 'o' || v[i] == 'u' || v[i] == 'A' || v[i] == 'E' || v[i] == 'I' || v[i] == 'O' || v[i] == 'U' {
                i_is_vowel = true;
            }
            if v[j] == 'a' || v[j] == 'e' || v[j] == 'i' || v[j] == 'o' || v[j] == 'u' || v[j] == 'A' || v[j] == 'E' || v[j] == 'I' || v[j] == 'O' || v[j] == 'U' {
                j_is_vowel = true;
            }
            if i_is_vowel && j_is_vowel {
                v.swap(i, j);
                i += 1;
                j -= 1;
            } else if i_is_vowel && !j_is_vowel {
                j -= 1;
            } else if !i_is_vowel && j_is_vowel {
                i += 1;
            } else {
                i += 1;
                j -= 1;
            }
        }
        v.iter().collect()

=======

        let mut s = s;
        let mut i = 0;
        let mut j = s.len() - 1;
        let vowels = "aeiouAEIOU";
        while i < j {
            let c1 = s.as_bytes()[i] as char;
            let c2 = s.as_bytes()[j] as char;
            if vowels.contains(c1) && vowels.contains(c2) {
                s.replace_range(i..i+1, &c2.to_string());
                s.replace_range(j..j+1, &c1.to_string());
                i += 1;
                j -= 1;
            }
            if !vowels.contains(c1) {
                i += 1;
            }
            if !vowels.contains(c2) {
                j -= 1;
            }
        }
        s
    }
}

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut vowels: Vec<char> = s.iter().filter(|&v| "aeiouAEIOU".contains(*v)).cloned().collect();
        for i in 0..s.len() {
            if "aeiouAEIOU".contains(s[i]) {
                s[i] = vowels.pop().unwrap();
            }
        }
        s.iter().collect()
    }
}
