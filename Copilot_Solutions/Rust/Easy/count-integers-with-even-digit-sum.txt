Synthesizing 10/10 solutions

=======

        let mut res = 0;
        for i in 1..=num {
            let mut n = i;
            let mut sum = 0;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            if sum % 2 == 0 {
                res += 1;
            }
        }
        res

=======

        let mut ans = 0;
        for i in 1..=num {
            let mut n = i;
            let mut sum = 0;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            if sum % 2 == 0 {
                ans += 1;
            }
        }
        ans

=======

        let mut sum = 0;
        for i in 1..=num {
            if i.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>() % 2 == 0 {
                sum += 1;
            }
        }
        sum
    }
}

=======

        let mut res = 0;
        for i in 1..=num {
            if Self::digit_sum(i) % 2 == 0 {
                res += 1;
            }
        }
        res
    }
    fn digit_sum(mut num: i32) -> i32 {
        let mut sum = 0;
        while num > 0 {
            sum += num % 10;
            num /= 10;
        }
        sum
    }
}

=======

        let mut result = 0;
        for i in 1..=num {
            if i.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>() % 2 == 0 {
                result += 1;
            }
        }
        result
    }
}

=======

        let mut result = 0;
        for i in 1..=num {
            let mut sum = 0;
            let mut n = i;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            if sum % 2 == 0 {
                result += 1;
            }
        }
        result

=======

        let mut count = 0;
        for i in 1..=num {
            let mut sum = 0;
            let mut tmp = i;
            while tmp > 0 {
                sum += tmp % 10;
                tmp /= 10;
            }
            if sum % 2 == 0 {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut res = 0;
        for i in 1..=num {
            let mut sum = 0;
            let mut num = i;
            while num > 0 {
                sum += num % 10;
                num /= 10;
            }
            if sum % 2 == 0 {
                res += 1;
            }
        }
        res
    }
}

=======

        let mut count = 0;
        for i in 1..=num {
            if i % 2 == 0 {
                count += 1;
            } else {
                let mut n = i;
                let mut sum = 0;
                while n > 0 {
                    sum += n % 10;
                    n /= 10;
                }
                if sum % 2 == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut res = 0;
        for i in 1..=num {
            if (i.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>() % 2) == 0 {
                res += 1;
            }
        }
        res
    }
}
