Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if let Some(&1) = map.get(&c) {
                return i as i32;
            }
        }
        -1
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if let Some(count) = map.get(&c) {
                if *count == 1 {
                    return i as i32;
                }
            }
        }
        -1
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            let count = map.entry(c).or_insert(0);
            *count += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if let Some(&count) = map.get(&c) {
                if count == 1 {
                    return i as i32;
                }
            }
        }
        -1

=======

        let mut count = [0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if count[c as usize - 'a' as usize] == 1 {
                return i as i32;
            }
        }
        -1
    }
}

=======

        let mut v = vec![0; 26];
        for c in s.chars() {
            v[(c as u8 - 'a' as u8) as usize] += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if v[(c as u8 - 'a' as u8) as usize] == 1 {
                return i as i32;
            }
        }
        return -1;

=======

        let mut map = [0; 26];
        for c in s.chars() {
            map[c as usize - 'a' as usize] += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if map[c as usize - 'a' as usize] == 1 {
                return i as i32;
            }
        }
        -1

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            map.entry(c).and_modify(|v| *v += 1).or_insert(1);
        }
        for (i, c) in s.chars().enumerate() {
            if let Some(&v) = map.get(&c) {
                if v == 1 {
                    return i as i32;
                }
            }
        }
        -1
    }
}

=======

        let mut a = vec![0; 26];
        for c in s.chars() {
            a[(c as u8 - b'a') as usize] += 1;
        }
        for (i, c) in s.chars().enumerate() {
            if a[(c as u8 - b'a') as usize] == 1 {
                return i as i32;
            }
        }
        -1

=======

        let mut char_count = [0; 26];
        for c in s.chars() {
            char_count[(c as u8 - 'a' as u8) as usize] += 1;
        }
        for (i, c) in s.char_indices() {
            if char_count[(c as u8 - 'a' as u8) as usize] == 1 {
                return i as i32;
            }
        }
        -1
    }
}

=======

        let mut char_count = [0; 26];
        for c in s.chars() {
            char_count[(c as u8 - 'a' as u8) as usize] += 1;
        }
        for (i, c) in s.chars().enumerate() {
            let count = char_count[(c as u8 - 'a' as u8) as usize];
            if count == 1 {
                return i as i32;
            }
        }
        -1
