Synthesizing 10/10 solutions

=======

        let mut count = 0;
        let mut asterisk = false;
        for c in s.chars() {
            if c == '|' {
                asterisk = !asterisk;
            } else if asterisk {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut asterisk = false;
        for c in s.chars() {
            if c == '*' {
                asterisk = true;
            } else if c == '|' {
                if asterisk {
                    count += 1;
                    asterisk = false;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut asterisk = false;
        for c in s.chars() {
            if c == '*' {
                asterisk = true;
            } else if c == '|' {
                if asterisk {
                    count += 1;
                }
                asterisk = false;
            }
        }
        count

=======

        let mut count = 0;
        let mut asterisk = false;
        for c in s.chars() {
            if c == '*' {
                if asterisk {
                    asterisk = false;
                } else {
                    asterisk = true;
                }
            } else if c == '|' {
                if asterisk {
                    count += 1;
                    asterisk = false;
                }
            }
        }
        count

=======

        s.chars().filter(|c| *c == '*').count() as i32

=======

        let mut count = 0;
        let mut skip = false;
        for c in s.chars() {
            if c == '*' {
                if skip {
                    skip = false;
                } else {
                    skip = true;
                    count += 1;
                }
            } else if c == '|' {
                skip = false;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for c in s.chars() {
            if c == '*' {
                count += 1;
            }
        }
        count - (s.len() - s.replace("|", "").len()) / 2

=======

        let mut count = 0;
        let mut flag = false;
        for c in s.chars() {
            if c == '*' {
                if flag {
                    count += 1;
                }
            } else if c == '|' {
                flag = !flag;
            }
        }
        count

=======

        let mut count = 0;
        let mut in_pair = false;
        for ch in s.chars() {
            match ch {
                '*' => {
                    if !in_pair {
                        count += 1;
                    }
                }
                '|' => {
                    in_pair = !in_pair;
                }
                _ => {}
            }
        }
        count

=======

        let mut res = 0;
        let mut is_asterisk = false;
        for c in s.chars() {
            if c == '*' {
                is_asterisk = true;
            } else if c == '|' && is_asterisk {
                res += 1;
                is_asterisk = false;
            }
        }
        res
