Synthesizing 10/10 solutions

=======

        let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        let mut words = sentence.split_whitespace();
        let mut res = String::new();
        let mut a = String::from("a");
        while let Some(word) = words.next() {
            if vowels.contains(&word.chars().next().unwrap()) {
                res.push_str(word);
                res.push_str("ma");
                res.push_str(&a);
            } else {
                res.push_str(&word[1..]);
                res.push_str(&word[..1]);
                res.push_str("ma");
                res.push_str(&a);
            }
            if words.clone().next().is_some() {
                res.push(' ');
            }
            a.push('a');
        }
        res
    }
}

=======

        let mut result = String::new();
        let vowels = vec!['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
        let mut words = sentence.split_whitespace();
        let mut index = 1;
        while let Some(word) = words.next() {
            let mut word = word.to_string();
            if !vowels.contains(&word.chars().nth(0).unwrap()) {
                word = word[1..].to_string();
                word.push(word.chars().nth(0).unwrap());
            }
            word.push_str("ma");
            for _ in 0..index {
                word.push('a');
            }
            result.push_str(&word);
            if words.next().is_some() {
                result.push(' ');
            }
            index += 1;
        }
        result
    }
}

=======

        let mut result = String::new();
        let words: Vec<&str> = sentence.split(" ").collect();
        let vowels = vec!['a', 'e', 'i', 'o', 'u'];
        for (i, word) in words.iter().enumerate() {
            let mut word = word.to_string();
            if vowels.contains(&word.chars().nth(0).unwrap().to_ascii_lowercase()) {
                word.push_str("ma");
            } else {
                word.push(word.chars().nth(0).unwrap());
                word.remove(0);
                word.push_str("ma");
            }
            word.push_str(&"a".repeat(i + 1));
            result.push_str(&word);
            result.push_str(" ");
        }
        result.pop();
        result

=======

        let mut result = String::new();
        let mut index = 1;
        let vowels = vec!['a', 'e', 'i', 'o', 'u'];
        for word in sentence.split_whitespace() {
            let mut new_word = word.to_string();
            if vowels.contains(&word.chars().nth(0).unwrap().to_ascii_lowercase()) {
                new_word.push_str("ma");
            } else {
                new_word.push(word.chars().nth(0).unwrap());
                new_word.remove(0);
                new_word.push_str("ma");
            }
            new_word.push_str(&"a".repeat(index));
            result.push_str(&new_word);
            result.push(' ');
            index += 1;
        }
        result.pop();
        result
    }
}

=======

        let mut result = String::new();
        let mut a = "a".to_string();
        for word in sentence.split_whitespace() {
            if word.starts_with(|c: char| "aeiouAEIOU".contains(c)) {
                result.push_str(&word);
            } else {
                result.push_str(&word[1..]);
                result.push(word.chars().nth(0).unwrap());
            }
            result.push_str("ma");
            result.push_str(&a);
            a.push('a');
            result.push(' ');
        }
        result.pop();
        result

=======

        let mut result = String::new();
        let mut i = 1;
        for word in sentence.split(' ') {
            let mut word = word.to_string();
            if word.starts_with(|c: char| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                word.push_str("ma");
            } else {
                let c = word.remove(0);
                word.push(c);
                word.push_str("ma");
            }
            word.push_str(&"a".repeat(i));
            result.push_str(&word);
            result.push(' ');
            i += 1;
        }
        result.pop();
        result
    }
}

=======

        let mut result = String::new();
        let mut index = 1;
        for word in sentence.split_whitespace() {
            let mut word = word.to_string();
            if !word.starts_with(|c: char| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                word.push(word.remove(0));
            }
            word.push_str("ma");
            for _ in 0..index {
                word.push('a');
            }
            index += 1;
            result.push_str(&word);
            result.push(' ');
        }
        result.pop();
        result
    }
}

=======

        let mut res = String::new();
        let mut index = 1;
        for word in sentence.split_whitespace() {
            let mut word = word.to_string();
            let first_char = word.chars().next().unwrap();
            if !("aeiouAEIOU".contains(first_char)) {
                let c = word.remove(0);
                word.push(c);
            }
            word.push_str("ma");
            word.push_str(&"a".repeat(index));
            res.push_str(&word);
            res.push(' ');
            index += 1;
        }
        res.pop();
        res

=======

        let mut result = String::new();
        let mut count = 1;
        for word in sentence.split_whitespace() {
            let mut word = word.to_string();
            if !word.starts_with(|c: char| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                let c = word.remove(0);
                word.push(c);
            }
            word.push_str("ma");
            word.push_str(&"a".repeat(count));
            result.push_str(&word);
            result.push(' ');
            count += 1;
        }
        result.pop();
        result

=======

        let mut res = String::new();
        let mut i = 1;
        for word in sentence.split_whitespace() {
            let mut w = String::from(word);
            if "aeiouAEIOU".contains(&w[..1]) {
                w.push_str("ma");
            } else {
                let c = w.remove(0);
                w.push(c);
                w.push_str("ma");
            }
            w.push_str(&"a".repeat(i));
            i += 1;
            res.push_str(&w);
            res.push(' ');
        }
        res.pop();
        res
    }
}
