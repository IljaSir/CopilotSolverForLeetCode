Synthesizing 10/10 solutions

=======

        let mut number = number.replace(" ", "").replace("-", "");
        let mut result = String::new();
        while number.len() > 4 {
            result.push_str(&number[0..3]);
            result.push('-');
            number = number[3..].to_string();
        }
        if number.len() == 4 {
            result.push_str(&number[0..2]);
            result.push('-');
            result.push_str(&number[2..]);
        } else {
            result.push_str(&number);
        }
        result

=======

        let mut number = number.replace(" ", "").replace("-", "");
        let mut result = String::new();
        while number.len() > 4 {
            result.push_str(&number[..3]);
            result.push('-');
            number = number[3..].to_string();
        }
        if number.len() == 4 {
            result.push_str(&number[..2]);
            result.push('-');
            result.push_str(&number[2..]);
        } else {
            result.push_str(&number);
        }
        result

=======

        let mut result = String::new();
        let mut count = 0;
        for c in number.chars() {
            if c.is_digit(10) {
                result.push(c);
                count += 1;
                if count == 3 {
                    result.push('-');
                    count = 0;
                }
            }
        }
        if count == 1 {
            result.insert(result.len() - 3, '-');
        }
        result.pop();
        result
    }
}

=======

        let mut s = String::new();
        for c in number.chars() {
            if c.is_digit(10) {
                s.push(c);
            }
        }
        let mut r = String::new();
        let mut i = 0;
        while i < s.len() {
            if s.len() - i == 4 {
                r.push_str(&s[i..i+2]);
                r.push('-');
                i += 2;
            } else if s.len() - i <= 3 {
                r.push_str(&s[i..]);
                i = s.len();
            } else {
                r.push_str(&s[i..i+3]);
                r.push('-');
                i += 3;
            }
        }
        r

=======

        let mut s = String::new();
        for c in number.chars() {
            if c.is_digit(10) {
                s.push(c);
            }
        }
        let mut v = Vec::new();
        let len = s.len();
        let mut i = 0;
        while i < len {
            if len - i == 4 {
                v.push(s[i..i+2].to_string());
                i += 2;
            } else if len - i <= 3 {
                v.push(s[i..].to_string());
                break;
            } else {
                v.push(s[i..i+3].to_string());
                i += 3;
            }
        }
        v.join("-")
    }
}

=======

        let mut s = number.chars().filter(|&c| c != ' ' && c != '-').collect::<String>();
        let mut result = String::new();
        while s.len() > 4 {
            result.push_str(&s[0..3]);
            result.push('-');
            s = s[3..].to_string();
        }
        if s.len() == 4 {
            result.push_str(&s[0..2]);
            result.push('-');
            result.push_str(&s[2..]);
        } else {
            result.push_str(&s);
        }
        result

=======

        let mut res = String::new();
        let mut num = number.chars().filter(|c| c.is_digit(10)).collect::<Vec<char>>();
        while num.len() > 4 {
            res.push_str(&num[0..3].iter().collect::<String>());
            res.push('-');
            num.drain(..3);
        }
        if num.len() == 4 {
            res.push_str(&num[0..2].iter().collect::<String>());
            res.push('-');
            res.push_str(&num[2..4].iter().collect::<String>());
        } else {
            res.push_str(&num.iter().collect::<String>());
        }
        res

=======

        let mut number = number.chars().filter(|c| c.is_digit(10)).collect::<Vec<_>>();
        let mut res = String::new();
        while number.len() > 4 {
            res += &number.drain(..3).collect::<String>();
            res += "-";
        }
        match number.len() {
            4 => {
                res += &number.drain(..2).collect::<String>();
                res += "-";
                res += &number.drain(..2).collect::<String>();
            }
            _ => {
                res += &number.drain(..).collect::<String>();
            }
        }
        res

=======

        let mut v = number.chars().filter(|c| c.is_digit(10)).collect::<Vec<char>>();
        let len = v.len();
        let mut res = Vec::new();
        let mut i = 0;
        while i < len {
            res.push(v[i]);
            i += 1;
            if i % 3 == 0 && i < len - 4 {
                res.push('-');
            }
        }
        if len - i == 2 {
            res.push('-');
            res.push(v[i]);
            res.push(v[i + 1]);
        } else if len - i == 3 {
            res.push(v[i]);
            res.push('-');
            res.push(v[i + 1]);
            res.push(v[i + 2]);
        } else {
            res.push(v[i]);
            res.push(v[i + 1]);
        }
        res.iter().collect()

=======

        let mut num = number.replace(" ", "").replace("-", "");
        let mut res = String::new();
        let mut i = 0;
        while i < num.len() {
            let mut j = 0;
            while i < num.len() && j < 3 {
                res.push(num.chars().nth(i).unwrap());
                i += 1;
                j += 1;
            }
            if i < num.len() && i + 2 == num.len() {
                res.push('-');
                res.push(num.chars().nth(i).unwrap());
                res.push(num.chars().nth(i + 1).unwrap());
                break;
            } else if i < num.len() {
                res.push('-');
            }
        }
        res
