Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if let Some(&top) = stack.last() {
                if top == c {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if !stack.is_empty() && stack[stack.len() - 1] == c {
                stack.pop();
            } else {
                stack.push(c);
            }
        }
        stack.into_iter().collect()
    }
}

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if let Some(&top) = stack.last() {
                if top == c {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if let Some(&last) = stack.last() {
                if last == c {
                    stack.pop();
                    continue;
                }
            }
            stack.push(c);
        }
        stack.into_iter().collect()
    }
}

=======

        let mut result = String::new();
        for c in s.chars() {
            if result.ends_with(c) {
                result.pop();
            } else {
                result.push(c);
            }
        }
        result
    }
}

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        for j in 1..s.len() {
            if i >= 0 && s[i] == s[j] {
                i -= 1;
            } else {
                i += 1;
                s[i] = s[j];
            }
        }
        unsafe { String::from_utf8_unchecked(s.into_iter().take(i + 1).collect()) }
    }
}

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if stack.len() == 0 {
                stack.push(c);
            } else {
                if stack[stack.len() - 1] == c {
                    stack.pop();
                } else {
                    stack.push(c);
                }
            }
        }
        stack.iter().collect()

=======

        let mut result: Vec<char> = Vec::new();
        for c in s.chars() {
            if let Some(&last) = result.last() {
                if last == c {
                    result.pop();
                    continue;
                }
            }
            result.push(c);
        }
        result.into_iter().collect()
    }
}

=======

        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        for j in 0..s.len() {
            s[i] = s[j];
            if i > 0 && s[i - 1] == s[i] {
                i -= 2;
            }
            i += 1;
        }
        unsafe { String::from_utf8_unchecked(s[..i].to_vec()) }
