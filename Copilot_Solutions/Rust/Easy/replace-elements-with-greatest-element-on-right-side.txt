Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut arr = arr;
        let mut max = -1;
        for i in (0..arr.len()).rev() {
            let tmp = arr[i];
            arr[i] = max;
            max = max.max(tmp);
        }
        arr

=======

        let mut arr = arr;
        let mut max = -1;
        for i in (0..arr.len()).rev() {
            let t = arr[i];
            arr[i] = max;
            max = max.max(t);
        }
        arr

=======

        let mut arr = arr;
        let mut max = -1;
        for i in (0..arr.len()).rev() {
            let t = arr[i];
            arr[i] = max;
            max = max.max(t);
        }
        arr
    }
}

=======

        let mut arr = arr;
        let n = arr.len();
        let mut max = arr[n - 1];
        arr[n - 1] = -1;
        for i in (0..n - 1).rev() {
            let t = arr[i];
            arr[i] = max;
            if t > max {
                max = t;
            }
        }
        arr

=======

        let mut result = Vec::new();
        let mut max = -1;
        for i in (0..arr.len()).rev() {
            result.push(max);
            if arr[i] > max {
                max = arr[i];
            }
        }
        result.reverse();
        result

=======

        let mut a = arr;
        let mut max = -1;
        for i in (0..a.len()).rev() {
            let t = a[i];
            a[i] = max;
            max = max.max(t);
        }
        a

=======

        let mut result = vec![-1; arr.len()];
        let mut max = -1;
        for i in (0..arr.len()).rev() {
            result[i] = max;
            max = max.max(arr[i]);
        }
        result
    }
}

=======

        let mut v = arr.clone();
        let mut max = -1;
        for i in (0..v.len()).rev() {
            let t = v[i];
            v[i] = max;
            max = max.max(t);
        }
        v
    }
}
