Synthesizing 10/10 solutions

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            count[c as usize - '0' as usize] += 1;
        }
        for i in 0..10 {
            if count[i] > 0 && count[i] != i {
                return false;
            }
        }
        true

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            count[c as usize - '0' as usize] += 1;
        }
        for (i, c) in num.chars().enumerate() {
            if count[c as usize - '0' as usize] != i + 1 {
                return false;
            }
        }
        true

=======

        let mut counts = vec![0; 10];
        for c in num.chars() {
            counts[c as usize - '0' as usize] += 1;
        }
        for (i, c) in num.chars().enumerate() {
            if counts[c as usize - '0' as usize] != i + 1 {
                return false;
            }
        }
        true
    }
}

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            count[c as usize - 48] += 1;
        }
        for i in 0..10 {
            if count[i] != 0 && count[i] != i {
                return false;
            }
        }
        true

=======

        let mut arr = [0; 10];
        for c in num.chars() {
            arr[c as usize - '0' as usize] += 1;
        }
        for i in 0..10 {
            if arr[i] != 0 && arr[i] != i {
                return false;
            }
        }
        return true;

=======

        let mut digits: Vec<i32> = vec![0; 10];
        for c in num.chars() {
            digits[c.to_digit(10).unwrap() as usize] += 1;
        }
        for i in 0..10 {
            if digits[i] != 0 && digits[i] != i as i32 {
                return false;
            }
        }
        true

=======

        let mut v: Vec<i32> = vec![0; 10];
        for c in num.chars() {
            v[c as usize - '0' as usize] += 1;
        }
        for i in 0..num.len() {
            if v[i] != (num.chars().nth(i).unwrap() as i32 - '0' as i32) {
                return false;
            }
        }
        true

=======

        let mut counts = [0; 10];
        for c in num.chars() {
            let i = c as usize - '0' as usize;
            counts[i] += 1;
        }
        for (i, c) in num.chars().enumerate() {
            let j = c as usize - '0' as usize;
            if counts[j] != i + 1 {
                return false;
            }
        }
        true

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            let c = c as u8;
            count[(c - '0' as u8) as usize] += 1;
        }
        for i in 0..10 {
            let c = i as u8 + '0' as u8;
            if count[i] != 0 && count[i] != (c as char).to_digit(10).unwrap() as usize {
                return false;
            }
        }
        true

=======

        let mut count = vec![0;10];
        for ch in num.chars() {
            count[ch as usize - 48] += 1;
        }
        for (i, ch) in num.chars().enumerate() {
            let ch = ch as usize - 48;
            if count[ch] != ch {
                return false;
            }
        }
        true
    }
}
