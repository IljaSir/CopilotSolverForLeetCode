Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut lines = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - 'a' as u8) as usize];
            if width + w > 100 {
                lines += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![lines, width]

=======

        let mut line = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - 'a' as u8) as usize];
            if width + w > 100 {
                line += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![line, width]

=======

        let mut line = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - 'a' as u8) as usize];
            if width + w <= 100 {
                width += w;
            } else {
                line += 1;
                width = w;
            }
        }
        vec![line, width]

=======

        let mut lines = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - b'a') as usize];
            if width + w > 100 {
                lines += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![lines, width]

=======

        let mut lines = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - b'a') as usize];
            if width + w > 100 {
                lines += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![lines, width]
    }
}

=======

        let mut line = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as u8 - b'a') as usize];
            if width + w > 100 {
                line += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![line, width]

=======

        let mut lines = 1;
        let mut pixels = 0;
        for c in s.chars() {
            let width = widths[(c as u8 - 'a' as u8) as usize];
            if pixels + width > 100 {
                lines += 1;
                pixels = width;
            } else {
                pixels += width;
            }
        }
        vec![lines, pixels]
    }
}

=======

        let mut line = 1;
        let mut width = 0;
        for c in s.chars() {
            let w = widths[(c as usize) - 97];
            if width + w > 100 {
                line += 1;
                width = w;
            } else {
                width += w;
            }
        }
        vec![line, width]

=======

        let mut cnt = 0;
        let mut lines = 1;
        for c in s.chars() {
            let w = widths[c as usize - 'a' as usize];
            if cnt + w > 100 {
                lines += 1;
                cnt = w;
            } else {
                cnt += w;
            }
        }
        vec![lines, cnt]
