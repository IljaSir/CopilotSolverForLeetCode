Synthesizing 10/10 solutions

=======

        let mut res = std::i32::MAX;
        let mut last = -1;
        for i in 0..words.len() {
            if words[i] == target {
                if last != -1 {
                    res = res.min((i as i32 - last).abs());
                }
                last = i as i32;
            }
        }
        if last == -1 {
            return -1;
        }
        let n = words.len() as i32;
        res = res.min((start_index - last + n) % n);
        res = res.min((start_index - last - n) % n);
        res

=======

        let start_index = start_index as usize;
        let mut min_dist = words.len();
        for (i, word) in words.iter().enumerate() {
            if word == &target {
                let dist = (i as i32 - start_index as i32).abs();
                min_dist = min_dist.min(dist as usize);
                min_dist = min_dist.min(words.len() - dist as usize);
            }
        }
        if min_dist == words.len() {
            -1
        } else {
            min_dist as i32
        }
    }
}

=======

        let mut start_index = start_index as usize;
        let mut min = std::i32::MAX;
        let mut i = 0;
        while i < words.len() {
            if words[start_index] == target {
                min = min.min(i as i32);
            }
            start_index = (start_index + 1) % words.len();
            i += 1;
        }
        start_index = start_index as usize;
        i = 0;
        while i < words.len() {
            if words[start_index] == target {
                min = min.min(i as i32);
            }
            start_index = (start_index + words.len() - 1) % words.len();
            i += 1;
        }
        if min == std::i32::MAX {
            -1
        } else {
            min
        }
    }
}

=======

        let mut min_distance = std::i32::MAX;
        let mut result = -1;
        for (i, word) in words.iter().enumerate() {
            if word == &target {
                let distance = (i as i32 - start_index).abs();
                if distance < min_distance {
                    min_distance = distance;
                    result = i as i32;
                }
            }
        }
        result
    }
}

=======

        let mut res = i32::max_value();
        let mut prev = -1;
        for (i, word) in words.iter().enumerate() {
            if word == &target {
                if prev != -1 {
                    res = res.min((i as i32 - prev).abs());
                }
                prev = i as i32;
            }
        }
        let n = words.len() as i32;
        if prev != -1 {
            res = res.min((n - (prev - start_index).abs()).abs());
        }
        if res == i32::max_value() {
            -1
        } else {
            res
        }
    }
}

=======

        let mut min = std::i32::MAX;
        let mut i = start_index as usize;
        while min > 0 {
            if words[i] == target {
                break;
            }
            min -= 1;
            i = (i + 1) % words.len();
        }
        while min > 0 {
            if words[i] == target {
                break;
            }
            min -= 1;
            i = (i + words.len() - 1) % words.len();
        }
        if min == 0 {
            -1
        } else {
            min
        }

=======

        let mut min_distance = std::i32::MAX;
        let mut min_index = -1;
        let mut i = 0;
        for word in words {
            if word == target {
                let distance = (i - start_index).abs();
                if distance < min_distance {
                    min_distance = distance;
                    min_index = i;
                }
            }
            i = i + 1;
        }
        min_distance
    }
}

=======

        let mut n = words.len();
        let mut i = start_index as usize;
        let mut j = start_index as usize;
        let mut k = 0;
        let mut res = n as i32;
        while k < n {
            if words[i] == target {
                res = res.min((i as i32 - start_index).abs());
            }
            if words[j] == target {
                res = res.min((j as i32 - start_index).abs());
            }
            i = (i + 1) % n;
            j = (j + n - 1) % n;
            k += 1;
        }
        res

=======

        let mut i = start_index;
        let mut j = start_index;
        let n = words.len();
        let mut count = 0;
        let mut ans = std::i32::MAX;
        loop {
            if i >= 0 && i < n as i32 && words[i as usize] == target {
                ans = ans.min(count);
                break;
            }
            if j >= 0 && j < n as i32 && words[j as usize] == target {
                ans = ans.min(count);
                break;
            }
            if i >= 0 && i < n as i32 {
                i -= 1;
            } else {
                i = n as i32 - 1;
            }
            if j >= 0 && j < n as i32 {
                j += 1;
            } else {
                j = 0;
            }
            count += 1;
        }
        ans
    }
}

=======

        let mut res = i32::max_value();
        let mut index = start_index;
        let mut flag = 0;
        while flag < 2 {
            let mut i = 0;
            while i < words.len() {
                if words[index as usize] == target {
                    res = res.min((i as i32).abs());
                    break;
                }
                i += 1;
                index = (index + 1) % words.len() as i32;
            }
            flag += 1;
            index = (index + words.len() as i32 - 1) % words.len() as i32;
        }
        if res == i32::max_value() {
            -1
        } else {
            res
        }
    }
}
