Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if n == 1 {
            return 0;
        }
        if n % 2 == 0 {
            return n / 2 + Self::number_of_matches(n / 2);
        } else {
            return (n - 1) / 2 + Self::number_of_matches((n - 1) / 2 + 1);
        }

=======

        let mut n = n;
        let mut matches = 0;
        while n > 1 {
            if n % 2 == 0 {
                matches += n / 2;
                n /= 2;
            } else {
                matches += (n - 1) / 2;
                n = (n - 1) / 2 + 1;
            }
        }
        matches

=======

        if n == 1 {
            return 0;
        }
        n / 2 + Self::number_of_matches((n + 1) / 2)

=======

        let mut n = n;
        let mut sum = 0;
        while n > 1 {
            if n % 2 == 0 {
                sum += n / 2;
                n /= 2;
            } else {
                sum += (n - 1) / 2;
                n = (n - 1) / 2 + 1;
            }
        }
        sum

=======

        n - 1

=======

        n - 1
    }
}

=======

        if n == 1 {
            return 0;
        }
        let mut count = 0;
        let mut teams = n;
        while teams > 1 {
            if teams % 2 == 0 {
                teams = teams / 2;
                count += teams;
            } else {
                teams = teams / 2 + 1;
                count += teams - 1;
            }
        }
        count
    }
}
