Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut last = -1;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                if last != -1 && i as i32 - last - 1 < k {
                    return false;
                }
                last = i as i32;
            }
        }
        true

=======

        let mut last = -1;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                if last != -1 && i as i32 - last <= k {
                    return false;
                }
                last = i as i32;
            }
        }
        true

=======

        let mut last = -1;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                if last == -1 {
                    last = i as i32;
                } else if i as i32 - last - 1 < k {
                    return false;
                } else {
                    last = i as i32;
                }
            }
        }
        true

=======

        let mut last_one = -1;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                if last_one >= 0 && i as i32 - last_one - 1 < k {
                    return false;
                }
                last_one = i as i32;
            }
        }
        true

=======

        let mut last = -1;
        let mut i = 0;
        for num in nums {
            if num == 1 {
                if last == -1 {
                    last = i;
                } else {
                    if i - last - 1 < k {
                        return false;
                    }
                    last = i;
                }
            }
            i += 1;
        }
        true

=======

        let mut last_pos = 0;
        let mut first = true;
        for (i, &n) in nums.iter().enumerate() {
            if n == 1 {
                if first {
                    first = false;
                } else {
                    if i - last_pos - 1 < k as usize {
                        return false;
                    }
                }
                last_pos = i;
            }
        }
        true

=======

        let mut last_index = 0;
        let mut first = true;
        for (i, &v) in nums.iter().enumerate() {
            if v == 1 {
                if first {
                    first = false;
                } else {
                    if i - last_index <= k as usize {
                        return false;
                    }
                }
                last_index = i;
            }
        }
        true

=======

        let mut ans = true;
        let mut last = -1;
        for (i, &x) in nums.iter().enumerate() {
            if x == 1 {
                if last != -1 && i - last - 1 < k {
                    ans = false;
                    break;
                }
                last = i as i32;
            }
        }
        ans

=======

        let mut last = -1;
        let mut i = 0;
        for (i, n) in nums.iter().enumerate() {
            if *n == 1 {
                if last != -1 && i as i32 - last - 1 < k {
                    return false;
                }
                last = i as i32;
            }
        }
        true
    }
}
