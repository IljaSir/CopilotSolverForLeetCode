Synthesizing 10/10 solutions

=======

        let mut odd = Vec::new();
        let mut even = Vec::new();
        for num in nums {
            if num % 2 == 0 {
                even.push(num);
            } else {
                odd.push(num);
            }
        }
        let mut result = Vec::new();
        for i in 0..(odd.len()) {
            result.push(even[i]);
            result.push(odd[i]);
        }
        result
    }
}

=======

        let mut odd = Vec::new();
        let mut even = Vec::new();
        for i in nums {
            if i % 2 == 0 {
                even.push(i);
            } else {
                odd.push(i);
            }
        }
        let mut res = Vec::new();
        for i in 0..odd.len() {
            res.push(even[i]);
            res.push(odd[i]);
        }
        return res;

=======

        let mut odd = Vec::new();
        let mut even = Vec::new();
        for i in nums {
            if i % 2 == 0 {
                even.push(i);
            } else {
                odd.push(i);
            }
        }
        let mut result = Vec::new();
        for i in 0..even.len() {
            result.push(even[i]);
            result.push(odd[i]);
        }
        result
    }
}

=======

        let mut res = vec![0; nums.len()];
        let mut i = 0;
        let mut j = 1;
        for n in nums {
            if n % 2 == 0 {
                res[i] = n;
                i += 2;
            } else {
                res[j] = n;
                j += 2;
            }
        }
        res

=======

        let mut result = vec![0; nums.len()];
        let mut even = 0;
        let mut odd = 1;
        for num in nums {
            if num % 2 == 0 {
                result[even] = num;
                even += 2;
            } else {
                result[odd] = num;
                odd += 2;
            }
        }
        result

=======

        let mut result = vec![0; nums.len()];
        let mut j = 0;
        let mut k = 1;
        for i in 0..nums.len() {
            if nums[i] % 2 == 0 {
                result[j] = nums[i];
                j += 2;
            } else {
                result[k] = nums[i];
                k += 2;
            }
        }
        result

=======

        let mut ans = vec![0; nums.len()];
        let mut even = 0;
        let mut odd = 1;
        for num in nums {
            if num % 2 == 0 {
                ans[even] = num;
                even += 2;
            } else {
                ans[odd] = num;
                odd += 2;
            }
        }
        ans
    }
}

=======

        let mut nums = nums;
        let mut odd = 1;
        let mut even = 0;
        while odd < nums.len() && even < nums.len() {
            while odd < nums.len() && nums[odd] % 2 == 1 {
                odd += 2;
            }
            while even < nums.len() && nums[even] % 2 == 0 {
                even += 2;
            }
            if odd < nums.len() && even < nums.len() {
                nums.swap(odd, even);
            }
        }
        nums
    }
}

=======

        let mut res = vec![0; nums.len()];
        let mut odd = 0;
        let mut even = 1;
        for n in nums {
            if n % 2 == 0 {
                res[even] = n;
                even += 2;
            } else {
                res[odd] = n;
                odd += 2;
            }
        }
        res
    }
}

=======

        let mut odd = 1;
        let mut even = 0;
        let mut result = nums.clone();
        for item in nums {
            if item % 2 == 0 {
                result[even] = item;
                even += 2;
            } else {
                result[odd] = item;
                odd += 2;
            }
        }
        result
    }
}
