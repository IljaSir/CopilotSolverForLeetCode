Synthesizing 10/10 solutions

=======

        use std::collections::HashSet;
        let mut set1 = HashSet::new();
        let mut set2 = HashSet::new();
        for num in nums1 {
            set1.insert(num);
        }
        for num in nums2 {
            set2.insert(num);
        }
        let mut ans = Vec::new();
        for num in set1 {
            if set2.contains(&num) {
                ans.push(num);
            }
        }
        ans

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut result = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                i += 1;
            } else if nums1[i] > nums2[j] {
                j += 1;
            } else {
                if result.is_empty() || nums1[i] != result[result.len() - 1] {
                    result.push(nums1[i]);
                }
                i += 1;
                j += 1;
            }
        }
        result

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut res = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                if res.is_empty() || res.last().unwrap() != &nums1[i] {
                    res.push(nums1[i]);
                }
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in nums1 {
            if nums2.contains(&i) && !result.contains(&i) {
                result.push(i);
            }
        }
        result
    }
}

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut idx1 = 0;
        let mut idx2 = 0;
        let mut result = Vec::new();
        while idx1 < nums1.len() && idx2 < nums2.len() {
            if nums1[idx1] < nums2[idx2] {
                idx1 += 1;
            } else if nums1[idx1] > nums2[idx2] {
                idx2 += 1;
            } else {
                if result.is_empty() || nums1[idx1] != result[result.len() - 1] {
                    result.push(nums1[idx1]);
                }
                idx1 += 1;
                idx2 += 1;
            }
        }
        result

=======

        let mut v = Vec::new();
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                if nums1[i] == nums2[j] {
                    v.push(nums1[i]);
                    break;
                }
            }
        }
        v.sort();
        v.dedup();
        v

=======

        let mut res = vec![];
        for i in nums1 {
            if nums2.contains(&i) && !res.contains(&i) {
                res.push(i);
            }
        }
        res

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut result = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                i += 1;
            } else if nums1[i] > nums2[j] {
                j += 1;
            } else {
                if result.is_empty() || nums1[i] != result[result.len() - 1] {
                    result.push(nums1[i]);
                }
                i += 1;
                j += 1;
            }
        }
        result

=======

        let mut set1 = nums1.into_iter().collect::<std::collections::HashSet<i32>>();
        let mut set2 = nums2.into_iter().collect::<std::collections::HashSet<i32>>();
        let mut result = set1.intersection(&set2).map(|x| *x).collect::<Vec<i32>>();
        result.sort();
        result
    }
}

=======

        let mut res = nums1.iter().filter(|&n| nums2.contains(n)).collect::<Vec<_>>();
        res.sort();
        res.dedup();
        res.iter().map(|&n| *n).collect()
    }
}
