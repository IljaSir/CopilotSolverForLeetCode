Synthesizing 10/10 solutions

=======

        let mut s = s.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            if s[i] == '?' {
                for c in b'a'..=b'z' {
                    if (i == 0 || s[i - 1] != c as char) && (i == s.len() - 1 || s[i + 1] != c as char) {
                        s[i] = c as char;
                        break;
                    }
                }
            }
        }
        s.into_iter().collect::<String>()
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            if s[i] == '?' {
                for c in b'a'..=b'z' {
                    if i > 0 && s[i - 1] as u8 == c {
                        continue;
                    }
                    if i + 1 < s.len() && s[i + 1] as u8 == c {
                        continue;
                    }
                    s[i] = c as char;
                    break;
                }
            }
        }
        s.into_iter().collect()

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let n = s.len();
        for i in 0..n {
            if s[i] != '?' { continue; }
            for c in b'a'..=b'z' {
                if (i == 0 || s[i-1] != c as char) && (i == n-1 || s[i+1] != c as char) {
                    s[i] = c as char;
                    break;
                }
            }
        }
        s.into_iter().collect::<String>()

=======

        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'?' {
                s[i] = b'a';
                if i > 0 && s[i] == s[i - 1] {
                    s[i] += 1;
                }
                if i + 1 < s.len() && s[i] == s[i + 1] {
                    s[i] += 1;
                }
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let n = s.len();
        for i in 0..n {
            if s[i] != '?' { continue; }
            for c in b'a'..=b'z' {
                if (i == 0 || s[i-1] != c as char) && (i == n-1 || s[i+1] != c as char) {
                    s[i] = c as char;
                    break;
                }
            }
        }
        s.into_iter().collect::<String>()
()
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            if s[i] == '?' {
                for c in 0..=25 {
                    if (i == 0 || (i > 0 && (s[i-1] as u8 - 'a' as u8) as u8 != c)) && (i == s.len()-1 || (i < s.len()-1 && (s[i+1] as u8 - 'a' as u8) as u8 != c)) {
                        s[i] = (c as u8 + 'a' as u8) as char;
                        break;
                    }
                }
            }
        }
        s.iter().collect::<String>()

=======

        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'?' {
                if i == 0 {
                    if i + 1 < s.len {
                        if s[i + 1] == b'z' {
                            s[i] = b'a';
                        } else {
                            s[i] = s[i + 1] + 1;
                        }
                    } else {
                        s[i] = b'a';
                    }
                } else {
                    if i + 1 < s.len() {
                        if s[i - 1] == b'z' {
                            if s[i + 1] == b'z' {
                                s[i] = b'a';
                            } else {
                                s[i] = s[i + 1] + 1;
                            }
                        } else {
                            if s[i + 1] == b'z' {
                                s[i] = s[i - 1] + 1;
                            } else {
                                if s[i + 1] == s[i - 1] {
                                    s[i] = s[i - 1] + 1;
    ====                        = else {
                                    if s[i + 1] == s[i - 1] + 1 {
                                        s[i] = s[i - 1] + 2;==
                                     else {
                                        s[i] = s[i - 1] + 1;
                                    }
                                }
                            }
                        }
                    } else {
                        if s[i - 1] == b'z' {
                            s[i] = b'a';
                        } else {
                            s[i] = s[i - 1] + 1;
                        }
                    }
                }
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()
        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'?' {
                s[i] = b'a';
                if i > 0 && s[i] == s[i - 1] {
                    s[i] += 1;
                }
                if i + 1 < s.len() && s[i] == s[i + 1] {
                    s[i] += 1;
                }
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'?' {
                let mut c = b'a';
                while (i > 0 && s[i - 1] == c) || (i + 1 < s.len() && s[i + 1] == c) {
                    c += 1;
                }
                s[i] = c;
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()
    }
}

=======

        let mut s = s.as_bytes().to_vec();
        let mut i = 0;
        while i < s.len() {
            if s[i] == b'?' {
                if i == 0 {
                    if i + 1 < s.len() {
                        if s[i + 1] == b'z' {
                            s[i] = b'a';
                        } else {
                            s[i] = s[i + 1] + 1;
                        }
                    } else {
                        s[i] = b'a';
                    }
                } else {
                    if i + 1 < s.len() {
                        if s[i - 1] == b'z' {
                            if s[i + 1] == b'z' {
                                s[i] = b'a';
                            } else {
                                s[i] = s[i + 1] + 1;
                            }
                        } else {
                            if s[i + 1] == b'z' {
                                s[i] = s[i - 1] + 1;
                            } else {
                                if s[i + 1] == s[i - 1] {
                                    s[i] = s[i - 1] + 1;
                                } else {
                                    if s[i + 1] == s[i - 1] + 1 {
                                        s[i] = s[i - 1] + 2;
                                    } else {
                                        s[i] = s[i - 1] + 1;
                                    }
                                }
                            }
                        }
                    } else {
                        if s[i - 1] == b'z' {
                            s[i] = b'a';
                        } else {
                            s[i] = s[i - 1] + 1;
                        }
                    }
                }
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()

=======

        let mut res = s;
        let mut i = 0;
        while i < res.len() {
            if res.as_bytes()[i] == b'?' {
                let mut c = b'a';
                while (i > 0 && res.as_bytes()[i - 1] == c) || (i + 1 < res.len() && res.as_bytes()[i + 1] == c) {
                    c += 1;
                }
                res.as_bytes_mut()[i] = c;
            }
            i += 1;
        }
        res
    }
}

=======

        let mut s = s;
        let mut prev = b' ';
        let mut next = b' ';
        for i in 0..s.len() {
            if s.as_bytes()[i] == b'?' {
                if i == s.len() - 1 {
                    next = b' ';
                } else {
                    next = s.as_bytes()[i + 1];
                }
                let mut c = b'a';
                while c == prev || c == next {
                    c += 1;
                }
                s.as_bytes_mut()[i] = c;
                prev = c;
            } else {
                prev = s.as_bytes()[i];
            }
        }
        s
    }
}

=======

        let mut result = String::new();
        let mut prev = 'a';
        let mut next = 'a';
        for (i, c) in s.chars().enumerate() {
            if c == '?' {
                if i == 0 {
                    if i + 1 < s.len() {
                        next = s.chars().nth(i + 1).unwrap();
                    }
                    while prev == next {
                        next = ((next as u8) + 1) as char;
                    }
                    result.push(next);
                    prev = next;
                } else {
                    if i + 1 < s.len() {
                        next = s.chars().nth(i + 1).unwrap();
                    }
                    while prev == next || prev == c {
                        next = ((next as u8) + 1) as char;
                    }
                    result.push(next);
                    prev = next;
                }
            } else {
                result.push(c);
                prev = c;
            }
        }
        result
