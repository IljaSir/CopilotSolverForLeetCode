Synthesizing 10/10 solutions

=======

        for i in 0..arr.len() {
            for j in 0..arr.len() {
                if i != j && arr[i] == 2 * arr[j] {
                    return true;
                }
            }
        }
        false

=======

        for i in 0..arr.len() {
            for j in 0..arr.len() {
                if i != j && arr[i] == 2 * arr[j] {
                    return true;
                }
            }
        }
        false
    }
}

=======

        for i in 0..arr.len() {
            for j in 0..arr.len() {
                if i == j {
                    continue;
                }
                if arr[i] == 2 * arr[j] {
                    return true;
                }
            }
        }
        false

=======

        let mut set = std::collections::HashSet::new();
        for i in arr {
            if set.contains(&(i * 2)) || (i % 2 == 0 && set.contains(&(i / 2))) {
                return true;
            }
            set.insert(i);
        }
        false

=======

        let mut set = HashSet::new();
        for i in arr {
            if set.contains(&(i * 2)) || (i % 2 == 0 && set.contains(&(i / 2))) {
                return true;
            }
            set.insert(i);
        }
        false

=======

        let mut double = false;
        for i in 0..arr.len() {
            for j in 0..arr.len() {
                if i != j {
                    if arr[i] == arr[j] * 2 {
                        double = true;
                    }
                }
            }
        }
        double
    }
}

=======

        let mut arr = arr;
        arr.sort();
        for i in 0..arr.len() {
            if arr[i] == 0 {
                if arr[i + 1] == 0 {
                    return true;
                }
            } else if arr[i] < 0 {
                let index = arr.binary_search(&(arr[i] / 2)).unwrap_or_else(|x| x);
                if index < arr.len() && arr[index] == arr[i] / 2 {
                    return true;
                }
            } else {
                let index = arr.binary_search(&(arr[i] * 2)).unwrap_or_else(|x| x);
                if index < arr.len() && arr[index] == arr[i] * 2 {
                    return true;
                }
            }
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for i in 0..arr.len() {
            if arr[i] % 2 == 0 {
                if let Some(_) = map.get(&(arr[i]/2)) {
                    return true;
                }
            }
            if let Some(_) = map.get(&(arr[i]*2)) {
                return true;
            }
            map.insert(arr[i], i);
        }
        false

=======

        let mut arr = arr;
        arr.sort();
        for i in 0..arr.len() {
            let n = arr[i];
            let mut l = 0;
            let mut r = arr.len() - 1;
            while l <= r {
                let m = (l + r) / 2;
                if arr[m] == n * 2 && m != i {
                    return true;
                } else if arr[m] < n * 2 {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
        }
        false

=======

        let mut arr = arr;
        arr.sort_unstable();
        let len = arr.len();
        for i in 0..len {
            for j in i..len {
                if i == j {
                    continue;
                }
                if arr[i] == arr[j] * 2 {
                    return true;
                }
            }
        }
        false
    }
}
