Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut prices = prices;
        for i in 0..prices.len() {
            for j in i+1..prices.len() {
                if prices[j] <= prices[i] {
                    prices[i] -= prices[j];
                    break;
                }
            }
        }
        prices

=======

        let mut prices = prices;
        for i in 0..prices.len() {
            for j in i + 1..prices.len() {
                if prices[i] >= prices[j] {
                    prices[i] -= prices[j];
                    break;
                }
            }
        }
        prices

=======

        let mut result = prices.clone();
        for i in 0..prices.len() {
            for j in i+1..prices.len() {
                if prices[j] <= prices[i] {
                    result[i] -= prices[j];
                    break;
                }
            }
        }
        result

=======

        let mut prices = prices;
        let n = prices.len();
        for i in 0..n {
            for j in i+1..n {
                if prices[j] <= prices[i] {
                    prices[i] -= prices[j];
                    break;
                }
            }
        }
        prices

=======

        let mut res = Vec::new();
        let mut i = 0;
        while i < prices.len() {
            let mut j = i + 1;
            while j < prices.len() {
                if prices[j] <= prices[i] {
                    res.push(prices[i] - prices[j]);
                    break;
                }
                j += 1;
            }
            if j == prices.len() {
                res.push(prices[i]);
            }
            i += 1;
        }
        res
    }
}

=======

        let mut ans: Vec<i32> = Vec::new();
        for i in 0..prices.len() {
            let mut discount = 0;
            for j in i+1..prices.len() {
                if prices[j] <= prices[i] {
                    discount = prices[j];
                    break;
                }
            }
            ans.push(prices[i]-discount);
        }
        ans
    }
}

=======

        let mut result = vec![];
        let mut i = 0;
        while i < prices.len() {
            let mut j = i + 1;
            while j < prices.len() {
                if prices[j] <= prices[i] {
                    result.push(prices[i] - prices[j]);
                    break;
                }
                j += 1;
            }
            if j == prices.len() {
                result.push(prices[i]);
            }
            i += 1;
        }
        result

=======

        let mut output: Vec<i32> = Vec::new();
        for i in 0..prices.len() {
            let mut discount = 0;
            for j in i+1..prices.len() {
                if prices[j] <= prices[i] {
                    discount = prices[j];
                    break;
                }
            }
            output.push(prices[i] - discount);
        }
        output

=======

        let mut res = vec![];
        let mut i = 0;
        while i < prices.len() - 1 {
            let mut j = i + 1;
            while j < prices.len() {
                if prices[i] >= prices[j] {
                    res.push(prices[i] - prices[j]);
                    break;
                }
                j += 1;
            }
            if j == prices.len() {
                res.push(prices[i]);
            }
            i += 1;
        }
        res.push(prices[i]);
        res
