Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 1..nums.len() - 1 {
            if nums[i] > nums[i - 1] && nums[i] > nums[i + 1] {
                count += 1;
            }
            if nums[i] < nums[i - 1] && nums[i] < nums[i + 1] {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 1..nums.len() - 1 {
            if nums[i] > nums[i - 1] && nums[i] > nums[i + 1] {
                count += 1;
            } else if nums[i] < nums[i - 1] && nums[i] < nums[i + 1] {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 1..nums.len()-1 {
            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) || (nums[i] < nums[i-1] && nums[i] < nums[i+1]) {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 1..nums.len() - 1 {
            if nums[i - 1] < nums[i] && nums[i] > nums[i + 1] {
                count += 1;
            }
            if nums[i - 1] > nums[i] && nums[i] < nums[i + 1] {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        for i in 1..nums.len()-1 {
            if nums[i] > nums[i-1] && nums[i] > nums[i+1] {
                res += 1;
            }
            if nums[i] < nums[i-1] && nums[i] < nums[i+1] {
                res += 1;
            }
        }
        res
    }
}

=======

        let mut count = 0;
        for i in 1..nums.len() - 1 {
            if (nums[i] > nums[i - 1]) && (nums[i] > nums[i + 1]) {
                count += 1;
            } else if (nums[i] < nums[i - 1]) && (nums[i] < nums[i + 1]) {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut i = 1;
        while i < nums.len() - 1 {
            if nums[i - 1] < nums[i] && nums[i] > nums[i + 1] {
                count += 1;
            } else if nums[i - 1] > nums[i] && nums[i] < nums[i + 1] {
                count += 1;
            }
            i += 1;
        }
        count
    }
}

=======

        let mut count = 0;
        let mut prev = nums[0];
        let mut is_hill = false;
        for i in 1..nums.len() {
            if nums[i] == prev {
                continue;
            }
            if nums[i] > prev {
                if !is_hill {
                    count += 1;
                    is_hill = true;
                }
            } else {
                if is_hill {
                    count += 1;
                    is_hill = false;
                }
            }
            prev = nums[i];
        }
        count
    }
}

=======

        let mut res = 0;
        let mut i = 1;
        let mut prev = nums[0];
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[j - 1] {
                j += 1;
            }
            if j == nums.len() {
                break;
            }
            let mut is_hill = nums[j] > nums[j - 1];
            while j < nums.len() && nums[j] > nums[j - 1] == is_hill {
                j += 1;
            }
            if j == nums.len() {
                break;
            }
            if is_hill && nums[j] < nums[j - 1] {
                res += 1;
            }
            if !is_hill && nums[j] > nums[j - 1] {
                res += 1;
            }
            i = j;
        }
        res
    }
}
