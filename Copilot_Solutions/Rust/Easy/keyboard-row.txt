Synthesizing 10/10 solutions

=======

        let mut result: Vec<String> = Vec::new();
        let row1 = "qwertyuiopQWERTYUIOP";
        let row2 = "asdfghjklASDFGHJKL";
        let row3 = "zxcvbnmZXCVBNM";
        for word in words {
            let mut row = 0;
            let mut is_same_row = true;
            for c in word.chars() {
                let mut r = 0;
                if row1.contains(c) {
                    r = 1;
                } else if row2.contains(c) {
                    r = 2;
                } else if row3.contains(c) {
                    r = 3;
                }
                if row == 0 {
                    row = r;
                } else if row != r {
                    is_same_row = false;
                    break;
                }
            }
            if is_same_row {
                result.push(word);
            }
        }
        result

=======

        let mut result = vec![];
        let rows = vec![vec!['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'], vec!['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'], vec!['z', 'x', 'c', 'v', 'b', 'n', 'm']];
        for word in words {
            let mut row = 0;
            let mut same_row = true;
            let mut c = 0;
            for ch in word.chars() {
                let ch = ch.to_ascii_lowercase();
                if c == 0 {
                    for (i, r) in rows.iter().enumerate() {
                        if r.contains(&ch) {
                            row = i;
                            break;
                        }
                    }
                } else {
                    if !rows[row].contains(&ch) {
                        same_row = false;
                        break;
                    }
                }
                c += 1;
            }
            if same_row {
                result.push(word);
            }
        }
        result

=======

        let mut res: Vec<String> = Vec::new();
        let mut rows: Vec<Vec<char>> = Vec::new();
        rows.push(vec!['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']);
        rows.push(vec!['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']);
        rows.push(vec!['z', 'x', 'c', 'v', 'b', 'n', 'm']);
        for word in words {
            let mut flag = true;
            let mut row = 0;
            for (i, c) in word.chars().enumerate() {
                if i == 0 {
                    for (j, r) in rows.iter().enumerate() {
                        if r.contains(&c.to_ascii_lowercase()) {
                            row = j;
                            break;
                        }
                    }
                } else {
                    if !rows[row].contains(&c.to_ascii_lowercase()) {
                        flag = false;
                        break;
                    }
                }
            }
            if flag {
                res.push(word);
            }
        }
        res
    }
}

=======

        let mut res = vec![];
        let first = "qwertyuiop".chars().collect::<HashSet<_>>();
        let second = "asdfghjkl".chars().collect::<HashSet<_>>();
        let third = "zxcvbnm".chars().collect::<HashSet<_>>();
        for word in words {
            let mut set = word.to_ascii_lowercase().chars().collect::<HashSet<_>>();
            if set.is_subset(&first) || set.is_subset(&second) || set.is_subset(&third) {
                res.push(word);
            }
        }
        res

=======

        let mut ret = Vec::new();
        let mut rows = Vec::new();
        rows.push("qwertyuiop".to_string());
        rows.push("asdfghjkl".to_string());
        rows.push("zxcvbnm".to_string());
        for word in words {
            let mut row = 0;
            let mut i = 0;
            while i < 3 {
                let mut j = 0;
                while j < rows[i].len() {
                    if word.to_lowercase().contains(&rows[i][j..j+1]) {
                        row += 1;
                        break;
                    }
                    j += 1;
                }
                if row > 1 {
                    break;
                }
                i += 1;
            }
            if row == 1 {
                ret.push(word);
            }
        }
        ret
    }
}

=======

        let mut res: Vec<String> = Vec::new();
        let mut row1: Vec<char> = vec!['q','w','e','r','t','y','u','i','o','p'];
        let mut row2: Vec<char> = vec!['a','s','d','f','g','h','j','k','l'];
        let mut row3: Vec<char> = vec!['z','x','c','v','b','n','m'];
        for word in words.iter() {
            let mut flag = 0;
            for ch in word.chars() {
                if flag == 0 {
                    if row1.contains(&ch.to_ascii_lowercase()) {
                        flag = 1;
                    } else if row2.contains(&ch.to_ascii_lowercase()) {
                        flag = 2;
                    } else if row3.contains(&ch.to_ascii_lowercase()) {
                        flag = 3;
                    }
                } else {
                    if flag == 1 && !row1.contains(&ch.to_ascii_lowercase()) {
                        flag = -1;
                        break;
                    } else if flag == 2 && !row2.contains(&ch.to_ascii_lowercase()) {
                        flag = -1;
                        break;
                    } else if flag == 3 && !row3.contains(&ch.to_ascii_lowercase()) {
                        flag = -1;
                        break;
                    }
                }
            }
            if flag > 0 {
                res.push(word.clone());
            }
        }
        res
    }
}

=======

        let mut res = Vec::new();
        let mut v1 = Vec::new();
        let mut v2 = Vec::new();
        let mut v3 = Vec::new();
        let mut v4 = Vec::new();
        let mut v5 = Vec::new();
        let mut v6 = Vec::new();
        let mut v7 = Vec::new();
        let mut v8 = Vec::new();
        let mut v9 = Vec::new();
        let mut v10 = Vec::new();
        let mut v11 = Vec::new();
        let mut v12 = Vec::new();
        let mut v13 = Vec::new();
        let mut v14 = Vec::new();
        let mut v15 = Vec::new();
        let mut v16 = Vec::new();
        let mut v17 = Vec::new();
        let mut v18 = Vec::new();
        let mut v19 = Vec::new();
        let mut v20 = Vec::new();
        let mut v21 = Vec::new();
        let mut v22 = Vec::new();
        let mut v23 = Vec::new();
        let mut v24 = Vec::new();
        let mut v25 = Vec::new();
        let mut v26 = Vec::new();
        let mut v27 = Vec::new();
        let mut v28 = Vec::new();
        let mut v29 = Vec::new();
        let mut v30 = Vec::new();
        let mut v31 = Vec::new();
        let mut v32 = Vec::new();
        let mut v33 = Vec::new();
        let mut v34 = Vec::new();
        let mut v35 = Vec::new();
        let mut v36 = Vec::new();
        let mut v37 = Vec::new();
        let mut v38 = Vec::new();
        let mut v39 = Vec::new();
        let mut v40 = Vec::new();
        let mut v41 = Vec::new();
        let mut v42 = Vec::new();
        let mut v43 = Vec::new();
        let mut v44 = Vec::new();
        let mut v45 = Vec::new();
        let mut v46 = Vec::new();
        let mut v47 = Vec::new();
        let mut v48 = Vec::new();
        let mut v49 = Vec::new();

=======

        let mut result = Vec::new();
        let mut row = 0;
        let mut rows = Vec::new();
        rows.push("qwertyuiop");
        rows.push("asdfghjkl");
        rows.push("zxcvbnm");
        for word in words {
            let mut i = 0;
            while i < rows.len() {
                if rows[i].contains(word.chars().nth(0).unwrap().to_lowercase().to_string().as_str()) {
                    row = i;
                    break;
                }
                i += 1;
            }
            let mut is_same_row = true;
            for c in word.chars() {
                if !rows[row].contains(c.to_lowercase().to_string().as_str()) {
                    is_same_row = false;
                    break;
                }
            }
            if is_same_row {
                result.push(word);
            }
        }
        result

=======

        let mut result = Vec::new();
        for word in words.iter() {
            let mut row = 0;
            let mut flag = true;
            for c in word.chars() {
                let temp = match c {
                    'q' | 'w' | 'e' | 'r' | 't' | 'y' | 'u' | 'i' | 'o' | 'p' => 1,
                    'a' | 's' | 'd' | 'f' | 'g' | 'h' | 'j' | 'k' | 'l' => 2,
                    'z' | 'x' | 'c' | 'v' | 'b' | 'n' | 'm' => 3,
                    _ => 0,
                };
                if row == 0 {
                    row = temp;
                } else if row != temp {
                    flag = false;
                    break;
                }
            }
            if flag {
                result.push(word.to_string());
            }
        }
        result

=======

        let mut result = Vec::new();
        for word in words {
            let mut row = 0;
            for ch in word.chars() {
                let ch = ch.to_lowercase().next().unwrap();
                let mut cur_row = 0;
                if ch == 'q' || ch == 'w' || ch == 'e' || ch == 'r' || ch == 't' || ch == 'y' || ch == 'u' || ch == 'i' || ch == 'o' || ch == 'p' {
                    cur_row = 1;
                } else if ch == 'a' || ch == 's' || ch == 'd' || ch == 'f' || ch == 'g' || ch == 'h' || ch == 'j' || ch == 'k' || ch == 'l' {
                    cur_row = 2;
                } else {
                    cur_row = 3;
                }
                if row == 0 {
                    row = cur_row;
                } else if row != cur_row {
                    row = -1;
                    break;
                }
            }
            if row != -1 {
                result.push(word);
            }
        }
        result
