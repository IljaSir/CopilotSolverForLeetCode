Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut even = Vec::new();
        let mut odd = Vec::new();
        for n in nums {
            if n % 2 == 0 {
                even.push(n);
            } else {
                odd.push(n);
            }
        }
        even.append(&mut odd);
        even

=======

        let mut nums = nums;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            if nums[i] % 2 == 0 {
                i += 1;
            } else if nums[j] % 2 == 1 {
                j -= 1;
            } else {
                nums.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        nums

=======

        let mut nums = nums;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            if nums[i] % 2 == 0 {
                i += 1;
            } else {
                nums.swap(i, j);
                j -= 1;
            }
        }
        nums

=======

        let mut even: Vec<i32> = Vec::new();
        let mut odd: Vec<i32> = Vec::new();
        for num in nums {
            if num % 2 == 0 {
                even.push(num);
            } else {
                odd.push(num);
            }
        }
        even.append(&mut odd);
        even

=======

        let mut result: Vec<i32> = Vec::new();
        for i in nums {
            if i % 2 == 0 {
                result.insert(0, i);
            } else {
                result.push(i);
            }
        }
        result

=======

        let mut nums = nums;
        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            if nums[left] % 2 == 0 {
                left += 1;
            } else if nums[right] % 2 == 1 {
                right -= 1;
            } else {
                nums.swap(left, right);
            }
        }
        nums
    }
}

=======

        let mut res = Vec::new();
        for i in nums {
            if i % 2 == 0 {
                res.insert(0, i);
            } else {
                res.push(i);
            }
        }
        res
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..nums.len() {
            if nums[i] % 2 == 0 {
                result.insert(0, nums[i]);
            } else {
                result.push(nums[i]);
            }
        }
        result

=======

        let mut odd: Vec<i32> = Vec::new();
        let mut even: Vec<i32> = Vec::new();
        for i in nums {
            if i % 2 == 0 {
                even.push(i);
            } else {
                odd.push(i);
            }
        }
        even.append(&mut odd);
        even
