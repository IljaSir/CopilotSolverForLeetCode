Synthesizing 10/10 solutions

=======

        let mut result: Vec<Vec<i32>> = Vec::new();
        for i in 0..num_rows {
            let mut row: Vec<i32> = Vec::new();
            for j in 0..=i {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    let left = result[(i - 1) as usize][(j - 1) as usize];
                    let right = result[(i - 1) as usize][j as usize];
                    row.push(left + right);
                }
            }
            result.push(row);
        }
        result
    }
}

=======

        let mut result = Vec::new();
        for i in 0..num_rows {
            let mut row = Vec::new();
            for j in 0..=i {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(result[i as usize - 1][j as usize - 1] + result[i as usize - 1][j as usize]);
                }
            }
            result.push(row);
        }
        result
    }
}

=======

        let mut result: Vec<Vec<i32>> = Vec::new();
        for i in 0..num_rows {
            let mut row: Vec<i32> = Vec::new();
            for j in 0..i+1 {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(result[(i-1) as usize][(j-1) as usize] + result[(i-1) as usize][j as usize]);
                }
            }
            result.push(row);
        }
        result
    }
}

=======

        let mut result: Vec<Vec<i32>> = Vec::new();
        for i in 0..num_rows {
            let mut row: Vec<i32> = Vec::new();
            for j in 0..i+1 {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(result[(i-1) as usize][(j-1) as usize] + result[(i-1) as usize][j as usize]);
                }
            }
            result.push(row);
        }
        result

=======

        let mut result = Vec::new();
        for i in 0..num_rows {
            let mut row = Vec::new();
            for j in 0..i + 1 {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(result[(i - 1) as usize][(j - 1) as usize] + result[(i - 1) as usize][j as usize]);
                }
            }
            result.push(row);
        }
        result

=======

        let mut rows: Vec<Vec<i32>> = Vec::new();
        for i in 0..num_rows as usize {
            let mut row: Vec<i32> = Vec::new();
            for j in 0..i + 1 {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(rows[i - 1][j - 1] + rows[i - 1][j]);
                }
            }
            rows.push(row);
        }
        rows
    }
}

=======

        let mut res = Vec::new();
        for i in 0..num_rows {
            let mut row = Vec::new();
            for j in 0..i+1 {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    let last_row = &res[(i-1) as usize];
                    row.push(last_row[(j-1) as usize] + last_row[j as usize]);
                }
            }
            res.push(row);
        }
        res
    }
}

=======

        let mut result = vec![];
        for i in 0..num_rows {
            let mut row = vec![];
            for j in 0..=i {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    let left = result[(i - 1) as usize][(j - 1) as usize];
                    let right = result[(i - 1) as usize][j as usize];
                    row.push(left + right);
                }
            }
            result.push(row);
        }
        result
    }
}

=======

        let mut v = Vec::new();
        for i in 0..num_rows {
            let mut row = Vec::new();
            for j in 0..=i {
                if j == 0 || j == i {
                    row.push(1);
                } else {
                    row.push(v[(i - 1) as usize][(j - 1) as usize] + v[(i - 1) as usize][j as usize]);
                }
            }
            v.push(row);
        }
        v
    }
}

=======

        let mut rows = vec![vec![1]];
        for i in 1..num_rows {
            let mut row = vec![1];
            for j in 0..i-1 {
                row.push(rows[i as usize - 1][j as usize] + rows[i as usize - 1][(j+1) as usize]);
            }
            row.push(1);
            rows.push(row);
        }
        rows
    }
}
