Synthesizing 10/10 solutions (Duplicates hidden)

=======

        s.split_whitespace().take(k as usize).collect::<Vec<&str>>().join(" ")

=======

        s.split_whitespace().take(k as usize).collect::<Vec<&str>>().join(" ")
    }
}

=======

        let mut res = String::new();
        let mut count = 0;
        for c in s.chars() {
            if c == ' ' {
                count += 1;
                if count == k {
                    break;
                }
            }
            res.push(c);
        }
        return res;

=======

        let mut res = String::new();
        let mut count = 0;
        for c in s.chars() {
            if c == ' ' {
                count += 1;
            }
            if count == k {
                break;
            }
            res.push(c);
        }
        res

=======

        let mut words = s.split_whitespace();
        let mut res = String::new();
        for _ in 0..k {
            res.push_str(words.next().unwrap());
            res.push(' ');
        }
        res.pop();
        res

=======

        let mut result = String::new();
        let mut i = 0;
        for c in s.chars() {
            if c == ' ' {
                i += 1;
                if i == k {
                    break;
                }
            }
            result.push(c);
        }
        result

=======

        let mut count = 0;
        let mut ret = String::new();
        for ch in s.chars() {
            if ch == ' ' {
                count += 1;
                if count == k {
                    break;
                }
            }
            ret.push(ch);
        }
        ret
    }
}

=======

        let mut c = 0;
        let mut r = String::new();
        for i in s.chars() {
            if i == ' ' {
                c += 1;
            }
            if c == k {
                break;
            }
            r.push(i);
        }
        r

=======

        let mut i = 0;
        let mut j = 0;
        for _ in 0..k {
            j = s[i..].find(' ').unwrap_or(s.len() - i) + i;
            i = j + 1;
        }
        s[..j].to_string()
