Synthesizing 10/10 solutions

=======

        let mut seen = [false; 26];
        for c in sentence.chars() {
            seen[(c as u8 - b'a') as usize] = true;
        }
        seen.iter().all(|&x| x)

=======

        let mut arr = [false; 26];
        for c in sentence.chars() {
            arr[(c as u8 - 'a' as u8) as usize] = true;
        }
        for b in arr.iter() {
            if !*b {
                return false;
            }
        }
        true

=======

        let mut chars = sentence.chars().collect::<Vec<char>>();
        chars.sort();
        chars.dedup();
        chars.len() == 26

=======

        let mut chars = [false; 26];
        for c in sentence.chars() {
            chars[(c as u8 - b'a') as usize] = true;
        }
        for i in 0..26 {
            if chars[i] == false {
                return false;
            }
        }
        true

=======

        let mut map = [false; 26];
        for c in sentence.as_bytes() {
            map[(c - b'a') as usize] = true;
        }
        map.iter().all(|&x| x)

=======

        let mut arr = vec![0; 26];
        for c in sentence.chars() {
            arr[(c as u8 - b'a') as usize] += 1;
        }
        for i in 0..26 {
            if arr[i] == 0 {
                return false;
            }
        }
        true

=======

        let mut chars = vec![false; 26];
        for c in sentence.chars() {
            let idx = c as u8 - 'a' as u8;
            chars[idx as usize] = true;
        }
        for c in chars {
            if c == false {
                return false;
            }
        }
        true

=======

        let mut cnt = vec![0; 26];
        for c in sentence.chars() {
            cnt[(c as u8 - b'a') as usize] += 1;
        }
        cnt.iter().all(|c| *c > 0)

=======

        let mut count = 0;
        let mut alphabet = [false; 26];
        for c in sentence.chars() {
            let index = c as usize - 'a' as usize;
            if !alphabet[index] {
                alphabet[index] = true;
                count += 1;
            }
        }
        count == 26

=======

        let mut map = [0; 26];
        for c in sentence.chars() {
            let idx = c as usize - 97;
            map[idx] = 1;
        }
        map.iter().sum::<i32>() == 26
    }
}
