Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut sum = 0;
        for i in 1..=n {
            sum += i;
            if sum == n * (n + 1) / 2 - sum {
                return i;
            }
        }
        -1
    }
}

=======

        let mut sum = 0;
        for i in 1..=n {
            sum += i;
        }
        let mut left = 0;
        for i in 1..=n {
            if left == sum - left - i {
                return i;
            }
            left += i;
        }
        -1

=======

        let mut sum = 0;
        for i in 1..=n {
            sum += i;
        }
        let mut left = 0;
        for i in 1..=n {
            if left == sum - i - left {
                return i;
            }
            left += i;
        }
        -1

=======

        let mut sum = 0;
        for i in 1..n {
            sum += i;
            if sum == (n * (n + 1)) / 2 - sum - i {
                return i;
            }
        }
        -1
    }
}

=======

        let mut total = 0;
        for i in 1..=n {
            total += i;
        }
        let mut sum = 0;
        for i in 1..=n {
            sum += i;
            if sum * 2 == total {
                return i;
            }
        }
        -1
    }
}

=======

        if n == 1 {
            return 1;
        }
        let mut sum = 0;
        for i in 1..=n {
            sum += i;
            if sum == (n * (n + 1)) / 2 - sum + i {
                return i;
            }
        }
        -1

=======

        let mut sum = 0;
        let mut sum2 = 0;
        for i in 1..=n {
            sum += i;
        }
        for i in 1..=n {
            sum2 += i;
            if sum2 == sum - sum2 {
                return i;
            }
        }
        -1

=======

        if n == 1 {
            return 1;
        }
        let mut sum = 0;
        for i in 1..=n {
            sum += i;
            if sum == (n * (n + 1) / 2 - sum) {
                return i;
            }
        }
        -1

=======

        let mut i = 1;
        let mut sum = 0;
        while i <= n {
            sum += i;
            i += 1;
        }
        let mut j = n;
        let mut sum2 = 0;
        while j >= 1 {
            sum2 += j;
            j -= 1;
            if sum == sum2 {
                return j;
            }
        }
        return -1;
    }
}
