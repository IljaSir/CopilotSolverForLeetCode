Synthesizing 9/10 solutions

=======

        let (s1, e1) = (event1[0].clone(), event1[1].clone());
        let (s2, e2) = (event2[0].clone(), event2[1].clone());
        let (h1, m1) = (s1[0..2].parse::<u32>().unwrap(), s1[3..5].parse::<u32>().unwrap());
        let (h2, m2) = (s2[0..2].parse::<u32>().unwrap(), s2[3..5].parse::<u32>().unwrap());
        let (h3, m3) = (e1[0..2].parse::<u32>().unwrap(), e1[3..5].parse::<u32>().unwrap());
        let (h4, m4) = (e2[0..2].parse::<u32>().unwrap(), e2[3..5].parse::<u32>().unwrap());
        let t1 = h1 * 60 + m1;
        let t2 = h2 * 60 + m2;
        let t3 = h3 * 60 + m3;
        let t4 = h4 * 60 + m4;
        if t1 > t4 || t3 < t2 {
            false
        } else {
            true
        }
    }
}

=======

        let (start1, end1) = (event1[0].parse::<i32>().unwrap(), event1[1].parse::<i32>().unwrap());
        let (start2, end2) = (event2[0].parse::<i32>().unwrap(), event2[1].parse::<i32>().unwrap());
        if start2 < end1 && end2 > start1 {
            return true;
        }
        false
    }
}

=======

        let (start1, end1) = (event1[0].parse::<i32>().unwrap(), event1[1].parse::<i32>().unwrap());
        let (start2, end2) = (event2[0].parse::<i32>().unwrap(), event2[1].parse::<i32>().unwrap());
        start1 < end2 && start2 < end1
    }
}

=======

        let (start1, end1) = (event1[0].parse::<u32>().unwrap(), event1[1].parse::<u32>().unwrap());
        let (start2, end2) = (event2[0].parse::<u32>().unwrap(), event2[1].parse::<u32>().unwrap());
        if start1 >= start2 && start1 < end2 {
            return true;
        }
        if start2 >= start1 && start2 < end1 {
            return true;
        }
        false
    }
}

=======

        let time1 = event1[0].split(":").collect::<Vec<&str>>();
        let time2 = event1[1].split(":").collect::<Vec<&str>>();
        let time3 = event2[0].split(":").collect::<Vec<&str>>();
        let time4 = event2[1].split(":").collect::<Vec<&str>>();
        let start1 = time1[0].parse::<i32>().unwrap() * 60 + time1[1].parse::<i32>().unwrap();
        let end1 = time2[0].parse::<i32>().unwrap() * 60 + time2[1].parse::<i32>().unwrap();
        let start2 = time3[0].parse::<i32>().unwrap() * 60 + time3[1].parse::<i32>().unwrap();
        let end2 = time4[0].parse::<i32>().unwrap() * 60 + time4[1].parse::<i32>().unwrap();
        if start1 < start2 {
            end1 > start2
        } else {
            end2 > start1
        }
    }
}

=======

        let (a, b) = (event1[0].clone(), event1[1].clone());
        let (c, d) = (event2[0].clone(), event2[1].clone());
        let (a, b) = (a.as_bytes(), b.as_bytes());
        let (c, d) = (c.as_bytes(), d.as_bytes());
        let (a, b) = (a[0] * 60 + a[1], b[0] * 60 + b[1]);
        let (c, d) = (c[0] * 60 + c[1], d[0] * 60 + d[1]);
        let (a, b) = (a as i32, b as i32);
        let (c, d) = (c as i32, d as i32);
        if a <= c && c <= b {
            return true;
        }
        if a <= d && d <= b {
            return true;
        }
        if c <= a && a <= d {
            return true;
        }
        if c <= b && b <= d {
            return true;
        }
        false

=======

        let mut v1 = event1[0].split(":").collect::<Vec<&str>>();
        let mut v2 = event2[0].split(":").collect::<Vec<&str>>();
        let a = v1[0].parse::<i32>().unwrap() * 60 + v1[1].parse::<i32>().unwrap();
        let b = v2[0].parse::<i32>().unwrap() * 60 + v2[1].parse::<i32>().unwrap();
        v1 = event1[1].split(":").collect::<Vec<&str>>();
        v2 = event2[1].split(":").collect::<Vec<&str>>();
        let c = v1[0].parse::<i32>().unwrap() * 60 + v1[1].parse::<i32>().unwrap();
        let d = v2[0].parse::<i32>().unwrap() * 60 + v2[1].parse::<i32>().unwrap();
        if a < d && b > c {
            return true;
        }
        false
    }
}

=======

        let mut e1: Vec<i32> = Vec::new();
        let mut e2: Vec<i32> = Vec::new();
        for i in event1 {
            let time: Vec<i32> = i.split(':').map(|x| x.parse::<i32>().unwrap()).collect();
            e1.push(time[0] * 60 + time[1]);
        }
        for i in event2 {
            let time: Vec<i32> = i.split(':').map(|x| x.parse::<i32>().unwrap()).collect();
            e2.push(time[0] * 60 + time[1]);
        }
        if e1[0] <= e2[0] && e1[1] >= e2[0] {
            return true;
        } else if e1[0] <= e2[1] && e1[1] >= e2[1] {
            return true;
        } else if e1[0] >= e2[0] && e1[1] <= e2[1] {
            return true;
        } else if e1[0] <= e2[0] && e1[1] >= e2[1] {
            return true;
        }
        false
    }
}

=======

        let mut time1 = vec![0; 24 * 60];
        let mut time2 = vec![0; 24 * 60];
        let mut time1_start = 0;
        let mut time2_start = 0;
        for i in 0..event1.len() {
            let mut time = 0;
            for c in event1[i].chars() {
                if c == ':' {
                    time *= 60;
                } else {
                    time = time * 10 + (c as u8 - '0' as u8) as i32;
                }
            }
            if i == 0 {
                time1_start = time;
            } else {
                time1[time] = 1;
            }
        }
        for i in 0..event2.len() {
            let mut time = 0;
            for c in event2[i].chars() {
                if c == ':' {
                    time *= 60;
                } else {
                    time = time * 10 + (c as u8 - '0' as u8) as i32;
                }
            }
            if i == 0 {
                time2_start = time;
            } else {
                time2[time] = 1;
            }
        }
        if time1_start < time2_start {
            for i in time1_start..time2_start {
                if time1[i] == 1 {
                    return true;
                }
            }
        } else {
            for i in time2_start..time1_start {
                if time2[i] == 1 {
                    return true;
                }
            }
        }
        false
