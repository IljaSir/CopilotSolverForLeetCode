Synthesizing 10/10 solutions

=======

        if needle.is_empty() {
            return 0;
        }
        if haystack.len() < needle.len() {
            return -1;
        }
        let haystack = haystack.as_bytes();
        let needle = needle.as_bytes();
        let mut i = 0;
        while i < haystack.len() {
            let mut j = 0;
            while j < needle.len() && i + j < haystack.len() {
                if haystack[i + j] != needle[j] {
                    break;
                }
                j += 1;
            }
            if j == needle.len() {
                return i as i32;
            }
            i += 1;
        }
        -1

=======

        if needle.len() == 0 {
            return 0;
        }
        for i in 0..haystack.len() - needle.len() + 1 {
            if &haystack[i..i + needle.len()] == needle {
                return i as i32;
            }
        }
        -1

=======

        if needle.is_empty() {
            return 0;
        }
        let haystack: Vec<char> = haystack.chars().collect();
        let needle: Vec<char> = needle.chars().collect();
        let mut i = 0;
        while i < haystack.len() {
            if haystack[i] == needle[0] {
                let mut j = 0;
                while j < needle.len() && i < haystack.len() {
                    if haystack[i] != needle[j] {
                        break;
                    }
                    i += 1;
                    j += 1;
                }
                if j == needle.len() {
                    return i as i32 - j as i32;
                }
            } else {
                i += 1;
            }
        }
        -1

=======

        haystack.find(&needle).map_or(-1, |x| x as i32)

=======

        if needle == "" {
            return 0;
        }
        if haystack == "" {
            return -1;
        }
        if haystack.len() < needle.len() {
            return -1;
        }
        for i in 0..haystack.len() - needle.len() + 1 {
            if &haystack[i..i + needle.len()] == needle {
                return i as i32;
            }
        }
        return -1;

=======

        if needle.is_empty() {
            return 0;
        }
        if haystack.is_empty() || haystack.len() < needle.len() {
            return -1;
        }
        let haystack = haystack.as_bytes();
        let needle = needle.as_bytes();
        let mut i = 0;
        while i <= haystack.len() - needle.len() {
            if haystack[i] == needle[0] {
                let mut j = 1;
                while j < needle.len() && haystack[i + j] == needle[j] {
                    j += 1;
                }
                if j == needle.len() {
                    return i as i32;
                }
            }
            i += 1;
        }
        -1

=======

        if needle.is_empty() {
            return 0;
        }
        if haystack.len() < needle.len() {
            return -1;
        }
        let h = haystack.as_bytes();
        let n = needle.as_bytes();
        for i in 0..h.len() - n.len() + 1 {
            if h[i] == n[0] {
                let mut j = 1;
                while j < n.len() && h[i+j] == n[j] {
                    j += 1;
                }
                if j == n.len() {
                    return i as i32;
                }
            }
        }
        -1
    }
}

=======

        if needle.len() == 0 { return 0; }
        if haystack.len() < needle.len() { return -1; }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut result = -1;
        let mut found = false;
        while i < haystack.len() {
            if haystack.as_bytes()[i] == needle.as_bytes()[j] {
                if !found {
                    k = i;
                    found = true;
                }
                i += 1;
                j += 1;
                if j == needle.len() {
                    result = k as i32;
                    break;
                }
            } else {
                if found {
                    i = k + 1;
                    j = 0;
                    found = false;
                } else {
                    i += 1;
                }
            }
        }
        result

=======

        if needle.len() == 0 {
            return 0;
        }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut index = -1;
        let haystack = haystack.as_bytes();
        let needle = needle.as_bytes();
        while i < haystack.len() {
            if haystack[i] == needle[j] {
                if index == -1 {
                    index = i as i32;
                }
                j += 1;
                if j == needle.len() {
                    return index;
                }
            } else {
                if index != -1 {
                    i = k;
                    j = 0;
                    index = -1;
                }
                k += 1;
            }
            i += 1;
        }
        return -1;

=======

        if haystack == needle || needle.is_empty() { return 0; }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut result = -1;
        while i < haystack.len() {
            if haystack.chars().nth(i) == needle.chars().nth(j) {
                if j == 0 { k = i; }
                if j == needle.len() - 1 { return k as i32; }
                j += 1;
            } else {
                j = 0;
            }
            i += 1;
        }
        result
