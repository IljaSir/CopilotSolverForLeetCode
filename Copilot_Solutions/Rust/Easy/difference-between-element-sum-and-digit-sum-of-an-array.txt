Synthesizing 10/10 solutions

=======

        let mut element_sum = 0;
        let mut digit_sum = 0;
        for i in 0..nums.len() {
            element_sum += nums[i];
            let mut num = nums[i];
            while num > 0 {
                digit_sum += num % 10;
                num /= 10;
            }
        }
        (element_sum - digit_sum).abs()
    }
}

=======

        let mut element_sum = 0;
        let mut digit_sum = 0;
        for i in nums {
            element_sum += i;
            digit_sum += i.to_string().chars().map(|x| x.to_digit(10).unwrap()).sum::<u32>() as i32;
        }
        return element_sum - digit_sum;
    }
}

=======

        let mut sum = 0;
        let mut digit_sum = 0;
        for num in nums {
            sum += num;
            let mut n = num;
            while n > 0 {
                digit_sum += n % 10;
                n /= 10;
            }
        }
        (sum - digit_sum).abs()
    }
}

=======

        let mut element_sum = 0;
        let mut digit_sum = 0;
        for i in nums {
            element_sum += i;
            let mut num = i;
            while num > 0 {
                digit_sum += num % 10;
                num /= 10;
            }
        }
        (element_sum - digit_sum).abs()
    }
}

=======

        let mut sum = 0;
        let mut digit_sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            let mut num = nums[i];
            while num > 0 {
                digit_sum += num % 10;
                num /= 10;
            }
        }
        (sum - digit_sum).abs()
    }
}

=======

        let mut sum = 0;
        let mut digit_sum = 0;
        for i in nums {
            sum += i;
            digit_sum += i.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>() as i32;
        }
        (sum - digit_sum).abs()
    }
}

=======

        let mut element_sum = 0;
        let mut digit_sum = 0;
        for num in nums {
            let mut n = num;
            element_sum += num;
            while n > 0 {
                digit_sum += n % 10;
                n /= 10;
            }
        }
        (element_sum - digit_sum).abs()

=======

        let mut sum = 0;
        let mut digit_sum = 0;
        for num in nums {
            sum += num;
            digit_sum += num % 10;
            let mut num = num / 10;
            while num > 0 {
                digit_sum += num % 10;
                num = num / 10;
            }
        }
        (sum - digit_sum).abs()
    }
}

=======

        let mut element_sum = 0;
        let mut digit_sum = 0;
        for x in nums {
            element_sum += x;
            digit_sum += x % 10;
            digit_sum += (x / 10) % 10;
            digit_sum += (x / 100) % 10;
            digit_sum += (x / 1000) % 10;
            digit_sum += (x / 10000) % 10;
        }
        element_sum - digit_sum
    }
}

=======

        let mut sum = 0;
        let mut digit_sum = 0;
        for num in nums {
            sum += num;
            digit_sum += num % 10;
            let mut n = num / 10;
            while n > 0 {
                digit_sum += n % 10;
                n /= 10;
            }
        }
        (sum - digit_sum).abs()
