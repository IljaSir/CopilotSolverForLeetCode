Synthesizing 9/10 solutions

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            count[c as usize - '0' as usize] += 1;
        }
        let mut result = String::new();
        for i in (0..10).rev() {
            let mut c = count[i];
            while c > 0 {
                result.push((i as u8 + '0' as u8) as char);
                c -= 1;
            }
        }
        result

=======

        let mut count = vec![0; 10];
        for c in num.chars() {
            let i = (c as u8 - b'0') as usize;
            count[i] += 1;
        }
        let mut res = String::new();
        for i in (0..10).rev() {
            let c = (i as u8 + b'0') as char;
            let mut n = count[i] / 3;
            while n > 0 {
                res.push(c);
                res.push(c);
                res.push(c);
                n -= 1;
            }
        }
        res
    }
}

=======

        let mut count = [0; 10];
        for c in num.chars() {
            count[c as usize - '0' as usize] += 1;
        }
        let mut res = String::new();
        for i in (0..10).rev() {
            if count[i] > 0 {
                res.push_str(&(i.to_string().repeat(count[i].min(3))));
            }
        }
        res
    }
}

=======

        let mut cnt = vec![0; 10];
        for c in num.chars() {
            cnt[(c as u8 - '0' as u8) as usize] += 1;
        }
        let mut res = String::new();
        for i in (1..10).rev() {
            while cnt[i] > 0 {
                res.push((i as u8 + '0' as u8) as char);
                cnt[i] -= 1;
            }
        }
        res

=======

        let mut arr = [0; 10];
        for c in num.chars() {
            arr[c as usize - '0' as usize] += 1;
        }
        let mut res = String::new();
        for i in (0..10).rev() {
            let cnt = arr[i];
            if cnt >= 3 {
                for _ in 0..cnt {
                    res.push((i + '0' as usize) as u8 as char);
                }
                return res;
            }
        }
        res

=======

        let mut count = [0; 10];
        for c in num.as_bytes() {
            count[(c - b'0') as usize] += 1;
        }
        let mut max = 0;
        for i in 1..=9 {
            if count[i] >= 3 {
                max = i;
            }
        }
        if max == 0 {
            return String::new();
        }
        let mut result = String::new();
        for _ in 0..count[max] {
            result.push((max as u8 + b'0') as char);
        }
        result

=======

        let mut arr = [0; 10];
        for c in num.chars() {
            arr[c as usize - 48] += 1;
        }
        let mut i = 9;
        while i > 0 && arr[i] == 0 {
            i -= 1;
        }
        if i == 0 {
            return "".to_string();
        }
        if arr[i] <= 3 {
            return "0".repeat(arr[i]);
        }
        let mut ret = String::new();
        let mut j = 0;
        while j < 3 {
            ret.push((i + 48) as u8 as char);
            j += 1;
        }
        arr[i] -= 3;
        i = 0;
        while i < 10 {
            ret.push_str(&"0".repeat(arr[i]));
            i += 1;
        }
        return ret;

=======

        let mut count = [0; 10];
        for c in num.chars() {
            let n = c as u8 - b'0';
            count[n as usize] += 1;
        }
        let mut res = String::new();
        for i in (1..=9).rev() {
            while count[i] > 0 {
                res.push((i + b'0') as char);
                count[i] -= 1;
            }
        }
        res

=======

        let mut res = String::from("");
        let mut count = 0;
        let mut pre = ' ';
        for c in num.chars() {
            if c == pre {
                count += 1;
            } else {
                if count >= 3 {
                    let mut s = String::from("");
                    for _ in 0..count {
                        s.push(pre);
                    }
                    res = res.max(s);
                }
                count = 1;
            }
            pre = c;
        }
        if count >= 3 {
            let mut s = String::from("");
            for _ in 0..count {
                s.push(pre);
            }
            res = res.max(s);
        }
        res
    }
}
