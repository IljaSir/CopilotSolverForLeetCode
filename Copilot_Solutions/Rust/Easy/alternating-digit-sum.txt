Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut n = n;
        let mut sum = 0;
        let mut sign = 1;
        while n > 0 {
            sum += sign * (n % 10);
            sign *= -1;
            n /= 10;
        }
        sum

=======

        let mut n = n;
        let mut res = 0;
        let mut sign = 1;
        while n > 0 {
            res += sign * (n % 10);
            n /= 10;
            sign *= -1;
        }
        res
    }
}

=======

        let mut sum = 0;
        let mut sign = 1;
        let mut n = n;
        while n > 0 {
            sum += sign * (n % 10);
            sign *= -1;
            n /= 10;
        }
        sum

=======

        let mut n = n;
        let mut res = 0;
        let mut sign = 1;
        while n > 0 {
            res += sign * (n % 10);
            sign *= -1;
            n /= 10;
        }
        res

=======

        let mut sum = 0;
        let mut n = n;
        let mut sign = true;
        while n > 0 {
            let digit = n % 10;
            if sign {
                sum += digit;
            } else {
                sum -= digit;
            }
            sign = !sign;
            n /= 10;
        }
        sum

=======

        let mut n = n;
        let mut sum = 0;
        let mut sign = 1;
        while n > 0 {
            let d = n % 10;
            sum += sign * d;
            sign *= -1;
            n /= 10;
        }
        sum

=======

        let mut result = 0;
        let mut n = n;
        let mut sign = 1;
        while n > 0 {
            let digit = n % 10;
            result += sign * digit;
            sign *= -1;
            n /= 10;
        }
        result

=======

        let mut s = n.to_string();
        let mut sum = 0;
        let mut sign = 1;
        for c in s.chars() {
            sum += sign * c.to_digit(10).unwrap() as i32;
            sign *= -1;
        }
        sum

=======

        let mut s = n.to_string();
        let mut r = 0;
        let mut sign = 1;
        while let Some(c) = s.pop() {
            r += sign * c.to_digit(10).unwrap() as i32;
            sign = -sign;
        }
        r
