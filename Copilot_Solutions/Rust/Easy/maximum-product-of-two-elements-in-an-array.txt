Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut max1 = 0;
        let mut max2 = 0;
        for i in 0..nums.len() {
            if nums[i] > max1 {
                max2 = max1;
                max1 = nums[i];
            } else if nums[i] > max2 {
                max2 = nums[i];
            }
        }
        (max1 - 1) * (max2 - 1)

=======

        let mut max1 = 0;
        let mut max2 = 0;
        for i in nums {
            if i > max1 {
                max2 = max1;
                max1 = i;
            } else if i > max2 {
                max2 = i;
            }
        }
        (max1 - 1) * (max2 - 1)

=======

        let mut max1 = 0;
        let mut max2 = 0;
        for i in nums {
            if i > max1 {
                max2 = max1;
                max1 = i;
            } else if i > max2 {
                max2 = i;
            }
        }
        (max1 - 1) * (max2 - 1)
    }
}

=======

        let mut max = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let product = (nums[i] - 1) * (nums[j] - 1);
                if product > max {
                    max = product;
                }
            }
        }
        max

=======

        let mut max = 0;
        let mut second = 0;
        for i in 0..nums.len() {
            if nums[i] > max {
                second = max;
                max = nums[i];
            } else if nums[i] > second {
                second = nums[i];
            }
        }
        (max - 1) * (second - 1)

=======

        let mut max = 0;
        let mut max2 = 0;
        for n in nums {
            if n > max {
                max2 = max;
                max = n;
            } else if n > max2 {
                max2 = n;
            }
        }
        (max - 1) * (max2 - 1)

=======

        let mut max = 0;
        let mut second = 0;
        for i in nums {
            if i > max {
                second = max;
                max = i;
            } else if i > second {
                second = i;
            }
        }
        (max - 1) * (second - 1)
