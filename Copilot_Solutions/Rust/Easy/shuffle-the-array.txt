Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        for i in 0..n {
            result.push(nums[i as usize]);
            result.push(nums[(i + n) as usize]);
        }
        result

=======

        let mut res = Vec::new();
        for i in 0..n {
            res.push(nums[i as usize]);
            res.push(nums[(i + n) as usize]);
        }
        res

=======

        let n = n as usize;
        let mut res = Vec::new();
        for i in 0..n {
            res.push(nums[i]);
            res.push(nums[i + n]);
        }
        res

=======

        let mut res = vec![];
        for i in 0..n {
            res.push(nums[i as usize]);
            res.push(nums[(i + n) as usize]);
        }
        res

=======

        let n = n as usize;
        let mut ret = Vec::new();
        for i in 0..n {
            ret.push(nums[i]);
            ret.push(nums[i + n]);
        }
        ret

=======

        let mut result = vec![];
        let n = n as usize;
        for i in 0..n {
            result.push(nums[i]);
            result.push(nums[n + i]);
        }
        result

=======

        let mut ans = Vec::new();
        for i in 0..n as usize {
            ans.push(nums[i]);
            ans.push(nums[i + n as usize]);
        }
        ans

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..n as usize {
            result.push(nums[i]);
            result.push(nums[i+n as usize]);
        }
        result

=======

        let mut res = Vec::new();
        let mut i = 0;
        let mut j = n as usize;
        while i < n as usize {
            res.push(nums[i]);
            res.push(nums[j]);
            i += 1;
            j += 1;
        }
        res

=======

        let mut out = Vec::new();
        let mut i = 0;
        let mut j = n as usize;
        while i < n as usize {
            out.push(nums[i]);
            out.push(nums[j]);
            i += 1;
            j += 1;
        }
        out
