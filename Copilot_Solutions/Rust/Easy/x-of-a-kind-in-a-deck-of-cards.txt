Synthesizing 10/10 solutions

=======

        let mut count: Vec<i32> = vec![0; 10000];
        for i in 0..deck.len() {
            count[deck[i] as usize] += 1;
        }
        let mut g = 0;
        for i in 0..10000 {
            if count[i] > 0 {
                g = gcd(g, count[i]);
            }
        }
        g > 1
    }
}

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in deck {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = map.values().collect::<Vec<&i32>>();
        v.sort();
        let mut i = 0;
        let mut j = 1;
        while j < v.len() {
            if v[i] != v[j] {
                return false;
            }
            i += 1;
            j += 1;
        }
        true

=======

        let mut map = std::collections::HashMap::new();
        for i in deck {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = map.values().collect::<Vec<_>>();
        v.sort();
        for i in 2..=v[0] {
            if v.iter().all(|x| x % i == 0) {
                return true;
            }
        }
        false
    }
}

=======

        let mut counts = [0; 10000];
        for &d in deck.iter() {
            counts[d as usize] += 1;
        }
        let mut x = 0;
        for &c in counts.iter() {
            if c > 0 {
                x = gcd(x, c);
                if x == 1 {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for &n in deck.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut gcd = 0;
        for (_, v) in map {
            gcd = std::cmp::gcd(gcd, v);
        }
        gcd > 1
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for n in deck {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut gcd = 0;
        for v in map.values() {
            gcd = gcd::gcd(gcd, *v);
        }
        gcd >= 2
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in deck {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = map.values().map(|x| *x).collect::<Vec<_>>();
        v.sort();
        let mut i = 2;
        while i <= v[0] {
            let mut j = 0;
            while j < v.len() {
                if v[j] % i != 0 {
                    break;
                }
                j += 1;
            }
            if j == v.len() {
                return true;
            }
            i += 1;
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for &n in &deck {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut x = 0;
        for &v in map.values() {
            x = gcd(x, v);
        }
        x >= 2
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in deck {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut min = 10000;
        for (_, v) in map {
            if v < min {
                min = v;
            }
        }
        if min == 1 {
            return false;
        }
        for i in 2..min + 1 {
            let mut flag = true;
            for (_, v) in &map {
                if v % i != 0 {
                    flag = false;
                    break;
                }
            }
            if flag {
                return true;
            }
        }
        false
    }
}

=======

        let mut deck = deck;
        deck.sort();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        let mut pre = deck[0];
        let mut flag = false;
        while j < deck.len() {
            if deck[j] == pre {
                count += 1;
                j += 1;
            } else {
                if count == 1 {
                    return false;
                }
                if !flag {
                    i = count;
                    flag = true;
                } else {
                    i = gcd(i, count);
                    if i == 1 {
                        return false;
                    }
                }
                count = 1;
                pre = deck[j];
                j += 1;
            }
        }
        if count == 1 {
            return false;
        }
        if !flag {
            i = count;
            flag = true;
        } else {
            i = gcd(i, count);
            if i == 1 {
                return false;
            }
        }
        return true;
    }
}
