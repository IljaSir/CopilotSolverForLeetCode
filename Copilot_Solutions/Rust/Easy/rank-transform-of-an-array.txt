Synthesizing 10/10 solutions

=======

        let mut arr = arr;
        let mut map = std::collections::BTreeMap::new();
        for i in 0..arr.len() {
            map.entry(arr[i]).or_insert_with(Vec::new).push(i);
        }
        let mut rank = 1;
        for (_, mut v) in map {
            v.sort();
            for i in v {
                arr[i] = rank;
            }
            rank += 1;
        }
        arr
    }
}

=======

        let mut res = vec![0; arr.len()];
        let mut sorted = arr.clone();
        sorted.sort();
        let mut map = std::collections::HashMap::new();
        let mut rank = 1;
        for i in 0..sorted.len() {
            if !map.contains_key(&sorted[i]) {
                map.insert(sorted[i], rank);
                rank += 1;
            }
        }
        for i in 0..arr.len() {
            res[i] = map[&arr[i]];
        }
        res

=======

        let mut arr = arr;
        let mut sorted_arr = arr.clone();
        sorted_arr.sort();
        let mut rank = 1;
        let mut rank_map = std::collections::HashMap::new();
        for i in 0..sorted_arr.len() {
            if !rank_map.contains_key(&sorted_arr[i]) {
                rank_map.insert(sorted_arr[i], rank);
                rank += 1;
            }
        }

        for i in 0..arr.len() {
            arr[i] = rank_map[&arr[i]];
        }
        arr
    }
}

=======

        let mut arr = arr;
        let mut arr2 = arr.clone();
        arr.sort_unstable();
        arr2.sort_unstable();
        arr2.dedup();
        for i in 0..arr.len() {
            arr[i] = arr2.binary_search(&arr[i]).unwrap() as i32 + 1;
        }
        arr
    }
}

=======

        let mut sorted = arr.clone();
        sorted.sort_unstable();
        let mut rank = 1;
        let mut ranks = HashMap::new();
        for i in 0..arr.len() {
            if !ranks.contains_key(&sorted[i]) {
                ranks.insert(sorted[i], rank);
                rank += 1;
            }
        }
        arr.iter().map(|x| *ranks.get(x).unwrap()).collect()
    }
}

=======

        let mut arr = arr;
        arr.sort_unstable();
        let mut rank = 1;
        let mut last = arr[0];
        let mut map = HashMap::new();
        for i in 0..arr.len() {
            if arr[i] != last {
                last = arr[i];
                rank += 1;
            }
            map.entry(arr[i]).or_insert(rank);
        }
        arr.iter().map(|x| *map.get(x).unwrap() as i32).collect()
    }
}

=======

        let mut result = vec![];
        let mut arr = arr;
        arr.sort();
        let mut map = std::collections::HashMap::new();
        let mut rank = 1;
        for i in 0..arr.len() {
            if !map.contains_key(&arr[i]) {
                map.insert(arr[i], rank);
                rank += 1;
            }
        }
        for i in 0..arr.len() {
            result.push(map[&arr[i]]);
        }
        result

=======

        let mut sorted: Vec<i32> = arr.clone();
        sorted.sort_unstable();
        let mut ranks: Vec<i32> = vec![];
        let mut rank = 1;
        for i in 0..sorted.len() {
            if i == 0 || sorted[i] != sorted[i - 1] {
                ranks.push(rank);
                rank += 1;
            } else {
                ranks.push(ranks[ranks.len() - 1]);
            }
        }
        arr.iter()
            .map(|&x| {
                let index = sorted.binary_search(&x).unwrap();
                ranks[index]
            })
            .collect()

=======

        let mut arr = arr;
        arr.sort();
        let mut map = std::collections::HashMap::new();
        let mut r = 1;
        for n in arr.iter() {
            if !map.contains_key(n) {
                map.insert(n, r);
                r += 1;
            }
        }
        arr.iter().map(|n| map[n]).collect()

=======

        let mut arr = arr;
        let mut rank = vec![0; 100001];
        for i in 0..arr.len() {
            rank[arr[i] as usize] = i as i32 + 1;
        }
        let mut j = 0;
        for i in 1..rank.len() {
            if rank[i] != 0 {
                rank[i] = j + 1;
                j += 1;
            }
        }
        for i in 0..arr.len() {
            arr[i] = rank[arr[i] as usize];
        }
        arr
