Synthesizing 10/10 solutions

=======

        let mut count = [0; 26];
        for c in magazine.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        for c in ransom_note.chars() {
            count[c as usize - 'a' as usize] -= 1;
            if count[c as usize - 'a' as usize] < 0 {
                return false;
            }
        }
        true

=======

        let mut map = vec![0; 26];
        for c in magazine.chars() {
            map[c as usize - 'a' as usize] += 1;
        }
        for c in ransom_note.chars() {
            map[c as usize - 'a' as usize] -= 1;
            if map[c as usize - 'a' as usize] < 0 {
                return false;
            }
        }
        true

=======

        let mut map: Vec<i32> = vec![0; 26];
        for c in magazine.chars() {
            map[c as usize - 'a' as usize] += 1;
        }
        for c in ransom_note.chars() {
            map[c as usize - 'a' as usize] -= 1;
            if map[c as usize - 'a' as usize] < 0 {
                return false;
            }
        }
        true

=======

        let mut ransom_note: Vec<char> = ransom_note.chars().collect();
        let mut magazine: Vec<char> = magazine.chars().collect();
        ransom_note.sort();
        magazine.sort();
        let mut i = 0;
        let mut j = 0;
        while i < ransom_note.len() && j < magazine.len() {
            if ransom_note[i] == magazine[j] {
                i += 1;
                j += 1;
            } else if ransom_note[i] < magazine[j] {
                return false;
            } else {
                j += 1;
            }
        }
        i == ransom_note.len()

=======

        let mut ransom_note = ransom_note.into_bytes();
        let mut magazine = magazine.into_bytes();
        ransom_note.sort();
        magazine.sort();
        let mut i = 0;
        let mut j = 0;
        while i < ransom_note.len() && j < magazine.len() {
            if ransom_note[i] == magazine[j] {
                i += 1;
                j += 1;
            } else {
                j += 1;
            }
        }
        i == ransom_note.len()

=======

        let mut ransom_note = ransom_note.into_bytes();
        let mut magazine = magazine.into_bytes();
        ransom_note.sort_unstable();
        magazine.sort_unstable();
        let mut i = 0;
        let mut j = 0;
        while i < ransom_note.len() && j < magazine.len() {
            if ransom_note[i] == magazine[j] {
                i += 1;
                j += 1;
            } else if ransom_note[i] < magazine[j] {
                return false;
            } else {
                j += 1;
            }
        }
        i == ransom_note.len()

=======

        let mut magazine = magazine.chars().collect::<Vec<_>>();
        for c in ransom_note.chars() {
            if let Some(i) = magazine.iter().position(|&x| x == c) {
                magazine.remove(i);
            } else {
                return false;
            }
        }
        true
    }
}

=======

        let mut map = vec![0; 26];
        for c in magazine.chars() {
            let idx = c as usize - 'a' as usize;
            map[idx] += 1;
        }
        for c in ransom_note.chars() {
            let idx = c as usize - 'a' as usize;
            map[idx] -= 1;
            if map[idx] < 0 {
                return false;
            }
        }
        true

=======

        let mut char_count = [0; 26];
        for c in magazine.chars() {
            char_count[c as usize - 97] += 1;
        }
        for c in ransom_note.chars() {
            if char_count[c as usize - 97] == 0 {
                return false;
            }
            char_count[c as usize - 97] -= 1;
        }
        true

=======

        let mut mag = magazine.chars().collect::<Vec<char>>();
        for c in ransom_note.chars() {
            match mag.iter().position(|&x| x == c) {
                Some(i) => { mag.remove(i); },
                None => { return false; },
            }
        }
        true
    }
}
