Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut i = 1;
        while i % 2 != 0 || i % n != 0 {
            i += 1;
        }
        i

=======

        let mut i = n;
        while i % 2 != 0 {
            i += n;
        }
        i

=======

        let mut res = n;
        while res % 2 != 0 {
            res += n;
        }
        res

=======

        let mut n = n;
        while n % 2 != 0 {
            n += 1;
        }
        n

=======

        let mut i = 2;
        loop {
            if i % n == 0 {
                return i;
            }
            i += 2;
        }

=======

        let mut i = 1;
        while i % n != 0 {
            i += 1;
        }
        i * 2

=======

        let mut n = n;
        if n % 2 != 0 {
            n *= 2;
        }
        n

=======

        let mut a = 1;
        for i in 1..=n {
            a = (a * i) / gcd(a, i);
        }
        a
    }
}
