Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if num == 0 {
            return 0;
        }
        if num % 9 == 0 {
            return 9;
        }
        num % 9

=======

        let mut num = num;
        while num > 9 {
            let mut sum = 0;
            while num > 0 {
                sum += num % 10;
                num /= 10;
            }
            num = sum;
        }
        num

=======

        if num == 0 {
            return 0;
        }
        let n = num % 9;
        if n == 0 {
            return 9;
        }
        n

=======

        if num == 0 {
            return 0;
        }
        let x = num % 9;
        if x == 0 {
            return 9;
        }
        x

=======

        let mut num = num;
        while num >= 10 {
            num = num / 10 + num % 10;
        }
        num

=======

        let mut num = num;
        while num >= 10 {
            num = num % 10 + num / 10;
        }
        num

=======

        if num <= 9 {
            return num;
        }
        let mut sum = 0;
        let mut num = num;
        while num > 0 {
            sum += num % 10;
            num /= 10;
        }
        if sum <= 9 {
            return sum;
        }
        return Solution::add_digits(sum);

=======

        if num == 0 {
            return 0;
        }
        let mut n = num;
        while n >= 10 {
            n = n / 10 + n % 10;
        }
        n

=======

        if num == 0 {
            return 0;
        }
        let mut n = num;
        while n >= 10 {
            let mut sum = 0;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            n = sum;
        }
        return n;
