Synthesizing 10/10 solutions

=======

        let mut min = salary[0];
        let mut max = salary[0];
        let mut sum = salary[0];
        for i in 1..salary.len() {
            if salary[i] < min {
                min = salary[i];
            }
            if salary[i] > max {
                max = salary[i];
            }
            sum += salary[i];
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let mut sum = 0;
        let mut min = salary[0];
        let mut max = salary[0];
        for i in 0..salary.len() {
            sum += salary[i];
            if salary[i] < min {
                min = salary[i];
            }
            if salary[i] > max {
                max = salary[i];
            }
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let mut max = salary[0];
        let mut min = salary[0];
        let mut sum = salary[0];
        for i in 1..salary.len() {
            if salary[i] > max {
                max = salary[i];
            }
            if salary[i] < min {
                min = salary[i];
            }
            sum += salary[i];
        }
        (sum - max - min) as f64 / (salary.len() - 2) as f64

=======

        let mut sum = 0;
        let mut max = salary[0];
        let mut min = salary[0];
        for i in salary {
            sum += i;
            if i > max {
                max = i;
            }
            if i < min {
                min = i;
            }
        }
        (sum - max - min) as f64 / (salary.len() - 2) as f64

=======

        let mut salary = salary;
        salary.sort();
        let mut sum = 0;
        for i in 1..salary.len()-1 {
            sum += salary[i];
        }
        sum as f64 / (salary.len() - 2) as f64

=======

        let mut sum: i32 = 0;
        let mut min: i32 = salary[0];
        let mut max: i32 = salary[0];
        for i in 0..salary.len() {
            sum += salary[i];
            if salary[i] < min {
                min = salary[i];
            }
            if salary[i] > max {
                max = salary[i];
            }
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let mut sum = 0;
        let mut min = salary[0];
        let mut max = salary[0];
        for i in &salary {
            sum += i;
            if *i < min {
                min = *i;
            }
            if *i > max {
                max = *i;
            }
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let (mut min, mut max, mut sum) = (salary[0], salary[0], 0);
        for s in salary {
            if s < min {
                min = s;
            }
            if s > max {
                max = s;
            }
            sum += s;
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let mut min = salary[0];
        let mut max = salary[0];
        let mut sum = 0;
        for &s in salary.iter() {
            if s < min {
                min = s;
            }
            if s > max {
                max = s;
            }
            sum += s;
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64

=======

        let mut sum: i32 = 0;
        let mut min = i32::MAX;
        let mut max = i32::MIN;
        for s in salary {
            sum += s;
            if s < min {
                min = s;
            }
            if s > max {
                max = s;
            }
        }
        (sum - min - max) as f64 / (salary.len() - 2) as f64
