Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut ans = 0;
        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if grid[i][j] > 0 {
                    ans += grid[i][j] * 4 + 2;
                }
                if i > 0 {
                    ans -= (grid[i][j].min(grid[i - 1][j])) * 2;
                }
                if j > 0 {
                    ans -= (grid[i][j].min(grid[i][j - 1])) * 2;
                }
            }
        }
        ans
    }
}

=======

        let mut result = 0;
        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if grid[i][j] > 0 {
                    result += 2;
                    result += 4 * grid[i][j];
                    if i > 0 {
                        result -= 2 * grid[i-1][j].min(grid[i][j]);
                    }
                    if j > 0 {
                        result -= 2 * grid[i][j-1].min(grid[i][j]);
                    }
                }
            }
        }
        result

=======

        let mut sum = 0;
        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if grid[i][j] > 0 {
                    sum += 2 + 4 * grid[i][j];
                    if i > 0 {
                        sum -= 2 * grid[i][j].min(grid[i - 1][j]);
                    }
                    if j > 0 {
                        sum -= 2 * grid[i][j].min(grid[i][j - 1]);
                    }
                }
            }
        }
        sum

=======

        let mut area = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    area += 2 + 4 * grid[i][j];
                }
                if i > 0 {
                    area -= 2 * std::cmp::min(grid[i][j], grid[i - 1][j]);
                }
                if j > 0 {
                    area -= 2 * std::cmp::min(grid[i][j], grid[i][j - 1]);
                }
            }
        }
        area
    }
}

=======

        let mut result = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] > 0 {
                    result += 2;
                    result += if i == 0 { grid[i][j] } else { grid[i][j] - grid[i - 1][j] }.max(0);
                    result += if i == grid.len() - 1 { grid[i][j] } else { grid[i][j] - grid[i + 1][j] }.max(0);
                    result += if j == 0 { grid[i][j] } else { grid[i][j] - grid[i][j - 1] }.max(0);
                    result += if j == grid[i].len() - 1 { grid[i][j] } else { grid[i][j] - grid[i][j + 1] }.max(0);
                }
            }
        }
        result
    }
}

=======

        let mut area = 0;
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                if grid[i][j] > 0 {
                    area += grid[i][j] * 4 + 2;
                }
                if i > 0 {
                    area -= std::cmp::min(grid[i][j], grid[i - 1][j]) * 2;
                }
                if j > 0 {
                    area -= std::cmp::min(grid[i][j], grid[i][j - 1]) * 2;
                }
            }
        }
        area
    }
}

=======

        
    }
}
