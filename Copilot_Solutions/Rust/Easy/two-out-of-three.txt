Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        let mut nums3 = nums3;
        nums1.sort();
        nums1.dedup();
        nums2.sort();
        nums2.dedup();
        nums3.sort();
        nums3.dedup();
        let mut res = vec![];
        for i in 0..nums1.len() {
            if nums2.contains(&nums1[i]) || nums3.contains(&nums1[i]) {
                res.push(nums1[i]);
            }
        }
        for i in 0..nums2.len() {
            if nums1.contains(&nums2[i]) || nums3.contains(&nums2[i]) {
                res.push(nums2[i]);
            }
        }
        for i in 0..nums3.len() {
            if nums1.contains(&nums3[i]) || nums2.contains(&nums3[i]) {
                res.push(nums3[i]);
            }
        }
        res.sort();
        res.dedup();
        res

=======

        let mut set1 = std::collections::HashSet::new();
        let mut set2 = std::collections::HashSet::new();
        let mut set3 = std::collections::HashSet::new();
        
        for n in nums1 {
            set1.insert(n);
        }
        for n in nums2 {
            set2.insert(n);
        }
        for n in nums3 {
            set3.insert(n);
        }
        
        let mut result = std::collections::HashSet::new();
        for n in set1 {
            if set2.contains(&n) || set3.contains(&n) {
                result.insert(n);
            }
        }
        for n in set2 {
            if set3.contains(&n) {
                result.insert(n);
            }
        }
        result.into_iter().collect()
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        let mut v1: Vec<i32> = Vec::new();
        let mut v2: Vec<i32> = Vec::new();
        let mut v3: Vec<i32> = Vec::new();
        for i in nums1.iter() {
            if !v1.contains(i) {
                v1.push(*i);
            }
        }
        for i in nums2.iter() {
            if !v2.contains(i) {
                v2.push(*i);
            }
        }
        for i in nums3.iter() {
            if !v3.contains(i) {
                v3.push(*i);
            }
        }
        for i in v1.iter() {
            if v2.contains(i) || v3.contains(i) {
                if !result.contains(i) {
                    result.push(*i);
                }
            }
        }
        for i in v2.iter() {
            if v1.contains(i) || v3.contains(i) {
                if !result.contains(i) {
                    result.push(*i);
                }
            }
        }
        for i in v3.iter() {
            if v1.contains(i) || v2.contains(i) {
                if !result.contains(i) {
                    result.push(*i);
                }
            }
        }
        result

=======

        let mut set: std::collections::HashSet<i32> = std::collections::HashSet::new();
        for x in nums1.iter() {
            set.insert(*x);
        }
        for x in nums2.iter() {
            set.insert(*x);
        }
        for x in nums3.iter() {
            set.insert(*x);
        }
        let mut result = Vec::new();
        for x in set.iter() {
            if nums1.contains(x) && nums2.contains(x) {
                result.push(*x);
            } else if nums1.contains(x) && nums3.contains(x) {
                result.push(*x);
            } else if nums2.contains(x) && nums3.contains(x) {
                result.push(*x);
            }
        }
        result
    }
}

=======

        
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for num in nums1 {
            map.insert(num, map.get(&num).unwrap_or(&0) + 1);
        }
        for num in nums2 {
            map.insert(num, map.get(&num).unwrap_or(&0) + 1);
        }
        for num in nums3 {
            map.insert(num, map.get(&num).unwrap_or(&0) + 1);
        }
        for (k, v) in map {
            if v >= 2 {
                result.push(k);
            }
        }
        result

=======

        let mut res = Vec::new();
        let mut map = std::collections::HashMap::new();
        for i in nums1 {
            if !map.contains_key(&i) {
                map.insert(i, 1);
            }
        }
        for i in nums2 {
            if map.contains_key(&i) {
                map.insert(i, 2);
            } else {
                map.insert(i, 1);
            }
        }
        for i in nums3 {
            if map.contains_key(&i) {
                map.insert(i, 2);
            } else {
                map.insert(i, 1);
            }
        }
        for (k, v) in map {
            if v == 2 {
                res.push(k);
            }
        }
        res
    }
}

=======

        let mut v: Vec<i32> = Vec::new();
        let mut m: Vec<i32> = Vec::new();
        for i in 0..nums1.len() {
            if !m.contains(&nums1[i]) {
                m.push(nums1[i]);
            }
        }
        for i in 0..nums2.len() {
            if !m.contains(&nums2[i]) {
                m.push(nums2[i]);
            }
        }
        for i in 0..nums3.len() {
            if !m.contains(&nums3[i]) {
                m.push(nums3[i]);
            }
        }
        for i in 0..m.len() {
            if nums1.contains(&m[i]) && nums2.contains(&m[i]) {
                v.push(m[i]);
            } else if nums1.contains(&m[i]) && nums3.contains(&m[i]) {
                v.push(m[i]);
            } else if nums2.contains(&m[i]) && nums3.contains(&m[i]) {
                v.push(m[i]);
            }
        }
        v
    }
}

=======

        let mut all = nums1;
        all.extend(nums2);
        all.extend(nums3);
        let mut cnt = [0; 101];
        for i in all {
            cnt[i as usize] += 1;
        }
        let mut res = Vec::new();
        for i in 1..101 {
            if cnt[i] > 1 {
                res.push(i);
            }
        }
        res
