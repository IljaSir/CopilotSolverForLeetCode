Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                i += 1;
                continue;
            }
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            count += 1;
            i = j;
        }
        count
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                i += 1;
                continue;
            }
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            ans += j - i;
            i = j;
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[i] == nums[j] {
                j += 1;
            }
            if j < nums.len() {
                count += j - i;
            }
            i = j;
        }
        count

=======

        let mut nums = nums;
        let mut count = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                i += 1;
                continue;
            }
            let mut min = nums[i];
            for j in i..nums.len() {
                if nums[j] < min && nums[j] != 0 {
                    min = nums[j];
                }
            }
            for j in i..nums.len() {
                if nums[j] != 0 {
                    nums[j] -= min;
                }
            }
            count += 1;
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut res = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            res += j - i;
            i = j;
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            ans += nums[i];
            i = j;
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut cur = 0;
        for i in 0..nums.len() {
            if nums[i] > cur {
                res += nums[i] - cur;
                cur = nums[i];
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut last = 0;
        for i in 0..nums.len() {
            if nums[i] != 0 && nums[i] != last {
                count += 1;
                last = nums[i];
            }
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut n = nums.len();
        let mut i = 0;
        while i < n {
            let mut j = i;
            while j < n && nums[j] == nums[i] {
                j += 1;
            }
            let x = nums[i];
            let k = j - i;
            if x > 0 {
                count += 1;
            }
            i = j;
            n -= k;
        }
        count

=======

        let mut num = nums;
        let mut count = 0;
        while num.iter().any(|&x| x > 0) {
            let mut min = 101;
            for i in num.iter() {
                if *i > 0 && *i < min {
                    min = *i;
                }
            }
            for i in 0..num.len() {
                if num[i] > 0 {
                    num[i] -= min;
                }
            }
            count += 1;
        }
        count
