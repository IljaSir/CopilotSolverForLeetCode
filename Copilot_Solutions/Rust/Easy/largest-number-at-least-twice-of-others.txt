Synthesizing 10/10 solutions

=======

        let mut max = 0;
        let mut max_index = 0;
        for i in 0..nums.len() {
            if nums[i] > max {
                max = nums[i];
                max_index = i;
            }
        }
        for i in 0..nums.len() {
            if i != max_index && max < 2 * nums[i] {
                return -1;
            }
        }
        return max_index as i32;

=======

        let mut max = 0;
        let mut idx = 0;
        for i in 0..nums.len() {
            if nums[i] > max {
                max = nums[i];
                idx = i;
            }
        }
        for i in 0..nums.len() {
            if i != idx && max < 2 * nums[i] {
                return -1;
            }
        }
        idx as i32
    }
}

=======

        let mut max = -1;
        let mut max_index = -1;
        for i in 0..nums.len() {
            if nums[i] > max {
                max = nums[i];
                max_index = i as i32;
            }
        }
        for i in 0..nums.len() {
            if i as i32 != max_index && max < 2 * nums[i] {
                return -1;
            }
        }
        max_index

=======

        let mut max = 0;
        let mut max_index = 0;
        for (i, n) in nums.iter().enumerate() {
            if *n > max {
                max = *n;
                max_index = i;
            }
        }
        for (i, n) in nums.iter().enumerate() {
            if i != max_index && *n * 2 > max {
                return -1;
            }
        }
        return max_index as i32;
    }
}

=======

        let mut max = 0;
        let mut max_index = 0;
        for (i, n) in nums.iter().enumerate() {
            if *n > max {
                max = *n;
                max_index = i;
            }
        }
        let mut twice = 0;
        for n in nums {
            if n != max && n * 2 > max {
                return -1;
            }
            if n * 2 > twice {
                twice = n * 2;
            }
        }
        max_index as i32

=======

        let mut max = 0;
        let mut max_idx = 0;
        for (idx, num) in nums.iter().enumerate() {
            if *num > max {
                max = *num;
                max_idx = idx;
            }
        }
        for num in nums.iter() {
            if *num != max && *num * 2 > max {
                return -1;
            }
        }
        return max_idx as i32;

=======

        let mut max = -1;
        let mut max_index = -1;
        for (i, v) in nums.iter().enumerate() {
            if *v > max {
                max = *v;
                max_index = i as i32;
            }
        }
        for v in nums.iter() {
            if *v != max && *v * 2 > max {
                return -1;
            }
        }
        max_index
    }
}

=======

        let mut largest = 0;
        let mut largest_index = -1;
        for (i, num) in nums.iter().enumerate() {
            if *num > largest {
                largest = *num;
                largest_index = i as i32;
            }
        }
        for num in nums.iter() {
            if *num == largest {
                continue;
            }
            if *num * 2 > largest {
                return -1;
            }
        }
        largest_index

=======

        let mut max = 0;
        let mut max_index = 0;
        let mut second_max = 0;
        for (i, v) in nums.iter().enumerate() {
            if *v > max {
                second_max = max;
                max = *v;
                max_index = i;
            } else if *v > second_max {
                second_max = *v;
            }
        }
        if max >= 2 * second_max {
            max_index as i32
        } else {
            -1
        }
    }
}

=======

        let mut max = -1;
        let mut max_index = -1;
        let mut second_max = -1;
        for (i, n) in nums.iter().enumerate() {
            if *n > max {
                second_max = max;
                max = *n;
                max_index = i as i32;
            } else if *n > second_max {
                second_max = *n;
            }
        }
        if max >= 2 * second_max {
            max_index
        } else {
            -1
        }
    }
}
