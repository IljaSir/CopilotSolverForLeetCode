Synthesizing 10/10 solutions

=======

        let mut last = None;
        for word in sentence.split_whitespace() {
            if let Some(l) = last {
                if l != word.as_bytes()[0] {
                    return false;
                }
            }
            last = Some(word.as_bytes()[word.len() - 1]);
        }
        last == Some(sentence.as_bytes()[0])

=======

        let mut words = sentence.split(" ");
        let first = words.next().unwrap();
        let mut last = first;
        for word in words {
            if word.chars().next().unwrap() != last.chars().last().unwrap() {
                return false;
            }
            last = word;
        }
        first.chars().next().unwrap() == last.chars().last().unwrap()
    }
}

=======

        let mut words = sentence.split(" ");
        let mut prev = words.next().unwrap().chars().last().unwrap();
        for word in words {
            if prev != word.chars().next().unwrap() {
                return false;
            }
            prev = word.chars().last().unwrap();
        }
        true

=======

        let mut chars = sentence.chars();
        let mut prev = chars.next().unwrap();
        for c in chars {
            if c.is_ascii_uppercase() && prev.is_ascii_lowercase() {
                return false;
            }
            if c.is_ascii_lowercase() && prev.is_ascii_uppercase() {
                return false;
            }
            prev = c;
        }
        if sentence.chars().count() > 1 {
            let first = sentence.chars().next().unwrap();
            let last = sentence.chars().last().unwrap();
            if first.is_ascii_uppercase() && last.is_ascii_lowercase() {
                return false;
            }
            if first.is_ascii_lowercase() && last.is_ascii_uppercase() {
                return false;
            }
        }
        true
    }
}

=======

        let mut prev = ' ';
        for c in sentence.chars() {
            if c == ' ' {
                if prev != ' ' {
                    return false;
                }
            } else {
                if prev == ' ' {
                    prev = c;
                } else if prev.to_ascii_lowercase() != c.to_ascii_lowercase() {
                    return false;
                }
            }
        }
        prev != ' '
    }
}

=======

        let mut first = sentence.chars().next().unwrap();
        let mut last = sentence.chars().last().unwrap();
        if first.is_uppercase() {
            first = first.to_lowercase().next().unwrap();
        }
        if last.is_uppercase() {
            last = last.to_lowercase().next().unwrap();
        }
        last == first

=======

        let words: Vec<&str> = sentence.split(' ').collect();
        let mut last = words[words.len() - 1].chars().last().unwrap();
        for word in words {
            if word.chars().next().unwrap() != last {
                return false;
            }
            last = word.chars().last().unwrap();
        }
        true

=======

        let mut words = sentence.split_whitespace();
        let first = words.next().unwrap();
        let last = words.fold(first, |_, x| x);
        last.chars().last().unwrap() == first.chars().next().unwrap()
    }
}

=======

        let mut chars = sentence.chars();
        let mut first = chars.next().unwrap();
        let mut last = first;
        for c in chars {
            if c.is_whitespace() {
                first = chars.next().unwrap();
                continue;
            }
            last = c;
        }
        last.to_ascii_lowercase() == first.to_ascii_lowercase()
    }
}

=======

        let mut sentence = sentence.as_bytes();
        let mut i = 0;
        let mut j = 0;
        let mut n = 0;
        while i < sentence.len() {
            if sentence[i] == b' ' {
                if n == 0 {
                    return false;
                }
                n = 0;
                j = i + 1;
            } else {
                n += 1;
                if n == 1 {
                    if sentence[j] != sentence[i] {
                        return false;
                    }
                }
            }
            i += 1;
        }
        true
    }
}
