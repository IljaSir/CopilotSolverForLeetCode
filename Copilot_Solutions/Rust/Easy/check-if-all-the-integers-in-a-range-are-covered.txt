Synthesizing 10/10 solutions

=======

        for i in left..=right {
            let mut covered = false;
            for j in 0..ranges.len() {
                if i >= ranges[j][0] && i <= ranges[j][1] {
                    covered = true;
                    break;
                }
            }
            if !covered {
                return false;
            }
        }
        true
    }
}

=======

        let mut arr = vec![false; 51];
        for range in ranges {
            for i in range[0]..=range[1] {
                arr[i as usize] = true;
            }
        }
        for i in left..=right {
            if !arr[i as usize] {
                return false;
            }
        }
        true

=======

        let mut a = vec![false; 51];
        for r in ranges {
            for i in r[0]..=r[1] {
                a[i as usize] = true;
            }
        }
        for i in left..=right {
            if !a[i as usize] {
                return false;
            }
        }
        true

=======

        let mut covered = vec![false; (right - left + 1) as usize];
        for range in ranges {
            for i in range[0]..=range[1] {
                if i >= left && i <= right {
                    covered[(i - left) as usize] = true;
                }
            }
        }
        covered.iter().all(|&x| x)

=======

        let mut list = vec![0; 51];
        for r in ranges {
            list[r[0] as usize] += 1;
            list[r[1] as usize + 1] -= 1;
        }
        let mut count = 0;
        for i in 1..=50 {
            count += list[i];
            if i >= left && i <= right && count == 0 {
                return false;
            }
        }
        return true;

=======

        let mut num = 0;
        for i in left..=right {
            for j in 0..ranges.len() {
                if i >= ranges[j][0] && i <= ranges[j][1] {
                    num += 1;
                    break;
                }
            }
        }
        num == (right - left + 1)

=======

        let mut arr: [bool; 50] = [false; 50];
        for range in ranges {
            for i in range[0]..=range[1] {
                arr[i as usize - 1] = true;
            }
        }
        for i in left..=right {
            if !arr[i as usize - 1] {
                return false;
            }
        }
        true
    }
}

=======

        let mut cover = vec![false; 51];
        for r in ranges.iter() {
            for i in r[0]..(r[1]+1) {
                cover[i as usize] = true;
            }
        }
        for i in left..(right+1) {
            if !cover[i as usize] {
                return false;
            }
        }
        true

=======

        let mut covered = vec![false; (right - left + 1) as usize];
        for r in &ranges {
            let mut i = r[0];
            while i <= r[1] {
                if i >= left && i <= right {
                    covered[(i - left) as usize] = true;
                }
                i += 1;
            }
        }
        for c in &covered {
            if !c {
                return false;
            }
        }
        true

=======

        let mut ranges = ranges;
        ranges.sort_by_key(|v| v[0]);
        let mut i = 0;
        let mut j = 0;
        while i <= right as usize && j < ranges.len() {
            if i as i32 < ranges[j][0] {
                if i as i32 < left {
                    i += 1;
                    continue;
                }
                return false;
            }
            if i as i32 >= ranges[j][0] && i as i32 <= ranges[j][1] {
                i += 1;
                continue;
            }
            j += 1;
        }
        true
