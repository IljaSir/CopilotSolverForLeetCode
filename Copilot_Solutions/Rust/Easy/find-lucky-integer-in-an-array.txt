Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut max = -1;
        for (k, v) in map {
            if k == v {
                max = std::cmp::max(max, k);
            }
        }
        max

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut ans = -1;
        for (k, v) in map {
            if k == v {
                ans = std::cmp::max(ans, k);
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for n in arr {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut ans = -1;
        for (k, v) in map {
            if k == v {
                ans = ans.max(k);
            }
        }
        ans
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for a in arr {
            *map.entry(a).or_insert(0) += 1;
        }
        let mut ans = -1;
        for (k, v) in map {
            if k == v {
                ans = std::cmp::max(ans, k);
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for i in &arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut res = -1;
        for (k, v) in map {
            if k == v {
                res = res.max(k);
            }
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut max = -1;
        for (key, value) in map {
            if key == value {
                max = std::cmp::max(max, key);
            }
        }
        max

=======

        let mut map = std::collections::HashMap::new();
        for i in arr.iter() {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut max = -1;
        for (key, value) in map.iter() {
            if *key == value {
                max = std::cmp::max(max, *key);
            }
        }
        max
    }
}

=======

        let mut count = vec![0; 501];
        for &n in arr.iter() {
            count[n as usize] += 1;
        }
        for i in (1..count.len()).rev() {
            if count[i] == i {
                return i as i32;
            }
        }
        -1
    }
}

=======

        let mut lucky = -1;
        let mut count = std::collections::HashMap::new();
        for i in arr {
            *count.entry(i).or_insert(0) += 1;
        }
        for (k, v) in count {
            if k == v {
                lucky = k;
            }
        }
        lucky

=======

        let mut arr = arr;
        arr.sort();
        let mut i = 0;
        let mut max = -1;
        while i < arr.len() {
            let mut j = i;
            while j < arr.len() && arr[i] == arr[j] {
                j += 1;
            }
            if arr[i] == (j - i) as i32 {
                max = arr[i];
            }
            i = j;
        }
        max
    }
}
