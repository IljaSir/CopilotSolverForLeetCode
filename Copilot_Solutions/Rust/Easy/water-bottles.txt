Synthesizing 10/10 solutions

=======

        let mut bottles = num_bottles;
        let mut empty = num_bottles;
        while empty >= num_exchange {
            bottles += empty / num_exchange;
            empty = empty % num_exchange + empty / num_exchange;
        }
        bottles

=======

        let mut bottles = num_bottles;
        let mut empty_bottles = num_bottles;
        while empty_bottles >= num_exchange {
            let new_bottles = empty_bottles / num_exchange;
            bottles += new_bottles;
            empty_bottles = empty_bottles % num_exchange + new_bottles;
        }
        bottles
    }
}

=======

        let mut num_bottles = num_bottles;
        let mut num_exchange = num_exchange;
        let mut result = 0;
        while num_bottles > 0 {
            result += num_bottles;
            let mut empty_bottles = num_bottles;
            num_bottles = 0;
            while empty_bottles >= num_exchange {
                num_bottles += 1;
                empty_bottles -= num_exchange;
            }
        }
        result

=======

        let mut num_bottles = num_bottles;
        let mut num_empty = 0;
        let mut total = 0;
        while num_bottles > 0 {
            total += num_bottles;
            num_empty += num_bottles;
            num_bottles = num_empty / num_exchange;
            num_empty -= num_bottles * num_exchange;
        }
        total

=======

        let mut num_bottles = num_bottles;
        let mut num_exchange = num_exchange;
        let mut result = 0;
        while num_bottles > 0 {
            result += num_bottles;
            num_bottles = (num_bottles + num_exchange - 1) / num_exchange;
            num_exchange = num_bottles + num_exchange;
        }
        result
    }
}

=======

        let mut result = num_bottles;
        let mut empty = num_bottles;
        while empty >= num_exchange {
            let full = empty / num_exchange;
            result += full;
            empty = full + empty % num_exchange;
        }
        result

=======

        let mut count = num_bottles;
        let mut empty = num_bottles;
        while empty >= num_exchange {
            let full = empty / num_exchange;
            empty = empty % num_exchange + full;
            count += full;
        }
        count

=======

        let mut num_bottles = num_bottles;
        let mut num_exchange = num_exchange;
        let mut result = num_bottles;
        while num_bottles >= num_exchange {
            let exchange = num_bottles / num_exchange;
            let remainder = num_bottles % num_exchange;
            result += exchange;
            num_bottles = exchange + remainder;
        }
        result
    }
}

=======

        let mut num_bottles = num_bottles;
        let mut num_empty_bottles = 0;
        let mut total_bottles = 0;
        while num_bottles > 0 {
            num_empty_bottles += num_bottles;
            total_bottles += num_bottles;
            num_bottles = num_empty_bottles / num_exchange;
            num_empty_bottles %= num_exchange;
        }
        total_bottles

=======

        let mut n = num_bottles;
        let mut ans = num_bottles;
        while n >= num_exchange {
            let (a, b) = (n / num_exchange, n % num_exchange);
            ans += a;
            n = a + b;
        }
        ans
