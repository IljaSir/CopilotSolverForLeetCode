Synthesizing 10/10 solutions

=======

        let mut res = String::new();
        let mut chars = s.chars();
        while let Some(c) = chars.next() {
            res.push(c);
            if let Some(n) = chars.next() {
                res.push((c as u8 + n as u8 - '0' as u8) as char);
            }
        }
        res

=======

        let mut result: Vec<char> = Vec::new();
        let mut chars = s.chars();
        while let Some(c) = chars.next() {
            result.push(c);
            if let Some(d) = chars.next() {
                result.push((c as u8 + d as u8 - '0' as u8) as char);
            }
        }
        result.into_iter().collect()

=======

        let mut r = String::new();
        let mut i = 0;
        while i < s.len() {
            r.push(s.chars().nth(i).unwrap());
            if i < s.len() - 1 {
                r.push((s.chars().nth(i).unwrap() as u8 + s.chars().nth(i+1).unwrap() as u8 - '0' as u8) as char);
            }
            i += 2;
        }
        r

=======

        let mut res = String::new();
        let s = s.as_bytes();
        for i in 0..s.len() {
            if s[i].is_ascii_digit() {
                res.push((s[i-1] + s[i] - 48) as char);
            } else {
                res.push(s[i] as char);
            }
        }
        res
    }
}

=======

        let mut ret = String::new();
        let mut chars = s.chars().peekable();
        while let Some(c) = chars.next() {
            ret.push(c);
            if let Some(d) = chars.peek() {
                let d = d.to_digit(10).unwrap() as u8;
                ret.push((c as u8 + d) as char);
                chars.next();
            }
        }
        ret

=======

        let mut res = String::from("");
        let mut chars = s.chars();
        loop {
            match chars.next() {
                None => break,
                Some(c) => {
                    res.push(c);
                    match chars.next() {
                        None => break,
                        Some(d) => {
                            let c = res.pop().unwrap();
                            res.push((c as u8 + d as u8 - '0' as u8) as char);
                        }
                    }
                }
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                res.push(c);
            } else {
                let c = c as u8 - b'0';
                let last = res.chars().last().unwrap();
                res.push((last as u8 + c) as char);
            }
        }
        res
    }
}

=======

        let mut s = s.as_bytes();
        for i in 1..s.len() {
            if i % 2 == 1 {
                s[i] = (s[i - 1] + s[i] - b'0') as u8;
            }
        }
        unsafe { String::from_utf8_unchecked(s.to_vec()) }
    }
}

=======

        let mut result = String::new();
        let mut chars = s.chars();
        match chars.next() {
            Some(c) => result.push(c),
            None => return result,
        };
        for c in chars {
            if c.is_digit(10) {
                let prev = result.chars().last().unwrap();
                result.push((prev as u8 + c.to_digit(10).unwrap() as u8) as char);
            } else {
                result.push(c);
            }
        }
        result
    }
}

=======

        let mut result = String::new();
        let mut chars = s.chars();
        let mut prev = chars.next().unwrap();
        result.push(prev);
        for c in chars {
            if c.is_ascii_digit() {
                let offset = c.to_digit(10).unwrap() as u8;
                let new_char = (prev as u8 + offset) as char;
                result.push(new_char);
                prev = new_char;
            } else {
                result.push(c);
                prev = c;
            }
        }
        result
    }
}
