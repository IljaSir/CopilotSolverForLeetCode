Synthesizing 10/10 solutions (Duplicates hidden)

=======

        rec1[0] < rec2[2] && rec1[2] > rec2[0] && rec1[1] < rec2[3] && rec1[3] > rec2[1]

=======

        let (x1, y1, x2, y2) = (rec1[0], rec1[1], rec1[2], rec1[3]);
        let (x3, y3, x4, y4) = (rec2[0], rec2[1], rec2[2], rec2[3]);
        !(x2 <= x3 || x4 <= x1 || y2 <= y3 || y4 <= y1)

=======

        !(rec1[2] <= rec2[0] || rec1[3] <= rec2[1] || rec1[0] >= rec2[2] || rec1[1] >= rec2[3])
    }
}

=======

        !(rec1[0] >= rec2[2] || rec1[1] >= rec2[3] || rec1[2] <= rec2[0] || rec1[3] <= rec2[1])

=======

        if rec1[0] >= rec2[2] || rec1[1] >= rec2[3] || rec1[2] <= rec2[0] || rec1[3] <= rec2[1] {
            return false;
        }
        true

=======

        if rec1[0] >= rec2[2] || rec1[2] <= rec2[0] || rec1[1] >= rec2[3] || rec1[3] <= rec2[1] {
            return false;
        }
        true

=======

        !(rec1[2] <= rec2[0] || rec1[0] >= rec2[2] || rec1[1] >= rec2[3] || rec1[3] <= rec2[1])

=======

        if rec1[0] >= rec2[2] || rec2[0] >= rec1[2] {
            return false;
        }
        if rec1[1] >= rec2[3] || rec2[1] >= rec1[3] {
            return false;
        }
        return true;
    }
}

=======

        let (mut x1, mut y1, mut x2, mut y2) = (0, 0, 0, 0);
        if rec1[0] < rec2[0] {
            x1 = rec2[0];
        } else {
            x1 = rec1[0];
        }
        if rec1[1] < rec2[1] {
            y1 = rec2[1];
        } else {
            y1 = rec1[1];
        }
        if rec1[2] < rec2[2] {
            x2 = rec1[2];
        } else {
            x2 = rec2[2];
        }
        if rec1[3] < rec2[3] {
            y2 = rec1[3];
        } else {
            y2 = rec2[3];
        }
        x2 > x1 && y2 > y1
