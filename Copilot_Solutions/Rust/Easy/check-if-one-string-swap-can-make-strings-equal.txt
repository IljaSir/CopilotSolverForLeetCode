Synthesizing 10/10 solutions

=======

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut diff = Vec::new();
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff.push(i);
            }
        }
        if diff.len() == 0 {
            return true;
        }
        if diff.len() != 2 {
            return false;
        }
        let i = diff[0];
        let j = diff[1];
        s1[i] == s2[j] && s2[i] == s1[j]

=======

        let mut diff = Vec::new();
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 != c2 {
                diff.push((c1, c2));
            }
        }
        if diff.len() == 0 {
            return true;
        }
        if diff.len() != 2 {
            return false;
        }
        diff[0].0 == diff[1].1 && diff[0].1 == diff[1].0

=======

        let mut s1 = s1.chars().collect::<Vec<char>>();
        let mut s2 = s2.chars().collect::<Vec<char>>();
        s1.sort();
        s2.sort();
        if s1 != s2 {
            return false;
        }
        let mut diff = 0;
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff += 1;
            }
        }
        diff <= 2

=======

        if s1 == s2 {
            return true;
        }
        let mut s1 = s1.chars().collect::<Vec<char>>();
        let mut s2 = s2.chars().collect::<Vec<char>>();
        let mut diff = 0;
        let mut diff1 = 0;
        let mut diff2 = 0;
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff += 1;
                diff1 = i;
            }
        }
        if diff != 2 {
            return false;
        }
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff2 = i;
            }
        }
        s1.swap(diff1, diff2);
        s1 == s2

=======

        if s1 == s2 {
            return true;
        }
        let mut diff = Vec::new();
        for (i, c) in s1.chars().enumerate() {
            if c != s2.chars().nth(i).unwrap() {
                diff.push(i);
            }
        }
        if diff.len() == 2 {
            let i = diff[0];
            let j = diff[1];
            if s1.chars().nth(i).unwrap() == s2.chars().nth(j).unwrap() && s1.chars().nth(j).unwrap() == s2.chars().nth(i).unwrap() {
                return true;
            }
        }
        false
    }
}

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        let mut diff = Vec::new();
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff.push(i);
            }
        }
        if diff.len() == 0 {
            return true;
        }
        if diff.len() != 2 {
            return false;
        }
        let i = diff[0];
        let j = diff[1];
        s1.swap(i, j);
        s1 == s2

=======

        let s1: Vec<char> = s1.chars().collect();
        let s2: Vec<char> = s2.chars().collect();
        let mut count = 0;
        let mut diff = Vec::new();
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                count += 1;
                diff.push((s1[i], s2[i]));
            }
        }
        if count == 0 {
            return true;
        }
        if count != 2 {
            return false;
        }
        diff[0].0 == diff[1].1 && diff[0].1 == diff[1].0

=======

        let mut s1 = s1.chars().collect::<Vec<char>>();
        let mut s2 = s2.chars().collect::<Vec<char>>();
        let mut diff = 0;
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                diff += 1;
            }
        }
        if diff > 2 {
            return false;
        }
        s1.sort();
        s2.sort();
        s1 == s2

=======

        let mut count = 0;
        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        for i in 0..s1.len() {
            if s1[i] != s2[i] {
                count += 1;
                if count > 2 {
                    return false;
                }
                for j in i+1..s1.len() {
                    if s1[i] == s1[j] && s2[i] == s2[j] {
                        s1.swap(i, j);
                        break;
                    }
                    if s1[i] == s2[j] && s2[i] == s1[j] {
                        s1.swap(i, j);
                        s2.swap(i, j);
                        break;
                    }
                }
            }
        }
        s1 == s2

=======

        let mut diff = 0;
        let mut diff1 = 0;
        let mut diff2 = 0;
        let mut diff3 = 0;
        let mut diff4 = 0;
        let mut diff5 = 0;
        let mut diff6 = 0;
        let mut diff7 = 0;
        let mut diff8 = 0;
        let mut diff9 = 0;
        let mut diff10 = 0;
        let mut diff11 = 0;
        let mut diff12 = 0;
        let mut diff13 = 0;
        let mut diff14 = 0;
        let mut diff15 = 0;
        let mut diff16 = 0;
        let mut diff17 = 0;
        let mut diff18 = 0;
        let mut diff19 = 0;
        let mut diff20 = 0;
        let mut diff21 = 0;
        let mut diff22 = 0;
        let mut diff23 = 0;
        let mut diff24 = 0;
        let mut diff25 = 0;
        let mut diff26 = 0;
        let mut diff27 = 0;
        let mut diff28 = 0;
        let mut diff29 = 0;
        let mut diff30 = 0;
        let mut diff31 = 0;
        let mut diff32 = 0;
        let mut diff33 = 0;
        let mut diff34 = 0;
        let mut diff35 = 0;
        let mut diff36 = 0;
        let mut diff37 = 0;
        let mut diff38 = 0;
        let mut diff39 = 0;
        let mut diff40 = 0;
        let mut diff41 = 0;
        let mut diff42 = 0;
        let mut diff43 = 0;
        let mut diff44 = 0;
        let mut diff45 = 0;
        let mut diff46 = 0;
        let mut diff47 = 0;
        let mut diff48 = 0;
        let mut diff49 = 0;
        let mut diff50 = 0;
        let mut diff51 = 0;
        let mut diff52 = 0;
        let mut diff53 = 0;
        let mut diff54 = 0;
        let mut diff55
