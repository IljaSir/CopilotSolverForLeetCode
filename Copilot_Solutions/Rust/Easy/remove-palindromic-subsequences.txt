Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if s.is_empty() {
            return 0;
        }
        if s == s.chars().rev().collect::<String>() {
            return 1;
        }
        2

=======

        if s.is_empty() {
            return 0;
        }
        if s.chars().rev().collect::<String>() == s {
            return 1;
        }
        2

=======

        if s.is_empty() {
            return 0;
        }
        if s.chars().rev().eq(s.chars()) {
            return 1;
        }
        2
    }
}

=======

        if s.is_empty() {
            return 0;
        }
        if s.chars().rev().eq(s.chars()) {
            return 1;
        }
        2

=======

        if s.is_empty() {
            return 0;
        }
        let chars: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = chars.len() - 1;
        while i < j {
            if chars[i] != chars[j] {
                return 2;
            }
            i += 1;
            j -= 1;
        }
        1
    }
}

=======

        if s.len() == 0 {
            return 0;
        }
        if s.len() == 1 {
            return 1;
        }
        let mut left = 0;
        let mut right = s.len() - 1;
        while left < right {
            if s.as_bytes()[left] != s.as_bytes()[right] {
                return 2;
            }
            left += 1;
            right -= 1;
        }
        1
    }
}

=======

        if s.len() == 0 {
            return 0
        }
        if s.chars().zip(s.chars().rev()).all(|(a, b)| a == b) {
            return 1
        }
        2
    }
}

=======

        if s.is_empty() {
            return 0;
        }
        let s1 = s.clone();
        let s2 = s1.chars().rev().collect::<String>();
        if s1 == s2 {
            return 1;
        }
        2

=======

        if s.len() == 0 {
            return 0;
        }
        let mut s = s.chars().collect::<Vec<char>>();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if s[l] == s[r] {
                l += 1;
                r -= 1;
            } else {
                return 2;
            }
        }
        1
