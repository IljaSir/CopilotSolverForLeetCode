Synthesizing 10/10 solutions

=======

        let mut num = num;
        let mut odd = Vec::new();
        let mut even = Vec::new();
        while num > 0 {
            let digit = num % 10;
            if digit % 2 == 0 {
                even.push(digit);
            } else {
                odd.push(digit);
            }
            num /= 10;
        }
        even.sort();
        odd.sort();
        let mut result = 0;
        while even.len() > 0 || odd.len() > 0 {
            if let Some(&digit) = even.last() {
                result = result * 10 + digit;
                even.pop();
            }
            if let Some(&digit) = odd.last() {
                result = result * 10 + digit;
                odd.pop();
            }
        }
        result
    }
}

=======

        let mut num = num;
        let mut nums = Vec::new();
        while num > 0 {
            nums.push(num % 10);
            num /= 10;
        }
        nums.sort_by(|a, b| b.cmp(a));
        let mut res = 0;
        for i in 0..nums.len() {
            res = res * 10 + nums[i];
        }
        res

=======

        let mut num = num;
        let mut v = vec![];
        while num > 0 {
            v.push(num % 10);
            num /= 10;
        }
        v.sort_by(|a, b| b.cmp(a));
        let mut res = 0;
        for &n in v.iter() {
            res = res * 10 + n;
        }
        res
    }
}

=======

        let mut digits = num.to_string().chars().collect::<Vec<char>>();
        let mut evens = Vec::new();
        let mut odds = Vec::new();
        for i in 0..digits.len() {
            if digits[i].to_digit(10).unwrap() % 2 == 0 {
                evens.push(i);
            } else {
                odds.push(i);
            }
        }
        let mut i = 0;
        let mut j = 0;
        while i < evens.len() && j < odds.len() {
            if evens[i] < odds[j] {
                digits.swap(evens[i], odds[j]);
                i += 1;
                j += 1;
            } else {
                j += 1;
            }
        }
        digits.iter().collect::<String>().parse::<i32>().unwrap()

=======

        let mut even = vec![];
        let mut odd = vec![];
        let mut n = num;
        while n > 0 {
            let r = n % 10;
            n = n / 10;
            if r % 2 == 0 {
                even.push(r);
            } else {
                odd.push(r);
            }
        }
        even.sort();
        odd.sort();
        let mut result = 0;
        while even.len() > 0 || odd.len() > 0 {
            if even.len() > 0 {
                let v = even.pop().unwrap();
                result = result * 10 + v;
            }
            if odd.len() > 0 {
                let v = odd.pop().unwrap();
                result = result * 10 + v;
            }
        }
        result

=======

        let mut num = num.to_string();
        let mut odds = Vec::new();
        let mut evens = Vec::new();
        for ch in num.chars() {
            if ch.to_digit(10).unwrap() % 2 == 0 {
                evens.push(ch);
            } else {
                odds.push(ch);
            }
        }
        odds.sort();
        evens.sort();
        odds.reverse();
        evens.reverse();
        let mut result = String::new();
        let mut odd_index = 0;
        let mut even_index = 0;
        for ch in num.chars() {
            if ch.to_digit(10).unwrap() % 2 == 0 {
                result.push(evens[even_index]);
                even_index += 1;
            } else {
                result.push(odds[odd_index]);
                odd_index += 1;
            }
        }
        result.parse::<i32>().unwrap()

=======

        let mut digits = num.to_string().chars().collect::<Vec<_>>();
        let mut odd = Vec::new();
        let mut even = Vec::new();
        for (i, c) in digits.iter().enumerate() {
            if c.to_digit(10).unwrap() % 2 == 0 {
                even.push((i, *c));
            } else {
                odd.push((i, *c));
            }
        }
        let (mut i, mut j) = (0, 0);
        while i < even.len() && j < odd.len() {
            if even[i].1 < odd[j].1 {
                digits.swap(even[i].0, odd[j].0);
                i += 1;
                j += 1;
            } else {
                j += 1;
            }
        }
        digits.iter().collect::<String>().parse::<i32>().unwrap()
    }
}

=======

        let num_str = num.to_string();
        let mut num_vec: Vec<char> = num_str.chars().collect();
        let mut even_vec: Vec<char> = Vec::new();
        let mut odd_vec: Vec<char> = Vec::new();
        for c in num_vec.iter() {
            if c.to_digit(10).unwrap() % 2 == 0 {
                even_vec.push(*c);
            } else {
                odd_vec.push(*c);
            }
        }
        even_vec.sort_by(|a, b| b.cmp(a));
        odd_vec.sort_by(|a, b| b.cmp(a));
        let mut even_iter = even_vec.iter();
        let mut odd_iter = odd_vec.iter();
        let mut result: Vec<char> = Vec::new();
        for c in num_vec.iter() {
            if c.to_digit(10).unwrap() % 2 == 0 {
                if let Some(e) = even_iter.next() {
                    result.push(*e);
                } else {
                    result.push(*c);
                }
            } else {
                if let Some(o) = odd_iter.next() {
                    result.push(*o);
                } else {
                    result.push(*c);
                }
            }
        }
        let result_str: String = result.iter().collect();
        result_str.parse::<i32>().unwrap()
    }
}

=======

        let mut num_s = num.to_string();
        let mut odd: Vec<char> = Vec::new();
        let mut even: Vec<char> = Vec::new();
        for c in num_s.chars() {
            if c.to_digit(10).unwrap() % 2 == 0 {
                even.push(c);
            } else {
                odd.push(c);
            }
        }
        even.sort();
        odd.sort();
        odd.reverse();
        let mut i = 0;
        for c in num_s.chars() {
            if c.to_digit(10).unwrap() % 2 == 0 {
                num_s.remove(i);
                num_s.insert(i, even.pop().unwrap());
            } else {
                num_s.remove(i);
                num_s.insert(i, odd.pop().unwrap());
            }
            i += 1;
        }
        num_s.parse::<i32>().unwrap()
    }
}

=======

        let mut num = num;
        let mut digits: Vec<i32> = Vec::new();
        while num > 0 {
            digits.push(num % 10);
            num /= 10;
        }
        let mut evens: Vec<i32> = Vec::new();
        let mut odds: Vec<i32> = Vec::new();
        for digit in digits {
            if digit % 2 == 0 {
                evens.push(digit);
            } else {
                odds.push(digit);
            }
        }
        evens.sort();
        odds.sort();
        let mut res = 0;
        while let Some(digit) = evens.pop() {
            res = res * 10 + digit;
        }
        while let Some(digit) = odds.pop() {
            res = res * 10 + digit;
        }
        res
