Synthesizing 10/10 solutions

=======

        let mut left_sum: Vec<i32> = vec![0; nums.len()];
        let mut right_sum: Vec<i32> = vec![0; nums.len()];
        let mut answer: Vec<i32> = vec![0; nums.len()];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i - 1] + nums[i - 1];
        }
        for i in (0..nums.len() - 1).rev() {
            right_sum[i] = right_sum[i + 1] + nums[i + 1];
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        answer
    }
}

=======

        let mut left_sum: Vec<i32> = vec![0; nums.len()];
        let mut right_sum: Vec<i32> = vec![0; nums.len()];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i - 1] + nums[i - 1];
        }
        for i in (0..nums.len() - 1).rev() {
            right_sum[i] = right_sum[i + 1] + nums[i + 1];
        }
        left_sum
            .iter()
            .zip(right_sum.iter())
            .map(|(l, r)| (l - r).abs())
            .collect()
    }
}

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut answer = vec![0; nums.len()];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i - 1] + nums[i - 1];
        }
        for i in (0..nums.len() - 1).rev() {
            right_sum[i] = right_sum[i + 1] + nums[i + 1];
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        return answer;
    }
}

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut answer = vec![0; nums.len()];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i-1] + nums[i-1];
        }
        for i in (0..nums.len()-1).rev() {
            right_sum[i] = right_sum[i+1] + nums[i+1];
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        answer

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut answer = vec![0; nums.len()];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i-1] + nums[i-1];
        }
        for i in (0..nums.len()-1).rev() {
            right_sum[i] = right_sum[i+1] + nums[i+1];
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        answer
    }
}

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut sum = 0;
        for i in 0..nums.len() {
            left_sum[i] = sum;
            sum += nums[i];
        }
        sum = 0;
        for i in (0..nums.len()).rev() {
            right_sum[i] = sum;
            sum += nums[i];
        }
        left_sum
            .iter()
            .zip(right_sum.iter())
            .map(|(l, r)| (l - r).abs())
            .collect()
    }
}

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut answer = vec![0; nums.len()];
        for i in 0..nums.len() {
            if i > 0 {
                left_sum[i] = left_sum[i - 1] + nums[i - 1];
            }
        }
        for i in (0..nums.len()).rev() {
            if i < nums.len() - 1 {
                right_sum[i] = right_sum[i + 1] + nums[i + 1];
            }
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        answer
    }
}

=======

        let mut left_sum = vec![0; nums.len()];
        let mut right_sum = vec![0; nums.len()];
        let mut answer = vec![0; nums.len()];
        left_sum[0] = nums[0];
        for i in 1..nums.len() {
            left_sum[i] = left_sum[i-1] + nums[i];
        }
        right_sum[nums.len()-1] = nums[nums.len()-1];
        for i in (0..nums.len()-1).rev() {
            right_sum[i] = right_sum[i+1] + nums[i];
        }
        for i in 0..nums.len() {
            answer[i] = (left_sum[i] - right_sum[i]).abs();
        }
        answer

=======

        let mut left = vec![0; nums.len()];
        let mut right = vec![0; nums.len()];
        let mut res = vec![0; nums.len()];
        for i in 1..nums.len() {
            left[i] = left[i-1] + nums[i-1];
        }
        for i in (0..nums.len()-1).rev() {
            right[i] = right[i+1] + nums[i+1];
        }
        for i in 0..nums.len() {
            res[i] = (left[i] - right[i]).abs();
        }
        res
    }
}

=======

        let mut result = vec![];
        let mut left_sum = 0;
        let mut right_sum = nums.iter().sum();
        for i in 0..nums.len() {
            right_sum -= nums[i];
            result.push((left_sum - right_sum).abs());
            left_sum += nums[i];
        }
        result
    }
}
