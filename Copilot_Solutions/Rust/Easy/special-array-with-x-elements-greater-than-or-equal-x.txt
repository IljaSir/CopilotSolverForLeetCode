Synthesizing 10/10 solutions

=======

        for i in 1..=1000 {
            let mut count = 0;
            for &n in nums.iter() {
                if n >= i {
                    count += 1;
                }
            }
            if count == i {
                return i;
            }
        }
        -1

=======

        for i in 1..=nums.len() {
            let mut count = 0;
            for j in nums.iter() {
                if *j >= i as i32 {
                    count += 1;
                }
            }
            if count == i {
                return i as i32;
            }
        }
        -1

=======

        for i in 1..=100 {
            let mut count = 0;
            for &n in &nums {
                if n >= i {
                    count += 1;
                }
            }
            if count == i {
                return i;
            }
        }
        -1

=======

        let mut count = vec![0; 1001];
        for i in nums {
            count[i as usize] += 1;
        }
        let mut sum = 0;
        for i in (0..=1000).rev() {
            sum += count[i];
            if sum == i {
                return i as i32;
            }
        }
        -1

=======

        let mut nums = nums;
        nums.sort();
        for i in 0..nums.len() {
            if nums[i] >= (nums.len() - i) as i32 {
                if i == 0 || nums[i] > nums[i - 1] {
                    return (nums.len() - i) as i32;
                }
            }
        }
        -1

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            if nums[i] >= nums.len() as i32 - i as i32 {
                if i == 0 || nums[i] > nums[i - 1] {
                    return nums.len() as i32 - i as i32;
                }
            }
            i += 1;
        }
        -1

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i <= nums.len() {
            if i == nums.len() || nums[nums.len() - i - 1] < i as i32 {
                return i as i32;
            }
            i += 1;
        }
        -1

=======

        let mut nums = nums;
        nums.sort();
        let len = nums.len();
        for i in 0..=1000 {
            let mut j = 0;
            while j < len && nums[j] < i {
                j += 1;
            }
            if len - j == i {
                return i as i32;
            }
        }
        -1

=======

        let mut count = vec![0; 1001];
        for num in nums.iter() {
            count[*num as usize] += 1;
        }
        for i in 0..1001 {
            let mut s = 0;
            for j in i..1001 {
                s += count[j];
            }
            if s == i {
                return i as i32;
            }
        }
        -1

=======

        let mut sorted = nums;
        sorted.sort();
        for x in 1..=1000 {
            let mut count = 0;
            for &num in &sorted {
                if num >= x {
                    count += 1;
                }
            }
            if count == x {
                return x;
            }
        }
        -1
