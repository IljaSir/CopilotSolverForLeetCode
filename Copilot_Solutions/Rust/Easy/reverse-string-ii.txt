Synthesizing 10/10 solutions

=======

        let mut s: Vec<char> = s.chars().collect();
        let k = k as usize;
        for i in (0..s.len()).step_by(2 * k) {
            let j = std::cmp::min(i + k, s.len());
            s[i..j].reverse();
        }
        s.into_iter().collect()

=======

        let k = k as usize;
        let mut res = String::with_capacity(s.len());
        let mut chars = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < chars.len() {
            if i + k <= chars.len() {
                chars[i..i+k].reverse();
                res.extend(chars[i..i+k].iter());
            } else {
                chars[i..].reverse();
                res.extend(chars[i..].iter());
            }
            i += k;
            if i >= chars.len() { break; }
            if i + k <= chars.len() {
                res.extend(chars[i..i+k].iter());
            } else {
                res.extend(chars[i..].iter());
            }
            i += k;
        }
        res

=======

        let mut s = s;
        let k = k as usize;
        let mut i = 0;
        while i < s.len() {
            let j = i + k;
            let j = if j > s.len() { s.len() } else { j };
            s.replace_range(i..j, &s[i..j].chars().rev().collect::<String>());
            i += 2 * k;
        }
        s
    }
}

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut i: usize = 0;
        let mut j: usize = 0;
        let k = k as usize;
        while j < chars.len() {
            i = j;
            j += k;
            if j > chars.len() {
                j = chars.len();
            }
            chars[i..j].reverse();
            j += k;
        }
        chars.into_iter().collect()

=======

        let mut v: Vec<char> = s.chars().collect();
        let k = k as usize;
        let mut i = 0;
        while i < v.len() {
            let s = i;
            let e = if i + k < v.len() { i + k } else { v.len() };
            v[s..e].reverse();
            i += 2 * k;
        }
        v.into_iter().collect()

=======

        let mut s = s;
        let k = k as usize;
        for i in (0..s.len()).step_by(2 * k) {
            let j = i + k;
            let mut t = s[i..j].chars().rev().collect::<String>();
            s.replace_range(i..j, &t);
        }
        s
    }
}

=======

        let mut ans = String::new();
        let mut i = 0;
        let mut k = k as usize;
        let mut chars = s.chars();
        while let Some(c) = chars.next() {
            if i % (2 * k) < k {
                let mut stack = Vec::new();
                let mut j = i;
                while j < i + k && j < s.len() {
                    stack.push(chars.next().unwrap());
                    j += 1;
                }
                while let Some(c) = stack.pop() {
                    ans.push(c);
                }
                i = j;
            } else {
                ans.push(c);
                i += 1;
            }
        }
        ans
    }
}

=======

        let mut res = String::new();
        let mut s = s;
        let k = k as usize;
        while s.len() > 0 {
            let (mut a, mut b) = s.split_at(k);
            if b.len() < k {
                b = "";
            }
            a = a.chars().rev().collect::<String>().as_str();
            res.push_str(a);
            res.push_str(b);
            s = s.split_off(k);
        }
        res

=======

        let mut res = String::from("");
        let mut i = 0;
        let mut k = k as usize;
        while i < s.len() {
            let mut t = s[i..std::cmp::min(i + k, s.len())].chars().rev().collect::<String>();
            if i + k < s.len() {
                t += &s[i + k..std::cmp::min(i + 2 * k, s.len())];
            }
            res += &t;
            i += 2 * k;
        }
        res

=======

        let mut ans = String::new();
        let mut s = s;
        let mut k = k;
        while s.len() > 0 {
            let mut part = String::new();
            if s.len() >= k as usize {
                part = s.drain(..k as usize).collect();
            } else {
                part = s.drain(..).collect();
            }
            ans.push_str(&part.chars().rev().collect::<String>());
            if s.len() >= k as usize {
                part = s.drain(..k as usize).collect();
            } else {
                part = s.drain(..).collect();
            }
            ans.push_str(&part);
        }
        ans
