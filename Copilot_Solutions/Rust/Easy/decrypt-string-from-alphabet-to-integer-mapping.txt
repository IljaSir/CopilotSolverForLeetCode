Synthesizing 10/10 solutions

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && &s[i+2..i+3] == "#" {
                res.push((96 + s[i..i+2].parse::<u8>().unwrap()) as char);
                i += 3;
            } else {
                res.push((96 + s[i..i+1].parse::<u8>().unwrap()) as char);
                i += 1;
            }
        }
        res

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && &s[i+2..i+3] == "#" {
                let num = &s[i..i+2];
                let c = ((num.parse::<u8>().unwrap() - 1) + 'a' as u8) as char;
                res.push(c);
                i += 3;
            } else {
                let c = ((s[i..i+1].parse::<u8>().unwrap() - 1) + 'a' as u8) as char;
                res.push(c);
                i += 1;
            }
        }
        res

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && s.as_bytes()[i + 2] == b'#' {
                res.push((96 + s[i..i+2].parse::<u8>().unwrap()) as char);
                i += 3;
            } else {
                res.push((96 + s[i..i+1].parse::<u8>().unwrap()) as char);
                i += 1;
            }
        }
        res

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && &s[i + 2..i + 3] == "#" {
                res.push((96 + s[i..i + 2].parse::<usize>().unwrap()) as u8 as char);
                i += 3;
            } else {
                res.push((96 + s[i..i + 1].parse::<usize>().unwrap()) as u8 as char);
                i += 1;
            }
        }
        res

=======

        let mut result = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && s.chars().nth(i + 2).unwrap() == '#' {
                let num = s[i..i+2].parse::<u8>().unwrap();
                result.push((num + 96) as char);
                i += 3;
            } else {
                let num = s[i..i+1].parse::<u8>().unwrap();
                result.push((num + 96) as char);
                i += 1;
            }
        }
        result

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if i + 2 < s.len() && s[i + 2..i + 3] == "#" {
                res.push((96 + s[i..i + 2].parse::<i32>().unwrap()) as u8 as char);
                i += 3;
            } else {
                res.push((96 + s[i..i + 1].parse::<i32>().unwrap()) as u8 as char);
                i += 1;
            }
        }
        res

=======

        let mut result = String::new();
        let mut i = 0;
        while i < s.len() {
            if i < s.len() - 2 && s.as_bytes()[i + 2] == b'#' {
                result.push((b'a' + (s.as_bytes()[i] - b'0') * 10 + (s.as_bytes()[i + 1] - b'0') - 1) as char);
                i += 3;
            } else {
                result.push((b'a' + (s.as_bytes()[i] - b'0') - 1) as char);
                i += 1;
            }
        }
        result

=======

        let mut ret = String::new();
        let mut i = 0;
        while i < s.len() {
            let c = s.as_bytes()[i];
            if i + 2 < s.len() && s.as_bytes()[i + 2] == b'#' {
                let n = (c - b'0') * 10 + (s.as_bytes()[i + 1] - b'0');
                ret.push((n + b'a' - 1) as char);
                i += 3;
            } else {
                ret.push((c + b'a' - b'1') as char);
                i += 1;
            }
        }
        ret

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut res = String::new();
        let mut i = 0;
        while i < chars.len() {
            if i + 2 < chars.len() && chars[i + 2] == '#' {
                res.push((chars[i] as u8 - b'0') * 10 + (chars[i + 1] as u8 - b'0') + b'a' - 1);
                i += 3;
            } else {
                res.push(chars[i] as u8 - b'1' + b'a');
                i += 1;
            }
        }
        res

=======

        let mut res = String::new();
        let mut i = s.len() - 1;
        while i > 0 {
            if s.as_bytes()[i] == '#' as u8 {
                res.push(((s[i - 2..i].parse::<u8>().unwrap() - 1) % 26 + 'a' as u8) as char);
                i -= 3;
            } else {
                res.push(((s[i..i + 1].parse::<u8>().unwrap() - 1) % 26 + 'a' as u8) as char);
                i -= 1;
            }
        }
        if i == 0 {
            res.push(((s[i..i + 1].parse::<u8>().unwrap() - 1) % 26 + 'a' as u8) as char);
        }
        res.chars().rev().collect()
    }
}
