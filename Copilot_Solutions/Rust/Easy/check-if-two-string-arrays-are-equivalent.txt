Synthesizing 10/10 solutions

=======

        let s1: String = word1.join("");
        let s2: String = word2.join("");
        s1 == s2

=======

        let s1: String = word1.join("");
        let s2: String = word2.join("");
        s1 == s2
    }
}

=======

        let mut s1 = String::new();
        let mut s2 = String::new();
        for w in word1 {
            s1.push_str(&w);
        }
        for w in word2 {
            s2.push_str(&w);
        }
        s1 == s2

=======

        let mut s1 = String::new();
        let mut s2 = String::new();
        for s in word1 {
            s1.push_str(&s);
        }
        for s in word2 {
            s2.push_str(&s);
        }
        s1 == s2

=======

        let mut s1 = String::new();
        for s in word1 {
            s1.push_str(&s);
        }
        let mut s2 = String::new();
        for s in word2 {
            s2.push_str(&s);
        }
        s1 == s2

=======

        let mut s1 = String::new();
        let mut s2 = String::new();
        for w in word1 {
            s1 += &w;
        }
        for w in word2 {
            s2 += &w;
        }
        s1 == s2

=======

        let mut w1 = String::new();
        let mut w2 = String::new();
        for i in word1 {
            w1.push_str(&i);
        }
        for i in word2 {
            w2.push_str(&i);
        }
        w1 == w2

=======

        let mut w1 = String::new();
        let mut w2 = String::new();
        for s in word1 {
            w1 += &s;
        }
        for s in word2 {
            w2 += &s;
        }
        w1 == w2

=======

        let mut s1 = String::new();
        let mut s2 = String::new();
        for i in word1 {
            s1.push_str(&i);
        }
        for j in word2 {
            s2.push_str(&j);
        }
        s1 == s2

=======

        let word1: String = word1.join("");
        let word2: String = word2.join("");
        return word1 == word2;
    }
}
