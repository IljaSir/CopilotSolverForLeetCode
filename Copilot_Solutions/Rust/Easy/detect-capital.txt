Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for c in word.chars() {
            if c.is_uppercase() {
                count += 1;
            }
        }
        count == 0 || count == word.len() || (count == 1 && word.chars().next().unwrap().is_uppercase())

=======

        let mut count = 0;
        for c in word.chars() {
            if c.is_ascii_uppercase() {
                count += 1;
            }
        }
        if count == word.len() {
            return true;
        }
        if count == 0 {
            return true;
        }
        if count == 1 && word.chars().nth(0).unwrap().is_ascii_uppercase() {
            return true;
        }
        false
    }
}

=======

        let mut count = 0;
        for c in word.chars() {
            if c.is_uppercase() {
                count += 1;
            }
        }
        return count == word.len() || count == 0 || (count == 1 && word.chars().nth(0).unwrap().is_uppercase());
    }
}

=======

        let mut c = 0;
        for i in word.chars() {
            if i.is_uppercase() {
                c += 1;
            }
        }
        c == 0 || c == word.len() || (c == 1 && word.chars().next().unwrap().is_uppercase())

=======

        let mut first = true;
        let mut all = true;
        let mut none = true;
        for c in word.chars() {
            if c.is_lowercase() {
                first = false;
                all = false;
            } else {
                none = false;
            }
        }
        first || all || none

=======

        let mut is_capital = false;
        let mut is_lower = false;
        let mut is_upper = false;
        for c in word.chars() {
            if c.is_uppercase() {
                if is_lower {
                    return false;
                }
                is_upper = true;
            } else {
                if is_upper {
                    return false;
                }
                is_lower = true;
            }
        }
        true
    }
}

=======

        if word.len() == 1 {
            return true;
        }
        let mut is_first_capital = false;
        let mut is_all_capital = false;
        let mut is_all_not_capital = false;
        for (i, c) in word.chars().enumerate() {
            if i == 0 {
                if c.is_uppercase() {
                    is_first_capital = true;
                    is_all_capital = true;
                } else {
                    is_all_not_capital = true;
                }
                continue;
            }
            if c.is_uppercase() {
                is_all_not_capital = false;
                if is_first_capital {
                    is_all_capital = true;
                }
            } else {
                is_all_capital = false;
            }
        }
        return is_all_capital || is_all_not_capital;

=======

        let mut all_cap = true;
        let mut all_small = true;
        let mut first_cap = true;
        let mut first_small = true;
        for (i, c) in word.chars().enumerate() {
            if i == 0 {
                if c.is_uppercase() {
                    first_cap = true;
                    first_small = false;
                } else {
                    first_cap = false;
                    first_small = true;
                }
            } else {
                if c.is_uppercase() {
                    all_cap = true;
                    all_small = false;
                } else {
                    all_cap = false;
                    all_small = true;
                }
            }
        }
        all_cap || all_small || (first_cap && first_small)

=======

        let mut word = word.chars().collect::<Vec<_>>();
        let mut is_all_upper = true;
        let mut is_all_lower = true;
        let mut is_first_upper = true;
        for (i, c) in word.iter().enumerate() {
            if i == 0 {
                if !c.is_uppercase() {
                    is_first_upper = false;
                }
            } else {
                if c.is_uppercase() {
                    is_all_lower = false;
                } else {
                    is_all_upper = false;
                }
            }
        }
        is_all_lower || is_all_upper || is_first_upper
