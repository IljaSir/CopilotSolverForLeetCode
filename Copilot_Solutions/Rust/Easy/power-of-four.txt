Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if n <= 0 {
            return false;
        }
        if n == 1 {
            return true;
        }
        if n % 4 != 0 {
            return false;
        }
        return Self::is_power_of_four(n / 4);

=======

        if n <= 0 {
            return false;
        }
        let mut n = n;
        while n % 4 == 0 {
            n /= 4;
        }
        n == 1

=======

        if n == 1 {
            return true;
        }
        if n == 0 || n % 4 != 0 {
            return false;
        }
        return Solution::is_power_of_four(n / 4);
    }
}

=======

        if n <= 0 {
            return false;
        }
        let mut x = n;
        while x % 4 == 0 {
            x /= 4;
        }
        x == 1

=======

        if n == 1 {
            return true;
        }
        if n % 4 != 0 || n < 4 {
            return false;
        }
        return Self::is_power_of_four(n / 4);

=======

        if n <= 0 {
            return false;
        }
        if n & (n - 1) == 0 {
            if n & 0x55555555 != 0 {
                return true;
            }
        }
        false

=======

        if n == 1 {
            return true;
        }
        let mut n = n;
        while n > 0 {
            if n % 4 == 0 {
                n /= 4;
                if n == 1 {
                    return true;
                }
            } else {
                return false;
            }
        }
        false
    }
}
