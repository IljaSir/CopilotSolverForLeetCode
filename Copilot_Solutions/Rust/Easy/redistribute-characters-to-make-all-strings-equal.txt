Synthesizing 10/10 solutions

=======

        let mut cnt = vec![0; 26];
        for word in &words {
            for c in word.chars() {
                cnt[c as usize - 'a' as usize] += 1;
            }
        }
        for i in 0..26 {
            if cnt[i] % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut count = vec![0; 26];
        for word in words {
            for c in word.chars() {
                count[c as usize - 'a' as usize] += 1;
            }
        }
        for c in count {
            if c % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for word in words {
            for c in word.chars() {
                count[(c as u8 - 'a' as u8) as usize] += 1;
            }
        }
        for i in 0..26 {
            if count[i] % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut cnt = vec![0; 26];
        for w in words {
            for c in w.chars() {
                cnt[c as usize - 'a' as usize] += 1;
            }
        }
        for c in cnt {
            if c % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for word in words {
            for c in word.chars() {
                count[c as usize - 'a' as usize] += 1;
            }
        }
        for c in count.iter() {
            if c % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for word in words {
            for c in word.chars() {
                count[c as usize - 'a' as usize] += 1;
            }
        }
        for c in count {
            if c % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut cnt = vec![0; 26];
        for w in words {
            for c in w.bytes() {
                cnt[(c - b'a') as usize] += 1;
            }
        }
        for c in cnt {
            if c % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for word in words {
            for ch in word.chars() {
                count[(ch as u8 - b'a') as usize] += 1;
            }
        }
        for i in 0..26 {
            if count[i] % words.len() != 0 {
                return false;
            }
        }
        true

=======

        let mut counter = [0; 26];
        for word in words {
            for c in word.chars() {
                counter[c as usize - 'a' as usize] += 1;
            }
        }
        for c in counter.iter() {
            if c % words.len() != 0 {
                return false
            }
        }
        true

=======

        let mut c = [0; 26];
        for s in words {
            for c in s.bytes() {
                c[c as usize - 'a' as usize] += 1;
            }
        }
        for i in 0..26 {
            if c[i] % words.len() != 0 {
                return false;
            }
        }
        true
