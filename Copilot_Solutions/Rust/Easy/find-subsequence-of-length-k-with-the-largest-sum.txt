Synthesizing 10/10 solutions

=======

        let mut stack = Vec::new();
        let mut k = k as usize;
        for i in 0..nums.len() {
            while !stack.is_empty() && stack.len() + nums.len() - i > k && stack[stack.len()-1] < nums[i] {
                stack.pop();
            }
            stack.push(nums[i]);
        }
        while stack.len() > k {
            stack.pop();
        }
        stack

=======

        let n = nums.len();
        let k = k as usize;
        let mut stack = Vec::with_capacity(k);
        let mut remain = n - k;
        for i in 0..n {
            while !stack.is_empty() && stack[stack.len() - 1] < nums[i] && remain > 0 {
                stack.pop();
                remain -= 1;
            }
            stack.push(nums[i]);
        }
        stack.truncate(k);
        stack

=======

        let mut stack = Vec::new();
        let mut k = k as usize;
        for i in 0..nums.len() {
            while !stack.is_empty() && nums.len() - i + stack.len() > k && nums[i] > *stack.last().unwrap() {
                stack.pop();
            }
            if stack.len() < k {
                stack.push(nums[i]);
            }
        }
        stack
    }
}

=======

        let mut stack = vec![];
        let mut k = k as usize;
        for i in 0..nums.len() {
            let n = nums[i];
            while !stack.is_empty() && stack.len() + nums.len() - i > k && stack[stack.len() - 1] < n {
                stack.pop();
            }
            if stack.len() < k {
                stack.push(n);
            }
        }
        stack
    }
}

=======

        let k = k as usize;
        let n = nums.len();
        let mut res = vec![0; k];
        let mut l = 0;
        let mut r = n - k;
        let mut i = 0;
        let mut j = 0;
        while i < k {
            if nums[l] > nums[r] {
                res[i] = nums[l];
                l += 1;
            } else {
                res[k - j - 1] = nums[r];
                r += 1;
                j += 1;
            }
            i += 1;
        }
        res
    }
}

=======

        let mut res = vec![0; k as usize];
        let mut i = 0;
        let mut j = 0;
        let mut sum = 0;
        let mut max_sum = 0;
        let mut max_i = 0;
        let mut max_j = 0;
        while i < nums.len() {
            sum += nums[i];
            if i >= k as usize {
                sum -= nums[j];
                j += 1;
            }
            if i >= k as usize - 1 && sum > max_sum {
                max_sum = sum;
                max_i = i;
                max_j = j;
            }
            i += 1;
        }
        for i in max_j..=max_i {
            res[i - max_j] = nums[i];
        }
        res
    }
}

=======

        
    }
}

=======

        let mut stack = vec![];
        let k = k as usize;
        let mut n = nums.len();
        let mut remain = k;
        for i in 0..n {
            while !stack.is_empty() && stack[stack.len() - 1] < nums[i] && remain > 0 {
                stack.pop();
                remain -= 1;
            }
            stack.push(nums[i]);
        }
        stack.truncate(k);
        stack
    }
}

=======

        let mut ans = vec![];
        let k = k as usize;
        let n = nums.len();
        let mut st = Vec::with_capacity(n);
        let mut i = 0;
        while i < n {
            while !st.is_empty() && st.len() + n - i > k && st[st.len() - 1] < nums[i] {
                st.pop();
            }
            if st.len() < k {
                st.push(nums[i]);
            }
            i += 1;
        }
        st

=======

        let mut res = vec![0; k as usize];
        let mut max = 0;
        let mut cur = 0;
        let mut i = 0;
        let mut j = 0;
        let mut n = nums.len();
        let mut stack = vec![];
        while i < n {
            while j < n && j - i < k as usize {
                cur += nums[j];
                while !stack.is_empty() && stack.last().unwrap() < &nums[j] {
                    cur -= stack.pop().unwrap();
                }
                stack.push(nums[j]);
                j += 1;
            }
            if j - i == k as usize {
                if cur > max {
                    max = cur;
                    res = stack.clone();
                }
                cur -= stack.pop().unwrap();
                i += 1;
            }
        }
        res
