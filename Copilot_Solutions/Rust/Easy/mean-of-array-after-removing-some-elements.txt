Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let mut sum = 0;
        for i in n / 20..n * 19 / 20 {
            sum += arr[i];
        }
        sum as f64 / (n * 9 / 10) as f64
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let mut sum = 0;
        for i in 0..n {
            if i >= n / 20 && i < n - n / 20 {
                sum += arr[i];
            }
        }
        sum as f64 / (n - n / 10) as f64
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let mut sum = 0;
        for i in 0..n {
            if i >= n / 20 && i < n - n / 20 {
                sum += arr[i];
            }
        }
        sum as f64 / (n * 9 / 10) as f64

=======

        let mut arr = arr;
        arr.sort();
        let len = arr.len();
        let mut sum = 0;
        for i in 0..len {
            if i >= len / 20 && i < len - len / 20 {
                sum += arr[i];
            }
        }
        sum as f64 / (len - len / 10) as f64

=======

        let mut arr = arr;
        arr.sort();
        let mut sum = 0;
        let mut count = 0;
        for i in arr.len() / 20..arr.len() - arr.len() / 20 {
            sum += arr[i];
            count += 1;
        }
        sum as f64 / count as f64

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len() as f64;
        let mut sum = 0.0;
        for i in (n * 0.05) as usize..(n * 0.95) as usize {
            sum += arr[i] as f64;
        }
        sum / (n * 0.9)

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let l = (n as f64 * 0.05) as usize;
        let r = n - l;
        arr[l..r].iter().sum::<i32>() as f64 / (r - l) as f64

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let mut sum = 0;
        for i in 0..n {
            if i >= n/20 && i < n - n/20 {
                sum += arr[i];
            }
        }
        sum as f64 / (n - n/10) as f64

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len() as f64;
        let mut sum = 0;
        let mut count = 0;
        for i in (n * 0.05) as usize..(n * 0.95) as usize {
            sum += arr[i];
            count += 1;
        }
        sum as f64 / count as f64
