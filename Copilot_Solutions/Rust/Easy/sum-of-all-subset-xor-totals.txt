Synthesizing 10/10 solutions

=======

        let mut res = 0;
        for i in 0..(1 << nums.len()) {
            let mut tmp = 0;
            for j in 0..nums.len() {
                if i & (1 << j) > 0 {
                    tmp ^= nums[j];
                }
            }
            res += tmp;
        }
        res

=======

        let mut res = 0;
        for i in 0..(1 << nums.len()) {
            let mut tmp = 0;
            for j in 0..nums.len() {
                if (i & (1 << j)) != 0 {
                    tmp ^= nums[j];
                }
            }
            res += tmp;
        }
        res
    }
}

=======

        let mut sum = 0;
        for i in 0..(1 << nums.len()) {
            let mut x = 0;
            for j in 0..nums.len() {
                if i & (1 << j) > 0 {
                    x ^= nums[j];
                }
            }
            sum += x;
        }
        sum

=======

        let mut ans = 0;
        for i in 0..(1 << nums.len()) {
            let mut tmp = 0;
            for j in 0..nums.len() {
                if (i >> j) & 1 == 1 {
                    tmp ^= nums[j];
                }
            }
            ans += tmp;
        }
        ans
    }
}

=======

        let mut sum = 0;
        for i in 0..(1 << nums.len()) {
            let mut tmp = 0;
            for j in 0..nums.len() {
                if (i >> j) & 1 == 1 {
                    tmp ^= nums[j];
                }
            }
            sum += tmp;
        }
        sum
    }
}

=======

        let mut res = 0;
        for i in 0..1 << nums.len() {
            let mut cur = 0;
            for j in 0..nums.len() {
                if (i >> j) & 1 == 1 {
                    cur ^= nums[j];
                }
            }
            res += cur;
        }
        res

=======

        let mut res = 0;
        for i in 0..(1<<nums.len()) {
            let mut t = 0;
            for j in 0..nums.len() {
                if (i & (1<<j)) > 0 {
                    t ^= nums[j];
                }
            }
            res += t;
        }
        res
    }
}

=======

        let mut res = 0;
        let mut size = 1 << nums.len();
        for i in 0..size {
            let mut xor = 0;
            for j in 0..nums.len() {
                if i & (1 << j) != 0 {
                    xor ^= nums[j];
                }
            }
            res += xor;
        }
        res

=======

        let mut ans = 0;
        let mut m = 1;
        for i in 0..nums.len() {
            ans += m * nums[i];
            m *= 2;
        }
        ans
    }
}

=======

        let mut ans = 0;
        let mut n = nums.len();
        for i in 0..n {
            ans += nums[i] * (1 << n - 1);
        }
        ans
    }
}
