Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[i] == nums[j] && (i * j) % k == 0 {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in (i + 1)..nums.len() {
                if nums[i] == nums[j] && (i * j) % k == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut result = 0;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[i] == nums[j] && (i * j) % k == 0 {
                    result += 1;
                }
            }
        }
        result
    }
}

=======

        let mut result = 0;
        for i in 0..nums.len() {
            for j in (i + 1)..nums.len() {
                if nums[i] == nums[j] && (i * j) % k == 0 {
                    result += 1;
                }
            }
        }
        result
    }
}

=======

        let mut cnt = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[i] == nums[j] && (i * j) % k == 0 {
                    cnt += 1;
                }
            }
        }
        cnt
    }
}

=======

        let mut count = 0;
        let len = nums.len();
        for i in 0..len {
            for j in i+1..len {
                if nums[i] == nums[j] && (i*j) % k == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in (i + 1)..nums.len() {
                if nums[i] == nums[j] && (i as i32 * j as i32) % k == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for (i, x) in nums.iter().enumerate() {
            for (j, y) in nums.iter().enumerate() {
                if i < j && x == y && (i as i32 * j as i32) % k == 0 {
                    count += 1;
                }
            }
        }
        count
    }
}
