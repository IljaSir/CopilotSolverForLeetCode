Synthesizing 10/10 solutions

=======

        if n == 0 {
            return 1;
        }
        let mut n = n;
        let mut res = 0;
        let mut i = 0;
        while n > 0 {
            if n % 2 == 0 {
                res += 2i32.pow(i);
            }
            n /= 2;
            i += 1;
        }
        res

=======

        if n == 0 {
            return 1;
        }
        let mut mask = 1;
        let mut num = n;
        while num > 0 {
            mask <<= 1;
            num >>= 1;
        }
        mask - 1 - n

=======

        if n == 0 { return 1; }
        let mut i = 0;
        let mut m = n;
        while m > 0 {
            m >>= 1;
            i += 1;
        }
        let mask = (1 << i) - 1;
        n ^ mask
    }
}

=======

        if n == 0 {
            return 1;
        }
        let mut n = n;
        let mut ans = 0;
        let mut i = 0;
        while n > 0 {
            ans += ((n & 1) ^ 1) << i;
            n >>= 1;
            i += 1;
        }
        ans

=======

        if n == 0 {
            return 1;
        }
        let mut n = n;
        let mut res = 0;
        let mut i = 0;
        while n != 0 {
            let bit = n & 1;
            if bit == 0 {
                res += 1 << i;
            }
            n >>= 1;
            i += 1;
        }
        res

=======

        if n == 0 {
            return 1;
        }
        let mut n = n;
        let mut res = 0;
        let mut mask = 1;
        while n > 0 {
            if n & 1 == 0 {
                res |= mask;
            }
            mask <<= 1;
            n >>= 1;
        }
        res

=======

        if n == 0 {
            return 1;
        }
        let mut n = n;
        let mut ans = 0;
        let mut i = 0;
        while n > 0 {
            ans += (((n & 1) + 1) % 2) << i;
            n >>= 1;
            i += 1;
        }
        ans

=======

        if n == 0 { return 1; }
        let mut n = n;
        let mut res = 0;
        let mut i = 0;
        while n > 0 {
            let bit = n & 1;
            if bit == 0 {
                res += 2_i32.pow(i);
            }
            i += 1;
            n >>= 1;
        }
        res

=======

        let mut x = n;
        if x == 0 {
            return 1;
        }
        let mut res = 0;
        let mut i = 0;
        while x > 0 {
            if x & 1 == 0 {
                res += 1 << i;
            }
            x >>= 1;
            i += 1;
        }
        res

=======

        let mut ones = 1;
        while ones < n {
            ones = (ones << 1) + 1;
        }
        ones - n
