Synthesizing 10/10 solutions

=======

        let mut digits = digits;
        let mut carry = 1;
        for i in (0..digits.len()).rev() {
            digits[i] += carry;
            carry = digits[i] / 10;
            digits[i] %= 10;
        }
        if carry == 1 {
            digits.insert(0, 1);
        }
        digits

=======

        let mut digits = digits;
        let mut carry = 1;
        for i in (0..digits.len()).rev() {
            digits[i] += carry;
            carry = digits[i] / 10;
            digits[i] %= 10;
        }
        if carry > 0 {
            digits.insert(0, carry);
        }
        digits

=======

        let mut digits = digits;
        let mut carry = 1;
        for i in (0..digits.len()).rev() {
            let v = digits[i] + carry;
            digits[i] = v % 10;
            carry = v / 10;
            if carry == 0 {
                break;
            }
        }
        if carry > 0 {
            digits.insert(0, carry);
        }
        digits

=======

        let mut res = Vec::new();
        let mut carry = 1;
        for i in (0..digits.len()).rev() {
            let sum = digits[i] + carry;
            carry = sum / 10;
            res.push(sum % 10);
        }
        if carry > 0 {
            res.push(carry);
        }
        res.reverse();
        res

=======

        let mut digits = digits;
        let mut carry = 1;
        for i in (0..digits.len()).rev() {
            let sum = digits[i] + carry;
            if sum > 9 {
                digits[i] = sum - 10;
                carry = 1;
            } else {
                digits[i] = sum;
                carry = 0;
            }
        }
        if carry == 1 {
            digits.insert(0, 1);
        }
        digits
    }
}

=======

        let mut res = digits;
        let mut i = res.len() - 1;
        while i >= 0 {
            if res[i] < 9 {
                res[i] += 1;
                return res;
            } else {
                res[i] = 0;
            }
            i -= 1;
        }
        res.insert(0, 1);
        res

=======

        let mut digits = digits;
        let mut i = digits.len() - 1;
        loop {
            if i < 0 {
                digits.insert(0, 1);
                break;
            }
            if digits[i] != 9 {
                digits[i] += 1;
                break;
            } else {
                digits[i] = 0;
                i -= 1;
            }
        }
        digits

=======

        let mut carry = 1;
        let mut ans = vec![];
        for i in (0..digits.len()).rev() {
            let mut sum = digits[i] + carry;
            carry = sum / 10;
            sum = sum % 10;
            ans.push(sum);
        }
        if carry > 0 {
            ans.push(carry);
        }
        ans.reverse();
        ans

=======

        let mut carry = 1;
        let mut result = Vec::new();
        for i in (0..digits.len()).rev() {
            let mut val = digits[i] + carry;
            carry = val / 10;
            val = val % 10;
            result.push(val);
        }
        if carry > 0 {
            result.push(carry);
        }
        result.reverse();
        result

=======

        let mut digits = digits;
        let mut i = digits.len() - 1;
        let mut carry = 0;
        loop {
            let mut sum = digits[i] + 1;
            if carry == 1 {
                sum += 1;
            }
            if sum == 10 {
                digits[i] = 0;
                carry = 1;
            } else {
                digits[i] = sum;
                carry = 0;
            }
            if i == 0 {
                break;
            }
            i -= 1;
        }
        if carry == 1 {
            digits.insert(0, 1);
        }
        digits
