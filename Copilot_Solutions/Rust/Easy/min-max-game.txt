Synthesizing 10/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = vec![];
            for i in 0..nums.len()/2 {
                if i%2 == 0 {
                    new_nums.push(nums[2*i].min(nums[2*i+1]));
                } else {
                    new_nums.push(nums[2*i].max(nums[2*i+1]));
                }
            }
            nums = new_nums;
        }
        nums[0]

=======

        let mut nums = nums;
        let mut n = nums.len();
        while n > 1 {
            let mut new_nums = vec![];
            for i in 0..n/2 {
                new_nums.push(nums[2*i].min(nums[2*i+1]));
                new_nums.push(nums[2*i].max(nums[2*i+1]));
            }
            nums = new_nums;
            n /= 2;
        }
        nums[0]
    }
}

=======

        let mut nums = nums;
        let mut n = nums.len();
        while n > 1 {
            let mut new_nums = vec![0; n / 2];
            for i in 0..new_nums.len() {
                if i % 2 == 0 {
                    new_nums[i] = nums[2 * i].min(nums[2 * i + 1]);
                } else {
                    new_nums[i] = nums[2 * i].max(nums[2 * i + 1]);
                }
            }
            nums = new_nums;
            n /= 2;
        }
        nums[0]
    }
}

=======

        let mut nums = nums;
        let mut n = nums.len();
        while n != 1 {
            let mut new_nums = vec![];
            for i in 0..n/2 {
                new_nums.push(nums[2*i].min(nums[2*i+1]));
                new_nums.push(nums[2*i].max(nums[2*i+1]));
            }
            nums = new_nums;
            n = n / 2;
        }
        nums[0]

=======

        let mut res = nums[0];
        for i in 1..nums.len() {
            res = res.min(nums[i]).max(nums[i]);
        }
        res
    }
}
