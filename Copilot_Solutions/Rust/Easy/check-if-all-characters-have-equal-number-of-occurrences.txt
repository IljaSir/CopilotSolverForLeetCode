Synthesizing 10/10 solutions

=======

        let mut map: std::collections::HashMap<char, u32> = std::collections::HashMap::new();
        for c in s.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        let mut it = map.values();
        let first = it.next();
        for v in it {
            if *v != *first.unwrap() {
                return false;
            }
        }
        true

=======

        let mut map = std::collections::HashMap::new();
        for c in s.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        let mut iter = map.values();
        let mut first = iter.next().unwrap();
        for v in iter {
            if v != first {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let mut first = 0;
        for i in 0..26 {
            if count[i] == 0 {
                continue;
            }
            if first == 0 {
                first = count[i];
            } else if count[i] != first {
                return false;
            }
        }
        true

=======

        let mut count = [0; 26];
        for c in s.chars() {
            count[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut prev = 0;
        for i in 0..26 {
            if count[i] > 0 {
                if prev == 0 {
                    prev = count[i];
                } else if prev != count[i] {
                    return false;
                }
            }
        }
        true

=======

        let mut chars = [0; 26];
        for c in s.chars() {
            chars[c as usize - 'a' as usize] += 1;
        }
        let mut count = 0;
        for i in 0..26 {
            if chars[i] != 0 {
                if count == 0 {
                    count = chars[i];
                } else if count != chars[i] {
                    return false;
                }
            }
        }
        true

=======

        let mut count = [0; 26];
        for ch in s.chars() {
            count[(ch as u8 - 'a' as u8) as usize] += 1;
        }
        let mut first = 0;
        for i in 0..26 {
            if count[i] > 0 {
                first = count[i];
                break;
            }
        }
        for i in 0..26 {
            if count[i] > 0 && count[i] != first {
                return false;
            }
        }
        true

=======

        let mut c = [0; 26];
        for b in s.as_bytes() {
            c[(b - b'a') as usize] += 1;
        }
        let mut count = 0;
        for i in 0..26 {
            if c[i] > 0 {
                if count == 0 {
                    count = c[i];
                } else if count != c[i] {
                    return false;
                }
            }
        }
        true

=======

        let mut s = s.into_bytes();
        s.sort();
        let mut count = 1;
        let mut prev = s[0];
        for i in 1..s.len() {
            if s[i] == prev {
                count += 1;
            } else {
                if count != s.len()/26 {
                    return false;
                }
                prev = s[i];
                count = 1;
            }
        }
        count == s.len()/26
    }
}

=======

        let mut count = [0; 26];
        for c in s.bytes() {
            count[(c - b'a') as usize] += 1;
        }
        let mut min = 1001;
        let mut max = 0;
        for &c in count.iter() {
            if c == 0 {
                continue;
            }
            if c < min {
                min = c;
            }
            if c > max {
                max = c;
            }
        }
        min == max

=======

        let mut count = vec![0;26];
        for ch in s.chars() {
            count[ch as usize - 'a' as usize] += 1;
        }
        let mut flag = true;
        for i in 1..count.len() {
            if count[i] != count[i-1] && count[i] != 0 {
                flag = false;
                break;
            }
        }
        flag
