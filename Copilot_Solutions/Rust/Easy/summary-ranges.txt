Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        if nums.len() == 0 {
            return result;
        }
        let mut start = nums[0];
        let mut end = nums[0];
        for i in 1..nums.len() {
            if nums[i] == end + 1 {
                end = nums[i];
            } else {
                if start == end {
                    result.push(start.to_string());
                } else {
                    result.push(format!("{}->{}", start, end));
                }
                start = nums[i];
                end = nums[i];
            }
        }
        if start == end {
            result.push(start.to_string());
        } else {
            result.push(format!("{}->{}", start, end));
        }
        result
    }
}

=======

        let mut result = vec![];
        if nums.len() == 0 {
            return result;
        }
        let mut start = nums[0];
        let mut end = nums[0];
        for i in 1..nums.len() {
            if nums[i] == end + 1 {
                end = nums[i];
            } else {
                if start == end {
                    result.push(format!("{}", start));
                } else {
                    result.push(format!("{}->{}", start, end));
                }
                start = nums[i];
                end = nums[i];
            }
        }
        if start == end {
            result.push(format!("{}", start));
        } else {
            result.push(format!("{}->{}", start, end));
        }
        result

=======

        let mut ret = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i+1;
            while j < nums.len() && nums[j] == nums[j-1] + 1 {
                j += 1;
            }
            if j > i+1 {
                ret.push(format!("{}->{}", nums[i], nums[j-1]));
            } else {
                ret.push(format!("{}", nums[i]));
            }
            i = j;
        }
        ret

=======

        let mut res = vec![];
        let mut start = 0;
        let mut end = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i-1] + 1 {
                end = i;
            } else {
                if start == end {
                    res.push(nums[start].to_string());
                } else {
                    res.push(format!("{}->{}", nums[start], nums[end]));
                }
                start = i;
                end = i;
            }
        }
        if start == end {
            res.push(nums[start].to_string());
        } else {
            res.push(format!("{}->{}", nums[start], nums[end]));
        }
        res

=======

        let mut result = vec![];
        let mut start = 0;
        let mut end = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] + 1 {
                end = i;
            } else {
                if start == end {
                    result.push(format!("{}", nums[start]));
                } else {
                    result.push(format!("{}->{}", nums[start], nums[end]));
                }
                start = i;
                end = i;
            }
        }
        if start == end {
            result.push(format!("{}", nums[start]));
        } else {
            result.push(format!("{}->{}", nums[start], nums[end]));
        }
        result
    }
}

=======

        let mut ret = vec![];
        let mut start = 0;
        let mut end = 0;
        for i in 1..nums.len() {
            if nums[i] - nums[i - 1] == 1 {
                end = i;
            } else {
                if start == end {
                    ret.push(format!("{}", nums[start]));
                } else {
                    ret.push(format!("{}->{}", nums[start], nums[end]));
                }
                start = i;
                end = i;
            }
        }
        if start == end {
            ret.push(format!("{}", nums[start]));
        } else {
            ret.push(format!("{}->{}", nums[start], nums[end]));
        }
        ret
    }
}

=======

        let mut res = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut i = 0;
        while i < nums.len() {
            start = nums[i];
            end = start;
            while i < nums.len() - 1 && nums[i] + 1 == nums[i + 1] {
                i += 1;
                end = nums[i];
            }
            res.push(if start == end {
                start.to_string()
            } else {
                format!("{}->{}", start, end)
            });
            i += 1;
        }
        res

=======

        if nums.is_empty() {
            return vec![];
        }
        let mut res = vec![];
        let mut l = 0;
        let mut r = 0;
        while r < nums.len() {
            if r + 1 < nums.len() && nums[r] + 1 == nums[r + 1] {
                r += 1;
            } else {
                if l == r {
                    res.push(nums[l].to_string());
                } else {
                    res.push(format!("{}->{}", nums[l], nums[r]));
                }
                l = r + 1;
                r = l;
            }
        }
        res

=======

        let mut res = vec![];
        let mut start = 0;
        for i in 1..nums.len() {
            if nums[i] != nums[i-1] + 1 {
                if i-1 == start {
                    res.push(nums[start].to_string());
                } else {
                    res.push(format!("{}->{}", nums[start], nums[i-1]));
                }
                start = i;
            }
        }
        if start == nums.len() - 1 {
            res.push(nums[start].to_string());
        } else if start < nums.len() {
            res.push(format!("{}->{}", nums[start], nums[nums.len()-1]));
        }
        res
    }
}

=======

        
    }
}
