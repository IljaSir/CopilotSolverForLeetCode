Synthesizing 10/10 solutions

=======

        let n = distance.len();
        let start = start as usize;
        let destination = destination as usize;
        let mut clockwise = 0;
        let mut counterclockwise = 0;
        for i in 0..n {
            if start < destination {
                if i >= start && i < destination {
                    clockwise += distance[i];
                } else {
                    counterclockwise += distance[i];
                }
            } else {
                if i >= destination && i < start {
                    counterclockwise += distance[i];
                } else {
                    clockwise += distance[i];
                }
            }
        }
        clockwise.min(counterclockwise)

=======

        let mut s = start;
        let mut d = destination;
        if s > d {
            std::mem::swap(&mut s, &mut d);
        }
        let mut clockwise = 0;
        let mut counterclockwise = 0;
        for i in 0..distance.len() {
            if i as i32 >= s && i as i32 < d {
                clockwise += distance[i];
            } else {
                counterclockwise += distance[i];
            }
        }
        std::cmp::min(clockwise, counterclockwise)

=======

        let mut clockwise = 0;
        let mut counter_clockwise = 0;
        let (mut start, mut destination) = (start as usize, destination as usize);
        if start > destination {
            std::mem::swap(&mut start, &mut destination);
        }
        for i in start..destination {
            clockwise += distance[i];
        }
        for i in 0..start {
            counter_clockwise += distance[i];
        }
        for i in destination..distance.len() {
            counter_clockwise += distance[i];
        }
        clockwise.min(counter_clockwise)

=======

        let (start, destination) = (start as usize, destination as usize);
        let (mut clockwise, mut counter_clockwise) = (0, 0);
        let mut i = start;
        while i != destination {
            clockwise += distance[i];
            i = (i + 1) % distance.len();
        }
        i = destination;
        while i != start {
            counter_clockwise += distance[i];
            i = (i + 1) % distance.len();
        }
        clockwise.min(counter_clockwise)

=======

        let mut clock_wise = 0;
        let mut counter_clock_wise = 0;
        let mut i = start;
        while i != destination {
            clock_wise += distance[i as usize];
            i = (i + 1) % distance.len() as i32;
        }
        i = destination;
        while i != start {
            counter_clock_wise += distance[i as usize];
            i = (i + 1) % distance.len() as i32;
        }
        clock_wise.min(counter_clock_wise)

=======

        let mut sum = 0;
        let mut sum2 = 0;
        let mut start = start as usize;
        let mut destination = destination as usize;
        if start > destination {
            std::mem::swap(&mut start, &mut destination);
        }
        for i in 0..distance.len() {
            if i < start || i >= destination {
                sum += distance[i];
            } else {
                sum2 += distance[i];
            }
        }
        if sum < sum2 {
            sum
        } else {
            sum2
        }

=======

        let mut total = 0;
        let mut clockwise = 0;
        let mut i = start;
        while i != destination {
            total += distance[i as usize];
            clockwise += distance[i as usize];
            i = (i + 1) % distance.len() as i32;
        }
        let counter_clockwise = total - clockwise;
        clockwise.min(counter_clockwise)
    }
}

=======

        let mut sum = 0;
        let mut sum2 = 0;
        let mut i = start;
        let mut j = destination;
        if i > j {
            std::mem::swap(&mut i, &mut j);
        }
        while i < j {
            sum += distance[i as usize];
            i += 1;
        }
        while j < distance.len() as i32 {
            sum2 += distance[j as usize];
            j += 1;
        }
        j = 0;
        while j < start {
            sum2 += distance[j as usize];
            j += 1;
        }
        std::cmp::min(sum, sum2)

=======

        let n = distance.len();
        let (mut sum, mut min) = (0, 0);
        for i in 0..n {
            sum += distance[i];
            let (s, d) = (start as usize, destination as usize);
            if (s < d && s <= i && i < d) || (s > d && (s <= i || i < d)) {
                min += distance[i];
            }
        }
        min.min(sum - min)

=======

        let mut d = distance;
        if start > destination {
            d.rotate_right(start as usize);
            d.rotate_left(destination as usize);
        } else {
            d.rotate_left(start as usize);
            d.rotate_right(destination as usize);
        }
        let mut sum = 0;
        for i in 1..d.len() {
            sum += d[i];
        }
        sum
