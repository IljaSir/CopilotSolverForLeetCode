Synthesizing 10/10 solutions

=======

        let mut res = vec![];
        let mut start = 0;
        let mut end = 0;
        for i in 1..s.len() {
            if s.as_bytes()[i] == s.as_bytes()[i-1] {
                end += 1;
            } else {
                if end - start >= 2 {
                    res.push(vec![start as i32, end as i32]);
                }
                start = i;
                end = i;
            }
        }
        if end - start >= 2 {
            res.push(vec![start as i32, end as i32]);
        }
        res

=======

        let s = s.as_bytes();
        let mut result = vec![];
        let mut start = 0;
        let mut end = 0;
        for i in 1..s.len() {
            if s[i] == s[i - 1] {
                end += 1;
            } else {
                if end - start >= 2 {
                    result.push(vec![start as i32, end as i32]);
                }
                start = i;
                end = i;
            }
        }
        if end - start >= 2 {
            result.push(vec![start as i32, end as i32]);
        }
        result

=======

        let mut res = vec![];
        let (mut start, mut end) = (0, 0);
        for i in 1..s.len() {
            if s.as_bytes()[i] == s.as_bytes()[i-1] {
                end = i as i32;
            } else {
                if end - start >= 2 {
                    res.push(vec![start, end]);
                }
                start = i as i32;
                end = i as i32;
            }
        }
        if end - start >= 2 {
            res.push(vec![start, end]);
        }
        res

=======

        let mut result = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut prev = s.chars().nth(0).unwrap();
        for (i, c) in s.chars().enumerate() {
            if c == prev {
                end = i as i32;
            } else {
                if end - start >= 2 {
                    result.push(vec![start, end]);
                }
                start = i as i32;
                end = i as i32;
            }
            prev = c;
        }
        if end - start >= 2 {
            result.push(vec![start, end]);
        }
        result

=======

        let mut res = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut last = s.chars().nth(0).unwrap();
        for (i, c) in s.chars().enumerate() {
            if c == last {
                end = i as i32;
            } else {
                if end - start >= 2 {
                    res.push(vec![start, end]);
                }
                start = i as i32;
                end = i as i32;
                last = c;
            }
        }
        if end - start >= 2 {
            res.push(vec![start, end]);
        }
        res

=======

        let mut result = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut prev = s.chars().next().unwrap();
        for (i, c) in s.chars().enumerate() {
            if c == prev {
                end += 1;
            } else {
                if end - start >= 2 {
                    result.push(vec![start as i32, end as i32 - 1]);
                }
                start = i;
                end = i + 1;
                prev = c;
            }
        }
        if end - start >= 2 {
            result.push(vec![start as i32, end as i32 - 1]);
        }
        result

=======

        let mut ans = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut prev = s.chars().nth(0).unwrap();
        for (i, c) in s.chars().enumerate() {
            if c == prev {
                end = i as i32;
            } else {
                if end - start >= 2 {
                    ans.push(vec![start, end]);
                }
                start = i as i32;
                end = i as i32;
                prev = c;
            }
        }
        if end - start >= 2 {
            ans.push(vec![start, end]);
        }
        ans

=======

        let mut res = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut pre = ' ';
        for (i, c) in s.chars().enumerate() {
            if c == pre {
                end = i as i32;
            } else {
                if end - start >= 2 {
                    res.push(vec![start, end]);
                }
                start = i as i32;
                end = i as i32;
            }
            pre = c;
        }
        if end - start >= 2 {
            res.push(vec![start, end]);
        }
        res

=======

        let mut ret = vec![];
        let mut i = 0;
        let mut j = 0;
        let mut c = s.chars().nth(0).unwrap();
        while j < s.len() {
            if s.chars().nth(j).unwrap() == c {
                j += 1;
            } else {
                if j - i >= 3 {
                    ret.push(vec![i as i32, (j - 1) as i32]);
                }
                i = j;
                c = s.chars().nth(i).unwrap();
            }
        }
        if j - i >= 3 {
            ret.push(vec![i as i32, (j - 1) as i32]);
        }
        ret

=======

        let mut ret = Vec::new();
        let mut start = 0;
        let mut end = 0;
        let mut prev = ' ';
        let mut count = 0;
        for c in s.chars() {
            if c != prev {
                if count >= 3 {
                    ret.push(vec![start, end]);
                }
                start = end;
                count = 0;
            }
            count += 1;
            end += 1;
            prev = c;
        }
        if count >= 3 {
            ret.push(vec![start, end]);
        }
        ret
