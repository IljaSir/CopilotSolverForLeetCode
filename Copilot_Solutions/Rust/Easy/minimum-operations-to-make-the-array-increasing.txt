Synthesizing 10/10 solutions

=======

        let mut res = 0;
        for i in 1..nums.len() {
            if nums[i] <= nums[i - 1] {
                res += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        res

=======

        let mut res = 0;
        for i in 1..nums.len() {
            if nums[i] <= nums[i-1] {
                res += nums[i-1] + 1 - nums[i];
                nums[i] = nums[i-1] + 1;
            }
        }
        res
    }
}

=======

        let mut count = 0;
        for i in 1..nums.len() {
            if nums[i] <= nums[i-1] {
                count += nums[i-1] + 1 - nums[i];
                nums[i] = nums[i-1] + 1;
            }
        }
        count

=======

        let mut ans = 0;
        let mut prev = nums[0];
        for i in 1..nums.len() {
            if nums[i] <= prev {
                ans += prev - nums[i] + 1;
                prev += 1;
            } else {
                prev = nums[i];
            }
        }
        ans

=======

        let mut count = 0;
        for i in 1..nums.len() {
            if nums[i] > nums[i - 1] {
                continue;
            }
            count += nums[i - 1] - nums[i] + 1;
            nums[i] = nums[i - 1] + 1;
        }
        count
    }
}

=======

        let mut ans = 0;
        let mut pre = nums[0];
        for i in 1..nums.len() {
            if nums[i] <= pre {
                ans += pre + 1 - nums[i];
                pre += 1;
            } else {
                pre = nums[i];
            }
        }
        ans

=======

        let mut ret = 0;
        let mut pre = nums[0];
        for i in 1..nums.len() {
            if nums[i] <= pre {
                ret += pre - nums[i] + 1;
                pre += 1;
            } else {
                pre = nums[i];
            }
        }
        ret

=======

        let mut res = 0;
        let mut prev = nums[0];
        for &num in nums.iter().skip(1) {
            if num <= prev {
                res += prev - num + 1;
                prev += 1;
            } else {
                prev = num;
            }
        }
        res
    }
}

=======

        let mut ops = 0;
        let mut last = nums[0];
        for n in nums.iter().skip(1) {
            if *n <= last {
                ops += last - n + 1;
                last += 1;
            } else {
                last = *n;
            }
        }
        ops

=======

        nums.iter().skip(1).fold((0, nums[0]), |(mut ops, mut prev), &cur| {
            if cur <= prev {
                ops += prev - cur + 1;
                prev += 1;
            } else {
                prev = cur;
            }
            (ops, prev)
        }).0
