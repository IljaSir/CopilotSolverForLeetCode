Synthesizing 10/10 solutions

=======

        let mut depth = 0;
        let mut max_depth = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    depth += 1;
                    max_depth = max_depth.max(depth);
                }
                ')' => {
                    depth -= 1;
                }
                _ => {}
            }
        }
        max_depth
    }
}

=======

        let mut max = 0;
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                count += 1;
                if count > max {
                    max = count;
                }
            } else if c == ')' {
                count -= 1;
            }
        }
        max
    }
}

=======

        let mut max_depth = 0;
        let mut depth = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    depth += 1;
                    if depth > max_depth {
                        max_depth = depth;
                    }
                }
                ')' => {
                    depth -= 1;
                }
                _ => {}
            }
        }
        max_depth

=======

        let mut max = 0;
        let mut count = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    count += 1;
                    if count > max {
                        max = count;
                    }
                }
                ')' => {
                    count -= 1;
                }
                _ => {}
            }
        }
        max

=======

        let mut max = 0;
        let mut depth = 0;
        for c in s.chars() {
            if c == '(' {
                depth += 1;
                if depth > max {
                    max = depth;
                }
            } else if c == ')' {
                depth -= 1;
            }
        }
        max

=======

        let mut count = 0;
        let mut max = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    count += 1;
                    if count > max {
                        max = count;
                    }
                },
                ')' => {
                    count -= 1;
                },
                _ => {},
            }
        }
        max

=======

        let mut max = 0;
        let mut cur = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    cur += 1;
                    if cur > max {
                        max = cur;
                    }
                }
                ')' => {
                    cur -= 1;
                }
                _ => {}
            }
        }
        max

=======

        let mut max_depth = 0;
        let mut depth = 0;
        for c in s.chars() {
            if c == '(' {
                depth += 1;
            } else if c == ')' {
                depth -= 1;
            }
            max_depth = max_depth.max(depth);
        }
        max_depth

=======

        let mut max = 0;
        let mut cur = 0;
        for c in s.chars() {
            if c == '(' {
                cur += 1;
                if cur > max {
                    max = cur;
                }
            } else if c == ')' {
                cur -= 1;
            }
        }
        max

=======

        let mut stack = Vec::new();
        let mut max_depth = 0;
        for c in s.chars() {
            match c {
                '(' => {
                    stack.push('(');
                    max_depth = max_depth.max(stack.len() as i32);
                }
                ')' => {
                    stack.pop();
                }
                _ => {}
            }
        }
        max_depth
