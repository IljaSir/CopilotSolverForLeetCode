Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut upper = vec![false; 26];
        let mut lower = vec![false; 26];
        for c in s.chars() {
            if c.is_uppercase() {
                upper[c as usize - 'A' as usize] = true;
            } else {
                lower[c as usize - 'a' as usize] = true;
            }
        }
        for i in (0..26).rev() {
            if upper[i] && lower[i] {
                return (i + 'A' as usize) as u8 as char;
            }
        }
        "".to_string()

=======

        let mut a = 0;
        for c in s.chars() {
            if c.is_lowercase() {
                a |= 1 << (c as u8 - b'a');
            } else {
                a |= 1 << (c as u8 - b'A');
            }
        }
        let mut c = b'A';
        for i in (0..26).rev() {
            if a & (1 << i) > 0 {
                c += i as u8;
                break;
            }
        }
        if c > b'Z' {
            String::from("")
        } else {
            String::from_utf8(vec![c]).unwrap()
        }

=======

        let mut upper = vec![false; 26];
        let mut lower = vec![false; 26];
        let mut ans = "".to_string();
        for c in s.chars() {
            if c.is_uppercase() {
                upper[c as usize - 'A' as usize] = true;
            } else {
                lower[c as usize - 'a' as usize] = true;
            }
        }
        for i in (0..26).rev() {
            if upper[i] && lower[i] {
                ans.push((i + 'A' as usize) as u8 as char);
                break;
            }
        }
        ans

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        chars.sort_by(|a, b| b.cmp(a));
        for c in chars {
            if c.is_uppercase() && chars.contains(&c.to_ascii_lowercase()) {
                return c.to_string();
            }
        }
        return String::new();

=======

        let mut s = s;
        s.make_ascii_uppercase();
        let mut result = String::new();
        for c in s.chars() {
            if s.contains(&c.to_lowercase().to_string()) {
                result.push(c);
                break;
            }
        }
        result

=======

        let mut s = s.as_bytes().to_vec();
        s.sort();
        let mut max = 0;
        let mut cnt = 0;
        for i in 0..s.len() {
            if s[i].is_ascii_uppercase() {
                cnt += 1;
                if cnt == 2 {
                    max = i;
                    break;
                }
            } else {
                cnt = 0;
            }
        }
        if max == 0 {
            String::new()
        } else {
            String::from_utf8(vec![s[max - 1]]).unwrap()
        }
    }
}

=======

        let mut max = 0;
        let mut max_char = ' ';
        for c in s.chars() {
            let val = c as u8;
            if val >= 65 && val <= 90 {
                if val > max {
                    max = val;
                    max_char = c;
                }
            } else if val >= 97 && val <= 122 {
                if val - 32 > max {
                    max = val - 32;
                    max_char = c.to_ascii_uppercase();
                }
            }
        }
        if max == 0 {
            return String::new();
        }
        return max_char.to_string();
    }
}

=======

        let mut s = s;
        s.make_ascii_uppercase();
        let mut letters = s.as_bytes();
        let mut max = 0;
        for i in 0..letters.len() {
            if letters[i] > max {
                max = letters[i];
            }
        }
        let mut result = String::new();
        for i in 0..letters.len() {
            if letters[i] == max && s.as_bytes()[i] != max {
                result.push(s.as_bytes()[i] as char);
            }
        }
        result

=======

        let mut s = s.as_bytes();
        s.sort();
        let mut it = s.iter();
        let mut prev = it.next();
        for c in it {
            if let Some(prev) = prev {
                if (prev.is_ascii_lowercase() && c.is_ascii_uppercase() && prev.to_ascii_uppercase() == *c) || (prev.is_ascii_uppercase() && c.is_ascii_lowercase() && prev.to_ascii_lowercase() == *c) {
                    return String::from_utf8(vec![*c]).unwrap();
                }
            }
            prev = Some(c);
        }
        "".to_string()
