Synthesizing 10/10 solutions

=======

        if num == 0 {
            return "0".to_string();
        }
        let mut result = String::new();
        let mut n = num;
        let mut i = 0;
        while n != 0 && i < 8 {
            let last = n & 0xf;
            if last < 10 {
                result.push_str(&(last + 48).to_string());
            } else {
                result.push_str(&(last + 87).to_string());
            }
            n >>= 4;
            i += 1;
        }
        result.chars().rev().collect()

=======

        let mut n = num;
        if n == 0 {
            return "0".to_string();
        }
        let mut res = String::new();
        let mut count = 0;
        while n != 0 && count < 8 {
            let r = n & 0xf;
            if r < 10 {
                res.insert(0, (r + '0' as i32) as u8 as char);
            } else {
                res.insert(0, (r - 10 + 'a' as i32) as u8 as char);
            }
            n = n >> 4;
            count += 1;
        }
        res

=======

        if num == 0 {
            return "0".to_string();
        }
        let mut num = num;
        let mut res = String::new();
        let mut map = vec!['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];
        let mut mask = 15;
        while num != 0 {
            res.push(map[(num & mask) as usize]);
            num = num >> 4;
        }
        res.chars().rev().collect()

=======

        let mut num = num;
        let mut hex = String::new();
        if num == 0 {
            return "0".to_string();
        }
        while num != 0 {
            let digit = num & 0xf;
            let c = match digit {
                0..=9 => (digit + '0' as i32) as u8 as char,
                10..=15 => (digit - 10 + 'a' as i32) as u8 as char,
                _ => panic!("invalid digit: {}", digit),
            };
            hex.push(c);
            num >>= 4;
        }
        hex.chars().rev().collect()
    }
}

=======

        let mut num = num as u32;
        if num == 0 {
            return "0".to_string();
        }
        let mut result = String::new();
        let mut digits = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
        while num > 0 {
            result.push(digits[(num % 16) as usize]);
            num /= 16;
        }
        result.chars().rev().collect()

=======

        let mut result = String::new();
        let mut n = num;
        if n == 0 {
            return "0".to_string();
        }
        for _ in 0..8 {
            let mut t = n & 0xf;
            if t < 10 {
                t += 48;
            } else {
                t += 87;
            }
            result.insert(0, t as u8 as char);
            n >>= 4;
        }
        result.trim_start_matches('0').to_string()

=======

        let mut result = String::new();
        let mut n = num;
        if n == 0 {
            return "0".to_string();
        }
        
        for _ in 0..8 {
            let last_digit = n & 15;
            if last_digit < 10 {
                result.push((last_digit + 48) as u8 as char);
            } else {
                result.push((last_digit + 87) as u8 as char);
            }
            n >>= 4;
        }
        
        result.chars().rev().collect()

=======

        let mut n = num as u32;
        if n == 0 { return "0".to_string(); }
        let mut result = String::new();
        for _ in 0..8 {
            let mut digit = (n & 0xf) as u8;
            if digit < 10 {
                digit += b'0';
            } else {
                digit += b'a' - 10;
            }
            result.push(digit as char);
            n >>= 4;
        }
        result.chars().rev().collect::<String>().trim_start_matches('0').to_string()

=======

        if num == 0 { return "0".to_string(); }
        let mut num = num;
        let mut result = String::new();
        let mut count = 0;
        let mut hex = vec!['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
        while count < 8 {
            let index = num & 15;
            num = num >> 4;
            result.push(hex[index as usize]);
            count += 1;
        }
        result.chars().rev().collect()

=======

        let mut n = num;
        if n < 0 {
            n += 2_i32.pow(32);
        }
        let mut res = String::new();
        let mut mask = 0b1111;
        while n > 0 {
            let cur = n & mask;
            if cur < 10 {
                res.push((cur as u8 + '0' as u8) as char);
            } else {
                res.push((cur as u8 - 10 + 'a' as u8) as char);
            }
            n >>= 4;
        }
        if res.is_empty() {
            res.push('0');
        }
        res.chars().rev().collect()
