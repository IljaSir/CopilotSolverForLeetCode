Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let reversed1 = num.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
        let reversed2 = reversed1.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
        reversed2 == num
    }
}

=======

        let mut num = num;
        let mut reversed1 = 0;
        while num > 0 {
            reversed1 = reversed1 * 10 + num % 10;
            num /= 10;
        }
        let mut reversed2 = 0;
        while reversed1 > 0 {
            reversed2 = reversed2 * 10 + reversed1 % 10;
            reversed1 /= 10;
        }
        reversed2 == num
    }
}

=======

        let mut reversed1 = 0;
        let mut reversed2 = 0;
        let mut num = num;
        while num > 0 {
            reversed1 = reversed1 * 10 + num % 10;
            num /= 10;
        }
        num = reversed1;
        while num > 0 {
            reversed2 = reversed2 * 10 + num % 10;
            num /= 10;
        }
        reversed2 == reversed1
    }
}

=======

        let mut num = num;
        let mut reversed = 0;
        while num > 0 {
            reversed = reversed * 10 + num % 10;
            num /= 10;
        }
        num = num;
        reversed = reversed;
        while num > 0 {
            if num % 10 != reversed % 10 {
                return false;
            }
            num /= 10;
            reversed /= 10;
        }
        true

=======

        let mut num = num;
        let mut reversed = 0;
        while num > 0 {
            reversed = reversed * 10 + num % 10;
            num /= 10;
        }
        num = num;
        let mut reversed2 = 0;
        while num > 0 {
            reversed2 = reversed2 * 10 + num % 10;
            num /= 10;
        }
        reversed == reversed2

=======

        let reversed1 = num.to_string().chars().rev().collect::<String>();
        let reversed2 = reversed1.to_string().chars().rev().collect::<String>();
        num == reversed2.parse::<i32>().unwrap()

=======

        let mut n = num;
        let mut r = 0;
        while n > 0 {
            r = r * 10 + (n % 10);
            n /= 10;
        }
        num == r
    }
}

=======

        let mut reversed = 0;
        let mut num = num;
        while num > 0 {
            reversed = reversed * 10 + num % 10;
            num /= 10;
        }
        reversed == num || reversed / 10 == num
