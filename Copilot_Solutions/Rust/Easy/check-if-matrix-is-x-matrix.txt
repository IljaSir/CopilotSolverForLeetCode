Synthesizing 10/10 solutions

=======

        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if i == j || i + j == n - 1 {
                    if grid[i][j] == 0 {
                        return false;
                    }
                } else {
                    if grid[i][j] != 0 {
                        return false;
                    }
                }
            }
        }
        true
    }
}

=======

        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if i == j || i + j == n - 1 {
                    if grid[i][j] == 0 {
                        return false;
                    }
                } else {
                    if grid[i][j] != 0 {
                        return false;
                    }
                }
            }
        }
        true

=======

        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if i == j {
                    if grid[i][j] == 0 {
                        return false;
                    }
                } else if i + j == n - 1 {
                    if grid[i][j] == 0 {
                        return false;
                    }
                } else {
                    if grid[i][j] != 0 {
                        return false;
                    }
                }
            }
        }
        true
    }
}

=======

        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if i == j || i == n - j - 1 {
                    if grid[i][j] == 0 {
                        return false;
                    }
                } else {
                    if grid[i][j] != 0 {
                        return false;
                    }
                }
            }
        }
        true
    }
}

=======

        let n = grid.len();
        let mut i = 0;
        let mut j = 0;
        while i < n {
            if grid[i][j] == 0 {
                return false;
            }
            i += 1;
            j += 1;
        }
        i = 0;
        j = n - 1;
        while i < n {
            if grid[i][j] == 0 {
                return false;
            }
            i += 1;
            j -= 1;
        }
        for i in 0..n {
            for j in 0..n {
                if i == j || i + j == n - 1 {
                    continue;
                }
                if grid[i][j] != 0 {
                    return false;
                }
            }
        }
        true

=======

        let n = grid.len();
        let mut row = 0;
        let mut col = 0;
        while row < n && col < n {
            if grid[row][col] == 0 {
                return false;
            }
            row += 1;
            col += 1;
        }
        row = 0;
        col = n - 1;
        while row < n && col >= 0 {
            if grid[row][col] == 0 {
                return false;
            }
            row += 1;
            col -= 1;
        }
        for i in 0..n {
            for j in 0..n {
                if i != j && i + j != n - 1 && grid[i][j] != 0 {
                    return false;
                }
            }
        }
        true

=======

        let mut is_x = true;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if i == j || i + j == grid.len() - 1 {
                    if grid[i][j] == 0 {
                        is_x = false;
                        break;
                    }
                } else {
                    if grid[i][j] != 0 {
                        is_x = false;
                        break;
                    }
                }
            }
        }
        is_x
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = grid.len() - 1;
        let mut l = grid.len() - 1;
        while i < grid.len() && j < grid.len() && k >= 0 && l >= 0 {
            if grid[i][j] == 0 || grid[k][l] == 0 {
                return false;
            }
            if grid[i][j] != 0 && grid[k][l] != 0 {
                count += 1;
            }
            i += 1;
            j += 1;
            k -= 1;
            l -= 1;
        }
        if count == grid.len() {
            for i in 0..grid.len() {
                for j in 0..grid.len() {
                    if i != j && i + j != grid.len() - 1 && grid[i][j] != 0 {
                        return false;
                    }
                }
            }
            return true;
        }
        false
    }
}

=======

        let mut n = grid.len();
        let mut i = 0;
        let mut j = 0;
        let mut k = n - 1;
        let mut l = n - 1;
        let mut is_x_matrix = true;
        while i < n && j < n && k >= 0 && l >= 0 {
            if grid[i][j] == 0 || grid[k][l] == 0 {
                is_x_matrix = false;
                break;
            }
            if i == 0 || i == n - 1 {
                j += 1;
                l -= 1;
            } else {
                j += 1;
                k -= 1;
            }
            i += 1;
        }
        if is_x_matrix {
            for i in 0..n {
                for j in 0..n {
                    if i == j || i + j == n - 1 {
                        continue;
                    } else {
                        if grid[i][j] != 0 {
                            is_x_matrix = false;
                            break;
                        }
                    }
                }
            }
        }
        is_x_matrix

=======

        let mut flag: bool = true;
        let mut i: usize = 0;
        let mut j: usize = 0;
        let mut k: usize = 0;
        let mut m: usize = grid.len() - 1;
        while i < grid.len() {
            j = 0;
            while j < grid.len() {
                if i == j {
                    if grid[i][j] == 0 {
                        flag = false;
                    }
                } else if i + j == m {
                    if grid[i][j] == 0 {
                        flag = false;
                    }
                } else if grid[i][j] != 0 {
                    flag = false;
                }
                j += 1;
            }
            i += 1;
        }
        flag
