Synthesizing 10/10 solutions

=======

        let c = coordinates.as_bytes();
        (c[0] - b'a' + c[1] - b'0') % 2 != 0

=======

        let c = coordinates.as_bytes();
        let c1 = c[0] - b'a';
        let c2 = c[1] - b'1';
        (c1 + c2) % 2 == 1

=======

        let mut chars = coordinates.chars();
        let c1 = chars.next().unwrap();
        let c2 = chars.next().unwrap();
        let c1 = c1 as i32 - 'a' as i32;
        let c2 = c2 as i32 - '1' as i32;
        (c1 + c2) % 2 == 0

=======

        let mut iter = coordinates.chars();
        let col = iter.next().unwrap() as u8 - b'a';
        let row = iter.next().unwrap() as u8 - b'1';
        (col + row) % 2 == 1

=======

        let mut c = coordinates.chars();
        let x = c.next().unwrap() as u8;
        let y = c.next().unwrap() as u8;
        
        (x + y) % 2 == 1

=======

        let mut s = coordinates.chars();
        let x = s.next().unwrap() as i32;
        let y = s.next().unwrap() as i32;
        (x + y) % 2 == 1

=======

        let mut c = coordinates.chars();
        let a = c.next().unwrap();
        let b = c.next().unwrap();
        let n = (a as u8 - 'a' as u8) as i32;
        let m = (b as u8 - '1' as u8) as i32;
        (n + m) % 2 == 1

=======

        let mut sum = 0;
        let mut count = 0;
        for c in coordinates.chars() {
            if c.is_digit(10) {
                sum += c.to_digit(10).unwrap();
            } else {
                sum += c as u32 - 'a' as u32 + 1;
            }
            count += 1;
            if count == 2 {
                break;
            }
        }
        sum % 2 == 0

=======

        let (c1, c2) = (coordinates.chars().nth(0).unwrap(), coordinates.chars().nth(1).unwrap());
        let r = (c1 as u8 - b'a') + (c2 as u8 - b'1');
        r % 2 == 1

=======

        let mut odd = false;
        for c in coordinates.chars() {
            if c.is_ascii_alphabetic() {
                odd = c as u8 % 2 == 0;
            } else {
                odd = c as u8 % 2 != 0;
            }
        }
        odd
