Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if n <= 0 {
            return false;
        }
        let mut n = n;
        while n % 2 == 0 {
            n /= 2;
        }
        n == 1

=======

        n > 0 && n.count_ones() == 1

=======

        if n == 0 {
            return false;
        }
        let mut n = n;
        while n % 2 == 0 {
            n /= 2;
        }
        n == 1

=======

        if n == 0 {
            return false;
        }
        if n == 1 {
            return true;
        }
        if n % 2 != 0 {
            return false;
        }
        Self::is_power_of_two(n / 2)

=======

        n > 0 && n & (n - 1) == 0

=======

        if n < 1 {
            return false;
        }
        let mut n = n;
        while n % 2 == 0 {
            n /= 2;
        }
        n == 1

=======

        if n <= 0 {
            false
        } else {
            (n & (n - 1)) == 0
        }

=======

        if n <= 0 {
            return false;
        }
        let mut n = n;
        while n > 1 {
            if n % 2 == 1 {
                return false;
            }
            n /= 2;
        }
        true

=======

        if n == 0 {
            return false;
        }
        n & (n - 1) == 0
