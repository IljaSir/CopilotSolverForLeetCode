Synthesizing 10/10 solutions

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let target = sum / 3;
        let mut sum = 0;
        let mut count = 0;
        for &num in arr.iter() {
            sum += num;
            if sum == target {
                sum = 0;
                count += 1;
            }
        }
        count >= 3
    }
}

=======

        let sum: i32 = arr.iter().sum();
        if sum % 3 != 0 {
            return false;
        }
        let target = sum / 3;
        let mut count = 0;
        let mut sum = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum == target {
                sum = 0;
                count += 1;
            }
        }
        count >= 3
    }
}

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let mut left = 0;
        let mut right = arr.len() - 1;
        let mut left_sum = arr[left];
        let mut right_sum = arr[right];
        while left + 1 < right {
            if left_sum == right_sum && left_sum == sum / 3 {
                return true;
            }
            if left_sum != sum / 3 {
                left += 1;
                left_sum += arr[left];
            }
            if right_sum != sum / 3 {
                right -= 1;
                right_sum += arr[right];
            }
        }
        false

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let part = sum / 3;
        let mut count = 0;
        let mut sum = 0;
        for i in arr {
            sum += i;
            if sum == part {
                count += 1;
                sum = 0;
            }
        }
        count == 3

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let part = sum / 3;
        let mut count = 0;
        let mut cur = 0;
        for i in 0..arr.len() {
            cur += arr[i];
            if cur == part {
                count += 1;
                cur = 0;
            }
        }
        count >= 3
    }
}

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let target = sum / 3;
        let mut count = 0;
        let mut sub_sum = 0;
        for i in 0..arr.len() {
            sub_sum += arr[i];
            if sub_sum == target {
                count += 1;
                sub_sum = 0;
            }
        }
        count >= 3
    }
}

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let part = sum / 3;
        let mut count = 0;
        let mut temp = 0;
        for i in arr {
            temp += i;
            if temp == part {
                count += 1;
                temp = 0;
            }
        }
        count == 3

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let mut sum = sum / 3;
        let mut cnt = 0;
        for i in 0..arr.len() {
            sum -= arr[i];
            if sum == 0 {
                sum = sum / 3;
                cnt += 1;
                if cnt == 3 {
                    return true;
                }
            }
        }
        false

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 { return false; }
        let mut count = 0;
        let mut total = 0;
        for i in 0..arr.len() {
            total += arr[i];
            if total == sum / 3 {
                count += 1;
                total = 0;
            }
        }
        count >= 3
    }
}

=======

        let sum = arr.iter().sum::<i32>();
        if sum % 3 != 0 {
            return false;
        }
        let mut count = 0;
        let mut sum = 0;
        for &n in arr.iter() {
            sum += n;
            if sum == sum / 3 {
                count += 1;
                sum = 0;
            }
        }
        count == 3
    }
}
