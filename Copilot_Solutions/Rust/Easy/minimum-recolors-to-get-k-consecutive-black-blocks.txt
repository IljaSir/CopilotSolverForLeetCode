Synthesizing 7/10 solutions

=======

        
    }
}

=======

        let n = blocks.len();
        let mut dp = vec![vec![std::i32::MAX; n + 1]; n + 1];
        for i in 0..=n {
            dp[i][0] = 0;
        }
        for i in 0..n {
            let mut cnt = 0;
            for j in i..n {
                cnt += if blocks.chars().nth(j).unwrap() == 'W' { 1 } else { 0 };
                for p in 0..=j - i + 1 {
                    let q = j - i + 1 - p;
                    dp[j + 1][p] = dp[j + 1][p].min(dp[i][q] + cnt);
                }
            }
        }
        dp[n][k as usize]
    }
}

=======

        let mut blocks = blocks.chars().collect::<Vec<char>>();
        let mut ans = 0;
        let mut i = 0;
        while i < blocks.len() {
            if blocks[i] == 'B' {
                i += 1;
            } else {
                let mut j = i + 1;
                while j < blocks.len() && blocks[j] == 'W' {
                    j += 1;
                }
                let mut k = 0;
                while i + k < j {
                    blocks[i + k] = 'B';
                    k += 1;
                }
                ans += (j - i - 1) / k as usize;
                i = j;
            }
        }
        ans as i32

=======

        let mut ans = 0;
        let mut cnt = 0;
        let mut pre = 'W';
        for c in blocks.chars() {
            if c == pre {
                cnt += 1;
            } else {
                ans += (cnt + k - 1) / k - 1;
                cnt = 1;
                pre = c;
            }
        }
        ans + (cnt + k - 1) / k - 1

=======

        let n = blocks.len();
        let blocks = blocks.as_bytes();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n];
        sum[0] = if blocks[0] == b'W' { 1 } else { 0 };
        for i in 1..n {
            sum[i] = sum[i - 1] + if blocks[i] == b'W' { 1 } else { 0 };
        }
        for i in 0..n {
            dp[i][i] = if blocks[i] == b'W' { 1 } else { 0 };
        }
        for i in 0..n {
            for j in i + 1..n {
                dp[i][j] = dp[i][j - 1] + if blocks[j] == b'W' { 1 } else { 0 };
            }
        }
        let mut f = vec![vec![0; n]; n];
        for i in 0..n {
            f[i][i] = if blocks[i] == b'W' { 1 } else { 0 };
        }
        for i in 0..n {
            for j in i + 1..n {
                f[i][j] = f[i][j - 1];
                if j - k as usize >= i {
                    f[i][j] = f[i][j].min(f[i][j - k as usize]);
                    let t = dp[j - k as usize + 1][j];
                    f[i][j] = f[i][j].min(f[i][j - k as usize] + t);
                }
            }
        }
        f[0][n - 1]

=======

        let n = blocks.len();
        let k = k as usize;
        let mut dp = vec![vec![0; n], vec![0; n]];
        let mut b = 0;
        for i in 0..n {
            if blocks.as_bytes()[i] == 'B' as u8 {
                b += 1;
            }
            dp[0][i] = b;
        }
        for i in 1..k {
            let mut b = 0;
            let mut min = std::i32::MAX;
            for j in 0..n {
                if blocks.as_bytes()[j] == 'B' as u8 {
                    b += 1;
                }
                if j >= i {
                    if blocks.as_bytes()[j - i] == 'B' as u8 {
                        b -= 1;
                    }
                    min = min.min(dp[(i - 1) % 2][j - i] + (i + 1 - b));
                }
                dp[i % 2][j] = min;
            }
        }
        dp[(k - 1) % 2][n - 1]

=======

        let mut dp = vec![vec![0; blocks.len()]; blocks.len()];
        let mut sum = vec![0; blocks.len()];
        let mut count = 0;
        let mut res = i32::max_value();
        for (i, c) in blocks.chars().enumerate() {
            count += if c == 'B' { 1 } else { 0 };
            sum[i] = count;
            dp[i][i] = if c == 'W' { 1 } else { 0 };
        }
        for l in 2..=blocks.len() {
            for i in 0..=blocks.len() - l {
                let j = i + l - 1;
                dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1];
                if j - i + 1 >= k as usize {
                    let mut temp = dp[i][j];
                    if i > 0 {
                        temp += sum[i - 1];
                    }
                    if j + 1 < blocks.len() {
                        temp += sum[blocks.len() - 1] - sum[j];
                    }
                    res = res.min(temp);
                }
            }
        }
        res
    }
}
