Synthesizing 10/10 solutions

=======

        let mut res = vec![0; nums.len()];
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if nums[i] > nums[j] {
                    res[i] += 1;
                }
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in 0..nums.len() {
            let mut count = 0;
            for j in 0..nums.len() {
                if nums[i] > nums[j] {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
    }
}

=======

        let mut res = vec![0; nums.len()];
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j && nums[i] > nums[j] {
                    res[i] += 1;
                }
            }
        }
        res
    }
}

=======

        let mut ans = vec![0; nums.len()];
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j && nums[i] > nums[j] {
                    ans[i] += 1;
                }
            }
        }
        ans

=======

        let mut result = vec![];
        for i in 0..nums.len() {
            let mut count = 0;
            for j in 0..nums.len() {
                if nums[i] > nums[j] {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
    }
}

=======

        let mut result = vec![];
        for i in 0..nums.len() {
            let mut count = 0;
            for j in 0..nums.len() {
                if i != j && nums[i] > nums[j] {
                    count += 1;
                }
            }
            result.push(count);
        }
        return result;
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..nums.len() {
            let mut count = 0;
            for j in 0..nums.len() {
                if nums[j] < nums[i] {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
    }
}

=======

        let mut cnt = vec![0; 101];
        for num in nums.iter() {
            cnt[*num as usize] += 1;
        }
        for i in 1..cnt.len() {
            cnt[i] += cnt[i - 1];
        }
        nums.into_iter().map(|num| if num == 0 { 0 } else { cnt[num as usize - 1] }).collect()

=======

        let mut sorted = nums.clone();
        sorted.sort();
        let mut map = std::collections::HashMap::new();
        for (i, num) in sorted.iter().enumerate() {
            if !map.contains_key(num) {
                map.insert(num, i as i32);
            }
        }
        nums.iter().map(|num| map[num]).collect()
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        nums.iter().map(|n| sorted.iter().position(|&m| m == *n).unwrap() as i32).collect()
