Synthesizing 9/10 solutions

=======

        let mut t = time % (n * 2 - 2);
        if t == 0 {
            t = n * 2 - 2;
        }
        if t <= n {
            t
        } else {
            n * 2 - t
        }

=======

        let mut t = time % (2*n - 2);
        if t == 0 {
            t = 2*n - 2;
        }
        if t <= n {
            t
        } else {
            2*n - t
        }

=======

        let mut t = time % (2 * n - 2);
        if t > n {
            t = 2 * n - 2 - t;
        }
        t
    }
}

=======

        let t = time % (2 * n - 2);
        if t == 0 {
            return n;
        }
        if t <= n {
            return t;
        }
        n - (t - n)

=======

        let mut t = time;
        let mut p = 1;
        let mut d = 1;
        while t > 0 {
            p += d;
            if p == n + 1 {
                p = n - 1;
                d = -1;
            } else if p == 0 {
                p = 2;
                d = 1;
            }
            t -= 1;
        }
        p

=======

        let mut time = time;
        let mut direction = 1;
        let mut position = 1;
        while time > 0 {
            time -= 1;
            position += direction;
            if position == n+1 {
                direction = -1;
                position = n-1;
            } else if position == 0 {
                direction = 1;
                position = 2;
            }
        }
        position

=======

        let mut res = 1;
        let mut i = 0;
        while i < time {
            if res == n {
                res -= 1;
            } else if res == 1 {
                res += 1;
            } else {
                res += if i % 2 == 0 { 1 } else { -1 };
            }
            i += 1;
        }
        res

=======

        let time = time % (2 * n - 2);
        let mut time = time as usize;
        let mut direction = true;
        let mut pos = 1;
        while time > 0 {
            if direction {
                pos += 1;
            } else {
                pos -= 1;
            }
            if pos == 1 {
                direction = true;
            } else if pos == n as usize {
                direction = false;
            }
            time -= 1;
        }
        pos as i32

=======

        
    }
}
