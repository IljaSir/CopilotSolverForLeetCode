Synthesizing 10/10 solutions

=======

        let mut s = num.to_string();
        let mut i = 0;
        while i < s.len() {
            if s.as_bytes()[i] == b'6' {
                s.replace_range(i..i+1, "9");
                break;
            }
            i += 1;
        }
        s.parse::<i32>().unwrap()

=======

        let mut num_str = num.to_string();
        for i in 0..num_str.len() {
            if num_str.get(i..i+1).unwrap() == "6" {
                num_str.remove(i);
                num_str.insert(i, '9');
                break;
            }
        }
        num_str.parse::<i32>().unwrap()

=======

        let mut s = num.to_string();
        let mut max = num;
        for i in 0..s.len() {
            if s.as_bytes()[i] == b'6' {
                s.as_bytes_mut()[i] = b'9';
                max = max.max(s.parse::<i32>().unwrap());
                s.as_bytes_mut()[i] = b'6';
            }
        }
        max

=======

        let mut num = num;
        let mut times = 1;
        while num > 0 {
            if num % 10 == 6 {
                return num + 3 * times;
            }
            times *= 10;
            num /= 10;
        }
        num

=======

        let mut n = num;
        let mut max = 0;
        let mut p = 1;
        while n > 0 {
            let d = n % 10;
            if d == 6 {
                max = p * 3;
            }
            n /= 10;
            p *= 10;
        }
        num + max
    }
}

=======

        let mut num_str = num.to_string();
        let mut changed = false;
        for i in 0..num_str.len() {
            if num_str.as_bytes()[i] == 54 && !changed {
                num_str.replace_range(i..i+1, "9");
                changed = true;
            }
        }
        num_str.parse::<i32>().unwrap()

=======

        let mut num = num;
        let mut n = 0;
        let mut i = 1;
        while num > 0 {
            let r = num % 10;
            if r == 6 {
                n = i;
            }
            num /= 10;
            i *= 10;
        }
        if n > 0 {
            num + 3 * n
        } else {
            num
        }
    }
}

=======

        let mut num = num;
        let mut result = 0;
        let mut i = 0;
        while num > 0 {
            let digit = num % 10;
            if digit == 6 && result == 0 {
                result = 9 * 10_i32.pow(i);
            } else {
                result += digit * 10_i32.pow(i);
            }
            num /= 10;
            i += 1;
        }
        result

=======

        let mut num = num;
        let mut max = num;
        let mut i = 1;
        while num > 0 {
            let n = (num % 10).abs();
            if n == 6 {
                let mut new = num + i * 3;
                if new > max {
                    max = new;
                }
            }
            num = num / 10;
            i = i * 10;
        }
        max
    }
}

=======

        let mut n = num;
        let mut max = n;
        let mut i = 0;
        while n > 0 {
            let mut t = n;
            let mut j = 0;
            while t > 0 {
                let d = t % 10;
                if j == i {
                    if d == 6 {
                        t = t + 3;
                    }
                }
                j += 1;
                t = t / 10;
            }
            if t > max {
                max = t;
            }
            i += 1;
            n = n / 10;
        }
        max
    }
}
