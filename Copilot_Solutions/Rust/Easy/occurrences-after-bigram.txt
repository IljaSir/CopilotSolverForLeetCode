Synthesizing 10/10 solutions

=======

        let mut res: Vec<String> = Vec::new();
        let mut words: Vec<&str> = text.split(" ").collect();
        if words.len() < 3 {
            return res;
        }
        for i in 0..words.len()-2 {
            if words[i] == first && words[i+1] == second {
                res.push(words[i+2].to_string());
            }
        }
        res

=======

        let mut res = Vec::new();
        let mut words = text.split_whitespace();
        if let Some(w1) = words.next() {
            if let Some(w2) = words.next() {
                if w1 == first && w2 == second {
                    if let Some(w3) = words.next() {
                        res.push(w3.to_string());
                    }
                }
            }
        }
        for w in words {
            if let Some(w3) = words.next() {
                if w == second {
                    res.push(w3.to_string());
                }
            }
        }
        res

=======

        let mut res = Vec::new();
        let words = text.split(" ").collect::<Vec<&str>>();
        let n = words.len();
        for i in 0..n-2 {
            if words[i] == first && words[i+1] == second {
                res.push(words[i+2].to_string());
            }
        }
        res

=======

        let mut result = vec![];
        let mut words = text.split(' ').peekable();
        while let Some(word) = words.next() {
            if word == first && words.peek() == Some(&second.as_str()) {
                if let Some(third) = words.next() {
                    result.push(third.to_string());
                }
            }
        }
        result
    }
}

=======

        let mut res = vec![];
        let mut words = text.split_whitespace();
        let mut first = first;
        let mut second = second;
        while let Some(third) = words.next() {
            if first == second && second == third {
                continue;
            }
            if first == second {
                res.push(third.to_string());
            }
            first = second;
            second = third.to_string();
        }
        res

=======

        let mut res = vec![];
        let mut words = text.split_whitespace();
        let mut first = first;
        let mut second = second;
        let mut third = words.next();
        while third.is_some() {
            if first == second && second == third.unwrap() {
                third = words.next();
                continue;
            }
            if first == second && second != third.unwrap() {
                first = second;
                second = third.unwrap().to_string();
                third = words.next();
                continue;
            }
            if first != second && second == third.unwrap() {
                first = second;
                second = third.unwrap().to_string();
                third = words.next();
                continue;
            }
            if first != second && second != third.unwrap() {
                first = second;
                second = third.unwrap().to_string();
                third = words.next();
                continue;
            }
        }
        return res;
    }
}

=======

        let mut res: Vec<String> = Vec::new();
        let mut words = text.split_whitespace();
        let mut w1 = words.next();
        let mut w2 = words.next();
        while let Some(w3) = words.next() {
            if w1 == Some(&first.as_str()) && w2 == Some(&second.as_str()) {
                res.push(w3.to_string());
            }
            w1 = w2;
            w2 = Some(w3);
        }
        res

=======

        let mut result = Vec::new();
        let mut words = text.split_whitespace();
        let mut prev = words.next();
        let mut cur = words.next();
        while let (Some(p), Some(c)) = (prev, cur) {
            if p == first && c == second {
                if let Some(t) = words.next() {
                    result.push(t.to_string());
                }
            }
            prev = cur;
            cur = words.next();
        }
        result

=======

        let mut res = Vec::new();
        let mut words = text.split_whitespace();
        let mut first = first;
        let mut second = second;
        let mut third = words.next();
        while let Some(w) = third {
            if first == w {
                if let Some(w) = words.next() {
                    if second == w {
                        if let Some(w) = words.next() {
                            res.push(w.to_string());
                        }
                    }
                }
            }
            first = second;
            second = w.to_string();
            third = words.next();
        }
        res
    }
}

=======

        let mut ret = vec![];
        let mut words = text.split(' ');
        let mut first = first.as_str();
        let mut second = second.as_str();
        let mut third = words.next();
        while let Some(t) = third {
            if first == t {
                if let Some(t) = words.next() {
                    if second == t {
                        if let Some(t) = words.next() {
                            ret.push(t.to_string());
                        }
                    } else {
                        second = t;
                    }
                }
            } else {
                first = t;
            }
            third = words.next();
        }
        ret
    }
}
