Synthesizing 10/10 solutions

=======

        for i in 0..(nums.len() - 2) {
            if nums[i] == nums[i + 1] || nums[i] == nums[i + 2] {
                return nums[i];
            }
        }
        nums[nums.len() - 1]

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            let count = map.entry(num).or_insert(0);
            *count += 1;
            if *count > 1 {
                return num;
            }
        }
        0

=======

        let mut nums = nums;
        nums.sort();
        for i in 0..nums.len()-1 {
            if nums[i] == nums[i+1] {
                return nums[i];
            }
        }
        0
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in nums {
            *map.entry(i).or_insert(0) += 1;
        }
        for (k, v) in map {
            if v == nums.len() / 2 {
                return k;
            }
        }
        return 0;

=======

        let mut count = vec![0; 10001];
        for n in nums {
            count[n as usize] += 1;
            if count[n as usize] > 1 {
                return n;
            }
        }
        0

=======

        let mut set = std::collections::HashSet::new();
        for num in nums {
            if !set.insert(num) {
                return num;
            }
        }
        0

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            if let Some(v) = map.get_mut(&num) {
                *v += 1;
            } else {
                map.insert(num, 1);
            }
        }
        for (num, v) in map {
            if v > 1 {
                return num;
            }
        }
        0

=======

        let n = nums.len() / 2;
        let mut map = std::collections::HashMap::new();
        for i in nums {
            *map.entry(i).or_insert(0) += 1;
            if *map.get(&i).unwrap() == n {
                return i;
            }
        }
        0

=======

        let mut map = std::collections::HashMap::new();
        for i in nums {
            if let Some(n) = map.get_mut(&i) {
                *n += 1;
                if *n == nums.len() / 2 {
                    return i;
                }
            } else {
                map.insert(i, 1);
            }
        }
        0
    }
}

=======

        let mut a = std::collections::HashMap::new();
        for n in nums {
            let c = a.entry(n).or_insert(0);
            *c += 1;
            if *c == nums.len() / 2 {
                return n;
            }
        }
        0
