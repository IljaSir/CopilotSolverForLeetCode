Synthesizing 10/10 solutions

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut nums = vec![0; (n + 1) as usize];
        nums[0] = 0;
        nums[1] = 1;
        let mut max = 1;
        for i in 2..=(n as usize) {
            nums[i] = if i % 2 == 0 {
                nums[i / 2]
            } else {
                nums[i / 2] + nums[i / 2 + 1]
            };
            if nums[i] > max {
                max = nums[i];
            }
        }
        max

=======

        let n = n as usize;
        if n == 0 {
            return 0;
        }
        let mut nums = vec![0; n + 1];
        nums[1] = 1;
        for i in 1..=n {
            if i * 2 <= n {
                nums[i * 2] = nums[i];
            }
            if i * 2 + 1 <= n {
                nums[i * 2 + 1] = nums[i] + nums[i + 1];
            }
        }
        nums.iter().max().unwrap().clone()

=======

        let n = n as usize;
        if n == 0 {
            return 0;
        }
        let mut nums = vec![0; n + 1];
        nums[1] = 1;
        let mut max = 1;
        for i in 2..=n {
            if i % 2 == 0 {
                nums[i] = nums[i / 2];
            } else {
                nums[i] = nums[i / 2] + nums[i / 2 + 1];
            }
            max = max.max(nums[i]);
        }
        max

=======

        if n == 0 {
            return 0;
        }
        let mut nums = vec![0; (n + 1) as usize];
        nums[1] = 1;
        let mut max = 1;
        for i in 0..=n {
            let i = i as usize;
            let ii = i * 2;
            if ii <= n as usize {
                nums[ii] = nums[i];
                max = max.max(nums[ii]);
            }
            let ii = i * 2 + 1;
            if ii <= n as usize {
                nums[ii] = nums[i] + nums[i + 1];
                max = max.max(nums[ii]);
            }
        }
        max

=======

        let n = n as usize;
        if n == 0 { return 0; }
        if n == 1 { return 1; }
        let mut nums = vec![0; n + 1];
        nums[1] = 1;
        let mut res = 1;
        for i in 2..=n {
            if i % 2 == 0 {
                nums[i] = nums[i / 2];
            } else {
                nums[i] = nums[i / 2] + nums[i / 2 + 1];
            }
            res = res.max(nums[i]);
        }
        res

=======

        if n < 2 {
            return n;
        }
        let mut nums = vec![0; n as usize + 1];
        nums[1] = 1;
        for i in 2..=n as usize {
            nums[i] = nums[i / 2] + nums[i / 2 + i % 2];
        }
        nums.iter().max().unwrap().to_owned()

=======

        let mut nums = vec![0; n as usize + 1];
        if n == 0 {
            return 0;
        }
        nums[1] = 1;
        let mut max = 1;
        for i in 2..=n as usize {
            if i % 2 == 0 {
                nums[i] = nums[i / 2];
            } else {
                nums[i] = nums[i / 2] + nums[i / 2 + 1];
            }
            max = max.max(nums[i]);
        }
        max
    }
}

=======

        let n = n as usize;
        let mut nums = vec![0; n + 1];
        for i in 1..=n {
            nums[i] = if i % 2 == 0 {
                nums[i / 2]
            } else {
                nums[i / 2] + nums[i / 2 + 1]
            }
        }
        nums.iter().max().unwrap().clone()

=======

        if n == 0 || n == 1 {
            return n;
        }

        let mut nums = vec![0; (n + 1) as usize];
        nums[1] = 1;
        let mut max = 1;
        for i in 2..=n {
            let index = i as usize;
            let half = i / 2;
            nums[index] = nums[half as usize];
            if i % 2 == 1 {
                nums[index] += nums[(half + 1) as usize];
            }
            max = max.max(nums[index]);
        }
        max

=======

        let mut nums = vec![0; n as usize + 1];
        nums[1] = 1;
        for i in 2..=n as usize {
            nums[i] = nums[i/2] + nums[i/2 + i % 2];
        }
        nums.iter().max().unwrap().clone()
