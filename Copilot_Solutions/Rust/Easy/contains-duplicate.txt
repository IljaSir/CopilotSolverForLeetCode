Synthesizing 10/10 solutions (Duplicates hidden)

=======

        use std::collections::HashSet;
        let mut set = HashSet::new();
        for n in nums {
            if set.contains(&n) {
                return true;
            }
            set.insert(n);
        }
        false

=======

        use std::collections::HashSet;
        let mut set = HashSet::new();
        for num in nums {
            if set.contains(&num) {
                return true;
            } else {
                set.insert(num);
            }
        }
        false

=======

        let mut set = std::collections::HashSet::new();
        for n in nums {
            if set.contains(&n) {
                return true;
            }
            set.insert(n);
        }
        false

=======

        let mut set = std::collections::HashSet::new();
        for num in nums {
            if set.contains(&num) {
                return true;
            } else {
                set.insert(num);
            }
        }
        false

=======

        let mut nums = nums;
        nums.sort();
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] {
                return true;
            }
        }
        false

=======

        let mut set = std::collections::HashSet::new();
        for i in nums {
            if set.contains(&i) {
                return true;
            } else {
                set.insert(i);
            }
        }
        false

=======

        let mut set = std::collections::HashSet::new();
        for i in nums {
            if set.contains(&i) {
                return true;
            }
            set.insert(i);
        }
        false

=======

        let mut nums = nums;
        nums.sort();
        for i in 1..nums.len() {
            if nums[i-1] == nums[i] {
                return true;
            }
        }
        false

=======

        let mut s = std::collections::HashSet::new();
        for x in nums {
            if s.contains(&x) {
                return true;
            }
            s.insert(x);
        }
        false
    }
}
