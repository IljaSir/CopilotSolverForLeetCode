Synthesizing 10/10 solutions

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        return Self::fib(n - 1) + Self::fib(n - 2);

=======

        let mut a = 0;
        let mut b = 1;
        for _ in 0..n {
            let c = a + b;
            a = b;
            b = c;
        }
        a

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        for _ in 0..n {
            let temp = a + b;
            a = b;
            b = temp;
        }
        return a;

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        for _ in 2..=n {
            let c = a + b;
            a = b;
            b = c;
        }
        b

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        for _ in 2..n+1 {
            let c = a + b;
            a = b;
            b = c;
        }
        return b;

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut dp: Vec<i32> = vec![0; (n + 1) as usize];
        dp[0] = 0;
        dp[1] = 1;
        for i in 2..(n + 1) as usize {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n as usize];

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut i = 2;
        let mut a = 0;
        let mut b = 1;
        let mut c = 0;
        while i <= n {
            c = a + b;
            a = b;
            b = c;
            i += 1;
        }
        c

=======

        if n == 0 {
            return 0;
        }
        if n == 1 {
            return 1;
        }
        let mut a = 0;
        let mut b = 1;
        let mut res = 0;
        for _ in 1..n {
            res = a + b;
            a = b;
            b = res;
        }
        res

=======

        if n <= 1 {
            return n;
        }
        Self::fib(n - 1) + Self::fib(n - 2)

=======

        let mut a: i32 = 0;
        let mut b: i32 = 1;
        for _ in 0..n {
            let c = b;
            b = a + b;
            a = c;
        }
        a
