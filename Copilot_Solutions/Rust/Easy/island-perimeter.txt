Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut perimeter = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    perimeter += 4;
                    if i > 0 && grid[i - 1][j] == 1 {
                        perimeter -= 2;
                    }
                    if j > 0 && grid[i][j - 1] == 1 {
                        perimeter -= 2;
                    }
                }
            }
        }
        perimeter
    }
}

=======

        let mut perimeter = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    perimeter += 4;
                    if i > 0 && grid[i - 1][j] == 1 {
                        perimeter -= 2;
                    }
                    if j > 0 && grid[i][j - 1] == 1 {
                        perimeter -= 2;
                    }
                }
            }
        }
        perimeter

=======

        let mut perimeter = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    perimeter += 4;
                    if i > 0 && grid[i-1][j] == 1 {
                        perimeter -= 1;
                    }
                    if i < grid.len() - 1 && grid[i+1][j] == 1 {
                        perimeter -= 1;
                    }
                    if j > 0 && grid[i][j-1] == 1 {
                        perimeter -= 1;
                    }
                    if j < grid[0].len() - 1 && grid[i][j+1] == 1 {
                        perimeter -= 1;
                    }
                }
            }
        }
        perimeter

=======

        let mut sum = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    sum += 4;
                    if i > 0 && grid[i-1][j] == 1 {
                        sum -= 2;
                    }
                    if j > 0 && grid[i][j-1] == 1 {
                        sum -= 2;
                    }
                }
            }
        }
        sum

=======

        let (row, col) = (grid.len(), grid[0].len());
        let mut perimeter = 0;
        for i in 0..row {
            for j in 0..col {
                if grid[i][j] == 1 {
                    perimeter += 4;
                    if i > 0 && grid[i-1][j] == 1 {
                        perimeter -= 2;
                    }
                    if j > 0 && grid[i][j-1] == 1 {
                        perimeter -= 2;
                    }
                }
            }
        }
        perimeter
    }
}

=======

        let mut perimeter = 0;
        let rows = grid.len();
        let cols = grid[0].len();
        for r in 0..rows {
            for c in 0..cols {
                if grid[r][c] == 1 {
                    perimeter += 4;
                    if r > 0 && grid[r-1][c] == 1 {
                        perimeter -= 2;
                    }
                    if c > 0 && grid[r][c-1] == 1 {
                        perimeter -= 2;
                    }
                }
            }
        }
        perimeter
    }
}

=======

        let mut result = 0;
        let (row, col) = (grid.len(), grid[0].len());
        for i in 0..row {
            for j in 0..col {
                if grid[i][j] == 1 {
                    result += 4;
                    if i > 0 && grid[i-1][j] == 1 {
                        result -= 2;
                    }
                    if j > 0 && grid[i][j-1] == 1 {
                        result -= 2;
                    }
                }
            }
        }
        result

=======

        let (mut perimeter, mut islands, mut neighbours) = (0, 0, 0);
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    islands += 1;
                    if i < grid.len() - 1 && grid[i + 1][j] == 1 {
                        neighbours += 1;
                    }
                    if j < grid[i].len() - 1 && grid[i][j + 1] == 1 {
                        neighbours += 1;
                    }
                }
            }
        }
        perimeter = 4 * islands - 2 * neighbours;
        perimeter
    }
}
