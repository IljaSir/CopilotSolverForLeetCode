Synthesizing 10/10 solutions

=======

        command.replace("()", "o").replace("(al)", "al")

=======

        command.replace("()", "o").replace("(al)", "al")
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        while i < command.len() {
            if command[i..].starts_with("G") {
                res.push('G');
                i += 1;
            } else if command[i..].starts_with("()") {
                res.push('o');
                i += 2;
            } else if command[i..].starts_with("(al)") {
                res.push_str("al");
                i += 4;
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        while i < command.len() {
            if command[i..].starts_with("G") {
                res.push('G');
                i += 1;
            } else if command[i..].starts_with("()") {
                res.push('o');
                i += 2;
            } else if command[i..].starts_with("(al)") {
                res.push_str("al");
                i += 4;
            } else {
                unreachable!();
            }
        }
        res

=======

        let mut result = String::new();
        let mut chars = command.chars();
        while let Some(c) = chars.next() {
            if c == 'G' {
                result.push('G');
            } else if c == '(' {
                if let Some(c) = chars.next() {
                    if c == ')' {
                        result.push('o');
                    } else if c == 'a' {
                        if let Some(c) = chars.next() {
                            if c == 'l' {
                                if let Some(c) = chars.next() {
                                    if c == ')' {
                                        result.push_str("al");
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        result
    }
}

=======

        let mut result = String::new();
        let mut chars = command.chars();
        while let Some(c) = chars.next() {
            match c {
                'G' => result.push('G'),
                '(' => {
                    match chars.next() {
                        Some(')') => result.push('o'),
                        Some('a') => {
                            chars.next();
                            chars.next();
                            result.push_str("al");
                        }
                        _ => (),
                    }
                }
                _ => (),
            }
        }
        result
    }
}

=======

        let mut res = String::new();
        let mut chars = command.chars();
        while let Some(c) = chars.next() {
            match c {
                'G' => res.push('G'),
                '(' => {
                    match chars.next() {
                        Some('a') => res.push_str("al"),
                        Some(')') => res.push('o'),
                        _ => (),
                    }
                }
                _ => (),
            }
        }
        res

=======

        let mut res = String::new();
        let mut iter = command.chars();
        while let Some(c) = iter.next() {
            if c == 'G' {
                res.push(c);
            } else if c == '(' {
                if let Some(next) = iter.next() {
                    if next == ')' {
                        res.push('o');
                    } else {
                        res.push_str("al");
                    }
                }
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        let bytes = command.as_bytes();
        while i < bytes.len() {
            if bytes[i] == b'G' {
                res.push('G');
                i += 1;
            } else if bytes[i] == b'(' && bytes[i + 1] == b')' {
                res.push('o');
                i += 2;
            } else if bytes[i] == b'(' && bytes[i + 1] == b'a' {
                res.push_str("al");
                i += 4;
            }
        }
        res

=======

        let mut res = String::new();
        let mut idx = 0;
        while idx < command.len() {
            match command[idx..].chars().next().unwrap() {
                'G' => {
                    res.push('G');
                    idx += 1;
                }
                '(' => {
                    idx += 1;
                    match command[idx..].chars().next().unwrap() {
                        'a' => {
                            res.push_str("al");
                            idx += 3;
                        }
                        _ => {
                            res.push('o');
                            idx += 1;
                        }
                    }
                }
                _ => unreachable!(),
            }
        }
        res
    }
}
