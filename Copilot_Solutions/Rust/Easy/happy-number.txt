Synthesizing 10/10 solutions

=======

        let mut n = n;
        let mut set = std::collections::HashSet::new();
        while n != 1 {
            if set.contains(&n) {
                return false;
            }
            set.insert(n);
            n = n.to_string().chars().map(|c| c.to_digit(10).unwrap().pow(2)).sum();
        }
        true
    }
}

=======

        let mut n = n;
        let mut set = std::collections::HashSet::new();
        while n != 1 {
            if set.contains(&n) {
                return false;
            }
            set.insert(n);
            n = n.to_string().chars().map(|c| (c as u8 - b'0').pow(2)).sum();
        }
        true
    }
}

=======

        let mut n = n;
        let mut set = std::collections::HashSet::new();
        while n != 1 {
            if set.contains(&n) {
                return false;
            }
            set.insert(n);
            n = n.to_string().chars().map(|x| x.to_digit(10).unwrap()).map(|x| x * x).sum();
        }
        true
    }
}

=======

        let mut n = n;
        let mut seen = std::collections::HashSet::new();
        loop {
            if n == 1 {
                return true;
            }
            if seen.contains(&n) {
                return false;
            }
            seen.insert(n);
            n = n.to_string()
                .chars()
                .map(|c| c.to_digit(10).unwrap())
                .map(|d| d * d)
                .sum();
        }
    }
}

=======

        let mut n = n;
        let mut seen = std::collections::HashSet::new();
        while n != 1 {
            if seen.contains(&n) {
                return false
            }
            seen.insert(n);
            n = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).map(|d| d*d).sum();
        }
        true
    }
}

=======

        let mut m = n;
        let mut s = std::collections::HashSet::new();
        while m != 1 {
            if s.contains(&m) {
                return false;
            }
            s.insert(m);
            let mut t = 0;
            while m > 0 {
                let d = m % 10;
                t += d * d;
                m /= 10;
            }
            m = t;
        }
        true

=======

        let mut n = n;
        let mut hash = std::collections::HashSet::new();
        while n != 1 {
            let mut sum = 0;
            while n > 0 {
                let digit = n % 10;
                sum += digit * digit;
                n /= 10;
            }
            n = sum;
            if hash.contains(&n) {
                return false;
            }
            hash.insert(n);
        }
        true

=======

        let mut n = n;
        let mut seen = std::collections::HashSet::new();
        while n != 1 {
            n = n.to_string().chars().map(|x| (x as u8 - b'0').pow(2)).sum();
            if seen.contains(&n) {
                return false;
            } else {
                seen.insert(n);
            }
        }
        true
    }
}

=======

        let mut num = n;
        let mut set = std::collections::HashSet::new();
        loop {
            let mut new_num = 0;
            while num > 0 {
                let d = num % 10;
                new_num += d * d;
                num /= 10;
            }
            if new_num == 1 {
                return true;
            }
            if set.contains(&new_num) {
                return false;
            }
            set.insert(new_num);
            num = new_num;
        }
    }
}

=======

        let mut n = n;
        let mut sum = 0;
        let mut nums: Vec<i32> = Vec::new();
        while n != 1 {
            while n != 0 {
                sum += (n % 10).pow(2);
                n /= 10;
            }
            if nums.contains(&sum) {
                return false;
            }
            nums.push(sum);
            n = sum;
            sum = 0;
        }
        true
    }
}
