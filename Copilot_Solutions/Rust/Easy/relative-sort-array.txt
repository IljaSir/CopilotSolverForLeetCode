Synthesizing 10/10 solutions

=======

        let mut res = Vec::new();
        let mut count = vec![0; 1001];
        for i in arr1 {
            count[i as usize] += 1;
        }
        for i in arr2 {
            while count[i as usize] > 0 {
                res.push(i);
                count[i as usize] -= 1;
            }
        }
        for i in 0..count.len() {
            while count[i] > 0 {
                res.push(i as i32);
                count[i] -= 1;
            }
        }
        res

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        arr2.sort();
        arr1.sort();
        let mut result: Vec<i32> = Vec::new();
        for i in 0..arr2.len() {
            let mut j = 0;
            while j < arr1.len() {
                if arr2[i] == arr1[j] {
                    result.push(arr1.remove(j));
                    j -= 1;
                }
                j += 1;
            }
        }
        result.append(&mut arr1);
        result
    }
}

=======

        let mut arr1 = arr1;
        arr1.sort();
        let mut arr2 = arr2;
        arr2.sort();
        let mut pos = 0;
        for i in 0..arr2.len() {
            let mut j = pos;
            while j < arr1.len() {
                if arr1[j] == arr2[i] {
                    arr1.swap(j, pos);
                    pos += 1;
                }
                j += 1;
            }
        }
        arr1
    }
}

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        arr1.sort();
        arr2.sort();
        let mut arr3 = Vec::new();
        let mut arr4 = Vec::new();
        for i in &arr2 {
            let mut j = 0;
            while j < arr1.len() {
                if arr1[j] == *i {
                    arr3.push(arr1[j]);
                    arr1.remove(j);
                } else {
                    j += 1;
                }
            }
        }
        arr4.append(&mut arr3);
        arr4.append(&mut arr1);
        arr4
    }
}

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        arr1.sort();
        arr2.sort();
        let mut result = Vec::new();
        let mut i = 0;
        let mut j = 0;
        while j < arr2.len() {
            while i < arr1.len() && arr1[i] < arr2[j] {
                result.push(arr1[i]);
                i += 1;
            }
            while i < arr1.len() && arr1[i] == arr2[j] {
                result.push(arr1[i]);
                i += 1;
            }
            j += 1;
        }
        while i < arr1.len() {
            result.push(arr1[i]);
            i += 1;
        }
        result
    }
}

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        arr2.sort();
        arr1.sort();
        let mut res: Vec<i32> = Vec::new();
        for i in arr2.iter() {
            while let Some(index) = arr1.iter().position(|&x| x == *i) {
                res.push(arr1.remove(index));
            }
        }
        for i in arr1.iter() {
            res.push(*i);
        }
        res
    }
}

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        arr2.sort_unstable();
        arr1.sort_unstable();
        let mut res = vec![];
        let mut i = 0;
        for x in arr2 {
            while i < arr1.len() && arr1[i] < x {
                res.push(arr1[i]);
                i += 1;
            }
            while i < arr1.len() && arr1[i] == x {
                res.push(arr1[i]);
                i += 1;
            }
        }
        while i < arr1.len() {
            res.push(arr1[i]);
            i += 1;
        }
        res
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in arr2 {
            map.insert(i, 0);
        }
        let mut v = vec![];
        let mut w = vec![];
        for i in arr1 {
            if let Some(x) = map.get_mut(&i) {
                *x += 1;
            } else {
                w.push(i);
            }
        }
        for i in arr2 {
            v.append(&mut vec![i; map[&i] as usize]);
        }
        w.sort();
        v.append(&mut w);
        v

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        let mut arr3 = Vec::new();
        let mut arr4 = Vec::new();
        arr2.sort();
        for i in arr1.iter() {
            if arr2.contains(i) {
                arr3.push(*i);
            } else {
                arr4.push(*i);
            }
        }
        arr4.sort();
        arr3.append(&mut arr4);
        arr3
    }
}

=======

        let mut arr1 = arr1;
        let mut arr2 = arr2;
        let mut result = Vec::new();
        let mut arr2_index = 0;
        let mut arr1_index = 0;
        while arr2_index < arr2.len() {
            while arr1_index < arr1.len() {
                if arr1[arr1_index] == arr2[arr2_index] {
                    result.push(arr1[arr1_index]);
                    arr1.remove(arr1_index);
                } else {
                    arr1_index += 1;
                }
            }
            arr2_index += 1;
            arr1_index = 0;
        }
        arr1.sort();
        result.append(&mut arr1);
        result
    }
}
