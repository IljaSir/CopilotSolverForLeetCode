Synthesizing 10/10 solutions

=======

        let mut chars_count = vec![0; 26];
        for c in chars.chars() {
            chars_count[c as usize - 'a' as usize] += 1;
        }
        let mut result = 0;
        for word in words {
            let mut word_count = vec![0; 26];
            for c in word.chars() {
                word_count[c as usize - 'a' as usize] += 1;
            }
            let mut good = true;
            for i in 0..26 {
                if word_count[i] > chars_count[i] {
                    good = false;
                    break;
                }
            }
            if good {
                result += word.len() as i32;
            }
        }
        result

=======

        let mut char_count = vec![0; 26];
        for c in chars.chars() {
            char_count[c as usize - 'a' as usize] += 1;
        }
        let mut res = 0;
        for word in words {
            let mut word_count = vec![0; 26];
            for c in word.chars() {
                word_count[c as usize - 'a' as usize] += 1;
            }
            let mut can_form = true;
            for i in 0..26 {
                if word_count[i] > char_count[i] {
                    can_form = false;
                    break;
                }
            }
            if can_form {
                res += word.len() as i32;
            }
        }
        res

=======

        let mut chars_count = vec![0; 26];
        for c in chars.chars() {
            chars_count[(c as u8 - b'a') as usize] += 1;
        }
        let mut result = 0;
        for word in words {
            let mut word_count = vec![0; 26];
            for c in word.chars() {
                word_count[(c as u8 - b'a') as usize] += 1;
            }
            if chars_count
                .iter()
                .zip(word_count.iter())
                .all(|(a, b)| *a >= *b)
            {
                result += word.len() as i32;
            }
        }
        result

=======

        let mut chars = chars.chars().collect::<Vec<char>>();
        chars.sort();
        let mut count = 0;
        for word in words {
            let mut word = word.chars().collect::<Vec<char>>();
            word.sort();
            let mut i = 0;
            let mut j = 0;
            while i < word.len() && j < chars.len() {
                if word[i] == chars[j] {
                    i += 1;
                }
                j += 1;
            }
            if i == word.len() {
                count += word.len() as i32;
            }
        }
        count

=======

        let mut ans = 0;
        let mut char_map = std::collections::HashMap::new();
        for c in chars.chars() {
            *char_map.entry(c).or_insert(0) += 1;
        }
        for word in words {
            let mut word_map = std::collections::HashMap::new();
            for c in word.chars() {
                *word_map.entry(c).or_insert(0) += 1;
            }
            let mut valid = true;
            for (k, v) in word_map.iter() {
                if let Some(count) = char_map.get(k) {
                    if count < v {
                        valid = false;
                        break;
                    }
                } else {
                    valid = false;
                    break;
                }
            }
            if valid {
                ans += word.len() as i32;
            }
        }
        ans

=======

        let mut chars = chars.chars().collect::<Vec<_>>();
        chars.sort();
        let mut res = 0;
        for word in words {
            let mut word = word.chars().collect::<Vec<_>>();
            word.sort();
            let mut i = 0;
            let mut j = 0;
            while i < word.len() && j < chars.len() {
                if word[i] == chars[j] {
                    i += 1;
                }
                j += 1;
            }
            if i == word.len() {
                res += word.len() as i32;
            }
        }
        res

=======

        let mut counter = vec![0; 26];
        let mut result = 0;
        for c in chars.chars() {
            counter[c as usize - 'a' as usize] += 1;
        }
        for word in words {
            let mut tmp = counter.clone();
            let mut flag = true;
            for c in word.chars() {
                if tmp[c as usize - 'a' as usize] == 0 {
                    flag = false;
                    break;
                } else {
                    tmp[c as usize - 'a' as usize] -= 1;
                }
            }
            if flag {
                result += word.len();
            }
        }
        result as i32

=======

        let mut chars = chars.chars().collect::<Vec<char>>();
        let mut count = 0;
        for word in words {
            let mut word = word.chars().collect::<Vec<char>>();
            word.sort();
            chars.sort();
            let mut i = 0;
            let mut j = 0;
            while i < word.len() && j < chars.len() {
                if word[i] == chars[j] {
                    i += 1;
                    j += 1;
                } else {
                    j += 1;
                }
            }
            if i == word.len() {
                count += word.len();
            }
        }
        count as i32

=======

        let mut chars = chars.chars().collect::<Vec<char>>();
        let mut res = 0;
        for word in words {
            let mut word = word.chars().collect::<Vec<char>>();
            word.sort();
            chars.sort();
            let mut i = 0;
            let mut j = 0;
            while i < word.len() && j < chars.len() {
                if word[i] == chars[j] {
                    i += 1;
                }
                j += 1;
            }
            if i == word.len() {
                res += word.len();
            }
        }
        res as i32

=======

        let mut res = 0;
        for word in words {
            if Solution::is_good(&word, &chars) {
                res += word.len();
            }
        }
        res as i32
    }
    
    fn is_good(word: &str, chars: &str) -> bool {
        let mut chars = chars.chars().collect::<Vec<_>>();
        for c in word.chars() {
            if let Some(i) = chars.iter().position(|&x| x == c) {
                chars.remove(i);
            } else {
                return false;
            }
        }
        true
    }
}
