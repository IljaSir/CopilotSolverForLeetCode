Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count as f64 / s.len() as f64 * 100.0).floor() as i32
    }
}

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count as f64 / s.len() as f64 * 100.0) as i32

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count * 100 / s.len()) as i32

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count as f32 / s.len() as f32 * 100.0) as i32

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count as f64 * 100.0 / s.len() as f64) as i32
    }
}

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (count as f32 * 100.0 / s.len() as f32) as i32
    }
}

=======

        let mut n = 0;
        for c in s.chars() {
            if c == letter {
                n += 1;
            }
        }
        (n as f64 / s.len() as f64 * 100.0) as i32

=======

        let mut count = 0;
        for c in s.chars() {
            if c == letter {
                count += 1;
            }
        }
        (100 * count) / s.len() as i32
