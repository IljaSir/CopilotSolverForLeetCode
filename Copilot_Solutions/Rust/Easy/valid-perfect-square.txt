Synthesizing 10/10 solutions

=======

        let mut x = num;
        while x * x > num {
            x = (x + num / x) / 2;
        }
        x * x == num
    }
}

=======

        let mut left = 1;
        let mut right = num;
        while left <= right {
            let mid = left + (right - left) / 2;
            if mid * mid == num {
                return true;
            } else if mid * mid < num {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        false

=======

        let mut i = 1;
        let mut n = num;
        while n > 0 {
            n -= i;
            i += 2;
        }
        n == 0
    }
}

=======

        let mut left = 0;
        let mut right = num;
        while left <= right {
            let mid = left + (right - left) / 2;
            let square = mid * mid;
            if square == num {
                return true;
            } else if square < num {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        false
    }
}

=======

        let mut l = 1;
        let mut r = num;
        while l <= r {
            let m = l + (r - l) / 2;
            if m * m == num {
                return true;
            } else if m * m < num {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        false

=======

        let num = num as i64;
        let mut left = 1;
        let mut right = num;
        while left <= right {
            let mid = left + (right - left) / 2;
            if mid * mid == num {
                return true;
            } else if mid * mid > num {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        false

=======

        let mut n = 1;
        while n * n <= num {
            if n * n == num {
                return true;
            }
            n += 1;
        }
        false

=======

        let mut left = 0;
        let mut right = num;
        while left <= right {
            let mid = left + (right - left) / 2;
            let sq = mid * mid;
            if sq == num {
                return true;
            } else if sq < num {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        false

=======

        let mut l = 1;
        let mut r = num;
        while l <= r {
            let mid = (l + r) / 2;
            let sq = mid * mid;
            if sq == num {
                return true;
            } else if sq > num {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        false

=======

        let mut r = num;
        while r*r > num {
            r = (r + num/r)/2;
        }
        r*r == num
