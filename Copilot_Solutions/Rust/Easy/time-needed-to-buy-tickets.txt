Synthesizing 10/10 solutions

=======

        let mut tickets = tickets;
        let mut k = k as usize;
        let mut time = 0;
        while tickets[k] > 0 {
            let mut i = 0;
            while i < tickets.len() {
                if tickets[i] > 0 {
                    tickets[i] -= 1;
                    time += 1;
                    if i == k && tickets[i] == 0 {
                        break;
                    }
                }
                i += 1;
            }
        }
        time

=======

        let mut tickets = tickets;
        let mut t = 0;
        let mut k = k as usize;
        while tickets[k] > 0 {
            for i in 0..tickets.len() {
                if tickets[i] > 0 {
                    tickets[i] -= 1;
                    t += 1;
                    if i == k && tickets[i] == 0 {
                        return t;
                    }
                }
            }
        }
        t

=======

        let mut queue = tickets;
        let mut time = 0;
        while queue[k as usize] > 0 {
            let front = queue.remove(0);
            if front > 0 {
                queue.push(front - 1);
            }
            time += 1;
        }
        time

=======

        let mut k = k as usize;
        let mut tickets = tickets;
        let mut time = 0;
        let mut max = 0;
        for i in 0..tickets.len() {
            max = std::cmp::max(max, tickets[i]);
        }
        let mut i = 0;
        while i < max {
            for j in 0..tickets.len() {
                if tickets[j] > 0 {
                    tickets[j] -= 1;
                    time += 1;
                    if k == j {
                        i += 1;
                    }
                }
            }
        }
        time

=======

        let mut ans = 0;
        let mut queue = tickets.clone();
        let mut k = k as usize;
        while queue[k] > 0 {
            for i in 0..queue.len() {
                if queue[i] > 0 {
                    ans += 1;
                    queue[i] -= 1;
                }
                if i == k && queue[i] == 0 {
                    return ans;
                }
            }
        }
        ans

=======

        let mut queue: Vec<i32> = tickets.clone();
        let mut time = 0;
        let mut k = k as usize;
        while queue[k] > 0 {
            let ticket = queue.remove(0);
            if ticket > 0 {
                queue.push(ticket - 1);
            }
            time += 1;
            if k > 0 {
                k -= 1;
            } else {
                k = queue.len() - 1;
            }
        }
        time

=======

        let mut queue: Vec<i32> = tickets;
        let mut time = 0;
        let mut k = k as usize;
        while queue[k] > 0 {
            let mut i = 0;
            while i < queue.len() {
                if queue[i] > 0 {
                    queue[i] -= 1;
                    time += 1;
                    if i == k && queue[k] == 0 {
                        return time;
                    }
                }
                i += 1;
            }
        }
        time

=======

        let n = tickets.len();
        let mut time = 0;
        let mut queue = tickets;
        while queue[k as usize] > 0 {
            let mut i = 0;
            while i < n {
                if queue[i] > 0 {
                    queue[i] -= 1;
                    time += 1;
                    if i == k as usize && queue[i] == 0 {
                        return time;
                    }
                }
                i += 1;
            }
        }
        time

=======

        let mut sum = 0;
        let mut max = 0;
        for i in 0..tickets.len() {
            if i == k as usize {
                sum += tickets[i];
            } else {
                let mut cur = tickets[i];
                while cur > 0 {
                    cur -= 1;
                    sum += 1;
                    if cur > max {
                        max = cur;
                    }
                }
            }
        }
        sum + max
    }
}

=======

        let mut v = tickets.clone();
        let mut t = 0;
        let mut i = k as usize;
        let mut m = 0;
        while v.iter().any(|&x| x > 0) {
            if v[i] > 0 {
                v[i] -= 1;
                t += 1;
            }
            if i == v.len() - 1 {
                m = t;
            } else if i == 0 {
                m = m.max(t);
            }
            i = (i + 1) % v.len();
        }
        m
    }
}
