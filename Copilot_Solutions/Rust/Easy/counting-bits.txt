Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut result = vec![0; (n + 1) as usize];
        for i in 1..=n {
            result[i as usize] = result[(i & (i - 1)) as usize] + 1;
        }
        result
    }
}

=======

        let mut res = vec![0; n as usize + 1];
        for i in 1..=n as usize {
            res[i] = res[i >> 1] + (i & 1) as i32;
        }
        res

=======

        let mut ans = Vec::new();
        for i in 0..=n {
            ans.push(i.count_ones() as i32);
        }
        ans
    }
}

=======

        let mut ret = vec![0; (n + 1) as usize];
        for i in 1..=n {
            ret[i as usize] = ret[(i & (i - 1)) as usize] + 1;
        }
        ret
    }
}

=======

        let mut result = Vec::new();
        for i in 0..=n {
            result.push(i.count_ones() as i32);
        }
        result

=======

        let mut ans = vec![0; (n + 1) as usize];
        for i in 1..=n {
            ans[i as usize] = ans[(i - 1) as usize] + (i & 1);
        }
        ans

=======

        let mut result = vec![0; n as usize + 1];
        for i in 1..=n {
            result[i as usize] = result[(i >> 1) as usize] + i & 1;
        }
        result
    }
}

=======

        (0..n+1).map(|x| x.count_ones() as i32).collect()

=======

        let mut ans = Vec::new();
        ans.push(0);
        for i in 1..(n+1) {
            ans.push(ans[(i & (i - 1)) as usize] + 1);
        }
        ans
