Synthesizing 10/10 solutions

=======

        title.split_whitespace().map(|s| {
            if s.len() < 3 {
                s.to_lowercase()
            } else {
                format!("{}{}", &s[..1].to_uppercase(), &s[1..].to_lowercase())
            }
        }).collect::<Vec<String>>().join(" ")

=======

        let mut result = String::new();
        let mut first = true;
        for c in title.chars() {
            if first {
                result.push(c.to_ascii_uppercase());
                first = false;
            } else if c == ' ' {
                result.push(c);
                first = true;
            } else {
                result.push(c.to_ascii_lowercase());
            }
        }
        result

=======

        let mut res = String::new();
        let mut first = true;
        for c in title.chars() {
            if c == ' ' {
                first = true;
                res.push(c);
            } else if first {
                res.push(c.to_ascii_uppercase());
                first = false;
            } else {
                res.push(c.to_ascii_lowercase());
            }
        }
        res
    }
}

=======

        let mut result = String::new();
        let mut is_first = true;
        for c in title.chars() {
            if is_first {
                result.push(c.to_ascii_uppercase());
                is_first = false;
            } else {
                result.push(c.to_ascii_lowercase());
            }
            if c == ' ' {
                is_first = true;
            }
        }
        result
    }
}

=======

        let mut res = String::new();
        for (i, c) in title.chars().enumerate() {
            if i == 0 || title.as_bytes()[i-1] == b' ' {
                res.push(c.to_ascii_uppercase());
            } else {
                res.push(c.to_ascii_lowercase());
            }
        }
        res
    }
}

=======

        let mut res = "".to_string();
        for word in title.split(" ") {
            if word.len() == 1 {
                res.push_str(&word.to_lowercase());
            } else if word.len() == 2 {
                res.push_str(&word.to_lowercase());
            } else {
                res.push_str(&word[0..1].to_uppercase());
                res.push_str(&word[1..].to_lowercase());
            }
            res.push_str(" ");
        }
        res[0..res.len()-1].to_string()
    }
}

=======

        let mut result = String::new();
        let mut is_first_letter = true;
        for c in title.chars() {
            if is_first_letter {
                result.push(c.to_ascii_uppercase());
                is_first_letter = false;
            } else {
                result.push(c.to_ascii_lowercase());
            }
            if c == ' ' {
                is_first_letter = true;
            }
        }
        result

=======

        let mut title = title;
        let mut first = true;
        for c in title.as_bytes_mut() {
            if first {
                *c = c.to_ascii_uppercase();
                first = false;
            } else if *c == ' ' as u8 {
                first = true;
            } else {
                *c = c.to_ascii_lowercase();
            }
        }
        title
    }
}

=======

        title.split_whitespace().map(|word| {
            let mut chars = word.chars();
            match chars.next() {
                Some(c) => c.to_uppercase().to_string() + chars.as_str(),
                None => String::new(),
            }
        }).collect::<Vec<String>>().join(" ")
    }
}

=======

        let mut words: Vec<&str> = title.split(" ").collect();
        for i in 0..words.len() {
            let mut word: &str = words[i];
            let mut chars: Vec<char> = word.chars().collect();
            if chars.len() > 2 {
                chars[0] = chars[0].to_uppercase().nth(0).unwrap();
                chars[1..].iter_mut().for_each(|c| *c = c.to_lowercase().nth(0).unwrap());
            } else {
                chars.iter_mut().for_each(|c| *c = c.to_lowercase().nth(0).unwrap());
            }
            words[i] = chars.iter().collect::<String>().as_str();
        }
        words.join(" ")
