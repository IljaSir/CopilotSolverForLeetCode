Synthesizing 10/10 solutions

=======

        let n = code.len();
        let mut res = vec![0; n];
        if k == 0 {
            return res;
        }
        if k > 0 {
            for i in 0..n {
                for j in 1..=k as usize {
                    res[i] += code[(i + j) % n];
                }
            }
        } else {
            for i in 0..n {
                for j in 1..=k.abs() as usize {
                    res[i] += code[(n + i - j) % n];
                }
            }
        }
        res

=======

        let mut res = vec![0; code.len()];
        if k == 0 {
            return res;
        }
        if k > 0 {
            for i in 0..code.len() {
                for j in 0..k as usize {
                    res[i] += code[(i + 1 + j) % code.len()];
                }
            }
        } else {
            for i in 0..code.len() {
                for j in 0..-k as usize {
                    res[i] += code[(i + code.len() - j) % code.len()];
                }
            }
        }
        res

=======

        let n = code.len();
        let mut res = vec![0; n];
        if k == 0 {
            return res;
        }
        let mut sum = 0;
        let (mut i, mut j) = if k > 0 {
            (1, k as usize + 1)
        } else {
            (n - 1, n + k as usize)
        };
        for _ in 0..k.abs() {
            sum += code[i % n];
            i += 1;
        }
        for _ in 0..n {
            res[j % n] = sum;
            sum -= code[i % n];
            sum += code[j % n];
            i += 1;
            j += 1;
        }
        res

=======

        let n = code.len();
        let mut res = vec![0; n];
        if k == 0 {
            return res;
        }
        let mut sum = 0;
        let (mut i, mut j) = (0, n - 1);
        if k > 0 {
            while i < k as usize {
                sum += code[i];
                i += 1;
            }
            for _ in 0..n {
                res[j] = sum;
                sum += code[i % n] - code[j];
                i += 1;
                j = (j + 1) % n;
            }
        } else {
            let mut k = k;
            while k < 0 {
                sum += code[j];
                j = (j + n - 1) % n;
                k += 1;
            }
            for _ in 0..n {
                res[i] = sum;
                sum += code[j] - code[i];
                i = (i + 1) % n;
                j = (j + 1) % n;
            }
        }
        res

=======

        let mut result = vec![0; code.len()];
        if k == 0 {
            return result;
        }
        let mut sum = code.iter().take(k.abs() as usize).sum::<i32>();
        for i in 0..code.len() {
            result[i] = sum;
            if k > 0 {
                sum -= code[(i + code.len() - k as usize) % code.len()];
                sum += code[(i + 1) % code.len()];
            } else {
                sum += code[(i + code.len() + k as usize) % code.len()];
                sum -= code[i];
            }
        }
        result

=======

        let mut ret = Vec::with_capacity(code.len());
        let mut sum = 0;
        if k == 0 {
            for _ in 0..code.len() {
                ret.push(0);
            }
            return ret;
        }
        let mut i = 0;
        let mut j = 0;
        if k > 0 {
            while i < k as usize {
                sum += code[i];
                i += 1;
            }
            ret.push(sum);
            for _ in 0..code.len() - 1 {
                sum += code[i];
                sum -= code[j];
                ret.push(sum);
                i += 1;
                j += 1;
                if i == code.len() {
                    i = 0;
                }
                if j == code.len() {
                    j = 0;
                }
            }
        } else {
            while i < (-k) as usize {
                sum += code[code.len() - 1 - i];
                i += 1;
            }
            ret.push(sum);
            for _ in 0..code.len() - 1 {
                sum += code[code.len() - 1 - i];
                sum -= code[code.len() - 1 - j];
                ret.push(sum);
                i += 1;
                j += 1;
                if i == code.len() {
                    i = 0;
                }
                if j == code.len() {
                    j = 0;
                }
            }
        }
        ret

=======

        let n = code.len() as i32;
        let mut res = vec![0; n as usize];
        if k == 0 {
            return res;
        }
        let mut sum = 0;
        let mut start = 1;
        let mut end = k;
        if k < 0 {
            start = n + k;
            end = n - 1;
        }
        for i in start..=end {
            sum += code[i as usize];
        }
        for i in 0..n {
            res[i as usize] = sum;
            sum -= code[start as usize];
            start = (start + 1) % n;
            end = (end + 1) % n;
            sum += code[end as usize];
        }
        res

=======

        let mut res = vec![0; code.len()];
        if k == 0 {
            return res;
        }
        let mut sum = 0;
        let n = code.len();
        let k = k as usize;
        for i in 0..k {
            sum += code[i];
        }
        for i in 0..n {
            res[i] = sum;
            sum -= code[i];
            sum += code[(i + k) % n];
        }
        res
    }
}

=======

        let mut res = vec![0; code.len()];
        if k == 0 {
            return res;
        }
        let mut sum = 0;
        let (mut i, mut j) = (0, 0);
        if k > 0 {
            while j < k as usize {
                sum += code[j];
                j += 1;
            }
            while i < code.len() {
                res[i] = sum;
                sum -= code[i];
                sum += code[j];
                i += 1;
                j += 1;
                if j == code.len() {
                    j = 0;
                }
            }
        } else {
            while j < -k as usize {
                sum += code[j];
                j += 1;
            }
            while i < code.len() {
                res[i] = sum;
                sum -= code[(i + k as usize) % code.len()];
                sum += code[(j + k as usize) % code.len()];
                i += 1;
                j += 1;
                if j == code.len() {
                    j = 0;
                }
            }
        }
        res

=======

        let mut ans = vec![0; code.len()];
        if k == 0 {
            return ans;
        }
        let mut sum = 0;
        let n = code.len();
        let k = k.abs() as usize;
        for i in 0..k {
            sum += code[(i + 1) % n];
        }
        for i in 0..n {
            ans[i] = sum;
            sum -= code[(i + 1) % n];
            sum += code[(i + 1 + k) % n];
        }
        if k as i32 > 0 {
            ans
        } else {
            ans.iter().map(|&x| -x).collect()
        }
