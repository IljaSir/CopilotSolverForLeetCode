Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let n = matrix.len();
        let mut row = vec![0; n];
        let mut col = vec![0; n];
        for i in 0..n {
            for j in 0..n {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for i in 0..n {
            if row[i] != (1 << (n + 1)) - 2 || col[i] != (1 << (n + 1)) - 2 {
                return false;
            }
        }
        true
    }
}

=======

        let n = matrix.len();
        let mut row = vec![0; n];
        let mut col = vec![0; n];
        for i in 0..n {
            for j in 0..n {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for i in 0..n {
            if row[i] != (1 << (n + 1)) - 2 || col[i] != (1 << (n + 1)) - 2 {
                return false;
            }
        }
        true

=======

        let n = matrix.len();
        let mut row = vec![false; n];
        let mut col = vec![false; n];
        for i in 0..n {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    row[i] = true;
                    col[j] = true;
                }
            }
        }
        row.iter().all(|x| *x) && col.iter().all(|x| *x)
    }
}

=======

        let n = matrix.len();
        let mut row = vec![false; n];
        let mut col = vec![false; n];
        for i in 0..n {
            for j in 0..n {
                if matrix[i][j] < 1 || matrix[i][j] > n as i32 {
                    return false;
                }
                if matrix[i][j] == 1 {
                    row[i] = true;
                    col[j] = true;
                }
            }
        }
        for i in 0..n {
            if !row[i] || !col[i] {
                return false;
            }
        }
        true
    }
}

=======

        let n = matrix.len();
        let mut row = vec![false; n];
        let mut col = vec![false; n];
        for i in 0..n {
            for j in 0..n {
                if matrix[i][j] < 1 || matrix[i][j] > n as i32 {
                    return false;
                }
                if matrix[i][j] == 1 {
                    row[i] = true;
                }
                if matrix[i][j] == 2 {
                    col[j] = true;
                }
            }
        }
        for i in 0..n {
            if !row[i] || !col[i] {
                return false;
            }
        }
        true

=======

        let n = matrix.len();
        let mut rows = vec![0; n];
        let mut cols = vec![0; n];
        for i in 0..n {
            for j in 0..n {
                rows[i] |= 1 << matrix[i][j];
                cols[j] |= 1 << matrix[i][j];
            }
        }
        for i in 0..n {
            if rows[i] != (1 << n + 1) - 2 || cols[i] != (1 << n + 1) - 2 {
                return false;
            }
        }
        true

=======

        let n = matrix.len();
        let mut rows = vec![vec![false; n]; n];
        let mut cols = vec![vec![false; n]; n];
        for i in 0..n {
            for j in 0..n {
                let v = matrix[i][j] as usize - 1;
                if rows[i][v] || cols[j][v] {
                    return false;
                }
                rows[i][v] = true;
                cols[j][v] = true;
            }
        }
        true
    }
}

=======

        let mut rows = vec![vec![false; matrix.len()]; matrix.len()];
        let mut cols = vec![vec![false; matrix.len()]; matrix.len()];
        for i in 0..matrix.len() {
            for j in 0..matrix.len() {
                rows[i][matrix[i][j] as usize - 1] = true;
                cols[j][matrix[i][j] as usize - 1] = true;
            }
        }
        for i in 0..matrix.len() {
            for j in 0..matrix.len() {
                if !rows[i][j] || !cols[i][j] {
                    return false;
                }
            }
        }
        true

=======

        let mut row = vec![0; matrix.len()];
        let mut col = vec![0; matrix.len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[i].len() {
                row[i] |= 1 << matrix[i][j];
                col[j] |= 1 << matrix[i][j];
            }
        }
        for i in 0..matrix.len() {
            if row[i] != (1 << (matrix.len() + 1)) - 2 {
                return false;
            }
            if col[i] != (1 << (matrix.len() + 1)) - 2 {
                return false;
            }
        }
        true
    }
}
