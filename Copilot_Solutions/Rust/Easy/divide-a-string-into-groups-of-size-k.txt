Synthesizing 9/10 solutions

=======

        let mut res: Vec<String> = vec![];
        let mut tmp: String = "".to_string();
        for c in s.chars() {
            tmp.push(c);
            if tmp.len() == k as usize {
                res.push(tmp.clone());
                tmp = "".to_string();
            }
        }
        if tmp.len() > 0 {
            for _ in tmp.len()..k as usize {
                tmp.push(fill);
            }
            res.push(tmp);
        }
        res
    }
}

=======

        let mut s = s;
        let mut res = vec![];
        let k = k as usize;
        while s.len() > k {
            res.push(s[..k].to_string());
            s = s[k..].to_string();
        }
        res.push(s + &fill.to_string().repeat(k-s.len()));
        res
    }
}

=======

        let mut res = Vec::new();
        let mut s = s;
        let k = k as usize;
        while s.len() > k {
            let (a, b) = s.split_at(k);
            res.push(a.to_string());
            s = b.to_string();
        }
        while s.len() < k {
            s.push(fill);
        }
        res.push(s);
        res
    }
}

=======

        let mut res = Vec::new();
        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < s.len() {
            let mut tmp = String::new();
            for j in 0..k {
                if i < s.len() {
                    tmp.push(s[i]);
                    i += 1;
                } else {
                    tmp.push(fill);
                }
            }
            res.push(tmp);
        }
        res

=======

        let mut result = Vec::new();
        let mut i = 0;
        let mut j = k as usize;
        let mut s = s;
        while j <= s.len() {
            result.push(s[i..j].to_string());
            i += k as usize;
            j += k as usize;
        }
        if i < s.len() {
            let mut s = s[i..].to_string();
            while s.len() < k as usize {
                s.push(fill);
            }
            result.push(s);
        }
        result
    }
}

=======

        let mut result = vec![];
        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < s.len() {
            let mut group = vec![];
            for _ in 0..k {
                if i < s.len() {
                    group.push(s[i]);
                } else {
                    group.push(fill);
                }
                i += 1;
            }
            result.push(group.iter().collect::<String>());
        }
        result
    }
}

=======

        let mut result = vec![];
        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() {
            j = i + k as usize;
            if j > s.len() {
                let mut tmp = vec![];
                while i < s.len() {
                    tmp.push(s[i]);
                    i += 1;
                }
                while tmp.len() < k as usize {
                    tmp.push(fill);
                }
                result.push(tmp.iter().collect());
            } else {
                result.push(s[i..j].iter().collect());
                i = j;
            }
        }
        result
    }
}

=======

        let mut res: Vec<String> = Vec::new();
        let mut i = 0;
        let mut j = i + k as usize;
        let mut s = s;
        while j <= s.len() {
            res.push(s[i..j].to_string());
            i = j;
            j = i + k as usize;
        }
        if i < s.len() {
            let mut tmp = s[i..].to_string();
            while tmp.len() < k as usize {
                tmp.push(fill);
            }
            res.push(tmp);
        }
        res
    }
}

=======

        let mut res = Vec::new();
        let mut i = 0;
        let mut j = k as usize;
        let mut s = s;
        while j <= s.len() {
            let mut ss = s[i..j].to_string();
            i += k as usize;
            j += k as usize;
            res.push(ss);
        }
        if i < s.len() {
            let mut ss = s[i..].to_string();
            while ss.len() < k as usize {
                ss.push(fill);
            }
            res.push(ss);
        }
        res
    }
}
