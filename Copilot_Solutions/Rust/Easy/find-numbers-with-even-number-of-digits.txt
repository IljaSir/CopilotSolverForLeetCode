Synthesizing 10/10 solutions (Duplicates hidden)

=======

        nums.iter().filter(|x| x.to_string().len() % 2 == 0).count() as i32

=======

        let mut count = 0;
        for n in nums {
            if n.to_string().len() % 2 == 0 {
                count += 1;
            }
        }
        count

=======

        nums.iter().filter(|&x| x.to_string().len() % 2 == 0).count() as i32

=======

        nums.into_iter().filter(|n| n.to_string().len() % 2 == 0).count() as i32
    }
}

=======

        let mut count = 0;
        for num in nums {
            let mut n = num;
            let mut digits = 0;
            while n > 0 {
                n /= 10;
                digits += 1;
            }
            if digits % 2 == 0 {
                count += 1;
            }
        }
        count
    }
}

=======

        nums.iter().fold(0, |acc, x| if x.to_string().len() % 2 == 0 { acc + 1 } else { acc })

=======

        let mut result = 0;
        for i in nums {
            let mut count = 0;
            let mut num = i;
            while num > 0 {
                num = num / 10;
                count += 1;
            }
            if count % 2 == 0 {
                result += 1;
            }
        }
        result

=======

        let mut count = 0;
        for i in nums {
            let mut tmp = i;
            let mut len = 0;
            while tmp > 0 {
                tmp /= 10;
                len += 1;
            }
            if len % 2 == 0 {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        for n in nums {
            let mut tmp = 0;
            let mut m = n;
            while m > 0 {
                m /= 10;
                tmp += 1;
            }
            if tmp % 2 == 0 {
                res += 1;
            }
        }
        res
