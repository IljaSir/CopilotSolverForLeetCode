Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut words = words;
        let mut i = 0;
        while i < words.len() - 1 {
            let mut j = i + 1;
            while j < words.len() {
                if Solution::is_anagram(&words[i], &words[j]) {
                    words.remove(j);
                    continue;
                }
                j += 1;
            }
            i += 1;
        }
        words

=======

        let mut words = words;
        let mut i = 0;
        while i < words.len() {
            let mut j = i + 1;
            while j < words.len() {
                if is_anagram(&words[i], &words[j]) {
                    words.remove(j);
                } else {
                    j += 1;
                }
            }
            i += 1;
        }
        words
    }
}

=======

        let mut words = words;
        let mut i = 0;
        while i < words.len() - 1 {
            let mut j = i + 1;
            while j < words.len() {
                if Self::is_anagram(&words[i], &words[j]) {
                    words.remove(j);
                } else {
                    j += 1;
                }
            }
            i += 1;
        }
        words
    }
    fn is_anagram(a: &str, b: &str) -> bool {
        if a == b {
            return true;
        }
        let mut a = a.chars().collect::<Vec<_>>();
        let mut b = b.chars().collect::<Vec<_>>();
        a.sort();
        b.sort();
        a == b
    }
}

=======

        let mut words = words;
        let mut i = 1;
        while i < words.len() {
            if words[i-1].chars().collect::<Vec<char>>().sort() == words[i].chars().collect::<Vec<char>>().sort() {
                words.remove(i);
            } else {
                i += 1;
            }
        }
        words
    }
}

=======

        let mut result = Vec::new();
        let mut i = 0;
        while i < words.len() {
            let mut j = i + 1;
            while j < words.len() {
                if is_anagram(&words[i], &words[j]) {
                    break;
                }
                j += 1;
            }
            if j == words.len() {
                result.push(words[i].clone());
            }
            i += 1;
        }
        result
    }
}

=======

        let mut words = words;
        let mut i = 0;
        while i < words.len() - 1 {
            if words[i].chars().sorted().eq(words[i + 1].chars().sorted()) {
                words.remove(i + 1);
            } else {
                i += 1;
            }
        }
        words
    }
}

=======

        let mut words = words;
        let mut i = 0;
        while i < words.len() {
            let mut j = i + 1;
            let mut found = false;
            while j < words.len() {
                if Solution::is_anagram(&words[i], &words[j]) {
                    words.remove(j);
                    found = true;
                } else {
                    j += 1;
                }
            }
            if found {
                words.remove(i);
            } else {
                i += 1;
            }
        }
        words
    }
    fn is_anagram(word1: &str, word2: &str) -> bool {
        if word1.len() != word2.len() {
            return false;
        }
        let mut chars = vec![0; 26];
        for c in word1.chars() {
            chars[c as usize - 'a' as usize] += 1;
        }
        for c in word2.chars() {
            chars[c as usize - 'a' as usize] -= 1;
        }
        chars.iter().all(|&x| x == 0)

=======

        let mut res: Vec<String> = Vec::new();
        let mut dict: HashMap<String, i32> = HashMap::new();
        for word in words {
            let mut tmp: Vec<char> = word.chars().collect();
            tmp.sort();
            let tmp = tmp.iter().collect::<String>();
            if !dict.contains_key(&tmp) {
                res.push(word);
                dict.insert(tmp, 1);
            }
        }
        res
    }
}

=======

        let mut res = Vec::new();
        let mut map: HashMap<String, usize> = HashMap::new();
        for (i, w) in words.iter().enumerate() {
            let mut v: Vec<char> = w.chars().collect();
            v.sort();
            let s = v.iter().collect::<String>();
            let n = map.entry(s).or_insert(0);
            if *n == 0 {
                res.push(w.clone());
            }
            *n += 1;
        }
        res
    }
}
