Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut i = m - 1;
        let mut j = n - 1;
        let mut k = m + n - 1;
        while i >= 0 && j >= 0 {
            if nums1[i as usize] > nums2[j as usize] {
                nums1[k as usize] = nums1[i as usize];
                i -= 1;
            } else {
                nums1[k as usize] = nums2[j as usize];
                j -= 1;
            }
            k -= 1;
        }
        while j >= 0 {
            nums1[k as usize] = nums2[j as usize];
            j -= 1;
            k -= 1;
        }
    }
}

=======

        let mut i = m - 1;
        let mut j = n - 1;
        let mut k = m + n - 1;
        while i >= 0 && j >= 0 {
            if nums1[i as usize] > nums2[j as usize] {
                nums1[k as usize] = nums1[i as usize];
                i -= 1;
            } else {
                nums1[k as usize] = nums2[j as usize];
                j -= 1;
            }
            k -= 1;
        }
        while j >= 0 {
            nums1[k as usize] = nums2[j as usize];
            j -= 1;
            k -= 1;
        }

=======

        let mut i = m - 1;
        let mut j = n - 1;
        let mut k = m + n - 1;
        while i >= 0 && j >= 0 {
            if nums1[i as usize] < nums2[j as usize] {
                nums1[k as usize] = nums2[j as usize];
                j -= 1;
            } else {
                nums1[k as usize] = nums1[i as usize];
                i -= 1;
            }
            k -= 1;
        }
        while j >= 0 {
            nums1[k as usize] = nums2[j as usize];
            j -= 1;
            k -= 1;
        }

=======

        let mut i = m - 1;
        let mut j = n - 1;
        let mut k = (m + n - 1) as usize;
        while i >= 0 && j >= 0 {
            if nums1[i as usize] > nums2[j as usize] {
                nums1[k] = nums1[i as usize];
                i -= 1;
            } else {
                nums1[k] = nums2[j as usize];
                j -= 1;
            }
            k -= 1;
        }
        while j >= 0 {
            nums1[k] = nums2[j as usize];
            j -= 1;
            k -= 1;
        }
    }
}

=======

        let (mut i, mut j) = (m - 1, n - 1);
        let mut k = (m + n - 1) as usize;
        while i >= 0 && j >= 0 {
            if nums1[i as usize] > nums2[j as usize] {
                nums1[k] = nums1[i as usize];
                i -= 1;
            } else {
                nums1[k] = nums2[j as usize];
                j -= 1;
            }
            k -= 1;
        }
        while j >= 0 {
            nums1[k] = nums2[j as usize];
            j -= 1;
            k -= 1;
        }
    }
}

=======

        let mut i = (m - 1) as usize;
        let mut j = (n - 1) as usize;
        let mut k = (m + n - 1) as usize;
        while i != usize::MAX && j != usize::MAX {
            if nums1[i] > nums2[j] {
                nums1[k] = nums1[i];
                i -= 1;
            } else {
                nums1[k] = nums2[j];
                j -= 1;
            }
            k -= 1;
        }
        while j != usize::MAX {
            nums1[k] = nums2[j];
            j -= 1;
            k -= 1;
        }
    }
}

=======

        let (mut m, mut n) = (m as usize, n as usize);
        let mut i = m + n - 1;
        while m > 0 && n > 0 {
            if nums1[m - 1] >= nums2[n - 1] {
                nums1[i] = nums1[m - 1];
                m -= 1;
            } else {
                nums1[i] = nums2[n - 1];
                n -= 1;
            }
            i -= 1;
        }
        if n > 0 {
            nums1[..n].copy_from_slice(&nums2[..n]);
        }
    }
}

=======

        let mut m = m;
        let mut n = n;
        let mut p = m + n - 1;
        while m > 0 && n > 0 {
            if nums1[(m - 1) as usize] < nums2[(n - 1) as usize] {
                nums1[p as usize] = nums2[(n - 1) as usize];
                n -= 1;
            } else {
                nums1[p as usize] = nums1[(m - 1) as usize];
                m -= 1;
            }
            p -= 1;
        }
        while n > 0 {
            nums1[p as usize] = nums2[(n - 1) as usize];
            n -= 1;
            p -= 1;
        }
    }
}
