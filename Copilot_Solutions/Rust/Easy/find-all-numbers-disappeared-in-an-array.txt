Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        for i in 0..nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            nums[idx] = -nums[idx].abs();
        }
        let mut ans = Vec::new();
        for i in 0..nums.len() {
            if nums[i] > 0 {
                ans.push((i + 1) as i32);
            }
        }
        ans

=======

        let mut nums = nums;
        let n = nums.len();
        for i in 0..n {
            let index = (nums[i].abs() - 1) as usize;
            if nums[index] > 0 {
                nums[index] *= -1;
            }
        }
        let mut result = Vec::new();
        for i in 0..n {
            if nums[i] > 0 {
                result.push((i + 1) as i32);
            }
        }
        result

=======

        let mut nums = nums;
        for i in 0..nums.len() {
            let mut index = (nums[i].abs() - 1) as usize;
            if nums[index] > 0 {
                nums[index] *= -1;
            }
        }
        let mut ans = Vec::new();
        for i in 0..nums.len() {
            if nums[i] > 0 {
                ans.push((i + 1) as i32);
            }
        }
        ans
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            let j = (nums[i] - 1) as usize;
            if nums[i] != nums[j] {
                nums.swap(i, j);
            } else {
                i += 1;
            }
        }
        let mut missing = Vec::new();
        for (i, &n) in nums.iter().enumerate() {
            if n != i as i32 + 1 {
                missing.push(i as i32 + 1);
            }
        }
        missing

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            let j = (nums[i] - 1) as usize;
            if nums[i] != nums[j] {
                nums.swap(i, j);
            } else {
                i += 1;
            }
        }
        nums.iter()
            .enumerate()
            .filter(|(i, &x)| x != (*i + 1) as i32)
            .map(|(_, &x)| x)
            .collect()
    }
}

=======

        let mut res = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let index = (nums[i].abs() - 1) as usize;
            if nums[index] > 0 {
                nums[index] *= -1;
            }
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                res.push((i + 1) as i32);
            }
        }
        res

=======

        let mut nums = nums;
        let mut res = vec![];
        for i in 0..nums.len() {
            let mut index = (nums[i].abs() - 1) as usize;
            if nums[index] > 0 {
                nums[index] = -nums[index];
            }
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                res.push((i + 1) as i32);
            }
        }
        res

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] != (i + 1) as i32 {
                let pos = nums[i] as usize - 1;
                if nums[i] != nums[pos] {
                    nums.swap(i, pos);
                    continue;
                }
            }
            i += 1;
        }
        let mut res = Vec::new();
        for i in 0..nums.len() {
            if nums[i] != (i + 1) as i32 {
                res.push((i + 1) as i32);
            }
        }
        res
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            let mut j = nums[i] as usize;
            if j != 0 && nums[j - 1] != 0 {
                nums[i] = nums[j - 1];
                nums[j - 1] = 0;
            } else {
                i += 1;
            }
        }
        nums.iter()
            .enumerate()
            .filter(|(_, &v)| v != 0)
            .map(|(i, _)| (i + 1) as i32)
            .collect()

=======

        let mut result: Vec<i32> = vec![];
        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            if nums[idx] > 0 {
                nums[idx] *= -1;
            }
            i += 1;
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                result.push((i + 1) as i32);
            }
        }
        result
    }
}
