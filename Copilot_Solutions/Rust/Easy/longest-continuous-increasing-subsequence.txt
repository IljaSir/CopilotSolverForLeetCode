Synthesizing 10/10 solutions

=======

        if nums.len() == 0 {
            return 0;
        }
        let mut max = 1;
        let mut cur = 1;
        for i in 1..nums.len() {
            if nums[i] > nums[i-1] {
                cur += 1;
            } else {
                cur = 1;
            }
            max = max.max(cur);
        }
        max

=======

        if nums.is_empty() {
            return 0;
        }
        let mut longest = 1;
        let mut current = 1;
        for i in 1..nums.len() {
            if nums[i] > nums[i - 1] {
                current += 1;
                longest = longest.max(current);
            } else {
                current = 1;
            }
        }
        longest

=======

        if nums.len() == 0 {
            return 0;
        }
        let mut max = 1;
        let mut current = 1;
        for i in 1..nums.len() {
            if nums[i] > nums[i - 1] {
                current += 1;
            } else {
                max = max.max(current);
                current = 1;
            }
        }
        max.max(current)
    }
}

=======

        let mut max = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if i == 0 || nums[i] > nums[i - 1] {
                count += 1;
            } else {
                count = 1;
            }
            max = max.max(count);
        }
        max

=======

        if nums.len() == 0 { return 0; }
        let mut max = 1;
        let mut current = 1;
        for i in 1..nums.len() {
            if nums[i] > nums[i - 1] {
                current += 1;
                max = std::cmp::max(max, current);
            } else {
                current = 1;
            }
        }
        max

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = std::i32::MIN;
        for n in nums {
            if n > prev {
                count += 1;
            } else {
                count = 1;
            }
            prev = n;
            max = std::cmp::max(max, count);
        }
        max

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = std::i32::MIN;
        for n in nums {
            if n > prev {
                count += 1;
            } else {
                max = std::cmp::max(max, count);
                count = 1;
            }
            prev = n;
        }
        std::cmp::max(max, count)

=======

        let mut max_len = 0;
        let mut cur_len = 0;
        let mut prev = std::i32::MIN;
        for i in 0..nums.len() {
            if nums[i] > prev {
                cur_len += 1;
                max_len = max_len.max(cur_len);
            } else {
                cur_len = 1;
            }
            prev = nums[i];
        }
        max_len as i32
    }
}

=======

        let mut max = 0;
        let mut current = 0;
        let mut prev = i32::MIN;
        for n in nums {
            if n > prev {
                current += 1;
            } else {
                max = i32::max(max, current);
                current = 1;
            }
            prev = n;
        }
        i32::max(max, current)
    }
}

=======

        let mut max = 0;
        let mut cur = 0;
        for (i, n) in nums.iter().enumerate() {
            if i == 0 {
                cur = 1;
            } else {
                if n > &nums[i-1] {
                    cur += 1;
                } else {
                    cur = 1;
                }
            }
            if cur > max {
                max = cur;
            }
        }
        max
