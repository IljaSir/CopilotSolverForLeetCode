Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut image = image;
        for i in 0..image.len() {
            image[i].reverse();
            for j in 0..image[i].len() {
                image[i][j] = 1 - image[i][j];
            }
        }
        image

=======

        image
            .into_iter()
            .map(|mut row| {
                row.reverse();
                row.into_iter().map(|x| 1 - x).collect()
            })
            .collect()
    }
}

=======

        let mut image = image;
        for row in image.iter_mut() {
            row.reverse();
            for i in row.iter_mut() {
                *i ^= 1;
            }
        }
        image
    }
}

=======

        let mut result = Vec::new();
        for row in image {
            let mut row = row;
            row.reverse();
            for i in 0..row.len() {
                if row[i] == 0 {
                    row[i] = 1;
                } else {
                    row[i] = 0;
                }
            }
            result.push(row);
        }
        result

=======

        let mut result = vec![];
        for row in image {
            let mut new_row = vec![];
            for i in (0..row.len()).rev() {
                new_row.push(if row[i] == 1 { 0 } else { 1 });
            }
            result.push(new_row);
        }
        result
    }
}

=======

        image.into_iter().map(|row| row.into_iter().rev().map(|x| 1-x).collect()).collect()
    }
}

=======

        image.iter().map(|row| {
            let mut result = row.clone();
            result.reverse();
            result.iter().map(|&x| 1 - x).collect::<Vec<i32>>()
        }).collect::<Vec<Vec<i32>>>()

=======

        let mut result = Vec::new();
        for row in image {
            let mut row = row;
            row.reverse();
            let mut new_row = Vec::new();
            for pixel in row {
                match pixel {
                    0 => new_row.push(1),
                    _ => new_row.push(0),
                }
            }
            result.push(new_row);
        }
        result
    }
}

=======

        let mut ret = Vec::new();
        
        for row in image {
            let mut rev = row;
            rev.reverse();
            let rev = rev;
            let mut inv = Vec::new();
            for col in rev {
                if col == 0 {
                    inv.push(1);
                } else {
                    inv.push(0);
                }
            }
            ret.push(inv);
        }
        
        ret
    }
}
