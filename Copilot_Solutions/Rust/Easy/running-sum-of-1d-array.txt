Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            result.push(sum);
        }
        result

=======

        let mut sum = 0;
        let mut result = Vec::new();
        for i in 0..nums.len() {
            sum += nums[i];
            result.push(sum);
        }
        result
    }
}

=======

        let mut sum = 0;
        let mut result = Vec::new();
        for i in 0..nums.len() {
            sum += nums[i];
            result.push(sum);
        }
        result

=======

        let mut sum = 0;
        let mut result: Vec<i32> = Vec::new();
        for i in 0..nums.len() {
            sum += nums[i];
            result.push(sum);
        }
        result

=======

        let mut sum = 0;
        let mut result = vec![];
        for i in 0..nums.len() {
            sum += nums[i];
            result.push(sum);
        }
        result
    }
}

=======

        let mut sum = 0;
        let mut result = Vec::new();
        for i in nums {
            sum += i;
            result.push(sum);
        }
        result

=======

        let mut sum = 0;
        let mut result = vec![];
        for num in nums {
            sum += num;
            result.push(sum);
        }
        result

=======

        let mut sum = 0;
        nums.into_iter().map(|x| {
            sum += x;
            sum
        }).collect()
    }
}

=======

        let mut res = Vec::new();
        let mut sum = 0;
        for num in nums.iter() {
            sum += num;
            res.push(sum);
        }
        res
    }
}

=======

        let mut rs = vec![];
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            rs.push(sum);
        }
        rs
    }
}
