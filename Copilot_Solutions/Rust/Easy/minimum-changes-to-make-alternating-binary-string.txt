Synthesizing 10/10 solutions

=======

        let mut even = 0;
        let mut odd = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '1' {
                    even += 1;
                } else {
                    odd += 1;
                }
            } else {
                if c == '0' {
                    even += 1;
                } else {
                    odd += 1;
                }
            }
        }
        even.min(odd)
    }
}

=======

        let s = s.chars().collect::<Vec<char>>();
        let mut count = 0;
        for i in 0..s.len() {
            if i % 2 == 0 {
                if s[i] == '1' {
                    count += 1;
                }
            } else {
                if s[i] == '0' {
                    count += 1;
                }
            }
        }
        let mut count2 = 0;
        for i in 0..s.len() {
            if i % 2 == 0 {
                if s[i] == '0' {
                    count2 += 1;
                }
            } else {
                if s[i] == '1' {
                    count2 += 1;
                }
            }
        }
        count.min(count2)

=======

        let mut c1 = 0;
        let mut c2 = 0;
        let mut i = 0;
        for c in s.chars() {
            if i % 2 == 0 {
                if c == '0' {
                    c1 += 1;
                } else {
                    c2 += 1;
                }
            } else {
                if c == '0' {
                    c2 += 1;
                } else {
                    c1 += 1;
                }
            }
            i += 1;
        }
        c1.min(c2)

=======

        let mut min = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '1' {
                    min += 1;
                }
            } else {
                if c == '0' {
                    min += 1;
                }
            }
        }
        min.min(s.len() as i32 - min)
    }
}

=======

        let mut count = 0;
        let mut count2 = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '1' {
                    count += 1;
                } else {
                    count2 += 1;
                }
            } else {
                if c == '0' {
                    count += 1;
                } else {
                    count2 += 1;
                }
            }
        }
        count.min(count2)

=======

        let mut count = 0;
        let mut count1 = 0;
        let mut count2 = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '1' {
                    count1 += 1;
                } else {
                    count2 += 1;
                }
            } else {
                if c == '1' {
                    count2 += 1;
                } else {
                    count1 += 1;
                }
            }
        }
        std::cmp::min(count1, count2)

=======

        let mut c1 = 0;
        let mut c2 = 0;
        let mut i = 0;
        for c in s.chars() {
            if (i % 2 == 0 && c == '1') || (i % 2 == 1 && c == '0') {
                c1 += 1;
            } else {
                c2 += 1;
            }
            i += 1;
        }
        std::cmp::min(c1, c2)

=======

        let mut res = 0;
        let mut c = '0';
        for i in s.chars() {
            if i != c {
                res += 1;
            }
            c = if c == '0' { '1' } else { '0' };
        }
        res.min(s.len() - res) as i32

=======

        let mut res = 0;
        let mut res2 = 0;
        let mut c = '0';
        let mut c2 = '1';
        for i in s.chars() {
            if i == c {
                res += 1;
            } else {
                res2 += 1;
            }
            c = if c == '0' { '1' } else { '0' };
            c2 = if c2 == '0' { '1' } else { '0' };
        }
        res.min(res2)

=======

        let mut s0 = 0;
        let mut s1 = 0;
        let mut s0c = 0;
        let mut s1c = 0;
        let mut s0c1 = 0;
        let mut s1c1 = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '0' {
                    s0c += 1;
                } else {
                    s1c += 1;
                }
            } else {
                if c == '0' {
                    s0c1 += 1;
                } else {
                    s1c1 += 1;
                }
            }
        }
        s0 = s0c + s1c1;
        s1 = s0c1 + s1c;
        s0.min(s1)
