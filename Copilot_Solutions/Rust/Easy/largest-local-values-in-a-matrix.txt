Synthesizing 10/10 solutions

=======

        let n = grid.len();
        let mut max_local = vec![vec![0; n - 2]; n - 2];
        for i in 1..n - 1 {
            for j in 1..n - 1 {
                max_local[i - 1][j - 1] = vec![
                    grid[i - 1][j - 1],
                    grid[i - 1][j],
                    grid[i - 1][j + 1],
                    grid[i][j - 1],
                    grid[i][j],
                    grid[i][j + 1],
                    grid[i + 1][j - 1],
                    grid[i + 1][j],
                    grid[i + 1][j + 1],
                ]
                .into_iter()
                .max()
                .unwrap();
            }
        }
        max_local
    }
}

=======

        let n = grid.len();
        let mut max_local = vec![vec![0; n - 2]; n - 2];
        for i in 0..n - 2 {
            for j in 0..n - 2 {
                max_local[i][j] = grid[i][j..j + 3].iter().max().unwrap();
                max_local[i][j] = max_local[i][j].max(grid[i + 1][j..j + 3].iter().max().unwrap());
                max_local[i][j] = max_local[i][j].max(grid[i + 2][j..j + 3].iter().max().unwrap());
            }
        }
        max_local
    }
}

=======

        let mut max_local = vec![vec![0; grid.len() - 2]; grid.len() - 2];
        for i in 1..grid.len() - 1 {
            for j in 1..grid.len() - 1 {
                max_local[i - 1][j - 1] = vec![
                    grid[i - 1][j - 1],
                    grid[i - 1][j],
                    grid[i - 1][j + 1],
                    grid[i][j - 1],
                    grid[i][j],
                    grid[i][j + 1],
                    grid[i + 1][j - 1],
                    grid[i + 1][j],
                    grid[i + 1][j + 1],
                ]
                .iter()
                .max()
                .unwrap()
                .clone();
            }
        }
        max_local
    }
}

=======

        let n = grid.len();
        let mut max_local = vec![vec![0; n - 2]; n - 2];
        for i in 1..(n - 1) {
            for j in 1..(n - 1) {
                max_local[i - 1][j - 1] = vec![
                    grid[i - 1][j - 1],
                    grid[i - 1][j],
                    grid[i - 1][j + 1],
                    grid[i][j - 1],
                    grid[i][j],
                    grid[i][j + 1],
                    grid[i + 1][j - 1],
                    grid[i + 1][j],
                    grid[i + 1][j + 1],
                ].iter().max().unwrap().clone();
            }
        }
        max_local
    }
}

=======

        let mut maxLocal = vec![vec![0; grid.len() - 2]; grid.len() - 2];
        for i in 0..grid.len() - 2 {
            for j in 0..grid.len() - 2 {
                let mut max = grid[i][j];
                for k in 0..3 {
                    for l in 0..3 {
                        max = max.max(grid[i + k][j + l]);
                    }
                }
                maxLocal[i][j] = max;
            }
        }
        maxLocal
    }
}

=======

        let mut max = vec![vec![0; grid.len() - 2]; grid.len() - 2];
        for i in 0..grid.len() - 2 {
            for j in 0..grid.len() - 2 {
                let mut max_val = 0;
                for k in 0..3 {
                    for l in 0..3 {
                        if grid[i + k][j + l] > max_val {
                            max_val = grid[i + k][j + l];
                        }
                    }
                }
                max[i][j] = max_val;
            }
        }
        max
    }
}

=======

        let mut result = Vec::new();
        let n = grid.len();
        for i in 0..n - 2 {
            let mut row = Vec::new();
            for j in 0..n - 2 {
                let mut max = 0;
                for k in i..i + 3 {
                    for l in j..j + 3 {
                        max = max.max(grid[k][l]);
                    }
                }
                row.push(max);
            }
            result.push(row);
        }
        result

=======

        let mut max_local = vec![];
        let n = grid.len();
        for i in 1..n-1 {
            let mut row = vec![];
            for j in 1..n-1 {
                let mut max = 0;
                for ii in i-1..i+2 {
                    for jj in j-1..j+2 {
                        max = std::cmp::max(max, grid[ii][jj]);
                    }
                }
                row.push(max);
            }
            max_local.push(row);
        }
        max_local

=======

        let mut max_local = vec![];
        for i in 1..grid.len()-1 {
            let mut row = vec![];
            for j in 1..grid[i].len()-1 {
                let mut max = 0;
                for k in 0..3 {
                    for l in 0..3 {
                        max = max.max(grid[i-1+k][j-1+l]);
                    }
                }
                row.push(max);
            }
            max_local.push(row);
        }
        max_local
    }
}

=======

        let mut result = vec![vec![0; grid.len()-2]; grid.len()-2];
        let mut max = 0;
        for i in 0..grid.len()-2 {
            for j in 0..grid.len()-2 {
                max = 0;
                for x in i..i+3 {
                    for y in j..j+3 {
                        if grid[x][y] > max {
                            max = grid[x][y];
                        }
                    }
                }
                result[i][j] = max;
            }
        }
        result
    }
}
