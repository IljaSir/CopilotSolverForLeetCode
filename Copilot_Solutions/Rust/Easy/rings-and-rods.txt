Synthesizing 10/10 solutions

=======

        let mut r = 0;
        let mut g = 0;
        let mut b = 0;
        for i in 0..rings.len() {
            if i % 2 == 0 {
                match rings.as_bytes()[i] {
                    b'R' => r += 1,
                    b'G' => g += 1,
                    b'B' => b += 1,
                    _ => (),
                }
            }
        }
        let mut result = 0;
        for i in 0..rings.len() {
            if i % 2 == 1 {
                match rings.as_bytes()[i] {
                    b'0' => {
                        if r > 0 && g > 0 && b > 0 {
                            result += 1;
                        }
                    }
                    b'1' => {
                        if r > 1 && g > 0 && b > 0 {
                            result += 1;
                        }
                    }
                    b'2' => {
                        if r > 0 && g > 1 && b > 0 {
                            result += 1;
                        }
                    }
                    b'3' => {
                        if r > 0 && g > 0 && b > 1 {
                            result += 1;
                        }
                    }
                    b'4' => {
                        if r > 1 && g > 1 && b > 0 {
                            result += 1;
                        }
                    }
                    b'5' => {
                        if r > 1 && g > 0 && b > 1 {
                            result += 1;
                        }
                    }
                    b'6' => {
                        if r > 0 && g > 1 && b > 1 {
                            result += 1;
                        }
                    }
                    b'7' => {
                        if r > 1 && g > 1 && b > 1 {
                            result += 1;
                        }
                    }
                    b'8' => {
                        if r > 2 && g > 1 && b > 0 {
                            result += 1;
                        }
                    }
                    b'9' => {
                        if r > 2 && g > 0 && b > 1 {
                            result += 1;
                        }
                    }
                    _ => (),
                }
            }
        }
        result
    }
}

=======

        let mut r = 0;
        let mut g = 0;
        let mut b = 0;
        let mut res = 0;
        for i in 0..rings.len() {
            match rings.chars().nth(i).unwrap() {
                'R' => r += 1,
                'G' => g += 1,
                'B' => b += 1,
                _ => (),
            }
            if i % 2 == 1 {
                if r > 0 && g > 0 && b > 0 {
                    res += 1;
                }
                r = 0;
                g = 0;
                b = 0;
            }
        }
        
        res

=======

        let mut count = 0;
        for i in 0..10 {
            let mut has_r = false;
            let mut has_g = false;
            let mut has_b = false;
            for j in 0..rings.len() {
                if j % 2 == 1 && rings.as_bytes()[j] == i + 48 {
                    if rings.as_bytes()[j - 1] == 82 {
                        has_r = true;
                    } else if rings.as_bytes()[j - 1] == 71 {
                        has_g = true;
                    } else if rings.as_bytes()[j - 1] == 66 {
                        has_b = true;
                    }
                }
            }
            if has_r && has_g && has_b {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut rods = vec![0; 10];
        for (i, c) in rings.chars().enumerate() {
            if i % 2 == 0 {
                rods[c.to_digit(10).unwrap() as usize] += 1;
            }
        }
        for i in rods {
            if i == 3 {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        let mut count = vec![vec![0; 10]; 3];
        for (i, c) in rings.chars().enumerate() {
            count["RGB".find(c).unwrap()][(c as u8 - b'0') as usize] += 1;
            if i % 2 == 1 && count.iter().all(|v| v.iter().any(|&x| x > 0)) {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut rods = vec![0; 10];
        for (i, c) in rings.chars().enumerate() {
            if i % 2 == 0 {
                rods[c.to_digit(10).unwrap() as usize] |= 1 << (c as u8 - b'R');
            }
        }
        for rod in rods {
            if rod == 7 {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut map = vec![vec![0; 3]; 10];
        for i in 0..rings.len() {
            if i % 2 == 0 {
                let c = match rings.as_bytes()[i] {
                    b'R' => 0,
                    b'G' => 1,
                    b'B' => 2,
                    _ => 0,
                };
                let idx = (rings.as_bytes()[i + 1] - b'0') as usize;
                map[idx][c] += 1;
            }
        }
        for i in 0..10 {
            if map[i][0] > 0 && map[i][1] > 0 && map[i][2] > 0 {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut arr = vec![[0; 3]; 10];
        for (i, c) in rings.chars().enumerate() {
            if i % 2 == 0 {
                match c {
                    'R' => arr[rings.chars().nth(i + 1).unwrap().to_digit(10).unwrap() as usize][0] += 1,
                    'G' => arr[rings.chars().nth(i + 1).unwrap().to_digit(10).unwrap() as usize][1] += 1,
                    'B' => arr[rings.chars().nth(i + 1).unwrap().to_digit(10).unwrap() as usize][2] += 1,
                    _ => (),
                }
            }
        }
        for i in 0..10 {
            if arr[i][0] > 0 && arr[i][1] > 0 && arr[i][2] > 0 {
                res += 1;
            }
        }
        res

=======

        let mut result = 0;
        let mut rods = [[false; 3]; 10];
        for i in 0..rings.len() / 2 {
            rods[rings.chars().nth(i * 2 + 1).unwrap() as usize - 48][match rings.chars().nth(i * 2).unwrap() {
                'R' => 0,
                'G' => 1,
                'B' => 2,
                _ => 0,
            }] = true;
        }
        for i in 0..10 {
            if rods[i][0] && rods[i][1] && rods[i][2] {
                result += 1;
            }
        }
        result

=======

        let mut res = 0;
        let mut c = [0; 3];
        for i in 0..10 {
            let mut j = 0;
            while j < rings.len() {
                if rings[j] == '0' + i as u8 {
                    let k = match rings[j-1] {
                        'R' => 0,
                        'G' => 1,
                        'B' => 2,
                        _ => panic!(),
                    };
                    c[k] += 1;
                }
                j += 2;
            }
            if c.iter().all(|x| *x > 0) {
                res += 1;
            }
            c = [0; 3];
        }
        res
