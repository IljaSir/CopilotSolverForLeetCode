Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for i in 1..n {
            if !i.to_string().contains('0') && !(n - i).to_string().contains('0') {
                return vec![i, n - i];
            }
        }
        vec![]

=======

        for i in 1..n {
            if !i.to_string().contains('0') && !(n - i).to_string().contains('0') {
                return vec![i, n - i];
            }
        }
        Vec::new()

=======

        for i in 1..n {
            if !i.to_string().contains('0') && !(n-i).to_string().contains('0') {
                return vec![i, n-i];
            }
        }
        vec![]
    }
}

=======

        let mut a = 1;
        let mut b = n - 1;
        while a.to_string().contains('0') || b.to_string().contains('0') {
            a += 1;
            b -= 1;
        }
        vec![a, b]

=======

        let mut a = 1;
        let mut b = n - 1;
        while a.to_string().contains("0") || b.to_string().contains("0") {
            a += 1;
            b -= 1;
        }
        vec![a, b]

=======

        for i in 1..n {
            if !i.to_string().contains("0") && !((n - i).to_string().contains("0")) {
                return vec![i, n - i];
            }
        }
        vec![]

=======

        let mut a = 1;
        let mut b = n - 1;
        while contains_zero(a) || contains_zero(b) {
            a += 1;
            b -= 1;
        }
        vec![a, b]
    }
}

=======

        let mut i = 1;
        while i < n {
            if !i.to_string().contains("0") && !(n - i).to_string().contains("0") {
                return vec![i, n - i];
            }
            i += 1;
        }
        return vec![];

=======

        let mut res = vec![0, 0];
        let mut a = n;
        let mut b = 0;
        let mut i = 1;
        while a > 0 {
            b = a % 10;
            a = a / 10;
            if b == 0 {
                res[0] = i;
            } else if b == 1 {
                res[0] = i * 10;
            } else {
                res[0] = i * b;
                res[1] = i * (10 - b);
            }
            i = i * 10;
        }
        res
