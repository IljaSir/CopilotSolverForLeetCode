Synthesizing 10/10 solutions

=======

        let m = img.len();
        let n = img[0].len();
        let mut res = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut cnt = 0;
                let mut sum = 0;
                for x in -1..=1 {
                    for y in -1..=1 {
                        let r = i as i32 + x;
                        let c = j as i32 + y;
                        if r >= 0 && r < m as i32 && c >= 0 && c < n as i32 {
                            cnt += 1;
                            sum += img[r as usize][c as usize];
                        }
                    }
                }
                res[i][j] = sum / cnt;
            }
        }
        res

=======

        let m = img.len();
        let n = img[0].len();
        let mut ans = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut sum = 0;
                let mut cnt = 0;
                for ii in (i as i32 - 1)..=(i as i32 + 1) {
                    for jj in (j as i32 - 1)..=(j as i32 + 1) {
                        if ii >= 0 && ii < m as i32 && jj >= 0 && jj < n as i32 {
                            sum += img[ii as usize][jj as usize];
                            cnt += 1;
                        }
                    }
                }
                ans[i][j] = sum / cnt;
            }
        }
        ans

=======

        let m = img.len();
        let n = img[0].len();
        let mut result = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut sum = 0;
                let mut count = 0;
                for x in -1..=1 {
                    for y in -1..=1 {
                        if i as i32 + x >= 0 && i as i32 + x < m as i32 && j as i32 + y >= 0 && j as i32 + y < n as i32 {
                            sum += img[(i as i32 + x) as usize][(j as i32 + y) as usize];
                            count += 1;
                        }
                    }
                }
                result[i][j] = sum / count;
            }
        }
        result

=======

        let mut res = vec![vec![0; img[0].len()]; img.len()];
        for i in 0..img.len() {
            for j in 0..img[0].len() {
                let mut sum = 0;
                let mut count = 0;
                for m in -1..=1 {
                    for n in -1..=1 {
                        let x = i as i32 + m;
                        let y = j as i32 + n;
                        if x >= 0 && x < img.len() as i32 && y >= 0 && y < img[0].len() as i32 {
                            sum += img[x as usize][y as usize];
                            count += 1;
                        }
                    }
                }
                res[i][j] = sum / count;
            }
        }
        res

=======

        let mut res = vec![vec![0; img[0].len()]; img.len()];
        for i in 0..img.len() {
            for j in 0..img[0].len() {
                let mut count = 0;
                let mut sum = 0;
                for k in (i as i32 - 1)..=(i as i32 + 1) {
                    for l in (j as i32 - 1)..=(j as i32 + 1) {
                        if k >= 0 && k < img.len() as i32 && l >= 0 && l < img[0].len() as i32 {
                            sum += img[k as usize][l as usize];
                            count += 1;
                        }
                    }
                }
                res[i][j] = sum / count;
            }
        }
        res

=======

        let mut result = vec![vec![0; img[0].len()]; img.len()];
        for i in 0..img.len() {
            for j in 0..img[0].len() {
                let mut sum = 0;
                let mut count = 0;
                if i > 0 {
                    if j > 0 {
                        sum += img[i-1][j-1];
                        count += 1;
                    }
                    sum += img[i-1][j];
                    count += 1;
                    if j < img[0].len() - 1 {
                        sum += img[i-1][j+1];
                        count += 1;
                    }
                }
                if j > 0 {
                    sum += img[i][j-1];
                    count += 1;
                }
                sum += img[i][j];
                count += 1;
                if j < img[0].len() - 1 {
                    sum += img[i][j+1];
                    count += 1;
                }
                if i < img.len() - 1 {
                    if j > 0 {
                        sum += img[i+1][j-1];
                        count += 1;
                    }
                    sum += img[i+1][j];
                    count += 1;
                    if j < img[0].len() - 1 {
                        sum += img[i+1][j+1];
                        count += 1;
                    }
                }
                result[i][j] = sum / count;
            }
        }
        result

=======

        let mut ans = vec![vec![0; img[0].len()]; img.len()];
        for i in 0..img.len() {
            for j in 0..img[0].len() {
                let mut sum = 0;
                let mut count = 0;
                for k in -1..2 {
                    for l in -1..2 {
                        if i as i32 + k >= 0 && i as i32 + k < img.len() as i32 && j as i32 + l >= 0 && j as i32 + l < img[0].len() as i32 {
                            sum += img[(i as i32 + k) as usize][(j as i32 + l) as usize];
                            count += 1;
                        }
                    }
                }
                ans[i][j] = sum / count;
            }
        }
        ans

=======

        let mut ans = vec![vec![0; img[0].len()]; img.len()];
        for i in 0..img.len() {
            for j in 0..img[0].len() {
                let mut sum = 0;
                let mut count = 0;
                let mut x = i as i32;
                let mut y = j as i32;
                for k in 0..3 {
                    for l in 0..3 {
                        x = i as i32 - 1 + k;
                        y = j as i32 - 1 + l;
                        if x >= 0 && x < img.len() as i32 && y >= 0 && y < img[0].len() as i32 {
                            sum += img[x as usize][y as usize];
                            count += 1;
                        }
                    }
                }
                ans[i][j] = sum / count;
            }
        }
        ans

=======

        let mut ret = Vec::new();
        for i in 0..img.len() {
            let mut row = Vec::new();
            for j in 0..img[i].len() {
                let mut sum = 0;
                let mut cnt = 0;
                for x in i.saturating_sub(1)..=i+1 {
                    for y in j.saturating_sub(1)..=j+1 {
                        if x < img.len() && y < img[x].len() {
                            sum += img[x][y];
                            cnt += 1;
                        }
                    }
                }
                row.push(sum/cnt);
            }
            ret.push(row);
        }
        ret

=======

        let (m, n) = (img.len(), img[0].len());
        let mut res = vec![vec![0; n]; m];
        let mut count = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                for x in -1..=1 {
                    for y in -1..=1 {
                        if i as i32 + x >= 0 && i as i32 + x < m as i32 && j as i32 + y >= 0 && j as i32 + y < n as i32 {
                            res[i][j] += img[(i as i32 + x) as usize][(j as i32 + y) as usize];
                            count[i][j] += 1;
                        }
                    }
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                res[i][j] /= count[i][j];
            }
        }
        res
