Synthesizing 10/10 solutions

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..nums.len() {
            if i > k as usize {
                set.remove(&nums[i - k as usize - 1]);
            }
            if !set.insert(nums[i]) {
                return true;
            }
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, &n) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&n) {
                if i - j <= k as usize {
                    return true;
                }
            }
            map.insert(n, i);
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, &num) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&num) {
                if i as i32 - j <= k {
                    return true;
                }
            }
            map.insert(num, i as i32);
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, &x) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&x) {
                if i - j <= k as usize {
                    return true;
                }
            }
            map.insert(x, i);
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, num) in nums.iter().enumerate() {
            if let Some(&j) = map.get(num) {
                if i - j <= k as usize {
                    return true;
                }
            }
            map.insert(num, i);
        }
        false
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for (i, &v) in nums.iter().enumerate() {
            if let Some(&j) = map.get(&v) {
                if i as i32 - j as i32 <= k {
                    return true;
                }
            }
            map.insert(v, i);
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, v) in nums.iter().enumerate() {
            if let Some(j) = map.get(v) {
                if (i as i32 - j) <= k {
                    return true;
                }
            }
            map.insert(v, i as i32);
        }
        false
    }
}

=======

        let mut map = std::collections::HashMap::new();
        let mut i = 0;
        for num in nums {
            if let Some(j) = map.get(&num) {
                if i - j <= k {
                    return true;
                }
            }
            map.insert(num, i);
            i += 1;
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, &num) in nums.iter().enumerate() {
            if let Some(&old_i) = map.get(&num) {
                if i as i32 - old_i <= k {
                    return true;
                }
            }
            map.insert(num, i as i32);
        }
        false

=======

        let mut map = std::collections::HashMap::new();
        for (i, n) in nums.iter().enumerate() {
            match map.get(n) {
                Some(j) => {
                    if (i as i32 - *j) <= k {
                        return true;
                    }
                }
                None => {}
            }
            map.insert(n, i as i32);
        }
        false
