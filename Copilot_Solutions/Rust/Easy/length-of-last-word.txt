Synthesizing 10/10 solutions

=======

        s.trim().chars().rev().take_while(|&c| c != ' ').count() as i32
    }
}

=======

        let mut count = 0;
        let mut last = 0;
        for c in s.chars() {
            if c == ' ' {
                if count > 0 {
                    last = count;
                    count = 0;
                }
            } else {
                count += 1;
            }
        }
        if count > 0 {
            return count;
        } else {
            return last;
        }

=======

        let mut len = 0;
        let mut last = 0;
        for c in s.chars() {
            if c == ' ' {
                if len != 0 {
                    last = len;
                    len = 0;
                }
            } else {
                len += 1;
            }
        }
        if len != 0 {
            len
        } else {
            last
        }

=======

        let mut length = 0;
        let mut last = false;
        for c in s.chars().rev() {
            if c == ' ' {
                if last {
                    break;
                }
            } else {
                last = true;
                length += 1;
            }
        }
        length

=======

        s.trim_end().split_whitespace().last().map(|s| s.len() as i32).unwrap_or(0)
    }
}

=======

        let mut last_word_len = 0;
        let mut i = s.len() as i32 - 1;
        while i >= 0 && s.chars().nth(i as usize).unwrap() == ' ' {
            i -= 1;
        }
        while i >= 0 && s.chars().nth(i as usize).unwrap() != ' ' {
            last_word_len += 1;
            i -= 1;
        }
        last_word_len
    }
}

=======

        let s = s.trim();
        let mut i = s.len();
        while i > 0 {
            if s.as_bytes()[i-1] == b' ' {
                break;
            }
            i -= 1;
        }
        (s.len() - i) as i32
    }
}

=======

        let mut len = 0;
        let mut isWord = false;
        for c in s.chars().rev() {
            if c == ' ' {
                if isWord {
                    break;
                }
            } else {
                isWord = true;
                len += 1;
            }
        }
        len

=======

        let mut last_word = String::new();
        let mut found = false;
        for c in s.chars().rev() {
            if c == ' ' {
                if found {
                    break;
                }
            } else {
                found = true;
                last_word.push(c);
            }
        }
        last_word.len() as i32

=======

        let mut l = 0;
        let mut r = 0;
        let mut last = 0;
        for c in s.chars() {
            if c == ' ' {
                last = r - l;
                l = r + 1;
            }
            r += 1;
        }
        if r > l {
            last = r - l;
        }
        last as i32
    }
}
