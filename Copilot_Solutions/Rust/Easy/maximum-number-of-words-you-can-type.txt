Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for word in text.split(" ") {
            let mut ok = true;
            for c in word.chars() {
                if broken_letters.contains(c) {
                    ok = false;
                    break;
                }
            }
            if ok {
                count += 1;
            }
        }
        count

=======

        let mut can_type = true;
        let mut count = 0;
        for c in text.chars() {
            if c == ' ' {
                if can_type {
                    count += 1;
                }
                can_type = true;
            } else if broken_letters.contains(c) {
                can_type = false;
            }
        }
        if can_type {
            count += 1;
        }
        count

=======

        let mut count = 0;
        let mut broken = vec![false; 26];
        for c in broken_letters.chars() {
            broken[c as usize - 'a' as usize] = true;
        }
        for word in text.split_whitespace() {
            let mut ok = true;
            for c in word.chars() {
                if broken[c as usize - 'a' as usize] {
                    ok = false;
                    break;
                }
            }
            if ok {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut broken = vec![false; 26];
        for c in broken_letters.chars() {
            broken[c as usize - 'a' as usize] = true;
        }
        for word in text.split_ascii_whitespace() {
            let mut can = true;
            for c in word.chars() {
                if broken[c as usize - 'a' as usize] {
                    can = false;
                    break;
                }
            }
            if can {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        let mut broken = vec![false; 26];
        for c in broken_letters.chars() {
            broken[(c as u8 - 'a' as u8) as usize] = true;
        }
        for word in text.split_whitespace() {
            let mut ok = true;
            for c in word.chars() {
                if broken[(c as u8 - 'a' as u8) as usize] {
                    ok = false;
                    break;
                }
            }
            if ok {
                res += 1;
            }
        }
        res

=======

        let mut broken = [false; 26];
        for c in broken_letters.chars() {
            broken[c as usize - 'a' as usize] = true;
        }
        let mut res = 0;
        for word in text.split(' ') {
            if word.chars().all(|c| !broken[c as usize - 'a' as usize]) {
                res += 1;
            }
        }
        res

=======

        let mut count = 0;
        for word in text.split(" ") {
            let mut can = true;
            for c in word.chars() {
                if broken_letters.contains(c) {
                    can = false;
                    break;
                }
            }
            if can {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for word in text.split_ascii_whitespace() {
            let mut is_broken = false;
            for ch in word.chars() {
                if broken_letters.contains(ch) {
                    is_broken = true;
                    break;
                }
            }
            if !is_broken {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let broken: Vec<char> = broken_letters.chars().collect();
        for word in text.split_whitespace() {
            let mut flag = true;
            for c in word.chars() {
                if broken.contains(&c) {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        let broken: Vec<char> = broken_letters.chars().collect();
        let words: Vec<&str> = text.split(' ').collect();
        for word in words {
            let mut flag = true;
            for c in word.chars() {
                if broken.contains(&c) {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
        count
