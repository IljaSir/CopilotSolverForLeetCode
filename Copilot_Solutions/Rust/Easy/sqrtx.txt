Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = x;
        let mut ans = -1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if mid * mid <= x {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        ans

=======

        let mut l = 0;
        let mut r = x;
        let mut ans = -1;
        while l <= r {
            let mid = l + (r - l) / 2;
            if (mid as i64) * (mid as i64) <= x as i64 {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        ans

=======

        let mut x = x as i64;
        let mut r = x;
        while r * r > x {
            r = (r + x / r) / 2;
        }
        r as i32

=======

        if x == 0 {
            return 0;
        }
        let mut l = 1;
        let mut r = x;
        while l < r {
            let mid = l + (r - l) / 2;
            if mid > x / mid {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l - 1

=======

        if x == 0 {
            return 0;
        }
        let mut left = 1;
        let mut right = x;
        while left < right {
            let mid = (left + right) / 2;
            if mid > x / mid {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left - 1

=======

        let mut r = x;
        while r * r > x {
            r = (r + x / r) / 2;
        }
        return r;

=======

        let mut left = 0;
        let mut right = x;
        let mut mid = 0;
        while left <= right {
            mid = left + (right - left) / 2;
            if mid * mid == x {
                return mid;
            } else if mid * mid < x {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        right

=======

        if x == 0 {
            return 0;
        }
        let mut left = 1;
        let mut right = x;
        let mut mid = 0;
        while left <= right {
            mid = (left + right) / 2;
            let t = mid as i64 * mid as i64;
            if t == x as i64 {
                return mid;
            } else if t > x as i64 {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        if mid as i64 * mid as i64 > x as i64 {
            mid - 1
        } else {
            mid
        }

=======

        let mut i: i32 = 0;
        while i * i <= x {
            i += 1;
        }
        i - 1

=======

        let x = x as i64;
        let mut l = 0;
        let mut r = x;
        while l <= r {
            let m = (l + r) >> 1;
            let m2 = m * m;
            if m2 == x {
                return m as i32;
            }
            if m2 < x {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        r as i32
