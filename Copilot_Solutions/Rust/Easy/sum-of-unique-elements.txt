Synthesizing 10/10 solutions

=======

        let mut sum: i32 = 0;
        for i in 0..nums.len() {
            if nums.iter().filter(|&x| *x == nums[i]).count() == 1 {
                sum += nums[i];
            }
        }
        sum

=======

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        for i in nums {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        for (k, v) in map {
            if v == 1 {
                sum += k;
            }
        }
        sum
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        map.iter().filter(|(_, &v)| v == 1).map(|(k, _)| k).sum()

=======

        let mut sum = 0;
        let mut count = vec![0; 101];
        for i in nums {
            count[i as usize] += 1;
        }
        for i in 1..=100 {
            if count[i] == 1 {
                sum += i;
            }
        }
        sum

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for &n in nums.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        for (k, v) in map {
            if v == 1 {
                res += k;
            }
        }
        res
    }
}

=======

        let mut count = [0; 101];
        for num in nums.iter() {
            count[*num as usize] += 1;
        }
        let mut sum = 0;
        for (i, num) in count.iter().enumerate() {
            if *num == 1 {
                sum += i;
            }
        }
        sum

=======

        let mut counts = vec![0; 101];
        for &num in nums.iter() {
            counts[num as usize] += 1;
        }
        let mut sum = 0;
        for (num, &count) in counts.iter().enumerate() {
            if count == 1 {
                sum += num;
            }
        }
        sum as i32

=======

        let mut sum = 0;
        let mut count = vec![0; 101];
        for x in nums {
            count[x as usize] += 1;
        }
        for i in 0..count.len() {
            if count[i] == 1 {
                sum += i;
            }
        }
        sum

=======

        let mut sum = 0;
        let mut hash = [0; 101];
        for n in nums {
            hash[n as usize] += 1;
        }
        for (i, n) in hash.iter().enumerate() {
            if *n == 1 {
                sum += i;
            }
        }
        sum

=======

        let mut sum = 0;
        let mut count = vec![0; 101];
        for num in nums.into_iter() {
            count[num as usize] += 1;
        }
        for (i, c) in count.into_iter().enumerate() {
            if c == 1 {
                sum += i as i32;
            }
        }
        sum
