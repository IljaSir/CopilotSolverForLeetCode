Synthesizing 10/10 solutions

=======

        let mut res = vec![0; s.len()];
        let mut pos = -1;
        for i in 0..s.len() {
            if s.as_bytes()[i] == c as u8 {
                pos = i as i32;
            }
            res[i] = if pos == -1 {
                s.len() as i32
            } else {
                i as i32 - pos
            };
        }
        pos = -1;
        for i in (0..s.len()).rev() {
            if s.as_bytes()[i] == c as u8 {
                pos = i as i32;
            }
            if pos != -1 {
                res[i] = res[i].min(pos - i as i32);
            }
        }
        res

=======

        let mut result = vec![0; s.len()];
        let mut prev = -10000;
        for i in 0..s.len() {
            if s.chars().nth(i).unwrap() == c {
                prev = i as i32;
            }
            result[i] = i as i32 - prev;
        }
        prev = 10000;
        for i in (0..s.len()).rev() {
            if s.chars().nth(i).unwrap() == c {
                prev = i as i32;
            }
            result[i] = std::cmp::min(result[i], prev - i as i32);
        }
        result

=======

        let mut ans = vec![0; s.len()];
        let mut last = -1;
        for i in 0..s.len() {
            if s.as_bytes()[i] == c as u8 {
                ans[i] = 0;
                last = i as i32;
            } else if last >= 0 {
                ans[i] = i as i32 - last;
            } else {
                ans[i] = s.len() as i32;
            }
        }
        last = -1;
        for i in (0..s.len()).rev() {
            if s.as_bytes()[i] == c as u8 {
                ans[i] = 0;
                last = i as i32;
            } else if last >= 0 {
                ans[i] = ans[i].min(last - i as i32);
            }
        }
        ans

=======

        let mut res = vec![0; s.len()];
        let mut prev = -1;
        for (i, ch) in s.char_indices() {
            if ch == c {
                prev = i as i32;
            }
            res[i] = i as i32 - prev;
        }
        prev = s.len() as i32;
        for (i, ch) in s.char_indices().rev() {
            if ch == c {
                prev = i as i32;
            }
            res[i] = res[i].min(prev - i as i32);
        }
        res

=======

        let mut v: Vec<i32> = Vec::new();
        let mut pos: Vec<usize> = Vec::new();
        for (i, ch) in s.chars().enumerate() {
            if ch == c {
                pos.push(i);
            }
        }
        for i in 0..s.len() {
            let mut min = s.len() as i32;
            for j in 0..pos.len() {
                let d = (i as i32 - pos[j] as i32).abs();
                if d < min {
                    min = d;
                }
            }
            v.push(min);
        }
        v

=======

        let mut ret = Vec::new();
        let mut prev = -1;
        for i in 0..s.len() {
            if s.as_bytes()[i] == c as u8 {
                ret.push(0);
                prev = i as i32;
            } else {
                if prev == -1 {
                    ret.push(s.len() as i32);
                } else {
                    ret.push((i as i32 - prev).abs());
                }
            }
        }
        prev = -1;
        for i in (0..s.len()).rev() {
            if s.as_bytes()[i] == c as u8 {
                prev = i as i32;
            } else {
                if prev != -1 {
                    ret[i] = std::cmp::min(ret[i], (i as i32 - prev).abs());
                }
            }
        }
        ret

=======

        let mut res = vec![];
        let mut last = -1;
        for (i, ch) in s.chars().enumerate() {
            if ch == c {
                last = i as i32;
            }
            res.push(i as i32 - last);
        }
        last = s.len() as i32;
        for i in (0..s.len()).rev() {
            if s.chars().nth(i).unwrap() == c {
                last = i as i32;
            }
            res[i] = res[i].min(last - i as i32);
        }
        res

=======

        let mut ans = vec![0; s.len()];
        let mut prev = -1_000_000;
        let mut next = s.find(c).unwrap() as i32;
        for i in 0..s.len() {
            if i as i32 == next {
                ans[i] = 0;
                prev = next;
                next = s[(i+1)..].find(c).map_or(1_000_000, |x| (x + i + 1) as i32);
            } else {
                ans[i] = std::cmp::min((i as i32 - prev).abs(), (i as i32 - next).abs());
            }
        }
        ans
    }
}

=======

        let mut res = Vec::new();
        let mut index = -1;
        for (i, x) in s.char_indices() {
            if x == c {
                index = i as i32;
            }
            if index == -1 {
                res.push(i as i32);
            } else {
                res.push((i as i32 - index).abs());
            }
        }
        index = -1;
        for i in (0..s.len()).rev() {
            if s.chars().nth(i).unwrap() == c {
                index = i as i32;
            }
            if index != -1 {
                res[i] = res[i].min((i as i32 - index).abs());
            }
        }
        res

=======

        let mut result: Vec<i32> = Vec::new();
        let mut index = -1;
        let mut i = 0;
        for ch in s.chars() {
            if ch == c {
                index = i as i32;
            } else {
                if index == -1 {
                    result.push(i as i32 - index);
                } else {
                    result.push(i32::min(i as i32 - index, index + (s.len() as i32 - i as i32)));
                }
            }
            i += 1;
        }
        result
    }
}
