Synthesizing 10/10 solutions

=======

        let mut result = String::new();
        let mut count = 0;
        for c in s.chars().rev() {
            if c == '-' {
                continue;
            }
            if count == k {
                result.push('-');
                count = 0;
            }
            result.push(c.to_ascii_uppercase());
            count += 1;
        }
        result.chars().rev().collect()

=======

        let mut res = String::new();
        let mut count = 0;
        for c in s.chars().rev() {
            if c != '-' {
                res.push(c.to_ascii_uppercase());
                count += 1;
                if count == k {
                    count = 0;
                    res.push('-');
                }
            }
        }
        if res.ends_with('-') {
            res.pop();
        }
        res.chars().rev().collect()

=======

        let mut ret = String::new();
        let mut count = 0;
        for c in s.chars().rev() {
            if c == '-' {
                continue;
            }
            if count == k {
                ret.push('-');
                count = 0;
            }
            ret.push(c.to_ascii_uppercase());
            count += 1;
        }
        ret.chars().rev().collect()

=======

        let mut res = String::new();
        let mut counter = 0;
        for c in s.chars().rev() {
            if c == '-' {
                continue;
            }
            if counter == k {
                res.push('-');
                counter = 0;
            }
            res.push(c.to_ascii_uppercase());
            counter += 1;
        }
        res.chars().rev().collect()

=======

        let mut r = String::new();
        let mut i = 0;
        for c in s.chars().rev() {
            if c == '-' {
                continue;
            }
            if i == k {
                r.push('-');
                i = 0;
            }
            r.push(c.to_ascii_uppercase());
            i += 1;
        }
        r.chars().rev().collect()

=======

        let mut result = String::new();
        let mut count = 0;
        for c in s.chars().rev() {
            if c != '-' {
                count += 1;
                result.push(if c.is_ascii_alphabetic() { c.to_ascii_uppercase() } else { c });
                if count == k {
                    count = 0;
                    result.push('-');
                }
            }
        }
        if result.ends_with('-') {
            result.pop();
        }
        result.chars().rev().collect()

=======

        let mut chars = s.chars().rev().filter(|c| *c != '-').collect::<Vec<char>>();
        let mut result = String::new();
        let mut i = 0;
        while i < chars.len() {
            let mut j = 0;
            while j < k && i < chars.len() {
                result.push(chars[i].to_ascii_uppercase());
                i += 1;
                j += 1;
            }
            if i < chars.len() {
                result.push('-');
            }
        }
        result.chars().rev().collect()

=======

        let mut s = s;
        s = s.replace("-", "");
        s = s.to_uppercase();
        let mut i = s.len() as i32 - k;
        while i > 0 {
            s.insert(i as usize, '-');
            i -= k;
        }
        s

=======

        let mut s = s.chars().rev().filter(|c| *c != '-').collect::<String>();
        let mut i = 0;
        while i + k < s.len() as i32 {
            s.insert((i + k) as usize, '-');
            i += k + 1;
        }
        s.chars().rev().collect::<String>().to_uppercase()

=======

        let mut s = s.chars().rev().collect::<String>();
        let mut ans = String::new();
        let mut i = 0;
        for c in s.chars() {
            if c == '-' {
                continue;
            }
            if i == k {
                ans.push('-');
                i = 0;
            }
            ans.push(c.to_ascii_uppercase());
            i += 1;
        }
        ans.chars().rev().collect::<String>()
