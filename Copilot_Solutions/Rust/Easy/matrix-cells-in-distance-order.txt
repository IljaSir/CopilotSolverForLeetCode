Synthesizing 10/10 solutions

=======

        let mut res = Vec::new();
        for i in 0..rows {
            for j in 0..cols {
                res.push(vec![i, j]);
            }
        }
        res.sort_by_key(|x| (x[0] - r_center).abs() + (x[1] - c_center).abs());
        res

=======

        let mut cells = Vec::new();
        for r in 0..rows {
            for c in 0..cols {
                cells.push(vec![r, c]);
            }
        }
        cells.sort_by(|a, b| {
            let d1 = (a[0] - r_center).abs() + (a[1] - c_center).abs();
            let d2 = (b[0] - r_center).abs() + (b[1] - c_center).abs();
            d1.cmp(&d2)
        });
        cells

=======

        let mut res = vec![];
        for i in 0..rows {
            for j in 0..cols {
                res.push(vec![i, j]);
            }
        }
        res.sort_by_key(|x| (x[0] - r_center).abs() + (x[1] - c_center).abs());
        res

=======

        let mut ans = Vec::new();
        for i in 0..rows {
            for j in 0..cols {
                ans.push(vec![i, j]);
            }
        }
        ans.sort_by_key(|v| (v[0] - r_center).abs() + (v[1] - c_center).abs());
        ans

=======

        let mut v = Vec::new();
        for r in 0..rows {
            for c in 0..cols {
                v.push(vec![r, c]);
            }
        }
        v.sort_by_key(|v| (v[0] - r_center).abs() + (v[1] - c_center).abs());
        v

=======

        let mut result = vec![vec![]; (rows + cols) as usize];
        for r in 0..rows {
            for c in 0..cols {
                result[(r - r_center).abs() as usize + (c - c_center).abs() as usize].push(vec![r, c]);
            }
        }
        result.into_iter().flatten().collect()

=======

        let mut ans = vec![];
        let mut max = 0;
        for i in 0..rows {
            for j in 0..cols {
                let dist = (i - r_center).abs() + (j - c_center).abs();
                if dist > max {
                    max = dist;
                }
            }
        }
        for dist in 0..=max {
            for i in 0..rows {
                for j in 0..cols {
                    if (i - r_center).abs() + (j - c_center).abs() == dist {
                        ans.push(vec![i, j]);
                    }
                }
            }
        }
        ans

=======

        let mut ans = vec![];
        let mut dist = vec![vec![0;cols as usize];rows as usize];
        for i in 0..rows {
            for j in 0..cols {
                dist[i as usize][j as usize] = (i-r_center).abs() + (j-c_center).abs();
            }
        }
        let mut dists = vec![];
        for i in 0..rows {
            for j in 0..cols {
                dists.push(dist[i as usize][j as usize]);
            }
        }
        dists.sort();
        for i in 0..rows {
            for j in 0..cols {
                if dist[i as usize][j as usize] == dists[0] {
                    ans.push(vec![i,j]);
                    dists.remove(0);
                }
            }
        }
        ans

=======

        let mut res = vec![];
        let mut d = 0;
        let r_center = r_center as usize;
        let c_center = c_center as usize;
        while res.len() < rows as usize * cols as usize {
            let mut i = if r_center >= d { r_center - d } else { 0 };
            let mut j = if c_center >= d { c_center - d } else { 0 };
            while i <= (r_center + d) && i < rows as usize {
                while j <= (c_center + d) && j < cols as usize {
                    res.push(vec![i as i32, j as i32]);
                    j += 1;
                }
                j = if c_center >= d { c_center - d } else { 0 };
                i += 1;
            }
            d += 1;
        }
        res

=======

        let mut result: Vec<(i32, i32)> = Vec::new();
        let mut i = 0;
        while i < rows + cols {
            let mut j = 0;
            while j <= i {
                if j < rows && i - j < cols {
                    result.push((j, i - j));
                }
                j += 1;
            }
            i += 1;
        }
        result.sort_by(|a, b| {
            let d1 = (a.0 - r_center).abs() + (a.1 - c_center).abs();
            let d2 = (b.0 - r_center).abs() + (b.1 - c_center).abs();
            d1.cmp(&d2)
        });
        result
            .into_iter()
            .map(|(r, c)| vec![r, c])
            .collect::<Vec<Vec<i32>>>()
