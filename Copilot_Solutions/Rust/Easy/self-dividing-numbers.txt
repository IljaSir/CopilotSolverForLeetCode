Synthesizing 10/10 solutions

=======

        let mut res = Vec::new();
        for i in left..=right {
            let mut num = i;
            let mut ok = true;
            while num > 0 {
                let digit = num % 10;
                if digit == 0 || i % digit != 0 {
                    ok = false;
                    break;
                }
                num /= 10;
            }
            if ok {
                res.push(i);
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in left..=right {
            let mut tmp = i;
            let mut flag = true;
            while tmp > 0 {
                let digit = tmp % 10;
                if digit == 0 || i % digit != 0 {
                    flag = false;
                    break;
                }
                tmp /= 10;
            }
            if flag {
                result.push(i);
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in left..=right {
            let mut flag = true;
            for c in i.to_string().chars() {
                if c == '0' || i % (c as i32 - '0' as i32) != 0 {
                    flag = false;
                    break;
                }
            }
            if flag {
                result.push(i);
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in left..=right {
            if i < 10 {
                result.push(i);
            } else if i % 10 != 0 {
                let mut j = i;
                let mut is_self_dividing = true;
                while j > 0 {
                    let digit = j % 10;
                    if digit == 0 || i % digit != 0 {
                        is_self_dividing = false;
                        break;
                    }
                    j /= 10;
                }
                if is_self_dividing {
                    result.push(i);
                }
            }
        }
        result

=======

        let mut res = Vec::new();
        for i in left..=right {
            if i % 10 == 0 {
                continue;
            }
            let mut j = i;
            let mut flag = true;
            while j > 0 {
                let d = j % 10;
                if d == 0 || i % d != 0 {
                    flag = false;
                    break;
                }
                j /= 10;
            }
            if flag {
                res.push(i);
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in left..=right {
            let mut j = i;
            let mut is_self_dividing = true;
            while j > 0 {
                let digit = j % 10;
                if digit == 0 || i % digit != 0 {
                    is_self_dividing = false;
                    break;
                }
                j /= 10;
            }
            if is_self_dividing {
                result.push(i);
            }
        }
        result

=======

        let mut result = Vec::new();
        for i in left..=right {
            let mut flag = true;
            let mut j = i;
            while j > 0 {
                let k = j % 10;
                if k == 0 || i % k != 0 {
                    flag = false;
                    break;
                }
                j /= 10;
            }
            if flag {
                result.push(i);
            }
        }
        result

=======

        let mut result = Vec::new();
        for num in left..right + 1 {
            let mut n = num;
            let mut ok = true;
            while n > 0 {
                let d = n % 10;
                if d == 0 || num % d != 0 {
                    ok = false;
                    break;
                }
                n /= 10;
            }
            if ok {
                result.push(num);
            }
        }
        result

=======

        let mut res: Vec<i32> = vec![];
        for i in left..=right {
            let mut tmp = i;
            let mut flag = true;
            while tmp != 0 {
                let last = tmp % 10;
                if last == 0 || i % last != 0 {
                    flag = false;
                    break;
                }
                tmp /= 10;
            }
            if flag {
                res.push(i);
            }
        }
        res

=======

        let mut ans = vec![];
        for i in left..=right {
            let mut is_self_dividing = true;
            let mut t = i;
            while t > 0 {
                let digit = t % 10;
                if digit == 0 || i % digit != 0 {
                    is_self_dividing = false;
                    break;
                }
                t /= 10;
            }
            if is_self_dividing {
                ans.push(i);
            }
        }
        ans
