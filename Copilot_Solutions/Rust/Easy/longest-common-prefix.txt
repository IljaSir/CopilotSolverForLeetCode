Synthesizing 10/10 solutions

=======

        if strs.len() == 0 {
            return "".to_string();
        }
        let mut min_len = strs[0].len();
        for i in 1..strs.len() {
            if strs[i].len() < min_len {
                min_len = strs[i].len();
            }
        }
        let mut res = String::from("");
        for i in 0..min_len {
            let mut flag = true;
            let mut ch = ' ';
            for j in 0..strs.len() {
                if j == 0 {
                    ch = strs[j].chars().nth(i).unwrap();
                } else {
                    if ch != strs[j].chars().nth(i).unwrap() {
                        flag = false;
                        break;
                    }
                }
            }
            if flag {
                res.push(ch);
            } else {
                break;
            }
        }
        res
    }
}

=======

        if strs.len() == 0 {
            return "".to_string();
        }
        let mut result = strs[0].clone();
        for i in 1..strs.len() {
            let mut j = 0;
            while j < result.len() && j < strs[i].len() && result.chars().nth(j) == strs[i].chars().nth(j) {
                j += 1;
            }
            result = result[0..j].to_string();
        }
        result
    }
}

=======

        let mut prefix = String::new();
        let mut i = 0;
        loop {
            let mut c = None;
            for s in &strs {
                if i >= s.len() {
                    return prefix;
                }
                let cc = s.chars().nth(i).unwrap();
                if c.is_none() {
                    c = Some(cc);
                } else if c.unwrap() != cc {
                    return prefix;
                }
            }
            prefix.push(c.unwrap());
            i += 1;
        }
    }
}

=======

        let mut prefix = String::new();
        let mut i = 0;
        loop {
            let mut c = None;
            for s in strs.iter() {
                if i >= s.len() {
                    return prefix;
                }
                if let Some(cc) = c {
                    if cc != s.as_bytes()[i] {
                        return prefix;
                    }
                } else {
                    c = Some(s.as_bytes()[i]);
                }
            }
            prefix.push(c.unwrap() as char);
            i += 1;
        }

=======

        let mut prefix = String::new();
        if strs.is_empty() {
            return prefix;
        }
        let mut shortest = strs[0].len();
        for s in strs.iter() {
            if s.len() < shortest {
                shortest = s.len();
            }
        }
        for i in 0..shortest {
            let mut c = strs[0].chars().nth(i).unwrap();
            for s in strs.iter() {
                if s.chars().nth(i).unwrap() != c {
                    return prefix;
                }
            }
            prefix.push(c);
        }
        prefix
    }
}

=======

        let mut prefix = String::new();
        let mut i = 0;
        'outer: loop {
            let mut c = None;
            for s in &strs {
                if i >= s.len() {
                    break 'outer;
                }
                if let Some(ch) = c {
                    if ch != s.as_bytes()[i] {
                        break 'outer;
                    }
                } else {
                    c = Some(s.as_bytes()[i]);
                }
            }
            prefix.push(c.unwrap() as char);
            i += 1;
        }
        return prefix;

=======

        if strs.len() == 0 {
            return String::from("");
        }
        let mut prefix = String::from("");
        let mut i = 0;
        loop {
            let mut c = ' ';
            for s in &strs {
                if i >= s.len() {
                    return prefix;
                }
                if c == ' ' {
                    c = s.chars().nth(i).unwrap();
                } else if c != s.chars().nth(i).unwrap() {
                    return prefix;
                }
            }
            prefix.push(c);
            i += 1;
        }
    }
}

=======

        if strs.len() == 0 {
            return String::from("");
        }
        let mut prefix = String::from("");
        let mut i = 0;
        loop {
            let mut ch = '\0';
            for s in strs.iter() {
                if i >= s.len() {
                    return prefix;
                }
                if ch == '\0' {
                    ch = s.chars().nth(i).unwrap();
                } else if ch != s.chars().nth(i).unwrap() {
                    return prefix;
                }
            }
            prefix.push(ch);
            i += 1;
        }

=======

        let mut result = String::new();
        let mut i = 0;
        let mut flag = true;
        while flag {
            let mut c = ' ';
            for s in strs.iter() {
                let bytes = s.as_bytes();
                if i < bytes.len() {
                    if c == ' ' {
                        c = bytes[i] as char;
                    } else {
                        if c != bytes[i] as char {
                            flag = false;
                            break;
                        }
                    }
                } else {
                    flag = false;
                    break;
                }
            }
            if flag {
                result.push(c);
            }
            i += 1;
        }
        result
    }
}

=======

        let mut ans = String::from("");
        let mut i = 0;
        let mut flag = false;
        loop {
            let mut ch = ' ';
            for s in &strs {
                if i >= s.len() {
                    flag = true;
                    break;
                }
                if ch == ' ' {
                    ch = s.chars().nth(i).unwrap();
                } else if ch != s.chars().nth(i).unwrap() {
                    flag = true;
                    break;
                }
            }
            if flag {
                break;
            }
            ans.push(ch);
            i += 1;
        }
        ans
