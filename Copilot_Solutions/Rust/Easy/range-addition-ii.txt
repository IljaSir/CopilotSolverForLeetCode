Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut min_x = m;
        let mut min_y = n;
        for op in ops {
            min_x = min_x.min(op[0]);
            min_y = min_y.min(op[1]);
        }
        min_x * min_y

=======

        let (mut min_x, mut min_y) = (m, n);
        for op in ops {
            min_x = min_x.min(op[0]);
            min_y = min_y.min(op[1]);
        }
        min_x * min_y

=======

        let mut minx = m;
        let mut miny = n;
        for op in ops {
            minx = minx.min(op[0]);
            miny = miny.min(op[1]);
        }
        minx * miny

=======

        let mut min_m = m;
        let mut min_n = n;
        for op in ops {
            min_m = min_m.min(op[0]);
            min_n = min_n.min(op[1]);
        }
        min_m * min_n

=======

        let mut min_x = m;
        let mut min_y = n;
        for op in ops.iter() {
            min_x = min_x.min(op[0]);
            min_y = min_y.min(op[1]);
        }
        min_x * min_y

=======

        let mut min_a = m;
        let mut min_b = n;
        for op in ops {
            min_a = i32::min(min_a, op[0]);
            min_b = i32::min(min_b, op[1]);
        }
        min_a * min_b

=======

        let mut min_x = m;
        let mut min_y = n;
        for op in ops {
            if min_x > op[0] {
                min_x = op[0];
            }
            if min_y > op[1] {
                min_y = op[1];
            }
        }
        min_x * min_y

=======

        let mut min_a = m;
        let mut min_b = n;
        
        for op in ops {
            min_a = min_a.min(op[0]);
            min_b = min_b.min(op[1]);
        }
        
        min_a * min_b
