Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut digits = [0; 10];
        let mut num = num;
        while num > 0 {
            digits[(num % 10) as usize] += 1;
            num /= 10;
        }
        let mut sum = 0;
        let mut carry = 0;
        for i in 1..10 {
            let mut count = digits[i];
            if count > 0 {
                count += carry;
                carry = count / 2;
                sum += i * (count - carry);
            }
        }
        sum

=======

        let mut num = num;
        let mut digits = vec![0; 10];
        while num > 0 {
            digits[(num % 10) as usize] += 1;
            num /= 10;
        }
        let mut num1 = 0;
        let mut num2 = 0;
        let mut is_num1 = true;
        for i in (0..=9).rev() {
            for _ in 0..digits[i] {
                if is_num1 {
                    num1 = num1 * 10 + i;
                } else {
                    num2 = num2 * 10 + i;
                }
                is_num1 = !is_num1;
            }
        }
        num1 + num2

=======

        let mut num = num;
        let mut digits = [0; 10];
        while num > 0 {
            digits[(num % 10) as usize] += 1;
            num /= 10;
        }
        let mut num1 = 0;
        let mut num2 = 0;
        let mut carry = 0;
        for i in (1..10).rev() {
            if digits[i] == 0 {
                continue;
            }
            if digits[i] % 2 == 0 {
                num1 = num1 * 10 + i;
                num2 = num2 * 10 + i;
            } else {
                if carry == 0 {
                    num1 = num1 * 10 + i;
                    num2 = num2 * 10;
                    carry = 1;
                } else {
                    num1 = num1 * 10;
                    num2 = num2 * 10 + i;
                    carry = 0;
                }
            }
            digits[i] -= 2;
        }
        num1 + num2

=======

        let mut num = num;
        let mut digits = vec![0; 10];
        while num > 0 {
            digits[num % 10] += 1;
            num /= 10;
        }
        let mut sum = 0;
        let mut carry = 0;
        let mut i = 1;
        while i < 10 {
            if digits[i] > 0 {
                digits[i] -= 1;
                sum += i;
                break;
            }
            i += 1;
        }
        while i < 10 {
            if digits[i] > 0 {
                digits[i] -= 1;
                sum += i * 10;
                carry = 1;
                break;
            }
            i += 1;
        }
        for i in 0..10 {
            let mut j = 0;
            while j < digits[i] {
                if carry == 1 {
                    carry = 0;
                    sum += i * 100;
                } else {
                    sum += i * 10;
                }
                j += 1;
            }
        }
        sum

=======

        let mut num = num;
        let mut digits = vec![0; 10];
        while num > 0 {
            digits[num % 10] += 1;
            num /= 10;
        }
        let mut num1 = 0;
        let mut num2 = 0;
        let mut i = 0;
        while i < 10 {
            if digits[i] > 0 {
                if num1 <= num2 {
                    num1 = num1 * 10 + i;
                    digits[i] -= 1;
                } else {
                    num2 = num2 * 10 + i;
                    digits[i] -= 1;
                }
            } else {
                i += 1;
            }
        }
        num1 + num2
    }
}

=======

        let mut num = num;
        let mut num1 = 0;
        let mut num2 = 0;
        let mut i = 1;
        while num > 0 {
            let digit = num % 10;
            num /= 10;
            if digit % 2 == 0 {
                num1 += digit * i;
            } else {
                num2 += digit * i;
            }
            i *= 10;
        }
        num1 + num2
    }
}

=======

        
    }
}

=======

        let mut num = num.to_string();
        let mut digits = [0; 10];
        let mut sum = 0;
        for c in num.chars() {
            digits[c as usize - '0' as usize] += 1;
            sum += (c as usize - '0' as usize) as i32;
        }
        let mut res = sum;

        for c in num.chars() {
            let d = c as usize - '0' as usize;
            digits[d] -= 1;
            sum -= d as i32;
            let mut tmp = sum;
            for i in 0..10 {
                tmp += (digits[i] + 1) / 2 * i as i32;
            }
            res = res.min(tmp);
        }
        return res;

=======

        let mut num1 = 0;
        let mut num2 = 0;
        let mut i = 1;
        let mut k = 0;
        let mut num = num;
        while num > 0 {
            let x = num % 10;
            if x == 0 {
                num1 = num1 * 10 + x;
                num2 = num2 * 10 + x;
                k += 1;
            } else if x == 1 {
                num1 = num1 * 10 + x;
            } else if x == 2 {
                if k > 0 {
                    num2 = num2 * 10 + 1;
                    num1 = num1 * 10 + 1;
                    k -= 1;
                } else {
                    num2 = num2 * 10 + x;
                }
            } else if x == 3 {
                if k > 0 {
                    num2 = num2 * 10 + 1;
                    num1 = num1 * 10 + 2;
                    k -= 1;
                } else {
                    num2 = num2 * 10 + x;
                }
            } else if x == 4 {
                if k > 0 {
                    num2 = num2 * 10 + 2;
                    num1 = num1 * 10 + 2;
                    k -= 1;
                } else {
                    num2 = num2 * 10 + x;
                }
            } else if x == 5 {
                if k > 0 {
                    num2 = num2 * 10 + 2;
                    num1 = num1 * 10 + 3;
                    k -= 1;
                } else {
                    num2 = num2 * 10 + x;
                }
            } else if x == 6 {
                if k > 0 {
                    num2 = num2 * 10 + 3;
                    num1 = num1 * 10 + 3;
                    k -= 1;
                } else {
                    num2 = num2 * 10 + x;
                }
            } else if x == 7 {
                if k > 0 {
                    num2 = num2 * 10 + 3;
                    num1 = num1 * 10 + 4;
                    k -= 1;
                } else {
                    num
