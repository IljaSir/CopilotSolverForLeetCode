Synthesizing 10/10 solutions

=======

        let mut found = false;
        for c in s.chars() {
            if c == '1' {
                if found {
                    return false;
                }
            } else {
                found = true;
            }
        }
        true

=======

        let mut one = false;
        for c in s.chars() {
            if c == '1' {
                if one {
                    return false;
                }
                one = true;
            } else {
                one = false;
            }
        }
        true

=======

        let mut has_one = false;
        let mut has_zero = false;
        for c in s.chars() {
            if c == '1' {
                if has_zero {
                    return false;
                }
                has_one = true;
            } else {
                has_zero = true;
            }
        }
        has_one

=======

        let mut seen_one = false;
        let mut seen_zero = false;
        for c in s.chars() {
            if c == '0' {
                if seen_one {
                    seen_zero = true;
                }
            } else {
                if seen_zero {
                    return false;
                }
                seen_one = true;
            }
        }
        true

=======

        let mut res = true;
        let mut flag = false;
        for c in s.chars() {
            if c == '0' {
                flag = true;
            } else {
                if flag {
                    res = false;
                    break;
                }
            }
        }
        res

=======

        let mut result = true;
        let mut one = false;
        for c in s.chars() {
            if c == '1' {
                if one {
                    result = false;
                } else {
                    one = true;
                }
            } else {
                one = false;
            }
        }
        result

=======

        let mut count = 0;
        let mut flag = true;
        for i in s.bytes() {
            if i == b'1' {
                if flag {
                    count += 1;
                    flag = false;
                }
            } else {
                flag = true;
            }
        }
        count == 1

=======

        let mut result = true;
        let mut is_zero = false;
        for c in s.chars() {
            if is_zero {
                if c == '1' {
                    result = false;
                    break;
                }
            } else {
                if c == '0' {
                    is_zero = true;
                }
            }
        }
        return result;

=======

        let mut i = 0;
        let mut is_one = false;
        for c in s.chars() {
            if c == '1' {
                if is_one {
                    i += 1;
                } else {
                    is_one = true;
                }
            } else {
                is_one = false;
            }
        }
        i == 0

=======

        let mut i = 0;
        let mut j = 0;
        let mut flag = false;
        while j < s.len() {
            if s.chars().nth(j).unwrap() == '1' {
                flag = true;
                j += 1;
            } else {
                if flag {
                    i = j;
                    flag = false;
                }
                j += 1;
            }
        }
        i == 0
