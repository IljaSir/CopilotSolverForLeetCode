Synthesizing 9/10 solutions

=======

        let mut ans = Vec::new();
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if (i as i32 - j as i32).abs() <= k && nums[j] == key {
                    ans.push(i as i32);
                    break;
                }
            }
        }
        ans
    }
}

=======

        let mut indices = Vec::new();
        for i in 0..nums.len() {
            if nums[i] == key {
                indices.push(i as i32);
            }
        }
        let mut result = Vec::new();
        let mut j = 0;
        for i in 0..nums.len() {
            while j < indices.len() && indices[j] - i as i32 <= k {
                j += 1;
            }
            if j < indices.len() && indices[j] - i as i32 <= k {
                result.push(i as i32);
            }
        }
        result

=======

        let mut ans = Vec::new();
        let mut indices = Vec::new();
        for (i, &num) in nums.iter().enumerate() {
            if num == key {
                indices.push(i as i32);
            }
        }
        for i in 0..nums.len() {
            let mut flag = false;
            for &j in indices.iter() {
                if (i as i32 - j).abs() <= k {
                    flag = true;
                    break;
                }
            }
            if flag {
                ans.push(i as i32);
            }
        }
        ans
    }
}

=======

        let mut res: Vec<i32> = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == key {
                let mut j = i as i32 - k;
                while j <= i as i32 + k {
                    if j >= 0 && j < nums.len() as i32 && nums[j as usize] == key {
                        res.push(j);
                    }
                    j += 1;
                }
            }
            i += 1;
        }
        res
    }
}

=======

        let mut res = vec![];
        let mut last = -1;
        for i in 0..nums.len() {
            if nums[i] == key {
                if last == -1 || i as i32 - last > k {
                    last = i as i32;
                    res.push(i as i32);
                }
            }
        }
        last = -1;
        for i in (0..nums.len()).rev() {
            if nums[i] == key {
                if last == -1 || last - i as i32 > k {
                    last = i as i32;
                    res.push(i as i32);
                }
            }
        }
        res.sort();
        res

=======

        let mut ans = Vec::new();
        for i in 0..nums.len() {
            for j in i..nums.len() {
                if (j as i32 - i as i32) > k {
                    break;
                }
                if nums[j] == key {
                    ans.push(i as i32);
                    break;
                }
            }
        }
        ans
    }
}

=======

        let mut res = Vec::new();
        let mut last = -1;
        for i in 0..nums.len() {
            if nums[i] == key {
                if i as i32 - last <= k {
                    res.push(i as i32);
                }
                last = i as i32;
            }
        }
        last = nums.len() as i32;
        for i in (0..nums.len()).rev() {
            if nums[i] == key {
                if last - i as i32 <= k {
                    res.push(i as i32);
                }
                last = i as i32;
            }
        }
        res.sort();
        res
    }
}

=======

        let mut result = vec![];
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == key {
                let mut j = i as i32 - k;
                while j < i as i32 + k + 1 {
                    if j >= 0 && j < nums.len() as i32 && nums[j as usize] == key {
                        result.push(j);
                    }
                    j += 1;
                }
            }
            i += 1;
        }
        result
    }
}

=======

        let mut res = vec![];
        let (mut i, mut j) = (0, 0);
        while i < nums.len() as i32 {
            if nums[i as usize] == key {
                while j < nums.len() as i32 && j <= i + k {
                    if nums[j as usize] == key {
                        res.push(j);
                    }
                    j += 1;
                }
            }
            i += 1;
        }
        res
    }
}
