Synthesizing 10/10 solutions

=======

        let mut board = vec![vec![' '; 3]; 3];
        for (i, m) in moves.iter().enumerate() {
            board[m[0] as usize][m[1] as usize] = if i % 2 == 0 { 'X' } else { 'O' };
        }
        for i in 0..3 {
            if board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2] {
                return if board[i][0] == 'X' { "A".to_string() } else { "B".to_string() };
            }
            if board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i] {
                return if board[0][i] == 'X' { "A".to_string() } else { "B".to_string() };
            }
        }
        if board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2] {
            return if board[0][0] == 'X' { "A".to_string() } else { "B".to_string() };
        }
        if board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0] {
            return if board[0][2] == 'X' { "A".to_string() } else { "B".to_string() };
        }
        if moves.len() == 9 { "Draw".to_string() } else { "Pending".to_string() }

=======

        let mut board = vec![vec![' '; 3]; 3];
        for (i, mv) in moves.iter().enumerate() {
            board[mv[0] as usize][mv[1] as usize] = if i % 2 == 0 {'X'} else {'O'};
        }
        let mut winner = ' ';
        for i in 0..3 {
            if board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][2] != ' ' {
                winner = board[i][0];
                break;
            }
            if board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[2][i] != ' ' {
                winner = board[0][i];
                break;
            }
        }
        if board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[2][2] != ' ' {
            winner = board[0][0];
        }
        if board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[2][0] != ' ' {
            winner = board[0][2];
        }
        if winner != ' ' {
            return String::from(if winner == 'X' {"A"} else {"B"});
        }
        if moves.len() == 9 {
            return String::from("Draw");
        }
        String::from("Pending")

=======

        let mut grid = [[' '; 3]; 3];
        for (i, mv) in moves.iter().enumerate() {
            if i % 2 == 0 {
                grid[mv[0] as usize][mv[1] as usize] = 'X';
            } else {
                grid[mv[0] as usize][mv[1] as usize] = 'O';
            }
        }
        if grid[0][0] == grid[0][1] && grid[0][1] == grid[0][2] && grid[0][0] != ' ' {
            return grid[0][0].to_string();
        }
        if grid[1][0] == grid[1][1] && grid[1][1] == grid[1][2] && grid[1][0] != ' ' {
            return grid[1][0].to_string();
        }
        if grid[2][0] == grid[2][1] && grid[2][1] == grid[2][2] && grid[2][0] != ' ' {
            return grid[2][0].to_string();
        }
        if grid[0][0] == grid[1][0] && grid[1][0] == grid[2][0] && grid[0][0] != ' ' {
            return grid[0][0].to_string();
        }
        if grid[0][1] == grid[1][1] && grid[1][1] == grid[2][1] && grid[0][1] != ' ' {
            return grid[0][1].to_string();
        }
        if grid[0][2] == grid[1][2] && grid[1][2] == grid[2][2] && grid[0][2] != ' ' {
            return grid[0][2].to_string();
        }
        if grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[0][0] != ' ' {
            return grid[0][0].to_string();
        }
        if grid[0][2] == grid[1][1] && grid[1][1] == grid[2][0] && grid[0][2] != ' ' {

=======

        let mut board = vec![vec![' '; 3]; 3];
        for (i, m) in moves.iter().enumerate() {
            let c = if i % 2 == 0 { 'X' } else { 'O' };
            board[m[0] as usize][m[1] as usize] = c;
        }
        for i in 0..3 {
            if board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2] {
                return board[i][0].to_string();
            }
            if board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i] {
                return board[0][i].to_string();
            }
        }
        if board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2] {
            return board[0][0].to_string();
        }
        if board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0] {
            return board[0][2].to_string();
        }
        if moves.len() == 9 {
            "Draw".to_string()
        } else {
            "Pending".to_string()
        }

=======

        let mut board = vec![vec![' '; 3]; 3];
        let mut player = 'X';
        for m in moves {
            board[m[0] as usize][m[1] as usize] = player;
            if player == 'X' {
                player = 'O';
            } else {
                player = 'X';
            }
        }
        let mut winner = ' ';
        for i in 0..3 {
            if board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ' {
                winner = board[i][0];
            }
            if board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ' {
                winner = board[0][i];
            }
        }
        if board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ' {
            winner = board[0][0];
        }
        if board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ' {
            winner = board[0][2];
        }
        if winner == ' ' {
            if moves.len() == 9 {
                return "Draw".to_string();
            } else {
                return "Pending".to_string();
            }
        }
        if winner == 'X' {
            return "A".to_string();
        } else {
            return "B".to_string();
        }

=======

        let mut grid = vec![vec![' '; 3]; 3];
        for (i, m) in moves.iter().enumerate() {
            let (r, c) = (m[0] as usize, m[1] as usize);
            grid[r][c] = if i % 2 == 0 { 'X' } else { 'O' };
        }
        let mut ans = "Pending";
        for i in 0..3 {
            if grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][0] != ' ' {
                ans = if grid[i][0] == 'X' { "A" } else { "B" };
            }
            if grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[0][i] != ' ' {
                ans = if grid[0][i] == 'X' { "A" } else { "B" };
            }
        }
        if grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[0][0] != ' ' {
            ans = if grid[0][0] == 'X' { "A" } else { "B" };
        }
        if grid[0][2] == grid[1][1] && grid[1][1] == grid[2][0] && grid[0][2] != ' ' {
            ans = if grid[0][2] == 'X' { "A" } else { "B" };
        }
        if ans == "Pending" && moves.len() == 9 {
            ans = "Draw";
        }
        ans.to_string()

=======

        let mut board = vec![vec![' '; 3]; 3];
        for (i, mv) in moves.iter().enumerate() {
            let r = mv[0] as usize;
            let c = mv[1] as usize;
            if i % 2 == 0 {
                board[r][c] = 'X';
            } else {
                board[r][c] = 'O';
            }
        }
        for i in 0..3 {
            if board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2] {
                return if board[i][0] == 'X' {
                    String::from("A")
                } else {
                    String::from("B")
                };
            }
            if board[0][i] != ' ' && board[0][i] == board[1][i] && board[1][i] == board[2][i] {
                return if board[0][i] == 'X' {
                    String::from("A")
                } else {
                    String::from("B")
                };
            }
        }
        if board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2] {
            return if board[0][0] == 'X' {
                String::from("A")
            } else {
                String::from("B")
            };
        }
        if board[2][0] != ' ' && board[2][0] == board[1][1] && board[1][1] == board[0][2] {
            return if board[2][0] == 'X' {
                String::from("A")
            } else {
                String::from("B")
            };
        }
        if moves.len() == 9 {
            return String::from("Draw");
        }
        String::from("Pending")

=======

        let mut board: Vec<Vec<char>> = vec![vec![' '; 3]; 3];
        let mut player = 'X';
        for mv in moves {
            board[mv[0] as usize][mv[1] as usize] = player;
            if player == 'X' {
                player = 'O';
            } else {
                player = 'X';
            }
        }
        for i in 0..3 {
            if board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ' {
                return String::from(board[i][0]);
            }
            if board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ' {
                return String::from(board[0][i]);
            }
        }
        if board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ' {
            return String::from(board[0][0]);
        }
        if board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[2][0] != ' ' {
            return String::from(board[2][0]);
        }
        if moves.len() == 9 {
            return String::from("Draw");
        }
        return String::from("Pending");

=======

        let mut board = vec![vec![' '; 3]; 3];
        let mut i = 0;
        for move_ in moves {
            if i % 2 == 0 {
                board[move_[0] as usize][move_[1] as usize] = 'X';
            } else {
                board[move_[0] as usize][move_[1] as usize] = 'O';
            }
            i += 1;
        }
        if i < 5 {
            return "Pending".to_string();
        }
        if board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ' {
            return board[0][0].to_string();
        }
        if board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ' {
            return board[0][2].to_string();
        }
        for i in 0..3 {
            if board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ' {
                return board[i][0].to_string();
            }
            if board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ' {
                return board[0][i].to_string();
            }
        }
        if i == 9 {
            return "Draw".to_string();
        }
        "Pending".to_string()

=======

        let mut board = vec![vec![' '; 3]; 3];
        let mut player = 'X';
        for mv in moves {
            let (row, col) = (mv[0] as usize, mv[1] as usize);
            board[row][col] = player;
            if player == 'X' {
                player = 'O';
            } else {
                player = 'X';
            }
        }
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
            || (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
            return board[1][1].to_string();
        }
        for i in 0..3 {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
                || (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
                return board[i][0].to_string();
            }
        }
        if moves.len() == 9 {
            return "Draw".to_string();
        } else {
            return "Pending".to_string();
        }
