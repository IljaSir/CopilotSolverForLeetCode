Synthesizing 10/10 solutions

=======

        use std::collections::HashMap;
        let mut map: HashMap<i32, i32> = HashMap::new();
        for num in nums {
            let counter = map.entry(num).or_insert(0);
            *counter += 1;
        }
        let mut vec: Vec<(i32, i32)> = map.into_iter().collect();
        vec.sort_by(|a, b| {
            if a.1 == b.1 {
                b.0.cmp(&a.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        let mut res = Vec::new();
        for (num, count) in vec {
            for _ in 0..count {
                res.push(num);
            }
        }
        res
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut vec: Vec<(i32, i32)> = map.into_iter().collect();
        vec.sort_by(|x, y| {
            if x.1 == y.1 {
                y.0.cmp(&x.0)
            } else {
                x.1.cmp(&y.1)
            }
        });
        vec.iter().flat_map(|(k, v)| std::iter::repeat(*k).take(*v as usize)).collect()
    }
}

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in nums {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut vec = map.into_iter().collect::<Vec<(i32, i32)>>();
        vec.sort_by(|a, b| a.1.cmp(&b.1).then(b.0.cmp(&a.0)));
        vec.into_iter().flat_map(|(k, v)| vec![k; v as usize]).collect()

=======

        let mut map = std::collections::HashMap::new();
        for i in nums {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut vec: Vec<_> = map.into_iter().collect();
        vec.sort_by(|a, b| {
            if a.1 == b.1 {
                b.0.cmp(&a.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        let mut ans = Vec::new();
        for i in vec {
            for _ in 0..i.1 {
                ans.push(i.0);
            }
        }
        ans
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for &n in nums.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut v: Vec<_> = map.into_iter().collect();
        v.sort_by_key(|&(k, v)| (v, -k));
        v.into_iter().flat_map(|(k, v)| std::iter::repeat(k).take(v as usize)).collect()
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut list: Vec<_> = map.into_iter().collect();
        list.sort_by(|a, b| {
            if a.1 == b.1 {
                b.0.cmp(&a.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        let mut result = Vec::new();
        for (k, v) in list {
            for _ in 0..v {
                result.push(k);
            }
        }
        result

=======

        let mut count = std::collections::HashMap::new();
        for n in nums {
            *count.entry(n).or_insert(0) += 1;
        }
        let mut v: Vec<_> = count.iter().collect();
        v.sort_by_key(|(k, v)| (*v, -**k));
        let mut result = Vec::new();
        for (k, v) in v {
            for _ in 0..*v {
                result.push(*k);
            }
        }
        result
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for n in nums {
            let count = map.entry(n).or_insert(0);
            *count += 1;
        }
        let mut nums: Vec<_> = map.into_iter().collect();
        nums.sort_by(|a, b| a.1.cmp(&b.1).then_with(|| b.0.cmp(&a.0)));
        let mut res = Vec::new();
        for (n, count) in nums {
            for _ in 0..count {
                res.push(n);
            }
        }
        res
    }
}

=======

        let mut freq = std::collections::HashMap::new();
        for n in nums.iter() {
            *freq.entry(n).or_insert(0) += 1;
        }
        let mut freq = freq.into_iter().collect::<Vec<_>>();
        freq.sort_by_key(|&(_, v)| v);
        let mut result = Vec::new();
        for (k, v) in freq {
            for _ in 0..v {
                result.push(*k);
            }
        }
        result
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = Vec::new();
        let mut count = 0;
        let mut last = nums[0];
        for i in 0..nums.len() {
            if nums[i] == last {
                count += 1;
            } else {
                ans.push((last, count));
                count = 1;
                last = nums[i];
            }
        }
        ans.push((last, count));
        ans.sort_by(|a, b| {
            if a.1 == b.1 {
                b.0.cmp(&a.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        ans.iter().flat_map(|(n, c)| vec![*n; *c as usize]).collect()
