Synthesizing 10/10 solutions

=======

        let mut spaces = 0;
        let mut words = Vec::new();
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                spaces += 1;
                if word.len() > 0 {
                    words.push(word);
                    word = String::new();
                }
            } else {
                word.push(c);
            }
        }
        if word.len() > 0 {
            words.push(word);
        }
        if words.len() == 1 {
            return words[0] + &" ".repeat(spaces);
        }
        let mut spaces_between_words = spaces / (words.len() - 1);
        let mut spaces_at_end = spaces - spaces_between_words * (words.len() - 1);
        let mut result = String::new();
        for i in 0..words.len() {
            result += &words[i];
            if i < words.len() - 1 {
                result += &" ".repeat(spaces_between_words);
            }
        }
        result += &" ".repeat(spaces_at_end);
        result
    }
}

=======

        let mut spaces = 0;
        let mut words = Vec::new();
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                if !word.is_empty() {
                    words.push(word);
                    word = String::new();
                }
                spaces += 1;
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words.push(word);
        }
        let mut result = String::new();
        if words.len() == 1 {
            result.push_str(&words[0]);
            for _ in 0..spaces {
                result.push(' ');
            }
        } else {
            let space = spaces / (words.len() - 1);
            for word in words {
                result.push_str(&word);
                for _ in 0..space {
                    result.push(' ');
                }
            }
            for _ in 0..(spaces % (words.len() - 1)) {
                result.push(' ');
            }
        }
        result
    }
}

=======

        let mut words = Vec::new();
        let mut spaces = 0;
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                spaces += 1;
                if !word.is_empty() {
                    words.push(word);
                    word = String::new();
                }
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words.push(word);
        }
        if words.len() == 1 {
            return words[0] + &" ".repeat(spaces);
        }
        let spaces_between = spaces / (words.len() - 1);
        let extra_spaces = spaces % (words.len() - 1);
        let mut result = String::new();
        for word in words {
            result.push_str(&word);
            result.push(' ');
            if spaces_between > 0 {
                result.push_str(&" ".repeat(spaces_between));
            }
        }
        result.pop();
        result.push_str(&" ".repeat(extra_spaces));
        result
    }
}

=======

        let mut words = Vec::new();
        let mut spaces = 0;
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                if !word.is_empty() {
                    words.push(word);
                    word = String::new();
                }
                spaces += 1;
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words.push(word);
        }
        let n = words.len();
        if n == 1 {
            let mut res = words[0].clone();
            for _ in 0..spaces {
                res.push(' ');
            }
            return res;
        }
        let space = spaces / (n - 1);
        let extra = spaces % (n - 1);
        let mut res = String::new();
        for i in 0..n - 1 {
            res.push_str(&words[i]);
            for _ in 0..space {
                res.push(' ');
            }
        }
        res.push_str(&words[n - 1]);
        for _ in 0..extra {
            res.push(' ');
        }
        res
    }
}

=======

        let mut spaces = 0;
        let mut words = vec![];
        let mut word = String::new();
        for ch in text.chars() {
            if ch == ' ' {
                spaces += 1;
                if word.len() > 0 {
                    words.push(word);
                    word = String::new();
                }
            } else {
                word.push(ch);
            }
        }
        if word.len() > 0 {
            words.push(word);
        }
        if words.len() == 1 {
            let mut s = words[0].clone();
            for _ in 0..spaces {
                s.push(' ');
            }
            return s;
        }
        let space = spaces / (words.len() - 1);
        let mut s = String::new();
        for i in 0..words.len() {
            s.push_str(&words[i]);
            if i < words.len() - 1 {
                for _ in 0..space {
                    s.push(' ');
                }
            }
        }
        for _ in 0..(spaces - space * (words.len() - 1)) {
            s.push(' ');
        }
        s

=======

        let mut words = Vec::new();
        let mut spaces = 0;
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                if word.len() > 0 {
                    words.push(word);
                    word = String::new();
                }
                spaces += 1;
            } else {
                word.push(c);
            }
        }
        if word.len() > 0 {
            words.push(word);
        }
        if words.len() == 1 {
            return words[0] + " ".repeat(spaces).as_str();
        }
        let mut result = String::new();
        let mut i = 0;
        let mut space = " ".repeat(spaces / (words.len() - 1)).as_str();
        while i < words.len() - 1 {
            result += words[i].as_str();
            result += space;
            i += 1;
        }
        result += words[i].as_str();
        result += " ".repeat(spaces % (words.len() - 1)).as_str();
        result

=======

        let mut count = 0;
        let mut words = vec![];
        let mut word = String::new();
        for c in text.chars() {
            if c == ' ' {
                count += 1;
                if !word.is_empty() {
                    words.push(word);
                    word = String::new();
                }
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words.push(word);
        }
        let mut result = String::new();
        if words.len() == 1 {
            result.push_str(&words[0]);
            for _ in 0..count {
                result.push(' ');
            }
        } else {
            let space = count / (words.len() - 1);
            let extra = count % (words.len() - 1);
            for i in 0..words.len() {
                result.push_str(&words[i]);
                if i < words.len() - 1 {
                    for _ in 0..space {
                        result.push(' ');
                    }
                }
            }
            for _ in 0..extra {
                result.push(' ');
            }
        }
        result

=======

        let mut spaces = 0;
        let mut words = 0;
        let mut word = String::new();
        let mut res = String::new();
        for c in text.chars() {
            if c == ' ' {
                spaces += 1;
                if !word.is_empty() {
                    words += 1;
                    res.push_str(&word);
                    res.push(' ');
                    word.clear();
                }
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words += 1;
            res.push_str(&word);
        }
        if words == 1 {
            res.push_str(&" ".repeat(spaces));
        } else {
            let space = spaces / (words - 1);
            let mut tmp = String::new();
            for _ in 0..space {
                tmp.push(' ');
            }
            res = res.replace(" ", &tmp);
            res.push_str(&" ".repeat(spaces - space * (words - 1)));
        }
        res

=======

        let mut space_count = 0;
        let mut word_count = 0;
        let mut word = String::from("");
        let mut words = Vec::new();
        for c in text.chars() {
            if c == ' ' {
                space_count += 1;
                if word.len() > 0 {
                    word_count += 1;
                    words.push(word);
                    word = String::from("");
                }
            } else {
                word.push(c);
            }
        }
        if word.len() > 0 {
            word_count += 1;
            words.push(word);
        }
        let mut result = String::new();
        if word_count == 1 {
            result.push_str(&words[0]);
            for _ in 0..space_count {
                result.push(' ');
            }
        } else {
            let space = space_count / (word_count - 1);
            for _ in 0..space {
                result.push(' ');
            }
            for i in 0..words.len() {
                result.push_str(&words[i]);
                if i < words.len() - 1 {
                    for _ in 0..space {
                        result.push(' ');
                    }
                }
            }
            for _ in 0..(space_count % (word_count - 1)) {
                result.push(' ');
            }
        }
        result

=======

        let mut chars = text.chars().collect::<Vec<char>>();
        let mut spaces = 0;
        let mut words = 0;
        let mut i = 0;
        while i < chars.len() {
            if chars[i] == ' ' {
                spaces += 1;
            } else {
                words += 1;
                while i < chars.len() && chars[i] != ' ' {
                    i += 1;
                }
            }
            i += 1;
        }
        if words == 1 {
            let mut res = String::new();
            res.push_str(&text.trim());
            res.push_str(&" ".repeat(spaces));
            return res;
        }
        let spaces_per_word = spaces / (words - 1);
        let extra_spaces = spaces % (words - 1);
        let mut res = String::new();
        let mut j = 0;
        while j < chars.len() {
            if chars[j] == ' ' {
                j += 1;
            } else {
                res.push(chars[j]);
                while j < chars.len() && chars[j] != ' ' {
                    j += 1;
                }
                if j < chars.len() {
                    res.push_str(&" ".repeat(spaces_per_word));
                }
            }
        }
        res.push_str(&" ".repeat(extra_spaces));
        res
