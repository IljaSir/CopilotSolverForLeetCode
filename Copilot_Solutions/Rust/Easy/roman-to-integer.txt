Synthesizing 10/10 solutions

=======

        let mut res = 0;
        let mut pre = 0;
        for c in s.chars() {
            let cur = match c {
                'I' => 1,
                'V' => 5,
                'X' => 10,
                'L' => 50,
                'C' => 100,
                'D' => 500,
                'M' => 1000,
                _ => 0,
            };
            res += cur;
            if pre < cur {
                res -= pre * 2;
            }
            pre = cur;
        }
        res

=======

        let mut sum = 0;
        let mut prev = 0;
        for c in s.chars().rev() {
            let cur = match c {
                'I' => 1,
                'V' => 5,
                'X' => 10,
                'L' => 50,
                'C' => 100,
                'D' => 500,
                'M' => 1000,
                _ => panic!("invalid roman number"),
            };
            if cur < prev {
                sum -= cur;
            } else {
                sum += cur;
            }
            prev = cur;
        }
        sum

=======

        let mut result = 0;
        let mut prev = 0;
        for c in s.chars().rev() {
            let curr = match c {
                'I' => 1,
                'V' => 5,
                'X' => 10,
                'L' => 50,
                'C' => 100,
                'D' => 500,
                'M' => 1000,
                _ => 0,
            };
            if curr < prev {
                result -= curr;
            } else {
                result += curr;
            }
            prev = curr;
        }
        result
    }
}

=======

        let mut result = 0;
        let mut chars = s.chars().peekable();
        while let Some(c) = chars.next() {
            match c {
                'I' => {
                    if let Some('V') = chars.peek() {
                        result += 4;
                        chars.next();
                    } else if let Some('X') = chars.peek() {
                        result += 9;
                        chars.next();
                    } else {
                        result += 1;
                    }
                }
                'X' => {
                    if let Some('L') = chars.peek() {
                        result += 40;
                        chars.next();
                    } else if let Some('C') = chars.peek() {
                        result += 90;
                        chars.next();
                    } else {
                        result += 10;
                    }
                }
                'C' => {
                    if let Some('D') = chars.peek() {
                        result += 400;
                        chars.next();
                    } else if let Some('M') = chars.peek() {
                        result += 900;
                        chars.next();
                    } else {
                        result += 100;
                    }
                }
                'V' => result += 5,
                'L' => result += 50,
                'D' => result += 500,
                'M' => result += 1000,
                _ => panic!("invalid roman number"),
            }
        }
        result

=======

        let mut sum = 0;
        let mut i = 0;
        while i < s.len() {
            let c = s.chars().nth(i).unwrap();
            match c {
                'I' => {
                    if i + 1 < s.len() {
                        let next = s.chars().nth(i + 1).unwrap();
                        if next == 'V' {
                            sum += 4;
                            i += 2;
                            continue;
                        } else if next == 'X' {
                            sum += 9;
                            i += 2;
                            continue;
                        }
                    }
                    sum += 1;
                }
                'V' => sum += 5,
                'X' => {
                    if i + 1 < s.len() {
                        let next = s.chars().nth(i + 1).unwrap();
                        if next == 'L' {
                            sum += 40;
                            i += 2;
                            continue;
                        } else if next == 'C' {
                            sum += 90;
                            i += 2;
                            continue;
                        }
                    }
                    sum += 10;
                }
                'L' => sum += 50,
                'C' => {
                    if i + 1 < s.len() {
                        let next = s.chars().nth(i + 1).unwrap();
                        if next == 'D' {
                            sum += 400;
                            i += 2;
                            continue;
                        } else if next == 'M' {
                            sum += 900;
                            i += 2;
                            continue;
                        }
                    }
                    sum += 100;
                }
                'D' => sum += 500,
                'M' => sum += 1000,
                _ => {}
            }
            i += 1;
        }
        sum

=======

        let mut result = 0;
        let mut last = 0;
        for c in s.chars() {
            let num = match c {
                'M' => 1000,
                'D' => 500,
                'C' => 100,
                'L' => 50,
                'X' => 10,
                'V' => 5,
                'I' => 1,
                _ => 0,
            };
            if last < num {
                result += num - 2 * last;
            } else {
                result += num;
            }
            last = num;
        }
        result

=======

        let mut sum: i32 = 0;
        let mut s = s.chars().collect::<Vec<_>>();
        let mut i = 0;
        while i < s.len() {
            match s[i] {
                'M' => sum += 1000,
                'D' => sum += 500,
                'C' => {
                    if i + 1 < s.len() {
                        if s[i + 1] == 'D' {
                            sum += 400;
                            i += 1;
                        } else if s[i + 1] == 'M' {
                            sum += 900;
                            i += 1;
                        } else {
                            sum += 100;
                        }
                    } else {
                        sum += 100;
                    }
                }
                'L' => sum += 50,
                'X' => {
                    if i + 1 < s.len() {
                        if s[i + 1] == 'L' {
                            sum += 40;
                            i += 1;
                        } else if s[i + 1] == 'C' {
                            sum += 90;
                            i += 1;
                        } else {
                            sum += 10;
                        }
                    } else {
                        sum += 10;
                    }
                }
                'V' => sum += 5,
                'I' => {
                    if i + 1 < s.len() {
                        if s[i + 1] == 'V' {
                            sum += 4;
                            i += 1;
                        } else if s[i + 1] == 'X' {
                            sum += 9;
                            i += 1;
                        } else {
                            sum += 1;
                        }
                    } else {
                        sum += 1;
                    }
                }
                _ => {}
            }
            i += 1;
        }
        sum

=======

        let mut sum: i32 = 0;
        let mut chars = s.chars();
        let mut last = ' ';
        while let Some(ch) = chars.next() {
            let val = match ch {
                'I' => 1,
                'V' => 5,
                'X' => 10,
                'L' => 50,
                'C' => 100,
                'D' => 500,
                'M' => 1000,
                _ => 0,
            };
            if last == 'I' && (ch == 'V' || ch == 'X') {
                sum -= 2;
            } else if last == 'X' && (ch == 'L' || ch == 'C') {
                sum -= 20;
            } else if last == 'C' && (ch == 'D' || ch == 'M') {
                sum -= 200;
            }
            sum += val;
            last = ch;
        }
        sum

=======

        let mut sum = 0;
        let mut i = 0;
        let mut chars = s.chars();
        while let Some(c) = chars.next() {
            let mut next = chars.clone().next();
            match c {
                'I' => {
                    if next == Some('V') {
                        sum += 4;
                        chars.next();
                    } else if next == Some('X') {
                        sum += 9;
                        chars.next();
                    } else {
                        sum += 1;
                    }
                }
                'V' => {
                    sum += 5;
                }
                'X' => {
                    if next == Some('L') {
                        sum += 40;
                        chars.next();
                    } else if next == Some('C') {
                        sum += 90;
                        chars.next();
                    } else {
                        sum += 10;
                    }
                }
                'L' => {
                    sum += 50;
                }
                'C' => {
                    if next == Some('D') {
                        sum += 400;
                        chars.next();
                    } else if next == Some('M') {
                        sum += 900;
                        chars.next();
                    } else {
                        sum += 100;
                    }
                }
                'D' => {
                    sum += 500;
                }
                'M' => {
                    sum += 1000;
                }
                _ => {}
            }
            i += 1;
        }
        sum

=======

        let mut sum = 0;
        let mut i = 0;
        while i < s.len() {
            match s.get(i..i+2) {
                None => {
                    sum += Self::roman_to_int_single(s.get(i..i+1).unwrap());
                    break;
                },
                Some("IV") => {
                    sum += 4;
                    i += 2;
                },
                Some("IX") => {
                    sum += 9;
                    i += 2;
                },
                Some("XL") => {
                    sum += 40;
                    i += 2;
                },
                Some("XC") => {
                    sum += 90;
                    i += 2;
                },
                Some("CD") => {
                    sum += 400;
                    i += 2;
                },
                Some("CM") => {
                    sum += 900;
                    i += 2;
                },
                Some(_) => {
                    sum += Self::roman_to_int_single(s.get(i..i+1).unwrap());
                    i += 1;
                }
            }
        }
        sum
    }
    fn roman_to_int_single(s: &str) -> i32 {
        match s {
            "I" => 1,
            "V" => 5,
            "X" => 10,
            "L" => 50,
            "C" => 100,
            "D" => 500,
            "M" => 1000,
            _ => 0
        }
