Synthesizing 10/10 solutions

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut ret = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                ret.push(nums1[i]);
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        ret

=======

        let mut result = Vec::new();
        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                result.push(nums1[i]);
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut result: Vec<i32> = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                result.push(nums1[i]);
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        let mut result = Vec::new();
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                result.push(nums1[i]);
                i += 1;
                j += 1;
            } else if nums1[i] < nums2[j] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for n in nums1 {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut res = Vec::new();
        for n in nums2 {
            if let Some(c) = map.get_mut(&n) {
                if *c > 0 {
                    res.push(n);
                    *c -= 1;
                }
            }
        }
        res

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut i = 0;
        let mut j = 0;
        let mut ans: Vec<i32> = vec![];
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] == nums2[j] {
                ans.push(nums1[i]);
                i += 1;
                j += 1;
            } else if nums1[i] > nums2[j] {
                j += 1;
            } else {
                i += 1;
            }
        }
        ans
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for num in nums1 {
            let entry = map.entry(num).or_insert(0);
            *entry += 1;
        }
        let mut result = Vec::new();
        for num in nums2 {
            if let Some(entry) = map.get_mut(&num) {
                if *entry > 0 {
                    result.push(num);
                    *entry -= 1;
                }
            }
        }
        result

=======

        use std::collections::HashMap;
        let mut map1 = HashMap::new();
        let mut map2 = HashMap::new();
        for n in &nums1 {
            let count = map1.entry(n).or_insert(0);
            *count += 1;
        }
        for n in &nums2 {
            let count = map2.entry(n).or_insert(0);
            *count += 1;
        }
        let mut res = Vec::new();
        for (k, v) in map1 {
            if let Some(v2) = map2.get(&k) {
                for _ in 0..v.min(*v2) {
                    res.push(*k);
                }
            }
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        nums1.into_iter().for_each(|x| *map.entry(x).or_insert(0) += 1);
        nums2.into_iter().filter(|&x| {
            if let Some(v) = map.get_mut(&x) {
                if *v > 0 {
                    *v -= 1;
                    return true;
                }
            }
            false
        }).collect()
    }
}

=======

        
    }
}
