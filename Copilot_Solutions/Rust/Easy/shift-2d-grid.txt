Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let k = k as usize;
        for _ in 0..(k % (m * n)) {
            let mut last = grid[m - 1][n - 1];
            for i in 0..m {
                for j in 0..n {
                    let tmp = grid[i][j];
                    grid[i][j] = last;
                    last = tmp;
                }
            }
        }
        grid

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        let k = (k as usize) % (m * n);
        if k == 0 {
            return grid;
        }
        let mut v = Vec::with_capacity(m * n);
        for i in 0..m {
            for j in 0..n {
                v.push(grid[i][j]);
            }
        }
        v.rotate_right(k);
        for i in 0..m {
            for j in 0..n {
                grid[i][j] = v[i * n + j];
            }
        }
        grid
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let mut k = k as usize;
        k %= m * n;
        for _ in 0..k {
            let mut tmp = grid[m - 1][n - 1];
            for i in 0..m {
                for j in 0..n {
                    let t = grid[i][j];
                    grid[i][j] = tmp;
                    tmp = t;
                }
            }
        }
        grid
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let k = k as usize;
        for _ in 0..k {
            let mut last = grid[m-1][n-1];
            for i in 0..m {
                for j in 0..n {
                    let tmp = grid[i][j];
                    grid[i][j] = last;
                    last = tmp;
                }
            }
        }
        grid
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let k = k as usize;
        for _ in 0..k {
            let mut last = grid[m-1][n-1];
            for i in 0..m {
                for j in 0..n {
                    let temp = grid[i][j];
                    grid[i][j] = last;
                    last = temp;
                }
            }
        }
        grid
    }
}

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        for _ in 0..k {
            let mut temp = vec![vec![0; n]; m];
            for i in 0..m {
                for j in 0..n {
                    if j < n - 1 {
                        temp[i][j + 1] = grid[i][j];
                    } else {
                        temp[(i + 1) % m][0] = grid[i][j];
                    }
                }
            }
            grid = temp;
        }
        grid
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let k = k as usize;
        let mut temp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let idx = (i * n + j + k) % (m * n);
                temp[idx / n][idx % n] = grid[i][j];
            }
        }
        temp
    }
}

=======

        let mut grid = grid;
        let mut k = k;
        let m = grid.len();
        let n = grid[0].len();
        while k > 0 {
            let mut i = m - 1;
            let mut j = n - 1;
            let mut prev = grid[i][j];
            while i >= 0 {
                while j >= 0 {
                    let tmp = grid[i][j];
                    grid[i][j] = prev;
                    prev = tmp;
                    j -= 1;
                }
                j = n - 1;
                i -= 1;
            }
            k -= 1;
        }
        grid

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut grid = grid;
        let mut k = k as usize;
        while k > 0 {
            let mut last = grid[m - 1][n - 1];
            for i in 0..m {
                for j in 0..n {
                    let tmp = grid[i][j];
                    grid[i][j] = last;
                    last = tmp;
                }
            }
            k -= 1;
        }
        grid

=======

        
    }
}
