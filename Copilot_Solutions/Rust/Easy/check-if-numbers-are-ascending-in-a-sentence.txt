Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut prev = -1;
        for word in s.split(' ') {
            if let Ok(num) = word.parse::<i32>() {
                if num <= prev {
                    return false;
                }
                prev = num;
            }
        }
        true

=======

        let mut last = 0;
        for t in s.split(' ') {
            if let Ok(n) = t.parse::<i32>() {
                if n <= last {
                    return false;
                }
                last = n;
            }
        }
        true

=======

        let mut last = 0;
        for t in s.split_whitespace() {
            if let Ok(n) = t.parse::<i32>() {
                if n <= last {
                    return false;
                }
                last = n;
            }
        }
        true

=======

        let mut prev = 0;
        for w in s.split_whitespace() {
            if let Ok(n) = w.parse::<i32>() {
                if n > prev {
                    prev = n;
                } else {
                    return false;
                }
            }
        }
        true

=======

        let mut last = 0;
        let mut flag = true;
        for i in s.split_whitespace() {
            if let Ok(n) = i.parse::<i32>() {
                if n <= last {
                    flag = false;
                    break;
                }
                last = n;
            }
        }
        flag
    }
}

=======

        let mut v: Vec<&str> = s.split(' ').collect();
        let mut prev = 0;
        for i in 0..v.len() {
            if let Ok(n) = v[i].parse::<i32>() {
                if n <= prev {
                    return false;
                }
                prev = n;
            }
        }
        true
    }
}

=======

        let mut prev = 0;
        let mut num = 0;
        let mut is_num = false;
        for c in s.chars() {
            if c.is_numeric() {
                num = num * 10 + c.to_digit(10).unwrap();
                is_num = true;
            } else {
                if is_num && num <= prev {
                    return false;
                }
                prev = num;
                num = 0;
                is_num = false;
            }
        }
        if is_num && num <= prev {
            return false;
        }
        true

=======

        let mut last: Option<i32> = None;
        let mut is_num = false;
        let mut num = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                is_num = true;
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            } else {
                if is_num {
                    if last.is_none() || last.unwrap() < num {
                        last = Some(num);
                        is_num = false;
                        num = 0;
                    } else {
                        return false;
                    }
                }
            }
        }
        if is_num {
            if last.is_none() || last.unwrap() < num {
                last = Some(num);
            } else {
                return false;
            }
        }
        true

=======

        let mut last_num = -1;
        let mut num = 0;
        let mut has_num = false;
        for c in s.chars() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap();
                has_num = true;
            } else {
                if has_num {
                    if num <= last_num {
                        return false;
                    }
                    last_num = num;
                    num = 0;
                    has_num = false;
                }
            }
        }
        if has_num {
            if num <= last_num {
                return false;
            }
        }
        true
