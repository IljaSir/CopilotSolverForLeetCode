Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut res = -1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min {
                res = res.max(nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        res

=======

        let mut max = -1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min {
                max = max.max(nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        max
    }
}

=======

        let mut max_diff = -1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min {
                max_diff = max_diff.max(nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        max_diff

=======

        let mut max_diff = -1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min {
                max_diff = max_diff.max(nums[i] - min);
            } else {
                min = nums[i];
            }
        }
        max_diff
    }
}

=======

        let mut max = -1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min {
                if nums[i] - min > max {
                    max = nums[i] - min;
                }
            } else {
                min = nums[i];
            }
        }
        max
    }
}

=======

        let mut max = -1;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[i] < nums[j] {
                    max = max.max(nums[j] - nums[i]);
                }
            }
        }
        max
    }
}

=======

        let mut max_diff = -1;
        let mut min_val = nums[0];
        for i in 1..nums.len() {
            if nums[i] > min_val {
                max_diff = max_diff.max(nums[i] - min_val);
            } else {
                min_val = nums[i];
            }
        }
        max_diff
    }
}

=======

        let mut max = -1;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[j] > nums[i] {
                    max = max.max(nums[j] - nums[i]);
                }
            }
        }
        max

=======

        let mut min = std::i32::MAX;
        let mut max = -1;
        for i in 1..nums.len() {
            if nums[i] > nums[i - 1] {
                min = min.min(nums[i - 1]);
                max = max.max(nums[i]);
            }
        }
        if max == -1 {
            return -1;
        }
        max - min
