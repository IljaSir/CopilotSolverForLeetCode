Synthesizing 10/10 solutions

=======

        let mut digits = Vec::new();
        let mut letters = Vec::new();
        for c in s.chars() {
            if c.is_digit(10) {
                digits.push(c);
            } else {
                letters.push(c);
            }
        }
        if digits.len() < letters.len() {
            std::mem::swap(&mut digits, &mut letters);
        }
        if digits.len() - letters.len() > 1 {
            return String::new();
        }
        let mut res = String::new();
        let mut i = 0;
        while i < letters.len() {
            res.push(digits[i]);
            res.push(letters[i]);
            i += 1;
        }
        if i < digits.len() {
            res.push(digits[i]);
        }
        res

=======

        let mut digits = Vec::new();
        let mut letters = Vec::new();
        for c in s.chars() {
            if c.is_digit(10) {
                digits.push(c);
            } else {
                letters.push(c);
            }
        }
        if (digits.len() as i32 - letters.len() as i32).abs() > 1 {
            return "".to_string();
        }
        let mut res = String::new();
        if digits.len() > letters.len() {
            for i in 0..digits.len() {
                res.push(digits[i]);
                if i < letters.len() {
                    res.push(letters[i]);
                }
            }
        } else {
            for i in 0..letters.len() {
                res.push(letters[i]);
                if i < digits.len() {
                    res.push(digits[i]);
                }
            }
        }
        res

=======

        let mut digits = Vec::new();
        let mut letters = Vec::new();
        for c in s.chars() {
            if c.is_ascii_digit() {
                digits.push(c);
            } else {
                letters.push(c);
            }
        }
        if (digits.len() as i32 - letters.len() as i32).abs() > 1 {
            return String::new();
        }
        let mut result = String::new();
        if digits.len() > letters.len() {
            for i in 0..letters.len() {
                result.push(digits[i]);
                result.push(letters[i]);
            }
            result.push(digits[letters.len()]);
        } else {
            for i in 0..digits.len() {
                result.push(letters[i]);
                result.push(digits[i]);
            }
            if letters.len() > digits.len() {
                result.push(letters[letters.len() - 1]);
            }
        }
        result
    }
}

=======

        let mut letters: Vec<char> = Vec::new();
        let mut digits: Vec<char> = Vec::new();
        for c in s.chars() {
            if c.is_digit(10) {
                digits.push(c);
            } else {
                letters.push(c);
            }
        }
        if (letters.len() as i32 - digits.len() as i32).abs() > 1 {
            return "".to_string();
        }
        let mut result = String::new();
        let mut i = 0;
        let mut j = 0;
        let mut flag = false;
        if letters.len() < digits.len() {
            flag = true;
        }
        loop {
            if i == letters.len() && j == digits.len() {
                break;
            }
            if flag {
                if i < letters.len() {
                    result.push(letters[i]);
                    i += 1;
                }
                if j < digits.len() {
                    result.push(digits[j]);
                    j += 1;
                }
            } else {
                if j < digits.len() {
                    result.push(digits[j]);
                    j += 1;
                }
                if i < letters.len() {
                    result.push(letters[i]);
                    i += 1;
                }
            }
        }
        result
    }
}

=======

        let mut chars = Vec::new();
        let mut digits = Vec::new();
        for c in s.chars() {
            if c.is_ascii_digit() {
                digits.push(c);
            } else {
                chars.push(c);
            }
        }
        if (chars.len() as i32 - digits.len() as i32).abs() > 1 {
            return String::new();
        }
        let mut result = String::new();
        if chars.len() >= digits.len() {
            for i in 0..digits.len() {
                result.push(chars[i]);
                result.push(digits[i]);
            }
            if chars.len() > digits.len() {
                result.push(chars[chars.len() - 1]);
            }
        } else {
            for i in 0..chars.len() {
                result.push(digits[i]);
                result.push(chars[i]);
            }
            result.push(digits[digits.len() - 1]);
        }
        result
    }
}

=======

        let mut chars: Vec<char> = Vec::new();
        let mut nums: Vec<char> = Vec::new();
        for c in s.chars() {
            if c.is_digit(10) {
                nums.push(c);
            } else {
                chars.push(c);
            }
        }
        if (chars.len() as i32 - nums.len() as i32).abs() > 1 {
            return "".to_string();
        }
        let mut res: Vec<char> = Vec::new();
        if chars.len() > nums.len() {
            let mut i = 0;
            while i < nums.len() {
                res.push(chars[i]);
                res.push(nums[i]);
                i += 1;
            }
            res.push(chars[i]);
        } else if chars.len() < nums.len() {
            let mut i = 0;
            while i < chars.len() {
                res.push(nums[i]);
                res.push(chars[i]);
                i += 1;
            }
            res.push(nums[i]);
        } else {
            let mut i = 0;
            while i < chars.len() {
                res.push(chars[i]);
                res.push(nums[i]);
                i += 1;
            }
        }
        res.iter().collect()
    }
}

=======

        let mut chars = Vec::new();
        let mut nums = Vec::new();
        let mut res = String::new();
        for c in s.chars() {
            if c.is_alphabetic() {
                chars.push(c);
            } else {
                nums.push(c);
            }
        }
        if (chars.len() as i32 - nums.len() as i32).abs() > 1 {
            return "".to_string();
        }
        if chars.len() >= nums.len() {
            for i in 0..nums.len() {
                res.push(chars[i]);
                res.push(nums[i]);
            }
            if chars.len() > nums.len() {
                res.push(chars[chars.len() - 1]);
            }
        } else {
            for i in 0..chars.len() {
                res.push(nums[i]);
                res.push(chars[i]);
            }
            res.push(nums[nums.len() - 1]);
        }
        res

=======

        let mut s = s.into_bytes();
        let mut digits = Vec::new();
        let mut letters = Vec::new();
        for c in s {
            if c.is_ascii_digit() {
                digits.push(c);
            } else {
                letters.push(c);
            }
        }
        if (digits.len() as i32 - letters.len() as i32).abs() > 1 {
            return "".to_owned();
        }
        let mut result = Vec::new();
        let mut i = 0;
        let mut j = 0;
        while i < digits.len() || j < letters.len() {
            if digits.len() > letters.len() {
                result.push(digits[i]);
                i += 1;
            } else if digits.len() < letters.len() {
                result.push(letters[j]);
                j += 1;
            } else {
                result.push(digits[i]);
                result.push(letters[j]);
                i += 1;
                j += 1;
            }
        }
        unsafe { String::from_utf8_unchecked(result) }

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut digits: Vec<char> = chars.iter().filter(|&c| c.is_digit(10)).cloned().collect();
        let mut letters: Vec<char> = chars.iter().filter(|&c| c.is_alphabetic()).cloned().collect();
        
        if (letters.len() as i32 - digits.len() as i32).abs() > 1 {
            return "".to_string();
        }
        
        let mut result: Vec<char> = Vec::new();
        let mut i = 0;
        let mut j = 0;
        
        if letters.len() > digits.len() {
            result.push(letters[i]);
            i += 1;
        } else if letters.len() < digits.len() {
            result.push(digits[j]);
            j += 1;
        }
        
        loop {
            if i >= letters.len() && j >= digits.len() {
                break;
            }
            
            if i < letters.len() {
                result.push(letters[i]);
                i += 1;
            }
            
            if j < digits.len() {
                result.push(digits[j]);
                j += 1;
            }
        }
        
        result.iter().collect()

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        let mut digits = chars.iter().filter(|c| c.is_ascii_digit()).count();
        let mut letters = chars.iter().filter(|c| c.is_ascii_alphabetic()).count();
        if (digits - letters).abs() > 1 {
            return "".to_string();
        }
        if digits > letters {
            chars.sort_by(|a, b| {
                if a.is_ascii_digit() && b.is_ascii_alphabetic() {
                    std::cmp::Ordering::Less
                } else {
                    std::cmp::Ordering::Greater
                }
            });
        } else {
            chars.sort_by(|a, b| {
                if a.is_ascii_alphabetic() && b.is_ascii_digit() {
                    std::cmp::Ordering::Less
                } else {
                    std::cmp::Ordering::Greater
                }
            });
        }
        chars.into_iter().collect()
    }
}
