Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut indices: Vec<i32> = vec![];
        let mut nums = nums;
        nums.sort();
        for i in 0..nums.len() {
            if nums[i] == target {
                indices.push(i as i32);
            }
        }
        return indices;
    }
}

=======

        let mut result = Vec::new();
        let mut sorted = nums.clone();
        sorted.sort();
        for i in 0..nums.len() {
            if nums[i] == target {
                result.push(sorted.iter().position(|&x| x == target).unwrap() as i32);
            }
        }
        result
    }
}

=======

        let mut indices = Vec::new();
        let mut sorted = nums.clone();
        sorted.sort();
        for i in 0..nums.len() {
            if nums[i] == target {
                indices.push(sorted.binary_search(&target).unwrap() as i32);
            }
        }
        indices
    }
}

=======

        let mut indices = Vec::new();
        let mut nums = nums;
        nums.sort();
        for (i, &num) in nums.iter().enumerate() {
            if num == target {
                indices.push(i as i32);
            }
        }
        indices
    }
}

=======

        let mut v = vec![];
        for (i, x) in nums.iter().enumerate() {
            if *x == target {
                v.push(i as i32);
            }
        }
        v
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        let mut res = Vec::new();
        for (i, &v) in sorted.iter().enumerate() {
            if v == target {
                res.push(nums.iter().position(|&x| x == v).unwrap() as i32);
            }
        }
        res
    }
}

=======

        let mut indices = vec![];
        
        for (i, n) in nums.iter().enumerate() {
            if *n == target {
                indices.push(i as i32);
            }
        }
        
        indices
    }
}

=======

        let mut idxs = vec![];
        let mut sorted_nums = nums.clone();
        sorted_nums.sort();
        for (i, num) in sorted_nums.iter().enumerate() {
            if *num == target {
                idxs.push(i as i32);
            }
        }
        idxs
    }
}

=======

        
    }
}
