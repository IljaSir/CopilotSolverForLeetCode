Synthesizing 10/10 solutions

=======

        let mut n = num;
        let mut mask = 1;
        while n > 0 {
            n >>= 1;
            mask <<= 1;
        }
        mask - 1 - num

=======

        let mut mask = !0;
        while mask & num != 0 {
            mask <<= 1;
        }
        !mask & !num

=======

        let mut n = num;
        let mut mask = 1;
        while n != 0 {
            n >>= 1;
            mask <<= 1;
        }
        mask - 1 - num

=======

        let mut n = num;
        let mut mask = 0;
        while n > 0 {
            n >>= 1;
            mask = (mask << 1) | 1;
        }
        num ^ mask

=======

        let mut num = num;
        let mut res = 0;
        let mut i = 0;
        while num > 0 {
            res += ((num & 1) ^ 1) << i;
            num >>= 1;
            i += 1;
        }
        res
    }
}

=======

        let mut result = 0;
        let mut i = 0;
        let mut n = num;
        while n > 0 {
            if n & 1 == 0 {
                result += 1 << i;
            }
            n >>= 1;
            i += 1;
        }
        result

=======

        let mut n = num;
        let mut c = 0;
        while n > 0 {
            n = n >> 1;
            c = c << 1;
            c += 1;
        }
        c - num

=======

        let mut i = 0;
        let mut n = num;
        while n > 0 {
            n = n >> 1;
            i += 1;
        }
        let mask = (1 << i) - 1;
        num ^ mask

=======

        let mut n = num;
        let mut mask = 0;
        while n > 0 {
            mask = mask * 2 + 1;
            n = n >> 1;
        }
        mask ^ num

=======

        let mut i = 0;
        let mut x = 0;
        while i <= 31 {
            x = x | (1 << i);
            i += 1;
        }
        x - num
