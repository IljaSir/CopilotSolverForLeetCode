Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] > nums[(i + 1) % nums.len()] {
                count += 1;
            }
        }
        count <= 1
    }
}

=======

        let mut is_sorted = true;
        for i in 0..nums.len() - 1 {
            if nums[i] > nums[i+1] {
                is_sorted = false;
                break;
            }
        }
        if is_sorted {
            return true;
        }
        let mut is_reversed = true;
        for i in 0..nums.len() - 1 {
            if nums[i] < nums[i+1] {
                is_reversed = false;
                break;
            }
        }
        if is_reversed {
            return true;
        }
        let mut is_rotated = true;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] > nums[i+1] {
                break;
            }
            i += 1;
        }
        let mut j = i + 1;
        while j < nums.len() - 1 {
            if nums[j] > nums[j+1] {
                is_rotated = false;
                break;
            }
            j += 1;
        }
        if is_rotated {
            return true;
        }
        let mut k = j + 1;
        while k < nums.len() - 1 {
            if nums[k] > nums[k+1] {
                is_rotated = false;
                break;
            }
            k += 1;
        }
        if is_rotated {
            return true;
        }
        let mut m = k + 1;
        while m < nums.len() - 1 {
            if nums[m] > nums[m+1] {
                is_rotated = false;
                break;
            }
            m += 1;
        }
        if is_rotated {
            return true;
        }
        false
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        for i in 0..nums.len() {
            let mut rotated = nums.clone();
            for j in 0..nums.len() {
                rotated[j] = nums[(j + i) % nums.len()];
            }
            if rotated == sorted {
                return true;
            }
        }
        false

=======

        let mut sorted = nums.clone();
        sorted.sort();
        for i in 0..nums.len() {
            if sorted == nums.iter().cycle().skip(i).take(nums.len()).map(|x| *x).collect::<Vec<i32>>() {
                return true;
            }
        }
        false
    }
}

=======

        let mut sorted_nums = nums.clone();
        sorted_nums.sort();
        for i in 1..nums.len() {
            let mut rotated_nums = nums.clone();
            rotated_nums.rotate_left(i);
            if rotated_nums == sorted_nums {
                return true;
            }
        }
        false

=======

        let mut last = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] < last {
                count += 1;
            }
            last = nums[i];
        }
        if count == 0 {
            return true;
        }
        if count > 1 {
            return false;
        }
        nums[0] >= nums[nums.len() - 1]
    }
}

=======

        let mut is_sorted = true;
        let mut is_rotated = false;
        for i in 0..nums.len() {
            if nums[i] > nums[(i+1) % nums.len()] {
                is_sorted = false;
                if is_rotated {
                    return false
                }
                is_rotated = true;
            }
        }
        is_sorted || is_rotated
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        let mut rotated = sorted.clone();
        for i in 1..sorted.len() {
            rotated.rotate_left(1);
            if nums == rotated {
                return true;
            }
        }
        nums == sorted
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        let mut rotated = nums.clone();
        rotated.rotate_right(1);
        nums == sorted || nums == rotated
    }
}

=======

        let mut sorted = nums.clone();
        sorted.sort();
        let mut rotated = nums.clone();
        let mut rotated2 = nums.clone();
        rotated.rotate_left(1);
        rotated2.rotate_right(1);
        rotated == sorted || rotated2 == sorted
    }
}
