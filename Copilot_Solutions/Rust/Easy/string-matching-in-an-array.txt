Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i != j && words[i].contains(&words[j]) {
                    result.push(words[j].to_owned());
                }
            }
        }
        result.sort();
        result.dedup();
        result
    }
}

=======

        let mut ans = Vec::new();
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i != j && words[i].contains(&words[j]) {
                    ans.push(words[j].clone());
                }
            }
        }
        ans

=======

        let mut res = Vec::new();
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i == j { continue; }
                if words[i].contains(&words[j]) {
                    res.push(words[j].clone());
                }
            }
        }
        res
    }
}

=======

        let mut result = Vec::new();
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i == j { continue; }
                if words[i].contains(&words[j]) {
                    result.push(words[j].clone());
                }
            }
        }
        result.sort();
        result.dedup();
        result
    }
}

=======

        let mut result = Vec::new();
        for (i, w1) in words.iter().enumerate() {
            for (j, w2) in words.iter().enumerate() {
                if i != j && w1.contains(w2) {
                    result.push(w2.clone());
                }
            }
        }
        result.sort();
        result.dedup();
        result

=======

        let mut ans = vec![];
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i == j {continue;}
                if words[i].contains(&words[j]) {
                    ans.push(words[j].clone());
                }
            }
        }
        ans.sort();
        ans.dedup();
        ans
    }
}

=======

        let mut res = Vec::new();
        let mut words = words;
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        for i in 0..words.len() {
            for j in i + 1..words.len() {
                if words[j].contains(&words[i]) {
                    res.push(words[i].clone());
                    break;
                }
            }
        }
        res
    }
}

=======

        let mut result = Vec::new();
        let mut words = words;
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        for i in 0..words.len() {
            for j in i+1..words.len() {
                if words[j].contains(&words[i]) {
                    result.push(words[i].clone());
                    break;
                }
            }
        }
        return result;
    }
}

=======

        let mut result = vec![];
        let words = words.iter().map(|s| s.as_str()).collect::<Vec<_>>();
        for i in 0..words.len() {
            for j in 0..words.len() {
                if i == j {
                    continue;
                }
                if words[i].len() > words[j].len() {
                    continue;
                }
                if words[j].contains(words[i]) {
                    result.push(words[i].to_string());
                    break;
                }
            }
        }
        result
    }
}

=======

        let mut res = Vec::new();
        let mut words: Vec<&str> = words.iter().map(|x| x.as_str()).collect();
        words.sort_by_key(|x| x.len());
        for i in 0..words.len() {
            for j in (i + 1)..words.len() {
                if words[j].contains(words[i]) {
                    res.push(words[i]);
                    break;
                }
            }
        }
        res
    }
}
