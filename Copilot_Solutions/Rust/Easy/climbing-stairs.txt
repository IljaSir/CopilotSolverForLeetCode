Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for i in 2..=n {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        dp[n]

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 0..n {
            dp[i + 1] += dp[i];
            if i < n - 1 {
                dp[i + 2] += dp[i];
            }
        }
        dp[n]

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 0..=n {
            if i + 1 <= n {
                dp[i + 1] += dp[i];
            }
            if i + 2 <= n {
                dp[i + 2] += dp[i];
            }
        }
        dp[n]

=======

        let mut a = 1;
        let mut b = 1;
        for i in 2..=n {
            let c = a + b;
            a = b;
            b = c;
        }
        b

=======

        let mut dp = vec![0; n as usize + 2];
        dp[1] = 1;
        dp[2] = 2;
        for i in 3..=n as usize {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        dp[n as usize]

=======

        let mut dp = vec![0; (n + 1) as usize];
        dp[0] = 1;
        dp[1] = 1;
        for i in 2..=(n as usize) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        dp[n as usize]

=======

        let mut a: i32 = 1;
        let mut b: i32 = 1;
        for _ in 1..n {
            let c = a + b;
            a = b;
            b = c;
        }
        b

=======

        if n == 1 {
            return 1;
        }
        if n == 2 {
            return 2;
        }
        let mut prev = 1;
        let mut curr = 2;
        for _ in 2..n {
            let tmp = curr;
            curr = curr + prev;
            prev = tmp;
        }
        curr
