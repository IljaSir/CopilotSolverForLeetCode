Synthesizing 10/10 solutions

=======

        let mut b = 0;
        let mut a = 0;
        let mut l = 0;
        let mut o = 0;
        let mut n = 0;
        for c in text.chars() {
            match c {
                'b' => b += 1,
                'a' => a += 1,
                'l' => l += 1,
                'o' => o += 1,
                'n' => n += 1,
                _ => {}
            }
        }
        let l = l / 2;
        let o = o / 2;
        let mut min = b;
        if min > a {
            min = a;
        }
        if min > l {
            min = l;
        }
        if min > o {
            min = o;
        }
        if min > n {
            min = n;
        }
        min

=======

        let mut count = 0;
        let mut b = 0;
        let mut a = 0;
        let mut l = 0;
        let mut o = 0;
        let mut n = 0;
        for ch in text.chars() {
            match ch {
                'b' => b += 1,
                'a' => a += 1,
                'l' => l += 1,
                'o' => o += 1,
                'n' => n += 1,
                _ => {}
            }
        }
        while b > 0 && a > 0 && l > 1 && o > 1 && n > 0 {
            b -= 1;
            a -= 1;
            l -= 2;
            o -= 2;
            n -= 1;
            count += 1;
        }
        count

=======

        let mut count = [0; 26];
        for c in text.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let mut min = std::i32::MAX;
        for (i, c) in "balloon".chars().enumerate() {
            let n = count[c as usize - 'a' as usize];
            if i == 1 || i == 3 {
                min = std::cmp::min(min, n / 2);
            } else {
                min = std::cmp::min(min, n);
            }
        }
        min

=======

        let mut count = vec![0; 26];
        for c in text.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let mut min = std::i32::MAX;
        min = min.min(count['b' as usize - 'a' as usize]);
        min = min.min(count['a' as usize - 'a' as usize]);
        min = min.min(count['l' as usize - 'a' as usize] / 2);
        min = min.min(count['o' as usize - 'a' as usize] / 2);
        min = min.min(count['n' as usize - 'a' as usize]);
        min

=======

        let mut count = vec![0; 26];
        for c in text.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let mut min = count['b' as usize - 'a' as usize];
        min = min.min(count['a' as usize - 'a' as usize]);
        min = min.min(count['l' as usize - 'a' as usize] / 2);
        min = min.min(count['o' as usize - 'a' as usize] / 2);
        min = min.min(count['n' as usize - 'a' as usize]);
        min

=======

        let mut chars = vec![0; 26];
        for c in text.chars() {
            chars[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut ans = 0;
        loop {
            if chars[1] >= 1 && chars[0] >= 1 && chars[11] >= 2 && chars[14] >= 2 && chars[13] >= 1 {
                ans += 1;
                chars[1] -= 1;
                chars[0] -= 1;
                chars[11] -= 2;
                chars[14] -= 2;
                chars[13] -= 1;
            } else {
                break;
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for c in text.chars() {
            *map.entry(c).or_insert(0) += 1;
        }
        let mut count = 0;
        loop {
            if map.get(&'b').unwrap_or(&0) == &0 {
                break;
            }
            if map.get(&'a').unwrap_or(&0) == &0 {
                break;
            }
            if map.get(&'l').unwrap_or(&0) < &2 {
                break;
            }
            if map.get(&'o').unwrap_or(&0) < &2 {
                break;
            }
            if map.get(&'n').unwrap_or(&0) == &0 {
                break;
            }
            map.entry('b').and_modify(|e| *e -= 1);
            map.entry('a').and_modify(|e| *e -= 1);
            map.entry('l').and_modify(|e| *e -= 2);
            map.entry('o').and_modify(|e| *e -= 2);
            map.entry('n').and_modify(|e| *e -= 1);
            count += 1;
        }
        count

=======

        let mut count = [0; 26];
        for c in text.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let mut res = i32::max_value();
        let map = [('b', 1), ('a', 1), ('l', 2), ('o', 2), ('n', 1)];
        for (c, n) in map.iter() {
            res = res.min(count[*c as usize - 'a' as usize] / n);
        }
        res

=======

        let mut counter = [0; 26];
        for c in text.chars() {
            counter[(c as u8 - b'a') as usize] += 1;
        }
        let mut result = std::i32::MAX;
        for (i, c) in "balon".chars().enumerate() {
            let count = counter[(c as u8 - b'a') as usize];
            if i == 2 {
                result = result.min(count / 2);
            } else {
                result = result.min(count);
            }
        }
        result

=======

        let mut dict: Vec<i32> = vec![0; 26];
        for c in text.chars() {
            dict[c as usize - 'a' as usize] += 1;
        }
        let mut count = 0;
        let mut flag = true;
        while flag {
            for c in "balloon".chars() {
                if dict[c as usize - 'a' as usize] > 0 {
                    dict[c as usize - 'a' as usize] -= 1;
                } else {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
        count
