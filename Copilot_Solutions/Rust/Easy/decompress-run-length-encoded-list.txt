Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut result = Vec::new();
        for i in (0..nums.len()).step_by(2) {
            for _ in 0..nums[i] {
                result.push(nums[i+1]);
            }
        }
        result

=======

        let mut res = vec![];
        for i in (0..nums.len()).step_by(2) {
            res.append(&mut vec![nums[i+1]; nums[i] as usize]);
        }
        res
    }
}

=======

        let mut result = Vec::new();
        for i in (0..nums.len()).step_by(2) {
            let freq = nums[i];
            let val = nums[i+1];
            for _ in 0..freq {
                result.push(val);
            }
        }
        result

=======

        let mut res: Vec<i32> = Vec::new();
        for i in (0..nums.len()).step_by(2) {
            let freq = nums[i];
            let val = nums[i + 1];
            for _ in 0..freq {
                res.push(val);
            }
        }
        res

=======

        let mut result = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            let freq = nums[i];
            let val = nums[i + 1];
            for _ in 0..freq {
                result.push(val);
            }
            i += 2;
        }
        result

=======

        let mut res: Vec<i32> = Vec::new();
        for i in 0..nums.len() / 2 {
            for _ in 0..nums[i * 2] {
                res.push(nums[i * 2 + 1]);
            }
        }
        res

=======

        let mut result = Vec::new();
        for i in (0..nums.len()).step_by(2) {
            result.extend((0..nums[i]).map(|_| nums[i + 1]));
        }
        result

=======

        let mut ret = vec![];
        let mut i = 0;
        while i < nums.len() {
            let freq = nums[i];
            let val = nums[i + 1];
            for _ in 0..freq {
                ret.push(val);
            }
            i += 2;
        }
        ret
    }
}

=======

        let mut v = Vec::new();
        for i in (0..nums.len()).step_by(2) {
            let (f, v) = (nums[i], nums[i + 1]);
            for _ in 0..f {
                v.push(v);
            }
        }
        v
    }
}
