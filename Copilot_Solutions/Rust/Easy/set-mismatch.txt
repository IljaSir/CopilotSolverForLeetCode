Synthesizing 5/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut result = vec![0, 0];
        for i in 0..nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                result[0] = nums[i];
            } else if nums[i] + 1 != nums[i + 1] {
                result[1] = nums[i] + 1;
            }
        }
        if result[1] == 0 {
            result[1] = nums[nums.len() - 1] + 1;
        }
        result

=======

        let mut nums = nums;
        let mut res = vec![0, 0];
        for i in 0..nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            if nums[idx] < 0 {
                res[0] = nums[i].abs();
            } else {
                nums[idx] *= -1;
            }
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                res[1] = (i + 1) as i32;
                break;
            }
        }
        res

=======

        let mut nums = nums;
        let mut res = vec![0, 0];
        for i in 0..nums.len() {
            let index = (nums[i].abs() - 1) as usize;
            if nums[index] < 0 {
                res[0] = nums[i].abs();
            } else {
                nums[index] *= -1;
            }
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                res[1] = (i + 1) as i32;
            }
        }
        res

=======

        let mut nums = nums;
        let mut dup = 0;
        let mut miss = 0;
        for i in 0..nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            if nums[idx] < 0 {
                dup = nums[i].abs();
            } else {
                nums[idx] *= -1;
            }
        }
        for i in 0..nums.len() {
            if nums[i] > 0 {
                miss = (i + 1) as i32;
            }
        }
        vec![dup, miss]

=======

        let n = nums.len();
        let mut count = vec![0; n + 1];
        for x in nums {
            count[x as usize] += 1;
        }
        let mut ans = vec![0; 2];
        for i in 1..=n {
            if count[i] == 2 {
                ans[0] = i as i32;
            } else if count[i] == 0 {
                ans[1] = i as i32;
            }
        }
        ans
