Synthesizing 10/10 solutions

=======

        strs.iter().map(|s| {
            if s.chars().all(|c| c.is_digit(10)) {
                s.parse::<i32>().unwrap()
            } else {
                s.len() as i32
            }
        }).max().unwrap()

=======

        strs.iter().map(|s| {
            if s.chars().all(|c| c.is_digit(10)) {
                s.parse::<i32>().unwrap()
            } else {
                s.len() as i32
            }
        }).max().unwrap()
    }
}

=======

        strs.iter().map(|s| if s.chars().all(|c| c.is_digit(10)) { s.parse::<i32>().unwrap() } else { s.len() as i32 }).max().unwrap()

=======

        strs.iter().map(|s| {
            if s.chars().any(|c| c.is_alphabetic()) {
                s.len() as i32
            } else {
                s.parse::<i32>().unwrap()
            }
        }).max().unwrap_or(0)

=======

        let mut max = 0;
        for s in strs {
            let mut is_digit = true;
            for c in s.chars() {
                if !c.is_digit(10) {
                    is_digit = false;
                    break;
                }
            }
            if is_digit {
                max = max.max(s.parse::<i32>().unwrap());
            } else {
                max = max.max(s.len() as i32);
            }
        }
        max

=======

        let mut max = 0;
        for s in strs {
            if s.chars().all(|c| c.is_numeric()) {
                max = max.max(s.parse::<i32>().unwrap());
            } else {
                max = max.max(s.len() as i32);
            }
        }
        max

=======

        let mut max = 0;
        for s in strs {
            let mut sum = 0;
            for c in s.chars() {
                if let Some(d) = c.to_digit(10) {
                    sum = sum * 10 + d;
                } else {
                    sum += 1;
                }
            }
            if sum > max {
                max = sum;
            }
        }
        max as i32

=======

        strs.iter().map(|s| s.chars().fold(0, |acc, c| if c.is_digit(10) { acc } else { acc + 1 })).max().unwrap()

=======

        let mut max = 0;
        for s in strs {
            let mut is_digit = true;
            let mut count = 0;
            for c in s.chars() {
                if c.is_digit(10) {
                    count = count * 10 + c.to_digit(10).unwrap();
                } else {
                    is_digit = false;
                    count += 1;
                }
            }
            if is_digit {
                max = max.max(count);
            } else {
                max = max.max(count);
            }
        }
        max

=======

        let mut res = 0;
        for s in strs {
            let mut num = 0;
            let mut is_digit = true;
            for c in s.chars() {
                if c.is_digit(10) {
                    num = num * 10 + c.to_digit(10).unwrap();
                } else {
                    is_digit = false;
                    break;
                }
            }
            if is_digit {
                res = res.max(num);
            } else {
                res = res.max(s.len() as i32);
            }
        }
        res
