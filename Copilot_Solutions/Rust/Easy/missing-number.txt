Synthesizing 10/10 solutions

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        (nums.len() * (nums.len() + 1) / 2) as i32 - sum

=======

        let mut sum = 0;
        for n in nums {
            sum += n;
        }
        let n = nums.len() as i32;
        n * (n + 1) / 2 - sum

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let n = nums.len() as i32;
        n * (n + 1) / 2 - sum

=======

        let n = nums.len();
        let mut sum = 0;
        for i in 0..n {
            sum += nums[i];
        }
        (n * (n + 1)) as i32 / 2 - sum
    }
}

=======

        let n = nums.len() as i32;
        let sum = nums.iter().fold(0, |acc, x| acc + x);
        (n * (n + 1)) / 2 - sum
    }
}

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let n = nums.len() as i32;
        (n * (n + 1)) / 2 - sum
    }
}

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let n = nums.len();
        (n * (n + 1) / 2) as i32 - sum
    }
}

=======

        let mut result = nums.len() as i32;
        for (i, num) in nums.iter().enumerate() {
            result ^= i as i32 ^ *num;
        }
        result
    }
}

=======

        let n = nums.len();
        let sum = (n * (n + 1)) / 2;
        let mut total = 0;
        for num in nums {
            total += num as usize;
        }
        (sum - total) as i32

=======

        let mut sum = 0;
        let mut n = nums.len();
        for num in nums {
            sum += num as i32;
            n -= 1;
        }
        (n as i32) * (n as i32 + 1) / 2 - sum
