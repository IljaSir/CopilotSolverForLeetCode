Synthesizing 10/10 solutions

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = chars.len() - 1;
        while i < j {
            if !chars[i].is_ascii_alphabetic() {
                i += 1;
            } else if !chars[j].is_ascii_alphabetic() {
                j -= 1;
            } else {
                chars.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        chars.iter().collect()
    }
}

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut left = 0;
        let mut right = chars.len() - 1;
        while left < right {
            if !chars[left].is_ascii_alphabetic() {
                left += 1;
                continue;
            }
            if !chars[right].is_ascii_alphabetic() {
                right -= 1;
                continue;
            }
            chars.swap(left, right);
            left += 1;
            right -= 1;
        }
        chars.iter().collect()
    }
}

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut left = 0;
        let mut right = chars.len() - 1;
        while left < right {
            if !chars[left].is_ascii_alphabetic() {
                left += 1;
                continue;
            }
            if !chars[right].is_ascii_alphabetic() {
                right -= 1;
                continue;
            }
            chars.swap(left, right);
            left += 1;
            right -= 1;
        }
        chars.into_iter().collect()
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            if !s[i].is_ascii_alphabetic() {
                i += 1;
            } else if !s[j].is_ascii_alphabetic() {
                j -= 1;
            } else {
                s.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        s.iter().collect()

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            while i < j && !s[i].is_ascii_alphabetic() {
                i += 1;
            }
            while i < j && !s[j].is_ascii_alphabetic() {
                j -= 1;
            }
            if i < j {
                s.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        s.into_iter().collect()

=======

        let mut chars: Vec<char> = s.chars().collect();
        let mut left = 0;
        let mut right = chars.len() - 1;
        while left < right {
            if chars[left].is_ascii_alphabetic() && chars[right].is_ascii_alphabetic() {
                chars.swap(left, right);
                left += 1;
                right -= 1;
            } else if !chars[left].is_ascii_alphabetic() {
                left += 1;
            } else if !chars[right].is_ascii_alphabetic() {
                right -= 1;
            }
        }
        chars.into_iter().collect()
    }
}

=======

        let mut v = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = v.len() - 1;
        while i < j {
            if !v[i].is_ascii_alphabetic() {
                i += 1;
                continue;
            }
            if !v[j].is_ascii_alphabetic() {
                j -= 1;
                continue;
            }
            v.swap(i, j);
            i += 1;
            j -= 1;
        }
        v.into_iter().collect()
    }
}

=======

        let mut s = s.into_bytes();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if !s[l].is_ascii_alphabetic() {
                l += 1;
            } else if !s[r].is_ascii_alphabetic() {
                r -= 1;
            } else {
                s.swap(l, r);
                l += 1;
                r -= 1;
            }
        }
        unsafe { String::from_utf8_unchecked(s) }
    }
}

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = s.len()-1;
        while i < j {
            if !s[i].is_ascii_alphabetic() {
                i += 1;
            } else if !s[j].is_ascii_alphabetic() {
                j -= 1;
            } else {
                s.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        s.into_iter().collect()

=======

        let mut res: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = res.len() - 1;
        while i < j {
            if !res[i].is_ascii_alphabetic() {
                i += 1;
            } else if !res[j].is_ascii_alphabetic() {
                j -= 1;
            } else {
                res.swap(i, j);
                i += 1;
                j -= 1;
            }
        }
        res.iter().collect()
    }
}
