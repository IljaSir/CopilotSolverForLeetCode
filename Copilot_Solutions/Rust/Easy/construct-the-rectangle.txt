Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut w = (area as f64).sqrt() as i32;
        while area % w != 0 {
            w -= 1;
        }
        vec![area / w, w]

=======

        let mut l = (area as f64).sqrt() as i32;
        while area % l != 0 {
            l -= 1;
        }
        vec![area / l, l]

=======

        let mut l = (area as f64).sqrt() as i32;
        while area % l != 0 {
            l -= 1;
        }
        vec![area / l, l]
    }
}

=======

        let mut w = (area as f64).sqrt().floor() as i32;
        while area % w != 0 {
            w -= 1;
        }
        vec![area / w, w]

=======

        let mut i = (area as f64).sqrt() as i32;
        while area % i != 0 {
            i -= 1;
        }
        vec![area/i, i]

=======

        let mut n = (area as f64).sqrt() as i32;
        while area % n != 0 {
            n -= 1;
        }
        vec![area/n, n]

=======

        let mut l = (area as f64).sqrt() as i32;
        let mut w = 1;
        while l * w != area {
            if l * w < area {
                w += 1;
            } else {
                l -= 1;
            }
        }
        vec![l, w]
