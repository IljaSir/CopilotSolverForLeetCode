Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        for i in 0..nums.len() {
            if nums[i] < 0 && k > 0 {
                nums[i] = -nums[i];
                k -= 1;
            }
        }
        if k % 2 == 1 {
            nums[0] = -nums[0];
        }
        nums.iter().sum()

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        for i in 0..nums.len() {
            if nums[i] < 0 && k > 0 {
                nums[i] *= -1;
                k -= 1;
            }
        }
        if k % 2 == 1 {
            nums[0] *= -1;
        }
        nums.iter().sum()
    }
}

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        for i in 0..nums.len() {
            if k == 0 {
                break;
            }
            if nums[i] < 0 {
                nums[i] = -nums[i];
                k -= 1;
            }
        }
        if k > 0 {
            if k % 2 == 1 {
                nums[0] = -nums[0];
            }
        }
        nums.iter().sum()

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        for i in 0..nums.len() {
            if nums[i] < 0 && k > 0 {
                nums[i] *= -1;
                k -= 1;
            }
        }
        if k > 0 {
            if k % 2 == 1 {
                let mut min = 0;
                for i in 1..nums.len() {
                    if nums[i] < nums[min] {
                        min = i;
                    }
                }
                nums[min] *= -1;
            }
        }
        nums.iter().sum()

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() && i < k as usize && nums[i] < 0 {
            nums[i] = -nums[i];
            i += 1;
        }
        let mut sum = 0;
        let mut min = 100;
        for i in 0..nums.len() {
            sum += nums[i];
            if nums[i] < min {
                min = nums[i];
            }
        }
        if (k - i as i32) % 2 == 1 {
            sum -= min * 2;
        }
        sum

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        let mut i = 0;
        while i < nums.len() && k > 0 {
            if nums[i] < 0 {
                nums[i] = -nums[i];
                k -= 1;
            }
            i += 1;
        }
        if k % 2 == 1 {
            let mut min = 100;
            for i in 0..nums.len() {
                min = min.min(nums[i]);
            }
            for i in 0..nums.len() {
                if nums[i] == min {
                    nums[i] = -nums[i];
                    break;
                }
            }
        }
        nums.iter().sum()
    }
}

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort_unstable();
        let mut i = 0;
        while i < nums.len() && k > 0 && nums[i] < 0 {
            nums[i] = -nums[i];
            i += 1;
            k -= 1;
        }
        let mut sum = 0;
        for n in nums {
            sum += n;
        }
        if k > 0 && k % 2 != 0 {
            sum -= 2 * nums[0];
        }
        sum
    }
}

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort_unstable();
        let mut i = 0;
        while i < nums.len() && k > 0 && nums[i] < 0 {
            nums[i] = -nums[i];
            i += 1;
            k -= 1;
        }
        let mut sum = 0;
        let mut min = 100;
        for n in nums {
            sum += n;
            min = min.min(n);
        }
        if k % 2 == 1 {
            sum - min * 2
        } else {
            sum
        }
    }
}

=======

        let mut nums = nums;
        let mut k = k;
        nums.sort();
        let mut i = 0;
        while k > 0 {
            if nums[i] < 0 {
                nums[i] = -nums[i];
                k -= 1;
                i += 1;
            } else {
                break;
            }
        }
        if k > 0 {
            if k % 2 == 1 {
                nums[0] = -nums[0];
            }
        }
        nums.iter().sum()

=======

        let mut nums = nums;
        let mut k = k;
        let mut sum = 0;
        nums.sort();
        for i in 0..nums.len() {
            if k == 0 {
                break;
            }
            if nums[i] < 0 {
                nums[i] = -nums[i];
                k -= 1;
            }
        }
        for i in 0..nums.len() {
            if k > 0 && k % 2 == 1 {
                if i == 0 {
                    nums[i] = -nums[i];
                } else if nums[i] > nums[i - 1] {
                    nums[i - 1] = -nums[i - 1];
                } else {
                    nums[i] = -nums[i];
                }
            }
            sum += nums[i];
        }
        sum
