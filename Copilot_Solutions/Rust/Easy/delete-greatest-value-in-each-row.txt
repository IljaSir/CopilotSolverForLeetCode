Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        let mut result = 0;
        while !grid.is_empty() {
            let mut max = 0;
            let mut index = 0;
            for i in 0..grid.len() {
                let mut max_in_row = 0;
                for j in 0..grid[i].len() {
                    if grid[i][j] > max_in_row {
                        max_in_row = grid[i][j];
                    }
                }
                if max_in_row > max {
                    max = max_in_row;
                    index = i;
                }
            }
            result += max;
            grid.remove(index);
        }
        result
    }
}

=======

        let mut grid = grid;
        let mut result = 0;
        while !grid.is_empty() {
            let mut max = 0;
            for i in 0..grid.len() {
                let index = grid[i].iter().enumerate().max_by_key(|&(_, &x)| x).unwrap().0;
                max = max.max(grid[i][index]);
                grid[i].remove(index);
            }
            result += max;
            grid.retain(|x| !x.is_empty());
        }
        result
    }
}

=======

        let mut grid = grid;
        let mut ans = 0;
        while !grid.is_empty() {
            let mut max = 0;
            for row in grid.iter_mut() {
                let m = row.iter().max().unwrap();
                max = max.max(*m);
                *row = row.iter().filter(|&&x| x != *m).map(|&x| x).collect();
            }
            grid = grid.iter().filter(|row| !row.is_empty()).map(|row| row.to_vec()).collect();
            ans += max;
        }
        ans
    }
}

=======

        let mut result = 0;
        let mut grid = grid;
        while grid.len() > 0 {
            let mut max = 0;
            let mut max_index = 0;
            for i in 0..grid.len() {
                let row = &grid[i];
                for j in 0..row.len() {
                    let value = row[j];
                    if value > max {
                        max = value;
                        max_index = j;
                    }
                }
            }
            result += max;
            for i in 0..grid.len() {
                grid[i].remove(max_index);
            }
            grid.retain(|row| row.len() > 0);
        }
        result

=======

        let mut grid = grid;
        let mut sum = 0;
        while !grid.is_empty() {
            let mut max = 0;
            let mut max_row = 0;
            let mut max_col = 0;
            for (row, row_value) in grid.iter().enumerate() {
                for (col, col_value) in row_value.iter().enumerate() {
                    if *col_value > max {
                        max = *col_value;
                        max_row = row;
                        max_col = col;
                    }
                }
            }
            sum += max;
            grid[max_row].remove(max_col);
            if grid[max_row].is_empty() {
                grid.remove(max_row);
            }
        }
        sum
    }
}

=======

        let mut grid = grid;
        let mut result = 0;
        while !grid.is_empty() {
            let mut max = 0;
            let mut max_index = 0;
            for (i, row) in grid.iter().enumerate() {
                if let Some(&m) = row.iter().max() {
                    if m > max {
                        max = m;
                        max_index = i;
                    }
                }
            }
            result += max;
            grid.remove(max_index);
        }
        result
    }
}

=======

        let mut grid = grid;
        let mut sum = 0;
        while !grid.is_empty() {
            let mut max = 0;
            let mut max_i = 0;
            for (i, row) in grid.iter().enumerate() {
                if let Some(&v) = row.iter().max() {
                    if v > max {
                        max = v;
                        max_i = i;
                    }
                }
            }
            sum += max;
            grid.remove(max_i);
        }
        sum
    }
}

=======

        let mut grid = grid;
        let mut ans = 0;
        while grid.len() > 0 {
            let mut max = 0;
            for i in 0..grid.len() {
                let mut max_row = 0;
                for j in 0..grid[i].len() {
                    if grid[i][j] > max_row {
                        max_row = grid[i][j];
                    }
                }
                if max_row > max {
                    max = max_row;
                }
            }
            ans += max;
            for i in 0..grid.len() {
                let mut max_row = 0;
                let mut index = 0;
                for j in 0..grid[i].len() {
                    if grid[i][j] > max_row {
                        max_row = grid[i][j];
                        index = j;
                    }
                }
                grid[i].remove(index);
            }
            grid.retain(|row| row.len() > 0);
        }
        ans

=======

        let mut grid = grid;
        let mut result = 0;
        while !grid.is_empty() {
            let mut max = 0;
            for i in 0..grid.len() {
                let mut max_i = 0;
                for j in 0..grid[i].len() {
                    if grid[i][j] > grid[i][max_i] {
                        max_i = j;
                    }
                }
                result += grid[i][max_i];
                grid[i].remove(max_i);
                if grid[i].is_empty() {
                    max = i;
                }
            }
            grid.remove(max);
        }
        result
    }
}

=======

        let mut grid = grid;
        let mut max = 0;
        while !grid.is_empty() {
            let mut max_i = 0;
            for i in 0..grid.len() {
                let mut max_j = 0;
                for j in 0..grid[i].len() {
                    if grid[i][j] > grid[max_i][max_j] {
                        max_i = i;
                        max_j = j;
                    }
                }
                max += grid[max_i][max_j];
                grid[max_i].remove(max_j);
            }
            grid.retain(|v| !v.is_empty());
        }
        max
