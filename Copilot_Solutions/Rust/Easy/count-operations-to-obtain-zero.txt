Synthesizing 10/10 solutions

=======

        let (mut num1, mut num2) = (num1 as i64, num2 as i64);
        if num1 < num2 {
            std::mem::swap(&mut num1, &mut num2);
        }
        let mut count = 0;
        while num1 != 0 {
            count += num2 / num1;
            num2 %= num1;
            std::mem::swap(&mut num1, &mut num2);
        }
        count
    }
}

=======

        let (mut num1, mut num2) = (num1 as usize, num2 as usize);
        if num1 > num2 {
            std::mem::swap(&mut num1, &mut num2);
        }
        let mut count = 0;
        while num1 != 0 {
            let (q, r) = (num2 / num1, num2 % num1);
            num2 = num1;
            num1 = r;
            count += q as i32;
        }
        count + num2 as i32 - 1

=======

        let (mut a, mut b) = if num1 > num2 { (num1, num2) } else { (num2, num1) };
        let mut count = 0;
        while a > 0 {
            count += a / b;
            a %= b;
            if a < b { std::mem::swap(&mut a, &mut b); }
        }
        count

=======

        let (mut a, mut b) = if num1 > num2 { (num1, num2) } else { (num2, num1) };
        let mut count = 0;
        while b > 0 {
            let q = a / b;
            count += q;
            a -= q * b;
            std::mem::swap(&mut a, &mut b);
        }
        count

=======

        let mut a = num1;
        let mut b = num2;
        if a > b {
            std::mem::swap(&mut a, &mut b);
        }
        let mut count = 0;
        while a > 0 {
            count += b / a;
            b %= a;
            std::mem::swap(&mut a, &mut b);
        }
        count

=======

        let mut a = num1;
        let mut b = num2;
        let mut count = 0;
        if a < b {
            let temp = a;
            a = b;
            b = temp;
        }
        while b != 0 {
            let q = a / b;
            let r = a % b;
            count += q;
            a = b;
            b = r;
        }
        count

=======

        let (mut a, mut b) = (num1, num2);
        if a < b {
            std::mem::swap(&mut a, &mut b);
        }
        let mut ans = 0;
        loop {
            if a == 0 {
                break;
            }
            if b == 0 {
                ans += a;
                break;
            }
            let q = a / b;
            let r = a % b;
            ans += q;
            a = b;
            b = r;
        }
        ans

=======

        let (mut a, mut b) = (num1, num2);
        if b > a {
            std::mem::swap(&mut a, &mut b);
        }
        let mut res = 0;
        while a > 0 {
            res += b / a;
            b %= a;
            std::mem::swap(&mut a, &mut b);
        }
        res
    }
}

=======

        let mut n1 = num1;
        let mut n2 = num2;
        let mut count = 0;
        
        while n1 != 0 && n2 != 0 {
            if n1 > n2 {
                let tmp = n1;
                n1 = n2;
                n2 = tmp;
            }
            let mut tmp = n2 / n1;
            count += tmp;
            n2 -= n1 * tmp;
        }
        count

=======

        let mut m = num1;
        let mut n = num2;
        let mut count = 0;
        while m != 0 && n != 0 {
            if m >= n {
                count += m / n;
                m %= n;
            } else {
                count += n / m;
                n %= m;
            }
        }
        count
