Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let max = candies.iter().max().unwrap();
        candies.iter().map(|x| x + extra_candies >= *max).collect()
    }
}

=======

        let max = candies.iter().max().unwrap();
        candies.iter().map(|c| c + extra_candies >= *max).collect()
    }
}

=======

        let max = candies.iter().max().unwrap();
        candies.iter().map(|c| c + extra_candies >= *max).collect()

=======

        let max = candies.iter().max().unwrap();
        let mut result = Vec::new();
        for candy in candies {
            if candy + extra_candies >= *max {
                result.push(true);
            } else {
                result.push(false);
            }
        }
        result

=======

        let mut max = 0;
        for i in 0..candies.len() {
            if candies[i] > max {
                max = candies[i];
            }
        }
        let mut result = Vec::new();
        for i in 0..candies.len() {
            if candies[i] + extra_candies >= max {
                result.push(true);
            } else {
                result.push(false);
            }
        }
        result

=======

        let max = candies.iter().max().unwrap();
        let mut result = Vec::new();
        for candy in candies {
            result.push(candy + extra_candies >= *max);
        }
        result

=======

        let max = candies.iter().max().unwrap();
        let mut res = Vec::new();
        for i in candies {
            if i + extra_candies >= *max {
                res.push(true);
            } else {
                res.push(false);
            }
        }
        res
    }
}

=======

        let mut max = 0;
        for i in 0..candies.len() {
            if candies[i] > max {
                max = candies[i];
            }
        }
        let mut result = vec![false; candies.len()];
        for i in 0..candies.len() {
            if candies[i] + extra_candies >= max {
                result[i] = true;
            }
        }
        result
    }
}

=======

        let max = candies.iter().max().unwrap();
        let mut ret: Vec<bool> = vec![];
        for i in candies {
            ret.push(i + extra_candies >= *max);
        }
        ret
    }
}
