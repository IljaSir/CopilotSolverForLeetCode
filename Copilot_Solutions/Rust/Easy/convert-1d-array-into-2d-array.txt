Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let m = m as usize;
        let n = n as usize;
        if original.len() != m * n {
            return Vec::new();
        }
        let mut res = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                res[i][j] = original[i * n + j];
            }
        }
        res

=======

        let m = m as usize;
        let n = n as usize;
        let l = original.len();
        if m * n != l {
            return vec![];
        }
        let mut res = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                res[i][j] = original[i * n + j];
            }
        }
        res
    }
}

=======

        let mut res: Vec<Vec<i32>> = Vec::new();
        if m * n != original.len() as i32 {
            return res;
        }
        let mut row: Vec<i32> = Vec::new();
        for (i, v) in original.iter().enumerate() {
            row.push(*v);
            if (i + 1) % n as usize == 0 {
                res.push(row);
                row = Vec::new();
            }
        }
        res
    }
}

=======

        let m = m as usize;
        let n = n as usize;
        if original.len() != m * n {
            return Vec::new();
        }
        let mut result = Vec::new();
        let mut row = Vec::new();
        for (i, val) in original.iter().enumerate() {
            row.push(*val);
            if (i + 1) % n == 0 {
                result.push(row);
                row = Vec::new();
            }
        }
        result

=======

        
    }
}

=======

        let mut res = vec![vec![]];
        let mut m = m as usize;
        let mut n = n as usize;
        let mut i = 0;
        while i < original.len() {
            if res.last().unwrap().len() == n {
                res.push(vec![]);
            }
            res.last_mut().unwrap().push(original[i]);
            i += 1;
        }
        if res.len() == m {
            res
        } else {
            vec![]
        }
