Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut s = n.to_string();
        let mut i = s.len() - 3;
        while i > 0 {
            s.insert(i, '.');
            i -= 3;
        }
        s

=======

        let mut n = n.to_string();
        let mut i = n.len() - 3;
        while i > 0 {
            n.insert(i, '.');
            i -= 3;
        }
        n

=======

        let mut s = n.to_string();
        let mut i = s.len();
        while i > 3 {
            i -= 3;
            s.insert(i, '.');
        }
        s

=======

        let mut digits = Vec::new();
        let mut n = n;
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        let mut res = String::new();
        for i in (0..digits.len()).rev() {
            res.push((digits[i] + '0' as u8) as char);
            if (digits.len() - i) % 3 == 0 && i != 0 {
                res.push('.');
            }
        }
        res
    }
}

=======

        if n < 1000 {
            return n.to_string();
        }
        let mut v = Vec::new();
        let mut n = n;
        while n > 0 {
            v.push(n % 1000);
            n /= 1000;
        }
        let mut s = String::new();
        for i in (0..v.len()).rev() {
            if i < v.len() - 1 {
                s.push('.');
            }
            s.push_str(&format!("{:03}", v[i]));
        }
        s
    }
}

=======

        let mut result = String::from("");
        let mut n = n;
        let mut count = 0;
        while n > 0 {
            if count == 3 {
                result.push('.');
                count = 0;
            }
            result.push((n % 10 + '0' as i32) as u8 as char);
            n /= 10;
            count += 1;
        }
        if result.len() == 0 {
            return "0".to_string();
        }
        result.chars().rev().collect::<String>()

=======

        let mut s = String::from("");
        let mut n = n;
        let mut count = 0;
        while n > 0 {
            if count % 3 == 0 && count > 0 {
                s = ".".to_string() + &s;
            }
            s = (n % 10).to_string() + &s;
            n /= 10;
            count += 1;
        }
        s

=======

        let mut ret = String::new();
        let mut n = n;
        let mut i = 0;
        while n != 0 {
            if i % 3 == 0 && i != 0 {
                ret.push('.');
            }
            ret.push((n % 10 + '0' as i32) as u8 as char);
            n /= 10;
            i += 1;
        }
        ret.chars().rev().collect()
