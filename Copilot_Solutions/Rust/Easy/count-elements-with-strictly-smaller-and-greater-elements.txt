Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 0..nums.len() {
            let mut smaller = false;
            let mut greater = false;
            for j in 0..nums.len() {
                if nums[i] > nums[j] {
                    smaller = true;
                } else if nums[i] < nums[j] {
                    greater = true;
                }
            }
            if smaller && greater {
                count += 1;
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums.len() {
            let mut greater = false;
            let mut smaller = false;
            for j in 0..nums.len() {
                if nums[i] < nums[j] {
                    greater = true;
                }
                if nums[i] > nums[j] {
                    smaller = true;
                }
            }
            if smaller && greater {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            let mut greater = false;
            let mut smaller = false;
            for j in 0..nums.len() {
                if i != j {
                    if nums[i] < nums[j] {
                        greater = true;
                    } else if nums[i] > nums[j] {
                        smaller = true;
                    }
                }
            }
            if greater && smaller {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        for i in 1..nums.len()-1 {
            if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                count += 1;
            }
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        for i in 1..nums.len() - 1 {
            if nums[i - 1] < nums[i] && nums[i] < nums[i + 1] {
                res += 1;
            }
        }
        res

=======

        let mut count = 0;
        for i in 0..nums.len() {
            let mut less = false;
            let mut greater = false;
            for j in 0..nums.len() {
                if nums[i] > nums[j] {
                    less = true;
                } else if nums[i] < nums[j] {
                    greater = true;
                }
            }
            if less && greater {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            let mut smaller = false;
            let mut greater = false;
            for j in 0..nums.len() {
                if i == j {
                    continue;
                }
                if nums[i] > nums[j] {
                    smaller = true;
                } else if nums[i] < nums[j] {
                    greater = true;
                }
                if smaller && greater {
                    ans += 1;
                    break;
                }
            }
        }
        ans
    }
}

=======

        let mut cnt = 0;
        for i in 0..nums.len() {
            let mut smaller = false;
            let mut greater = false;
            for j in 0..nums.len() {
                if j == i {
                    continue;
                }
                if nums[j] < nums[i] {
                    smaller = true;
                } else if nums[j] > nums[i] {
                    greater = true;
                }
                if smaller && greater {
                    cnt += 1;
                    break;
                }
            }
        }
        cnt
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            let mut less = false;
            let mut greater = false;
            for j in 0..nums.len() {
                if i == j {
                    continue;
                }
                if nums[i] > nums[j] {
                    less = true;
                } else if nums[i] < nums[j] {
                    greater = true;
                }
            }
            if less && greater {
                ans += 1;
            }
        }
        ans

=======

        let mut count = 0;
        let mut set = std::collections::HashSet::new();
        for i in 0..nums.len() {
            set.insert(nums[i]);
        }
        for i in 0..nums.len() {
            if set.contains(&(nums[i] - 1)) && set.contains(&(nums[i] + 1)) {
                count += 1;
            }
        }
        count
    }
}
