Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut max1 = std::i32::MIN;
        let mut max2 = std::i32::MIN;
        let mut max3 = std::i32::MIN;
        let mut min1 = std::i32::MAX;
        let mut min2 = std::i32::MAX;
        
        for n in nums {
            if n > max1 {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if n > max2 {
                max3 = max2;
                max2 = n;
            } else if n > max3 {
                max3 = n;
            }
            
            if n < min1 {
                min2 = min1;
                min1 = n;
            } else if n < min2 {
                min2 = n;
            }
        }
        
        std::cmp::max(max1 * max2 * max3, max1 * min1 * min2)

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let a = nums[n - 1] * nums[n - 2] * nums[n - 3];
        let b = nums[0] * nums[1] * nums[n - 1];
        if a > b {
            a
        } else {
            b
        }

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let a = nums[n - 1] * nums[n - 2] * nums[n - 3];
        let b = nums[n - 1] * nums[0] * nums[1];
        a.max(b)

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let max1 = nums[n - 1] * nums[n - 2] * nums[n - 3];
        let max2 = nums[0] * nums[1] * nums[n - 1];
        if max1 > max2 {
            max1
        } else {
            max2
        }

=======

        let mut nums = nums;
        nums.sort();
        let len = nums.len();
        let a = nums[len - 1] * nums[len - 2] * nums[len - 3];
        let b = nums[len - 1] * nums[0] * nums[1];
        if a > b {
            a
        } else {
            b
        }

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let x = nums[n - 1] * nums[n - 2] * nums[n - 3];
        let y = nums[0] * nums[1] * nums[n - 1];
        if x > y {
            x
        } else {
            y
        }

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = nums[n - 1] * nums[n - 2] * nums[n - 3];
        ans = ans.max(nums[0] * nums[1] * nums[n - 1]);
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut max = nums[n - 1] * nums[n - 2] * nums[n - 3];
        if nums[0] < 0 && nums[1] < 0 {
            max = max.max(nums[0] * nums[1] * nums[n - 1]);
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = std::i32::MIN;
        ans = ans.max(nums[0] * nums[1] * nums[n - 1]);
        ans = ans.max(nums[n - 1] * nums[n - 2] * nums[n - 3]);
        ans
