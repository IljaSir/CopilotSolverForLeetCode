Synthesizing 10/10 solutions

=======

        let mut i = 1;
        let mut j = 0;
        let mut k = k;
        while k > 0 {
            if j < arr.len() && arr[j] == i {
                j += 1;
            } else {
                k -= 1;
            }
            i += 1;
        }
        i - 1

=======

        let mut k = k;
        let mut i = 1;
        let mut j = 0;
        while k > 0 {
            if j < arr.len() && arr[j] == i {
                j += 1;
            } else {
                k -= 1;
            }
            i += 1;
        }
        i - 1

=======

        let mut missing = 0;
        let mut j = 1;
        for i in 0..arr.len() {
            while j < arr[i] {
                missing += 1;
                if missing == k {
                    return j;
                }
                j += 1;
            }
            j += 1;
        }
        while missing < k {
            missing += 1;
            j += 1;
        }
        j - 1

=======

        let mut i = 0;
        let mut j = 1;
        let mut k = k;
        while i < arr.len() {
            if arr[i] == j {
                i += 1;
            } else {
                k -= 1;
                if k == 0 {
                    return j;
                }
            }
            j += 1;
        }
        j + k - 1

=======

        let mut i = 1;
        let mut k = k;
        for x in arr {
            while i < x {
                k -= 1;
                if k == 0 {
                    return i;
                }
                i += 1;
            }
            i += 1;
        }
        while k > 0 {
            k -= 1;
            i += 1;
        }
        i - 1

=======

        let mut i = 0;
        let mut k = k;
        let mut n = 1;
        while k > 0 {
            if i < arr.len() && arr[i] == n {
                i += 1;
            } else {
                k -= 1;
            }
            n += 1;
        }
        n - 1

=======

        let mut i = 0;
        let mut j = 0;
        let mut k = k;
        while i < arr.len() {
            if arr[i] == j + 1 {
                i += 1;
            } else {
                k -= 1;
            }
            j += 1;
            if k == 0 {
                return j;
            }
        }
        j + k
    }
}

=======

        let mut missing = 0;
        let mut j = 0;
        let mut i = 1;
        while j < arr.len() && missing < k {
            if arr[j] == i {
                j += 1;
            } else {
                missing += 1;
            }
            i += 1;
        }
        if missing < k {
            missing += 1;
            i += 1;
        }
        i - 1
    }
}

=======

        let mut missing = 0;
        let mut last = 0;
        for &n in arr.iter() {
            missing += n - last - 1;
            if missing >= k {
                return last + k;
            }
            last = n;
        }
        last + k - missing

=======

        let mut k = k;
        let mut expect = 1;
        for num in arr {
            while expect < num {
                if k == 1 {
                    return expect;
                }
                expect += 1;
                k -= 1;
            }
            expect += 1;
        }
        while k > 0 {
            expect += 1;
            k -= 1;
        }
        expect - 1
    }
}
