Synthesizing 10/10 solutions

=======

        let mut stack = Vec::new();
        let mut result = String::new();
        for c in s.chars() {
            if c == '(' {
                if !stack.is_empty() {
                    result.push(c);
                }
                stack.push(c);
            } else if c == ')' {
                stack.pop();
                if !stack.is_empty() {
                    result.push(c);
                }
            }
        }
        result

=======

        let mut res = String::new();
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                count += 1;
                if count > 1 {
                    res.push(c);
                }
            } else if c == ')' {
                if count > 1 {
                    res.push(c);
                }
                count -= 1;
            }
        }
        res
    }
}

=======

        let mut stack = vec![];
        let mut res = String::new();
        for c in s.chars() {
            if c == '(' {
                if !stack.is_empty() {
                    res.push(c);
                }
                stack.push(c);
            } else {
                stack.pop();
                if !stack.is_empty() {
                    res.push(c);
                }
            }
        }
        res
    }
}

=======

        let mut ans = String::new();
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                if count > 0 {
                    ans.push(c);
                }
                count += 1;
            } else {
                count -= 1;
                if count > 0 {
                    ans.push(c);
                }
            }
        }
        ans

=======

        let mut res = String::new();
        let mut stack = 0;
        for c in s.chars() {
            if c == '(' {
                if stack > 0 {
                    res.push(c);
                }
                stack += 1;
            } else {
                if stack > 1 {
                    res.push(c);
                }
                stack -= 1;
            }
        }
        res

=======

        let mut ret = String::new();
        let mut depth = 0;
        for c in s.chars() {
            if c == '(' {
                if depth > 0 {
                    ret.push(c);
                }
                depth += 1;
            } else {
                depth -= 1;
                if depth > 0 {
                    ret.push(c);
                }
            }
        }
        ret
    }
}

=======

        let mut result = String::new();
        let mut stack = vec![];
        for c in s.chars() {
            if c == '(' {
                if !stack.is_empty() {
                    result.push(c);
                }
                stack.push(c);
            } else if c == ')' {
                if stack.len() > 1 {
                    result.push(c);
                }
                stack.pop();
            }
        }
        result
    }
}

=======

        let mut stack = Vec::new();
        let mut ret = String::new();
        for c in s.chars() {
            match c {
                '(' => {
                    stack.push(c);
                    if stack.len() > 1 {
                        ret.push(c);
                    }
                }
                ')' => {
                    stack.pop();
                    if !stack.is_empty() {
                        ret.push(c);
                    }
                }
                _ => {}
            }
        }
        ret
    }
}

=======

        let mut result = String::new();
        let mut count = 0;
        for i in s.chars() {
            match i {
                '(' => {
                    if count > 0 {
                        result.push(i);
                    }
                    count += 1;
                },
                ')' => {
                    if count > 1 {
                        result.push(i);
                    }
                    count -= 1;
                },
                _ => (),
            }
        }
        result
    }
}

=======

        let mut stack = Vec::new();
        let mut ans = String::new();
        let mut idx = 0;
        for ch in s.chars() {
            if ch == '(' {
                stack.push(idx);
            } else {
                let start = stack.pop().unwrap();
                if stack.is_empty() {
                    ans.push_str(&s[start+1..idx]);
                }
            }
            idx += 1;
        }
        ans
