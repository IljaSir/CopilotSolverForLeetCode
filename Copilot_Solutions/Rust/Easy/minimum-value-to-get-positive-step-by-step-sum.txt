Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut sum = 0;
        let mut min = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if sum < min {
                min = sum;
            }
        }
        if min < 0 {
            return 1 - min;
        }
        1

=======

        let mut sum = 0;
        let mut min = 0;
        for n in nums {
            sum += n;
            if sum < min {
                min = sum;
            }
        }
        1 - min
    }
}

=======

        let mut min = 0;
        let mut sum = 0;
        for i in nums {
            sum += i;
            if sum < min {
                min = sum;
            }
        }
        1 - min
    }
}

=======

        let mut sum = 0;
        let mut min = 0;
        for n in nums {
            sum += n;
            min = min.min(sum);
        }
        1 - min

=======

        let mut min = 0;
        let mut sum = 0;
        for i in nums {
            sum += i;
            if sum < min {
                min = sum;
            }
        }
        return 1 - min;

=======

        let mut min = 0;
        let mut sum = 0;
        for num in nums {
            sum += num;
            min = std::cmp::min(min, sum);
        }
        1 - min

=======

        let mut min = 0;
        let mut sum = 0;
        for i in nums {
            sum += i;
            if sum < min {
                min = sum;
            }
        }
        -min+1

=======

        let mut sum = 0;
        let mut min = 0;
        for i in 0..nums.len(){
            sum += nums[i];
            if sum < min{
                min = sum;
            }
        }
        1 - min
    }
}
