Synthesizing 10/10 solutions

=======

        let mut min = std::i32::MAX;
        let mut res = -1;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let d = (x - p[0]).abs() + (y - p[1]).abs();
                if d < min {
                    min = d;
                    res = i as i32;
                }
            }
        }
        res

=======

        let mut res = -1;
        let mut min = std::i32::MAX;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let dist = (p[0] - x).abs() + (p[1] - y).abs();
                if dist < min {
                    min = dist;
                    res = i as i32;
                }
            }
        }
        res

=======

        let mut ans = -1;
        let mut min = std::i32::MAX;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let d = (p[0] - x).abs() + (p[1] - y).abs();
                if d < min {
                    ans = i as i32;
                    min = d;
                }
            }
        }
        ans

=======

        let mut valid_points = Vec::new();
        for i in 0..points.len() {
            if points[i][0] == x || points[i][1] == y {
                valid_points.push(points[i].clone());
            }
        }
        if valid_points.is_empty() {
            return -1;
        }
        let mut min = 10000;
        let mut index = 0;
        for i in 0..valid_points.len() {
            let distance = (valid_points[i][0] - x).abs() + (valid_points[i][1] - y).abs();
            if distance < min {
                min = distance;
                index = i;
            }
        }
        index as i32

=======

        let mut min = std::i32::MAX;
        let mut min_i = -1;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let dist = (p[0] - x).abs() + (p[1] - y).abs();
                if min > dist {
                    min = dist;
                    min_i = i as i32;
                }
            }
        }
        min_i
    }
}

=======

        let mut min = std::i32::MAX;
        let mut min_idx = -1;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let d = (p[0] - x).abs() + (p[1] - y).abs();
                if d < min {
                    min = d;
                    min_idx = i as i32;
                }
            }
        }
        min_idx

=======

        let mut min = 10001;
        let mut res = -1;
        for (i, p) in points.iter().enumerate() {
            if p[0] == x || p[1] == y {
                let d = (p[0] - x).abs() + (p[1] - y).abs();
                if d < min {
                    min = d;
                    res = i as i32;
                }
            }
        }
        res

=======

        let mut min = std::i32::MAX;
        let mut idx = -1;
        for (i, p) in points.iter().enumerate() {
            let dx = (x - p[0]).abs();
            let dy = (y - p[1]).abs();
            if dx == 0 || dy == 0 {
                let d = dx + dy;
                if d < min {
                    min = d;
                    idx = i as i32;
                }
            }
        }
        idx

=======

        let mut min = -1;
        let mut min_index = -1;
        for i in 0..points.len() {
            let p = &points[i];
            if x == p[0] || y == p[1] {
                let d = (x - p[0]).abs() + (y - p[1]).abs();
                if min == -1 || d < min {
                    min = d;
                    min_index = i as i32;
                }
            }
        }
        min_index
    }
}

=======

        let mut res = -1;
        let mut mn = 1 << 30;
        for i in 0..points.len() {
            let (a, b) = (points[i][0], points[i][1]);
            if a != x && b != y {
                continue;
            }
            let dist = (a - x).abs() + (b - y).abs();
            if dist < mn || (dist == mn && i < res as usize) {
                mn = dist;
                res = i as i32;
            }
        }
        res
