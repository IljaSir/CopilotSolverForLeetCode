Synthesizing 10/10 solutions

=======

        let k = k as usize;
        let mut nums = nums;
        nums.sort();
        let mut ans = std::i32::MAX;
        for i in 0..nums.len() - k + 1 {
            ans = ans.min(nums[i + k - 1] - nums[i]);
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = i32::MAX;
        for i in 0..nums.len() - k as usize + 1 {
            res = res.min(nums[i + k as usize - 1] - nums[i]);
        }
        res
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut min = std::i32::MAX;
        for i in 0..nums.len() - k as usize + 1 {
            min = min.min(nums[i + k as usize - 1] - nums[i]);
        }
        min

=======

        let k = k as usize;
        let mut nums = nums;
        nums.sort();
        nums.windows(k).map(|w| w.last().unwrap() - w.first().unwrap()).min().unwrap()

=======

        let mut nums = nums;
        nums.sort();
        let k = k as usize;
        let mut res = std::i32::MAX;
        for i in 0..nums.len()-k+1 {
            res = res.min(nums[i+k-1] - nums[i]);
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut res = std::i32::MAX;
        for i in 0..nums.len()-(k as usize)+1 {
            res = res.min(nums[i+(k as usize)-1] - nums[i]);
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let k = k as usize;
        let mut min = i32::MAX;
        for i in 0..(nums.len() - k + 1) {
            let diff = nums[i + k - 1] - nums[i];
            if diff < min {
                min = diff;
            }
        }
        min

=======

        let mut nums = nums;
        nums.sort_unstable();
        let k = k as usize;
        let mut ans = i32::MAX;
        for i in 0..nums.len() - k + 1 {
            ans = ans.min(nums[i + k - 1] - nums[i]);
        }
        ans

=======

        let mut nums = nums;
        let k = k as usize;
        nums.sort();
        let mut min = std::i32::MAX;
        for i in 0..=(nums.len() - k) {
            min = min.min(nums[i + k - 1] - nums[i]);
        }
        min

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut min = std::i32::MAX;
        for i in 0..nums.len() - k as usize + 1 {
            let diff = nums[i + k as usize - 1] - nums[i];
            if diff < min {
                min = diff;
            }
        }
        min
