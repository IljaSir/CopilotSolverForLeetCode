Synthesizing 10/10 solutions

=======

        use std::collections::HashSet;
        let mut set = HashSet::new();
        for email in emails {
            let mut parts = email.split('@');
            let local = parts.next().unwrap();
            let domain = parts.next().unwrap();
            let mut local = local.replace(".", "");
            if let Some(idx) = local.find('+') {
                local = local[..idx].to_string();
            }
            set.insert(format!("{}@{}", local, domain));
        }
        set.len() as i32
    }
}

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut parts = email.split('@');
            let local = parts.next().unwrap();
            let domain = parts.next().unwrap();
            let local = local.split('+').next().unwrap().replace(".", "");
            set.insert(format!("{}@{}", local, domain));
        }
        set.len() as i32

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut parts = email.split('@');
            let local = parts.next().unwrap();
            let domain = parts.next().unwrap();
            let mut local = local.replace(".", "");
            if let Some(idx) = local.find('+') {
                local = local[..idx].to_string();
            }
            set.insert(format!("{}@{}", local, domain));
        }
        set.len() as i32

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut iter = email.split('@');
            let local = iter.next().unwrap();
            let domain = iter.next().unwrap();
            let mut local = local.replace(".", "");
            let plus = local.find('+').unwrap_or(local.len());
            local.truncate(plus);
            set.insert(local + "@" + domain);
        }
        set.len() as i32

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut iter = email.split('@');
            let local = iter.next().unwrap();
            let domain = iter.next().unwrap();
            let mut local = local.split('+').next().unwrap();
            local = local.split('.').collect::<Vec<&str>>().join("").as_str();
            set.insert(format!("{}@{}", local, domain));
        }
        set.len() as i32

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut iter = email.split('@');
            let mut local = iter.next().unwrap().to_string();
            let domain = iter.next().unwrap().to_string();
            local = local.split('+').next().unwrap().to_string();
            local = local.replace(".", "");
            let new_email = local + "@" + &domain;
            set.insert(new_email);
        }
        set.len() as i32

=======

        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut s = String::new();
            let mut plus = false;
            let mut at = false;
            for c in email.chars() {
                if c == '@' {
                    at = true;
                }
                if at {
                    s.push(c);
                } else {
                    if c == '+' {
                        plus = true;
                    } else if c == '.' {
                        continue;
                    } else {
                        if plus {
                            continue;
                        } else {
                            s.push(c);
                        }
                    }
                }
            }
            set.insert(s);
        }
        set.len() as i32

=======

        let mut result = 0;
        let mut set = std::collections::HashSet::new();
        for email in emails {
            let mut parts = email.split("@");
            let mut local_name = parts.next().unwrap().to_string();
            let domain_name = parts.next().unwrap().to_string();
            local_name = local_name.replace(".", "");
            local_name = local_name.split("+").next().unwrap().to_string();
            let mut email = local_name;
            email.push('@');
            email.push_str(&domain_name);
            if set.insert(email) {
                result += 1;
            }
        }
        result
    }
}

=======

        let mut result = std::collections::HashSet::new();
        for email in emails {
            let email: Vec<_> = email.split('@').collect();
            let local_name = email[0].replace(".", "");
            let local_name: Vec<_> = local_name.split('+').collect();
            let local_name = local_name[0];
            let domain_name = email[1];
            let address = format!("{}@{}", local_name, domain_name);
            result.insert(address);
        }
        result.len() as i32
    }
}

=======

        let mut v = Vec::new();
        for i in emails {
            let mut s = String::new();
            let mut flag = false;
            for j in i.chars() {
                if j == '@' {
                    flag = true;
                }
                if j == '+' {
                    flag = true;
                }
                if flag {
                    s.push(j);
                    continue;
                }
                if j == '.' {
                    continue;
                }
                s.push(j);
            }
            v.push(s);
        }
        v.sort();
        v.dedup();
        v.len() as i32
    }
}
