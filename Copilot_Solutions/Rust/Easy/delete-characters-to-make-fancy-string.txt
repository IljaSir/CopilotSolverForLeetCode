Synthesizing 10/10 solutions

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        let mut j = 0;
        while j < s.len() {
            s[i] = s[j];
            i += 1;
            j += 1;
            while j < s.len() && s[j] == s[i - 1] {
                j += 1;
            }
            if j < s.len() && s[j] == s[i - 1] {
                s[i] = s[j];
                i += 1;
                j += 1;
            }
        }
        unsafe { String::from_utf8_unchecked(s[..i].to_vec()) }
    }
}

=======

        let mut res = String::new();
        let mut count = 0;
        let mut last = ' ';
        for c in s.chars() {
            if c != last {
                last = c;
                count = 1;
                res.push(c);
            } else if count < 2 {
                count += 1;
                res.push(c);
            }
        }
        res

=======

        let mut res = String::new();
        let mut count = 0;
        let mut last_char = ' ';
        for c in s.chars() {
            if c == last_char {
                count += 1;
            } else {
                last_char = c;
                count = 1;
            }
            if count < 3 {
                res.push(c);
            }
        }
        res
    }
}

=======

        let mut result = String::new();
        let mut last = ' ';
        let mut count = 0;
        for c in s.chars() {
            if c == last {
                count += 1;
                if count == 3 {
                    continue;
                }
            } else {
                last = c;
                count = 1;
            }
            result.push(c);
        }
        result

=======

        let mut ret = String::new();
        let mut count = 0;
        let mut prev = ' ';
        for c in s.chars() {
            if c == prev {
                count += 1;
                if count < 3 {
                    ret.push(c);
                }
            } else {
                count = 1;
                ret.push(c);
            }
            prev = c;
        }
        ret
    }
}

=======

        let mut res = String::new();
        let mut count = 1;
        let mut prev = ' ';
        for c in s.chars() {
            if c == prev {
                count += 1;
                if count < 3 {
                    res.push(c);
                }
            } else {
                count = 1;
                res.push(c);
            }
            prev = c;
        }
        res

=======

        let mut res = String::new();
        let mut count = 1;
        let mut last = None;
        for c in s.chars() {
            if last == Some(c) {
                count += 1;
                if count <= 2 {
                    res.push(c);
                }
            } else {
                last = Some(c);
                count = 1;
                res.push(c);
            }
        }
        res

=======

        let mut res = Vec::new();
        let mut count = 0;
        let mut last = '\0';
        for c in s.chars() {
            if c == last {
                count += 1;
                if count == 3 {
                    continue;
                }
            } else {
                last = c;
                count = 1;
            }
            res.push(c);
        }
        res.into_iter().collect()

=======

        let mut res = String::new();
        let mut c = 0;
        let mut last = '\0';
        for ch in s.chars() {
            if ch == last {
                c += 1;
                if c < 3 {
                    res.push(ch);
                }
            } else {
                c = 1;
                res.push(ch);
            }
            last = ch;
        }
        res
    }
}

=======

        let mut ret = String::new();
        let mut count = 0;
        let mut prev = 0;
        for c in s.chars() {
            let c = c as u8 - 'a' as u8;
            if prev == c {
                count += 1;
                if count < 3 {
                    ret.push(c as char + 'a' as char);
                }
            } else {
                count = 1;
                ret.push(c as char + 'a' as char);
            }
            prev = c;
        }
        ret
