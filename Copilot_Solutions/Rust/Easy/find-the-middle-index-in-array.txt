Synthesizing 10/10 solutions

=======

        let mut left_sum = 0;
        let mut right_sum = nums.iter().sum();
        for i in 0..nums.len() {
            right_sum -= nums[i];
            if left_sum == right_sum {
                return i as i32;
            }
            left_sum += nums[i];
        }
        -1
    }
}

=======

        let mut left_sum = 0;
        let mut right_sum = nums.iter().sum::<i32>();
        for i in 0..nums.len() {
            right_sum -= nums[i];
            if left_sum == right_sum {
                return i as i32;
            }
            left_sum += nums[i];
        }
        -1

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut left_sum = 0;
        for i in 0..nums.len() {
            if left_sum == sum - left_sum - nums[i] {
                return i as i32;
            }
            left_sum += nums[i];
        }
        -1

=======

        let mut left = 0;
        let mut right = nums.iter().sum::<i32>();
        for (i, n) in nums.iter().enumerate() {
            right -= n;
            if left == right {
                return i as i32;
            }
            left += n;
        }
        -1
    }
}

=======

        let n = nums.len();
        let mut sum = 0;
        for i in 0..n {
            sum += nums[i];
        }
        let mut left = 0;
        for i in 0..n {
            if left == sum - left - nums[i] {
                return i as i32;
            }
            left += nums[i];
        }
        -1
    }
}

=======

        let mut left = 0;
        let mut right = nums.iter().sum();
        for (i, &num) in nums.iter().enumerate() {
            right -= num;
            if left == right {
                return i as i32;
            }
            left += num;
        }
        return -1;

=======

        let mut left_sum = 0;
        let mut right_sum = nums.iter().sum();
        for (index, num) in nums.iter().enumerate() {
            right_sum -= num;
            if left_sum == right_sum {
                return index as i32;
            }
            left_sum += num;
        }
        -1

=======

        let mut sum = 0;
        for num in nums.iter() {
            sum += num;
        }
        let mut left = 0;
        for i in 0..nums.len() {
            if left == sum - left - nums[i] {
                return i as i32;
            }
            left += nums[i];
        }
        -1

=======

        let mut sum = nums.iter().sum::<i32>();
        let mut left_sum = 0;
        for (i, &num) in nums.iter().enumerate() {
            if left_sum == sum - left_sum - num {
                return i as i32;
            }
            left_sum += num;
        }
        -1

=======

        let mut left = 0;
        let mut right = nums.iter().sum::<i32>();
        for i in 0..nums.len() {
            let cur = nums[i];
            right -= cur;
            if left == right {
                return i as i32;
            }
            left += cur;
        }
        -1
    }
}
