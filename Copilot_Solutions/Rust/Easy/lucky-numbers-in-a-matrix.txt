Synthesizing 10/10 solutions

=======

        let mut min_row = vec![std::i32::MAX; matrix.len()];
        let mut max_col = vec![std::i32::MIN; matrix[0].len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                min_row[i] = std::cmp::min(min_row[i], matrix[i][j]);
                max_col[j] = std::cmp::max(max_col[j], matrix[i][j]);
            }
        }
        let mut res = vec![];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if matrix[i][j] == min_row[i] && matrix[i][j] == max_col[j] {
                    res.push(matrix[i][j]);
                }
            }
        }
        res
    }
}

=======

        let mut min = vec![i32::MAX; matrix[0].len()];
        let mut max = vec![i32::MIN; matrix.len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                min[j] = min[j].min(matrix[i][j]);
                max[i] = max[i].max(matrix[i][j]);
            }
        }
        let mut ans = vec![];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if min[j] == max[i] {
                    ans.push(min[j]);
                }
            }
        }
        ans

=======

        let mut res = vec![];
        for i in 0..matrix.len() {
            let mut min = matrix[i][0];
            let mut min_idx = 0;
            for j in 1..matrix[i].len() {
                if matrix[i][j] < min {
                    min = matrix[i][j];
                    min_idx = j;
                }
            }
            let mut max = matrix[0][min_idx];
            for k in 0..matrix.len() {
                if matrix[k][min_idx] > max {
                    max = matrix[k][min_idx];
                }
            }
            if max == min {
                res.push(max);
            }
        }
        res

=======

        let mut result: Vec<i32> = Vec::new();
        for i in 0..matrix.len() {
            let mut min = i32::MAX;
            let mut min_index = 0;
            for j in 0..matrix[i].len() {
                if matrix[i][j] < min {
                    min = matrix[i][j];
                    min_index = j;
                }
            }
            let mut max = i32::MIN;
            for k in 0..matrix.len() {
                if matrix[k][min_index] > max {
                    max = matrix[k][min_index];
                }
            }
            if max == min {
                result.push(max);
            }
        }
        result
    }
}

=======

        let mut result = Vec::new();
        for row in 0..matrix.len() {
            let mut min = matrix[row][0];
            let mut min_index = 0;
            for col in 1..matrix[row].len() {
                if matrix[row][col] < min {
                    min = matrix[row][col];
                    min_index = col;
                }
            }
            let mut max = matrix[0][min_index];
            for row2 in 1..matrix.len() {
                if matrix[row2][min_index] > max {
                    max = matrix[row2][min_index];
                }
            }
            if max == min {
                result.push(max);
            }
        }
        result
    }
}

=======

        let mut res = vec![];
        let m = matrix.len();
        let n = matrix[0].len();
        let mut min_row = vec![std::i32::MAX; n];
        let mut max_col = vec![std::i32::MIN; m];
        for i in 0..m {
            for j in 0..n {
                min_row[j] = min_row[j].min(matrix[i][j]);
                max_col[i] = max_col[i].max(matrix[i][j]);
            }
        }
        for i in 0..m {
            for j in 0..n {
                if matrix[i][j] == min_row[j] && matrix[i][j] == max_col[i] {
                    res.push(matrix[i][j]);
                }
            }
        }
        res
    }
}

=======

        let (mut min, mut max) = (vec![i32::max_value(); matrix.len()], vec![i32::min_value(); matrix[0].len()]);
        for i in 0..matrix.len() {
            for j in 0..matrix[i].len() {
                min[i] = min[i].min(matrix[i][j]);
                max[j] = max[j].max(matrix[i][j]);
            }
        }
        let mut res = vec![];
        for i in 0..matrix.len() {
            for j in 0..matrix[i].len() {
                if matrix[i][j] == min[i] && matrix[i][j] == max[j] {
                    res.push(matrix[i][j]);
                }
            }
        }
        res
    }
}

=======

        let mut ret: Vec<i32> = Vec::new();
        let mut row_min: Vec<i32> = Vec::new();
        let mut col_max: Vec<i32> = Vec::new();
        for row in &matrix {
            row_min.push(row.iter().min().unwrap().to_owned());
        }
        for col in 0..matrix[0].len() {
            let mut max = matrix[0][col];
            for row in 1..matrix.len() {
                if matrix[row][col] > max {
                    max = matrix[row][col];
                }
            }
            col_max.push(max);
        }
        for i in 0..row_min.len() {
            if col_max.contains(&row_min[i]) {
                ret.push(row_min[i]);
            }
        }
        ret
    }
}

=======

        let mut min = Vec::new();
        for i in 0..matrix.len() {
            let mut min_index = 0;
            for j in 1..matrix[i].len() {
                if matrix[i][j] < matrix[i][min_index] {
                    min_index = j;
                }
            }
            min.push((i, min_index));
        }
        let mut result = Vec::new();
        for (i, j) in min {
            let mut max = matrix[i][j];
            for k in 0..matrix.len() {
                if matrix[k][j] > max {
                    max = matrix[k][j];
                }
            }
            if max == matrix[i][j] {
                result.push(max);
            }
        }
        result

=======

        let mut ret = Vec::new();
        for i in 0..matrix.len() {
            let mut min = 100000;
            let mut min_idx = 0;
            for j in 0..matrix[i].len() {
                if matrix[i][j] < min {
                    min = matrix[i][j];
                    min_idx = j;
                }
            }
            let mut max = 0;
            for j in 0..matrix.len() {
                if matrix[j][min_idx] > max {
                    max = matrix[j][min_idx];
                }
            }
            if min == max {
                ret.push(min);
            }
        }
        ret
