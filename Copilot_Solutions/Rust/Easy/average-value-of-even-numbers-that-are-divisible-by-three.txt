Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut sum = 0;
        let mut count = 0;
        for num in nums {
            if num % 2 == 0 && num % 3 == 0 {
                sum += num;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        sum / count
    }
}

=======

        let mut sum = 0;
        let mut count = 0;
        for num in nums {
            if num % 2 == 0 && num % 3 == 0 {
                sum += num;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        sum / count

=======

        let mut sum = 0;
        let mut count = 0;
        for num in nums {
            if num % 2 == 0 && num % 3 == 0 {
                sum += num;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        return sum / count;

=======

        let mut sum = 0;
        let mut count = 0;
        for i in nums {
            if i % 2 == 0 && i % 3 == 0 {
                sum += i;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        return sum / count;
    }
}

=======

        let mut sum = 0;
        let mut count = 0;
        for i in nums {
            if i % 2 == 0 && i % 3 == 0 {
                sum += i;
                count += 1;
            }
        }
        if count > 0 {
            sum / count
        } else {
            0
        }

=======

        let mut sum = 0;
        let mut count = 0;
        for i in nums {
            if i % 2 == 0 && i % 3 == 0 {
                sum += i;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        return sum / count;

=======

        let mut sum = 0;
        let mut count = 0;
        for i in nums {
            if i % 2 == 0 && i % 3 == 0 {
                sum += i;
                count += 1;
            }
        }
        if count == 0 {
            return 0;
        }
        sum / count
