Synthesizing 10/10 solutions

=======

        let s: Vec<char> = s.chars().collect();
        let t: Vec<char> = t.chars().collect();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                i += 1;
            }
            j += 1;
        }
        i == s.len()

=======

        let (s, t) = (s.into_bytes(), t.into_bytes());
        let (mut i, mut j) = (0, 0);
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                i += 1;
            }
            j += 1;
        }
        i == s.len()

=======

        let s = s.chars().collect::<Vec<_>>();
        let t = t.chars().collect::<Vec<_>>();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                i += 1;
            }
            j += 1;
        }
        i == s.len()

=======

        let n = s.len();
        let m = t.len();
        let mut i = 0;
        let mut j = 0;
        while i < n && j < m {
            if s.as_bytes()[i] == t.as_bytes()[j] {
                i += 1;
            }
            j += 1;
        }
        i == n

=======

        if s.is_empty() {
            return true;
        }
        let mut i = 0;
        for ch in t.chars() {
            if ch == s.chars().nth(i).unwrap() {
                i += 1;
                if i == s.len() {
                    return true;
                }
            }
        }
        false

=======

        let mut s = s.chars();
        for c in t.chars() {
            if let Some(sc) = s.next() {
                if sc != c {
                    return false;
                }
            }
        }
        s.next().is_none()

=======

        let mut s = s.chars();
        let mut t = t.chars();
        let mut s_next = s.next();
        let mut t_next = t.next();
        while s_next.is_some() && t_next.is_some() {
            if s_next == t_next {
                s_next = s.next();
            }
            t_next = t.next();
        }
        s_next.is_none()

=======

        let mut s = s.chars();
        let mut t = t.chars();
        let mut c = s.next();
        while let Some(x) = t.next() {
            if Some(x) == c {
                c = s.next();
            }
        }
        c == None

=======

        let mut s = s.chars();
        let mut t = t.chars();
        let mut c = s.next();
        while let Some(a) = t.next() {
            if Some(a) == c {
                c = s.next();
            }
        }
        c.is_none()

=======

        let mut s = s.chars();
        let mut t = t.chars();
        loop {
            match s.next() {
                Some(c) => {
                    let mut matched = false;
                    loop {
                        match t.next() {
                            Some(d) => {
                                if c == d {
                                    matched = true;
                                    break;
                                }
                            }
                            None => {
                                return false;
                            }
                        }
                    }
                    if !matched {
                        return false;
                    }
                }
                None => {
                    return true;
                }
            }
        }
    }
}
