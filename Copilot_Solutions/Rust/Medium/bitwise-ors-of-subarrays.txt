Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut res = std::collections::HashSet::new();
        let mut cur = std::collections::HashSet::new();
        cur.insert(0);
        for &x in &arr {
            let mut cur2 = std::collections::HashSet::new();
            cur2.insert(x);
            for &y in &cur {
                cur2.insert(x | y);
            }
            res.extend(cur2.iter());
            cur = cur2;
        }
        res.len() as i32
    }
}

=======

        let mut res = std::collections::HashSet::new();
        let mut cur = std::collections::HashSet::new();
        for &x in arr.iter() {
            let mut nxt = std::collections::HashSet::new();
            nxt.insert(x);
            for &y in cur.iter() {
                nxt.insert(x | y);
            }
            cur = nxt;
            res.extend(cur.iter());
        }
        res.len() as i32
    }
}

=======

        let mut set = std::collections::HashSet::new();
        let mut cur = std::collections::HashSet::new();
        for &x in arr.iter() {
            let mut tmp = std::collections::HashSet::new();
            tmp.insert(x);
            for &y in cur.iter() {
                tmp.insert(x | y);
            }
            cur = tmp;
            set.extend(cur.iter());
        }
        set.len() as i32
    }
}

=======

        let mut s = std::collections::HashSet::new();
        let mut cur = std::collections::HashSet::new();
        for &x in arr.iter() {
            let mut next = std::collections::HashSet::new();
            next.insert(x);
            for &y in cur.iter() {
                next.insert(x | y);
            }
            cur = next;
            for &y in cur.iter() {
                s.insert(y);
            }
        }
        s.len() as i32
    }
}
