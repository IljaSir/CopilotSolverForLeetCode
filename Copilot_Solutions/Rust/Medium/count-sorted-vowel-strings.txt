Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![1; 5];
        for _ in 1..n {
            for i in 1..5 {
                dp[i] += dp[i - 1];
            }
        }
        dp.iter().sum()

=======

        let mut dp = vec![1; 5];
        for _ in 1..n {
            for i in (1..5).rev() {
                dp[i] += dp[i - 1];
            }
        }
        dp.iter().sum()

=======

        let n = n as usize;
        let mut dp = vec![vec![0; 5]; n+1];
        for i in 0..5 {
            dp[1][i] = 1;
        }
        for i in 2..=n {
            for j in 0..5 {
                for k in 0..=j {
                    dp[i][j] += dp[i-1][k];
                }
            }
        }
        let mut ans = 0;
        for i in 0..5 {
            ans += dp[n][i];
        }
        ans

=======

        let mut dp = vec![1; 5];
        for _ in 1..n {
            for j in 1..5 {
                dp[j] += dp[j - 1];
            }
        }
        dp.iter().sum()

=======

        let mut dp = vec![1,1,1,1,1];
        for i in 1..n {
            for j in 1..5 {
                dp[j] += dp[j-1];
            }
        }
        dp.iter().sum()

=======

        let n = n as usize;
        let mut dp = vec![vec![0; 5]; n + 1];
        for i in 0..=n {
            dp[i][0] = 1;
        }
        for i in 1..=n {
            for j in 1..=4 {
                dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
            }
        }
        dp[n][4]

=======

        let mut dp = vec![1; 5];
        for _ in 2..=n {
            for i in 1..5 {
                dp[i] += dp[i-1];
            }
        }
        dp.iter().sum()

=======

        // let mut dp = vec![vec![0; 5]; n as usize];
        // for i in 0..n as usize {
        //     for j in 0..5 {
        //         if i == 0 {
        //             dp[i][j] = 1;
        //         } else {
        //             for k in j..5 {
        //                 dp[i][j] += dp[i - 1][k];
        //             }
        //         }
        //     }
        // }
        // dp[n as usize - 1].iter().sum::<i32>()
        let mut dp = vec![1; 5];
        for _ in 0..n - 1 {
            for i in 1..5 {
                dp[i] += dp[i - 1];
            }
        }
        dp.iter().sum()
