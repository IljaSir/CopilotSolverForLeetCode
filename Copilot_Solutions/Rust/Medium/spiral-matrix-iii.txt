Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut res = vec![];
        let rows = rows as usize;
        let cols = cols as usize;
        let r_start = r_start as usize;
        let c_start = c_start as usize;
        let mut i = 0;
        let mut j = 0;
        let mut dir = 0;
        let mut steps = 1;
        let mut count = 0;
        let mut r = r_start;
        let mut c = c_start;
        while count < rows * cols {
            if r < rows && c < cols {
                res.push(vec![r as i32, c as i32]);
                count += 1;
            }
            if dir % 2 == 0 {
                i += 1;
            } else {
                j += 1;
            }
            if i == steps {
                dir += 1;
                i = 0;
            }
            if j == steps {
                dir += 1;
                j = 0;
                steps += 1;
            }
            dir %= 4;
            match dir {
                0 => { c += 1; }
                1 => { r += 1; }
                2 => { c -= 1; }
                3 => { r -= 1; }
                _ => unreachable!(),
            }
        }
        res
    }
}

=======

        
    }
}

=======

        let mut res = Vec::new();
        res.push(vec![r_start, c_start]);
        let mut cnt = 1;
        let mut step = 1;
        let mut r = r_start;
        let mut c = c_start;
        while cnt < rows * cols {
            for _ in 0..step {
                c += 1;
                if r >= 0 && r < rows && c >= 0 && c < cols {
                    res.push(vec![r, c]);
                    cnt += 1;
                }
            }
            for _ in 0..step {
                r += 1;
                if r >= 0 && r < rows && c >= 0 && c < cols {
                    res.push(vec![r, c]);
                    cnt += 1;
                }
            }
            step += 1;
            for _ in 0..step {
                c -= 1;
                if r >= 0 && r < rows && c >= 0 && c < cols {
                    res.push(vec![r, c]);
                    cnt += 1;
                }
            }
            for _ in 0..step {
                r -= 1;
                if r >= 0 && r < rows && c >= 0 && c < cols {
                    res.push(vec![r, c]);
                    cnt += 1;
                }
            }
            step += 1;
        }
        res
    }
}

=======

        let mut res = Vec::new();
        let mut x = r_start;
        let mut y = c_start;
        res.push(vec![x, y]);
        let mut step = 1;
        let mut dx = 0;
        let mut dy = 1;
        while res.len() < (rows * cols) as usize {
            for _ in 0..2 {
                for _ in 0..step {
                    x += dx;
                    y += dy;
                    if x >= 0 && x < rows && y >= 0 && y < cols {
                        res.push(vec![x, y]);
                    }
                }
                std::mem::swap(&mut dx, &mut dy);
                dy = -dy;
            }
            step += 1;
        }
        res

=======

        let mut r = Vec::new();
        let mut d = 0;
        let mut x = r_start;
        let mut y = c_start;
        let mut n = 1;
        let mut m = 0;
        r.push(vec![x, y]);
        while r.len() < (rows * cols) as usize {
            for _ in 0..2 {
                for _ in 0..n {
                    match d {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        3 => x -= 1,
                        _ => (),
                    }
                    if x >= 0 && y >= 0 && x < rows && y < cols {
                        r.push(vec![x, y]);
                    }
                }
                d = (d + 1) % 4;
            }
            n += 1;
        }
        r
