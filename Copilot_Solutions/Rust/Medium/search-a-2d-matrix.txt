Synthesizing 10/10 solutions

=======
Suggestion 1

        let m = matrix.len();
        let n = matrix[0].len();
        let mut l = 0;
        let mut r = m * n - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let mid_val = matrix[mid / n][mid % n];
            if mid_val == target {
                return true;
            } else if mid_val < target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        false

=======
Suggestion 2

        let m = matrix.len();
        let n = matrix[0].len();
        let mut l = 0;
        let mut r = m * n - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let i = mid / n;
            let j = mid % n;
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] < target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        false

=======
Suggestion 3

        let m = matrix.len();
        let n = matrix[0].len();
        let mut left = 0;
        let mut right = m * n - 1;
        while left <= right {
            let mid = (left + right) / 2;
            let mid_val = matrix[mid / n][mid % n];
            if mid_val == target {
                return true;
            } else if mid_val < target {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        false

=======
Suggestion 4

        let m = matrix.len();
        let n = matrix[0].len();
        let mut l = 0;
        let mut r = m * n - 1;
        while l <= r {
            let mid = l + (r - l) / 2;
            let i = mid / n;
            let j = mid % n;
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] < target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        false

=======
Suggestion 5

        let (m, n) = (matrix.len(), matrix[0].len());
        let (mut i, mut j) = (0, m * n - 1);
        while i <= j {
            let mid = (i + j) / 2;
            let (x, y) = (mid / n, mid % n);
            if matrix[x][y] == target {
                return true;
            } else if matrix[x][y] < target {
                i = mid + 1;
            } else {
                j = mid - 1;
            }
        }
        false

=======
Suggestion 6

        let mut row = matrix.len() - 1;
        let mut col = 0;
        while row < matrix.len() && col < matrix[0].len() {
            if matrix[row][col] == target {
                return true;
            } else if matrix[row][col] > target {
                if row == 0 {
                    return false;
                } else {
                    row -= 1;
                }
            } else {
                col += 1;
            }
        }
        false

=======
Suggestion 7

        let mut l = 0;
        let mut r = matrix.len() * matrix[0].len() - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let i = mid / matrix[0].len();
            let j = mid % matrix[0].len();
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] < target {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        false

=======
Suggestion 8

        let mut l = 0;
        let mut r = matrix.len() * matrix[0].len() - 1;
        while l <= r {
            let m = (l + r) / 2;
            let (i, j) = (m / matrix[0].len(), m % matrix[0].len());
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] < target {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        false

=======
Suggestion 9

        let mut start = 0;
        let mut end = matrix.len() * matrix[0].len();
        while start < end {
            let mid = start + (end - start) / 2;
            let row = mid / matrix[0].len();
            let col = mid % matrix[0].len();
            if matrix[row][col] == target {
                return true;
            } else if matrix[row][col] < target {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        false

=======
Suggestion 10

        let (mut i, mut j) = (0, matrix.len() - 1);
        while i <= j {
            let k = (i + j) / 2;
            if matrix[k][0] <= target && target <= matrix[k][matrix[k].len() - 1] {
                let (mut i, mut j) = (0, matrix[k].len() - 1);
                while i <= j {
                    let l = (i + j) / 2;
                    if matrix[k][l] == target {
                        return true;
                    } else if matrix[k][l] < target {
                        i = l + 1;
                    } else {
                        j = l - 1;
                    }
                }
                return false;
            } else if target < matrix[k][0] {
                j = k - 1;
            } else {
                i = k + 1;
            }
        }
        false
    }
}
