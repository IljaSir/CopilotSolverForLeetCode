Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort();
        let mut ans = vec![vec![]];
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let mut size = ans.len();
            for k in 0..size {
                let mut subset = ans[k].clone();
                for _ in i..j {
                    subset.push(nums[i]);
                    ans.push(subset.clone());
                }
            }
            i = j;
        }
        ans

=======
Suggestion 2

        let mut res = vec![vec![]];
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let n = res.len();
            for k in 0..n {
                let mut subset = res[k].clone();
                for _ in i..j {
                    subset.push(nums[i]);
                    res.push(subset.clone());
                }
            }
            i = j;
        }
        res

=======
Suggestion 3

        let mut res = vec![vec![]];
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let mut tmp = vec![];
            for r in res.iter() {
                tmp.push(r.clone());
            }
            for r in tmp.iter_mut() {
                for _ in i..j {
                    r.push(nums[i]);
                    res.push(r.clone());
                }
            }
            i = j;
        }
        res
    }
}

=======
Suggestion 4

        let mut ans = vec![vec![]];
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let mut temp = vec![];
            for v in ans.iter() {
                let mut t = v.clone();
                for _ in 0..j-i {
                    t.push(nums[i]);
                    temp.push(t.clone());
                }
            }
            ans.extend(temp);
            i = j;
        }
        ans

=======
Suggestion 5

        let mut subsets = vec![vec![]];
        let mut nums = nums;
        nums.sort();
        let mut start = 0;
        let mut end = 0;
        for i in 0..nums.len() {
            start = 0;
            if i > 0 && nums[i] == nums[i - 1] {
                start = end + 1;
            }
            end = subsets.len() - 1;
            for j in start..=end {
                let mut set = subsets[j].clone();
                set.push(nums[i]);
                subsets.push(set);
            }
        }
        subsets
    }
}

=======
Suggestion 6

        let mut res = vec![vec![]];
        let mut nums = nums;
        nums.sort();
        for i in 0..nums.len() {
            let mut tmp = vec![];
            if i > 0 && nums[i] == nums[i - 1] {
                tmp = res[res.len() - (1 << (i - 1))..].to_vec();
            } else {
                for j in 0..res.len() {
                    tmp.push(res[j].to_vec());
                }
            }
            for j in 0..tmp.len() {
                tmp[j].push(nums[i]);
            }
            res.append(&mut tmp);
        }
        res

=======
Suggestion 7

        let mut result = Vec::new();
        let mut nums = nums;
        nums.sort();
        Self::helper(&mut result, &mut Vec::new(), &nums, 0);
        result
    }
    fn helper(result: &mut Vec<Vec<i32>>, tmp: &mut Vec<i32>, nums: &Vec<i32>, start: usize) {
        result.push(tmp.clone());
        for i in start..nums.len() {
            if i > start && nums[i] == nums[i - 1] {
                continue;
            }
            tmp.push(nums[i]);
            Self::helper(result, tmp, nums, i + 1);
            tmp.pop();
        }
    }
}

=======
Suggestion 8

        let mut result = Vec::new();
        let mut nums = nums;
        nums.sort();
        Self::helper(&mut result, &nums, 0, Vec::new());
        result
    }
    fn helper(result: &mut Vec<Vec<i32>>, nums: &Vec<i32>, start: usize, mut temp: Vec<i32>) {
        result.push(temp.clone());
        for i in start..nums.len() {
            if i > start && nums[i] == nums[i - 1] {
                continue;
            }
            temp.push(nums[i]);
            Self::helper(result, nums, i + 1, temp.clone());
            temp.pop();
        }

=======
Suggestion 9

        let mut nums = nums;
        nums.sort_unstable();
        let mut ans = vec![vec![]];
        let mut cur = vec![];
        Self::dfs(&mut ans, &mut cur, &nums, 0);
        ans
    }
    fn dfs(ans: &mut Vec<Vec<i32>>, cur: &mut Vec<i32>, nums: &[i32], idx: usize) {
        if idx == nums.len() {
            return;
        }
        for i in idx..nums.len() {
            if i > idx && nums[i] == nums[i - 1] {
                continue;
            }
            cur.push(nums[i]);
            ans.push(cur.clone());
            Self::dfs(ans, cur, nums, i + 1);
            cur.pop();
        }

=======
Suggestion 10

        let mut result = Vec::new();
        let mut nums = nums;
        nums.sort();
        Self::subsets_with_dup_rec(&nums, &mut result, Vec::new(), 0);
        result
    }
    fn subsets_with_dup_rec(nums: &Vec<i32>, result: &mut Vec<Vec<i32>>, mut current: Vec<i32>, start: usize) {
        result.push(current);
        for i in start..nums.len() {
            if i > start && nums[i] == nums[i-1] {
                continue;
            }
            current.push(nums[i]);
            Self::subsets_with_dup_rec(nums, result, current.clone(), i+1);
            current.pop();
        }
