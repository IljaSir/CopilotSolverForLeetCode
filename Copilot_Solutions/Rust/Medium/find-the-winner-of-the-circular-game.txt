Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut ans = 0;
        for i in 2..=n {
            ans = (ans + k) % i;
        }
        ans + 1

=======

        let mut res = 0;
        for i in 2..=n {
            res = (res + k) % i;
        }
        res + 1

=======

        let mut v = (1..=n).collect::<Vec<i32>>();
        let mut i = 0;
        while v.len() > 1 {
            i = (i + k - 1) % v.len();
            v.remove(i);
        }
        v[0]

=======

        let mut v = (1..=n).collect::<Vec<_>>();
        let mut i = 0;
        while v.len() > 1 {
            i = (i + k as usize - 1) % v.len();
            v.remove(i);
        }
        v[0]

=======

        let mut friends = vec![1; n as usize];
        let mut i = 0;
        let mut count = 0;
        while count < n - 1 {
            if friends[i] == 1 {
                let mut j = 0;
                while j < k {
                    i = (i + 1) % n as usize;
                    if friends[i] == 1 {
                        j += 1;
                    }
                }
                friends[i] = 0;
                count += 1;
            } else {
                i = (i + 1) % n as usize;
            }
        }
        let mut i = 0;
        while i < n as usize {
            if friends[i] == 1 {
                break;
            }
            i += 1;
        }
        (i + 1) as i32

=======

        let mut arr = vec![true; n as usize];
        let mut idx = 0;
        let mut cnt = 0;
        loop {
            if arr[idx] {
                cnt += 1;
                if cnt == k {
                    arr[idx] = false;
                    cnt = 0;
                }
            }
            if arr.iter().filter(|&x| *x).count() == 1 {
                break;
            }
            idx += 1;
            if idx == n as usize {
                idx = 0;
            }
        }
        arr.iter().position(|x| *x).unwrap() as i32 + 1

=======

        let mut a = vec![1; n as usize];
        let mut i = 0;
        let mut c = 0;
        while c < n - 1 {
            if a[i] == 1 {
                let mut j = 0;
                while j < k {
                    i = (i + 1) % n as usize;
                    if a[i] == 1 {
                        j += 1;
                    }
                }
                a[i] = 0;
                c += 1;
            } else {
                i = (i + 1) % n as usize;
            }
        }
        for (i, &x) in a.iter().enumerate() {
            if x == 1 {
                return (i + 1) as i32;
            }
        }
        0
