Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 1..=n {
            dp[i] = (dp[i - 1] * 2) % 1000000007;
            if i >= 2 {
                dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
            }
            if i >= 3 {
                dp[i] = (dp[i] + dp[i - 3]) % 1000000007;
            }
        }
        dp[n]

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 1..=n {
            dp[i] = (dp[i - 1] * 2) % 1000000007;
            if i >= 2 {
                dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
            }
            if i >= 3 {
                for j in 0..i - 2 {
                    dp[i] = (dp[i] + dp[j]) % 1000000007;
                }
            }
        }
        dp[n] as i32

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 1..=n {
            dp[i] = (dp[i] + dp[i - 1]) % 1_000_000_007;
            if i >= 2 {
                dp[i] = (dp[i] + dp[i - 2]) % 1_000_000_007;
            }
            if i >= 3 {
                dp[i] = (dp[i] + dp[i - 3] * 2) % 1_000_000_007;
            }
        }
        dp[n] as i32

=======

        let n = n as usize;
        let mut dp = vec![0; n + 1];
        dp[0] = 1;
        for i in 1..=n {
            dp[i] += dp[i - 1];
            if i > 1 {
                dp[i] += dp[i - 2];
            }
            if i > 2 {
                dp[i] += dp[i - 3];
            }
            dp[i] %= 1000000007;
        }
        dp[n]

=======

        let n = n as usize;
        let mut dp = vec![vec![0; 3]; n+1];
        dp[0][0] = 1;
        for i in 1..=n {
            dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) % 1_000_000_007;
            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % 1_000_000_007;
            dp[i][2] = (dp[i-1][0] + dp[i-1][1]) % 1_000_000_007;
        }
        dp[n][0]

=======

        let mut dp = vec![0; n as usize + 1];
        dp[0] = 1;
        for i in 1..=n as usize {
            dp[i] = (dp[i - 1] * 2) % 1000000007;
            if i >= 2 {
                dp[i] = (dp[i] + dp[i - 2]) % 1000000007;
            }
            if i >= 3 {
                dp[i] = (dp[i] + dp[i - 3]) % 1000000007;
            }
        }
        dp[n as usize]
