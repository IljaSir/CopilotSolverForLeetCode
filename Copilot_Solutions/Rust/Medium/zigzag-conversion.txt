Synthesizing 10/10 solutions

=======
Suggestion 1

        if num_rows == 1 {
            return s;
        }
        let mut rows = vec![String::new(); num_rows as usize];
        let mut cur_row = 0;
        let mut going_down = false;
        for c in s.chars() {
            rows[cur_row].push(c);
            if cur_row == 0 || cur_row == num_rows - 1 {
                going_down = !going_down;
            }
            cur_row = if going_down {
                cur_row + 1
            } else {
                cur_row - 1
            };
        }
        rows.join("")

=======
Suggestion 2

        if num_rows == 1 {
            return s;
        }
        let mut res = String::new();
        let len = s.len();
        let cycle_len = 2 * num_rows - 2;
        for i in 0..num_rows {
            let mut j = 0;
            while j + i < len {
                res.push(s.chars().nth(j + i as usize).unwrap());
                if i != 0 && i != num_rows - 1 && j + cycle_len - i < len {
                    res.push(s.chars().nth(j + cycle_len - i as usize).unwrap());
                }
                j += cycle_len;
            }
        }
        res

=======
Suggestion 3

        if num_rows == 1 {
            return s;
        }
        let mut res = String::new();
        let n = s.len();
        let cycle = 2 * num_rows - 2;
        for i in 0..num_rows {
            let mut j = 0;
            while j + i < n {
                res.push(s.chars().nth(j + i as usize).unwrap());
                if i != 0 && i != num_rows - 1 && j + cycle - i < n {
                    res.push(s.chars().nth(j + cycle - i as usize).unwrap());
                }
                j += cycle;
            }
        }
        res

=======
Suggestion 4

        if num_rows == 1 {
            return s;
        }
        let mut ans = String::new();
        let len = s.len();
        let cycle_len = 2 * num_rows - 2;
        for i in 0..num_rows {
            let mut j = 0;
            while j + i < len {
                ans.push(s.chars().nth(j + i).unwrap());
                if i != 0 && i != num_rows - 1 && j + cycle_len - i < len {
                    ans.push(s.chars().nth(j + cycle_len - i).unwrap());
                }
                j += cycle_len;
            }
        }
        ans

=======
Suggestion 5

        if num_rows == 1 {
            return s;
        }
        let mut rows = vec![vec![]; num_rows as usize];
        let mut row = 0;
        let mut down = false;
        for c in s.chars() {
            rows[row].push(c);
            if row == 0 || row == (num_rows - 1) as usize {
                down = !down;
            }
            row = if down { row + 1 } else { row - 1 };
        }
        rows.iter().flatten().collect()

=======
Suggestion 6

        if num_rows == 1 {
            return s;
        }
        let mut res = vec![Vec::new(); num_rows as usize];
        let mut row = 0;
        let mut down = true;
        for c in s.chars() {
            res[row].push(c);
            if down {
                row += 1;
            } else {
                row -= 1;
            }
            if row == 0 || row == num_rows - 1 {
                down = !down;
            }
        }
        res.iter().flatten().collect()

=======
Suggestion 7

        let mut ans = String::new();
        let n = s.len();
        let num_rows = num_rows as usize;
        let cycle = 2 * num_rows - 2;
        if cycle == 0 {
            return s;
        }
        for i in 0..num_rows {
            let mut j = 0;
            while j + i < n {
                ans.push(s.chars().nth(j + i).unwrap());
                if i != 0 && i != num_rows - 1 && j + cycle - i < n {
                    ans.push(s.chars().nth(j + cycle - i).unwrap());
                }
                j += cycle;
            }
        }
        ans

=======
Suggestion 8

        let mut result: String = String::new();
        if num_rows == 1 {
            return s;
        }
        let mut step = 2 * num_rows - 2;
        for i in 0..num_rows {
            let mut j = i;
            while j < s.len() as i32 {
                result.push(s.chars().nth(j as usize).unwrap());
                if i != 0 && i != num_rows - 1 && j + step - 2 * i < s.len() as i32 {
                    result.push(s.chars().nth((j + step - 2 * i) as usize).unwrap());
                }
                j += step;
            }
        }
        result
    }
}

=======
Suggestion 9

        let mut res = String::new();
        let num_rows = num_rows as usize;
        let s = s.as_bytes();
        let len = s.len();
        let mut i = 0;
        while i < num_rows {
            let mut j = i;
            let mut is_down = false;
            while j < len {
                res.push(s[j] as char);
                if i == 0 || i == num_rows - 1 {
                    j += 2 * num_rows - 2;
                } else if is_down {
                    j += 2 * num_rows - 2 * i - 2;
                    is_down = false;
                } else {
                    j += 2 * i;
                    is_down = true;
                }
            }
            i += 1;
        }
        res

=======
Suggestion 10

        let mut res = String::new();
        let s = s.as_bytes();
        let len = s.len();
        if num_rows == 1 || len <= 1 {
            return s.iter().map(|&x| x as char).collect();
        }
        let num_rows = num_rows as usize;
        let mut rows = vec![Vec::new(); num_rows];
        let mut i = 0;
        let mut flag = false;
        for &c in s {
            rows[i].push(c);
            if i == 0 || i == num_rows - 1 {
                flag = !flag;
            }
            i = if flag { i + 1 } else { i - 1 };
        }
        for row in rows {
            res.extend(row);
        }
        res
