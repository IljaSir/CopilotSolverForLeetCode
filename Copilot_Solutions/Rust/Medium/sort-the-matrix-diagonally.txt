Synthesizing 10/10 solutions

=======

        let mut mat = mat;
        let m = mat.len();
        let n = mat[0].len();
        for i in 0..m {
            let mut j = 0;
            let mut k = i;
            let mut v = Vec::new();
            while k < m && j < n {
                v.push(mat[k][j]);
                k += 1;
                j += 1;
            }
            v.sort();
            k = i;
            j = 0;
            while k < m && j < n {
                mat[k][j] = v.remove(0);
                k += 1;
                j += 1;
            }
        }
        for j in 1..n {
            let mut i = 0;
            let mut k = j;
            let mut v = Vec::new();
            while k < n && i < m {
                v.push(mat[i][k]);
                k += 1;
                i += 1;
            }
            v.sort();
            k = j;
            i = 0;
            while k < n && i < m {
                mat[i][k] = v.remove(0);
                k += 1;
                i += 1;
            }
        }
        mat
    }
}

=======

        let m = mat.len();
        let n = mat[0].len();
        let mut mat = mat;
        for i in 0..m {
            let mut j = 0;
            let mut k = i;
            let mut temp: Vec<i32> = vec![];
            while k < m && j < n {
                temp.push(mat[k][j]);
                k += 1;
                j += 1;
            }
            temp.sort();
            k = i;
            j = 0;
            while k < m && j < n {
                mat[k][j] = temp[k - i];
                k += 1;
                j += 1;
            }
        }
        for j in 1..n {
            let mut i = 0;
            let mut k = j;
            let mut temp: Vec<i32> = vec![];
            while k < n && i < m {
                temp.push(mat[i][k]);
                k += 1;
                i += 1;
            }
            temp.sort();
            k = j;
            i = 0;
            while k < n && i < m {
                mat[i][k] = temp[i];
                k += 1;
                i += 1;
            }
        }
        mat
    }
}

=======

        let mut mat = mat;
        let m = mat.len();
        let n = mat[0].len();
        for i in 0..m {
            let mut v: Vec<i32> = vec![];
            let mut x = i;
            let mut y = 0;
            while x < m && y < n {
                v.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            v.sort();
            x = i;
            y = 0;
            for j in 0..v.len() {
                mat[x][y] = v[j];
                x += 1;
                y += 1;
            }
        }
        for i in 1..n {
            let mut v: Vec<i32> = vec![];
            let mut x = 0;
            let mut y = i;
            while x < m && y < n {
                v.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            v.sort();
            x = 0;
            y = i;
            for j in 0..v.len() {
                mat[x][y] = v[j];
                x += 1;
                y += 1;
            }
        }
        mat

=======

        let mut mat = mat;
        let m = mat.len();
        let n = mat[0].len();
        for i in 0..m {
            let mut vec: Vec<i32> = vec![];
            let mut x = i;
            let mut y = 0;
            while x < m && y < n {
                vec.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            vec.sort();
            x = i;
            y = 0;
            for j in 0..vec.len() {
                mat[x][y] = vec[j];
                x += 1;
                y += 1;
            }
        }
        for i in 1..n {
            let mut vec: Vec<i32> = vec![];
            let mut x = 0;
            let mut y = i;
            while x < m && y < n {
                vec.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            vec.sort();
            x = 0;
            y = i;
            for j in 0..vec.len() {
                mat[x][y] = vec[j];
                x += 1;
                y += 1;
            }
        }
        mat
    }
}

=======

        let mut mat = mat;
        for i in 0..mat.len() {
            let mut j = i;
            let mut k = 0;
            let mut v = Vec::new();
            while j < mat.len() && k < mat[0].len() {
                v.push(mat[j][k]);
                j += 1;
                k += 1;
            }
            v.sort();
            j = i;
            k = 0;
            while j < mat.len() && k < mat[0].len() {
                mat[j][k] = v.remove(0);
                j += 1;
                k += 1;
            }
        }
        for i in 1..mat[0].len() {
            let mut j = 0;
            let mut k = i;
            let mut v = Vec::new();
            while j < mat.len() && k < mat[0].len() {
                v.push(mat[j][k]);
                j += 1;
                k += 1;
            }
            v.sort();
            j = 0;
            k = i;
            while j < mat.len() && k < mat[0].len() {
                mat[j][k] = v.remove(0);
                j += 1;
                k += 1;
            }
        }
        mat

=======

        let (m, n) = (mat.len(), mat[0].len());
        let mut mat = mat;
        for i in 0..m {
            let mut v = Vec::new();
            let mut (x, y) = (i, 0);
            while x < m && y < n {
                v.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            v.sort();
            let mut (x, y) = (i, 0);
            while x < m && y < n {
                mat[x][y] = v.remove(0);
                x += 1;
                y += 1;
            }
        }
        for j in 1..n {
            let mut v = Vec::new();
            let mut (x, y) = (0, j);
            while x < m && y < n {
                v.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            v.sort();
            let mut (x, y) = (0, j);
            while x < m && y < n {
                mat[x][y] = v.remove(0);
                x += 1;
                y += 1;
            }
        }
        mat

=======

        let mut mat = mat;
        let m = mat.len();
        let n = mat[0].len();
        let mut diagonals = vec![];
        for i in 0..m {
            let mut diagonal = vec![];
            let mut x = i;
            let mut y = 0;
            while x < m && y < n {
                diagonal.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            diagonals.push(diagonal);
        }
        for i in 1..n {
            let mut diagonal = vec![];
            let mut x = 0;
            let mut y = i;
            while x < m && y < n {
                diagonal.push(mat[x][y]);
                x += 1;
                y += 1;
            }
            diagonals.push(diagonal);
        }
        for i in 0..diagonals.len() {
            let mut diagonal = diagonals[i];
            diagonal.sort();
            diagonals[i] = diagonal;
        }
        for i in 0..m {
            let mut x = i;
            let mut y = 0;
            let mut j = 0;
            while x < m && y < n {
                mat[x][y] = diagonals[i][j];
                x += 1;
                y += 1;
                j += 1;
            }
        }
        for i in 1..n {
            let mut x = 0;
            let mut y = i;
            let mut j = 0;
            while x < m && y < n {
                mat[x][y] = diagonals[m + j][j];
                x += 1;
                y += 1;
                j += 1;
            }
        }
        mat
    }
}

=======

        let mut mat = mat;
        let (m, n) = (mat.len(), mat[0].len());
        let mut diag = vec![];
        for i in 0..m {
            diag.clear();
            let mut (i, j) = (i, 0);
            while i < m && j < n {
                diag.push(mat[i][j]);
                i += 1;
                j += 1;
            }
            diag.sort();
            let mut (i, j) = (i, j);
            for k in diag {
                i -= 1;
                j -= 1;
                mat[i][j] = k;
            }
        }
        for j in 1..n {
            diag.clear();
            let mut (i, j) = (0, j);
            while i < m && j < n {
                diag.push(mat[i][j]);
                i += 1;
                j += 1;
            }
            diag.sort();
            let mut (i, j) = (i, j);
            for k in diag {
                i -= 1;
                j -= 1;
                mat[i][j] = k;
            }
        }
        mat

=======

        let mut mat = mat;
        let m = mat.len();
        let n = mat[0].len();
        let mut v = vec![];
        for i in 0..m {
            let mut j = i;
            let mut k = 0;
            while j < m && k < n {
                v.push(mat[j][k]);
                j += 1;
                k += 1;
            }
            v.sort();
            j = i;
            k = 0;
            while j < m && k < n {
                mat[j][k] = v.remove(0);
                j += 1;
                k += 1;
            }
        }
        for i in 1..n {
            let mut j = 0;
            let mut k = i;
            while j < m && k < n {
                v.push(mat[j][k]);
                j += 1;
                k += 1;
            }
            v.sort();
            j = 0;
            k = i;
            while j < m && k < n {
                mat[j][k] = v.remove(0);
                j += 1;
                k += 1;
            }
        }
        mat

=======

        let mut m = mat;
        let r = m.len();
        let c = m[0].len();
        for i in 0..r {
            let mut v: Vec<i32> = m[i].iter().map(|x| *x).collect();
            v.sort();
            m[i] = v;
        }
        for j in 0..c {
            let mut v: Vec<i32> = vec![];
            for i in 0..r {
                if j + i < c {
                    v.push(m[i][j + i]);
                }
            }
            v.sort();
            for i in 0..r {
                if j + i < c {
                    m[i][j + i] = v[i];
                }
            }
        }
        m
    }
}
