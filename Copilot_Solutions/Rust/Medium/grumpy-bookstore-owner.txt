Synthesizing 10/10 solutions

=======

        let mut sum = 0;
        let mut max = 0;
        for i in 0..customers.len() {
            if grumpy[i] == 0 {
                sum += customers[i];
            }
        }
        let mut temp = 0;
        for i in 0..customers.len() {
            if grumpy[i] == 1 {
                temp += customers[i];
            }
            if i >= minutes as usize {
                if grumpy[i - minutes as usize] == 1 {
                    temp -= customers[i - minutes as usize];
                }
            }
            if temp > max {
                max = temp;
            }
        }
        sum + max

=======

        let mut satisfied = 0;
        let mut max = 0;
        let mut temp = 0;
        for i in 0..customers.len() {
            if grumpy[i] == 0 {
                satisfied += customers[i];
            } else {
                temp += customers[i];
            }
            if i >= minutes as usize {
                temp -= customers[i - minutes as usize] * grumpy[i - minutes as usize];
            }
            max = max.max(temp);
        }
        satisfied + max

=======

        let mut sum = customers.iter().zip(grumpy.iter()).fold(0, |acc, (c, g)| {
            if *g == 0 {
                acc + c
            } else {
                acc
            }
        });
        let mut max = 0;
        let mut i = 0;
        let mut j = minutes as usize;
        while j <= customers.len() {
            let mut tmp = 0;
            for k in i..j {
                if grumpy[k] == 1 {
                    tmp += customers[k];
                }
            }
            max = max.max(tmp);
            i += 1;
            j += 1;
        }
        sum + max

=======

        let mut satisfied = 0;
        let mut max = 0;
        let mut temp = 0;
        let minutes = minutes as usize;
        for i in 0..customers.len() {
            if grumpy[i] == 0 {
                satisfied += customers[i];
            } else {
                temp += customers[i];
                if i >= minutes {
                    temp -= customers[i - minutes] * grumpy[i - minutes];
                }
                if temp > max {
                    max = temp;
                }
            }
        }
        satisfied + max

=======

        let mut max = 0;
        for i in 0..customers.len() - minutes as usize + 1 {
            let mut temp = 0;
            for j in 0..customers.len() {
                if j < i || j >= i + minutes as usize {
                    if grumpy[j] == 0 {
                        temp += customers[j];
                    }
                } else {
                    temp += customers[j];
                }
            }
            if temp > max {
                max = temp;
            }
        }
        max
    }
}

=======

        let mut base = 0;
        let mut max = 0;
        let mut cur = 0;
        let mut i = 0;
        let mut j = 0;
        while j < customers.len() {
            if grumpy[j] == 0 {
                base += customers[j];
            } else {
                cur += customers[j];
            }
            if j - i + 1 == minutes as usize {
                max = max.max(cur);
                if grumpy[i] == 1 {
                    cur -= customers[i];
                }
                i += 1;
            }
            j += 1;
        }
        base + max

=======

        let mut max = 0;
        let mut sum = 0;
        let mut i = 0;
        let mut j = 0;
        let mut current = 0;
        let minutes = minutes as usize;
        while j < customers.len() {
            if grumpy[j] == 1 {
                current += customers[j];
            } else {
                sum += customers[j];
            }
            j += 1;
            if j - i == minutes {
                if current > max {
                    max = current;
                }
                if grumpy[i] == 1 {
                    current -= customers[i];
                }
                i += 1;
            }
        }
        sum + max
    }
}

=======

        let mut result = 0;
        let mut max = 0;
        let mut temp = 0;
        let mut i = 0;
        let mut j = 0;
        let mut minutes = minutes as usize;
        while i < customers.len() {
            if grumpy[i] == 0 {
                result += customers[i];
            } else {
                temp += customers[i];
            }
            if i - j + 1 == minutes {
                max = max.max(temp);
                if grumpy[j] == 1 {
                    temp -= customers[j];
                }
                j += 1;
            }
            i += 1;
        }
        result + max

=======

        let mut sum = 0;
        let mut max = 0;
        let mut temp = 0;
        let mut i = 0;
        for (i, (c, g)) in customers.iter().zip(grumpy).enumerate() {
            if g == 0 {
                sum += c;
            } else {
                temp += c;
            }
            if i as i32 >= minutes {
                if grumpy[i - minutes as usize] == 1 {
                    temp -= customers[i - minutes as usize];
                }
            }
            max = max.max(temp);
        }
        sum + max
    }
}

=======

        let mut max = 0;
        let mut sum = 0;
        let mut i = 0;
        let mut j = 0;
        let mut m = minutes as usize;
        let mut n = customers.len();
        while j < n {
            if grumpy[j] == 0 {
                sum += customers[j];
            }
            if j - i + 1 > m {
                if grumpy[i] == 1 {
                    sum -= customers[i];
                }
                i += 1;
            }
            max = max.max(sum);
            j += 1;
        }
        max
