Synthesizing 4/10 solutions

=======

        let mut x = points.iter().map(|p| p[0]).collect::<Vec<i32>>();
        x.sort();
        let mut max = 0;
        for i in 1..x.len() {
            if x[i] - x[i-1] > max {
                max = x[i] - x[i-1];
            }
        }
        max

=======

        let mut xs: Vec<i32> = points.iter().map(|p| p[0]).collect();
        xs.sort();
        let mut max = 0;
        for i in 1..xs.len() {
            let d = xs[i] - xs[i-1];
            if d > max {
                max = d;
            }
        }
        max
    }
}

=======

        let mut xs = points.iter().map(|p| p[0]).collect::<Vec<i32>>();
        xs.sort();
        let mut max = 0;
        for i in 1..xs.len() {
            max = std::cmp::max(max, xs[i] - xs[i - 1]);
        }
        max
    }
}

=======

        let mut x = points.iter().map(|p| p[0]).collect::<Vec<_>>();
        x.sort();
        x.windows(2).map(|w| w[1]-w[0]).max().unwrap_or(0)
