Synthesizing 9/10 solutions

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(0);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_v = 0;
        for i in 1..horizontal_cuts.len() {
            max_h = std::cmp::max(max_h, horizontal_cuts[i] - horizontal_cuts[i - 1]);
        }
        for i in 1..vertical_cuts.len() {
            max_v = std::cmp::max(max_v, vertical_cuts[i] - vertical_cuts[i - 1]);
        }
        (max_h * max_v) as i32 % 1000000007

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(0);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_w = 0;
        for i in 0..horizontal_cuts.len() - 1 {
            max_h = max_h.max(horizontal_cuts[i + 1] - horizontal_cuts[i]);
        }
        for i in 0..vertical_cuts.len() - 1 {
            max_w = max_w.max(vertical_cuts[i + 1] - vertical_cuts[i]);
        }
        (max_h * max_w % 1_000_000_007) as i32

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(0);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_w = 0;
        for i in 0..horizontal_cuts.len() - 1 {
            let h = horizontal_cuts[i + 1] - horizontal_cuts[i];
            max_h = max_h.max(h);
        }
        for i in 0..vertical_cuts.len() - 1 {
            let w = vertical_cuts[i + 1] - vertical_cuts[i];
            max_w = max_w.max(w);
        }
        let ans = max_h as i64 * max_w as i64;
        (ans % 1000000007) as i32

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(0);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_v = 0;
        for i in 1..horizontal_cuts.len() {
            max_h = max_h.max(horizontal_cuts[i] - horizontal_cuts[i - 1]);
        }
        for i in 1..vertical_cuts.len() {
            max_v = max_v.max(vertical_cuts[i] - vertical_cuts[i - 1]);
        }
        ((max_h * max_v) as i64 % 1000000007) as i32
    }
}

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(0);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_w = 0;
        for i in 1..horizontal_cuts.len() {
            max_h = max_h.max(horizontal_cuts[i] - horizontal_cuts[i - 1]);
        }
        for i in 1..vertical_cuts.len() {
            max_w = max_w.max(vertical_cuts[i] - vertical_cuts[i - 1]);
        }
        (max_h * max_w) as i32 % 1000000007

=======

        let mut horizontal_cuts = horizontal_cuts;
        let mut vertical_cuts = vertical_cuts;
        horizontal_cuts.push(0);
        vertical_cuts.push(0);
        horizontal_cuts.push(h);
        vertical_cuts.push(w);
        horizontal_cuts.sort();
        vertical_cuts.sort();
        let mut max_h = 0;
        let mut max_v = 0;
        for i in 1..horizontal_cuts.len() {
            max_h = max_h.max(horizontal_cuts[i] - horizontal_cuts[i - 1]);
        }
        for i in 1..vertical_cuts.len() {
            max_v = max_v.max(vertical_cuts[i] - vertical_cuts[i - 1]);
        }
        let ans = (max_h as i64 * max_v as i64) % 1000000007;
        ans as i32

=======

        let mut hcuts = horizontal_cuts.clone();
        hcuts.push(0);
        hcuts.push(h);
        hcuts.sort();
        let mut vcuts = vertical_cuts.clone();
        vcuts.push(0);
        vcuts.push(w);
        vcuts.sort();
        let mut hmax = 0;
        for i in 1..hcuts.len() {
            hmax = hmax.max(hcuts[i] - hcuts[i - 1]);
        }
        let mut vmax = 0;
        for i in 1..vcuts.len() {
            vmax = vmax.max(vcuts[i] - vcuts[i - 1]);
        }
        (hmax * vmax % 1000000007) as i32

=======

        let mut hcuts = horizontal_cuts;
        let mut vcuts = vertical_cuts;
        hcuts.sort();
        vcuts.sort();
        hcuts.insert(0, 0);
        vcuts.insert(0, 0);
        hcuts.push(h);
        vcuts.push(w);
        let mut hmax = 0;
        let mut vmax = 0;
        for i in 1..hcuts.len() {
            hmax = hmax.max(hcuts[i] - hcuts[i-1]);
        }
        for i in 1..vcuts.len() {
            vmax = vmax.max(vcuts[i] - vcuts[i-1]);
        }
        (hmax * vmax % 1000000007) as i32

=======

        let mut horiz = horizontal_cuts;
        let mut vert = vertical_cuts;
        horiz.push(0);
        horiz.push(h);
        vert.push(0);
        vert.push(w);
        horiz.sort();
        vert.sort();
        let mut max_h = 0;
        let mut max_v = 0;
        for i in 0..horiz.len() - 1 {
            max_h = max_h.max(horiz[i+1] - horiz[i]);
        }
        for i in 0..vert.len() - 1 {
            max_v = max_v.max(vert[i+1] - vert[i]);
        }
        (max_h * max_v % 1000000007) as i32
