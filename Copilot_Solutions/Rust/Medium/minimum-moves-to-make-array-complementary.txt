Synthesizing 7/10 solutions

=======

        let n = nums.len();
        let mut diff = vec![0; 2 * limit as usize + 2];
        for i in 0..n / 2 {
            let a = nums[i];
            let b = nums[n - 1 - i];
            let s = a + b;
            let m = a.min(b) + 1;
            let x = a.max(b) + limit;
            diff[m as usize] += 1;
            diff[s as usize] -= 1;
            diff[s as usize + 1] += 1;
            diff[x as usize + 1] -= 1;
        }
        let mut res = n as i32;
        let mut cur = 0;
        for i in 2..=2 * limit {
            cur += diff[i as usize];
            res = res.min(cur);
        }
        res

=======

        let n = nums.len();
        let mut diff = vec![0; 2 * limit as usize + 2];
        for i in 0..n / 2 {
            let a = nums[i];
            let b = nums[n - i - 1];
            let s = a + b;
            let m = a.min(b) + 1;
            let x = a.max(b) + limit;
            diff[m as usize] += 1;
            diff[s as usize] -= 1;
            diff[s as usize + 1] += 1;
            diff[x as usize + 1] -= 1;
        }
        let mut res = n as i32;
        let mut cur = 0;
        for i in 2..=2 * limit {
            cur += diff[i as usize];
            res = res.min(cur);
        }
        res
    }
}

=======

        let n = nums.len();
        let mut d = vec![0; 2 * limit as usize + 2];
        for i in 0..n / 2 {
            let a = nums[i];
            let b = nums[n - 1 - i];
            let s = a + b;
            let m = a.min(b) + 1;
            let x = a.max(b) + limit;
            d[m as usize] += 1;
            d[s as usize] -= 1;
            d[s as usize + 1] += 1;
            d[x as usize + 1] -= 1;
        }
        let mut ans = n as i32;
        let mut cur = 0;
        for i in 2..=2 * limit {
            cur += d[i as usize];
            ans = ans.min(cur);
        }
        ans

=======

        let n = nums.len();
        let mut delta = vec![0; 2 * limit as usize + 2];
        for i in 0..n / 2 {
            let (a, b) = (nums[i], nums[n - 1 - i]);
            let (lo, hi) = (a.min(b) + 1, a.max(b) + limit);
            delta[lo as usize] -= 1;
            delta[(a + b) as usize] -= 1;
            delta[(a + b + 1) as usize] += 1;
            delta[hi as usize + 1] += 1;
        }
        let mut ans = n as i32;
        let mut curr = 0;
        for i in 2..2 * limit + 1 {
            curr += delta[i as usize];
            ans = ans.min(curr);
        }
        ans

=======

        let n = nums.len();
        let mut delta = vec![0; 2 * limit as usize + 2];
        for i in 0..n/2 {
            let a = nums[i];
            let b = nums[n - 1 - i];
            let s = a + b;
            let m = s - 1;
            let M = 2 * limit - s + 1;
            delta[2] += 2;
            delta[m+1] -= 1;
            delta[M] -= 1;
            delta[M+1] += 1;
        }
        let mut ans = n as i32;
        let mut cur = 0;
        for i in 2..=2*limit {
            cur += delta[i];
            ans = ans.min(cur);
        }
        ans

=======

        let n = nums.len();
        let mut diff = vec![0; 2 * limit as usize + 2];
        for i in 0..(n / 2) {
            let a = nums[i];
            let b = nums[n - 1 - i];
            diff[2] += 2;
            diff[a.min(b) as usize + 1] -= 1;
            diff[a + b] -= 1;
            diff[a + b + 1] += 1;
            diff[a.max(b) + limit + 1] += 1;
        }
        diff.iter().skip(2).scan(0, |state, &x| {
            *state += x;
            Some(*state)
        }).min().unwrap()

=======

        
    }
}
