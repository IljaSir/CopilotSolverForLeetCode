Synthesizing 10/10 solutions

=======
Suggestion 1

        nums.iter().sum::<i32>() - nums.len() as i32 * nums.iter().min().unwrap()

=======
Suggestion 2

        let mut min = nums[0];
        let mut sum = nums[0];
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
            }
            sum += nums[i];
        }
        (sum - min * nums.len() as i32) as i32

=======
Suggestion 3

        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
            }
        }
        let mut res = 0;
        for i in 0..nums.len() {
            res += nums[i] - min;
        }
        res

=======
Suggestion 4

        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
            }
        }
        let mut ans = 0;
        for i in 0..nums.len() {
            ans += nums[i] - min;
        }
        ans

=======
Suggestion 5

        let mut min = i32::MAX;
        let mut sum = 0;
        for num in nums {
            min = min.min(num);
            sum += num;
        }
        sum - min * nums.len() as i32

=======
Suggestion 6

        let mut min = i32::max_value();
        let mut sum = 0;
        for i in nums {
            min = min.min(i);
            sum += i;
        }
        sum - min * nums.len() as i32

=======
Suggestion 7

        let mut min = i32::max_value();
        for n in nums {
            if n < min {
                min = n;
            }
        }
        let mut result = 0;
        for n in nums {
            result += n - min;
        }
        result

=======
Suggestion 8

        let mut sum = 0;
        let mut min = i32::MAX;
        for num in nums {
            sum += num;
            if num < min {
                min = num;
            }
        }
        sum - (nums.len() as i32) * min

=======
Suggestion 9

        let min = nums.iter().min().unwrap();
        let mut moves = 0;
        for i in nums.iter() {
            moves += i - min;
        }
        moves

=======
Suggestion 10

        let mut min = i32::MAX;
        let mut sum = 0;
        for i in nums.iter() {
            sum += i;
            if min > *i {
                min = *i;
            }
        }
        sum - min * nums.len() as i32
