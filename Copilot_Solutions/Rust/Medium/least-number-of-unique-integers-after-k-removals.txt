Synthesizing 8/10 solutions

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for x in arr {
            *map.entry(x).or_insert(0) += 1;
        }
        let mut freq: Vec<i32> = map.values().map(|x| *x).collect();
        freq.sort();
        let mut ans = freq.len() as i32;
        let mut k = k;
        for x in freq {
            if k >= x {
                k -= x;
                ans -= 1;
            } else {
                break;
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v: Vec<i32> = map.values().map(|x| *x).collect();
        v.sort();
        let mut i = 0;
        let mut k = k;
        while k > 0 {
            if k >= v[i] {
                k -= v[i];
                i += 1;
            } else {
                break;
            }
        }
        (v.len() - i) as i32

=======

        let mut map = std::collections::HashMap::new();
        for i in arr {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut v = map.values().collect::<Vec<&i32>>();
        v.sort();
        let mut sum = 0;
        for i in v {
            if k < *i {
                sum += 1;
            } else {
                sum += 1;
            }
        }
        sum

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for &i in arr.iter() {
            *map.entry(i).or_insert(0) += 1;
        }
        let mut vec = map.values().map(|&x| x).collect::<Vec<i32>>();
        vec.sort();
        let mut count = 0;
        for &i in vec.iter() {
            if k >= i {
                count += 1;
            }
        }
        vec.len() as i32 - count

=======

        let mut cnt = std::collections::HashMap::new();
        for a in arr {
            *cnt.entry(a).or_insert(0) += 1;
        }
        let mut cnts = cnt.values().collect::<Vec<_>>();
        cnts.sort();
        let mut i = 0;
        while i < cnts.len() {
            if k >= *cnts[i] {
                k -= *cnts[i];
                i += 1;
            } else {
                break;
            }
        }
        (cnts.len() - i) as i32
    }
}

=======

        let mut hash = std::collections::HashMap::new();
        for a in arr {
            *hash.entry(a).or_insert(0) += 1;
        }
        let mut v: Vec<i32> = hash.values().map(|x| *x).collect();
        v.sort();
        let mut k = k;
        let mut i = 0;
        while i < v.len() && k >= v[i] {
            k -= v[i];
            i += 1;
        }
        (v.len() - i) as i32

=======

        let mut arr = arr;
        arr.sort();
        let mut count = 0;
        let mut prev = arr[0];
        let mut prev_count = 1;
        for i in 1..arr.len() {
            if arr[i] == prev {
                prev_count += 1;
            } else {
                if prev_count <= k {
                    count += 1;
                    k -= prev_count;
                }
                prev = arr[i];
                prev_count = 1;
            }
        }
        if prev_count <= k {
            count += 1;
        }
        arr.len() as i32 - count

=======

        
    }
}
