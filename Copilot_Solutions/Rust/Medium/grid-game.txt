Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = grid[0].len();
        let mut dp = vec![vec![0; n]; 2];
        dp[0][0] = grid[0][0];
        dp[1][0] = grid[1][0];
        for i in 1..n {
            dp[0][i] = grid[0][i] + dp[0][i-1];
            dp[1][i] = grid[1][i] + dp[1][i-1];
        }
        let mut res = i64::MAX;
        let mut sum = dp[0][n-1] + dp[1][n-1];
        for i in 0..n-1 {
            let cur = dp[0][i] + sum - dp[1][i];
            res = res.min(cur as i64);
        }
        res

=======

        let n = grid[0].len();
        let mut prefix = vec![0; n + 1];
        for i in 0..n {
            prefix[i + 1] = prefix[i] + grid[0][i];
        }
        let mut suffix = vec![0; n + 1];
        for i in (0..n).rev() {
            suffix[i] = suffix[i + 1] + grid[1][i];
        }
        let mut ans = std::i64::MAX;
        for i in 0..n {
            ans = ans.min(prefix[i] + suffix[i + 1]);
        }
        ans

=======

        let n = grid[0].len();
        let mut prefix_sum = vec![vec![0; n + 1]; 2];
        for i in 0..2 {
            for j in 0..n {
                prefix_sum[i][j + 1] = prefix_sum[i][j] + grid[i][j];
            }
        }
        let mut min = std::i64::MAX;
        let mut sum = 0;
        for i in 0..n {
            sum += grid[1][i];
        }
        for i in 0..n {
            sum -= grid[1][i];
            min = min.min(sum);
            sum += grid[0][i];
        }
        min as i64
