Synthesizing 10/10 solutions

=======

        use std::collections::HashMap;
        let mut map: HashMap<i32, i32> = HashMap::new();
        for i in arr {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut v: Vec<i32> = map.values().cloned().collect();
        v.sort_by(|a, b| b.cmp(a));
        let mut sum = 0;
        let mut count = 0;
        for i in v {
            sum += i;
            count += 1;
            if sum >= arr.len() as i32 / 2 {
                return count;
            }
        }
        0

=======

        use std::collections::HashMap;
        let mut freq: HashMap<i32, i32> = HashMap::new();
        for i in arr {
            *freq.entry(i).or_insert(0) += 1;
        }
        let mut freq: Vec<i32> = freq.values().map(|x| *x).collect();
        freq.sort();
        freq.reverse();
        let mut sum = 0;
        let mut i = 0;
        while sum < arr.len() as i32 / 2 {
            sum += freq[i];
            i += 1;
        }
        i as i32

=======

        let mut v = vec![0; 100_001];
        for i in arr {
            v[i as usize] += 1;
        }
        v.sort_by(|a, b| b.cmp(a));
        let mut sum = 0;
        let mut count = 0;
        for i in v {
            sum += i;
            count += 1;
            if sum >= arr.len() / 2 {
                return count;
            }
        }
        0

=======

        let mut arr = arr;
        arr.sort();
        let mut count = 0;
        let mut result = 0;
        let mut i = arr.len() - 1;
        while count < arr.len() / 2 {
            count += 1;
            if i == 0 || arr[i] != arr[i - 1] {
                result += 1;
            } else {
                while i > 0 && arr[i] == arr[i - 1] {
                    i -= 1;
                    count += 1;
                }
            }
            i -= 1;
        }
        result

=======

        let mut count = vec![0; 100001];
        for i in arr {
            count[i as usize] += 1;
        }
        count.sort();
        let mut sum = 0;
        let mut res = 0;
        for i in (0..count.len()).rev() {
            sum += count[i];
            res += 1;
            if sum >= arr.len() / 2 {
                break;
            }
        }
        res

=======

        let mut arr = arr;
        let mut map = std::collections::HashMap::new();
        for n in arr.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut arr: Vec<_> = map.iter().collect();
        arr.sort_by_key(|a| -a.1);
        let mut ans = 0;
        let mut sum = 0;
        for i in 0..arr.len() {
            sum += arr[i].1;
            ans += 1;
            if sum >= arr.len() / 2 {
                return ans;
            }
        }
        ans

=======

        let mut arr = arr;
        arr.sort();
        let mut count = 0;
        let mut sum = 0;
        let mut i = arr.len() - 1;
        while sum < arr.len()/2 {
            sum += 1;
            count += 1;
            while i > 0 && arr[i] == arr[i-1] {
                i -= 1;
                sum += 1;
            }
            i -= 1;
        }
        count

=======

        let mut arr = arr;
        arr.sort();
        let mut len = arr.len();
        let mut count = 0;
        let mut i = 0;
        while len > arr.len() / 2 {
            len -= (arr[i + 1..].iter().take_while(|&&x| x == arr[i]).count() + 1) as usize;
            i += 1;
            count += 1;
        }
        count
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let mut count = 0;
        let mut total = 0;
        let half = arr.len() / 2;
        for i in (0..arr.len()).rev() {
            total += 1;
            if i == 0 || arr[i] != arr[i - 1] {
                count += 1;
            }
            if total >= half {
                break;
            }
        }
        count

=======

        let mut arr = arr;
        arr.sort();
        let mut m = arr[0];
        let mut c = 1;
        let mut v = vec![];
        for i in 1..arr.len() {
            if arr[i] == m {
                c += 1;
            } else {
                v.push((m, c));
                m = arr[i];
                c = 1;
            }
        }
        v.push((m, c));
        v.sort_by_key(|&(_, c)| c);
        let mut s = 0;
        let mut i = v.len() - 1;
        let mut r = 0;
        while s < arr.len() / 2 {
            s += v[i].1;
            i -= 1;
            r += 1;
        }
        r
