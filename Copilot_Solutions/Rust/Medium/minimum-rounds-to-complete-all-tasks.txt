Synthesizing 4/10 solutions

=======

        
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for &t in tasks.iter() {
            *map.entry(t).or_insert(0) += 1;
        }
        let mut v = map.values().collect::<Vec<&i32>>();
        v.sort();
        let mut ans = 0;
        for &n in v.iter().rev() {
            let mut t = n / 3;
            if n % 3 != 0 {
                t += 1;
            }
            ans = ans.max(t);
        }
        ans * 2
    }
}

=======

        let mut cnt = vec![0; 10];
        for t in tasks {
            let mut idx = 0;
            while t > (1 << idx) {
                idx += 1;
            }
            cnt[idx] += 1;
        }
        let mut res = 0;
        let mut rem = 0;
        for i in 0..10 {
            let cur = (cnt[i] + rem + 1) / 2;
            rem = cnt[i] - cur * 2;
            res += cur;
        }
        res
    }
}

=======

        let mut cnt = vec![0; 32];
        for &t in tasks.iter() {
            let mut x = t;
            if x % 2 == 1 {
                x += 1;
            }
            let mut i = 0;
            while x > 0 {
                x >>= 1;
                i += 1;
            }
            cnt[i] += 1;
        }
        let mut max = 0;
        for i in 0..32 {
            if cnt[i] == 0 {
                continue;
            }
            if cnt[i] % 2 == 1 {
                cnt[i] += 1;
            }
            let mut x = cnt[i];
            let mut j = 0;
            while x > 0 {
                x >>= 1;
                j += 1;
            }
            max = std::cmp::max(max, j);
        }
        max
