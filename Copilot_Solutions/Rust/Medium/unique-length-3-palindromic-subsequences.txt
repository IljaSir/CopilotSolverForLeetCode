Synthesizing 8/10 solutions

=======

        let mut a = vec![0; 26];
        let mut b = vec![0; 26];
        let mut c = vec![0; 26];
        let mut d = vec![0; 26];
        let mut e = vec![0; 26];
        let mut f = vec![0; 26];
        let mut g = vec![0; 26];
        let mut h = vec![0; 26];
        let mut i = vec![0; 26];
        let mut j = vec![0; 26];
        let mut k = vec![0; 26];
        let mut l = vec![0; 26];
        let mut m = vec![0; 26];
        let mut n = vec![0; 26];
        let mut o = vec![0; 26];
        let mut p = vec![0; 26];
        let mut q = vec![0; 26];
        let mut r = vec![0; 26];
        let mut s = vec![0; 26];
        let mut t = vec![0; 26];
        let mut u = vec![0; 26];
        let mut v = vec![0; 26];
        let mut w = vec![0; 26];
        let mut x = vec![0; 26];
        let mut y = vec![0; 26];
        let mut z = vec![0; 26];
        let mut count = 0;
        for ch in s.chars() {
            match ch {
                'a' => {
                    for i in 0..26 {
                        count += a[i];
                        a[i] = 1;
                    }
                },
                'b' => {
                    for i in 0..26 {
                        count += b[i];
                        b[i] = a[i];
                    }
                },
                'c' => {
                    for i in 0..26 {
                        count += c[i];
                        c[i] = b[i];
                    }
                },
                'd' => {
                    for i in 0..26 {
                        count += d[i];
                        d[i] = c[i];
                    }
                },
                'e' => {
                    for i in 0..26 {
                        count += e[i];
                        e[i] = d[i];
                    }
                },
                '

=======

        let mut count = 0;
        let s: Vec<char> = s.chars().collect();
        for c in 'a'..='z' {
            let mut left = 0;
            let mut right = s.len() - 1;
            while left < s.len() && s[left] != c {
                left += 1;
            }
            while right > 0 && s[right] != c {
                right -= 1;
            }
            if left < right {
                let mut set = std::collections::HashSet::new();
                for i in left + 1..right {
                    set.insert(s[i]);
                }
                count += set.len();
            }
        }
        count as i32
    }
}

=======

        let mut res = 0;
        let mut first = vec![0; 26];
        let mut last = vec![0; 26];
        let mut count = vec![0; 26];
        let s = s.as_bytes();
        for i in 0..s.len() {
            count[(s[i] - b'a') as usize] += 1;
            last[(s[i] - b'a') as usize] = i;
        }
        for i in 0..s.len() {
            let idx = (s[i] - b'a') as usize;
            if count[idx] > 1 {
                count[idx] -= 1;
                if first[idx] == 0 {
                    first[idx] = i;
                }
            }
        }
        for i in 0..26 {
            if first[i] != 0 && last[i] != 0 && first[i] < last[i] {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut left = [0; 26];
        let mut right = [0; 26];
        let mut count = [0; 26];
        let mut i = 0;
        for c in s.chars() {
            if left[c as usize - 'a' as usize] == 0 {
                left[c as usize - 'a' as usize] = i + 1;
            }
            right[c as usize - 'a' as usize] = i + 1;
            count[c as usize - 'a' as usize] += 1;
            i += 1;
        }
        for i in 0..26 {
            if count[i] > 1 {
                res += right[i] - left[i];
            }
        }
        res

=======

        let mut count = 0;
        let mut left = vec![0; 26];
        let mut right = vec![0; 26];
        let mut seen = vec![0; 26];
        let mut chars = s.chars();
        let mut i = 0;
        while let Some(c) = chars.next() {
            let idx = (c as u8 - b'a') as usize;
            if left[idx] == 0 {
                left[idx] = i + 1;
            }
            right[idx] = i + 1;
            i += 1;
        }
        for i in 0..26 {
            if left[i] != 0 {
                let mut j = left[i];
                while j < right[i] {
                    let c = s.chars().nth(j - 1).unwrap();
                    let idx = (c as u8 - b'a') as usize;
                    if seen[idx] == 0 {
                        count += 1;
                        seen[idx] = 1;
                    }
                    j += 1;
                }
                seen = vec![0; 26];
            }
        }
        count
    }
}

=======

        let mut result = 0;
        let mut start = 0;
        let mut end = s.len() - 1;
        let mut left = [0; 26];
        let mut right = [0; 26];
        let mut mid = [0; 26];
        let mut s = s.as_bytes();
        while start <= end {
            left[(s[start] - b'a') as usize] += 1;
            right[(s[end] - b'a') as usize] += 1;
            start += 1;
            end -= 1;
        }
        start = 0;
        end = s.len() - 1;
        while start <= end {
            if start == end {
                mid[(s[start] - b'a') as usize] += 1;
            } else {
                mid[(s[start] - b'a') as usize] += 1;
                mid[(s[end] - b'a') as usize] += 1;
            }
            start += 1;
            end -= 1;
        }
        for i in 0..26 {
            if left[i] > 0 && right[i] > 0 {
                result += mid[i] - 2;
            }
        }
        result

=======

        let mut cnt = 0;
        let mut c = [0; 26];
        let mut f = [0; 26];
        let mut l = [0; 26];
        for (i, c) in s.chars().enumerate() {
            let i = (c as u8 - 'a' as u8) as usize;
            if c[i] == 0 {
                f[i] = i;
            }
            l[i] = i;
            c[i] += 1;
        }
        for i in 0..26 {
            if c[i] >= 2 {
                cnt += l[i] - f[i] - c[i] + 1;
            }
        }
        cnt

=======

        let mut count = 0;
        let n = s.len();
        let mut dp = vec![vec![0; n]; n];
        let mut map = vec![vec![0; 26]; n];
        let mut v = vec![0; 26];
        for i in 0..n {
            let c = s.chars().nth(i).unwrap() as usize - 'a' as usize;
            v[c] += 1;
            for j in 0..26 {
                map[i][j] = v[j];
            }
        }
        for i in 0..n {
            for j in i+2..n {
                if s.chars().nth(i) == s.chars().nth(j) {
                    for k in 0..26 {
                        if map[i][k] < map[j][k] {
                            count += 1;
                            break;
                        }
                    }
                }
            }
        }
        count
    }
}
