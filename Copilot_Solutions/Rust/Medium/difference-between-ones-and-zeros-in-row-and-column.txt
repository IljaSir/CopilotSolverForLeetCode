Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut ones_row = vec![0; m];
        let mut ones_col = vec![0; n];
        let mut zeros_row = vec![0; m];
        let mut zeros_col = vec![0; n];
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        let mut res = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                res[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        res
    }
}

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut ones_row = vec![0; m];
        let mut ones_col = vec![0; n];
        let mut zeros_row = vec![0; m];
        let mut zeros_col = vec![0; n];
        let mut diff = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                diff[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        diff
    }
}

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut ones_row = vec![0; m];
        let mut ones_col = vec![0; n];
        let mut zeros_row = vec![0; m];
        let mut zeros_col = vec![0; n];
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        let mut ans = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                ans[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        ans
    }
}

=======

        let mut ones_row: Vec<i32> = vec![0; grid.len()];
        let mut ones_col: Vec<i32> = vec![0; grid[0].len()];
        let mut zeros_row: Vec<i32> = vec![0; grid.len()];
        let mut zeros_col: Vec<i32> = vec![0; grid[0].len()];
        let mut diff: Vec<Vec<i32>> = vec![vec![0; grid[0].len()]; grid.len()];
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                diff[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        diff
    }
}

=======

        let mut diff = vec![vec![0; grid[0].len()]; grid.len()];
        let mut ones_row = vec![0; grid.len()];
        let mut ones_col = vec![0; grid[0].len()];
        let mut zeros_row = vec![0; grid.len()];
        let mut zeros_col = vec![0; grid[0].len()];
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                diff[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        diff
    }
}

=======

        let mut diff = vec![vec![0; grid[0].len()]; grid.len()];
        let mut ones_row = vec![0; grid.len()];
        let mut ones_col = vec![0; grid[0].len()];
        let mut zeros_row = vec![0; grid.len()];
        let mut zeros_col = vec![0; grid[0].len()];
        for (i, row) in grid.iter().enumerate() {
            for (j, &v) in row.iter().enumerate() {
                if v == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        for (i, row) in diff.iter_mut().enumerate() {
            for (j, v) in row.iter_mut().enumerate() {
                *v = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        diff
    }
}

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let mut ones_row = vec![0; m];
        let mut ones_col = vec![0; n];
        let mut zeros_row = vec![0; m];
        let mut zeros_col = vec![0; n];
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ones_row[i] += 1;
                    ones_col[j] += 1;
                } else {
                    zeros_row[i] += 1;
                    zeros_col[j] += 1;
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                grid[i][j] = ones_row[i] + ones_col[j] - zeros_row[i] - zeros_col[j];
            }
        }
        grid
    }
}

=======

        let mut result = vec![vec![0; grid[0].len()]; grid.len()];
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                let mut ones_row = 0;
                let mut ones_col = 0;
                let mut zeros_row = 0;
                let mut zeros_col = 0;
                for k in 0..grid.len() {
                    if grid[k][j] == 1 {
                        ones_row += 1;
                    } else {
                        zeros_row += 1;
                    }
                }
                for k in 0..grid[0].len() {
                    if grid[i][k] == 1 {
                        ones_col += 1;
                    } else {
                        zeros_col += 1;
                    }
                }
                result[i][j] = ones_row + ones_col - zeros_row - zeros_col;
            }
        }
        result
    }
}

=======

        
    }
}
