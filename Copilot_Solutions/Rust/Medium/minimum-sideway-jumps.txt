Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = obstacles.len();
        let mut dp = vec![vec![1; 3]; n];
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = 0;
        for i in 1..n {
            for j in 0..3 {
                if obstacles[i] == j as i32 + 1 {
                    dp[i][j] = 1 << 30;
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
            for j in 0..3 {
                if obstacles[i] != j as i32 + 1 {
                    for k in 0..3 {
                        if j != k {
                            dp[i][j] = dp[i][j].min(dp[i][k] + 1);
                        }
                    }
                }
            }
        }
        dp[n - 1][1].min(dp[n - 1][0].min(dp[n - 1][2]))

=======

        let mut dp = [1, 0, 1];
        for &o in obstacles.iter() {
            if o > 0 {
                dp[(o - 1) as usize] = 5_000_000;
            }
            for i in 0..3 {
                if i != (o - 1) as usize {
                    dp[i] = dp[i].min(dp[(i + 1) % 3].min(dp[(i + 2) % 3]) + 1);
                }
            }
        }
        dp[1].min(dp[0].min(dp[2]))

=======

        let mut dp = [1, 0, 1];
        for o in obstacles {
            if o > 0 {
                dp[o as usize - 1] = 5_000_000;
            }
            for i in 0..3 {
                if i + 1 != o as usize {
                    dp[i] = dp[i].min(dp[(i + 1) % 3].min(dp[(i + 2) % 3]) + 1);
                }
            }
        }
        dp[1]

=======

        let n = obstacles.len();
        let mut dp = vec![vec![1; 4]; n + 1];
        dp[0][2] = 0;
        for i in 1..n + 1 {
            let mut min = std::i32::MAX;
            for j in 1..=3 {
                if obstacles[i-1] != j {
                    min = min.min(dp[i-1][j]);
                }
            }
            for j in 1..=3 {
                if obstacles[i-1] != j {
                    dp[i][j] = min.min(dp[i][j]);
                }
            }
            for j in 1..=3 {
                if obstacles[i] != j {
                    dp[i][j] = dp[i][j].min(dp[i][j-1] + 1).min(dp[i][j+1] + 1);
                }
            }
        }
        dp[n][2]
