Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let n = nums.len();
        let mut prefix = vec![0; n + 1];
        for i in 0..n {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        let mut res = 0;
        for i in 0..n - 2 {
            let left = prefix[i + 1];
            let (mut l, mut r) = (i + 2, n - 1);
            while l <= r {
                let mid = (l + r) / 2;
                if prefix[mid] - left < left {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            let mut l = l;
            let (mut l, mut r) = (i + 2, n - 1);
            while l <= r {
                let mid = (l + r) / 2;
                if prefix[n] - prefix[mid] >= prefix[mid] - left {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            let mut r = r;
            if l <= r {
                res += r - l + 1;
                res %= 1000000007;
            }
        }
        res
