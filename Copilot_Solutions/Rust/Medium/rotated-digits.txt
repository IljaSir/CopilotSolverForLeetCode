Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 1..=n {
            if Self::is_good(i) {
                count += 1;
            }
        }
        count
    }
    fn is_good(n: i32) -> bool {
        let mut n = n;
        let mut is_good = false;
        while n > 0 {
            match n % 10 {
                2 | 5 | 6 | 9 => is_good = true,
                3 | 4 | 7 => return false,
                _ => {}
            }
            n /= 10;
        }
        is_good

=======

        let mut cnt = 0;
        for i in 1..=n {
            if Self::is_good(i) {
                cnt += 1;
            }
        }
        cnt
    }
    fn is_good(n: i32) -> bool {
        let mut n = n;
        let mut good = false;
        while n > 0 {
            let r = n % 10;
            if r == 3 || r == 4 || r == 7 {
                return false;
            } else if r == 2 || r == 5 || r == 6 || r == 9 {
                good = true;
            }
            n /= 10;
        }
        good

=======

        let mut count = 0;
        for i in 1..=n {
            let mut j = i;
            let mut good = false;
            while j > 0 {
                let digit = j % 10;
                if digit == 3 || digit == 4 || digit == 7 {
                    good = false;
                    break;
                }
                if digit == 2 || digit == 5 || digit == 6 || digit == 9 {
                    good = true;
                }
                j /= 10;
            }
            if good {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut sum = 0;
        for i in 1..=n {
            if Self::is_good(i) {
                sum += 1;
            }
        }
        sum
    }
    fn is_good(n: i32) -> bool {
        let mut n = n;
        let mut good = false;
        while n > 0 {
            let last = n % 10;
            n /= 10;
            match last {
                3 | 4 | 7 => return false,
                2 | 5 | 6 | 9 => good = true,
                _ => {}
            }
        }
        good

=======

        let mut count = 0;
        for i in 1..=n {
            let mut valid = false;
            let mut x = i;
            while x > 0 {
                let digit = x % 10;
                if digit == 3 || digit == 4 || digit == 7 {
                    valid = false;
                    break;
                } else if digit == 2 || digit == 5 || digit == 6 || digit == 9 {
                    valid = true;
                }
                x /= 10;
            }
            if valid {
                count += 1;
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 1..=n {
            let mut is_good = false;
            let mut j = i;
            while j > 0 {
                let digit = j % 10;
                if digit == 3 || digit == 4 || digit == 7 {
                    is_good = false;
                    break;
                }
                if digit == 2 || digit == 5 || digit == 6 || digit == 9 {
                    is_good = true;
                }
                j /= 10;
            }
            if is_good {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        for i in 1..=n {
            let mut flag = false;
            let mut j = i;
            while j > 0 {
                let d = j % 10;
                if d == 3 || d == 4 || d == 7 {
                    flag = false;
                    break;
                } else if d == 2 || d == 5 || d == 6 || d == 9 {
                    flag = true;
                }
                j /= 10;
            }
            if flag {
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut cnt = 0;
        for i in 1..=n {
            let mut x = i;
            let mut valid = false;
            while x > 0 {
                let d = x % 10;
                if d == 3 || d == 4 || d == 7 {
                    valid = false;
                    break;
                }
                if d == 2 || d == 5 || d == 6 || d == 9 {
                    valid = true;
                }
                x /= 10;
            }
            if valid {
                cnt += 1;
            }
        }
        cnt

=======

        let mut result = 0;
        for i in 1..=n {
            let mut j = i;
            let mut valid = false;
            while j > 0 {
                let d = j % 10;
                if d == 3 || d == 4 || d == 7 {
                    valid = false;
                    break;
                }
                if d == 2 || d == 5 || d == 6 || d == 9 {
                    valid = true;
                }
                j /= 10;
            }
            if valid {
                result += 1;
            }
        }
        result

=======

        let mut counter = 0;
        for i in 1..=n {
            let mut c = i;
            let mut valid = false;
            while c > 0 {
                let digit = c % 10;
                if digit == 3 || digit == 4 || digit == 7 {
                    valid = false;
                    break;
                } else if digit == 2 || digit == 5 || digit == 6 || digit == 9 {
                    valid = true;
                }
                c /= 10;
            }
            if valid {
                counter += 1;
            }
        }
        counter
    }
}
