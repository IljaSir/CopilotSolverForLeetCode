Synthesizing 9/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for k in knowledge {
            map.insert(k[0].clone(), k[1].clone());
        }
        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while j < s.len() && s[j..].starts_with(')') == false {
                    j += 1;
                }
                if j < s.len() {
                    if let Some(k) = map.get(&s[i + 1..j]) {
                        res.push_str(k);
                    } else {
                        res.push('?');
                    }
                    i = j + 1;
                } else {
                    res.push('(');
                    i += 1;
                }
            } else {
                res.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        res
    }
}

=======

        let mut knowledge_map = std::collections::HashMap::new();
        for pair in knowledge {
            knowledge_map.insert(pair[0].clone(), pair[1].clone());
        }
        let mut result = String::new();
        let mut i = 0;
        while i < s.len() {
            let c = s.chars().nth(i).unwrap();
            if c == '(' {
                let mut key = String::new();
                i += 1;
                while i < s.len() {
                    let c = s.chars().nth(i).unwrap();
                    if c == ')' {
                        break;
                    }
                    key.push(c);
                    i += 1;
                }
                if let Some(value) = knowledge_map.get(&key) {
                    result.push_str(value);
                } else {
                    result.push('?');
                }
            } else {
                result.push(c);
            }
            i += 1;
        }
        result

=======

        let mut map = std::collections::HashMap::new();
        for i in knowledge {
            map.insert(i[0].clone(), i[1].clone());
        }
        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while s[j..].starts_with('(') {
                    j += 1;
                }
                let mut k = j + 1;
                while s[k..].starts_with('(') {
                    k += 1;
                }
                res.push_str(map.get(&s[j..k]).unwrap_or(&"?".to_string()));
                i = k + 1;
            } else {
                res.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        res
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for k in knowledge {
            map.insert(k[0].clone(), k[1].clone());
        }
        let mut ans = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while j < s.len() && s[j..].starts_with(')') == false {
                    j += 1;
                }
                let key = s[i+1..j].to_string();
                ans.push_str(map.get(&key).unwrap_or(&"?".to_string()));
                i = j + 1;
            } else {
                ans.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for k in knowledge {
            map.insert(k[0].clone(), k[1].clone());
        }
        let mut ret = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while s[j..].starts_with(')') == false {
                    j += 1;
                }
                let key = &s[i + 1..j];
                match map.get(key) {
                    Some(v) => ret.push_str(v),
                    None => ret.push('?'),
                }
                i = j + 1;
            } else {
                ret.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        ret
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while j < s.len() && s[j..].starts_with(')') == false {
                    j += 1;
                }
                let key = &s[i + 1..j];
                let value = knowledge.iter().find(|x| x[0] == key).map_or("?", |x| &x[1]);
                res.push_str(value);
                i = j + 1;
            } else {
                res.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        res

=======

        let mut s = s;
        for pair in knowledge {
            let key = format!("({})", pair[0]);
            s = s.replace(&key, &pair[1]);
        }
        s.replace("(", "?").replace(")", "?")

=======

        let mut m = std::collections::HashMap::new();
        for i in knowledge {
            m.insert(i[0].clone(), i[1].clone());
        }
        let mut r = String::new();
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with('(') {
                let mut j = i + 1;
                while s[j..].starts_with('(') {
                    j += 1;
                }
                let mut k = j + 1;
                while k < s.len() && !s[k..].starts_with(')') {
                    k += 1;
                }
                r.push_str(&m.get(&s[j..k]).unwrap_or(&"?".to_string()));
                i = k + 1;
            } else {
                r.push(s[i..].chars().next().unwrap());
                i += 1;
            }
        }
        r

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let mut i = 0;
        let mut map = std::collections::HashMap::new();
        for a in knowledge {
            map.insert(a[0].clone(), a[1].clone());
        }
        while i < s.len() {
            if s[i] == '(' {
                let mut j = i + 1;
                while s[j] != ')' {
                    j += 1;
                }
                let key = s[i + 1..j].iter().collect::<String>();
                if let Some(value) = map.get(&key) {
                    s[i..=j].clone_from_slice(value.as_bytes());
                } else {
                    s[i..=j].clone_from_slice(b"?");
                }
                i += value.len();
            } else {
                i += 1;
            }
        }
        s.iter().collect()
