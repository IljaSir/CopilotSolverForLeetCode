Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() {
            let mut j = i + 1;
            let mut k = nums.len() - 1;
            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                if (target - sum).abs() < (target - ans).abs() {
                    ans = sum;
                }
                if sum < target {
                    j += 1;
                } else if sum > target {
                    k -= 1;
                } else {
                    return ans;
                }
            }
        }
        ans

=======
Suggestion 2

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() {
            let mut j = i + 1;
            let mut k = nums.len() - 1;
            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                if (sum - target).abs() < (ans - target).abs() {
                    ans = sum;
                }
                if sum > target {
                    k -= 1;
                } else if sum < target {
                    j += 1;
                } else {
                    return ans;
                }
            }
        }
        ans

=======
Suggestion 3

        let mut nums = nums;
        nums.sort();
        let mut res = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() {
            let mut l = i + 1;
            let mut r = nums.len() - 1;
            while l < r {
                let sum = nums[i] + nums[l] + nums[r];
                if sum == target {
                    return target;
                }
                if (sum - target).abs() < (res - target).abs() {
                    res = sum;
                }
                if sum > target {
                    r -= 1;
                } else {
                    l += 1;
                }
            }
        }
        res

=======
Suggestion 4

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() - 2 {
            let mut j = i + 1;
            let mut k = nums.len() - 1;
            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                if (sum - target).abs() < (ans - target).abs() {
                    ans = sum;
                }
                if sum > target {
                    k -= 1;
                } else {
                    j += 1;
                }
            }
        }
        ans

=======
Suggestion 5

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() {
            let mut start = i + 1;
            let mut end = nums.len() - 1;
            while start < end {
                let sum = nums[i] + nums[start] + nums[end];
                if sum > target {
                    end -= 1;
                } else {
                    start += 1;
                }
                if (target - sum).abs() < (target - ans).abs() {
                    ans = sum;
                }
            }
        }
        ans

=======
Suggestion 6

        let mut nums = nums;
        nums.sort_unstable();
        let mut res = nums[0] + nums[1] + nums[2];
        for i in 0..nums.len() {
            let mut l = i + 1;
            let mut r = nums.len() - 1;
            while l < r {
                let sum = nums[i] + nums[l] + nums[r];
                if (target - sum).abs() < (target - res).abs() {
                    res = sum;
                }
                if sum > target {
                    r -= 1;
                } else {
                    l += 1;
                }
            }
        }
        res

=======
Suggestion 7

        let mut nums = nums;
        nums.sort();
        let mut res = nums[0] + nums[1] + nums[2];
        let mut min = (res - target).abs();
        for i in 0..nums.len() - 2 {
            let mut j = i + 1;
            let mut k = nums.len() - 1;
            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                if (sum - target).abs() < min {
                    res = sum;
                    min = (sum - target).abs();
                }
                if sum > target {
                    k -= 1;
                } else if sum < target {
                    j += 1;
                } else {
                    return sum;
                }
            }
        }
        res

=======
Suggestion 8

        let mut nums = nums;
        let mut ret = 0;
        let mut diff = i32::max_value();
        nums.sort();
        for i in 0..nums.len() - 2 {
            let mut j = i + 1;
            let mut k = nums.len() - 1;
            while j < k {
                let sum = nums[i] + nums[j] + nums[k];
                if sum == target {
                    return sum;
                }
                if (sum - target).abs() < diff {
                    diff = (sum - target).abs();
                    ret = sum;
                }
                if sum > target {
                    k -= 1;
                } else {
                    j += 1;
                }
            }
        }
        ret
    }
}

=======
Suggestion 9

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut mindiff = i32::MAX;
        for i in 0..nums.len() {
            let mut left = i + 1;
            let mut right = nums.len() - 1;
            while left < right {
                let sum = nums[i] + nums[left] + nums[right];
                let diff = (target - sum).abs();
                if diff < mindiff {
                    mindiff = diff;
                    res = sum;
                }
                if sum < target {
                    left += 1;
                } else {
                    right -= 1;
                }
            }
        }
        res

=======
Suggestion 10

        let mut nums = nums;
        nums.sort();
        let mut min = 1000;
        let mut res = 0;
        for i in 0..nums.len() - 2 {
            let mut left = i + 1;
            let mut right = nums.len() - 1;
            while left < right {
                let sum = nums[i] + nums[left] + nums[right];
                let diff = (target - sum).abs();
                if diff < min {
                    min = diff;
                    res = sum;
                }
                if sum < target {
                    left += 1;
                } else {
                    right -= 1;
                }
            }
        }
        res
