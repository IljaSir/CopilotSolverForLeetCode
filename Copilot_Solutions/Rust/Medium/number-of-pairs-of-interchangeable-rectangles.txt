Synthesizing 8/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for r in rectangles {
            let ratio = r[0] as f64 / r[1] as f64;
            *map.entry(ratio).or_insert(0) += 1;
        }
        let mut count = 0;
        for (_, v) in map {
            count += v * (v - 1) / 2;
        }
        count

=======

        use std::collections::HashMap;
        let mut map: HashMap<f64, i64> = HashMap::new();
        let mut count = 0;
        for rect in rectangles {
            let ratio = rect[0] as f64 / rect[1] as f64;
            if let Some(v) = map.get_mut(&ratio) {
                count += *v;
                *v += 1;
            } else {
                map.insert(ratio, 1);
            }
        }
        count

=======

        let mut map = std::collections::HashMap::new();
        let mut result = 0;
        for rect in rectangles {
            let ratio = rect[0] as f64 / rect[1] as f64;
            let count = map.entry(ratio).or_insert(0);
            result += *count;
            *count += 1;
        }
        result

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for r in rectangles {
            let x = r[0];
            let y = r[1];
            let g = gcd(x, y);
            let x = x / g;
            let y = y / g;
            *map.entry((x, y)).or_insert(0) += 1;
        }
        let mut ans = 0i64;
        for (_, v) in map.iter() {
            ans += v * (v - 1) / 2;
        }
        ans
    }
}

=======

        let mut m = std::collections::HashMap::new();
        let mut cnt = 0;
        for r in rectangles {
            let k = r[0] as f64 / r[1] as f64;
            if let Some(n) = m.get_mut(&k) {
                cnt += *n;
                *n += 1;
            } else {
                m.insert(k, 1);
            }
        }
        cnt
    }
}

=======

        let mut map = std::collections::HashMap::new();
        let mut count = 0;
        for r in rectangles {
            let k = (r[0] as f64 / r[1] as f64) as f64;
            let v = map.entry(k).or_insert(0);
            count += *v;
            *v += 1;
        }
        count

=======

        let mut m: std::collections::HashMap<(i32, i32), i64> = std::collections::HashMap::new();
        let mut count = 0;
        for r in rectangles.iter() {
            let g = gcd(r[0], r[1]);
            let key = (r[0]/g, r[1]/g);
            let v = m.entry(key).or_default();
            count += *v;
            *v += 1;
        }
        count
    }
}

=======

        
    }
}
