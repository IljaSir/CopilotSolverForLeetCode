Synthesizing 4/10 solutions

=======
Suggestion 1

        let mut result = vec![];
        let mut used = vec![false; nums.len()];
        let mut path = vec![];
        Self::backtrack(&nums, &mut used, &mut path, &mut result);
        result
    }
    fn backtrack(nums: &Vec<i32>, used: &mut Vec<bool>, path: &mut Vec<i32>, result: &mut Vec<Vec<i32>>) {
        if path.len() == nums.len() {
            result.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if used[i] {
                continue;
            }
            path.push(nums[i]);
            used[i] = true;
            Self::backtrack(nums, used, path, result);
            path.pop();
            used[i] = false;
        }
    }
}

=======
Suggestion 2

        let mut result = Vec::new();
        let mut nums = nums;
        Self::permute_helper(&mut nums, 0, &mut result);
        result
    }
    
    fn permute_helper(nums: &mut Vec<i32>, start: usize, result: &mut Vec<Vec<i32>>) {
        if start == nums.len() {
            result.push(nums.to_vec());
        }
        for i in start..nums.len() {
            nums.swap(start, i);
            Self::permute_helper(nums, start+1, result);
            nums.swap(start, i);
        }
    }
}

=======
Suggestion 3

        let mut result = Vec::new();
        Self::helper(&nums, &mut result, 0);
        result
    }
    
    fn helper(nums: &[i32], result: &mut Vec<Vec<i32>>, i: usize) {
        if i == nums.len() - 1 {
            result.push(nums.to_vec());
        } else {
            for j in i..nums.len() {
                let mut nums = nums.to_vec();
                nums.swap(i, j);
                Self::helper(&nums, result, i + 1);
            }
        }
    }
}

=======
Suggestion 4

        let mut nums = nums;
        let mut res = vec![];
        let mut used = vec![false; nums.len()];
        let mut path = vec![];
        Self::backtrack(&mut nums, &mut used, &mut path, &mut res);
        res
    }
    fn backtrack(nums: &mut Vec<i32>, used: &mut Vec<bool>, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if path.len() == nums.len() {
            res.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if !used[i] {
                used[i] = true;
                path.push(nums[i]);
                Self::backtrack(nums, used, path, res);
                path.pop();
                used[i] = false;
            }
        }
    }
}
