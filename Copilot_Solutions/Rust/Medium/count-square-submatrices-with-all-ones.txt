Synthesizing 10/10 solutions

=======

        let (m, n) = (matrix.len(), matrix[0].len());
        let mut dp = vec![vec![0; n + 1]; m + 1];
        let mut ans = 0;
        for i in 1..=m {
            for j in 1..=n {
                if matrix[i - 1][j - 1] == 1 {
                    dp[i][j] = 1 + dp[i - 1][j].min(dp[i][j - 1]).min(dp[i - 1][j - 1]);
                    ans += dp[i][j];
                }
            }
        }
        ans

=======

        let m = matrix.len();
        let n = matrix[0].len();
        let mut dp = vec![vec![0; n + 1]; m + 1];
        let mut res = 0;
        for i in 1..=m {
            for j in 1..=n {
                if matrix[i - 1][j - 1] == 1 {
                    dp[i][j] = 1 + dp[i - 1][j].min(dp[i][j - 1]).min(dp[i - 1][j - 1]);
                    res += dp[i][j];
                }
            }
        }
        res
    }
}

=======

        let mut dp = vec![vec![0; matrix[0].len()]; matrix.len()];
        let mut ans = 0;
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if matrix[i][j] == 1 {
                    if i == 0 || j == 0 {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = 1 + dp[i - 1][j].min(dp[i][j - 1]).min(dp[i - 1][j - 1]);
                    }
                    ans += dp[i][j];
                }
            }
        }
        ans

=======

        let mut dp = vec![vec![0; matrix[0].len()]; matrix.len()];
        let mut res = 0;
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if matrix[i][j] == 1 {
                    if i == 0 || j == 0 {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = vec![dp[i-1][j-1], dp[i-1][j], dp[i][j-1]].iter().min().unwrap() + 1;
                    }
                    res += dp[i][j];
                }
            }
        }
        res
    }
}

=======

        let mut dp = vec![vec![0; matrix[0].len()]; matrix.len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if matrix[i][j] == 1 {
                    if i == 0 || j == 0 {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = 1 + dp[i - 1][j].min(dp[i][j - 1]).min(dp[i - 1][j - 1]);
                    }
                }
            }
        }
        let mut res = 0;
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                res += dp[i][j];
            }
        }
        res

=======

        let mut dp = vec![vec![0; matrix[0].len()]; matrix.len()];
        let mut result = 0;
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if i == 0 || j == 0 {
                    dp[i][j] = matrix[i][j];
                } else if matrix[i][j] == 1 {
                    dp[i][j] = 1 + std::cmp::min(std::cmp::min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]);
                }
                result += dp[i][j];
            }
        }
        result
    }
}

=======

        let mut ans = 0;
        let m = matrix.len();
        let n = matrix[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    if i == 0 || j == 0 {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = (dp[i - 1][j - 1].min(dp[i - 1][j].min(dp[i][j - 1]))) + 1;
                    }
                }
                ans += dp[i][j];
            }
        }
        ans

=======

        let mut res = 0;
        let m = matrix.len();
        let n = matrix[0].len();
        let mut dp = vec![vec![0; n+1]; m+1];
        for i in 1..=m {
            for j in 1..=n {
                if matrix[i-1][j-1] == 1 {
                    dp[i][j] = 1 + dp[i-1][j].min(dp[i][j-1]).min(dp[i-1][j-1]);
                    res += dp[i][j];
                }
            }
        }
        res
    }
}

=======

        let mut res = 0;
        let mut dp = matrix.clone();
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if matrix[i][j] == 1 {
                    if i > 0 && j > 0 {
                        dp[i][j] = (dp[i-1][j-1].min(dp[i-1][j])).min(dp[i][j-1]) + 1;
                    }
                    res += dp[i][j];
                }
            }
        }
        res

=======

        let mut count: i32 = 0;
        let mut dp = vec![vec![0; matrix[0].len()]; matrix.len()];
        for i in 0..matrix.len() {
            for j in 0..matrix[0].len() {
                if i == 0 || j == 0 {
                    dp[i][j] = matrix[i][j];
                } else if matrix[i][j] == 1 {
                    dp[i][j] = 1 + std::cmp::min(dp[i - 1][j - 1], std::cmp::min(dp[i - 1][j], dp[i][j - 1]));
                }
                count += dp[i][j];
            }
        }
        count
    }
}
