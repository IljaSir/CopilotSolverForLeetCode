Synthesizing 9/10 solutions

=======

        let mut cnt = [0; 3];
        let mut res = 0;
        let (mut l, mut r) = (0, 0);
        while r < s.len() {
            cnt[s.as_bytes()[r] as usize - 'a' as usize] += 1;
            while cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0 {
                cnt[s.as_bytes()[l] as usize - 'a' as usize] -= 1;
                l += 1;
            }
            res += l;
            r += 1;
        }
        res as i32

=======

        let mut left = 0;
        let mut right = 0;
        let mut res = 0;
        let mut count = vec![0; 3];
        while right < s.len() {
            count[(s.as_bytes()[right] - b'a') as usize] += 1;
            while count[0] > 0 && count[1] > 0 && count[2] > 0 {
                count[(s.as_bytes()[left] - b'a') as usize] -= 1;
                left += 1;
            }
            res += left;
            right += 1;
        }
        res as i32

=======

        let mut count = 0;
        let mut start = 0;
        let mut end = 0;
        let mut count_a = 0;
        let mut count_b = 0;
        let mut count_c = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        while end < s.len() {
            let end_char = s[end];
            match end_char {
                'a' => count_a += 1,
                'b' => count_b += 1,
                'c' => count_c += 1,
                _ => unreachable!(),
            }
            if count_a > 0 && count_b > 0 && count_c > 0 {
                count += s.len() - end;
                let start_char = s[start];
                match start_char {
                    'a' => count_a -= 1,
                    'b' => count_b -= 1,
                    'c' => count_c -= 1,
                    _ => unreachable!(),
                }
                start += 1;
            } else {
                end += 1;
            }
        }
        count as i32
    }
}

=======

        let mut res = 0;
        let mut cnt = [0; 3];
        let mut left = 0;
        let mut right = 0;
        while right < s.len() {
            cnt[s.as_bytes()[right] as usize - 97] += 1;
            while cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0 {
                cnt[s.as_bytes()[left] as usize - 97] -= 1;
                left += 1;
            }
            res += left;
            right += 1;
        }
        res as i32

=======

        let mut cnt = vec![0; 3];
        let mut ans = 0;
        let s = s.as_bytes();
        let mut j = 0;
        for i in 0..s.len() {
            cnt[(s[i] - b'a') as usize] += 1;
            while cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0 {
                cnt[(s[j] - b'a') as usize] -= 1;
                j += 1;
            }
            ans += j as i32;
        }
        ans

=======

        let mut count = [0; 3];
        let mut res = 0;
        let mut j = 0;
        let mut k = 0;
        for (i, c) in s.as_bytes().iter().enumerate() {
            count[*c as usize - 97] += 1;
            while count[0] > 0 && count[1] > 0 && count[2] > 0 {
                count[s.as_bytes()[j] as usize - 97] -= 1;
                j += 1;
            }
            k = i + 1;
            res += k - j;
        }
        res as i32

=======

        let mut c = [0; 3];
        let mut r = 0;
        let mut res = 0;
        for (l, b) in s.bytes().enumerate() {
            c[(b - b'a') as usize] += 1;
            while c[0] > 0 && c[1] > 0 && c[2] > 0 {
                c[(s.as_bytes()[r] - b'a') as usize] -= 1;
                r += 1;
            }
            res += r;
        }
        res as i32
    }
}

=======

        let mut nums = vec![0; 3];
        let mut start = 0;
        let mut ans = 0;
        let mut count = 0;
        for (i, c) in s.chars().enumerate() {
            nums[c as usize - 'a' as usize] += 1;
            if nums[c as usize - 'a' as usize] == 1 {
                count += 1;
            }
            while count == 3 {
                nums[s.chars().nth(start).unwrap() as usize - 'a' as usize] -= 1;
                if nums[s.chars().nth(start).unwrap() as usize - 'a' as usize] == 0 {
                    count -= 1;
                }
                start += 1;
            }
            ans += start;
        }
        ans as i32

=======

        let mut result = 0;
        let mut counts = [0; 3];
        let mut start = 0;
        let mut end = 0;
        let mut found = 0;
        let s = s.as_bytes();
        while end < s.len() {
            let c = s[end] as usize - 'a' as usize;
            if counts[c] == 0 {
                found += 1;
            }
            counts[c] += 1;
            while found == 3 {
                let c = s[start] as usize - 'a' as usize;
                result += s.len() - end;
                counts[c] -= 1;
                if counts[c] == 0 {
                    found -= 1;
                }
                start += 1;
            }
            end += 1;
        }
        result as i32
