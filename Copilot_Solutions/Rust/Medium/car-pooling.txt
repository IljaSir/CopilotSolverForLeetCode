Synthesizing 10/10 solutions

=======

        let mut stops = vec![0; 1001];
        for trip in trips {
            stops[trip[1] as usize] += trip[0];
            stops[trip[2] as usize] -= trip[0];
        }
        let mut cur = 0;
        for stop in stops {
            cur += stop;
            if cur > capacity {
                return false;
            }
        }
        true

=======

        let mut passengers = vec![0; 1001];
        for trip in trips {
            passengers[trip[1] as usize] += trip[0];
            passengers[trip[2] as usize] -= trip[0];
        }
        let mut capacity = capacity;
        for p in passengers {
            capacity -= p;
            if capacity < 0 {
                return false;
            }
        }
        true

=======

        let mut dp = vec![0; 1001];
        for trip in trips {
            dp[trip[1] as usize] += trip[0];
            dp[trip[2] as usize] -= trip[0];
        }
        let mut sum = 0;
        for i in 0..1001 {
            sum += dp[i];
            if sum > capacity {
                return false;
            }
        }
        true

=======

        let mut stops = [0; 1001];
        for trip in trips {
            stops[trip[1] as usize] += trip[0];
            stops[trip[2] as usize] -= trip[0];
        }
        let mut sum = 0;
        for stop in stops.iter() {
            sum += stop;
            if sum > capacity {
                return false;
            }
        }
        true

=======

        let mut arr = vec![0; 1001];
        for trip in trips {
            arr[trip[1] as usize] += trip[0];
            arr[trip[2] as usize] -= trip[0];
        }
        let mut sum = 0;
        for i in arr {
            sum += i;
            if sum > capacity {
                return false;
            }
        }
        true

=======

        let mut counts = vec![0; 1001];
        for trip in trips {
            counts[trip[1] as usize] += trip[0];
            counts[trip[2] as usize] -= trip[0];
        }
        let mut cur = 0;
        for count in counts {
            cur += count;
            if cur > capacity {
                return false;
            }
        }
        true

=======

        let mut times = vec![0; 1001];
        for trip in trips {
            times[trip[1] as usize] += trip[0];
            times[trip[2] as usize] -= trip[0];
        }
        let mut now = 0;
        for time in times {
            now += time;
            if now > capacity {
                return false;
            }
        }
        true

=======

        let mut record = vec![0; 1001];
        for trip in trips {
            record[trip[1] as usize] += trip[0];
            record[trip[2] as usize] -= trip[0];
        }
        let mut sum = 0;
        for i in 0..1001 {
            sum += record[i];
            if sum > capacity {
                return false;
            }
        }
        true

=======

        let mut events = vec![];
        for trip in trips {
            events.push((trip[1], trip[0]));
            events.push((trip[2], -trip[0]));
        }
        events.sort_by_key(|x| x.0);
        let mut cur = 0;
        for event in events {
            cur += event.1;
            if cur > capacity {
                return false;
            }
        }
        true

=======

        let mut max = 0;
        let mut arr = vec![0; 1001];
        for i in 0..trips.len() {
            arr[trips[i][1] as usize] += trips[i][0];
            arr[trips[i][2] as usize] -= trips[i][0];
            if trips[i][2] > max { max = trips[i][2]; }
        }
        let mut sum = 0;
        for i in 0..=max as usize {
            sum += arr[i];
            if sum > capacity { return false; }
        }
        true
