Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 1..=n {
            if n % i == 0 {
                count += 1;
                if count == k {
                    return i;
                }
            }
        }
        -1

=======

        let mut count = 0;
        for i in 1..n+1 {
            if n % i == 0 {
                count += 1;
                if count == k {
                    return i;
                }
            }
        }
        return -1;

=======

        let mut i = 1;
        let mut count = 0;
        while i * i <= n {
            if n % i == 0 {
                count += 1;
                if count == k {
                    return i;
                }
            }
            i += 1;
        }
        i -= 1;
        if i * i == n {
            i -= 1;
        }
        while i > 0 {
            if n % i == 0 {
                count += 1;
                if count == k {
                    return n / i;
                }
            }
            i -= 1;
        }
        -1

=======

        let mut i = 1;
        let mut count = 0;
        while i <= n {
            if n % i == 0 {
                count += 1;
                if count == k {
                    return i;
                }
            }
            i += 1;
        }
        -1

=======

        let mut factors = vec![];
        for i in 1..=n {
            if n % i == 0 {
                factors.push(i);
            }
            if factors.len() == k as usize {
                return factors[k as usize - 1];
            }
        }
        -1

=======

        let mut res = -1;
        for i in 1..=n {
            if n % i == 0 {
                if k == 1 {
                    res = i;
                    break;
                } else {
                    res = i;
                    k -= 1;
                }
            }
        }
        res

=======

        let mut res = -1;
        for i in 1..=n {
            if n % i == 0 {
                if k == 1 {
                    res = i;
                    break;
                } else {
                    res = -1;
                }
                k -= 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut cnt = 0;
        for i in 1..=n {
            if n % i == 0 {
                cnt += 1;
                if cnt == k {
                    res = i;
                    break;
                }
            }
        }
        if cnt < k {
            -1
        } else {
            res
        }

=======

        let mut k = k;
        let mut i = 1;
        while k > 0 && i * i <= n {
            if n % i == 0 {
                k -= 1;
                if k == 0 {
                    return i;
                }
            }
            i += 1;
        }
        i -= 1;
        while i > 0 {
            if n % i == 0 {
                k -= 1;
                if k == 0 {
                    return n / i;
                }
            }
            i -= 1;
        }
        -1
