Synthesizing 7/10 solutions

=======
Suggestion 1

        let mut map: std::collections::HashMap<String, Vec<String>> = std::collections::HashMap::new();
        for s in strs {
            let mut chars: Vec<char> = s.chars().collect();
            chars.sort();
            let key = chars.into_iter().collect();
            map.entry(key).or_insert(vec![]).push(s);
        }
        map.into_iter().map(|(_, v)| v).collect()

=======
Suggestion 2

        let mut map: std::collections::HashMap<String, Vec<String>> = std::collections::HashMap::new();
        for s in strs {
            let mut v: Vec<char> = s.chars().collect();
            v.sort();
            let k = v.into_iter().collect::<String>();
            if let Some(v) = map.get_mut(&k) {
                v.push(s);
            } else {
                map.insert(k, vec![s]);
            }
        }
        let mut result: Vec<Vec<String>> = Vec::new();
        for (_, v) in map {
            result.push(v);
        }
        result
    }
}

=======
Suggestion 3

        let mut map: HashMap<Vec<char>, Vec<String>> = HashMap::new();
        for s in strs {
            let mut key: Vec<char> = s.chars().collect();
            key.sort();
            match map.get_mut(&key) {
                Some(v) => v.push(s),
                None => { map.insert(key, vec![s]); },
            }
        }
        map.values().map(|v| v.clone()).collect()

=======
Suggestion 4

        let mut map = std::collections::HashMap::new();
        for s in strs {
            let mut v = s.chars().collect::<Vec<char>>();
            v.sort();
            let key = v.into_iter().collect::<String>();
            map.entry(key).or_insert(Vec::new()).push(s);
        }
        map.values().map(|v| v.clone()).collect()
    }
}

=======
Suggestion 5

        let mut map = std::collections::HashMap::new();
        for s in strs {
            let mut key = vec![0; 26];
            for c in s.chars() {
                key[(c as usize) - 97] += 1;
            }
            map.entry(key).or_insert(Vec::new()).push(s);
        }
        map.values().map(|v| v.clone()).collect()

=======
Suggestion 6

        let mut result: Vec<Vec<String>> = Vec::new();
        let mut map: std::collections::HashMap<String, Vec<String>> = std::collections::HashMap::new();
        for s in strs {
            let mut key: Vec<char> = s.chars().collect();
            key.sort();
            let key = key.into_iter().collect();
            if let Some(v) = map.get_mut(&key) {
                v.push(s);
            } else {
                map.insert(key, vec![s]);
            }
        }
        for (_, v) in map {
            result.push(v);
        }
        result
    }
}

=======
Suggestion 7

        let mut result: Vec<Vec<String>> = Vec::new();
        let mut map: HashMap<String, usize> = HashMap::new();
        for str in strs {
            let mut chars: Vec<char> = str.chars().collect();
            chars.sort();
            let key = chars.into_iter().collect();
            if map.contains_key(&key) {
                result[map[&key]].push(str);
            } else {
                result.push(vec![str]);
                map.insert(key, result.len() - 1);
            }
        }
        result
    }
}
