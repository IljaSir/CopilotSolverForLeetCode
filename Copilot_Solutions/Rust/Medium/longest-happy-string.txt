Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut a = a;
        let mut b = b;
        let mut c = c;
        let mut res = String::new();
        while a > 0 || b > 0 || c > 0 {
            let mut used_a = false;
            let mut used_b = false;
            let mut used_c = false;
            if (a >= b && a >= c && a > 0) || (a > 0 && (res.ends_with("aa") || res.ends_with("bb") || res.ends_with("cc"))) {
                res.push('a');
                a -= 1;
                used_a = true;
            }
            if (b >= a && b >= c && b > 0) || (b > 0 && (res.ends_with("aa") || res.ends_with("bb") || res.ends_with("cc"))) {
                res.push('b');
                b -= 1;
                used_b = true;
            }
            if (c >= a && c >= b && c > 0) || (c > 0 && (res.ends_with("aa") || res.ends_with("bb") || res.ends_with("cc"))) {
                res.push('c');
                c -= 1;
                used_c = true;
            }
            if used_a && used_b && used_c {
                break;
            }
        }
        res
    }
}

=======

        let mut v = vec![('a', a), ('b', b), ('c', c)];
        let mut res = String::new();
        while v[0].1 > 0 || v[1].1 > 0 || v[2].1 > 0 {
            v.sort_by(|x, y| y.1.cmp(&x.1));
            let mut i = 0;
            while i < 2 && v[i].1 == 0 {
                i += 1;
            }
            let mut j = i + 1;
            while j < 3 && v[j].1 == 0 {
                j += 1;
            }
            if v[i].1 >= 2 && (v[i].0 != res.chars().last().unwrap_or(' ') || j == 3) {
                res.push(v[i].0);
                res.push(v[i].0);
                v[i].1 -= 2;
            } else {
                res.push(v[i].0);
                v[i].1 -= 1;
            }
        }
        res

=======

        let mut count = vec![(a, 'a'), (b, 'b'), (c, 'c')];
        count.sort_by(|a, b| b.0.cmp(&a.0));
        let mut res = String::new();
        let mut prev = ' ';
        let mut prev_count = 0;
        while count[0].0 > 0 {
            let mut i = 0;
            while i < 3 && (count[i].0 == 0 || (count[i].1 == prev && prev_count == 2)) {
                i += 1;
            }
            if i == 3 {
                break;
            }
            res.push(count[i].1);
            count[i].0 -= 1;
            if count[i].1 == prev {
                prev_count += 1;
            } else {
                prev = count[i].1;
                prev_count = 1;
            }
        }
        res
    }
}

=======

        let mut a = a;
        let mut b = b;
        let mut c = c;
        let mut res = String::new();
        let mut last = ' ';
        while a > 0 || b > 0 || c > 0 {
            if a > b && a > c && (last != 'a' || (last == 'a' && b == 0 && c == 0)) {
                res.push('a');
                a -= 1;
                last = 'a';
            } else if b > c && (last != 'b' || (last == 'b' && a == 0 && c == 0)) {
                res.push('b');
                b -= 1;
                last = 'b';
            } else if c > 0 && (last != 'c' || (last == 'c' && a == 0 && b == 0)) {
                res.push('c');
                c -= 1;
                last = 'c';
            } else if a > 0 && (last != 'a' || (last == 'a' && b == 0 && c == 0)) {
                res.push('a');
                a -= 1;
                last = 'a';
            } else if b > 0 && (last != 'b' || (last == 'b' && a == 0 && c == 0)) {
                res.push('b');
                b -= 1;
                last = 'b';
            } else if c > 0 && (last != 'c' || (last == 'c' && a == 0 && b == 0)) {
                res.push('c');
                c -= 1;
                last = 'c';
            } else {
                break;
            }
        }
        res

=======

        let mut arr = vec![(a, 'a'), (b, 'b'), (c, 'c')];
        let mut res = String::new();
        loop {
            arr.sort();
            if arr[2].0 == 0 { break; }
            if arr[2].0 >= 2 && arr[1].0 > 0 {
                res.push(arr[2].1);
                res.push(arr[2].1);
                arr[2].0 -= 2;
                arr[1].0 -= 1;
            } else {
                res.push(arr[2].1);
                arr[2].0 -= 1;
            }
        }
        res

=======

        let mut res = String::new();
        let mut last = 0;
        let mut a = a;
        let mut b = b;
        let mut c = c;
        while a > 0 || b > 0 || c > 0 {
            if a >= b && a >= c && last != 1 {
                res.push('a');
                last = 1;
                a -= 1;
            } else if b >= a && b >= c && last != 2 {
                res.push('b');
                last = 2;
                b -= 1;
            } else if c >= a && c >= b && last != 3 {
                res.push('c');
                last = 3;
                c -= 1;
            } else if a > 0 && last != 1 {
                res.push('a');
                last = 1;
                a -= 1;
            } else if b > 0 && last != 2 {
                res.push('b');
                last = 2;
                b -= 1;
            } else if c > 0 && last != 3 {
                res.push('c');
                last = 3;
                c -= 1;
            } else {
                break;
            }
            if res.len() > 1 && res.chars().nth(res.len()-2).unwrap() == res.chars().nth(res.len()-1).unwrap() {
                res.pop();
                last = 0;
            }
        }
        res

=======

        
    }
}

=======

        let mut ans = String::new();
        let mut last = ' ';
        let mut last_count = 0;
        let mut a = a;
        let mut b = b;
        let mut c = c;
        while a > 0 || b > 0 || c > 0 {
            if a >= b && a >= c && (last != 'a' || last_count < 2) {
                ans.push('a');
                last = 'a';
                last_count += 1;
                a -= 1;
            } else if b >= a && b >= c && (last != 'b' || last_count < 2) {
                ans.push('b');
                last = 'b';
                last_count += 1;
                b -= 1;
            } else if c >= a && c >= b && (last != 'c' || last_count < 2) {
                ans.push('c');
                last = 'c';
                last_count += 1;
                c -= 1;
            } else if a > 0 && last != 'a' {
                ans.push('a');
                last = 'a';
                last_count = 1;
                a -= 1;
            } else if b > 0 && last != 'b' {
                ans.push('b');
                last = 'b';
                last_count = 1;
                b -= 1;
            } else if c > 0 && last != 'c' {
                ans.push('c');
                last = 'c';
                last_count = 1;
                c -= 1;
            } else {
                break;
            }
        }
        ans
    }
}

=======

        let mut count = vec![a, b, c];
        let mut res = String::new();
        let mut prev = -1;
        while count.iter().any(|&x| x > 0) {
            let mut max = 0;
            let mut index = 0;
            for i in 0..3 {
                if count[i] > max && i != prev {
                    max = count[i];
                    index = i;
                }
            }
            if max == 0 {
                break;
            }
            if max >= 2 {
                res.push(('a' as u8 + index as u8) as char);
                res.push(('a' as u8 + index as u8) as char);
                count[index] -= 2;
            } else {
                res.push(('a' as u8 + index as u8) as char);
                count[index] -= 1;
            }
            prev = index;
        }
        res
