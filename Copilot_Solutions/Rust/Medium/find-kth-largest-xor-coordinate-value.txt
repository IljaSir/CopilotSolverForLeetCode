Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let mut v = vec![vec![0; matrix[0].len()]; matrix.len()];
        let mut res = vec![];
        for i in 0..matrix.len() {
            for j in 0..matrix[i].len() {
                if i == 0 && j == 0 {
                    v[i][j] = matrix[i][j];
                } else if i == 0 {
                    v[i][j] = v[i][j-1] ^ matrix[i][j];
                } else if j == 0 {
                    v[i][j] = v[i-1][j] ^ matrix[i][j];
                } else {
                    v[i][j] = v[i-1][j] ^ v[i][j-1] ^ v[i-1][j-1] ^ matrix[i][j];
                }
                res.push(v[i][j]);
            }
        }
        res.sort();
        res[res.len() - k as usize]

=======

        let mut v = Vec::new();
        let mut m = Vec::new();
        let mut n = Vec::new();
        for i in 0..matrix.len() {
            m.push(vec![0; matrix[i].len()]);
            n.push(vec![0; matrix[i].len()]);
        }
        for i in 0..matrix.len() {
            for j in 0..matrix[i].len() {
                let mut t = matrix[i][j];
                if i > 0 {
                    t ^= m[i-1][j];
                }
                if j > 0 {
                    t ^= n[i][j-1];
                }
                if i > 0 && j > 0 {
                    t ^= m[i-1][j-1];
                }
                m[i][j] = t;
                if i == 0 && j == 0 {
                    n[i][j] = t;
                } else if i == 0 {
                    n[i][j] = n[i][j-1] ^ t;
                } else if j == 0 {
                    n[i][j] = n[i-1][j] ^ t;
                } else {
                    n[i][j] = n[i-1][j] ^ n[i][j-1] ^ n[i-1][j-1] ^ t;
                }
                v.push(t);
            }
        }
        v.sort();
        v[v.len()-k as usize]
    }
}
