Synthesizing 10/10 solutions

=======

        let mut dp = vec![0; 10001];
        for num in nums {
            dp[num as usize] += num;
        }
        for i in 2..10001 {
            dp[i] = dp[i].max(dp[i-1]);
            dp[i] = dp[i].max(dp[i-2] + dp[i]);
        }
        dp[10000]

=======

        let mut dp = vec![0; 10001];
        for num in nums {
            dp[num as usize] += num;
        }
        for i in 2..10001 {
            dp[i] = dp[i].max(dp[i - 1] + dp[i - 2]);
        }
        dp[10000]

=======

        let mut sums = vec![0; 10001];
        for num in nums {
            sums[num as usize] += num;
        }
        let (mut take, mut skip) = (0, 0);
        for sum in sums {
            let take_i = skip + sum;
            let skip_i = take.max(skip);
            take = take_i;
            skip = skip_i;
        }
        take.max(skip)

=======

        let mut arr = vec![0; 10001];
        for n in nums {
            arr[n as usize] += n;
        }
        let mut dp = vec![0; 10001];
        dp[1] = arr[1];
        for i in 2..10001 {
            dp[i] = dp[i - 1].max(dp[i - 2] + arr[i]);
        }
        dp[10000]

=======

        let mut max = 0;
        for n in nums.iter() {
            if *n > max {
                max = *n;
            }
        }
        let mut count = vec![0; (max + 1) as usize];
        for n in nums.iter() {
            count[*n as usize] += 1;
        }
        let mut dp = vec![0; (max + 1) as usize];
        dp[1] = count[1];
        for i in 2..(max + 1) as usize {
            dp[i] = std::cmp::max(dp[i - 1], dp[i - 2] + i as i32 * count[i]);
        }
        dp[max as usize]

=======

        let mut cnt = vec![0; 10001];
        for &x in &nums {
            cnt[x as usize] += x;
        }
        let mut dp = vec![0; 10001];
        dp[1] = cnt[1];
        for i in 2..10001 {
            dp[i] = dp[i - 1].max(dp[i - 2] + cnt[i]);
        }
        dp[10000]

=======

        let mut cnt = vec![0; 10001];
        for &n in &nums {
            cnt[n as usize] += n;
        }
        let mut dp = vec![0; 10001];
        dp[1] = cnt[1];
        for i in 2..10001 {
            dp[i] = dp[i - 1].max(dp[i - 2] + cnt[i]);
        }
        dp[10000]

=======

        let mut count = vec![0; 10_001];
        for num in nums {
            count[num as usize] += num;
        }
        let mut dp = vec![0; 10_001];
        dp[1] = count[1];
        for i in 2..10_001 {
            dp[i] = std::cmp::max(dp[i - 1], dp[i - 2] + count[i]);
        }
        dp[10_000]

=======

        let n = nums.len();
        let mut count = vec![0; 10001];
        for &num in &nums {
            count[num as usize] += 1;
        }
        let mut dp = vec![0; 10001];
        dp[1] = count[1];
        for i in 2..10001 {
            dp[i] = std::cmp::max(dp[i - 1], dp[i - 2] + count[i] * i);
        }
        dp[10000]

=======

        
    }
}
