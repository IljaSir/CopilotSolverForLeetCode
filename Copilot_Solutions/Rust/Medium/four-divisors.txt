Synthesizing 8/10 solutions

=======

        nums.iter().map(|&n| {
            let mut sum = 0;
            let mut count = 0;
            let mut i = 1;
            while i * i <= n {
                if n % i == 0 {
                    if i * i == n {
                        count += 1;
                        sum += i;
                    } else {
                        count += 2;
                        sum += i;
                        sum += n / i;
                    }
                }
                if count > 4 {
                    break;
                }
                i += 1;
            }
            if count == 4 {
                sum
            } else {
                0
            }
        }).sum()

=======

        nums.iter().map(|&x| {
            let mut count = 0;
            let mut sum = 0;
            for i in 1..=(x as f64).sqrt() as i32 {
                if x % i == 0 {
                    count += 1;
                    sum += i;
                    if i * i != x {
                        count += 1;
                        sum += x / i;
                    }
                    if count > 4 {
                        return 0;
                    }
                }
            }
            if count == 4 {
                sum
            } else {
                0
            }
        }).sum()

=======

        let mut sum = 0;
        for num in nums {
            let mut count = 0;
            let mut sum_divisors = 0;
            for i in 1..=num {
                if num % i == 0 {
                    count += 1;
                    sum_divisors += i;
                }
            }
            if count == 4 {
                sum += sum_divisors;
            }
        }
        sum
    }
}

=======

        nums.iter().map(|&x| {
            let mut sum = 0;
            let mut cnt = 0;
            let mut i = 1;
            while i * i <= x {
                if x % i == 0 {
                    sum += i;
                    if i * i != x {
                        sum += x / i;
                    }
                    cnt += 1;
                    if cnt > 4 {
                        break;
                    }
                }
                i += 1;
            }
            if cnt == 4 {
                sum
            } else {
                0
            }
        }).sum()

=======

        let mut sum = 0;
        for n in nums {
            let mut count = 0;
            let mut divisors = 0;
            let mut i = 1;
            while i * i <= n {
                if n % i == 0 {
                    count += 1;
                    divisors += i;
                    if i * i != n {
                        count += 1;
                        divisors += n / i;
                    }
                }
                i += 1;
            }
            if count == 4 {
                sum += divisors;
            }
        }
        sum

=======

        let mut sum = 0;
        for num in nums {
            let mut count = 0;
            let mut i = 1;
            let mut sum_div = 0;
            while i * i <= num {
                if num % i == 0 {
                    count += 1;
                    sum_div += i;
                    if i * i != num {
                        count += 1;
                        sum_div += num / i;
                    }
                    if count > 4 {
                        break;
                    }
                }
                i += 1;
            }
            if count == 4 {
                sum += sum_div;
            }
        }
        sum

=======

        let mut sum = 0;
        for num in nums {
            let mut count = 0;
            let mut sum_of_divisors = 0;
            let mut i = 1;
            while i * i <= num {
                if num % i == 0 {
                    if i * i == num {
                        sum_of_divisors += i;
                    } else {
                        sum_of_divisors += i + num / i;
                    }
                    count += 1;
                }
                if count > 4 {
                    break;
                }
                i += 1;
            }
            if count == 4 {
                sum += sum_of_divisors;
            }
        }
        sum

=======

        let mut res = 0;
        for i in nums {
            let mut count = 2;
            let mut sum = 1 + i;
            for j in 2..i {
                if j * j > i {
                    break;
                }
                if i % j == 0 {
                    count += 1;
                    sum += j;
                    if j * j != i {
                        count += 1;
                        sum += i / j;
                    }
                }
                if count > 4 {
                    break;
                }
            }
            if count == 4 {
                res += sum;
            }
        }
        res
