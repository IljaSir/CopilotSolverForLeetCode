Synthesizing 7/10 solutions

=======

        let mut vowels = vec![vec![0; 5]; words.len() + 1];
        for (i, word) in words.iter().enumerate() {
            for j in 0..5 {
                vowels[i + 1][j] = vowels[i][j];
            }
            match word.chars().next().unwrap() {
                'a' => vowels[i + 1][0] += 1,
                'e' => vowels[i + 1][1] += 1,
                'i' => vowels[i + 1][2] += 1,
                'o' => vowels[i + 1][3] += 1,
                'u' => vowels[i + 1][4] += 1,
                _ => {}
            }
        }
        let mut ans = Vec::new();
        for q in queries {
            let mut count = 0;
            for i in 0..5 {
                count += vowels[q[1] as usize + 1][i] - vowels[q[0] as usize][i];
            }
            ans.push(count);
        }
        ans

=======

        let mut result = Vec::new();
        let vowels = vec!['a', 'e', 'i', 'o', 'u'];
        let mut dp = vec![vec![0; 5]; words.len() + 1];
        for i in 0..words.len() {
            let mut index = 0;
            for c in words[i].chars() {
                if vowels.contains(&c) {
                    index = vowels.iter().position(|&r| r == c).unwrap();
                    break;
                }
            }
            for j in index..5 {
                dp[i + 1][j] = 1;
            }
        }
        for i in 1..words.len() + 1 {
            for j in 1..5 {
                dp[i][j] += dp[i - 1][j] + dp[i][j - 1];
            }
        }
        for query in queries {
            result.push(dp[query[1] as usize + 1][4] - dp[query[0] as usize][4]);
        }
        result
    }
}

=======

        let mut ans = Vec::new();
        let words: Vec<&str> = words.iter().map(|s| s.as_str()).collect();
        for q in queries {
            let mut cnt = 0;
            for i in q[0] as usize..=q[1] as usize {
                let s = words[i];
                if s.starts_with("a") || s.starts_with("e") || s.starts_with("i") || s.starts_with("o") || s.starts_with("u") {
                    if s.ends_with("a") || s.ends_with("e") || s.ends_with("i") || s.ends_with("o") || s.ends_with("u") {
                        cnt += 1;
                    }
                }
            }
            ans.push(cnt);
        }
        ans

=======

        let mut ans = vec![];
        let mut dp = vec![vec![0; 5]; words.len()];
        for i in 0..words.len() {
            for j in 0..5 {
                if words[i].as_bytes()[0] == b'a' + j as u8 {
                    dp[i][j] = 1;
                }
            }
            for j in 0..5 {
                if i > 0 {
                    dp[i][j] += dp[i-1][j];
                }
            }
        }
        for i in 0..queries.len() {
            let mut cnt = 0;
            for j in 0..5 {
                cnt += dp[queries[i][1] as usize][j];
                if queries[i][0] > 0 {
                    cnt -= dp[queries[i][0] as usize - 1][j];
                }
            }
            ans.push(cnt);
        }
        ans

=======

        let mut ans = vec![];
        let mut vowels = vec![0; words.len()];
        for i in 0..words.len() {
            let mut count = 0;
            for c in words[i].chars() {
                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {
                    count += 1;
                }
            }
            vowels[i] = count;
        }
        for q in queries {
            let mut count = 0;
            for i in q[0] as usize..q[1] as usize + 1 {
                count += vowels[i];
            }
            ans.push(count);
        }
        ans
    }
}

=======

        let mut ans = Vec::new();
        let mut count = vec![vec![0; 5]; words.len() + 1];
        for i in 0..words.len() {
            let mut j = 0;
            for c in words[i].chars() {
                if c == 'a' {
                    count[i + 1][0] = count[i][0] + 1;
                    count[i + 1][1] = count[i][1];
                    count[i + 1][2] = count[i][2];
                    count[i + 1][3] = count[i][3];
                    count[i + 1][4] = count[i][4];
                } else if c == 'e' {
                    count[i + 1][0] = count[i][0];
                    count[i + 1][1] = count[i][1] + count[i][0];
                    count[i + 1][2] = count[i][2];
                    count[i + 1][3] = count[i][3];
                    count[i + 1][4] = count[i][4];
                } else if c == 'i' {
                    count[i + 1][0] = count[i][0];
                    count[i + 1][1] = count[i][1];
                    count[i + 1][2] = count[i][2] + count[i][1];
                    count[i + 1][3] = count[i][3];
                    count[i + 1][4] = count[i][4];
                } else if c == 'o' {
                    count[i + 1][0] = count[i][0];
                    count[i + 1][1] = count[i][1];
                    count[i + 1][2] = count[i][2];
                    count[i + 1][3] = count[i][3] + count[i][2];
                    count[i + 1][4] = count[i][4];
                } else if c == 'u' {
                    count[i + 1][0] = count[i][0];
                    count[i + 1][1] = count[i][1];
                    count[i + 1][2] = count[i][2];
                    count[i + 1][3] = count[i][3];
                    count[i + 1][4] =

=======

        let mut ans = Vec::new();
        let mut v = Vec::new();
        for i in 0..words.len() {
            let mut cnt = 0;
            for c in words[i].chars() {
                if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {
                    cnt += 1;
                }
            }
            v.push(cnt);
        }
        for q in queries {
            let mut cnt = 0;
            for i in q[0] as usize..=q[1] as usize {
                cnt += v[i];
            }
            ans.push(cnt);
        }
        ans
    }
}
