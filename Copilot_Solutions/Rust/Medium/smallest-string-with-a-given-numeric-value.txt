Synthesizing 9/10 solutions

=======

        let mut res = vec!['a'; n as usize];
        let mut k = k - n;
        let mut i = n - 1;
        while k > 0 {
            if k >= 25 {
                res[i as usize] = 'z';
                k -= 25;
            } else {
                res[i as usize] = (b'a' + k as u8) as char;
                k = 0;
            }
            i -= 1;
        }
        res.iter().collect()

=======

        let mut res = vec!['a'; n as usize];
        let mut k = k - n;
        let mut i = n - 1;
        while k > 0 {
            let add = k.min(25);
            res[i as usize] = (res[i as usize] as u8 + add) as char;
            i -= 1;
            k -= add;
        }
        res.iter().collect()

=======

        let mut result = vec!['a'; n as usize];
        let mut k = k - n;
        let mut i = n - 1;
        while k > 0 {
            let x = std::cmp::min(k, 25) as u8;
            result[i as usize] = (result[i as usize] as u8 + x) as char;
            k -= x as i32;
            i -= 1;
        }
        result.iter().collect()

=======

        let mut s = String::new();
        let mut k = k;
        let mut n = n;
        while n > 0 {
            if k - 26 >= n - 1 {
                s.push('z');
                k -= 26;
            } else {
                s.push((k - n + 1 + 'a' as i32) as u8 as char);
                k -= k - n + 1;
            }
            n -= 1;
        }
        s
    }
}

=======

        let mut s = String::new();
        let mut k = k;
        for i in (0..n).rev() {
            let mut c = k - i;
            if c > 26 {
                c = 26;
            }
            s.push((c + 96) as u8 as char);
            k -= c;
        }
        s

=======

        let mut s = String::new();
        let mut n = n;
        let mut k = k;
        while n > 0 {
            let c = if k - n >= 26 {
                'z'
            } else {
                (b'a' + (k - n) as u8) as char
            };
            s.push(c);
            k -= c as i32 - 'a' as i32 + 1;
            n -= 1;
        }
        s
    }
}

=======

        let mut res = String::new();
        let mut k = k;
        for i in 0..n {
            let c = (k - (n - i - 1) * 26) as u8;
            if c > 26 {
                res.push('z');
                k -= 26;
            } else {
                res.push((c + 96) as char);
                k -= c as i32;
            }
        }
        res

=======

        let mut n = n;
        let mut k = k;
        let mut s = String::new();
        while n > 0 {
            let x = (k - n).min(25);
            s.push((b'a' + x as u8) as char);
            k -= x + 1;
            n -= 1;
        }
        s
    }
}

=======

        let mut res = String::new();
        let mut k = k;
        for i in 0..n-1 {
            let mut c = k - n + i + 1;
            if c > 26 {
                c = 26;
            }
            res.push((c + 96) as u8 as char);
            k -= c;
        }
        res.push((k + 96) as u8 as char);
        res
