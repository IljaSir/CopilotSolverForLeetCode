Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut dp = vec![vec![2; n]; n];
        let mut res = 2;
        for i in 1..n {
            for j in 0..i {
                let d = nums[i] - nums[j];
                let mut max_len = 0;
                for k in 0..j {
                    if nums[j] - nums[k] == d {
                        max_len = max_len.max(dp[k][j]);
                    }
                }
                dp[j][i] = max_len + 1;
                res = res.max(dp[j][i]);
            }
        }
        res

=======

        let n = nums.len();
        let mut dp = vec![vec![2; n]; n];
        let mut ans = 2;
        for i in 0..n {
            for j in i+1..n {
                let mut k = j + 1;
                while k < n {
                    if nums[k] - nums[j] == nums[j] - nums[i] {
                        dp[j][k] = dp[i][j] + 1;
                        ans = ans.max(dp[j][k]);
                    }
                    k += 1;
                }
            }
        }
        ans

=======

        let n = nums.len();
        let mut dp = vec![vec![2; n]; n];
        let mut res = 2;
        for i in 0..n {
            for j in i+1..n {
                let d = nums[j] - nums[i];
                for k in 0..i {
                    if nums[i] - nums[k] == d {
                        dp[i][j] = dp[i][j].max(dp[k][i] + 1);
                    }
                }
                res = res.max(dp[i][j]);
            }
        }
        res

=======

        let n = nums.len();
        let mut dp = vec![vec![0; n]; n];
        let mut ans = 2;
        for i in 0..n {
            for j in i+1..n {
                dp[i][j] = 2;
                for k in 0..i {
                    if nums[i] - nums[k] == nums[j] - nums[i] {
                        dp[i][j] = dp[i][j].max(dp[k][i] + 1);
                    }
                }
                ans = ans.max(dp[i][j]);
            }
        }
        ans

=======

        let n = nums.len();
        let mut dp = vec![vec![2; n]; n];
        let mut max = 2;
        for i in 1..n {
            for j in 0..i {
                let d = nums[i] - nums[j];
                for k in 0..j {
                    if nums[j] - nums[k] == d {
                        dp[j][i] = dp[j][i].max(dp[k][j] + 1);
                        max = max.max(dp[j][i]);
                    }
                }
            }
        }
        max

=======

        let mut dp = vec![vec![2; nums.len()]; nums.len()];
        let mut max = 2;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                let diff = nums[j] - nums[i];
                for k in 0..i {
                    if nums[k] + diff == nums[i] {
                        dp[i][j] = dp[k][i].max(dp[i][j]);
                    }
                }
                dp[i][j] += 1;
                max = max.max(dp[i][j]);
            }
        }
        max
    }
}

=======

        let len = nums.len();
        let mut dp = vec![vec![0; len]; len];
        let mut res = 0;
        for i in 0..len {
            for j in 0..i {
                let d = nums[i] - nums[j];
                let mut max = 0;
                for k in 0..j {
                    if nums[j] - nums[k] == d {
                        max = max.max(dp[k][j]);
                    }
                }
                dp[j][i] = max + 1;
                res = res.max(dp[j][i]);
            }
        }
        res + 1

=======

        let len = nums.len();
        let mut dp = vec![vec![0; len]; len];
        let mut ans = 0;
        for i in 0..len {
            for j in 0..i {
                let d = nums[i] - nums[j];
                dp[i][j] = dp[j].iter().enumerate().filter(|(k, _)| *k < j && nums[*k] - nums[j] == d).map(|(_, v)| *v).max().unwrap_or(0) + 1;
                ans = ans.max(dp[i][j]);
            }
        }
        ans

=======

        let mut dp = vec![vec![2; nums.len()]; nums.len()];
        let mut max = 2;
        for i in 1..nums.len() {
            for j in 0..i {
                dp[j][i] = 2;
                for k in 0..j {
                    if nums[j] - nums[k] == nums[i] - nums[j] {
                        dp[j][i] = std::cmp::max(dp[j][i], dp[k][j] + 1);
                    }
                }
                max = std::cmp::max(max, dp[j][i]);
            }
        }
        max

=======

        let mut dp = vec![vec![0;nums.len()];nums.len()];
        let mut ans = 2;
        for i in 0..nums.len(){
            for j in i+1..nums.len(){
                let diff = nums[i] - nums[j];
                let mut max = 2;
                for k in 0..i{
                    if nums[k] - nums[i] == diff{
                        max = std::cmp::max(max,dp[k][i]+1);
                    }
                }
                dp[i][j] = max;
                ans = std::cmp::max(ans,max);
            }
        }
        ans
