Synthesizing 10/10 solutions

=======

        let mut s = s;
        while s.contains(&part) {
            s = s.replace(&part, "");
        }
        s

=======

        let mut s = s;
        while let Some(index) = s.find(&part) {
            s.replace_range(index..index + part.len(), "");
        }
        s
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let part = part.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i <= s.len() - part.len() {
            let mut j = 0;
            while j < part.len() && s[i + j] == part[j] {
                j += 1;
            }
            if j == part.len() {
                s.drain(i..i + j);
            } else {
                i += 1;
            }
        }
        s.into_iter().collect()

=======

        let mut s = s;
        let part = part;
        while s.contains(&part) {
            s = s.replace(&part, "");
        }
        return s;

=======

        let mut s = s;
        let part = part.as_bytes();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() {
            if s.as_bytes()[i] == part[j] {
                j += 1;
                if j == part.len() {
                    s.replace_range(i - j + 1..i + 1, "");
                    i = i - j;
                    j = 0;
                }
            } else {
                j = 0;
            }
            i += 1;
        }
        s
    }
}

=======

        let mut s = s;
        let part = part;
        loop {
            let new_s = s.replace(&part, "");
            if new_s == s {
                break;
            }
            s = new_s;
        }
        s
    }
}

=======

        let mut s = s;
        let mut part = part;
        while let Some(pos) = s.find(&part) {
            s = format!("{}{}", &s[..pos], &s[pos+part.len()..]);
        }
        s
    }
}

=======

        let mut s = s;
        let part = part.as_bytes();
        let mut i = 0;
        while i + part.len() <= s.len() {
            let mut j = 0;
            while j < part.len() && s.as_bytes()[i + j] == part[j] {
                j += 1;
            }
            if j == part.len() {
                s = format!("{}{}", &s[..i], &s[i + j..]);
                i = 0;
            } else {
                i += 1;
            }
        }
        s

=======

        let mut s = s;
        let mut part = part;
        let mut i = 0;
        while i < s.len() {
            if s[i..].starts_with(&part) {
                s.replace_range(i..i+part.len(), "");
            } else {
                i += 1;
            }
        }
        s
    }
}

=======

        let mut s = s;
        let mut part = part;
        let mut i = s.find(&part);
        while i.is_some() {
            let i = i.unwrap();
            s.replace_range(i..i+part.len(), "");
            i = s.find(&part);
        }
        s
