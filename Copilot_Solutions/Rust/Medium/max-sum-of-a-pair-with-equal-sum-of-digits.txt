Synthesizing 10/10 solutions

=======

        let mut max = -1;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if Solution::sum_of_digits(nums[i]) == Solution::sum_of_digits(nums[j]) {
                    let sum = nums[i] + nums[j];
                    if sum > max {
                        max = sum;
                    }
                }
            }
        }
        max
    }
    
    fn sum_of_digits(num: i32) -> i32 {
        let mut sum = 0;
        let mut n = num;
        while n > 0 {
            sum += n % 10;
            n /= 10;
        }
        sum

=======

        let mut max = -1;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if Solution::digit_sum(nums[i]) == Solution::digit_sum(nums[j]) {
                    let sum = nums[i] + nums[j];
                    if sum > max {
                        max = sum;
                    }
                }
            }
        }
        max
    }
    
    pub fn digit_sum(num: i32) -> i32 {
        let mut sum = 0;
        let mut n = num;
        while n > 0 {
            sum += n % 10;
            n /= 10;
        }
        sum

=======

        let mut max = -1;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let mut sum1 = 0;
                let mut sum2 = 0;
                let mut t = nums[i];
                while t > 0 {
                    sum1 += t % 10;
                    t /= 10;
                }
                t = nums[j];
                while t > 0 {
                    sum2 += t % 10;
                    t /= 10;
                }
                if sum1 == sum2 {
                    max = max.max(nums[i] + nums[j]);
                }
            }
        }
        max
    }
}

=======

        let mut max = -1;
        let mut max1 = -1;
        let mut max2 = -1;
        for num in nums {
            let sum = num.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();
            if sum > max1 {
                max2 = max1;
                max1 = sum;
            } else if sum > max2 {
                max2 = sum;
            }
            if max1 != max2 && max1 + max2 > max {
                max = max1 + max2;
            }
        }
        max
    }
}

=======

        let mut max = -1;
        let mut max_index = -1;
        let mut second_max = -1;
        let mut second_max_index = -1;
        for (i, &n) in nums.iter().enumerate() {
            let sum = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>();
            if sum > max {
                second_max = max;
                second_max_index = max_index;
                max = sum;
                max_index = i as i32;
            } else if sum > second_max {
                second_max = sum;
                second_max_index = i as i32;
            }
        }
        if max_index != second_max_index {
            nums[max_index as usize] + nums[second_max_index as usize]
        } else {
            -1
        }
    }
}

=======

        let mut max = -1;
        let mut max1 = -1;
        let mut max2 = -1;
        for num in nums {
            let sum = Self::sum_of_digits(num);
            if sum > max {
                max = sum;
                max1 = num;
            } else if sum == max {
                max1 = std::cmp::max(max1, num);
            }
        }
        for num in nums {
            let sum = Self::sum_of_digits(num);
            if sum == max && num != max1 {
                max2 = std::cmp::max(max2, num);
            }
        }
        if max1 == -1 || max2 == -1 {
            return -1;
        }
        max1 + max2
    }
    fn sum_of_digits(num: i32) -> i32 {
        let mut sum = 0;
        let mut num = num;
        while num > 0 {
            sum += num % 10;
            num /= 10;
        }
        sum

=======

        let mut max = -1;
        let mut max_digit = [0; 100];
        for n in nums {
            let mut n = n;
            let mut sum = 0;
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            max_digit[sum as usize] = max_digit[sum as usize].max(n);
        }
        for i in 0..100 {
            for j in i..100 {
                if i == j {
                    max = max.max(max_digit[i] + max_digit[j]);
                } else {
                    max = max.max(max_digit[i] + max_digit[j]);
                }
            }
        }
        max

=======

        let mut max = -1;
        let mut max_digit = [0; 100];
        for num in nums {
            let mut digit = 0;
            let mut n = num;
            while n > 0 {
                digit += n % 10;
                n /= 10;
            }
            let index = digit as usize;
            if max_digit[index] > 0 {
                let sum = max_digit[index] + num;
                if sum > max {
                    max = sum;
                }
            }
            if num > max_digit[index] {
                max_digit[index] = num;
            }
        }
        max

=======

        let mut sum = -1;
        let mut max = -1;
        let mut max2 = -1;
        for i in 0..nums.len() {
            sum = 0;
            let mut n = nums[i];
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            if sum > max {
                max2 = max;
                max = sum;
            } else if sum > max2 {
                max2 = sum;
            }
        }
        if max == max2 {
            return -1;
        }
        for i in 0..nums.len() {
            sum = 0;
            let mut n = nums[i];
            while n > 0 {
                sum += n % 10;
                n /= 10;
            }
            if sum == max {
                for j in 0..nums.len() {
                    if i == j {
                        continue;
                    }
                    sum = 0;
                    let mut n = nums[j];
                    while n > 0 {
                        sum += n % 10;
                        n /= 10;
                    }
                    if sum == max2 {
                        return nums[i] + nums[j];
                    }
                }
            }
        }
        -1

=======

        let mut max = -1;
        let mut a = vec![0; 100];
        for &n in nums.iter() {
            let s = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as usize).sum::<usize>();
            if a[s] > 0 {
                max = max.max(a[s] + n);
            }
            a[s] = a[s].max(n);
        }
        max
