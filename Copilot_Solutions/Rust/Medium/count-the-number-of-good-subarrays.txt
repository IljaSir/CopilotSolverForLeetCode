Synthesizing 8/10 solutions

=======

        let mut sum = 0;
        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            if let Some(v) = map.get(&(sum - k)) {
                res += v;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        res
    }
}

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if sum == k {
                res += 1;
            }
            if let Some(&j) = map.get(&(sum - k)) {
                res += j;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        res
    }
}

=======

        let mut res = 0;
        let mut count = vec![0; nums.len() + 1];
        let mut odd = 0;
        count[0] = 1;
        for num in nums {
            odd += num & 1;
            if odd >= k {
                res += count[(odd - k) as usize];
            }
            count[odd as usize] += 1;
        }
        res
    }
}

=======

        let mut res = 0;
        let mut left = 0;
        let mut right = 0;
        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        while right < nums.len() {
            map.entry(nums[right]).and_modify(|e| *e += 1).or_insert(1);
            if map[&nums[right]] == k {
                count += 1;
            }
            while left <= right && map[&nums[right]] > k {
                map.entry(nums[left]).and_modify(|e| *e -= 1);
                if map[&nums[left]] == k - 1 {
                    count -= 1;
                }
                left += 1;
            }
            res += count;
            right += 1;
        }
        res
    }
}

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        let mut odd = 0;
        for i in 0..nums.len() {
            if nums[i] % 2 == 1 {
                odd += 1;
            }
            map.entry(odd).and_modify(|v| *v += 1).or_insert(1);
            if odd >= k {
                count += map[&(odd - k)];
            }
        }
        count as i64
    }
}

=======

        
    }
}

=======

        let mut pre = Vec::<i32>::new();
        let mut res = 0;
        for i in 0..nums.len() {
            let mut count = 0;
            for j in 0..pre.len() {
                if nums[i] == pre[j] {
                    count += 1;
                }
                pre[j] = pre[j] + 1;
            }
            pre.push(1);
            if count >= k {
                res += (count - k + 1) as i64;
            }
        }
        res

=======

        let mut count = 0;
        let mut s = vec![];
        let mut res = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[i] == nums[j] {
                j += 1;
            }
            for _ in 0..j - i {
                if s.len() < k as usize {
                    s.push(nums[i]);
                } else {
                    count -= 1;
                    s.remove(0);
                    s.push(nums[i]);
                }
                if s.len() == k as usize {
                    count += 1;
                    res += count;
                }
            }
            i = j;
        }
        res
    }
}
