Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = vec![];
            for i in 0..nums.len() - 1 {
                new_nums.push((nums[i] + nums[i+1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]

=======

        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = vec![];
            for i in 0..nums.len() - 1 {
                new_nums.push((nums[i] + nums[i + 1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]
    }
}

=======

        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = Vec::new();
            for i in 0..nums.len() - 1 {
                new_nums.push((nums[i] + nums[i + 1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]

=======

        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = Vec::with_capacity(nums.len() - 1);
            for i in 0..nums.len() - 1 {
                new_nums.push((nums[i] + nums[i + 1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]
    }
}

=======

        if nums.len() == 1 {
            return nums[0];
        }
        let mut new_nums = Vec::new();
        for i in 0..nums.len()-1 {
            new_nums.push((nums[i] + nums[i+1]) % 10);
        }
        return Solution::triangular_sum(new_nums);
    }
}

=======

        let mut nums = nums;
        while nums.len() != 1 {
            let mut new_nums = Vec::new();
            for i in 0..nums.len() - 1 {
                new_nums.push((nums[i] + nums[i + 1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]
    }
}

=======

        if nums.len() == 1 {
            return nums[0];
        }
        let mut nums = nums;
        while nums.len() > 1 {
            let mut new_nums = Vec::new();
            for i in 0..nums.len()-1 {
                new_nums.push((nums[i] + nums[i+1]) % 10);
            }
            nums = new_nums;
        }
        nums[0]
    }
}
