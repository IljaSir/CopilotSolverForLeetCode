Synthesizing 9/10 solutions

=======

        let mut cards = cards;
        cards.sort();
        let mut min = std::i32::MAX;
        let mut count = 1;
        for i in 1..cards.len() {
            if cards[i] == cards[i - 1] {
                count += 1;
            } else {
                if count > 1 {
                    min = min.min(i as i32);
                }
                count = 1;
            }
        }
        if count > 1 {
            min = min.min(cards.len() as i32);
        }
        if min == std::i32::MAX {
            -1
        } else {
            min
        }

=======

        let mut cards = cards;
        cards.sort();
        let mut min = cards.len() as i32;
        let mut count = 1;
        for i in 1..cards.len() {
            if cards[i] == cards[i-1] {
                count += 1;
            } else {
                min = min.min(count);
                count = 1;
            }
        }
        min.min(count)
    }
}

=======

        let mut cards = cards;
        cards.sort();
        let mut min = 0;
        let mut count = 1;
        for i in 1..cards.len() {
            if cards[i] == cards[i-1] {
                count += 1;
            } else {
                if count == 1 {
                    min = 0;
                } else if min == 0 {
                    min = count;
                } else {
                    min = min.min(count);
                }
                count = 1;
            }
        }
        if count == 1 {
            min = 0;
        } else if min == 0 {
            min = count;
        } else {
            min = min.min(count);
        }
        if min == 0 {
            -1
        } else {
            min as i32
        }

=======

        let mut count = vec![0; 10_000_001];
        for &card in cards.iter() {
            count[card as usize] += 1;
        }
        let mut ans = cards.len() as i32;
        for &card in cards.iter() {
            ans = ans.min(count[card as usize]);
        }
        if ans == cards.len() as i32 {
            -1
        } else {
            ans
        }
    }
}

=======

        let mut freq = vec![0; 1000001];
        for &card in &cards {
            freq[card as usize] += 1;
        }
        let mut ans = cards.len();
        for i in 0..freq.len() {
            if freq[i] > 1 {
                ans = ans.min(freq[i]);
            }
        }
        if ans == cards.len() {
            -1
        } else {
            ans as i32
        }
    }
}

=======

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        let mut min: i32 = -1;
        for card in cards {
            if let Some(val) = map.get(&card) {
                if min == -1 {
                    min = *val;
                } else {
                    min = min.min(*val);
                }
            }
            map.entry(card).and_modify(|x| *x += 1).or_insert(1);
        }
        min
    }
}

=======

        let mut count: i32 = 0;
        let mut map: HashMap<i32, i32> = HashMap::new();
        for card in cards {
            let counter = map.entry(card).or_insert(0);
            *counter += 1;
        }
        for (_, value) in map {
            if value % 2 != 0 {
                count += 1;
            }
        }
        if count % 2 == 0 {
            return count / 2;
        } else {
            return -1;
        }

=======

        let mut count = 0;
        let mut last = -1;
        for &c in cards.iter() {
            if c != last {
                last = c;
                count = 0;
            }
            count += 1;
            if count == 2 {
                return 2;
            }
        }
        -1
    }
}

=======

        let mut counter = vec![0; 1000001];
        for &card in &cards {
            counter[card as usize] += 1;
        }
        let mut result = i32::MAX;
        for &count in &counter {
            if count >= 2 {
                result = result.min(count);
            }
        }
        if result == i32::MAX {
            -1
        } else {
            cards.len() as i32 - result
        }
    }
}
