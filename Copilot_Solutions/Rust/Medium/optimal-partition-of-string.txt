Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut last = [0; 26];
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i;
        }
        let mut i = 0;
        while i < s.len() {
            let mut j = i;
            let mut k = i;
            while j < s.len() {
                k = k.max(last[(s.chars().nth(j).unwrap() as u8 - b'a') as usize]);
                if k == j {
                    break;
                }
                j += 1;
            }
            ans += 1;
            i = k + 1;
        }
        ans

=======

        let mut ans = 0;
        let mut last = vec![0; 26];
        for (i, c) in s.bytes().enumerate() {
            last[(c - b'a') as usize] = i;
        }
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.bytes().enumerate() {
            end = end.max(last[(c - b'a') as usize]);
            if i == end {
                ans += 1;
                start = i + 1;
            }
        }
        ans

=======

        let mut last = vec![0; 26];
        for (i, c) in s.as_bytes().iter().enumerate() {
            last[(c - b'a') as usize] = i;
        }
        let mut ans = 0;
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.as_bytes().iter().enumerate() {
            end = end.max(last[(c - b'a') as usize]);
            if i == end {
                ans += 1;
                start = end + 1;
            }
        }
        ans
    }
}

=======

        let mut res = 0;
        let mut last = [0; 26];
        for (i, c) in s.char_indices() {
            last[(c as u8 - b'a') as usize] = i;
        }
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.char_indices() {
            end = end.max(last[(c as u8 - b'a') as usize]);
            if i == end {
                res += 1;
                start = i + 1;
            }
        }
        res
    }
}

=======

        let mut max = 0;
        let mut ans = 0;
        for (i, c) in s.chars().enumerate() {
            max = max.max(c as usize - 'a' as usize);
            if i == max {
                ans += 1;
            }
        }
        ans

=======

        let mut last = vec![0; 26];
        let mut res = 0;
        let mut start = 0;
        let mut end = 0;
        for (i, ch) in s.chars().enumerate() {
            last[(ch as u8 - b'a') as usize] = i;
        }
        for (i, ch) in s.chars().enumerate() {
            end = end.max(last[(ch as u8 - b'a') as usize]);
            if i == end {
                res += 1;
                start = i + 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut start = 0;
        let mut end = 0;
        let mut set = std::collections::HashSet::new();
        for (i, c) in s.chars().enumerate() {
            if set.contains(&c) {
                end = i;
            } else {
                set.insert(c);
                if i == s.len() - 1 {
                    res += 1;
                }
            }
            if end == i {
                res += 1;
                start = i + 1;
                end = i + 1;
                set.clear();
            }
        }
        res

=======

        let mut v = Vec::new();
        for c in s.chars() {
            let i = c as usize - 'a' as usize;
            if v.len() <= i {
                v.resize(i+1, 0);
            }
            v[i] += 1;
        }
        let mut res = 0;
        let mut max = 0;
        for i in 0..v.len() {
            if v[i] == 0 {
                continue;
            }
            if i > max {
                max = i;
                res += 1;
            }
            if v[i] > v[max] {
                max = i;
            }
        }
        res
    }
}

=======

        let mut max_index = 0;
        let mut result = 0;
        let mut index = 0;
        for (i, c) in s.chars().enumerate() {
            max_index = max_index.max(s.rfind(c).unwrap());
            if i == max_index {
                result += 1;
                index = i + 1;
            }
        }
        result
    }
}

=======

        let mut max = 0;
        let mut count = 0;
        for i in 0..s.len() {
            max = max.max(s.bytes().nth(i).unwrap() - 97);
            if i == max {
                count += 1;
            }
        }
        count
    }
}
