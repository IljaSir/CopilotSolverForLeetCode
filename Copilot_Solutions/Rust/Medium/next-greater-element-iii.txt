Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut digits: Vec<i32> = Vec::new();
        let mut n = n;
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        // println!("digits: {:?}", digits);
        let mut i = digits.len() - 1;
        while i > 0 && digits[i - 1] >= digits[i] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = digits.len() - 1;
        while digits[j] <= digits[i - 1] {
            j -= 1;
        }
        digits.swap(i - 1, j);
        digits[i..].reverse();
        let mut result = 0;
        for d in digits {
            result = result * 10 + d;
            if result > i32::MAX as i64 {
                return -1;
            }
        }
        result as i32
    }
}

=======
Suggestion 2

        let mut digits: Vec<i32> = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as i32).collect();
        let mut i = digits.len() - 1;
        while i > 0 && digits[i-1] >= digits[i] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = digits.len() - 1;
        while digits[j] <= digits[i-1] {
            j -= 1;
        }
        digits.swap(i-1, j);
        digits[i..].reverse();
        let mut result = 0;
        for d in digits {
            result = result * 10 + d;
            if result > i32::MAX {
                return -1;
            }
        }
        result

=======
Suggestion 3

        let mut s = n.to_string().into_bytes();
        let mut i = s.len() - 1;
        while i > 0 && s[i] <= s[i-1] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = s.len() - 1;
        while s[j] <= s[i-1] {
            j -= 1;
        }
        s.swap(i-1, j);
        s[i..].reverse();
        let mut s = String::from_utf8(s).unwrap();
        let res = s.parse::<i32>().unwrap();
        if res <= n {
            return -1;
        }
        res

=======
Suggestion 4

        let mut n = n;
        let mut digits: Vec<i32> = vec![];
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut i = digits.len() - 1;
        while i > 0 && digits[i - 1] >= digits[i] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = digits.len() - 1;
        while j >= i && digits[j] <= digits[i - 1] {
            j -= 1;
        }
        digits.swap(i - 1, j);
        digits[i..].reverse();
        let mut result = 0;
        for &d in digits.iter() {
            result = result * 10 + d;
        }
        if result > std::i32::MAX as i64 {
            return -1;
        }
        result as i32

=======
Suggestion 5

        let mut nums = n.to_string().chars().collect::<Vec<char>>();
        let mut i = nums.len() - 1;
        while i > 0 && nums[i] <= nums[i - 1] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = nums.len() - 1;
        while nums[j] <= nums[i - 1] {
            j -= 1;
        }
        nums.swap(i - 1, j);
        nums[i..].reverse();
        let mut res = String::new();
        for c in nums {
            res.push(c);
        }
        let res = res.parse::<i32>().unwrap();
        if res > i32::MAX {
            return -1;
        }
        res

=======
Suggestion 6

        let mut s = n.to_string().into_bytes();
        let mut i = s.len()-1;
        while i > 0 {
            if s[i-1] < s[i] {
                break;
            }
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = s.len()-1;
        while j > i {
            if s[j] > s[i-1] {
                break;
            }
            j -= 1;
        }
        s.swap(i-1, j);
        s[i..].reverse();
        let mut ret = 0;
        for i in 0..s.len() {
            ret = ret * 10 + s[i] as i32 - '0' as i32;
        }
        if ret > i32::MAX as i32 {
            return -1;
        }
        ret
    }
}

=======
Suggestion 7

        let mut arr = n.to_string().into_bytes();
        let mut i = arr.len() - 1;
        while i > 0 && arr[i] <= arr[i - 1] {
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = arr.len() - 1;
        while j >= i && arr[j] <= arr[i - 1] {
            j -= 1;
        }
        arr.swap(i - 1, j);
        let mut l = i;
        let mut r = arr.len() - 1;
        while l < r {
            arr.swap(l, r);
            l += 1;
            r -= 1;
        }
        let s = String::from_utf8(arr).unwrap();
        let res = i32::from_str_radix(&s, 10).unwrap();
        if res > n {
            res
        } else {
            -1
        }
    }
}

=======
Suggestion 8

        let mut n = n.to_string().into_bytes();
        let len = n.len();
        let mut i = len - 1;
        while i > 0 {
            if n[i] > n[i - 1] {
                break;
            }
            i -= 1;
        }
        if i == 0 {
            return -1;
        }
        let mut j = len - 1;
        while j >= i {
            if n[j] > n[i - 1] {
                break;
            }
            j -= 1;
        }
        n.swap(i - 1, j);
        n[i..].reverse();
        let res: i64 = String::from_utf8(n).unwrap().parse().unwrap();
        if res > i32::max_value() as i64 {
            return -1;
        }
        res as i32

=======
Suggestion 9

        let mut v: Vec<char> = n.to_string().chars().collect();
        if !v.windows(2).any(|w| w[0] < w[1]) {
            return -1;
        }
        let mut i = v.len() - 2;
        while v[i] >= v[i + 1] {
            i -= 1;
        }
        let mut j = v.len() - 1;
        while v[j] <= v[i] {
            j -= 1;
        }
        v.swap(i, j);
        v[i + 1..].reverse();
        let res: i64 = v.into_iter().collect::<String>().parse().unwrap();
        if res > i32::max_value() as i64 {
            -1
        } else {
            res as i32
        }
    }
}

=======
Suggestion 10

        let mut n = n;
        let mut nums = Vec::new();
        while n > 0 {
            nums.push(n % 10);
            n /= 10;
        }
        let mut i = 0;
        for i in 0..nums.len()-1 {
            if nums[i] > nums[i+1] {
                break;
            }
        }
        if i == nums.len()-1 {
            return -1;
        }
        let mut j = 0;
        for j in 0..=i {
            if nums[j] > nums[i+1] {
                break;
            }
        }
        nums.swap(i+1, j);
        let mut res = 0;
        for i in 0..nums.len() {
            res = res * 10 + nums[nums.len()-i-1];
        }
        if res > std::i32::MAX as i64 {
            return -1;
        }
        res as i32
