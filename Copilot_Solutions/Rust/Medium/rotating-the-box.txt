Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let m = box.len();
        let n = box[0].len();
        let mut res = vec![vec!['.'; m]; n];
        for i in 0..m {
            let mut j = n - 1;
            let mut k = n - 1;
            while j < n {
                if box[i][j] == '*' {
                    res[j][m - i - 1] = '*';
                    k = j - 1;
                } else if box[i][j] == '#' {
                    res[k][m - i - 1] = '#';
                    k -= 1;
                }
                j += 1;
            }
        }
        res

=======

        let m = box.len();
        let n = box[0].len();
        let mut res = vec![vec!['.'; m]; n];
        for i in 0..m {
            let mut j = n - 1;
            let mut k = n - 1;
            while j != 0 {
                if box[i][j] == '#' {
                    res[k][m - 1 - i] = '#';
                    k -= 1;
                } else if box[i][j] == '*' {
                    k = j - 1;
                }
                j -= 1;
            }
            if box[i][0] == '#' {
                res[k][m - 1 - i] = '#';
            }
        }
        res

=======

        
    }
}

=======

        let m = box.len();
        let n = box[0].len();
        let mut box = box;
        let mut gravity = vec![vec![0; n]; m];
        for i in 0..m {
            for j in (0..n).rev() {
                if box[i][j] == '*' {
                    gravity[i][j] = 0;
                } else if box[i][j] == '#' {
                    gravity[i][j] = if i == m - 1 { 1 } else { gravity[i + 1][j] + 1 };
                } else {
                    gravity[i][j] = if i == m - 1 { 0 } else { gravity[i + 1][j] };
                }
            }
        }
        let mut result = vec![vec!['.'; m]; n];
        for i in 0..m {
            for j in 0..n {
                result[j][m - 1 - i] = if gravity[i][j] == 0 { box[i][j] } else { '.' };
                if gravity[i][j] > 0 {
                    result[j][m - gravity[i][j] - i] = '#';
                }
            }
        }
        result
    }
}
