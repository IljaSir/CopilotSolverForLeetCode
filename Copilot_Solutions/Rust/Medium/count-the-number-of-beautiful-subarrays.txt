Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            let mut odd = 0;
            for j in i..nums.len() {
                if nums[j] % 2 == 1 {
                    odd += 1;
                }
                if odd % 2 == 1 {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut odd = vec![-1];
        for (i, &num) in nums.iter().enumerate() {
            if num % 2 == 1 {
                odd.push(i as i64);
            }
        }
        odd.push(nums.len() as i64);
        let mut ans = 0;
        for i in 1..odd.len() {
            ans += (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        ans as i64
    }
}

=======

        let mut odd = vec![-1];
        for (i, &n) in nums.iter().enumerate() {
            if n % 2 == 1 {
                odd.push(i as i32);
            }
        }
        odd.push(nums.len() as i32);
        let mut res = 0;
        for i in 1..odd.len() {
            res += (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        res as i64

=======

        let mut res = 0;
        let mut odd = vec![-1];
        for (i, &n) in nums.iter().enumerate() {
            if n % 2 == 1 {
                odd.push(i as i32);
            }
        }
        odd.push(nums.len() as i32);
        for i in 1..odd.len() {
            res += (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        res as i64
    }
}

=======

        let mut ans = 0;
        let mut odd = vec![-1];
        for (i, &v) in nums.iter().enumerate() {
            if v % 2 == 1 {
                odd.push(i as i64);
            }
        }
        odd.push(nums.len() as i64);
        for i in 1..odd.len() {
            ans += (odd[i] - odd[i - 1]) * (odd[i + 1] - odd[i]);
        }
        ans

=======

        let mut count = 0;
        let mut odd = vec![-1];
        for (i, num) in nums.iter().enumerate() {
            if num % 2 == 1 {
                odd.push(i as i32);
            }
        }
        odd.push(nums.len() as i32);
        for i in 1..odd.len() {
            count += (odd[i] - odd[i-1]) * (odd[i+1] - odd[i]);
        }
        count as i64
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] % 2 == 1 {
                let mut left = 0;
                let mut right = 0;
                let mut j = i;
                while j > 0 && nums[j - 1] % 2 == 0 {
                    j -= 1;
                    left += 1;
                }
                let mut k = i;
                while k < nums.len() - 1 && nums[k + 1] % 2 == 0 {
                    k += 1;
                    right += 1;
                }
                count += (left + 1) * (right + 1) as i64;
            }
        }
        count
    }
}

=======

        let mut ans: i64 = 0;
        let mut odd: Vec<i64> = vec![0];
        for n in nums {
            if n % 2 == 0 {
                *odd.last_mut().unwrap() += 1;
            } else {
                odd.push(1);
            }
        }
        for n in odd {
            ans += n * (n + 1) / 2;
        }
        ans

=======

        let mut ans = 0;
        let mut odd = 0;
        let mut cnt = vec![0; 1];
        for i in 0..nums.len() {
            if nums[i] % 2 == 1 {
                odd += 1;
            }
            ans += cnt[odd as usize];
            cnt[odd as usize] += 1;
        }
        ans as i64

=======

        let mut result = 0;
        let mut subarray = Vec::new();
        for num in nums {
            if num % 2 == 0 {
                subarray.push(0);
            } else {
                subarray.push(1);
                result += 1;
            }
        }
        let mut i = 0;
        let mut j = 1;
        while j < subarray.len() {
            if subarray[i] == 0 && subarray[j] == 1 {
                result += 1;
                j += 1;
            } else if subarray[i] == 1 && subarray[j] == 1 {
                result += 1;
                i = j;
                j += 1;
            } else if subarray[i] == 1 && subarray[j] == 0 {
                i = j;
                j += 1;
            } else if subarray[i] == 0 && subarray[j] == 0 {
                j += 1;
            }
        }
        result as i64
    }
}
