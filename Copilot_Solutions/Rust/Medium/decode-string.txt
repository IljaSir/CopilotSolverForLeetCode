Synthesizing 8/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut stack = Vec::new();
        let mut num = 0;
        let mut res = String::new();
        for c in s.chars() {
            if c.is_numeric() {
                num = num * 10 + c.to_digit(10).unwrap() as usize;
            } else if c == '[' {
                stack.push((num, res.clone()));
                num = 0;
                res = String::new();
            } else if c == ']' {
                let (n, s) = stack.pop().unwrap();
                res = s + &res.repeat(n);
            } else {
                res.push(c);
            }
        }
        res

=======
Suggestion 2

        
    }
}

=======
Suggestion 3

        let mut stack = Vec::new();
        let mut result = String::new();
        let mut num = 0;
        for c in s.chars() {
            match c {
                '0'..='9' => {
                    num = num * 10 + (c as u8 - b'0') as usize;
                }
                '[' => {
                    stack.push((num, result));
                    num = 0;
                    result = String::new();
                }
                'a'..='z' => {
                    result.push(c);
                }
                ']' => {
                    let (n, mut prev) = stack.pop().unwrap();
                    for _ in 0..n {
                        prev.push_str(&result);
                    }
                    result = prev;
                }
                _ => panic!("Unexpected char: {}", c),
            }
        }
        result
    }
}

=======
Suggestion 4

        let mut stack: Vec<String> = Vec::new();
        let mut num = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap();
            } else if c == '[' {
                stack.push(num.to_string());
                num = 0;
            } else if c == ']' {
                let mut str = String::new();
                while let Some(v) = stack.pop() {
                    if v.parse::<i32>().is_ok() {
                        let mut temp = String::new();
                        for _ in 0..v.parse::<i32>().unwrap() {
                            temp.push_str(&str);
                        }
                        str = temp;
                        break;
                    } else {
                        str.insert_str(0, &v);
                    }
                }
                stack.push(str);
            } else {
                stack.push(c.to_string());
            }
        }
        stack.join("")

=======
Suggestion 5

        let mut stack = Vec::new();
        for c in s.chars() {
            if c != ']' {
                stack.push(c);
            } else {
                let mut decoded = String::new();
                while let Some(c) = stack.pop() {
                    if c == '[' {
                        break;
                    }
                    decoded.push(c);
                }
                decoded = decoded.chars().rev().collect();
                let mut num = String::new();
                while let Some(c) = stack.pop() {
                    if c.is_digit(10) {
                        num.push(c);
                    } else {
                        stack.push(c);
                        break;
                    }
                }
                let num = num.chars().rev().collect::<String>().parse::<usize>().unwrap();
                for _ in 0..num {
                    for c in decoded.chars() {
                        stack.push(c);
                    }
                }
            }
        }
        stack.into_iter().collect()
    }
}

=======
Suggestion 6

        let mut stack = vec![];
        let mut result = String::new();
        let mut number = 0;
        for c in s.chars() {
            match c {
                '0'..='9' => number = number * 10 + c as i32 - '0' as i32,
                '[' => {
                    stack.push(result);
                    stack.push(number.to_string());
                    result = String::new();
                    number = 0;
                },
                ']' => {
                    let mut temp = String::new();
                    let mut count = stack.pop().unwrap().parse::<i32>().unwrap();
                    while count > 0 {
                        temp.push_str(&result);
                        count -= 1;
                    }
                    result = stack.pop().unwrap() + &temp;
                },
                _ => result.push(c),
            }
        }
        result

=======
Suggestion 7

        let (mut result, mut stack) = (String::new(), Vec::new());
        let (mut num, mut len) = (0, s.len());
        let (mut i, mut j) = (0, 0);
        while i < len {
            if s[i..].starts_with('[') {
                stack.push((num, result.clone()));
                num = 0;
                result.clear();
                i += 1;
            } else if s[i..].starts_with(']') {
                let (n, mut r) = stack.pop().unwrap();
                result = r + &result.repeat(n);
                i += 1;
            } else if s[i..].starts_with(char::is_numeric) {
                j = i;
                while j < len && s[j..].starts_with(char::is_numeric) {
                    j += 1;
                }
                num = s[i..j].parse().unwrap();
                i = j;
            } else {
                result.push(s[i]);
                i += 1;
            }
        }
        result
