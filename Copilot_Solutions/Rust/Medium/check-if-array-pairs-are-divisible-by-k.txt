Synthesizing 10/10 solutions

=======

        let mut cnt = vec![0; k as usize];
        for &x in arr.iter() {
            cnt[((x % k) + k) as usize % k as usize] += 1;
        }
        for i in 1..k as usize / 2 + 1 {
            if cnt[i] != cnt[k as usize - i] {
                return false;
            }
        }
        cnt[0] % 2 == 0

=======

        let mut counter = vec![0; k as usize];
        for i in arr {
            counter[((i % k) + k) as usize % k as usize] += 1;
        }
        for i in 1..k as usize {
            if counter[i] != counter[k as usize - i] {
                return false;
            }
        }
        counter[0] % 2 == 0
    }
}

=======

        let mut map: Vec<i32> = vec![0; k as usize];
        for i in arr {
            map[((i % k) + k) as usize % k as usize] += 1;
        }
        for i in 1..k as usize / 2 + 1 {
            if map[i] != map[k as usize - i] {
                return false;
            }
        }
        map[0] % 2 == 0

=======

        let mut count = vec![0; k as usize];
        for a in arr {
            count[((a % k + k) % k) as usize] += 1;
        }
        for i in 1..k as usize / 2 + 1 {
            if count[i] != count[k as usize - i] {
                return false;
            }
        }
        count[0] % 2 == 0

=======

        let mut map = vec![0; k as usize];
        for &i in arr.iter() {
            map[((i % k) + k) as usize % k as usize] += 1;
        }
        for i in 1..(k as usize / 2 + 1) {
            if map[i] != map[k as usize - i] {
                return false;
            }
        }
        map[0] % 2 == 0

=======

        let mut m = vec![0; k as usize];
        for &n in arr.iter() {
            m[((n % k) + k) as usize % k as usize] += 1;
        }
        if m[0] % 2 != 0 {
            return false;
        }
        for i in 1..k/2+1 {
            if m[i as usize] != m[(k-i) as usize] {
                return false;
            }
        }
        true
    }
}

=======

        let mut m = vec![0; k as usize];
        for a in arr {
            let a = (a % k + k) % k;
            m[a as usize] += 1;
        }
        for i in 1..k as usize / 2 + 1 {
            if m[i] != m[k as usize - i] {
                return false;
            }
        }
        m[0] % 2 == 0

=======

        let mut map = std::collections::HashMap::new();
        for a in arr {
            let key = ((a % k) + k) % k;
            *map.entry(key).or_insert(0) += 1;
        }
        for (key, val) in map.iter() {
            if key == &0 || val != map.get(&(k - key)).unwrap_or(&0) {
                return false;
            }
        }
        true

=======

        let n = arr.len();
        let mut arr = arr;
        arr.sort();
        let mut map = std::collections::HashMap::new();
        for i in 0..n {
            let remainder = arr[i] % k;
            if remainder < 0 {
                let remainder = remainder + k;
            }
            if remainder == 0 {
                continue;
            }
            if let Some(x) = map.get_mut(&(k - remainder)) {
                if *x > 0 {
                    *x -= 1;
                    continue;
                }
            }
            *map.entry(remainder).or_insert(0) += 1;
        }
        for (_, v) in map {
            if v > 0 {
                return false;
            }
        }
        true
    }
}

=======

        if arr.len() % 2 != 0 {
            return false;
        }
        let mut pairs = vec![0; k as usize];
        for i in 0..arr.len() {
            let r = arr[i] % k;
            pairs[(r + k) as usize % k as usize] += 1;
        }
        for i in 1..k as usize / 2 + 1 {
            if pairs[i] != pairs[k as usize - i] {
                return false;
            }
        }
        if k % 2 == 0 && pairs[k as usize / 2] % 2 != 0 {
            return false;
        }
        true
    }
}
