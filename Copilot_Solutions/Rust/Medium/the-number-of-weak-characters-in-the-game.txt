Synthesizing 10/10 solutions

=======

        let mut properties = properties;
        properties.sort_by(|a, b| {
            if a[0] == b[0] {
                b[1].cmp(&a[1])
            } else {
                a[0].cmp(&b[0])
            }
        });
        let mut max = 0;
        let mut weak = 0;
        for i in 0..properties.len() {
            if properties[i][1] < max {
                weak += 1;
            } else {
                max = max.max(properties[i][1]);
            }
        }
        weak

=======

        let mut properties = properties;
        properties.sort_by(|a, b| b[0].cmp(&a[0]).then(a[1].cmp(&b[1])));
        let mut max_def = 0;
        let mut ans = 0;
        for p in properties {
            if p[1] < max_def {
                ans += 1;
            } else {
                max_def = p[1];
            }
        }
        ans
    }
}

=======

        let mut properties = properties;
        properties.sort_by(|a, b| b[0].cmp(&a[0]).then(a[1].cmp(&b[1])));
        let mut max = 0;
        let mut res = 0;
        for i in 0..properties.len() {
            if properties[i][1] < max {
                res += 1;
            } else {
                max = max.max(properties[i][1]);
            }
        }
        res
    }
}

=======

        let mut properties = properties;
        properties.sort_by(|a, b| b[0].cmp(&a[0]).then(a[1].cmp(&b[1])));
        let mut max = 0;
        let mut res = 0;
        for i in 0..properties.len() {
            if properties[i][1] < max {
                res += 1;
            } else {
                max = max.max(properties[i][1]);
            }
        }
        res

=======

        let mut properties = properties;
        properties.sort_unstable_by(|a, b| b[0].cmp(&a[0]).then(a[1].cmp(&b[1])));
        let mut max_defense = 0;
        let mut count = 0;
        for p in properties {
            if p[1] < max_defense {
                count += 1;
            }
            max_defense = max_defense.max(p[1]);
        }
        count

=======

        let mut properties = properties;
        properties.sort_by(|a, b| a[0].cmp(&b[0]));
        let mut max = 0;
        let mut count = 0;
        for i in (0..properties.len()).rev() {
            if properties[i][1] < max {
                count += 1;
            } else {
                max = properties[i][1];
            }
        }
        count
    }
}

=======

        let mut properties = properties;
        properties.sort_by(|a, b| a[0].cmp(&b[0]).reverse());
        let mut max = 0;
        let mut count = 0;
        for i in 0..properties.len() {
            if properties[i][1] < max {
                count += 1;
            } else {
                max = max.max(properties[i][1]);
            }
        }
        count
    }
}

=======

        let mut properties = properties;
        properties.sort_unstable_by_key(|v| (v[0], -v[1]));
        let mut max = 0;
        let mut ans = 0;
        for v in properties.into_iter().rev() {
            if v[1] < max {
                ans += 1;
            } else {
                max = v[1];
            }
        }
        ans

=======

        let mut properties = properties;
        properties.sort_by_key(|v| (v[0], -v[1]));
        let mut max = 0;
        let mut ans = 0;
        for v in properties.iter() {
            if v[1] < max {
                ans += 1;
            } else {
                max = v[1];
            }
        }
        ans
    }
}

=======

        let mut props = properties;
        props.sort_by_key(|x| (x[0], -x[1]));
        let mut max_def = 0;
        let mut ans = 0;
        for i in (0..props.len()).rev() {
            if props[i][1] < max_def {
                ans += 1;
            } else {
                max_def = props[i][1];
            }
        }
        ans
    }
}
