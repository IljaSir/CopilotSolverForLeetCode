Synthesizing 5/10 solutions (Duplicates hidden)

=======

        if connections.len() < n as usize - 1 {
            return -1;
        }
        let mut uf = UnionFind::new(n as usize);
        for c in connections {
            uf.union(c[0] as usize, c[1] as usize);
        }
        uf.count() - 1
    }
}

=======

        if connections.len() < n as usize - 1 {
            return -1;
        }
        let mut uf = UnionFind::new(n as usize);
        for connection in connections {
            uf.union(connection[0] as usize, connection[1] as usize);
        }
        let mut count = 0;
        for i in 0..n {
            if uf.find(i as usize) == i as usize {
                count += 1;
            }
        }
        count - 1
    }
}

=======

        
    }
}

=======

        let n = n as usize;
        let mut uf = UnionFind::new(n);
        let mut extra = 0;
        for conn in connections {
            if uf.union(conn[0] as usize, conn[1] as usize) {
                extra += 1;
            }
        }
        let mut cnt = 0;
        for i in 0..n {
            if uf.find(i) == i {
                cnt += 1;
            }
        }
        if cnt > extra + 1 {
            return -1;
        }
        cnt as i32 - 2
    }
}
