Synthesizing 10/10 solutions

=======

        let mut ans = 1;
        let mut left = 0;
        let mut right = 0;
        while right < arr.len() - 1 {
            if left == right {
                if arr[left] == arr[left + 1] {
                    left += 1;
                }
                right += 1;
            } else {
                if (arr[right - 1] < arr[right] && arr[right] > arr[right + 1]) ||
                    (arr[right - 1] > arr[right] && arr[right] < arr[right + 1]) {
                    right += 1;
                } else {
                    left = right;
                }
            }
            ans = ans.max(right - left + 1);
        }
        ans as i32
    }
}

=======

        let (mut ans, mut anchor) = (1, 0);
        for i in 1..arr.len() {
            let c = (arr[i - 1] - arr[i]).signum();
            if i == arr.len() - 1 || c * (arr[i] - arr[i + 1]).signum() != -1 {
                if c != 0 { ans = ans.max(i - anchor + 1); }
                anchor = i;
            }
        }
        ans

=======

        let mut max = 1;
        let mut cur = 1;
        let mut sign = 0;
        for i in 1..arr.len() {
            if arr[i - 1] == arr[i] {
                cur = 1;
                sign = 0;
            } else if arr[i - 1] < arr[i] {
                if sign == 1 {
                    cur += 1;
                } else {
                    cur = 2;
                }
                sign = 2;
            } else {
                if sign == 2 {
                    cur += 1;
                } else {
                    cur = 2;
                }
                sign = 1;
            }
            max = max.max(cur);
        }
        max

=======

        let mut max = 1;
        let mut curr = 1;
        let mut prev = 0;
        for i in 1..arr.len() {
            if arr[i] > arr[i - 1] {
                if prev == -1 {
                    curr += 1;
                } else {
                    curr = 2;
                }
                prev = 1;
            } else if arr[i] < arr[i - 1] {
                if prev == 1 {
                    curr += 1;
                } else {
                    curr = 2;
                }
                prev = -1;
            } else {
                curr = 1;
                prev = 0;
            }
            max = max.max(curr);
        }
        max

=======

        let mut max = 1;
        let mut i = 0;
        let mut j = 1;
        while j < arr.len() {
            if arr[j] == arr[j - 1] {
                i = j;
            } else if j == arr.len() - 1 || (arr[j] > arr[j - 1] && arr[j] > arr[j + 1]) || (arr[j] < arr[j - 1] && arr[j] < arr[j + 1]) {
                max = max.max(j - i + 1);
                i = j;
            }
            j += 1;
        }
        max

=======

        let mut max = 1;
        let mut current = 1;
        let mut sign = 0;
        for i in 1..arr.len() {
            if arr[i] == arr[i-1] {
                current = 1;
                sign = 0;
            } else if arr[i] > arr[i-1] {
                if sign == 1 {
                    current += 1;
                } else {
                    current = 2;
                }
                sign = 1;
            } else {
                if sign == -1 {
                    current += 1;
                } else {
                    current = 2;
                }
                sign = -1;
            }
            if current > max {
                max = current;
            }
        }
        max

=======

        let mut max = 1;
        let mut current = 1;
        let mut sign = 0;
        for i in 1..arr.len() {
            if arr[i] == arr[i-1] {
                current = 1;
            } else {
                let new_sign = if arr[i] > arr[i-1] { 1 } else { -1 };
                if sign == 0 || sign == new_sign {
                    current += 1;
                } else {
                    current = 2;
                }
                sign = new_sign;
            }
            max = max.max(current);
        }
        max

=======

        let mut max = 1;
        let mut current = 1;
        let mut last = 0;
        for i in 1..arr.len() {
            if arr[i] > arr[i - 1] {
                if last == 0 || last == 1 {
                    current += 1;
                    max = max.max(current);
                } else {
                    current = 2;
                }
                last = 1;
            } else if arr[i] < arr[i - 1] {
                if last == 0 || last == -1 {
                    current += 1;
                    max = max.max(current);
                } else {
                    current = 2;
                }
                last = -1;
            } else {
                current = 1;
                last = 0;
            }
        }
        max
    }
}

=======

        let mut dp = vec![1; arr.len()];
        for i in 1..arr.len() {
            if arr[i] > arr[i-1] {
                if i%2 == 1 {
                    dp[i] = dp[i-1] + 1;
                } else {
                    dp[i] = 2;
                }
            } else if arr[i] < arr[i-1] {
                if i%2 == 0 {
                    dp[i] = dp[i-1] + 1;
                } else {
                    dp[i] = 2;
                }
            }
        }
        *dp.iter().max().unwrap() as i32

=======

        let mut ans = 1;
        let mut start = 0;
        let mut end = 0;
        let mut last = 0;
        while end < arr.len() - 1 {
            let a = arr[end];
            let b = arr[end + 1];
            let c = b.cmp(&a);
            if c == last {
                start = end;
            } else if c == std::cmp::Ordering::Equal {
                start = end + 1;
            }
            ans = ans.max(end - start + 2);
            last = c;
            end += 1;
        }
        ans as i32
