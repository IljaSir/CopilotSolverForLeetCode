Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut slow = nums[0];
        let mut fast = nums[nums[0] as usize];
        while slow != fast {
            slow = nums[slow as usize];
            fast = nums[nums[fast as usize] as usize];
        }
        fast = 0;
        while slow != fast {
            slow = nums[slow as usize];
            fast = nums[fast as usize];
        }
        slow

=======
Suggestion 2

        let mut slow = 0;
        let mut fast = 0;
        loop {
            slow = nums[slow as usize] as usize;
            fast = nums[nums[fast as usize] as usize] as usize;
            if slow == fast {
                break;
            }
        }
        slow = 0;
        loop {
            slow = nums[slow as usize] as usize;
            fast = nums[fast as usize] as usize;
            if slow == fast {
                break;
            }
        }
        slow as i32

=======
Suggestion 3

        let mut slow = 0;
        let mut fast = 0;
        loop {
            slow = nums[slow as usize] as usize;
            fast = nums[nums[fast as usize] as usize] as usize;
            if slow == fast {
                break;
            }
        }
        let mut ptr1 = 0;
        let mut ptr2 = slow;
        loop {
            ptr1 = nums[ptr1] as usize;
            ptr2 = nums[ptr2] as usize;
            if ptr1 == ptr2 {
                break;
            }
        }
        return ptr1 as i32;

=======
Suggestion 4

        let mut slow = nums[0];
        let mut fast = nums[0];
        loop {
            slow = nums[slow as usize];
            fast = nums[nums[fast as usize] as usize];
            if slow == fast {
                break;
            }
        }
        let mut slow = nums[0];
        while slow != fast {
            slow = nums[slow as usize];
            fast = nums[fast as usize];
        }
        slow
    }
}

=======
Suggestion 5

        let mut s = 0;
        let mut f = 0;
        loop {
            s = nums[s as usize];
            f = nums[nums[f as usize] as usize];
            if s == f {
                break;
            }
        }
        let mut p = 0;
        loop {
            s = nums[s as usize];
            p = nums[p as usize];
            if s == p {
                break;
            }
        }
        s

=======
Suggestion 6

        let mut fast = nums[0];
        let mut slow = nums[0];
        loop {
            fast = nums[nums[fast as usize] as usize];
            slow = nums[slow as usize];
            if fast == slow {
                break;
            }
        }
        let mut ptr1 = nums[0];
        let mut ptr2 = slow;
        while ptr1 != ptr2 {
            ptr1 = nums[ptr1 as usize];
            ptr2 = nums[ptr2 as usize];
        }
        ptr1

=======
Suggestion 7

        let mut nums = nums;
        let mut slow = 0;
        let mut fast = 0;
        loop {
            slow = nums[slow] as usize;
            fast = nums[nums[fast] as usize] as usize;
            if slow == fast {
                break;
            }
        }
        let mut ptr1 = 0;
        let mut ptr2 = slow;
        while ptr1 != ptr2 {
            ptr1 = nums[ptr1] as usize;
            ptr2 = nums[ptr2] as usize;
        }
        ptr1 as i32

=======
Suggestion 8

        let mut nums = nums;
        nums.sort();
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] {
                return nums[i];
            }
        }
        0
    }
}

=======
Suggestion 9

        let mut nums = nums;
        nums.sort();
        for i in 1..nums.len() {
            if nums[i] == nums[i-1] {
                return nums[i];
            }
        }
        -1

=======
Suggestion 10

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == (i as i32) + 1 {
                i += 1;
                continue;
            }
            if nums[i] == nums[nums[i] as usize - 1] {
                return nums[i];
            }
            nums.swap(i, nums[i] as usize - 1);
        }
        0
    }
}
