Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut result = vec![];
        for i in 1..10 {
            Self::dfs(n - 1, i, k, &mut result);
        }
        result
    }
    fn dfs(n: i32, num: i32, k: i32, result: &mut Vec<i32>) {
        if n == 0 {
            result.push(num);
            return;
        }
        let last = num % 10;
        if last - k >= 0 {
            Self::dfs(n - 1, num * 10 + last - k, k, result);
        }
        if k != 0 && last + k < 10 {
            Self::dfs(n - 1, num * 10 + last + k, k, result);
        }

=======

        let mut ans = vec![];
        for i in 1..10 {
            ans.push(i);
        }
        for _ in 1..n {
            let mut next = vec![];
            for i in ans {
                let last = i % 10;
                if last + k < 10 {
                    next.push(i * 10 + last + k);
                }
                if k != 0 && last - k >= 0 {
                    next.push(i * 10 + last - k);
                }
            }
            ans = next;
        }
        if n == 1 {
            ans.push(0);
        }
        ans

=======

        let mut res = Vec::new();
        let mut dfs = |n: i32, num: i32| {
            if n == 0 {
                res.push(num);
                return;
            }
            let prev = num % 10;
            if prev + k < 10 {
                dfs(n - 1, num * 10 + prev + k);
            }
            if k > 0 && prev - k >= 0 {
                dfs(n - 1, num * 10 + prev - k);
            }
        };
        if n == 1 {
            res.push(0);
        }
        for i in 1..10 {
            dfs(n - 1, i);
        }
        res
    }
}

=======

        let mut result = vec![0; 1];
        for i in 1..n {
            let mut new_result = vec![];
            for j in 0..result.len() {
                let mut last = result[j] % 10;
                if last + k < 10 {
                    new_result.push(result[j] * 10 + last + k);
                }
                if k != 0 && last >= k {
                    new_result.push(result[j] * 10 + last - k);
                }
            }
            result = new_result;
        }
        if n == 1 {
            result.push(0);
        }
        result
    }
}
