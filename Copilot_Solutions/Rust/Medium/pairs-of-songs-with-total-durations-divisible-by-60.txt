Synthesizing 10/10 solutions

=======

        let mut res = 0;
        let mut cnt = vec![0; 60];
        for t in time {
            res += cnt[(60 - t % 60) % 60];
            cnt[t as usize % 60] += 1;
        }
        res

=======

        let mut res = 0;
        let mut m = vec![0; 60];
        for t in time {
            res += m[(60 - t % 60) % 60];
            m[t as usize % 60] += 1;
        }
        res

=======

        let mut cnt = vec![0; 60];
        let mut res = 0;
        for t in time {
            let t = t % 60;
            res += cnt[(60 - t) % 60];
            cnt[t as usize] += 1;
        }
        res

=======

        let mut count = 0;
        let mut remainders = vec![0; 60];
        for t in time {
            let r = t % 60;
            if r == 0 {
                count += remainders[0];
            } else {
                count += remainders[60 - r];
            }
            remainders[r] += 1;
        }
        count

=======

        let mut counter = vec![0; 60];
        let mut ans = 0;
        for t in time {
            let t = t % 60;
            ans += counter[(60 - t) % 60];
            counter[t as usize] += 1;
        }
        ans

=======

        let mut cnt = vec![0; 60];
        let mut ans = 0;
        for t in time {
            let t = t as usize;
            ans += cnt[(60 - t % 60) % 60];
            cnt[t % 60] += 1;
        }
        ans

=======

        let mut cnt = vec![0; 60];
        let mut ans = 0;
        for t in time.iter() {
            let t = *t % 60;
            ans += cnt[(60 - t) % 60];
            cnt[t] += 1;
        }
        ans

=======

        let mut count = 0;
        let mut remainders = vec![0; 60];
        for t in time {
            let rem = t % 60;
            if rem == 0 {
                count += remainders[0];
            } else {
                count += remainders[60 - rem];
            }
            remainders[rem] += 1;
        }
        count

=======

        let mut count = 0;
        let mut time = time;
        for i in 0..time.len() {
            for j in i+1..time.len() {
                if (time[i] + time[j]) % 60 == 0 {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut remainders = vec![0; 60];
        for t in time {
            let rem = t % 60;
            count += remainders[(60 - rem) % 60];
            remainders[rem as usize] += 1;
        }
        count
