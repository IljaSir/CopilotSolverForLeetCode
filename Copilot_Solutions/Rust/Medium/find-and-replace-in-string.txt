Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut s = s.clone();
        let mut indices = indices.clone();
        let mut sources = sources.clone();
        let mut targets = targets.clone();
        let mut i = 0;
        while i < indices.len() {
            let mut j = i;
            while j < indices.len() && indices[i] == indices[j] {
                j += 1;
            }
            for k in i..j {
                let index = indices[k] as usize;
                let source = sources[k].clone();
                let target = targets[k].clone();
                if s[index..index + source.len()] == source {
                    s = s[..index].to_string() + &target + &s[index + source.len()..];
                }
            }
            i = j;
        }
        s
    }
}

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        while i < indices.len() {
            let index = indices[i] as usize;
            let source = sources[i].as_bytes();
            let target = targets[i].as_bytes();
            if s[index..(index + source.len())] == *source {
                s.splice(index..(index + source.len()), target.iter().cloned());
            }
            i += 1;
        }
        String::from_utf8(s).unwrap()

=======

        let mut result = s;
        let mut indices = indices;
        let mut sources = sources;
        let mut targets = targets;
        let mut i = 0;
        while i < indices.len() {
            let index = indices[i] as usize;
            let source = sources[i].to_string();
            let target = targets[i].to_string();
            if result[index..index+source.len()] == source {
                result = result[..index].to_string() + &target + &result[index+source.len()..];
                for j in i+1..indices.len() {
                    if indices[j] as usize >= index {
                        indices[j] -= source.len() as i32 - target.len() as i32;
                    }
                }
            }
            i += 1;
        }
        result
