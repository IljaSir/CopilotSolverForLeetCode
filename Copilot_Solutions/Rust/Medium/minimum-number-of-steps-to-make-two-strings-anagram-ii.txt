Synthesizing 10/10 solutions

=======

        let mut count = vec![0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        for c in t.chars() {
            count[c as usize - 'a' as usize] -= 1;
        }
        count.iter().filter(|&&x| x > 0).sum::<i32>()

=======

        let mut cnt = [0; 26];
        for c in s.chars() {
            cnt[c as usize - 'a' as usize] += 1;
        }
        for c in t.chars() {
            cnt[c as usize - 'a' as usize] -= 1;
        }
        cnt.iter().map(|&x| x.abs()).sum::<i32>() / 2
    }
}

=======

        let mut freq = vec![0; 26];
        for c in s.chars() {
            freq[c as usize - 'a' as usize] += 1;
        }
        for c in t.chars() {
            freq[c as usize - 'a' as usize] -= 1;
        }
        let mut steps = 0;
        for i in 0..26 {
            if freq[i] > 0 {
                steps += freq[i];
            }
        }
        steps

=======

        let mut arr = [0; 26];
        for c in s.chars() {
            arr[c as usize - 'a' as usize] += 1;
        }
        for c in t.chars() {
            arr[c as usize - 'a' as usize] -= 1;
        }
        arr.iter().map(|&x| x.abs()).sum::<i32>() / 2

=======

        let mut s = s.into_bytes();
        let mut t = t.into_bytes();
        s.sort();
        t.sort();
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while i < s.len() {
            if j >= t.len() {
                count += 1;
                i += 1;
                continue;
            }
            if s[i] == t[j] {
                i += 1;
                j += 1;
                continue;
            }
            if s[i] < t[j] {
                i += 1;
                count += 1;
                continue;
            }
            if s[i] > t[j] {
                j += 1;
            }
        }
        count += t.len() - j;
        count as i32

=======

        let mut chars = [0; 26];
        for ch in s.chars() {
            chars[ch as usize - 'a' as usize] += 1;
        }
        for ch in t.chars() {
            chars[ch as usize - 'a' as usize] -= 1;
        }
        chars.iter().map(|&x| x.abs()).sum::<i32>() / 2

=======

        let mut s = s.as_bytes().to_vec();
        let mut t = t.as_bytes().to_vec();
        s.sort();
        t.sort();
        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s[i] < t[j] {
                i += 1;
                count += 1;
            } else if s[i] > t[j] {
                j += 1;
                count += 1;
            } else {
                i += 1;
                j += 1;
            }
        }
        count + s.len() - i + t.len() - j
    }
}

=======

        let mut s = s.into_bytes();
        let mut t = t.into_bytes();
        let mut cnt = [0; 26];
        for i in 0..s.len() {
            cnt[(s[i] - b'a') as usize] += 1;
            cnt[(t[i] - b'a') as usize] -= 1;
        }
        cnt.iter().map(|&x| if x > 0 { x } else { 0 }).sum()

=======

        let mut s = s.into_bytes();
        let mut t = t.into_bytes();
        let mut cnt = vec![0; 26];
        for i in 0..s.len() {
            cnt[(s[i] - 'a' as u8) as usize] += 1;
            cnt[(t[i] - 'a' as u8) as usize] -= 1;
        }
        cnt.iter().map(|x| x.abs()).sum::<i32>() / 2

=======

        let mut count = 0;
        let mut count_s = [0; 26];
        let mut count_t = [0; 26];
        for (s, t) in s.chars().zip(t.chars()) {
            count_s[(s as u8 - b'a') as usize] += 1;
            count_t[(t as u8 - b'a') as usize] += 1;
        }
        for i in 0..26 {
            count += (count_s[i] - count_t[i]).abs();
        }
        count / 2
