Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut s1 = s1.as_bytes().to_vec();
        let mut s2 = s2.as_bytes().to_vec();
        s1.sort();
        for i in 0..=s2.len()-s1.len() {
            let mut s = s2[i..i+s1.len()].to_vec();
            s.sort();
            if s == s1 {
                return true;
            }
        }
        false

=======
Suggestion 2

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut s1_map = [0; 26];
        let mut s2_map = [0; 26];
        for i in 0..s1.len() {
            s1_map[(s1[i] - b'a') as usize] += 1;
            s2_map[(s2[i] - b'a') as usize] += 1;
        }
        for i in 0..s2.len() - s1.len() {
            if s1_map == s2_map {
                return true;
            }
            s2_map[(s2[i] - b'a') as usize] -= 1;
            s2_map[(s2[i + s1.len()] - b'a') as usize] += 1;
        }
        s1_map == s2_map

=======
Suggestion 3

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut cnt = [0; 26];
        for &c in s1 {
            cnt[c as usize - 'a' as usize] += 1;
        }
        let mut i = 0;
        let mut j = 0;
        while j < s2.len() {
            let c = s2[j] as usize - 'a' as usize;
            cnt[c] -= 1;
            while cnt[c] < 0 {
                cnt[s2[i] as usize - 'a' as usize] += 1;
                i += 1;
            }
            if j - i + 1 == s1.len() {
                return true;
            }
            j += 1;
        }
        false

=======
Suggestion 4

        let mut s1 = s1.as_bytes().to_vec();
        let s2 = s2.as_bytes();
        s1.sort();
        for i in 0..s2.len() {
            if i + s1.len() > s2.len() {
                break;
            }
            let mut tmp = s2[i..i+s1.len()].to_vec();
            tmp.sort();
            if tmp == s1 {
                return true;
            }
        }
        false

=======
Suggestion 5

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut cnt = [0; 26];
        for &c in s1 {
            cnt[c as usize - 97] += 1;
        }
        let mut left = 0;
        let mut right = 0;
        while right < s2.len() {
            if cnt[s2[right] as usize - 97] > 0 {
                cnt[s2[right] as usize - 97] -= 1;
                right += 1;
            } else {
                cnt[s2[left] as usize - 97] += 1;
                left += 1;
            }
            if right - left == s1.len() {
                return true;
            }
        }
        false

=======
Suggestion 6

        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut s1_map = [0; 26];
        let mut s2_map = [0; 26];
        let s1_len = s1.len();
        let s2_len = s2.len();
        if s1_len > s2_len {
            return false;
        }
        for i in 0..s1_len {
            s1_map[(s1[i] - b'a') as usize] += 1;
            s2_map[(s2[i] - b'a') as usize] += 1;
        }
        if s1_map == s2_map {
            return true;
        }
        let mut i = 0;
        while i + s1_len < s2_len {
            s2_map[(s2[i] - b'a') as usize] -= 1;
            s2_map[(s2[i + s1_len] - b'a') as usize] += 1;
            if s1_map == s2_map {
                return true;
            }
            i += 1;
        }
        false
    }
}

=======
Suggestion 7

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        for i in 0..=s2.len()-s1.len() {
            let mut s2_sub = s2[i..i+s1.len()].to_vec();
            s2_sub.sort();
            if s2_sub == s1 {
                return true;
            }
        }
        false

=======
Suggestion 8

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        let mut s1_count = [0; 26];
        let mut s2_count = [0; 26];
        for i in 0..s1.len() {
            s1_count[s1[i] as usize - 97] += 1;
            s2_count[s2[i] as usize - 97] += 1;
        }
        if s1_count == s2_count {
            return true;
        }
        for i in 0..s2.len() - s1.len() {
            s2_count[s2[i] as usize - 97] -= 1;
            s2_count[s2[i + s1.len()] as usize - 97] += 1;
            if s1_count == s2_count {
                return true;
            }
        }
        false

=======
Suggestion 9

        let (mut left, mut right) = (0, 0);
        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        let mut windows = [0; 26];
        let mut needs = [0; 26];
        for i in 0..s1.len() {
            needs[s1[i] as usize - 'a' as usize] += 1;
        }
        let mut match_count = 0;
        while right < s2.len() {
            let c = s2[right] as usize - 'a' as usize;
            if needs[c] > 0 {
                windows[c] += 1;
                if windows[c] == needs[c] {
                    match_count += 1;
                }
            }
            right += 1;
            while right - left > s1.len() {
                let c = s2[left] as usize - 'a' as usize;
                if needs[c] > 0 {
                    windows[c] -= 1;
                    if windows[c] < needs[c] {
                        match_count -= 1;
                    }
                }
                left += 1;
            }
            if match_count == needs.len() {
                return true;
            }
        }
        false

=======
Suggestion 10

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        let mut count = vec![0; 26];
        let mut count2 = vec![0; 26];
        let mut i = 0;
        while i < s1.len() {
            count[s1[i] as usize - 97] += 1;
            count2[s2[i] as usize - 97] += 1;
            i += 1;
        }
        if count == count2 {
            return true;
        }
        while i < s2.len() {
            count2[s2[i - s1.len()] as usize - 97] -= 1;
            count2[s2[i] as usize - 97] += 1;
            if count == count2 {
                return true;
            }
            i += 1;
        }
        false
