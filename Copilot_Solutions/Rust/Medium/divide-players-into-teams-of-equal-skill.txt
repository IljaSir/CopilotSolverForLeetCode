Synthesizing 10/10 solutions

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        for i in (0..skill.len()).step_by(2) {
            sum += skill[i] as i64 * skill[i + 1] as i64;
        }
        sum

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        for i in 0..skill.len()/2 {
            sum += skill[i] as i64 * skill[skill.len()-i-1] as i64;
        }
        sum

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        for i in 0..skill.len()/2 {
            sum += skill[i] as i64 * skill[skill.len()-1-i] as i64;
        }
        sum
    }
}

=======

        let mut skill = skill;
        skill.sort();
        let n = skill.len();
        let mut ans = 0;
        for i in 0..n/2 {
            ans += skill[i] as i64 * skill[n-i-1] as i64;
        }
        ans
    }
}

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        let mut i = 0;
        let mut j = skill.len() - 1;
        while i < j {
            sum += skill[i] as i64 * skill[j] as i64;
            i += 1;
            j -= 1;
        }
        sum
    }
}

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        let mut i = 0;
        while i < skill.len() {
            sum += skill[i] as i64 * skill[i+1] as i64;
            i += 2;
        }
        sum

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        for i in 0..skill.len()/2 {
            sum += (skill[i] as i64) * (skill[skill.len() - 1 - i] as i64);
        }
        sum

=======

        let mut skill = skill;
        skill.sort();
        let mut ans = 0;
        for i in 0..skill.len() {
            ans += skill[i] as i64 * skill[skill.len() - 1 - i] as i64;
        }
        ans
    }
}

=======

        let mut skill = skill;
        skill.sort();
        let mut sum = 0;
        let mut i = 0;
        while i < skill.len() {
            sum += (skill[i] * skill[i + 1]) as i64;
            i += 2;
        }
        sum
    }
}

=======

        
    }
}
