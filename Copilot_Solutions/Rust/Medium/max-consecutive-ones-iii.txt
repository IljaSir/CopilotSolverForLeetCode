Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = 0;
        let mut zeros = 0;
        let mut max_len = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                zeros += 1;
            }
            right += 1;
            while zeros > k {
                if nums[left] == 0 {
                    zeros -= 1;
                }
                left += 1;
            }
            max_len = max_len.max(right - left);
        }
        max_len as i32

=======

        let mut left = 0;
        let mut right = 0;
        let mut k = k;
        let mut ans = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[left] == 0 {
                    k += 1;
                }
                left += 1;
            }
            right += 1;
            ans = ans.max(right - left);
        }
        ans as i32

=======

        let mut left = 0;
        let mut right = 0;
        let mut max = 0;
        let mut zeros = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                zeros += 1;
            }
            while zeros > k {
                if nums[left] == 0 {
                    zeros -= 1;
                }
                left += 1;
            }
            max = std::cmp::max(max, right - left + 1);
            right += 1;
        }
        max as i32
    }
}

=======

        let mut left = 0;
        let mut right = 0;
        let mut k = k;
        let mut max_len = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[left] == 0 {
                    k += 1;
                }
                left += 1;
            }
            max_len = max_len.max(right - left + 1);
            right += 1;
        }
        max_len as i32
    }
}

=======

        let (mut left, mut right) = (0, 0);
        let (mut zeros, mut res) = (0, 0);
        while right < nums.len() {
            if nums[right] == 0 {
                zeros += 1;
            }
            while zeros > k {
                if nums[left] == 0 {
                    zeros -= 1;
                }
                left += 1;
            }
            res = res.max(right - left + 1);
            right += 1;
        }
        res as i32
    }
}

=======

        let mut l = 0;
        let mut r = 0;
        let mut zero_count = 0;
        let mut max_len = 0;
        while r < nums.len() {
            if nums[r] == 0 {
                zero_count += 1;
            }
            while zero_count > k {
                if nums[l] == 0 {
                    zero_count -= 1;
                }
                l += 1;
            }
            max_len = max_len.max(r - l + 1);
            r += 1;
        }
        max_len as i32

=======

        let (mut l, mut r, mut max, mut zeros) = (0, 0, 0, 0);
        while r < nums.len() {
            if nums[r] == 0 {
                zeros += 1;
            }
            while zeros > k {
                if nums[l] == 0 {
                    zeros -= 1;
                }
                l += 1;
            }
            max = max.max(r - l + 1);
            r += 1;
        }
        max as i32

=======

        let mut k = k;
        let mut max = 0;
        let mut i = 0;
        for j in 0..nums.len() {
            if nums[j] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[i] == 0 {
                    k += 1;
                }
                i += 1;
            }
            max = max.max(j - i + 1);
        }
        max as i32
    }
}

=======

        let mut zeros = 0;
        let mut left = 0;
        let mut right = 0;
        let mut max_len = 0;
        while right < nums.len() {
            if nums[right] == 0 {
                zeros += 1;
            }
            while zeros > k {
                if nums[left] == 0 {
                    zeros -= 1;
                }
                left += 1;
            }
            max_len = max_len.max(right - left + 1);
            right += 1;
        }
        max_len as i32

=======

        let (mut l, mut r, mut max, mut k) = (0, 0, 0, k);
        while r < nums.len() {
            if nums[r] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[l] == 0 {
                    k += 1;
                }
                l += 1;
            }
            max = max.max(r - l + 1);
            r += 1;
        }
        max as i32
    }
}
