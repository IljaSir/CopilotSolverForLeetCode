Synthesizing 10/10 solutions

=======

        let mut s0 = 0;
        let mut s1 = 0;
        let mut t0 = 0;
        let mut t1 = 0;
        for i in 0..s.len() {
            if s.chars().nth(i).unwrap() == '0' {
                s0 += 1;
            } else {
                s1 += 1;
            }
            if target.chars().nth(i).unwrap() == '0' {
                t0 += 1;
            } else {
                t1 += 1;
            }
        }
        s0 == t0 && s1 == t1

=======

        let mut cnt = [0; 2];
        for c in s.chars() {
            cnt[c as usize - '0' as usize] += 1;
        }
        for c in target.chars() {
            cnt[c as usize - '0' as usize] -= 1;
        }
        cnt[0] == 0 && cnt[1] == 0

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut target = target.chars().collect::<Vec<char>>();
        s.sort();
        target.sort();
        s == target
    }
}

=======

        let mut cnt = [0; 2];
        for ch in s.chars() {
            cnt[ch as usize - '0' as usize] += 1;
        }
        for ch in target.chars() {
            cnt[ch as usize - '0' as usize] -= 1;
        }
        cnt[0] == 0 && cnt[1] == 0

=======

        s.chars().zip(target.chars()).fold(0, |acc, (a, b)| acc + (a as i32 - b as i32)) == 0

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let mut target = target.chars().collect::<Vec<_>>();
        s.sort();
        target.sort();
        s == target

=======

        let mut count = [0; 2];
        for (a, b) in s.as_bytes().iter().zip(target.as_bytes().iter()) {
            count[*a as usize - 48] += 1;
            count[*b as usize - 48] -= 1;
        }
        count[0] == 0 && count[1] == 0

=======

        let mut s = s.into_bytes();
        let mut target = target.into_bytes();
        let mut count = 0;
        for i in 0..s.len() {
            if s[i] != target[i] {
                count += 1;
            }
        }
        count % 2 == 0

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut target = target.chars().collect::<Vec<char>>();
        let mut s_ones = 0;
        let mut target_ones = 0;
        for i in 0..s.len() {
            if s[i] == '1' { s_ones += 1; }
            if target[i] == '1' { target_ones += 1; }
        }
        s_ones == target_ones

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut target = target.chars().collect::<Vec<char>>();
        let mut n = s.len();
        let mut i = 0;
        while i < n {
            if s[i] != target[i] {
                if i == n - 1 {
                    return false;
                }
                s[i] = (s[i] as u8 ^ s[i+1] as u8) as char;
                s[i+1] = (s[i+1] as u8 ^ s[i] as u8) as char;
                s[i] = (s[i] as u8 ^ s[i+1] as u8) as char;
                if s[i] != target[i] {
                    return false;
                }
                n -= 1;
            } else {
                i += 1;
            }
        }
        true
