Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        for t in triplets {
            if t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2] {
                a = a.max(t[0]);
                b = b.max(t[1]);
                c = c.max(t[2]);
            }
        }
        a == target[0] && b == target[1] && c == target[2]

=======

        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        for triplet in triplets {
            if triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2] {
                a = std::cmp::max(a, triplet[0]);
                b = std::cmp::max(b, triplet[1]);
                c = std::cmp::max(c, triplet[2]);
            }
        }
        a == target[0] && b == target[1] && c == target[2]

=======

        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        for t in triplets.iter() {
            if t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2] {
                a = a.max(t[0]);
                b = b.max(t[1]);
                c = c.max(t[2]);
            }
        }
        a == target[0] && b == target[1] && c == target[2]

=======

        let mut max = vec![0, 0, 0];
        for t in triplets {
            if t[0] <= target[0] && t[1] <= target[1] && t[2] <= target[2] {
                max[0] = max[0].max(t[0]);
                max[1] = max[1].max(t[1]);
                max[2] = max[2].max(t[2]);
            }
        }
        max == target

=======

        let mut t = vec![0; 3];
        for triplet in triplets {
            if triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2] {
                t[0] = t[0].max(triplet[0]);
                t[1] = t[1].max(triplet[1]);
                t[2] = t[2].max(triplet[2]);
            }
        }
        t == target

=======

        let mut t = target;
        for v in triplets {
            if v[0] <= t[0] && v[1] <= t[1] && v[2] <= t[2] {
                t[0] = t[0].min(v[0]);
                t[1] = t[1].min(v[1]);
                t[2] = t[2].min(v[2]);
            }
        }
        t == target

=======

        let mut max = vec![0,0,0];
        for triplet in triplets {
            if triplet[0] <= target[0] && triplet[1] <= target[1] && triplet[2] <= target[2] {
                max[0] = max[0].max(triplet[0]);
                max[1] = max[1].max(triplet[1]);
                max[2] = max[2].max(triplet[2]);
            }
        }
        max == target

=======

        let mut t = target;
        for t1 in triplets {
            if t1[0] <= t[0] && t1[1] <= t[1] && t1[2] <= t[2] {
                t[0] = t[0].min(t1[0]);
                t[1] = t[1].min(t1[1]);
                t[2] = t[2].min(t1[2]);
            }
        }
        t == target

=======

        let mut t = vec![0; 3];
        for t1 in triplets {
            if t1[0] > target[0] || t1[1] > target[1] || t1[2] > target[2] {
                continue;
            }
            for i in 0..3 {
                t[i] = t[i].max(t1[i]);
            }
        }
        t == target
