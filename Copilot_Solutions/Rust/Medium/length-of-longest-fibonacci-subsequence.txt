Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let n = arr.len();
        let mut dp = vec![vec![0; n]; n];
        let mut ans = 0;
        let mut m = std::collections::HashMap::new();
        for i in 0..n {
            m.insert(arr[i], i);
        }
        for i in 0..n {
            for j in i + 1..n {
                if let Some(k) = m.get(&(arr[j] - arr[i])) {
                    if *k < i {
                        dp[i][j] = dp[*k][i] + 1;
                        ans = ans.max(dp[i][j]);
                    }
                }
            }
        }
        ans

=======

        let n = arr.len();
        let mut f = vec![vec![2; n]; n];
        let mut ans = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..n {
            map.insert(arr[i], i);
        }
        for i in 1..n {
            for j in 0..i {
                let target = arr[i] - arr[j];
                if target < arr[j] && map.contains_key(&target) {
                    let k = map[&target];
                    f[j][i] = f[k][j] + 1;
                }
                ans = ans.max(f[j][i]);
            }
        }
        if ans > 2 { ans } else { 0 }

=======

        let n = arr.len();
        let mut dp = vec![vec![2; n]; n];
        let mut idx = HashMap::new();
        let mut ans = 0;
        for i in 0..n {
            idx.insert(arr[i], i);
        }
        for i in 0..n {
            for j in i+1..n {
                let k = idx.get(&(arr[j] - arr[i])).unwrap_or(&n);
                if *k < i {
                    dp[i][j] = dp[*k][i] + 1;
                }
                ans = ans.max(dp[i][j]);
            }
        }
        if ans >= 3 {
            ans as i32
        } else {
            0
        }

=======

        let mut dp = vec![vec![0; arr.len()]; arr.len()];
        let mut result = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..arr.len() {
            map.insert(arr[i], i);
        }
        for i in 2..arr.len() {
            for j in 1..i {
                let k = map.get(&(arr[i] - arr[j]));
                if let Some(k) = k {
                    if *k < j {
                        dp[i][j] = dp[j][*k] + 1;
                        result = result.max(dp[i][j]);
                    }
                }
            }
        }
        result

=======

        
    }
}
