Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut res = String::new();
        for i in 0..n {
            if nums[i] == "0" {
                res.push('1');
            } else {
                res.push('0');
            }
        }
        return res;
    }
}

=======

        let n = nums.len();
        let mut res = String::new();
        for i in 0..n {
            if nums[i] == "0" {
                res.push('1');
            } else {
                res.push('0');
            }
        }
        res

=======

        let n = nums.len();
        let mut ans = String::new();
        for i in 0..n {
            ans.push(if nums[i].chars().nth(i).unwrap() == '0' { '1' } else { '0' });
        }
        ans

=======

        let n = nums.len();
        let mut res = String::new();
        for i in 0..n {
            res.push(if nums[i].chars().nth(i).unwrap() == '0' {'1'} else {'0'});
        }
        res
    }
}

=======

        let n = nums.len();
        let mut res = String::new();
        for i in 0..n {
            res.push(if nums[i].chars().nth(i).unwrap() == '1' { '0' } else { '1' });
        }
        res
    }
}

=======

        let n = nums.len();
        let mut ans = String::new();
        for i in 0..n {
            ans.push(if nums[i].chars().nth(0).unwrap() == '0' { '1' } else { '0' });
        }
        ans
    }
}

=======

        let n = nums.len();
        let mut result = String::with_capacity(n);
        for i in 0..n {
            result.push(if nums[i].chars().nth(i).unwrap() == '1' { '0' } else { '1' });
        }
        result
    }
}

=======

        let n = nums.len();
        let mut ans = vec!['0'; n];
        for i in 0..n {
            ans[i] = if nums[i].as_bytes()[i] == '0' as u8 { '1' } else { '0' };
        }
        ans.into_iter().collect()

=======

        let mut res = String::from("");
        for i in 0..nums.len() {
            let mut tmp = String::from("");
            for j in 0..nums[i].len() {
                if nums[i].chars().nth(j).unwrap() == '0' {
                    tmp.push('1');
                } else {
                    tmp.push('0');
                }
            }
            if !nums.contains(&tmp) {
                res = tmp;
                break;
            }
        }
        if res == "" {
            res = "0".repeat(nums.len());
        }
        res
    }
}

=======

        let n = nums.len();
        let mut i = 0;
        for s in nums {
            let mut j = 0;
            for c in s.chars() {
                i += (c as i32 - '0' as i32) << (n - j - 1);
                j += 1;
            }
        }
        let mut s = String::new();
        for _ in 0..n {
            s.push((i % 2 + '0' as i32) as u8 as char);
            i /= 2;
        }
        s.chars().rev().collect()
