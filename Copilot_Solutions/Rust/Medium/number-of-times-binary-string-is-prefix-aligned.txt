Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut res = 0;
        let mut max = 0;
        for i in 0..flips.len() {
            max = max.max(flips[i] as usize);
            if max == i + 1 {
                res += 1;
            }
        }
        res

=======

        let mut ans = 0;
        let mut max = 0;
        for i in 0..flips.len() {
            max = max.max(flips[i] as usize);
            if max == i + 1 {
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut max = 0;
        let mut count = 0;
        for i in 0..flips.len() {
            max = std::cmp::max(max, flips[i] as usize);
            if max == i + 1 {
                count += 1;
            }
        }
        count

=======

        let mut ans = 0;
        let mut max = 0;
        for i in 0..flips.len() {
            max = max.max(flips[i]);
            if max == i as i32 + 1 {
                ans += 1;
            }
        }
        ans

=======

        let mut max = 0;
        let mut ans = 0;
        for (i, &flip) in flips.iter().enumerate() {
            max = max.max(flip);
            if max == (i + 1) as i32 {
                ans += 1;
            }
        }
        ans

=======

        let mut lights = vec![false; flips.len()];
        let mut max = 0;
        let mut res = 0;
        for i in flips {
            lights[(i - 1) as usize] = true;
            if i as usize > max {
                max = i as usize;
            }
            if lights[0..max].iter().all(|&x| x) {
                res += 1;
            }
        }
        res

=======

        
    }
}
