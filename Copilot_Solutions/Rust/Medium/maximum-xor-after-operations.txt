Synthesizing 6/10 solutions (Duplicates hidden)

=======

        let mut ans = 0;
        let mut mask = 0;
        for i in (0..=30).rev() {
            mask |= 1 << i;
            let mut s = std::collections::HashSet::new();
            for n in nums.iter() {
                s.insert(n & mask);
            }
            let cand = ans | 1 << i;
            for p in s.iter() {
                if s.contains(&(p ^ cand)) {
                    ans = cand;
                    break;
                }
            }
        }
        ans
    }
}

=======

        let mut ans = 0;
        let mut mask = 0;
        for i in (0..30).rev() {
            mask |= 1 << i;
            let mut s = std::collections::HashSet::new();
            for num in &nums {
                s.insert(num & mask);
            }
            let t = ans | (1 << i);
            for prefix in &s {
                if s.contains(&(t ^ prefix)) {
                    ans = t;
                    break;
                }
            }
        }
        ans
    }
}

=======

        let mut mask = 0;
        let mut res = 0;
        for i in (0..32).rev() {
            mask |= 1 << i;
            let mut set = std::collections::HashSet::new();
            for num in nums.iter() {
                set.insert(num & mask);
            }
            let mut tmp = res | 1 << i;
            for prefix in set.iter() {
                if set.contains(&(prefix ^ tmp)) {
                    res = tmp;
                    break;
                }
            }
        }
        res
    }
}

=======

        
    }
}

=======

        let mut ans = 0;
        for i in (0..nums.len()).rev() {
            let mut j = i + 1;
            while j < nums.len() {
                ans = ans.max(nums[i] ^ nums[j]);
                j += 1;
            }
        }
        ans
    }
}
