Synthesizing 9/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut people = people;
        people.sort_by(|a, b| {
            if a[0] == b[0] {
                a[1].cmp(&b[1])
            } else {
                b[0].cmp(&a[0])
            }
        });
        let mut res = vec![];
        for p in people {
            res.insert(p[1] as usize, p);
        }
        res
    }
}

=======
Suggestion 2

        let mut people = people;
        people.sort_by(|a, b| {
            if a[0] == b[0] {
                a[1].cmp(&b[1])
            } else {
                b[0].cmp(&a[0])
            }
        });
        let mut queue: Vec<Vec<i32>> = Vec::new();
        for p in people {
            queue.insert(p[1] as usize, p);
        }
        queue
    }
}

=======
Suggestion 3

        let mut people = people;
        people.sort_unstable_by(|a, b| {
            if a[0] == b[0] {
                a[1].cmp(&b[1])
            } else {
                b[0].cmp(&a[0])
            }
        });
        let mut res = Vec::new();
        for p in people {
            res.insert(p[1] as usize, p);
        }
        res

=======
Suggestion 4

        let mut people = people;
        people.sort_by(|v1, v2| {
            if v1[0] == v2[0] {
                v1[1].cmp(&v2[1])
            } else {
                v2[0].cmp(&v1[0])
            }
        });
        let mut result = Vec::new();
        for p in people {
            result.insert(p[1] as usize, p);
        }
        result
    }
}

=======
Suggestion 5

        let mut people = people;
        people.sort_by(|a, b| b[0].cmp(&a[0]).then(a[1].cmp(&b[1])));
        let mut res = Vec::new();
        for p in people {
            res.insert(p[1] as usize, p);
        }
        res
    }
}

=======
Suggestion 6

        let mut people = people;
        people.sort_by_key(|v| (v[0], -v[1]));
        let mut res = Vec::new();
        for v in people {
            res.insert(v[1] as usize, v);
        }
        res

=======
Suggestion 7

        let mut people = people;
        people.sort_by_key(|p| (-(p[0] as i64), p[1] as i64));
        let mut res = Vec::with_capacity(people.len());
        for p in people {
            res.insert(p[1] as usize, p);
        }
        res

=======
Suggestion 8

        let mut people = people;
        people.sort_by_key(|v| (v[0], -v[1]));
        let mut res: Vec<Vec<i32>> = Vec::new();
        for p in people.into_iter().rev() {
            res.insert(p[1] as usize, p);
        }
        res
    }
}
