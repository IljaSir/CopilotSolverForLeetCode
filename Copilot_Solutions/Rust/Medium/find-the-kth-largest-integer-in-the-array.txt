Synthesizing 10/10 solutions

=======

        let mut nums: Vec<i32> = nums.iter().map(|s| s.parse::<i32>().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[k as usize - 1].to_string()

=======

        let mut nums: Vec<i32> = nums.iter().map(|s| s.parse::<i32>().unwrap()).collect();
        nums.sort_unstable();
        nums.reverse();
        nums[k as usize - 1].to_string()
    }
}

=======

        let mut nums: Vec<i32> = nums.iter().map(|x| x.parse::<i32>().unwrap()).collect();
        nums.sort_unstable();
        nums.reverse();
        nums[k as usize - 1].to_string()
    }
}

=======

        let mut nums: Vec<i32> = nums.into_iter().map(|x| x.parse::<i32>().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[k as usize - 1].to_string()

=======

        let mut nums: Vec<i32> = nums.iter().map(|x| x.parse().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[k as usize - 1].to_string()

=======

        let mut nums: Vec<i32> = nums.iter().map(|x| x.parse().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[k as usize - 1].to_string()
    }
}

=======

        let mut nums: Vec<i32> = nums.iter().map(|x| x.parse::<i32>().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[(k-1) as usize].to_string()
    }
}

=======

        let mut nums: Vec<i32> = nums.into_iter().map(|s| s.parse().unwrap()).collect();
        nums.sort();
        nums.reverse();
        nums[k as usize - 1].to_string()

=======

        let mut nums: Vec<i32> = nums.iter().map(|s| s.parse().unwrap()).collect();
        nums.sort_unstable();
        nums[nums.len() - k as usize].to_string()
    }
}

=======

        let mut nums = nums;
        nums.sort_by_key(|s| s.len());
        nums.reverse();
        nums.sort_by_key(|s| s.parse::<i32>().unwrap());
        nums.reverse();
        nums[k as usize - 1].to_string()
