Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        for i in 0..grid.len() {
            Self::dfs(&mut grid, i, 0);
            Self::dfs(&mut grid, i, grid[0].len() - 1);
        }
        for j in 0..grid[0].len() {
            Self::dfs(&mut grid, 0, j);
            Self::dfs(&mut grid, grid.len() - 1, j);
        }
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    count += 1;
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[0].len() || i == 0 || j == 0 || grid[i][j] != 1 {
            return;
        }
        grid[i][j] = 0;
        Self::dfs(grid, i - 1, j);
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j - 1);
        Self::dfs(grid, i, j + 1);

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        for i in 0..m {
            for j in 0..n {
                if i == 0 || i == m - 1 || j == 0 || j == n - 1 {
                    if grid[i][j] == 1 {
                        Self::dfs(&mut grid, i, j);
                    }
                }
            }
        }
        let mut res = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    res += 1;
                }
            }
        }
        res
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        if i < 0 || i >= grid.len() || j < 0 || j >= grid[0].len() || grid[i][j] == 0 {
            return;
        }
        grid[i][j] = 0;
        Self::dfs(grid, i - 1, j);
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j - 1);
        Self::dfs(grid, i, j + 1);

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        for i in 0..m {
            for j in 0..n {
                if i == 0 || i == m - 1 || j == 0 || j == n - 1 {
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ans += 1;
                }
            }
        }
        ans
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[0].len() || grid[i][j] == 0 {
            return;
        }
        grid[i][j] = 0;
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j + 1);
        if i > 0 {
            Self::dfs(grid, i - 1, j);
        }
        if j > 0 {
            Self::dfs(grid, i, j - 1);
        }

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ans += Self::dfs(&mut grid, i, j);
                }
            }
        }
        ans
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> i32 {
        let m = grid.len();
        let n = grid[0].len();
        if i >= m || j >= n || i == 0 || j == 0 {
            return 0;
        }
        if grid[i][j] == 0 {
            return 1;
        }
        grid[i][j] = 0;
        let mut res = 1;
        res += Self::dfs(grid, i - 1, j);
        res += Self::dfs(grid, i + 1, j);
        res += Self::dfs(grid, i, j - 1);
        res += Self::dfs(grid, i, j + 1);
        res

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        for i in 0..m {
            for j in 0..n {
                if (i == 0 || i == m - 1 || j == 0 || j == n - 1) && grid[i][j] == 1 {
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        let mut count = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    count += 1;
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        let (m, n) = (grid.len(), grid[0].len());
        if i >= m || j >= n || grid[i][j] == 0 {
            return;
        }
        grid[i][j] = 0;
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j + 1);
        if i > 0 {
            Self::dfs(grid, i - 1, j);
        }
        if j > 0 {
            Self::dfs(grid, i, j - 1);
        }

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut visited = vec![vec![false; n]; m];
        let mut count = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 && !visited[i][j] {
                    if Self::dfs(&grid, &mut visited, i, j) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
    fn dfs(grid: &Vec<Vec<i32>>, visited: &mut Vec<Vec<bool>>, i: usize, j: usize) -> bool {
        let (m, n) = (grid.len(), grid[0].len());
        visited[i][j] = true;
        let mut valid = true;
        if i == 0 || i == m - 1 || j == 0 || j == n - 1 {
            valid = false;
        }
        if i > 0 && grid[i - 1][j] == 1 && !visited[i - 1][j] {
            valid &= Self::dfs(grid, visited, i - 1, j);
        }
        if i < m - 1 && grid[i + 1][j] == 1 && !visited[i + 1][j] {
            valid &= Self::dfs(grid, visited, i + 1, j);
        }
        if j > 0 && grid[i][j - 1] == 1 && !visited[i][j - 1] {
            valid &= Self::dfs(grid, visited, i, j - 1);
        }
        if j < n - 1 && grid[i][j + 1] == 1 && !visited[i][j + 1] {
            valid &= Self::dfs(grid, visited, i, j + 1);
        }
        valid

=======

        let mut grid = grid;
        let mut res = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    if Self::dfs(&mut grid, i, j) {
                        res += 1;
                    }
                }
            }
        }
        res
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i >= grid.len() || i < 0 || j >= grid[0].len() || j < 0 {
            return false;
        }
        if grid[i][j] == 0 {
            return true;
        }
        grid[i][j] = 0;
        let mut res = true;
        res &= Self::dfs(grid, i + 1, j);
        res &= Self::dfs(grid, i, j + 1);
        res &= Self::dfs(grid, i - 1, j);
        res &= Self::dfs(grid, i, j - 1);
        res

=======

        let (m, n) = (grid.len(), grid[0].len());
        let mut grid = grid;
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    if i == 0 || i == m - 1 || j == 0 || j == n - 1 {
                        Self::dfs(&mut grid, i, j);
                    }
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    ans += 1;
                }
            }
        }
        ans
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        let (m, n) = (grid.len(), grid[0].len());
        if i >= m || j >= n {
            return;
        }
        if grid[i][j] == 0 {
            return;
        }
        grid[i][j] = 0;
        if i > 0 {
            Self::dfs(grid, i - 1, j);
        }
        if i < m - 1 {
            Self::dfs(grid, i + 1, j);
        }
        if j > 0 {
            Self::dfs(grid, i, j - 1);
        }
        if j < n - 1 {
            Self::dfs(grid, i, j + 1);
        }
    }
}

=======

        let mut grid = grid;
        let mut count = 0;
        let (m, n) = (grid.len(), grid[0].len());
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 && (i == 0 || i == m - 1 || j == 0 || j == n - 1) {
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    count += 1;
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) {
        let (m, n) = (grid.len(), grid[0].len());
        if i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0 {
            return;
        }
        grid[i][j] = 0;
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j + 1);
        Self::dfs(grid, i, j.saturating_sub(1));
        Self::dfs(grid, i.saturating_sub(1), j);

=======

        let mut grid = grid;
        let mut q = Vec::new();
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if (i == 0 || i == grid.len() - 1 || j == 0 || j == grid[i].len() - 1) && grid[i][j] == 1 {
                    q.push((i, j));
                }
            }
        }
        while !q.is_empty() {
            let (i, j) = q.pop().unwrap();
            if grid[i][j] == 1 {
                grid[i][j] = 0;
                if i > 0 {
                    q.push((i - 1, j));
                }
                if i < grid.len() - 1 {
                    q.push((i + 1, j));
                }
                if j > 0 {
                    q.push((i, j - 1));
                }
                if j < grid[i].len() - 1 {
                    q.push((i, j + 1));
                }
            }
        }
        let mut ans = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    ans += 1;
                }
            }
        }
        ans
