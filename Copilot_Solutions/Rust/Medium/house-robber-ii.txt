Synthesizing 10/10 solutions

=======
Suggestion 1

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut res = dp[n - 2];
        dp[0] = 0;
        dp[1] = nums[1];
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        res.max(dp[n - 1])
    }
}

=======
Suggestion 2

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut dp2 = vec![0; n];
        dp2[0] = 0;
        dp2[1] = nums[1];
        for i in 2..n {
            dp2[i] = dp2[i - 1].max(dp2[i - 2] + nums[i]);
        }
        dp[n - 1].max(dp2[n - 1])

=======
Suggestion 3

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n - 1 {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut dp2 = vec![0; n];
        dp2[1] = nums[1];
        dp2[2] = nums[1].max(nums[2]);
        for i in 3..n {
            dp2[i] = dp2[i - 1].max(dp2[i - 2] + nums[i]);
        }
        dp[n - 2].max(dp2[n - 1])

=======
Suggestion 4

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut res = dp[n - 2];
        dp[1] = nums[1];
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        res.max(dp[n - 1])

=======
Suggestion 5

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n - 1 {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut res = dp[n - 2];
        dp[0] = 0;
        dp[1] = nums[1];
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        res = res.max(dp[n - 1]);
        res
    }
}

=======
Suggestion 6

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = dp[0].max(nums[1]);
        for i in 2..n - 1 {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut ans = dp[n - 2];
        dp[1] = nums[1];
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        ans = ans.max(dp[n - 1]);
        ans

=======
Suggestion 7

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        if n == 2 {
            return nums[0].max(nums[1]);
        }
        let mut dp = vec![0; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n - 1 {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut res = dp[n - 2];
        dp[1] = nums[1];
        for i in 2..n {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        res.max(dp[n - 1])
    }
}

=======
Suggestion 8

        if nums.len() == 1 {
            return nums[0];
        }
        let mut dp = vec![0; nums.len()];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..nums.len() - 1 {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut dp2 = vec![0; nums.len()];
        dp2[1] = nums[1];
        dp2[2] = nums[1].max(nums[2]);
        for i in 3..nums.len() {
            dp2[i] = dp2[i - 1].max(dp2[i - 2] + nums[i]);
        }
        dp[nums.len() - 2].max(dp2[nums.len() - 1])
    }
}

=======
Suggestion 9

        if nums.len() == 1 {
            return nums[0];
        }
        let mut dp = vec![0; nums.len()];
        dp[0] = nums[0];
        dp[1] = nums[1].max(nums[0]);
        for i in 2..nums.len() {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        let mut dp1 = vec![0; nums.len()];
        dp1[1] = nums[1];
        dp1[2] = nums[2].max(nums[1]);
        for i in 3..nums.len() {
            dp1[i] = dp1[i - 1].max(dp1[i - 2] + nums[i]);
        }
        dp[nums.len() - 2].max(dp1[nums.len() - 1])

=======
Suggestion 10

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        let mut dp = vec![0i32; n];
        dp[0] = nums[0];
        dp[1] = nums[0].max(nums[1]);
        for i in 2..n-1 {
            dp[i] = dp[i-1].max(dp[i-2]+nums[i]);
        }
        let mut dp2 = vec![0i32; n];
        dp2[0] = 0;
        dp2[1] = nums[1];
        for i in 2..n {
            dp2[i] = dp2[i-1].max(dp2[i-2]+nums[i]);
        }
        dp[n-2].max(dp2[n-1])
