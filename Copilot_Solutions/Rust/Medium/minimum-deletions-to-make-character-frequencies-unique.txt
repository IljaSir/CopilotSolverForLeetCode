Synthesizing 10/10 solutions

=======

        let mut freq = vec![0; 26];
        for c in s.chars() {
            freq[(c as u8 - 'a' as u8) as usize] += 1;
        }
        freq.sort();
        let mut ans = 0;
        let mut prev = 0;
        for i in (0..26).rev() {
            if freq[i] == 0 {
                break;
            }
            if freq[i] > prev {
                prev = freq[i];
            } else {
                ans += prev - freq[i];
                prev -= 1;
                if prev == 0 {
                    prev = 1;
                }
            }
        }
        ans

=======

        use std::collections::HashMap;
        let mut h = HashMap::new();
        for c in s.chars() {
            let e = h.entry(c).or_insert(0);
            *e += 1;
        }
        let mut v = h.values().cloned().collect::<Vec<i32>>();
        v.sort();
        let mut r = 0;
        for i in 1..v.len() {
            if v[i] == v[i-1] {
                v[i] = 0;
                r += 1;
            } else if v[i] < v[i-1] {
                let d = v[i-1] - v[i];
                v[i] += d;
                r += d;
            }
        }
        r
    }
}

=======

        let mut cnt = vec![0; 26];
        for c in s.chars() {
            cnt[c as usize - 'a' as usize] += 1;
        }
        cnt.sort();
        let mut ans = 0;
        for i in 1..26 {
            if cnt[i] > 0 {
                if cnt[i] <= cnt[i - 1] {
                    ans += cnt[i - 1] - cnt[i] + 1;
                    cnt[i] = cnt[i - 1] + 1;
                }
            }
        }
        ans

=======

        let mut count = vec![0; 26];
        for c in s.chars() {
            count[(c as u8 - b'a') as usize] += 1;
        }
        count.sort_unstable_by(|a, b| b.cmp(a));
        let mut res = 0;
        let mut prev = count[0];
        for i in 1..26 {
            if count[i] == 0 {
                break;
            }
            if count[i] >= prev {
                res += count[i] - if prev > 0 { prev - 1 } else { 0 };
                count[i] = if prev > 0 { prev - 1 } else { 0 };
            }
            prev = count[i];
        }
        res

=======

        let mut a: [i32; 26] = [0; 26];
        for c in s.chars() {
            a[(c as u8 - b'a') as usize] += 1;
        }
        let mut b: Vec<i32> = a.iter().filter(|&x| *x > 0).copied().collect();
        b.sort_by(|x, y| y.cmp(x));
        let mut res = 0;
        for i in 1..b.len() {
            if b[i] == b[i - 1] {
                b[i] -= 1;
                res += 1;
                if b[i] == 0 {
                    b.remove(i);
                }
            }
        }
        res

=======

        let mut freq = [0; 26];
        for c in s.chars() {
            freq[(c as u8 - b'a') as usize] += 1;
        }
        let mut freq = freq.iter().filter(|&x| *x > 0).collect::<Vec<_>>();
        freq.sort_unstable_by(|&a, &b| b.cmp(a));
        let mut res = 0;
        let mut prev = 0;
        for &f in freq.iter() {
            if f <= prev {
                res += prev - f + 1;
                prev = prev.max(f) - 1;
            } else {
                prev = f;
            }
        }
        res

=======

        let mut freq: Vec<i32> = vec![0; 26];
        for c in s.chars() {
            let i = (c as u8 - b'a') as usize;
            freq[i] += 1;
        }
        let mut freq = freq.into_iter().filter(|&x| x > 0).collect::<Vec<i32>>();
        freq.sort();
        freq.reverse();
        let mut res = 0;
        for i in 1..freq.len() {
            if freq[i] >= freq[i-1] {
                res += freq[i] - freq[i-1] + 1;
                freq[i] = freq[i-1] - 1;
            }
        }
        res

=======

        let mut freq = vec![0; 26];
        for c in s.chars() {
            freq[c as usize - 'a' as usize] += 1;
        }
        let mut freq = freq.iter().filter(|&x| *x != 0).collect::<Vec<&i32>>();
        freq.sort();
        let mut res = 0;
        for i in 1..freq.len() {
            if freq[i] <= freq[i - 1] {
                res += freq[i - 1] + 1 - freq[i];
                freq[i] = freq[i - 1] + 1;
            }
        }
        res

=======

        let mut cnt = [0; 26];
        for c in s.chars() {
            cnt[c as usize - 'a' as usize] += 1;
        }
        let mut cnt = cnt.iter().filter(|&x| *x > 0).collect::<Vec<_>>();
        cnt.sort_unstable_by(|a, b| b.cmp(a));
        let mut ans = 0;
        for i in 1..cnt.len() {
            if cnt[i] >= cnt[i - 1] {
                ans += cnt[i] - cnt[i - 1] + 1;
                cnt[i] = cnt[i - 1] - 1;
                if cnt[i] == 0 {
                    cnt[i] = 1;
                }
            }
        }
        ans

=======

        let mut count = [0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        count.sort_unstable_by_key(|&x| Reverse(x));
        let mut ret = 0;
        let mut prev = count[0];
        for i in 1..count.len() {
            if count[i] == 0 {
                break;
            }
            if count[i] >= prev {
                ret += count[i] - prev + 1;
                count[i] = prev - 1;
            }
            prev = count[i];
        }
        ret
