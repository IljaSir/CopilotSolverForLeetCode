Synthesizing 7/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        for i in (2..nums.len()).rev() {
            let mut l = 0;
            let mut r = i - 1;
            while l < r {
                if nums[l] + nums[r] > nums[i] {
                    count += r - l;
                    r -= 1;
                } else {
                    l += 1;
                }
            }
        }
        count
    }
}

=======
Suggestion 2

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        for i in 0..nums.len() {
            let mut k = i + 2;
            for j in (i + 1)..nums.len() {
                while k < nums.len() && nums[i] + nums[j] > nums[k] {
                    k += 1;
                }
                count += k - j - 1;
            }
        }
        count as i32

=======
Suggestion 3

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        for i in 0..nums.len() {
            let mut k = i + 2;
            for j in (i + 1)..nums.len() {
                while k < nums.len() && nums[i] + nums[j] > nums[k] {
                    k += 1;
                }
                ans += k - j - 1;
            }
        }
        ans as i32

=======
Suggestion 4

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        for i in 0..nums.len() {
            let mut k = i + 2;
            for j in i+1..nums.len() {
                while k < nums.len() && nums[i] + nums[j] > nums[k] {
                    k += 1;
                }
                count += k - j - 1;
            }
        }
        count as i32

=======
Suggestion 5

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        for i in 0..nums.len() {
            let mut k = i + 2;
            for j in i+1..nums.len() {
                while k < nums.len() && nums[i] + nums[j] > nums[k] {
                    k += 1;
                }
                res += k - j - 1;
            }
        }
        res as i32

=======
Suggestion 6

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        for i in 0..nums.len() {
            for j in (i+1)..nums.len() {
                let mut k = j + 1;
                while k < nums.len() && nums[i] + nums[j] > nums[k] {
                    k += 1;
                }
                count += k - j - 1;
            }
        }
        count

=======
Suggestion 7

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let mut l = j + 1;
                let mut r = nums.len();
                while l < r {
                    let mid = (l + r) / 2;
                    if nums[mid] < nums[i] + nums[j] {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                }
                ans += l - j - 1;
            }
        }
        ans as i32
