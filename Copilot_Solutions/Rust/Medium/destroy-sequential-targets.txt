Synthesizing 4/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 1;
        let mut max = 1;
        for i in 1..nums.len() {
            if nums[i] - nums[i-1] > space {
                count = 1;
            } else {
                count += 1;
            }
            max = std::cmp::max(max, count);
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 1;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] - nums[i] <= space {
                j += 1;
            }
            res = res.max(j - i);
            i = j;
        }
        nums[res - 1]

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 1;
        let mut max = 1;
        for i in 1..nums.len() {
            if nums[i] - nums[i - 1] <= space {
                res += 1;
            } else {
                res = 1;
            }
            max = max.max(res);
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut j = 1;
        for i in 0..nums.len() {
            while j < nums.len() && nums[j] - nums[i] <= space {
                j += 1;
            }
            ans = ans.max(j - i);
        }
        nums[ans - 1]
