Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        nums.sort();
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut res = 0;
        let mut p = 1;
        let mut modu = 1000000007;
        while l <= r {
            if nums[l] + nums[r] > target {
                r -= 1;
            } else {
                res = (res + p) % modu;
                l += 1;
                p = p * 2 % modu;
            }
        }
        res as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut pow = vec![1; nums.len()];
        for i in 1..nums.len() {
            pow[i] = (pow[i - 1] * 2) % 1000000007;
        }
        while l <= r {
            if nums[l] + nums[r] > target {
                r -= 1;
            } else {
                ans = (ans + pow[r - l]) % 1000000007;
                l += 1;
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut res = 0;
        let mut modu = 1_000_000_007;
        let mut pows = vec![1];
        for i in 0..nums.len() {
            pows.push(pows[i] * 2 % modu);
        }
        while l <= r {
            if nums[l] + nums[r] > target {
                r -= 1;
            } else {
                res = (res + pows[r - l]) % modu;
                l += 1;
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut ans = 0;
        let mut modu = 1000000007;
        let mut pow = vec![1; nums.len()];
        for i in 1..nums.len() {
            pow[i] = pow[i - 1] * 2 % modu;
        }
        while l <= r {
            if nums[l] + nums[r] > target {
                r -= 1;
            } else {
                ans = (ans + pow[r - l]) % modu;
                l += 1;
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut result = 0;
        let mut mod_num = 1_000_000_007;
        while left <= right {
            if nums[left] + nums[right] <= target {
                result += 1 << (right - left) % mod_num;
                result %= mod_num;
                left += 1;
            } else {
                right -= 1;
            }
        }
        result
    }
}

=======

        
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut p = 1;
        let mut j = nums.len() - 1;
        for i in 0..=j {
            while j > i && nums[i] + nums[j] > target {
                j -= 1;
            }
            ans = (ans + p) % 1_000_000_007;
            p = (p * 2) % 1_000_000_007;
        }
        ans

=======

        let n = nums.len();
        let mut nums = nums;
        let mut ans = 0;
        nums.sort();
        let mut left = 0;
        let mut right = n - 1;
        let mut pow2 = vec![1; n];
        for i in 1..n {
            pow2[i] = pow2[i - 1] * 2 % 1000000007;
        }
        while left <= right {
            if nums[left] + nums[right] <= target {
                ans = (ans + pow2[right - left]) % 1000000007;
                left += 1;
            } else {
                right -= 1;
            }
        }
        ans as i32
