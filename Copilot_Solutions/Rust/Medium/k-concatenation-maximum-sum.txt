Synthesizing 10/10 solutions

=======

        let n = arr.len();
        let mut prefix_sum = vec![0; n + 1];
        let mut suffix_sum = vec![0; n + 1];
        let mut sum = 0;
        for i in 0..n {
            sum += arr[i];
            prefix_sum[i + 1] = prefix_sum[i].max(sum);
        }
        sum = 0;
        for i in 0..n {
            sum += arr[n - 1 - i];
            suffix_sum[i + 1] = suffix_sum[i].max(sum);
        }
        let mut ans = 0;
        for i in 0..n {
            ans = ans.max(prefix_sum[i] + suffix_sum[n - i]);
        }
        if k > 1 {
            let mut sum = 0;
            for i in 0..n {
                sum += arr[i];
            }
            if sum > 0 {
                ans = ans.max(prefix_sum[n] + suffix_sum[n] + (k - 2) * sum);
            }
        }
        (ans % 1000000007) as i32

=======

        let n = arr.len();
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut res = 0;
        for i in 0..n {
            sum += arr[i];
            max = max.max(sum - min);
            min = min.min(sum);
            res = res.max(max);
        }
        if k == 1 {
            return res as i32;
        }
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        for i in 0..n {
            sum += arr[i];
            max = max.max(sum - min);
            min = min.min(sum);
            res = res.max(max);
        }
        if sum > 0 {
            let mut sum = 0;
            let mut max = 0;
            let mut min = 0;
            for i in 0..n {
                sum += arr[i];
                max = max.max(sum - min);
                min = min.min(sum);
                res = res.max(max + sum * (k - 2) as i32);
            }
        }
        res as i32 % 1_000_000_007

=======

        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut max_sum = 0;
        let mut min_sum = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min, sum);
            max_sum = std::cmp::max(max_sum, max - min);
        }
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut max_sum2 = 0;
        let mut min_sum2 = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min, sum);
            max_sum2 = std::cmp::max(max_sum2, max - min);
        }
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut max_sum3 = 0;
        let mut min_sum3 = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min, sum);
            max_sum3 = std::cmp::max(max_sum3, max - min);
        }
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut max_sum4 = 0;
        let mut min_sum4 = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min, sum);
            max_sum4 = std::cmp::max(max_sum4, max - min);
        }
        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut max_sum5 = 0;
        let mut min_sum5 = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min,

=======

        let mut sum = 0;
        let mut max = 0;
        let mut min = 0;
        let mut m = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum - min);
            min = std::cmp::min(min, sum);
            m = std::cmp::max(m, arr[i]);
        }
        let mut res = max;
        if k > 1 {
            res = std::cmp::max(res, max + sum * (k - 2));
        }
        if sum > 0 {
            res = std::cmp::max(res, max + sum * (k - 1));
        }
        if m < 0 {
            res = m;
        }
        (res % 1000000007) as i32

=======

        let n = arr.len();
        let mut dp = vec![0;n];
        let mut sum = 0;
        let mut max = 0;
        for i in 0..n {
            sum += arr[i];
            sum = sum.max(0);
            max = max.max(sum);
            dp[i] = max;
        }
        sum = 0;
        max = 0;
        for i in (0..n).rev() {
            sum += arr[i];
            sum = sum.max(0);
            max = max.max(sum);
            dp[i] += max;
        }
        dp.iter().max().unwrap().max(0) as i32 + (k-1).max(0) as i32 * dp.iter().sum::<i32>() as i32

=======

        let mut max = 0;
        let mut sum = 0;
        let mut max_sum = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum > max_sum {
                max_sum = sum;
            }
            if sum < 0 {
                sum = 0;
            }
        }
        max = max_sum;
        if k > 1 {
            sum = 0;
            for i in 0..arr.len() {
                sum += arr[i];
                if sum > max_sum {
                    max_sum = sum;
                }
                if sum < 0 {
                    sum = 0;
                }
            }
            max += max_sum;
            if sum > 0 {
                max += sum * (k - 2);
            }
        }
        let mod_num = 1000000007;
        (max % mod_num) as i32
    }
}

=======

        let mut sum = 0;
        let mut max_sum = 0;
        let mut min_sum = 0;
        let mut total_sum = 0;
        let mut max = 0;
        for i in 0..arr.len() {
            if i < k as usize {
                total_sum += arr[i];
            }
            sum += arr[i];
            max_sum = max_sum.max(sum - min_sum);
            min_sum = min_sum.min(sum);
            max = max.max(sum);
        }
        if k == 1 {
            return max_sum as i32 % 1000000007;
        }
        if max <= 0 {
            return 0;
        }
        let mut ans = max_sum + (k - 2) * total_sum;
        if total_sum > 0 {
            ans += total_sum;
        }
        ans as i32 % 1000000007

=======

        let mut sum = 0;
        let mut max = 0;
        let mut max2 = 0;
        let mut min = 0;
        let mut min2 = 0;
        let mut sum2 = 0;
        let mut sum3 = 0;
        let mut max3 = 0;
        let mut min3 = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            max = std::cmp::max(max, sum);
            min = std::cmp::min(min, sum);
        }
        if k > 1 {
            for i in 0..arr.len() {
                sum2 += arr[i];
                max2 = std::cmp::max(max2, sum2);
                min2 = std::cmp::min(min2, sum2);
            }
            for i in 0..arr.len() {
                sum3 += arr[i];
                max3 = std::cmp::max(max3, sum3);
                min3 = std::cmp::min(min3, sum3);
            }
        }
        let mut res = std::cmp::max(max, max2);
        if k > 2 {
            res = std::cmp::max(res, max3 + (k - 2) * sum);
        }
        let mut res2 = std::cmp::min(min, min2);
        if k > 2 {
            res2 = std::cmp::min(res2, min3 + (k - 2) * sum);
        }
        let mut res3 = 0;
        if k > 1 {
            res3 = sum * (k - 2) + sum2 + sum3;
        }
        res = std::cmp::max(res, res3);
        res = std::cmp::max(res, res2);
        res = std::cmp::max(res, 0);
        (res % 1000000007) as i32
    }
}

=======

        let n = arr.len();
        let mut sum = 0;
        let mut max = 0;
        let mut total = 0;
        let mut max_total = 0;
        for i in 0..n {
            sum += arr[i];
            if sum > max {
                max = sum;
            }
            if sum < 0 {
                sum = 0;
            }
            total += arr[i];
            if total > max_total {
                max_total = total;
            }
        }
        if k == 1 {
            return max as i32;
        }
        if total <= 0 {
            return max as i32;
        }
        let mut sum = 0;
        let mut max = 0;
        for i in 0..n {
            sum += arr[i];
            if sum > max {
                max = sum;
            }
            if sum < 0 {
                sum = 0;
            }
        }
        let mut sum = 0;
        let mut max2 = 0;
        for i in (0..n).rev() {
            sum += arr[i];
            if sum > max2 {
                max2 = sum;
            }
            if sum < 0 {
                sum = 0;
            }
        }
        let mut res = max + max2;
        if res < max {
            res = max;
        }
        if res < max_total {
            res = max_total;
        }
        if res < max_total + total * (k - 2) {
            res = max_total + total * (k - 2);
        }
        return (res % (1000000007)) as i32;
    }
}

=======

        let mut sum = 0;
        let mut max = 0;
        let mut max2 = 0;
        let mut sum2 = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = k;
        let mut max3 = 0;
        let mut sum3 = 0;
        let mut max4 = 0;
        let mut sum4 = 0;
        let mut max5 = 0;
        let mut sum5 = 0;
        let mut max6 = 0;
        let mut sum6 = 0;
        let mut max7 = 0;
        let mut sum7 = 0;
        let mut max8 = 0;
        let mut sum8 = 0;
        let mut max9 = 0;
        let mut sum9 = 0;
        let mut max10 = 0;
        let mut sum10 = 0;
        let mut max11 = 0;
        let mut sum11 = 0;
        let mut max12 = 0;
        let mut sum12 = 0;
        let mut max13 = 0;
        let mut sum13 = 0;
        let mut max14 = 0;
        let mut sum14 = 0;
        let mut max15 = 0;
        let mut sum15 = 0;
        let mut max16 = 0;
        let mut sum16 = 0;
        let mut max17 = 0;
        let mut sum17 = 0;
        let mut max18 = 0;
        let mut sum18 = 0;
        let mut max19 = 0;
        let mut sum19 = 0;
        let mut max20 = 0;
        let mut sum20 = 0;
        let mut max21 = 0;
        let mut sum21 = 0;
        let mut max22 = 0;
        let mut sum22 = 0;
        let mut max23 = 0;
        let mut sum23 = 0;
        let mut max24 = 0;
        let mut sum24 = 0;
        let mut max25 = 0;
        let mut sum25 = 0;
        let mut max26 = 0;
        let mut sum26 = 0;
        let mut max27 = 0;
