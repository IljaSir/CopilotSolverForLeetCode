Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut stack = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        for (i, c) in s.chars().enumerate() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            }
            if !c.is_digit(10) && !c.is_whitespace() || i == s.len() - 1 {
                match sign {
                    '+' => stack.push(num),
                    '-' => stack.push(-num),
                    '*' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp * num);
                    }
                    '/' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp / num);
                    }
                    _ => (),
                }
                sign = c;
                num = 0;
            }
        }
        stack.iter().sum()
    }
}

=======
Suggestion 2

        let mut stack: Vec<i32> = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        for (i, c) in s.chars().enumerate() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            }
            if !c.is_digit(10) && !c.is_whitespace() || i == s.len() - 1 {
                match sign {
                    '+' => stack.push(num),
                    '-' => stack.push(-num),
                    '*' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp * num);
                    }
                    '/' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp / num);
                    }
                    _ => (),
                }
                sign = c;
                num = 0;
            }
        }
        stack.iter().sum()
    }
}

=======
Suggestion 3

        let mut stack: Vec<i32> = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        for (i, c) in s.chars().enumerate() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            }
            if (!c.is_digit(10) && c != ' ') || i == s.len() - 1 {
                match sign {
                    '+' => stack.push(num),
                    '-' => stack.push(-num),
                    '*' => *stack.last_mut().unwrap() *= num,
                    '/' => *stack.last_mut().unwrap() /= num,
                    _ => {}
                }
                sign = c;
                num = 0;
            }
        }
        stack.iter().sum()

=======
Suggestion 4

        let mut stack: Vec<i32> = Vec::new();
        let mut num = 0;
        let mut op = '+';
        for (i, c) in s.chars().enumerate() {
            if c.is_ascii_digit() {
                num = num * 10 + (c as u8 - b'0') as i32;
            }
            if !c.is_ascii_digit() && c != ' ' || i == s.len() - 1 {
                match op {
                    '+' => {
                        stack.push(num);
                    }
                    '-' => {
                        stack.push(-num);
                    }
                    '*' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp * num);
                    }
                    '/' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp / num);
                    }
                    _ => {}
                }
                op = c;
                num = 0;
            }
        }
        stack.iter().sum()

=======
Suggestion 5

        let mut stack = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        let s = s.as_bytes();
        for (i, &c) in s.iter().enumerate() {
            if c.is_ascii_digit() {
                num = num * 10 + (c - b'0') as i32;
            }
            if (!c.is_ascii_digit() && c != b' ') || i == s.len() - 1 {
                match sign {
                    '+' => stack.push(num),
                    '-' => stack.push(-num),
                    '*' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp * num);
                    }
                    '/' => {
                        let tmp = stack.pop().unwrap();
                        stack.push(tmp / num);
                    }
                    _ => (),
                }
                sign = c as char;
                num = 0;
            }
        }
        stack.iter().sum()
    }
}

=======
Suggestion 6

        let mut num = 0;
        let mut res = 0;
        let mut sign = 1;
        let mut stack = vec![];
        for c in s.chars() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            } else if c == '+' {
                res += sign * num;
                num = 0;
                sign = 1;
            } else if c == '-' {
                res += sign * num;
                num = 0;
                sign = -1;
            } else if c == '*' {
                stack.push(res);
                stack.push(sign);
                res = 0;
                sign = 1;
            } else if c == '/' {
                stack.push(res);
                stack.push(sign);
                res = 0;
                sign = -1;
            }
        }
        res += sign * num;
        while !stack.is_empty() {
            res *= stack.pop().unwrap();
            res += stack.pop().unwrap();
        }
        res
    }
}

=======
Suggestion 7

        let mut stack: Vec<i32> = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        let mut i = 0;
        while i < s.len() {
            let c = s.chars().nth(i).unwrap();
            if c.is_numeric() {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            }
            if ((!c.is_numeric() && c != ' ') || i == s.len() - 1) && c != ' ' {
                match sign {
                    '+' => stack.push(num),
                    '-' => stack.push(-num),
                    '*' => {
                        let top = stack.pop().unwrap();
                        stack.push(top * num);
                    }
                    '/' => {
                        let top = stack.pop().unwrap();
                        stack.push(top / num);
                    }
                    _ => {}
                }
                sign = c;
                num = 0;
            }
            i += 1;
        }
        stack.iter().sum()

=======
Suggestion 8

        let mut stack: Vec<i32> = Vec::new();
        let mut num = 0;
        let mut sign = '+';
        let mut res = 0;
        for (i, c) in s.chars().enumerate() {
            if c.is_digit(10) {
                num = num * 10 + c.to_digit(10).unwrap() as i32;
            }
            if (!c.is_digit(10) && !c.is_whitespace()) || i == s.len() - 1 {
                match sign {
                    '+' => {
                        stack.push(num);
                    }
                    '-' => {
                        stack.push(-num);
                    }
                    '*' => {
                        let top = stack.pop().unwrap();
                        stack.push(top * num);
                    }
                    '/' => {
                        let top = stack.pop().unwrap();
                        stack.push(top / num);
                    }
                    _ => {}
                }
                sign = c;
                num = 0;
            }
        }
        for n in stack {
            res += n;
        }
        res

=======
Suggestion 9

        let mut stack: Vec<i32> = Vec::new();
        let mut sign = 1;
        let mut res = 0;
        let mut i = 0;
        let s = s.as_bytes();
        while i < s.len() {
            if s[i] == b' ' {
                i += 1;
                continue;
            }
            if s[i] == b'+' {
                sign = 1;
                i += 1;
            } else if s[i] == b'-' {
                sign = -1;
                i += 1;
            } else if s[i] == b'*' || s[i] == b'/' {
                let mut num = 0;
                i += 1;
                while i < s.len() && s[i] >= b'0' && s[i] <= b'9' {
                    num = num * 10 + (s[i] - b'0') as i32;
                    i += 1;
                }
                if s[i - 1] == b'*' {
                    *stack.last_mut().unwrap() *= num;
                } else {
                    *stack.last_mut().unwrap() /= num;
                }
            } else {
                let mut num = 0;
                while i < s.len() && s[i] >= b'0' && s[i] <= b'9' {
                    num = num * 10 + (s[i] - b'0') as i32;
                    i += 1;
                }
                stack.push(sign * num);
            }
        }
        for n in stack {
            res += n;
        }
        res

=======
Suggestion 10

        
    }
}
