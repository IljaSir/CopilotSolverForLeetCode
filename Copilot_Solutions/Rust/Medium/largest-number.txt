Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let s1 = format!("{}{}", a, b);
            let s2 = format!("{}{}", b, a);
            s2.cmp(&s1)
        });
        let mut res = String::new();
        let mut zero = true;
        for num in nums {
            if zero && num == 0 {
                continue;
            }
            zero = false;
            res.push_str(&num.to_string());
        }
        if zero {
            res.push('0');
        }
        res

=======
Suggestion 2

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let a = a.to_string();
            let b = b.to_string();
            let ab = a.clone() + &b;
            let ba = b + &a;
            ba.cmp(&ab)
        });
        let mut ans = nums
            .into_iter()
            .map(|x| x.to_string())
            .collect::<Vec<String>>()
            .join("");
        if ans.chars().next().unwrap() == '0' {
            ans = "0".to_string()
        }
        ans

=======
Suggestion 3

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let a = a.to_string();
            let b = b.to_string();
            let ab = a.clone() + &b;
            let ba = b + &a;
            ab.cmp(&ba)
        });
        let mut result = String::new();
        for i in nums.iter().rev() {
            result += &i.to_string();
        }
        result = result.trim_start_matches("0").to_string();
        if result.is_empty() {
            "0".to_string()
        } else {
            result
        }

=======
Suggestion 4

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let a = a.to_string();
            let b = b.to_string();
            let ab = a.clone() + &b;
            let ba = b + &a;
            ba.cmp(&ab)
        });
        let mut res = "".to_string();
        for i in nums {
            res += &i.to_string();
        }
        if res.chars().next().unwrap() == '0' {
            return "0".to_string();
        }
        res

=======
Suggestion 5

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let a = a.to_string();
            let b = b.to_string();
            let ab = a.clone() + &b;
            let ba = b + &a;
            ba.cmp(&ab)
        });
        let mut res = String::new();
        for n in nums {
            res += &n.to_string();
        }
        let mut res = res.trim_start_matches('0').to_string();
        if res.len() == 0 {
            res = "0".to_string();
        }
        res

=======
Suggestion 6

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let a = a.to_string();
            let b = b.to_string();
            let ab = a.clone() + &b;
            let ba = b + &a;
            ba.cmp(&ab)
        });
        let mut res = nums.iter().map(|x| x.to_string()).collect::<String>();
        while res.starts_with("0") {
            res.remove(0);
        }
        if res.is_empty() {
            return "0".to_string();
        }
        res
    }
}

=======
Suggestion 7

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let mut sa = a.to_string();
            let mut sb = b.to_string();
            sa.push_str(&sb);
            sb.push_str(&sa);
            sb.cmp(&sa)
        });
        let mut res = String::new();
        for i in nums {
            if i == 0 && res.len() == 0 {
                continue;
            }
            res.push_str(&i.to_string());
        }
        if res.len() == 0 {
            return "0".to_string();
        }
        res
    }
}

=======
Suggestion 8

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let sa = a.to_string();
            let sb = b.to_string();
            let ab = sa.clone() + &sb;
            let ba = sb + &sa;
            ab.cmp(&ba).reverse()
        });
        let mut ans = nums.iter().map(|x| x.to_string()).collect::<Vec<String>>().join("");
        while ans.starts_with('0') && ans.len() > 1 {
            ans.remove(0);
        }
        ans

=======
Suggestion 9

        let mut nums: Vec<String> = nums.into_iter().map(|x| x.to_string()).collect();
        nums.sort_by(|a, b| {
            let ab = a.clone() + b;
            let ba = b.clone() + a;
            ba.cmp(&ab)
        });
        let mut res = nums.join("");
        while res.starts_with("0") && res.len() > 1 {
            res.remove(0);
        }
        res

=======
Suggestion 10

        let mut nums = nums;
        nums.sort_by(|a, b| {
            let s1 = a.to_string();
            let s2 = b.to_string();
            let s3 = s1.clone() + &s2;
            let s4 = s2 + &s1;
            s4.cmp(&s3)
        });
        let mut res = String::new();
        for i in nums {
            res += &i.to_string();
        }
        while res.len() > 1 && res.starts_with("0") {
            res.remove(0);
        }
        res
