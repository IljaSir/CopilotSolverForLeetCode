Synthesizing 10/10 solutions

=======

        let mut s = s.into_bytes();
        let mut stack = Vec::new();
        for i in 0..s.len() {
            match s[i] {
                b'(' => stack.push(i),
                b')' => {
                    if let Some(j) = stack.pop() {
                        s[j] = b' ';
                    }
                    s[i] = b' ';
                }
                _ => (),
            }
        }
        String::from_utf8(s).unwrap().replace(" ", "")

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let mut stack = Vec::new();
        for i in 0..s.len() {
            if s[i] == '(' {
                stack.push(i);
            } else if s[i] == ')' {
                if let Some(_) = stack.pop() {
                    continue;
                } else {
                    s[i] = ' ';
                }
            }
        }
        while let Some(i) = stack.pop() {
            s[i] = ' ';
        }
        s.into_iter().filter(|&c| c != ' ').collect()

=======

        let mut stack = Vec::new();
        let mut s = s.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            if s[i] == '(' {
                stack.push(i);
            } else if s[i] == ')' {
                if stack.is_empty() {
                    s[i] = ' ';
                } else {
                    stack.pop();
                }
            }
        }
        for i in stack {
            s[i] = ' ';
        }
        s.into_iter().filter(|c| *c != ' ').collect()

=======

        let mut stack = vec![];
        let mut remove = vec![false; s.len()];
        for (i, c) in s.chars().enumerate() {
            if c == '(' {
                stack.push(i);
            } else if c == ')' {
                if let Some(j) = stack.pop() {
                    remove[j] = false;
                } else {
                    remove[i] = true;
                }
            }
        }
        for i in stack {
            remove[i] = true;
        }
        s.chars()
            .enumerate()
            .filter(|(i, _)| !remove[*i])
            .map(|(_, c)| c)
            .collect()

=======

        let mut stack = Vec::new();
        let mut chars = s.chars().collect::<Vec<char>>();
        for i in 0..chars.len() {
            match chars[i] {
                '(' => {
                    stack.push(i);
                }
                ')' => {
                    if let Some(idx) = stack.pop() {
                        chars[idx] = ' ';
                    } else {
                        chars[i] = ' ';
                    }
                }
                _ => {}
            }
        }
        for i in stack {
            chars[i] = ' ';
        }
        chars.into_iter().filter(|c| *c != ' ').collect()

=======

        let mut stack: Vec<usize> = vec![];
        let mut res: Vec<char> = vec![];
        for (i, c) in s.chars().enumerate() {
            if c == '(' {
                stack.push(i);
            } else if c == ')' {
                if let Some(j) = stack.pop() {
                    res[j] = '(';
                    res.push(')');
                }
            } else {
                res.push(c);
            }
        }
        res.into_iter().filter(|c| *c != '(').collect()

=======

        let mut stack = vec![];
        let mut res = vec![];
        for (i, c) in s.chars().enumerate() {
            if c == '(' {
                stack.push(i);
            } else if c == ')' {
                if let Some(j) = stack.pop() {
                    res.push((j, c));
                    res.push((i, c));
                }
            } else {
                res.push((i, c));
            }
        }
        res.sort_by_key(|(i, _)| *i);
        res.into_iter().map(|(_, c)| c).collect()

=======

        let mut left = 0;
        let mut right = 0;
        let mut s: Vec<char> = s.chars().collect();
        for i in 0..s.len() {
            if s[i] == '(' {
                left += 1;
            } else if s[i] == ')' {
                if left > 0 {
                    left -= 1;
                } else {
                    right += 1;
                }
            }
        }
        let mut res = String::new();
        for i in 0..s.len() {
            if s[i] == '(' {
                if left > 0 {
                    res.push(s[i]);
                    left -= 1;
                }
            } else if s[i] == ')' {
                if right > 0 {
                    right -= 1;
                } else {
                    res.push(s[i]);
                }
            } else {
                res.push(s[i]);
            }
        }
        res
    }
}

=======

        let mut stack = Vec::new();
        let mut chars = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < chars.len() {
            match chars[i] {
                '(' => stack.push(i),
                ')' => {
                    if let Some(idx) = stack.pop() {
                        chars[idx] = ' ';
                    }
                    chars[i] = ' ';
                },
                _ => {}
            }
            i += 1;
        }
        while let Some(idx) = stack.pop() {
            chars[idx] = ' ';
        }
        chars.iter().filter(|c| **c != ' ').collect::<String>()

=======

        let mut stack = Vec::new();
        let mut result = String::new();
        let mut s = s.as_bytes();
        for i in 0..s.len() {
            match s[i] {
                b'(' => stack.push(i),
                b')' => {
                    if !stack.is_empty() {
                        stack.pop();
                    } else {
                        s[i] = b' ';
                    }
                }
                _ => {}
            }
        }
        for &i in stack.iter() {
            s[i] = b' ';
        }
        for &c in s.iter() {
            if c != b' ' {
                result.push(c as char);
            }
        }
        result
    }
}
