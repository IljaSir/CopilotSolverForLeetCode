Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let m = mat.len();
        let n = mat[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in (0..n).rev() {
                if mat[i][j] == 1 {
                    dp[i][j] = if j == n - 1 { 1 } else { dp[i][j + 1] + 1 };
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                let mut width = dp[i][j];
                for k in i..m {
                    width = width.min(dp[k][j]);
                    ans += width;
                }
            }
        }
        ans

=======

        let mut ans = 0;
        let m = mat.len();
        let n = mat[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if mat[i][j] == 1 {
                    dp[i][j] = 1;
                    if j > 0 {
                        dp[i][j] += dp[i][j - 1];
                    }
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                let mut width = dp[i][j];
                for k in i..m {
                    if dp[k][j] == 0 {
                        break;
                    }
                    width = width.min(dp[k][j]);
                    ans += width;
                }
            }
        }
        ans
    }
}

=======

        let mut res = 0;
        let mut dp = vec![vec![0; mat[0].len()]; mat.len()];
        for i in 0..mat.len() {
            for j in 0..mat[0].len() {
                if mat[i][j] == 1 {
                    if j > 0 {
                        dp[i][j] = dp[i][j - 1] + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    let mut min = dp[i][j];
                    for k in (0..=i).rev() {
                        min = std::cmp::min(min, dp[k][j]);
                        res += min;
                    }
                }
            }
        }
        res

=======

        let mut dp = vec![vec![0; mat[0].len()]; mat.len()];
        let mut res = 0;
        for i in 0..mat.len() {
            for j in 0..mat[0].len() {
                if mat[i][j] == 0 {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = if i == 0 {1} else {dp[i-1][j] + 1};
                }
                let mut min = dp[i][j];
                for k in j..mat[0].len() {
                    min = std::cmp::min(min, dp[i][k]);
                    res += min;
                }
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        let n = mat.len();
        let m = mat[0].len();
        let mut dp = vec![vec![0; m]; n];
        for i in 0..n {
            for j in 0..m {
                if mat[i][j] == 1 {
                    dp[i][j] = 1;
                    if j > 0 {
                        dp[i][j] += dp[i][j - 1];
                    }
                }
            }
        }
        for i in 0..n {
            for j in 0..m {
                if mat[i][j] == 1 {
                    let mut min = dp[i][j];
                    for k in i..n {
                        if mat[k][j] == 0 {
                            break;
                        }
                        min = min.min(dp[k][j]);
                        ans += min;
                    }
                }
            }
        }
        ans
    }
}

=======

        let mut res = 0;
        let mut dp = vec![vec![0;mat[0].len()];mat.len()];
        for i in 0..mat.len(){
            for j in (0..mat[i].len()).rev(){
                if mat[i][j] == 1{
                    dp[i][j] = 1+dp[i][j+1];
                }
            }
        }
        for i in 0..mat.len(){
            for j in 0..mat[i].len(){
                if mat[i][j] == 1{
                    let mut min = dp[i][j];
                    for k in i..mat.len(){
                        min = std::cmp::min(min,dp[k][j]);
                        res += min;
                    }
                }
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..mat.len() {
            for j in 0..mat[i].len() {
                if mat[i][j] == 1 {
                    let mut min = std::i32::MAX;
                    let mut k = j;
                    while k < mat[i].len() && mat[i][k] == 1 {
                        min = std::cmp::min(min, mat[i][k]);
                        res += min;
                        k += 1;
                    }
                }
            }
        }
        res

=======

        
    }
}
