Synthesizing 10/10 solutions

=======

        let mut stack = vec![];
        for c in s.chars() {
            while !stack.is_empty() && stack[stack.len() - 1] > c {
                stack.pop();
            }
            stack.push(c);
        }
        stack.into_iter().collect()

=======

        let mut t = String::new();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i <= j {
            let mut k = 0;
            while i + k <= j && (j - k < i || s.chars().nth(i + k).unwrap() <= s.chars().nth(j - k).unwrap()) {
                k += 1;
            }
            if i + k <= j {
                k = -k;
            }
            if k > 0 {
                for _ in 0..k {
                    t.push(s.chars().nth(i).unwrap());
                    i += 1;
                }
            } else {
                for _ in k..0 {
                    t.push(s.chars().nth(j).unwrap());
                    j -= 1;
                }
            }
        }
        t

=======

        let mut t = String::new();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i <= j {
            let mut k = 0;
            while i + k <= j && s.chars().nth(i + k) == s.chars().nth(j - k) {
                k += 1;
            }
            if i + k > j || s.chars().nth(i + k) < s.chars().nth(j - k) {
                t.push(s.chars().nth(i).unwrap());
                i += 1;
            } else {
                t.push(s.chars().nth(j).unwrap());
                j -= 1;
            }
        }
        t

=======

        let mut t = String::new();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i <= j {
            let mut left = false;
            for k in 0..(j - i + 1) {
                if s.as_bytes()[i + k] < s.as_bytes()[j - k] {
                    left = true;
                    break;
                } else if s.as_bytes()[i + k] > s.as_bytes()[j - k] {
                    left = false;
                    break;
                }
            }
            if left {
                t.push(s.as_bytes()[i] as char);
                i += 1;
            } else {
                t.push(s.as_bytes()[j] as char);
                j -= 1;
            }
        }
        t

=======

        let mut s = s.into_bytes();
        let mut t = Vec::new();
        let mut res = Vec::new();
        while !s.is_empty() || !t.is_empty() {
            if s.is_empty() {
                res.push(t.pop().unwrap());
            } else if t.is_empty() {
                t.push(s.remove(0));
            } else if s[0] < t[t.len()-1] {
                t.push(s.remove(0));
            } else {
                res.push(t.pop().unwrap());
            }
        }
        String::from_utf8(res).unwrap()

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = vec![];
        let mut p = vec![];
        while !s.is_empty() || !t.is_empty() {
            if t.is_empty() {
                p.push(s.remove(0));
            } else if s.is_empty() {
                p.push(t.pop().unwrap());
            } else {
                if s[0] < t[t.len() - 1] {
                    p.push(s.remove(0));
                } else {
                    p.push(t.pop().unwrap());
                }
            }
        }
        p.iter().collect()

=======

        let mut s = s.into_bytes();
        let mut t = vec![];
        let mut res = vec![];
        while !s.is_empty() || !t.is_empty() {
            if t.is_empty() || (!s.is_empty() && s[0] <= t[t.len() - 1]) {
                t.push(s.remove(0));
            } else {
                res.push(t.pop().unwrap());
            }
        }
        res.extend(t.iter().rev());
        String::from_utf8(res).unwrap()

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = Vec::new();
        let mut ans = String::new();
        loop {
            if s.is_empty() && t.is_empty() {
                break;
            }
            if s.is_empty() {
                ans.push(t.pop().unwrap());
            } else if t.is_empty() {
                t.push(s.remove(0));
            } else {
                if s[0] < t[t.len() - 1] {
                    t.push(s.remove(0));
                } else {
                    ans.push(t.pop().unwrap());
                }
            }
        }
        ans

=======

        let mut s = s.into_bytes();
        let mut t = Vec::new();
        let mut result = String::new();
        while !s.is_empty() || !t.is_empty() {
            if s.is_empty() || (!t.is_empty() && t[t.len() - 1] < s[0]) {
                result.push(t.pop().unwrap() as char);
            } else if t.is_empty() || (!s.is_empty() && s[0] <= t[t.len() - 1]) {
                t.push(s.remove(0));
            }
        }
        result
    }
}

=======

        let mut result = String::new();
        let mut chars = s.chars().collect::<Vec<char>>();
        while !chars.is_empty() {
            let mut left = true;
            for i in 0..chars.len() {
                if chars[i] < chars[chars.len() - 1 - i] {
                    left = true;
                    break;
                } else if chars[i] > chars[chars.len() - 1 - i] {
                    left = false;
                    break;
                }
            }
            if left {
                result.push(chars.remove(0));
            } else {
                result.push(chars.pop().unwrap());
            }
        }
        result
