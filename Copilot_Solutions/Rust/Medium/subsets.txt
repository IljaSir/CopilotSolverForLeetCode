Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut result: Vec<Vec<i32>> = Vec::new();
        let mut temp: Vec<i32> = Vec::new();
        result.push(temp.clone());
        for i in 0..nums.len() {
            temp.push(nums[i]);
            result.push(temp.clone());
            for j in i+1..nums.len() {
                temp.push(nums[j]);
                result.push(temp.clone());
                temp.pop();
            }
            temp.pop();
        }
        result

=======
Suggestion 2

        let mut result = vec![vec![]];
        for n in nums {
            let mut temp = vec![];
            for r in &result {
                let mut t = r.clone();
                t.push(n);
                temp.push(t);
            }
            result.append(&mut temp);
        }
        result
    }
}

=======
Suggestion 3

        let mut result = Vec::new();
        let mut current = Vec::new();
        Self::dfs(&nums, 0, &mut current, &mut result);
        result
    }
    
    fn dfs(nums: &Vec<i32>, start: usize, current: &mut Vec<i32>, result: &mut Vec<Vec<i32>>) {
        result.push(current.to_vec());
        for i in start..nums.len() {
            current.push(nums[i]);
            Self::dfs(nums, i + 1, current, result);
            current.pop();
        }

=======
Suggestion 4

        let mut res = vec![vec![]];
        for n in nums {
            let mut tmp = vec![];
            for r in &res {
                tmp.push([r.to_vec(), vec![n]].concat());
            }
            res.append(&mut tmp);
        }
        res

=======
Suggestion 5

        let mut result = vec![vec![]];
        for n in nums {
            let mut temp = vec![];
            for r in result.iter() {
                let mut v = r.clone();
                v.push(n);
                temp.push(v);
            }
            result.extend(temp);
        }
        result

=======
Suggestion 6

        let mut result: Vec<Vec<i32>> = Vec::new();
        let mut current: Vec<i32> = Vec::new();
        result.push(current.clone());
        for i in 0..nums.len() {
            let mut j = i;
            while j < nums.len() {
                current.push(nums[j]);
                result.push(current.clone());
                j += 1;
            }
            current = Vec::new();
        }
        result

=======
Suggestion 7

        let mut res = Vec::new();
        res.push(Vec::new());
        for &n in nums.iter() {
            let mut new_res = Vec::new();
            for v in res.iter() {
                let mut new_v = v.clone();
                new_v.push(n);
                new_res.push(new_v);
            }
            res.append(&mut new_res);
        }
        res
    }
}

=======
Suggestion 8

        let mut res = vec![vec![]];
        for num in nums {
            let mut new = vec![];
            for list in res.iter() {
                let mut temp = list.clone();
                temp.push(num);
                new.push(temp);
            }
            res.append(&mut new);
        }
        res

=======
Suggestion 9

        let mut result = Vec::new();
        result.push(Vec::new());
        for i in 0..nums.len() {
            let mut j = 0;
            let mut new_result = Vec::new();
            while j < result.len() {
                let mut new_vec = result[j].clone();
                new_vec.push(nums[i]);
                new_result.push(new_vec);
                j += 1;
            }
            result.append(&mut new_result);
        }
        result
