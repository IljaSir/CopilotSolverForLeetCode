Synthesizing 10/10 solutions

=======

        let mut count = 0;
        let mut count1 = 0;
        for c in binary.chars() {
            if c == '1' {
                count1 += 1;
            } else {
                count += 1;
            }
            if count == 2 {
                count = 1;
                count1 += 1;
            }
        }
        let mut ans = String::new();
        for _ in 0..count1 {
            ans.push('1');
        }
        for _ in 0..count {
            ans.push('0');
        }
        ans

=======

        let mut s = binary.chars().collect::<Vec<_>>();
        let mut i = 0;
        while i < s.len() {
            if s[i] == '0' {
                let mut j = i;
                while j < s.len() && s[j] == '0' {
                    j += 1;
                }
                if j == s.len() {
                    break;
                }
                let k = j - i;
                s[i] = '1';
                s[j] = '0';
                i = j + k;
            } else {
                i += 1;
            }
        }
        s.into_iter().collect()

=======

        let mut ans = String::new();
        let mut cnt = 0;
        let mut flag = false;
        for c in binary.chars() {
            if c == '0' {
                if flag {
                    ans.push('1');
                } else {
                    ans.push('0');
                }
                cnt += 1;
            } else {
                if cnt > 0 {
                    ans.push('1');
                    cnt -= 1;
                } else {
                    ans.push('1');
                    flag = true;
                }
            }
        }
        while cnt > 0 {
            ans.push('1');
            cnt -= 1;
        }
        ans
    }
}

=======

        let mut binary = binary;
        let mut i = 0;
        while i < binary.len() {
            let mut j = i;
            while j < binary.len() && binary.as_bytes()[j] == b'1' {
                j += 1;
            }
            if j < binary.len() {
                let mut k = j;
                while k < binary.len() && binary.as_bytes()[k] == b'0' {
                    k += 1;
                }
                if k < binary.len() {
                    binary.replace_range(j..k, "1".repeat(k - j).as_str());
                }
            }
            i = j + 1;
        }
        binary
    }
}

=======

        let mut count = 0;
        let mut first = true;
        let mut ans = String::new();
        for c in binary.chars() {
            if c == '0' {
                if first {
                    ans.push('1');
                    first = false;
                } else {
                    ans.push('0');
                }
                count += 1;
            } else {
                ans.push('1');
                if count > 0 {
                    count -= 1;
                }
            }
        }
        for _ in 0..count {
            ans.push('1');
        }
        ans

=======

        let mut binary = binary;
        let mut zero_count = 0;
        let mut one_count = 0;
        let mut first_one = false;
        for c in binary.chars() {
            if c == '0' {
                if first_one {
                    zero_count += 1;
                }
            } else {
                first_one = true;
                one_count += 1;
            }
        }
        let mut res = String::new();
        for _ in 0..one_count {
            res.push('1');
        }
        if zero_count > 0 {
            res.push('0');
        }
        for _ in 0..zero_count-1 {
            res.push('1');
        }
        res
    }
}

=======

        let mut cnt = 0;
        let mut ans = String::new();
        let mut s = binary.chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            if s[i] == '0' {
                cnt += 1;
            }
        }
        for i in 0..cnt {
            ans.push('1');
        }
        for i in cnt..s.len() {
            ans.push('0');
        }
        ans
    }
}

=======

        let mut ans = binary.clone();
        let mut cnt = 0;
        let mut start = 0;
        let mut end = 0;
        for (i, c) in binary.chars().enumerate() {
            if c == '0' {
                if cnt == 0 {
                    start = i;
                }
                cnt += 1;
                end = i;
            }
        }
        if cnt == 0 {
            return ans;
        }
        for i in start..=end {
            ans.remove(i);
            ans.insert(i, '1');
        }
        ans
    }
}

=======

        let mut c = 0;
        let mut res = binary.clone();
        for i in 0..binary.len() {
            if binary[i..].starts_with("10") {
                c += 1;
                res = res.replace("10", "01", 1);
            }
        }
        if c == 0 {
            return binary;
        }
        let mut p = binary.len() - c - 1;
        let mut s = res.clone();
        while p < binary.len() - 1 {
            s = s.replace("01", "10", 1);
            p += 1;
        }
        return s;
    }
}

=======

        let mut count = 0;
        let mut first = 0;
        let mut last = 0;
        let mut zero = false;
        for i in 0..binary.len() {
            let c = binary.chars().nth(i).unwrap();
            if c == '0' {
                zero = true;
            }
            if c == '1' {
                count += 1;
            } else {
                if zero {
                    last += 1;
                } else {
                    first += 1;
                }
            }
        }
        let mut result = String::new();
        for _ in 0..first {
            result.push('1');
        }
        for _ in 0..last {
            result.push('0');
        }
        for _ in 0..(binary.len() - count - last) {
            result.push('1');
        }
        result
    }
}
