Synthesizing 9/10 solutions

=======

        let mut sum = 0;
        let mut max = 0;
        let mut set = std::collections::HashSet::new();
        let mut i = 0;
        for j in 0..nums.len() {
            while set.contains(&nums[j]) {
                set.remove(&nums[i]);
                sum -= nums[i];
                i += 1;
            }
            set.insert(nums[j]);
            sum += nums[j];
            max = max.max(sum);
        }
        max

=======

        let mut set = std::collections::HashSet::new();
        let mut sum = 0;
        let mut max = 0;
        let mut left = 0;
        for right in 0..nums.len() {
            while set.contains(&nums[right]) {
                set.remove(&nums[left]);
                sum -= nums[left];
                left += 1;
            }
            set.insert(nums[right]);
            sum += nums[right];
            max = std::cmp::max(max, sum);
        }
        max
    }
}

=======

        let mut sum = 0;
        let mut max = 0;
        let mut map = std::collections::HashMap::new();
        let mut i = 0;
        for j in 0..nums.len() {
            if let Some(&k) = map.get(&nums[j]) {
                while i <= k {
                    sum -= nums[i];
                    map.remove(&nums[i]);
                    i += 1;
                }
            }
            map.insert(nums[j], j);
            sum += nums[j];
            max = max.max(sum);
        }
        max

=======

        let mut max = 0;
        let mut sum = 0;
        let mut set = std::collections::HashSet::new();
        let mut start = 0;
        for i in 0..nums.len() {
            while set.contains(&nums[i]) {
                set.remove(&nums[start]);
                sum -= nums[start];
                start += 1;
            }
            set.insert(nums[i]);
            sum += nums[i];
            max = max.max(sum);
        }
        max

=======

        let mut max = 0;
        let mut start = 0;
        let mut end = 0;
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        while end < nums.len() {
            let num = nums[end];
            if let Some(&pos) = map.get(&num) {
                for i in start..pos {
                    map.remove(&nums[i]);
                    sum -= nums[i];
                }
                start = pos + 1;
            }
            map.insert(num, end);
            sum += num;
            max = std::cmp::max(max, sum);
            end += 1;
        }
        max

=======

        let mut res = 0;
        let mut sum = 0;
        let mut map = vec![0; 10001];
        let mut l = 0;
        for r in 0..nums.len() {
            sum += nums[r];
            map[nums[r] as usize] += 1;
            while map[nums[r] as usize] > 1 {
                map[nums[l] as usize] -= 1;
                sum -= nums[l];
                l += 1;
            }
            res = res.max(sum);
        }
        res

=======

        let mut sum = 0;
        let mut max = 0;
        let mut map = std::collections::HashMap::new();
        let mut start = 0;
        for (i, n) in nums.iter().enumerate() {
            if let Some(&index) = map.get(n) {
                while start <= index {
                    sum -= nums[start];
                    map.remove(&nums[start]);
                    start += 1;
                }
            }
            map.insert(*n, i);
            sum += *n;
            max = std::cmp::max(max, sum);
        }
        max
    }
}

=======

        let mut s = 0;
        let mut res = 0;
        let mut i = 0;
        let mut j = 0;
        let mut m = std::collections::HashMap::new();
        while j < nums.len() {
            if !m.contains_key(&nums[j]) {
                s += nums[j];
                m.insert(nums[j], j);
                j += 1;
                res = res.max(s);
            } else {
                s -= nums[i];
                m.remove(&nums[i]);
                i += 1;
            }
        }
        res

=======

        
    }
}
