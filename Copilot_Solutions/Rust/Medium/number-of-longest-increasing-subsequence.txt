Synthesizing 9/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let n = nums.len();
        let mut dp = vec![1; n];
        let mut cnt = vec![1; n];
        let mut ans = 0;
        let mut max_len = 0;
        for i in 0..n {
            for j in 0..i {
                if nums[j] < nums[i] {
                    if dp[j] + 1 > dp[i] {
                        dp[i] = dp[j] + 1;
                        cnt[i] = cnt[j];
                    } else if dp[j] + 1 == dp[i] {
                        cnt[i] += cnt[j];
                    }
                }
            }
            if dp[i] > max_len {
                max_len = dp[i];
                ans = cnt[i];
            } else if dp[i] == max_len {
                ans += cnt[i];
            }
        }
        ans

=======
Suggestion 2

        let n = nums.len();
        if n <= 1 {
            return n as i32;
        }
        let mut f = vec![1; n];
        let mut g = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    if f[j] + 1 > f[i] {
                        f[i] = f[j] + 1;
                        g[i] = g[j];
                    } else if f[j] + 1 == f[i] {
                        g[i] += g[j];
                    }
                }
            }
        }
        let max_len = f.iter().max().unwrap();
        let mut ans = 0;
        for i in 0..n {
            if f[i] == *max_len {
                ans += g[i];
            }
        }
        ans

=======
Suggestion 3

        let n = nums.len();
        let mut dp = vec![1; n];
        let mut count = vec![1; n];
        let mut res = 0;
        let mut max_len = 0;
        for i in 0..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    if dp[j] + 1 > dp[i] {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    } else if dp[j] + 1 == dp[i] {
                        count[i] += count[j];
                    }
                }
            }
            if dp[i] > max_len {
                max_len = dp[i];
                res = count[i];
            } else if dp[i] == max_len {
                res += count[i];
            }
        }
        res

=======
Suggestion 4

        let mut dp = vec![1; nums.len()];
        let mut count = vec![1; nums.len()];
        let mut max_len = 0;
        let mut ans = 0;
        for i in 0..nums.len() {
            for j in 0..i {
                if nums[j] < nums[i] {
                    if dp[j] + 1 > dp[i] {
                        dp[i] = dp[j] + 1;
                        count[i] = count[j];
                    } else if dp[j] + 1 == dp[i] {
                        count[i] += count[j];
                    }
                }
            }
            if dp[i] > max_len {
                max_len = dp[i];
                ans = count[i];
            } else if dp[i] == max_len {
                ans += count[i];
            }
        }
        return ans;

=======
Suggestion 5

        
    }
}
