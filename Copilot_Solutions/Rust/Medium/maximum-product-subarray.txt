Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut max = std::i32::MIN;
        let mut imax = 1;
        let mut imin = 1;
        for i in 0..nums.len() {
            if nums[i] < 0 {
                let tmp = imax;
                imax = imin;
                imin = tmp;
            }
            imax = std::cmp::max(imax * nums[i], nums[i]);
            imin = std::cmp::min(imin * nums[i], nums[i]);
            max = std::cmp::max(max, imax);
        }
        max

=======
Suggestion 2

        let mut max = i32::MIN;
        let mut imax = 1;
        let mut imin = 1;
        for i in 0..nums.len() {
            if nums[i] < 0 {
                let tmp = imax;
                imax = imin;
                imin = tmp;
            }
            imax = std::cmp::max(imax * nums[i], nums[i]);
            imin = std::cmp::min(imin * nums[i], nums[i]);
            max = std::cmp::max(max, imax);
        }
        max

=======
Suggestion 3

        let mut res = nums[0];
        let mut max = res;
        let mut min = res;
        for i in 1..nums.len() {
            if nums[i] < 0 {
                std::mem::swap(&mut max, &mut min);
            }
            max = std::cmp::max(nums[i], max * nums[i]);
            min = std::cmp::min(nums[i], min * nums[i]);
            res = std::cmp::max(res, max);
        }
        res

=======
Suggestion 4

        let mut max: i32 = nums[0];
        let mut min: i32 = nums[0];
        let mut res: i32 = nums[0];
        for i in 1..nums.len() {
            let tmp = max;
            max = std::cmp::max(nums[i], std::cmp::max(min * nums[i], max * nums[i]));
            min = std::cmp::min(nums[i], std::cmp::min(min * nums[i], tmp * nums[i]));
            res = std::cmp::max(res, max);
        }
        res

=======
Suggestion 5

        let mut max = nums[0];
        let mut min = nums[0];
        let mut res = nums[0];
        for i in 1..nums.len() {
            let a = nums[i] * max;
            let b = nums[i] * min;
            max = a.max(b).max(nums[i]);
            min = a.min(b).min(nums[i]);
            res = res.max(max);
        }
        res

=======
Suggestion 6

        let mut max = nums[0];
        let mut min = nums[0];
        let mut res = nums[0];
        for i in 1..nums.len() {
            let tmp = max;
            max = std::cmp::max(std::cmp::max(max * nums[i], min * nums[i]), nums[i]);
            min = std::cmp::min(std::cmp::min(tmp * nums[i], min * nums[i]), nums[i]);
            res = std::cmp::max(res, max);
        }
        res

=======
Suggestion 7

        let mut max = nums[0];
        let mut min = nums[0];
        let mut res = nums[0];
        for i in 1..nums.len() {
            let tmp = max;
            max = std::cmp::max(std::cmp::max(nums[i], nums[i] * max), nums[i] * min);
            min = std::cmp::min(std::cmp::min(nums[i], nums[i] * tmp), nums[i] * min);
            res = std::cmp::max(res, max);
        }
        res

=======
Suggestion 8

        let mut max = nums[0];
        let mut min = nums[0];
        let mut result = nums[0];
        for i in 1..nums.len() {
            let temp = max;
            max = std::cmp::max(std::cmp::max(max * nums[i], min * nums[i]), nums[i]);
            min = std::cmp::min(std::cmp::min(temp * nums[i], min * nums[i]), nums[i]);
            result = std::cmp::max(result, max);
        }
        result

=======
Suggestion 9

        let mut max = nums[0];
        let mut min = nums[0];
        let mut res = nums[0];
        for i in 1..nums.len() {
            let t = max;
            max = std::cmp::max(std::cmp::max(max * nums[i], min * nums[i]), nums[i]);
            min = std::cmp::min(std::cmp::min(t * nums[i], min * nums[i]), nums[i]);
            res = std::cmp::max(res, max);
        }
        res

=======
Suggestion 10

        let mut max = std::i32::MIN;
        let mut min = std::i32::MAX;
        let mut ans = std::i32::MIN;
        for i in nums {
            let temp = max;
            max = std::cmp::max(std::cmp::max(max * i, min * i), i);
            min = std::cmp::min(std::cmp::min(temp * i, min * i), i);
            ans = std::cmp::max(ans, max);
        }
        ans
