Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut res = vec![];
        Self::backtrack(&mut res, String::new(), 0, 0, n);
        res
    }

    fn backtrack(res: &mut Vec<String>, cur: String, open: i32, close: i32, max: i32) {
        if cur.len() == 2 * max as usize {
            res.push(cur);
            return;
        }
        if open < max {
            Self::backtrack(res, cur.clone() + "(", open + 1, close, max);
        }
        if close < open {
            Self::backtrack(res, cur.clone() + ")", open, close + 1, max);
        }
    }
}

=======
Suggestion 2

        let mut ans = vec![];
        Self::backtrack(&mut ans, String::new(), 0, 0, n);
        ans
    }

    fn backtrack(ans: &mut Vec<String>, cur: String, open: i32, close: i32, max: i32) {
        if cur.len() == max as usize * 2 {
            ans.push(cur);
            return;
        }
        if open < max {
            Self::backtrack(ans, cur.clone() + "(", open + 1, close, max);
        }
        if close < open {
            Self::backtrack(ans, cur.clone() + ")", open, close + 1, max);
        }
    }
}

=======
Suggestion 3

        let mut res = vec![];
        Self::backtrack(&mut res, String::new(), 0, 0, n);
        res
    }
    fn backtrack(res: &mut Vec<String>, cur: String, open: i32, close: i32, max: i32) {
        if cur.len() == max as usize * 2 {
            res.push(cur);
            return;
        }
        if open < max {
            Self::backtrack(res, cur.clone() + "(", open + 1, close, max);
        }
        if close < open {
            Self::backtrack(res, cur.clone() + ")", open, close + 1, max);
        }

=======
Suggestion 4

        let mut res = vec![];
        Self::dfs(0, 0, n, &mut String::new(), &mut res);
        res
    }

    fn dfs(left: i32, right: i32, n: i32, s: &mut String, res: &mut Vec<String>) {
        if left == n && right == n {
            res.push(s.clone());
            return;
        }
        if left < n {
            s.push('(');
            Self::dfs(left + 1, right, n, s, res);
            s.pop();
        }
        if right < left {
            s.push(')');
            Self::dfs(left, right + 1, n, s, res);
            s.pop();
        }
    }
}

=======
Suggestion 5

        let mut res = Vec::new();
        Self::gen(&mut res, n, n, String::new());
        res
    }
    
    fn gen(res: &mut Vec<String>, left: i32, right: i32, mut s: String) {
        if left > right {
            return;
        }
        if left == 0 && right == 0 {
            res.push(s);
            return;
        }
        if left > 0 {
            s.push('(');
            Self::gen(res, left - 1, right, s.clone());
            s.pop();
        }
        if right > 0 {
            s.push(')');
            Self::gen(res, left, right - 1, s.clone());
            s.pop();
        }

=======
Suggestion 6

        let mut res = vec![];
        Self::backtrack(n, 0, 0, String::new(), &mut res);
        res
    }

    fn backtrack(n: i32, open: i32, close: i32, s: String, res: &mut Vec<String>) {
        if s.len() == (n * 2) as usize {
            res.push(s);
            return;
        }

        if open < n {
            Self::backtrack(n, open + 1, close, s + "(", res);
        }

        if close < open {
            Self::backtrack(n, open, close + 1, s + ")", res);
        }

=======
Suggestion 7

        let mut ans = Vec::new();
        Self::gen(&mut ans, 0, 0, n, String::new());
        ans
    }
    fn gen(ans: &mut Vec<String>, open: i32, close: i32, n: i32, s: String) {
        if s.len() == 2 * n as usize {
            ans.push(s);
            return;
        }
        if open < n {
            Self::gen(ans, open + 1, close, n, s + "(");
        }
        if close < open {
            Self::gen(ans, open, close + 1, n, s + ")");
        }
    }
}

=======
Suggestion 8

        let mut result = Vec::new();
        Self::generate_parenthesis_helper(&mut result, String::new(), 0, 0, n);
        result
    }
    
    fn generate_parenthesis_helper(result: &mut Vec<String>, s: String, left: i32, right: i32, n: i32) {
        if left == n && right == n {
            result.push(s);
            return;
        }
        
        if left < n {
            let mut s1 = s.clone();
            s1.push('(');
            Self::generate_parenthesis_helper(result, s1, left + 1, right, n);
        }
        
        if right < left {
            let mut s1 = s.clone();
            s1.push(')');
            Self::generate_parenthesis_helper(result, s1, left, right + 1, n);
        }

=======
Suggestion 9

        let mut res = Vec::new();
        Solution::generate(&mut res, "".to_string(), n, n);
        res
    }
    
    fn generate(res: &mut Vec<String>, cur: String, left: i32, right: i32) {
        if left == 0 && right == 0 {
            res.push(cur);
            return;
        }
        if left > 0 {
            Solution::generate(res, cur.clone() + "(", left - 1, right);
        }
        if right > left {
            Solution::generate(res, cur.clone() + ")", left, right - 1);
        }

=======
Suggestion 10

        let mut ret = vec![];
        let n = n as usize;
        let mut stack = vec![];
        let mut s = String::new();
        let mut i = 0;
        while i < n {
            stack.push((i, 0, 0));
            s.push('(');
            i += 1;
        }
        while let Some((i, l, r)) = stack.pop() {
            if l == n && r == n {
                ret.push(s);
                continue;
            }
            if l < n {
                stack.push((i, l + 1, r));
                s.push('(');
            }
            if l > r {
                stack.push((i, l, r + 1));
                s.push(')');
            }
            s.truncate(i);
        }
        ret
    }
}
