Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut x = 0;
        let mut y = 0;
        let mut dx = 0;
        let mut dy = 1;
        for c in instructions.chars() {
            match c {
                'G' => {
                    x += dx;
                    y += dy;
                },
                'L' => {
                    let tmp = dx;
                    dx = -dy;
                    dy = tmp;
                },
                'R' => {
                    let tmp = dx;
                    dx = dy;
                    dy = -tmp;
                },
                _ => (),
            }
        }
        (x == 0 && y == 0) || (dx != 0 || dy != 1)
    }
}

=======

        let mut x = 0;
        let mut y = 0;
        let mut dir = 0;
        for c in instructions.chars() {
            match c {
                'G' => {
                    match dir {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        _ => x -= 1,
                    }
                }
                'L' => dir = (dir + 3) % 4,
                _ => dir = (dir + 1) % 4,
            }
        }
        x == 0 && y == 0 || dir != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut d = 0;
        for c in instructions.chars() {
            match c {
                'G' => {
                    match d {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        3 => x -= 1,
                        _ => {}
                    }
                }
                'L' => {
                    d = (d + 3) % 4;
                }
                'R' => {
                    d = (d + 1) % 4;
                }
                _ => {}
            }
        }
        x == 0 && y == 0 || d != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut d = 0;
        for c in instructions.chars() {
            match c {
                'G' => {
                    match d {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        3 => x -= 1,
                        _ => unreachable!(),
                    }
                }
                'L' => d = (d + 3) % 4,
                'R' => d = (d + 1) % 4,
                _ => unreachable!(),
            }
        }
        x == 0 && y == 0 || d != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut dir = 0;
        let dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)];
        for c in instructions.chars() {
            match c {
                'G' => {
                    x += dirs[dir].0;
                    y += dirs[dir].1;
                },
                'L' => dir = (dir + 3) % 4,
                'R' => dir = (dir + 1) % 4,
                _ => (),
            }
        }
        x == 0 && y == 0 || dir != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut dir = 0;
        for i in instructions.chars() {
            match i {
                'G' => {
                    match dir {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        3 => x -= 1,
                        _ => {}
                    }
                }
                'L' => {
                    dir = (dir + 3) % 4;
                }
                'R' => {
                    dir = (dir + 1) % 4;
                }
                _ => {}
            }
        }
        x == 0 && y == 0 || dir != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut dir = 0;
        let dirs = vec![(0, 1), (1, 0), (0, -1), (-1, 0)];
        for &c in instructions.as_bytes() {
            match c {
                b'G' => {
                    x += dirs[dir].0;
                    y += dirs[dir].1;
                }
                b'L' => {
                    dir = (dir + 3) % 4;
                }
                b'R' => {
                    dir = (dir + 1) % 4;
                }
                _ => {}
            }
        }
        (x == 0 && y == 0) || dir != 0

=======

        let mut x = 0;
        let mut y = 0;
        let mut d = 0;
        let dirs = vec![(0, 1), (1, 0), (0, -1), (-1, 0)];
        for c in instructions.chars() {
            match c {
                'G' => {
                    x += dirs[d].0;
                    y += dirs[d].1;
                }
                'L' => d = (d + 3) % 4,
                'R' => d = (d + 1) % 4,
                _ => (),
            }
        }
        x == 0 && y == 0 || d != 0

=======

        let mut direction: i32 = 0;
        let mut x: i32 = 0;
        let mut y: i32 = 0;
        for ch in instructions.chars() {
            match ch {
                'G' => {
                    match direction {
                        0 => y += 1,
                        1 => x += 1,
                        2 => y -= 1,
                        3 => x -= 1,
                        _ => (),
                    }
                }
                'L' => direction = (direction + 3) % 4,
                'R' => direction = (direction + 1) % 4,
                _ => (),
            }
        }
        direction != 0 || (x == 0 && y == 0)
