Synthesizing 5/10 solutions

=======

        let mut graph = vec![vec![std::i32::MAX; n as usize]; n as usize];
        for i in 0..n {
            graph[i as usize][i as usize] = 0;
        }
        for edge in edges {
            graph[edge[0] as usize][edge[1] as usize] = edge[2];
            graph[edge[1] as usize][edge[0] as usize] = edge[2];
        }
        for k in 0..n {
            for i in 0..n {
                for j in 0..n {
                    if graph[i as usize][k as usize] != std::i32::MAX && graph[k as usize][j as usize] != std::i32::MAX {
                        graph[i as usize][j as usize] = graph[i as usize][j as usize].min(graph[i as usize][k as usize] + graph[k as usize][j as usize]);
                    }
                }
            }
        }
        let mut res = (0, n);
        for i in 0..n {
            let mut cnt = 0;
            for j in 0..n {
                if graph[i as usize][j as usize] <= distance_threshold {
                    cnt += 1;
                }
            }
            if res.1 >= cnt {
                res = (i, cnt);
            }
        }
        res.0

=======

        let n = n as usize;
        let mut dist = vec![vec![i32::max_value(); n]; n];
        for i in 0..n {
            dist[i][i] = 0;
        }
        for e in edges {
            let u = e[0] as usize;
            let v = e[1] as usize;
            let w = e[2];
            dist[u][v] = w;
            dist[v][u] = w;
        }
        for k in 0..n {
            for i in 0..n {
                for j in 0..n {
                    if dist[i][k] != i32::max_value() && dist[k][j] != i32::max_value() {
                        if dist[i][k] + dist[k][j] < dist[i][j] {
                            dist[i][j] = dist[i][k] + dist[k][j];
                        }
                    }
                }
            }
        }
        let mut ans = 0;
        let mut min = n;
        for i in 0..n {
            let mut cnt = 0;
            for j in 0..n {
                if dist[i][j] <= distance_threshold {
                    cnt += 1;
                }
            }
            if cnt <= min {
                min = cnt;
                ans = i;
            }
        }
        ans as i32

=======

        let mut distance = vec![vec![std::i32::MAX; n as usize]; n as usize];
        for i in 0..n as usize {
            distance[i][i] = 0;
        }
        for edge in edges {
            distance[edge[0] as usize][edge[1] as usize] = edge[2];
            distance[edge[1] as usize][edge[0] as usize] = edge[2];
        }
        for k in 0..n as usize {
            for i in 0..n as usize {
                for j in 0..n as usize {
                    if distance[i][k] != std::i32::MAX && distance[k][j] != std::i32::MAX {
                        distance[i][j] = distance[i][j].min(distance[i][k] + distance[k][j]);
                    }
                }
            }
        }
        let mut min = std::i32::MAX;
        let mut ans = 0;
        for i in 0..n as usize {
            let mut count = 0;
            for j in 0..n as usize {
                if distance[i][j] <= distance_threshold {
                    count += 1;
                }
            }
            if count <= min {
                min = count;
                ans = i;
            }
        }
        ans as i32

=======

        let n = n as usize;
        let mut g = vec![vec![std::i32::MAX; n]; n];
        for edge in edges {
            let (u, v, w) = (edge[0] as usize, edge[1] as usize, edge[2] as usize);
            g[u][v] = w;
            g[v][u] = w;
        }
        for i in 0..n {
            g[i][i] = 0;
        }
        for k in 0..n {
            for i in 0..n {
                for j in 0..n {
                    g[i][j] = g[i][j].min(g[i][k] + g[k][j]);
                }
            }
        }
        let mut ans = 0;
        let mut min = n;
        for i in 0..n {
            let mut cnt = 0;
            for j in 0..n {
                if g[i][j] <= distance_threshold {
                    cnt += 1;
                }
            }
            if cnt <= min {
                ans = i;
                min = cnt;
            }
        }
        ans as i32

=======

        
    }
}
