Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        let mut cur_max = nums[0];
        let mut cur_min = nums[0];
        let mut total = nums[0];
        for i in 1..n {
            cur_max = cur_max.max(0) + nums[i];
            max_sum = max_sum.max(cur_max);
            cur_min = cur_min.min(0) + nums[i];
            min_sum = min_sum.min(cur_min);
            total += nums[i];
        }
        if max_sum > 0 {
            max_sum.max(total - min_sum)
        } else {
            max_sum
        }

=======

        let mut max = nums[0];
        let mut min = nums[0];
        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        let mut sum = nums[0];
        for i in 1..nums.len() {
            let num = nums[i];
            if sum < 0 {
                sum = num;
            } else {
                sum = sum + num;
            }
            if max_sum < sum {
                max_sum = sum;
            }
            if sum > 0 {
                sum = num;
            } else {
                sum = sum + num;
            }
            if min_sum > sum {
                min_sum = sum;
            }
        }
        let sum: i32 = nums.iter().sum();
        let mut ans = max_sum;
        if sum - min_sum > ans {
            ans = sum - min_sum;
        }
        if sum == min_sum {
            ans = max;
        }
        ans

=======

        let mut max = std::i32::MIN;
        let mut min = std::i32::MAX;
        let mut max_sum = 0;
        let mut min_sum = 0;
        let mut sum = 0;
        for &n in &nums {
            max_sum = std::cmp::max(max_sum + n, n);
            min_sum = std::cmp::min(min_sum + n, n);
            max = std::cmp::max(max, max_sum);
            min = std::cmp::min(min, min_sum);
            sum += n;
        }
        if max > 0 { std::cmp::max(max, sum - min) } else { max }
    }
}

=======

        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        let mut total_sum = nums[0];
        let mut curr_max = nums[0];
        let mut curr_min = nums[0];
        for i in 1..nums.len() {
            total_sum += nums[i];
            curr_max = nums[i].max(curr_max + nums[i]);
            curr_min = nums[i].min(curr_min + nums[i]);
            max_sum = max_sum.max(curr_max);
            min_sum = min_sum.min(curr_min);
        }
        if max_sum > 0 {
            max_sum.max(total_sum - min_sum)
        } else {
            max_sum
        }

=======

        let mut res = nums[0];
        let mut cur = nums[0];
        for i in 1..nums.len() {
            cur = nums[i].max(nums[i] + cur);
            res = res.max(cur);
        }
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut min_sum = 0;
        let mut min_cur = 0;
        for i in 0..nums.len() {
            min_cur = (nums[i] + min_cur).min(nums[i]);
            min_sum = min_sum.min(min_cur);
        }
        if sum == min_sum {
            return res;
        }
        res.max(sum - min_sum)
    }
}

=======

        let mut max = nums[0];
        let mut min = nums[0];
        let mut sum = 0;
        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        for &n in nums.iter() {
            sum += n;
            if max_sum > 0 {
                max_sum = n;
            } else {
                max_sum += n;
            }
            if max_sum > max {
                max = max_sum;
            }
            if min_sum < 0 {
                min_sum = n;
            } else {
                min_sum += n;
            }
            if min_sum < min {
                min = min_sum;
            }
        }
        if max < 0 {
            max
        } else {
            std::cmp::max(max, sum - min)
        }

=======

        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        let mut total_sum = nums[0];
        let mut max = nums[0];
        let mut min = nums[0];
        for i in 1..nums.len() {
            let num = nums[i];
            max = std::cmp::max(max + num, num);
            min = std::cmp::min(min + num, num);
            max_sum = std::cmp::max(max_sum, max);
            min_sum = std::cmp::min(min_sum, min);
            total_sum += num;
        }
        if total_sum == min_sum {
            max_sum
        } else {
            std::cmp::max(max_sum, total_sum - min_sum)
        }

=======

        let n = nums.len();
        let mut max = nums[0];
        let mut min = nums[0];
        let mut total = nums[0];
        let mut max_sum = nums[0];
        let mut min_sum = nums[0];
        for i in 1..n {
            let num = nums[i];
            total += num;
            max_sum = max_sum.max(num);
            max_sum = max_sum.max(num + max_sum);
            min_sum = min_sum.min(num);
            min_sum = min_sum.min(num + min_sum);
            max = max.max(max_sum);
            min = min.min(min_sum);
        }
        if max > 0 {
            max.max(total - min)
        } else {
            max
        }

=======

        let (mut max_sum, mut min_sum, mut cur_max, mut cur_min, mut sum) = (nums[0], nums[0], 0, 0, 0);
        for &num in nums.iter() {
            cur_max = cur_max.max(0) + num;
            max_sum = max_sum.max(cur_max);
            cur_min = cur_min.min(0) + num;
            min_sum = min_sum.min(cur_min);
            sum += num;
        }
        if max_sum > 0 { max_sum.max(sum - min_sum) } else { max_sum }

=======

        let (mut max, mut min, mut sum, mut total) = (i32::MIN, i32::MAX, 0, 0);
        for &n in nums.iter() {
            sum = sum.max(0) + n;
            max = max.max(sum);
            total += n;
            sum = sum.min(0) + n;
            min = min.min(sum);
        }
        if max > 0 { max.max(total - min) } else { max }
    }
}
