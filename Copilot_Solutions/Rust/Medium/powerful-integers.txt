Synthesizing 9/10 solutions

=======

        let mut ret = vec![];
        let mut i = 0;
        while x.pow(i) < bound {
            let mut j = 0;
            while x.pow(i) + y.pow(j) <= bound {
                ret.push(x.pow(i) + y.pow(j));
                if y == 1 {
                    break;
                }
                j += 1;
            }
            if x == 1 {
                break;
            }
            i += 1;
        }
        ret.sort();
        ret.dedup();
        ret

=======

        let mut set = std::collections::HashSet::new();
        let mut i = 0;
        let mut j = 0;
        loop {
            let a = x.pow(i);
            if a > bound {
                break;
            }
            j = 0;
            loop {
                let b = y.pow(j);
                if a + b > bound {
                    break;
                }
                set.insert(a + b);
                if y == 1 {
                    break;
                }
                j += 1;
            }
            if x == 1 {
                break;
            }
            i += 1;
        }
        set.into_iter().collect()

=======

        let mut res = vec![];
        let mut i = 0;
        let mut j = 0;
        let mut a = 1;
        let mut b = 1;
        while a + b <= bound {
            while a + b <= bound {
                res.push(a + b);
                if y == 1 {
                    break;
                }
                b *= y;
                j += 1;
            }
            if x == 1 {
                break;
            }
            a *= x;
            i += 1;
            j = 0;
            b = 1;
        }
        res.sort();
        res.dedup();
        res

=======

        let mut result: Vec<i32> = Vec::new();
        let mut x_power = 1;
        while x_power < bound {
            let mut y_power = 1;
            while y_power < bound {
                let sum = x_power + y_power;
                if sum <= bound && !result.contains(&sum) {
                    result.push(sum);
                }
                if y == 1 {
                    break;
                }
                y_power *= y;
            }
            if x == 1 {
                break;
            }
            x_power *= x;
        }
        result
    }
}

=======

        let mut res = vec![];
        let mut i = 0;
        let mut j = 0;
        loop {
            let mut tmp = i32::pow(x, i) + i32::pow(y, j);
            if tmp <= bound {
                if !res.contains(&tmp) {
                    res.push(tmp);
                }
            } else {
                if y == 1 {
                    break;
                }
                j = 0;
                i += 1;
                continue;
            }
            if x == 1 {
                break;
            }
            j += 1;
        }
        res

=======

        
    }
}

=======

        let mut res: Vec<i32> = vec![];
        let mut i = 0;
        let mut j = 0;
        let mut x_pow = 1;
        let mut y_pow = 1;
        while x_pow < bound {
            while y_pow < bound {
                let pow_sum = x_pow + y_pow;
                if pow_sum <= bound && !res.contains(&pow_sum) {
                    res.push(pow_sum);
                }
                if y == 1 {
                    break;
                }
                j += 1;
                y_pow = y.pow(j);
            }
            if x == 1 {
                break;
            }
            i += 1;
            j = 0;
            x_pow = x.pow(i);
            y_pow = y.pow(j);
        }
        res

=======

        let mut set = std::collections::HashSet::new();
        let mut x_powers = vec![1];
        let mut y_powers = vec![1];
        while x_powers.last().unwrap() < &bound {
            let last = x_powers.last().unwrap();
            x_powers.push(last * x);
        }
        while y_powers.last().unwrap() < &bound {
            let last = y_powers.last().unwrap();
            y_powers.push(last * y);
        }
        for x_power in x_powers {
            for y_power in &y_powers {
                let sum = x_power + y_power;
                if sum <= bound {
                    set.insert(sum);
                }
            }
        }
        set.into_iter().collect()

=======

        let mut result = Vec::new();
        let mut i = 0;
        let mut j = 0;
        let mut power = 1;
        while power < bound {
            j = 0;
            let mut power2 = 1;
            while power + power2 <= bound {
                if !result.contains(&(power + power2)) {
                    result.push(power + power2);
                }
                j += 1;
                power2 = power2 * y;
                if y == 1 {
                    break;
                }
            }
            i += 1;
            power = power * x;
            if x == 1 {
                break;
            }
        }
        result
