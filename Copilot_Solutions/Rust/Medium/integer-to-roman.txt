Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut num = num;
        let mut res = Vec::new();
        while num > 0 {
            if num >= 1000 {
                res.push('M');
                num -= 1000;
            } else if num >= 900 {
                res.push('C');
                res.push('M');
                num -= 900;
            } else if num >= 500 {
                res.push('D');
                num -= 500;
            } else if num >= 400 {
                res.push('C');
                res.push('D');
                num -= 400;
            } else if num >= 100 {
                res.push('C');
                num -= 100;
            } else if num >= 90 {
                res.push('X');
                res.push('C');
                num -= 90;
            } else if num >= 50 {
                res.push('L');
                num -= 50;
            } else if num >= 40 {
                res.push('X');
                res.push('L');
                num -= 40;
            } else if num >= 10 {
                res.push('X');
                num -= 10;
            } else if num >= 9 {
                res.push('I');
                res.push('X');
                num -= 9;
            } else if num >= 5 {
                res.push('V');
                num -= 5;
            } else if num >= 4 {
                res.push('I');
                res.push('V');
                num -= 4;
            } else {
                res.push('I');
                num -= 1;
            }
        }
        res.into_iter().collect()

=======
Suggestion 2

        let mut num = num;
        let mut result = String::new();
        while num != 0 {
            match num {
                1..=3 => {
                    result.push('I');
                    num -= 1;
                }
                4 => {
                    result.push_str("IV");
                    num -= 4;
                }
                5..=8 => {
                    result.push('V');
                    num -= 5;
                }
                9 => {
                    result.push_str("IX");
                    num -= 9;
                }
                10..=39 => {
                    result.push('X');
                    num -= 10;
                }
                40..=49 => {
                    result.push_str("XL");
                    num -= 40;
                }
                50..=89 => {
                    result.push('L');
                    num -= 50;
                }
                90..=99 => {
                    result.push_str("XC");
                    num -= 90;
                }
                100..=399 => {
                    result.push('C');
                    num -= 100;
                }
                400..=499 => {
                    result.push_str("CD");
                    num -= 400;
                }
                500..=899 => {
                    result.push('D');
                    num -= 500;
                }
                900..=999 => {
                    result.push_str("CM");
                    num -= 900;
                }
                1000..=3999 => {
                    result.push('M');
                    num -= 1000;
                }
                _ => unreachable!(),
            }
        }
        result
    }
}

=======
Suggestion 3

        let mut num = num;
        let mut res = String::new();
        let mut i = 0;
        let nums = vec![1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
        let romans = vec!["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
        while num > 0 {
            let times = num / nums[i];
            for _ in 0..times {
                res += romans[i];
            }
            num -= times * nums[i];
            i += 1;
        }
        res

=======
Suggestion 4

        let mut n = num;
        let mut ans = String::new();
        let mut roman = vec![
            ("M", 1000),
            ("CM", 900),
            ("D", 500),
            ("CD", 400),
            ("C", 100),
            ("XC", 90),
            ("L", 50),
            ("XL", 40),
            ("X", 10),
            ("IX", 9),
            ("V", 5),
            ("IV", 4),
            ("I", 1),
        ];
        for (roman, value) in roman {
            while n >= *value {
                ans.push_str(roman);
                n -= value;
            }
        }
        ans

=======
Suggestion 5

        let mut res = String::new();
        let mut num = num;
        let mut i = 0;
        let map = vec![("M", 1000), ("CM", 900), ("D", 500), ("CD", 400), ("C", 100), ("XC", 90), ("L", 50), ("XL", 40), ("X", 10), ("IX", 9), ("V", 5), ("IV", 4), ("I", 1)];
        while num > 0 {
            if num >= map[i].1 {
                res.push_str(map[i].0);
                num -= map[i].1;
            } else {
                i += 1;
            }
        }
        res

=======
Suggestion 6

        let mut roman = String::new();
        let mut num = num;
        let mut base = 1;
        while num > 0 {
            let digit = num % 10;
            if digit > 0 {
                roman = Self::int_to_roman_digit(digit, base) + &roman;
            }
            num /= 10;
            base *= 10;
        }
        roman
    }

    pub fn int_to_roman_digit(digit: i32, base: i32) -> String {
        let mut roman = String::new();
        if digit == 4 {
            roman.push_str(Self::int_to_roman_digit(1, base).as_str());
            roman.push_str(Self::int_to_roman_digit(5, base).as_str());
        } else if digit == 9 {
            roman.push_str(Self::int_to_roman_digit(1, base).as_str());
            roman.push_str(Self::int_to_roman_digit(10, base).as_str());
        } else {
            if digit >= 5 {
                roman.push_str(Self::int_to_roman_digit(5, base).as_str());
            }
            for _ in 0..(digit % 5) {
                roman.push_str(Self::int_to_roman_digit(1, base).as_str());
            }
        }
        roman
    }
}

=======
Suggestion 7

        let mut num = num;
        let mut result = String::new();
        let mut i = 0;
        while num > 0 {
            let mut n = num % 10;
            num /= 10;
            if n == 9 {
                result.insert(0, Self::get_roman_char(i, 0));
                result.insert(0, Self::get_roman_char(i, 2));
            } else if n >= 5 {
                result.insert(0, Self::get_roman_char(i, 1));
                n -= 5;
                while n > 0 {
                    result.insert(0, Self::get_roman_char(i, 0));
                    n -= 1;
                }
            } else if n == 4 {
                result.insert(0, Self::get_roman_char(i, 1));
                result.insert(0, Self::get_roman_char(i, 0));
            } else {
                while n > 0 {
                    result.insert(0, Self::get_roman_char(i, 0));
                    n -= 1;
                }
            }
            i += 1;
        }
        result

=======
Suggestion 8

        let mut n = num;
        let mut res = String::new();
        let mut i = 0;
        let roman = vec![
            vec!['I', 'V'],
            vec!['X', 'L'],
            vec!['C', 'D'],
            vec!['M', ' '],
        ];
        while n > 0 {
            let m = n % 10;
            n /= 10;
            if m == 0 {
                i += 1;
                continue;
            }
            let mut s = String::new();
            if m == 9 {
                s.push(roman[i][0]);
                s.push(roman[i + 1][0]);
            } else if m == 4 {
                s.push(roman[i][0]);
                s.push(roman[i][1]);
            } else if m >= 5 {
                s.push(roman[i][1]);
                for _ in 0..m - 5 {
                    s.push(roman[i][0]);
                }
            } else {
                for _ in 0..m {
                    s.push(roman[i][0]);
                }
            }
            res = s + &res;
            i += 1;
        }
        res

=======
Suggestion 9

        let mut res = String::new();
        let mut num = num;
        let mut digit = 1;
        while num > 0 {
            let v = num % 10;
            res = Self::get_roman(v, digit) + &res;
            num /= 10;
            digit *= 10;
        }
        res
    }
    
    pub fn get_roman(num: i32, digit: i32) -> String {
        match digit {
            1 => {
                match num {
                    1 => "I".to_string(),
                    2 => "II".to_string(),
                    3 => "III".to_string(),
                    4 => "IV".to_string(),
                    5 => "V".to_string(),
                    6 => "VI".to_string(),
                    7 => "VII".to_string(),
                    8 => "VIII".to_string(),
                    9 => "IX".to_string(),
                    _ => "".to_string(),
                }
            },
            10 => {
                match num {
                    1 => "X".to_string(),
                    2 => "XX".to_string(),
                    3 => "XXX".to_string(),
                    4 => "XL".to_string(),
                    5 => "L".to_string(),
                    6 => "LX".to_string(),
                    7 => "LXX".to_string(),
                    8 => "LXXX".to_string(),
                    9 => "XC".to_string(),
                    _ => "".to_string(),
                }
            },
            100 => {
                match num {
                    1 => "C".to_string(),
                    2 => "CC".to_string(),
                    3 => "CCC".to_string(),
                    4 => "CD".to_string(),
                    5 => "D".to_string(),
                    6 => "DC".to_string(),
                    7 => "DCC".to_string(),
                    8 => "DCCC".to_string(),
                    9 => "CM".to_string(),
                    _ => "".to_string(),
                }
            },
            1000 => {
                match num {
                    1 => "M".to_string(),
                    2 => "MM".to_string(),
                    3 => "MMM".to_string(),
                    _ => "".to_string(),
                }
            },
            _ => "".to_string(),
        }

=======
Suggestion 10

        let mut ans = String::new();
        let mut num = num;
        let mut i = 0;
        let mut tmp = 0;
        let mut t = 0;
        let mut s = String::new();
        while num > 0 {
            tmp = num % 10;
            num = num / 10;
            if tmp == 0 {
                i += 1;
                continue;
            }
            s = match i {
                0 => match tmp {
                    1 => "I",
                    2 => "II",
                    3 => "III",
                    4 => "IV",
                    5 => "V",
                    6 => "VI",
                    7 => "VII",
                    8 => "VIII",
                    9 => "IX",
                    _ => "",
                },
                1 => match tmp {
                    1 => "X",
                    2 => "XX",
                    3 => "XXX",
                    4 => "XL",
                    5 => "L",
                    6 => "LX",
                    7 => "LXX",
                    8 => "LXXX",
                    9 => "XC",
                    _ => "",
                },
                2 => match tmp {
                    1 => "C",
                    2 => "CC",
                    3 => "CCC",
                    4 => "CD",
                    5 => "D",
                    6 => "DC",
                    7 => "DCC",
                    8 => "DCCC",
                    9 => "CM",
                    _ => "",
                },
                3 => match tmp {
                    1 => "M",
                    2 => "MM",
                    3 => "MMM",
                    _ => "",
                },
                _ => "",
            };
            ans = format!("{}{}", s, ans);
            i += 1;
        }
        ans
    }
}
