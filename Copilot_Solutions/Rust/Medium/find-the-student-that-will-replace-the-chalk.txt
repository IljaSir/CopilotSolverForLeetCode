Synthesizing 10/10 solutions

=======

        let mut k = k;
        let mut i = 0;
        while k >= chalk[i] {
            k -= chalk[i];
            i += 1;
            if i == chalk.len() {
                i = 0;
            }
        }
        i as i32

=======

        let mut k = k;
        let sum: i32 = chalk.iter().sum();
        k %= sum;
        for i in 0..chalk.len() {
            k -= chalk[i];
            if k < 0 {
                return i as i32;
            }
        }
        0

=======

        let mut k = k as i64;
        let mut sum = 0;
        for i in 0..chalk.len() {
            sum += chalk[i] as i64;
        }
        k %= sum;
        for i in 0..chalk.len() {
            if k < chalk[i] as i64 {
                return i as i32;
            }
            k -= chalk[i] as i64;
        }
        0

=======

        let sum: i64 = chalk.iter().map(|x| *x as i64).sum();
        let mut k = k as i64;
        k %= sum;
        for (i, x) in chalk.iter().enumerate() {
            k -= *x as i64;
            if k < 0 {
                return i as i32;
            }
        }
        0

=======

        let mut k = k;
        let mut sum = 0;
        for &c in chalk.iter() {
            sum += c;
        }
        k %= sum;
        for (i, &c) in chalk.iter().enumerate() {
            if k < c {
                return i as i32;
            }
            k -= c;
        }
        0

=======

        let mut k = k;
        let mut i = 0;
        let mut sum = 0;
        while i < chalk.len() {
            sum += chalk[i];
            i += 1;
        }
        k %= sum;
        i = 0;
        while k >= 0 {
            k -= chalk[i];
            i += 1;
        }
        (i - 1) as i32

=======

        let n = chalk.len() as i32;
        let mut sum = 0;
        for &i in chalk.iter() {
            sum += i;
        }
        let mut k = k % sum;
        for i in 0..n {
            if k < chalk[i as usize] {
                return i;
            }
            k -= chalk[i as usize];
        }
        0

=======

        let mut k = k;
        let mut i = 0;
        let mut sum = 0;
        for &c in chalk.iter() {
            sum += c;
        }
        k %= sum;
        while k >= 0 {
            k -= chalk[i];
            i += 1;
        }
        (i - 1) as i32

=======

        let mut k = k;
        let mut i = 0;
        let mut j = chalk.len();
        let mut sum = 0;
        while i < j {
            let m = (i + j) / 2;
            sum += chalk[m];
            if sum > k {
                j = m;
            } else {
                i = m + 1;
            }
        }
        if i == chalk.len() {
            0
        } else {
            i as i32
        }

=======

        let mut k = k as usize;
        let mut i = 0;
        let mut n = chalk.len();
        let mut sum = 0;
        for i in 0..n {
            sum += chalk[i];
        }
        k %= sum;
        while k >= chalk[i] as usize {
            k -= chalk[i] as usize;
            i += 1;
        }
        i as i32
    }
}
