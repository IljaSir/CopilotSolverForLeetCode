Synthesizing 9/10 solutions

=======
Suggestion 1

        let n = nums1.len();
        let m = nums2.len();
        let mut dp = vec![vec![0; m + 1]; n + 1];
        let mut ans = 0;
        for i in 0..n {
            for j in 0..m {
                if nums1[i] == nums2[j] {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                    ans = ans.max(dp[i + 1][j + 1]);
                }
            }
        }
        ans as i32

=======
Suggestion 2

        let (n, m) = (nums1.len(), nums2.len());
        let mut dp = vec![vec![0; m + 1]; n + 1];
        let mut ans = 0;
        for i in 0..n {
            for j in 0..m {
                if nums1[i] == nums2[j] {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                    ans = ans.max(dp[i + 1][j + 1]);
                }
            }
        }
        ans as i32
    }
}

=======
Suggestion 3

        let (n1, n2) = (nums1.len(), nums2.len());
        let mut dp = vec![vec![0; n2 + 1]; n1 + 1];
        let mut ans = 0;
        for i in 1..=n1 {
            for j in 1..=n2 {
                dp[i][j] = if nums1[i - 1] == nums2[j - 1] {
                    dp[i - 1][j - 1] + 1
                } else {
                    0
                };
                ans = ans.max(dp[i][j]);
            }
        }
        ans

=======
Suggestion 4

        let mut dp = vec![vec![0; nums2.len()]; nums1.len()];
        let mut ans = 0;
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                if nums1[i] == nums2[j] {
                    if i > 0 && j > 0 {
                        dp[i][j] = dp[i - 1][j - 1] + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    ans = ans.max(dp[i][j]);
                }
            }
        }
        ans

=======
Suggestion 5

        let mut dp = vec![vec![0; nums2.len()+1]; nums1.len()+1];
        let mut res = 0;
        for i in 1..=nums1.len() {
            for j in 1..=nums2.len() {
                if nums1[i-1] == nums2[j-1] {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    res = res.max(dp[i][j]);
                }
            }
        }
        res

=======
Suggestion 6

        let mut dp = vec![vec![0; nums2.len() + 1]; nums1.len() + 1];
        let mut ans = 0;
        for i in (0..nums1.len()).rev() {
            for j in (0..nums2.len()).rev() {
                if nums1[i] == nums2[j] {
                    dp[i][j] = dp[i + 1][j + 1] + 1;
                    ans = ans.max(dp[i][j]);
                }
            }
        }
        ans
    }
}

=======
Suggestion 7

        let mut dp = vec![vec![0; nums2.len() + 1]; nums1.len() + 1];
        let mut max = 0;
        for i in 1..nums1.len() + 1 {
            for j in 1..nums2.len() + 1 {
                if nums1[i - 1] == nums2[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    if dp[i][j] > max {
                        max = dp[i][j];
                    }
                }
            }
        }
        max
    }
}

=======
Suggestion 8

        let mut dp = vec![vec![0; nums1.len() + 1]; nums2.len() + 1];
        let mut max = 0;
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                if nums1[i] == nums2[j] {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                    if dp[i + 1][j + 1] > max {
                        max = dp[i + 1][j + 1];
                    }
                }
            }
        }
        max

=======
Suggestion 9

        
    }
}
