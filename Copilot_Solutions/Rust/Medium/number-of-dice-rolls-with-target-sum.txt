Synthesizing 10/10 solutions

=======

        let n = n as usize;
        let k = k as usize;
        let target = target as usize;
        let mut dp = vec![vec![0; target + 1]; n + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            for j in 1..=k {
                for t in j..=target {
                    dp[i][t] = (dp[i][t] + dp[i - 1][t - j]) % 1000000007;
                }
            }
        }
        dp[n][target]

=======

        let n = n as usize;
        let k = k as usize;
        let target = target as usize;
        let mut dp = vec![vec![0; target + 1]; n + 1];
        dp[0][0] = 1;

        for i in 1..=n {
            for j in 1..=target {
                for m in 1..=k {
                    if j >= m {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - m]) % 1000000007;
                    }
                }
            }
        }

        dp[n][target]

=======

        let n = n as usize;
        let k = k as usize;
        let target = target as usize;
        let mut dp = vec![vec![0; target + 1]; n + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            for j in 1..=target {
                for l in 1..=k {
                    if j >= l {
                        dp[i][j] += dp[i - 1][j - l];
                        dp[i][j] %= 1_000_000_007;
                    }
                }
            }
        }
        dp[n][target]
    }
}

=======

        let mut dp = vec![vec![0; target as usize + 1]; n as usize + 1];
        dp[0][0] = 1;
        for i in 1..=n as usize {
            for j in 1..=target as usize {
                for t in 1..=k as usize {
                    if j >= t {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - t]) % (1_000_000_000 + 7);
                    }
                }
            }
        }
        dp[n as usize][target as usize]

=======

        let mut dp = vec![vec![0; target as usize + 1]; n as usize + 1];
        dp[0][0] = 1;
        for i in 1..=n as usize {
            for j in 1..=target as usize {
                for x in 1..=k as usize {
                    if j >= x {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - x]) % 1000000007;
                    }
                }
            }
        }
        dp[n as usize][target as usize]
    }
}

=======

        let mut dp = vec![vec![0; target as usize + 1]; n as usize + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            for j in 1..=target {
                for d in 1..=k {
                    if j >= d {
                        dp[i as usize][j as usize] += dp[(i - 1) as usize][(j - d) as usize];
                        dp[i as usize][j as usize] %= 1_000_000_007;
                    }
                }
            }
        }
        dp[n as usize][target as usize]
    }
}

=======

        let mut dp = vec![vec![0; target as usize + 1]; n as usize + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            for j in 1..=target {
                for l in 1..=k {
                    if j >= l {
                        dp[i as usize][j as usize] += dp[(i - 1) as usize][(j - l) as usize];
                    }
                }
            }
        }
        dp[n as usize][target as usize] % 1000000007

=======

        let n = n as usize;
        let k = k as usize;
        let target = target as usize;
        let mod_num = 1000000007;
        let mut dp = vec![vec![0; target + 1]; n + 1];
        dp[0][0] = 1;
        for i in 1..=n {
            for j in 1..=target {
                for l in 1..=k {
                    if l > j {
                        break;
                    }
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - l]) % mod_num;
                }
            }
        }
        dp[n][target]
    }
}

=======

        let mut dp = vec![vec![0; target as usize + 1]; n as usize + 1];
        dp[0][0] = 1;
        let modu = 1000000007;
        for i in 1..=n {
            for j in 1..=target {
                let mut sum = 0;
                for x in 1..=k {
                    if j >= x {
                        sum = (sum + dp[(i - 1) as usize][(j - x) as usize]) % modu;
                    }
                }
                dp[i as usize][j as usize] = sum;
            }
        }
        dp[n as usize][target as usize]

=======

        let modu = 1000000007;
        let mut dp = vec![0; target as usize + 1];
        dp[0] = 1;
        for _i in 0..n {
            let mut ndp = vec![0; target as usize + 1];
            for j in 0..=target {
                for l in 1..=k {
                    if j + l > target {
                        break;
                    }
                    ndp[j as usize + l as usize] = (ndp[j as usize + l as usize] + dp[j as usize]) % modu;
                }
            }
            dp = ndp;
        }
        dp[target as usize]
