Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut matrix = matrix;
        let m = matrix.len();
        let n = matrix[0].len();
        for i in 1..m {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            matrix[i].sort();
            for j in 0..n {
                ans = ans.max(matrix[i][j] * (n - j) as i32);
            }
        }
        ans
    }
}

=======

        let mut matrix = matrix;
        let m = matrix.len();
        let n = matrix[0].len();
        for i in 1..m {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            matrix[i].sort_unstable_by_key(|&x| -(x as i64));
            for j in 0..n {
                ans = ans.max(matrix[i][j] * (j + 1) as i32);
            }
        }
        ans

=======

        let (m, n) = (matrix.len(), matrix[0].len());
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    dp[i][j] = 1 + if i > 0 { dp[i - 1][j] } else { 0 };
                }
            }
        }
        let mut res = 0;
        for i in 0..m {
            dp[i].sort_unstable();
            for j in 0..n {
                res = res.max(dp[i][j] * (n - j) as i32);
            }
        }
        res

=======

        let mut matrix = matrix;
        let m = matrix.len();
        let n = matrix[0].len();
        
        for i in 1..m {
            for j in 0..n {
                if matrix[i][j] == 1 {
                    matrix[i][j] += matrix[i-1][j];
                }
            }
        }
        
        let mut result = 0;
        for i in 0..m {
            let mut row = matrix[i].clone();
            row.sort();
            for j in 0..n {
                result = result.max(row[j] * (n-j) as i32);
            }
        }
        result
    }
}

=======

        
    }
}

=======

        let mut matrix = matrix;
        let m = matrix.len();
        let n = matrix[0].len();
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                if i > 0 && matrix[i][j] == 1 {
                    matrix[i][j] += matrix[i - 1][j];
                }
            }
            matrix[i].sort();
            for j in 0..n {
                ans = ans.max((n - j) as i32 * matrix[i][j]);
            }
        }
        ans
    }
}
