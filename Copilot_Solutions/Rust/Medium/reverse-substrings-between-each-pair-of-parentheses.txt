Synthesizing 10/10 solutions

=======

        let mut stack = vec![];
        let mut result = String::new();
        for c in s.chars() {
            if c == '(' {
                stack.push(result);
                result = String::new();
            } else if c == ')' {
                let mut reversed = String::new();
                for c in result.chars() {
                    reversed.insert(0, c);
                }
                result = stack.pop().unwrap() + &reversed;
            } else {
                result.push(c);
            }
        }
        result

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let mut stack = Vec::new();
        for i in 0..s.len() {
            if s[i] == '(' {
                stack.push(i);
            } else if s[i] == ')' {
                let j = stack.pop().unwrap();
                s[j..i].reverse();
            }
        }
        s.into_iter().filter(|&c| c != '(' && c != ')').collect()

=======

        let mut stack: Vec<Vec<char>> = Vec::new();
        for c in s.chars() {
            if c == '(' {
                stack.push(Vec::new());
            } else if c == ')' {
                let mut tmp = stack.pop().unwrap();
                tmp.reverse();
                if stack.is_empty() {
                    stack.push(tmp);
                } else {
                    stack.last_mut().unwrap().append(&mut tmp);
                }
            } else {
                if stack.is_empty() {
                    stack.push(vec![c]);
                } else {
                    stack.last_mut().unwrap().push(c);
                }
            }
        }
        stack.into_iter().flatten().collect()
    }
}

=======

        let mut stack = Vec::new();
        let mut str = String::new();
        for c in s.chars() {
            if c == '(' {
                stack.push(str);
                str = String::new();
            } else if c == ')' {
                str = stack.pop().unwrap() + &str.chars().rev().collect::<String>();
            } else {
                str.push(c);
            }
        }
        str

=======

        let mut stack = vec![];
        for c in s.chars() {
            match c {
                ')' => {
                    let mut tmp = vec![];
                    while let Some(c) = stack.pop() {
                        if c == '(' {
                            break;
                        }
                        tmp.push(c);
                    }
                    stack.extend(tmp);
                },
                _ => stack.push(c),
            }
        }
        stack.into_iter().collect()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if c == ')' {
                let mut tmp: Vec<char> = Vec::new();
                while let Some(&x) = stack.last() {
                    if x == '(' {
                        stack.pop();
                        break;
                    }
                    tmp.push(stack.pop().unwrap());
                }
                stack.append(&mut tmp);
            } else {
                stack.push(c);
            }
        }
        stack.into_iter().collect()

=======

        let mut stack = Vec::new();
        let mut result: Vec<char> = Vec::new();
        for c in s.chars() {
            if c == '(' {
                stack.push(result);
                result = Vec::new();
            } else if c == ')' {
                result.reverse();
                let mut tmp = stack.pop().unwrap();
                tmp.append(&mut result);
                result = tmp;
            } else {
                result.push(c);
            }
        }
        result.into_iter().collect()
    }
}

=======

        let mut stack = Vec::new();
        let mut ret = String::new();
        for c in s.chars() {
            if c == ')' {
                let mut tmp = String::new();
                while let Some(x) = stack.pop() {
                    if x == '(' {
                        break;
                    } else {
                        tmp.push(x);
                    }
                }
                stack.extend(tmp.chars());
            } else {
                stack.push(c);
            }
        }
        stack.into_iter().collect()
    }
}

=======

        let mut stack: Vec<String> = vec![];
        let mut s = s;
        for c in s.chars() {
            if c == '(' {
                stack.push("".to_string());
            } else if c == ')' {
                let mut t = stack.pop().unwrap();
                t = t.chars().rev().collect();
                stack.push(t);
            } else {
                if let Some(t) = stack.last_mut() {
                    t.push(c);
                } else {
                    stack.push(c.to_string());
                }
            }
        }
        stack.join("")

=======

        
    }
}
