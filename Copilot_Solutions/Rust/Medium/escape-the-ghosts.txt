Synthesizing 10/10 solutions

=======

        let d = target[0].abs() + target[1].abs();
        for g in ghosts {
            if (g[0] - target[0]).abs() + (g[1] - target[1]).abs() <= d {
                return false;
            }
        }
        true

=======

        let (x, y) = (target[0], target[1]);
        let d = x.abs() + y.abs();
        for g in ghosts {
            let (gx, gy) = (g[0], g[1]);
            if gx.abs() + gy.abs() <= d {
                return false;
            }
        }
        true

=======

        let distance = (target[0].abs() + target[1].abs()) as i32;
        for ghost in ghosts {
            if (ghost[0] - target[0]).abs() + (ghost[1] - target[1]).abs() <= distance {
                return false;
            }
        }
        true

=======

        let dist = |x: i32, y: i32| (target[0] - x).abs() + (target[1] - y).abs();
        let mut me = dist(0, 0);
        for ghost in ghosts {
            if dist(ghost[0], ghost[1]) <= me {
                return false;
            }
        }
        true

=======

        let mut dist = 0;
        for i in 0..target.len() {
            dist += target[i].abs();
        }
        for ghost in ghosts {
            let mut d = 0;
            for i in 0..target.len() {
                d += (target[i] - ghost[i]).abs();
            }
            if d <= dist {
                return false;
            }
        }
        return true;

=======

        let mut dist = 0;
        for i in 0..2 {
            dist += target[i].abs();
        }
        for ghost in ghosts {
            let mut gdist = 0;
            for i in 0..2 {
                gdist += (ghost[i] - target[i]).abs();
            }
            if gdist <= dist {
                return false;
            }
        }
        true
    }
}

=======

        let (x, y) = (target[0], target[1]);
        let mut manhattan = |a: &Vec<i32>| (a[0] - x).abs() + (a[1] - y).abs();
        manhattan(&vec![0, 0]) < ghosts.iter().map(manhattan).min().unwrap()

=======

        let mut dist = 0;
        for i in 0..2 {
            dist += (target[i] - 0).abs();
        }
        for ghost in ghosts {
            let mut gdist = 0;
            for i in 0..2 {
                gdist += (target[i] - ghost[i]).abs();
            }
            if gdist <= dist {
                return false;
            }
        }
        true

=======

        let manhattan = |x: i32, y: i32| x.abs() + y.abs();
        let (x, y) = (target[0], target[1]);
        let mut min = manhattan(x, y);
        for ghost in ghosts {
            let (gx, gy) = (ghost[0], ghost[1]);
            let distance = manhattan(x - gx, y - gy);
            if distance <= min {
                return false;
            }
        }
        true

=======

        let target = (target[0] as i64, target[1] as i64);
        let mut min_distance = std::i64::MAX;
        for ghost in ghosts {
            let ghost = (ghost[0] as i64, ghost[1] as i64);
            let distance = (target.0 - ghost.0).abs() + (target.1 - ghost.1).abs();
            if distance < min_distance {
                min_distance = distance;
            }
        }
        let distance = target.0.abs() + target.1.abs();
        distance < min_distance
