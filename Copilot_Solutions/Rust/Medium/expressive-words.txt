Synthesizing 9/10 solutions

=======

        let mut ans = 0;
        for word in words {
            if Self::is_stretchy(&s, &word) {
                ans += 1;
            }
        }
        ans
    }
    fn is_stretchy(s: &str, word: &str) -> bool {
        let (mut i, mut j) = (0, 0);
        let (mut s_len, mut word_len) = (s.len(), word.len());
        while i < s_len && j < word_len {
            if s.chars().nth(i) != word.chars().nth(j) {
                return false;
            }
            let (mut cnt1, mut cnt2) = (0, 0);
            while i < s_len && s.chars().nth(i) == s.chars().nth(i + 1) {
                i += 1;
                cnt1 += 1;
            }
            while j < word_len && word.chars().nth(j) == word.chars().nth(j + 1) {
                j += 1;
                cnt2 += 1;
            }
            if cnt1 < cnt2 || (cnt1 > cnt2 && cnt1 < 2) {
                return false;
            }
            i += 1;
            j += 1;
        }
        i == s_len && j == word_len

=======

        let mut res = 0;
        for word in words {
            if Solution::is_stretchy(&s, &word) {
                res += 1;
            }
        }
        res
    }
    fn is_stretchy(s: &String, word: &String) -> bool {
        let mut i = 0;
        let mut j = 0;
        let s = s.as_bytes();
        let word = word.as_bytes();
        while i < s.len() && j < word.len() {
            if s[i] != word[j] {
                return false;
            }
            let mut cnt1 = 0;
            let mut cnt2 = 0;
            while i < s.len() && s[i] == s[i + cnt1] {
                cnt1 += 1;
            }
            while j < word.len() && word[j] == word[j + cnt2] {
                cnt2 += 1;
            }
            if cnt1 < cnt2 || (cnt1 != cnt2 && cnt1 < 3) {
                return false;
            }
            i += cnt1;
            j += cnt2;
        }
        i == s.len() && j == word.len()

=======

        let mut res = 0;
        for word in words {
            if Solution::is_stretchy(&s, &word) {
                res += 1;
            }
        }
        res
    }
    fn is_stretchy(s: &str, word: &str) -> bool {
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < word.len() {
            if s[i..i+1] != word[j..j+1] {
                return false;
            }
            let mut i_len = 1;
            while i + i_len < s.len() && s[i] == s[i + i_len] {
                i_len += 1;
            }
            let mut j_len = 1;
            while j + j_len < word.len() && word[j] == word[j + j_len] {
                j_len += 1;
            }
            if i_len < j_len || (i_len < 3 && i_len != j_len) {
                return false;
            }
            i += i_len;
            j += j_len;
        }
        i == s.len() && j == word.len()

=======

        let mut res = 0;
        for w in words {
            if Self::is_stretchy(&s, &w) {
                res += 1;
            }
        }
        res
    }
    fn is_stretchy(s: &String, w: &String) -> bool {
        if s.len() < w.len() {
            return false;
        }
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < w.len() {
            if s.chars().nth(i).unwrap() != w.chars().nth(j).unwrap() {
                return false;
            }
            let mut i_count = 1;
            let mut j_count = 1;
            while i + 1 < s.len() && s.chars().nth(i).unwrap() == s.chars().nth(i + 1).unwrap() {
                i_count += 1;
                i += 1;
            }
            while j + 1 < w.len() && w.chars().nth(j).unwrap() == w.chars().nth(j + 1).unwrap() {
                j_count += 1;
                j += 1;
            }
            if j_count > i_count || (i_count < 3 && j_count != i_count) {
                return false;
            }
            i += 1;
            j += 1;
        }
        i == s.len() && j == w.len()

=======

        let mut count = 0;
        for word in words {
            let mut i = 0;
            let mut j = 0;
            while i < s.len() && j < word.len() {
                if s.chars().nth(i) == word.chars().nth(j) {
                    let mut i1 = i;
                    let mut j1 = j;
                    while i1 < s.len() && s.chars().nth(i1) == s.chars().nth(i) {
                        i1 += 1;
                    }
                    while j1 < word.len() && word.chars().nth(j1) == word.chars().nth(j) {
                        j1 += 1;
                    }
                    if i1 - i >= 3 || i1 - i == j1 - j {
                        i = i1;
                        j = j1;
                    } else {
                        break;
                    }
                } else {
                    break;
                }
            }
            if i == s.len() && j == word.len() {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        for word in words {
            if Solution::is_expressive(&s, &word) {
                res += 1;
            }
        }
        res
    }
    
    fn is_expressive(s: &str, word: &str) -> bool {
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < word.len() {
            if s.chars().nth(i) != word.chars().nth(j) {
                return false;
            }
            let mut i_end = i;
            while i_end < s.len() && s.chars().nth(i_end) == s.chars().nth(i) {
                i_end += 1;
            }
            let mut j_end = j;
            while j_end < word.len() && word.chars().nth(j_end) == word.chars().nth(j) {
                j_end += 1;
            }
            if i_end - i < j_end - j {
                return false;
            }
            if i_end - i < 3 && i_end - i != j_end - j {
                return false;
            }
            i = i_end;
            j = j_end;
        }
        i == s.len() && j == word.len()

=======

        let s: Vec<char> = s.chars().collect();
        let mut ans = 0;
        for w in words {
            let w: Vec<char> = w.chars().collect();
            let mut i = 0;
            let mut j = 0;
            while i < s.len() && j < w.len() {
                if s[i] != w[j] {
                    break;
                }
                let mut i1 = i;
                let mut j1 = j;
                while i1 < s.len() && s[i1] == s[i] {
                    i1 += 1;
                }
                while j1 < w.len() && w[j1] == w[j] {
                    j1 += 1;
                }
                if i1 - i < j1 - j {
                    break;
                }
                if i1 - i < 3 && i1 - i != j1 - j {
                    break;
                }
                i = i1;
                j = j1;
            }
            if i == s.len() && j == w.len() {
                ans += 1;
            }
        }
        ans

=======

        let mut res = 0;
        for w in words {
            let mut i = 0;
            let mut j = 0;
            let mut flag = true;
            while i < s.len() && j < w.len() {
                if s[i..].starts_with(&w[j..j+1]) {
                    let mut count1 = 1;
                    let mut count2 = 1;
                    let mut k = i + 1;
                    while k < s.len() && s[k..].starts_with(&w[j..j+1]) {
                        count1 += 1;
                        k += 1;
                    }
                    k = j + 1;
                    while k < w.len() && w[k..].starts_with(&w[j..j+1]) {
                        count2 += 1;
                        k += 1;
                    }
                    if count1 < count2 || (count1 < 3 && count1 != count2) {
                        flag = false;
                        break;
                    }
                    i += count1;
                    j += count2;
                } else {
                    flag = false;
                    break;
                }
            }
            if i < s.len() || j < w.len() {
                flag = false;
            }
            if flag {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        for word in words {
            let mut chars = word.chars().collect::<Vec<char>>();
            let mut i = 0;
            let mut j = 0;
            let mut ok = true;
            while i < s.len() && j < chars.len() {
                if s[i] != chars[j] {
                    ok = false;
                    break;
                }
                let mut cnt1 = 0;
                let mut cnt2 = 0;
                while i < s.len() && s[i] == s[i + cnt1] {
                    cnt1 += 1;
                }
                while j < chars.len() && chars[j] == chars[j + cnt2] {
                    cnt2 += 1;
                }
                if cnt1 < cnt2 || (cnt1 < 3 && cnt1 != cnt2) {
                    ok = false;
                    break;
                }
                i += cnt1;
                j += cnt2;
            }
            if ok && i == s.len() && j == chars.len() {
                res += 1;
            }
        }
        res
