Synthesizing 10/10 solutions

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    odd += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    odd += 1;
                }
            }
        }
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 1 {
                    even += 1;
                }
            } else {
                if nums[i] % 2 == 0 {
                    even += 1;
                }
            }
        }
        return std::cmp::min(odd, even);

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    odd += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    odd += 1;
                }
            }
        }
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 1 {
                    even += 1;
                }
            } else {
                if nums[i] % 2 == 0 {
                    even += 1;
                }
            }
        }
        odd.min(even)

=======

        let mut even = 0;
        let mut odd = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    even += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    odd += 1;
                }
            }
        }
        let mut ans = even.max(odd);
        even = 0;
        odd = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 1 {
                    even += 1;
                }
            } else {
                if nums[i] % 2 == 0 {
                    odd += 1;
                }
            }
        }
        ans = ans.min(even.max(odd));
        ans

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    ans += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    ans += 1;
                }
            }
        }
        ans.min(nums.len() - ans) as i32

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    ans += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    ans += 1;
                }
            }
        }
        ans
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    ans += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    ans += 1;
                }
            }
        }
        ans.min(nums.len() as i32 - ans)

=======

        let mut odd = 0;
        let mut even = 0;
        for (i, n) in nums.into_iter().enumerate() {
            if i % 2 == 0 {
                if n % 2 == 1 {
                    even += 1;
                } else {
                    odd += 1;
                }
            } else {
                if n % 2 == 0 {
                    even += 1;
                } else {
                    odd += 1;
                }
            }
        }
        std::cmp::min(odd, even)

=======

        let mut cnt = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 == 0 {
                    cnt += 1;
                }
            } else {
                if nums[i] % 2 == 1 {
                    cnt += 1;
                }
            }
        }
        cnt.min(nums.len() as i32 - cnt)

=======

        let mut odd = 0;
        let mut even = 0;
        let mut i = 0;
        while i < nums.len() {
            if i % 2 == 0 {
                if nums[i] % 2 != 0 {
                    odd += 1;
                } else {
                    even += 1;
                }
            } else {
                if nums[i] % 2 == 0 {
                    odd += 1;
                } else {
                    even += 1;
                }
            }
            i += 1;
        }
        if odd > even {
            even
        } else {
            odd
        }

=======

        let mut ans = (0, 0);
        for i in 0..nums.len() {
            if i % 2 == 0 {
                ans.0 += (nums[i] - 1) / 2;
                ans.1 += nums[i] / 2;
            } else {
                ans.0 += nums[i] / 2;
                ans.1 += (nums[i] - 1) / 2;
            }
        }
        ans.0.min(ans.1) as i32
