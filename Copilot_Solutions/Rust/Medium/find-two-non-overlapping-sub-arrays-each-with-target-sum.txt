Synthesizing 8/10 solutions

=======

        let n = arr.len();
        let mut s = vec![0; n + 1];
        for i in 0..n {
            s[i + 1] = s[i] + arr[i];
        }
        let mut left = vec![n; n];
        let mut right = vec![n; n];
        let mut j = 0;
        let mut result = n;
        for i in 0..n {
            while j < n && s[j + 1] - s[i] <= target {
                j += 1;
            }
            if s[j] - s[i] == target {
                if i > 0 {
                    left[i] = left[i - 1];
                }
                left[i] = left[i].min(j - i);
            } else if i > 0 {
                left[i] = left[i - 1];
            }
        }
        let mut j = n;
        for i in (0..n).rev() {
            while j > 0 && s[i + 1] - s[j - 1] <= target {
                j -= 1;
            }
            if s[i + 1] - s[j] == target {
                if i < n - 1 {
                    right[i] = right[i + 1];
                }
                right[i] = right[i].min(i + 1 - j);
            } else if i < n - 1 {
                right[i] = right[i + 1];
            }
            if left[i] != n && right[i] != n {
                result = result.min(left[i] + right[i]);
            }
        }
        if result == n {
            -1
        } else {
            result as i32
        }

=======

        let mut prefix_sum = vec![0; arr.len()];
        prefix_sum[0] = arr[0];
        for i in 1..arr.len() {
            prefix_sum[i] = prefix_sum[i - 1] + arr[i];
        }
        let mut prefix_index = vec![None; arr.len()];
        let mut prefix_min = vec![None; arr.len()];
        let mut suffix_index = vec![None; arr.len()];
        let mut suffix_min = vec![None; arr.len()];
        for i in 0..arr.len() {
            if prefix_sum[i] == target {
                prefix_index[i] = Some(i);
            } else if i > 0 && prefix_index[i - 1].is_some() && prefix_sum[i] - prefix_sum[prefix_index[i - 1].unwrap()] == target {
                prefix_index[i] = Some(prefix_index[i - 1].unwrap());
            }
            if i > 0 {
                prefix_min[i] = if prefix_index[i].is_some() {
                    if prefix_min[i - 1].is_some() {
                        Some(std::cmp::min(i - prefix_index[i].unwrap() + 1, prefix_min[i - 1].unwrap()))
                    } else {
                        Some(i - prefix_index[i].unwrap() + 1)
                    }
                } else {
                    prefix_min[i - 1]
                }
            }
        }
        for i in (0..arr.len()).rev() {
            if prefix_sum[i] == target {
                suffix_index[i] = Some(i);
            } else if i < arr.len() - 1 && suffix_index[i + 1].is_some() && prefix_sum[suffix_index[i + 1].unwrap()] - prefix_sum[i] == target {
                suffix_index[i] = Some(suffix_index[i + 1].unwrap());
            }
            if i < arr.len() - 1 {
                suffix_min[i] = if suffix_index[i].is_some() {
                    if suffix_min[i + 1].is_some() {
                        Some(std::cmp::min(suffix_index[i].unwrap() - i + 1, suffix_min[i + 1].unwrap()))
                    } else {
                        Some(suffix_index[i].unwrap() - i + 1)
                    }
                } else {
                    suffix_min[i + 1]
                }
            }
        }
        let mut ret = -1

=======

        
    }
}

=======

        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        let mut res = std::i32::MAX;
        let mut min = std::i32::MAX;
        map.insert(0, -1);
        for i in 0..arr.len() {
            sum += arr[i];
            if map.contains_key(&(sum - target)) {
                let idx = map[&(sum - target)];
                if idx != -1 {
                    let len = i as i32 - idx;
                    if len < min {
                        res = std::cmp::min(res, min + len);
                        min = len;
                    } else {
                        res = std::cmp::min(res, len + min);
                    }
                } else {
                    min = i as i32 + 1;
                }
            }
            map.insert(sum, i as i32);
        }
        if res == std::i32::MAX {
            -1
        } else {
            res
        }

=======

        let mut dp = vec![0; arr.len() + 1];
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        let mut ans = std::i32::MAX;
        let mut min = std::i32::MAX;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum == target {
                dp[i + 1] = i as i32 + 1;
            } else if let Some(&j) = map.get(&(sum - target)) {
                dp[i + 1] = i as i32 - j;
            }
            if dp[i + 1] > 0 {
                if min != std::i32::MAX {
                    ans = ans.min(min + dp[i + 1]);
                }
                min = min.min(dp[i + 1]);
            }
            map.insert(sum, i as i32);
        }
        if ans == std::i32::MAX {
            -1
        } else {
            ans
        }
    }
}

=======

        let mut s = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, -1);
        let mut ans = std::i32::MAX;
        let mut min = std::i32::MAX;
        for i in 0..arr.len() {
            s += arr[i];
            if let Some(&j) = map.get(&(s - target)) {
                if j != -1 {
                    min = std::cmp::min(min, (i - j) as i32);
                }
                if i as i32 != min {
                    ans = std::cmp::min(ans, min + (i - j) as i32);
                }
            }
            map.insert(s, i as i32);
        }
        if ans == std::i32::MAX {
            -1
        } else {
            ans
        }

=======

        let mut best = vec![-1; arr.len()];
        let mut left = 0;
        let mut right = 0;
        let mut sum = 0;
        let mut min_len = std::i32::MAX;
        while right < arr.len() {
            sum += arr[right];
            while sum > target {
                sum -= arr[left];
                left += 1;
            }
            if sum == target {
                if left > 0 && best[left - 1] != -1 {
                    min_len = min_len.min(best[left - 1] + (right - left + 1) as i32);
                }
                if right + 1 < arr.len() {
                    best[right + 1] = best[right + 1].max((right - left + 1) as i32);
                }
            }
            if right + 1 < arr.len() {
                best[right + 1] = best[right + 1].max(best[right]);
            }
            right += 1;
        }
        if min_len == std::i32::MAX {
            return -1;
        }
        min_len

=======

        let mut dp = vec![0; arr.len()+1];
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 0);
        let mut result = std::i32::MAX;
        let mut min = std::i32::MAX;
        for (i, &a) in arr.iter().enumerate() {
            sum += a;
            if let Some(&j) = map.get(&(sum - target)) {
                if j > 0 {
                    min = std::cmp::min(min, dp[j]);
                }
                dp[i+1] = if min == std::i32::MAX { std::i32::MAX } else { i as i32 - j as i32 + min + 2 };
                result = std::cmp::min(result, dp[i+1]);
            } else {
                dp[i+1] = std::i32::MAX;
            }
            map.insert(sum, i+1);
        }
        if result == std::i32::MAX {
            -1
        } else {
            result
        }
