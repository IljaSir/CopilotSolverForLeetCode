Synthesizing 10/10 solutions

=======

        let mut open = 0;
        let mut close = 0;
        for c in s.chars() {
            if c == '(' {
                open += 1;
            } else if open > 0 {
                open -= 1;
            } else {
                close += 1;
            }
        }
        open + close

=======

        let mut left = 0;
        let mut right = 0;
        let mut result = 0;
        for c in s.chars() {
            if c == '(' {
                left += 1;
            } else {
                if left > 0 {
                    left -= 1;
                } else {
                    right += 1;
                }
            }
        }
        result = left + right;
        result

=======

        let mut stack = Vec::new();
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                stack.push(c);
            } else {
                if let Some('(') = stack.pop() {
                    continue;
                } else {
                    count += 1;
                }
            }
        }
        count + stack.len() as i32

=======

        let mut count = 0;
        let mut sum = 0;
        for c in s.chars() {
            match c {
                '(' => count += 1,
                ')' => {
                    if count > 0 {
                        count -= 1;
                    } else {
                        sum += 1;
                    }
                },
                _ => ()
            }
        }
        sum + count

=======

        let mut stack = Vec::new();
        let mut result = 0;
        for c in s.chars() {
            if c == '(' {
                stack.push(c);
            } else {
                if stack.len() == 0 {
                    result += 1;
                } else {
                    stack.pop();
                }
            }
        }
        result += stack.len() as i32;
        result
    }
}

=======

        let mut count = 0;
        let mut stack = vec![];
        for c in s.chars() {
            if c == '(' {
                stack.push(c);
            } else {
                if stack.len() > 0 {
                    stack.pop();
                } else {
                    count += 1;
                }
            }
        }
        count + stack.len() as i32

=======

        let mut stack: Vec<char> = vec![];
        let mut count = 0;
        for c in s.chars() {
            if c == '(' {
                stack.push(c);
            } else {
                if let Some('(') = stack.pop() {
                } else {
                    count += 1;
                }
            }
        }
        count + stack.len() as i32

=======

        let mut count = 0;
        let mut stack = 0;
        for i in s.chars() {
            if i == '(' {
                stack += 1;
            } else {
                if stack == 0 {
                    count += 1;
                } else {
                    stack -= 1;
                }
            }
        }
        count + stack

=======

        let mut stack = Vec::new();
        let mut result = 0;
        for c in s.chars() {
            match c {
                '(' => stack.push(c),
                ')' => {
                    if stack.len() > 0 {
                        stack.pop();
                    } else {
                        result += 1;
                    }
                }
                _ => (),
            }
        }
        result + stack.len() as i32

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if c == ')' {
                if stack.is_empty() {
                    stack.push(c);
                } else {
                    if *stack.last().unwrap() == '(' {
                        stack.pop();
                    } else {
                        stack.push(c);
                    }
                }
            } else {
                stack.push(c);
            }
        }
        stack.len() as i32
