Synthesizing 10/10 solutions

=======

        let mut res = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                count += 1;
            } else {
                res += count * (count + 1) / 2;
                count = 0;
            }
        }
        res += count * (count + 1) / 2;
        res as i64
    }
}

=======

        let mut count = 0;
        let mut zero_count = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zero_count += 1;
            } else {
                count += zero_count * (zero_count + 1) / 2;
                zero_count = 0;
            }
        }
        if zero_count > 0 {
            count += zero_count * (zero_count + 1) / 2;
        }
        count as i64
    }
}

=======

        let mut count = 0;
        let mut zero_count = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zero_count += 1;
                count += zero_count;
            } else {
                zero_count = 0;
            }
        }
        count
    }
}

=======

        let mut res = 0;
        let mut zeros = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zeros += 1;
            } else {
                res += zeros * (zeros + 1) / 2;
                zeros = 0;
            }
        }
        res += zeros * (zeros + 1) / 2;
        res
    }
}

=======

        let mut res = 0;
        let mut zero_count = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zero_count += 1;
            } else {
                res += zero_count * (zero_count + 1) / 2;
                zero_count = 0;
            }
        }
        if zero_count > 0 {
            res += zero_count * (zero_count + 1) / 2;
        }
        return res as i64;

=======

        let mut res = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                count += 1;
            } else {
                count = 0;
            }
            res += count as i64;
        }
        res

=======

        let mut count: i64 = 0;
        let mut zero_count: i64 = 0;
        for i in nums {
            if i == 0 {
                zero_count += 1;
            } else {
                count += zero_count * (zero_count + 1) / 2;
                zero_count = 0;
            }
        }
        count += zero_count * (zero_count + 1) / 2;
        count
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut zero_count = 0;
        while j < nums.len() {
            if nums[j] == 0 {
                zero_count += 1;
            }
            j += 1;
            while zero_count > 1 {
                if nums[i] == 0 {
                    zero_count -= 1;
                }
                i += 1;
            }
            count += (j - i) as i64;
        }
        count
    }
}

=======

        let mut count = 0;
        let mut zero_count = 0;
        let mut zero_start = 0;
        let mut zero_end = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zero_count += 1;
                zero_end = i;
                if zero_count == 1 {
                    zero_start = i;
                }
            }
            if nums[i] != 0 || i == nums.len() - 1 {
                if zero_count > 0 {
                    count += ((zero_start + 1) * (nums.len() - zero_end)) as i64;
                    zero_count = 0;
                }
            }
        }
        count
    }
}

=======

        let n = nums.len();
        let mut sum = 0;
        let mut ans = 0;
        let mut sum_to_index = std::collections::HashMap::new();
        for i in 0..n {
            sum += nums[i];
            if sum == 0 {
                ans += i as i64 + 1;
            }
            if let Some(&j) = sum_to_index.get(&sum) {
                ans += (i - j) as i64;
            }
            sum_to_index.insert(sum, i);
        }
        ans
    }
}
