Synthesizing 10/10 solutions

=======

        let mut left_max = vec![0; nums.len()];
        let mut right_min = vec![0; nums.len()];
        left_max[0] = nums[0];
        for i in 1..nums.len() {
            left_max[i] = left_max[i-1].max(nums[i]);
        }
        right_min[nums.len()-1] = nums[nums.len()-1];
        for i in (0..nums.len()-1).rev() {
            right_min[i] = right_min[i+1].min(nums[i]);
        }
        let mut res = 0;
        for i in 1..nums.len()-1 {
            if nums[i] > left_max[i-1] && nums[i] < right_min[i+1] {
                res += 2;
            } else if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                res += 1;
            }
        }
        res
    }
}

=======

        let mut max = vec![0; nums.len()];
        let mut min = vec![0; nums.len()];
        max[0] = nums[0];
        for i in 1..nums.len() {
            max[i] = max[i - 1].max(nums[i]);
        }
        min[nums.len() - 1] = nums[nums.len() - 1];
        for i in (0..nums.len() - 1).rev() {
            min[i] = min[i + 1].min(nums[i]);
        }
        let mut ret = 0;
        for i in 1..nums.len() - 1 {
            if max[i - 1] < nums[i] && nums[i] < min[i + 1] {
                ret += 2;
            } else if nums[i - 1] < nums[i] && nums[i] < nums[i + 1] {
                ret += 1;
            }
        }
        ret

=======

        let n = nums.len();
        let mut left = vec![0; n];
        let mut right = vec![0; n];
        let mut l = nums[0];
        let mut r = nums[n - 1];
        for i in 1..n {
            left[i] = l;
            l = l.max(nums[i]);
            right[n - 1 - i] = r;
            r = r.min(nums[n - 1 - i]);
        }
        let mut sum = 0;
        for i in 1..n - 1 {
            if nums[i] > left[i] && nums[i] < right[i] {
                sum += 2;
            } else if nums[i - 1] < nums[i] && nums[i] < nums[i + 1] {
                sum += 1;
            }
        }
        sum

=======

        let n = nums.len();
        let mut lmax = vec![0; n];
        let mut rmin = vec![0; n];
        let mut sum = 0;
        lmax[0] = nums[0];
        rmin[n - 1] = nums[n - 1];
        for i in 1..n {
            lmax[i] = lmax[i - 1].max(nums[i]);
        }
        for i in (0..n - 1).rev() {
            rmin[i] = rmin[i + 1].min(nums[i]);
        }
        for i in 1..n - 1 {
            if nums[i] > lmax[i - 1] && nums[i] < rmin[i + 1] {
                sum += 2;
            } else if nums[i] > nums[i - 1] && nums[i] < nums[i + 1] {
                sum += 1;
            }
        }
        sum

=======

        let n = nums.len();
        let mut l = vec![0; n];
        let mut r = vec![0; n];
        let mut ans = 0;
        for i in 1..n-1 {
            l[i] = l[i-1].max(nums[i-1]);
            r[n-i-1] = r[n-i].max(nums[n-i]);
        }
        for i in 1..n-1 {
            if nums[i] > l[i] && nums[i] < r[i] {
                ans += 2;
            } else if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                ans += 1;
            }
        }
        ans

=======

        let mut left = vec![0; nums.len()];
        let mut right = vec![0; nums.len()];
        let mut min = nums[0];
        let mut max = nums[nums.len()-1];
        for i in 1..nums.len()-1 {
            if nums[i] > min {
                left[i] = 1;
            } else {
                min = nums[i];
            }
        }
        for i in (1..nums.len()-1).rev() {
            if nums[i] < max {
                right[i] = 1;
            } else {
                max = nums[i];
            }
        }
        let mut sum = 0;
        for i in 1..nums.len()-1 {
            if left[i] == 1 && right[i] == 1 {
                sum += 2;
            } else if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                sum += 1;
            }
        }
        sum

=======

        let mut sum = 0;
        let mut max = vec![0; nums.len()];
        let mut min = vec![0; nums.len()];
        max[0] = nums[0];
        min[nums.len()-1] = nums[nums.len()-1];
        for i in 1..nums.len() {
            max[i] = max[i-1].max(nums[i]);
            min[nums.len()-1-i] = min[nums.len()-i].min(nums[nums.len()-1-i]);
        }
        for i in 1..nums.len()-1 {
            if nums[i] > max[i-1] && nums[i] < min[i+1] {
                sum += 2;
            } else if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                sum += 1;
            }
        }
        sum

=======

        let mut result = 0;
        let mut min = vec![0; nums.len()];
        let mut max = vec![0; nums.len()];
        min[0] = nums[0];
        max[nums.len() - 1] = nums[nums.len() - 1];
        for i in 1..nums.len() {
            min[i] = min[i - 1].min(nums[i]);
        }
        for i in (0..nums.len() - 1).rev() {
            max[i] = max[i + 1].max(nums[i]);
        }
        for i in 1..nums.len() - 1 {
            if min[i - 1] < nums[i] && nums[i] < max[i + 1] {
                result += 2;
            } else if nums[i - 1] < nums[i] && nums[i] < nums[i + 1] {
                result += 1;
            }
        }
        result

=======

        let mut res = 0;
        let mut left = vec![0; nums.len()];
        let mut right = vec![0; nums.len()];
        let mut max = nums[0];
        for i in 1..nums.len()-1 {
            left[i] = max;
            max = max.max(nums[i]);
        }
        let mut min = nums[nums.len()-1];
        for i in (1..nums.len()-1).rev() {
            right[i] = min;
            min = min.min(nums[i]);
            if nums[i] > left[i] && nums[i] < right[i] {
                res += 2;
            } else if nums[i-1] < nums[i] && nums[i] < nums[i+1] {
                res += 1;
            }
        }
        res

=======

        let mut res = 0;
        let mut max = vec![0; nums.len()];
        let mut min = vec![0; nums.len()];
        let mut mn = std::i32::MAX;
        let mut mx = std::i32::MIN;
        for i in 0..nums.len() {
            mn = mn.min(nums[i]);
            mx = mx.max(nums[i]);
            min[i] = mn;
            max[i] = mx;
        }
        for i in 1..nums.len() - 1 {
            if nums[i] > min[i - 1] && nums[i] < max[i + 1] {
                res += 2;
            } else if nums[i - 1] < nums[i] && nums[i] < nums[i + 1] {
                res += 1;
            }
        }
        res
    }
}
