Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut i = 0;
        let mut j = 0;
        let mut max = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] <= nums2[j] {
                max = max.max(j - i);
                j += 1;
            } else {
                i += 1;
            }
        }
        max as i32

=======

        let mut i = 0;
        let mut j = 0;
        let mut max = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] <= nums2[j] {
                if max < j - i {
                    max = j - i;
                }
                j += 1;
            } else {
                i += 1;
            }
        }
        max

=======

        let mut i = 0;
        let mut j = 0;
        let mut max = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] <= nums2[j] {
                max = std::cmp::max(max, j - i);
                j += 1;
            } else {
                i += 1;
            }
        }
        max as i32

=======

        let mut res = 0;
        let mut i = 0;
        for j in 0..nums2.len() {
            while i < nums1.len() && nums1[i] > nums2[j] {
                i += 1;
            }
            if i < nums1.len() {
                res = res.max(j as i32 - i as i32);
            }
        }
        res

=======

        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] <= nums2[j] {
                max = std::cmp::max(max, j as i32 - i as i32);
                j += 1;
            } else {
                i += 1;
            }
        }
        max

=======

        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] > nums2[j] {
                i += 1;
            } else {
                if j - i > max {
                    max = j - i;
                }
                j += 1;
            }
        }
        max as i32

=======

        let mut max_distance = 0;
        let mut j = nums2.len() - 1;
        for i in 0..nums1.len() {
            while j > i && nums1[i] > nums2[j] {
                j -= 1;
            }
            max_distance = max_distance.max(j - i);
        }
        max_distance as i32
    }
}

=======

        let mut max = 0;
        let mut j = 0;
        for (i, &n1) in nums1.iter().enumerate() {
            while j < nums2.len() && n1 <= nums2[j] {
                j += 1;
            }
            if j > 0 {
                max = std::cmp::max(max, j - i - 1);
            }
        }
        max as i32
