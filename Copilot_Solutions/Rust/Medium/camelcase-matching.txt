Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        for q in queries {
            result.push(Self::is_match(q, pattern.clone()));
        }
        result
    }
    fn is_match(query: String, pattern: String) -> bool {
        let mut q = query.chars();
        let mut p = pattern.chars();
        let mut last = ' ';
        let mut q_char = q.next();
        let mut p_char = p.next();
        while q_char.is_some() {
            if q_char.unwrap() == p_char.unwrap_or(' ') {
                last = q_char.unwrap();
                q_char = q.next();
                p_char = p.next();
            } else if q_char.unwrap().is_uppercase() {
                return false;
            } else if last.is_uppercase() && q_char.unwrap() == last.to_lowercase().next().unwrap() {
                q_char = q.next();
            } else {
                return false;
            }
        }
        p_char.is_none()

=======

        let mut result = Vec::new();
        for query in &queries {
            result.push(Self::match_pattern(query, &pattern));
        }
        result
    }

    fn match_pattern(query: &str, pattern: &str) -> bool {
        let mut i = 0;
        let mut j = 0;
        let mut result = true;
        while i < query.len() && j < pattern.len() {
            if query.chars().nth(i).unwrap() == pattern.chars().nth(j).unwrap() {
                i += 1;
                j += 1;
            } else if query.chars().nth(i).unwrap().is_uppercase() {
                result = false;
                break;
            } else {
                i += 1;
            }
        }
        while i < query.len() && result {
            if query.chars().nth(i).unwrap().is_uppercase() {
                result = false;
            }
            i += 1;
        }
        if j < pattern.len() {
            result = false;
        }
        result

=======

        let mut res = Vec::new();
        for query in queries {
            let mut i = 0;
            let mut j = 0;
            let mut flag = true;
            while i < query.len() {
                if j < pattern.len() && query.chars().nth(i).unwrap() == pattern.chars().nth(j).unwrap() {
                    i += 1;
                    j += 1;
                } else if query.chars().nth(i).unwrap().is_uppercase() {
                    flag = false;
                    break;
                } else {
                    i += 1;
                }
            }
            if flag && j == pattern.len() {
                res.push(true);
            } else {
                res.push(false);
            }
        }
        res

=======

        let mut res = Vec::new();
        for query in queries {
            let mut flag = true;
            let mut i = 0;
            for c in query.chars() {
                if i < pattern.len() && c == pattern.chars().nth(i).unwrap() {
                    i += 1;
                } else if c.is_uppercase() {
                    flag = false;
                    break;
                }
            }
            if i != pattern.len() {
                flag = false;
            }
            res.push(flag);
        }
        res
    }
}

=======

        let mut res = Vec::new();
        for query in queries {
            let mut q = query.chars();
            let mut p = pattern.chars();
            let mut q_c = q.next();
            let mut p_c = p.next();
            let mut matched = true;
            while matched {
                match (q_c, p_c) {
                    (Some(q_c), Some(p_c)) => {
                        if q_c == p_c {
                            q_c = q.next();
                            p_c = p.next();
                        } else if q_c.is_uppercase() {
                            matched = false;
                        } else {
                            q_c = q.next();
                        }
                    }
                    (Some(q_c), None) => {
                        if q_c.is_uppercase() {
                            matched = false;
                        } else {
                            q_c = q.next();
                        }
                    }
                    (None, Some(_)) => {
                        matched = false;
                    }
                    (None, None) => {
                        break;
                    }
                }
            }
            res.push(matched);
        }
        res
    }
}

=======

        let mut ans = vec![];
        for q in queries {
            let (mut i, mut j) = (0, 0);
            let mut matched = true;
            while i < q.len() && j < pattern.len() {
                if q.as_bytes()[i] == pattern.as_bytes()[j] {
                    i += 1;
                    j += 1;
                } else if q.as_bytes()[i] >= 65 && q.as_bytes()[i] <= 90 {
                    matched = false;
                    break;
                } else {
                    i += 1;
                }
            }
            if matched {
                while i < q.len() {
                    if q.as_bytes()[i] >= 65 && q.as_bytes()[i] <= 90 {
                        matched = false;
                        break;
                    }
                    i += 1;
                }
            }
            if matched && j < pattern.len() {
                matched = false;
            }
            ans.push(matched);
        }
        ans
    }
}

=======

        let mut res = Vec::new();
        for query in queries {
            let mut i = 0;
            let mut j = 0;
            let mut match_flag = true;
            while i < query.len() {
                let q = query.chars().nth(i).unwrap();
                if j < pattern.len() {
                    let p = pattern.chars().nth(j).unwrap();
                    if q == p {
                        j += 1;
                    } else if q.is_uppercase() {
                        match_flag = false;
                        break;
                    }
                } else if q.is_uppercase() {
                    match_flag = false;
                    break;
                }
                i += 1;
            }
            if j < pattern.len() {
                match_flag = false;
            }
            res.push(match_flag);
        }
        res
    }
}

=======

        let mut result = vec![];
        for q in queries {
            let mut i = 0;
            let mut j = 0;
            let mut match_flag = true;
            while i < q.len() {
                if j < pattern.len() && q.as_bytes()[i] == pattern.as_bytes()[j] {
                    i += 1;
                    j += 1;
                } else if q.as_bytes()[i] >= 65 && q.as_bytes()[i] <= 90 {
                    match_flag = false;
                    break;
                } else {
                    i += 1;
                }
            }
            if j != pattern.len() {
                match_flag = false;
            }
            result.push(match_flag);
        }
        result

=======

        let mut ans = Vec::new();
        for q in queries {
            let mut p = pattern.clone();
            let mut matched = true;
            for c in q.chars() {
                if let Some(f) = p.chars().next() {
                    if c == f {
                        p.remove(0);
                        continue;
                    }
                }
                if c.is_uppercase() {
                    matched = false;
                    break;
                }
            }
            if !p.is_empty() {
                matched = false;
            }
            ans.push(matched);
        }
        ans

=======

        
    }
}
