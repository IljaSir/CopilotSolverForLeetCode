Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut ans = vec![0; n as usize];
        for booking in bookings {
            ans[booking[0] as usize - 1] += booking[2];
            if booking[1] < n {
                ans[booking[1] as usize] -= booking[2];
            }
        }
        for i in 1..n as usize {
            ans[i] += ans[i - 1];
        }
        ans

=======

        let mut ans = vec![0; n as usize];
        for b in bookings {
            ans[b[0] as usize - 1] += b[2];
            if b[1] < n {
                ans[b[1] as usize] -= b[2];
            }
        }
        for i in 1..n as usize {
            ans[i] += ans[i - 1];
        }
        ans

=======

        let mut v = vec![0; n as usize];
        for b in bookings {
            v[b[0] as usize - 1] += b[2];
            if b[1] < n {
                v[b[1] as usize] -= b[2];
            }
        }
        for i in 1..n as usize {
            v[i] += v[i - 1];
        }
        v

=======

        let mut ans = vec![0; n as usize];
        for booking in bookings {
            let (first, last, seats) = (booking[0] as usize, booking[1] as usize, booking[2]);
            ans[first - 1] += seats;
            if last < n as usize {
                ans[last] -= seats;
            }
        }
        for i in 1..ans.len() {
            ans[i] += ans[i - 1];
        }
        ans

=======

        let mut a = vec![0; n as usize];
        for b in bookings {
            a[b[0] as usize - 1] += b[2];
            if b[1] < n {
                a[b[1] as usize] -= b[2];
            }
        }
        for i in 1..n as usize {
            a[i] += a[i - 1];
        }
        a

=======

        let mut res = vec![0; n as usize];
        for b in bookings {
            res[(b[0] - 1) as usize] += b[2];
            if b[1] < n { res[b[1] as usize] -= b[2]; }
        }
        for i in 1..n as usize {
            res[i] += res[i - 1];
        }
        res

=======

        let mut ans = vec![0; n as usize];
        for booking in bookings {
            let (first, last, seats) = (booking[0] as usize - 1, booking[1] as usize - 1, booking[2]);
            ans[first] += seats;
            if last + 1 < n as usize {
                ans[last + 1] -= seats;
            }
        }
        for i in 1..n as usize {
            ans[i] += ans[i - 1];
        }
        ans

=======

        let mut ans = vec![0; n as usize];
        for i in bookings {
            let (f, l, s) = (i[0] as usize - 1, i[1] as usize - 1, i[2]);
            ans[f] += s;
            if l < n as usize - 1 {
                ans[l + 1] -= s;
            }
        }
        for i in 1..n as usize {
            ans[i] += ans[i - 1];
        }
        ans
