Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut res = 0;
        let mut dp = 0;
        for i in 2..nums.len() {
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2] {
                dp += 1;
                res += dp;
            } else {
                dp = 0;
            }
        }
        res

=======
Suggestion 2

        let mut dp = vec![0; nums.len()];
        let mut res = 0;
        for i in 2..nums.len() {
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2] {
                dp[i] = dp[i - 1] + 1;
                res += dp[i];
            }
        }
        res

=======
Suggestion 3

        let mut res = 0;
        let mut cur = 0;
        for i in 2..nums.len() {
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2] {
                cur += 1;
                res += cur;
            } else {
                cur = 0;
            }
        }
        res

=======
Suggestion 4

        let mut result = 0;
        let mut dp = vec![0; nums.len()];
        for i in 2..nums.len() {
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2] {
                dp[i] = dp[i - 1] + 1;
                result += dp[i];
            }
        }
        result

=======
Suggestion 5

        if nums.len() < 3 {
            return 0;
        }
        let mut ans = 0;
        let mut dp = vec![0; nums.len()];
        for i in 2..nums.len() {
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2] {
                dp[i] = 1 + dp[i - 1];
                ans += dp[i];
            }
        }
        ans

=======
Suggestion 6

        if nums.len() < 3 {
            return 0;
        }
        let mut count = 0;
        let mut i = 0;
        let mut j = 1;
        let mut k = 2;
        while k < nums.len() {
            if nums[k] - nums[j] == nums[j] - nums[i] {
                count += 1;
                k += 1;
                j += 1;
                i += 1;
            } else {
                i = j;
                j = k;
                k += 1;
            }
        }
        count
    }
}

=======
Suggestion 7

        let mut last = 0;
        let mut result = 0;
        for i in 2..nums.len() {
            if nums[i] - nums[i-1] == nums[i-1] - nums[i-2] {
                last += 1;
                result += last;
            } else {
                last = 0;
            }
        }
        result

=======
Suggestion 8

        let mut count = 0;
        let mut i = 0;
        while i < nums.len() - 2 {
            let mut j = i + 2;
            let diff = nums[i + 1] - nums[i];
            while j < nums.len() && nums[j] - nums[j - 1] == diff {
                j += 1;
            }
            count += j - i - 2;
            i = j - 1;
        }
        count

=======
Suggestion 9

        let mut count = 0;
        let mut i = 0;
        while i < nums.len() - 2 {
            let mut j = i + 2;
            while j < nums.len() {
                if nums[j] - nums[j - 1] == nums[j - 1] - nums[j - 2] {
                    count += 1;
                    j += 1;
                } else {
                    break;
                }
            }
            i += 1;
        }
        count
