Synthesizing 9/10 solutions

=======

        let mut i = 0;
        let mut j = 0;
        let mut res = vec![];
        while i < first_list.len() && j < second_list.len() {
            let a = first_list[i][0];
            let b = first_list[i][1];
            let c = second_list[j][0];
            let d = second_list[j][1];
            if a <= d && b >= c {
                res.push(vec![a.max(c), b.min(d)]);
            }
            if b < d {
                i += 1;
            } else {
                j += 1;
            }
        }
        res

=======

        let mut res = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < first_list.len() && j < second_list.len() {
            let a = first_list[i][0];
            let b = first_list[i][1];
            let c = second_list[j][0];
            let d = second_list[j][1];
            if a <= d && b >= c {
                res.push(vec![a.max(c), b.min(d)]);
            }
            if b < d {
                i += 1;
            } else {
                j += 1;
            }
        }
        res

=======

        let mut i = 0;
        let mut j = 0;
        let mut res = vec![];
        while i < first_list.len() && j < second_list.len() {
            let start = first_list[i][0].max(second_list[j][0]);
            let end = first_list[i][1].min(second_list[j][1]);
            if start <= end {
                res.push(vec![start, end]);
            }
            if first_list[i][1] < second_list[j][1] {
                i += 1;
            } else {
                j += 1;
            }
        }
        res

=======

        let mut result = Vec::new();
        let mut i = 0;
        let mut j = 0;
        while i < first_list.len() && j < second_list.len() {
            let start = first_list[i][0].max(second_list[j][0]);
            let end = first_list[i][1].min(second_list[j][1]);
            if start <= end {
                result.push(vec![start, end]);
            }
            if first_list[i][1] < second_list[j][1] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result

=======

        let mut result = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < first_list.len() && j < second_list.len() {
            let first = &first_list[i];
            let second = &second_list[j];
            let start = first[0].max(second[0]);
            let end = first[1].min(second[1]);
            if start <= end {
                result.push(vec![start, end]);
            }
            if first[1] < second[1] {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        let mut result = vec![];
        let (mut i, mut j) = (0, 0);
        while i < first_list.len() && j < second_list.len() {
            let (a, b) = (first_list[i][0], first_list[i][1]);
            let (c, d) = (second_list[j][0], second_list[j][1]);
            if a <= c && c <= b {
                result.push(vec![c, b.min(d)]);
            }
            if c <= a && a <= d {
                result.push(vec![a, d.min(b)]);
            }
            if b < d {
                i += 1;
            } else {
                j += 1;
            }
        }
        result
    }
}

=======

        let mut ans = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < first_list.len() && j < second_list.len() {
            let first_start = first_list[i][0];
            let first_end = first_list[i][1];
            let second_start = second_list[j][0];
            let second_end = second_list[j][1];
            let start = first_start.max(second_start);
            let end = first_end.min(second_end);
            if start <= end {
                ans.push(vec![start, end]);
            }
            if first_end < second_end {
                i += 1;
            } else {
                j += 1;
            }
        }
        ans
    }
}

=======

        let mut res = Vec::new();
        let mut i = 0;
        let mut j = 0;
        while i < first_list.len() && j < second_list.len() {
            let f = &first_list[i];
            let s = &second_list[j];
            if f[0] <= s[1] && s[0] <= f[1] {
                res.push(vec![f[0].max(s[0]), f[1].min(s[1])]);
            }
            if f[1] < s[1] {
                i += 1;
            } else {
                j += 1;
            }
        }
        res
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut res = Vec::with_capacity(first_list.len() + second_list.len());
        while i < first_list.len() && j < second_list.len() {
            let a = first_list[i][0];
            let b = first_list[i][1];
            let c = second_list[j][0];
            let d = second_list[j][1];
            if b < c {
                i += 1;
            } else if d < a {
                j += 1;
            } else {
                res.push(vec![a.max(c), b.min(d)]);
                if b < d {
                    i += 1;
                } else {
                    j += 1;
                }
            }
        }
        res
    }
}
