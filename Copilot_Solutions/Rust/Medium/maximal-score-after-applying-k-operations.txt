Synthesizing 4/10 solutions

=======

        let mut nums = nums;
        let mut k = k as usize;
        let mut heap = std::collections::BinaryHeap::new();
        for &num in &nums {
            heap.push(num);
        }
        while k > 0 {
            let top = heap.pop().unwrap();
            if top == 1 {
                break;
            }
            heap.push(top / 3);
            k -= 1;
        }
        heap.iter().map(|&x| x as i64).sum()
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let n = nums.len();
        for i in 0..n {
            res += nums[i] as i64;
        }
        let mut q = std::collections::BinaryHeap::new();
        for i in 0..n - 1 {
            if nums[i] == nums[i + 1] {
                continue;
            }
            q.push(nums[i + 1] - nums[i]);
        }
        for _ in 0..k {
            let t = q.pop().unwrap();
            res += t as i64;
            if t > 1 {
                q.push(t / 3);
            }
        }
        res

=======

        let mut nums = nums;
        let mut k = k;
        let mut sum = 0;
        let mut heap = BinaryHeap::new();
        for n in nums.iter() {
            sum += *n as i64;
            heap.push(*n);
        }
        while k > 0 {
            let n = heap.pop().unwrap();
            sum -= n as i64;
            sum += (n / 3) as i64;
            heap.push(n / 3);
            k -= 1;
        }
        sum

=======

        let mut nums = nums;
        let k = k as usize;
        nums.sort();
        let mut max = 0;
        let mut min = 0;
        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            let mut count = 0;
            for i in 0..nums.len() {
                if nums[i] >= nums[mid] {
                    sum += nums[i] as i64;
                } else {
                    let mut num = nums[i];
                    let mut c = 1;
                    while num < nums[mid] && c <= k - count {
                        num *= 3;
                        c += 1;
                    }
                    if c > k - count {
                        break;
                    }
                    sum += num as i64;
                    count += c;
                }
            }
            if count == k {
                max = sum;
                l = mid + 1;
            } else if count < k {
                max = sum;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        l = 0;
        r = nums.len() - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            let mut count = 0;
            for i in 0..nums.len() {
                if nums[i] >= nums[mid] {
                    sum += nums[i] as i64;
                } else {
                    let mut num = nums[i];
                    let mut c = 1;
                    while num < nums[mid] && c <= k - count {
                        num *= 3;
                        c += 1;
                    }
                    if c > k - count {
                        break;
                    }
                    sum += num as i64;
                    count += c;
                }
            }
            if count == k {
                min = sum;
                r = mid - 1;
            } else if count < k {
                min = sum;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        max - min
    }
}
