Synthesizing 10/10 solutions

=======

        let mut res = String::new();
        let mut i = 0;
        for j in spaces {
            res.push_str(&s[i..j as usize]);
            res.push(' ');
            i = j as usize;
        }
        res.push_str(&s[i..]);
        res
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        for c in s.chars() {
            if i < spaces.len() && spaces[i] == res.len() as i32 {
                res.push(' ');
                i += 1;
            }
            res.push(c);
        }
        res

=======

        let mut res = String::new();
        let mut i = 0;
        for c in s.chars() {
            if i < spaces.len() && spaces[i] == res.len() as i32 {
                res.push(' ');
                i += 1;
            }
            res.push(c);
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        for &space in spaces.iter() {
            res.push_str(&s[i..space as usize]);
            res.push(' ');
            i = space as usize;
        }
        res.push_str(&s[i..]);
        res

=======

        let mut res = String::new();
        let mut j = 0;
        for i in 0..s.len() {
            res.push(s.chars().nth(i).unwrap());
            if j < spaces.len() && i == spaces[j] as usize {
                res.push(' ');
                j += 1;
            }
        }
        res

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut spaces = spaces;
        spaces.reverse();
        for i in spaces {
            s.insert(i as usize, ' ');
        }
        s.into_iter().collect::<String>()

=======

        let mut res = String::new();
        let mut i = 0;
        for &space in spaces.iter() {
            res += &s[i..space as usize];
            res += " ";
            i = space as usize;
        }
        res += &s[i..];
        res

=======

        let mut res = String::new();
        let mut last = 0;
        for i in spaces {
            let i = i as usize;
            res.push_str(&s[last..i]);
            res.push(' ');
            last = i;
        }
        res.push_str(&s[last..]);
        res

=======

        let mut result = String::new();
        let mut i = 0;
        for space in spaces {
            let space = space as usize;
            result.push_str(&s[i..space]);
            result.push(' ');
            i = space;
        }
        result.push_str(&s[i..]);
        result

=======

        let mut ans = String::new();
        let mut i = 0;
        let mut j = 0;
        for c in s.chars() {
            if i < spaces.len() && spaces[i] == j {
                ans.push(' ');
                i += 1;
            }
            ans.push(c);
            j += 1;
        }
        ans
