Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut max = 0;
        for i in 0..nums.len() {
            if i > max {
                return false;
            }
            max = std::cmp::max(max, i + nums[i] as usize);
        }
        true
    }
}

=======
Suggestion 2

        let mut max = 0;
        for i in 0..nums.len() {
            if i > max {
                return false;
            }
            max = std::cmp::max(max, i + nums[i] as usize);
        }
        return true;

=======
Suggestion 3

        let mut max = 0;
        for i in 0..nums.len() {
            if i > max {
                return false;
            }
            max = std::cmp::max(max, nums[i] as usize + i);
        }
        true
    }
}

=======
Suggestion 4

        let mut max_pos = 0;
        for i in 0..nums.len() {
            if i > max_pos {
                return false;
            }
            max_pos = max_pos.max(i + nums[i] as usize);
        }
        true
    }
}

=======
Suggestion 5

        let mut max = 0;
        for i in 0..nums.len() {
            if i <= max {
                max = max.max(i + nums[i] as usize);
                if max >= nums.len() - 1 {
                    return true;
                }
            }
        }
        false
    }
}

=======
Suggestion 6

        let mut max = 0;
        for (i, n) in nums.iter().enumerate() {
            if i > max {
                return false;
            }
            max = max.max(i + *n as usize);
        }
        true
    }
}

=======
Suggestion 7

        let mut max = 0;
        for (i, &n) in nums.iter().enumerate() {
            if i > max {
                return false;
            }
            max = max.max(i + n as usize);
        }
        true

=======
Suggestion 8

        let mut far = 0;
        for i in 0..nums.len() {
            if far < i {
                return false;
            }
            far = far.max(i + nums[i] as usize);
        }
        true
    }
}

=======
Suggestion 9

        let mut max = 0;
        let n = nums.len();
        for i in 0..n {
            if i > max {
                return false;
            }
            max = max.max(nums[i] as usize + i);
        }
        true
    }
}

=======
Suggestion 10

        let mut pos = 0;
        let mut max = 0;
        while pos < nums.len() {
            if pos > max {
                return false;
            }
            max = std::cmp::max(max, pos + nums[pos] as usize);
            if max >= nums.len() - 1 {
                return true;
            }
            pos += 1;
        }
        false
    }
}
