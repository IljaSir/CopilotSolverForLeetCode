Synthesizing 10/10 solutions

=======

        let mut res: Vec<i32> = vec![0; boxes.len()];
        let mut sum = 0;
        let mut cnt = 0;
        for i in 0..boxes.len() {
            res[i] += sum;
            cnt += boxes.chars().nth(i).unwrap() as i32 - '0' as i32;
            sum += cnt;
        }
        sum = 0;
        cnt = 0;
        for i in (0..boxes.len()).rev() {
            res[i] += sum;
            cnt += boxes.chars().nth(i).unwrap() as i32 - '0' as i32;
            sum += cnt;
        }
        res

=======

        let mut res = vec![0; boxes.len()];
        let mut sum = 0;
        let mut count = 0;
        for (i, c) in boxes.chars().enumerate() {
            res[i] += sum;
            count += c as i32 - '0' as i32;
            sum += count;
        }
        sum = 0;
        count = 0;
        for (i, c) in boxes.chars().rev().enumerate() {
            let j = boxes.len() - i - 1;
            res[j] += sum;
            count += c as i32 - '0' as i32;
            sum += count;
        }
        res

=======

        let mut ret = vec![0; boxes.len()];
        let mut sum = 0;
        let mut cnt = 0;
        for i in 0..boxes.len() {
            ret[i] += sum;
            cnt += boxes.chars().nth(i).unwrap() as i32 - '0' as i32;
            sum += cnt;
        }
        sum = 0;
        cnt = 0;
        for i in (0..boxes.len()).rev() {
            ret[i] += sum;
            cnt += boxes.chars().nth(i).unwrap() as i32 - '0' as i32;
            sum += cnt;
        }
        ret

=======

        let mut res = vec![0; boxes.len()];
        let mut left = 0;
        let mut right = 0;
        let mut count = 0;
        for i in 1..boxes.len() {
            if boxes.chars().nth(i-1).unwrap() == '1' {
                left += 1;
            }
            count += left;
            res[i] += count;
        }
        count = 0;
        for i in (0..boxes.len()-1).rev() {
            if boxes.chars().nth(i+1).unwrap() == '1' {
                right += 1;
            }
            count += right;
            res[i] += count;
        }
        res

=======

        let mut result = vec![0; boxes.len()];
        let mut left = 0;
        let mut right = 0;
        let mut left_cost = 0;
        let mut right_cost = 0;
        for i in 0..boxes.len() {
            if boxes.as_bytes()[i] == b'1' {
                left_cost += left;
                right += 1;
            }
            if boxes.as_bytes()[boxes.len() - 1 - i] == b'1' {
                right_cost += right;
                left += 1;
            }
            result[i] += left_cost;
            result[boxes.len() - 1 - i] += right_cost;
        }
        result

=======

        let mut res = vec![0; boxes.len()];
        let mut count = 0;
        let mut left = 0;
        let mut right = 0;
        for i in 0..boxes.len() {
            if boxes.as_bytes()[i] == b'1' {
                count += 1;
                right += i as i32;
            }
        }
        for i in 0..boxes.len() {
            res[i] = right - left;
            if boxes.as_bytes()[i] == b'1' {
                count -= 1;
                left += i as i32 + 1;
                right -= count;
            }
        }
        res

=======

        let mut r = vec![0; boxes.len()];
        let mut l = vec![0; boxes.len()];
        let mut sum = 0;
        let mut cnt = 0;
        for i in 0..boxes.len() {
            l[i] = sum;
            sum += cnt;
            cnt += (boxes.chars().nth(i).unwrap() as u8 - '0' as u8) as i32;
        }
        sum = 0;
        cnt = 0;
        for i in (0..boxes.len()).rev() {
            r[i] = sum;
            sum += cnt;
            cnt += (boxes.chars().nth(i).unwrap() as u8 - '0' as u8) as i32;
        }
        let mut ans = vec![0; boxes.len()];
        for i in 0..boxes.len() {
            ans[i] = l[i] + r[i];
        }
        ans
    }
}

=======

        let mut ans = vec![0; boxes.len()];
        let mut l = 0;
        let mut r = 0;
        let mut b = 0;
        for i in 0..boxes.len() {
            ans[i] += r;
            if boxes.as_bytes()[i] == b'1' {
                l += 1;
                r += l;
            }
        }
        l = 0;
        r = 0;
        b = 0;
        for i in (0..boxes.len()).rev() {
            ans[i] += r;
            if boxes.as_bytes()[i] == b'1' {
                l += 1;
                r += l;
            }
        }
        ans

=======

        let n = boxes.len();
        let mut res = vec![0; n];

        let mut cnt = 0;
        let mut sum = 0;
        for i in 0..n {
            if boxes.as_bytes()[i] == b'1' {
                cnt += 1;
                sum += i as i32;
            }
            res[i] = sum;
        }

        cnt = 0;
        sum = 0;
        for i in (0..n).rev() {
            if boxes.as_bytes()[i] == b'1' {
                cnt += 1;
                sum += (n - i - 1) as i32;
            }
            res[i] += sum - cnt * (n - i - 1) as i32;
        }

        res

=======

        let mut res = Vec::with_capacity(boxes.len());
        let mut sum = 0;
        let mut cnt = 0;
        let mut i = 0;
        for c in boxes.chars() {
            res.push(sum);
            if c == '1' {
                cnt += 1;
                sum += cnt;
            }
            i += 1;
        }
        sum = 0;
        cnt = 0;
        i = boxes.len() - 1;
        for c in boxes.chars().rev() {
            res[i] += sum;
            if c == '1' {
                cnt += 1;
                sum += cnt;
            }
            i -= 1;
        }
        res
