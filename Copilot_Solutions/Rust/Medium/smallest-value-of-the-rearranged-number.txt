Synthesizing 10/10 solutions

=======

        if num == 0 {
            return 0;
        }
        let mut num = num;
        let mut sign = 1;
        if num < 0 {
            sign = -1;
            num = -num;
        }
        let mut digits = Vec::new();
        while num > 0 {
            digits.push(num % 10);
            num /= 10;
        }
        digits.sort();
        let mut ans = 0;
        for d in digits {
            ans = ans * 10 + d;
        }
        ans * sign

=======

        let mut num = num;
        let mut negative = false;
        if num < 0 {
            negative = true;
            num = -num;
        }
        let mut digits = vec![];
        while num > 0 {
            digits.push(num % 10);
            num /= 10;
        }
        digits.sort();
        let mut result = 0;
        for i in digits.iter() {
            result = result * 10 + i;
        }
        if negative {
            -result
        } else {
            result
        }

=======

        let mut s = num.abs().to_string().chars().collect::<Vec<char>>();
        s.sort();
        let mut res = String::new();
        for i in 0..s.len() {
            if s[i] != '0' {
                res.push(s[i]);
                res.push_str(&s[i+1..].iter().collect::<String>());
                break;
            }
        }
        if num < 0 {
            -(res.parse::<i64>().unwrap())
        } else {
            res.parse::<i64>().unwrap()
        }

=======

        let mut num = num;
        let mut negative = false;
        if num < 0 {
            negative = true;
            num = -num;
        }
        let mut num = num.to_string();
        num.chars().collect::<Vec<char>>().sort();
        let mut num = num.parse::<i64>().unwrap();
        if negative {
            num = -num;
        }
        num
    }
}

=======

        let mut v: Vec<char> = num.abs().to_string().chars().collect();
        v.sort();
        let mut ret = String::new();
        if num < 0 {
            ret.push('-');
        }
        for c in v {
            if c == '0' && ret.is_empty() {
                continue;
            }
            ret.push(c);
        }
        ret.parse::<i64>().unwrap()
    }
}

=======

        let mut s = num.to_string().chars().collect::<Vec<char>>();
        s.sort();
        let mut r = String::new();
        for i in 0..s.len() {
            if s[i] != '0' {
                r.push(s[i]);
                s.remove(i);
                break;
            }
        }
        r.push_str(&s.iter().collect::<String>());
        r.parse::<i64>().unwrap()
    }
}

=======

        let mut num = num.to_string();
        let mut num = num.chars().collect::<Vec<char>>();
        num.sort();
        let mut num = num.iter().collect::<String>();
        num = num.trim_start_matches('0').to_string();
        if num.len() == 0 {
            num = "0".to_string();
        }
        num.parse::<i64>().unwrap()

=======

        let mut num = num.to_string();
        let mut num = num.chars().collect::<Vec<char>>();
        num.sort();
        num.iter().collect::<String>().parse::<i64>().unwrap()

=======

        let mut v = num.abs().to_string().chars().collect::<Vec<char>>();
        v.sort();
        let mut r = String::new();
        for c in v {
            r.push(c);
        }
        let mut s = r.parse::<i64>().unwrap();
        if num < 0 {
            s = -s;
        }
        s

=======

        let mut res = 0;
        let mut num = num;
        if num < 0 {
            num = -num;
            res = -res;
        }
        let mut a: Vec<i32> = vec![];
        while num > 0 {
            a.push((num % 10) as i32);
            num /= 10;
        }
        a.sort();
        for i in a {
            res = res * 10 + i as i64;
        }
        res
    }
}
