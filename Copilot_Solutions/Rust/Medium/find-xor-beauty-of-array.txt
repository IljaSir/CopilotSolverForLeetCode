Synthesizing 8/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                for k in 0..nums.len() {
                    ans ^= ((nums[i] | nums[j]) & nums[k]);
                }
            }
        }
        ans
    }
}

=======

        let mut ans = 0;
        for i in 0..32 {
            let mut cnt = 0;
            for &x in &nums {
                if x & (1 << i) != 0 {
                    cnt += 1;
                }
            }
            ans |= (cnt * (nums.len() - cnt) % 2) << i;
        }
        ans

=======

        let mut res = 0;
        for i in 0..32 {
            let mut ones = 0;
            let mut zeros = 0;
            for &n in &nums {
                if n & (1 << i) == 0 {
                    zeros += 1;
                } else {
                    ones += 1;
                }
            }
            res |= (ones * zeros) & 1 << i;
        }
        res

=======

        let mut ans = 0;
        for i in 0..32 {
            let mut cnt = 0;
            for num in nums.iter() {
                let b = (num >> i) & 1;
                if b == 1 {
                    cnt += 1;
                }
            }
            ans ^= cnt & 1;
        }
        ans

=======

        let mut res = 0;
        let mut count = vec![0; 31];
        let mut mask = 1;
        for i in 0..31 {
            for &num in &nums {
                if num & mask != 0 {
                    count[i] += 1;
                }
            }
            mask <<= 1;
        }
        for i in 0..31 {
            res |= (count[i] * (nums.len() - count[i]) % 2) << i;
        }
        res
