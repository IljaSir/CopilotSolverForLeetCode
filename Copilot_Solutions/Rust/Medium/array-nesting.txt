Synthesizing 8/10 solutions

=======
Suggestion 1

        let mut visited = vec![false; nums.len()];
        let mut max = 0;
        for i in 0..nums.len() {
            if !visited[i] {
                let mut count = 0;
                let mut j = i;
                while !visited[j] {
                    visited[j] = true;
                    j = nums[j] as usize;
                    count += 1;
                }
                max = max.max(count);
            }
        }
        max as i32

=======
Suggestion 2

        let mut visited = vec![false; nums.len()];
        let mut res = 0;
        for i in 0..nums.len() {
            if visited[i] {
                continue;
            }
            let mut j = i;
            let mut count = 0;
            while !visited[j] {
                visited[j] = true;
                j = nums[j] as usize;
                count += 1;
            }
            res = res.max(count);
        }
        res

=======
Suggestion 3

        let mut visited = vec![false; nums.len()];
        let mut max = 0;
        for i in 0..nums.len() {
            if visited[i] {
                continue;
            }
            let mut j = i;
            let mut count = 0;
            while !visited[j] {
                visited[j] = true;
                j = nums[j] as usize;
                count += 1;
            }
            max = max.max(count);
        }
        max

=======
Suggestion 4

        let mut visited = vec![false; nums.len()];
        let mut max_len = 0;
        for i in 0..nums.len() {
            if visited[i] {
                continue;
            }
            let mut len = 0;
            let mut j = i;
            while !visited[j] {
                visited[j] = true;
                j = nums[j] as usize;
                len += 1;
            }
            max_len = max_len.max(len);
        }
        max_len

=======
Suggestion 5

        let mut max = 0;
        let mut visited = vec![false; nums.len()];
        for i in 0..nums.len() {
            if visited[i] {
                continue;
            }
            let mut j = i;
            let mut count = 0;
            while !visited[j] {
                visited[j] = true;
                j = nums[j] as usize;
                count += 1;
            }
            if count > max {
                max = count;
            }
        }
        max

=======
Suggestion 6

        let mut visited = vec![false; nums.len()];
        let mut max = 0;
        for i in 0..nums.len() {
            if visited[i] {
                continue;
            }
            let mut count = 1;
            let mut j = nums[i] as usize;
            while j != i {
                j = nums[j] as usize;
                count += 1;
                visited[j] = true;
            }
            if count > max {
                max = count;
            }
        }
        max as i32

=======
Suggestion 7

        let mut visited = vec![false; nums.len()];
        let mut max_len = 0;
        for i in 0..nums.len() {
            if visited[i] { continue; }
            let mut len = 0;
            let mut j = i;
            while !visited[j] {
                visited[j] = true;
                j = nums[j] as usize;
                len += 1;
            }
            max_len = max_len.max(len);
        }
        max_len as i32

=======
Suggestion 8

        
    }
}
