Synthesizing 4/10 solutions

=======

        let m = mat.len();
        let n = mat[0].len();
        let mut left = 0;
        let mut right = n - 1;
        while left < right {
            let mid = (left + right) / 2;
            let mut max_i = 0;
            for i in 0..m {
                if mat[i][mid] > mat[max_i][mid] {
                    max_i = i;
                }
            }
            if mat[max_i][mid] < mat[max_i][mid + 1] {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        let mut max_i = 0;
        for i in 0..m {
            if mat[i][left] > mat[max_i][left] {
                max_i = i;
            }
        }
        vec![max_i as i32, left as i32]

=======

        let m = mat.len();
        let n = mat[0].len();
        let mut l = 0;
        let mut r = n - 1;
        while l <= r {
            let mid = (l + r) / 2;
            let mut max = 0;
            let mut idx = 0;
            for i in 0..m {
                if mat[i][mid] > max {
                    max = mat[i][mid];
                    idx = i;
                }
            }
            if mat[idx][mid] > mat[idx][mid + 1] && mat[idx][mid] > mat[idx][mid - 1] {
                return vec![idx as i32, mid as i32];
            } else if mat[idx][mid] < mat[idx][mid + 1] {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        vec![]

=======

        
    }
}

=======

        let (m, n) = (mat.len(), mat[0].len());
        let mut left = 0;
        let mut right = n;
        let mut mid;
        let mut max_i = 0;
        let mut max_j = 0;
        while left < right {
            mid = (left + right) / 2;
            let mut max = 0;
            for i in 0..m {
                if mat[i][mid] > max {
                    max = mat[i][mid];
                    max_i = i;
                    max_j = mid;
                }
            }
            if max_j > 0 && mat[max_i][max_j - 1] > max {
                right = mid;
            } else if max_j < n - 1 && mat[max_i][max_j + 1] > max {
                left = mid + 1;
            } else {
                break;
            }
        }
        vec![max_i as i32, max_j as i32]
