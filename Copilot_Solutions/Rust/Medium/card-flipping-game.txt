Synthesizing 10/10 solutions

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                set.insert(fronts[i]);
            }
        }
        let mut ans = std::i32::MAX;
        for i in 0..fronts.len() {
            if fronts[i] != backs[i] {
                if !set.contains(&fronts[i]) {
                    ans = ans.min(fronts[i]);
                }
                if !set.contains(&backs[i]) {
                    ans = ans.min(backs[i]);
                }
            }
        }
        if ans == std::i32::MAX {
            return 0;
        }
        ans

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                set.insert(fronts[i]);
            }
        }
        let mut min = 2001;
        for i in 0..fronts.len() {
            if !set.contains(&fronts[i]) {
                min = min.min(fronts[i]);
            }
            if !set.contains(&backs[i]) {
                min = min.min(backs[i]);
            }
        }
        if min == 2001 { 0 } else { min }

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                set.insert(fronts[i]);
            }
        }
        let mut ans = 2001;
        for i in 0..fronts.len() {
            if !set.contains(&fronts[i]) {
                ans = ans.min(fronts[i]);
            }
            if !set.contains(&backs[i]) {
                ans = ans.min(backs[i]);
            }
        }
        if ans == 2001 {
            0
        } else {
            ans
        }
    }
}

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                set.insert(fronts[i]);
            }
        }
        let mut res = 2000;
        for i in 0..fronts.len() {
            if !set.contains(&fronts[i]) {
                res = std::cmp::min(res, fronts[i]);
            }
            if !set.contains(&backs[i]) {
                res = std::cmp::min(res, backs[i]);
            }
        }
        if res == 2000 {
            0
        } else {
            res
        }

=======

        let mut set = std::collections::HashSet::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                set.insert(fronts[i]);
            }
        }
        let mut min = 2000;
        for i in 0..fronts.len() {
            if !set.contains(&fronts[i]) {
                min = min.min(fronts[i]);
            }
            if !set.contains(&backs[i]) {
                min = min.min(backs[i]);
            }
        }
        if min == 2000 {
            return 0;
        }
        min

=======

        let mut good = std::collections::HashSet::new();
        let n = fronts.len();
        for i in 0..n {
            if fronts[i] == backs[i] {
                good.insert(fronts[i]);
            }
        }
        let mut ans = 0;
        for i in 0..n {
            if !good.contains(&fronts[i]) {
                if ans == 0 {
                    ans = fronts[i];
                } else {
                    ans = ans.min(fronts[i]);
                }
            }
            if !good.contains(&backs[i]) {
                if ans == 0 {
                    ans = backs[i];
                } else {
                    ans = ans.min(backs[i]);
                }
            }
        }
        ans

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                map.insert(fronts[i], 1);
            }
        }
        for i in 0..fronts.len() {
            if map.contains_key(&fronts[i]) {
                continue;
            }
            if res == 0 || fronts[i] < res {
                res = fronts[i];
            }
        }
        for i in 0..backs.len() {
            if map.contains_key(&backs[i]) {
                continue;
            }
            if res == 0 || backs[i] < res {
                res = backs[i];
            }
        }
        res

=======

        let mut f = fronts.clone();
        let mut b = backs.clone();
        let mut ans = 2001;
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                f[i] = 0;
                b[i] = 0;
            }
        }
        for i in 0..fronts.len() {
            if f[i] != 0 {
                ans = ans.min(f[i]);
            }
            if b[i] != 0 {
                ans = ans.min(b[i]);
            }
        }
        if ans == 2001 {
            return 0;
        }
        ans

=======

        let mut set: std::collections::HashSet<i32> = fronts.iter().cloned().collect();
        for v in backs.iter() {
            if set.contains(v) {
                set.remove(v);
            }
        }
        if set.is_empty() {
            return 0;
        }
        *set.iter().min().unwrap()

=======

        let mut min = 2001;
        let mut f: Vec<i32> = Vec::new();
        let mut b: Vec<i32> = Vec::new();
        for i in 0..fronts.len() {
            if fronts[i] == backs[i] {
                f.push(fronts[i]);
                b.push(backs[i]);
            }
        }
        for i in 0..fronts.len() {
            if !f.contains(&fronts[i]) && fronts[i] < min {
                min = fronts[i];
            }
            if !b.contains(&backs[i]) && backs[i] < min {
                min = backs[i];
            }
        }
        if min == 2001 {
            return 0;
        }
        min
