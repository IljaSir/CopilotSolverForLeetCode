Synthesizing 5/10 solutions

=======

        let mut res = vec![vec![0; col_sum.len()]; row_sum.len()];
        for i in 0..row_sum.len() {
            for j in 0..col_sum.len() {
                res[i][j] = std::cmp::min(row_sum[i], col_sum[j]);
                if res[i][j] == row_sum[i] {
                    break;
                }
            }
        }
        for i in 0..row_sum.len() {
            for j in 0..col_sum.len() {
                if res[i][j] == col_sum[j] {
                    break;
                }
            }
        }
        res

=======

        let mut res: Vec<Vec<i32>> = vec![vec![0; col_sum.len()]; row_sum.len()];
        for i in 0..row_sum.len() {
            for j in 0..col_sum.len() {
                res[i][j] = row_sum[i].min(col_sum[j]);
                row_sum[i] -= res[i][j];
                col_sum[j] -= res[i][j];
            }
        }
        res

=======

        let r = row_sum.len();
        let c = col_sum.len();
        let mut ans = vec![vec![0; c]; r];
        for i in 0..r {
            for j in 0..c {
                ans[i][j] = row_sum[i].min(col_sum[j]);
                row_sum[i] -= ans[i][j];
                col_sum[j] -= ans[i][j];
            }
        }
        ans

=======

        let mut res = vec![vec![0; col_sum.len()]; row_sum.len()];
        for (i, r) in row_sum.iter().enumerate() {
            for (j, c) in col_sum.iter().enumerate() {
                res[i][j] = std::cmp::min(*r, *c);
            }
        }
        for (i, r) in row_sum.iter().enumerate() {
            for (j, c) in col_sum.iter().enumerate() {
                let diff = *r - res[i][j];
                if diff > 0 {
                    res[i][j] += diff;
                }
            }
        }
        res

=======

        let mut matrix: Vec<Vec<i32>> = Vec::with_capacity(row_sum.len());
        let mut col_sum = col_sum;
        for row in row_sum {
            let mut row_vec: Vec<i32> = Vec::with_capacity(col_sum.len());
            for (i, col) in col_sum.iter().enumerate() {
                let min = std::cmp::min(row, *col);
                row_vec.push(min);
                col_sum[i] -= min;
            }
            matrix.push(row_vec);
        }
        matrix
    }
}
