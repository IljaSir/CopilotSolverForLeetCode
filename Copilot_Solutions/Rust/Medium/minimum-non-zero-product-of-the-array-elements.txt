Synthesizing 8/10 solutions

=======

        let m = 1_000_000_007;
        let n = (1 << p) - 1;
        let a = (1 << (p - 1)) - 1;
        let b = (1 << (p - 1)) + (1 << (p - 2));
        let c = (n - a) % m;
        let d = (n - b) % m;
        let e = (n - 1) % m;
        let f = (n - 2) % m;
        let g = (n - 3) % m;
        let h = (n - 4) % m;
        let mut x = 1;
        for _ in 0..(p - 1) {
            x = (x * x) % m;
        }
        let y = (x * x) % m;
        let z = (x * y) % m;
        let mut r = (a * b) % m;
        r = (r * c) % m;
        r = (r * d) % m;
        r = (r * e) % m;
        r = (r * f) % m;
        r = (r * g) % m;
        r = (r * h) % m;
        r = (r * x) % m;
        r = (r * y) % m;
        r = (r * z) % m;
        r

=======

        let m = 1_000_000_007;
        let mut ans = 1;
        for i in 0..p {
            ans = ans * 2 % m;
        }
        ans = (ans - 2) % m;
        ans = ans * pow(ans as i64, (1 << p) - 2, m as i64) as i32 % m;
        ans as i32
    }
}

=======

        let p = p as u64;
        let modu = 1_000_000_007;
        let max = (1 << p) - 1;
        let half = 1 << (p - 1);
        let mut res = max;
        res *= max - 1;
        res %= modu;
        res *= half.pow((max - 1) as u32);
        res %= modu;
        res as i32

=======

        let modu = 1_000_000_007;
        let mut res = 1;
        for i in 0..p {
            res = (res * 2) % modu;
        }
        let mut res = (res - 2) % modu;
        let mut a = 1;
        for i in 0..p-1 {
            a = (a * 2) % modu;
        }
        res = (res * a) % modu;
        res

=======

        let m = 1_000_000_007;
        let n = 1 << p;
        let n = n as i64;
        let n = n - 1;
        let n = n as i32;
        let mut res = 1;
        let mut i = 0;
        while i < p / 2 {
            res = (res * (n - (1 << i))) % m;
            i += 1;
        }
        (res * res) % m

=======

        let modu = 1_000_000_007;
        let p = p as u64;
        let mut ans = 1;
        for i in 0..(p - 1) {
            ans = ans * (1 << p - 1 - i) % modu;
        }
        ans = ans * (ans - 1) % modu;
        ans as i32

=======

        let modu = 1000000007;
        let mut ans = 1;
        let mut p = p as u64;
        while p > 1 {
            ans = ans * (2u64.pow(p) - 1) % modu;
            ans = ans * 2u64.pow(p - 1) % modu;
            p -= 1;
        }
        ans as i32

=======

        let mod_num = 1000000007;
        let max_num = 1 << p;
        let max_num = max_num - 1;
        let half_num = max_num >> 1;
        let ans = (half_num % mod_num) * (half_num + 1) % mod_num;
        let ans = ans * pow_mod(ans - 1, max_num - 2, mod_num) % mod_num;
        ans as i32
    }
}
