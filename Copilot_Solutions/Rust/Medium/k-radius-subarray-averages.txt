Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut res = vec![-1; n];
        let mut sum = 0;
        for i in 0..n {
            if i <= k as usize {
                sum += nums[i];
                if i == k as usize {
                    res[i - k as usize] = sum / (k + 1);
                }
            } else {
                sum += nums[i] - nums[i - k as usize - 1];
                res[i - k as usize] = sum / (k + k + 1);
            }
        }
        res
    }
}

=======

        let n = nums.len();
        let k = k as usize;
        let mut ans = vec![-1; n];
        let mut sum = 0;
        let mut count = 0;
        for i in 0..n {
            sum += nums[i];
            count += 1;
            if count > k {
                sum -= nums[i - k];
                count -= 1;
            }
            if count == k {
                ans[i - k + 1] = sum / count as i32;
            }
        }
        ans
    }
}

=======

        let mut res = vec![-1; nums.len()];
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if i >= k as usize {
                sum -= nums[i - k as usize];
            }
            if i >= k as usize - 1 {
                res[i - k as usize + 1] = sum / k;
            }
        }
        res
    }
}

=======

        let mut avgs = vec![-1; nums.len()];
        let mut sum = 0;
        let mut count = 0;
        let k = k as usize;
        for i in 0..nums.len() {
            if i < k {
                sum += nums[i];
                count += 1;
            } else {
                sum -= nums[i - k];
                count -= 1;
            }
            if i >= k - 1 {
                avgs[i - k + 1] = sum / count as i32;
            }
        }
        sum = 0;
        count = 0;
        for i in (0..nums.len()).rev() {
            if i >= nums.len() - k {
                sum += nums[i];
                count += 1;
            } else {
                sum -= nums[i + k];
                count -= 1;
            }
            if i < nums.len() - k {
                avgs[i + k] += sum / count as i32;
                avgs[i + k] /= 2;
            }
        }
        avgs
    }
}

=======

        let mut avgs = vec![-1; nums.len()];
        let mut sum = 0;
        let mut count = 0;
        let k = k as usize;
        for i in 0..nums.len() {
            if i <= k {
                sum += nums[i];
                count += 1;
            }
            if i > k {
                sum += nums[i] - nums[i - k - 1];
            }
            if i >= k {
                avgs[i - k] = sum / count as i32;
            }
        }
        avgs
    }
}

=======

        let mut res = vec![-1; nums.len()];
        let mut sum = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if i > k as usize {
                sum -= nums[i - k as usize - 1];
                count -= 1;
            }
            if i + k as usize < nums.len() {
                sum += nums[i + k as usize];
                count += 1;
            }
            if count > 0 {
                res[i] = sum / count;
            }
        }
        res

=======

        let mut sum = 0;
        let mut res = vec![-1; nums.len()];
        for i in 0..nums.len() as i32 {
            if i <= k {
                sum += nums[i as usize];
                if i == k {
                    res[i as usize] = sum / (i + 1);
                }
            } else if i >= nums.len() as i32 - k {
                sum -= nums[(i - k - 1) as usize];
                if i == nums.len() as i32 - k {
                    res[i as usize] = sum / (k * 2 + 1);
                }
            } else {
                sum -= nums[(i - k - 1) as usize];
                sum += nums[(i + k) as usize];
                res[i as usize] = sum / (k * 2 + 1);
            }
        }
        res
    }
}

=======

        let mut result = vec![];
        let k = k as usize;
        for i in 0..nums.len() {
            let mut sum = 0;
            let mut count = 0;
            for j in (0..k).rev() {
                if i >= j {
                    sum += nums[i - j];
                    count += 1;
                } else {
                    break;
                }
            }
            for j in 0..k {
                if i + j < nums.len() {
                    sum += nums[i + j];
                    count += 1;
                } else {
                    break;
                }
            }
            if count > 1 {
                result.push(sum / count as i32);
            } else {
                result.push(-1);
            }
        }
        result
    }
}

=======

        let mut res = vec![];
        let mut sum = 0;
        let mut n = nums.len();
        for i in 0..n {
            if i > k as usize {
                sum -= nums[i - k as usize - 1];
            }
            if i + k as usize < n {
                sum += nums[i + k as usize];
            }
            if i >= k as usize {
                res.push(sum / (2 * k + 1));
            } else {
                res.push(-1);
            }
        }
        res
    }
}

=======

        let mut avgs = vec![];
        let mut i = 0;
        let mut j = 0;
        let mut sum = 0;
        let mut c = 0;
        while j < nums.len() {
            if j - i > k as usize {
                sum -= nums[i];
                c -= 1;
                i += 1;
            }
            sum += nums[j];
            c += 1;
            j += 1;
            if j - i > k as usize {
                avgs.push(sum / c);
            } else {
                avgs.push(-1);
            }
        }
        avgs
    }
}
