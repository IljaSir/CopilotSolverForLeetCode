Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for i in 0..nums.len() {
            if (nums[i] - i as i32).abs() > 1 {
                return false;
            }
        }
        true

=======

        let mut max = 0;
        for i in 0..nums.len() - 2 {
            max = std::cmp::max(max, nums[i]);
            if max > nums[i + 2] {
                return false;
            }
        }
        true

=======

        let mut max = 0;
        for i in 0..nums.len() - 2 {
            max = max.max(nums[i]);
            if max > nums[i + 2] {
                return false;
            }
        }
        true

=======

        let mut max = nums[0];
        for i in 2..nums.len() {
            if max > nums[i] {
                return false;
            }
            max = max.max(nums[i - 1]);
        }
        true
    }
}

=======

        let mut max = -1;
        for i in 0..nums.len() - 2 {
            max = std::cmp::max(max, nums[i]);
            if max > nums[i + 2] {
                return false;
            }
        }
        true

=======

        let mut max = nums[0];
        for i in 2..nums.len() {
            if max > nums[i] {
                return false;
            }
            max = std::cmp::max(max, nums[i - 1]);
        }
        true

=======

        let mut local = 0;
        let mut global = 0;
        for i in 0..nums.len() {
            if i > 0 && nums[i - 1] > nums[i] {
                local += 1;
            }
            for j in i + 1..nums.len() {
                if nums[i] > nums[j] {
                    global += 1;
                }
            }
        }
        local == global

=======

        let mut min = std::i32::MAX;
        for i in (0..nums.len()).rev() {
            if nums[i] < min {
                min = nums[i];
            } else if nums[i] > min {
                return false;
            }
        }
        true
