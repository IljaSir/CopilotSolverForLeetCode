Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut n = n as i64;
        let mut digit = 1;
        let mut start = 1;
        let mut count = 9;
        while n > count {
            n -= count;
            digit += 1;
            start *= 10;
            count = digit * start * 9;
        }
        let num = start + (n - 1) / digit;
        let idx = (n - 1) % digit;
        let mut num = num.to_string();
        num.chars().nth(idx as usize).unwrap().to_digit(10).unwrap() as i32

=======
Suggestion 2

        let mut n = n as usize;
        let mut len = 1;
        let mut count = 9;
        let mut start = 1;
        while n > len * count {
            n -= len * count;
            len += 1;
            count *= 10;
            start *= 10;
        }
        start += (n - 1) / len;
        let s = start.to_string();
        (s.chars().nth((n - 1) % len).unwrap() as u8 - '0' as u8) as i32

=======
Suggestion 3

        let mut n = n as i64;
        let mut base = 9;
        let mut digits = 1;
        while n > base * digits as i64 {
            n -= base * digits as i64;
            base *= 10;
            digits += 1;
        }
        let num = 10_i64.pow(digits as u32 - 1) + (n - 1) / digits as i64;
        let i = (n - 1) % digits as i64;
        (num / 10_i64.pow(i as u32) % 10) as i32

=======
Suggestion 4

        let mut n = n as usize;
        let mut digit = 1;
        let mut start = 1;
        let mut count = 9;
        while n > count {
            n -= count;
            digit += 1;
            start *= 10;
            count = 9 * start * digit;
        }
        let num = start + (n - 1) / digit;
        let mut res = num.to_string().chars().nth((n - 1) % digit).unwrap();
        res.to_digit(10).unwrap() as i32

=======
Suggestion 5

        let mut n = n as usize;
        let mut base = 9;
        let mut digits = 1;
        while n > base * digits {
            n -= base * digits;
            base *= 10;
            digits += 1;
        }
        let num = base / 9 + (n - 1) / digits;
        let idx = (n - 1) % digits;
        let mut num = num.to_string();
        num.chars().nth(idx).unwrap().to_digit(10).unwrap() as i32

=======
Suggestion 6

        let mut n = n as i64;
        let mut i = 1;
        let mut k = 9;
        while n > i * k {
            n -= i * k;
            i += 1;
            k *= 10;
        }
        let mut num = 1;
        for _ in 0..i - 1 {
            num *= 10;
        }
        num += (n - 1) / i;
        let mut rem = (n - 1) % i;
        while rem < i - 1 {
            num /= 10;
            rem += 1;
        }
        (num % 10) as i32

=======
Suggestion 7

        let mut n = n as i64;
        let mut base = 1;
        let mut digit = 1;
        while n - (9 * base * digit) > 0 {
            n -= 9 * base * digit;
            base *= 10;
            digit += 1;
        }
        let num = base + (n - 1) / digit;
        let mut res = (num / base.pow((n - 1) % digit) % 10) as i32;
        res

=======
Suggestion 8

        let mut n = n as u64;
        let mut i = 1;
        let mut base = 1;
        while n > 9 * base * i {
            n -= 9 * base * i;
            base *= 10;
            i += 1;
        }
        let num = base + (n - 1) / i;
        let mut s = num.to_string();
        let i = (n - 1) % i;
        s.chars().nth(i as usize).unwrap().to_digit(10).unwrap() as i32

=======
Suggestion 9

        
    }
}
