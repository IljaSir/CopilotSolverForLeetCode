Synthesizing 10/10 solutions

=======

        let s = s.chars().collect::<Vec<char>>();
        let t = t.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                j += 1;
            }
            i += 1;
        }
        (t.len() - j) as i32
    }
}

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut t = t.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                j += 1;
            }
            i += 1;
        }
        (t.len() - j) as i32

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let mut i = 0;
        let mut j = 0;
        let mut res = 0;
        while i < s.len() {
            if j < t.len() && s[i] == t[j] {
                j += 1;
            }
            i += 1;
            res += 1;
        }
        res - j as i32

=======

        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        let s = s.as_bytes();
        let t = t.as_bytes();
        while i < s.len() && j < t.len() {
            if s[i] == t[j] {
                i += 1;
                j += 1;
            } else {
                i += 1;
            }
        }
        if j < t.len() {
            count = t.len() - j;
        }
        count as i32
    }
}

=======

        let mut s = s.chars().rev().collect::<Vec<_>>();
        let mut t = t.chars().rev().collect::<Vec<_>>();
        let mut ans = 0;
        while !t.is_empty() {
            if s.is_empty() {
                ans += t.len() as i32;
                break;
            }
            if s.last() == t.last() {
                s.pop();
                t.pop();
            } else {
                s.pop();
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut i = 0;
        let mut j = 0;
        let mut res = 0;
        let s = s.as_bytes();
        let t = t.as_bytes();
        while j < t.len() {
            if i < s.len() && s[i] == t[j] {
                i += 1;
                j += 1;
            } else {
                res += 1;
                i += 1;
            }
        }
        res

=======

        let mut i: usize = 0;
        let mut j: usize = 0;
        let mut ans: i32 = 0;
        let s = s.into_bytes();
        let t = t.into_bytes();
        while i < s.len() {
            if s[i] == t[j] {
                j += 1;
                if j == t.len() {
                    break;
                }
            }
            i += 1;
        }
        if j == t.len() {
            ans = (s.len() - i) as i32;
        } else {
            ans = (s.len() + t.len() - i - j) as i32;
        }
        ans
    }
}

=======

        let mut t = t.chars().rev().collect::<Vec<char>>();
        let mut s = s.chars().rev().collect::<Vec<char>>();
        let mut i = 0;
        while i < t.len() {
            if t[i] == s[s.len()-1] {
                t.pop();
                s.pop();
            } else {
                s.pop();
            }
            if s.is_empty() {
                break;
            }
        }
        t.len() as i32

=======

        let mut s = s.chars();
        let mut t = t.chars();
        let mut t_char = t.next();
        let mut count = 0;
        for c in s {
            if let Some(tc) = t_char {
                if c == tc {
                    t_char = t.next();
                }
            } else {
                count += 1;
            }
        }
        if t_char.is_some() {
            return -1;
        }
        count
    }
}

=======

        
    }
}
