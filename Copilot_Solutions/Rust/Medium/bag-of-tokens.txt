Synthesizing 10/10 solutions

=======

        let mut tokens = tokens;
        tokens.sort();
        let mut i = 0;
        let mut j = tokens.len() - 1;
        let mut score = 0;
        let mut max_score = 0;
        let mut power = power;
        while i <= j {
            if power >= tokens[i] {
                power -= tokens[i];
                i += 1;
                score += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                power += tokens[j];
                j -= 1;
                score -= 1;
            } else {
                break;
            }
        }
        max_score

=======

        let mut tokens = tokens;
        tokens.sort();
        let mut i = 0;
        let mut j = tokens.len() - 1;
        let mut score = 0;
        let mut max_score = 0;
        while i <= j {
            if power >= tokens[i] {
                power -= tokens[i];
                i += 1;
                score += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                score -= 1;
                power += tokens[j];
                j -= 1;
            } else {
                break;
            }
        }
        max_score

=======

        let mut tokens = tokens;
        tokens.sort();
        let mut score = 0;
        let mut max_score = 0;
        let mut i = 0;
        let mut j = tokens.len() - 1;
        while i <= j {
            if power >= tokens[i] {
                power -= tokens[i];
                score += 1;
                i += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                score -= 1;
                power += tokens[j];
                j -= 1;
            } else {
                break;
            }
        }
        max_score
    }
}

=======

        let mut tokens = tokens;
        let mut power = power;
        let mut score = 0;
        let mut max_score = 0;
        tokens.sort();
        let mut i = 0;
        let mut j = tokens.len() - 1;
        while i <= j {
            if power >= tokens[i] {
                power -= tokens[i];
                score += 1;
                i += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                power += tokens[j];
                score -= 1;
                j -= 1;
            } else {
                break;
            }
        }
        max_score
    }
}

=======

        let mut tokens = tokens;
        tokens.sort();
        let (mut l, mut r) = (0, tokens.len() - 1);
        let (mut score, mut max_score) = (0, 0);
        let (mut p) = (power);
        while l <= r {
            if p >= tokens[l] {
                p -= tokens[l];
                score += 1;
                l += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                p += tokens[r];
                score -= 1;
                r -= 1;
            } else {
                break;
            }
        }
        max_score

=======

        let mut tokens = tokens;
        tokens.sort();
        let mut i = 0;
        let mut j = tokens.len() - 1;
        let mut score = 0;
        let mut best = 0;
        while i <= j {
            if tokens[i] <= power {
                power -= tokens[i];
                score += 1;
                i += 1;
                best = best.max(score);
            } else if score > 0 {
                power += tokens[j];
                score -= 1;
                j -= 1;
            } else {
                break;
            }
        }
        best
    }
}

=======

        if tokens.len() == 0 {
            return 0;
        }
        let mut tokens = tokens;
        tokens.sort();
        let mut score = 0;
        let mut max_score = 0;
        let mut left = 0;
        let mut right = tokens.len() - 1;
        while left <= right {
            if power >= tokens[left] {
                power -= tokens[left];
                left += 1;
                score += 1;
                max_score = max_score.max(score);
            } else if score > 0 {
                power += tokens[right];
                right -= 1;
                score -= 1;
            } else {
                break;
            }
        }
        max_score

=======

        let mut tokens = tokens;
        tokens.sort();
        let (mut l, mut r) = (0, tokens.len() - 1);
        let mut p = power;
        let mut score = 0;
        while l <= r {
            if p >= tokens[l] {
                p -= tokens[l];
                l += 1;
                score += 1;
            } else if score > 0 && l < r {
                p += tokens[r];
                r -= 1;
                score -= 1;
            } else {
                break;
            }
        }
        score

=======

        let mut tokens = tokens;
        tokens.sort();
        let (mut l, mut r) = (0, tokens.len()-1);
        let (mut score, mut best) = (0, 0);
        while l <= r {
            if power >= tokens[l] {
                score += 1;
                best = best.max(score);
                power -= tokens[l];
                l += 1;
            } else if score > 0 {
                score -= 1;
                power += tokens[r];
                r -= 1;
            } else {
                break;
            }
        }
        best

=======

        
    }
}
