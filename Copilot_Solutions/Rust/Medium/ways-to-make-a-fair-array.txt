Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut odd = vec![0; n];
        let mut even = vec![0; n];
        for i in 0..n {
            if i % 2 == 0 {
                even[i] = nums[i];
            } else {
                odd[i] = nums[i];
            }
        }
        for i in 1..n {
            odd[i] += odd[i-1];
            even[i] += even[i-1];
        }
        let mut res = 0;
        for i in 0..n {
            if i == 0 {
                if even[n-1] - even[0] == odd[n-2] {
                    res += 1;
                }
            } else if i == n-1 {
                if odd[n-2] == even[n-2] {
                    res += 1;
                }
            } else {
                if even[i-1] + odd[n-1] - odd[i] == odd[i-1] + even[n-1] - even[i] {
                    res += 1;
                }
            }
        }
        res

=======

        let n = nums.len();
        let mut odd = vec![0; n + 1];
        let mut even = vec![0; n + 1];
        for i in 0..n {
            if i & 1 == 0 {
                even[i + 1] = even[i] + nums[i];
                odd[i + 1] = odd[i];
            } else {
                odd[i + 1] = odd[i] + nums[i];
                even[i + 1] = even[i];
            }
        }
        let mut ans = 0;
        for i in 0..n {
            let mut tmp = 0;
            if i & 1 == 0 {
                tmp = even[i] + odd[n] - odd[i + 1];
            } else {
                tmp = odd[i] + even[n] - even[i + 1];
            }
            if tmp == even[n] - tmp {
                ans += 1;
            }
        }
        ans

=======

        let mut odd = 0;
        let mut even = 0;
        for (i, &num) in nums.iter().enumerate() {
            if i % 2 == 0 {
                even += num;
            } else {
                odd += num;
            }
        }
        let mut ans = 0;
        let mut odd2 = 0;
        let mut even2 = 0;
        for (i, &num) in nums.iter().enumerate() {
            if i % 2 == 0 {
                even -= num;
                if odd2 + even == odd + even2 {
                    ans += 1;
                }
                even2 += num;
            } else {
                odd -= num;
                if odd2 + even == odd + even2 {
                    ans += 1;
                }
                odd2 += num;
            }
        }
        ans

=======

        let mut even = 0;
        let mut odd = 0;
        let mut res = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                even += nums[i];
            } else {
                odd += nums[i];
            }
        }
        let mut left_even = 0;
        let mut left_odd = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                even -= nums[i];
                if left_odd + even == left_even + odd {
                    res += 1;
                }
                left_even += nums[i];
            } else {
                odd -= nums[i];
                if left_odd + even == left_even + odd {
                    res += 1;
                }
                left_odd += nums[i];
            }
        }
        res

=======

        let n = nums.len();
        let mut odds = vec![0; n];
        let mut evens = vec![0; n];
        let mut odd = 0;
        let mut even = 0;
        for i in (0..n).rev() {
            if i % 2 == 0 {
                even += nums[i];
                evens[i] = even;
            } else {
                odd += nums[i];
                odds[i] = odd;
            }
        }
        odd = 0;
        even = 0;
        let mut ans = 0;
        for i in 0..n {
            if i % 2 == 0 {
                even += nums[i];
            } else {
                odd += nums[i];
            }
            let mut e = even;
            let mut o = odd;
            if i + 1 < n {
                e += odds[i + 1];
                o += evens[i + 1];
            }
            if e == o {
                ans += 1;
            }
        }
        ans

=======

        let mut odd = 0;
        let mut even = 0;
        let mut res = 0;
        for (i, &v) in nums.iter().enumerate() {
            if i % 2 == 0 {
                even += v;
            } else {
                odd += v;
            }
        }
        let mut left_odd = 0;
        let mut left_even = 0;
        for (i, &v) in nums.iter().enumerate() {
            if i % 2 == 0 {
                even -= v;
                if left_odd + even == left_even + odd {
                    res += 1;
                }
                left_even += v;
            } else {
                odd -= v;
                if left_odd + even == left_even + odd {
                    res += 1;
                }
                left_odd += v;
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        let mut left = 0;
        let mut right = nums.iter().sum::<i32>();
        for i in 0..nums.len() {
            if i % 2 == 0 {
                left += nums[i];
            } else {
                right -= nums[i];
            }
            if left == right {
                ans += 1;
            }
        }
        ans

=======

        let n = nums.len();
        let mut res = 0;
        let mut odd_sum = 0;
        let mut even_sum = 0;
        let mut odd = 0;
        let mut even = 0;
        for i in 0..n {
            if i % 2 == 0 {
                even_sum += nums[i];
            } else {
                odd_sum += nums[i];
            }
        }
        for i in 0..n {
            if i % 2 == 0 {
                even_sum -= nums[i];
            } else {
                odd_sum -= nums[i];
            }
            if odd_sum + even == even_sum + odd {
                res += 1;
            }
            if i % 2 == 0 {
                even += nums[i];
            } else {
                odd += nums[i];
            }
        }
        res

=======

        let mut ans = 0;
        let mut odd = 0;
        let mut even = 0;
        let mut odd_pre = vec![0; nums.len()];
        let mut even_pre = vec![0; nums.len()];
        for i in 0..nums.len() {
            if i % 2 == 0 {
                even += nums[i];
                even_pre[i] = even;
                odd_pre[i] = odd;
            } else {
                odd += nums[i];
                even_pre[i] = even;
                odd_pre[i] = odd;
            }
        }
        let mut odd = 0;
        let mut even = 0;
        let mut odd_post = vec![0; nums.len()];
        let mut even_post = vec![0; nums.len()];
        for i in (0..nums.len()).rev() {
            if i % 2 == 0 {
                even += nums[i];
                even_post[i] = even;
                odd_post[i] = odd;
            } else {
                odd += nums[i];
                even_post[i] = even;
                odd_post[i] = odd;
            }
        }
        for i in 0..nums.len() {
            let mut o = 0;
            let mut e = 0;
            if i == 0 {
                o = odd_post[i + 1];
                e = even_post[i + 1];
            } else if i == nums.len() - 1 {
                o = odd_pre[i - 1];
                e = even_pre[i - 1];
            } else {
                o = odd_pre[i - 1] + odd_post[i + 1];
                e = even_pre[i - 1] + even_post[i + 1];
            }
            if o == e {
                ans += 1;
            }
        }
        ans
    }
}

=======

        let mut sum = 0;
        let mut sum_odd = 0;
        let mut sum_even = 0;
        let mut cnt = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                sum_even += nums[i];
            } else {
                sum_odd += nums[i];
            }
        }
        for i in 0..nums.len() {
            if i % 2 == 0 {
                sum_even -= nums[i];
            } else {
                sum_odd -= nums[i];
            }
            if sum_odd + sum == sum_even {
                cnt += 1;
            }
            if i % 2 == 0 {
                sum += nums[i];
            }
        }
        cnt
