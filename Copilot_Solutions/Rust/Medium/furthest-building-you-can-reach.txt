Synthesizing 10/10 solutions

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 0..heights.len() - 1 {
            let diff = heights[i + 1] - heights[i];
            if diff > 0 {
                heap.push(-diff);
                if heap.len() > ladders as usize {
                    bricks -= heap.pop().unwrap();
                }
                if bricks < 0 {
                    return (i as i32);
                }
            }
        }
        (heights.len() - 1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut pq = std::collections::BinaryHeap::new();
        for i in 0..heights.len() - 1 {
            let diff = heights[i + 1] - heights[i];
            if diff > 0 {
                pq.push(diff);
                if pq.len() > ladders as usize {
                    bricks -= pq.pop().unwrap();
                }
                if bricks < 0 {
                    return i as i32;
                }
            }
        }
        heights.len() as i32 - 1

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut pq = std::collections::BinaryHeap::new();
        for i in 1..heights.len() {
            let diff = heights[i] - heights[i - 1];
            if diff <= 0 { continue; }
            pq.push(diff);
            if pq.len() > ladders as usize {
                let min = pq.pop().unwrap();
                if min > bricks { return (i - 1) as i32; }
                bricks -= min;
            }
        }
        (heights.len() - 1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 1..heights.len() {
            let d = heights[i] - heights[i - 1];
            if d > 0 {
                heap.push(d);
                if heap.len() > ladders as usize {
                    bricks -= heap.pop().unwrap();
                }
                if bricks < 0 {
                    return (i - 1) as i32;
                }
            }
        }
        (heights.len() - 1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut diff = vec![];
        for i in 1..heights.len() {
            let d = heights[i] - heights[i-1];
            if d > 0 {
                if ladders > 0 {
                    ladders -= 1;
                    diff.push(d);
                    diff.sort();
                } else {
                    if d > bricks {
                        return (i-1) as i32;
                    } else {
                        bricks -= d;
                        diff.push(d);
                        diff.sort();
                        bricks += diff[0];
                        diff.remove(0);
                    }
                }
            }
        }
        (heights.len()-1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 1..heights.len() {
            let delta = heights[i] - heights[i-1];
            if delta > 0 {
                heap.push(delta);
                if heap.len() > ladders as usize {
                    bricks -= heap.pop().unwrap();
                }
                if bricks < 0 {
                    return (i-1) as i32;
                }
            }
        }
        (heights.len()-1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut diff = vec![];
        for i in 1..heights.len() {
            let h = heights[i] - heights[i - 1];
            if h > 0 {
                diff.push(h);
            }
        }
        diff.sort();
        for i in 0..diff.len() {
            if diff[i] <= bricks {
                bricks -= diff[i];
            } else if ladders > 0 {
                ladders -= 1;
            } else {
                return i as i32;
            }
        }
        (heights.len() - 1) as i32

=======

        let mut bricks = bricks;
        let mut ladders = ladders;
        let mut diff: Vec<i32> = Vec::new();
        for i in 0..heights.len()-1 {
            let d = heights[i+1] - heights[i];
            if d > 0 {
                diff.push(d);
            }
        }
        diff.sort();
        for i in 0..diff.len() {
            if ladders > 0 {
                ladders -= 1;
            } else if bricks >= diff[i] {
                bricks -= diff[i];
            } else {
                return (i-1) as i32;
            }
        }
        (diff.len()-1) as i32
    }
}

=======

        let mut heights = heights;
        let mut ladders = ladders;
        let mut bricks = bricks;
        let mut idx = 0;
        let mut d = Vec::new();
        let n = heights.len();
        while idx < n - 1 {
            let h = heights[idx + 1] - heights[idx];
            if h > 0 {
                if ladders > 0 {
                    d.push(h);
                    d.sort();
                    ladders -= 1;
                } else if bricks >= h {
                    d.push(h);
                    d.sort();
                    bricks -= d.remove(0);
                } else {
                    break;
                }
            }
            idx += 1;
        }
        idx as i32
    }
}

=======

        
    }
}
