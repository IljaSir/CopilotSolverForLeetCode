Synthesizing 10/10 solutions

=======

        let mut n = num1 ^ num2;
        let mut r = 1;
        while n > 0 {
            n >>= 1;
            r <<= 1;
        }
        r - 1

=======

        let mut num1 = num1;
        let mut num2 = num2;
        let mut res = 0;
        let mut i = 0;
        while num1 != 0 || num2 != 0 {
            let bit1 = num1 & 1;
            let bit2 = num2 & 1;
            if bit1 == bit2 {
                res += bit1 << i;
            }
            num1 >>= 1;
            num2 >>= 1;
            i += 1;
        }
        res
    }
}

=======

        if num1 == num2 {
            return 0;
        }
        let mut num1 = num1;
        let mut num2 = num2;
        let mut result = 0;
        while num1 > 0 || num2 > 0 {
            let bit1 = num1 & 1;
            let bit2 = num2 & 1;
            if bit1 != bit2 {
                result += 1;
            }
            num1 >>= 1;
            num2 >>= 1;
        }
        result
    }
}

=======

        if num1 == num2 {
            return 0;
        }
        let mut x = 0;
        for i in 0..32 {
            if (num1 & (1 << i)) != (num2 & (1 << i)) {
                x |= 1 << i;
            }
        }
        x

=======

        let mut x = num1 ^ num2;
        let mut mask = 1 << 30;
        while mask > 0 && (x & mask) == 0 {
            mask >>= 1;
        }
        if mask == 0 {
            return 0;
        }
        let mut y = 0;
        while mask > 0 {
            y |= mask;
            mask >>= 1;
        }
        y

=======

        let mut x = num1 ^ num2;
        let mut y = 1;
        while x > 0 {
            y <<= 1;
            x >>= 1;
        }
        y - 1

=======

        let mut x = 0;
        let mut n1 = num1;
        let mut n2 = num2;
        for i in 0..32 {
            if n1 & 1 == n2 & 1 {
                x += (n1 & 1) << i;
            } else {
                x += 1 << i;
            }
            n1 >>= 1;
            n2 >>= 1;
        }
        x

=======

        let mut num = num1 ^ num2;
        if num == 0 {
            return 0;
        }
        let mut mask = 1;
        while num & mask == 0 {
            mask <<= 1;
        }
        let mut x = 0;
        while num > 0 {
            x |= mask;
            num &= !mask;
            mask <<= 1;
        }
        x

=======

        let mut num = num1 ^ num2;
        let mut res = 0;
        let mut p = 1;
        while num > 0 {
            if num & 1 == 1 {
                res += p;
            }
            p <<= 1;
            num >>= 1;
        }
        res
    }
}

=======

        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        let mut i = 30;
        while i >= 0 {
            let b1 = (num1 >> i) & 1;
            let b2 = (num2 >> i) & 1;
            if b1 == b2 {
                if b1 == 1 {
                    x = (x << 1) | 1;
                } else {
                    x = x << 1;
                }
            } else {
                if y == 0 {
                    y = 1;
                    z = x;
                }
                x = x << 1;
            }
            i -= 1;
        }
        if y == 0 {
            z = x;
        }
        z
