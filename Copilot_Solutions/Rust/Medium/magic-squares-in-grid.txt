Synthesizing 5/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        if grid.len() < 3 || grid[0].len() < 3 {
            return 0;
        }
        let mut count = 0;
        for i in 0..grid.len() - 2 {
            for j in 0..grid[i].len() - 2 {
                let mut nums = [0; 16];
                let mut sum = 0;
                let mut k = 0;
                while k < 3 {
                    let mut row_sum = 0;
                    let mut col_sum = 0;
                    let mut l = 0;
                    while l < 3 {
                        let num = grid[i + k][j + l];
                        if num < 1 || num > 9 || nums[num as usize] > 0 {
                            break;
                        }
                        nums[num as usize] = 1;
                        row_sum += num;
                        col_sum += grid[i + l][j + k];
                        l += 1;
                    }
                    if l < 3 {
                        break;
                    }
                    if k == 0 {
                        sum = row_sum;
                    } else if sum != row_sum || sum != col_sum {
                        break;
                    }
                    k += 1;
                }
                if k == 3 && sum == grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2]
                    && sum == grid[i][j + 2] + grid[i + 1][j + 1] + grid[i + 2][j] {
                    count += 1;
                }
            }
        }
        count

=======

        let mut res = 0;
        let row = grid.len();
        let col = grid[0].len();
        for i in 0..(row - 2) {
            for j in 0..(col - 2) {
                if grid[i + 1][j + 1] != 5 {
                    continue;
                }
                let mut set = std::collections::HashSet::new();
                let mut sum = 0;
                for k in 0..3 {
                    sum += grid[i][j + k];
                    sum += grid[i + 2][j + k];
                    sum += grid[i + k][j];
                    sum += grid[i + k][j + 2];
                    set.insert(grid[i][j + k]);
                    set.insert(grid[i + 2][j + k]);
                    set.insert(grid[i + k][j]);
                    set.insert(grid[i + k][j + 2]);
                }
                if sum == 15 * 8 && set.len() == 9 {
                    res += 1;
                }
            }
        }
        res
