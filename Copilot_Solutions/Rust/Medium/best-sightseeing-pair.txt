Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut mx = values[0];
        for i in 1..values.len() {
            ans = ans.max(mx + values[i] - i as i32);
            mx = mx.max(values[i] + i as i32);
        }
        ans

=======

        let mut max = values[0];
        let mut ans = 0;
        for i in 1..values.len() {
            ans = ans.max(max + values[i] - i as i32);
            max = max.max(values[i] + i as i32);
        }
        ans

=======

        let (mut max, mut res) = (values[0] + 0, 0);
        for j in 1..values.len() {
            res = res.max(max + values[j] - j as i32);
            max = max.max(values[j] + j as i32);
        }
        res

=======

        let mut res = 0;
        let mut cur = 0;
        for &v in values.iter() {
            res = res.max(cur + v);
            cur = cur.max(v) - 1;
        }
        res

=======

        let mut max = 0;
        let mut cur = values[0];
        for i in 1..values.len() {
            max = max.max(cur + values[i] - i as i32);
            cur = cur.max(values[i] + i as i32);
        }
        max

=======

        let mut max = 0;
        let mut max_i = values[0];
        for i in 1..values.len() {
            max = max.max(max_i + values[i] - i as i32);
            max_i = max_i.max(values[i] + i as i32);
        }
        max

=======

        let mut max = 0;
        let mut max_val = values[0];
        for i in 1..values.len() {
            max = std::cmp::max(max, max_val + values[i] - i as i32);
            max_val = std::cmp::max(max_val, values[i] + i as i32);
        }
        max

=======

        let mut max = 0;
        let mut max_value = values[0];
        for i in 1..values.len() {
            max = std::cmp::max(max, max_value + values[i] - i as i32);
            max_value = std::cmp::max(max_value, values[i] + i as i32);
        }
        max

=======

        let mut max = 0;
        let mut max_i = values[0] + 0;
        for j in 1..values.len() {
            max = max.max(max_i + values[j] - j as i32);
            max_i = max_i.max(values[j] + j as i32);
        }
        max

=======

        let mut max = 0;
        let mut cur = 0;
        for i in 0..values.len() {
            let v = values[i];
            max = max.max(cur + v);
            cur = cur.max(v) - 1;
        }
        max
