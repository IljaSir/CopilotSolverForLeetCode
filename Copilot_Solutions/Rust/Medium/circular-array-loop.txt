Synthesizing 9/10 solutions

=======
Suggestion 1

        let n = nums.len();
        let mut visited = vec![false; n];
        for i in 0..n {
            if visited[i] {
                continue;
            }
            let mut slow = i;
            let mut fast = i;
            let mut direction = nums[i] > 0;
            loop {
                slow = (slow + nums[slow] as usize) % n;
                if direction != nums[slow] > 0 {
                    break;
                }
                fast = (fast + nums[fast] as usize) % n;
                if direction != nums[fast] > 0 {
                    break;
                }
                fast = (fast + nums[fast] as usize) % n;
                if direction != nums[fast] > 0 {
                    break;
                }
                if slow == fast {
                    if slow != (slow + nums[slow] as usize) % n {
                        return true;
                    }
                    break;
                }
            }
            let mut j = i;
            while !visited[j] {
                visited[j] = true;
                j = (j + nums[j] as usize) % n;
            }
        }
        false
    }
}

=======
Suggestion 2

        let mut nums = nums;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                continue;
            }
            let mut slow = i;
            let mut fast = i;
            let mut dir = nums[i] > 0;
            loop {
                slow = Self::next(&nums, slow);
                fast = Self::next(&nums, fast);
                if fast == slow {
                    break;
                }
                if nums[fast] == 0 || dir != nums[fast] > 0 {
                    break;
                }
                fast = Self::next(&nums, fast);
                if fast == slow {
                    break;
                }
                if nums[fast] == 0 || dir != nums[fast] > 0 {
                    break;
                }
            }
            if slow == fast && slow != Self::next(&nums, slow) {
                return true;
            }
            let mut j = i;
            let val = nums[i];
            while nums[j] != 0 {
                let next = Self::next(&nums, j);
                nums[j] = 0;
                j = next;
            }
        }
        false
    }
    fn next(nums: &Vec<i32>, i: usize) -> usize {
        let n = nums.len();
        let mut next = i as i32 + nums[i];
        while next < 0 {
            next += n as i32;
        }
        (next as usize) % n

=======
Suggestion 3

        let n = nums.len();
        let mut vis = vec![false; n];
        for i in 0..n {
            if vis[i] {
                continue;
            }
            let mut cur = i;
            let mut dir = nums[i];
            let mut st = Vec::new();
            let mut ok = false;
            while !vis[cur] {
                vis[cur] = true;
                st.push(cur);
                let nxt = ((cur as i32) + nums[cur]) as usize % n;
                if nxt == cur || nums[nxt] * dir < 0 {
                    break;
                }
                if st.contains(&nxt) {
                    ok = true;
                    break;
                }
                cur = nxt;
            }
            if ok {
                return true;
            }
            for x in st {
                vis[x] = false;
            }
        }
        false
    }
}

=======
Suggestion 4

        let n = nums.len();
        let mut visited = vec![0; n];
        for i in 0..n {
            if visited[i] == 1 {
                continue;
            }
            let mut j = i;
            let mut k = (j as i32 + nums[j]) as usize % n;
            let mut direction = nums[j] > 0;
            let mut count = 1;
            while direction == (nums[k] > 0) && visited[k] == 0 {
                j = k;
                k = (j as i32 + nums[j]) as usize % n;
                count += 1;
            }
            if k == i && count > 1 {
                return true;
            }
            j = i;
            visited[j] = 1;
            while j != k {
                j = (j as i32 + nums[j]) as usize % n;
                visited[j] = 1;
            }
        }
        false

=======
Suggestion 5

        let mut i = 0;
        let mut visited = vec![false; nums.len()];
        while i < nums.len() {
            if visited[i] {
                return true;
            }
            visited[i] = true;
            i = Self::next(nums[i], i, nums.len());
        }
        false
    }
    fn next(n: i32, i: usize, len: usize) -> usize {
        let next = i as i32 + n;
        if next >= 0 {
            (next as usize) % len
        } else {
            len - (-next as usize) % len
        }

=======
Suggestion 6

        let n = nums.len();
        let mut dp = vec![false; n];
        for i in 0..n {
            if dp[i] {
                continue;
            }
            let mut j = i;
            let mut k = i;
            let mut dir = 0;
            while !dp[j] {
                dp[j] = true;
                k = (j as i32 + nums[j]) as usize % n;
                if nums[j] * nums[k] < 0 {
                    break;
                }
                if dir == 0 {
                    if nums[j] > 0 {
                        dir = 1;
                    } else {
                        dir = -1;
                    }
                } else if dir * nums[j] < 0 {
                    break;
                }
                if j == k {
                    if j == (j as i32 + nums[j]) as usize % n {
                        break;
                    }
                    return true;
                }
                j = k;
            }
        }
        false

=======
Suggestion 7

        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            let mut k = i;
            while nums[j] * nums[(j + nums[j] as usize) % nums.len()] > 0
                && nums[j] * nums[(k + nums[k] as usize) % nums.len()] > 0
                && nums[j] * nums[(k + nums[k] as usize * 2) % nums.len()] > 0
            {
                j = (j + nums[j] as usize) % nums.len();
                k = (k + nums[k] as usize * 2) % nums.len();
                if j == k {
                    if j == (j + nums[j] as usize) % nums.len() {
                        break;
                    }
                    return true;
                }
            }
            let val = nums[i];
            while nums[i] * val > 0 {
                let next = (i + nums[i] as usize) % nums.len();
                nums[i] = 0;
                i = next;
            }
        }
        false
    }
}

=======
Suggestion 8

        let mut visited = vec![0; nums.len()];
        let mut next = |i: usize| {
            let n = nums.len() as i32;
            ((i as i32 + nums[i]) % n + n) as usize % n as usize
        };
        for i in 0..nums.len() {
            if visited[i] != 0 {
                continue;
            }
            let mut slow = i;
            let mut fast = i;
            let mut d = 1;
            while visited[slow] == 0 && visited[fast] == 0 {
                visited[slow] = d;
                slow = next(slow);
                d += 1;
                visited[fast] = d;
                fast = next(fast);
                d += 1;
                visited[fast] = d;
                fast = next(fast);
                d += 1;
            }
            if visited[slow] > 0 && visited[slow] % 2 == 0 && visited[slow] / 2 == visited[fast] {
                return true;
            }
        }
        false

=======
Suggestion 9

        let n = nums.len();
        let mut vis = vec![-1; n];
        let mut stk = vec![];
        let mut cur = 0;
        let mut dir = 0;
        let mut cnt = 0;
        while cnt < n {
            if vis[cur] != -1 {
                if stk.len() - vis[cur] > 1 {
                    return true;
                } else {
                    stk.clear();
                    dir = 0;
                    cnt += 1;
                }
            } else {
                vis[cur] = stk.len();
                stk.push(cur);
                cnt += 1;
            }
            let nxt = (cur as i32 + nums[cur]) as usize % n;
            if nums[nxt] * nums[cur] < 0 {
                stk.clear();
                dir = 0;
            } else {
                if dir == 0 {
                    dir = nums[nxt];
                } else if dir != nums[nxt] {
                    stk.clear();
                    dir = 0;
                }
            }
            cur = nxt;
        }
        false
    }
}
