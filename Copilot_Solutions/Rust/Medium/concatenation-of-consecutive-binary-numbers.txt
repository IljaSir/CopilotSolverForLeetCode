Synthesizing 10/10 solutions

=======

        let mut res = 0;
        for i in 1..=n {
            res = ((res << i.to_string(2).len()) + i) % 1_000_000_007;
        }
        res

=======

        let mut res = 0;
        for i in 1..=n {
            let mut j = i;
            while j > 0 {
                res = (res * 2 + j % 2) % 1000000007;
                j /= 2;
            }
        }
        res
    }
}

=======

        let mut res = 0;
        for i in 1..=n {
            let mut j = i;
            let mut bits = 0;
            while j > 0 {
                j >>= 1;
                bits += 1;
            }
            res = (res * (1 << bits) + i) % (1_000_000_007);
        }
        res as i32

=======

        let mut res = 0;
        let mut modu = 1_000_000_007;
        for i in 1..=n {
            let mut j = i;
            while j > 0 {
                res = (res << 1) % modu;
                j >>= 1;
            }
            res = (res + i) % modu;
        }
        res
    }
}

=======

        let mut result = 0;
        let mut base = 1;
        for i in 1..=n {
            if i & (i - 1) == 0 {
                base = i;
            }
            result = ((result << i.to_string().len()) + i) % 1000000007;
        }
        result
    }
}

=======

        let mut ans = 0;
        let m = 1_000_000_007;
        for i in 1..=n {
            let mut t = i;
            let mut bits = 0;
            while t > 0 {
                t >>= 1;
                bits += 1;
            }
            ans = ((ans << bits) % m + i) % m;
        }
        ans

=======

        let mut res = 0;
        for i in 1..=n {
            res = (res * (i as i64).leading_zeros() as i64 + i as i64) % 1000000007;
        }
        res as i32

=======

        let mut sum = 0;
        let mut power = 0;
        for i in (1..=n).rev() {
            if i & (i + 1) == 0 {
                power += 1;
            }
            sum = (sum + i * 2i32.pow(power as u32)) % (10i32.pow(9) + 7);
        }
        sum

=======

        let mut res: i64 = 0;
        let mut modu: i64 = 1_000_000_007;
        for i in 1..=n {
            let mut j = i;
            while j > 0 {
                res = (res << 1) % modu;
                j >>= 1;
            }
            res = (res + i as i64) % modu;
        }
        res as i32

=======

        let mut result = 0;
        let mut mod_ = 1_000_000_007;
        for i in 1..=n {
            let mut x = i;
            let mut num = 0;
            while x > 0 {
                x >>= 1;
                num += 1;
            }
            result = (result << num) % mod_ + i as i32;
            result %= mod_;
        }
        result
