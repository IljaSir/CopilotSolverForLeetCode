Synthesizing 10/10 solutions

=======

        let mut count = 0;
        let mut prev = ' ';
        let mut prev_count = 0;
        for c in s.chars() {
            if c == prev {
                prev_count += 1;
            } else {
                prev = c;
                prev_count = 1;
            }
            count = (count + prev_count) % 1000000007;
        }
        count

=======

        let mut count = 0;
        let mut prev = '\0';
        let mut streak = 0;
        for c in s.chars() {
            if c == prev {
                streak += 1;
            } else {
                prev = c;
                streak = 1;
            }
            count += streak;
            count %= 1_000_000_007;
        }
        count as i32

=======

        let mut count = 0;
        let mut last = ' ';
        let mut len = 0;
        for c in s.chars() {
            if c == last {
                len += 1;
            } else {
                last = c;
                len = 1;
            }
            count += len;
        }
        (count % 1000000007) as i32

=======

        let mut count = 0;
        let mut last = ' ';
        let mut last_count = 0;
        for c in s.chars() {
            if c != last {
                last = c;
                last_count = 1;
            } else {
                last_count += 1;
            }
            count += last_count;
        }
        count as i32 % 1_000_000_007

=======

        let mut count = 0;
        let mut last = ' ';
        let mut streak = 0;
        for c in s.chars() {
            if c != last {
                last = c;
                streak = 0;
            }
            streak += 1;
            count += streak;
        }
        (count % 1_000_000_007) as i32

=======

        let mut c = 0;
        let mut r = 0;
        let mut p = 0;
        for i in s.bytes() {
            if i == p {
                c += 1;
            } else {
                r = (r + (1 + c) * c / 2) % 1_000_000_007;
                c = 1;
                p = i;
            }
        }
        (r + (1 + c) * c / 2) as i32 % 1_000_000_007

=======

        let mut res = 0;
        let mut count = 1;
        let mut prev = ' ';
        let mut modu = 1000000007;
        for c in s.chars() {
            if c == prev {
                count += 1;
            } else {
                count = 1;
                prev = c;
            }
            res = (res + count) % modu;
        }
        res

=======

        let modu = 1_000_000_007;
        let mut count = 0;
        let mut prev = 'a';
        let mut num = 0;
        for c in s.chars() {
            if c != prev {
                prev = c;
                num = 0;
            }
            num += 1;
            count += num;
        }
        (count % modu) as i32

=======

        let mut cnt = 1;
        let mut ans = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 1;
        while j < s.len() {
            if s[i] == s[j] {
                cnt += 1;
            } else {
                ans += (cnt * (cnt + 1)) / 2;
                cnt = 1;
                i = j;
            }
            j += 1;
        }
        ans += (cnt * (cnt + 1)) / 2;
        ans as i32 % 1000000007

=======

        let mut res = 0;
        let mut cur = 1;
        let mut last = 0;
        let mut last_char = ' ';
        for c in s.chars() {
            if c == last_char {
                cur += 1;
            } else {
                cur = 1;
                last_char = c;
            }
            res += cur;
            res %= 1_000_000_007;
        }
        res
