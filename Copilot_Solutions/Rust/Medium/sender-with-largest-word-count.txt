Synthesizing 9/10 solutions

=======

        let mut count = std::collections::HashMap::new();
        for i in 0..messages.len() {
            let c = count.entry(senders[i].clone()).or_insert(0);
            *c += messages[i].split_whitespace().count();
        }
        let mut max = 0;
        let mut ans = "".to_string();
        for (k, v) in count {
            if v > max {
                max = v;
                ans = k;
            } else if v == max && k > ans {
                ans = k;
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for (i, s) in senders.iter().enumerate() {
            let count = map.entry(s).or_insert(0);
            *count += messages[i].split(' ').count();
        }
        let mut max = 0;
        let mut ans = "".to_string();
        for (key, value) in map {
            if value > max {
                max = value;
                ans = key.to_string();
            } else if value == max {
                if key > ans {
                    ans = key.to_string();
                }
            }
        }
        ans
    }
}

=======

        let mut sender_count = std::collections::HashMap::new();
        for (i, sender) in senders.iter().enumerate() {
            let count = sender_count.entry(sender).or_insert(0);
            *count += messages[i].split(' ').count();
        }
        let mut max = 0;
        let mut max_sender = String::new();
        for (sender, count) in sender_count.iter() {
            if *count > max || (*count == max && sender > &max_sender) {
                max = *count;
                max_sender = sender.clone();
            }
        }
        max_sender
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in 0..messages.len() {
            let count = messages[i].split(' ').count();
            if let Some(x) = map.get_mut(&senders[i]) {
                *x += count;
            } else {
                map.insert(senders[i].clone(), count);
            }
        }
        let mut max = 0;
        let mut res = "".to_string();
        for (k, v) in map {
            if v > max {
                max = v;
                res = k;
            } else if v == max {
                if k > res {
                    res = k;
                }
            }
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        for i in 0..messages.len() {
            let count = messages[i].split_whitespace().count();
            let sender = &senders[i];
            *map.entry(sender).or_insert(0) += count;
        }
        let mut max = 0;
        let mut res = "".to_string();
        for (k, v) in map {
            if v > max || (v == max && k > res) {
                max = v;
                res = k;
            }
        }
        res
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for i in 0..messages.len() {
            let count = messages[i].split(' ').count();
            let sender = &senders[i];
            map.entry(sender).and_modify(|e| *e += count).or_insert(count);
        }
        let mut max = 0;
        let mut result = String::new();
        for (sender, count) in map {
            if count > max {
                max = count;
                result = sender.to_string();
            } else if count == max && sender > result {
                result = sender.to_string();
            }
        }
        result
    }
}

=======

        let mut map: std::collections::HashMap<String, i32> = std::collections::HashMap::new();
        for (i, s) in senders.into_iter().enumerate() {
            map.entry(s).or_insert(0);
            map.entry(s).and_modify(|v| *v += messages[i].split_whitespace().count() as i32);
        }
        let mut res = "".to_string();
        let mut max = 0;
        for (k, v) in map.into_iter() {
            if v > max {
                res = k;
                max = v;
            } else if v == max && k > res {
                res = k;
            }
        }
        res

=======

        let mut counts = std::collections::HashMap::new();
        for (msg, sender) in messages.iter().zip(senders.iter()) {
            let count = msg.split(' ').count();
            counts.entry(sender).and_modify(|v| *v += count).or_insert(count);
        }
        let mut max_count = 0;
        let mut max_sender = "";
        for (sender, count) in counts {
            if count > max_count || (count == max_count && sender > max_sender) {
                max_count = count;
                max_sender = sender;
            }
        }
        max_sender.to_string()
    }
}

=======

        
    }
}
