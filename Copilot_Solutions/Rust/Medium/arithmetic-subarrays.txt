Synthesizing 9/10 solutions

=======

        let mut res = Vec::new();
        for i in 0..l.len() {
            let mut v = nums[l[i] as usize..=r[i] as usize].to_vec();
            v.sort();
            let mut ok = true;
            for j in 0..v.len() - 1 {
                if j == 0 {
                    if v[1] - v[0] != v[v.len() - 1] - v[v.len() - 2] {
                        ok = false;
                        break;
                    }
                } else {
                    if v[j + 1] - v[j] != v[1] - v[0] {
                        ok = false;
                        break;
                    }
                }
            }
            res.push(ok);
        }
        res
    }
}

=======

        let mut res = Vec::new();
        for i in 0..l.len() {
            let mut sub = nums[l[i] as usize..=r[i] as usize].to_vec();
            sub.sort();
            let mut is_arithmetic = true;
            for j in 1..sub.len() {
                if sub[j] - sub[j - 1] != sub[1] - sub[0] {
                    is_arithmetic = false;
                    break;
                }
            }
            res.push(is_arithmetic);
        }
        res
    }
}

=======

        let mut ret = Vec::new();
        for i in 0..l.len() {
            let mut tmp = nums[l[i] as usize..=r[i] as usize].to_vec();
            tmp.sort();
            let mut flag = true;
            for j in 1..tmp.len() {
                if tmp[j] - tmp[j-1] != tmp[1] - tmp[0] {
                    flag = false;
                    break;
                }
            }
            ret.push(flag);
        }
        ret
    }
}

=======

        let mut ans = Vec::new();
        for i in 0..l.len() {
            let mut temp = nums[l[i] as usize..=r[i] as usize].to_vec();
            temp.sort();
            let mut j = 1;
            let mut flag = true;
            let diff = temp[1] - temp[0];
            while j < temp.len() - 1 {
                if temp[j + 1] - temp[j] != diff {
                    flag = false;
                    break;
                }
                j += 1;
            }
            ans.push(flag);
        }
        ans
    }
}

=======

        let mut res = vec![];
        for i in 0..l.len() {
            let mut tmp = nums[l[i] as usize..=r[i] as usize].to_vec();
            tmp.sort();
            let mut flag = true;
            let mut diff = tmp[1] - tmp[0];
            for j in 2..tmp.len() {
                if tmp[j] - tmp[j-1] != diff {
                    flag = false;
                    break;
                }
            }
            res.push(flag);
        }
        res

=======

        let mut result = Vec::new();
        for i in 0..l.len() {
            let mut subarray = &nums[l[i] as usize..=r[i] as usize];
            subarray.sort();
            let mut is_arithmetic = true;
            for j in 1..subarray.len() {
                if subarray[j] - subarray[j-1] != subarray[1] - subarray[0] {
                    is_arithmetic = false;
                    break;
                }
            }
            result.push(is_arithmetic);
        }
        result

=======

        let mut res = vec![];
        for i in 0..l.len() {
            let mut slice = nums[l[i] as usize..=r[i] as usize].to_vec();
            slice.sort();
            let mut diff = slice[1] - slice[0];
            let mut flag = true;
            for j in 2..slice.len() {
                if slice[j] - slice[j-1] != diff {
                    flag = false;
                    break;
                }
            }
            res.push(flag);
        }
        res

=======

        let mut result = Vec::new();
        let mut temp = Vec::new();
        for i in 0..l.len() {
            temp = nums[l[i] as usize..=r[i] as usize].to_vec();
            temp.sort();
            let mut flag = true;
            for j in 2..temp.len() {
                if temp[j] - temp[j-1] != temp[1] - temp[0] {
                    flag = false;
                    break;
                }
            }
            result.push(flag);
        }
        result
    }
}

=======

        let mut res = Vec::new();
        for (i, &j) in l.iter().enumerate() {
            let mut nums = nums[j as usize..=r[i] as usize].to_vec();
            nums.sort();
            let diff = nums[1] - nums[0];
            let mut flag = true;
            for i in 1..nums.len() {
                if nums[i] - nums[i - 1] != diff {
                    flag = false;
                    break;
                }
            }
            res.push(flag);
        }
        res
    }
}
