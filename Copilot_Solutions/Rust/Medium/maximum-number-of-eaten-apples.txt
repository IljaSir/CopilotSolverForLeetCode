Synthesizing 8/10 solutions

=======

        let mut ans = 0;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 0..apples.len() {
            if apples[i] > 0 {
                heap.push(std::cmp::Reverse((i as i32 + days[i], apples[i])));
            }
            while let Some(std::cmp::Reverse((day, apple))) = heap.pop() {
                if day > i as i32 {
                    if apple > 1 {
                        heap.push(std::cmp::Reverse((day, apple - 1)));
                    }
                    ans += 1;
                    break;
                }
            }
        }
        let mut i = apples.len() as i32;
        while let Some(std::cmp::Reverse((day, apple))) = heap.pop() {
            if day > i {
                ans += (day - i) as i32;
                i = day;
            }
            if apple > 1 {
                heap.push(std::cmp::Reverse((day, apple - 1)));
            }
            ans += 1;
        }
        ans

=======

        let mut heap = std::collections::BinaryHeap::new();
        let mut ret = 0;
        for i in 0..apples.len() {
            if apples[i] > 0 {
                heap.push((-(i as i32 + days[i]), apples[i]));
            }
            while !heap.is_empty() {
                let (day, n) = heap.pop().unwrap();
                let day = -day;
                if day > i as i32 {
                    if n > 1 {
                        heap.push((-(day), n - 1));
                    }
                    ret += 1;
                    break;
                }
            }
        }
        let mut i = apples.len() as i32;
        while !heap.is_empty() {
            let (day, n) = heap.pop().unwrap();
            let day = -day;
            let eat = std::cmp::min(n, day - i);
            ret += eat;
            i += eat;
        }
        ret

=======

        let mut heap = std::collections::BinaryHeap::new();
        let mut sum = 0;
        for i in 0..apples.len() {
            heap.push((-(i as i32 + days[i]), apples[i]));
            while !heap.is_empty() {
                let (day, apple) = heap.peek().unwrap();
                if -day <= i as i32 || apple == &0 {
                    heap.pop();
                } else {
                    break;
                }
            }
            if !heap.is_empty() {
                let (_, apple) = heap.peek_mut().unwrap();
                *apple -= 1;
                sum += 1;
            }
        }
        let mut i = apples.len() as i32;
        while !heap.is_empty() {
            let (day, apple) = heap.peek().unwrap();
            if -day <= i || apple == &0 {
                heap.pop();
            } else {
                break;
            }
        }
        while !heap.is_empty() {
            let (day, apple) = heap.pop().unwrap();
            let eat = (-day - i).min(*apple);
            sum += eat;
            i += eat;
        }
        sum

=======

        let mut min_heap = std::collections::BinaryHeap::new();
        let mut i = 0;
        let mut res = 0;
        while i < apples.len() || !min_heap.is_empty() {
            if i < apples.len() && apples[i] > 0 {
                min_heap.push((-(i as i32 + days[i]), apples[i]));
            }
            while !min_heap.is_empty() && (min_heap.peek().unwrap().0 + i as i32 < 0 || min_heap.peek().unwrap().1 == 0) {
                min_heap.pop();
            }
            if !min_heap.is_empty() {
                let (d, a) = min_heap.peek_mut().unwrap();
                *a -= 1;
                res += 1;
            }
            i += 1;
        }
        res

=======

        let mut v = vec![];
        let mut ans = 0;
        for i in 0..apples.len() {
            if apples[i] > 0 {
                v.push((i + days[i] as usize, apples[i]));
            }
            v.sort_by(|a, b| a.0.cmp(&b.0));
            while v.len() > 0 && v[0].0 <= i {
                v.remove(0);
            }
            if v.len() > 0 {
                ans += 1;
                v[0].1 -= 1;
                if v[0].1 == 0 {
                    v.remove(0);
                }
            }
        }
        let mut i = apples.len();
        while v.len() > 0 {
            v.sort_by(|a, b| a.0.cmp(&b.0));
            for j in 0..v.len() {
                if v[j].0 > i {
                    ans += v[j].0 - i;
                    i = v[j].0;
                    break;
                }
            }
            while v.len() > 0 && v[0].0 <= i {
                v.remove(0);
            }
            if v.len() > 0 {
                ans += 1;
                v[0].1 -= 1;
                if v[0].1 == 0 {
                    v.remove(0);
                }
            }
            i += 1;
        }
        ans
    }
}

=======

        
    }
}

=======

        let mut res = 0;
        let mut days = days.into_iter().zip(apples.into_iter()).collect::<Vec<_>>();
        days.sort_by_key(|x| x.0);
        let mut i = 0;
        let mut j = 0;
        let mut pq = std::collections::BinaryHeap::new();
        while i < days.len() || !pq.is_empty() {
            if i < days.len() && days[i].0 == j {
                pq.push(days[i].1);
                i += 1;
            }
            if !pq.is_empty() {
                let mut top = pq.pop().unwrap();
                if top > 0 {
                    res += 1;
                    top -= 1;
                    if top > 0 {
                        pq.push(top);
                    }
                }
            }
            j += 1;
        }
        res
    }
}

=======

        let mut apples = apples.iter().zip(days.iter()).collect::<Vec<_>>();
        apples.sort_by_key(|&x| x.1);
        let mut heap = std::collections::BinaryHeap::new();
        let mut i = 0;
        let mut ans = 0;
        for d in 0.. {
            while i < apples.len() && apples[i].1 <= &d {
                i += 1;
            }
            for j in i..apples.len() {
                heap.push(std::cmp::Reverse((d + apples[j].1, apples[j].0)));
            }
            while let Some(std::cmp::Reverse((expire, apple))) = heap.pop() {
                if expire > d {
                    ans += 1;
                    if apple > 1 {
                        heap.push(std::cmp::Reverse((expire, apple - 1)));
                    }
                    break;
                }
            }
            if i == apples.len() && heap.is_empty() {
                break;
            }
        }
        ans
