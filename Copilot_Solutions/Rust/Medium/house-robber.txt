Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        if nums.len() == 0 {
            return 0;
        }
        if nums.len() == 1 {
            return nums[0];
        }
        let mut dp = vec![0; nums.len()];
        dp[0] = nums[0];
        dp[1] = nums[1].max(nums[0]);
        for i in 2..nums.len() {
            dp[i] = dp[i - 1].max(dp[i - 2] + nums[i]);
        }
        dp[nums.len() - 1]
    }
}

=======
Suggestion 2

        let mut dp = vec![0; nums.len() + 2];
        for i in 0..nums.len() {
            dp[i + 2] = std::cmp::max(dp[i] + nums[i], dp[i + 1]);
        }
        dp[nums.len() + 1]

=======
Suggestion 3

        let mut dp = vec![0; nums.len() + 2];
        for i in 0..nums.len() {
            dp[i + 2] = std::cmp::max(dp[i] + nums[i], dp[i + 1]);
        }
        dp[nums.len() + 1]
    }
}

=======
Suggestion 4

        let mut dp = vec![0; nums.len() + 2];
        for i in (0..nums.len()).rev() {
            dp[i] = std::cmp::max(dp[i + 1], dp[i + 2] + nums[i]);
        }
        dp[0]
    }
}

=======
Suggestion 5

        let mut dp = vec![0; nums.len() + 2];
        for i in 0..nums.len() {
            dp[i + 2] = std::cmp::max(dp[i], dp[i + 1]) + nums[i];
        }
        std::cmp::max(dp[nums.len()], dp[nums.len() + 1])

=======
Suggestion 6

        let mut dp = vec![0; nums.len() + 1];
        for i in 1..nums.len() + 1 {
            dp[i] = std::cmp::max(dp[i - 1], dp[i - 2] + nums[i - 1]);
        }
        dp[nums.len()]
    }
}

=======
Suggestion 7

        let mut dp: Vec<i32> = vec![0; nums.len()];
        for i in 0..nums.len() {
            let mut max = 0;
            for j in 0..i {
                if dp[j] > max {
                    max = dp[j];
                }
            }
            dp[i] = max + nums[i];
        }
        let mut max = 0;
        for i in 0..dp.len() {
            if dp[i] > max {
                max = dp[i];
            }
        }
        max

=======
Suggestion 8

        let mut dp = vec![0; nums.len() + 2];
        for (i, &money) in nums.iter().enumerate() {
            dp[i + 2] = std::cmp::max(dp[i + 1], dp[i] + money);
        }
        *dp.last().unwrap()
