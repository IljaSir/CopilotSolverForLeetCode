Synthesizing 10/10 solutions

=======

        let mut s = n.to_string().chars().collect::<Vec<_>>();
        let mut i = 1;
        while i < s.len() && s[i - 1] <= s[i] {
            i += 1;
        }
        while i > 0 && i < s.len() && s[i - 1] > s[i] {
            s[i - 1] = (s[i - 1] as u8 - 1) as char;
            i -= 1;
        }
        for j in i + 1..s.len() {
            s[j] = '9';
        }
        s.iter().collect::<String>().parse::<i32>().unwrap()

=======

        let mut n = n.to_string().chars().collect::<Vec<char>>();
        let mut i = 1;
        while i < n.len() && n[i - 1] <= n[i] {
            i += 1;
        }
        if i < n.len() {
            while i > 0 && n[i - 1] > n[i] {
                n[i - 1] = (n[i - 1] as u8 - 1) as char;
                i -= 1;
            }
            for j in (i + 1)..n.len() {
                n[j] = '9';
            }
        }
        n.iter().collect::<String>().parse::<i32>().unwrap()

=======

        let mut digits = Vec::new();
        let mut n = n;
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut i = 1;
        while i < digits.len() && digits[i] >= digits[i - 1] {
            i += 1;
        }
        if i < digits.len() {
            while i > 0 && digits[i] < digits[i - 1] {
                digits[i - 1] -= 1;
                i -= 1;
            }
            for j in i + 1..digits.len() {
                digits[j] = 9;
            }
        }
        digits.iter().fold(0, |acc, d| acc * 10 + d)
    }
}

=======

        let mut n = n;
        let mut digits: Vec<i32> = vec![];
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut i = 1;
        while i < digits.len() && digits[i - 1] <= digits[i] {
            i += 1;
        }
        if i < digits.len() {
            while i > 0 && digits[i - 1] > digits[i] {
                digits[i - 1] -= 1;
                i -= 1;
            }
            for i in (i + 1)..digits.len() {
                digits[i] = 9;
            }
        }
        digits.iter().fold(0, |acc, x| acc * 10 + x)

=======

        let mut n = n;
        let mut digits = Vec::new();
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut i = 1;
        while i < digits.len() && digits[i] >= digits[i - 1] {
            i += 1;
        }
        if i < digits.len() {
            while i > 0 && digits[i] < digits[i - 1] {
                digits[i - 1] -= 1;
                i -= 1;
            }
            for j in i + 1..digits.len() {
                digits[j] = 9;
            }
        }
        let mut ans = 0;
        for &d in &digits {
            ans = ans * 10 + d;
        }
        ans

=======

        let mut digits: Vec<u8> = n.to_string().into_bytes();
        let mut i = 1;
        while i < digits.len() && digits[i - 1] <= digits[i] {
            i += 1;
        }
        while i > 0 && i < digits.len() && digits[i - 1] > digits[i] {
            digits[i - 1] -= 1;
            i -= 1;
        }
        for i in i + 1..digits.len() {
            digits[i] = b'9';
        }
        std::str::from_utf8(&digits).unwrap().parse().unwrap()
    }
}

=======

        let mut n = n;
        let mut digits = vec![];
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.reverse();
        let mut i = 1;
        while i < digits.len() && digits[i - 1] <= digits[i] {
            i += 1;
        }
        if i < digits.len() {
            while i > 0 && digits[i - 1] > digits[i] {
                digits[i - 1] -= 1;
                i -= 1;
            }
            for j in i + 1..digits.len() {
                digits[j] = 9;
            }
        }
        let mut res: i32 = 0;
        for d in digits {
            res = res * 10 + d as i32;
        }
        res
    }
}

=======

        if n < 10 {
            return n;
        }
        let mut v = Vec::new();
        let mut n = n;
        while n > 0 {
            v.push(n % 10);
            n = n / 10;
        }
        let mut i = v.len() - 1;
        while i > 0 {
            if v[i] > v[i - 1] {
                v[i - 1] -= 1;
                for j in i .. v.len() {
                    v[j] = 9;
                }
            }
            i -= 1;
        }
        let mut r = 0;
        for i in (0 .. v.len()).rev() {
            r = r * 10 + v[i];
        }
        r
    }
}

=======

        let mut n = n;
        let mut base = 1;
        let mut last = 9;
        let mut res = 0;
        while n > 0 {
            let digit = n % 10;
            n /= 10;
            if digit > last {
                res = (digit - 1) * base + 10_i32.pow(base.to_string().len() as u32) - 1;
                base *= 10;
                last = digit - 1;
            } else {
                res = digit * base + res;
                base *= 10;
                last = digit;
            }
        }
        res

=======

        let mut n = n;
        let mut ans = 0;
        let mut base = 1;
        while n > 0 {
            let cur = n % 10;
            n /= 10;
            let mut tmp = n % 10;
            if tmp > cur {
                tmp -= 1;
                n -= 1;
            }
            ans += (tmp * base) + (9 * base);
            base *= 10;
        }
        ans
