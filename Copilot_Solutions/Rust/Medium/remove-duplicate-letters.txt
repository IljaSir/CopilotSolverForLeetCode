Synthesizing 4/10 solutions

=======
Suggestion 1

        let mut s = s.chars().collect::<Vec<char>>();
        let mut last = [0; 26];
        let mut seen = [false; 26];
        for (i, c) in s.iter().enumerate() {
            last[(c as u8 - 'a' as u8) as usize] = i;
        }
        let mut stack = Vec::new();
        for (i, c) in s.iter().enumerate() {
            let idx = (c as u8 - 'a' as u8) as usize;
            if seen[idx] {
                continue;
            }
            while let Some(&top) = stack.last() {
                if top > *c && i < last[(top as u8 - 'a' as u8) as usize] {
                    seen[(top as u8 - 'a' as u8) as usize] = false;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(*c);
            seen[idx] = true;
        }
        stack.iter().collect::<String>()
    }
}

=======
Suggestion 2

        let mut last = [0; 26];
        let mut seen = [false; 26];
        let mut stack = Vec::new();
        let mut res = String::new();
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i;
        }
        for (i, c) in s.chars().enumerate() {
            let index = (c as u8 - b'a') as usize;
            if seen[index] {
                continue;
            }
            while let Some(&v) = stack.last() {
                if v > c && last[(v as u8 - b'a') as usize] > i {
                    seen[(v as u8 - b'a') as usize] = false;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(c);
            seen[index] = true;
        }
        for c in stack {
            res.push(c);
        }
        res
    }
}

=======
Suggestion 3

        let mut stack = Vec::new();
        let mut visited = vec![false; 26];
        let mut last_occurrence = vec![0; 26];
        let s = s.as_bytes();
        for i in 0..s.len() {
            last_occurrence[(s[i] - b'a') as usize] = i;
        }
        for i in 0..s.len() {
            let c = (s[i] - b'a') as usize;
            if visited[c] {
                continue;
            }
            while let Some(&top) = stack.last() {
                if top > c && i < last_occurrence[top] {
                    visited[top] = false;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(c);
            visited[c] = true;
        }
        let mut res = Vec::new();
        for &c in &stack {
            res.push((c as u8 + b'a') as char);
        }
        res.iter().collect()
    }
}

=======
Suggestion 4

        let mut stack = vec![];
        let mut last_index = [0; 26];
        let mut visited = [false; 26];
        let mut s = s.as_bytes().iter().map(|&c| (c - b'a') as usize).collect::<Vec<_>>();
        for (i, &c) in s.iter().enumerate() {
            last_index[c] = i;
        }
        for (i, &c) in s.iter().enumerate() {
            if visited[c] {
                continue;
            }
            while !stack.is_empty() && stack[stack.len() - 1] > c && i < last_index[stack[stack.len() - 1]] {
                let top = stack.pop().unwrap();
                visited[top] = false;
            }
            stack.push(c);
            visited[c] = true;
        }
        stack.iter().map(|&c| (c as u8 + b'a') as char).collect()
    }
}
