Synthesizing 9/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = nums.iter().sum::<i32>();
        let mut count = 0;
        for i in (0..nums.len()).rev() {
            sum -= nums[i];
            count += 1;
            if sum * 2 < nums[i] {
                break;
            }
        }
        count
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = nums.iter().sum::<i32>();
        let mut count = 0;
        for i in (0..nums.len()).rev() {
            count += 1;
            sum -= nums[i];
            if sum * 2 < nums[i] {
                return count;
            }
        }
        count
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = nums.iter().sum::<i32>();
        let mut ans = 0;
        while sum >= nums.iter().sum::<i32>() * 2 {
            sum -= nums.pop().unwrap();
            ans += 1;
        }
        ans
    }
}

=======

        let mut nums = nums;
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        nums.sort_unstable();
        let mut res = 0;
        let mut i = nums.len() - 1;
        while sum > sum / 2 {
            sum -= nums[i];
            i -= 1;
            res += 1;
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = nums.iter().sum::<i32>();
        let mut res = 0;
        while sum > 0 {
            let n = nums.pop().unwrap();
            sum -= n;
            res += 1;
            if sum * 2 < n {
                break;
            }
        }
        res
    }
}

=======

        
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = nums.iter().sum::<i32>();
        let mut i = 0;
        let mut res = 0;
        while sum > 0 {
            sum -= nums[i];
            i += 1;
            res += 1;
        }
        res
    }
}

=======

        let mut sum = nums.iter().fold(0, |acc, x| acc + x);
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while sum >= sum/2 {
            sum -= nums[i];
            i += 1;
        }
        i as i32

=======

        let mut nums = nums;
        let mut sum = nums.iter().sum::<i32>();
        nums.sort_unstable();

        let mut i = nums.len() - 1;
        let mut count = 0;
        while sum > 0 {
            sum -= nums[i];
            i -= 1;
            count += 1;
        }
        count
