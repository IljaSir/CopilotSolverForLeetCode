Synthesizing 5/10 solutions

=======

        
    }
}

=======

        let mut p: Vec<i32> = (1..=m).collect();
        let mut res: Vec<i32> = Vec::new();
        for q in queries {
            let i = p.iter().position(|&x| x == q).unwrap();
            res.push(i as i32);
            p.remove(i);
            p.insert(0, q);
        }
        res

=======

        let mut p = Vec::new();
        for i in 1..=m {
            p.push(i);
        }
        let mut ans = Vec::new();
        for i in 0..queries.len() {
            let mut j = 0;
            while p[j] != queries[i] {
                j += 1;
            }
            ans.push(j as i32);
            let mut k = j;
            while k > 0 {
                p.swap(k, k-1);
                k -= 1;
            }
        }
        ans

=======

        let mut p: Vec<i32> = (1..=m).collect();
        let mut res = Vec::new();
        for i in queries {
            let pos = p.iter().position(|&x| x == i).unwrap();
            res.push(pos as i32);
            p.remove(pos);
            p.insert(0, i);
        }
        res

=======

        let mut p = (1..=m).collect::<Vec<i32>>();
        let mut res = Vec::new();
        for i in queries {
            let index = p.iter().position(|&x| x == i).unwrap();
            res.push(index as i32);
            p.remove(index);
            p.insert(0, i);
        }
        res
