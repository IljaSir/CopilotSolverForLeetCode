Synthesizing 10/10 solutions

=======

        let mut left = [0; 26];
        let mut right = [0; 26];
        for c in s.as_bytes() {
            right[(c - b'a') as usize] += 1;
        }
        let mut ans = 0;
        for c in s.as_bytes() {
            left[(c - b'a') as usize] += 1;
            right[(c - b'a') as usize] -= 1;
            if left.iter().filter(|&x| *x > 0).count() == right.iter().filter(|&x| *x > 0).count() {
                ans += 1;
            }
        }
        ans

=======

        let mut left = vec![0; 26];
        let mut right = vec![0; 26];
        let mut left_count = 0;
        let mut right_count = 0;
        let mut result = 0;
        for c in s.chars() {
            let idx = c as usize - 'a' as usize;
            if right[idx] == 0 {
                right_count += 1;
            }
            right[idx] += 1;
        }
        for c in s.chars() {
            let idx = c as usize - 'a' as usize;
            if left[idx] == 0 {
                left_count += 1;
            }
            left[idx] += 1;
            right[idx] -= 1;
            if right[idx] == 0 {
                right_count -= 1;
            }
            if left_count == right_count {
                result += 1;
            }
        }
        result

=======

        let mut left = vec![0; 26];
        let mut right = vec![0; 26];
        let mut left_count = 0;
        let mut right_count = 0;
        let mut count = 0;
        let mut chars = s.chars();
        while let Some(c) = chars.next() {
            let index = (c as u8 - b'a') as usize;
            if right[index] == 0 {
                right_count += 1;
            }
            right[index] += 1;
        }
        for c in s.chars() {
            let index = (c as u8 - b'a') as usize;
            if left[index] == 0 {
                left_count += 1;
            }
            left[index] += 1;
            if left[index] == right[index] {
                right_count -= 1;
                left_count -= 1;
            }
            if left_count == right_count {
                count += 1;
            }
        }
        count

=======

        let mut left: Vec<i32> = vec![0; 26];
        let mut right: Vec<i32> = vec![0; 26];
        let mut count = 0;
        for c in s.chars() {
            right[c as usize - 'a' as usize] += 1;
            if right[c as usize - 'a' as usize] == 1 {
                count += 1;
            }
        }
        let mut res = 0;
        for c in s.chars() {
            left[c as usize - 'a' as usize] += 1;
            if left[c as usize - 'a' as usize] == right[c as usize - 'a' as usize] {
                count -= 1;
            }
            if left[c as usize - 'a' as usize] == right[c as usize - 'a' as usize] + 1 {
                count += 1;
            }
            if count == 0 {
                res += 1;
            }
        }
        res

=======

        let mut count = 0;
        let mut left = [0; 26];
        let mut right = [0; 26];
        let mut left_count = 0;
        let mut right_count = 0;
        for c in s.chars() {
            let index = c as usize - 97;
            if right[index] == 0 {
                right_count += 1;
            }
            right[index] += 1;
        }
        for c in s.chars() {
            let index = c as usize - 97;
            left[index] += 1;
            if left[index] == 1 {
                left_count += 1;
            }
            right[index] -= 1;
            if right[index] == 0 {
                right_count -= 1;
            }
            if left_count == right_count {
                count += 1;
            }
        }
        count

=======

        let mut res = 0;
        let mut left = vec![0; 26];
        let mut right = vec![0; 26];
        let mut left_cnt = 0;
        let mut right_cnt = 0;
        for c in s.chars() {
            let i = (c as u8 - 'a' as u8) as usize;
            if right[i] == 0 {
                right_cnt += 1;
            }
            right[i] += 1;
        }
        for c in s.chars() {
            let i = (c as u8 - 'a' as u8) as usize;
            if left[i] == 0 {
                left_cnt += 1;
            }
            left[i] += 1;
            if right[i] == 1 {
                right_cnt -= 1;
            }
            right[i] -= 1;
            if left_cnt == right_cnt {
                res += 1;
            }
        }
        res

=======

        let mut left: Vec<i32> = vec![0; 26];
        let mut right: Vec<i32> = vec![0; 26];
        let mut lcount = 0;
        let mut rcount = 0;
        let mut count = 0;
        for c in s.chars() {
            let idx = (c as u8 - 'a' as u8) as usize;
            if right[idx] == 0 {
                rcount += 1;
            }
            right[idx] += 1;
        }
        for c in s.chars() {
            let idx = (c as u8 - 'a' as u8) as usize;
            if left[idx] == 0 {
                lcount += 1;
            }
            left[idx] += 1;
            right[idx] -= 1;
            if right[idx] == 0 {
                rcount -= 1;
            }
            if lcount == rcount {
                count += 1;
            }
        }
        count

=======

        let mut left = vec![0; 26];
        let mut right = vec![0; 26];
        let mut result = 0;
        let mut left_count = 0;
        let mut right_count = 0;
        for c in s.as_bytes() {
            let i = *c - b'a';
            if right[i as usize] == 0 {
                right_count += 1;
            }
            right[i as usize] += 1;
        }
        for c in s.as_bytes() {
            let i = *c - b'a';
            left[i as usize] += 1;
            if left[i as usize] == 1 {
                left_count += 1;
            }
            right[i as usize] -= 1;
            if right[i as usize] == 0 {
                right_count -= 1;
            }
            if left_count == right_count {
                result += 1;
            }
        }
        result

=======

        let mut left = vec![0;26];
        let mut right = vec![0;26];
        let s = s.as_bytes();
        let n = s.len();
        for i in 0..n {
            right[(s[i] - b'a') as usize] += 1;
        }
        let mut res = 0;
        for i in 0..n-1 {
            left[(s[i] - b'a') as usize] += 1;
            right[(s[i] - b'a') as usize] -= 1;
            if left.iter().filter(|&x| *x > 0).count() == right.iter().filter(|&x| *x > 0).count() {
                res += 1;
            }
        }
        res

=======

        let mut l = vec![0; 26];
        let mut r = vec![0; 26];
        let mut result = 0;
        for c in s.chars() {
            r[c as usize - 'a' as usize] += 1;
        }
        for c in s.chars() {
            r[c as usize - 'a' as usize] -= 1;
            l[c as usize - 'a' as usize] += 1;
            if l.iter().filter(|&&x| x > 0).count() == r.iter().filter(|&&x| x > 0).count() {
                result += 1;
            }
        }
        result
