Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut left = 0;
        let mut right = 0;
        let mut collisions = 0;
        for c in directions.chars() {
            match c {
                'L' => left += 1,
                'R' => {
                    collisions += left;
                    right += 1;
                },
                _ => collisions += right,
            }
        }
        collisions

=======

        let mut collisions = 0;
        let mut left = 0;
        let mut right = 0;
        for c in directions.chars() {
            match c {
                'L' => left += 1,
                'R' => right += 1,
                'S' => {
                    let min = left.min(right);
                    collisions += min;
                    left -= min;
                    right -= min;
                },
                _ => {},
            }
        }
        collisions

=======

        let mut count = 0;
        let mut left = 0;
        let mut right = 0;
        for c in directions.chars() {
            match c {
                'L' => {
                    left += 1;
                    count += right;
                },
                'R' => {
                    right += 1;
                },
                'S' => {
                    count += right;
                },
                _ => {}
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut left = 0;
        for c in directions.chars() {
            match c {
                'L' => left += 1,
                'R' => count += left,
                'S' => (),
                _ => (),
            }
        }
        count

=======

        let mut ret = 0;
        let mut left = 0;
        let mut right = 0;
        for c in directions.chars() {
            if c == 'R' {
                ret += left;
                right += 1;
            } else if c == 'L' {
                ret += right;
                left += 1;
            } else {
                ret += left;
                ret += right;
            }
        }
        ret

=======

        
    }
}

=======

        let mut res = 0;
        let mut l = 0;
        let mut r = 0;
        let mut last = 'S';
        for c in directions.chars() {
            if c == 'L' {
                l += 1;
                if last == 'R' {
                    res += 2;
                }
            } else if c == 'R' {
                r += 1;
                if last == 'L' {
                    res += 2;
                }
            } else {
                if last == 'L' {
                    res += l;
                } else if last == 'R' {
                    res += r;
                }
                l = 0;
                r = 0;
            }
            last = c;
        }
        if last == 'L' {
            res += l;
        } else if last == 'R' {
            res += r;
        }
        res

=======

        let mut collisions = 0;
        let mut left_car = 0;
        let mut right_car = 0;
        for i in 0..directions.len() {
            match directions.chars().nth(i).unwrap() {
                'L' => left_car += 1,
                'R' => right_car += 1,
                'S' => {
                    collisions += left_car * right_car;
                    left_car = 0;
                    right_car = 0;
                }
                _ => (),
            }
        }
        collisions
