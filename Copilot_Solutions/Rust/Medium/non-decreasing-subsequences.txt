Synthesizing 6/10 solutions

=======
Suggestion 1

        
    }
}

=======
Suggestion 2

        let mut res = Vec::new();
        let mut path = Vec::new();
        Self::backtrack(&nums, 0, &mut path, &mut res);
        res
    }
    fn backtrack(nums: &Vec<i32>, start: usize, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if path.len() >= 2 {
            res.push(path.clone());
        }
        let mut used = Vec::new();
        for i in start..nums.len() {
            if used.contains(&nums[i]) {
                continue;
            }
            if path.is_empty() || path[path.len() - 1] <= nums[i] {
                path.push(nums[i]);
                used.push(nums[i]);
                Self::backtrack(nums, i + 1, path, res);
                path.pop();
            }
        }

=======
Suggestion 3

        let mut res = vec![];
        let mut seq = vec![];
        Self::dfs(&nums, 0, &mut seq, &mut res);
        res
    }
    
    fn dfs(nums: &[i32], start: usize, seq: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if seq.len() >= 2 {
            res.push(seq.clone());
        }
        let mut used = std::collections::HashSet::new();
        for i in start..nums.len() {
            if used.contains(&nums[i]) {
                continue;
            }
            if seq.is_empty() || seq.last().unwrap() <= &nums[i] {
                seq.push(nums[i]);
                used.insert(nums[i]);
                Self::dfs(nums, i + 1, seq, res);
                seq.pop();
            }
        }

=======
Suggestion 4

        let mut ans = vec![];
        let mut sub = vec![];
        Self::dfs(&nums, &mut ans, &mut sub, 0);
        ans
    }
    fn dfs(nums: &[i32], ans: &mut Vec<Vec<i32>>, sub: &mut Vec<i32>, start: usize) {
        if sub.len() > 1 {
            ans.push(sub.clone());
        }
        let mut used = vec![false; 201];
        for i in start..nums.len() {
            if used[(nums[i] + 100) as usize] {
                continue;
            }
            if sub.is_empty() || sub[sub.len() - 1] <= nums[i] {
                used[(nums[i] + 100) as usize] = true;
                sub.push(nums[i]);
                Self::dfs(nums, ans, sub, i + 1);
                sub.pop();
            }
        }

=======
Suggestion 5

        let mut result = Vec::new();
        let mut buf = Vec::new();
        Self::dfs(&nums, 0, &mut buf, &mut result);
        result
    }
    
    fn dfs(nums: &[i32], start: usize, buf: &mut Vec<i32>, result: &mut Vec<Vec<i32>>) {
        if buf.len() >= 2 {
            result.push(buf.clone());
        }
        let mut used = [false; 201];
        for i in start..nums.len() {
            if used[(nums[i] + 100) as usize] {
                continue;
            }
            if buf.is_empty() || nums[i] >= *buf.last().unwrap() {
                used[(nums[i] + 100) as usize] = true;
                buf.push(nums[i]);
                Self::dfs(nums, i + 1, buf, result);
                buf.pop();
            }
        }

=======
Suggestion 6

        let mut res = vec![];
        let mut path = vec![];
        let mut used = vec![false; nums.len()];
        Self::dfs(nums.as_slice(), &mut path, &mut res, &mut used);
        res
    }
    fn dfs(nums: &[i32], path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>, used: &mut Vec<bool>) {
        if path.len() >= 2 {
            res.push(path.clone());
        }
        let mut used_val = vec![];
        for i in 0..nums.len() {
            if used[i] || (!used_val.is_empty() && nums[i] == used_val[used_val.len() - 1]) {
                continue;
            }
            if path.is_empty() || nums[i] >= path[path.len() - 1] {
                path.push(nums[i]);
                used[i] = true;
                used_val.push(nums[i]);
                Self::dfs(nums, path, res, used);
                path.pop();
                used[i] = false;
            }
        }
