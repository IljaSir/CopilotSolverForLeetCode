Synthesizing 10/10 solutions

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = 'a';
        for c in word.chars() {
            if c < prev {
                count = 0;
            }
            count += 1;
            if c == 'u' {
                max = max.max(count);
            }
            prev = c;
        }
        max
    }
}

=======

        let mut max = 0;
        let mut count = 1;
        let mut prev = word.chars().nth(0).unwrap();
        for c in word.chars().skip(1) {
            if c < prev {
                if count == 5 {
                    max = std::cmp::max(max, count);
                }
                count = 1;
            } else if c == prev {
                count += 1;
            } else if c > prev {
                if prev == 'a' {
                    count += 1;
                } else if prev == 'e' {
                    count += 1;
                } else if prev == 'i' {
                    count += 1;
                } else if prev == 'o' {
                    count += 1;
                } else if prev == 'u' {
                    count += 1;
                }
            }
            prev = c;
        }
        if count == 5 {
            max = std::cmp::max(max, count);
        }
        max

=======

        let mut max = 0;
        let mut count = 0;
        let mut last = 'a';
        for c in word.chars() {
            if c < last {
                count = 0;
            }
            if c != last {
                last = c;
                count = 1;
            } else {
                count += 1;
            }
            if c == 'u' {
                max = max.max(count);
            }
        }
        max as i32

=======

        let mut max = 0;
        let mut count = 0;
        let mut last = 'a';
        for c in word.chars() {
            if c >= last {
                count += 1;
                if c == 'u' {
                    max = std::cmp::max(max, count);
                }
            } else {
                count = 1;
            }
            last = c;
        }
        max as i32

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = ' ';
        for c in word.chars() {
            if c < prev {
                count = 0;
            }
            count += 1;
            if c == 'u' {
                max = max.max(count);
            }
            prev = c;
        }
        max
    }
}

=======

        let mut res = 0;
        let mut count = 0;
        let mut last = 'a';
        for c in word.chars() {
            if c < last {
                count = 0;
            }
            if c == last {
                count += 1;
            }
            if c > last {
                if c == 'a' {
                    res = res.max(count);
                    count = 0;
                }
                count += 1;
            }
            last = c;
        }
        if last == 'u' {
            res = res.max(count);
        }
        res

=======

        let mut longest = 0;
        let mut start = 0;
        let mut end = 0;
        let mut prev = 0;
        for c in word.chars() {
            let i = match c {
                'a' => 0,
                'e' => 1,
                'i' => 2,
                'o' => 3,
                'u' => 4,
                _ => unreachable!(),
            };
            if i >= prev {
                if i > prev {
                    start = end;
                }
                end += 1;
                if i == 4 {
                    longest = longest.max(end - start);
                }
            } else {
                start = end;
            }
            prev = i;
        }
        longest as i32
    }
}

=======

        let mut cur = ' ';
        let mut start = 0;
        let mut max = 0;
        let mut count = 0;
        for (i, c) in word.chars().enumerate() {
            if c < cur {
                start = i;
                count = 0;
            }
            if c > cur {
                count += 1;
            }
            if count == 5 {
                max = max.max(i - start + 1);
            }
            cur = c;
        }
        max as i32

=======

        let mut count = 0;
        let mut max = 0;
        let mut prev = 'a';
        let mut found = false;
        let mut last = 'a';
        for c in word.chars() {
            if c < prev {
                count = 0;
                found = false;
            }
            if c == last {
                count += 1;
            } else if c == prev {
                count += 1;
            } else {
                if c == 'a' {
                    if found {
                        max = max.max(count);
                    }
                    found = false;
                    count = 1;
                } else if c == 'e' || c == 'i' || c == 'o' || c == 'u' {
                    if c == 'e' {
                        if count > 0 {
                            found = true;
                        }
                    }
                    count += 1;
                } else {
                    count = 0;
                    found = false;
                }
            }
            last = c;
            prev = c;
        }
        if found {
            max = max.max(count);
        }
        max

=======

        let mut c = 0;
        let mut max = 0;
        let mut s = 0;
        for (i, ch) in word.chars().enumerate() {
            if i == 0 || ch == word.chars().nth(i - 1).unwrap() {
                c += 1;
            } else if ch > word.chars().nth(i - 1).unwrap() {
                c += 1;
                s += 1;
            } else {
                c = 1;
                s = 0;
            }
            if s == 4 {
                max = max.max(c);
            }
        }
        max
