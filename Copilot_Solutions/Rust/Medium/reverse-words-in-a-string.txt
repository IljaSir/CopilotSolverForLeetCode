Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        s.split_whitespace().rev().collect::<Vec<&str>>().join(" ")
    }
}

=======
Suggestion 2

        s.split_whitespace().rev().collect::<Vec<&str>>().join(" ")

=======
Suggestion 3

        let mut words = Vec::new();
        let mut word = String::new();
        for c in s.chars() {
            if c == ' ' {
                if !word.is_empty() {
                    words.push(word.clone());
                    word.clear();
                }
            } else {
                word.push(c);
            }
        }
        if !word.is_empty() {
            words.push(word);
        }
        words.reverse();
        words.join(" ")
    }
}

=======
Suggestion 4

        let mut v: Vec<&str> = s.split_whitespace().collect();
        v.reverse();
        v.join(" ")
    }
}

=======
Suggestion 5

        let mut words = s.split_whitespace().collect::<Vec<&str>>();
        words.reverse();
        words.join(" ")

=======
Suggestion 6

        let mut words = s.split_whitespace();
        let mut result = String::new();
        while let Some(word) = words.next() {
            result = format!("{} {}", word, result);
        }
        result.trim().to_string()
    }
}

=======
Suggestion 7

        let mut result = String::new();
        let mut stack = Vec::new();
        for c in s.chars() {
            if c == ' ' {
                while let Some(x) = stack.pop() {
                    result.push(x);
                }
                result.push(' ');
            } else {
                stack.push(c);
            }
        }
        while let Some(x) = stack.pop() {
            result.push(x);
        }
        result.trim().to_string()

=======
Suggestion 8

        let s = s.trim();
        let mut s = s.split_whitespace();
        let mut res = String::new();
        while let Some(word) = s.next() {
            res.insert_str(0, word);
            res.insert(0, ' ');
        }
        res.trim().to_string()
    }
}
