Synthesizing 10/10 solutions

=======

        if n == 1 {
            return 0;
        }
        if k % 2 == 0 {
            if Self::kth_grammar(n - 1, k / 2) == 0 {
                return 1;
            } else {
                return 0;
            }
        } else {
            if Self::kth_grammar(n - 1, (k + 1) / 2) == 0 {
                return 0;
            } else {
                return 1;
            }
        }

=======

        if n == 1 {
            return 0;
        }
        let parent = Self::kth_grammar(n - 1, (k + 1) / 2);
        if parent == 0 {
            if k % 2 == 0 {
                return 1;
            } else {
                return 0;
            }
        } else {
            if k % 2 == 0 {
                return 0;
            } else {
                return 1;
            }
        }

=======

        if n == 1 {
            return 0;
        }
        let mid = 1 << (n-2);
        if k <= mid {
            return Self::kth_grammar(n-1, k);
        } else {
            return 1 - Self::kth_grammar(n-1, k-mid);
        }

=======

        let mut k = k - 1;
        let mut ans = 0;
        while k > 0 {
            ans += k & 1;
            k >>= 1;
        }
        ans & 1

=======

        if n == 1 {
            return 0;
        }
        if k % 2 == 0 {
            return 1 - Solution::kth_grammar(n-1, k/2);
        }
        Solution::kth_grammar(n-1, (k+1)/2)
    }
}

=======

        let mut k = k;
        let mut res = 0;
        while k > 1 {
            if k % 2 == 0 {
                res ^= 1;
            }
            k = (k + 1) / 2;
        }
        res

=======

        let mut k = k;
        let mut res = 0;
        for _ in 0..n-1 {
            if k % 2 == 0 {
                res = 1 - res;
            }
            k = (k + 1) / 2;
        }
        res

=======

        if n == 1 {
            return 0;
        }
        let k = k - 1;
        let n = n - 1;
        let mid = 1 << (n - 1);
        if k < mid {
            return Self::kth_grammar(n, k + 1);
        }
        if Self::kth_grammar(n, k - mid + 1) == 0 {
            return 1;
        }
        0

=======

        let mut k = k - 1;
        let mut ans = 0;
        for i in 0..n {
            ans ^= (k >> i) & 1;
        }
        ans
    }
}

=======

        let mut k = k as usize;
        let mut n = n as usize;
        let mut res = 0;
        while n > 1 {
            let mid = 1 << (n - 2);
            if k > mid {
                res ^= 1;
                k -= mid;
            }
            n -= 1;
        }
        res
