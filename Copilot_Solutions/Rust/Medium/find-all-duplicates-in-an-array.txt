Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut result = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let index = (nums[i].abs() - 1) as usize;
            if nums[index] < 0 {
                result.push(nums[i].abs());
            } else {
                nums[index] = -nums[index];
            }
        }
        result

=======
Suggestion 2

        let mut nums = nums;
        let mut res = Vec::new();
        for i in 0..nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            if nums[idx] < 0 {
                res.push(idx as i32 + 1);
            } else {
                nums[idx] *= -1;
            }
        }
        res

=======
Suggestion 3

        let mut result = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let index = nums[i].abs() as usize - 1;
            if nums[index] < 0 {
                result.push(index as i32 + 1);
            } else {
                nums[index] *= -1;
            }
        }
        result

=======
Suggestion 4

        let mut nums = nums;
        let mut res = Vec::new();
        for i in 0..nums.len() {
            let idx = nums[i].abs() as usize - 1;
            if nums[idx] < 0 {
                res.push(nums[idx].abs());
            } else {
                nums[idx] *= -1;
            }
        }
        res

=======
Suggestion 5

        let mut nums = nums;
        let mut res = vec![];
        for i in 0..nums.len() {
            let index = nums[i].abs() as usize - 1;
            if nums[index] < 0 {
                res.push(index as i32 + 1);
            } else {
                nums[index] *= -1;
            }
        }
        res

=======
Suggestion 6

        let mut ans = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let idx = (nums[i].abs() - 1) as usize;
            if nums[idx] < 0 {
                ans.push(idx as i32 + 1);
            }
            nums[idx] *= -1;
        }
        ans

=======
Suggestion 7

        let mut result = Vec::new();
        let mut nums = nums;
        for num in nums {
            let index = (num.abs() - 1) as usize;
            if nums[index] < 0 {
                result.push(num.abs());
            }
            nums[index] *= -1;
        }
        result

=======
Suggestion 8

        let mut nums = nums;
        let mut result = vec![];
        let mut i = 0;
        while i < nums.len() {
            if nums[i] != (i + 1) as i32 {
                let j = nums[i] as usize - 1;
                if nums[i] == nums[j] {
                    result.push(nums[i]);
                    i += 1;
                } else {
                    nums.swap(i, j);
                }
            } else {
                i += 1;
            }
        }
        result
    }
}

=======
Suggestion 9

        let mut ans: Vec<i32> = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let num = nums[i].abs();
            let index = (num - 1) as usize;
            if nums[index] < 0 {
                ans.push(num);
            } else {
                nums[index] = -nums[index];
            }
        }
        ans

=======
Suggestion 10

        let mut ret = Vec::new();
        let mut nums = nums;
        for i in 0..nums.len() {
            let val = nums[i].abs();
            let index = val as usize - 1;
            if nums[index] < 0 {
                ret.push(val);
            } else {
                nums[index] *= -1;
            }
        }
        ret
