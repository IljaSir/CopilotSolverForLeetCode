Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut s = String::from("1");
        for _ in 1..n {
            s = Self::say(&s);
        }
        s
    }
    fn say(s: &str) -> String {
        let mut s = s.chars().peekable();
        let mut r = String::new();
        while let Some(c) = s.next() {
            let mut count = 1;
            while let Some(&next) = s.peek() {
                if next == c {
                    count += 1;
                    s.next();
                } else {
                    break;
                }
            }
            r.push_str(&count.to_string());
            r.push(c);
        }
        r

=======
Suggestion 2

        let mut s = String::from("1");
        for _ in 1..n {
            let mut t = String::new();
            let mut i = 0;
            while i < s.len() {
                let mut j = i + 1;
                while j < s.len() && s.as_bytes()[j] == s.as_bytes()[i] {
                    j += 1;
                }
                t.push((j - i) as u8 + b'0');
                t.push(s.as_bytes()[i]);
                i = j;
            }
            s = t;
        }
        s

=======
Suggestion 3

        let mut s = "1".to_string();
        for _ in 1..n {
            let mut t = String::new();
            let mut i = 0;
            while i < s.len() {
                let mut j = i;
                while j < s.len() && s.as_bytes()[j] == s.as_bytes()[i] {
                    j += 1;
                }
                t.push((j - i) as u8 + '0' as u8);
                t.push(s.as_bytes()[i]);
                i = j;
            }
            s = t;
        }
        s

=======
Suggestion 4

        let mut s = String::from("1");
        for _ in 1..n {
            s = Solution::count_and_say_once(&s);
        }
        s
    }
    
    fn count_and_say_once(s: &str) -> String {
        let mut cs = String::new();
        let mut i = 0;
        while i < s.len() {
            let mut c = 0;
            let mut j = i;
            while j < s.len() && s.as_bytes()[j] == s.as_bytes()[i] {
                c += 1;
                j += 1;
            }
            cs.push_str(&c.to_string());
            cs.push(s.as_bytes()[i] as char);
            i = j;
        }
        cs

=======
Suggestion 5

        let mut s = String::from("1");
        for _ in 1..n {
            let mut i = 0;
            let mut j = 0;
            let mut t = String::new();
            while j < s.len() {
                if s.chars().nth(i).unwrap() != s.chars().nth(j).unwrap() {
                    t.push_str(&(j - i).to_string());
                    t.push(s.chars().nth(i).unwrap());
                    i = j;
                }
                j += 1;
            }
            t.push_str(&(j - i).to_string());
            t.push(s.chars().nth(i).unwrap());
            s = t;
        }
        s

=======
Suggestion 6

        let mut s = String::from("1");
        for _ in 1..n {
            let mut i = 0;
            let mut j = 0;
            let mut t = String::new();
            while i < s.len() {
                while j < s.len() && s.as_bytes()[j] == s.as_bytes()[i] {
                    j += 1;
                }
                t += &((j - i).to_string());
                t.push(s.as_bytes()[i] as char);
                i = j;
            }
            s = t;
        }
        s

=======
Suggestion 7

        let mut s = String::from("1");
        for _ in 1..n {
            let mut count = 1;
            let mut i = 0;
            let mut tmp = String::new();
            while i < s.len() {
                if i + 1 < s.len() && s.chars().nth(i).unwrap() == s.chars().nth(i + 1).unwrap() {
                    count += 1;
                } else {
                    tmp.push_str(&count.to_string());
                    tmp.push(s.chars().nth(i).unwrap());
                    count = 1;
                }
                i += 1;
            }
            s = tmp;
        }
        s

=======
Suggestion 8

        let mut s = String::from("1");
        for _ in 2..=n {
            let mut tmp = String::new();
            let mut count = 1;
            let mut last = s.chars().nth(0).unwrap();
            for c in s.chars().skip(1) {
                if c == last {
                    count += 1;
                } else {
                    tmp.push_str(&count.to_string());
                    tmp.push(last);
                    last = c;
                    count = 1;
                }
            }
            tmp.push_str(&count.to_string());
            tmp.push(last);
            s = tmp;
        }
        s

=======
Suggestion 9

        let mut s = String::from("1");
        for _i in 1..n {
            let mut t = String::new();
            let mut count = 1;
            let mut ch = s.chars().nth(0).unwrap();
            for j in 1..s.len() {
                let c = s.chars().nth(j).unwrap();
                if c == ch {
                    count += 1;
                } else {
                    t.push_str(&count.to_string());
                    t.push(ch);
                    ch = c;
                    count = 1;
                }
            }
            t.push_str(&count.to_string());
            t.push(ch);
            s = t;
        }
        s

=======
Suggestion 10

        let mut str = String::from("1");
        for _ in 1..n {
            let mut s = String::new();
            let mut count = 1;
            let mut chars = str.chars();
            let mut c = chars.next().unwrap();
            for ch in chars {
                if ch == c {
                    count += 1;
                } else {
                    s.push_str(&count.to_string());
                    s.push(c);
                    c = ch;
                    count = 1;
                }
            }
            s.push_str(&count.to_string());
            s.push(c);
            str = s;
        }
        str
