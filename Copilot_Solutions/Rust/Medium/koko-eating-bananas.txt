Synthesizing 10/10 solutions

=======

        let (mut l, mut r) = (1, *piles.iter().max().unwrap());
        while l < r {
            let mid = (l + r) / 2;
            let hours = piles.iter().map(|p| (p - 1) / mid + 1).sum::<i32>();
            if hours > h {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l
    }
}

=======

        let mut left = 1;
        let mut right = piles.iter().max().unwrap();
        while left < right {
            let mid = left + (right - left) / 2;
            let mut hours = 0;
            for pile in piles.iter() {
                hours += pile / mid;
                if pile % mid != 0 {
                    hours += 1;
                }
            }
            if hours <= h {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left
    }
}

=======

        let (mut l, mut r) = (1, 1_000_000_000);
        while l < r {
            let m = (l + r) / 2;
            let mut t = 0;
            for &p in &piles {
                t += (p + m - 1) / m;
            }
            if t > h {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l

=======

        let mut left = 1;
        let mut right = piles.iter().max().unwrap().clone();
        while left < right {
            let mid = left + (right - left) / 2;
            let mut hours = 0;
            for pile in &piles {
                hours += pile / mid;
                if pile % mid != 0 {
                    hours += 1;
                }
            }
            if hours > h {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left

=======

        if piles.len() == 1 {
            return (piles[0] as f64 / h as f64).ceil() as i32;
        }
        let mut l = 1;
        let mut r = piles.iter().max().unwrap().clone();
        while l <= r {
            let mid = l + (r - l) / 2;
            if Self::can_finish(piles.clone(), h, mid) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        l
    }
    fn can_finish(piles: Vec<i32>, h: i32, k: i32) -> bool {
        let mut hours = 0;
        for pile in piles {
            hours += (pile as f64 / k as f64).ceil() as i32;
        }
        hours <= h

=======

        let mut left = 1;
        let mut right = piles.iter().max().unwrap().clone();
        while left < right {
            let mid = (left + right) / 2;
            let mut hours = 0;
            for pile in piles.iter() {
                hours += (pile - 1) / mid + 1;
            }
            if hours <= h {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        let mut lo = 1;
        let mut hi = 1000000000;
        while lo < hi {
            let mid = (lo + hi) / 2;
            let mut hours = 0;
            for pile in &piles {
                hours += (pile + mid - 1) / mid;
            }
            if hours <= h {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo

=======

        let mut lo = 1;
        let mut hi = piles.iter().max().unwrap().clone();
        while lo < hi {
            let mid = (lo + hi) / 2;
            let mut hours = 0;
            for pile in &piles {
                hours += (pile + mid - 1) / mid;
            }
            if hours > h {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        lo
    }
}

=======

        let (mut min, mut max) = (1, 1);
        for pile in piles.iter() {
            if *pile > max {
                max = *pile;
            }
        }
        while min < max {
            let mid = (min + max) / 2;
            if Solution::can_finish(piles.iter(), mid, h) {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        min
    }
    fn can_finish<'a, I>(piles: I, speed: i32, h: i32) -> bool
    where
        I: Iterator<Item = &'a i32>,
    {
        let mut hours = 0;
        for pile in piles {
            hours += (pile + speed - 1) / speed;
            if hours > h {
                return false;
            }
        }
        true

=======

        let mut min = 1;
        let mut max = piles.iter().max().unwrap();
        while min < max {
            let mid = (min + max) / 2;
            let mut hours = 0;
            for pile in &piles {
                hours += (pile - 1) / mid + 1;
                if hours > h {
                    break;
                }
            }
            if hours <= h {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        min
