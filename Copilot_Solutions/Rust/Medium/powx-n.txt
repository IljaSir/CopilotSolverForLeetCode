Synthesizing 10/10 solutions

=======
Suggestion 1

        if n == 0 {
            return 1.0;
        }
        if n == 1 {
            return x;
        }
        if n == -1 {
            return 1.0 / x;
        }
        let mut y = Solution::my_pow(x, n / 2);
        y *= y;
        if n % 2 == 1 {
            y *= x;
        }
        if n % 2 == -1 {
            y /= x;
        }
        y

=======
Suggestion 2

        if n == 0 {
            return 1.0;
        }
        if n < 0 {
            return 1.0 / Self::my_pow(x, -n);
        }
        if n % 2 == 0 {
            return Self::my_pow(x * x, n / 2);
        }
        return x * Self::my_pow(x, n - 1);

=======
Suggestion 3

        if x == 0.0 {
            return 0.0;
        }
        if n == 0 {
            return 1.0;
        }
        if n == 1 {
            return x;
        }
        if n == -1 {
            return 1.0 / x;
        }
        let mut n = n as i64;
        if n < 0 {
            n = -n;
            return Solution::my_pow(1.0 / x, n as i32);
        }
        let mut half = Solution::my_pow(x, n / 2);
        if n % 2 == 0 {
            return half * half;
        }
        half * half * x

=======
Suggestion 4

        let mut x = x;
        let mut n = n;
        if n < 0 {
            n = -n;
            x = 1.0 / x;
        }
        let mut ans = 1.0;
        let mut cur = x;
        let mut i = n;
        while i > 0 {
            if (i & 1) == 1 {
                ans *= cur;
            }
            cur *= cur;
            i >>= 1;
        }
        ans

=======
Suggestion 5

        let mut x = x;
        let mut n = n;
        if n < 0 {
            x = 1.0 / x;
            n = -n;
        }
        let mut res = 1.0;
        let mut curr = x;
        for i in (0..32).rev() {
            if (n >> i) & 1 == 1 {
                res *= curr;
            }
            curr *= curr;
        }
        res

=======
Suggestion 6

        let mut x = x;
        let mut n = n;
        let mut res = 1.0;
        if n < 0 {
            x = 1.0 / x;
            n = -n;
        }
        while n > 0 {
            if n & 1 == 1 {
                res *= x;
            }
            x *= x;
            n >>= 1;
        }
        res

=======
Suggestion 7

        if n == 0 {
            return 1.0;
        }
        let mut n = n;
        let mut x = x;
        if n < 0 {
            n = -n;
            x = 1.0 / x;
        }
        let mut ans = 1.0;
        let mut cur = x;
        for i in (0..32).rev() {
            if n & (1 << i) != 0 {
                ans *= cur;
            }
            cur *= cur;
        }
        ans

=======
Suggestion 8

        if n == 0 {
            return 1.0;
        }
        if x == 0.0 {
            return 0.0;
        }
        let mut n = n;
        let mut x = x;
        if n < 0 {
            n = -n;
            x = 1.0 / x;
        }
        let mut ret = 1.0;
        while n > 0 {
            if n & 1 == 1 {
                ret *= x;
            }
            x *= x;
            n >>= 1;
        }
        ret

=======
Suggestion 9

        x.powi(n)
    }
}

=======
Suggestion 10

        x.powi(n)
