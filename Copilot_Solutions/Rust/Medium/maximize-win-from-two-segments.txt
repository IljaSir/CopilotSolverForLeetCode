Synthesizing 5/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut ans = 0;
        let mut l = 0;
        let mut r = 0;
        let n = prize_positions.len();
        while r < n {
            while r < n && prize_positions[r] - prize_positions[l] <= k {
                r += 1;
            }
            ans = ans.max(r - l);
            l += 1;
        }
        ans as i32
    }
}

=======

        let mut result = 0;
        let mut i = 0;
        let mut j = 0;
        let mut map = std::collections::HashMap::new();
        while j < prize_positions.len() {
            *map.entry(prize_positions[j]).or_insert(0) += 1;
            if prize_positions[j] - prize_positions[i] > k {
                *map.entry(prize_positions[i]).or_insert(0) -= 1;
                i += 1;
            }
            result = std::cmp::max(result, map.values().sum());
            j += 1;
        }
        result
