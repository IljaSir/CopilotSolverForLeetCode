Synthesizing 10/10 solutions

=======

        let mut dp = vec![1; nums.len()];
        let mut max = 0;
        for i in 1..nums.len() {
            for j in 0..i {
                if nums[i] == nums[j] * nums[j] {
                    dp[i] = std::cmp::max(dp[i], dp[j] + 1);
                }
            }
            max = std::cmp::max(max, dp[i]);
        }
        if max >= 2 { max } else { -1 }
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut max = 0;
        let mut count = 1;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] {
                continue;
            }
            if nums[i] == nums[i - 1] * nums[i - 1] {
                count += 1;
                max = std::cmp::max(count, max);
            } else {
                count = 1;
            }
        }
        if max < 2 {
            -1
        } else {
            max as i32
        }
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut streak = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] * nums[i - 1] {
                streak += 1;
                res = res.max(streak);
            } else {
                streak = 0;
            }
        }
        res + 1
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut res = 0;
        let mut streak = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] * nums[i - 1] {
                streak += 1;
            } else {
                res = res.max(streak);
                streak = 0;
            }
        }
        res.max(streak) + 1

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut curr = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] * nums[i - 1] {
                curr += 1;
            } else {
                curr = 0;
            }
            res = res.max(curr);
        }
        if res > 0 {
            res + 2
        } else {
            -1
        }
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut max = 0;
        let mut prev = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] || nums[i] == prev {
                continue;
            }
            if nums[i] == nums[i - 1] * nums[i - 1] {
                count += 1;
                max = max.max(count);
            } else {
                count = 0;
            }
            prev = nums[i];
        }
        if max == 0 {
            -1
        } else {
            max + 1
        }

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut streak = 0;
        let mut i = 1;
        while i < nums.len() {
            if nums[i] == nums[i - 1] * nums[i - 1] {
                let mut j = i;
                while j < nums.len() && nums[j] == nums[j - 1] * nums[j - 1] {
                    j += 1;
                }
                streak = streak.max(j - i + 1);
                i = j;
            } else {
                i += 1;
            }
        }
        if streak < 2 {
            -1
        } else {
            streak as i32
        }
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut streak = 0;
        let mut longest_streak = 0;
        for i in 2..nums.len() {
            if nums[i] == nums[i-1] * nums[i-1] {
                streak += 1;
                longest_streak = longest_streak.max(streak);
            } else {
                streak = 0;
            }
        }
        if longest_streak > 0 {
            longest_streak + 2
        } else {
            -1
        }

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = 0;
        for i in nums {
            if i == prev {
                continue;
            }
            if i == prev * prev {
                count += 1;
            } else {
                count = 1;
                prev = 0;
            }
            if count > max {
                max = count;
            }
            prev = i;
        }
        if max > 1 {
            return max;
        }
        return -1;

=======

        
    }
}
