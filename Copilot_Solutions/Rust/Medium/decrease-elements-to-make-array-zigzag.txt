Synthesizing 10/10 solutions

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                let left = if i == 0 { 1001 } else { nums[i - 1] };
                let right = if i == nums.len() - 1 { 1001 } else { nums[i + 1] };
                let min = std::cmp::min(left, right);
                if nums[i] >= min {
                    even += nums[i] - min + 1;
                }
            } else {
                let left = if i == 0 { 1001 } else { nums[i - 1] };
                let right = if i == nums.len() - 1 { 1001 } else { nums[i + 1] };
                let min = std::cmp::min(left, right);
                if nums[i] >= min {
                    odd += nums[i] - min + 1;
                }
            }
        }
        std::cmp::min(odd, even)

=======

        let mut odd = 0;
        let mut even = 0;
        let n = nums.len();
        for i in 0..n {
            let l = if i == 0 { 1001 } else { nums[i - 1] };
            let r = if i == n - 1 { 1001 } else { nums[i + 1] };
            if i % 2 == 0 {
                if nums[i] >= l.min(r) {
                    even += nums[i] - l.min(r) + 1;
                }
            } else {
                if nums[i] >= l.min(r) {
                    odd += nums[i] - l.min(r) + 1;
                }
            }
        }
        odd.min(even)

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            let (a, b) = if i % 2 == 0 {
                (nums.get(i + 1).unwrap_or(&1001), nums.get(i - 1).unwrap_or(&1001))
            } else {
                (nums.get(i - 1).unwrap_or(&1001), nums.get(i + 1).unwrap_or(&1001))
            };
            let c = nums[i];
            if c >= *a {
                even += c - a + 1;
            }
            if c >= *b {
                odd += c - b + 1;
            }
        }
        odd.min(even)

=======

        let mut res = 0;
        for i in 0..nums.len() {
            let mut min = std::i32::MAX;
            if i > 0 {
                min = min.min(nums[i - 1]);
            }
            if i + 1 < nums.len() {
                min = min.min(nums[i + 1]);
            }
            if nums[i] >= min {
                res += nums[i] - min + 1;
            }
        }
        res

=======

        let mut nums = nums;
        let mut res = 0;
        for i in (0..nums.len()).step_by(2) {
            let mut min = i32::max_value();
            if i > 0 {
                min = min.min(nums[i - 1]);
            }
            if i + 1 < nums.len() {
                min = min.min(nums[i + 1]);
            }
            if nums[i] >= min {
                res += nums[i] - min + 1;
            }
        }
        let mut res1 = 0;
        for i in (1..nums.len()).step_by(2) {
            let mut min = i32::max_value();
            if i > 0 {
                min = min.min(nums[i - 1]);
            }
            if i + 1 < nums.len() {
                min = min.min(nums[i + 1]);
            }
            if nums[i] >= min {
                res1 += nums[i] - min + 1;
            }
        }
        res.min(res1)

=======

        let mut ans = 0;
        let mut nums = nums;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                if i == 0 {
                    if nums.len() > 1 && nums[i] >= nums[i + 1] {
                        ans += nums[i] - nums[i + 1] + 1;
                    }
                } else if i == nums.len() - 1 {
                    if nums[i] >= nums[i - 1] {
                        ans += nums[i] - nums[i - 1] + 1;
                    }
                } else {
                    let max = std::cmp::max(nums[i - 1], nums[i + 1]);
                    if nums[i] >= max {
                        ans += nums[i] - max + 1;
                    }
                }
            } else {
                if i == 0 {
                    if nums.len() > 1 && nums[i] >= nums[i + 1] {
                        ans += nums[i] - nums[i + 1] + 1;
                    }
                } else if i == nums.len() - 1 {
                    if nums[i] >= nums[i - 1] {
                        ans += nums[i] - nums[i - 1] + 1;
                    }
                } else {
                    let min = std::cmp::min(nums[i - 1], nums[i + 1]);
                    if nums[i] >= min {
                        ans += nums[i] - min + 1;
                    }
                }
            }
        }
        ans

=======

        let mut nums = nums;
        let mut i = 1;
        let mut n = 0;
        while i < nums.len() {
            if nums[i] >= nums[i-1] {
                n += nums[i] - nums[i-1] + 1;
                nums[i] = nums[i-1] - 1;
            }
            i += 1;
        }
        let mut i = 0;
        let mut m = 0;
        while i < nums.len()-1 {
            if nums[i] >= nums[i+1] {
                m += nums[i] - nums[i+1] + 1;
                nums[i] = nums[i+1] - 1;
            }
            i += 1;
        }
        n.min(m)

=======

        let mut n = nums.len();
        let mut nums = nums;
        let mut ans = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if i > 0 && nums[i] >= nums[i - 1] {
                    ans += nums[i] - nums[i - 1] + 1;
                    nums[i] = nums[i - 1] - 1;
                }
                if i + 1 < n && nums[i] >= nums[i + 1] {
                    ans += nums[i] - nums[i + 1] + 1;
                    nums[i] = nums[i + 1] - 1;
                }
            } else {
                if i > 0 && nums[i] <= nums[i - 1] {
                    ans += nums[i - 1] - nums[i] + 1;
                    nums[i - 1] = nums[i] - 1;
                }
                if i + 1 < n && nums[i] <= nums[i + 1] {
                    ans += nums[i + 1] - nums[i] + 1;
                    nums[i + 1] = nums[i] - 1;
                }
            }
        }
        ans

=======

        let len = nums.len();
        let mut a = nums.clone();
        let mut b = nums.clone();
        let mut ans = 0;
        for i in 0..len {
            let mut pre = 0;
            let mut post = 0;
            if i > 0 {
                pre = a[i-1];
            }
            if i+1 < len {
                post = a[i+1];
            }
            if pre >= a[i] || post >= a[i] {
                ans += (pre.max(post) - a[i] + 1).abs();
            }
            if i % 2 == 0 {
                a[i] = 1001;
            }
        }
        let mut tmp = 0;
        for i in 0..len {
            let mut pre = 0;
            let mut post = 0;
            if i > 0 {
                pre = b[i-1];
            }
            if i+1 < len {
                post = b[i+1];
            }
            if pre >= b[i] || post >= b[i] {
                tmp += (pre.max(post) - b[i] + 1).abs();
            }
            if i % 2 == 1 {
                b[i] = 1001;
            }
        }
        ans.min(tmp)

=======

        let mut nums = nums;
        let n = nums.len();
        let mut ans = 0;
        for i in 0..n {
            let mut cur = nums[i];
            let mut prev = if i == 0 { 1001 } else { nums[i - 1] };
            let mut next = if i == n - 1 { 1001 } else { nums[i + 1] };
            if i % 2 == 0 {
                if cur <= prev || cur <= next {
                    ans += (prev.min(next) - cur + 1).abs();
                }
            } else {
                if cur >= prev || cur >= next {
                    ans += (prev.max(next) - cur + 1).abs();
                }
            }
        }
        ans
