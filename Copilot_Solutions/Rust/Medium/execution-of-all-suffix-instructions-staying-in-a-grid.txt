Synthesizing 8/10 solutions

=======

        
    }
}

=======

        let n = n as usize;
        let mut x = start_pos[0] as usize;
        let mut y = start_pos[1] as usize;
        let mut res = vec![0; s.len()];
        let mut max = s.len();
        for i in 0..s.len() {
            let c = s.chars().nth(i).unwrap();
            match c {
                'L' => {
                    if y == 0 {
                        max = i;
                    } else {
                        y -= 1;
                    }
                }
                'R' => {
                    if y == n - 1 {
                        max = i;
                    } else {
                        y += 1;
                    }
                }
                'U' => {
                    if x == 0 {
                        max = i;
                    } else {
                        x -= 1;
                    }
                }
                'D' => {
                    if x == n - 1 {
                        max = i;
                    } else {
                        x += 1;
                    }
                }
                _ => {}
            }
            res[i] = max as i32;
        }
        res

=======

        let mut result = vec![0; s.len()];
        let mut x = start_pos[0];
        let mut y = start_pos[1];
        let mut up = 0;
        let mut down = 0;
        let mut left = 0;
        let mut right = 0;
        for i in 0..s.len() {
            if s.chars().nth(i).unwrap() == 'U' {
                up += 1;
            } else if s.chars().nth(i).unwrap() == 'D' {
                down += 1;
            } else if s.chars().nth(i).unwrap() == 'L' {
                left += 1;
            } else {
                right += 1;
            }
            if x - up + down < 0 || x - up + down >= n || y - left + right < 0 || y - left + right >= n {
                result[i] = 0;
            } else {
                result[i] = s.len() as i32 - i as i32;
            }
        }
        result

=======

        let mut res = vec![0; s.len()];
        let mut pos = start_pos;
        let mut dir = vec![(0, 1), (1, 0), (0, -1), (-1, 0)];
        let mut cur_dir = 0;
        for (i, c) in s.chars().enumerate() {
            let (dx, dy) = dir[cur_dir];
            match c {
                'L' => cur_dir = (cur_dir + 3) % 4,
                'R' => cur_dir = (cur_dir + 1) % 4,
                'U' => {
                    if pos[0] + dx >= 0 {
                        pos[0] += dx;
                    }
                }
                'D' => {
                    if pos[0] + dx < n {
                        pos[0] += dx;
                    }
                }
                _ => {}
            }
            res[i] = (pos[0] - start_pos[0]).abs() + (pos[1] - start_pos[1]).abs();
        }
        res

=======

        let mut res = vec![0; s.len()];
        let mut pos = start_pos.clone();
        for (i, c) in s.chars().enumerate() {
            let mut pos1 = pos.clone();
            match c {
                'L' => pos1[1] -= 1,
                'R' => pos1[1] += 1,
                'U' => pos1[0] -= 1,
                'D' => pos1[0] += 1,
                _ => (),
            }
            if pos1[0] >= 0 && pos1[0] < n && pos1[1] >= 0 && pos1[1] < n {
                res[i] = 1;
                pos = pos1;
            }
        }
        let mut sum = 0;
        for i in (0..res.len()).rev() {
            sum += res[i];
            res[i] = sum;
        }
        res

=======

        let mut res = vec![0; s.len()];
        let mut cur = start_pos.clone();
        let mut cnt = 0;
        let mut i = 0;
        for c in s.chars() {
            match c {
                'L' => {
                    if cur[1] > 0 {
                        cur[1] -= 1;
                        cnt += 1;
                    }
                }
                'R' => {
                    if cur[1] < n - 1 {
                        cur[1] += 1;
                        cnt += 1;
                    }
                }
                'U' => {
                    if cur[0] > 0 {
                        cur[0] -= 1;
                        cnt += 1;
                    }
                }
                'D' => {
                    if cur[0] < n - 1 {
                        cur[0] += 1;
                        cnt += 1;
                    }
                }
                _ => {}
            }
            res[i] = cnt;
            i += 1;
        }
        cur = start_pos.clone();
        cnt = 0;
        i = s.len() - 1;
        for c in s.chars().rev() {
            match c {
                'L' => {
                    if cur[1] < n - 1 {
                        cur[1] += 1;
                        cnt += 1;
                    }
                }
                'R' => {
                    if cur[1] > 0 {
                        cur[1] -= 1;
                        cnt += 1;
                    }
                }
                'U' => {
                    if cur[0] < n - 1 {
                        cur[0] += 1;
                        cnt += 1;
                    }
                }
                'D' => {
                    if cur[0] > 0 {
                        cur[0] -= 1;
                        cnt += 1;
                    }
                }
                _ => {}
            }
            res[i] = std::cmp::max(res[i], cnt);
            i -= 1;
        }
        res

=======

        let mut res = vec![0; s.len()];
        let mut pos = start_pos.clone();
        let mut i = 0;
        let mut j = 0;
        let mut min = 0;
        let mut max = 0;
        let mut min1 = 0;
        let mut max1 = 0;
        let mut k = 0;
        let mut l = 0;
        let mut m = 0;
        let mut n1 = 0;
        let mut o = 0;
        let mut p = 0;
        let mut q = 0;
        let mut r = 0;
        let mut s1 = 0;
        let mut t = 0;
        let mut u = 0;
        let mut v = 0;
        let mut w = 0;
        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        let mut a1 = 0;
        let mut b1 = 0;
        let mut c1 = 0;
        let mut d1 = 0;
        let mut e1 = 0;
        let mut f1 = 0;
        let mut g1 = 0;
        let mut h1 = 0;
        let mut i1 = 0;
        let mut j1 = 0;
        let mut k1 = 0;
        let mut l1 = 0;
        let mut m1 = 0;
        let mut n2 = 0;
        let mut o1 = 0;
        let mut p1 = 0;
        let mut q1 = 0;
        let mut r1 = 0;
        let mut s2 = 0;
        let mut t1 = 0;
        let mut u1 = 0;
        let mut v1 = 0;
        let mut w1 = 0;
        let mut x1 = 0;
        let mut y1 = 0;
        let mut z1 = 0;
        let mut a2 = 0;
        let mut b2 = 0;
        let mut c2 = 0;
        let mut d2 = 0;
        let mut e2 = 0;
        let mut f2 = 0;
        let mut g2 = 0;

=======

        let mut res = vec![0; s.len()];
        let mut pos = start_pos;
        let mut i = 0;
        let mut j = 0;
        let mut last = 0;
        let mut c = 0;
        while i < s.len() {
            let d = match s.chars().nth(i).unwrap() {
                'L' => {
                    if pos[1] == 0 {
                        last = i;
                    } else {
                        pos[1] -= 1;
                    }
                    1
                }
                'R' => {
                    if pos[1] == n - 1 {
                        last = i;
                    } else {
                        pos[1] += 1;
                    }
                    1
                }
                'U' => {
                    if pos[0] == 0 {
                        last = i;
                    } else {
                        pos[0] -= 1;
                    }
                    1
                }
                'D' => {
                    if pos[0] == n - 1 {
                        last = i;
                    } else {
                        pos[0] += 1;
                    }
                    1
                }
                _ => 0,
            };
            res[j] += d;
            c += d;
            if i == last {
                j += 1;
                c = 0;
                pos = start_pos.clone();
            }
            i += 1;
        }
        res
