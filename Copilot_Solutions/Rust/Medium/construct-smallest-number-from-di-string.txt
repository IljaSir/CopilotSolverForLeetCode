Synthesizing 10/10 solutions

=======

        let mut s = String::new();
        let mut i = 1;
        let mut j = pattern.len() as i32 + 1;
        for c in pattern.chars() {
            if c == 'I' {
                s.push_str(&i.to_string());
                i += 1;
            } else {
                s.push_str(&j.to_string());
                j -= 1;
            }
        }
        s.push_str(&j.to_string());
        s

=======

        let mut result = String::new();
        let mut i = 1;
        let mut j = pattern.len() as i32 + 1;
        for c in pattern.chars() {
            if c == 'I' {
                result.push_str(&i.to_string());
                i += 1;
            } else {
                result.push_str(&j.to_string());
                j -= 1;
            }
        }
        result.push_str(&j.to_string());
        result
    }
}

=======

        let mut res = String::new();
        let mut min = 1;
        let mut max = pattern.len() as i32 + 1;
        for ch in pattern.chars() {
            if ch == 'I' {
                res.push_str(&min.to_string());
                min += 1;
            } else {
                res.push_str(&max.to_string());
                max -= 1;
            }
        }
        res.push_str(&max.to_string());
        res

=======

        let mut ans = String::new();
        let mut i = 1;
        let mut j = pattern.len() as i32 + 1;
        for c in pattern.chars() {
            match c {
                'I' => {
                    ans.push_str(&i.to_string());
                    i += 1;
                },
                'D' => {
                    ans.push_str(&j.to_string());
                    j -= 1;
                },
                _ => unreachable!(),
            }
        }
        ans.push_str(&j.to_string());
        ans

=======

        let mut result = String::new();
        let mut left = 0;
        let mut right = pattern.len() as i32;
        for c in pattern.chars() {
            if c == 'I' {
                result.push_str(&left.to_string());
                left += 1;
            } else {
                result.push_str(&right.to_string());
                right -= 1;
            }
        }
        result.push_str(&right.to_string());
        result

=======

        let mut res = String::new();
        let mut i = 0;
        let mut j = pattern.len() as i32;
        for p in pattern.chars() {
            if p == 'I' {
                res.push_str(&i.to_string());
                i += 1;
            } else {
                res.push_str(&j.to_string());
                j -= 1;
            }
        }
        res.push_str(&(i as i32).to_string());
        res

=======

        let mut res = String::new();
        let mut min = 1;
        let mut max = 9;
        for c in pattern.chars() {
            match c {
                'I' => {
                    res.push(min.to_string().chars().next().unwrap());
                    min += 1;
                }
                'D' => {
                    res.push(max.to_string().chars().next().unwrap());
                    max -= 1;
                }
                _ => {}
            }
        }
        res.push(max.to_string().chars().next().unwrap());
        res

=======

        let mut pattern = pattern.chars().collect::<Vec<char>>();
        let mut num = vec![];
        let mut i = 0;
        let mut j = pattern.len();
        for c in pattern {
            if c == 'I' {
                num.push(i);
                i += 1;
            } else {
                num.push(j);
                j -= 1;
            }
        }
        num.push(i);
        num.iter().map(|x| (x + 1).to_string()).collect()
    }
}

=======

        let mut n = 0;
        let mut res = String::new();
        let mut s = vec![0; pattern.len()+1];
        for i in 0..pattern.len() {
            if pattern.as_bytes()[i] == 'I' as u8 {
                s[i] = n;
                n += 1;
            }
        }
        s[pattern.len()] = n;
        n += 1;
        for i in (0..pattern.len()).rev() {
            if pattern.as_bytes()[i] == 'D' as u8 {
                s[i] = n;
                n += 1;
            }
        }
        for i in s {
            res.push_str(&i.to_string());
        }
        res
    }
}

=======

        let mut v: Vec<u8> = vec![];
        let mut dec = 9;
        let mut inc = 1;
        let mut last = ' ';
        for c in pattern.chars() {
            if c == 'I' {
                if last == 'I' {
                    v.push(inc);
                    inc += 1;
                } else {
                    v.push(inc);
                    inc += 1;
                    v.push(inc);
                    inc += 1;
                }
            } else {
                if last == 'D' {
                    v.push(dec);
                    dec -= 1;
                } else {
                    v.push(dec);
                    dec -= 1;
                    v.push(dec);
                    dec -= 1;
                }
            }
            last = c;
        }
        if last == 'I' {
            v.push(inc);
        } else {
            v.push(dec);
        }
        String::from_utf8(v).unwrap()
