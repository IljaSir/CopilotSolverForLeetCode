Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut cur = 0;
        let mut max = 0;
        for c in s.chars() {
            cur = cur * 10 + (c as i32 - '0' as i32);
            max = std::cmp::max(max, c as i32 - '0' as i32);
            if cur - max > k {
                ans += 1;
                cur = max;
            }
        }
        ans + 1

=======

        let mut max = 0;
        let mut count = 0;
        for c in s.chars() {
            let n = c.to_digit(10).unwrap() as i32;
            max = max.max(n);
            if max > k {
                count += 1;
                max = n;
            }
        }
        count + 1
    }
}

=======

        let mut ans = 0;
        let mut sum = 0;
        let mut max = 0;
        for c in s.chars() {
            let v = c as i32 - '0' as i32;
            sum += v;
            max = max.max(v);
            if sum - max > k {
                ans += 1;
                sum = v;
                max = v;
            }
        }
        ans + 1

=======

        let mut ans = 0;
        let mut last = 0;
        let mut max = 0;
        for (i, c) in s.chars().enumerate() {
            let n = c.to_digit(10).unwrap() as i32;
            max = std::cmp::max(max, n);
            if max * (i - last + 1) > k {
                ans += 1;
                last = i;
                max = n;
            }
        }
        ans + 1
    }
}

=======

        let mut ans = 0;
        let mut max = 0;
        let mut pre = 0;
        for c in s.chars() {
            let n = c.to_digit(10).unwrap() as i32;
            max = std::cmp::max(max, n);
            if max * (pre + 1) > k {
                ans += 1;
                pre = 0;
                max = n;
            } else {
                pre += 1;
            }
        }
        if pre > 0 {
            ans += 1;
        }
        ans

=======

        let mut max = 0;
        let mut count = 0;
        let mut result = 0;
        for c in s.chars() {
            let val = c.to_digit(10).unwrap();
            max = max.max(val);
            count += 1;
            if max * count as u32 > k as u32 {
                result += 1;
                max = 0;
                count = 0;
            }
        }
        if count > 0 {
            result += 1;
        }
        result

=======

        let mut result = 0;
        let mut max = 0;
        let mut last = 0;
        for c in s.chars() {
            let i = c as i32 - '0' as i32;
            max = max.max(i);
            if max * (result - last + 1) > k {
                result += 1;
                last = result;
                max = i;
            }
        }
        result + 1
    }
}

=======

        let mut max: i32 = 0;
        let mut res: i32 = 0;
        let mut cur: i32 = 0;
        for c in s.chars() {
            let v = (c as u8 - '0' as u8) as i32;
            max = max.max(v);
            cur += v;
            if cur > k {
                res += 1;
                cur = max;
                max = 0;
            }
        }
        res + 1
    }
}

=======

        let mut c = 0;
        let mut m = 0;
        for i in 0..s.len() {
            let d = s.as_bytes()[i] - b'0';
            m = m.max(d);
            if m * (i as i32 + 1) - c > k {
                c += m;
                m = 0;
            }
        }
        if m * (s.len() as i32) - c > k {
            -1
        } else {
            (s.len() as i32 + m - c + k - 1) / k
        }

=======

        
    }
}
