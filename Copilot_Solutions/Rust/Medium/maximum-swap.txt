Synthesizing 6/10 solutions (Duplicates hidden)

=======
Suggestion 1

        
    }
}

=======
Suggestion 2

        let mut num = num.to_string().into_bytes();
        let mut idx = vec![0; 10];
        for i in 0..num.len() {
            idx[(num[i] - b'0') as usize] = i;
        }
        for i in 0..num.len() {
            for d in (0..10).rev() {
                if d > (num[i] - b'0') as usize && idx[d] > i {
                    num.swap(i, idx[d]);
                    return String::from_utf8(num).unwrap().parse().unwrap();
                }
            }
        }
        num.iter().fold(0, |acc, &x| acc * 10 + (x - b'0') as i32)

=======
Suggestion 3

        let mut num = num;
        let mut digits = Vec::new();
        while num > 0 {
            digits.push(num % 10);
            num /= 10;
        }
        digits.reverse();
        let mut max = 0;
        let mut max_index = 0;
        for i in 0..digits.len() {
            if digits[i] > max {
                max = digits[i];
                max_index = i;
            }
        }
        for i in 0..digits.len() {
            if digits[i] < max {
                digits.swap(i, max_index);
                break;
            }
        }
        let mut result = 0;
        for digit in digits {
            result = result * 10 + digit;
        }
        result
