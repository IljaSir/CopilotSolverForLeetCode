Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if i == 0 {
                if nums[i] != nums[i + 1] {
                    result.push(nums[i]);
                }
            } else if i == nums.len() - 1 {
                if nums[i] != nums[i - 1] {
                    result.push(nums[i]);
                }
            } else {
                if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                    result.push(nums[i]);
                }
            }
            i += 1;
        }
        result
    }
}

=======

        let mut result = vec![];
        let mut i = 0;
        while i < nums.len() {
            if i == 0 {
                if nums[i] != nums[i + 1] {
                    result.push(nums[i]);
                }
            } else if i == nums.len() - 1 {
                if nums[i] != nums[i - 1] {
                    result.push(nums[i]);
                }
            } else {
                if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                    result.push(nums[i]);
                }
            }
            i += 1;
        }
        result

=======

        let mut result = vec![];
        let mut i = 0;
        while i < nums.len() {
            if i == 0 {
                if nums[i] != nums[i + 1] {
                    result.push(nums[i]);
                }
            } else if i == nums.len() - 1 {
                if nums[i] != nums[i - 1] {
                    result.push(nums[i]);
                }
            } else if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                result.push(nums[i]);
            }
            i += 1;
        }
        result
    }
}

=======

        let mut lonely = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if i == 0 {
                if nums[i] != nums[i + 1] {
                    lonely.push(nums[i]);
                }
            } else if i == nums.len() - 1 {
                if nums[i] != nums[i - 1] {
                    lonely.push(nums[i]);
                }
            } else if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                lonely.push(nums[i]);
            }
            i += 1;
        }
        lonely
    }
}

=======

        let mut lonely = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if i == 0 && nums[i] != nums[i + 1] {
                lonely.push(nums[i]);
            } else if i == nums.len() - 1 && nums[i] != nums[i - 1] {
                lonely.push(nums[i]);
            } else if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                lonely.push(nums[i]);
            }
            i += 1;
        }
        lonely
    }
}

=======

        let mut res = vec![];
        let mut i = 0;
        while i < nums.len() {
            if i == nums.len() - 1 || nums[i] != nums[i + 1] {
                res.push(nums[i]);
            } else {
                i += 1;
            }
            i += 1;
        }
        res
    }
}

=======

        let mut lonely_nums = Vec::new();
        for i in 0..nums.len() {
            if i == 0 && nums[i] != nums[i + 1] {
                lonely_nums.push(nums[i]);
            } else if i == nums.len() - 1 && nums[i] != nums[i - 1] {
                lonely_nums.push(nums[i]);
            } else if nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                lonely_nums.push(nums[i]);
            }
        }
        return lonely_nums;
    }
}

=======

        let mut result: Vec<i32> = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if i == 0 && nums[i] != nums[i + 1] {
                result.push(nums[i]);
            } else if i == nums.len() - 1 && nums[i] != nums[i - 1] {
                result.push(nums[i]);
            } else if i > 0 && i < nums.len() - 1 && nums[i] != nums[i - 1] && nums[i] != nums[i + 1] {
                result.push(nums[i]);
            }
            i += 1;
        }
        result

=======

        let mut res = vec![];
        for (i, num) in nums.iter().enumerate() {
            if i == 0 {
                if *num != nums[i + 1] {
                    res.push(*num);
                }
            } else if i == nums.len() - 1 {
                if *num != nums[i - 1] {
                    res.push(*num);
                }
            } else if *num != nums[i - 1] && *num != nums[i + 1] {
                res.push(*num);
            }
        }
        res
    }
}

=======

        let mut res: Vec<i32> = Vec::new();
        let mut set: std::collections::HashSet<i32> = std::collections::HashSet::new();
        for i in nums {
            if set.contains(&(i + 1)) || set.contains(&(i - 1)) {
                set.remove(&i);
            } else {
                set.insert(i);
            }
        }
        for i in set {
            res.push(i);
        }
        res
    }
}
