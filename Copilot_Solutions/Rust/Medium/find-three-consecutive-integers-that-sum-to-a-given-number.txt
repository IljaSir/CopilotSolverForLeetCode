Synthesizing 10/10 solutions

=======

        if num < 3 {
            return vec![];
        }
        let mut i = 1;
        let mut j = 2;
        let mut k = 3;
        let mut sum = i + j + k;
        while sum < num {
            k += 1;
            sum += k;
        }
        while sum > num {
            sum -= i;
            i += 1;
        }
        if sum == num {
            return vec![i, j, k];
        }
        vec![]
    }
}

=======

        let mut result = Vec::new();
        for i in 1..=num {
            let sum = i + (i + 1) + (i + 2);
            if sum == num {
                result.push(i);
                result.push(i + 1);
                result.push(i + 2);
                break;
            }
        }
        result
    }
}

=======

        let mut res: Vec<i64> = Vec::new();
        for i in 0..num {
            let x = i + 1;
            let y = x + 1;
            let z = y + 1;
            if x + y + z == num {
                res.push(x);
                res.push(y);
                res.push(z);
                break;
            }
        }
        res
    }
}

=======

        let mut result = Vec::new();
        for i in 1..=num {
            let mut sum = i;
            sum += i + 1;
            sum += i + 2;
            if sum == num {
                result.push(i);
                result.push(i + 1);
                result.push(i + 2);
                break;
            }
        }
        result
    }
}

=======

        let mut x = num - 6;
        if x % 3 == 0 {
            x /= 3;
            vec!(x, x + 1, x + 2)
        } else {
            vec!()
        }
    }
}

=======

        let mut ans = Vec::new();
        for i in 1..num {
            if num - i * (i + 1) / 2 <= 0 {
                break;
            }
            if (num - i * (i + 1) / 2) % i == 0 {
                let mut tmp = Vec::new();
                let mut j = (num - i * (i + 1) / 2) / i;
                for k in 0..i {
                    tmp.push(j + k);
                }
                ans = tmp;
            }
        }
        ans
    }
}

=======

        let mut i = 1;
        while i * (i + 1) / 2 <= num {
            if i * (i + 1) / 2 == num {
                return vec![1, i, i + 1];
            }
            let j = i + 1;
            let mut k = num - i * (i + 1) / 2;
            while j * (j + 1) / 2 <= k {
                if j * (j + 1) / 2 == k {
                    return vec![i + 1, j + 1, j + 2];
                }
                k -= j;
                j += 1;
            }
            i += 1;
        }
        vec![]
    }
}

=======

        if num < 3 {
            return Vec::new();
        }
        let mut res = Vec::new();
        for i in 1..(num / 3) {
            if (num - i * 3) % 2 == 0 {
                res.push(i);
                res.push(i + 1);
                res.push(i + 2);
                break;
            }
        }
        res
    }
}

=======

        let mut res = Vec::new();
        for i in 0..=num/3 {
            if i*(i+1)/2 == num - i*(i+1)/2 - (i+1) {
                for j in 0..i {
                    res.push(i-j);
                }
                return res;
            }
        }
        res
    }
}

=======

        let mut ans = Vec::new();
        for i in 0..=num {
            let k = num - i;
            if i * (i + 1) == k * (k + 1) {
                ans.push(i);
                ans.push(i + 1);
                ans.push(i + 2);
                break;
            }
        }
        ans
    }
}
