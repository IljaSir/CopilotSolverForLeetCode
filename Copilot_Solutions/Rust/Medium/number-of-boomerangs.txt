Synthesizing 8/10 solutions

=======
Suggestion 1

        let mut res = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j {
                    continue;
                }
                let d = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                *map.entry(d).or_insert(0) += 1;
            }
            for (_, v) in map.iter() {
                res += v * (v - 1);
            }
        }
        res

=======
Suggestion 2

        let mut res = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j {
                    continue;
                }
                let d = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                *map.entry(d).or_insert(0) += 1;
            }
            for (_, v) in map {
                res += v * (v - 1);
            }
        }
        res

=======
Suggestion 3

        let mut count = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j {
                    continue;
                }
                let d = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                let c = map.entry(d).or_insert(0);
                *c += 1;
            }
            for v in map.values() {
                count += v * (v - 1);
            }
        }
        count

=======
Suggestion 4

        let mut res = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j { continue; }
                let dx = points[i][0] - points[j][0];
                let dy = points[i][1] - points[j][1];
                let distance = dx * dx + dy * dy;
                *map.entry(distance).or_insert(0) += 1;
            }
            for (_, v) in map.iter() {
                res += v * (v - 1);
            }
        }
        res

=======
Suggestion 5

        let mut res = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j { continue; }
                let dist = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                let count = map.entry(dist).or_insert(0);
                *count += 1;
            }
            for (_, count) in map {
                if count > 1 {
                    res += count * (count - 1);
                }
            }
        }
        res

=======
Suggestion 6

        let mut res = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j { continue; }
                let dis = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                if let Some(v) = map.get_mut(&dis) {
                    *v += 1;
                } else {
                    map.insert(dis, 1);
                }
            }
            for (_, v) in map.iter() {
                res += v * (v - 1);
            }
        }
        res

=======
Suggestion 7

        let mut result = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                if i == j {
                    continue;
                }
                let distance = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                let count = map.entry(distance).or_insert(0);
                *count += 1;
            }
            for (_, v) in map {
                result += v * (v - 1);
            }
        }
        result

=======
Suggestion 8

        let mut result = 0;
        for i in 0..points.len() {
            let mut map = std::collections::HashMap::new();
            for j in 0..points.len() {
                let mut distance = (points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2);
                let count = map.entry(distance).or_insert(0);
                *count += 1;
            }
            for (_, v) in map {
                result += v * (v - 1);
            }
        }
        result
