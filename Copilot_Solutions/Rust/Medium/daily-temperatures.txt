Synthesizing 10/10 solutions

=======

        let mut ans = vec![0; temperatures.len()];
        let mut stack = Vec::new();
        for (i, &t) in temperatures.iter().enumerate() {
            while let Some(&j) = stack.last() {
                if temperatures[j] < t {
                    ans[j] = (i - j) as i32;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        ans

=======

        let n = temperatures.len();
        let mut ans = vec![0; n];
        let mut stack = vec![];
        for i in 0..n {
            while let Some(&j) = stack.last() {
                if temperatures[i] > temperatures[j] {
                    ans[j] = (i - j) as i32;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        ans
    }
}

=======

        let mut ans = vec![0; temperatures.len()];
        let mut stack = vec![];
        for (i, &t) in temperatures.iter().enumerate() {
            while let Some(&j) = stack.last() {
                if temperatures[j] < t {
                    ans[j] = (i - j) as i32;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        ans

=======

        let n = temperatures.len();
        let mut stack = Vec::new();
        let mut res = vec![0; n];
        for i in 0..n {
            while !stack.is_empty() && temperatures[stack[stack.len() - 1]] < temperatures[i] {
                let j = stack.pop().unwrap();
                res[j] = (i - j) as i32;
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack = vec![];
        let mut res = vec![0; temperatures.len()];
        for i in 0..temperatures.len() {
            while let Some(&j) = stack.last() {
                if temperatures[j] >= temperatures[i] {
                    break;
                }
                stack.pop();
                res[j] = (i - j) as i32;
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack = Vec::new();
        let mut res = vec![0; temperatures.len()];
        for i in 0..temperatures.len() {
            while stack.len() > 0 && temperatures[i] > temperatures[stack[stack.len() - 1]] {
                let top = stack.pop().unwrap();
                res[top] = (i - top) as i32;
            }
            stack.push(i);
        }
        res

=======

        let mut res = vec![0; temperatures.len()];
        let mut stack = Vec::new();
        for (i, &temp) in temperatures.iter().enumerate() {
            while let Some(&j) = stack.last() {
                if temperatures[j] < temp {
                    res[j] = (i - j) as i32;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i);
        }
        res
    }
}

=======

        let mut stack: Vec<i32> = Vec::new();
        let mut ans = vec![0; temperatures.len()];
        for i in 0..temperatures.len() {
            while let Some(&j) = stack.last() {
                if temperatures[j as usize] < temperatures[i] {
                    ans[j as usize] = (i as i32) - j;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(i as i32);
        }
        ans

=======

        let mut stack = vec![];
        let mut ans = vec![0; temperatures.len()];
        for i in 0..temperatures.len() {
            while let Some((j, t)) = stack.last() {
                if temperatures[*j] < temperatures[i] {
                    ans[*j] = (i - j) as i32;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push((i, temperatures[i]));
        }
        ans
    }
}

=======

        let mut ans = vec![0; temperatures.len()];
        let mut stack = vec![];
        for (i, t) in temperatures.iter().enumerate() {
            while let Some((j, t1)) = stack.last() {
                if *t1 >= *t {
                    break;
                }
                ans[*j] = (i - *j) as i32;
                stack.pop();
            }
            stack.push((i, *t));
        }
        ans
