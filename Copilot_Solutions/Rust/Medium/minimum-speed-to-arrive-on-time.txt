Synthesizing 10/10 solutions

=======

        let n = dist.len();
        let mut left = 1;
        let mut right = 10000000;
        while left < right {
            let mid = left + (right - left) / 2;
            let mut time = 0.0;
            for i in 0..n {
                time += if i == n - 1 { dist[i] as f64 / mid as f64 } else { (dist[i] as f64 + mid as f64 - 1.0) / mid as f64 };
            }
            if time <= hour {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        if left == 10000000 { -1 } else { left as i32 }

=======

        if dist.len() as f64 - 1.0 > hour {
            return -1;
        }
        let mut l = 1;
        let mut r = 10_000_000;
        while l < r {
            let m = l + (r - l) / 2;
            if Solution::check(&dist, m, hour) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;
    }
    fn check(dist: &Vec<i32>, speed: i32, hour: f64) -> bool {
        let mut res = 0.0;
        for i in 0..dist.len() - 1 {
            res += (dist[i] as f64 / speed as f64).ceil();
        }
        res += dist.last().unwrap() as f64 / speed as f64;
        return res <= hour;

=======

        let n = dist.len();
        if hour < (n - 1) as f64 {
            return -1;
        }
        let mut l = 1;
        let mut r = 1_000_000_000;
        while l < r {
            let mid = l + (r - l) / 2;
            let mut time = 0.0;
            for i in 0..n - 1 {
                time += (dist[i] as f64 / mid as f64).ceil();
            }
            time += (dist[n - 1] as f64 / mid as f64);
            if time <= hour {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l as i32

=======

        let n = dist.len();
        let mut l = 1;
        let mut r = 10_000_000;
        while l < r {
            let mid = (l + r) >> 1;
            let mut h = 0.0;
            for i in 0..n-1 {
                h += (dist[i] + mid - 1) / mid;
            }
            h += dist[n-1] as f64 / mid as f64;
            if h <= hour {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if r == 10_000_000 {
            -1
        } else {
            r as i32
        }

=======

        let n = dist.len();
        if n as f64 > hour {
            return -1;
        }
        let mut l = 1;
        let mut r = 1_000_000_0;
        while l < r {
            let mid = (l + r) / 2;
            let mut t = 0.0;
            for i in 0..n-1 {
                t += (dist[i] as f64 / mid as f64).ceil();
            }
            t += dist[n-1] as f64 / mid as f64;
            if t <= hour {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l as i32

=======

        let (mut l, mut r) = (1, 10_000_000);
        while l < r {
            let mid = (l + r) / 2;
            let mut t = 0.0;
            for i in 0..dist.len() - 1 {
                t += (dist[i] as f64) / mid as f64;
                if t.ceil() > hour {
                    break;
                }
            }
            if t.ceil() <= hour {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if l > 10_000_000 {
            -1
        } else {
            l as i32
        }
    }
}

=======

        let n = dist.len();
        let mut l = 1;
        let mut r = 10_000_000;
        while l < r {
            let mid = (l + r) / 2;
            let time: f64 = dist[..n - 1].iter().map(|&x| (x + mid - 1) / mid).sum();
            let time = time + dist[n - 1] as f64 / mid as f64;
            if time > hour {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        if l < 10_000_000 {
            l as i32
        } else {
            -1
        }

=======

        let n = dist.len();
        let mut l = 1;
        let mut r = 10_i64.pow(7);
        let mut ans = -1;
        while l <= r {
            let mid = (l + r) / 2;
            let mut time = 0.0;
            for i in 0..n {
                if i == n - 1 {
                    time += dist[i] as f64 / mid as f64;
                } else {
                    time += (dist[i] as f64 / mid as f64).ceil();
                }
            }
            if time <= hour {
                ans = mid as i32;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        ans

=======

        let (mut l, mut r) = (1, 10_000_001);
        while l < r {
            let m = (l + r) >> 1;
            let mut t = 0.0;
            for i in 0..dist.len() - 1 {
                t += (dist[i] as f64 / m as f64).ceil();
            }
            t += dist[dist.len() - 1] as f64 / m as f64;
            if t <= hour {
                r = m;
            } else {
                l = m + 1;
            }
        }
        if l < 10_000_001 {
            l as i32
        } else {
            -1
        }

=======

        let n = dist.len();
        if (n as f64) > hour {
            return -1;
        }

        let mut left = 1;
        let mut right = 1_000_000_000;
        while left < right {
            let mid = left + (right - left) / 2;
            let mut time = 0.0;
            for i in 0..n - 1 {
                time += (dist[i] as f64) / (mid as f64);
                if time.ceil() > hour {
                    break;
                }
            }
            time += (dist[n - 1] as f64) / (mid as f64);
            if time > hour {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left
    }
}
