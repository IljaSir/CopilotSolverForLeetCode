Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if obstacle_grid[i][j] == 1 {
                    dp[i][j] = 0;
                } else if i == 0 && j == 0 {
                    dp[i][j] = 1;
                } else if i == 0 {
                    dp[i][j] = dp[i][j - 1];
                } else if j == 0 {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        dp[m - 1][n - 1]

=======
Suggestion 2

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if obstacle_grid[i][j] == 1 {
                    dp[i][j] = 0;
                } else if i == 0 && j == 0 {
                    dp[i][j] = 1;
                } else if i == 0 {
                    dp[i][j] = dp[i][j - 1];
                } else if j == 0 {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        dp[m - 1][n - 1]
    }
}

=======
Suggestion 3

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                if obstacle_grid[i][j] == 1 {
                    dp[i][j] = 0;
                } else if i == 0 && j == 0 {
                    dp[i][j] = 1;
                } else if i == 0 {
                    dp[i][j] = dp[i][j - 1];
                } else if j == 0 {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
                }
            }
        }
        dp[m - 1][n - 1]

=======
Suggestion 4

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[0][0] = if obstacle_grid[0][0] == 1 { 0 } else { 1 };
        for i in 1..m {
            dp[i][0] = if obstacle_grid[i][0] == 1 { 0 } else { dp[i - 1][0] };
        }
        for j in 1..n {
            dp[0][j] = if obstacle_grid[0][j] == 1 { 0 } else { dp[0][j - 1] };
        }
        for i in 1..m {
            for j in 1..n {
                dp[i][j] = if obstacle_grid[i][j] == 1 { 0 } else { dp[i - 1][j] + dp[i][j - 1] };
            }
        }
        dp[m - 1][n - 1]

=======
Suggestion 5

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        dp[0][0] = if obstacle_grid[0][0] == 1 { 0 } else { 1 };
        for i in 1..m {
            if obstacle_grid[i][0] == 1 {
                dp[i][0] = 0;
            } else {
                dp[i][0] = dp[i - 1][0];
            }
        }
        for j in 1..n {
            if obstacle_grid[0][j] == 1 {
                dp[0][j] = 0;
            } else {
                dp[0][j] = dp[0][j - 1];
            }
        }
        for i in 1..m {
            for j in 1..n {
                if obstacle_grid[i][j] == 1 {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        dp[m - 1][n - 1]

=======
Suggestion 6

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        let mut dp = vec![vec![0; n]; m];
        for i in 0..m {
            if obstacle_grid[i][0] == 1 {
                break;
            }
            dp[i][0] = 1;
        }
        for j in 0..n {
            if obstacle_grid[0][j] == 1 {
                break;
            }
            dp[0][j] = 1;
        }
        for i in 1..m {
            for j in 1..n {
                if obstacle_grid[i][j] == 1 {
                    continue;
                }
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        dp[m - 1][n - 1]
    }
}

=======
Suggestion 7

        let mut dp = vec![vec![0; obstacle_grid[0].len()]; obstacle_grid.len()];
        dp[0][0] = if obstacle_grid[0][0] == 1 { 0 } else { 1 };
        for i in 0..obstacle_grid.len() {
            for j in 0..obstacle_grid[0].len() {
                if obstacle_grid[i][j] == 1 { continue; }
                if i > 0 { dp[i][j] += dp[i - 1][j]; }
                if j > 0 { dp[i][j] += dp[i][j - 1]; }
            }
        }
        dp[obstacle_grid.len() - 1][obstacle_grid[0].len() - 1]

=======
Suggestion 8

        let m = obstacle_grid.len();
        let n = obstacle_grid[0].len();
        if obstacle_grid[m - 1][n - 1] == 1 {
            return 0;
        }
        let mut path = vec![vec![0; n]; m];
        path[m - 1][n - 1] = 1;
        for i in (0..m).rev() {
            for j in (0..n).rev() {
                if obstacle_grid[i][j] == 1 {
                    path[i][j] = 0;
                } else if i == m - 1 && j == n - 1 {
                    path[i][j] = 1;
                } else if i == m - 1 {
                    path[i][j] = path[i][j + 1];
                } else if j == n - 1 {
                    path[i][j] = path[i + 1][j];
                } else {
                    path[i][j] = path[i][j + 1] + path[i + 1][j];
                }
            }
        }
        path[0][0]

=======
Suggestion 9

        let n = obstacle_grid.len();
        let m = obstacle_grid[0].len();
        if n == 0 || m == 0 {
            return 0;
        }
        let mut dp = vec![vec![0; m]; n];
        for i in 0..n {
            for j in 0..m {
                if obstacle_grid[i][j] == 1 {
                    dp[i][j] = 0;
                } else if i == 0 && j == 0 {
                    dp[i][j] = 1;
                } else if i == 0 {
                    dp[i][j] = dp[i][j-1];
                } else if j == 0 {
                    dp[i][j] = dp[i-1][j];
                } else {
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        dp[n-1][m-1]
    }
}
