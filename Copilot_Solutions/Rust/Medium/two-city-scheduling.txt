Synthesizing 10/10 solutions

=======

        let mut costs = costs;
        costs.sort_by(|a, b| (a[0] - a[1]).cmp(&(b[0] - b[1])));
        let n = costs.len() / 2;
        costs[..n].iter().map(|c| c[0]).sum::<i32>() + costs[n..].iter().map(|c| c[1]).sum::<i32>()

=======

        let mut costs = costs;
        costs.sort_by(|a, b| (a[0] - a[1]).cmp(&(b[0] - b[1])));
        let n = costs.len() / 2;
        let mut sum = 0;
        for i in 0..n {
            sum += costs[i][0] + costs[i + n][1];
        }
        sum

=======

        let mut costs = costs;
        costs.sort_by(|a, b| (a[0] - a[1]).cmp(&(b[0] - b[1])));
        let mut ans = 0;
        for i in 0..costs.len() / 2 {
            ans += costs[i][0] + costs[i + costs.len() / 2][1];
        }
        ans

=======

        let mut costs = costs;
        costs.sort_by(|a, b| (a[0] - a[1]).cmp(&(b[0] - b[1])));
        let mut res = 0;
        let n = costs.len() / 2;
        for i in 0..n {
            res += costs[i][0] + costs[i + n][1];
        }
        res
    }
}

=======

        let mut costs = costs;
        costs.sort_by_key(|cost| cost[0] - cost[1]);
        costs.iter().take(costs.len() / 2).map(|cost| cost[0]).sum::<i32>() + costs.iter().skip(costs.len() / 2).map(|cost| cost[1]).sum::<i32>()
    }
}

=======

        let mut costs = costs;
        costs.sort_by_key(|x| x[0] - x[1]);
        let mut sum = 0;
        for i in 0..costs.len() {
            if i < costs.len() / 2 {
                sum += costs[i][0];
            } else {
                sum += costs[i][1];
            }
        }
        sum

=======

        let mut costs = costs;
        costs.sort_by_key(|c| c[0] - c[1]);
        let mut sum = 0;
        for i in 0..costs.len()/2 {
            sum += costs[i][0] + costs[costs.len() - i - 1][1];
        }
        sum
    }
}

=======

        let mut costs = costs;
        costs.sort_by_key(|c| c[0] - c[1]);
        let mut sum = 0;
        for i in 0..costs.len() {
            sum += if i < costs.len() / 2 { costs[i][0] } else { costs[i][1] };
        }
        sum

=======

        let mut costs: Vec<Vec<i32>> = costs;
        costs.sort_by(|a, b| {
            let x = a[0] - a[1];
            let y = b[0] - b[1];
            x.cmp(&y)
        });
        let mut ans = 0;
        let n = costs.len() / 2;
        for i in 0..n {
            ans += costs[i][0];
        }
        for i in n..costs.len() {
            ans += costs[i][1];
        }
        ans

=======

        
    }
}
