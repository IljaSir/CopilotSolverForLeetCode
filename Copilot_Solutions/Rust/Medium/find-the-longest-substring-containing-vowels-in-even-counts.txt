Synthesizing 9/10 solutions

=======

        let mut ans = 0;
        let mut pos = vec![-1; 1 << 5];
        pos[0] = 0;
        let mut status = 0;
        for (i, c) in s.bytes().enumerate() {
            status ^= 1 << match c {
                b'a' => 0,
                b'e' => 1,
                b'i' => 2,
                b'o' => 3,
                b'u' => 4,
                _ => continue,
            };
            if pos[status] >= 0 {
                ans = ans.max(i as i32 + 1 - pos[status]);
            } else {
                pos[status] = i as i32 + 1;
            }
        }
        ans

=======

        let mut pos = vec![-1; 1 << 5];
        pos[0] = 0;
        let mut ans = 0;
        let mut status = 0;
        for (i, c) in s.bytes().enumerate() {
            match c {
                b'a' => status ^= 1 << 0,
                b'e' => status ^= 1 << 1,
                b'i' => status ^= 1 << 2,
                b'o' => status ^= 1 << 3,
                b'u' => status ^= 1 << 4,
                _ => (),
            }
            if pos[status] >= 0 {
                ans = ans.max(i as i32 + 1 - pos[status]);
            } else {
                pos[status] = i as i32 + 1;
            }
        }
        ans

=======

        let mut res = 0;
        let mut state = 0;
        let mut pos = vec![-1; 1 << 5];
        pos[0] = 0;
        for (i, c) in s.bytes().enumerate() {
            state ^= 1 << match c {
                b'a' => 0,
                b'e' => 1,
                b'i' => 2,
                b'o' => 3,
                b'u' => 4,
                _ => 5,
            };
            if pos[state] >= 0 {
                res = res.max(i as i32 + 1 - pos[state]);
            } else {
                pos[state] = i as i32 + 1;
            }
        }
        res

=======

        let mut map = vec![-1; 1 << 5];
        let mut res = 0;
        let mut state = 0;
        map[0] = 0;
        for (i, c) in s.chars().enumerate() {
            if c == 'a' {
                state ^= 1 << 0;
            } else if c == 'e' {
                state ^= 1 << 1;
            } else if c == 'i' {
                state ^= 1 << 2;
            } else if c == 'o' {
                state ^= 1 << 3;
            } else if c == 'u' {
                state ^= 1 << 4;
            }
            if map[state] >= 0 {
                res = res.max(i as i32 + 1 - map[state]);
            } else {
                map[state] = i as i32 + 1;
            }
        }
        res

=======

        let mut m = vec![-1; 1 << 5];
        let mut ans = 0;
        let mut state = 0;
        m[0] = 0;
        for (i, c) in s.bytes().enumerate() {
            state ^= 1 << match c {
                b'a' => 0,
                b'e' => 1,
                b'i' => 2,
                b'o' => 3,
                b'u' => 4,
                _ => 5,
            };
            if m[state] >= 0 {
                ans = ans.max(i + 1 - m[state] as usize);
            } else {
                m[state] = i as i32 + 1;
            }
        }
        ans as i32

=======

        let mut res = 0;
        let mut seen = vec![-1; 32];
        let mut mask = 0;
        seen[0] = 0;
        for (i, c) in s.chars().enumerate() {
            mask ^= match c {
                'a' => 1,
                'e' => 2,
                'i' => 4,
                'o' => 8,
                'u' => 16,
                _ => 0,
            };
            if seen[mask] >= 0 {
                res = res.max(i as i32 + 1 - seen[mask]);
            } else {
                seen[mask] = i as i32 + 1;
            }
        }
        res

=======

        let mut pos = vec![s.len(); 1 << 5];
        let mut ans = 0;
        let mut status = 0;
        pos[0] = 0;
        for (i, c) in s.as_bytes().iter().enumerate() {
            match *c {
                b'a' => status ^= 1 << 0,
                b'e' => status ^= 1 << 1,
                b'i' => status ^= 1 << 2,
                b'o' => status ^= 1 << 3,
                b'u' => status ^= 1 << 4,
                _ => (),
            }
            if pos[status] < s.len() {
                ans = ans.max(i + 1 - pos[status]);
            } else {
                pos[status] = i + 1;
            }
        }
        ans as i32

=======

        let mut dp = vec![s.len(); 1 << 5];
        dp[0] = 0;
        let mut state = 0;
        let mut res = 0;
        for (i, &b) in s.as_bytes().iter().enumerate() {
            match b {
                b'a' => state ^= 1 << 0,
                b'e' => state ^= 1 << 1,
                b'i' => state ^= 1 << 2,
                b'o' => state ^= 1 << 3,
                b'u' => state ^= 1 << 4,
                _ => (),
            }
            dp[state] = dp[state].min(i + 1);
            res = res.max(i + 1 - dp[state]);
        }
        res as i32

=======

        let mut result = 0;
        let mut state = 0;
        let mut seen = vec![0; 32];
        for (i, c) in s.chars().enumerate() {
            let mut mask = 0;
            match c {
                'a' => mask = 1,
                'e' => mask = 2,
                'i' => mask = 4,
                'o' => mask = 8,
                'u' => mask = 16,
                _ => (),
            }
            state ^= mask;
            if seen[state] == 0 {
                seen[state] = i as i32 + 1;
            }
            result = result.max(i as i32 + 1 - seen[state]);
        }
        result
