Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 1..=text1.len() {
            for j in 1..=text2.len() {
                if text1.as_bytes()[i - 1] == text2.as_bytes()[j - 1] {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 1..=text1.len() {
            for j in 1..=text2.len() {
                if text1.as_bytes()[i - 1] == text2.as_bytes()[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 1..=text1.len() {
            for j in 1..=text2.len() {
                if text1.as_bytes()[i - 1] == text2.as_bytes()[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = std::cmp::max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 1..=text1.len() {
            for j in 1..=text2.len() {
                if text1.as_bytes()[i - 1] == text2.as_bytes()[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i][j - 1].max(dp[i - 1][j]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 0..text1.len() {
            for j in 0..text2.len() {
                if text1.as_bytes()[i] == text2.as_bytes()[j] {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                } else {
                    dp[i + 1][j + 1] = dp[i + 1][j].max(dp[i][j + 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for (i, c1) in text1.chars().enumerate() {
            for (j, c2) in text2.chars().enumerate() {
                if c1 == c2 {
                    dp[i + 1][j + 1] = dp[i][j] + 1;
                } else {
                    dp[i + 1][j + 1] = std::cmp::max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let text1: Vec<char> = text1.chars().collect();
        let text2: Vec<char> = text2.chars().collect();
        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        for i in 1..=text1.len() {
            for j in 1..=text2.len() {
                if text1[i - 1] == text2[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
                }
            }
        }
        dp[text1.len()][text2.len()]

=======

        let (text1, text2) = (text1.into_bytes(), text2.into_bytes());
        let (l1, l2) = (text1.len(), text2.len());
        let mut dp = vec![vec![0; l2 + 1]; l1 + 1];
        for i in 1..=l1 {
            for j in 1..=l2 {
                if text1[i - 1] == text2[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
                }
            }
        }
        dp[l1][l2]

=======

        let mut dp = vec![vec![0; text2.len() + 1]; text1.len() + 1];
        
        for (i, c1) in text1.chars().enumerate() {
            for (j, c2) in text2.chars().enumerate() {
                dp[i + 1][j + 1] = if c1 == c2 {
                    dp[i][j] + 1
                } else {
                    dp[i][j + 1].max(dp[i + 1][j])
                }
            }
        }
        
        dp[text1.len()][text2.len()]
