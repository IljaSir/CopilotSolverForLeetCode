Synthesizing 10/10 solutions

=======

        let mut result = Vec::new();
        let mut path = Vec::new();
        path.push(0);
        Solution::dfs(&graph, 0, &mut path, &mut result);
        result
    }
    
    fn dfs(graph: &Vec<Vec<i32>>, node: i32, path: &mut Vec<i32>, result: &mut Vec<Vec<i32>>) {
        if node == (graph.len() - 1) as i32 {
            result.push(path.clone());
            return;
        }
        for i in 0..graph[node as usize].len() {
            path.push(graph[node as usize][i]);
            Solution::dfs(graph, graph[node as usize][i], path, result);
            path.pop();
        }

=======

        let mut res: Vec<Vec<i32>> = vec![];
        let mut path: Vec<i32> = vec![];
        path.push(0);
        Self::dfs(&mut res, &mut path, &graph, 0);
        res
    }
    fn dfs(res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, graph: &Vec<Vec<i32>>, node: i32) {
        if node == (graph.len() - 1) as i32 {
            res.push(path.clone());
            return;
        }
        for i in 0..graph[node as usize].len() {
            path.push(graph[node as usize][i]);
            Self::dfs(res, path, graph, graph[node as usize][i]);
            path.pop();
        }

=======

        let mut ans = vec![];
        let mut path = vec![];
        path.push(0);
        Self::dfs(graph, 0, &mut path, &mut ans);
        ans
    }
    fn dfs(graph: Vec<Vec<i32>>, cur: usize, path: &mut Vec<i32>, ans: &mut Vec<Vec<i32>>) {
        if cur == graph.len() - 1 {
            ans.push(path.clone());
            return;
        }
        for &next in &graph[cur] {
            path.push(next);
            Self::dfs(graph, next as usize, path, ans);
            path.pop();
        }

=======

        let mut res = vec![];
        let mut path = vec![];
        Self::dfs(&mut res, &mut path, &graph, 0);
        res
    }

    fn dfs(res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, graph: &Vec<Vec<i32>>, node: i32) {
        path.push(node);
        if node == (graph.len() - 1) as i32 {
            res.push(path.clone());
        } else {
            for &next in &graph[node as usize] {
                Self::dfs(res, path, graph, next);
            }
        }
        path.pop();

=======

        let n = graph.len();
        let mut res = vec![];
        let mut path = vec![];
        Solution::dfs(&graph, &mut res, &mut path, 0, n as i32 - 1);
        res
    }
    
    fn dfs(graph: &Vec<Vec<i32>>, res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, cur: i32, target: i32) {
        path.push(cur);
        if cur == target {
            res.push(path.clone());
        } else {
            for &next in graph[cur as usize].iter() {
                Solution::dfs(graph, res, path, next, target);
            }
        }
        path.pop();

=======

        let mut res = vec![];
        let mut path = vec![];
        let n = graph.len();
        path.push(0);
        Self::dfs(&graph, 0, n - 1, &mut path, &mut res);
        res
    }
    fn dfs(graph: &Vec<Vec<i32>>, cur: usize, n: usize, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if cur == n {
            res.push(path.clone());
            return;
        }
        for &v in graph[cur].iter() {
            path.push(v);
            Self::dfs(graph, v as usize, n, path, res);
            path.pop();
        }

=======

        let mut res = vec![];
        let mut path = vec![0];
        Self::dfs(0, graph, &mut path, &mut res);
        res
    }
    fn dfs(node: i32, graph: Vec<Vec<i32>>, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if node == graph.len() as i32 - 1 {
            res.push(path.clone());
        } else {
            for &n in &graph[node as usize] {
                path.push(n);
                Self::dfs(n, graph.to_vec(), path, res);
                path.pop();
            }
        }

=======

        let mut res = vec![];
        let mut path = vec![];
        path.push(0);
        Solution::dfs(&graph, &mut res, &mut path, 0);
        res
    }
    pub fn dfs(graph: &Vec<Vec<i32>>, res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, index: i32) {
        if index == (graph.len() - 1) as i32 {
            res.push(path.clone());
            return;
        }
        for &i in graph[index as usize].iter() {
            path.push(i);
            Solution::dfs(graph, res, path, i);
            path.pop();
        }

=======

        let mut res: Vec<Vec<i32>> = Vec::new();
        Solution::dfs(0, &graph, &mut res, &mut Vec::new());
        res
    }
    fn dfs(node: i32, graph: &Vec<Vec<i32>>, res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>) {
        path.push(node);
        if node == (graph.len() - 1) as i32 {
            res.push(path.clone());
        } else {
            for &next in &graph[node as usize] {
                Solution::dfs(next, graph, res, path);
            }
        }
        path.pop();

=======

        let n = graph.len();
        let mut vis = vec![false; n];
        let mut ans = vec![];
        let mut path = vec![];
        Self::dfs(0, n - 1, &graph, &mut vis, &mut path, &mut ans);
        ans
    }
    fn dfs(src: usize, dest: usize, graph: &Vec<Vec<i32>>, vis: &mut Vec<bool>, path: &mut Vec<i32>, ans: &mut Vec<Vec<i32>>) {
        vis[src] = true;
        path.push(src as i32);
        if src == dest {
            ans.push(path.clone());
        } else {
            for &v in graph[src].iter() {
                if !vis[v as usize] {
                    Self::dfs(v as usize, dest, graph, vis, path, ans);
                }
            }
        }
        path.pop();
        vis[src] = false;
