Synthesizing 10/10 solutions

=======

        let (mut xy, mut yx) = (0, 0);
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 == c2 {
                continue;
            }
            if c1 == 'x' {
                xy += 1;
            } else {
                yx += 1;
            }
        }
        let mut ans = xy / 2 + yx / 2;
        xy %= 2;
        yx %= 2;
        if (xy + yx) % 2 == 1 {
            return -1;
        }
        if xy == 1 {
            ans += 2;
        }
        ans
    }
}

=======

        let mut x1 = 0;
        let mut y1 = 0;
        let mut x2 = 0;
        let mut y2 = 0;
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 == 'x' {
                x1 += 1;
            } else {
                y1 += 1;
            }
            if c2 == 'x' {
                x2 += 1;
            } else {
                y2 += 1;
            }
        }
        if (x1 + x2) % 2 != 0 || (y1 + y2) % 2 != 0 {
            return -1;
        }
        let mut count = 0;
        if x1 % 2 == 1 {
            count += 1;
            x1 -= 1;
            y2 -= 1;
        }
        if y1 % 2 == 1 {
            count += 1;
            y1 -= 1;
            x2 -= 1;
        }
        count += x1 / 2 * 2 + y1 / 2 * 2;
        count

=======

        let (mut x1, mut y1) = (0, 0);
        let (mut x2, mut y2) = (0, 0);
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 == 'x' && c2 == 'y' {
                x1 += 1;
            } else if c1 == 'y' && c2 == 'x' {
                y1 += 1;
            }
        }
        if (x1 + y1) % 2 == 1 {
            return -1;
        }
        x2 = x1 / 2;
        y2 = y1 / 2;
        x1 %= 2;
        y1 %= 2;
        x2 += x1;
        y2 += y1;
        x2 + y2

=======

        let mut x = 0;
        let mut y = 0;
        for i in 0..s1.len() {
            if s1.as_bytes()[i] == s2.as_bytes()[i] {
                continue;
            }
            if s1.as_bytes()[i] == b'x' {
                x += 1;
            } else {
                y += 1;
            }
        }
        if (x + y) % 2 == 1 {
            return -1;
        }
        x / 2 + y / 2 + (x % 2) * 2

=======

        let mut x = 0;
        let mut y = 0;
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 == c2 {
                continue;
            }
            if c1 == 'x' {
                x += 1;
            } else {
                y += 1;
            }
        }
        if (x + y) % 2 == 1 {
            return -1;
        }
        let mut res = x / 2 + y / 2;
        if x % 2 == 1 {
            res += 2;
        }
        res

=======

        let mut x = 0;
        let mut y = 0;
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            if c1 == c2 {
                continue;
            }
            if c1 == 'x' {
                x += 1;
            } else {
                y += 1;
            }
        }
        let mut ans = x / 2 + y / 2;
        if x % 2 == 1 && y % 2 == 1 {
            ans += 2;
        }
        if x % 2 == 1 && y % 2 == 0 || x % 2 == 0 && y % 2 == 1 {
            return -1;
        }
        ans

=======

        let mut a = 0;
        let mut b = 0;
        let s1 = s1.as_bytes();
        let s2 = s2.as_bytes();
        for i in 0..s1.len() {
            if s1[i] == s2[i] { continue; }
            if s1[i] == b'x' { a += 1; } else { b += 1; }
        }
        let mut ans = 0;
        ans += a / 2;
        ans += b / 2;
        a %= 2;
        b %= 2;
        if a == b {
            ans += a * 2;
        } else {
            ans = -1;
        }
        ans

=======

        let mut res = 0;
        let mut xy = 0;
        let mut yx = 0;
        for i in 0..s1.len() {
            if s1.as_bytes()[i] != s2.as_bytes()[i] {
                if s1.as_bytes()[i] == 'x' as u8 {
                    xy += 1;
                } else {
                    yx += 1;
                }
            }
        }
        res += xy / 2 + yx / 2;
        xy %= 2;
        yx %= 2;
        if xy == 0 && yx == 0 {
            res
        } else if xy == 1 && yx == 1 {
            res + 2
        } else {
            -1
        }

=======

        let mut count = 0;
        let mut count_x = 0;
        let mut count_y = 0;
        for i in 0..s1.len() {
            if s1.as_bytes()[i] != s2.as_bytes()[i] {
                count += 1;
                if s1.as_bytes()[i] == 'x' as u8 {
                    count_x += 1;
                } else {
                    count_y += 1;
                }
            }
        }
        if count % 2 == 1 {
            return -1;
        }
        let mut result = 0;
        if count_x % 2 == 1 {
            result += 1;
        }
        if count_y % 2 == 1 {
            result += 1;
        }
        result

=======

        let mut count_x = 0;
        let mut count_y = 0;
        let mut result = 0;
        for (c1, c2) in s1.chars().zip(s2.chars()) {
            match (c1, c2) {
                ('x', 'y') => count_x += 1,
                ('y', 'x') => count_y += 1,
                _ => (),
            }
        }
        result += count_x / 2 + count_y / 2;
        if count_x % 2 != count_y % 2 {
            return -1;
        }
        if count_x % 2 == 1 {
            result += 2;
        }
        result
