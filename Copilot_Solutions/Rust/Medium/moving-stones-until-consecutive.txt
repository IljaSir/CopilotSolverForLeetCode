Synthesizing 10/10 solutions

=======

        let mut v = vec![a, b, c];
        v.sort();
        let min = if v[1] - v[0] == 1 && v[2] - v[1] == 1 {
            0
        } else if v[1] - v[0] <= 2 || v[2] - v[1] <= 2 {
            1
        } else {
            2
        };
        let max = v[2] - v[0] - 2;
        vec![min, max]

=======

        let mut v = vec![a, b, c];
        v.sort();
        let (a, b, c) = (v[0], v[1], v[2]);
        let mut min = 2;
        if b - a == 1 && c - b == 1 {
            min = 0;
        } else if b - a <= 2 || c - b <= 2 {
            min = 1;
        }
        let max = c - a - 2;
        vec![min, max]

=======

        let mut v = vec![a, b, c];
        v.sort();
        let (a, b, c) = (v[0], v[1], v[2]);
        let mut min = 0;
        if b - a == 2 || c - b == 2 {
            min = 1;
        } else if b - a > 2 {
            min += 1;
        }
        if c - b > 2 {
            min += 1;
        }
        let max = c - a - 2;
        vec![min, max]

=======

        let mut stones = vec![a, b, c];
        stones.sort();
        let min = if stones[0] + 1 == stones[1] && stones[1] + 1 == stones[2] {
            0
        } else if stones[0] + 1 == stones[1] || stones[1] + 1 == stones[2] {
            1
        } else {
            2
        };
        let max = stones[2] - stones[0] - 2;
        vec![min, max]

=======

        let mut stones = vec![a, b, c];
        stones.sort();
        let a = stones[0];
        let b = stones[1];
        let c = stones[2];
        let mut min_moves = 0;
        if b - a > 1 {
            min_moves += 1;
        }
        if c - b > 1 {
            min_moves += 1;
        }
        if b - a == 2 || c - b == 2 {
            min_moves = 1;
        }
        let max_moves = c - a - 2;
        vec![min_moves, max_moves]

=======

        let mut v = vec![a, b, c];
        v.sort();
        let mut min = 0;
        if v[1] - v[0] > 1 {
            min += 1;
        }
        if v[2] - v[1] > 1 {
            min += 1;
        }
        if min == 2 && v[1] - v[0] == 2 || v[2] - v[1] == 2 {
            min -= 1;
        }
        let max = v[2] - v[0] - 2;
        vec![min, max]

=======

        let mut v = vec![a, b, c];
        v.sort();
        let a = v[0];
        let b = v[1];
        let c = v[2];
        let mut max = c - a - 2;
        let mut min = 0;
        if b - a == 1 && c - b == 1 {
            max = 0;
        } else if b - a == 1 || c - b == 1 {
            min = 1;
        } else {
            min = 2;
        }
        vec![min, max]
    }
}

=======

        let mut v = vec![a, b, c];
        v.sort();
        let mut min = 2;
        if v[1] - v[0] == 1 && v[2] - v[1] == 1 {
            min = 0;
        } else if v[1] - v[0] == 1 || v[2] - v[1] == 1 || v[1] - v[0] == 2 || v[2] - v[1] == 2 {
            min = 1;
        }
        let max = v[2] - v[0] - 2;
        vec![min, max]

=======

        let mut vec = vec![a, b, c];
        vec.sort();
        let a = vec[0];
        let b = vec[1];
        let c = vec[2];
        let mut min = 2;
        if b - a == 1 && c - b == 1 {
            min = 0;
        } else if b - a == 1 || c - b == 1 || b - a == 2 || c - b == 2 {
            min = 1;
        }
        let max = c - a - 2;
        vec![min, max]

=======

        let mut nums = vec![a, b, c];
        nums.sort();
        let mut min = 2;
        if nums[2] - nums[1] <= 2 || nums[1] - nums[0] <= 2 {
            min = 1;
        }
        if nums[2] - nums[1] == 1 && nums[1] - nums[0] == 1 {
            min = 0;
        }
        let max = nums[2] - nums[1] - 1 + nums[1] - nums[0] - 1;
        vec![min, max]
