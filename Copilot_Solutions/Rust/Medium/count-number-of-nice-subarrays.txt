Synthesizing 7/10 solutions

=======

        let mut odd = Vec::new();
        odd.push(-1);
        for i in 0..nums.len() {
            if nums[i] % 2 == 1 {
                odd.push(i as i32);
            }
        }
        odd.push(nums.len() as i32);
        let mut ans = 0;
        for i in 1..(odd.len() - k) {
            ans += (odd[i] - odd[i - 1]) * (odd[i + k] - odd[i + k - 1]);
        }
        ans

=======

        let mut odd = vec![-1];
        for i in 0..nums.len() {
            if nums[i] & 1 == 1 {
                odd.push(i as i32);
            }
        }
        odd.push(nums.len() as i32);
        let mut res = 0;
        for i in 1..odd.len() - k as usize {
            res += (odd[i] - odd[i-1]) * (odd[i+k as usize] - odd[i+k as usize - 1]);
        }
        res

=======

        let mut ans = 0;
        let mut odd = 0;
        let mut cnt = vec![0; nums.len() + 1];
        cnt[0] = 1;
        for i in 0..nums.len() {
            if nums[i] % 2 == 1 {
                odd += 1;
            }
            if odd >= k {
                ans += cnt[(odd - k) as usize];
            }
            cnt[odd as usize] += 1;
        }
        ans

=======

        
    }
}

=======

        let mut res = 0;
        let mut odd = 0;
        let mut cnt = vec![0; nums.len() + 1];
        for num in nums {
            if num % 2 == 1 {
                odd += 1;
            }
            if odd >= k {
                cnt[odd as usize] += 1;
            }
        }
        odd = 0;
        for num in nums {
            if num % 2 == 1 {
                odd += 1;
            }
            if odd >= k {
                res += cnt[odd as usize - k as usize];
            }
        }
        res

=======

        let mut cnt = 0;
        let mut k = k;
        let mut i = 0;
        let mut j = 0;
        while j < nums.len() {
            k -= nums[j] & 1;
            while k < 0 {
                k += nums[i] & 1;
                i += 1;
            }
            let mut t = i;
            while t < nums.len() && nums[t] & 1 == 0 {
                t += 1;
            }
            cnt += t - i + 1;
            j += 1;
        }
        cnt

=======

        let mut res = 0;
        let mut odd = 0;
        let mut odd_pos = vec![-1];
        for (i, &n) in nums.iter().enumerate() {
            if n & 1 == 1 {
                odd += 1;
                odd_pos.push(i as i32);
            }
            if odd >= k {
                res += odd_pos[odd as usize - k as usize + 1] - odd_pos[odd as usize - k as usize] + 1;
            }
        }
        res
