Synthesizing 10/10 solutions

=======

        let mut i = 1;
        let mut count = 0;
        while count == 0 || i != 1 {
            if i < n / 2 {
                i *= 2;
            } else {
                i = n - i;
            }
            count += 1;
        }
        count

=======

        let mut i = 1;
        let mut count = 0;
        while i != 1 || count == 0 {
            if i < n / 2 {
                i *= 2;
            } else {
                i = (i - n / 2) * 2 + 1;
            }
            count += 1;
        }
        count

=======

        let mut count = 0;
        let mut i = 1;
        loop {
            i = if i % 2 == 0 { i / 2 } else { n / 2 + (i - 1) / 2 };
            count += 1;
            if i == 1 {
                break;
            }
        }
        count

=======

        let mut res = 0;
        let mut i = 1;
        while {
            i = if i % 2 == 0 { i / 2 } else { n / 2 + (i - 1) / 2 };
            res += 1;
            i != 1
        } {}
        res

=======

        let mut x = 1;
        let mut count = 0;
        while x != 1 || count == 0 {
            if x < n / 2 {
                x *= 2;
            } else {
                x = n - x;
            }
            count += 1;
        }
        count

=======

        let mut a = 1;
        let mut c = 0;
        while a != 1 || c == 0 {
            if a < n / 2 {
                a *= 2;
            } else {
                a = a * 2 - n + 1;
            }
            c += 1;
        }
        c

=======

        let mut ans = 0;
        let mut i = 1;
        loop {
            ans += 1;
            i = if i % 2 == 0 { i / 2 } else { n / 2 + (i - 1) / 2 };
            if i == 1 {
                break;
            }
        }
        ans

=======

        let mut i = 1;
        let mut c = 0;
        loop {
            if i == 1 {
                return c;
            }
            if i < n / 2 {
                i *= 2;
            } else {
                i = (i - n / 2) * 2 + 1;
            }
            c += 1;
        }
    }
}

=======

        let mut perm = (0..n).collect::<Vec<i32>>();
        let mut arr = perm.clone();
        let mut count = 0;
        loop {
            count += 1;
            for i in 0..n {
                if i % 2 == 0 {
                    arr[i as usize] = perm[(i / 2) as usize];
                } else {
                    arr[i as usize] = perm[(n / 2 + (i - 1) / 2) as usize];
                }
            }
            if arr == perm {
                break;
            }
            perm = arr.clone();
        }
        count

=======

        let n = n as usize;
        let mut arr = vec![0; n];
        for i in 0..n {
            arr[i] = i;
        }
        let mut count = 0;
        let mut perm = arr.clone();
        loop {
            count += 1;
            for i in 0..n {
                if i % 2 == 0 {
                    perm[i] = arr[i / 2];
                } else {
                    perm[i] = arr[n / 2 + (i - 1) / 2];
                }
            }
            arr = perm.clone();
            if arr == (0..n).collect::<Vec<usize>>() {
                break;
            }
        }
        count
