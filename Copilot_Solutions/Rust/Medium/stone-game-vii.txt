Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + stones[i];
        }
        for i in (0..n).rev() {
            for j in i + 1..n {
                dp[i][j] = (sum[j + 1] - sum[i + 1] - dp[i + 1][j]).max(sum[j] - sum[i] - dp[i][j - 1]);
            }
        }
        dp[0][n - 1]

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + stones[i];
        }
        for i in (0..n).rev() {
            for j in i + 1..n {
                dp[i][j] = sum[j + 1] - sum[i + 1] - dp[i + 1][j].min(dp[i][j - 1]);
            }
        }
        dp[0][n - 1]

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + stones[i];
        }
        for i in 1..n {
            for j in 0..n - i {
                let l = j;
                let r = i + j;
                dp[l][r] = (sum[r + 1] - sum[l + 1] - dp[l + 1][r]).max(sum[r] - sum[l] - dp[l][r - 1]);
            }
        }
        dp[0][n - 1]

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n+1];
        for i in 0..n {
            sum[i+1] = sum[i] + stones[i];
        }
        for i in (0..n).rev() {
            for j in i+1..n {
                dp[i][j] = (sum[j+1] - sum[i+1] - dp[i+1][j]).max(sum[j] - sum[i] - dp[i][j-1]);
            }
        }
        dp[0][n-1]
    }
}

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n+1];
        for i in 0..n {
            sum[i+1] = sum[i] + stones[i];
        }
        for i in (0..n).rev() {
            for j in i+1..n {
                dp[i][j] = (sum[j+1] - sum[i+1]).max(sum[j] - sum[i]) - dp[i+1][j].max(dp[i][j-1]);
            }
        }
        dp[0][n-1]
    }
}

=======

        let n = stones.len();
        let mut dp = vec![vec![0; n]; n];
        let mut pre = vec![0; n + 1];
        for i in 0..n {
            pre[i + 1] = pre[i] + stones[i];
        }
        for i in (0..n).rev() {
            for j in i + 1..n {
                dp[i][j] = pre[j + 1] - pre[i + 1] - dp[i + 1][j];
                dp[i][j] = dp[i][j].max(pre[j] - pre[i] - dp[i][j - 1]);
            }
        }
        dp[0][n - 1]

=======

        
    }
}
