Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == grid[j][i] {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                if grid[i][j] == grid[j][i] {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let n = grid.len();
        for i in 0..n {
            for j in 0..n {
                if grid[i][j] == grid[j][i] {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let n = grid.len();
        let mut row = vec![0; n];
        let mut col = vec![0; n];
        for i in 0..n {
            for j in 0..n {
                row[i] = row[i] * 100_001 + grid[i][j];
                col[j] = col[j] * 100_001 + grid[i][j];
            }
        }
        let mut res = 0;
        for i in 0..n {
            for j in 0..n {
                if row[i] == col[j] {
                    res += 1;
                }
            }
        }
        res

=======

        let mut pairs = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if i == j && grid[i][j] == grid[j][i] {
                    pairs += 1;
                }
            }
        }
        pairs
    }
}

=======

        let mut count = 0;
        let mut row = vec![0; grid.len()];
        let mut col = vec![0; grid.len()];
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                if grid[i][j] == grid[j][i] {
                    count += 1;
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        let mut row = vec![vec![]; grid.len()];
        let mut col = vec![vec![]; grid.len()];
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                row[i].push(grid[i][j]);
                col[j].push(grid[i][j]);
            }
        }
        for i in 0..grid.len() {
            for j in 0..grid.len() {
                if row[i] == col[j] {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut row = vec![];
        let mut col = vec![];
        for i in 0..grid.len() {
            row.push(grid[i].to_vec());
            col.push(vec![]);
            for j in 0..grid[i].len() {
                col[i].push(grid[j][i]);
            }
        }
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if row[i] == col[j] {
                    count += 1;
                }
            }
        }
        count
