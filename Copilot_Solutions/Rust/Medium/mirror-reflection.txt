Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut p = p;
        let mut q = q;
        while p % 2 == 0 && q % 2 == 0 {
            p /= 2;
            q /= 2;
        }
        if p % 2 == 0 {
            2
        } else if q % 2 == 0 {
            0
        } else {
            1
        }

=======

        let mut p = p;
        let mut q = q;
        while p % 2 == 0 && q % 2 == 0 {
            p /= 2;
            q /= 2;
        }
        if p % 2 == 1 && q % 2 == 1 {
            1
        } else if p % 2 == 1 && q % 2 == 0 {
            0
        } else {
            2
        }

=======

        let mut m = p;
        let mut n = q;
        while m % 2 == 0 && n % 2 == 0 {
            m /= 2;
            n /= 2;
        }
        if m % 2 == 0 {
            2
        } else if n % 2 == 0 {
            0
        } else {
            1
        }

=======

        
    }
}

=======

        let (mut x, mut y) = (0, 0);
        let (mut dx, mut dy) = (1, 1);
        while !(x == p && y == 0) {
            x += dx;
            y += dy;
            if x == p || x == 0 {
                dx = -dx;
            }
            if y == p || y == 0 {
                dy = -dy;
            }
        }
        if x == 0 && y == p {
            0
        } else if x == p && y == p {
            1
        } else {
            2
        }
    }
}

=======

        let mut x = 1;
        let mut y = 1;
        let mut res = 0;
        while x * p != y * q {
            x += 1;
            y = (x * q) / p;
            res = (res + 1) % 2;
        }
        res + 2 * (y % 2)
