Synthesizing 10/10 solutions

=======

        let mut ones = 0;
        for n in &nums {
            if *n == 1 {
                ones += 1;
            }
        }
        let mut zeros = 0;
        let mut max = 0;
        let mut result = vec![];
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zeros += 1;
            } else {
                ones -= 1;
            }
            let score = zeros + ones;
            if score > max {
                max = score;
                result = vec![i as i32 + 1];
            } else if score == max {
                result.push(i as i32 + 1);
            }
        }
        result

=======

        let mut left_zeroes = 0;
        let mut right_ones = nums.iter().filter(|&&x| x == 1).count();
        let mut max_score = left_zeroes + right_ones;
        let mut max_indices = vec![0];
        for i in 1..nums.len() {
            if nums[i - 1] == 0 {
                left_zeroes += 1;
            } else {
                right_ones -= 1;
            }
            let score = left_zeroes + right_ones;
            if score > max_score {
                max_score = score;
                max_indices.clear();
                max_indices.push(i as i32);
            } else if score == max_score {
                max_indices.push(i as i32);
            }
        }
        max_indices
    }
}

=======

        let mut ones = 0;
        let mut zeros = 0;
        let mut max = 0;
        let mut result = vec![];
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zeros += 1;
            } else {
                ones += 1;
            }
        }
        let mut cur = 0;
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zeros -= 1;
                cur += 1;
            } else {
                ones -= 1;
                cur -= 1;
            }
            if cur > max {
                max = cur;
                result.clear();
                result.push(i as i32 + 1);
            } else if cur == max {
                result.push(i as i32 + 1);
            }
        }
        result
    }
}

=======

        let mut zeros = 0;
        let mut ones = 0;
        let mut max_score = 0;
        let mut max_indices = Vec::new();
        for i in 0..nums.len() {
            if nums[i] == 0 {
                zeros += 1;
            } else {
                ones += 1;
            }
            let score = zeros + ones;
            if score > max_score {
                max_score = score;
                max_indices = Vec::new();
                max_indices.push(i as i32);
            } else if score == max_score {
                max_indices.push(i as i32);
            }
        }
        max_indices
    }
}

=======

        let mut sum = 0;
        let mut max = 0;
        let mut res = Vec::new();
        for i in 0..nums.len() {
            if nums[i] == 0 {
                sum += 1;
            } else {
                sum -= 1;
            }
            if sum > max {
                max = sum;
                res.clear();
                res.push(i as i32 + 1);
            } else if sum == max {
                res.push(i as i32 + 1);
            }
        }
        res

=======

        let mut max = 0;
        let mut res = Vec::new();
        let mut sum = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                sum += 1;
            }
        }
        let mut left = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                sum -= 1;
            } else {
                left += 1;
            }
            let score = left + sum;
            if score > max {
                res.clear();
                res.push(i as i32);
                max = score;
            } else if score == max {
                res.push(i as i32);
            }
        }
        res

=======

        let mut max_score = 0;
        let mut max_score_indices = Vec::new();
        let mut left_zero_count = 0;
        let mut right_one_count = nums.iter().filter(|&x| *x == 1).count();
        for (i, &x) in nums.iter().enumerate() {
            if x == 0 {
                left_zero_count += 1;
            } else {
                right_one_count -= 1;
            }
            let score = left_zero_count + right_one_count;
            if score > max_score {
                max_score = score;
                max_score_indices.clear();
                max_score_indices.push(i as i32 + 1);
            } else if score == max_score {
                max_score_indices.push(i as i32 + 1);
            }
        }
        max_score_indices

=======

        let n = nums.len();
        let mut max = 0;
        let mut res = Vec::new();
        let mut count = 0;
        for i in 0..n {
            if nums[i] == 0 {
                count += 1;
            }
        }
        for i in 0..n {
            if nums[i] == 0 {
                count -= 1;
            }
            if count > max {
                max = count;
                res = vec![i as i32 + 1];
            } else if count == max {
                res.push(i as i32 + 1);
            }
        }
        res
    }
}

=======

        let mut n = nums.len();
        let mut result = vec![];
        let mut max_score = 0;
        let mut score = 0;
        for i in 0..n {
            if nums[i] == 0 {
                score += 1;
            }
        }
        max_score = score;
        for i in 0..n {
            if nums[i] == 0 {
                score -= 1;
            } else {
                score += 1;
            }
            if score > max_score {
                max_score = score;
                result.clear();
                result.push(i as i32 + 1);
            } else if score == max_score {
                result.push(i as i32 + 1);
            }
        }
        result

=======

        let mut res = vec![];
        let mut max = 0;
        let mut cnt = 0;
        let mut ones = vec![0; nums.len()];
        let mut zeros = vec![0; nums.len()];
        for i in 0..nums.len() {
            if nums[i] == 0 {
                cnt += 1;
            }
            zeros[i] = cnt;
        }
        cnt = 0;
        for i in (0..nums.len()).rev() {
            if nums[i] == 1 {
                cnt += 1;
            }
            ones[i] = cnt;
        }
        for i in 0..nums.len() {
            let score = zeros[i] + ones[i];
            if score > max {
                max = score;
                res.clear();
                res.push(i as i32);
            } else if score == max {
                res.push(i as i32);
            }
        }
        res
    }
}
