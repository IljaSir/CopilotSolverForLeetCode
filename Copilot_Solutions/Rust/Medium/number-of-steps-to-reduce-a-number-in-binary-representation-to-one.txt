Synthesizing 10/10 solutions

=======

        let mut n = i64::from_str_radix(&s, 2).unwrap();
        let mut count = 0;
        while n > 1 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n += 1;
            }
            count += 1;
        }
        count

=======

        let mut n = s.parse::<i32>().unwrap();
        let mut res = 0;
        while n > 1 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n += 1;
            }
            res += 1;
        }
        res

=======

        let mut s = s;
        let mut count = 0;
        while s != "1" {
            if s.chars().last().unwrap() == '0' {
                s.pop();
            } else {
                let mut i = s.len() - 1;
                while i > 0 && s.chars().nth(i).unwrap() == '1' {
                    s.remove(i);
                    i -= 1;
                }
                if i == 0 {
                    s.remove(i);
                } else {
                    s.remove(i);
                }
                s.push('1');
            }
            count += 1;
        }
        count

=======

        let mut steps = 0;
        let mut s = s;
        while s != "1" {
            steps += 1;
            if s.chars().last().unwrap() == '1' {
                s = format!("{:b}", i32::from_str_radix(&s, 2).unwrap() + 1);
            } else {
                s = s[0..s.len() - 1].to_string();
            }
        }
        steps

=======

        let mut c = 0;
        let mut s = s;
        while s != "1" {
            if s.ends_with("0") {
                s.pop();
            } else {
                let mut i = s.len() - 1;
                while i > 0 && s.as_bytes()[i] == b'1' {
                    s.replace_range(i..=i, "0");
                    i -= 1;
                }
                if i == 0 && s.as_bytes()[i] == b'1' {
                    s.replace_range(i..=i, "0");
                    s.insert(0, '1');
                } else {
                    s.replace_range(i..=i, "1");
                }
            }
            c += 1;
        }
        c

=======

        let mut num = s;
        let mut step = 0;
        while num != "1" {
            if num.ends_with("0") {
                num.pop();
            } else {
                let mut i = num.len() - 1;
                while i > 0 && num.chars().nth(i).unwrap() == '1' {
                    num.replace_range(i..i+1, "0");
                    i -= 1;
                }
                if i == 0 && num.chars().nth(i).unwrap() == '1' {
                    num.replace_range(i..i+1, "0");
                    num.insert(0, '1');
                }
            }
            step += 1;
        }
        step

=======

        let mut s = s.into_bytes();
        let mut res = 0;
        while s.len() > 1 {
            let last = s.pop().unwrap();
            if last == b'1' {
                res += 1;
                let mut i = s.len();
                while i > 0 && s[i - 1] == b'1' {
                    s[i - 1] = b'0';
                    i -= 1;
                }
                if i == 0 {
                    s.insert(0, b'1');
                } else {
                    s[i - 1] = b'1';
                }
            }
            res += 1;
        }
        res

=======

        let mut s = s;
        let mut count = 0;
        let mut carry = 0;
        while s.len() > 1 || s != "1" {
            count += 1;
            if s.ends_with("1") {
                s = format!("{:0>1$}", s, s.len() + 1);
                carry = 1;
            } else {
                s.pop();
            }
            if carry == 1 {
                for i in (0..s.len()).rev() {
                    if s.as_bytes()[i] == b'1' {
                        s.as_bytes_mut()[i] = b'0';
                    } else {
                        s.as_bytes_mut()[i] = b'1';
                        carry = 0;
                        break;
                    }
                }
            }
        }
        count

=======

        let mut step = 0;
        let mut s = s;
        while s != "1" {
            let l = s.len();
            if s.as_bytes()[l-1] == b'0' {
                s = s[..l-1].to_string();
            } else {
                let mut i = l - 1;
                let mut c = 0;
                while i >= 0 && s.as_bytes()[i] == b'1' {
                    c += 1;
                    i -= 1;
                }
                s = s[..i+1].to_string();
                for _ in 0..c+1 {
                    s.push('0');
                }
            }
            step += 1;
        }
        step

=======

        let mut s = s;
        let mut steps = 0;
        while s.len() > 1 {
            if s.ends_with('1') {
                let mut carry = true;
                let mut chars = s.chars().rev();
                let mut new_s = String::new();
                while let Some(c) = chars.next() {
                    if carry {
                        if c == '1' {
                            new_s.push('0');
                        } else {
                            new_s.push('1');
                            carry = false;
                        }
                    } else {
                        new_s.push(c);
                    }
                }
                if carry {
                    new_s.push('1');
                }
                s = new_s.chars().rev().collect();
            } else {
                s.pop();
            }
            steps += 1;
        }
        steps
