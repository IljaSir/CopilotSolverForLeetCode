Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![0; 3];
        for num in nums {
            let mut tmp = vec![0; 3];
            for i in 0..3 {
                tmp[(i + num % 3) % 3] = std::cmp::max(dp[(i + num % 3) % 3], dp[i] + num);
            }
            dp = tmp;
        }
        dp[0]

=======

        
    }
}

=======

        let mut dp = vec![0; 3];
        for n in nums {
            let mut tmp = dp.clone();
            for i in 0..3 {
                tmp[(i + n % 3) % 3] = dp[i].max(dp[i] + n);
            }
            dp = tmp;
        }
        dp[0]

=======

        let mut dp = vec![0; 3];
        for num in nums {
            let mut temp = dp.clone();
            for i in 0..3 {
                temp[(i + num % 3) % 3] = dp[(i + num % 3) % 3].max(dp[i] + num);
            }
            dp = temp;
        }
        dp[0]

=======

        let mut dp = vec![0; 3];
        for n in nums {
            let mut dp2 = vec![0; 3];
            for i in 0..3 {
                dp2[(n + i) % 3] = std::cmp::max(dp[(n + i) % 3], dp2[(n + i) % 3]);
                dp2[i] = std::cmp::max(dp[i], dp2[i]);
            }
            dp = dp2;
        }
        dp[0]
    }
}

=======

        let mut dp = vec![0; 3];
        for num in nums {
            let mut dp2 = vec![0; 3];
            for i in 0..3 {
                dp2[(num + dp[i]) % 3] = std::cmp::max(dp2[(num + dp[i]) % 3], dp[i] + num);
            }
            dp = dp2;
        }
        dp[0]
    }
}

=======

        let mut dp = vec![0, 0, 0];
        for n in nums {
            let mut next = dp.clone();
            for i in 0..3 {
                next[(i + n % 3) as usize] = std::cmp::max(next[(i + n % 3) as usize], dp[i] + n);
            }
            dp = next;
        }
        dp[0]
