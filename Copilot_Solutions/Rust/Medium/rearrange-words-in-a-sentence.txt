Synthesizing 10/10 solutions

=======

        let mut words = text.split_whitespace().collect::<Vec<&str>>();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        let mut result = words.join(" ");
        result[0..1].make_ascii_uppercase();
        result

=======

        let mut words = text.split_whitespace().collect::<Vec<&str>>();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        let mut result = words.join(" ");
        let mut chars = result.chars().collect::<Vec<char>>();
        chars[0] = chars[0].to_uppercase().nth(0).unwrap();
        result = chars.into_iter().collect();
        result

=======

        let mut words: Vec<&str> = text.split_whitespace().collect();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        words[0] = words[0].to_uppercase().as_str();
        words.join(" ")

=======

        let mut words = text.split_whitespace().collect::<Vec<_>>();
        words[0] = &words[0].to_lowercase();
        words.sort_by_key(|w| w.len());
        words[0] = &words[0].to_uppercase();
        words.join(" ")

=======

        let mut words: Vec<String> = text.split(" ").map(|w| w.to_string()).collect();
        words[0] = words[0].to_lowercase();
        words.sort_by_key(|w| w.len());
        words[0] = words[0].to_uppercase();
        words.join(" ")

=======

        let mut words = text.to_lowercase().split_whitespace().collect::<Vec<&str>>();
        words[0] = words[0].get(0..1).unwrap().to_uppercase().as_str();
        words.sort_by(|a, b| a.len().cmp(&b.len()));
        words.join(" ")
    }
}

=======

        let mut words = text.split_whitespace().collect::<Vec<_>>();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by_key(|word| word.len());
        let mut result = words.join(" ");
        result[0..1].make_ascii_uppercase();
        result

=======

        let mut words: Vec<&str> = text.split_whitespace().collect();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by_key(|word| word.len());
        let mut res = words.join(" ");
        res[0..1].make_ascii_uppercase();
        res

=======

        let mut words = text.split_whitespace().collect::<Vec<_>>();
        words[0] = words[0].to_lowercase().as_str();
        words.sort_by_key(|&s| s.len());
        let mut result = words.join(" ");
        result[0..1].make_ascii_uppercase();
        result

=======

        let mut text = text;
        text = text.to_lowercase();
        let mut words: Vec<&str> = text.split(" ").collect();
        words.sort_by_key(|w| w.len());
        words[0] = words[0].chars().next().unwrap().to_uppercase().to_string() + &words[0][1..];
        words.join(" ")
    }
}
