Synthesizing 10/10 solutions

=======

        let mut stack = Vec::new();
        let mut left = vec![0; arr.len()];
        let mut right = vec![0; arr.len()];
        for i in 0..arr.len() {
            let mut count = 1;
            while let Some((j, _)) = stack.last() {
                if arr[*j] < arr[i] {
                    break;
                }
                let (j, c) = stack.pop().unwrap();
                count += c;
            }
            left[i] = count;
            stack.push((i, count));
        }
        stack.clear();
        for i in (0..arr.len()).rev() {
            let mut count = 1;
            while let Some((j, _)) = stack.last() {
                if arr[*j] <= arr[i] {
                    break;
                }
                let (j, c) = stack.pop().unwrap();
                count += c;
            }
            right[i] = count;
            stack.push((i, count));
        }
        let mut sum = 0;
        for i in 0..arr.len() {
            sum = (sum + left[i] * right[i] * arr[i]) % 1000000007;
        }
        sum
    }
}

=======

        let mut stack = vec![];
        let mut left = vec![0; arr.len()];
        let mut right = vec![0; arr.len()];
        for i in 0..arr.len() {
            let mut count = 1;
            while let Some(&j) = stack.last() {
                if arr[j] <= arr[i] {
                    break;
                }
                count += left[j];
                stack.pop();
            }
            left[i] = count;
            stack.push(i);
        }
        stack.clear();
        for i in (0..arr.len()).rev() {
            let mut count = 1;
            while let Some(&j) = stack.last() {
                if arr[j] < arr[i] {
                    break;
                }
                count += right[j];
                stack.pop();
            }
            right[i] = count;
            stack.push(i);
        }
        let mut res = 0;
        for i in 0..arr.len() {
            res += arr[i] * left[i] * right[i];
            res %= 1_000_000_007;
        }
        res

=======

        let mut stack = vec![];
        let mut left = vec![0; arr.len()];
        let mut right = vec![0; arr.len()];
        let mut i = 0;
        while i < arr.len() {
            while !stack.is_empty() && arr[*stack.last().unwrap()] > arr[i] {
                stack.pop();
            }
            left[i] = if stack.is_empty() { i + 1 } else { i - *stack.last().unwrap() };
            stack.push(i);
            i += 1;
        }
        stack.clear();
        i = arr.len();
        while i > 0 {
            i -= 1;
            while !stack.is_empty() && arr[*stack.last().unwrap()] >= arr[i] {
                stack.pop();
            }
            right[i] = if stack.is_empty() { arr.len() - i } else { *stack.last().unwrap() - i };
            stack.push(i);
        }
        let mut sum = 0;
        for i in 0..arr.len() {
            sum += arr[i] as i64 * left[i] as i64 * right[i] as i64;
            sum %= 1000000007;
        }
        sum as i32

=======

        let mut stack: Vec<i32> = Vec::new();
        let mut left: Vec<i32> = Vec::new();
        let mut right: Vec<i32> = Vec::new();
        let mut res: i32 = 0;
        let mut modu = 1000000007;
        for i in 0..arr.len() {
            let mut count = 1;
            while !stack.is_empty() && stack[stack.len() - 1] > arr[i] {
                stack.pop();
                count += left.pop().unwrap();
            }
            left.push(count);
            stack.push(arr[i]);
        }
        stack.clear();
        for i in (0..arr.len()).rev() {
            let mut count = 1;
            while !stack.is_empty() && stack[stack.len() - 1] >= arr[i] {
                stack.pop();
                count += right.pop().unwrap();
            }
            right.push(count);
            stack.push(arr[i]);
        }
        for i in 0..arr.len() {
            res = (res + arr[i] * left[i] * right[arr.len() - 1 - i]) % modu;
        }
        res

=======

        let mut result = 0;
        let mut stack = Vec::new();
        for i in 0..arr.len() {
            while !stack.is_empty() && arr[stack[stack.len() - 1]] > arr[i] {
                let index = stack.pop().unwrap();
                let left = if stack.is_empty() { -1 } else { stack[stack.len() - 1] };
                result += (index - left) as i32 * arr[index] * (i as i32 - index as i32);
                result %= 1000000007;
            }
            stack.push(i);
        }
        while !stack.is_empty() {
            let index = stack.pop().unwrap();
            let left = if stack.is_empty() { -1 } else { stack[stack.len() - 1] };
            result += (index - left) as i32 * arr[index] * (arr.len() as i32 - index as i32);
            result %= 1000000007;
        }
        result

=======

        
    }
}

=======

        let mut stack = Vec::new();
        let mut left = Vec::new();
        let mut right = Vec::new();
        let n = arr.len();
        let mut i = 0;
        while i < n {
            while !stack.is_empty() && arr[stack[stack.len() - 1] as usize] >= arr[i] {
                stack.pop();
            }
            if stack.is_empty() {
                left.push(-1);
            } else {
                left.push(stack[stack.len() - 1]);
            }
            stack.push(i as i32);
            i += 1;
        }
        stack.clear();
        i = n - 1;
        while i >= 0 {
            while !stack.is_empty() && arr[stack[stack.len() - 1] as usize] > arr[i] {
                stack.pop();
            }
            if stack.is_empty() {
                right.push(n as i32);
            } else {
                right.push(stack[stack.len() - 1]);
            }
            stack.push(i as i32);
            i -= 1;
        }
        right.reverse();
        let mut sum = 0;
        let modu = 1000000007;
        for i in 0..n {
            sum += arr[i] * ((right[i] - i as i32) * (i as i32 - left[i])) % modu;
        }
        sum as i32

=======

        let mut stack = vec![];
        let mut left = vec![0; arr.len()];
        let mut right = vec![0; arr.len()];
        let mut res = 0;
        let modu = 1000000007;
        for i in 0..arr.len() {
            let mut count = 1;
            while !stack.is_empty() && stack.last().unwrap().0 >= arr[i] {
                count += stack.pop().unwrap().1;
            }
            left[i] = count;
            stack.push((arr[i], count));
        }
        stack.clear();
        for i in (0..arr.len()).rev() {
            let mut count = 1;
            while !stack.is_empty() && stack.last().unwrap().0 > arr[i] {
                count += stack.pop().unwrap().1;
            }
            right[i] = count;
            stack.push((arr[i], count));
        }
        for i in 0..arr.len() {
            res = (res + arr[i] * left[i] * right[i]) % modu;
        }
        res

=======

        let mut stack: Vec<i32> = Vec::new();
        let mut result: i32 = 0;
        let mut sum: i32 = 0;
        let mut i: i32 = 0;
        let mut j: i32 = 0;
        let mut k: i32 = 0;
        let mut size: i32 = arr.len() as i32;
        let mut mod_value: i32 = 1000000007;
        let mut temp: i32 = 0;
        for i in 0..size {
            let mut count: i32 = 0;
            while !stack.is_empty() && arr[stack[stack.len() - 1] as usize] > arr[i as usize] {
                let mut top: i32 = stack.pop().unwrap();
                count += 1;
                temp = (temp + arr[top as usize] * (count * (i - top) + (top - k))) % mod_value;
            }
            k = i - count;
            stack.push(i);
            sum = (sum + temp) % mod_value;
        }
        sum

=======

        let mut stack: Vec<(i32, usize)> = Vec::new();
        let mut sum = 0;
        let mut count = 0;
        for (i, v) in arr.iter().enumerate() {
            let mut c = 1;
            while let Some((u, j)) = stack.pop() {
                if u > *v {
                    c += count;
                    count = 0;
                    stack.push((u, j));
                    break;
                }
                count += j + 1;
            }
            stack.push((*v, c));
            sum += *v * c;
        }
        (sum % 1000000007) as i32
    }
}
