Synthesizing 5/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut sum = 0;
        for i in 0..beans.len() {
            sum += beans[i];
        }
        let mut avg = sum as f64 / beans.len() as f64;
        if avg - avg.floor() > 0.0000001 {
            avg += 0.0000001;
        }
        let avg = avg as i32;
        let mut res = 0;
        for i in 0..beans.len() {
            if beans[i] > avg {
                res += beans[i] - avg;
            }
        }
        res as i64

=======

        let mut beans = beans;
        beans.sort();
        let mut total = beans.iter().sum::<i32>();
        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        while i < beans.len() {
            let mut tmp = total;
            while j < beans.len() && beans[i] == beans[j] {
                tmp -= beans[j];
                j += 1;
            }
            if (beans.len() - j) * beans[i] == tmp {
                count += beans.len() - j;
                break;
            }
            i = j;
            total = tmp;
        }
        count as i64
    }
}
