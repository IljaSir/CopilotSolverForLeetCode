Synthesizing 9/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut dp = vec![0; 1<<nums.len()];
        let mut count = vec![0; 31];
        for (i, x) in nums.iter().enumerate() {
            count[*x as usize] += 1;
            dp[1<<i] = 1;
        }
        for i in 1..(1<<nums.len()) {
            let mut j = i;
            while j > 0 {
                if dp[j] > 0 && dp[i^j] > 0 {
                    dp[i] += dp[j] * dp[i^j];
                }
                j = (j-1) & i;
            }
        }
        let mut res = 0;
        for i in 1..(1<<nums.len()) {
            let mut x = 1;
            for j in 0..nums.len() {
                if i & (1<<j) > 0 {
                    x *= nums[j];
                }
            }
            let mut y = 0;
            for j in 1..31 {
                if x % (j*j) == 0 {
                    y += count[j];
                }
            }
            if y % 2 == 0 {
                res += dp[i];
            } else {
                res -= dp[i];
            }
        }
        res
    }
}
