Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut count = vec![0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 100;
        }
        for i in 0..26 {
            count[i] += i as i32;
        }
        count.sort();
        let mut res = vec![0; s.len()];
        let mut t = 1;
        for i in 0..26 {
            let c = (count[i] % 100) as u8;
            let cnt = (count[i] / 100) as usize;
            if cnt > (s.len() + 1) / 2 {
                return "".to_string();
            }
            for _ in 0..cnt {
                if t >= s.len() {
                    t = 0;
                }
                res[t] = c;
                t += 2;
            }
        }
        res.iter().map(|&x| x as char).collect()
    }
}

=======

        let mut counter = std::collections::HashMap::new();
        for c in s.chars() {
            *counter.entry(c).or_insert(0) += 1;
        }
        let mut heap = std::collections::BinaryHeap::new();
        for (c, cnt) in counter.into_iter() {
            heap.push((cnt, c));
        }
        let mut ret = String::new();
        while heap.len() > 1 {
            let (cnt1, c1) = heap.pop().unwrap();
            let (cnt2, c2) = heap.pop().unwrap();
            ret.push(c1);
            ret.push(c2);
            if cnt1 > 1 {
                heap.push((cnt1 - 1, c1));
            }
            if cnt2 > 1 {
                heap.push((cnt2 - 1, c2));
            }
        }
        if heap.len() > 0 {
            let (cnt, c) = heap.pop().unwrap();
            if cnt > 1 {
                return String::new();
            }
            ret.push(c);
        }
        ret
    }
}

=======

        let mut s: Vec<char> = s.chars().collect();
        s.sort();
        let mut i = 0;
        while i < s.len() - 1 {
            if s[i] == s[i + 1] {
                return "".to_string();
            }
            i += 2;
        }
        let mut res = String::new();
        let mut j = 1;
        for i in (0..s.len()).step_by(2) {
            res.push(s[i]);
            if j < s.len() {
                res.push(s[j]);
                j += 2;
            }
        }
        res

=======

        let mut chars = s.chars().collect::<Vec<_>>();
        chars.sort_unstable();
        let mut i = 0;
        let mut j = 1;
        while j < chars.len() {
            if chars[i] == chars[j] {
                j += 1;
            } else {
                chars.swap(i + 1, j);
                i += 1;
                j += 1;
            }
        }
        if i * 2 < chars.len() {
            return "".to_string();
        }
        let mut res = String::new();
        let mut i = 0;
        let mut j = chars.len() / 2;
        while i < chars.len() / 2 && j < chars.len() {
            res.push(chars[i]);
            res.push(chars[j]);
            i += 1;
            j += 1;
        }
        if i < chars.len() / 2 {
            res.push(chars[i]);
        }
        res

=======

        let mut chars = s.chars().collect::<Vec<char>>();
        chars.sort_unstable();
        let mut res = String::new();
        let mut i = 1;
        let mut j = 0;
        while i < chars.len() {
            if chars[i] != chars[j] {
                res.push(chars[j]);
                chars[j] = chars[i];
                j += 1;
            }
            i += 1;
        }
        if j == chars.len() - 1 {
            res.push(chars[j]);
        }
        if res.len() == s.len() {
            return res;
        }
        String::new()

=======

        
    }
}

=======

        let mut chars: Vec<u8> = s.into_bytes();
        let mut counts: Vec<usize> = vec![0; 26];
        let mut max_count = 0;
        let mut max_char = 0;
        for c in chars.iter() {
            let idx = (c - b'a') as usize;
            counts[idx] += 1;
            if counts[idx] > max_count {
                max_count = counts[idx];
                max_char = idx;
            }
        }
        if max_count > (chars.len() + 1) / 2 {
            return "".to_string();
        }
        let mut i = 0;
        while i < chars.len() {
            chars[i] = (b'a' + max_char as u8) as u8;
            counts[max_char] -= 1;
            i += 2;
        }
        let mut j = 1;
        for k in 0..26 {
            while counts[k] > 0 {
                if j >= chars.len() {
                    j = 1;
                }
                chars[j] = (b'a' + k as u8) as u8;
                counts[k] -= 1;
                j += 2;
            }
        }
        String::from_utf8(chars).unwrap()

=======

        let mut s = s;
        let mut cs = s.chars().collect::<Vec<char>>();
        cs.sort();
        let mut res = vec![];
        let mut i = 0;
        while i < cs.len() {
            let mut j = i + 1;
            while j < cs.len() && cs[j] == cs[i] {
                j += 1;
            }
            if j == cs.len() {
                if res.len() % 2 == 0 {
                    res.push(cs[i]);
                } else {
                    break;
                }
            } else {
                res.push(cs[i]);
                res.push(cs[j]);
                i = j + 1;
            }
        }
        if res.len() == cs.len() {
            res.iter().collect()
        } else {
            "".to_string()
        }
    }
}
