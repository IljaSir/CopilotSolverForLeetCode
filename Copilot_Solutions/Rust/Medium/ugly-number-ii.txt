Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut ugly = vec![1];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        while ugly.len() < n as usize {
            let next2 = ugly[i2] * 2;
            let next3 = ugly[i3] * 3;
            let next5 = ugly[i5] * 5;
            let next = next2.min(next3.min(next5));
            if next == next2 {
                i2 += 1;
            }
            if next == next3 {
                i3 += 1;
            }
            if next == next5 {
                i5 += 1;
            }
            ugly.push(next);
        }
        ugly[n as usize - 1]
    }
}

=======
Suggestion 2

        let mut ugly = vec![1];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        while ugly.len() < n as usize {
            let u2 = ugly[i2] * 2;
            let u3 = ugly[i3] * 3;
            let u5 = ugly[i5] * 5;
            let min = u2.min(u3.min(u5));
            if min == u2 {
                i2 += 1;
            }
            if min == u3 {
                i3 += 1;
            }
            if min == u5 {
                i5 += 1;
            }
            ugly.push(min);
        }
        ugly[n as usize - 1]

=======
Suggestion 3

        let mut ugly = vec![1];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        let mut n2 = 2;
        let mut n3 = 3;
        let mut n5 = 5;

        while ugly.len() < n as usize {
            let min = n2.min(n3.min(n5));
            ugly.push(min);
            if min == n2 {
                i2 += 1;
                n2 = ugly[i2] * 2;
            }
            if min == n3 {
                i3 += 1;
                n3 = ugly[i3] * 3;
            }
            if min == n5 {
                i5 += 1;
                n5 = ugly[i5] * 5;
            }
        }
        ugly[n as usize - 1]

=======
Suggestion 4

        let mut ugly = vec![1; n as usize];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        let mut next2 = 2;
        let mut next3 = 3;
        let mut next5 = 5;
        for i in 1..n as usize {
            let next = next2.min(next3.min(next5));
            ugly[i] = next;
            if next == next2 {
                i2 += 1;
                next2 = ugly[i2] * 2;
            }
            if next == next3 {
                i3 += 1;
                next3 = ugly[i3] * 3;
            }
            if next == next5 {
                i5 += 1;
                next5 = ugly[i5] * 5;
            }
        }
        ugly[(n - 1) as usize]
    }
}

=======
Suggestion 5

        let mut ugly = vec![1];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        for _ in 0..n {
            let n2 = ugly[i2] * 2;
            let n3 = ugly[i3] * 3;
            let n5 = ugly[i5] * 5;
            let min = n2.min(n3.min(n5));
            if min == n2 {
                i2 += 1;
            }
            if min == n3 {
                i3 += 1;
            }
            if min == n5 {
                i5 += 1;
            }
            ugly.push(min);
        }
        ugly[n as usize - 1]
    }
}

=======
Suggestion 6

        let mut ugly = vec![1];
        let mut i2 = 0;
        let mut i3 = 0;
        let mut i5 = 0;
        for _ in 0..n {
            let next2 = ugly[i2] * 2;
            let next3 = ugly[i3] * 3;
            let next5 = ugly[i5] * 5;
            let next = next2.min(next3).min(next5);
            if next == next2 {
                i2 += 1;
            }
            if next == next3 {
                i3 += 1;
            }
            if next == next5 {
                i5 += 1;
            }
            ugly.push(next);
        }
        ugly[n as usize - 1]

=======
Suggestion 7

        let mut ugly = vec![1];
        let mut idx2 = 0;
        let mut idx3 = 0;
        let mut idx5 = 0;
        let mut i = 1;
        while i < n {
            let next = ugly[idx2] * 2;
            let next = if next < ugly[idx3] * 3 { next } else { ugly[idx3] * 3 };
            let next = if next < ugly[idx5] * 5 { next } else { ugly[idx5] * 5 };
            ugly.push(next);
            if next == ugly[idx2] * 2 {
                idx2 += 1;
            }
            if next == ugly[idx3] * 3 {
                idx3 += 1;
            }
            if next == ugly[idx5] * 5 {
                idx5 += 1;
            }
            i += 1;
        }
        ugly[n as usize - 1]

=======
Suggestion 8

        let mut ugly = vec![1];
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        for _ in 1..n {
            let mut min = ugly[i] * 2;
            if min > ugly[j] * 3 {
                min = ugly[j] * 3;
            }
            if min > ugly[k] * 5 {
                min = ugly[k] * 5;
            }
            if min == ugly[i] * 2 {
                i += 1;
            }
            if min == ugly[j] * 3 {
                j += 1;
            }
            if min == ugly[k] * 5 {
                k += 1;
            }
            ugly.push(min);
        }
        ugly[n as usize - 1]

=======
Suggestion 9

        let mut ugly = vec![1];
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        for _ in 1..n {
            let mut next = ugly[i] * 2;
            if next > ugly[j] * 3 {
                next = ugly[j] * 3;
            }
            if next > ugly[k] * 5 {
                next = ugly[k] * 5;
            }
            if next == ugly[i] * 2 {
                i += 1;
            }
            if next == ugly[j] * 3 {
                j += 1;
            }
            if next == ugly[k] * 5 {
                k += 1;
            }
            ugly.push(next);
        }
        ugly[n as usize - 1]
