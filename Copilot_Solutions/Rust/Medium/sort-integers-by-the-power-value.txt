Synthesizing 10/10 solutions

=======

        let mut v = Vec::new();
        for i in lo..=hi {
            let mut n = i;
            let mut count = 0;
            while n != 1 {
                if n % 2 == 0 {
                    n /= 2;
                } else {
                    n = 3 * n + 1;
                }
                count += 1;
            }
            v.push((count, i));
        }
        v.sort();
        v[k as usize - 1].1
    }
}

=======

        let mut powers = Vec::new();
        for i in lo..=hi {
            powers.push((i, Self::power(i)));
        }
        powers.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        powers[k as usize - 1].0
    }
    fn power(mut x: i32) -> i32 {
        let mut power = 0;
        while x != 1 {
            if x % 2 == 0 {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            power += 1;
        }
        power

=======

        let mut v = Vec::new();
        for i in lo..hi+1 {
            let mut t = i;
            let mut c = 0;
            while t != 1 {
                if t % 2 == 0 {
                    t /= 2;
                } else {
                    t = 3 * t + 1;
                }
                c += 1;
            }
            v.push((c, i));
        }
        v.sort();
        v[k as usize - 1].1

=======

        let mut v: Vec<(i32, i32)> = (lo..=hi).map(|x| (x, Self::power(x))).collect();
        v.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        v[k as usize - 1].0
    }
    fn power(mut n: i32) -> i32 {
        let mut count = 0;
        while n != 1 {
            count += 1;
            if n % 2 == 0 {
                n /= 2;
            } else {
                n = 3 * n + 1;
            }
        }
        count

=======

        let mut powers = vec![];
        for i in lo..hi+1 {
            powers.push((i, Solution::power(i)));
        }
        powers.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        powers[k as usize - 1].0
    }
    
    fn power(mut n: i32) -> i32 {
        let mut steps = 0;
        while n != 1 {
            if n % 2 == 0 {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
            steps += 1;
        }
        steps

=======

        let mut v = (lo..=hi).collect::<Vec<i32>>();
        v.sort_by_key(|&x| (Solution::power(x), x));
        v[k as usize - 1]
    }
    fn power(x: i32) -> i32 {
        let mut x = x;
        let mut p = 0;
        while x != 1 {
            if x % 2 == 0 {
                x /= 2;
            } else {
                x = 3 * x + 1;
            }
            p += 1;
        }
        p

=======

        let mut power = vec![];
        for i in lo..hi+1 {
            power.push((i, Self::get_power(i)));
        }
        power.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        power[k as usize - 1].0
    }
    fn get_power(mut n: i32) -> i32 {
        let mut steps = 0;
        while n != 1 {
            if n & 1 == 0 {
                n >>= 1;
            } else {
                n = 3 * n + 1;
            }
            steps += 1;
        }
        steps

=======

        let mut res = Vec::new();
        for i in lo..hi+1 {
            res.push((i, Self::get_power(i)));
        }
        res.sort_by(|a, b| {
            if a.1 == b.1 {
                a.0.cmp(&b.0)
            } else {
                a.1.cmp(&b.1)
            }
        });
        res[k as usize - 1].0
    }
    fn get_power(mut n: i32) -> i32 {
        let mut res = 0;
        while n != 1 {
            res += 1;
            if n % 2 == 0 {
                n = n / 2;
            } else {
                n = 3 * n + 1;
            }
        }
        res

=======

        let mut nums = (lo..=hi).collect::<Vec<i32>>();
        nums.sort_by_key(|&i| (Self::power(i), i));
        nums[k as usize - 1]
    }
    fn power(n: i32) -> i32 {
        let mut n = n;
        let mut steps = 0;
        while n != 1 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n = 3 * n + 1;
            }
            steps += 1;
        }
        steps

=======

        let mut nums: Vec<(i32, i32)> = (lo..=hi).map(|i| (i, Self::step(i))).collect();
        nums.sort_by(|a, b| if a.1 == b.1 {
            a.0.cmp(&b.0)
        } else {
            a.1.cmp(&b.1)
        });
        nums[k as usize - 1].0
    }
    fn step(mut n: i32) -> i32 {
        if n == 1 {
            return 0;
        }
        let mut res = 0;
        while n != 1 {
            if n % 2 == 0 {
                n /= 2;
            } else {
                n = 3 * n + 1;
            }
            res += 1;
        }
        res
