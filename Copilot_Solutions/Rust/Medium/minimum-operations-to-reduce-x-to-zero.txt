Synthesizing 9/10 solutions

=======

        let sum = nums.iter().sum::<i32>();
        let n = nums.len();
        let target = sum - x;
        if target < 0 {
            return -1;
        }
        if target == 0 {
            return n as i32;
        }
        let mut cur = 0;
        let mut left = 0;
        let mut res = -1;
        for right in 0..n {
            cur += nums[right];
            while cur > target {
                cur -= nums[left];
                left += 1;
            }
            if cur == target {
                res = res.max(right - left + 1);
            }
        }
        if res < 0 {
            return -1;
        }
        (n - res) as i32

=======

        let n = nums.len();
        let mut sum = 0;
        let mut ans = -1;
        let mut left = 0;
        for right in 0..n {
            sum += nums[right];
            while sum > x && left <= right {
                sum -= nums[left];
                left += 1;
            }
            if sum == x {
                ans = ans.max((right - left + 1) as i32);
            }
        }
        if ans < 0 {
            return -1;
        }
        n as i32 - ans

=======

        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        let mut result = -1;
        for i in 0..nums.len() {
            sum += nums[i];
            map.insert(sum, i as i32);
        }
        if sum < x {
            return -1;
        }
        if sum == x {
            return nums.len() as i32;
        }
        sum = 0;
        for i in (0..nums.len()).rev() {
            sum += nums[i];
            if sum == x {
                result = i as i32;
                break;
            }
            if let Some(&j) = map.get(&(x - sum)) {
                if j < i as i32 {
                    result = (i as i32 - j) as i32;
                    break;
                }
            }
        }
        if result == -1 {
            return result;
        }
        result += (nums.len() - result as usize) as i32;
        result as i32
    }
}

=======

        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut sum = 0;
        while sum < x && left <= right {
            if nums[left] < nums[right] {
                sum += nums[right];
                right -= 1;
            } else {
                sum += nums[left];
                left += 1;
            }
        }
        if sum == x {
            return (nums.len() - right - 1 + left) as i32;
        }
        let mut ans = -1;
        while left <= right {
            sum += nums[right];
            right -= 1;
            while sum > x && left <= right {
                sum -= nums[left];
                left += 1;
            }
            if sum == x {
                ans = (nums.len() - right - 1 + left) as i32;
            }
        }
        ans

=======

        let n = nums.len();
        let mut sum = 0;
        let mut res = -1;
        let mut l = 0;
        let mut r = 0;
        while r < n {
            sum += nums[r];
            while sum > x && l <= r {
                sum -= nums[l];
                l += 1;
            }
            if sum == x {
                res = res.max(r as i32 - l as i32 + 1);
            }
            r += 1;
        }
        if res == -1 {
            return -1;
        }
        (n as i32 - res) as i32

=======

        let n = nums.len();
        let mut sum = 0;
        let mut res = -1;
        let mut i = 0;
        let mut j = 0;
        while i < n {
            sum += nums[i];
            while sum > x && j <= i {
                sum -= nums[j];
                j += 1;
            }
            if sum == x {
                res = res.max(i as i32 - j as i32 + 1);
            }
            i += 1;
        }
        if res == -1 {
            -1
        } else {
            n as i32 - res
        }

=======

        let mut l = 0;
        let mut r = 0;
        let mut sum = 0;
        let mut res = -1;
        let mut n = nums.len();
        while r < n {
            sum += nums[r];
            while sum > x && l <= r {
                sum -= nums[l];
                l += 1;
            }
            if sum == x {
                res = res.max((r - l + 1) as i32);
            }
            r += 1;
        }
        if res == -1 {
            return res;
        }
        return (n as i32) - res;

=======

        let mut sum = 0;
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut res = -1;
        while l <= r {
            sum += nums[l];
            l += 1;
            if sum == x {
                res = l as i32;
                break;
            }
        }
        sum = 0;
        while r >= l {
            sum += nums[r];
            r -= 1;
            if sum == x {
                res = (nums.len() - r - 1) as i32;
                break;
            }
        }
        while l <= r {
            sum -= nums[l];
            l += 1;
            while sum < x && l <= r {
                sum += nums[r];
                r -= 1;
            }
            if sum == x {
                res = res.max((l + nums.len() - r - 1) as i32);
            }
        }
        if res == -1 {
            return -1;
        }
        (nums.len() as i32 - res)

=======

        let mut sum = 0;
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut result = -1;
        let mut min = 0;
        while i <= j {
            if sum < x {
                sum += nums[i];
                i += 1;
            } else if sum > x {
                sum -= nums[j];
                j -= 1;
            } else if sum == x {
                if result == -1 {
                    min = i + nums.len() - j - 1;
                } else {
                    min = min.min(i + nums.len() - j - 1);
                }
                sum += nums[i];
                i += 1;
            }
        }
        if sum == x {
            if result == -1 {
                min = i + nums.len() - j - 1;
            } else {
                min = min.min(i + nums.len() - j - 1);
            }
        }
        if min == 0 {
            -1
        } else {
            min as i32
        }
