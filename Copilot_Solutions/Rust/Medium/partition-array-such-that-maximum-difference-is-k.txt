Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 1;
        let mut min = nums[0];
        let mut max = nums[0];
        for i in 1..nums.len() {
            min = min.min(nums[i]);
            max = max.max(nums[i]);
            if max - min > k {
                count += 1;
                min = nums[i];
                max = nums[i];
            }
        }
        count
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 1;
        let mut min = nums[0];
        let mut max = nums[0];
        for i in 1..nums.len() {
            if nums[i] - min > k {
                res += 1;
                min = nums[i];
                max = nums[i];
            } else {
                max = nums[i];
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let mut max = nums[0];
        let mut min = nums[0];
        for i in 1..nums.len() {
            max = max.max(nums[i]);
            min = min.min(nums[i]);
            if max - min > k {
                ans += 1;
                max = nums[i];
                min = nums[i];
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut count = 1;
        let mut min = nums[0];
        let mut max = nums[0];
        for i in 1..nums.len() {
            min = min.min(nums[i]);
            max = max.max(nums[i]);
            if max - min > k {
                count += 1;
                min = nums[i];
                max = nums[i];
            }
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] - min > k {
                ans += 1;
                min = nums[i];
            }
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let mut cur_max = nums[0];
        let mut cur_min = nums[0];
        for i in 1..nums.len() {
            cur_max = cur_max.max(nums[i]);
            cur_min = cur_min.min(nums[i]);
            if cur_max - cur_min > k {
                ans += 1;
                cur_max = nums[i];
                cur_min = nums[i];
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        while i < nums.len() {
            j = i;
            while j < nums.len() && nums[j] - nums[i] <= k {
                j += 1;
            }
            count += 1;
            i = j;
        }
        count
    }
}

=======

        let n = nums.len();
        let mut nums = nums;
        nums.sort();
        let mut r = 0;
        let mut i = 0;
        while i < n {
            let mut j = i + 1;
            while j < n && nums[j] - nums[i] <= k {
                j += 1;
            }
            r += 1;
            i = j;
        }
        r
    }
}

=======

        
    }
}
