Synthesizing 10/10 solutions

=======

        let mut piles = piles;
        piles.sort();
        let mut ans = 0;
        let mut i = piles.len() - 2;
        while i >= piles.len() / 3 {
            ans += piles[i];
            i -= 2;
        }
        ans
    }
}

=======

        let mut piles = piles;
        piles.sort();
        let mut res = 0;
        let mut i = 0;
        let mut j = piles.len() - 2;
        while i < j {
            res += piles[j];
            i += 1;
            j -= 2;
        }
        res

=======

        let mut piles = piles;
        piles.sort();
        let mut ret = 0;
        let mut i = piles.len() - 2;
        while i >= piles.len() / 3 {
            ret += piles[i];
            i -= 2;
        }
        ret
    }
}

=======

        let mut piles = piles;
        piles.sort_unstable();
        let mut i = 0;
        let mut j = piles.len() - 2;
        let mut sum = 0;
        while i < j {
            sum += piles[j];
            i += 1;
            j -= 2;
        }
        sum

=======

        let mut piles = piles;
        piles.sort();
        let mut sum = 0;
        let mut i = 0;
        let mut j = piles.len() - 2;
        while i < j {
            sum += piles[j];
            i += 1;
            j -= 2;
        }
        sum

=======

        let mut piles = piles;
        piles.sort();
        let mut res = 0;
        let mut i = 0;
        while i < piles.len() {
            res += piles[piles.len() - 2 - i];
            i += 1;
        }
        res

=======

        let mut piles = piles;
        piles.sort_by(|a, b| b.cmp(a));
        let mut i = 1;
        let mut sum = 0;
        while i < piles.len() {
            sum += piles[i];
            i += 2;
        }
        sum

=======

        let mut piles = piles;
        piles.sort();
        let mut res = 0;
        let mut idx = piles.len() - 2;
        for _ in 0..piles.len() / 3 {
            res += piles[idx];
            idx -= 2;
        }
        res

=======

        let mut piles = piles;
        piles.sort();
        let mut result = 0;
        let mut i = 0;
        while i < piles.len() {
            result += piles[piles.len() - i - 2];
            i += 3;
        }
        result
    }
}

=======

        let mut piles = piles;
        piles.sort();
        let n = piles.len();
        let mut res = 0;
        for i in (0..n).step_by(3) {
            res += piles[n - 1 - i - 1];
        }
        res
