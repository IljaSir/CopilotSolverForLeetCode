Synthesizing 5/10 solutions

=======

        
    }
}

=======

        let mut stack: Vec<char> = vec![];
        for c in s.chars() {
            if c == '*' {
                if !stack.is_empty() {
                    stack.pop();
                }
            } else {
                stack.push(c);
            }
        }
        stack.iter().collect()

=======

        let mut v = Vec::new();
        for c in s.chars() {
            if c == '*' {
                v.pop();
            } else {
                v.push(c);
            }
        }
        v.into_iter().collect()
    }
}

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        let mut j = 0;
        while j < s.len() {
            if s[i] == b'*' {
                i -= 1;
                while i >= 0 && s[i] == b'*' {
                    i -= 1;
                }
                if i < 0 {
                    i = j;
                }
            } else {
                i += 1;
                if i == j {
                    j += 1;
                }
            }
        }
        unsafe { String::from_utf8_unchecked(s[..i].to_vec()) }
    }
}

=======

        let mut s = s.into_bytes();
        let mut stack = Vec::new();
        for i in 0..s.len() {
            if s[i] == b'*' {
                if let Some(top) = stack.pop() {
                    s[top] = b' ';
                }
            } else {
                stack.push(i);
            }
        }
        String::from_utf8(s).unwrap().replace(" ", "")
