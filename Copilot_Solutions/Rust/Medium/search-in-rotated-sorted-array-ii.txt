Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left <= right {
            let mid = (left + right) / 2;
            if nums[mid] == target {
                return true;
            }
            if nums[left] == nums[mid] {
                left += 1;
                continue;
            }
            if nums[left] < nums[mid] {
                if nums[left] <= target && target < nums[mid] {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if nums[mid] < target && target <= nums[right] {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        false

=======
Suggestion 2

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let m = (l + r) / 2;
            if nums[m] == target {
                return true;
            }
            if nums[l] == nums[m] && nums[m] == nums[r] {
                l += 1;
                r -= 1;
            } else if nums[l] <= nums[m] {
                if nums[l] <= target && target < nums[m] {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            } else {
                if nums[m] < target && target <= nums[r] {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
        }
        false

=======
Suggestion 3

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let mid = (l + r) / 2;
            if nums[mid] == target {
                return true;
            }
            if nums[l] == nums[mid] {
                l += 1;
                continue;
            }
            if nums[l] < nums[mid] {
                if nums[l] <= target && target < nums[mid] {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else {
                if nums[mid] < target && target <= nums[r] {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        }
        false

=======
Suggestion 4

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let m = l + (r - l) / 2;
            if nums[m] == target {
                return true;
            }
            if nums[l] < nums[m] {
                if nums[l] <= target && target < nums[m] {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            } else if nums[l] > nums[m] {
                if nums[m] < target && target <= nums[r] {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            } else {
                l += 1;
            }
        }
        false
    }
}

=======
Suggestion 5

        let (mut l, mut r) = (0, nums.len() - 1);
        while l <= r {
            let m = (l + r) / 2;
            if nums[m] == target {
                return true;
            }
            if nums[l] == nums[m] {
                l += 1;
            } else if nums[l] < nums[m] {
                if nums[l] <= target && target < nums[m] {
                    r = m;
                } else {
                    l = m + 1;
                }
            } else {
                if nums[m] < target && target <= nums[r] {
                    l = m + 1;
                } else {
                    r = m;
                }
            }
        }
        false

=======
Suggestion 6

        let n = nums.len();
        let mut l = 0;
        let mut r = n - 1;
        while l <= r {
            let mid = l + (r - l) / 2;
            if nums[mid] == target {
                return true;
            }
            if nums[mid] == nums[l] && nums[mid] == nums[r] {
                l += 1;
                r -= 1;
            } else if nums[mid] >= nums[l] {
                if nums[l] <= target && target < nums[mid] {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else {
                if nums[mid] < target && target <= nums[r] {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        }
        false

=======
Suggestion 7

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l <= r {
            let m = l + (r - l) / 2;
            if target == nums[m] {
                return true;
            }
            if nums[l] == nums[m] {
                l += 1;
            } else if nums[l] < nums[m] {
                if target >= nums[l] && target < nums[m] {
                    r = m - 1;
                } else {
                    l = m + 1;
                }
            } else {
                if target > nums[m] && target <= nums[r] {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
        }
        false
    }
}

=======
Suggestion 8

        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut mid = 0;
        while left <= right {
            mid = left + (right - left) / 2;
            if nums[mid] == target {
                return true;
            }
            if nums[mid] == nums[right] {
                right -= 1;
                continue;
            }
            if nums[mid] < nums[right] {
                if target > nums[mid] && target <= nums[right] {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else {
                if target >= nums[left] && target < nums[mid] {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
        }
        false

=======
Suggestion 9

        nums.contains(&target)

=======
Suggestion 10

        nums.iter().any(|&x| x == target)
