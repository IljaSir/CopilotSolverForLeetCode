Synthesizing 8/10 solutions (Duplicates hidden)

=======

        if n == 1 {
            return '0';
        }
        let mid = 1 << (n - 1);
        if k == mid {
            return '1';
        }
        if k < mid {
            return Self::find_kth_bit(n - 1, k);
        }
        if Self::find_kth_bit(n - 1, 2 * mid - k) == '0' {
            return '1';
        }
        '0'
    }
}

=======

        if n == 1 {
            return '0';
        }
        let mid = 2_i32.pow(n as u32 - 1);
        if k == mid {
            return '1';
        }
        if k < mid {
            return Self::find_kth_bit(n - 1, k);
        }
        let ch = Self::find_kth_bit(n - 1, 2 * mid - k);
        if ch == '1' {
            '0'
        } else {
            '1'
        }

=======

        if n == 1 {
            return '0';
        }
        let mid = 2_i32.pow(n as u32 - 1);
        if k == mid {
            return '1';
        }
        if k < mid {
            return Solution::find_kth_bit(n - 1, k);
        }
        if Solution::find_kth_bit(n - 1, 2 * mid - k) == '0' {
            return '1';
        }
        '0'
    }
}

=======

        
    }
}

=======

        let mut k = k;
        let mut n = n;
        while n > 1 {
            let half = 1 << (n - 2);
            if k == half {
                return '1';
            } else if k > half {
                k = half * 2 - k;
                n -= 1;
            } else {
                n -= 1;
            }
        }
        '0'
    }
}

=======

        let mut i = n;
        let mut k = k;
        let mut rev = false;
        while i > 1 {
            let l = 1 << (i - 1);
            if k == l {
                return if rev { '0' } else { '1' };
            } else if k < l {
                i -= 1;
                rev = false;
            } else {
                i -= 1;
                k = 2 * l - k;
                rev = !rev;
            }
        }
        if rev { '1' } else { '0' }
    }
}
