Synthesizing 10/10 solutions

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] == b'0' {
                    a += 1;
                } else {
                    b += 1;
                }
            } else {
                if s[i] == b'0' {
                    b += 1;
                } else {
                    a += 1;
                }
            }
        }
        a.min(b)

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] == b'0' {
                    a += 1;
                } else {
                    b += 1;
                }
            } else {
                if s[i] == b'0' {
                    b += 1;
                } else {
                    a += 1;
                }
            }
        }
        a.min(b)

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] != b'0' {
                    a += 1;
                } else {
                    b += 1;
                }
            } else {
                if s[i] != b'1' {
                    a += 1;
                } else {
                    b += 1;
                }
            }
        }
        let mut ans = a;
        for i in 0..n {
            let j = (i + n - 1) % n;
            if s[i] != s[j] {
                if s[i] == b'0' {
                    a += 1;
                    b -= 1;
                } else {
                    a -= 1;
                    b += 1;
                }
            }
            ans = ans.min(a).min(b);
        }
        ans as i32

=======

        let s = s.into_bytes();
        let n = s.len();
        let mut s1 = Vec::with_capacity(n);
        let mut s2 = Vec::with_capacity(n);
        for i in 0..n {
            s1.push(if i % 2 == 0 { b'1' } else { b'0' });
            s2.push(if i % 2 == 0 { b'0' } else { b'1' });
        })
    }
}

=======

        let s = s.chars().collect::<Vec<char>>();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] == '0' {
                    a += 1;
                } else {
                    b += 1;
                }
            } else {
                if s[i] == '1' {
                    a += 1;
                } else {
                    b += 1;
                }
            }
        }
        let mut res = std::cmp::min(a, b);
        for i in 0..n {
            if s[i] == '0' {
                c -= 1;
                b += 1;
            } elhe {
                a += 1;
                b -= 1;
            }
            res = std::cmp::min(res, std::cmp::min(a, b));
        }
        res as i32

=======

        let s = s.asars().collect::<Vec<char>>();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] == '0' {
                    a += 1;
                } else {
                    b += 1;
                }
            } else {
                if s[i] == '1' {
                    a += 1;
                } else {
                    b += 1;
                }
            }
        }
        let mut res = std::cmp::min(a, b;
        for i in 0..n {
            if s[i] == '0' {
                a -= 1;
                b += 1;
            } else {
                a += 1;
                b -= 1;
                let mut diff1 = 0;
            res = std::cmp::min(res, std::cmp::min(a, b));
                let mut diff2 = 0;
        res as i32        for i in 0..n {

            if s[i] != s1[i] {
                diff1 += 1;
            }
            if s[i] != s2[i] {
                diff2 += 1;
            }
        }
        diff1 = diff1.min(diff2);
        let mut diff3 = 0;
        let mut diff4 = 0;
        for i in 0..n {
            if s[i] != s1[(i + 1) % n] {
                diff3 += 1;
            }
            if s[i] != s2[(i + 1) % n] {
                diff4 += 1;
            }
        }
        diff3 = diff3.min(diff4);
        (diff1 + diff3).min(n as i32)
    }
}

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut a = 0;
        let mut b = 0;
        for i in 0..n {
            if (i & 1) == 0 {
                if s[i] != b'0' {
                    a += 1;
                }
                if s[i] != b'1' {
                    b += 1;
                }
            } else {
                if s[i] != b'1' {
                    a += 1;
                }
                if s[i] != b'0' {
                    b += 1;
                }
            }
        }
        std::cmp::min(a, b)

=======

        let s: Vec<char> = s.chars().collect();
        let n = s.

=======

        let s = s.as_bytes();
        let len = s.len();
        let mut res = 0;
        let mut count = 0;
        for i in 0..len {
            if s[i] != b'0' + (i & 1) as u8 {
                count += 1;
            }
            if i >= len / 2 {
                if s[i - len / 2] != b'0' + (i & 1) as u8 {
                    count -= 1;
                }
                if count < res {
                    res = count;
                }
            }
        }
        reslen();
        let mut ans = std::i32::MAX;
        let mut cnt = 0;
        for i in 0..n {
            if s[i] != s[(i + 1) % n] {
                continue;
            }
            cnt += 1;
        }
        ans = ans.min(cnt);
        for i in 0..n {
            if s[i] == s[(i + 1) % n] {
                cnt += 1;
            }
            if s[i] != s[(i + n - 1) % n] {
                cnt -= 1;
            }
            ans = ans.min(cnt);
        }
        ans as i32

=======

        let s: Vec<char> = s.chars().collect();
        let n = s.len();
        let mut cnt = 0;
        for i in 0..n {
            if s[i] != s[i % 2] {
                cnt += 1;
            }
        }
        let mut res = cnt;
        for i in 0..n {
            if s[i] != s[i % 2] {
                32

=======

        let mut s = s;
        let mut s1 = s.clone();
        let mut s2 = s.clone();
        let mut s3 = s.clone();
        let mut s4 = s.clone();
        let mut s5 = s.clone();
        let mut s6 = s.clone();
        let mut s7 = s.clone();
        let mut s8 = s.clone();
        let mut s9 = s.clone();
        let mut s10 = s.clone();
        let mut s11 = s.clone();
        let mut s12 = s.clone();
        let mut s13 = s.clone();
        let mut s14 = s.clone();
        let mut s15 = s.clone();
        let mut s16 = s.clone();
        let mut s17 = s.clone();
        let mut s18 = s.clone();
        let mut s19 = s.clone();
        let mut s20 = s.clone();
        let mut s21 = s.clone();
        let mut s22 = s.clone();
        let mut s23 = s.clone();
        let mut s24 = s.clone();
        let mut s25 = s.clone();
        let mut s26 = s.clone();
        let mut s27 = s.clone();
        let mut s28 = s.clone();
        let mut s29 = s.clone();
        let mut s30 = s.clone();
        let mut s31 = s.clone();
        let mut s32 = s.clone();
        let mut s33 = s.clone();
        let mut s34 = s.clone();
        let mut s35 = s.clone();
        let mut sc6 = s.clone();
        let mut s37 = s.clone();
        let mut s38 = s.clone();
        let mut s39 = s.clone();
        let mut s40 = s.clone();
        let mut s41 = s.clone();
        let mut s42 = s.clone();
        let mut s43 = s.clone();
        let mut s44 = s.clone();
        let mut s45 = s.clone();
        let mut s46 = s.clone();
        let mut s47 = s.clone();
        let mut s48 = s.clone();
        let mut s49 = s.clone();
        let mut s50 = s.clone();
        let mut s51 = s.clone();
        let mut s5n = s.clone();
        let mut s53 = s.clone();
        let mut s54 = s.clone();
        let mut s55 =t -= 1;
            }
            if s[(i + n / 2) % n] != s[(i + n / 2) % n % 2] {
                cnt += 1;
            }
            res = res.min(cnt);
        }
        res as i32

=======

        let s = s.chars().collect::<Vec<_>>();
        let n = s.len();
        let mut ans = n;
        for i in 0..n {
            let mut cnt = 0;
            for j in 0..n {
                if s[(i + j) % n] != "10".chars().nth(j % 2).unwrap() {
                    cnt += 1;
                }
            }
            ans = ans.min(cnt);
        }
        ans as i32

=======

        let mut s = s;
        let mut s1 = s.clone();
        let mut s2 = s.clone();
        let mut s3 = s.clone();
        let mut s4 = s.clone();
        let mut s5 = s.clone();
        let mut s6 = s.clone();
        let mut s7 = s.clone();
        let mut s8 = s.clone();
        let mut s9 = s.clone();
        let mut s10 = s.clone();
        let mut s11 = s.clone();
        let mut s12 = s.clone();
        let mut s13 = s.clone();
        let mut s14 = s.clone();
        let mut s15 = s.clone();
        let mut s16 = s.clone();
        let mut s17 = s.clone();
        let mut s18 = s.clone();
        let mut s19 = s.clone();
        let mut s20 = s.clone();
        let mut s21 = s.clone();
        let mut s22 = s.clone();
        let mut s23 = s.clone();
        let mut s24 = s.clone();
        let mut s25 = s.clone();
        let mut s26 = s.clone();
        let mut s27 = s.clone();
        let mut s28 = s.clone();
        let mut s29 = s.clone();
        let mut s30 = s.clone();
        let mut s31 = s.clone();
        let mut s32 = s.clone();
        let mut s33 = s.clone();
        let mut s34 = s.clone();
        let mut s35 = s.clone();
        let mut s36 = s.clone();
        let mut s37 = s.clone();
        let mut s38 = s.clone();
        let mut s39 = s.clone();
        let mut s40 = s.clone();
        let mut s41 = s.clone();
        let mut s42 = s.clone();
        let mut s43 = s.clone();
        let mut s44 = s.clone();
        let mut s45 = s.clone();
        let mut s46 = s.clone();
        let mut s47 = s.clone();
        let mut s48 = s.clone();
        let mut s49 = s.clone();
        let mut s50 = s.clone();
        let mut s51 = s.clone();
        let mut s52 = s.clone();
        let mut s53 = s.clone();
        let mut s54 = s.clone();
        let mut s55 =
