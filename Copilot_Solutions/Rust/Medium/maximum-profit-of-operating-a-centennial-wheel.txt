Synthesizing 10/10 solutions

=======

        let mut max_profit = 0;
        let mut max_rotations = 0;
        let mut waiting = 0;
        let mut profit = 0;
        for i in 0..customers.len() {
            waiting += customers[i];
            let boarding = if waiting > 4 { 4 } else { waiting };
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_rotations = i as i32 + 1;
            }
        }
        let mut rotations = max_rotations;
        while waiting > 0 {
            let boarding = if waiting > 4 { 4 } else { waiting };
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            rotations += 1;
            if profit > max_profit {
                max_profit = profit;
                max_rotations = rotations;
            }
        }
        if max_profit > 0 {
            max_rotations
        } else {
            -1
        }
    }
}

=======

        let mut max_profit = 0;
        let mut max_rotation = 0;
        let mut rotation = 0;
        let mut waiting = 0;
        let mut profit = 0;
        for c in customers {
            waiting += c;
            rotation += 1;
            let boarding = waiting.min(4);
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_rotation = rotation;
            }
        }
        while waiting > 0 {
            rotation += 1;
            let boarding = waiting.min(4);
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_rotation = rotation;
            }
        }
        if max_profit > 0 {
            max_rotation
        } else {
            -1
        }

=======

        let mut cur = 0;
        let mut max = 0;
        let mut ans = -1;
        let mut i = 0;
        while i < customers.len() || cur > 0 {
            if i < customers.len() {
                cur += customers[i];
            }
            let take = std::cmp::min(cur, 4);
            cur -= take;
            let profit = take * boarding_cost - running_cost;
            max += profit;
            if max > ans {
                ans = max;
                ans += 1;
            }
            i += 1;
        }
        ans

=======

        let mut max_profit = 0;
        let mut max_rotate = 0;
        let mut waiting = 0;
        let mut profit = 0;
        let mut rotate = 0;
        for c in customers {
            waiting += c;
            let board = std::cmp::min(waiting, 4);
            waiting -= board;
            profit += board * boarding_cost - running_cost;
            rotate += 1;
            if profit > max_profit {
                max_profit = profit;
                max_rotate = rotate;
            }
        }
        while waiting > 0 {
            let board = std::cmp::min(waiting, 4);
            waiting -= board;
            profit += board * boarding_cost - running_cost;
            rotate += 1;
            if profit > max_profit {
                max_profit = profit;
                max_rotate = rotate;
            }
        }
        if max_profit > 0 {
            max_rotate
        } else {
            -1
        }

=======

        let mut waiting = 0;
        let mut profit = 0;
        let mut max_profit = 0;
        let mut max_profit_rotations = 0;
        for (i, c) in customers.into_iter().enumerate() {
            waiting += c;
            let boarding = std::cmp::min(waiting, 4);
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_profit_rotations = i as i32 + 1;
            }
        }
        let mut rotations = customers.len() as i32;
        while waiting > 0 {
            let boarding = std::cmp::min(waiting, 4);
            waiting -= boarding;
            profit += boarding * boarding_cost - running_cost;
            rotations += 1;
            if profit > max_profit {
                max_profit = profit;
                max_profit_rotations = rotations;
            }
        }
        if max_profit > 0 {
            max_profit_rotations
        } else {
            -1
        }
    }
}

=======

        let mut max_profit = 0;
        let mut max_profit_times = -1;
        let mut waiting = 0;
        let mut profit = 0;
        for i in 0..customers.len() {
            waiting += customers[i];
            let mut board = waiting.min(4);
            waiting -= board;
            profit += board * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_profit_times = i as i32 + 1;
            }
        }
        let mut i = customers.len() as i32;
        while waiting > 0 {
            let mut board = waiting.min(4);
            waiting -= board;
            profit += board * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_profit_times = i + 1;
            }
            i += 1;
        }
        if max_profit_times == 0 {
            -1
        } else {
            max_profit_times
        }
    }
}

=======

        let mut total = 0;
        let mut max = 0;
        let mut wait = 0;
        let mut ans = -1;
        for (i, &c) in customers.iter().enumerate() {
            wait += c;
            let mut board = 0;
            if wait >= 4 {
                board = 4;
                wait -= 4;
            } else {
                board = wait;
                wait = 0;
            }
            total += board * boarding_cost - running_cost;
            if total > max {
                max = total;
                ans = i as i32 + 1;
            }
        }
        while wait > 0 {
            let mut board = 0;
            if wait >= 4 {
                board = 4;
                wait -= 4;
            } else {
                board = wait;
                wait = 0;
            }
            total += board * boarding_cost - running_cost;
            if total > max {
                max = total;
                ans = customers.len() as i32;
            }
            ans += 1;
        }
        ans

=======

        let mut sum = 0;
        let mut max_profit = 0;
        let mut max_rotations = 0;
        let mut wait = 0;
        for (i, c) in customers.iter().enumerate() {
            wait += c;
            let mut board = 0;
            if wait >= 4 {
                board = 4;
                wait -= 4;
            } else {
                board = wait;
                wait = 0;
            }
            sum += board;
            let profit = sum * boarding_cost - (i + 1) as i32 * running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_rotations = (i + 1) as i32;
            }
        }
        while wait > 0 {
            let mut board = 0;
            if wait >= 4 {
                board = 4;
                wait -= 4;
            } else {
                board = wait;
                wait = 0;
            }
            sum += board;
            let profit = sum * boarding_cost - (customers.len() + 1) as i32 * running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_rotations = (customers.len() + 1) as i32;
            }
        }
        if max_profit <= 0 {
            return -1;
        }
        max_rotations
    }
}

=======

        let mut cur = 0;
        let mut profit = 0;
        let mut max_profit = 0;
        let mut max_profit_round = 0;
        let mut round = 0;
        for c in customers {
            cur += c;
            round += 1;
            let mut board = 0;
            if cur >= 4 {
                board = 4;
                cur -= 4;
            } else {
                board = cur;
                cur = 0;
            }
            profit = profit + board * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_profit_round = round;
            }
        }
        while cur > 0 {
            round += 1;
            let mut board = 0;
            if cur >= 4 {
                board = 4;
                cur -= 4;
            } else {
                board = cur;
                cur = 0;
            }
            profit = profit + board * boarding_cost - running_cost;
            if profit > max_profit {
                max_profit = profit;
                max_profit_round = round;
            }
        }
        if max_profit > 0 {
            max_profit_round
        } else {
            -1
        }
    }
}

=======

        let mut customers = customers;
        customers.push(0);
        let mut cur = 0;
        let mut profit = 0;
        let mut max_profit = 0;
        let mut max_profit_rotations = 0;
        let mut rotations = 0;
        for c in customers {
            cur += c;
            if cur >= 4 {
                profit += 4 * boarding_cost - running_cost;
                cur -= 4;
            } else {
                profit += cur * boarding_cost - running_cost;
                cur = 0;
            }
            rotations += 1;
            if profit > max_profit {
                max_profit = profit;
                max_profit_rotations = rotations;
            }
        }
        if max_profit > 0 {
            max_profit_rotations
        } else {
            -1
        }
