Synthesizing 10/10 solutions

=======

        let mut max = 1;
        let mut count = 1;
        let s = s.as_bytes();
        for i in 1..s.len() {
            if s[i] > s[i - 1] {
                count += 1;
            } else {
                count = 1;
            }
            max = std::cmp::max(max, count);
        }
        max
    }
}

=======

        let mut max = 0;
        let mut cur = 0;
        for i in 1..s.len() {
            if s.as_bytes()[i] > s.as_bytes()[i - 1] {
                cur += 1;
            } else {
                cur = 0;
            }
            if cur > max {
                max = cur;
            }
        }
        max + 1

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = ' ';
        for c in s.chars() {
            if c as u8 - prev as u8 == 1 {
                count += 1;
            } else {
                count = 1;
            }
            max = max.max(count);
            prev = c;
        }
        max

=======

        let mut max = 0;
        let mut count = 0;
        let mut last = 'a';
        for c in s.chars() {
            if c >= last {
                count += 1;
            } else {
                count = 1;
            }
            max = max.max(count);
            last = c;
        }
        max

=======

        let mut max = 0;
        let mut cur = 0;
        let mut last = ' ';
        for c in s.chars() {
            if c > last {
                cur += 1;
            } else {
                max = max.max(cur);
                cur = 1;
            }
            last = c;
        }
        max.max(cur)

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = 'a';
        for c in s.chars() {
            if c >= prev {
                count += 1;
                max = std::cmp::max(max, count);
            } else {
                count = 1;
            }
            prev = c;
        }
        max

=======

        let mut max = 0;
        let mut count = 0;
        let mut prev = 0;
        for c in s.chars() {
            let cur = c as u8 - 'a' as u8;
            if cur == prev + 1 {
                count += 1;
            } else {
                count = 1;
            }
            prev = cur;
            if count > max {
                max = count;
            }
        }
        max
    }
}

=======

        let mut max = 0;
        let mut cur = 0;
        let mut last = 0;
        for c in s.chars() {
            if c as i32 - last == 1 {
                cur += 1;
            } else {
                max = max.max(cur);
                cur = 1;
            }
            last = c as i32;
        }
        max.max(cur)

=======

        let mut max = 0;
        let mut current = 0;
        let mut previous = 0;
        for c in s.chars() {
            let i = c as u8 - 'a' as u8;
            if i > previous {
                current += 1;
            } else {
                max = max.max(current);
                current = 1;
            }
            previous = i;
        }
        max.max(current)

=======

        let mut max = 0;
        let mut current = 1;
        let mut s = s.chars();
        if let Some(c) = s.next() {
            for c2 in s {
                if c2 as u8 == c as u8 + 1 {
                    current += 1;
                } else {
                    if current > max {
                        max = current;
                    }
                    current = 1;
                }
                if current > max {
                    max = current;
                }
                c = c2;
            }
        }
        max
