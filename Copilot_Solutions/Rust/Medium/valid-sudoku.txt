Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut rows = vec![vec![false; 9]; 9];
        let mut cols = vec![vec![false; 9]; 9];
        let mut boxes = vec![vec![false; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] == '.' {
                    continue;
                }
                let num = board[i][j] as usize - '1' as usize;
                let box_index = i / 3 * 3 + j / 3;
                if rows[i][num] || cols[j][num] || boxes[box_index][num] {
                    return false;
                }
                rows[i][num] = true;
                cols[j][num] = true;
                boxes[box_index][num] = true;
            }
        }
        true

=======
Suggestion 2

        let mut row = vec![vec![false; 9]; 9];
        let mut col = vec![vec![false; 9]; 9];
        let mut boxs = vec![vec![false; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] == '.' { continue; }
                let num = board[i][j] as usize - '1' as usize;
                let box_index = (i / 3) * 3 + j / 3;
                if row[i][num] || col[j][num] || boxs[box_index][num] {
                    return false;
                }
                row[i][num] = true;
                col[j][num] = true;
                boxs[box_index][num] = true;
            }
        }
        true

=======
Suggestion 3

        let mut row = vec![vec![false; 9]; 9];
        let mut col = vec![vec![false; 9]; 9];
        let mut boxs = vec![vec![false; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] != '.' {
                    let num = board[i][j] as usize - '1' as usize;
                    let box_index = i / 3 * 3 + j / 3;
                    if row[i][num] || col[j][num] || boxs[box_index][num] {
                        return false;
                    }
                    row[i][num] = true;
                    col[j][num] = true;
                    boxs[box_index][num] = true;
                }
            }
        }
        return true;

=======
Suggestion 4

        let mut row = vec![vec![false; 9]; 9];
        let mut col = vec![vec![false; 9]; 9];
        let mut boxs = vec![vec![false; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] == '.' {
                    continue;
                }
                let num = board[i][j] as usize - '0' as usize - 1;
                let k = i / 3 * 3 + j / 3;
                if row[i][num] || col[j][num] || boxs[k][num] {
                    return false;
                }
                row[i][num] = true;
                col[j][num] = true;
                boxs[k][num] = true;
            }
        }
        true

=======
Suggestion 5

        let mut row = vec![vec![false; 9]; 9];
        let mut col = vec![vec![false; 9]; 9];
        let mut boxs = vec![vec![false; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] != '.' {
                    let num = (board[i][j] as u8 - '1' as u8) as usize;
                    let box_index = (i / 3) * 3 + j / 3;
                    if row[i][num] || col[j][num] || boxs[box_index][num] {
                        return false;
                    }
                    row[i][num] = true;
                    col[j][num] = true;
                    boxs[box_index][num] = true;
                }
            }
        }
        true

=======
Suggestion 6

        let mut row = vec![vec![0; 9]; 9];
        let mut col = vec![vec![0; 9]; 9];
        let mut block = vec![vec![0; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] == '.' {
                    continue;
                }
                let num = (board[i][j] as u8 - b'1') as usize;
                let k = i / 3 * 3 + j / 3;
                row[i][num] += 1;
                col[j][num] += 1;
                block[k][num] += 1;
                if row[i][num] > 1 || col[j][num] > 1 || block[k][num] > 1 {
                    return false;
                }
            }
        }
        true

=======
Suggestion 7

        let mut row = vec![vec![0; 9]; 9];
        let mut col = vec![vec![0; 9]; 9];
        let mut boxs = vec![vec![0; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] != '.' {
                    let num = board[i][j] as usize - '1' as usize;
                    let box_index = (i / 3) * 3 + j / 3;
                    row[i][num] += 1;
                    col[j][num] += 1;
                    boxs[box_index][num] += 1;
                    if row[i][num] > 1 || col[j][num] > 1 || boxs[box_index][num] > 1 {
                        return false;
                    }
                }
            }
        }
        true

=======
Suggestion 8

        let mut rows = vec![vec![0; 9]; 9];
        let mut cols = vec![vec![0; 9]; 9];
        let mut blocks = vec![vec![0; 9]; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] == '.' {
                    continue;
                }
                let num = board[i][j].to_digit(10).unwrap() as usize - 1;
                let block_index = i / 3 * 3 + j / 3;
                rows[i][num] += 1;
                cols[j][num] += 1;
                blocks[block_index][num] += 1;
                if rows[i][num] > 1 || cols[j][num] > 1 || blocks[block_index][num] > 1 {
                    return false;
                }
            }
        }
        true

=======
Suggestion 9

        let mut rows = vec![0; 9];
        let mut cols = vec![0; 9];
        let mut blocks = vec![0; 9];
        for i in 0..9 {
            for j in 0..9 {
                if board[i][j] != '.' {
                    let value = 1 << (board[i][j] as u8 - '1' as u8);
                    let block = i / 3 * 3 + j / 3;
                    if value & rows[i] > 0 || value & cols[j] > 0 || value & blocks[block] > 0 {
                        return false;
                    }
                    rows[i] |= value;
                    cols[j] |= value;
                    blocks[block] |= value;
                }
            }
        }
        true
