Synthesizing 10/10 solutions

=======

        let mut count = [0; 10];
        let mut n = n;
        while n > 0 {
            count[(n % 10) as usize] += 1;
            n /= 10;
        }
        for i in 0..30 {
            let mut tmp = [0; 10];
            let mut j = 1 << i;
            while j > 0 {
                tmp[(j % 10) as usize] += 1;
                j /= 10;
            }
            if count == tmp {
                return true;
            }
        }
        false

=======

        let mut n = n;
        let mut count = vec![0; 10];
        while n > 0 {
            count[(n % 10) as usize] += 1;
            n /= 10;
        }
        for i in 0..32 {
            let mut m = 1 << i;
            let mut count2 = vec![0; 10];
            while m > 0 {
                count2[(m % 10) as usize] += 1;
                m /= 10;
            }
            if count == count2 {
                return true;
            }
        }
        false

=======

        let mut n = n;
        let mut count = [0; 10];
        while n > 0 {
            count[(n % 10) as usize] += 1;
            n /= 10;
        }
        for i in 0..32 {
            let mut m = 1 << i;
            let mut count2 = [0; 10];
            while m > 0 {
                count2[(m % 10) as usize] += 1;
                m /= 10;
            }
            if count == count2 {
                return true;
            }
        }
        false

=======

        let mut digits = vec![0; 10];
        let mut x = n;
        while x > 0 {
            digits[(x % 10) as usize] += 1;
            x /= 10;
        }
        for i in 0..32 {
            let mut x = 1 << i;
            let mut y = vec![0; 10];
            while x > 0 {
                y[(x % 10) as usize] += 1;
                x /= 10;
            }
            if digits == y {
                return true;
            }
        }
        false

=======

        let mut n = n;
        let mut digits = vec![];
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.sort();
        for i in 0..32 {
            let mut power = 1 << i;
            let mut power_digits = vec![];
            while power > 0 {
                power_digits.push(power % 10);
                power /= 10;
            }
            power_digits.sort();
            if power_digits == digits {
                return true;
            }
        }
        false

=======

        let mut n = n;
        let mut digits = vec![];
        while n > 0 {
            digits.push(n % 10);
            n /= 10;
        }
        digits.sort();
        let mut i = 0;
        while i < 31 {
            let mut j = i;
            let mut digits2 = vec![];
            while j > 0 {
                digits2.push(j % 2);
                j /= 2;
            }
            digits2.sort();
            if digits == digits2 {
                return true;
            }
            i += 1;
        }
        false

=======

        let mut n = n.to_string().into_bytes();
        n.sort();
        let mut i = 1;
        while i <= 1_000_000_000 {
            let mut j = i.to_string().into_bytes();
            j.sort();
            if n == j {
                return true;
            }
            i *= 2;
        }
        false

=======

        let s = n.to_string().chars().collect::<Vec<char>>();
        for i in 0..s.len() {
            let mut v = s.clone();
            v.swap(0, i);
            let n = v.iter().collect::<String>().parse::<i32>().unwrap();
            if n.count_ones() == 1 {
                return true;
            }
        }
        false

=======

        let mut digits = n.to_string().chars().collect::<Vec<char>>();
        digits.sort();
        let mut num = digits.iter().collect::<String>().parse::<i32>().unwrap();
        while num <= 1000000000 {
            if num.count_ones() == 1 {
                return true;
            }
            num *= 2;
        }
        false

=======

        let mut n = n.to_string();
        let mut v = n.chars().collect::<Vec<char>>();
        v.sort();
        let mut n = v.into_iter().collect::<String>();
        while n.starts_with('0') {
            n.remove(0);
        }
        let mut i = 1;
        while i < 1_000_000_000 {
            let mut v = i.to_string().chars().collect::<Vec<char>>();
            v.sort();
            let mut t = v.into_iter().collect::<String>();
            while t.starts_with('0') {
                t.remove(0);
            }
            if t == n {
                return true;
            }
            i <<= 1;
        }
        false
