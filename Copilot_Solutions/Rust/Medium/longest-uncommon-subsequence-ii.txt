Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            let mut found = false;
            for j in 0..strs.len() {
                if i != j && strs[j].contains(&strs[i]) {
                    found = true;
                    break;
                }
            }
            if !found {
                return strs[i].len() as i32;
            }
        }
        -1
    }
}

=======
Suggestion 2

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            let mut j = 0;
            while j < strs.len() {
                if i != j && strs[i].len() <= strs[j].len() {
                    if Self::is_subsequence(&strs[i], &strs[j]) {
                        break;
                    }
                }
                j += 1;
            }
            if j == strs.len() {
                return strs[i].len() as i32;
            }
        }
        -1
    }
    pub fn is_subsequence(a: &String, b: &String) -> bool {
        let mut i = 0;
        let mut j = 0;
        while i < a.len() && j < b.len() {
            if a.as_bytes()[i] == b.as_bytes()[j] {
                i += 1;
            }
            j += 1;
        }
        i == a.len()

=======
Suggestion 3

        let mut result = -1;
        for i in 0..strs.len() {
            let mut is_subsequence = false;
            for j in 0..strs.len() {
                if i == j {
                    continue;
                }
                if Self::is_subsequence(&strs[i], &strs[j]) {
                    is_subsequence = true;
                    break;
                }
            }
            if !is_subsequence {
                result = result.max(strs[i].len() as i32);
            }
        }
        result
    }

    fn is_subsequence(s: &String, t: &String) -> bool {
        let mut i = 0;
        let mut j = 0;
        while i < s.len() && j < t.len() {
            if s.chars().nth(i).unwrap() == t.chars().nth(j).unwrap() {
                i += 1;
            }
            j += 1;
        }
        i == s.len()

=======
Suggestion 4

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            let mut is_sub = false;
            for j in 0..strs.len() {
                if i == j {
                    continue;
                }
                if Solution::is_sub(&strs[i], &strs[j]) {
                    is_sub = true;
                    break;
                }
            }
            if !is_sub {
                return strs[i].len() as i32;
            }
        }
        -1
    }
    fn is_sub(a: &str, b: &str) -> bool {
        let mut i = 0;
        let mut j = 0;
        while i < a.len() && j < b.len() {
            if a.as_bytes()[i] == b.as_bytes()[j] {
                i += 1;
            }
            j += 1;
        }
        i == a.len()
    }
}

=======
Suggestion 5

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            let mut is_sub = false;
            for j in 0..strs.len() {
                if i == j {
                    continue;
                }
                if is_subsequence(&strs[i], &strs[j]) {
                    is_sub = true;
                    break;
                }
            }
            if !is_sub {
                return strs[i].len() as i32;
            }
        }
        -1
    }
}

=======
Suggestion 6

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            let mut is_subsequence = false;
            for j in 0..strs.len() {
                if i == j {
                    continue;
                }
                if is_subsequence(&strs[i], &strs[j]) {
                    is_subsequence = true;
                    break;
                }
            }
            if !is_subsequence {
                return strs[i].len() as i32;
            }
        }
        -1
    }
}

=======
Suggestion 7

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for i in 0..strs.len() {
            if strs[i..].iter().all(|s| !is_subsequence(&strs[i], s)) {
                return strs[i].len() as i32;
            }
        }
        -1
    }
}

=======
Suggestion 8

        let mut strs: Vec<Vec<char>> = strs.into_iter().map(|s| s.chars().collect()).collect();
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        for (i, a) in strs.iter().enumerate() {
            let mut is_subsequence = false;
            for (j, b) in strs.iter().enumerate() {
                if i == j {
                    continue;
                }
                if is_subsequence(a, b) {
                    is_subsequence = true;
                    break;
                }
            }
            if !is_subsequence {
                return a.len() as i32;
            }
        }
        -1
    }
}

=======
Suggestion 9

        let mut strs = strs;
        strs.sort_unstable_by(|a, b| b.len().cmp(&a.len()));
        let mut i = 0;
        while i < strs.len() {
            let mut j = 0;
            while j < strs.len() {
                if i != j && strs[i].len() <= strs[j].len() && strs[j].contains(&strs[i]) {
                    break;
                }
                j += 1;
            }
            if j == strs.len() {
                return strs[i].len() as i32;
            }
            i += 1;
        }
        -1

=======
Suggestion 10

        let mut strs = strs;
        strs.sort_by(|a, b| b.len().cmp(&a.len()));
        let mut res = -1;
        for i in 0..strs.len() {
            if strs[i..].iter().any(|s| s == &strs[i]) {
                continue;
            }
            if strs[..i].iter().all(|s| !is_subsequence(&strs[i], s)) {
                res = strs[i].len() as i32;
                break;
            }
        }
        res
    }
}
