Synthesizing 9/10 solutions

=======

        let mut tower = vec![vec![0.0; 101]; 101];
        tower[0][0] = poured as f64;
        for i in 0..query_row {
            for j in 0..=i {
                let q = (tower[i as usize][j as usize] - 1.0) / 2.0;
                if q > 0.0 {
                    tower[i as usize + 1][j as usize] += q;
                    tower[i as usize + 1][j as usize + 1] += q;
                }
            }
        }
        if tower[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            tower[query_row as usize][query_glass as usize]
        }

=======

        let mut tower = vec![vec![0.0; 101]; 101];
        tower[0][0] = poured as f64;
        for i in 0..100 {
            for j in 0..=i {
                if tower[i][j] > 1.0 {
                    tower[i+1][j] += (tower[i][j] - 1.0) / 2.0;
                    tower[i+1][j+1] += (tower[i][j] - 1.0) / 2.0;
                }
            }
        }
        tower[query_row as usize][query_glass as usize].min(1.0)

=======

        let mut dp = vec![vec![0.0; 101]; 101];
        dp[0][0] = poured as f64;
        for i in 0..query_row {
            for j in 0..=i {
                if dp[i as usize][j as usize] > 1.0 {
                    let left = (dp[i as usize][j as usize] - 1.0) / 2.0;
                    dp[i as usize + 1][j as usize] += left;
                    dp[i as usize + 1][j as usize + 1] += left;
                }
            }
        }
        if dp[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            dp[query_row as usize][query_glass as usize]
        }

=======

        let mut tower = vec![vec![0.0; 100]; 100];
        tower[0][0] = poured as f64;
        for i in 0..query_row {
            for j in 0..=i {
                let q = (tower[i as usize][j as usize] - 1.0) / 2.0;
                if q > 0.0 {
                    tower[i as usize + 1][j as usize] += q;
                    tower[i as usize + 1][j as usize + 1] += q;
                }
            }
        }
        if tower[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            tower[query_row as usize][query_glass as usize]
        }

=======

        let mut glasses = vec![vec![0.0; 101]; 101];
        glasses[0][0] = poured as f64;
        for i in 0..100 {
            for j in 0..=i {
                let q = (glasses[i][j] - 1.0) / 2.0;
                if q > 0.0 {
                    glasses[i+1][j] += q;
                    glasses[i+1][j+1] += q;
                }
            }
        }
        if glasses[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            glasses[query_row as usize][query_glass as usize]
        }

=======

        let mut tower = vec![vec![0.0; 100]; 100];
        tower[0][0] = poured as f64;
        for i in 0..100 {
            for j in 0..=i {
                if tower[i][j] > 1.0 {
                    tower[i + 1][j] += (tower[i][j] - 1.0) / 2.0;
                    tower[i + 1][j + 1] += (tower[i][j] - 1.0) / 2.0;
                }
            }
        }
        tower[query_row as usize][query_glass as usize].min(1.0)

=======

        let mut tower = vec![vec![0.0; 100]; 100];
        tower[0][0] = poured as f64;
        for i in 0..query_row as usize {
            for j in 0..=i {
                if tower[i][j] > 1.0 {
                    let overflow = (tower[i][j] - 1.0) / 2.0;
                    tower[i + 1][j] += overflow;
                    tower[i + 1][j + 1] += overflow;
                }
            }
        }
        if tower[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            tower[query_row as usize][query_glass as usize]
        }

=======

        let mut tower = vec![vec![0.0; 100]; 100];
        tower[0][0] = poured as f64;
        for i in 0..99 {
            for j in 0..=i {
                let q = (tower[i][j] - 1.0) / 2.0;
                if q > 0.0 {
                    tower[i + 1][j] += q;
                    tower[i + 1][j + 1] += q;
                }
            }
        }
        if tower[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            tower[query_row as usize][query_glass as usize]
        }

=======

        let mut cups = vec![vec![0.0; 101]; 101];
        cups[0][0] = poured as f64;
        for i in 0..query_row {
            for j in 0..=i {
                let q = (cups[i as usize][j as usize] - 1.0) / 2.0;
                if q > 0.0 {
                    cups[i as usize + 1][j as usize] += q;
                    cups[i as usize + 1][j as usize + 1] += q;
                }
            }
        }
        if cups[query_row as usize][query_glass as usize] > 1.0 {
            1.0
        } else {
            cups[query_row as usize][query_glass as usize]
        }
