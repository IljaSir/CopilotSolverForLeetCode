Synthesizing 10/10 solutions

=======

        let mut primes = vec![];
        for i in left..=right {
            if Self::is_prime(i) {
                primes.push(i);
            }
        }
        if primes.len() < 2 {
            return vec![-1, -1];
        }
        let mut min = i32::MAX;
        let mut res = vec![];
        for i in 0..primes.len() - 1 {
            let diff = primes[i + 1] - primes[i];
            if diff < min {
                min = diff;
                res = vec![primes[i], primes[i + 1]];
            }
        }
        res
    }
    fn is_prime(n: i32) -> bool {
        if n == 1 {
            return false;
        }
        for i in 2..=n / 2 {
            if n % i == 0 {
                return false;
            }
        }
        true

=======

        let mut primes = vec![];
        let mut i = left;
        while i <= right {
            if Self::is_prime(i) {
                primes.push(i);
            }
            i += 1;
        }
        if primes.len() < 2 {
            return vec![-1, -1];
        }
        let mut min_diff = i32::MAX;
        let mut min_diff_idx = 0;
        let mut idx = 1;
        while idx < primes.len() {
            let diff = primes[idx] - primes[idx - 1];
            if diff < min_diff {
                min_diff = diff;
                min_diff_idx = idx - 1;
            }
            idx += 1;
        }
        vec![primes[min_diff_idx], primes[min_diff_idx + 1]]
    }
    fn is_prime(n: i32) -> bool {
        if n == 2 || n == 3 {
            return true;
        }
        if n < 2 || n % 2 == 0 {
            return false;
        }
        let mut i = 3;
        while i * i <= n {
            if n % i == 0 {
                return false;
            }
            i += 2;
        }
        true

=======

        let mut i = left;
        while i <= right {
            if is_prime(i) {
                if is_prime(i - 2) {
                    return vec![i - 2, i];
                }
                if is_prime(i + 2) {
                    return vec![i, i + 2];
                }
            }
            i += 1;
        }
        vec![-1, -1]
    }
}

=======

        let (mut i, mut j) = (left, right);
        while i > 0 && j > 0 {
            if Solution::is_prime(i) && Solution::is_prime(j) {
                return vec![i, j];
            }
            i -= 1;
            j += 1;
        }
        vec![-1, -1]
    }
    fn is_prime(n: i32) -> bool {
        if n == 1 {
            return false;
        }
        let mut i = 2;
        while i * i <= n {
            if n % i == 0 {
                return false;
            }
            i += 1;
        }
        true

=======

        let mut ans: Vec<i32> = vec![-1, -1];
        let mut min_gap = right - left;
        for i in left..=right {
            if Self::is_prime(i) {
                if ans[0] == -1 {
                    ans[0] = i;
                } else if ans[1] == -1 {
                    ans[1] = i;
                    if ans[1] - ans[0] < min_gap {
                        min_gap = ans[1] - ans[0];
                    }
                } else {
                    ans[0] = ans[1];
                    ans[1] = i;
                    if ans[1] - ans[0] < min_gap {
                        min_gap = ans[1] - ans[0];
                    }
                }
            }
        }
        ans
    }
    
    fn is_prime(num: i32) -> bool {
        if num <= 1 {
            return false;
        }
        for i in 2..num {
            if num % i == 0 {
                return false;
            }
        }
        true

=======

        let mut ans = vec![-1, -1];
        let mut min_gap = right - left;
        for i in left..=right {
            if !is_prime(i) {
                continue;
            }
            if i - 1 > left && is_prime(i - 1) {
                let gap = i - (i - 1);
                if gap < min_gap {
                    ans[0] = i - 1;
                    ans[1] = i;
                    min_gap = gap;
                }
            }
            if i + 1 < right && is_prime(i + 1) {
                let gap = (i + 1) - i;
                if gap < min_gap {
                    ans[0] = i;
                    ans[1] = i + 1;
                    min_gap = gap;
                }
            }
        }
        ans
    }
}

=======

        let mut ans = vec![-1, -1];
        let mut min = right - left;
        for i in (left..=right).filter(|&x| Self::is_prime(x)) {
            for j in (left..=right).filter(|&x| Self::is_prime(x)) {
                if i == j {
                    continue;
                }
                if (j - i).abs() < min {
                    ans = vec![i, j];
                    min = (j - i).abs();
                }
            }
        }
        ans
    }
    fn is_prime(n: i32) -> bool {
        if n < 2 {
            return false;
        }
        for i in 2..=(n as f64).sqrt() as i32 {
            if n % i == 0 {
                return false;
            }
        }
        true

=======

        let mut primes = vec![];
        let mut nums = vec![];
        for i in left..=right {
            if i == 1 {
                continue;
            }
            let mut is_prime = true;
            for j in 2..i {
                if i % j == 0 {
                    is_prime = false;
                    break;
                }
            }
            if is_prime {
                primes.push(i);
            } else {
                nums.push(i);
            }
        }
        if primes.is_empty() {
            return vec![-1, -1];
        }
        let mut min = (0, 0);
        for i in 0..primes.len() - 1 {
            if i == 0 {
                min = (i, i + 1);
            }
            if primes[i + 1] - primes[i] < primes[min.1] - primes[min.0] {
                min = (i, i + 1);
            }
        }
        vec![primes[min.0], primes[min.1]]

=======

        let mut ans = vec![-1,-1];
        let mut min_gap = 1000000;
        let mut i = left;
        while i <= right {
            if i > 2 && i % 2 == 0 {
                i += 1;
                continue;
            }
            let mut j = 3;
            while j*j <= i {
                if i % j == 0 {
                    break;
                }
                j += 2;
            }
            if j*j > i {
                if i - ans[0] < min_gap {
                    ans[1] = i;
                    min_gap = i - ans[0];
                }
                ans[0] = i;
            }
            i += 1;
        }
        ans
    }
}

=======

        let mut ans = vec![-1,-1];
        let mut min_gap = right - left;
        let mut num1 = left;
        let mut num2 = right;
        
        while num1 <= right {
            if Self::is_prime(num1) {
                if num1 < num2 {
                    num2 = num1;
                }
                if num1 - num2 < min_gap {
                    min_gap = num1 - num2;
                    ans[0] = num2;
                    ans[1] = num1;
                }
            }
            num1 += 1;
        }
        ans
    }
    
    fn is_prime(n: i32) -> bool {
        if n == 2 {
            return true;
        }
        if n % 2 == 0 {
            return false;
        }
        let mut i = 3;
        while i * i <= n {
            if n % i == 0 {
                return false;
            }
            i += 2;
        }
        true
