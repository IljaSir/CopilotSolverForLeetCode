Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        s2.sort();
        let mut i = 0;
        while i < s1.len() {
            if s1[i] < s2[i] {
                break;
            }
            i += 1;
        }
        if i == s1.len() {
            return true;
        }
        i = 0;
        while i < s1.len() {
            if s1[i] > s2[i] {
                break;
            }
            i += 1;
        }
        if i == s1.len() {
            return true;
        }
        false

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        s2.sort();
        let (mut i, mut j) = (0, 0);
        let (mut n1, mut n2) = (0, 0);
        for k in 0..s1.len() {
            if s1[k] > s2[k] {
                n1 += 1;
            } else if s1[k] < s2[k] {
                n2 += 1;
            }
        }
        n1 == 0 || n2 == 0

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        s2.sort();
        let mut s1b = true;
        let mut s2b = true;
        for i in 0..s1.len() {
            if s1[i] < s2[i] {
                s1b = false;
            }
            if s2[i] < s1[i] {
                s2b = false;
            }
        }
        s1b || s2b

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        s2.sort();
        let mut s1_larger = true;
        let mut s2_larger = true;
        for i in 0..s1.len() {
            if s1[i] < s2[i] {
                s1_larger = false;
            }
            if s2[i] < s1[i] {
                s2_larger = false;
            }
        }
        s1_larger || s2_larger

=======

        let mut s1 = s1.chars().collect::<Vec<char>>();
        let mut s2 = s2.chars().collect::<Vec<char>>();
        s1.sort();
        s2.sort();
        let mut s1_bigger = true;
        let mut s2_bigger = true;
        for i in 0..s1.len() {
            if s1[i] < s2[i] {
                s1_bigger = false;
            }
            if s2[i] < s1[i] {
                s2_bigger = false;
            }
        }
        s1_bigger || s2_bigger

=======

        let mut s1 = s1.as_bytes().to_vec();
        let mut s2 = s2.as_bytes().to_vec();
        s1.sort();
        s2.sort();
        let mut s1_bigger = true;
        let mut s2_bigger = true;
        for i in 0..s1.len() {
            if s1[i] > s2[i] {
                s2_bigger = false;
            }
            if s1[i] < s2[i] {
                s1_bigger = false;
            }
        }
        s1_bigger || s2_bigger

=======

        let mut s1 = s1.into_bytes();
        let mut s2 = s2.into_bytes();
        s1.sort();
        s2.sort();
        let mut s1_bigger = false;
        let mut s2_bigger = false;
        for i in 0..s1.len() {
            if s1[i] > s2[i] {
                if s2_bigger {
                    return false;
                }
                s1_bigger = true;
            } else if s1[i] < s2[i] {
                if s1_bigger {
                    return false;
                }
                s2_bigger = true;
            }
        }
        true

=======

        let mut s1 = s1.chars().collect::<Vec<_>>();
        let mut s2 = s2.chars().collect::<Vec<_>>();
        s1.sort();
        s2.sort();
        let mut s1_break = true;
        let mut s2_break = true;
        for i in 0..s1.len() {
            if s1[i] < s2[i] {
                s1_break = false;
            }
            if s1[i] > s2[i] {
                s2_break = false;
            }
        }
        s1_break || s2_break
