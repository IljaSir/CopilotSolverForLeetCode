Synthesizing 10/10 solutions

=======

        let n = alice_values.len();
        let mut stones = Vec::new();
        for i in 0..n {
            stones.push((alice_values[i] + bob_values[i], alice_values[i], bob_values[i]));
        }
        stones.sort_by(|a, b| b.0.cmp(&a.0));
        let mut alice = 0;
        let mut bob = 0;
        for i in 0..n {
            if i % 2 == 0 {
                alice += stones[i].1;
            } else {
                bob += stones[i].2;
            }
        }
        if alice > bob {
            1
        } else if alice < bob {
            -1
        } else {
            0
        }
    }
}

=======

        let n = alice_values.len();
        let mut stones = Vec::new();
        for i in 0..n {
            stones.push((alice_values[i] + bob_values[i], alice_values[i], bob_values[i]));
        }
        stones.sort_by(|a, b| b.0.cmp(&a.0));
        let mut alice = 0;
        let mut bob = 0;
        for i in 0..n {
            if i % 2 == 0 {
                alice += stones[i].1;
            } else {
                bob += stones[i].2;
            }
        }
        if alice > bob {
            1
        } else if alice < bob {
            -1
        } else {
            0
        }

=======

        let n = alice_values.len();
        let mut diff = Vec::with_capacity(n);
        for i in 0..n {
            diff.push((alice_values[i] + bob_values[i], alice_values[i], bob_values[i]));
        }
        diff.sort_by(|a, b| b.0.cmp(&a.0));
        let mut alice = 0;
        let mut bob = 0;
        for i in 0..n {
            if i % 2 == 0 {
                alice += diff[i].1;
            } else {
                bob += diff[i].2;
            }
        }
        if alice > bob {
            return 1;
        } else if alice < bob {
            return -1;
        } else {
            return 0;
        }
    }
}

=======

        let n = alice_values.len();
        let mut sum = vec![0; n];
        for i in 0..n {
            sum[i] = alice_values[i] + bob_values[i];
        }
        let mut index = vec![0; n];
        for i in 0..n {
            index[i] = i;
        }
        index.sort_by(|&a, &b| sum[b].cmp(&sum[a]));
        let mut alice = 0;
        let mut bob = 0;
        for i in 0..n {
            if i % 2 == 0 {
                alice += alice_values[index[i]];
            } else {
                bob += bob_values[index[i]];
            }
        }
        if alice > bob {
            1
        } else if alice < bob {
            -1
        } else {
            0
        }
    }
}

=======

        let mut sum = 0;
        let mut v = Vec::new();
        for i in 0..alice_values.len() {
            v.push((alice_values[i] + bob_values[i], alice_values[i], bob_values[i]));
            sum += alice_values[i];
        }
        v.sort_by(|a, b| b.0.cmp(&a.0));
        let mut alice = true;
        for i in 0..v.len() {
            if alice {
                sum += v[i].1;
            } else {
                sum -= v[i].2;
            }
            alice = !alice;
        }
        if sum > 0 {
            1
        } else if sum < 0 {
            -1
        } else {
            0
        }

=======

        let mut sum = 0;
        let mut v = Vec::new();
        for i in 0..alice_values.len() {
            sum += alice_values[i];
            v.push((alice_values[i] + bob_values[i], alice_values[i], bob_values[i]));
        }
        v.sort_by_key(|a| -a.0);
        let mut alice = 0;
        let mut bob = 0;
        for i in 0..v.len() {
            if i % 2 == 0 {
                alice += v[i].1;
            } else {
                bob += v[i].2;
            }
        }
        if alice > bob {
            1
        } else if alice < bob {
            -1
        } else {
            0
        }

=======

        let mut stones: Vec<(usize, i32)> = alice_values.iter().zip(bob_values.iter()).enumerate().map(|(i, (a, b))| (i, a + b)).collect();
        stones.sort_by_key(|(_, v)| -v);
        let mut alice = 0;
        let mut bob = 0;
        for (i, _) in stones {
            if i % 2 == 0 {
                alice += alice_values[i];
            } else {
                bob += bob_values[i];
            }
        }
        if alice > bob {
            1
        } else if alice < bob {
            -1
        } else {
            0
        }

=======

        let mut stones: Vec<(i32, i32, i32)> = alice_values
            .iter()
            .zip(bob_values.iter())
            .enumerate()
            .map(|(i, (alice_value, bob_value))| (alice_value + bob_value, *alice_value, *bob_value))
            .collect();
        stones.sort_by(|a, b| b.0.cmp(&a.0));
        let (mut alice_sum, mut bob_sum) = (0, 0);
        for (i, (_, alice_value, bob_value)) in stones.iter().enumerate() {
            if i % 2 == 0 {
                alice_sum += alice_value;
            } else {
                bob_sum += bob_value;
            }
        }
        if alice_sum == bob_sum {
            return 0;
        }
        if alice_sum > bob_sum {
            return 1;
        }
        return -1;
    }
}

=======

        let n = alice_values.len();
        let mut sum = 0;
        let mut heap = std::collections::BinaryHeap::new();
        for i in 0..n {
            let alice = alice_values[i];
            let bob = bob_values[i];
            sum += alice;
            heap.push((alice + bob, alice, bob));
        }
        let mut alice_sum = 0;
        let mut bob_sum = 0;
        let mut alice = true;
        while let Some((_, alice_value, bob_value)) = heap.pop() {
            if alice {
                alice_sum += alice_value;
            } else {
                bob_sum += bob_value;
            }
            alice = !alice;
        }
        if alice_sum > bob_sum {
            1
        } else if alice_sum < bob_sum {
            -1
        } else {
            0
        }
    }
}

=======

        let mut sum = 0;
        let mut alice = 0;
        let mut bob = 0;
        let mut a = Vec::new();
        let mut b = Vec::new();
        for i in 0..alice_values.len() {
            a.push((alice_values[i], bob_values[i]));
            b.push((alice_values[i], bob_values[i]));
            sum += alice_values[i] + bob_values[i];
        }
        a.sort_by(|a, b| {
            let x = b.0 - b.1;
            let y = a.0 - a.1;
            if x == y {
                return b.0.cmp(&a.0);
            }
            x.cmp(&y)
        });
        b.sort_by(|a, b| {
            let x = b.1 - b.0;
            let y = a.1 - a.0;
            if x == y {
                return b.1.cmp(&a.1);
            }
            x.cmp(&y)
        });
        let mut i = 0;
        while i < a.len() {
            alice += a[i].0;
            i += 1;
            if i == a.len() {
                break;
            }
            bob += b[i].1;
            i += 1;
        }
        if alice > bob {
            return 1;
        } else if alice < bob {
            return -1;
        } else {
            return 0;
        }
