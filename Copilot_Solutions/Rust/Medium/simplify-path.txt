Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut stack: Vec<String> = Vec::new();
        for p in path.split("/") {
            if p == "" || p == "." {
                continue;
            } else if p == ".." {
                stack.pop();
            } else {
                stack.push(p.to_string());
            }
        }
        let mut res = String::new();
        for s in stack {
            res.push_str("/");
            res.push_str(&s);
        }
        if res == "" {
            res.push_str("/");
        }
        res

=======
Suggestion 2

        let mut stack = Vec::new();
        for p in path.split('/') {
            match p {
                "" | "." => {}
                ".." => { stack.pop(); }
                _ => { stack.push(p); }
            }
        }
        let mut res = String::new();
        for p in stack {
            res.push_str("/");
            res.push_str(p);
        }
        if res.is_empty() { res.push_str("/"); }
        res

=======
Suggestion 3

        let mut stack = Vec::new();
        for p in path.split('/') {
            match p {
                "" | "." => (),
                ".." => { stack.pop(); },
                _ => { stack.push(p); },
            }
        }
        format!("/{}", stack.join("/"))

=======
Suggestion 4

        let mut stack = Vec::new();
        for p in path.split('/') {
            match p {
                "" | "." => continue,
                ".." => { stack.pop(); },
                _ => { stack.push(p); },
            }
        }
        let mut result = String::new();
        for p in stack {
            result.push('/');
            result.push_str(p);
        }
        if result.is_empty() {
            result.push('/');
        }
        result

=======
Suggestion 5

        let mut stack: Vec<String> = Vec::new();
        for part in path.split('/') {
            match part {
                "" | "." => (),
                ".." => { stack.pop(); }
                _ => { stack.push(part.to_string()); }
            }
        }
        let res: String = stack.join("/");
        format!("/{}", res)
    }
}

=======
Suggestion 6

        let mut stack = Vec::new();
        for sub in path.split('/') {
            match sub {
                "." | "" => (),
                ".." => { stack.pop(); },
                _ => { stack.push(sub); },
            }
        }
        stack.join("/").insert(0, '/')
    }
}

=======
Suggestion 7

        let mut stack = Vec::new();
        for s in path.split("/") {
            match s {
                "" | "." => (),
                ".." => { stack.pop(); },
                _ => stack.push(s),
            };
        }
        stack.join("/")

=======
Suggestion 8

        let mut stack = vec![];
        let mut parts = path.split('/');
        for part in parts {
            match part {
                ".." => { stack.pop(); },
                "." | "" => {},
                _ => { stack.push(part); },
            }
        }
        let mut res = String::new();
        for part in stack {
            res.push('/');
            res.push_str(part);
        }
        if res.is_empty() { res.push('/') }
        res

=======
Suggestion 9

        let mut stack = Vec::new();
        let mut path = path.split("/").collect::<Vec<&str>>();
        for i in path {
            if i == "." || i == "" {
                continue;
            } else if i == ".." {
                stack.pop();
            } else {
                stack.push(i);
            }
        }
        format!("/{}", stack.join("/"))

=======
Suggestion 10

        let mut stack: Vec<String> = Vec::new();
        let mut path = path.split("/");
        loop {
            let p = path.next();
            match p {
                Some(p) => {
                    match p {
                        "" => continue,
                        "." => continue,
                        ".." => {
                            stack.pop();
                        }
                        _ => {
                            stack.push(p.to_string());
                        }
                    }
                }
                None => break,
            }
        }
        let mut res = String::from("/");
        for p in stack {
            res.push_str(&p);
            res.push('/');
        }
        if res.len() > 1 {
            res.pop();
        }
        return res;
    }
}
