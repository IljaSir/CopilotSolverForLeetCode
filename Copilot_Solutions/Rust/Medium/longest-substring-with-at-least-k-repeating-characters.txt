Synthesizing 7/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut freq = vec![0; 26];
        for c in s.chars() {
            freq[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut split = -1;
        for i in 0..s.len() {
            if freq[(s.as_bytes()[i] - 'a' as u8) as usize] < k {
                split = i as i32;
                break;
            }
        }
        if split == -1 {
            return s.len() as i32;
        }
        let left = Solution::longest_substring(s[0..(split as usize)].to_string(), k);
        let right = Solution::longest_substring(s[(split + 1) as usize..].to_string(), k);
        left.max(right)
    }
}

=======
Suggestion 2

        let s = s.as_bytes();
        let mut cnt = vec![0; 26];
        for &c in s {
            cnt[(c - b'a') as usize] += 1;
        }
        let mut split = vec![];
        for i in 0..s.len() {
            if cnt[(s[i] - b'a') as usize] < k {
                split.push(i);
            }
        }
        if split.is_empty() {
            return s.len() as i32;
        }
        split.push(s.len());
        let mut start = 0;
        let mut ans = 0;
        for &i in &split {
            ans = ans.max(Self::longest_substring(String::from_utf8_lossy(&s[start..i]).to_string(), k));
            start = i + 1;
        }
        ans
    }
}

=======
Suggestion 3

        let mut max_len = 0;
        for c in 'a' as u8 .. 'z' as u8 + 1 {
            let mut i = 0;
            let mut j = 0;
            let mut count = 0;
            let mut less = 0;
            let mut freq = [0; 26];
            while j < s.len() {
                let idx = s.as_bytes()[j] - 'a' as u8;
                freq[idx as usize] += 1;
                if freq[idx as usize] == k {
                    count += 1;
                } else if freq[idx as usize] == 1 {
                    less += 1;
                }
                while less > 0 {
                    let idx = s.as_bytes()[i] - 'a' as u8;
                    freq[idx as usize] -= 1;
                    if freq[idx as usize] == k - 1 {
                        count -= 1;
                    } else if freq[idx as usize] == 0 {
                        less -= 1;
                    }
                    i += 1;
                }
                if count == c - 'a' as u8 + 1 {
                    max_len = max_len.max(j - i + 1);
                }
                j += 1;
            }
        }
        max_len as i32

=======
Suggestion 4

        
    }
}

=======
Suggestion 5

        let mut max = 0;
        for i in 1..=26 {
            let mut left = 0;
            let mut right = 0;
            let mut count = 0;
            let mut map = vec![0; 26];
            while right < s.len() {
                if map[(s.as_bytes()[right] - b'a') as usize] == 0 {
                    count += 1;
                }
                map[(s.as_bytes()[right] - b'a') as usize] += 1;
                while count > i {
                    map[(s.as_bytes()[left] - b'a') as usize] -= 1;
                    if map[(s.as_bytes()[left] - b'a') as usize] == 0 {
                        count -= 1;
                    }
                    left += 1;
                }
                if count == i {
                    let mut valid = true;
                    for j in 0..26 {
                        if map[j] > 0 && map[j] < k {
                            valid = false;
                            break;
                        }
                    }
                    if valid {
                        max = max.max(right - left + 1);
                    }
                }
                right += 1;
            }
        }
        max as i32

=======
Suggestion 6

        let mut res = 0;
        let mut i = 0;
        let mut j = 0;
        let k = k as usize;
        let mut count = [0; 26];
        let mut unique = 0;
        let mut no_less_than_k = 0;
        let mut s = s.chars().collect::<Vec<char>>();
        while j < s.len() {
            let c = s[j] as usize - 'a' as usize;
            if count[c] == 0 {
                unique += 1;
            }
            count[c] += 1;
            if count[c] == k {
                no_less_than_k += 1;
            }
            while unique > k {
                let c = s[i] as usize - 'a' as usize;
                if count[c] == k {
                    no_less_than_k -= 1;
                }
                count[c] -= 1;
                if count[c] == 0 {
                    unique -= 1;
                }
                i += 1;
            }
            if unique == no_less_than_k {
                res = res.max(j - i + 1);
            }
            j += 1;
        }
        res as i32
