Synthesizing 10/10 solutions

=======

        let n = card_points.len();
        let k = k as usize;
        let mut sum = 0;
        for i in 0..k {
            sum += card_points[i];
        }
        let mut res = sum;
        for i in 0..k {
            sum -= card_points[k - 1 - i];
            sum += card_points[n - 1 - i];
            res = res.max(sum);
        }
        res

=======

        let k = k as usize;
        let n = card_points.len();
        let mut sum = 0;
        for i in 0..k {
            sum += card_points[i];
        }
        let mut res = sum;
        for i in 1..=k {
            sum -= card_points[k - i];
            sum += card_points[n - i];
            res = res.max(sum);
        }
        res

=======

        let n = card_points.len();
        let mut sum = 0;
        for i in 0..k as usize {
            sum += card_points[i];
        }
        let mut res = sum;
        for i in 0..k as usize {
            sum -= card_points[k as usize - i - 1];
            sum += card_points[n - i - 1];
            res = res.max(sum);
        }
        res

=======

        let mut sum = 0;
        for i in 0..k as usize {
            sum += card_points[i];
        }
        let mut max = sum;
        for i in 0..k as usize {
            sum -= card_points[k as usize - i - 1];
            sum += card_points[card_points.len() - i - 1];
            if sum > max {
                max = sum;
            }
        }
        max

=======

        let mut sum = 0;
        for i in 0..k {
            sum += card_points[i as usize];
        }
        let mut max = sum;
        for i in 0..k {
            sum = sum + card_points[card_points.len() - i as usize - 1] - card_points[k as usize - i as usize - 1];
            max = max.max(sum);
        }
        max

=======

        let k = k as usize;
        let mut sum = card_points.iter().take(k).sum::<i32>();
        let mut max = sum;
        for i in 1..=k {
            sum -= card_points[k - i];
            sum += card_points[card_points.len() - i];
            max = max.max(sum);
        }
        max

=======

        let (mut i, mut j, mut s) = (0, card_points.len() - 1, 0);
        let k = k as usize;
        for _ in 0..k {
            s += card_points[i];
            i += 1;
        }
        let mut res = s;
        for _ in 0..k {
            s -= card_points[i - 1];
            s += card_points[j];
            res = res.max(s);
            i -= 1;
            j -= 1;
        }
        res

=======

        let mut sum = 0;
        let mut min_sum = std::i32::MAX;
        let mut sub_sum = 0;
        for i in 0..card_points.len() {
            sum += card_points[i];
            if i < card_points.len() - k as usize {
                sub_sum += card_points[i];
            }
        }
        min_sum = min_sum.min(sub_sum);
        for i in 0..k as usize {
            sub_sum += card_points[card_points.len() - k as usize + i];
            sub_sum -= card_points[i];
            min_sum = min_sum.min(sub_sum);
        }
        sum - min_sum

=======

        let (mut sum, mut max) = (0, 0);
        let n = card_points.len() - 1;
        let k = k as usize;
        for i in 0..k {
            sum += card_points[i];
        }
        max = sum;
        for i in 0..k {
            sum += card_points[n-i] - card_points[k-1-i];
            max = max.max(sum);
        }
        max

=======

        let (mut sum, mut max) = (0, 0);
        let (mut i, mut j) = (0, card_points.len() - k as usize);
        for p in card_points {
            sum += p;
            if i < j {
                sum -= card_points[i];
                i += 1;
            }
            max = max.max(sum);
        }
        max
