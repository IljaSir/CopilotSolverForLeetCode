Synthesizing 10/10 solutions

=======

        let mut num = num.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < num.len() {
            let d = num[i] as i32 - '0' as i32;
            if d < change[d as usize] {
                while i < num.len() && num[i] as i32 - '0' as i32 <= change[num[i] as i32 - '0' as i32 as usize] {
                    num[i] = (change[num[i] as i32 - '0' as i32 as usize] + '0' as i32) as u8 as char;
                    i += 1;
                }
                break;
            }
            i += 1;
        }
        num.iter().collect()

=======

        let mut num = num.as_bytes().to_vec();
        let mut i = 0;
        while i < num.len() {
            if num[i] - b'0' < change[num[i] as usize - b'0' as usize] as u8 {
                num[i] = change[num[i] as usize - b'0' as usize] as u8 + b'0';
                i += 1;
                while i < num.len() && num[i] - b'0' <= change[num[i] as usize - b'0' as usize] as u8 {
                    num[i] = change[num[i] as usize - b'0' as usize] as u8 + b'0';
                    i += 1;
                }
                break;
            }
            i += 1;
        }
        String::from_utf8(num).unwrap()
    }
}

=======

        let mut num = num.chars().collect::<Vec<char>>();
        let mut i = 0;
        while i < num.len() {
            let c = num[i] as usize - '0' as usize;
            if change[c] > c as i32 {
                while i < num.len() && num[i] as usize - '0' as usize <= change[c] as usize {
                    num[i] = (change[c] + '0' as i32) as u8 as char;
                    i += 1;
                }
                break;
            }
            i += 1;
        }
        num.iter().collect::<String>()
    }
}

=======

        let mut num = num.chars().collect::<Vec<_>>();
        let mut flag = false;
        for i in 0..num.len() {
            let c = num[i] as usize - '0' as usize;
            if change[c] > c as i32 {
                num[i] = (change[c] + '0' as i32) as u8 as char;
                flag = true;
            } else if flag && change[c] < c as i32 {
                break;
            }
        }
        num.iter().collect()

=======

        let mut result = String::new();
        let mut is_changed = false;
        for c in num.chars() {
            let c = c.to_digit(10).unwrap() as usize;
            if change[c] > c as i32 {
                result.push_str(&change[c].to_string());
                is_changed = true;
            } else if change[c] < c as i32 {
                if is_changed {
                    break;
                } else {
                    result.push_str(&c.to_string());
                }
            } else {
                result.push_str(&c.to_string());
            }
        }
        result

=======

        let mut res = String::from("");
        let mut flag = false;
        for c in num.chars() {
            let i = c as usize - 48;
            if change[i] > i as i32 {
                res.push_str(&change[i].to_string());
                flag = true;
            } else if change[i] < i as i32 {
                if flag {
                    res.push_str(&i.to_string());
                } else {
                    res.push_str(&c.to_string());
                }
            } else {
                res.push_str(&c.to_string());
            }
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut i = 0;
        let mut flag = false;
        while i < num.len() {
            let c = num.chars().nth(i).unwrap();
            let n = c as i32 - '0' as i32;
            if change[n as usize] > n {
                flag = true;
                res.push((change[n as usize] + '0' as i32) as u8 as char);
            } else if change[n as usize] < n {
                if flag {
                    res.push(c);
                } else {
                    res.push((change[n as usize] + '0' as i32) as u8 as char);
                }
                flag = false;
            } else {
                res.push(c);
            }
            i += 1;
        }
        res

=======

        let mut result = String::new();
        let num = num.as_bytes();
        let mut i = 0;
        let mut changed = false;
        while i < num.len() {
            let digit = num[i] - b'0';
            if change[digit as usize] > digit {
                result.push((change[digit as usize] + b'0') as char);
                changed = true;
            } else if change[digit as usize] < digit && changed {
                break;
            } else {
                result.push((digit + b'0') as char);
            }
            i += 1;
        }
        if i < num.len() {
            result.push_str(&String::from_utf8(num[i..].to_vec()).unwrap());
        }
        result

=======

        let mut ans = num.chars().collect::<Vec<char>>();
        let mut i = 0;
        let mut j = 0;
        while j < ans.len() {
            if ans[j] as i32 - '0' as i32 < change[ans[j] as i32 - '0' as i32] {
                i = j;
                while j < ans.len() && ans[j] as i32 - '0' as i32 <= change[ans[j] as i32 - '0' as i32] {
                    ans[j] = (change[ans[j] as i32 - '0' as i32] + '0' as i32) as u8 as char;
                    j += 1;
                }
            } else {
                j += 1;
            }
        }
        ans.into_iter().collect()

=======

        let mut result = String::new();
        let mut i = 0;
        let mut is_changed = false;
        while i < num.len() {
            let c = num[i..i+1].parse::<i32>().unwrap();
            if c < change[c as usize] {
                result.push_str(&change[c as usize].to_string());
                is_changed = true;
            } else if c > change[c as usize] {
                if is_changed {
                    result.push_str(&num[i..]);
                    break;
                } else {
                    result.push_str(&c.to_string());
                }
            } else {
                result.push_str(&c.to_string());
            }
            i += 1;
        }
        result
