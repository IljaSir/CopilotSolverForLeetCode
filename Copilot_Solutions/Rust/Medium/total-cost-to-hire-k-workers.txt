Synthesizing 4/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut costs = costs;
        costs.sort();
        let mut dp = vec![vec![0; k as usize + 1]; costs.len() + 1];
        for i in 1..costs.len() + 1 {
            for j in 1..k as usize + 1 {
                dp[i][j] = dp[i - 1][j];
                if i as i32 >= candidates {
                    dp[i][j] = std::cmp::min(dp[i][j], dp[i - candidates as usize][j - 1] + costs[i - 1] as i64);
                }
            }
        }
        dp[costs.len()][k as usize]

=======

        let mut costs = costs;
        costs.sort();
        let mut dp = vec![vec![0; k as usize + 1]; candidates as usize + 1];
        for i in 0..costs.len() {
            for j in 0..k as usize + 1 {
                for l in 0..candidates as usize + 1 {
                    if j == 0 || l == 0 {
                        continue;
                    }
                    if i + 1 < l {
                        continue;
                    }
                    dp[l][j] = std::cmp::max(dp[l][j], dp[l - 1][j - 1] + costs[i] as i64);
                }
            }
        }
        dp[candidates as usize][k as usize] as i64
