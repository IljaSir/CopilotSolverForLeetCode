Synthesizing 10/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        if s.contains('@') {
            let mut chars = s.chars().collect::<Vec<_>>();
            for i in 1..chars.len() - 1 {
                if chars[i] != '@' {
                    chars[i] = '*';
                }
            }
            let mut res = String::new();
            for ch in chars {
                res.push(ch.to_ascii_lowercase());
            }
            res
        } else {
            let mut digits = s.chars()
                .filter(|ch| ch.is_ascii_digit())
                .collect::<Vec<_>>();
            let mut res = String::new();
            let len = digits.len();
            for i in 0..len {
                if i < len - 4 {
                    res.push('*');
                } else {
                    res.push(digits[i]);
                }
            }
            if len > 10 {
                let mut prefix = String::new();
                for i in 0..len - 10 {
                    prefix.push('+');
                }
                prefix.push('-');
                res = prefix + &res;
            }
            res.insert(0, '-');
            res.insert(0, '-');
            res.insert(0, '*');
            res.insert(0, '*');
            res.insert(0, '*');
            res
        }
    }
}

=======

        if s.contains('@') {
            let mut chars = s.to_lowercase().chars().collect::<Vec<char>>();
            let mut i = 0;
            while chars[i] != '@' {
                if i > 0 && i < chars.len() - 1 {
                    chars[i] = '*';
                }
                i += 1;
            }
            chars.into_iter().collect::<String>()
        } else {
            let mut chars = s.chars().filter(|c| c.is_digit(10)).collect::<Vec<char>>();
            let mut mask = String::from("***-***-");
            mask.push_str(&chars[chars.len() - 4..].iter().collect::<String>());
            if chars.len() > 10 {
                let mut cc = String::new();
                for i in 0..chars.len() - 10 {
                    cc.push('*');
                }
                cc.push('-');
                mask = cc + &mask;
            }
            mask
        }
    }
}

=======

        if s.contains('@') {
            let mut s = s.to_lowercase();
            let idx = s.find('@').unwrap();
            s.replace_range(idx-5..idx-1, "*****");
            s
        } else {
            let mut s = s.chars().filter(|c| c.is_digit(10)).collect::<String>();
            let l = s.len();
            let mask = format!("{}-{}-{}", "*".repeat(l-10), "*".repeat(3), s[l-4..].to_string());
            if l > 10 {
                format!("+{}-{}", "*".repeat(l-10), mask)
            } else {
                mask
            }
        }
    }
}

=======

        if s.contains('@') {
            let mut parts: Vec<&str> = s.split('@').collect();
            let name = parts[0].to_lowercase();
            let domain = parts[1].to_lowercase();
            let first = name.chars().next().unwrap();
            let last = name.chars().last().unwrap();
            return format!("{}*****{}@{}", first, last, domain);
        } else {
            let mut digits: Vec<char> = s.chars().filter(|c| c.is_digit(10)).collect();
            let mut country_code = digits.len() - 10;
            let mut local_number = digits.split_off(country_code);
            let mut masked = String::new();
            if country_code > 0 {
                masked.push('+');
                for _ in 0..country_code {
                    masked.push('*');
                }
                masked.push('-');
            }
            masked.push_str("***-***-");
            masked.push_str(&local_number.iter().collect::<String>());
            return masked;
        }

=======

        if s.contains('@') {
            let mut res = String::new();
            let mut i = 0;
            while i < s.len() {
                if s.as_bytes()[i] == '@' as u8 {
                    break;
                }
                if s.as_bytes()[i] >= 'A' as u8 && s.as_bytes()[i] <= 'Z' as u8 {
                    res.push((s.as_bytes()[i] - 'A' as u8 + 'a' as u8) as char);
                } else {
                    res.push(s.as_bytes()[i] as char);
                }
                i += 1;
            }
            res.push('@');
            i += 1;
            while i < s.len() {
                if s.as_bytes()[i] >= 'A' as u8 && s.as_bytes()[i] <= 'Z' as u8 {
                    res.push((s.as_bytes()[i] - 'A' as u8 + 'a' as u8) as char);
                } else {
                    res.push(s.as_bytes()[i] as char);
                }
                i += 1;
            }
            res
        } else {
            let mut res = String::new();
            let mut i = 0;
            while i < s.len() {
                if s.as_bytes()[i] >= '0' as u8 && s.as_bytes()[i] <= '9' as u8 {
                    res.push(s.as_bytes()[i] as char);
                }
                i += 1;
            }
            let len = res.len();
            if len == 10 {
                res.insert(0, '-');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '-');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '-');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '*');
            } else if len == 11 {
                res.insert(0, '-');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '*');
                res.insert(0, '-');
                res.insert(0, '*');
                res.insert(0, '*');

=======

        if s.contains('@') {
            let mut chars = s.chars();
            let c1 = chars.next().unwrap().to_ascii_lowercase();
            let mut c2 = String::new();
            for c in chars {
                if c == '@' {
                    break;
                }
                if c != '.' {
                    c2.push('*');
                }
            }
            let c3 = chars.collect::<String>();
            format!("{}{}@{}", c1, c2, c3.to_ascii_lowercase())
        } else {
            let mut chars = s.chars().filter(|c| c.is_digit(10));
            let mut code = String::new();
            let mut local = String::new();
            let mut count = 0;
            for c in chars {
                count += 1;
                if count <= 10 {
                    local.push(c);
                } else {
                    code.push(c);
                }
            }
            let mut result = String::new();
            if code.len() > 0 {
                result.push('+');
                for _ in 0..code.len() {
                    result.push('*');
                }
                result.push('-');
            }
            result.push_str("***-***-");
            result.push_str(&local[6..]);
            result
        }
    }
}

=======

        let mut chars = s.chars();
        if chars.any(|c| c.is_alphabetic()) {
            let mut name = chars.take_while(|c| *c != '@').collect::<String>();
            let domain = chars.collect::<String>();
            name = name.to_lowercase();
            name.replace_range(1..name.len() - 1, &"*".repeat(name.len() - 2));
            format!("{}@{}", name, domain.to_lowercase())
        } else {
            let mut digits = s.chars().filter(|c| c.is_digit(10)).collect::<String>();
            let mut code = digits.len() - 10;
            digits.replace_range(..code, &"+".repeat(code));
            digits.replace_range(digits.len() - 4.., "XXXX");
            digits
        }
    }
}
