Synthesizing 8/10 solutions

=======

        let mut deck = deck;
        deck.sort();
        let mut result = Vec::new();
        result.push(deck.pop().unwrap());
        while !deck.is_empty() {
            let last = result.pop().unwrap();
            result.insert(0, last);
            result.insert(0, deck.pop().unwrap());
        }
        result
    }
}

=======

        let mut deck = deck;
        deck.sort();
        let mut result = Vec::new();
        while deck.len() > 0 {
            let last = deck.pop().unwrap();
            if result.len() > 0 {
                let first = result.remove(0);
                result.push(first);
            }
            result.push(last);
        }
        result.reverse();
        result

=======

        let mut deck = deck;
        deck.sort();
        let mut res = Vec::new();
        while let Some(num) = deck.pop() {
            if let Some(last) = res.pop() {
                res.insert(0, last);
            }
            res.insert(0, num);
        }
        res
    }
}

=======

        let mut deck = deck;
        deck.sort();
        let mut res: Vec<i32> = Vec::new();
        let mut i = 0;
        while i < deck.len() {
            if i == 0 {
                res.push(deck[i]);
            } else {
                let temp = res.pop().unwrap();
                res.insert(0, temp);
                res.insert(0, deck[i]);
            }
            i += 1;
        }
        res
    }
}

=======

        let mut res = vec![];
        let mut deck = deck;
        deck.sort();
        while let Some(card) = deck.pop() {
            if let Some(last) = res.pop() {
                res.insert(0, last);
            }
            res.insert(0, card);
        }
        res
    }
}

=======

        
    }
}

=======

        let mut deck = deck;
        deck.sort();
        let mut ans = vec![];
        while !deck.is_empty() {
            let t = deck.pop().unwrap();
            ans.insert(0, t);
            if !ans.is_empty() {
                let t = ans.pop().unwrap();
                ans.insert(0, t);
            }
        }
        ans

=======

        let mut deck = deck;
        deck.sort();
        let mut res = vec![];
        while !deck.is_empty() {
            let last = deck.pop().unwrap();
            res.insert(0, last);
            if let Some(first) = res.pop() {
                res.insert(0, first);
            }
        }
        res
    }
}
