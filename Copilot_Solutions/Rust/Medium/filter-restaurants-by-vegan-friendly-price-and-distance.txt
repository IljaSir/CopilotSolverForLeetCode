Synthesizing 10/10 solutions

=======

        let mut r = restaurants;
        r.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        r.iter()
            .filter(|r| {
                if vegan_friendly == 1 {
                    r[2] == 1
                } else {
                    true
                }
            })
            .filter(|r| r[3] <= max_price)
            .filter(|r| r[4] <= max_distance)
            .map(|r| r[0])
            .collect()

=======

        let mut restaurants = restaurants.clone();
        if vegan_friendly == 1 {
            restaurants.retain(|r| r[2] == 1);
        }
        restaurants.retain(|r| r[3] <= max_price && r[4] <= max_distance);
        restaurants.sort_unstable_by(|a, b| b[1].cmp(&a[1]).then(b[0].cmp(&a[0])));
        restaurants.iter().map(|r| r[0]).collect()

=======

        let mut res = restaurants.into_iter().filter(|r| {
            (vegan_friendly == 0 || r[2] == 1) && r[3] <= max_price && r[4] <= max_distance
        }).collect::<Vec<Vec<i32>>>();
        res.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        res.into_iter().map(|r| r[0]).collect()

=======

        let mut res = restaurants
            .into_iter()
            .filter(|r| {
                if vegan_friendly == 1 {
                    r[2] == 1
                } else {
                    true
                }
            })
            .filter(|r| r[3] <= max_price)
            .filter(|r| r[4] <= max_distance)
            .collect::<Vec<_>>();
        res.sort_unstable_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        res.iter().map(|r| r[0]).collect()

=======

        let mut list = restaurants.into_iter()
            .filter(|r| r[2] >= vegan_friendly)
            .filter(|r| r[3] <= max_price)
            .filter(|r| r[4] <= max_distance)
            .collect::<Vec<Vec<i32>>>();
        list.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        list.into_iter().map(|v| v[0]).collect()

=======

        let mut res = restaurants.iter().filter(|x| {
            if vegan_friendly == 1 {
                x[2] == 1 && x[3] <= max_price && x[4] <= max_distance
            } else {
                x[3] <= max_price && x[4] <= max_distance
            }
        }).map(|x| x[0]).collect::<Vec<i32>>();
        res.sort_by(|a, b| {
            let mut r = restaurants.iter().find(|x| x[0] == *b).unwrap()[1].cmp(&restaurants.iter().find(|x| x[0] == *a).unwrap()[1]);
            if r == std::cmp::Ordering::Equal {
                r = b.cmp(a);
            }
            r
        });
        res

=======

        let mut res = restaurants.into_iter().filter(|r| {
            (r[2] == vegan_friendly || vegan_friendly == 0) && r[3] <= max_price && r[4] <= max_distance
        }).collect::<Vec<_>>();
        res.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        res.into_iter().map(|r| r[0]).collect()

=======

        let mut res = restaurants
            .iter()
            .filter(|&v| {
                if vegan_friendly == 1 {
                    v[2] == 1
                } else {
                    true
                }
            })
            .filter(|&v| v[3] <= max_price)
            .filter(|&v| v[4] <= max_distance)
            .collect::<Vec<_>>();
        res.sort_by_key(|&v| (v[1], v[0]));
        res.iter().map(|v| v[0]).rev().collect()

=======

        let mut res = restaurants.clone();
        res.retain(|r| {
            if vegan_friendly == 1 && r[2] == 0 {
                return false;
            }
            if max_price < r[3] {
                return false;
            }
            if max_distance < r[4] {
                return false;
            }
            return true;
        });
        res.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        res.iter().map(|r| r[0]).collect()

=======

        let mut res: Vec<Vec<i32>> = restaurants.into_iter().filter(|&r| {
            if vegan_friendly == 1 && r[2] == 0 {
                return false;
            }
            if r[3] > max_price || r[4] > max_distance {
                return false;
            }
            true
        }).collect();
        res.sort_by(|a, b| {
            if a[1] == b[1] {
                b[0].cmp(&a[0])
            } else {
                b[1].cmp(&a[1])
            }
        });
        res.into_iter().map(|r| r[0]).collect()
