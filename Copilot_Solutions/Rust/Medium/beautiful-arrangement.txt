Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut visited = vec![false; n as usize + 1];
        Self::helper(n as usize, 1, &mut visited)
    }
    fn helper(n: usize, pos: usize, visited: &mut Vec<bool>) -> i32 {
        if pos > n {
            return 1;
        }
        let mut res = 0;
        for i in 1..=n {
            if !visited[i] && (pos % i == 0 || i % pos == 0) {
                visited[i] = true;
                res += Self::helper(n, pos + 1, visited);
                visited[i] = false;
            }
        }
        res

=======
Suggestion 2

        let mut nums = (1..=n).collect::<Vec<i32>>();
        Self::dfs(&mut nums, 0)
    }
    fn dfs(nums: &mut Vec<i32>, k: usize) -> i32 {
        if k == nums.len() {
            return 1;
        }
        let mut res = 0;
        for i in k..nums.len() {
            if nums[i] % (k + 1) as i32 == 0 || (k + 1) as i32 % nums[i] == 0 {
                nums.swap(i, k);
                res += Self::dfs(nums, k + 1);
                nums.swap(i, k);
            }
        }
        res

=======
Suggestion 3

        let mut nums = (1..=n).collect::<Vec<i32>>();
        let mut count = 0;
        Solution::backtrack(&mut nums, 0, &mut count);
        count
    }
    
    pub fn backtrack(nums: &mut Vec<i32>, start: usize, count: &mut i32) {
        if start == nums.len() {
            *count += 1;
            return;
        }
        
        for i in start..nums.len() {
            if nums[i] % (start + 1) as i32 == 0 || (start + 1) as i32 % nums[i] == 0 {
                nums.swap(i, start);
                Solution::backtrack(nums, start + 1, count);
                nums.swap(i, start);
            }
        }

=======
Suggestion 4

        let n = n as usize;
        let mut used = vec![false; n];
        let mut ret = 0;
        Solution::dfs(&mut used, 0, n, &mut ret);
        ret
    }
    fn dfs(used: &mut Vec<bool>, pos: usize, n: usize, ret: &mut i32) {
        if pos == n {
            *ret += 1;
            return;
        }
        for i in 0..n {
            if !used[i] && (i + 1) % (pos + 1) == 0 || (pos + 1) % (i + 1) == 0 {
                used[i] = true;
                Solution::dfs(used, pos + 1, n, ret);
                used[i] = false;
            }
        }
    }
}

=======
Suggestion 5

        let mut count = 0;
        let mut visited = vec![false; n as usize + 1];
        Self::backtrack(1, &mut count, &mut visited, n);
        count
    }
    fn backtrack(index: i32, count: &mut i32, visited: &mut Vec<bool>, n: i32) {
        if index > n {
            *count += 1;
            return;
        }
        for i in 1..=n {
            if visited[i as usize] {
                continue;
            }
            if i % index == 0 || index % i == 0 {
                visited[i as usize] = true;
                Self::backtrack(index + 1, count, visited, n);
                visited[i as usize] = false;
            }
        }

=======
Suggestion 6

        let mut arr = vec![0; n as usize];
        for i in 0..n as usize {
            arr[i] = i + 1;
        }
        let mut res = 0;
        Solution::helper(&mut arr, 0, &mut res);
        res
    }
    
    fn helper(arr: &mut Vec<i32>, i: usize, res: &mut i32) {
        if i == arr.len() {
            *res += 1;
            return;
        }
        for j in i..arr.len() {
            if arr[j] % (i + 1) == 0 || (i + 1) % arr[j] == 0 {
                arr.swap(i, j);
                Solution::helper(arr, i + 1, res);
                arr.swap(i, j);
            }
        }

=======
Suggestion 7

        let n = n as usize;
        let mut used = vec![false; n];
        Self::count(&mut used, n, 0)
    }
    
    fn count(used: &mut Vec<bool>, n: usize, pos: usize) -> i32 {
        if pos == n {
            return 1;
        }
        let mut count = 0;
        for i in 0..n {
            if used[i] {
                continue;
            }
            if (i + 1) % (pos + 1) != 0 && (pos + 1) % (i + 1) != 0 {
                continue;
            }
            used[i] = true;
            count += Self::count(used, n, pos + 1);
            used[i] = false;
        }
        count

=======
Suggestion 8

        let mut v = vec![true; n as usize + 1];
        let mut count = 0;
        Self::backtrack(n, 1, &mut v, &mut count);
        count
    }
    fn backtrack(n: i32, pos: i32, v: &mut Vec<bool>, count: &mut i32) {
        if pos > n {
            *count += 1;
            return;
        }
        for i in 1..=n {
            if v[i as usize] && (pos % i == 0 || i % pos == 0) {
                v[i as usize] = false;
                Self::backtrack(n, pos + 1, v, count);
                v[i as usize] = true;
            }
        }

=======
Suggestion 9

        let mut nums = vec![0; n as usize];
        for i in 0..n {
            nums[i as usize] = i + 1;
        }
        Self::count(nums)
    }
    fn count(mut nums: Vec<i32>) -> i32 {
        if nums.len() == 0 {
            return 1;
        }
        let mut ret = 0;
        for i in 0..nums.len() {
            if nums[i] % nums.len() as i32 == 0 || nums.len() as i32 % nums[i] == 0 {
                nums.swap(i, nums.len() - 1);
                ret += Self::count(nums[..nums.len() - 1].to_vec());
                nums.swap(i, nums.len() - 1);
            }
        }
        ret

=======
Suggestion 10

        let mut nums = vec![];
        for i in 1..=n {
            nums.push(i as usize);
        }
        Self::count_arrangement_helper(&mut nums, 0)
    }
    fn count_arrangement_helper(nums: &mut Vec<usize>, i: usize) -> i32 {
        if i == nums.len() {
            return 1;
        }
        let mut count = 0;
        for j in i..nums.len() {
            if nums[j] % (i + 1) == 0 || (i + 1) % nums[j] == 0 {
                nums.swap(i, j);
                count += Self::count_arrangement_helper(nums, i + 1);
                nums.swap(i, j);
            }
        }
        count
