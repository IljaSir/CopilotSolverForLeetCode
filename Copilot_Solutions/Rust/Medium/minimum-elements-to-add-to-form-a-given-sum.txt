Synthesizing 10/10 solutions

=======

        let sum: i64 = nums.iter().map(|x| i64::from(*x)).sum();
        let goal: i64 = i64::from(goal);
        let limit: i64 = i64::from(limit);
        let diff = (goal - sum).abs();
        let (q, r) = (diff / limit, diff % limit);
        if r > 0 {
            q + 1
        } else {
            q
        }

=======

        let sum: i64 = nums.iter().map(|&x| x as i64).sum();
        ((sum - goal as i64).abs() + limit as i64 - 1) / limit as i64

=======

        let mut sum: i64 = 0;
        for i in 0..nums.len() {
            sum += nums[i] as i64;
        }
        let diff: i64 = (goal - sum).abs();
        let mut res: i32 = (diff / limit as i64) as i32;
        if diff % limit as i64 > 0 {
            res += 1;
        }
        return res;

=======

        let sum = nums.iter().sum::<i32>();
        let diff = (goal - sum).abs();
        (diff as f64 / limit as f64).ceil() as i32

=======

        let sum = nums.iter().sum::<i32>();
        let diff = (goal - sum).abs();
        diff / limit + if diff % limit > 0 { 1 } else { 0 }

=======

        let sum = nums.iter().sum::<i32>();
        let diff = (goal - sum).abs();
        (diff + limit - 1) / limit

=======

        let sum: i64 = nums.iter().map(|x| *x as i64).sum();
        let goal: i64 = goal as i64;
        let limit: i64 = limit as i64;
        let diff = (goal - sum).abs();
        let mut res = diff / limit;
        if diff % limit != 0 {
            res += 1;
        }
        res as i32

=======

        let sum = nums.iter().fold(0, |acc, x| acc + x);
        let diff = (goal - sum).abs();
        (diff + limit - 1) / limit

=======

        let sum: i64 = nums.iter().map(|x| *x as i64).sum();
        let diff = (goal as i64 - sum).abs();
        let mut res = diff / limit as i64;
        if diff % limit as i64 != 0 {
            res += 1;
        }
        res as i32

=======

        let sum: i64 = nums.into_iter().map(|x| x as i64).sum();
        let diff = (goal as i64) - sum;
        let mut res = diff.abs() / limit as i64;
        if diff.abs() % limit as i64 != 0 {
            res += 1;
        }
        res as i32
