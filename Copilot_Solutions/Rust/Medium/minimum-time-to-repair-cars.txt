Synthesizing 10/10 solutions

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = ranks[ranks.len() - 1] as i64 * cars as i64 * cars as i64;
        while l < r {
            let m = (l + r) / 2;
            let mut c = 0;
            for r in ranks.iter() {
                c += m / (*r as i64 * *r as i64);
            }
            if c >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut lo = 1;
        let mut hi = cars as i64;
        while lo < hi {
            let mid = (lo + hi) / 2;
            let mut total = 0;
            for &r in ranks.iter() {
                total += r as i64 * mid * mid;
                if total > cars as i64 {
                    break;
                }
            }
            if total > cars as i64 {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        lo * lo * ranks[0] as i64

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l < r {
            let m = (l + r) / 2;
            let mut cnt = 0;
            for &rank in ranks.iter() {
                cnt += m / (rank * rank) as i64;
                if cnt >= cars as i64 {
                    break;
                }
            }
            if cnt >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l < r {
            let m = l + (r - l) / 2;
            let mut cnt = 0;
            for rank in ranks.iter() {
                cnt += m / (*rank as i64);
                if cnt >= cars as i64 {
                    break;
                }
            }
            if cnt >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l < r {
            let mid = (l + r) / 2;
            let mut t = 0;
            for &r in &ranks {
                t += r as i64 * (mid / (r as i64 * r as i64));
            }
            if t >= cars as i64 {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l as i64

=======

        let mut ranks = ranks;
        ranks.sort_unstable();
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l < r {
            let m = (l + r) / 2;
            let mut cnt = 0;
            for &rank in &ranks {
                cnt += m / (rank * rank) as i32;
                if cnt >= cars {
                    break;
                }
            }
            if cnt >= cars {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l as i64

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = 1000000000;
        while l < r {
            let m = (l + r) / 2;
            let mut c = 0;
            for r in ranks.iter() {
                c += m / (*r as i64);
            }
            if c >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l < r {
            let m = (l + r) >> 1;
            let mut cnt = 0;
            for rank in ranks.iter() {
                cnt += *rank as i64 * m * m;
                if cnt >= cars as i64 {
                    break;
                }
            }
            if cnt >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l as i64

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut lo = 0;
        let mut hi = cars as i64;
        while lo + 1 < hi {
            let mid = (lo + hi) / 2;
            let mut cnt = 0;
            for &rank in &ranks {
                cnt += (rank as i64 * mid * mid) / 2;
            }
            if cnt >= cars as i64 {
                hi = mid;
            } else {
                lo = mid;
            }
        }
        hi * hi

=======

        let mut ranks = ranks;
        ranks.sort();
        let mut l = 0i64;
        let mut r = 1i64 << 32;
        while l < r {
            let m = l + (r - l) / 2;
            let mut cnt = 0i64;
            for &rank in &ranks {
                let mut k = 1i64;
                while cnt + k * k * rank as i64 <= m {
                    cnt += k * k * rank as i64;
                    k *= 2;
                }
            }
            if cnt >= cars as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l
