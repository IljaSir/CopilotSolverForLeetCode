Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut count1 = 0;
        let mut count2 = 0;
        let mut candidate1 = 0;
        let mut candidate2 = 1;
        for num in nums {
            if candidate1 == num {
                count1 += 1;
            } else if candidate2 == num {
                count2 += 1;
            } else if count1 == 0 {
                candidate1 = num;
                count1 = 1;
            } else if count2 == 0 {
                candidate2 = num;
                count2 = 1;
            } else {
                count1 -= 1;
                count2 -= 1;
            }
        }
        count1 = 0;
        count2 = 0;
        for num in nums {
            if candidate1 == num {
                count1 += 1;
            } else if candidate2 == num {
                count2 += 1;
            }
        }
        let mut res = Vec::new();
        if count1 > nums.len() / 3 {
            res.push(candidate1);
        }
        if count2 > nums.len() / 3 {
            res.push(candidate2);
        }
        res

=======
Suggestion 2

        let mut count1 = 0;
        let mut count2 = 0;
        let mut candidate1 = 0;
        let mut candidate2 = 0;
        for i in 0..nums.len() {
            if candidate1 == nums[i] {
                count1 += 1;
            } else if candidate2 == nums[i] {
                count2 += 1;
            } else if count1 == 0 {
                candidate1 = nums[i];
                count1 += 1;
            } else if count2 == 0 {
                candidate2 = nums[i];
                count2 += 1;
            } else {
                count1 -= 1;
                count2 -= 1;
            }
        }
        let mut result = Vec::new();
        if count1 > 0 {
            let mut c = 0;
            for i in 0..nums.len() {
                if nums[i] == candidate1 {
                    c += 1;
                }
            }
            if c > nums.len() / 3 {
                result.push(candidate1);
            }
        }
        if count2 > 0 {
            let mut c = 0;
            for i in 0..nums.len() {
                if nums[i] == candidate2 {
                    c += 1;
                }
            }
            if c > nums.len() / 3 {
                result.push(candidate2);
            }
        }
        result
    }
}

=======
Suggestion 3

        let mut a = (0, 0);
        let mut b = (0, 0);
        for n in nums {
            if a.0 == n {
                a.1 += 1;
            } else if b.0 == n {
                b.1 += 1;
            } else if a.1 == 0 {
                a = (n, 1);
            } else if b.1 == 0 {
                b = (n, 1);
            } else {
                a.1 -= 1;
                b.1 -= 1;
            }
        }
        let mut res = vec![];
        let mut count_a = 0;
        let mut count_b = 0;
        for n in nums {
            if n == a.0 {
                count_a += 1;
            } else if n == b.0 {
                count_b += 1;
            }
        }
        if count_a > nums.len() / 3 {
            res.push(a.0);
        }
        if count_b > nums.len() / 3 {
            res.push(b.0);
        }
        res

=======
Suggestion 4

        let mut count1 = 0;
        let mut count2 = 0;
        let mut candidate1 = 0;
        let mut candidate2 = 1;
        for i in nums {
            if candidate1 == i {
                count1 += 1;
            } else if candidate2 == i {
                count2 += 1;
            } else if count1 == 0 {
                candidate1 = i;
                count1 = 1;
            } else if count2 == 0 {
                candidate2 = i;
                count2 = 1;
            } else {
                count1 -= 1;
                count2 -= 1;
            }
        }
        let mut result = vec![];
        let mut count = 0;
        for i in &nums {
            if *i == candidate1 {
                count += 1;
            }
        }
        if count > nums.len() / 3 {
            result.push(candidate1);
        }
        count = 0;
        for i in &nums {
            if *i == candidate2 {
                count += 1;
            }
        }
        if count > nums.len() / 3 {
            result.push(candidate2);
        }
        result

=======
Suggestion 5

        let mut result: Vec<i32> = Vec::new();
        let mut count1 = 0;
        let mut count2 = 0;
        let mut candidate1 = 0;
        let mut candidate2 = 0;
        for n in nums {
            if n == candidate1 {
                count1 += 1;
            } else if n == candidate2 {
                count2 += 1;
            } else if count1 == 0 {
                candidate1 = n;
                count1 = 1;
            } else if count2 == 0 {
                candidate2 = n;
                count2 = 1;
            } else {
                count1 -= 1;
                count2 -= 1;
            }
        }
        count1 = 0;
        count2 = 0;
        for n in &nums {
            if *n == candidate1 {
                count1 += 1;
            } else if *n == candidate2 {
                count2 += 1;
            }
        }
        if count1 > nums.len() / 3 {
            result.push(candidate1);
        }
        if count2 > nums.len() / 3 {
            result.push(candidate2);
        }
        result
    }
}

=======
Suggestion 6

        let mut cnt1 = 0;
        let mut cnt2 = 0;
        let mut v1 = 0;
        let mut v2 = 0;
        for n in nums {
            if n == v1 {
                cnt1 += 1;
            } else if n == v2 {
                cnt2 += 1;
            } else if cnt1 == 0 {
                v1 = n;
                cnt1 = 1;
            } else if cnt2 == 0 {
                v2 = n;
                cnt2 = 1;
            } else {
                cnt1 -= 1;
                cnt2 -= 1;
            }
        }
        let mut ans = Vec::new();
        let mut cnt1 = 0;
        let mut cnt2 = 0;
        for n in nums {
            if n == v1 {
                cnt1 += 1;
            } else if n == v2 {
                cnt2 += 1;
            }
        }
        if cnt1 > nums.len() / 3 {
            ans.push(v1);
        }
        if cnt2 > nums.len() / 3 {
            ans.push(v2);
        }
        ans

=======
Suggestion 7

        let mut map = std::collections::HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut result = Vec::new();
        for (k, v) in map {
            if v > nums.len() / 3 {
                result.push(k);
            }
        }
        result
    }
}

=======
Suggestion 8

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            if j - i > nums.len() / 3 {
                res.push(nums[i]);
            }
            i = j;
        }
        res

=======
Suggestion 9

        let mut res = Vec::new();
        let n = nums.len();
        if n == 1 {
            res.push(nums[0]);
            return res;
        }
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < n {
            let mut j = i + 1;
            while j < n && nums[j] == nums[i] {
                j += 1;
            }
            if j - i > n / 3 {
                res.push(nums[i]);
            }
            i = j;
        }
        res

=======
Suggestion 10

        use std::collections::HashMap;
        let mut map = HashMap::new();
        let mut ret = Vec::new();
        for num in nums {
            let entry = map.entry(num).or_insert(0);
            *entry += 1;
        }
        let n = nums.len();
        for (k, v) in map {
            if v > n/3 {
                ret.push(k);
            }
        }
        ret
