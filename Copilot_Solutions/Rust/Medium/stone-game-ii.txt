Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let n = piles.len();
        let mut pre_sum = vec![0; n + 1];
        for i in 0..n {
            pre_sum[i + 1] = pre_sum[i] + piles[i];
        }
        let mut dp = vec![vec![-1; n]; n];
        Self::dfs(&mut dp, 0, 1, &pre_sum)
    }
    fn dfs(dp: &mut Vec<Vec<i32>>, i: usize, m: usize, pre_sum: &[i32]) -> i32 {
        let n = pre_sum.len() - 1;
        if i == n {
            return 0;
        }
        if dp[i][m] != -1 {
            return dp[i][m];
        }
        let mut res = 0;
        for x in 1..=2 * m {
            if i + x > n {
                break;
            }
            let sum = pre_sum[n] - pre_sum[i];
            let tmp = sum - Self::dfs(dp, i + x, m.max(x), pre_sum);
            res = res.max(tmp);
        }
        dp[i][m] = res;
        res

=======

        let n = piles.len();
        let mut dp = vec![vec![0; n]; n];
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + piles[i];
        }
        for i in (0..n).rev() {
            for m in 0..n {
                let mut x = 0;
                for j in (1..=2 * m).min(n - i) {
                    x = x.max(sum[i + j] - sum[i] - dp[i + j][j.max(m)]);
                }
                dp[i][m] = x;
            }
        }
        dp[0][1]

=======

        let mut dp = vec![vec![-1; piles.len()]; piles.len()];
        let mut sum = vec![0; piles.len()];
        sum[piles.len() - 1] = piles[piles.len() - 1];
        for i in (0..piles.len() - 1).rev() {
            sum[i] = sum[i + 1] + piles[i];
        }
        Self::dfs(0, 1, &piles, &sum, &mut dp)
    }
    fn dfs(i: usize, m: usize, piles: &Vec<i32>, sum: &Vec<i32>, dp: &mut Vec<Vec<i32>>) -> i32 {
        if i >= piles.len() {
            return 0;
        }
        if 2 * m >= piles.len() - i {
            return sum[i];
        }
        if dp[i][m] != -1 {
            return dp[i][m];
        }
        let mut res = 0;
        for x in 1..=2 * m {
            res = res.max(sum[i] - Self::dfs(i + x, m.max(x), piles, sum, dp));
        }
        dp[i][m] = res;
        res

=======

        let mut dp = vec![vec![-1; 101]; 101];
        let mut sum = vec![0; 101];
        for i in (0..piles.len()).rev() {
            sum[i] = sum[i + 1] + piles[i];
        }
        Self::dfs(&piles, &mut dp, &sum, 0, 1)
    }
    fn dfs(piles: &Vec<i32>, dp: &mut Vec<Vec<i32>>, sum: &Vec<i32>, i: usize, m: usize) -> i32 {
        if i == piles.len() {
            return 0;
        }
        if dp[i][m] != -1 {
            return dp[i][m];
        }
        let mut res = 0;
        for x in 1..=2 * m {
            if i + x > piles.len() {
                break;
            }
            res = res.max(sum[i] - Self::dfs(piles, dp, sum, i + x, x.max(m)));
        }
        dp[i][m] = res;
        res

=======

        
    }
}

=======

        let mut dp = vec![vec![-1; piles.len()]; piles.len()];
        Self::solve(0, 1, &piles, &mut dp)
    }
    fn solve(i: usize, m: usize, piles: &Vec<i32>, dp: &mut Vec<Vec<i32>>) -> i32 {
        if i >= piles.len() {
            return 0;
        }
        if dp[m][i] != -1 {
            return dp[m][i];
        }
        let mut sum = 0;
        let mut res = 0;
        for x in 1..=2 * m {
            if i + x <= piles.len() {
                sum += piles[i + x - 1];
                res = res.max(sum - Self::solve(i + x, m.max(x), piles, dp));
            }
        }
        dp[m][i] = res;
        res
