Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut res = Vec::new();
        let mut path = Vec::new();
        Self::dfs(k, n, 1, &mut path, &mut res);
        res
    }

    fn dfs(k: i32, n: i32, start: i32, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if k == 0 && n == 0 {
            res.push(path.clone());
            return;
        }
        for i in start..=9 {
            if i > n {
                break;
            }
            path.push(i);
            Self::dfs(k - 1, n - i, i + 1, path, res);
            path.pop();
        }

=======
Suggestion 2

        let mut res = vec![];
        let mut path = vec![];
        Self::dfs(1, k, n, &mut path, &mut res);
        res
    }

    fn dfs(start: i32, k: i32, n: i32, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if n == 0 && path.len() == k as usize {
            res.push(path.clone());
            return;
        }
        if n < 0 || path.len() == k as usize {
            return;
        }
        for i in start..=9 {
            path.push(i);
            Self::dfs(i + 1, k, n - i, path, res);
            path.pop();
        }
    }
}

=======
Suggestion 3

        let mut res = Vec::new();
        let mut path = Vec::new();
        Self::dfs(1, k, n, &mut path, &mut res);
        res
    }

    fn dfs(start: i32, k: i32, n: i32, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if k == 0 {
            if n == 0 {
                res.push(path.clone());
            }
            return;
        }
        for i in start..=9 {
            if i > n {
                break;
            }
            path.push(i);
            Self::dfs(i + 1, k - 1, n - i, path, res);
            path.pop();
        }
    }
}

=======
Suggestion 4

        let mut res = vec![];
        let mut path = vec![];
        Self::dfs(k, n, 1, &mut res, &mut path);
        res
    }
    fn dfs(k: i32, n: i32, start: i32, res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>) {
        if path.len() == k as usize && n == 0 {
            res.push(path.clone());
            return;
        }
        for i in start..10 {
            if i > n {
                break;
            }
            path.push(i);
            Self::dfs(k, n - i, i + 1, res, path);
            path.pop();
        }
    }
}

=======
Suggestion 5

        let mut res = Vec::new();
        let mut tmp = Vec::new();
        Solution::backtrack(k, n, 1, &mut tmp, &mut res);
        res
    }
    fn backtrack(k: i32, n: i32, start: i32, tmp: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if k == 0 {
            if n == 0 {
                res.push(tmp.clone());
            }
            return;
        }
        for i in start..10 {
            tmp.push(i);
            Solution::backtrack(k - 1, n - i, i + 1, tmp, res);
            tmp.pop();
        }
    }
}

=======
Suggestion 6

        let mut res = Vec::new();
        let mut path = Vec::new();
        Self::backtrack(&mut res, &mut path, n, k, 1);
        res
    }

    fn backtrack(res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, n: i32, k: i32, start: i32) {
        if n == 0 && k == 0 {
            res.push(path.clone());
            return;
        }
        if n < 0 || k < 0 {
            return;
        }
        for i in start..10 {
            path.push(i);
            Self::backtrack(res, path, n - i, k - 1, i + 1);
            path.pop();
        }
    }
}

=======
Suggestion 7

        let mut res = vec![];
        let mut temp = vec![];
        Self::dfs(1, k, n, &mut res, &mut temp);
        res
    }
    fn dfs(start: i32, k: i32, n: i32, res: &mut Vec<Vec<i32>>, temp: &mut Vec<i32>) {
        if k == 0 && n == 0 {
            res.push(temp.clone());
            return;
        }
        if k < 0 || n < 0 {
            return;
        }
        for i in start..10 {
            temp.push(i);
            Self::dfs(i + 1, k - 1, n - i, res, temp);
            temp.pop();
        }
    }
}

=======
Suggestion 8

        let mut result = Vec::new();
        Solution::find_combination(k, n, 1, &mut Vec::new(), &mut result);
        result
    }

    fn find_combination(k: i32, n: i32, start: i32, path: &mut Vec<i32>, result: &mut Vec<Vec<i32>>) {
        if n < 0 {
            return;
        }

        if k == 0 {
            if n == 0 {
                result.push(path.clone());
            }
            return;
        }

        for i in start..=9 {
            path.push(i);
            Solution::find_combination(k - 1, n - i, i + 1, path, result);
            path.pop();
        }
    }
}

=======
Suggestion 9

        let mut res = vec![];
        let mut path = vec![];
        let mut sum = 0;
        Self::dfs(1, k, n, &mut path, &mut res, &mut sum);
        res
    }
    fn dfs(start: i32, k: i32, n: i32, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>, sum: &mut i32) {
        if path.len() == k as usize && *sum == n {
            res.push(path.clone());
            return;
        }
        for i in start..=9 {
            if *sum > n {
                return;
            }
            path.push(i);
            *sum += i;
            Self::dfs(i + 1, k, n, path, res, sum);
            path.pop();
            *sum -= i;
        }
    }
}

=======
Suggestion 10

        let mut res = Vec::new();
        let mut path = Vec::new();
        let mut used = vec![false; 10];
        Self::backtrack(&mut res, &mut path, &mut used, k, n, 1);
        res
    }

    fn backtrack(res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, used: &mut Vec<bool>, k: i32, n: i32, start: i32) {
        if k == 0 {
            if n == 0 {
                res.push(path.clone());
            }
            return;
        }
        if n < 0 {
            return;
        }
        for i in start..=9 {
            if used[i as usize] {
                continue;
            }
            used[i as usize] = true;
            path.push(i);
            Self::backtrack(res, path, used, k - 1, n - i, i + 1);
            path.pop();
            used[i as usize] = false;
        }
    }
}
