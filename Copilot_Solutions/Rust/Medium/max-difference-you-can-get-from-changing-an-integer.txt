Synthesizing 10/10 solutions

=======

        let mut nums = Vec::new();
        let mut n = num;
        while n > 0 {
            nums.push(n % 10);
            n /= 10;
        }
        let mut a = 0;
        let mut b = 0;
        let mut flag = false;
        for i in (0..nums.len()).rev() {
            if nums[i] == 9 {
                a = a * 10 + 9;
                b = b * 10 + 9;
            } else {
                a = a * 10 + 9;
                b = b * 10 + nums[i];
                flag = true;
            }
        }
        if !flag {
            a = a / 10;
        }
        let mut a = a;
        let mut b = b;
        flag = false;
        for i in (0..nums.len()).rev() {
            if nums[i] == 1 && !flag {
                a = a * 10 + 1;
                b = b * 10 + 1;
            } else {
                a = a * 10 + nums[i];
                b = b * 10 + 1;
                flag = true;
            }
        }
        if !flag {
            a = a / 10;
        }
        a - b

=======

        let mut min = num;
        let mut max = num;
        for i in 0..10 {
            for j in 0..10 {
                let mut n = num;
                let mut m = num;
                while n > 0 {
                    if n % 10 == i {
                        m = m * 10 + j;
                    } else {
                        m = m * 10 + n % 10;
                    }
                    n /= 10;
                }
                if m % 10 == 0 {
                    continue;
                }
                while m > 0 {
                    if m % 10 == j {
                        min = min * 10 + i;
                    } else {
                        min = min * 10 + m % 10;
                    }
                    m /= 10;
                }
                while min > 0 {
                    if min % 10 == i {
                        min = min / 10;
                    } else {
                        break;
                    }
                }
                max = max.max(m);
            }
        }
        max - min

=======

        let mut num_str = num.to_string();
        let mut max_str = num_str.clone();
        let mut min_str = num_str.clone();
        let mut max_num = 0;
        let mut min_num = 0;
        let mut max_digit = 0;
        let mut min_digit = 0;
        let mut max_digit_count = 0;
        let mut min_digit_count = 0;
        let mut max_digit_index = 0;
        let mut min_digit_index = 0;
        for (i, c) in num_str.chars().enumerate() {
            if c.to_digit(10).unwrap() > max_digit {
                max_digit = c.to_digit(10).unwrap();
                max_digit_index = i;
                max_digit_count = 1;
            } else if c.to_digit(10).unwrap() == max_digit {
                max_digit_count += 1;
            }
            if c.to_digit(10).unwrap() < min_digit {
                min_digit = c.to_digit(10).unwrap();
                min_digit_index = i;
                min_digit_count = 1;
            } else if c.to_digit(10).unwrap() == min_digit {
                min_digit_count += 1;
            }
        }
        if max_digit != 9 {
            for (i, c) in max_str.chars_mut().enumerate() {
                if c.to_digit(10).unwrap() == max_digit {
                    c = '9';
                    if i == max_digit_index && max_digit_count == 1 {
                        break;
                    }
                }
            }
        }
        if min_digit != 1 {
            for (i, c) in min_str.chars_mut().enumerate() {
                if c.to_digit(10).unwrap() == min_digit {
                    c = '1';
                    if i == min_digit_index && min_digit_count == 1 {
                        break;
                    }
                }
            }
        }
        max_num = max_str.parse().unwrap();
        min_num = min_str.parse().unwrap();
        max_num - min_num

=======

        let mut a = 0;
        let mut b = 0;
        let mut x = 0;
        let mut y = 0;
        let mut num = num;
        let mut i = 0;
        while num > 0 {
            let t = num % 10;
            if i == 0 {
                x = t;
                y = t;
            } else {
                if x > t {
                    x = t;
                }
                if y < t {
                    y = t;
                }
            }
            a = a * 10 + y;
            b = b * 10 + x;
            num /= 10;
            i += 1;
        }
        a - b

=======

        let num_str = num.to_string();
        let mut max = num_str.clone();
        let mut min = num_str.clone();
        let mut first = true;
        for c in num_str.chars() {
            if c == '9' {
                continue;
            }
            if first {
                max = max.replace(&c.to_string(), "9");
                first = false;
            }
            if c == '1' || c == '0' {
                continue;
            }
            min = min.replace(&c.to_string(), "1");
        }
        max.parse::<i32>().unwrap() - min.parse::<i32>().unwrap()

=======

        let mut a = 0;
        let mut b = 0;
        let mut first = true;
        let mut max = 0;
        let mut min = 10;
        let mut num = num;
        while num > 0 {
            let d = num % 10;
            if first {
                if d != 9 {
                    max = d;
                }
                if d != 1 {
                    min = d;
                }
            } else {
                if d == max {
                    a = a * 10 + 9;
                } else {
                    a = a * 10 + d;
                }
                if d == min {
                    b = b * 10 + 1;
                } else {
                    b = b * 10 + d;
                }
            }
            num /= 10;
        }
        if first {
            a = 9;
            b = 1;
        }
        a - b
    }
}

=======

        let s = num.to_string();
        let mut a = s.clone();
        let mut b = s.clone();
        let mut a_max = 0;
        let mut b_min = 9;
        for i in 0..a.len() {
            let c = a.chars().nth(i).unwrap();
            if c == '9' {
                a_max = 9;
                continue;
            }
            a_max = a_max.max(c.to_digit(10).unwrap() as i32);
            a = a.replace(c, "9");
        }
        for i in 0..b.len() {
            let c = b.chars().nth(i).unwrap();
            if c == '1' {
                b_min = 1;
                continue;
            }
            if c == '0' {
                continue;
            }
            b_min = b_min.min(c.to_digit(10).unwrap() as i32);
            b = b.replace(c, "1");
        }
        if b_min == 9 {
            b_min = 1;
        }
        a.parse::<i32>().unwrap() - b.parse::<i32>().unwrap()

=======

        let mut s = num.to_string();
        let mut a = s.clone();
        let mut b = s.clone();
        if s.contains('0') {
            s = s.replace('0', "1");
            a = a.replace('0', "1");
            b = b.replace('0', "1");
        } else {
            s = s.replace(s.chars().nth(0).unwrap(), "1");
            a = a.replace(a.chars().nth(0).unwrap(), "0");
            b = b.replace(b.chars().nth(0).unwrap(), "1");
        }
        s.parse::<i32>().unwrap() - a.parse::<i32>().unwrap()

=======

        let mut min = num;
        let mut max = num;
        let mut num = num;
        let mut i = 1;
        while num > 0 {
            let digit = num % 10;
            if digit == 9 {
                min -= 9 * i;
            } else {
                min += 9 * i;
            }
            if digit == 1 {
                max -= 1 * i;
            } else if digit > 1 {
                max += (1 - digit) * i;
            }
            i *= 10;
            num /= 10;
        }
        max - min

=======

        let mut max = 0;
        let mut min = 0;
        let mut first = true;
        let mut max_flag = false;
        let mut min_flag = false;
        let mut max_count = 0;
        let mut min_count = 0;
        let mut num = num;
        while num > 0 {
            let mut tmp = num % 10;
            if first {
                if tmp == 9 {
                    tmp = 1;
                } else {
                    tmp = 9;
                    max_flag = true;
                }
                if tmp == 0 {
                    tmp = 1;
                    min_flag = true;
                } else {
                    tmp = 0;
                }
                first = false;
            } else {
                if max_flag {
                    tmp = 9;
                    max_count += 1;
                } else {
                    tmp = 1;
                    max_count += 1;
                }
                if min_flag {
                    tmp = 0;
                    min_count += 1;
                } else {
                    tmp = 1;
                    min_count += 1;
                }
            }
            max = max * 10 + tmp;
            min = min * 10 + tmp;
            num = num / 10;
        }
        let mut max_count = max_count;
        while max_count > 0 {
            max = max / 10;
            max_count -= 1;
        }
        let mut min_count = min_count;
        while min_count > 0 {
            min = min / 10;
            min_count -= 1;
        }
        max - min
