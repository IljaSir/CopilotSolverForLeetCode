Synthesizing 9/10 solutions

=======

        let n = grid.len();
        let mut v = Vec::new();
        for i in 0..n {
            let mut count = 0;
            for j in (0..n).rev() {
                if grid[i][j] == 1 {
                    break;
                }
                count += 1;
            }
            v.push(count);
        }
        let mut ans = 0;
        for i in 0..n {
            if v[i] >= n - i - 1 {
                continue;
            }
            let mut j = i + 1;
            while j < n && v[j] < n - i - 1 {
                j += 1;
            }
            if j == n {
                return -1;
            }
            while j > i {
                v.swap(j, j - 1);
                ans += 1;
                j -= 1;
            }
        }
        ans as i32

=======

        let mut grid = grid;
        let mut res = 0;
        for i in 0..grid.len() {
            let mut found = false;
            for j in i..grid.len() {
                if grid[j][i] == 1 {
                    found = true;
                    for k in (i..j).rev() {
                        grid.swap(k, k + 1);
                        res += 1;
                    }
                    break;
                }
            }
            if !found {
                return -1;
            }
        }
        res as i32
    }
}

=======

        let n = grid.len();
        let mut a: Vec<i32> = vec![0; n];
        for i in 0..n {
            let mut c = 0;
            for j in (0..n).rev() {
                if grid[i][j] == 0 {
                    c += 1;
                } else {
                    break;
                }
            }
            a[i] = c;
        }
        let mut ans = 0;
        for i in 0..n {
            if a[i] >= n - 1 - i {
                continue;
            }
            let mut j = i + 1;
            while j < n && a[j] < n - 1 - i {
                j += 1;
            }
            if j == n {
                return -1;
            }
            ans += j - i;
            while j > i {
                a.swap(j, j - 1);
                j -= 1;
            }
        }
        ans as i32

=======

        let mut count = 0;
        let mut grid = grid;
        let n = grid.len();
        for i in 0..n {
            let mut j = i;
            while j < n && grid[j][i] == 0 {
                j += 1;
            }
            if j == n {
                return -1;
            }
            for k in (i+1..j).rev() {
                grid.swap(k, k-1);
                count += 1;
            }
        }
        count

=======

        let mut arr = vec![];
        let n = grid.len();
        for i in 0..n {
            let mut j = n - 1;
            while j > 0 && grid[i][j] == 0 {
                j -= 1;
            }
            arr.push(j);
        }
        // println!("{:?}", arr);
        let mut ans = 0;
        for i in 0..n - 1 {
            let mut j = i;
            while j < n && arr[j] <= i {
                j += 1;
            }
            if j == n {
                return -1;
            }
            while j > i {
                arr.swap(j, j - 1);
                ans += 1;
                j -= 1;
            }
        }
        ans as i32

=======

        let mut arr = vec![];
        let n = grid.len();
        for i in 0..n {
            let mut j = n - 1;
            while j > 0 && grid[i][j] == 0 {
                j -= 1;
            }
            arr.push(j);
        }
        // println!("{:?}", arr);
        let mut ans = 0;
        for i in 0..n - 1 {
            let mut j = i;
            while j < n && arr[j] <= i {
                j += 1;
            }
            if j == n {
                return -1;
            }
            while j > i {
                arr.swap(j, j - 1);
                ans += 1;
                j -= 1;
            }
        }
        ans as i32
    }
}

=======

        let mut zeros = vec![0; grid.len()];
        for (i, row) in grid.iter().enumerate() {
            let mut z = 0;
            for &n in row.iter().rev() {
                if n == 0 {
                    z += 1;
                } else {
                    break;
            
            =
            zeros[i] = z;
        }
        let mut ans = 0;
        for i in 0..grid.len() {
            let mut j = i;
            while j < grid.len() && zeros[j] < grid.len() - i - 1 {
                j += 1;
            }
            if j == grid.len() {
                return -1;
            }
            ans += j - i;
            zeros.remove(j);
            zeros.insert(i, 0);
        }
        ans as i32

=======

        let n = grid.len();
        let mut vec = vec![0; n];
        for (i, row) in grid.iter().enumerate() {
            let mut cnt = 0;
            for j in (0..n).rev() {
                if row[j] == 0 {
                    cnt += 1;
                } else {
                    break;
                }
            }
            vec[i] = cnt;
        }
        let mut ans = 0;
        for i in 0..n {
            let mut j = i;
            while j < n && vec[j] < n - i - 1 {
                j += 1;
            }
            if j == n {
                return -1;
            }
            ans += j - i;
            for k in (i + 1..=j).rev() {
                vec.swap(k, k - 1);
            }
        }
        ans as i32======

        let n = grid.len();
        let mut grid = grid;
        let mut zeros = vec![0; n];
        for i in 0..n {
            let mut j = n - 1;
            while j >= 0 && grid[i][j] == 0 {
                j -= 1;
            }
            zeros[i] = j;
        }
        let mut ans = 0;
        for i in 0..n {
            let mut j = i;
            while j < n && zeros[j] < i {
                j += 1;
            }
            if j == n {
                return -1;
            }
            ans += j - i;
            while j > i {
                zeros.swap(j, j - 1);
                j -= 1;
            }
        }
        ans as i32
    }
}

=======

        let n = grid.len();
        let mut vec = vec![0; n];
        for (i, row) in grid.iter().enumerate() {
            let mut cnt = 0;
            for j in (0..n).rev() {
                if row[j] == 0 {
                    cnt += 1;
                } else {
                    break;
                }
            }
            vec[i] = cnt;
        }
        let mut ans = 0;
        for i in 0..n {
            let mut j = i;
            while j < n && vec[j] < n - i - 1 {
                j += 1;
            }
            if j == n {
                return -1;
            }
            ans += j - i;
            for k in (i + 1..=j).rev() {
                vec.swap(k, k - 1);
            }
        }
        ans as i32

=======

        
    }
}
