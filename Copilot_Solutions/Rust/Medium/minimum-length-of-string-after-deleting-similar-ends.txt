Synthesizing 10/10 solutions

=======

        let s: Vec<char> = s.chars().collect();
        let mut left = 0;
        let mut right = s.len() - 1;
        while left < right && s[left] == s[right] {
            let c = s[left];
            while left <= right && s[left] == c {
                left += 1;
            }
            while left <= right && s[right] == c {
                right -= 1;
            }
        }
        (right - left + 1) as i32
    }
}

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j && s[i] == s[j] {
            let c = s[i];
            while i <= j && s[i] == c {
                i += 1;
            }
            while i <= j && s[j] == c {
                j -= 1;
            }
        }
        (j - i + 1) as i32

=======

        let mut s = s.into_bytes();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j && s[i] == s[j] {
            let c = s[i];
            while i < s.len() && s[i] == c {
                i += 1;
            }
            while j > 0 && s[j] == c {
                j -= 1;
            }
        }
        (j - i + 1) as i32

=======

        let mut s: Vec<char> = s.chars().collect();
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            if s[i] != s[j] {
                break;
            }
            let c = s[i];
            while i < s.len() && s[i] == c {
                i += 1;
            }
            while j > 0 && s[j] == c {
                j -= 1;
            }
        }
        (j as i32 - i as i32 + 1).max(0)

=======

        let mut s = s.as_bytes();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if s[l] != s[r] {
                break;
            }
            let c = s[l];
            while l <= r && s[l] == c {
                l += 1;
            }
            while l <= r && s[r] == c {
                r -= 1;
            }
        }
        (r - l + 1) as i32

=======

        let mut s = s.as_bytes();
        let mut l = 0;
        let mut r = s.len() - 1;
        while l < r {
            if s[l] != s[r] {
                break;
            }
            let c = s[l];
            while l < s.len() && s[l] == c {
                l += 1;
            }
            while r >= 0 && s[r] == c {
                r -= 1;
            }
        }
        (r - l + 1) as i32
    }
}

=======

        let mut s = s.into_bytes();
        let mut left = 0;
        let mut right = s.len() - 1;
        while left < right && s[left] == s[right] {
            let c = s[left];
            while left <= right && s[left] == c {
                left += 1;
            }
            while left <= right && s[right] == c {
                right -= 1;
            }
        }
        (right - left + 1) as i32
    }
}

=======

        let mut l = 0;
        let mut r = s.len() - 1;
        let mut s = s.as_bytes();
        while l < r {
            if s[l] != s[r] {
                break;
            }
            let c = s[l];
            while l <= r && s[l] == c {
                l += 1;
            }
            while l <= r && s[r] == c {
                r -= 1;
            }
        }
        (r - l + 1) as i32

=======

        let mut s = s.as_bytes();
        let mut l = 0;
        let mut r = s.len();
        while l < r {
            if s[l] != s[r-1] {
                break;
            }
            let c = s[l];
            while l < r && s[l] == c {
                l += 1;
            }
            while l < r && s[r-1] == c {
                r -= 1;
            }
        }
        (r - l) as i32

=======

        
    }
}
