Synthesizing 9/10 solutions

=======

        let mut cnt = [0; 1000];
        for &x in &answers {
            cnt[x as usize] += 1;
        }
        let mut ans = 0;
        for i in 0..1000 {
            ans += (cnt[i] + i) / (i + 1) * (i + 1);
        }
        ans

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for a in answers {
            *map.entry(a).or_insert(0) += 1;
        }
        for (k, v) in map {
            res += (v + k) / (k + 1) * (k + 1);
        }
        res

=======

        let mut count = std::collections::HashMap::new();
        for &a in answers.iter() {
            *count.entry(a).or_insert(0) += 1;
        }
        let mut result = 0;
        for (k, v) in count {
            let n = (v + k) / (k + 1) * (k + 1);
            result += n;
        }
        result

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for &i in answers.iter() {
            if i == 0 {
                count += 1;
                continue;
            }
            if let Some(&v) = map.get(&i) {
                if v == 1 {
                    map.remove(&i);
                    count += i + 1;
                } else {
                    map.insert(i, v - 1);
                }
            } else {
                map.insert(i, i);
                count += i + 1;
            }
        }
        count

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in answers {
            match map.get_mut(&i) {
                Some(v) => {
                    *v += 1;
                    if *v > i + 1 {
                        map.remove(&i);
                        count += i + 1;
                    }
                }
                None => {
                    map.insert(i, 1);
                }
            }
        }
        for (k, v) in map {
            count += k + 1;
        }
        count

=======

        let mut map = std::collections::HashMap::new();
        let mut res = 0;
        for answer in answers {
            if let Some(&v) = map.get(&answer) {
                if v > 0 {
                    map.insert(answer, v - 1);
                } else {
                    map.insert(answer, answer);
                    res += answer + 1;
                }
            } else {
                map.insert(answer, answer);
                res += answer + 1;
            }
        }
        res

=======

        let mut count = [0; 1000];
        for &ans in &answers {
            count[ans as usize] += 1;
        }
        let mut res = 0;
        for (i, &v) in count.iter().enumerate() {
            if v > 0 {
                res += (v + i as i32) / (i as i32 + 1) * (i as i32 + 1);
            }
        }
        res

=======

        let mut res = 0;
        let mut m = std::collections::HashMap::new();
        for ans in answers {
            if ans == 0 {
                res += 1;
                continue;
            }
            let e = m.entry(ans).or_insert(0);
            *e += 1;
            if *e == ans + 1 {
                res += ans + 1;
                *e = 0;
            }
        }
        res

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for ans in answers {
            if ans == 0 {
                count += 1;
            } else {
                let count = map.entry(ans).or_insert(0);
                *count += 1;
                if *count > ans {
                    *count = 1;
                    count += ans + 1;
                }
            }
        }
        count
    }
}
