Synthesizing 10/10 solutions

=======

        let mut zeros = 0;
        let mut ones = 0;
        for c in s.chars() {
            if c == '0' {
                zeros += 1;
            } else {
                ones += 1;
            }
            if zeros < ones {
                zeros = ones;
            }
        }
        (zeros - ones) as i32

=======

        let mut zero_count = 0;
        let mut one_count = 0;
        for c in s.chars() {
            if c == '0' {
                zero_count += 1;
            } else {
                one_count += 1;
            }
        }
        
        let mut zero_count = zero_count;
        let mut one_count = 0;
        let mut result = zero_count;
        for c in s.chars() {
            if c == '0' {
                zero_count -= 1;
            } else {
                one_count += 1;
            }
            result = std::cmp::min(result, zero_count + one_count);
        }
        result
    }
}

=======

        let mut zero = 0;
        let mut one = 0;
        for c in s.chars() {
            if c == '0' {
                zero += 1;
            } else {
                one = one.min(zero) + 1;
            }
        }
        zero.min(one) as i32
    }
}

=======

        let mut ones = 0;
        let mut zeros = 0;
        for c in s.chars() {
            if c == '0' {
                zeros += 1;
            } else {
                ones += 1;
                zeros = zeros.min(ones);
            }
        }
        zeros
    }
}

=======

        let mut left = 0;
        let mut right = s.chars().filter(|&c| c == '1').count() as i32;
        let mut res = right;
        for c in s.chars() {
            if c == '1' {
                right -= 1;
            } else {
                left += 1;
            }
            res = res.min(left + right);
        }
        res
    }
}

=======

        let mut count = 0;
        let mut zero_count = 0;
        for c in s.chars() {
            if c == '0' {
                zero_count += 1;
            } else {
                if zero_count > 0 {
                    zero_count -= 1;
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut zero = 0;
        let mut one = 0;
        for c in s.chars() {
            if c == '0' {
                zero += 1;
            } else {
                one += 1;
            }
            count = count.min(zero - one);
        }
        count + one

=======

        let mut zero = 0;
        let mut one = 0;
        for c in s.chars(){
            if c == '0' {
                zero += 1;
            } else {
                one += 1;
                if zero > 0 {
                    zero -= 1;
                    one -= 1;
                }
            }
        }
        one
    }
}

=======

        let mut c = 0;
        let mut flip = 0;
        for i in s.chars() {
            if i == '0' {
                c += 1;
            } else {
                flip += 1;
            }
            if flip < c {
                c -= 1;
                flip += 1;
            }
        }
        flip
    }
}

=======

        let mut s = s.as_bytes();
        let mut count = 0;
        let mut count_0 = 0;
        for i in 0..s.len() {
            if s[i] == b'0' {
                count_0 += 1;
            } else {
                count += 1;
            }
            if count > count_0 {
                count = count_0;
            }
        }
        count
    }
}
