Synthesizing 10/10 solutions

=======

        let mut costs = costs;
        costs.sort();
        let mut ans = 0;
        for c in costs {
            if coins >= c {
                ans += 1;
            } else {
                break;
            }
        }
        ans

=======

        let mut costs = costs;
        costs.sort();
        let mut res = 0;
        for cost in costs {
            if coins < cost {
                break;
            }
            res += 1;
            coins -= cost;
        }
        res

=======

        let mut costs = costs;
        let mut coins = coins;
        let mut count = 0;
        costs.sort();
        for i in 0..costs.len() {
            if coins >= costs[i] {
                coins -= costs[i];
                count += 1;
            }
        }
        count

=======

        let mut counts = vec![0; 100001];
        for cost in costs {
            counts[cost as usize] += 1;
        }
        let mut count = 0;
        for i in 0..counts.len() {
            if coins >= i as i32 {
                let c = coins / i as i32;
                if c < counts[i] {
                    count += c;
                    break;
                } else {
                    count += counts[i];
                    coins -= counts[i] * i as i32;
                }
            }
        }
        count

=======

        let mut costs = costs;
        costs.sort();
        let mut count = 0;
        let mut money = coins;
        for cost in costs {
            if money >= cost {
                money -= cost;
                count += 1;
            }
        }
        count

=======

        let mut count = vec![0; 100001];
        for cost in costs {
            count[cost as usize] += 1;
        }
        let mut res = 0;
        for i in 1..=100000 {
            let c = count[i];
            if c == 0 {
                continue;
            }
            if coins >= i as i32 * c {
                res += c;
                coins -= i as i32 * c;
            } else {
                res += coins / i as i32;
                break;
            }
        }
        res

=======

        let mut costs = costs;
        costs.sort_unstable();
        let mut coins = coins;
        let mut ans = 0;
        for cost in costs {
            if coins < cost {
                break;
            }
            coins -= cost;
            ans += 1;
        }
        ans

=======

        let mut count = vec![0; 100001];
        for c in costs {
            count[c as usize] += 1;
        }
        let mut coins = coins;
        let mut result = 0;
        for i in 1..100001 {
            let c = count[i];
            if c == 0 {
                continue;
            }
            if coins < i as i32 {
                break;
            }
            let n = coins / i as i32;
            if n >= c {
                result += c;
                coins -= c * i as i32;
            } else {
                result += n;
                break;
            }
        }
        result

=======

        let mut cost = costs;
        cost.sort();
        let mut count = 0;
        for i in 0..cost.len() {
            if cost[i] <= coins {
                count += 1;
            } else {
                break;
            }
        }
        count

=======

        let mut costs = costs;
        costs.sort();
        let mut res = 0;
        let mut cost = 0;
        for i in 0..costs.len() {
            cost += costs[i];
            if cost > coins {
                break;
            }
            res += 1;
        }
        res
