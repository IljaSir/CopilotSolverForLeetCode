Synthesizing 8/10 solutions

=======

        let mut mat = vec![vec![0; n as usize]; n as usize];
        for q in queries {
            mat[q[0] as usize][q[1] as usize] += 1;
            if q[2] + 1 < n {
                mat[(q[2] + 1) as usize][q[1] as usize] -= 1;
            }
            if q[3] + 1 < n {
                mat[q[0] as usize][(q[3] + 1) as usize] -= 1;
            }
            if q[2] + 1 < n && q[3] + 1 < n {
                mat[(q[2] + 1) as usize][(q[3] + 1) as usize] += 1;
            }
        }
        for i in 0..n as usize {
            for j in 1..n as usize {
                mat[i][j] += mat[i][j - 1];
            }
        }
        for i in 1..n as usize {
            for j in 0..n as usize {
                mat[i][j] += mat[i - 1][j];
            }
        }
        mat

=======

        let mut mat = vec![vec![0; n as usize]; n as usize];
        for query in queries {
            let row1 = query[0] as usize;
            let col1 = query[1] as usize;
            let row2 = query[2] as usize;
            let col2 = query[3] as usize;
            for row in row1..=row2 {
                mat[row][col1] += 1;
                if col2 < n as usize - 1 {
                    mat[row][col2 + 1] -= 1;
                }
            }
        }
        for row in 0..n as usize {
            for col in 1..n as usize {
                mat[row][col] += mat[row][col - 1];
            }
        }
        mat

=======

        let n = n as usize;
        let mut mat = vec![vec![0; n]; n];
        for query in queries {
            let row1 = query[0] as usize;
            let col1 = query[1] as usize;
            let row2 = query[2] as usize;
            let col2 = query[3] as usize;
            mat[row1][col1] += 1;
            if row2 + 1 < n {
                mat[row2 + 1][col1] -= 1;
            }
            if col2 + 1 < n {
                mat[row1][col2 + 1] -= 1;
            }
            if row2 + 1 < n && col2 + 1 < n {
                mat[row2 + 1][col2 + 1] += 1;
            }
        }
        for i in 0..n {
            for j in 1..n {
                mat[i][j] += mat[i][j - 1];
            }
        }
        for i in 1..n {
            for j in 0..n {
                mat[i][j] += mat[i - 1][j];
            }
        }
        mat

=======

        let mut mat = vec![vec![0; n as usize]; n as usize];
        for q in queries {
            let (r1, c1, r2, c2) = (q[0] as usize, q[1] as usize, q[2] as usize, q[3] as usize);
            mat[r1][c1] += 1;
            if r2 + 1 < n as usize {
                mat[r2 + 1][c1] -= 1;
            }
            if c2 + 1 < n as usize {
                mat[r1][c2 + 1] -= 1;
            }
            if r2 + 1 < n as usize && c2 + 1 < n as usize {
                mat[r2 + 1][c2 + 1] += 1;
            }
        }
        for i in 0..n as usize {
            for j in 0..n as usize {
                if i > 0 {
                    mat[i][j] += mat[i - 1][j];
                }
                if j > 0 {
                    mat[i][j] += mat[i][j - 1];
                }
                if i > 0 && j > 0 {
                    mat[i][j] -= mat[i - 1][j - 1];
                }
            }
        }
        mat

=======

        let n = n as usize;
        let mut mat = vec![vec![0; n]; n];
        for query in &queries {
            let (row1, col1, row2, col2) = (query[0] as usize, query[1] as usize, query[2] as usize, query[3] as usize);
            mat[row1][col1] += 1;
            if row2 + 1 < n {
                mat[row2 + 1][col1] -= 1;
            }
            if col2 + 1 < n {
                mat[row1][col2 + 1] -= 1;
            }
            if row2 + 1 < n && col2 + 1 < n {
                mat[row2 + 1][col2 + 1] += 1;
            }
        }
        for i in 0..n {
            for j in 0..n {
                if i > 0 {
                    mat[i][j] += mat[i - 1][j];
                }
                if j > 0 {
                    mat[i][j] += mat[i][j - 1];
                }
                if i > 0 && j > 0 {
                    mat[i][j] -= mat[i - 1][j - 1];
                }
            }
        }
        mat

=======

        let mut mat = vec![vec![0; n as usize]; n as usize];
        for query in queries.iter() {
            for i in query[0] as usize..=query[2] as usize {
                mat[i][query[1] as usize] += 1;
                if query[3] + 1 < n {
                    mat[i][(query[3] + 1) as usize] -= 1;
                }
            }
        }
        for i in 0..n as usize {
            for j in 1..n as usize {
                mat[i][j] += mat[i][j - 1];
            }
        }
        mat

=======

        
    }
}

=======

        let n = n as usize;
        let mut mat = vec![vec![0; n]; n];
        let mut res = vec![vec![0; n]; n];
        for q in queries {
            let (row1, col1, row2, col2) = (q[0] as usize, q[1] as usize, q[2] as usize, q[3] as usize);
            mat[row1][col1] += 1;
            if row2 + 1 < n {
                mat[row2 + 1][col1] -= 1;
            }
            if col2 + 1 < n {
                mat[row1][col2 + 1] -= 1;
            }
            if row2 + 1 < n && col2 + 1 < n {
                mat[row2 + 1][col2 + 1] += 1;
            }
        }
        for i in 0..n {
            for j in 0..n {
                if i > 0 {
                    mat[i][j] += mat[i - 1][j];
                }
            }
        }
        for i in 0..n {
            for j in 0..n {
                if j > 0 {
                    mat[i][j] += mat[i][j - 1];
                }
                res[i][j] = mat[i][j];
            }
        }
        res
    }
}
