Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = nums[n - 1] - nums[0];
        for i in 0..n - 1 {
            let a = nums[i];
            let b = nums[i + 1];
            let high = std::cmp::max(nums[n - 1] - k, a + k);
            let low = std::cmp::min(nums[0] + k, b - k);
            ans = std::cmp::min(ans, high - low);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = nums[n-1] - nums[0];
        for i in 0..n-1 {
            let a = nums[i];
            let b = nums[i+1];
            let hi = std::cmp::max(nums[n-1]-k, a+k);
            let lo = std::cmp::min(nums[0]+k, b-k);
            ans = std::cmp::min(ans, hi-lo);
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[nums.len() - 1] - nums[0];
        for i in 0..nums.len() - 1 {
            let a = nums[i];
            let b = nums[i + 1];
            let high = std::cmp::max(nums[nums.len() - 1] - k, a + k);
            let low = std::cmp::min(nums[0] + k, b - k);
            ans = std::cmp::min(ans, high - low);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[nums.len() - 1] - nums[0];
        for i in 0..nums.len() - 1 {
            let a = nums[i];
            let b = nums[i + 1];
            let high = nums[nums.len() - 1].max(a + k);
            let low = nums[0].min(b - k);
            ans = ans.min(high - low);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut res = nums[nums.len() - 1] - nums[0];
        for i in 0..nums.len() - 1 {
            let a = nums[i];
            let b = nums[i + 1];
            let high = std::cmp::max(nums[nums.len() - 1] - k, a + k);
            let low = std::cmp::min(nums[0] + k, b - k);
            res = std::cmp::min(res, high - low);
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut res = nums.last().unwrap() - nums.first().unwrap();
        for i in 0..nums.len()-1 {
            let a = nums[i];
            let b = nums[i+1];
            let high = std::cmp::max(nums.last().unwrap() - k, a + k);
            let low = std::cmp::min(nums.first().unwrap() + k, b - k);
            res = std::cmp::min(res, high - low);
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = nums[nums.len() - 1] - nums[0];
        for i in 0..nums.len() - 1 {
            let min = nums[i].min(nums[0] + 2 * k);
            let max = nums[nums.len() - 1].max(nums[i + 1] + 2 * k);
            ans = ans.min(max - min);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut res = nums[n-1]-nums[0];
        for i in 0..n-1 {
            let a = nums[i];
            let b = nums[i+1];
            let high = std::cmp::max(nums[n-1]-k, a+k);
            let low = std::cmp::min(nums[0]+k, b-k);
            res = std::cmp::min(res, high-low);
        }
        res
