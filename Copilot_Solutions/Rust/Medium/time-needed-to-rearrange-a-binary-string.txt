Synthesizing 10/10 solutions

=======

        let mut count = 0;
        let mut ones = 0;
        for c in s.chars() {
            if c == '1' {
                ones += 1;
            } else {
                if ones > 0 {
                    ones -= 1;
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut zero = 0;
        for c in s.chars() {
            if c == '0' {
                zero += 1;
            } else {
                if zero > 0 {
                    zero -= 1;
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut zero = 0;
        for ch in s.chars() {
            if ch == '0' {
                zero += 1;
            } else {
                if zero > 0 {
                    zero -= 1;
                } else {
                    count += 1;
                }
            }
        }
        count + zero

=======

        let mut ones = 0;
        let mut ans = 0;
        for c in s.chars() {
            if c == '1' {
                ones += 1;
            } else if ones > 0 {
                ans += 1;
                ones -= 1;
            }
        }
        ans

=======

        let mut count = 0;
        let mut count0 = 0;
        for c in s.chars() {
            if c == '0' {
                count0 += 1;
            } else {
                if count0 > 0 {
                    count += 1;
                    count0 -= 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        let mut zero_count = 0;
        for c in s.chars() {
            if c == '0' {
                zero_count += 1;
            } else {
                count = std::cmp::max(count, zero_count);
            }
        }
        count

=======

        let mut count = 0;
        let mut prev = ' ';
        for c in s.chars() {
            if c == '0' && prev == '1' {
                count += 1;
                prev = ' ';
            } else {
                prev = c;
            }
        }
        count

=======

        let mut count = 0;
        let mut last = 0;
        for c in s.chars() {
            if c == '1' {
                count += 1;
            } else {
                if last == 1 {
                    count -= 1;
                }
            }
            last = c as i32 - 48;
        }
        count

=======

        let mut c = 0;
        let mut a = 0;
        for i in s.chars() {
            if i == '1' {
                if a > 0 {
                    c += 1;
                    a -= 1;
                } else {
                    a += 1;
                }
            } else {
                if a > 0 {
                    a -= 1;
                } else {
                    c += 1;
                    a += 1;
                }
            }
        }
        c

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut last = 0;
        let mut n = s.len();
        let mut str = s.chars().collect::<Vec<char>>();
        while i < n {
            while i < n && str[i] == '0' {
                i += 1;
            }
            j = i + 1;
            while j < n && str[j] == '1' {
                j += 1;
            }
            if j < n {
                count += 1;
                last = j;
            }
            i = j + 1;
        }
        if last < n {
            count += 1;
        }
        count
