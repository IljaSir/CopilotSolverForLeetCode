Synthesizing 5/10 solutions

=======

        if k == 0 {
            return 1.0;
        }
        let n = n as usize;
        let k = k as usize;
        let max_pts = max_pts as usize;
        let mut dp = vec![0.0; n + 1];
        dp[0] = 1.0;
        let mut sum = 0.0;
        for i in 1..=n {
            if i <= max_pts {
                sum += dp[i - 1];
            }
            if i > max_pts {
                sum += dp[i - 1] - dp[i - max_pts - 1];
            }
            if i >= k {
                sum -= dp[i - k];
            }
            dp[i] = sum;
        }
        dp[n] / max_pts as f64

=======

        if k == 0 || n >= k + max_pts {
            return 1.0;
        }
        let mut dp = vec![0.0; n as usize + 1];
        dp[0] = 1.0;
        let mut sum = 1.0;
        for i in 1..=n {
            dp[i] = sum / max_pts as f64;
            if i < k {
                sum += dp[i];
            } else {
                sum += dp[i] - dp[i - max_pts as usize];
            }
        }
        sum

=======

        
    }
}

=======

        if k == 0 || n >= k + max_pts {
            return 1.0;
        }
        let mut dp = vec![0.0; (k + max_pts) as usize];
        for i in k..k + max_pts {
            dp[i as usize] = 1.0;
        }
        dp[k as usize - 1] = (n - k + 1) as f64 / max_pts as f64;
        for i in (0..k).rev() {
            dp[i as usize] = dp[i as usize + 1] - (dp[i as usize + max_pts as usize + 1] - dp[i as usize + 1]) / max_pts as f64;
        }
        dp[0]

=======

        if k == 0 || n >= k + max_pts {
            return 1.0;
        }
        let mut dp = vec![0.0; (n + 1) as usize];
        let mut sum = 1.0;
        dp[0] = 1.0;
        for i in 1..=n {
            dp[i as usize] = sum / max_pts as f64;
            if i < k {
                sum += dp[i as usize];
            }
            if i - max_pts >= 0 {
                sum -= dp[(i - max_pts) as usize];
            }
        }
        sum
