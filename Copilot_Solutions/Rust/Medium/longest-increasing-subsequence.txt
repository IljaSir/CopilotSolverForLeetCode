Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        dp.into_iter().max().unwrap_or(0)

=======
Suggestion 2

        let n = nums.len();
        let mut dp = vec![1; n];
        for i in 0..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        *dp.iter().max().unwrap()

=======
Suggestion 3

        let mut dp = vec![1; nums.len()];
        for i in 1..nums.len() {
            for j in 0..i {
                if nums[j] < nums[i] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
        }
        dp.into_iter().max().unwrap_or(0)
    }
}

=======
Suggestion 4

        let n = nums.len();
        let mut dp = vec![1; n];
        let mut res = 1;
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = std::cmp::max(dp[i], dp[j] + 1);
                }
            }
            res = std::cmp::max(res, dp[i]);
        }
        res as i32

=======
Suggestion 5

        let mut dp = vec![1; nums.len()];
        let mut ans = 1;
        for i in 1..nums.len() {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
            ans = ans.max(dp[i]);
        }
        ans
    }
}

=======
Suggestion 6

        let mut dp = vec![1; nums.len()];
        let mut max = 0;
        for i in 0..nums.len() {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
            max = max.max(dp[i]);
        }
        max

=======
Suggestion 7

        let n = nums.len();
        if n == 0 {
            return 0;
        }
        let mut dp = vec![1; n];
        let mut res = 1;
        for i in 1..n {
            for j in 0..i {
                if nums[i] > nums[j] {
                    dp[i] = dp[i].max(dp[j] + 1);
                }
            }
            res = res.max(dp[i]);
        }
        res

=======
Suggestion 8

        if nums.is_empty() {
            return 0;
        }
        let mut dp = vec![0; nums.len()];
        dp[0] = 1;
        let mut max = 1;
        for i in 1..nums.len() {
            let mut max_val = 0;
            for j in 0..i {
                if nums[i] > nums[j] {
                    max_val = max_val.max(dp[j]);
                }
            }
            dp[i] = max_val + 1;
            max = max.max(dp[i]);
        }
        max

=======
Suggestion 9

        let mut dp = Vec::new();
        for x in nums {
            match dp.binary_search(&x) {
                Ok(_) => (),
                Err(i) => {
                    if i == dp.len() {
                        dp.push(x);
                    } else {
                        dp[i] = x;
                    }
                }
            }
        }
        dp.len() as i32
    }
}
