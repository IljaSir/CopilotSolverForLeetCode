Synthesizing 10/10 solutions

=======

        for i in 0..=num {
            if i + i.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap() == num {
                return true;
            }
        }
        false
    }
}

=======

        let mut n = num;
        let mut rev = 0;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        (num + rev).to_string().chars().all(|x| x != '0')
    }
}

=======

        let mut n = num;
        let mut rev = 0;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        num == rev
    }
}

=======

        let mut n = num;
        let mut rev = 0;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        let mut i = 0;
        while i <= num {
            if i + rev == num {
                return true;
            }
            i += 1;
            rev += 1;
        }
        false

=======

        let mut n = num;
        let mut rev = 0;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        let mut n = num;
        while n > 0 {
            if n % 10 != 0 && num % (n % 10 + rev % 10) == 0 {
                return true;
            }
            n /= 10;
            rev /= 10;
        }
        false

=======

        let mut num = num;
        let mut reverse = 0;
        while num > 0 {
            reverse = reverse * 10 + num % 10;
            num /= 10;
        }
        let mut sum = num + reverse;
        while sum > 0 {
            if sum % 10 == 0 {
                return false;
            }
            sum /= 10;
        }
        true

=======

        let mut num = num;
        let mut reverse = 0;
        while num > 0 {
            reverse = reverse * 10 + num % 10;
            num /= 10;
        }
        let mut sum = num + reverse;
        while sum > 0 {
            if sum % 10 != 0 {
                return false;
            }
            sum /= 10;
        }
        true

=======

        let mut rev = 0;
        let mut n = num;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n /= 10;
        }
        num == rev || num + rev == rev + num

=======

        let mut n = num;
        let mut rev = 0;
        while n > 0 {
            rev = rev * 10 + n % 10;
            n = n / 10;
        }
        let mut sum = num + rev;
        while sum > 0 {
            if sum % 10 != 0 && num % (sum % 10) != 0 {
                return false;
            }
            sum = sum / 10;
        }
        true

=======

        let mut n = num;
        let mut reverse = 0;
        while n > 0 {
            reverse = reverse * 10 + n % 10;
            n /= 10;
        }
        num == reverse || (num + reverse) % 10 == 0
