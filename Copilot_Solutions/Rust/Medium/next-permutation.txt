Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut i = (nums.len() - 1) as i32;
        while i > 0 && nums[i as usize] <= nums[(i - 1) as usize] {
            i -= 1;
        }
        if i > 0 {
            let mut j = (nums.len() - 1) as i32;
            while nums[j as usize] <= nums[(i - 1) as usize] {
                j -= 1;
            }
            nums.swap(j as usize, (i - 1) as usize);
        }
        let mut j = (nums.len() - 1) as i32;
        while i < j {
            nums.swap(i as usize, j as usize);
            i += 1;
            j -= 1;
        }

=======
Suggestion 2

        let mut i = nums.len() as i32 - 2;
        while i >= 0 && nums[i as usize] >= nums[i as usize + 1] {
            i -= 1;
        }
        if i >= 0 {
            let mut j = nums.len() as i32 - 1;
            while j >= 0 && nums[i as usize] >= nums[j as usize] {
                j -= 1;
            }
            nums.swap(i as usize, j as usize);
        }
        nums[i as usize + 1..].reverse();

=======
Suggestion 3

        let mut i = nums.len() - 2;
        while i >= 0 && nums[i] >= nums[i + 1] {
            i -= 1;
        }
        if i >= 0 {
            let mut j = nums.len() - 1;
            while j >= 0 && nums[j] <= nums[i] {
                j -= 1;
            }
            nums.swap(i, j);
        }
        nums[i + 1..].reverse();

=======
Suggestion 4

        let mut i = nums.len() - 1;
        while i > 0 && nums[i - 1] >= nums[i] {
            i -= 1;
        }
        if i > 0 {
            let mut j = nums.len() - 1;
            while nums[j] <= nums[i - 1] {
                j -= 1;
            }
            nums.swap(i - 1, j);
        }
        nums[i..].reverse();
    }
}

=======
Suggestion 5

        let mut i = nums.len() - 1;
        while i > 0 && nums[i - 1] >= nums[i] {
            i -= 1;
        }
        if i > 0 {
            let mut j = nums.len() - 1;
            while j > 0 && nums[j] <= nums[i - 1] {
                j -= 1;
            }
            nums.swap(i - 1, j);
        }
        nums[i..].reverse();

=======
Suggestion 6

        let mut i = nums.len() - 1;
        while i > 0 && nums[i - 1] >= nums[i] {
            i -= 1;
        }
        if i == 0 {
            nums.reverse();
            return;
        }
        let mut j = nums.len() - 1;
        while j >= i && nums[j] <= nums[i - 1] {
            j -= 1;
        }
        nums.swap(i - 1, j);
        nums[i..].reverse();
    }
}

=======
Suggestion 7

        let mut i = nums.len() - 2;
        while i >= 0 && nums[i] >= nums[i + 1] {
            i -= 1;
        }
        if i >= 0 {
            let mut j = nums.len() - 1;
            while j >= i && nums[i] >= nums[j] {
                j -= 1;
            }
            nums.swap(i, j);
        }
        nums[i + 1..].reverse();
    }
}

=======
Suggestion 8

        let mut i = nums.len() - 1;
        while i > 0 && nums[i] <= nums[i - 1] {
            i -= 1;
        }
        if i > 0 {
            let mut j = nums.len() - 1;
            while j >= i && nums[j] <= nums[i - 1] {
                j -= 1;
            }
            nums.swap(i - 1, j);
        }
        nums[i..].reverse();
    }
}

=======
Suggestion 9

        let n = nums.len();
        if n <= 1 {
            return;
        }
        let mut i = n - 1;
        while i > 0 && nums[i - 1] >= nums[i] {
            i -= 1;
        }
        if i == 0 {
            nums.reverse();
            return;
        }
        let mut j = i;
        while j < n && nums[j] > nums[i - 1] {
            j += 1;
        }
        nums.swap(i - 1, j - 1);
        nums[i..].reverse();

=======
Suggestion 10

        let len = nums.len();
        if len < 2 { return; }
        let mut i = len - 2;
        while i > 0 && nums[i] >= nums[i + 1] { i -= 1; }
        if nums[i] >= nums[i + 1] {
            nums.reverse();
        } else {
            let mut j = len - 1;
            while nums[j] <= nums[i] { j -= 1; }
            nums.swap(i, j);
            nums[(i + 1)..].reverse();
        }
