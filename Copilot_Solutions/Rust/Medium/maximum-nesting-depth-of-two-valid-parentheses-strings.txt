Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut depth = 0;
        let mut res = vec![];
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                res.push(depth % 2);
            } else {
                res.push(depth % 2);
                depth -= 1;
            }
        }
        res

=======

        let mut depth = 0;
        let mut ans = vec![];
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                ans.push(depth % 2);
            } else {
                ans.push(depth % 2);
                depth -= 1;
            }
        }
        ans

=======

        let mut res = vec![];
        let mut depth = 0;
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                res.push(depth % 2);
            } else {
                res.push(depth % 2);
                depth -= 1;
            }
        }
        res

=======

        let mut res = vec![];
        let mut d = 0;
        for c in seq.chars() {
            if c == '(' {
                d += 1;
                res.push(d % 2);
            } else {
                res.push(d % 2);
                d -= 1;
            }
        }
        res
    }
}

=======

        let mut depth = 0;
        let mut result = vec![];
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                result.push(depth % 2);
            } else {
                result.push(depth % 2);
                depth -= 1;
            }
        }
        result

=======

        let mut ans = vec![0; seq.len()];
        let mut d = 0;
        for (i, c) in seq.chars().enumerate() {
            if c == '(' {
                d += 1;
                ans[i] = d % 2;
            } else {
                ans[i] = d % 2;
                d -= 1;
            }
        }
        ans

=======

        let mut res: Vec<i32> = Vec::new();
        let mut depth = 0;
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                res.push(depth % 2);
            } else {
                res.push(depth % 2);
                depth -= 1;
            }
        }
        res

=======

        let mut ans = Vec::new();
        let mut d = 0;
        for c in seq.chars() {
            if c == '(' {
                d += 1;
                ans.push(d & 1);
            } else {
                ans.push(d & 1);
                d -= 1;
            }
        }
        ans

=======

        let mut ans: Vec<i32> = Vec::new();
        let mut depth: i32 = 0;
        for c in seq.chars() {
            if c == '(' {
                depth += 1;
                ans.push(depth % 2);
            } else {
                ans.push(depth % 2);
                depth -= 1;
            }
        }
        ans
