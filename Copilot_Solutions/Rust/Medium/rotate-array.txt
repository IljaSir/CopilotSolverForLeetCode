Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut k = k as usize;
        let n = nums.len();
        k %= n;
        nums.reverse();
        nums[0..k].reverse();
        nums[k..n].reverse();
    }
}

=======
Suggestion 2

        let mut k = k as usize;
        let len = nums.len();
        k %= len;
        nums.reverse();
        nums[..k].reverse();
        nums[k..].reverse();

=======
Suggestion 3

        let k = k as usize;
        let n = nums.len();
        nums.rotate_right(k % n);
    }
}

=======
Suggestion 4

        let k = k as usize;
        let n = nums.len();
        let mut i = 0;
        while i < k {
            let tmp = nums[n - 1];
            for j in (1..n).rev() {
                nums[j] = nums[j - 1];
            }
            nums[0] = tmp;
            i += 1;
        }

=======
Suggestion 5

        let k = k as usize;
        let n = nums.len();
        if k == 0 || k == n {
            return;
        }
        let k = k % n;
        let mut i = 0;
        let mut j = n - k;
        let mut count = n;
        while count > 0 {
            nums.swap(i, j);
            i += 1;
            j += 1;
            count -= 1;
            if i == j {
                i += 1;
                j += 1;
            }
            if i == k {
                i = 0;
            }
            if j == n {
                j = k;
            }
        }
    }
}

=======
Suggestion 6

        let mut i = 0;
        let mut j = k as usize;
        while i < nums.len() {
            nums.swap(i, j);
            i += 1;
            j += 1;
            if j >= nums.len() {
                j = j % nums.len();
            }
        }
    }
}

=======
Suggestion 7

        let k = k as usize;
        let n = nums.len();
        let k = k % n;
        if k == 0 {
            return;
        }
        let mut i = 0;
        let mut cur = nums[i];
        for _ in 0..n {
            let next = (i + k) % n;
            let tmp = nums[next];
            nums[next] = cur;
            cur = tmp;
            i = next;
        }
    }
}

=======
Suggestion 8

        let mut k = k;
        let n = nums.len();
        let mut count = 0;
        for i in 0..n {
            if count == n {
                return;
            }
            let mut cur = i;
            let mut prev = nums[i];
            loop {
                let next = (cur + k as usize) % n;
                let temp = nums[next];
                nums[next] = prev;
                prev = temp;
                cur = next;
                count += 1;
                if i == cur {
                    break;
                }
            }
        }
    }
}

=======
Suggestion 9

        let mut k = k as usize;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while k > 0 {
            let t = nums[j];
            nums[j] = nums[i];
            nums[i] = t;
            i += 1;
            j -= 1;
            k -= 1;
        }
    }
}

=======
Suggestion 10

        let mut temp: Vec<i32> = Vec::new();
        let mut j = 0;
        for i in (0..nums.len()).rev() {
            if i < k as usize {
                temp.insert(0, nums[i]);
            } else {
                nums[i] = nums[i - k as usize];
            }
        }
        for i in (0..k as usize).rev() {
            nums[i] = temp[j];
            j += 1;
        }
