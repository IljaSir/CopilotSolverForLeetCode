Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let n = nums.len();
        let mut sum = 0;
        let mut min = std::i32::MAX;
        for i in 0..n {
            sum += nums[i];
            if i >= 4 {
                sum -= nums[i - 4];
            }
            if i >= 3 {
                min = min.min((sum - nums[i - 3] * 3).abs());
            }
        }
        min

=======

        
    }
}

=======

        let mut acc = Vec::new();
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            acc.push(sum);
        }
        let mut min = std::i32::MAX;
        let mut min_idx = 0;
        for i in 0..nums.len() {
            let mut l = 1;
            let mut r = nums.len() - i;
            while r - l > 1 {
                let m = (l + r) / 2;
                let a = acc[i + m - 1] - acc[i] + nums[i];
                let b = acc[nums.len() - 1] - acc[i + m - 1];
                if a * m as i32 > b * (i + 1) as i32 {
                    l = m;
                } else {
                    r = m;
                }
            }
            let a = acc[i + l - 1] - acc[i] + nums[i];
            let b = acc[nums.len() - 1] - acc[i + l - 1];
            if a * l as i32 - b * (i + 1) as i32 < min {
                min = a * l as i32 - b * (i + 1) as i32;
                min_idx = i as i32;
            }
            let a = acc[i + r - 1] - acc[i] + nums[i];
            let b = acc[nums.len() - 1] - acc[i + r - 1];
            if a * r as i32 - b * (i + 1) as i32 < min {
                min = a * r as i32 - b * (i + 1) as i32;
                min_idx = i as i32;
            }
        }
        min_idx

=======

        let mut sum = 0;
        let mut min = 100000;
        let mut min_index = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if i >= 5 {
                sum -= nums[i - 5];
            }
            if i >= 4 {
                let avg = sum / 5;
                let diff = (nums[i - 4] - avg).abs();
                if diff < min {
                    min = diff;
                    min_index = i - 4;
                }
            }
        }
        min_index as i32

=======

        let mut res = 0;
        let mut min = std::i32::MAX;
        let mut sum = 0;
        let mut sum1 = 0;
        let mut sum2 = 0;
        let mut n = nums.len();
        for i in 0..n {
            sum += nums[i];
        }
        for i in 0..n {
            sum1 += nums[i];
            sum2 = sum - sum1;
            let diff = (sum1 / (i+1) as i32 - sum2 / (n-i-1) as i32).abs();
            if diff < min {
                min = diff;
                res = i as i32;
            }
        }
        res

=======

        let mut sum = 0;
        let mut sum2 = 0;
        let mut min = 100000;
        let mut min_index = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            sum2 += nums[nums.len() - 1 - i];
            let a = sum / (i + 1) as i32;
            let b = sum2 / (i + 1) as i32;
            let diff = (a - b).abs();
            if diff < min {
                min = diff;
                min_index = i;
            }
        }
        min_index as i32
