Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut left = 0;
        let mut right = (c as f64).sqrt() as i32;
        while left <= right {
            let sum = left * left + right * right;
            if sum == c {
                return true;
            } else if sum < c {
                left += 1;
            } else {
                right -= 1;
            }
        }
        false

=======
Suggestion 2

        let mut i = 0;
        let mut j = (c as f64).sqrt() as i32;
        while i <= j {
            let sum = i * i + j * j;
            if sum == c {
                return true;
            } else if sum < c {
                i += 1;
            } else {
                j -= 1;
            }
        }
        false
    }
}

=======
Suggestion 3

        let mut i = 0;
        let mut j = (c as f64).sqrt() as i32;
        while i <= j {
            let sum = i * i + j * j;
            if sum == c {
                return true;
            } else if sum < c {
                i += 1;
            } else {
                j -= 1;
            }
        }
        false

=======
Suggestion 4

        let mut i = 0;
        let mut j = (c as f64).sqrt() as i32;
        while i <= j {
            let sum = i * i + j * j;
            if sum == c {
                return true;
            }
            if sum < c {
                i += 1;
            } else {
                j -= 1;
            }
        }
        false

=======
Suggestion 5

        let mut a = 0;
        let mut b = (c as f64).sqrt() as i32;
        while a <= b {
            let sum = a * a + b * b;
            if sum == c {
                return true;
            } else if sum < c {
                a += 1;
            } else {
                b -= 1;
            }
        }
        false

=======
Suggestion 6

        let mut l = 0;
        let mut r = (c as f64).sqrt() as i32;
        while l <= r {
            let sum = l * l + r * r;
            if sum == c {
                return true;
            }
            if sum < c {
                l += 1;
            } else {
                r -= 1;
            }
        }
        false

=======
Suggestion 7

        let mut l = 0;
        let mut r = (c as f64).sqrt() as i32;
        while l <= r {
            let sum = l * l + r * r;
            if sum == c {
                return true;
            } else if sum > c {
                r -= 1;
            } else {
                l += 1;
            }
        }
        false

=======
Suggestion 8

        let mut a = 0;
        let mut b = (c as f64).sqrt() as i32;
        while a <= b {
            let sum = a*a + b*b;
            if sum == c { return true; }
            if sum < c { a += 1; }
            else { b -= 1; }
        }
        false

=======
Suggestion 9

        let mut i = 0;
        while i * i <= c {
            let j = (c - i * i) as f64;
            if j.sqrt() == j.sqrt().floor() {
                return true;
            }
            i += 1;
        }
        false
