Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let n = n as usize;
        let mut is_prime = vec![true; n];
        let mut count = 0;
        for i in 2..n {
            if is_prime[i] {
                count += 1;
            }
            let mut j = i * i;
            while j < n {
                is_prime[j] = false;
                j += i;
            }
        }
        count as i32

=======
Suggestion 2

        let n = n as usize;
        let mut is_prime = vec![true; n];
        let mut count = 0;
        for i in 2..n {
            if is_prime[i] {
                count += 1;
                let mut j = 2;
                while i * j < n {
                    is_prime[i * j] = false;
                    j += 1;
                }
            }
        }
        count as i32

=======
Suggestion 3

        let n = n as usize;
        let mut is_prime = vec![true; n];
        let mut count = 0;
        for i in 2..n {
            if is_prime[i] {
                count += 1;
                let mut j = i * i;
                while j < n {
                    is_prime[j] = false;
                    j += i;
                }
            }
        }
        count as i32

=======
Suggestion 4

        let mut is_prime = vec![true; n as usize];
        let mut count = 0;
        for i in 2..n {
            if is_prime[i as usize] {
                count += 1;
                let mut j = i * i;
                while j < n {
                    is_prime[j as usize] = false;
                    j += i;
                }
            }
        }
        count
    }
}

=======
Suggestion 5

        if n < 2 {
            return 0;
        }
        let mut is_prime = vec![true; n as usize];
        is_prime[0] = false;
        is_prime[1] = false;
        for i in 2..n {
            if is_prime[i as usize] {
                let mut j = i * i;
                while j < n {
                    is_prime[j as usize] = false;
                    j += i;
                }
            }
        }
        is_prime.iter().filter(|&&x| x).count() as i32

=======
Suggestion 6

        let mut primes = vec![true; n as usize];
        let mut count = 0;
        for i in 2..n {
            if primes[i as usize] {
                count += 1;
                let mut j = 2;
                while i * j < n {
                    primes[(i * j) as usize] = false;
                    j += 1;
                }
            }
        }
        count

=======
Suggestion 7

        let n = n as usize;
        let mut is_prime = vec![true; n];
        for i in 2..n {
            if is_prime[i] {
                let mut j = i * i;
                while j < n {
                    is_prime[j] = false;
                    j += i;
                }
            }
        }
        let mut cnt = 0;
        for i in 2..n {
            if is_prime[i] {
                cnt += 1;
            }
        }
        cnt as i32

=======
Suggestion 8

        let n = n as usize;
        let mut prime = vec![true; n];
        prime[0] = false;
        prime[1] = false;
        for i in 2..n {
            if prime[i] {
                let mut j = i + i;
                while j < n {
                    prime[j] = false;
                    j += i;
                }
            }
        }
        prime.iter().fold(0, |acc, x| if *x {acc + 1} else {acc})
    }
}
