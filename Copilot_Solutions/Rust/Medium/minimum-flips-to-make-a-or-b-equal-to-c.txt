Synthesizing 7/10 solutions (Duplicates hidden)

=======

        let mut ans = 0;
        for i in 0..32 {
            let bit_a = (a >> i) & 1;
            let bit_b = (b >> i) & 1;
            let bit_c = (c >> i) & 1;
            if bit_c == 1 {
                if bit_a == 0 && bit_b == 0 {
                    ans += 1;
                }
            } else {
                if bit_a == 1 {
                    ans += 1;
                }
                if bit_b == 1 {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut a = a;
        let mut b = b;
        let mut c = c;
        let mut ans = 0;
        while a > 0 || b > 0 || c > 0 {
            let a0 = a % 2;
            let b0 = b % 2;
            let c0 = c % 2;
            if c0 == 0 {
                ans += a0 + b0;
            } else {
                if a0 == 0 && b0 == 0 {
                    ans += 1;
                }
            }
            a /= 2;
            b /= 2;
            c /= 2;
        }
        ans

=======

        let mut count = 0;
        for i in 0..32 {
            let a_bit = a >> i & 1;
            let b_bit = b >> i & 1;
            let c_bit = c >> i & 1;
            if c_bit == 1 {
                if a_bit == 0 && b_bit == 0 {
                    count += 1;
                }
            } else {
                if a_bit == 1 {
                    count += 1;
                }
                if b_bit == 1 {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..32 {
            let a_bit = a >> i & 1;
            let b_bit = b >> i & 1;
            let c_bit = c >> i & 1;
            if c_bit == 0 {
                count += a_bit + b_bit;
            } else {
                if a_bit == 0 && b_bit == 0 {
                    count += 1;
                }
            }
        }
        count

=======

        
    }
}

=======

        let mut res = 0;
        for i in 0..32 {
            let mask = 1 << i;
            let x = a & mask;
            let y = b & mask;
            let z = c & mask;
            if z == 0 {
                if x != 0 {
                    res += 1;
                }
                if y != 0 {
                    res += 1;
                }
            } else {
                if x == 0 && y == 0 {
                    res += 1;
                }
            }
        }
        return res;
