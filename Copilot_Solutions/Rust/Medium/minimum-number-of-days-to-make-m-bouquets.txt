Synthesizing 10/10 solutions

=======

        if m * k > bloom_day.len() as i32 {
            return -1;
        }
        let (mut l, mut r) = (bloom_day.iter().min().unwrap(), bloom_day.iter().max().unwrap());
        while l < r {
            let mid = (l + r) / 2;
            let mut bouquets = 0;
            let mut flowers = 0;
            for &d in bloom_day.iter() {
                if d <= mid {
                    flowers += 1;
                    if flowers == k {
                        bouquets += 1;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if bouquets >= m {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        *l

=======

        let n = bloom_day.len();
        if m * k > n as i32 {
            return -1;
        }
        let mut left = *bloom_day.iter().min().unwrap();
        let mut right = *bloom_day.iter().max().unwrap();
        while left < right {
            let mid = (left + right) / 2;
            let mut bouquets = 0;
            let mut flowers = 0;
            for &bd in bloom_day.iter() {
                if bd <= mid {
                    flowers += 1;
                    if flowers == k {
                        bouquets += 1;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if bouquets >= m {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        if m * k > bloom_day.len() as i32 {
            return -1;
        }
        let mut lo = 1;
        let mut hi = 1_000_000_000;
        while lo < hi {
            let mid = (lo + hi) / 2;
            let mut bouquets = 0;
            let mut flowers = 0;
            for day in bloom_day.iter() {
                if day <= &mid {
                    flowers += 1;
                    if flowers == k {
                        bouquets += 1;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if bouquets >= m {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo

=======

        let n = bloom_day.len();
        if n < m as usize * k as usize {
            return -1;
        }
        let mut lo = 1;
        let mut hi = 1_000_000_000;
        while lo < hi {
            let mid = lo + (hi - lo) / 2;
            if Solution::can_make_bouquets(&bloom_day, mid, m, k) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo
    }
    fn can_make_bouquets(bloom_day: &Vec<i32>, mid: i32, m: i32, k: i32) -> bool {
        let mut bouquets = 0;
        let mut flowers = 0;
        for i in 0..bloom_day.len() {
            if bloom_day[i] <= mid {
                flowers += 1;
                if flowers == k {
                    bouquets += 1;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        bouquets >= m

=======

        let n = bloom_day.len();
        if m * k > n as i32 {
            return -1;
        }
        let mut lo = 0;
        let mut hi = 1_000_000_000;
        while lo < hi {
            let mid = (lo + hi) / 2;
            if Solution::can_make(bloom_day.clone(), m, k, mid) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo
    }
    fn can_make(bloom_day: Vec<i32>, m: i32, k: i32, day: i32) -> bool {
        let mut bouquets = 0;
        let mut flowers = 0;
        for bloom in bloom_day {
            if bloom <= day {
                flowers += 1;
                if flowers == k {
                    bouquets += 1;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        bouquets >= m

=======

        let n = bloom_day.len();
        if m * k > n as i32 {
            return -1;
        }
        let (mut lo, mut hi) = (bloom_day.iter().min().unwrap().clone(), bloom_day.iter().max().unwrap().clone());
        while lo < hi {
            let mid = (lo + hi) / 2;
            if Self::can_make(&bloom_day, m, k, mid) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo
    }
    fn can_make(bloom_day: &Vec<i32>, m: i32, k: i32, day: i32) -> bool {
        let mut bouquets = 0;
        let mut flowers = 0;
        for x in bloom_day {
            if *x <= day {
                flowers += 1;
                if flowers == k {
                    bouquets += 1;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        bouquets >= m

=======

        let (mut l, mut r) = (1, *bloom_day.iter().max().unwrap());
        while l < r {
            let mid = (l + r) / 2;
            let mut bouquets = 0;
            let mut flowers = 0;
            for d in bloom_day.iter() {
                if d <= &mid {
                    flowers += 1;
                    if flowers == k {
                        bouquets += 1;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if bouquets >= m {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l

=======

        let n = bloom_day.len();
        let mut bloom_day = bloom_day;
        bloom_day.sort();
        let mut l = 0;
        let mut r = bloom_day.len() - 1;
        while l < r {
            let mid = l + (r - l) / 2;
            if Self::can_make(&bloom_day, m, k, bloom_day[mid]) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if Self::can_make(&bloom_day, m, k, bloom_day[l]) {
            bloom_day[l]
        } else {
            -1
        }
    }
    fn can_make(bloom_day: &[i32], m: i32, k: i32, days: i32) -> bool {
        let mut bouquets = 0;
        let mut flowers = 0;
        for &day in bloom_day {
            if day > days {
                break;
            }
            flowers += 1;
            if flowers == k {
                bouquets += 1;
                flowers = 0;
            }
        }
        bouquets >= m

=======

        let (mut l, mut r) = (0, 1_000_000_000);
        while l < r {
            let mid = (l + r) / 2;
            if Solution::can_make(bloom_day.as_slice(), m, k, mid) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if Solution::can_make(bloom_day.as_slice(), m, k, l) {
            l
        } else {
            -1
        }
    }
    fn can_make(bloom_day: &[i32], m: i32, k: i32, days: i32) -> bool {
        let (mut bouquets, mut flowers) = (0, 0);
        for &bloom in bloom_day {
            if bloom <= days {
                flowers += 1;
                if flowers == k {
                    bouquets += 1;
                    flowers = 0;
                }
            } else {
                flowers = 0;
            }
        }
        bouquets >= m

=======

        let (mut l, mut r) = (0, 10i32.pow(9) + 1);
        while l < r {
            let mid = (l + r) / 2;
            let mut bouquets = 0;
            let mut flowers = 0;
            for &bloom in bloom_day.iter() {
                if bloom <= mid {
                    flowers += 1;
                    if flowers == k {
                        bouquets += 1;
                        flowers = 0;
                    }
                } else {
                    flowers = 0;
                }
            }
            if bouquets >= m {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        if l == 10i32.pow(9) + 1 {
            -1
        } else {
            l
        }
    }
}
