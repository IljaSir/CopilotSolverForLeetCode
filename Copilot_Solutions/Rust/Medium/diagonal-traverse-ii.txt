Synthesizing 10/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        for (i, row) in nums.iter().enumerate() {
            for (j, v) in row.iter().enumerate() {
                map.entry(i + j).or_insert(vec![]).push(v);
            }
        }
        let mut keys: Vec<_> = map.keys().collect();
        keys.sort();
        let mut res = vec![];
        for k in keys {
            for v in map.get(k).unwrap().iter().rev() {
                res.push(*v);
            }
        }
        res
    }
}

=======

        let mut res = vec![];
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums[i].len() {
                map.entry(i + j).or_insert(vec![]).push(nums[i][j]);
            }
        }
        for i in 0..map.len() {
            let mut v = map.get(&i).unwrap().clone();
            if i % 2 == 0 {
                v.reverse();
            }
            res.append(&mut v);
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        for (i, row) in nums.iter().enumerate() {
            for (j, &num) in row.iter().enumerate() {
                map.entry(i + j).or_insert_with(Vec::new).push(num);
            }
        }
        let mut ans = Vec::new();
        for i in 0..=map.len() {
            if let Some(v) = map.get(&i) {
                ans.extend(v.iter().rev());
            }
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        for (i, row) in nums.iter().enumerate() {
            for (j, &n) in row.iter().enumerate() {
                map.entry(i + j).or_insert(Vec::new()).push(n);
            }
        }
        let mut ans = Vec::new();
        for (k, v) in map.iter() {
            if k % 2 == 0 {
                ans.extend(v.iter().rev());
            } else {
                ans.extend(v.iter());
            }
        }
        ans
    }
}

=======

        let mut result = vec![];
        let mut m = nums.len();
        let mut n = 0;
        for i in 0..m {
            n = n.max(nums[i].len());
        }
        for i in 0..m+n-1 {
            for j in 0..i+1 {
                if j >= m || i-j >= n {
                    continue;
                }
                result.push(nums[j][i-j]);
            }
        }
        result

=======

        let mut result = Vec::new();
        let mut max = 0;
        for i in 0..nums.len() {
            for j in 0..nums[i].len() {
                if i + j > max {
                    max = i + j;
                }
            }
        }
        for i in 0..=max {
            let mut temp = Vec::new();
            for j in 0..nums.len() {
                if i >= j && i - j < nums[j].len() {
                    temp.push(nums[j][i - j]);
                }
            }
            if i % 2 == 0 {
                temp.reverse();
            }
            result.append(&mut temp);
        }
        result
    }
}

=======

        let mut res = Vec::new();
        let mut m = 0;
        let mut n = 0;
        let mut i = 0;
        let mut j = 0;
        let mut up = true;
        let mut max = 0;
        for row in nums.iter() {
            max += row.len();
        }
        while res.len() < max {
            res.push(nums[i][j]);
            if up {
                if i == 0 {
                    if j == nums[i].len() - 1 {
                        i += 1;
                    } else {
                        j += 1;
                    }
                    up = false;
                } else if j == nums[i].len() - 1 {
                    i += 1;
                    up = false;
                } else {
                    i -= 1;
                    j += 1;
                }
            } else {
                if j == 0 {
                    if i == nums.len() - 1 {
                        j += 1;
                    } else {
                        i += 1;
                    }
                    up = true;
                } else if i == nums.len() - 1 {
                    j += 1;
                    up = true;
                } else {
                    i += 1;
                    j -= 1;
                }
            }
        }
        res
    }
}

=======

        let mut v = Vec::new();
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut m = 0;
        let mut n = 0;
        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        let mut t = 0;
        let mut f = 0;
        let mut s = 0;
        let mut l = 0;
        let mut u = 0;
        let mut d = 0;
        let mut r = 0;
        let mut p = 0;
        let mut q = 0;
        let mut b = 0;
        let mut a = 0;
        let mut c = 0;
        let mut g = 0;
        let mut h = 0;
        let mut w = 0;
        let mut e = 0;
        let mut o = 0;
        let mut len = 0;
        let mut len1 = 0;
        let mut len2 = 0;
        let mut len3 = 0;
        let mut len4 = 0;
        let mut len5 = 0;
        let mut len6 = 0;
        let mut len7 = 0;
        let mut len8 = 0;
        let mut len9 = 0;
        let mut len10 = 0;
        let mut len11 = 0;
        let mut len12 = 0;
        let mut len13 = 0;
        let mut len14 = 0;
        let mut len15 = 0;
        let mut len16 = 0;
        let mut len17 = 0;
        let mut len18 = 0;
        let mut len19 = 0;
        let mut len20 = 0;
        let mut len21 = 0;
        let mut len22 = 0;
        let mut len23 = 0;
        let mut len24 = 0;
        let mut len25 = 0;
        let mut len26 = 0;
        let mut len27 = 0;
        let mut len28 = 0;
        let mut len29 = 0;
        let mut len30 = 0;
        let mut len31 = 0;
        let mut

=======

        let mut res = vec![];
        let mut i = 0;
        let mut j = 0;
        let mut is_up = true;
        let mut m = nums.len();
        let mut n = 0;
        for row in nums.iter() {
            n = n.max(row.len());
        }
        while m > 0 && n > 0 {
            res.push(nums[i][j]);
            if is_up {
                if j == n - 1 {
                    i += 1;
                    is_up = false;
                } else if i == 0 {
                    j += 1;
                    is_up = false;
                } else {
                    i -= 1;
                    j += 1;
                }
            } else {
                if i == m - 1 {
                    j += 1;
                    is_up = true;
                } else if j == 0 {
                    i += 1;
                    is_up = true;
                } else {
                    i += 1;
                    j -= 1;
                }
            }
            if i >= m || j >= n {
                break;
            }
        }
        res
    }
}

=======

        let mut ans = Vec::new();
        let mut diag = Vec::new();
        let mut m = nums.len();
        let mut n = 0;
        for i in 0..m {
            if n < nums[i].len() {
                n = nums[i].len();
            }
        }
        for i in 0..m+n-1 {
            diag.clear();
            for j in 0..m {
                if i < nums[j].len() {
                    diag.push(nums[j][i]);
                }
            }
            if i % 2 == 0 {
                diag.reverse();
            }
            ans.append(&mut diag);
        }
        ans
    }
}
