Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut s = secret.chars().collect::<Vec<char>>();
        let mut g = guess.chars().collect::<Vec<char>>();
        let mut a = 0;
        let mut b = 0;
        for i in 0..s.len() {
            if s[i] == g[i] {
                a += 1;
                s[i] = 'A';
                g[i] = 'A';
            }
        }
        for i in 0..s.len() {
            if s[i] == 'A' {
                continue;
            }
            for j in 0..g.len() {
                if g[j] == 'A' || s[i] != g[j] {
                    continue;
                }
                b += 1;
                g[j] = 'A';
                break;
            }
        }
        format!("{}A{}B", a, b)

=======
Suggestion 2

        let mut s = secret.chars().collect::<Vec<char>>();
        let mut g = guess.chars().collect::<Vec<char>>();
        let mut bulls = 0;
        let mut cows = 0;
        for i in 0..s.len() {
            if s[i] == g[i] {
                bulls += 1;
                s[i] = ' ';
                g[i] = ' ';
            }
        }
        for i in 0..s.len() {
            if s[i] == ' ' {
                continue;
            }
            for j in 0..g.len() {
                if g[j] == ' ' {
                    continue;
                }
                if s[i] == g[j] {
                    cows += 1;
                    s[i] = ' ';
                    g[j] = ' ';
                    break;
                }
            }
        }
        format!("{}A{}B", bulls, cows)

=======
Suggestion 3

        let mut bulls = 0;
        let mut cows = 0;
        let mut secret_chars = secret.chars().collect::<Vec<char>>();
        let mut guess_chars = guess.chars().collect::<Vec<char>>();
        for i in 0..secret_chars.len() {
            if secret_chars[i] == guess_chars[i] {
                bulls += 1;
                secret_chars[i] = '-';
                guess_chars[i] = '-';
            }
        }
        for i in 0..secret_chars.len() {
            if secret_chars[i] != '-' {
                if let Some(j) = guess_chars.iter().position(|&x| x == secret_chars[i]) {
                    cows += 1;
                    guess_chars[j] = '-';
                }
            }
        }
        format!("{}A{}B", bulls, cows)
    }
}

=======
Suggestion 4

        let mut secret = secret.chars().collect::<Vec<char>>();
        let mut guess = guess.chars().collect::<Vec<char>>();
        let mut bulls = 0;
        let mut cows = 0;
        let mut i = 0;
        while i < secret.len() {
            if secret[i] == guess[i] {
                secret.remove(i);
                guess.remove(i);
                bulls += 1;
            } else {
                i += 1;
            }
        }
        for (i, c) in secret.iter().enumerate() {
            if let Some(j) = guess.iter().position(|x| x == c) {
                cows += 1;
                guess.remove(j);
            }
        }
        format!("{}A{}B", bulls, cows)

=======
Suggestion 5

        let mut bulls = 0;
        let mut cows = 0;
        let mut secret_hash: Vec<i32> = vec![0; 10];
        let mut guess_hash: Vec<i32> = vec![0; 10];
        for (i, c) in secret.chars().enumerate() {
            if c == guess.chars().nth(i).unwrap() {
                bulls += 1;
            } else {
                secret_hash[c as usize - '0' as usize] += 1;
                guess_hash[guess.chars().nth(i).unwrap() as usize - '0' as usize] += 1;
            }
        }
        for i in 0..10 {
            cows += secret_hash[i].min(guess_hash[i]);
        }
        format!("{}A{}B", bulls, cows)

=======
Suggestion 6

        let mut bull = 0;
        let mut cow = 0;
        let mut secret_map = [0; 10];
        let mut guess_map = [0; 10];
        for (s, g) in secret.chars().zip(guess.chars()) {
            if s == g {
                bull += 1;
            } else {
                secret_map[s as usize - 48] += 1;
                guess_map[g as usize - 48] += 1;
            }
        }
        for i in 0..10 {
            cow += secret_map[i].min(guess_map[i]);
        }
        format!("{}A{}B", bull, cow)

=======
Suggestion 7

        let mut a = 0;
        let mut b = 0;
        let mut map = vec![0; 10];
        for (i, j) in secret.chars().zip(guess.chars()) {
            if i == j {
                a += 1;
            } else {
                if map[i as usize - '0' as usize] < 0 {
                    b += 1;
                }
                if map[j as usize - '0' as usize] > 0 {
                    b += 1;
                }
                map[i as usize - '0' as usize] += 1;
                map[j as usize - '0' as usize] -= 1;
            }
        }
        format!("{}A{}B", a, b)

=======
Suggestion 8

        let mut secret = secret.into_bytes();
        let mut guess = guess.into_bytes();
        let mut bulls = 0;
        let mut cows = 0;
        let mut secret_count = vec![0; 10];
        let mut guess_count = vec![0; 10];
        for i in 0..secret.len() {
            if secret[i] == guess[i] {
                bulls += 1;
            } else {
                secret_count[(secret[i] - b'0') as usize] += 1;
                guess_count[(guess[i] - b'0') as usize] += 1;
            }
        }
        for i in 0..10 {
            cows += secret_count[i].min(guess_count[i]);
        }
        format!("{}A{}B", bulls, cows)

=======
Suggestion 9

        let mut bulls = 0;
        let mut cows = 0;
        let mut secret = secret.chars().collect::<Vec<char>>();
        let mut guess = guess.chars().collect::<Vec<char>>();
        let mut secret_count = vec![0; 10];
        let mut guess_count = vec![0; 10];
        for i in 0..secret.len() {
            if secret[i] == guess[i] {
                bulls += 1;
            } else {
                secret_count[secret[i].to_digit(10).unwrap() as usize] += 1;
                guess_count[guess[i].to_digit(10).unwrap() as usize] += 1;
            }
        }
        for i in 0..10 {
            cows += secret_count[i].min(guess_count[i]);
        }
        format!("{}A{}B", bulls, cows)

=======
Suggestion 10

        let mut bulls = 0;
        let mut cows = 0;
        let mut secret = secret.as_bytes();
        let mut guess = guess.as_bytes();
        let mut secret_count = vec![0; 10];
        let mut guess_count = vec![0; 10];
        for i in 0..secret.len() {
            if secret[i] == guess[i] {
                bulls += 1;
            } else {
                secret_count[secret[i] as usize - 48] += 1;
                guess_count[guess[i] as usize - 48] += 1;
            }
        }
        for i in 0..10 {
            cows += secret_count[i].min(guess_count[i]);
        }
        format!("{}A{}B", bulls, cows)
    }
}
