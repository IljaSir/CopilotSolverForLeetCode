Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut slots = 1;
        for s in preorder.split(',') {
            slots -= 1;
            if slots < 0 {
                return false;
            }
            if s != "#" {
                slots += 2;
            }
        }
        slots == 0

=======
Suggestion 2

        let mut slots = 1;
        for s in preorder.split(',') {
            if slots == 0 {
                return false;
            }
            if s == "#" {
                slots -= 1;
            } else {
                slots += 1;
            }
        }
        slots == 0
    }
}

=======
Suggestion 3

        let mut slots = 1;
        for node in preorder.split(',') {
            if slots == 0 {
                return false;
            }
            if node == "#" {
                slots -= 1;
            } else {
                slots += 1;
            }
        }
        slots == 0

=======
Suggestion 4

        let mut slots = 1;
        for s in preorder.split(",") {
            slots -= 1;
            if slots < 0 { return false; }
            if s != "#" { slots += 2; }
        }
        slots == 0

=======
Suggestion 5

        let mut stack = Vec::new();
        for node in preorder.split(',') {
            stack.push(node);
            while stack.len() >= 3 && stack[stack.len() - 1] == "#" && stack[stack.len() - 2] == "#" && stack[stack.len() - 3] != "#" {
                stack.pop();
                stack.pop();
                stack.pop();
                stack.push("#");
            }
        }
        stack.len() == 1 && stack[0] == "#"

=======
Suggestion 6

        let mut stack = Vec::new();
        for s in preorder.split(',') {
            stack.push(s);
            while stack.len() >= 3 && stack[stack.len()-1] == "#" && stack[stack.len()-2] == "#" && stack[stack.len()-3] != "#" {
                stack.pop();
                stack.pop();
                stack.pop();
                stack.push("#");
            }
        }
        stack.len() == 1 && stack[0] == "#"
    }
}

=======
Suggestion 7

        let mut slots = 1;
        for p in preorder.split(',') {
            if slots == 0 { return false; }
            if p == "#" {
                slots -= 1;
            } else {
                slots += 1;
            }
        }
        slots == 0

=======
Suggestion 8

        let mut stack = vec![];
        for c in preorder.chars() {
            if c == ',' {
                continue;
            }
            if c == '#' {
                while stack.len() >= 2 {
                    if stack[stack.len() - 1] != '#' || stack[stack.len() - 2] == '#' {
                        break;
                    }
                    stack.pop();
                    stack.pop();
                }
                stack.push('#');
            } else {
                stack.push(c);
            }
        }
        stack.len() == 1 && stack[0] == '#'

=======
Suggestion 9

        let mut stack = Vec::new();
        for s in preorder.split(",") {
            if s == "#" {
                while let Some(&"#") = stack.last() {
                    stack.pop();
                    if stack.is_empty() {
                        return false;
                    }
                    stack.pop();
                }
            }
            stack.push(s);
        }
        stack.len() == 1 && stack[0] == "#"

=======
Suggestion 10

        let mut nodes = preorder.split(',').peekable();
        let mut slots = 1;
        while let Some(node) = nodes.next() {
            if slots == 0 { return false; }
            if node != "#" {
                slots += 1;
            } else {
                slots -= 1;
            }
        }
        slots == 0
    }
}
