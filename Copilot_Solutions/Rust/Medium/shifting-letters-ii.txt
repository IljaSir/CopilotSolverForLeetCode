Synthesizing 5/10 solutions

=======

        let mut v: Vec<char> = s.chars().collect();
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum += shifts[i][2] * (shifts[i][1] - shifts[i][0] + 1);
            v[shifts[i][0] as usize] = ((v[shifts[i][0] as usize] as u8 - 'a' as u8 + sum as u8) % 26 + 'a' as u8) as char;
        }
        v.into_iter().collect()

=======

        let mut s = s.into_bytes();
        let mut sum = 0;
        for shift in shifts.into_iter().rev() {
            let (start, end, direction) = (shift[0], shift[1], shift[2]);
            sum += (end - start + 1) * direction;
            for i in start..=end {
                s[i as usize] = ((s[i as usize] as i32 - 'a' as i32 + sum) % 26 + 'a' as i32) as u8;
            }
        }
        String::from_utf8(s).unwrap()

=======

        let mut s: Vec<u8> = s.into_bytes();
        let mut shift = 0;
        for i in (0..shifts.len()).rev() {
            shift = (shift + shifts[i][2] * (shifts[i][1] - shifts[i][0] + 1)) % 26;
            s[shifts[i][0] as usize] = ((s[shifts[i][0] as usize] - b'a' + shift as u8) % 26 + b'a') as u8;
        }
        String::from_utf8(s).unwrap()

=======

        let mut shifts = shifts;
        let mut s = s;
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum = (sum + shifts[i][2]) % 26;
            shifts[i][2] = sum;
        }
        for i in 0..shifts.len() {
            let idx = shifts[i][0] as usize;
            let shift = shifts[i][2] as u8;
            let ch = s.as_bytes()[idx];
            if ch + shift > b'z' {
                s.as_bytes_mut()[idx] = b'a' + (ch + shift - b'z' - 1);
            } else {
                s.as_bytes_mut()[idx] = ch + shift;
            }
        }
        s

=======

        let mut shifts = shifts;
        let mut s = s.into_bytes();
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum += shifts[i][2];
            sum %= 26;
            s[shifts[i][0] as usize] = ((s[shifts[i][0] as usize] as i32 - 'a' as i32 + sum) % 26 + 'a' as i32) as u8;
        }
        String::from_utf8(s).unwrap()
