Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut stack = Vec::new();
        let mut left = vec![0; nums.len()];
        let mut right = vec![nums.len(); nums.len()];
        for i in 0..nums.len() {
            while let Some(&j) = stack.last() {
                if nums[j] < nums[i] {
                    break;
                }
                right[j] = i;
                stack.pop();
            }
            if let Some(&j) = stack.last() {
                left[i] = j + 1;
            }
            stack.push(i);
        }
        let mut prefix = vec![0; nums.len() + 1];
        for i in 0..nums.len() {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        let mut ans = 0;
        for i in 0..nums.len() {
            ans = std::cmp::max(ans, nums[i] * (prefix[right[i]] - prefix[left[i]]));
        }
        (ans % 1000000007) as i32

=======

        let mut stack = vec![];
        let mut left = vec![0; nums.len()];
        let mut right = vec![nums.len(); nums.len()];
        for i in 0..nums.len() {
            while !stack.is_empty() && nums[*stack.last().unwrap()] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                left[i] = stack.last().unwrap() + 1;
            }
            stack.push(i);
        }
        stack.clear();
        for i in (0..nums.len()).rev() {
            while !stack.is_empty() && nums[*stack.last().unwrap()] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                right[i] = stack.last().unwrap();
            }
            stack.push(i);
        }
        let mut sum = vec![0; nums.len() + 1];
        for i in 0..nums.len() {
            sum[i + 1] = sum[i] + nums[i];
        }
        let mut res = 0;
        for i in 0..nums.len() {
            res = res.max(nums[i] * (sum[right[i]] - sum[left[i]]));
        }
        (res % (1_000_000_000 + 7)) as i32

=======

        
    }
}

=======

        let mut stack = vec![];
        let mut left = vec![0; nums.len()];
        let mut right = vec![nums.len(); nums.len()];
        let mut sum = vec![0; nums.len() + 1];
        let mut res = 0;
        for i in 0..nums.len() {
            while !stack.is_empty() && nums[*stack.last().unwrap()] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                left[i] = *stack.last().unwrap() + 1;
            }
            stack.push(i);
        }
        stack.clear();
        for i in (0..nums.len()).rev() {
            while !stack.is_empty() && nums[*stack.last().unwrap()] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                right[i] = *stack.last().unwrap();
            }
            stack.push(i);
        }
        for i in 0..nums.len() {
            sum[i + 1] = sum[i] + nums[i];
        }
        for i in 0..nums.len() {
            res = res.max(nums[i] * (sum[right[i]] - sum[left[i]]));
        }
        (res % 1000000007) as i32

=======

        let len = nums.len();
        let mut stack = vec![];
        let mut left = vec![0; len];
        let mut right = vec![len; len];
        for i in 0..len {
            while let Some(&j) = stack.last() {
                if nums[j] < nums[i] {
                    break;
                }
                right[j] = i;
                stack.pop();
            }
            left[i] = if let Some(&j) = stack.last() {
                j + 1
            } else {
                0
            };
            stack.push(i);
        }
        let mut sum = vec![0; len + 1];
        for i in 0..len {
            sum[i + 1] = sum[i] + nums[i];
        }
        let mut ans = 0;
        for i in 0..len {
            ans = ans.max(nums[i] as i64 * (sum[right[i]] - sum[left[i]]) as i64);
        }
        (ans % 1_000_000_007) as i32

=======

        let mut stack = vec![];
        let mut left = vec![0; nums.len()];
        let mut right = vec![nums.len(); nums.len()];
        let mut sum = vec![0; nums.len()];
        for i in 0..nums.len() {
            while !stack.is_empty() && nums[stack[stack.len() - 1]] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                left[i] = stack[stack.len() - 1] + 1;
            }
            stack.push(i);
        }
        stack.clear();
        for i in (0..nums.len()).rev() {
            while !stack.is_empty() && nums[stack[stack.len() - 1]] >= nums[i] {
                stack.pop();
            }
            if !stack.is_empty() {
                right[i] = stack[stack.len() - 1];
            }
            stack.push(i);
        }
        for i in 0..nums.len() {
            sum[i] = nums[i];
            sum[i] += if i > 0 { sum[i - 1] } else { 0 };
        }
        let mut result = 0;
        for i in 0..nums.len() {
            let s = sum[right[i] - 1] - sum[left[i]] + nums[left[i]];
            result = result.max(nums[i] * s);
        }
        (result % 1000000007) as i32
