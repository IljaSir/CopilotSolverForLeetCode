Synthesizing 10/10 solutions

=======

        let hour = hour % 12;
        let hour = hour as f64 + minutes as f64 / 60.0;
        let hour = hour * 30.0;
        let minutes = minutes as f64 * 6.0;
        let angle = (hour - minutes).abs();
        angle.min(360.0 - angle)
    }
}

=======

        let h = (hour % 12) as f64 + minutes as f64 / 60.0;
        let m = minutes as f64;
        let angle = (h - m / 12.0) * 30.0;
        let angle = angle.abs();
        if angle > 180.0 {
            360.0 - angle
        } else {
            angle
        }

=======

        let h = (hour % 12) as f64 + (minutes as f64 / 60.0);
        let m = minutes as f64;
        let angle = (h - m / 5.0).abs() * 30.0;
        if angle > 180.0 {
            360.0 - angle
        } else {
            angle
        }

=======

        let hour = hour as f64;
        let minutes = minutes as f64;
        let hour_angle = (hour % 12.0 + minutes / 60.0) * 30.0;
        let minute_angle = minutes * 6.0;
        let angle = (hour_angle - minute_angle).abs();
        if angle > 180.0 {
            360.0 - angle
        } else {
            angle
        }

=======

        let mut hour = hour;
        if hour == 12 {
            hour = 0;
        }
        let hour_angle = (hour as f64) * 30.0 + (minutes as f64) * 0.5;
        let minutes_angle = (minutes as f64) * 6.0;
        let mut angle = (hour_angle - minutes_angle).abs();
        if angle > 180.0 {
            angle = 360.0 - angle;
        }
        angle

=======

        let hour = hour % 12;
        let hour = hour as f64 + minutes as f64 / 60.0;
        let minutes = minutes as f64;
        let angle = (hour * 30.0 - minutes * 6.0).abs();
        if angle > 180.0 {
            return 360.0 - angle;
        }
        angle

=======

        let h: f64 = (hour % 12) as f64 + (minutes as f64 / 60.0);
        let m: f64 = minutes as f64;
        let angle = (h - m / 5.0).abs() * 30.0;
        if angle > 180.0 { 360.0 - angle } else { angle }
    }
}

=======

        let mut m = minutes as f64;
        let mut h = hour as f64;
        h += m / 60.0;
        m *= 6.0;
        h *= 30.0;
        let mut angle = (m - h).abs();
        if angle > 180.0 {
            angle = 360.0 - angle;
        }
        angle

=======

        let hour = hour % 12;
        let mut angle = (hour as f64 * 30.0 + minutes as f64 * 0.5) - minutes as f64 * 6.0;
        if angle < 0.0 {
            angle = -angle;
        }
        if angle > 180.0 {
            angle = 360.0 - angle;
        }
        angle

=======

        let mut h = (hour as f64) * 30.0 + (minutes as f64) * 0.5;
        let m = (minutes as f64) * 6.0;
        let mut ret = (h - m).abs();
        if ret > 180.0 {
            ret = 360.0 - ret;
        }
        ret
