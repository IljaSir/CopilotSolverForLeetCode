Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = 0;
        for i in 0..rating.len() {
            for j in i+1..rating.len() {
                for k in j+1..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..rating.len() {
            for j in i+1..rating.len() {
                for k in j+1..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        count += 1;
                    }
                }
            }
        }
        count

=======

        let mut res = 0;
        for i in 0..rating.len() {
            for j in i+1..rating.len() {
                for k in j+1..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        res += 1;
                    }
                }
            }
        }
        res

=======

        let mut result = 0;
        for i in 0..rating.len() {
            for j in i+1..rating.len() {
                for k in j+1..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        result += 1;
                    }
                }
            }
        }
        result

=======

        let mut teams = 0;
        for i in 0..rating.len() {
            for j in (i + 1)..rating.len() {
                for k in (j + 1)..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        teams += 1;
                    }
                }
            }
        }
        return teams;

=======

        let mut num_teams = 0;
        for i in 0..rating.len() {
            for j in i+1..rating.len() {
                for k in j+1..rating.len() {
                    if (rating[i] < rating[j] && rating[j] < rating[k]) || (rating[i] > rating[j] && rating[j] > rating[k]) {
                        num_teams += 1;
                    }
                }
            }
        }
        num_teams
    }
}

=======

        let mut count = 0;
        for (i, &a) in rating.iter().enumerate() {
            for (j, &b) in rating[i+1..].iter().enumerate() {
                for &c in &rating[i+j+2..] {
                    if a < b && b < c || a > b && b > c {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}

=======

        let mut cnt = 0;
        for i in 0..rating.len() {
            for j in 0..i {
                for k in 0..j {
                    if (rating[j] > rating[i] && rating[k] > rating[j])
                        || (rating[j] < rating[i] && rating[k] < rating[j])
                    {
                        cnt += 1;
                    }
                }
            }
        }
        cnt
    }
}

=======

        let mut res = 0;
        for i in 0..rating.len() {
            let mut less = 0;
            let mut greater = 0;
            for j in i+1..rating.len() {
                if rating[j] > rating[i] {
                    greater += 1;
                }
                if rating[j] < rating[i] {
                    less += 1;
                }
            }
            res += less * greater;
            res += (i as i32) * greater;
            res += (rating.len() - i - 1) as i32 * less;
        }
        res
