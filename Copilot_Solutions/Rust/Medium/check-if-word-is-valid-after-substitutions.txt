Synthesizing 10/10 solutions

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                'c' => {
                    if stack.pop() != Some('b') {
                        return false;
                    }
                    if stack.pop() != Some('a') {
                        return false;
                    }
                }
                _ => {
                    stack.push(c);
                }
            }
        }
        stack.len() == 0
    }
}

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                'a' => stack.push('a'),
                'b' => {
                    if let Some('a') = stack.last() {
                        stack.pop();
                        stack.push('b');
                    } else {
                        return false;
                    }
                },
                'c' => {
                    if let Some('b') = stack.last() {
                        stack.pop();
                        stack.pop();
                    } else {
                        return false;
                    }
                },
                _ => return false,
            }
        }
        stack.is_empty()
    }
}

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                'a' => stack.push('a'),
                'b' => {
                    if stack.last() == Some(&'a') {
                        stack.push('b');
                    } else {
                        return false;
                    }
                },
                'c' => {
                    if stack.last() == Some(&'b') {
                        stack.pop();
                        stack.pop();
                    } else {
                        return false;
                    }
                },
                _ => return false,
            }
        }
        stack.is_empty()

=======

        let mut stack = vec![];
        for c in s.chars() {
            if c == 'c' {
                if stack.len() < 2 || stack.pop() != Some('b') || stack.pop() != Some('a') {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        stack.is_empty()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if c == 'c' {
                if stack.len() < 2 {
                    return false;
                }
                if stack[stack.len() - 1] != 'b' || stack[stack.len() - 2] != 'a' {
                    return false;
                }
                stack.pop();
                stack.pop();
            } else {
                stack.push(c);
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if c == 'c' {
                if stack.len() < 2 || stack[stack.len()-1] != 'b' || stack[stack.len()-2] != 'a' {
                    return false;
                }
                stack.pop();
                stack.pop();
            } else {
                stack.push(c);
            }
        }
        stack.is_empty()

=======

        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            if c == 'c' {
                if let (Some(b), Some(a)) = (stack.pop(), stack.pop()) {
                    if !(a == 'a' && b == 'b') {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        stack.is_empty()
    }
}

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if c == 'c' {
                if stack.len() < 2 {
                    return false;
                }
                if stack.pop().unwrap() != 'b' {
                    return false;
                }
                if stack.pop().unwrap() != 'a' {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        stack.is_empty()

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            match c {
                'a' => stack.push(c),
                'b' => {
                    if stack.last() == Some(&'a') {
                        stack.push(c);
                    } else {
                        return false;
                    }
                }
                'c' => {
                    if stack.len() >= 2 && stack[stack.len() - 2] == 'a' {
                        stack.pop();
                        stack.pop();
                    } else {
                        return false;
                    }
                }
                _ => unreachable!(),
            }
        }
        stack.is_empty()

=======

        let mut stack = vec![];
        for c in s.chars() {
            match c {
                'a' => {
                    stack.push('a');
                },
                'b' => {
                    if stack.len() > 0 && stack[stack.len() - 1] == 'a' {
                        stack.push('b');
                    } else {
                        return false;
                    }
                },
                'c' => {
                    if stack.len() > 1 && stack[stack.len() - 1] == 'b' && stack[stack.len() - 2] == 'a' {
                        stack.pop();
                        stack.pop();
                    } else {
                        return false;
                    }
                },
                _ => {
                    return false;
                }
            }
        }
        stack.len() == 0
