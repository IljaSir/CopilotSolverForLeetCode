Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut res = 0;
        while i < j {
            res += nums[j] - nums[i];
            i += 1;
            j -= 1;
        }
        res

=======
Suggestion 2

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut ans = 0;
        while i < j {
            ans += nums[j] - nums[i];
            i += 1;
            j -= 1;
        }
        ans

=======
Suggestion 3

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut result = 0;
        while i < j {
            result += nums[j] - nums[i];
            i += 1;
            j -= 1;
        }
        result
    }
}

=======
Suggestion 4

        let mut nums = nums;
        nums.sort();
        let mid = nums[nums.len() / 2];
        nums.iter().map(|n| (n - mid).abs()).sum()

=======
Suggestion 5

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut sum = 0;
        for i in 0..n {
            sum += (nums[i] - nums[n / 2]).abs();
        }
        sum

=======
Suggestion 6

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut res = 0;
        for i in 0..n/2 {
            res += nums[n-1-i] - nums[i];
        }
        res

=======
Suggestion 7

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mid = nums[nums.len() / 2];
        for n in nums {
            res += (n - mid).abs();
        }
        res

=======
Suggestion 8

        let mut nums = nums;
        nums.sort_unstable();
        let mut res = 0;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            res += nums[j] - nums[i];
            i += 1;
            j -= 1;
        }
        res

=======
Suggestion 9

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mid = nums[n / 2];
        nums.iter().map(|&x| (x - mid).abs()).sum()
    }
}

=======
Suggestion 10

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mid = nums[n / 2];
        nums.into_iter().map(|v| (v - mid).abs()).sum()
