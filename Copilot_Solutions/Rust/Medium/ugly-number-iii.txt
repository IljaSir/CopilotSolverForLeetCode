Synthesizing 7/10 solutions (Duplicates hidden)

=======

        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32, c as i32);
        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32, c as i32);
        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32, c as i32);
        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32, c as i32);
        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32, c as i32);
        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (a, b, c) = (a.min(b).min(c), a.max(b).min(c), a.max(b).max(c));
        let (a, b, c) = (a as i32, b as i32,

=======

        let (a, b, c) = (a as i64, b as i64, c as i64);
        let (mut l, mut r) = (1, 2 * 10i64.pow(9));
        while l < r {
            let m = l + (r - l) / 2;
            let count = m / a + m / b + m / c - m / (a.lcm(&b)) - m / (a.lcm(&c)) - m / (b.lcm(&c)) + m / (a.lcm(&b.lcm(&c)));
            if count < n as i64 {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l as i32

=======

        let mut lo = 1;
        let mut hi = 2 * 1e9 as i64;
        let a = a as i64;
        let b = b as i64;
        let c = c as i64;
        let ab = a * b / gcd(a, b);
        let bc = b * c / gcd(b, c);
        let ac = a * c / gcd(a, c);
        let abc = ab * c / gcd(ab, c);
        while lo < hi {
            let mid = lo + (hi - lo) / 2;
            let cnt = mid / a + mid / b + mid / c - mid / ab - mid / bc - mid / ac + mid / abc;
            if cnt >= n as i64 {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo as i32
    }
}

=======

        
    }
}

=======

        let mut left = 0;
        let mut right = 2 * 10i64.pow(9);
        let ab = a.lcm(&b);
        let ac = a.lcm(&c);
        let bc = b.lcm(&c);
        let abc = a.lcm(&bc);
        while left < right {
            let mid = (left + right) / 2;
            let count = mid / a + mid / b + mid / c - mid / ab - mid / ac - mid / bc + mid / abc;
            if count < n as i64 {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        right as i32
