Synthesizing 8/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    count += 1;
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<char>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[i].len() || grid[i][j] == '0' {
            return;
        }
        grid[i][j] = '0';
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j + 1);
        if i > 0 {
            Self::dfs(grid, i - 1, j);
        }
        if j > 0 {
            Self::dfs(grid, i, j - 1);
        }

=======
Suggestion 2

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    count += 1;
                    dfs(&mut grid, i, j);
                }
            }
        }
        count
    }
}

=======
Suggestion 3

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    count += 1;
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<char>>, i: usize, j: usize) {
        if i < grid.len() && j < grid[i].len() && grid[i][j] == '1' {
            grid[i][j] = '0';
            Self::dfs(grid, i + 1, j);
            Self::dfs(grid, i, j + 1);
            if i > 0 {
                Self::dfs(grid, i - 1, j);
            }
            if j > 0 {
                Self::dfs(grid, i, j - 1);
            }
        }
    }
}

=======
Suggestion 4

        let mut grid = grid;
        let mut islands = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    islands += 1;
                    Solution::dfs(&mut grid, i, j);
                }
            }
        }
        islands
    }
    fn dfs(grid: &mut Vec<Vec<char>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[i].len() || grid[i][j] != '1' {
            return;
        }
        grid[i][j] = 'X';
        Solution::dfs(grid, i + 1, j);
        Solution::dfs(grid, i, j + 1);
        Solution::dfs(grid, i - 1, j);
        Solution::dfs(grid, i, j - 1);
    }
}

=======
Suggestion 5

        let mut visited = vec![vec![false; grid[0].len()]; grid.len()];
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if !visited[i][j] && grid[i][j] == '1' {
                    Self::dfs(&grid, &mut visited, i, j);
                    count += 1;
                }
            }
        }
        count
    }
    fn dfs(grid: &Vec<Vec<char>>, visited: &mut Vec<Vec<bool>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[i].len() || i < 0 || j < 0 || visited[i][j] || grid[i][j] != '1' {
            return;
        }
        visited[i][j] = true;
        Self::dfs(grid, visited, i + 1, j);
        Self::dfs(grid, visited, i - 1, j);
        Self::dfs(grid, visited, i, j + 1);
        Self::dfs(grid, visited, i, j - 1);
    }
}

=======
Suggestion 6

        let mut num = 0;
        let mut grid = grid;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    num += 1;
                    Self::dfs(&mut grid, i, j);
                }
            }
        }
        num
    }
    fn dfs(grid: &mut Vec<Vec<char>>, i: usize, j: usize) {
        if i >= grid.len() || j >= grid[i].len() || grid[i][j] != '1' {
            return;
        }
        grid[i][j] = '0';
        Self::dfs(grid, i + 1, j);
        Self::dfs(grid, i, j + 1);
        if i > 0 {
            Self::dfs(grid, i - 1, j);
        }
        if j > 0 {
            Self::dfs(grid, i, j - 1);
        }
    }
}

=======
Suggestion 7

        let mut grid = grid;
        let mut count = 0;
        let mut stack = vec![];
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == '1' {
                    count += 1;
                    stack.push((i, j));
                    while !stack.is_empty() {
                        let (x, y) = stack.pop().unwrap();
                        if grid[x][y] == '1' {
                            grid[x][y] = '0';
                            if x > 0 {
                                stack.push((x - 1, y));
                            }
                            if x < grid.len() - 1 {
                                stack.push((x + 1, y));
                            }
                            if y > 0 {
                                stack.push((x, y - 1));
                            }
                            if y < grid[i].len() - 1 {
                                stack.push((x, y + 1));
                            }
                        }
                    }
                }
            }
        }
        count
    }
}
