Synthesizing 10/10 solutions

=======

        let mut min = nums[0];
        let mut max = nums[0];
        let mut min_index = 0;
        let mut max_index = 0;
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
                min_index = i;
            }
            if nums[i] > max {
                max = nums[i];
                max_index = i;
            }
        }
        if min_index < max_index {
            min_index as i32 + (nums.len() - 1 - max_index) as i32
        } else {
            min_index as i32 + (nums.len() - 2 - max_index) as i32
        }

=======

        let mut min = nums[0];
        let mut max = nums[0];
        let mut min_index = 0;
        let mut max_index = 0;
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
                min_index = i;
            }
            if nums[i] > max {
                max = nums[i];
                max_index = i;
            }
        }
        if min_index < max_index {
            min_index as i32 + (nums.len() - 1 - max_index) as i32
        } else {
            min_index as i32 + (nums.len() - 1 - max_index - 1) as i32
        }

=======

        let mut min = nums[0];
        let mut max = nums[0];
        let mut min_count = 0;
        let mut max_count = 0;
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
                min_count = i as i32;
            }
            if nums[i] > max {
                max = nums[i];
                max_count = i as i32;
            }
        }
        let len = nums.len() as i32;
        min_count.min(len - 1 - max_count)

=======

        let mut min = nums[0];
        let mut max = nums[0];
        let mut min_count = 0;
        let mut max_count = 0;
        for i in 0..nums.len() {
            if nums[i] < min {
                min = nums[i];
                min_count = 1;
            } else if nums[i] == min {
                min_count += 1;
            }
            if nums[i] > max {
                max = nums[i];
                max_count = 1;
            } else if nums[i] == max {
                max_count += 1;
            }
        }
        (nums.len() - min_count - max_count) as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut count = 0;
        while i < j {
            if nums[i] == nums[j] {
                count += 1;
                i += 1;
                j -= 1;
            } else if nums[i] < nums[j] {
                i += 1;
            } else {
                j -= 1;
            }
        }
        count
    }
}

=======

        let n = nums.len();
        let (mut l, mut r) = (0, n - 1);
        let (mut min, mut max) = (nums[0], nums[n - 1]);
        while l < r {
            if min < max {
                l += 1;
                min = min.max(nums[l]);
            } else {
                r -= 1;
                max = max.min(nums[r]);
            }
        }
        (l + n - r - 1) as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut min = nums[0];
        let mut max = nums[nums.len()-1];
        let mut count = 0;
        for i in 0..nums.len(){
            if nums[i] == min || nums[i] == max{
                count += 1;
            }
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut i = 0;
        while i < nums.len() - 1 {
            if nums[i] == nums[i + 1] {
                res += 1;
            }
            i += 1;
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut pre = 0;
        let mut res = 0;
        for i in 1..nums.len() {
            if nums[i] == nums[i - 1] {
                res += 1;
            } else {
                pre += 1;
                res = res.min(pre);
            }
        }
        res as i32

=======

        let (mut min,mut max)=(0,0);
        let (mut min_val,mut max_val)=(nums[0],nums[0]);
        for i in 1..nums.len() {
            if nums[i] < min_val {
                min += 1;
                min_val = nums[i];
            }
            if nums[i] > max_val {
                max += 1;
                max_val = nums[i];
            }
        }
        min.min(max)
