Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut dp = vec![0; books.len() + 1];
        for i in 0..books.len() {
            let mut width = books[i][0];
            let mut height = books[i][1];
            dp[i + 1] = dp[i] + height;
            let mut j = i;
            while j > 0 && width + books[j - 1][0] <= shelf_width {
                j -= 1;
                width += books[j][0];
                height = height.max(books[j][1]);
                dp[i + 1] = dp[i + 1].min(dp[j] + height);
            }
        }
        dp[books.len()]

=======

        let mut dp = vec![0; books.len() + 1];
        for i in 1..=books.len() {
            let mut width = books[i - 1][0];
            let mut height = books[i - 1][1];
            dp[i] = dp[i - 1] + height;
            let mut j = i - 1;
            while j > 0 && width + books[j - 1][0] <= shelf_width {
                j -= 1;
                width += books[j][0];
                height = height.max(books[j][1]);
                dp[i] = dp[i].min(dp[j] + height);
            }
        }
        dp[books.len()]

=======

        let mut dp = vec![0; books.len() + 1];
        for i in 1..=books.len() {
            let mut w = books[i - 1][0];
            let mut h = books[i - 1][1];
            dp[i] = dp[i - 1] + h;
            let mut j = i - 1;
            while j > 0 && w + books[j - 1][0] <= shelf_width {
                j -= 1;
                w += books[j][0];
                h = h.max(books[j][1]);
                dp[i] = dp[i].min(dp[j] + h);
            }
        }
        dp[books.len()]

=======

        let n = books.len();
        let mut dp = vec![0; n + 1];
        for i in (0..n).rev() {
            let mut width = 0;
            let mut height = 0;
            dp[i] = i32::MAX;
            for j in i..n {
                width += books[j][0];
                if width > shelf_width {
                    break;
                }
                height = height.max(books[j][1]);
                dp[i] = dp[i].min(dp[j + 1] + height);
            }
        }
        dp[0]

=======

        let mut dp = vec![0; books.len()];
        for i in 0..books.len() {
            let mut width = books[i][0];
            let mut height = books[i][1];
            dp[i] = dp[i.saturating_sub(1)] + height;
            for j in (0..i).rev() {
                width += books[j][0];
                if width > shelf_width {
                    break;
                }
                height = height.max(books[j][1]);
                dp[i] = dp[i].min(dp[j.saturating_sub(1)] + height);
            }
        }
        dp[books.len() - 1]

=======

        let n = books.len();
        let mut dp = vec![0; n + 1];
        for i in 0..n {
            let mut j = i;
            let mut max_height = 0;
            let mut width = shelf_width;
            while j < n && width >= books[j][0] {
                max_height = max_height.max(books[j][1]);
                width -= books[j][0];
                dp[i + 1] = dp[i + 1].min(dp[j] + max_height);
                j += 1;
            }
        }
        dp[n]

=======

        
    }
}
