Synthesizing 7/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut v = Vec::new();
        let mut l = label;
        let mut i = 0;
        while l > 0 {
            v.push(l);
            l /= 2;
            i += 1;
        }
        let mut j = 0;
        while j < i {
            let mut k = v[j];
            if j % 2 == 1 {
                k = 2_i32.pow(j as u32) + 2_i32.pow((j+1) as u32) - 1 - k;
            }
            v[j] = k;
            j += 1;
        }
        let mut j = 0;
        while j < i / 2 {
            let k = v[j];
            v[j] = v[i - j - 1];
            v[i - j - 1] = k;
            j += 1;
        }
        v
    }
}

=======

        let mut res = vec![label];
        let mut l = label;
        while l > 1 {
            l /= 2;
            res.push(l);
        }
        let mut i = 0;
        let mut j = res.len() - 1;
        while i < j {
            res[i] = (1 << (i + 1)) + (1 << i) - 1 - res[i];
            res[j] = (1 << (j + 1)) + (1 << j) - 1 - res[j];
            i += 1;
            j -= 1;
        }
        res

=======

        let mut ans = Vec::new();
        let mut i = label;
        while i > 0 {
            ans.push(i);
            i /= 2;
        }
        let mut j = 0;
        let mut k = ans.len();
        while j < k {
            let mut x = 2i32.pow(j as u32);
            let mut y = 2i32.pow((j + 1) as u32) - 1;
            while x < y {
                ans.swap(x as usize, y as usize);
                x += 1;
                y -= 1;
            }
            j += 1;
            k -= 1;
        }
        ans

=======

        let mut res = vec![label];
        let mut n = label;
        let mut k = 1;
        while n > 1 {
            n >>= 1;
            k <<= 1;
            res.push(n);
        }
        let mut i = 1;
        let mut j = k;
        while i < j {
            res[i] = k - 1 - res[i] + k;
            i += 1;
            j -= 1;
        }
        res.reverse();
        res

=======

        let mut res = vec![label];
        let mut i = label;
        while i > 1 {
            i = i / 2;
            i = i ^ (1 << i.trailing_zeros() - 1);
            res.push(i);
        }
        res.reverse();
        res
