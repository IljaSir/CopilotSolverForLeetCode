Synthesizing 10/10 solutions

=======

        let mut less = Vec::new();
        let mut equal = Vec::new();
        let mut greater = Vec::new();
        for num in nums {
            if num < pivot {
                less.push(num);
            } else if num == pivot {
                equal.push(num);
            } else {
                greater.push(num);
            }
        }
        let mut res = Vec::new();
        res.append(&mut less);
        res.append(&mut equal);
        res.append(&mut greater);
        res

=======

        let mut less = Vec::new();
        let mut equal = Vec::new();
        let mut greater = Vec::new();
        for n in nums {
            if n < pivot {
                less.push(n);
            } else if n == pivot {
                equal.push(n);
            } else {
                greater.push(n);
            }
        }
        let mut result = Vec::new();
        result.append(&mut less);
        result.append(&mut equal);
        result.append(&mut greater);
        return result;
    }
}

=======

        let mut less = Vec::new();
        let mut equal = Vec::new();
        let mut greater = Vec::new();
        for n in nums {
            if n < pivot {
                less.push(n);
            } else if n == pivot {
                equal.push(n);
            } else {
                greater.push(n);
            }
        }
        let mut result = Vec::new();
        result.append(&mut less);
        result.append(&mut equal);
        result.append(&mut greater);
        result
    }
}

=======

        let mut nums = nums;
        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut i = 0;
        while i <= right {
            if nums[i] < pivot {
                nums.swap(left, i);
                left += 1;
                i += 1;
            } else if nums[i] > pivot {
                nums.swap(right, i);
                right -= 1;
            } else {
                i += 1;
            }
        }
        nums

=======

        let mut less = Vec::new();
        let mut equal = Vec::new();
        let mut greater = Vec::new();
        for i in 0..nums.len() {
            if nums[i] < pivot {
                less.push(nums[i]);
            } else if nums[i] > pivot {
                greater.push(nums[i]);
            } else {
                equal.push(nums[i]);
            }
        }
        less.extend(equal);
        less.extend(greater);
        less
    }
}

=======

        let mut nums = nums;
        let mut l = 0;
        let mut r = nums.len() - 1;
        let mut i = 0;
        while i <= r {
            if nums[i] < pivot {
                nums.swap(i, l);
                l += 1;
                i += 1;
            } else if nums[i] > pivot {
                nums.swap(i, r);
                r -= 1;
            } else {
                i += 1;
            }
        }
        nums

=======

        let mut less = vec![];
        let mut equal = vec![];
        let mut greater = vec![];
        for n in nums {
            if n < pivot {
                less.push(n);
            } else if n > pivot {
                greater.push(n);
            } else {
                equal.push(n);
            }
        }
        let mut result = vec![];
        result.append(&mut less);
        result.append(&mut equal);
        result.append(&mut greater);
        result
    }
}

=======

        let mut nums = nums;
        let mut i = 0;
        let mut j = 0;
        let mut k = nums.len() - 1;
        while j <= k {
            if nums[j] < pivot {
                nums.swap(i, j);
                i += 1;
                j += 1;
            } else if nums[j] > pivot {
                nums.swap(j, k);
                k -= 1;
            } else {
                j += 1;
            }
        }
        nums
    }
}

=======

        let mut less = Vec::new();
        let mut equal = Vec::new();
        let mut greater = Vec::new();
        for &num in nums.iter() {
            if num < pivot {
                less.push(num);
            } else if num == pivot {
                equal.push(num);
            } else {
                greater.push(num);
            }
        }
        less.append(&mut equal);
        less.append(&mut greater);
        less
    }
}

=======

        let mut res = Vec::new();
        let mut mid = Vec::new();
        for num in nums {
            if num < pivot {
                res.push(num);
            } else if num > pivot {
                mid.push(num);
            } else {
                res.push(num);
            }
        }
        res.append(&mut mid);
        res
    }
}
