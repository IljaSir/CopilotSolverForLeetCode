Synthesizing 8/10 solutions (Duplicates hidden)

=======
Suggestion 1

        
    }
}

=======
Suggestion 2

        let mut stack: Vec<i32> = Vec::new();
        stack.push(0);
        let mut result = 0;
        for line in input.lines() {
            let level = line.chars().take_while(|c| *c == '\t').count() as i32;
            while level + 1 < stack.len() as i32 {
                stack.pop();
            }
            let len = stack.last().unwrap() + line.len() as i32 - level;
            stack.push(len);
            if line.contains('.') {
                result = result.max(len + (stack.len() - 2) as i32);
            }
        }
        result
    }
}

=======
Suggestion 3

        let mut max = 0;
        let mut stack = vec![];
        for s in input.split_terminator('\n') {
            let level = s.chars().take_while(|&c| c == '\t').count();
            while stack.len() > level {
                stack.pop();
            }
            let len = stack.last().unwrap_or(&0) + s.len() - level + 1;
            if s.contains('.') {
                max = max.max(len - 1);
            } else {
                stack.push(len);
            }
        }
        max as i32

=======
Suggestion 4

        let mut stack = vec![];
        let mut max_len = 0;
        let mut cur_len = 0;
        for line in input.lines() {
            let level = line.chars().take_while(|&c| c == '\t').count();
            let name = line.chars().skip(level).collect::<String>();
            while stack.len() > level {
                cur_len -= stack.pop().unwrap();
            }
            if name.contains('.') {
                max_len = max_len.max(cur_len + name.len());
            } else {
                stack.push(name.len() + 1);
                cur_len += name.len() + 1;
            }
        }
        max_len as i32
