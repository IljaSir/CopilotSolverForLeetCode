Synthesizing 6/10 solutions

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            for j in lower..upper + 1 {
                if let Some(&v) = map.get(&(sum - j)) {
                    count += v;
                }
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count as i64
    }
}

=======

        
    }
}

=======

        let mut pairs = 0;
        let mut left = 0;
        let mut right = 0;
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            while left < i && sum - nums[left] >= lower {
                sum -= nums[left];
                left += 1;
            }
            while right < i && sum - nums[right] > upper {
                sum -= nums[right];
                right += 1;
            }
            pairs += (i - left) as i64;
            if left < right && sum - nums[right] >= lower {
                pairs -= 1;
            }
        }
        pairs

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for (i, num) in nums.iter().enumerate() {
            for j in i + 1..nums.len() {
                if lower <= num + nums[j] && num + nums[j] <= upper {
                    count += 1;
                }
            }
            let cnt = map.entry(num).or_insert(0);
            *cnt += 1;
        }
        for (num, cnt) in map.iter() {
            if cnt > &1 {
                count += cnt * (cnt - 1) / 2;
            }
        }
        count as i64
    }
}

=======

        let mut sum = 0;
        let mut count = 0;
        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for num in nums {
            sum += num;
            for i in lower..=upper {
                if let Some(&v) = map.get(&(sum - i)) {
                    count += v;
                }
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count

=======

        let mut res = 0;
        let mut sum = 0;
        let mut cnt = vec![0; 20001];
        cnt[10000] = 1;
        for i in 0..nums.len() {
            sum += nums[i];
            for j in lower..=upper {
                res += cnt[(sum - j + 10000) as usize];
            }
            cnt[(sum + 10000) as usize] += 1;
        }
        res
