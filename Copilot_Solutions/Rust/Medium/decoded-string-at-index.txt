Synthesizing 10/10 solutions

=======

        let mut k = k as i64;
        let mut size = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                size *= c.to_digit(10).unwrap() as i64;
            } else {
                size += 1;
            }
        }
        for c in s.chars().rev() {
            k %= size;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_digit(10) {
                size /= c.to_digit(10).unwrap() as i64;
            } else {
                size -= 1;
            }
        }
        "".to_string()

=======

        let mut k = k as u64;
        let mut len = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                len *= c.to_digit(10).unwrap() as u64;
            } else {
                len += 1;
            }
        }
        for c in s.chars().rev() {
            k %= len;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_digit(10) {
                len /= c.to_digit(10).unwrap() as u64;
            } else {
                len -= 1;
            }
        }
        "".to_string()
    }
}

=======

        let mut k = k as usize;
        let mut size = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                size *= c.to_digit(10).unwrap() as usize;
            } else {
                size += 1;
            }
        }
        for c in s.chars().rev() {
            k %= size;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_digit(10) {
                size /= c.to_digit(10).unwrap() as usize;
            } else {
                size -= 1;
            }
        }
        "".to_string()
    }
}

=======

        let mut k = k as u64;
        let mut n = 0;
        for c in s.chars() {
            if c.is_digit(10) {
                n *= c.to_digit(10).unwrap() as u64;
            } else {
                n += 1;
            }
        }
        for c in s.chars().rev() {
            k %= n;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_digit(10) {
                n /= c.to_digit(10).unwrap() as u64;
            } else {
                n -= 1;
            }
        }
        "".to_string()

=======

        let mut k = k as i64;
        let mut n = 0;
        for c in s.chars() {
            if c.is_alphabetic() {
                n += 1;
            } else {
                n *= c.to_digit(10).unwrap() as i64;
            }
        }
        let mut k = k - 1;
        let mut n = n - 1;
        for c in s.chars().rev() {
            if c.is_alphabetic() {
                if k == n {
                    return c.to_string();
                }
                n -= 1;
            } else {
                let d = c.to_digit(10).unwrap() as i64;
                n /= d;
                k %= n + 1;
            }
        }
        "".to_string()

=======

        let mut k = k as i64;
        let mut len = 0;
        for c in s.chars() {
            if c.is_alphabetic() {
                len += 1;
            } else {
                len *= c.to_digit(10).unwrap() as i64;
            }
        }
        for c in s.chars().rev() {
            k %= len;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_alphabetic() {
                len -= 1;
            } else {
                len /= c.to_digit(10).unwrap() as i64;
            }
        }
        "".to_string()

=======

        let mut k = k as i64;
        let mut n = 0i64;
        for c in s.chars() {
            if c.is_digit(10) {
                n *= c.to_digit(10).unwrap() as i64;
            } else {
                n += 1;
            }
        }
        for c in s.chars().rev() {
            k %= n;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_digit(10) {
                n /= c.to_digit(10).unwrap() as i64;
            } else {
                n -= 1;
            }
        }
        "".to_string()

=======

        let mut k = k;
        let mut size = 0;
        for c in s.chars() {
            if c.is_numeric() {
                size *= c.to_digit(10).unwrap() as i64;
            } else {
                size += 1;
            }
        }

        for c in s.chars().rev() {
            k %= size;
            if k == 0 && c.is_alphabetic() {
                return c.to_string();
            }
            if c.is_numeric() {
                size /= c.to_digit(10).unwrap() as i64;
            } else {
                size -= 1;
            }
        }
        "".to_string()

=======

        let k = k as usize;
        let mut len = 0;
        let mut i = 0;
        let mut ch = ' ';
        for c in s.chars() {
            if c.is_ascii_digit() {
                len *= c.to_digit(10).unwrap() as usize;
            } else {
                len += 1;
            }
        }
        for c in s.chars().rev() {
            i += 1;
            if c.is_ascii_digit() {
                len /= c.to_digit(10).unwrap() as usize;
                k %= len;
            } else {
                if k == len || k == 0 {
                    ch = c;
                    break;
                }
                len -= 1;
            }
        }
        ch.to_string()
    }
}

=======

        let k = k as u64;
        let mut len = 0;
        let mut i = 0;
        let mut k = k;
        let s = s.into_bytes();
        for i in 0..s.len() {
            if s[i] >= b'2' {
                len *= s[i] as u64 - b'0' as u64;
            } else {
                len += 1;
            }
            if len >= k {
                break;
            }
        }
        while i < s.len() {
            if s[i] >= b'2' {
                len /= s[i] as u64 - b'0' as u64;
                k %= len;
            } else {
                if k == len || k == 0 {
                    return String::from_utf8(vec![s[i]]).unwrap();
                }
                len -= 1;
            }
            i -= 1;
        }
        unreachable!();
