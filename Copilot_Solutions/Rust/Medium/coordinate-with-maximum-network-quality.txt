Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let mut max = 0;
        let mut res = vec![0, 0];
        for i in 0..51 {
            for j in 0..51 {
                let mut sum = 0;
                for t in &towers {
                    let d = ((t[0] - i).pow(2) + (t[1] - j).pow(2)) as f64;
                    if d <= (radius * radius) as f64 {
                        sum += (t[2] as f64 / (1.0 + d.sqrt())).floor() as i32;
                    }
                }
                if sum > max {
                    max = sum;
                    res[0] = i;
                    res[1] = j;
                }
            }
        }
        res

=======

        let mut max_quality = 0;
        let mut max_quality_pos = vec![0, 0];
        for x in 0..51 {
            for y in 0..51 {
                let mut quality = 0;
                for tower in &towers {
                    let dist = ((x - tower[0]).pow(2) + (y - tower[1]).pow(2)) as f64;
                    if dist <= (radius * radius) as f64 {
                        quality += (tower[2] as f64 / (1.0 + dist.sqrt())) as i32;
                    }
                }
                if quality > max_quality {
                    max_quality = quality;
                    max_quality_pos = vec![x, y];
                } else if quality == max_quality {
                    if x < max_quality_pos[0] {
                        max_quality_pos = vec![x, y];
                    } else if x == max_quality_pos[0] && y < max_quality_pos[1] {
                        max_quality_pos = vec![x, y];
                    }
                }
            }
        }
        max_quality_pos
    }
}
