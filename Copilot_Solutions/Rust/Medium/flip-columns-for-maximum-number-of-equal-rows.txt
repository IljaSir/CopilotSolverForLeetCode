Synthesizing 5/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut map = std::collections::HashMap::new();
        for row in matrix {
            let mut x = 0;
            let mut y = 0;
            for i in 0..row.len() {
                if row[i] == 0 {
                    x += 1 << i;
                } else {
                    y += 1 << i;
                }
            }
            *map.entry(x).or_insert(0) += 1;
            *map.entry(y).or_insert(0) += 1;
        }
        map.values().max().unwrap_or(&0).clone() as i32

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..matrix.len() {
            let mut row = vec![0; matrix[0].len()];
            for j in 0..matrix[0].len() {
                row[j] = if matrix[i][j] == matrix[i][0] { 0 } else { 1 };
            }
            let mut key = String::new();
            for j in 0..matrix[0].len() {
                key.push_str(&row[j].to_string());
            }
            *map.entry(key).or_insert(0) += 1;
        }
        for (_, v) in map {
            count = count.max(v);
        }
        count
