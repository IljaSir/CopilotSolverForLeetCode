Synthesizing 10/10 solutions

=======

        let mut count = 0;
        for i in 1..prices.len() {
            if prices[i] - prices[i - 1] == 1 {
                count += 1;
            }
        }
        count
    }
    pub fn number_of_smooth_descent_periods(prices: Vec<i32>) -> i64 {
        let mut count = 0;
        let mut i = 0;
        while i < prices.len() {
            let mut j = i + 1;
            while j < prices.len() && prices[j] - prices[j - 1] == 1 {
                j += 1;
            }
            count += Self::get_descent_periods(prices[i..j].to_vec());
            i = j;
        }
        count
    }
}

=======

        let mut periods = 0;
        let mut streak = 0;
        for i in 1..prices.len() {
            if prices[i] < prices[i - 1] {
                streak += 1;
            } else {
                periods += streak * (streak + 1) / 2;
                streak = 0;
            }
        }
        periods += streak * (streak + 1) / 2;
        periods
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        while i < prices.len() - 1 {
            if prices[i] - prices[i + 1] == 1 {
                let mut j = i + 2;
                while j < prices.len() && prices[j - 1] - prices[j] == 1 {
                    j += 1;
                }
                count += j - i as i64;
                i = j - 1;
            }
            i += 1;
        }
        count
    }
}

=======

        let mut count = 0;
        let mut current = 0;
        for i in 1..prices.len() {
            if prices[i] == prices[i-1] - 1 {
                current += 1;
            } else {
                count += (current * (current + 1)) / 2;
                current = 0;
            }
        }
        count += (current * (current + 1)) / 2;
        count
    }
}

=======

        let mut result: i64 = 0;
        let mut count: i64 = 0;
        for i in 0..prices.len()-1 {
            if prices[i] - prices[i+1] == 1 {
                count += 1;
            } else {
                result += count * (count + 1) / 2;
                count = 0;
            }
        }
        result += count * (count + 1) / 2;
        result
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 1;
        while j < prices.len() {
            if prices[j] == prices[i] + 1 {
                j += 1;
            } else {
                count += ((j - i) * (j - i - 1)) as i64 / 2;
                i = j;
                j += 1;
            }
        }
        count += ((j - i) * (j - i - 1)) as i64 / 2;
        count
    }
}

=======

        let mut count = 0;
        let mut i = 0;
        let mut j = 1;
        while j < prices.len() {
            if prices[j] - prices[i] == 1 {
                j += 1;
            } else {
                count += (j - i) as i64 * ((j - i) as i64 - 1) / 2;
                i = j;
                j += 1;
            }
        }
        count += (j - i) as i64 * ((j - i) as i64 - 1) / 2;
        count
    }
}

=======

        let mut periods = 0;
        let mut prev = prices[0];
        for price in prices {
            if price == prev {
                continue;
            }
            if price == prev - 1 {
                periods += 1;
            } else {
                periods += (price - prev) as i64;
            }
            prev = price;
        }
        periods
    }
}

=======

        let mut result = 0;
        let mut last = prices[0];
        let mut streak = 0;
        for &price in prices.iter().skip(1) {
            if price == last {
                streak = 0;
            } else if price == last + 1 {
                streak += 1;
                result += streak;
            } else {
                streak = 0;
            }
            last = price;
        }
        result
    }
}

=======

        let mut count = 0;
        let mut prev = prices[0];
        for p in prices.iter() {
            if *p < prev {
                count += 1;
            } else {
                count += *p - prev;
            }
            prev = *p;
        }
        count
    }
}
