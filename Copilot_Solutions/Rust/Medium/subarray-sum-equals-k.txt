Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut sum = 0;
        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            count += map.get(&(sum - k)).unwrap_or(&0);
            *map.entry(sum).or_insert(0) += 1;
        }
        count

=======
Suggestion 2

        let mut count = 0;
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            if let Some(&v) = map.get(&(sum - k)) {
                count += v;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count
    }
}

=======
Suggestion 3

        let mut count = 0;
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            count += map.get(&(sum - k)).unwrap_or(&0);
            *map.entry(sum).or_insert(0) += 1;
        }
        count

=======
Suggestion 4

        let mut sum = 0;
        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        for num in nums {
            sum += num;
            if let Some(&cnt) = map.get(&(sum - k)) {
                count += cnt;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count
    }
}

=======
Suggestion 5

        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        let mut count = 0;
        map.insert(0, 1);
        for i in 0..nums.len() {
            sum += nums[i];
            if let Some(v) = map.get(&(sum - k)) {
                count += v;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count

=======
Suggestion 6

        let mut m: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        m.insert(0, 1);
        let mut sum = 0;
        let mut ret = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if let Some(&v) = m.get(&(sum - k)) {
                ret += v;
            }
            *m.entry(sum).or_insert(0) += 1;
        }
        ret

=======
Suggestion 7

        let mut sum = 0;
        let mut count = 0;
        let mut sum_map = std::collections::HashMap::new();
        sum_map.insert(0, 1);
        for num in nums {
            sum += num;
            count += sum_map.get(&(sum - k)).unwrap_or(&0);
            *sum_map.entry(sum).or_insert(0) += 1;
        }
        count

=======
Suggestion 8

        let mut map = std::collections::HashMap::new();
        let mut sum = 0;
        let mut count = 0;
        for i in nums.iter() {
            sum += i;
            if sum == k {
                count += 1;
            }
            if let Some(&v) = map.get(&(sum - k)) {
                count += v;
            }
            *map.entry(sum).or_insert(0) += 1;
        }
        count

=======
Suggestion 9

        let mut prefix = 0;
        let mut map = std::collections::HashMap::new();
        let mut count = 0;
        map.insert(0, 1);
        for num in nums {
            prefix += num;
            if let Some(v) = map.get(&(prefix - k)) {
                count += v;
            }
            *map.entry(prefix).or_insert(0) += 1;
        }
        count
    }
}
