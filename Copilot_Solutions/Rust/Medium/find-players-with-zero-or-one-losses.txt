Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut winners = std::collections::HashSet::new();
        let mut losers = std::collections::HashSet::new();
        for m in matches {
            winners.insert(m[0]);
            losers.insert(m[1]);
        }
        let mut answer = Vec::new();
        answer.push(winners.iter().filter(|x| !losers.contains(x)).map(|x| *x).collect());
        answer.push(losers.iter().filter(|x| !winners.contains(x)).map(|x| *x).collect());
        answer
    }
}

=======

        let mut wins = vec![0; 100000];
        let mut losses = vec![0; 100000];
        for m in matches {
            wins[m[0] as usize - 1] += 1;
            losses[m[1] as usize - 1] += 1;
        }
        let mut win = vec![];
        let mut loss = vec![];
        for i in 0..wins.len() {
            if wins[i] > 0 {
                win.push((i + 1) as i32);
            }
            if losses[i] == 1 {
                loss.push((i + 1) as i32);
            }
        }
        vec![win, loss]
    }
}

=======

        let mut wins = vec![0; 100001];
        let mut losses = vec![0; 100001];
        for m in matches {
            let (w, l) = (m[0] as usize, m[1] as usize);
            wins[w] += 1;
            losses[l] += 1;
        }
        let mut winners = vec![];
        let mut losers = vec![];
        for i in 1..wins.len() {
            if wins[i] > 0 && losses[i] == 0 {
                winners.push(i as i32);
            }
            if losses[i] == 1 {
                losers.push(i as i32);
            }
        }
        vec![winners, losers]

=======

        
    }
}

=======

        let mut winners = vec![];
        let mut losers = vec![];
        for m in matches {
            let (w, l) = (m[0], m[1]);
            if !winners.contains(&w) {
                winners.push(w);
            }
            if !losers.contains(&l) {
                losers.push(l);
            }
            if let Some(idx) = winners.iter().position(|&x| x == l) {
                winners.remove(idx);
            }
            if let Some(idx) = losers.iter().position(|&x| x == w) {
                losers.remove(idx);
            }
        }
        vec![winners, losers]
    }
}

=======

        let mut players = vec![0; 100001];
        let mut winners = vec![];
        let mut losers = vec![];
        for m in matches {
            players[m[0] as usize] += 1;
            players[m[1] as usize] -= 1;
        }
        for i in 1..players.len() {
            if players[i] == 0 {
                winners.push(i as i32);
            } else if players[i] == -1 {
                losers.push(i as i32);
            }
        }
        vec![winners, losers]
    }
}
