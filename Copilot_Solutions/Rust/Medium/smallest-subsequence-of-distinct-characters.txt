Synthesizing 10/10 solutions

=======

        let mut stack: Vec<char> = Vec::new();
        let mut last_seen: [usize; 26] = [0; 26];
        let mut seen: [bool; 26] = [false; 26];
        let mut chars: Vec<char> = s.chars().collect();
        let mut i: usize = 0;
        while i < chars.len() {
            last_seen[(chars[i] as u8 - 'a' as u8) as usize] = i;
            i += 1;
        }
        i = 0;
        while i < chars.len() {
            let c: char = chars[i];
            if !seen[(c as u8 - 'a' as u8) as usize] {
                while let Some(&c2) = stack.last() {
                    if c2 < c && last_seen[(c2 as u8 - 'a' as u8) as usize] > i {
                        seen[(c2 as u8 - 'a' as u8) as usize] = false;
                        stack.pop();
                    } else {
                        break;
                    }
                }
                seen[(c as u8 - 'a' as u8) as usize] = true;
                stack.push(c);
            }
            i += 1;
        }
        stack.iter().collect()

=======

        let mut counts = [0; 26];
        for c in s.chars() {
            counts[(c as u8 - b'a') as usize] += 1;
        }
        let mut stack = Vec::new();
        let mut used = [false; 26];
        for c in s.chars() {
            let idx = (c as u8 - b'a') as usize;
            counts[idx] -= 1;
            if used[idx] {
                continue;
            }
            while let Some(&top) = stack.last() {
                let top_idx = (top as u8 - b'a') as usize;
                if top < c && counts[top_idx] > 0 {
                    stack.pop();
                    used[top_idx] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            used[idx] = true;
        }
        stack.into_iter().collect()
    }
}

=======

        let mut last = vec![-1; 26];
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i as _;
        }
        let mut seen = vec![false; 26];
        let mut stack = vec![];
        for (i, c) in s.chars().enumerate() {
            let ci = (c as u8 - b'a') as usize;
            if seen[ci] {
                continue;
            }
            while let Some(&top) = stack.last() {
                let topi = (top as u8 - b'a') as usize;
                if topi < ci || last[topi] < i {
                    break;
                }
                seen[topi] = false;
                stack.pop();
            }
            stack.push(c);
            seen[ci] = true;
        }
        stack.into_iter().collect()

=======

        let mut last = vec![0; 26];
        let mut seen = vec![false; 26];
        let mut stack = vec![];
        let s = s.as_bytes();
        for i in 0..s.len() {
            last[(s[i] - b'a') as usize] = i;
        }
        for i in 0..s.len() {
            let c = (s[i] - b'a') as usize;
            if seen[c] {
                continue;
            }
            while let Some(&ch) = stack.last() {
                if ch > c && last[ch] > i {
                    stack.pop();
                    seen[ch] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            seen[c] = true;
        }
        stack
            .into_iter()
            .map(|c| (b'a' + c as u8) as char)
            .collect()

=======

        let mut stack = Vec::new();
        let mut seen = [false; 26];
        let mut last = [0; 26];
        let mut res = String::new();
        for (i, c) in s.chars().enumerate() {
            last[c as usize - 'a' as usize] = i;
        }
        for (i, c) in s.chars().enumerate() {
            let idx = c as usize - 'a' as usize;
            if seen[idx] {
                continue;
            }
            while let Some(&last_c) = stack.last() {
                let last_idx = last_c as usize - 'a' as usize;
                if last[last_idx] > i && c < last_c {
                    stack.pop();
                    seen[last_idx] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            seen[idx] = true;
        }
        for c in stack {
            res.push(c);
        }
        res

=======

        let mut s = s.into_bytes();
        let mut stack = Vec::new();
        let mut seen = [false; 26];
        let mut last = [0; 26];
        for (i, &c) in s.iter().enumerate() {
            last[(c - b'a') as usize] = i;
        }
        for (i, &c) in s.iter().enumerate() {
            let idx = (c - b'a') as usize;
            if seen[idx] {
                continue;
            }
            while let Some(&top) = stack.last() {
                let top_idx = (top - b'a') as usize;
                if top < c && last[top_idx] > i {
                    stack.pop();
                    seen[top_idx] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            seen[idx] = true;
        }
        unsafe { String::from_utf8_unchecked(stack) }

=======

        let mut cnt: Vec<i32> = vec![0; 26];
        let mut visited: Vec<bool> = vec![false; 26];
        let mut ans: Vec<u8> = vec![];
        for c in s.as_bytes() {
            cnt[(c - b'a') as usize] += 1;
        }
        for c in s.as_bytes() {
            let idx = (c - b'a') as usize;
            cnt[idx] -= 1;
            if visited[idx] {
                continue;
            }
            while let Some(&x) = ans.last() {
                if x < *c && cnt[(x - b'a') as usize] > 0 {
                    ans.pop();
                    visited[(x - b'a') as usize] = false;
                } else {
                    break;
                }
            }
            ans.push(*c);
            visited[idx] = true;
        }
        String::from_utf8(ans).unwrap()

=======

        let mut last = vec![0; 26];
        let mut visited = vec![false; 26];
        let mut stack = Vec::new();
        let mut ans = String::new();
        for (i, c) in s.bytes().enumerate() {
            last[(c - b'a') as usize] = i;
        }
        for (i, c) in s.bytes().enumerate() {
            let idx = (c - b'a') as usize;
            if visited[idx] {
                continue;
            }
            while let Some(&top) = stack.last() {
                let top_idx = (top - b'a') as usize;
                if top < c && i < last[top_idx] {
                    stack.pop();
                    visited[top_idx] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            visited[idx] = true;
        }
        while let Some(c) = stack.pop() {
            ans.push(c as char);
        }
        ans.chars().rev().collect()

=======

        let mut stack = Vec::new();
        let mut last = [0; 26];
        let mut seen = [false; 26];
        let mut chars = s.chars().collect::<Vec<char>>();
        for i in 0..chars.len() {
            last[(chars[i] as u8 - 'a' as u8) as usize] = i;
        }
        for i in 0..chars.len() {
            let c = chars[i];
            if seen[(c as u8 - 'a' as u8) as usize] {
                continue;
            }
            while let Some(&c1) = stack.last() {
                if c1 as u8 - 'a' as u8 > c as u8 - 'a' as u8 && last[(c1 as u8 - 'a' as u8) as usize] > i {
                    stack.pop();
                    seen[(c1 as u8 - 'a' as u8) as usize] = false;
                } else {
                    break;
                }
            }
            stack.push(c);
            seen[(c as u8 - 'a' as u8) as usize] = true;
        }
        stack.iter().collect()

=======

        let mut stack: Vec<char> = Vec::new();
        let mut s = s.chars().collect::<Vec<char>>();
        let mut last_occurrence = vec![0; 26];
        let mut visited = vec![false; 26];
        for i in 0..s.len() {
            last_occurrence[(s[i] as u8 - 'a' as u8) as usize] = i;
        }
        for i in 0..s.len() {
            if visited[(s[i] as u8 - 'a' as u8) as usize] {
                continue;
            }
            while let Some(&c) = stack.last() {
                if c < s[i] && last_occurrence[(c as u8 - 'a' as u8) as usize] > i {
                    visited[(c as u8 - 'a' as u8) as usize] = false;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(s[i]);
            visited[(s[i] as u8 - 'a' as u8) as usize] = true;
        }
        stack.into_iter().collect()
