Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut xor = 0;
        for num in nums.iter() {
            xor ^= num;
        }
        let mask = xor & (-xor);
        let mut a = 0;
        let mut b = 0;
        for num in nums.iter() {
            if num & mask == 0 {
                a ^= num;
            } else {
                b ^= num;
            }
        }
        vec![a, b]
    }
}

=======
Suggestion 2

        let mut xor = 0;
        for num in nums.iter() {
            xor ^= num;
        }
        let mask = xor & (-xor);
        let mut a = 0;
        let mut b = 0;
        for num in nums.iter() {
            if mask & num == 0 {
                a ^= num;
            } else {
                b ^= num;
            }
        }
        vec![a, b]

=======
Suggestion 3

        let mut xor = 0;
        for n in nums.iter() {
            xor ^= n;
        }
        let mut mask = 1;
        while mask & xor == 0 {
            mask <<= 1;
        }
        let mut ret = vec![0, 0];
        for n in nums.iter() {
            if *n & mask == 0 {
                ret[0] ^= n;
            } else {
                ret[1] ^= n;
            }
        }
        ret
    }
}

=======
Suggestion 4

        let mut xor = 0;
        for num in nums.iter() {
            xor ^= num;
        }
        let mut mask = 1;
        while (xor & mask) == 0 {
            mask <<= 1;
        }
        let mut a = 0;
        let mut b = 0;
        for num in nums.iter() {
            if (num & mask) == 0 {
                a ^= num;
            } else {
                b ^= num;
            }
        }
        vec![a, b]

=======
Suggestion 5

        let mut res = 0;
        for num in nums.iter() {
            res ^= num;
        }
        let mut mask = 1;
        while res & mask == 0 {
            mask <<= 1;
        }
        let mut res1 = 0;
        let mut res2 = 0;
        for num in nums.iter() {
            if num & mask == 0 {
                res1 ^= num;
            } else {
                res2 ^= num;
            }
        }
        vec![res1, res2]

=======
Suggestion 6

        let mut nums = nums;
        nums.sort();
        let mut result = Vec::new();
        let mut i = 0;
        while i < nums.len() {
            if i == nums.len() - 1 || nums[i] != nums[i + 1] {
                result.push(nums[i]);
            } else {
                i += 1;
            }
            i += 1;
        }
        result
    }
}

=======
Suggestion 7

        let mut xor = 0;
        for num in nums.iter() {
            xor ^= num;
        }
        let mask = xor & (xor - 1) ^ xor;
        let mut ans = vec![0, 0];
        for num in nums.iter() {
            if (num & mask) == 0 {
                ans[0] ^= num;
            } else {
                ans[1] ^= num;
            }
        }
        ans

=======
Suggestion 8

        let mut ans = Vec::with_capacity(2);
        let mut xor = 0;
        for num in nums.iter() {
            xor ^= num;
        }
        xor &= -xor;
        for num in nums.iter() {
            if num & xor == 0 {
                ans.push(*num);
            }
        }
        ans
    }
}

=======
Suggestion 9

        let mut result = vec![0, 0];
        let mut x = 0;
        for i in 0..nums.len() {
            x ^= nums[i];
        }
        let mut mask = 1;
        while (x & mask) == 0 {
            mask <<= 1;
        }
        for i in 0..nums.len() {
            if (nums[i] & mask) == 0 {
                result[0] ^= nums[i];
            } else {
                result[1] ^= nums[i];
            }
        }
        result

=======
Suggestion 10

        let mut result = vec![];
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[i] == nums[j] {
                j += 1;
            }
            if j - i == 1 {
                result.push(nums[i]);
            }
            i = j;
        }
        result
    }
}
