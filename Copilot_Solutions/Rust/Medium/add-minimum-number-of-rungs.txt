Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut last = 0;
        for &r in rungs.iter() {
            ans += (r - last - 1) / dist;
            last = r;
        }
        ans

=======

        let mut res = 0;
        let mut prev = 0;
        for &r in rungs.iter() {
            res += (r - prev - 1) / dist;
            prev = r;
        }
        res

=======

        let mut ans = 0;
        let mut prev = 0;
        for i in 0..rungs.len() {
            ans += (rungs[i] - prev - 1) / dist;
            prev = rungs[i];
        }
        ans

=======

        let mut last = 0;
        let mut count = 0;
        for r in rungs {
            count += (r - last - 1) / dist;
            last = r;
        }
        count

=======

        let mut ans = 0;
        let mut prev = 0;
        for &r in &rungs {
            ans += (r - prev - 1) / dist;
            prev = r;
        }
        ans

=======

        let mut sum = 0;
        for i in 1..rungs.len() {
            let diff = rungs[i] - rungs[i - 1];
            sum += (diff - 1) / dist;
        }
        sum

=======

        let mut prev = 0;
        let mut res = 0;
        for r in rungs {
            let diff = r - prev;
            res += (diff - 1) / dist;
            prev = r;
        }
        res

=======

        let mut prev = 0;
        let mut ans = 0;
        for &r in rungs.iter() {
            let d = r - prev;
            if d > dist {
                ans += (d - 1) / dist;
            }
            prev = r;
        }
        ans

=======

        let mut ret = 0;
        let mut cur = 0;
        for r in rungs {
            if r > cur {
                ret += (r - cur - 1) / dist;
                cur = r;
            }
        }
        ret

=======

        let mut ans = 0;
        let mut pre = 0;
        for i in rungs {
            let mut gap = i - pre;
            while gap > dist {
                gap -= dist;
                ans += 1;
            }
            pre = i;
        }
        ans
