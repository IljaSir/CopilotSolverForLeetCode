Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        let mut queue = Vec::new();
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 2 {
                    queue.push((i, j));
                }
            }
        }
        let mut step = 0;
        while !queue.is_empty() {
            let mut next_queue = Vec::new();
            for (i, j) in queue {
                if i > 0 && grid[i-1][j] == 1 {
                    grid[i-1][j] = 2;
                    next_queue.push((i-1, j));
                }
                if i < grid.len()-1 && grid[i+1][j] == 1 {
                    grid[i+1][j] = 2;
                    next_queue.push((i+1, j));
                }
                if j > 0 && grid[i][j-1] == 1 {
                    grid[i][j-1] = 2;
                    next_queue.push((i, j-1));
                }
                if j < grid[0].len()-1 && grid[i][j+1] == 1 {
                    grid[i][j+1] = 2;
                    next_queue.push((i, j+1));
                }
            }
            queue = next_queue;
            if !queue.is_empty() {
                step += 1;
            }
        }
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 1 {
                    return -1;
                }
            }
        }
        step

=======

        let mut grid = grid;
        let mut rotten = Vec::new();
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 2 {
                    rotten.push((i, j));
                }
            }
        }
        let mut minutes = 0;
        while !rotten.is_empty() {
            let mut new_rotten = Vec::new();
            for (i, j) in rotten {
                if i > 0 && grid[i - 1][j] == 1 {
                    grid[i - 1][j] = 2;
                    new_rotten.push((i - 1, j));
                }
                if i < grid.len() - 1 && grid[i + 1][j] == 1 {
                    grid[i + 1][j] = 2;
                    new_rotten.push((i + 1, j));
                }
                if j > 0 && grid[i][j - 1] == 1 {
                    grid[i][j - 1] = 2;
                    new_rotten.push((i, j - 1));
                }
                if j < grid[i].len() - 1 && grid[i][j + 1] == 1 {
                    grid[i][j + 1] = 2;
                    new_rotten.push((i, j + 1));
                }
            }
            rotten = new_rotten;
            minutes += 1;
        }
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 1 {
                    return -1;
                }
            }
        }
        if minutes > 0 {
            minutes - 1
        } else {
            0
        }
    }
}

=======

        let mut rotten = vec![];
        let mut fresh = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                match grid[i][j] {
                    2 => rotten.push((i, j)),
                    1 => fresh += 1,
                    _ => (),
                }
            }
        }
        let mut time = 0;
        let mut next = vec![];
        while rotten.len() > 0 {
            for &(i, j) in rotten.iter() {
                if i > 0 && grid[i - 1][j] == 1 {
                    fresh -= 1;
                    grid[i - 1][j] = 2;
                    next.push((i - 1, j));
                }
                if i < grid.len() - 1 && grid[i + 1][j] == 1 {
                    fresh -= 1;
                    grid[i + 1][j] = 2;
                    next.push((i + 1, j));
                }
                if j > 0 && grid[i][j - 1] == 1 {
                    fresh -= 1;
                    grid[i][j - 1] = 2;
                    next.push((i, j - 1));
                }
                if j < grid[i].len() - 1 && grid[i][j + 1] == 1 {
                    fresh -= 1;
                    grid[i][j + 1] = 2;
                    next.push((i, j + 1));
                }
            }
            if next.len() > 0 {
                time += 1;
                rotten = next;
                next = vec![];
            } else {
                break;
            }
        }
        if fresh > 0 {
            -1
        } else {
            time
        }

=======

        let mut grid = grid;
        let mut fresh = 0;
        let mut rotten = Vec::new();
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 2 {
                    rotten.push((i, j));
                } else if grid[i][j] == 1 {
                    fresh += 1;
                }
            }
        }
        let mut minute = 0;
        while !rotten.is_empty() {
            let mut new_rotten = Vec::new();
            for (i, j) in rotten {
                if i > 0 && grid[i - 1][j] == 1 {
                    grid[i - 1][j] = 2;
                    fresh -= 1;
                    new_rotten.push((i - 1, j));
                }
                if j > 0 && grid[i][j - 1] == 1 {
                    grid[i][j - 1] = 2;
                    fresh -= 1;
                    new_rotten.push((i, j - 1));
                }
                if i < grid.len() - 1 && grid[i + 1][j] == 1 {
                    grid[i + 1][j] = 2;
                    fresh -= 1;
                    new_rotten.push((i + 1, j));
                }
                if j < grid[i].len() - 1 && grid[i][j + 1] == 1 {
                    grid[i][j + 1] = 2;
                    fresh -= 1;
                    new_rotten.push((i, j + 1));
                }
            }
            rotten = new_rotten;
            if !rotten.is_empty() {
                minute += 1;
            }
        }
        if fresh > 0 {
            -1
        } else {
            minute
        }

=======

        let mut grid = grid;
        let mut q = std::collections::VecDeque::new();
        let mut fresh = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 2 {
                    q.push_back((i, j));
                } else if grid[i][j] == 1 {
                    fresh += 1;
                }
            }
        }
        let mut minutes = 0;
        while !q.is_empty() {
            let mut nq = std::collections::VecDeque::new();
            while let Some((i, j)) = q.pop_front() {
                let dirs = vec![(-1, 0), (1, 0), (0, -1), (0, 1)];
                for (di, dj) in dirs {
                    let ni = i as i32 + di;
                    let nj = j as i32 + dj;
                    if ni >= 0 && ni < grid.len() as i32 && nj >= 0 && nj < grid[ni as usize].len() as i32 {
                        let ni = ni as usize;
                        let nj = nj as usize;
                        if grid[ni][nj] == 1 {
                            grid[ni][nj] = 2;
                            fresh -= 1;
                            nq.push_back((ni, nj));
                        }
                    }
                }
            }
            if !nq.is_empty() {
                minutes += 1;
                q = nq;
            }
        }
        if fresh > 0 {
            return -1;
        }
        minutes

=======

        let mut grid = grid;
        let mut fresh = 0;
        let mut rotting = Vec::new();
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                match grid[i][j] {
                    1 => fresh += 1,
                    2 => rotting.push((i, j)),
                    _ => (),
                }
            }
        }
        let mut minutes = 0;
        while fresh > 0 {
            let mut new_rotting = Vec::new();
            for (i, j) in rotting {
                if i > 0 && grid[i-1][j] == 1 {
                    grid[i-1][j] = 2;
                    fresh -= 1;
                    new_rotting.push((i-1, j));
                }
                if i < grid.len()-1 && grid[i+1][j] == 1 {
                    grid[i+1][j] = 2;
                    fresh -= 1;
                    new_rotting.push((i+1, j));
                }
                if j > 0 && grid[i][j-1] == 1 {
                    grid[i][j-1] = 2;
                    fresh -= 1;
                    new_rotting.push((i, j-1));
                }
                if j < grid[i].len()-1 && grid[i][j+1] == 1 {
                    grid[i][j+1] = 2;
                    fresh -= 1;
                    new_rotting.push((i, j+1));
                }
            }
            if new_rotting.len() == 0 {
                return -1;
            }
            minutes += 1;
            rotting = new_rotting;
        }
        minutes

=======

        let (mut queue, mut fresh, mut time) = (Vec::new(), 0, 0);
        for (i, row) in grid.iter().enumerate() {
            for (j, &cell) in row.iter().enumerate() {
                if cell == 2 {
                    queue.push((i, j));
                } else if cell == 1 {
                    fresh += 1;
                }
            }
        }
        let (mut x, mut y) = (0, 0);
        while !queue.is_empty() {
            let (i, j) = queue.remove(0);
            for (di, dj) in &[(0, 1), (0, -1), (1, 0), (-1, 0)] {
                x = i.wrapping_add(*di);
                y = j.wrapping_add(*dj);
                if x < grid.len() && y < grid[i].len() && grid[x][y] == 1 {
                    grid[x][y] = 2;
                    fresh -= 1;
                    queue.push((x, y));
                }
            }
            if queue.is_empty() && fresh > 0 {
                time += 1;
                for (i, row) in grid.iter().enumerate() {
                    for (j, &cell) in row.iter().enumerate() {
                        if cell == 2 {
                            queue.push((i, j));
                        }
                    }
                }
            }
        }
        if fresh > 0 { -1 } else { time }
    }
}

=======

        let m = grid.len();
        let n = grid[0].len();
        let mut grid = grid;
        let mut q = Vec::new();
        let mut fresh = 0;
        let mut minutes = 0;
        for i in 0..m {
            for j in 0..n {
                if grid[i][j] == 1 {
                    fresh += 1;
                }
                if grid[i][j] == 2 {
                    q.push((i as i32, j as i32));
                }
            }
        }
        while !q.is_empty() {
            let mut q2 = Vec::new();
            for (i, j) in q {
                for (i2, j2) in vec![(i-1, j), (i+1, j), (i, j-1), (i, j+1)] {
                    if i2 >= 0 && i2 < m as i32 && j2 >= 0 && j2 < n as i32 && grid[i2 as usize][j2 as usize] == 1 {
                        grid[i2 as usize][j2 as usize] = 2;
                        fresh -= 1;
                        q2.push((i2, j2));
                    }
                }
            }
            if !q2.is_empty() {
                minutes += 1;
            }
            q = q2;
        }
        if fresh == 0 {
            minutes
        } else {
            -1
        }

=======

        
    }
}

=======

        let mut grid = grid;
        let mut last = 0;
        let mut count = 0;
        loop {
            last = 0;
            let mut fresh = 0;
            for i in 0..grid.len() {
                for j in 0..grid[i].len() {
                    if grid[i][j] == 2 {
                        if i > 0 && grid[i-1][j] == 1 {
                            grid[i-1][j] = 3;
                            last = 1;
                        }
                        if i < grid.len()-1 && grid[i+1][j] == 1 {
                            grid[i+1][j] = 3;
                            last = 1;
                        }
                        if j > 0 && grid[i][j-1] == 1 {
                            grid[i][j-1] = 3;
                            last = 1;
                        }
                        if j < grid[i].len()-1 && grid[i][j+1] == 1 {
                            grid[i][j+1] = 3;
                            last = 1;
                        }
                    }
                    if grid[i][j] == 1 {
                        fresh += 1;
                    }
                }
            }
            for i in 0..grid.len() {
                for j in 0..grid[i].len() {
                    if grid[i][j] == 3 {
                        grid[i][j] = 2;
                    }
                }
            }
            if fresh == 0 {
                return count;
            }
            if last == 0 {
                return -1;
            }
            count += 1;
        }
