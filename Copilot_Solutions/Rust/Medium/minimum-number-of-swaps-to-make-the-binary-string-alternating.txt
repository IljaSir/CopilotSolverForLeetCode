Synthesizing 10/10 solutions

=======

        let s: Vec<char> = s.chars().collect();
        let mut c1 = 0;
        let mut c2 = 0;
        for i in 0..s.len() {
            if i % 2 == 0 {
                if s[i] == '0' { c1 += 1; }
                else { c2 += 1; }
            } else {
                if s[i] == '0' { c2 += 1; }
                else { c1 += 1; }
            }
        }
        if c1 == c2 { return c1.min(c2); }
        -1

=======

        let mut ans1 = 0;
        let mut ans2 = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '0' {
                    ans1 += 1;
                } else {
                    ans2 += 1;
                }
            } else {
                if c == '0' {
                    ans2 += 1;
                } else {
                    ans1 += 1;
                }
            }
        }
        if ans1 % 2 == 1 {
            ans1 = std::i32::MAX;
        }
        if ans2 % 2 == 1 {
            ans2 = std::i32::MAX;
        }
        if ans1 == std::i32::MAX && ans2 == std::i32::MAX {
            -1
        } else {
            ans1.min(ans2) / 2
        }
    }
}

=======

        let s = s.into_bytes();
        let n = s.len();
        let mut c0 = 0;
        let mut c1 = 0;
        for i in 0..n {
            if i % 2 == 0 {
                if s[i] == b'0' {
                    c0 += 1;
                } else {
                    c1 += 1;
                }
            } else {
                if s[i] == b'1' {
                    c0 += 1;
                } else {
                    c1 += 1;
                }
            }
        }
        if n % 2 == 0 {
            if c0 % 2 == 0 && c1 % 2 == 0 {
                return (c0 / 2 + c1 / 2) as i32;
            }
        } else {
            if c0 % 2 == 0 && c1 % 2 == 1 {
                return (c0 / 2 + (c1 - 1) / 2) as i32;
            }
            if c0 % 2 == 1 && c1 % 2 == 0 {
                return ((c0 - 1) / 2 + c1 / 2) as i32;
            }
        }
        -1
    }
}

=======

        let s = s.as_bytes();
        let n = s.len();
        let mut cnt = [0; 2];
        for i in 0..n {
            cnt[(s[i] - b'0') as usize] += 1;
        }
        if (cnt[0] - cnt[1]).abs() > 1 {
            return -1;
        }
        let mut res = n;
        for i in 0..2 {
            let mut cur = 0;
            for j in 0..n {
                if s[j] != b'0' + ((i + j) & 1) as u8 {
                    cur += 1;
                }
            }
            res = res.min(cur);
        }
        res as i32 / 2

=======

        let s: Vec<char> = s.chars().collect();
        let mut cnt = 0;
        for i in 0..s.len() {
            if (i % 2 == 0 && s[i] == '1') || (i % 2 == 1 && s[i] == '0') {
                cnt += 1;
            }
        }
        if cnt % 2 == 0 {
            cnt = cnt.min(s.len() - cnt);
        } else {
            cnt = -1;
        }
        cnt

=======

        let mut c0 = 0;
        let mut c1 = 0;
        for (i, ch) in s.chars().enumerate() {
            if (i % 2 == 0) != (ch == '0') {
                c0 += 1;
            }
            if (i % 2 == 0) != (ch == '1') {
                c1 += 1;
            }
        }
        if c0 % 2 == 0 && c1 % 2 == 0 {
            return std::cmp::min(c0, c1) / 2;
        }
        -1

=======

        let mut cnt = 0;
        let mut cnt2 = 0;
        for (i, c) in s.chars().enumerate() {
            if i % 2 == 0 {
                if c == '0' {
                    cnt += 1;
                } else {
                    cnt2 += 1;
                }
            } else {
                if c == '0' {
                    cnt2 += 1;
                } else {
                    cnt += 1;
                }
            }
        }
        if cnt == cnt2 {
            cnt.min(cnt2)
        } else {
            -1
        }
    }
}

=======

        let s1 = s.chars().collect::<Vec<char>>();
        let mut s2 = s1.clone();
        let mut count = 0;
        for i in 0..s1.len() {
            if i % 2 == 0 {
                if s1[i] != '0' {
                    count += 1;
                }
                if s2[i] != '1' {
                    count += 1;
                }
            } else {
                if s1[i] != '1' {
                    count += 1;
                }
                if s2[i] != '0' {
                    count += 1;
                }
            }
        }
        if count % 2 == 1 {
            return -1;
        }
        count / 2

=======

        let s: Vec<char> = s.chars().collect();
        let mut ans = 0;
        let mut cnt = 0;
        for i in 0..s.len() {
            if s[i] == '0' {
                cnt += 1;
            } else {
                cnt -= 1;
            }
            if cnt.abs() > 1 {
                ans += 1;
                cnt = 0;
            }
        }
        if cnt.abs() != 1 {
            -1
        } else {
            ans
        }
    }
}

=======

        let mut count = 0;
        for (i, c) in s.chars().enumerate() {
            if c == '0' {
                count += 1;
            }
        }
        let n = s.len();
        let mut min = 0;
        let mut max = 0;
        for (i, c) in s.chars().enumerate() {
            if i < count {
                if c == '0' {
                    min += 1;
                } else {
                    max += 1;
                }
            } else {
                if c == '0' {
                    max += 1;
                } else {
                    min += 1;
                }
            }
        }
        if min % 2 == 1 || max % 2 == 1 {
            return -1;
        }
        (min / 2).min(max / 2)
