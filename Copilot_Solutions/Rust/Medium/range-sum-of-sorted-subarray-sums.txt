Synthesizing 8/10 solutions

=======

        let mut sums = Vec::new();
        for i in 0..n as usize {
            let mut sum = 0;
            for j in i..n as usize {
                sum += nums[j];
                sums.push(sum);
            }
        }
        sums.sort();
        let mut res = 0;
        for i in left-1..right {
            res = (res + sums[i as usize]) % 1000000007;
        }
        res

=======

        let mut sums = vec![];
        for i in 0..n {
            let mut sum = 0;
            for j in i..n {
                sum += nums[j as usize];
                sums.push(sum);
            }
        }
        sums.sort();
        sums[(left-1) as usize..right as usize].iter().sum::<i32>() % 1000000007

=======

        let mut sums = vec![];
        for i in 0..n {
            let mut sum = 0;
            for j in i..n {
                sum += nums[j as usize];
                sums.push(sum);
            }
        }
        sums.sort();
        let mut ans = 0;
        for i in left - 1..right {
            ans += sums[i as usize];
        }
        ans % 1_000_000_007

=======

        let mut sums = vec![0; n as usize];
        let mut sum = 0;
        for i in 0..n as usize {
            sum += nums[i];
            sums[i] = sum;
        }
        let mut arr = vec![0; (n * (n + 1) / 2) as usize];
        let mut index = 0;
        for i in 0..n as usize {
            for j in i..n as usize {
                arr[index] = sums[j] - sums[i] + nums[i];
                index += 1;
            }
        }
        arr.sort();
        let mut sum = 0;
        for i in left as usize - 1..right as usize {
            sum += arr[i];
        }
        sum

=======

        let mut nums = nums;
        let mut sums = vec![];
        for i in 0..n as usize {
            let mut sum = 0;
            for j in i..n as usize {
                sum += nums[j];
                sums.push(sum);
            }
        }
        sums.sort();
        let mut sum = 0;
        for i in left as usize - 1..right as usize {
            sum += sums[i];
        }
        sum % 1_000_000_007
    }
}

=======

        
    }
}

=======

        let mut sum = 0;
        let mut subsums = vec![];
        for i in 0..n {
            sum += nums[i as usize];
            subsums.push(sum);
        }
        for i in 1..n {
            for j in i + 1..n {
                sum += subsums[j as usize] - subsums[i as usize - 1];
                subsums.push(sum);
            }
        }
        subsums.sort();
        let mut ans = 0;
        for i in left - 1..right {
            ans += subsums[i as usize];
            ans %= 1000000007;
        }
        ans

=======

        let mut sum = 0;
        let mut subarr = Vec::new();
        for i in 0..n as usize {
            sum = 0;
            for j in i..n as usize {
                sum += nums[j];
                subarr.push(sum);
            }
        }
        subarr.sort();
        let mut ans = 0;
        for i in left as usize - 1..right as usize {
            ans += subarr[i];
            ans %= 1000000007;
        }
        ans
