Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut res = Vec::new();
        let mut i = 1;
        let mut j = n;
        while i <= j {
            if k % 2 == 1 {
                res.push(i);
                i += 1;
            } else {
                res.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        res

=======
Suggestion 2

        let mut res = vec![];
        let mut i = 1;
        let mut j = n;
        while i <= j {
            if k % 2 == 1 {
                res.push(i);
                i += 1;
            } else {
                res.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        res
    }
}

=======
Suggestion 3

        let mut result = vec![];
        let mut i = 1;
        let mut j = n;
        while i <= j {
            if k % 2 == 1 {
                result.push(i);
                i += 1;
            } else {
                result.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        result

=======
Suggestion 4

        let mut ans = Vec::with_capacity(n as usize);
        let mut i = 1;
        let mut j = n;
        while i <= j {
            if k % 2 == 1 {
                ans.push(i);
                i += 1;
            } else {
                ans.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        ans

=======
Suggestion 5

        let mut res = Vec::new();
        let (mut i, mut j) = (1, n);
        while i <= j {
            if k % 2 == 1 {
                res.push(i);
                i += 1;
            } else {
                res.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        res

=======
Suggestion 6

        let mut res = vec![];
        let (mut i, mut j) = (1, n);
        while i <= j {
            if k % 2 == 1 {
                res.push(i);
                i += 1;
            } else {
                res.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        res

=======
Suggestion 7

        let mut res = Vec::with_capacity(n as usize);
        let mut i = 1;
        let mut j = n;
        while i <= j {
            if k % 2 != 0 {
                res.push(i);
                i += 1;
            } else {
                res.push(j);
                j -= 1;
            }
            if k > 1 {
                k -= 1;
            }
        }
        res

=======
Suggestion 8

        let mut res = Vec::new();
        let (mut l, mut r) = (1, n);
        for i in 0..k {
            if i % 2 == 0 {
                res.push(l);
                l += 1;
            } else {
                res.push(r);
                r -= 1;
            }
        }
        if k % 2 == 0 {
            res.extend(l..=r);
        } else {
            res.extend((l..=r).rev());
        }
        res

=======
Suggestion 9

        let mut ans = Vec::new();
        let mut i = 1;
        let mut j = n;
        while i <= j {
            ans.push(i);
            i += 1;
            if i <= j {
                ans.push(j);
                j -= 1;
            }
        }
        let mut v = 1;
        for i in 1..k {
            if v == 1 {
                ans.swap(i as usize, (i + 1) as usize);
            }
            v = 1 - v;
        }
        ans
    }
}

=======
Suggestion 10

        let n = n as usize;
        let k = k as usize;
        let mut ret = vec![0; n];
        let mut l = 1;
        let mut r = n;
        for i in 0..n {
            if i < k {
                if i % 2 == 0 {
                    ret[i] = l;
                    l += 1;
                } else {
                    ret[i] = r;
                    r -= 1;
                }
            } else {
                ret[i] = l;
                l += 1;
            }
        }
        ret
