Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut uf = UnionFind::new(20000);
        for stone in stones {
            uf.union(stone[0] as usize, stone[1] as usize + 10000);
        }
        stones.len() as i32 - uf.set_count as i32
    }
}

=======

        
    }
}

=======

        let mut ans = 0;
        let mut uf = UnionFind::new(20001);
        for stone in stones {
            uf.union(stone[0] as usize, stone[1] as usize + 10000);
        }
        for stone in stones {
            if uf.find(stone[0] as usize) == uf.find(stone[1] as usize + 10000) {
                ans += 1;
            }
        }
        (stones.len() - ans) as i32
    }
}

=======

        let mut dsu = Dsu::new(stones.len());
        let mut x_to_y = HashMap::new();
        let mut y_to_x = HashMap::new();
        
        for (i, stone) in stones.iter().enumerate() {
            let x = stone[0];
            let y = stone[1];
            
            if let Some(j) = x_to_y.get(&x) {
                dsu.merge(i, *j);
            }
            if let Some(j) = y_to_x.get(&y) {
                dsu.merge(i, *j);
            }
            
            x_to_y.insert(x, i);
            y_to_x.insert(y, i);
        }
        
        stones.len() as i32 - dsu.count
    }
}
