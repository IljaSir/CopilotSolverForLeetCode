Synthesizing 9/10 solutions

=======

        let words: Vec<&str> = s.split(' ').collect();
        let max_len = words.iter().map(|s| s.len()).max().unwrap();
        let mut res = vec![];
        for i in 0..max_len {
            let mut s = String::new();
            for j in 0..words.len() {
                if i < words[j].len() {
                    s.push(words[j].chars().nth(i).unwrap());
                } else {
                    s.push(' ');
                }
            }
            while s.ends_with(' ') {
                s.pop();
            }
            res.push(s);
        }
        res

=======

        let words: Vec<&str> = s.split(" ").collect();
        let max_len = words.iter().map(|w| w.len()).max().unwrap();
        let mut result = vec![];
        for i in 0..max_len {
            let mut line = String::new();
            for word in &words {
                let ch = word.chars().nth(i).unwrap_or(' ');
                line.push(ch);
            }
            line = line.trim_end().to_string();
            result.push(line);
        }
        result

=======

        let mut words: Vec<String> = vec![];
        let mut max_len = 0;
        for word in s.split(' ') {
            max_len = max_len.max(word.len());
            words.push(word.to_string());
        }
        let mut res = vec![];
        for i in 0..max_len {
            let mut s = String::new();
            for word in &words {
                if i < word.len() {
                    s.push(word.chars().nth(i).unwrap());
                } else {
                    s.push(' ');
                }
            }
            res.push(s.trim_end().to_string());
        }
        res

=======

        let mut result: Vec<String> = Vec::new();
        let words: Vec<&str> = s.split_whitespace().collect();
        let max_len: usize = words.iter().map(|w| w.len()).max().unwrap();
        for i in 0..max_len {
            let mut line: Vec<char> = Vec::new();
            for word in &words {
                if i < word.len() {
                    line.push(word.chars().nth(i).unwrap());
                } else {
                    line.push(' ');
                }
            }
            while let Some(c) = line.pop() {
                if c != ' ' {
                    line.push(c);
                    break;
                }
            }
            result.push(line.into_iter().collect());
        }
        result
    }
}

=======

        
    }
}

=======

        let mut words: Vec<String> = s.split(' ').map(|w| w.to_string()).collect();
        let mut max_len = 0;
        for word in &words {
            if word.len() > max_len {
                max_len = word.len();
            }
        }
        let mut res: Vec<String> = Vec::new();
        for i in 0..max_len {
            let mut word: String = String::new();
            for j in 0..words.len() {
                if i < words[j].len() {
                    word.push(words[j].chars().nth(i).unwrap());
                } else {
                    word.push(' ');
                }
            }
            res.push(word);
        }
        for i in 0..res.len() {
            let mut chars: Vec<char> = res[i].chars().collect();
            while chars.len() > 0 && chars[chars.len() - 1] == ' ' {
                chars.pop();
            }
            res[i] = chars.iter().collect();
        }
        res

=======

        let mut words: Vec<String> = Vec::new();
        for word in s.split_whitespace() {
            words.push(word.to_string());
        }
        let mut max_word_len = 0;
        for word in &words {
            if word.len() > max_word_len {
                max_word_len = word.len();
            }
        }
        let mut result: Vec<String> = Vec::new();
        for i in 0..max_word_len {
            let mut line: String = String::new();
            for word in &words {
                if i < word.len() {
                    line.push(word.chars().nth(i).unwrap());
                } else {
                    line.push(' ');
                }
            }
            while line.ends_with(' ') {
                line.pop();
            }
            result.push(line);
        }
        result
    }
}

=======

        let mut words: Vec<&str> = s.split(' ').collect();
        let mut max_len = 0;
        for word in &words {
            max_len = max_len.max(word.len());
        }
        let mut matrix: Vec<Vec<char>> = vec![vec![' '; words.len()]; max_len];
        for (index, word) in words.iter().enumerate() {
            for (j, c) in word.chars().enumerate() {
                matrix[j][index] = c;
            }
        }
        let mut result: Vec<String> = Vec::new();
        for line in matrix {
            let mut word = line.into_iter().collect::<String>();
            word = word.trim_end().to_string();
            result.push(word);
        }
        result
    }
}

=======

        let mut max = 0;
        let mut words = Vec::new();
        let mut ans = Vec::new();
        for w in s.split_whitespace() {
            words.push(w);
            if w.len() > max {
                max = w.len();
            }
        }
        for i in 0..max {
            let mut s = String::new();
            for w in &words {
                if i < w.len() {
                    s.push(w.chars().nth(i).unwrap());
                } else {
                    s.push(' ');
                }
            }
            ans.push(s.trim_end().to_string());
        }
        ans
    }
}
