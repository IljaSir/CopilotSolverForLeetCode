Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut res = vec![];
        for q in queries {
            let mut count = 0;
            for p in &points {
                if (p[0] - q[0]).pow(2) + (p[1] - q[1]).pow(2) <= q[2].pow(2) {
                    count += 1;
                }
            }
            res.push(count);
        }
        res

=======

        let mut result = Vec::new();
        for q in queries {
            let mut count = 0;
            for p in &points {
                if (p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]) <= q[2] * q[2] {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
    }
}

=======

        let mut res = Vec::new();
        for query in queries {
            let mut count = 0;
            for point in &points {
                if (point[0] - query[0]) * (point[0] - query[0]) + (point[1] - query[1]) * (point[1] - query[1]) <= query[2] * query[2] {
                    count += 1;
                }
            }
            res.push(count);
        }
        res

=======

        
    }
}

=======

        let mut res = vec![];
        for q in queries {
            let mut count = 0;
            for p in &points {
                let d = (p[0] - q[0]).pow(2) + (p[1] - q[1]).pow(2);
                if d <= q[2].pow(2) {
                    count += 1;
                }
            }
            res.push(count);
        }
        res

=======

        let mut result = vec![];
        for query in queries {
            let mut count = 0;
            for point in points.iter() {
                if (point[0] - query[0]).pow(2) + (point[1] - query[1]).pow(2) <= query[2].pow(2) {
                    count += 1;
                }
            }
            result.push(count);
        }
        result
