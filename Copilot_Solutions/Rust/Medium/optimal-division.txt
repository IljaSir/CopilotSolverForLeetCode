Synthesizing 9/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let n = nums.len();
        if n == 1 {
            return nums[0].to_string();
        }
        if n == 2 {
            return format!("{}/{}", nums[0], nums[1]);
        }
        let mut res = format!("{}/(", nums[0]);
        for i in 1..n {
            res.push_str(&nums[i].to_string());
            if i != n - 1 {
                res.push_str("/");
            }
        }
        res.push(')');
        res
    }
}

=======
Suggestion 2

        if nums.len() == 1 {
            return nums[0].to_string();
        }
        if nums.len() == 2 {
            return format!("{}/{}", nums[0], nums[1]);
        }
        let mut res = String::new();
        res.push_str(&format!("{}/(", nums[0]));
        for i in 1..nums.len() - 1 {
            res.push_str(&format!("{}/", nums[i]));
        }
        res.push_str(&format!("{})", nums[nums.len() - 1]));
        res
    }
}

=======
Suggestion 3

        let mut res = String::new();
        if nums.len() == 1 {
            return res + &nums[0].to_string();
        }
        if nums.len() == 2 {
            return res + &nums[0].to_string() + "/" + &nums[1].to_string();
        }
        res += &nums[0].to_string();
        res += "/(";
        for i in 1..nums.len() {
            res += &nums[i].to_string();
            if i != nums.len() - 1 {
                res += "/";
            }
        }
        res += ")";
        res
    }
}

=======
Suggestion 4

        let mut res = String::new();
        let n = nums.len();
        if n == 1 {
            return nums[0].to_string();
        }
        if n == 2 {
            return format!("{}/{}", nums[0], nums[1]);
        }
        res.push_str(&nums[0].to_string());
        res.push_str("/(");
        for i in 1..n {
            res.push_str(&nums[i].to_string());
            if i != n - 1 {
                res.push('/');
            }
        }
        res.push(')');
        res

=======
Suggestion 5

        let mut s = String::new();
        match nums.len() {
            0 => s,
            1 => s.push_str(&nums[0].to_string()),
            2 => {
                s.push_str(&nums[0].to_string());
                s.push('/');
                s.push_str(&nums[1].to_string());
            }
            _ => {
                s.push_str(&nums[0].to_string());
                s.push_str("/(");
                for i in 1..nums.len() {
                    s.push_str(&nums[i].to_string());
                    if i != nums.len() - 1 {
                        s.push('/');
                    }
                }
                s.push(')');
            }
        }
        s

=======
Suggestion 6

        nums.iter().enumerate().map(|(i, &n)| {
            if i == 0 {
                n.to_string()
            } else if i == 1 && nums.len() == 2 {
                format!("{}/{}", n, nums[0])
            } else {
                format!("({})", n)
            }
        }).collect::<Vec<String>>().join("/")

=======
Suggestion 7

        let nums = nums.iter().map(|x| x.to_string()).collect::<Vec<String>>();
        let mut res = nums[0].clone();
        if nums.len() == 1 {
            return res;
        }
        if nums.len() == 2 {
            return res + "/" + &nums[1];
        }
        res += "/(" + &nums[1];
        for i in 2..nums.len() {
            res += "/" + &nums[i];
        }
        res += ")";
        res
    }
}

=======
Suggestion 8

        
    }
}
