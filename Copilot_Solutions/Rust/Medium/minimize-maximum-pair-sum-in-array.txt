Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut ans = 0;
        while i < j {
            ans = ans.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        ans

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut max_sum = 0;
        while i < j {
            max_sum = max_sum.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max_sum

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut max = 0;
        while i < j {
            max = std::cmp::max(max, nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut max = 0;
        for i in 0..nums.len() / 2 {
            max = std::cmp::max(max, nums[i] + nums[nums.len() - i - 1]);
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut max = 0;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            max = max.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut max = 0;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            max = max.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut max = 0;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            max = max.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut max_sum = 0;
        while i < j {
            let sum = nums[i] + nums[j];
            max_sum = std::cmp::max(max_sum, sum);
            i += 1;
            j -= 1;
        }
        max_sum
    }
}

=======

        let mut nums = nums;
        nums.sort_unstable();
        let (mut i, mut j) = (0, nums.len() - 1);
        let mut max = 0;
        while i < j {
            max = max.max(nums[i] + nums[j]);
            i += 1;
            j -= 1;
        }
        max

=======

        let mut nums = nums;
        nums.sort();
        let mut max = 0;
        for i in 0..nums.len()/2 {
            max = max.max(nums[i] + nums[nums.len()-1-i]);
        }
        max
