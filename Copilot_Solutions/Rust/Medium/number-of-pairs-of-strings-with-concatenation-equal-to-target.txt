Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j && nums[i].to_owned() + &nums[j].to_owned() == target {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j {
                    let s = nums[i].clone() + &nums[j];
                    if s == target {
                        count += 1;
                    }
                }
            }
        }
        count

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j {
                    let s = nums[i].clone() + &nums[j];
                    if s == target {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}

=======

        let mut res = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i == j { continue; }
                if nums[i].to_string() + &nums[j] == target {
                    res += 1;
                }
            }
        }
        res
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i == j {
                    continue;
                }
                let s = nums[i].clone() + &nums[j];
                if s == target {
                    count += 1;
                }
            }
        }
        count

=======

        let mut count = 0;
        for (i, n) in nums.iter().enumerate() {
            for (j, m) in nums.iter().enumerate() {
                if i != j && n.len() + m.len() == target.len() {
                    let mut s = String::new();
                    s.push_str(n);
                    s.push_str(m);
                    if s == target {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i == j { continue; }
                let mut s = String::new();
                s.push_str(&nums[i]);
                s.push_str(&nums[j]);
                if s == target {
                    count += 1;
                }
            }
        }
        return count;
    }
}

=======

        let mut ans = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j {
                    let s = nums[i].clone() + &nums[j];
                    if s == target {
                        ans += 1;
                    }
                }
            }
        }
        ans

=======

        
    }
}

=======

        let mut count = 0;
        let mut map: std::collections::HashMap<String, i32> = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j {
                    let mut s = String::new();
                    s.push_str(&nums[i]);
                    s.push_str(&nums[j]);
                    if s == target {
                        count += 1;
                    }
                }
            }
        }
        count
    }
}
