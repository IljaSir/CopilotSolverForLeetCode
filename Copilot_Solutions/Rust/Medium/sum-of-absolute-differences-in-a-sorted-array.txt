Synthesizing 10/10 solutions

=======

        let n = nums.len();
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + nums[i];
        }
        let mut res = vec![0; n];
        for i in 0..n {
            res[i] = (nums[i] * (i as i32) - sum[i]) + (sum[n] - sum[i + 1] - nums[i] * (n - i - 1) as i32);
        }
        res

=======

        let n = nums.len();
        let mut sum = vec![0; n];
        sum[0] = nums[0];
        for i in 1..n {
            sum[i] = sum[i - 1] + nums[i];
        }
        let mut res = vec![0; n];
        for i in 0..n {
            let left = i as i32 * nums[i] - if i == 0 { 0 } else { sum[i - 1] };
            let right = if i == n - 1 { 0 } else { sum[n - 1] - sum[i] } - (n as i32 - i as i32 - 1) * nums[i];
            res[i] = left + right;
        }
        res

=======

        let n = nums.len();
        let mut res = vec![0; n];
        let mut sum = 0;
        for i in 1..n {
            sum += (nums[i] - nums[i - 1]) * i as i32;
            res[i] = sum;
        }
        sum = 0;
        for i in (0..n - 1).rev() {
            sum += (nums[i + 1] - nums[i]) * (n - i - 1) as i32;
            res[i] += sum;
        }
        res
    }
}

=======

        let n = nums.len();
        let mut sum = 0;
        let mut ans = vec![0; n];
        for i in 0..n {
            ans[0] += nums[i] - nums[0];
            sum += nums[i];
        }
        for i in 1..n {
            ans[i] = ans[i-1] + i as i32 * (nums[i] - nums[i-1]) - (sum - nums[i-1] - i as i32 * nums[i-1]);
        }
        ans
    }
}

=======

        let mut res: Vec<i32> = vec![0; nums.len()];
        let mut sum = 0;
        for i in 1..nums.len() {
            sum += (nums[i] - nums[i-1]) * (i as i32);
            res[i] = sum;
        }
        sum = 0;
        for i in (0..nums.len()-1).rev() {
            sum += (nums[i+1] - nums[i]) * ((nums.len() - i - 1) as i32);
            res[i] -= sum;
        }
        res
    }
}

=======

        let n = nums.len();
        let sum: i32 = nums.iter().sum();
        let mut res = vec![0; n];
        for i in 0..n {
            res[i] = nums[i] * i as i32 - (sum - nums[i]) + (sum - nums[i]) - nums[i] * (n - i - 1) as i32;
        }
        res
    }
}

=======

        let mut ans = vec![0; nums.len()];
        let mut sum = nums.iter().sum::<i32>();
        let mut pre = 0;
        for i in 0..nums.len() {
            ans[i] = (nums[i] * (i as i32) - pre) + (sum - pre - nums[i] * (nums.len() - i) as i32);
            pre += nums[i];
        }
        ans

=======

        let mut sum = 0;
        let mut sum2 = 0;
        let mut ans = vec![0; nums.len()];
        for i in 0..nums.len() {
            sum += nums[i];
            sum2 += nums[i] * i as i32;
        }
        for i in 0..nums.len() {
            ans[i] = nums[i] * (nums.len() as i32 - 1) - 2 * (sum - nums[i]) + sum2 - nums[i] * i as i32;
        }
        ans

=======

        let mut s = 0;
        let mut v = Vec::new();
        for i in 0..nums.len() {
            s += nums[i];
            v.push(s);
        }
        let mut ret = Vec::new();
        for i in 0..nums.len() {
            let left = i as i32 * nums[i] - v[i];
            let right = v[v.len() - 1] - v[i] - (nums.len() as i32 - i as i32 - 1) * nums[i];
            ret.push(left + right);
        }
        ret
    }
}

=======

        
    }
}
