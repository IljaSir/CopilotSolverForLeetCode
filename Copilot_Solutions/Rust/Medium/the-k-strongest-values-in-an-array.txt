Synthesizing 10/10 solutions

=======

        let mut arr = arr;
        arr.sort();
        let m = arr[(arr.len() - 1) / 2];
        arr.sort_by_key(|&x| (-(x - m).abs(), -x));
        arr.truncate(k as usize);
        arr
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let m = arr[(arr.len() - 1) / 2];
        arr.sort_by_key(|&x| (-(x - m).abs(), -x));
        arr[..k as usize].to_vec()

=======

        let mut arr = arr;
        arr.sort_unstable();
        let mid = if arr.len() % 2 == 0 {
            (arr[arr.len() / 2 - 1] + arr[arr.len() / 2]) / 2
        } else {
            arr[arr.len() / 2]
        };
        arr.sort_unstable_by(|a, b| {
            let diff_a = (a - mid).abs();
            let diff_b = (b - mid).abs();
            if diff_a == diff_b {
                b.cmp(a)
            } else {
                diff_b.cmp(&diff_a)
            }
        });
        arr.truncate(k as usize);
        arr

=======

        let n = arr.len();
        let mut arr = arr;
        arr.sort_unstable();
        let m = arr[(n - 1) / 2];
        arr.sort_unstable_by(|a, b| {
            let d1 = (a - m).abs();
            let d2 = (b - m).abs();
            if d1 > d2 {
                std::cmp::Ordering::Less
            } else if d1 < d2 {
                std::cmp::Ordering::Greater
            } else {
                b.cmp(a)
            }
        });
        arr.truncate(k as usize);
        arr

=======

        let mut arr = arr;
        arr.sort();
        let median = arr[(arr.len() - 1) / 2];
        arr.sort_by_key(|&x| (-(i32::abs(x - median)), -x));
        arr.truncate(k as usize);
        arr
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let m = arr[(arr.len() - 1) / 2];
        arr.sort_by(|a, b| {
            let x = (a - m).abs().cmp(&(b - m).abs());
            if x == std::cmp::Ordering::Equal {
                a.cmp(b)
            } else {
                x
            }
        });
        arr.reverse();
        arr[..k as usize].to_vec()
    }
}

=======

        let mut arr = arr;
        arr.sort();
        let n = arr.len();
        let m = arr[(n-1)/2];
        arr.sort_by_key(|&x| (-(i32::abs(x - m)), -x));
        arr[0..k as usize].to_vec()

=======

        let n = arr.len();
        let mut arr = arr;
        let mut k = k as usize;
        arr.sort();
        let mid = arr[(n - 1) / 2];
        arr.sort_by(|a, b| {
            let diff_a = (a - mid).abs();
            let diff_b = (b - mid).abs();
            if diff_a == diff_b {
                b.cmp(a)
            } else {
                diff_b.cmp(&diff_a)
            }
        });
        arr.truncate(k);
        arr

=======

        let mut v = arr.clone();
        v.sort();
        let m = v[(v.len() - 1) / 2];
        let mut v = arr;
        v.sort_by(|a, b| {
            let d1 = (a - m).abs();
            let d2 = (b - m).abs();
            if d1 == d2 {
                b.cmp(a)
            } else {
                d2.cmp(&d1)
            }
        });
        v[0..k as usize].to_vec()

=======

        
    }
}
