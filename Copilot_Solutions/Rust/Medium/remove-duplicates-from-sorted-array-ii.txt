Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut i = 0;
        for j in 0..nums.len() {
            if i < 2 || nums[j] != nums[i - 2] {
                nums[i] = nums[j];
                i += 1;
            }
        }
        i as i32
    }
}

=======
Suggestion 2

        if nums.len() < 3 {
            return nums.len() as i32;
        }
        let mut i = 2;
        for j in 2..nums.len() {
            if nums[i-2] != nums[j] {
                nums[i] = nums[j];
                i += 1;
            }
        }
        i as i32
    }
}

=======
Suggestion 3

        if nums.len() <= 2 {
            return nums.len() as i32;
        }
        let mut i = 2;
        let mut j = 2;
        while j < nums.len() {
            if nums[i - 2] != nums[j] {
                nums[i] = nums[j];
                i += 1;
            }
            j += 1;
        }
        i as i32
    }
}

=======
Suggestion 4

        let mut i = 0;
        let mut count = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
            }
            let k = j - i;
            if k > 2 {
                count += k - 2;
                nums[i + 2..j].rotate_left(k - 2);
            }
            i += k;
        }
        (nums.len() - count) as i32
    }
}

=======
Suggestion 5

        let mut i = 0;
        let mut j = 1;
        let mut count = 1;
        while j < nums.len() {
            if nums[i] == nums[j] {
                if count == 1 {
                    count += 1;
                    i += 1;
                    nums[i] = nums[j];
                }
            } else {
                count = 1;
                i += 1;
                nums[i] = nums[j];
            }
            j += 1;
        }
        i as i32 + 1
    }
}

=======
Suggestion 6

        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while j < nums.len() {
            if nums[i] == nums[j] {
                count += 1;
                j += 1;
            } else {
                if count > 2 {
                    nums[i + 2..j].iter_mut().for_each(|x| *x = 0);
                }
                i = j;
                count = 0;
            }
        }
        if count > 2 {
            nums[i + 2..j].iter_mut().for_each(|x| *x = 0);
        }
        nums.iter().position(|x| *x == 0).unwrap_or(nums.len()) as i32
    }
}

=======
Suggestion 7

        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while j < nums.len() {
            if j == 0 || nums[j] != nums[j - 1] {
                count = 1;
            } else {
                count += 1;
            }
            if count <= 2 {
                nums[i] = nums[j];
                i += 1;
            }
            j += 1;
        }
        i as i32
    }
}

=======
Suggestion 8

        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while j < nums.len() {
            if nums[j] == nums[i] {
                if count < 2 {
                    count += 1;
                    nums[i + 1] = nums[j];
                    i += 1;
                }
            } else {
                count = 1;
                nums[i + 1] = nums[j];
                i += 1;
            }
            j += 1;
        }
        i as i32
    }
}

=======
Suggestion 9

        let mut count = 0;
        let mut last = 0;
        let mut last_count = 0;
        for i in 0..nums.len() {
            if i == 0 {
                last = nums[i];
                last_count = 1;
            } else {
                if nums[i] == last {
                    last_count += 1;
                } else {
                    last = nums[i];
                    last_count = 1;
                }
            }
            if last_count <= 2 {
                nums[count] = nums[i];
                count += 1;
            }
        }
        count as i32
