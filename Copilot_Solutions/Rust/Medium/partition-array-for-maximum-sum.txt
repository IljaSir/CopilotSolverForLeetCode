Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let k = k as usize;
        let n = arr.len();
        let mut dp = vec![0; n + 1];
        for i in 0..n {
            let mut m = 0;
            for j in 1..=k {
                if i + 1 >= j {
                    m = m.max(arr[i + 1 - j]);
                    dp[i + 1] = dp[i + 1].max(dp[i + 1 - j] + m * j as i32);
                }
            }
        }
        dp[n]

=======

        let n = arr.len();
        let mut dp = vec![0; n];
        for i in 0..n {
            let mut cur_max = 0;
            for j in 1..=k as usize {
                if i >= j - 1 {
                    cur_max = cur_max.max(arr[i - j + 1]);
                    dp[i] = dp[i].max(dp.get(i - j).unwrap_or(&0) + cur_max * j as i32);
                }
            }
        }
        dp[n - 1]

=======

        let k = k as usize;
        let mut dp = vec![0; arr.len() + 1];
        for i in 0..arr.len() {
            let mut max = 0;
            for j in 1..=k {
                if i >= j - 1 {
                    max = max.max(arr[i - j + 1]);
                    dp[i + 1] = dp[i + 1].max(dp[i - j + 1] + max * j as i32);
                }
            }
        }
        dp[arr.len()]

=======

        let n = arr.len();
        let mut dp = vec![0; n + 1];
        for i in 0..n {
            let mut max = 0;
            for j in 0..k {
                if i as i32 - j < 0 {
                    break;
                }
                max = max.max(arr[i - j as usize]);
                dp[i + 1] = dp[i + 1].max(dp[i - j as usize] + max * (j + 1));
            }
        }
        dp[n]

=======

        let n = arr.len();
        let mut dp = vec![0; n];
        for i in 0..n {
            let mut max = 0;
            for j in 0..k.min(i as i32 + 1) {
                max = max.max(arr[i - j as usize]);
                dp[i] = dp[i].max(if i as i32 - j > 0 { dp[i - j as usize - 1] } else { 0 } + max * (j + 1));
            }
        }
        dp[n - 1]

=======

        let mut dp = vec![0; arr.len()];
        for i in 0..arr.len() {
            let mut max = arr[i];
            for j in 1..k+1 {
                if i as i32 - j + 1 >= 0 {
                    max = std::cmp::max(max, arr[i-j as usize+1]);
                    dp[i] = std::cmp::max(dp[i], if i as i32 - j >= 0 {dp[i-j as usize]} else {0} + max * j);
                } else {
                    break;
                }
            }
        }
        dp[arr.len()-1]

=======

        
    }
}
