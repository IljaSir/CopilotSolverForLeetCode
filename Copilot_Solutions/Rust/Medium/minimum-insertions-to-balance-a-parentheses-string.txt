Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = 0;
        let mut ans = 0;
        for c in s.chars() {
            if c == '(' {
                if right % 2 == 1 {
                    ans += 1;
                    right -= 1;
                }
                left += 1;
            } else {
                right += 1;
            }
            if right > left {
                ans += right / 2;
                left += right / 2;
                right %= 2;
            }
        }
        if right % 2 == 1 {
            ans += 1;
            right -= 1;
        }
        ans += right / 2;
        ans += left - right;
        ans

=======

        let mut stack = Vec::new();
        let mut ans = 0;
        for c in s.chars() {
            if c == '(' {
                stack.push(c);
            } else {
                if stack.is_empty() {
                    ans += 1;
                } else {
                    stack.pop();
                }
                if c == ')' {
                    if stack.is_empty() {
                        ans += 1;
                    } else {
                        stack.pop();
                        if stack.is_empty() {
                            ans += 1;
                        }
                    }
                }
            }
        }
        ans + stack.len() * 2

=======

        let mut ans = 0;
        let mut left = 0;
        let mut right = 0;
        for c in s.chars() {
            if c == '(' {
                left += 1;
            } else {
                right += 1;
            }
            if left == right {
                left = 0;
                right = 0;
            } else if right > left {
                ans += 1;
                right -= 1;
                left = 0;
            }
        }
        ans += left * 2;
        ans

=======

        let mut ans = 0;
        let mut stack = 0;
        let mut i = 0;
        while i < s.len() {
            if s.as_bytes()[i] == b'(' {
                stack += 1;
            } else {
                if i + 1 < s.len() && s.as_bytes()[i + 1] == b')' {
                    i += 1;
                } else {
                    ans += 1;
                }
                if stack > 0 {
                    stack -= 1;
                } else {
                    ans += 1;
                }
            }
            i += 1;
        }
        ans + stack * 2

=======

        let mut res = 0;
        let mut stack = 0;
        let mut i = 0;
        while i < s.len() {
            if s.as_bytes()[i] == b'(' {
                stack += 1;
            } else {
                if i + 1 < s.len() && s.as_bytes()[i + 1] == b')' {
                    i += 1;
                } else {
                    res += 1;
                }
                if stack > 0 {
                    stack -= 1;
                } else {
                    res += 1;
                }
            }
            i += 1;
        }
        res + stack * 2

=======

        let mut ans = 0;
        let mut open = 0;
        let mut close = 0;
        for c in s.chars() {
            if c == '(' {
                open += 1;
                if close % 2 == 1 {
                    close -= 1;
                    open += 1;
                    ans += 1;
                }
            } else {
                close += 1;
                if close == 2 {
                    close = 0;
                    if open > 0 {
                        open -= 1;
                    } else {
                        ans += 1;
                    }
                }
            }
        }
        ans + open * 2 + close

=======

        let mut a = 0;
        let mut b = 0;
        let mut r = 0;
        for c in s.chars() {
            if c == '(' {
                if b % 2 == 1 {
                    b -= 1;
                    r += 1;
                }
                a += 1;
            } else {
                b += 1;
            }
            if b == 2 {
                a -= 1;
                b = 0;
                r += 1;
            }
        }
        r + a * 2 + b

=======

        let mut result = 0;
        let mut stack: Vec<char> = Vec::new();
        for c in s.chars() {
            match c {
                '(' => {
                    stack.push(c);
                }
                ')' => {
                    if stack.len() > 0 {
                        stack.pop();
                    } else {
                        result += 1;
                    }
                    if stack.len() > 0 {
                        stack.pop();
                    } else {
                        result += 1;
                    }
                    if stack.len() > 0 && stack[stack.len() - 1] == '(' {
                        stack.pop();
                        result += 1;
                    }
                }
                _ => {
                    panic!("invalid input");
                }
            }
        }
        result += stack.len() * 2;
        result
    }
}

=======

        let mut stack = Vec::new();
        let mut cnt = 0;
        for ch in s.chars() {
            if ch == ')' {
                if stack.pop().is_none() {
                    cnt += 1;
                }
                if stack.pop().is_none() {
                    cnt += 1;
                }
            } else {
                stack.push('(');
            }
        }
        cnt + stack.len() * 2

=======

        
    }
}
