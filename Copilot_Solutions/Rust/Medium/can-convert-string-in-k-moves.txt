Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        if s.len() != t.len() {
            return false;
        }
        let mut cnt = vec![0; 26];
        for i in 0..s.len() {
            let diff = if t[i] >= s[i] { t[i] - s[i] } else { 26 - s[i] + t[i] };
            if diff > 0 {
                cnt[diff as usize] += 1;
            }
        }
        for i in 1..cnt.len() {
            if cnt[i] * i as i32 > k {
                return false;
            }
        }
        true

=======

        
    }
}

=======

        let s = s.as_bytes();
        let t = t.as_bytes();
        let k = k as usize;
        if s.len() != t.len() {
            return false;
        }
        let mut count = vec![0; 26];
        for i in 0..s.len() {
            let diff = (t[i] as i32 - s[i] as i32 + 26) % 26;
            if diff > 0 {
                count[diff as usize] += 1;
            }
        }
        for i in 1..26 {
            if count[i] * 26 + i > k {
                return false;
            }
        }
        true

=======

        let k = k as usize;
        let s = s.as_bytes();
        let t = t.as_bytes();
        if s.len() != t.len() {
            return false;
        }
        let mut cnt = vec![0; 26];
        for i in 0..s.len() {
            let d = if t[i] >= s[i] { t[i] - s[i] } else { 26 - s[i] + t[i] };
            if d > 0 {
                cnt[d as usize] += 1;
            }
        }
        for i in 1..26 {
            if cnt[i] > (k + i) / 26 {
                return false;
            }
        }
        true

=======

        if s.len() != t.len() {
            return false;
        }
        let mut count = vec![0; 26];
        for (i, c) in s.chars().enumerate() {
            let diff = (t.chars().nth(i).unwrap() as i32 - c as i32 + 26) % 26;
            if diff > 0 {
                count[diff as usize] += 1;
            }
        }
        for i in 1..26 {
            if count[i] > (k as f32 / 26.0).ceil() as i32 {
                return false;
            }
        }
        true

=======

        if s.len() != t.len() {
            return false;
        }
        let mut arr = vec![0; 26];
        for (i, c) in s.chars().enumerate() {
            let offset = (t.chars().nth(i).unwrap() as i32 - c as i32 + 26) % 26;
            if offset != 0 {
                arr[offset as usize] += 1;
            }
        }
        for i in 1..26 {
            if arr[i] > (k - i) / 26 + 1 {
                return false;
            }
        }
        true
