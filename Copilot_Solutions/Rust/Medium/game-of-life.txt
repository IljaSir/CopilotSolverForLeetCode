Synthesizing 8/10 solutions

=======
Suggestion 1

        let m = board.len();
        let n = board[0].len();
        let mut next = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut count = 0;
                for x in i.saturating_sub(1)..=i+1 {
                    for y in j.saturating_sub(1)..=j+1 {
                        if x != i || y != j {
                            if x < m && y < n {
                                if board[x][y] == 1 {
                                    count += 1;
                                }
                            }
                        }
                    }
                }
                if board[i][j] == 1 {
                    if count == 2 || count == 3 {
                        next[i][j] = 1;
                    }
                } else {
                    if count == 3 {
                        next[i][j] = 1;
                    }
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                board[i][j] = next[i][j];
            }
        }

=======
Suggestion 2

        let m = board.len();
        let n = board[0].len();
        let mut next = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut count = 0;
                for (x, y) in &[
                    (i as i32 - 1, j as i32 - 1),
                    (i as i32 - 1, j as i32),
                    (i as i32 - 1, j as i32 + 1),
                    (i as i32, j as i32 - 1),
                    (i as i32, j as i32 + 1),
                    (i as i32 + 1, j as i32 - 1),
                    (i as i32 + 1, j as i32),
                    (i as i32 + 1, j as i32 + 1),
                ] {
                    if *x >= 0 && *x < m as i32 && *y >= 0 && *y < n as i32 && board[*x as usize][*y as usize] == 1 {
                        count += 1;
                    }
                }
                if board[i][j] == 1 {
                    if count < 2 || count > 3 {
                        next[i][j] = 0;
                    } else {
                        next[i][j] = 1;
                    }
                } else {
                    if count == 3 {
                        next[i][j] = 1;
                    } else {
                        next[i][j] = 0;
                    }
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                board[i][j] = next[i][j];
            }
        }
    }
}

=======
Suggestion 3

        let mut next = vec![vec![0; board[0].len()]; board.len()];
        for i in 0..board.len() {
            for j in 0..board[0].len() {
                let mut count = 0;
                for k in -1..2 {
                    for l in -1..2 {
                        if k == 0 && l == 0 { continue; }
                        if i as i32 + k < 0 || i as i32 + k >= board.len() as i32 { continue; }
                        if j as i32 + l < 0 || j as i32 + l >= board[0].len() as i32 { continue; }
                        if board[(i as i32 + k) as usize][(j as i32 + l) as usize] == 1 { count += 1; }
                    }
                }
                if board[i][j] == 1 {
                    if count < 2 || count > 3 { next[i][j] = 0; }
                    else { next[i][j] = 1; }
                } else {
                    if count == 3 { next[i][j] = 1; }
                    else { next[i][j] = 0; }
                }
            }
        }
        for i in 0..board.len() {
            for j in 0..board[0].len() {
                board[i][j] = next[i][j];
            }
        }

=======
Suggestion 4

        let m = board.len();
        let n = board[0].len();
        let mut board2 = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut cnt = 0;
                if i > 0 {
                    if j > 0 {
                        cnt += board[i - 1][j - 1];
                    }
                    cnt += board[i - 1][j];
                    if j < n - 1 {
                        cnt += board[i - 1][j + 1];
                    }
                }
                if j > 0 {
                    cnt += board[i][j - 1];
                }
                if j < n - 1 {
                    cnt += board[i][j + 1];
                }
                if i < m - 1 {
                    if j > 0 {
                        cnt += board[i + 1][j - 1];
                    }
                    cnt += board[i + 1][j];
                    if j < n - 1 {
                        cnt += board[i + 1][j + 1];
                    }
                }
                if board[i][j] == 1 {
                    if cnt == 2 || cnt == 3 {
                        board2[i][j] = 1;
                    }
                } else if cnt == 3 {
                    board2[i][j] = 1;
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                board[i][j] = board2[i][j];
            }
        }
    }
}

=======
Suggestion 5

        
    }
}

=======
Suggestion 6

        // A live cell with fewer than two live neighbors dies as if caused by under-population.
        // A live cell with two or three live neighbors lives on to the next generation.
        // A live cell with more than three live neighbors dies, as if by over-population.
        // A dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
        // 0 -> 1: 2
        // 1 -> 0: 3
        let m = board.len();
        let n = board[0].len();
        let mut neighbors = vec![vec![0; n]; m];
        for i in 0..m {
            for j in 0..n {
                let mut count = 0;
                for x in i.saturating_sub(1)..=i+1 {
                    for y in j.saturating_sub(1)..=j+1 {
                        if x == i && y == j {
                            continue;
                        }
                        if x < m && y < n {
                            count += board[x][y] & 1;
                        }
                    }
                }
                neighbors[i][j] = count;
            }
        }
        for i in 0..m {
            for j in 0..n {
                if board[i][j] == 1 && (neighbors[i][j] < 2 || neighbors[i][j] > 3) {
                    board[i][j] = 3;
                }
                if board[i][j] == 0 && neighbors[i][j] == 3 {
                    board[i][j] = 2;
                }
            }
        }
        for i in 0..m {
            for j in 0..n {
                board[i][j] >>= 1;
            }
        }
    }
}

=======
Suggestion 7

        let mut copy = board.clone();
        for i in 0..board.len() {
            for j in 0..board[i].len() {
                let mut count = 0;
                for x in -1..=1 {
                    for y in -1..=1 {
                        if x == 0 && y == 0 {
                            continue;
                        }
                        if i as i32 + x < 0 || i as i32 + x >= board.len() as i32 ||
                            j as i32 + y < 0 || j as i32 + y >= board[i].len() as i32 {
                            continue;
                        }
                        if board[(i as i32 + x) as usize][(j as i32 + y) as usize] == 1 {
                            count += 1;
                        }
                    }
                }
                if board[i][j] == 1 {
                    if count < 2 {
                        copy[i][j] = 0;
                    }
                    if count == 2 || count == 3 {
                        copy[i][j] = 1;
                    }
                    if count > 3 {
                        copy[i][j] = 0;
                    }
                } else {
                    if count == 3 {
                        copy[i][j] = 1;
                    }
                }
            }
        }
        *board = copy;
    }
}

=======
Suggestion 8

        let mut new_board = board.clone();
        for (i, row) in board.iter().enumerate() {
            for (j, val) in row.iter().enumerate() {
                let mut count = 0;
                if i > 0 && j > 0 && board[i - 1][j - 1] == 1 {
                    count += 1;
                }
                if i > 0 && board[i - 1][j] == 1 {
                    count += 1;
                }
                if i > 0 && j < board[0].len() - 1 && board[i - 1][j + 1] == 1 {
                    count += 1;
                }
                if j > 0 && board[i][j - 1] == 1 {
                    count += 1;
                }
                if j < board[0].len() - 1 && board[i][j + 1] == 1 {
                    count += 1;
                }
                if i < board.len() - 1 && j > 0 && board[i + 1][j - 1] == 1 {
                    count += 1;
                }
                if i < board.len() - 1 && board[i + 1][j] == 1 {
                    count += 1;
                }
                if i < board.len() - 1 && j < board[0].len() - 1 && board[i + 1][j + 1] == 1 {
                    count += 1;
                }
                if *val == 0 {
                    if count == 3 {
                        new_board[i][j] = 1;
                    }
                } else {
                    if count < 2 || count > 3 {
                        new_board[i][j] = 0;
                    }
                }
            }
        }
        *board = new_board;
    }
}
