Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut uf = UnionFind::new(26);
        for eq in equations.iter() {
            if eq.as_bytes()[1] == b'=' {
                let a = (eq.as_bytes()[0] - b'a') as usize;
                let b = (eq.as_bytes()[3] - b'a') as usize;
                uf.union(a, b);
            }
        }
        for eq in equations.iter() {
            if eq.as_bytes()[1] == b'!' {
                let a = (eq.as_bytes()[0] - b'a') as usize;
                let b = (eq.as_bytes()[3] - b'a') as usize;
                if uf.find(a) == uf.find(b) {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut uf = UnionFind::new(26);
        for equation in equations.iter() {
            if equation.as_bytes()[1] == b'=' {
                let x = equation.as_bytes()[0] - b'a';
                let y = equation.as_bytes()[3] - b'a';
                uf.union(x as usize, y as usize);
            }
        }
        for equation in equations.iter() {
            if equation.as_bytes()[1] == b'!' {
                let x = equation.as_bytes()[0] - b'a';
                let y = equation.as_bytes()[3] - b'a';
                if uf.connected(x as usize, y as usize) {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut uf = UnionFind::new(26);
        for eq in &equations {
            if eq.as_bytes()[1] == b'=' {
                let i = eq.as_bytes()[0] - b'a';
                let j = eq.as_bytes()[3] - b'a';
                uf.union(i as usize, j as usize);
            }
        }
        for eq in &equations {
            if eq.as_bytes()[1] == b'!' {
                let i = eq.as_bytes()[0] - b'a';
                let j = eq.as_bytes()[3] - b'a';
                if uf.connected(i as usize, j as usize) {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut parent = vec![0; 26];
        for i in 0..26 {
            parent[i] = i;
        }
        for s in equations.iter() {
            if s.as_bytes()[1] == b'=' {
                let a = s.as_bytes()[0] - b'a';
                let b = s.as_bytes()[3] - b'a';
                let pa = Self::find(&mut parent, a as usize);
                let pb = Self::find(&mut parent, b as usize);
                if pa != pb {
                    parent[pa] = pb;
                }
            }
        }
        for s in equations.iter() {
            if s.as_bytes()[1] == b'!' {
                let a = s.as_bytes()[0] - b'a';
                let b = s.as_bytes()[3] - b'a';
                let pa = Self::find(&mut parent, a as usize);
                let pb = Self::find(&mut parent, b as usize);
                if pa == pb {
                    return false;
                }
            }
        }
        true
    }
    fn find(parent: &mut Vec<usize>, i: usize) -> usize {
        if i == parent[i] {
            return i;
        }
        let p = Self::find(parent, parent[i]);
        parent[i] = p;
        p

=======

        let mut uf = UnionFind::new(26);
        for equation in equations.iter() {
            if equation.as_bytes()[1] == '=' as u8 {
                let a = equation.as_bytes()[0] - 'a' as u8;
                let b = equation.as_bytes()[3] - 'a' as u8;
                uf.union(a as usize, b as usize);
            }
        }
        for equation in equations.iter() {
            if equation.as_bytes()[1] == '!' as u8 {
                let a = equation.as_bytes()[0] - 'a' as u8;
                let b = equation.as_bytes()[3] - 'a' as u8;
                if uf.find(a as usize) == uf.find(b as usize) {
                    return false;
                }
            }
        }
        true
    }
}

=======

        
    }
}

=======

        let n = equations.len();
        let mut eq = vec![vec![]; 26];
        let mut neq = vec![vec![]; 26];
        for i in 0..n {
            let eqs = equations[i].as_bytes();
            if eqs[1] == b'=' {
                eq[(eqs[0] - b'a') as usize].push((eqs[3] - b'a') as usize);
                eq[(eqs[3] - b'a') as usize].push((eqs[0] - b'a') as usize);
            } else {
                neq[(eqs[0] - b'a') as usize].push((eqs[3] - b'a') as usize);
                neq[(eqs[3] - b'a') as usize].push((eqs[0] - b'a') as usize);
            }
        }
        let mut vis = vec![false; 26];
        for i in 0..26 {
            if !vis[i] {
                if !Self::dfs(i, &mut vis, &eq, &neq) {
                    return false;
                }
            }
        }
        true
    }
    fn dfs(cur: usize, vis: &mut Vec<bool>, eq: &Vec<Vec<usize>>, neq: &Vec<Vec<usize>>) -> bool {
        vis[cur] = true;
        for &i in eq[cur].iter() {
            if !vis[i] {
                if !Self::dfs(i, vis, eq, neq) {
                    return false;
                }
            }
        }
        for &i in neq[cur].iter() {
            if vis[i] {
                return false;
            }
        }
        true
