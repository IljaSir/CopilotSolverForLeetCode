Synthesizing 3/10 solutions

=======

        let n = n as usize;
        let mut g = vec![vec![]; n];
        for c in connections {
            g[c[0] as usize].push(c[1] as usize);
            g[c[1] as usize].push(c[0] as usize);
        }
        
        let mut visited = vec![false; n];
        let mut q = vec![0];
        visited[0] = true;
        let mut res = 0;
        while !q.is_empty() {
            let mut next = vec![];
            for &u in &q {
                for &v in &g[u] {
                    if !visited[v] {
                        next.push(v);
                        visited[v] = true;
                        if !g[v].contains(&u) {
                            res += 1;
                        }
                    }
                }
            }
            q = next;
        }
        res

=======

        let n = n as usize;
        let mut graph = vec![vec![]; n];
        for connection in connections {
            let (a, b) = (connection[0] as usize, connection[1] as usize);
            graph[a].push((b, true));
            graph[b].push((a, false));
        }
        let mut visited = vec![false; n];
        let mut count = 0;
        let mut stack = vec![0];
        while let Some(node) = stack.pop() {
            if visited[node] {
                continue;
            }
            visited[node] = true;
            for (neibor, forward) in &graph[node] {
                if !visited[*neibor] {
                    if *forward {
                        count += 1;
                    }
                    stack.push(*neibor);
                }
            }
        }
        count

=======

        let mut adj = vec![vec![]; n as usize];
        for c in connections {
            adj[c[0] as usize].push((c[1] as usize, 1));
            adj[c[1] as usize].push((c[0] as usize, 0));
        }
        let mut visited = vec![false; n as usize];
        let mut stack = vec![(0, 0)];
        let mut res = 0;
        while let Some((u, d)) = stack.pop() {
            if visited[u] { continue; }
            visited[u] = true;
            res += d;
            for &(v, d) in &adj[u] {
                stack.push((v, d));
            }
        }
        res
