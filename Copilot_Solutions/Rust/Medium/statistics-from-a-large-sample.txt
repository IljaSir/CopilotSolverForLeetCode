Synthesizing 10/10 solutions

=======

        let mut min = -1;
        let mut max = -1;
        let mut mean = 0.0;
        let mut median = 0.0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut sum = 0;
        let mut count_sum = 0;
        for i in 0..count.len() {
            if count[i] > 0 {
                if min == -1 {
                    min = i as i32;
                }
                max = i as i32;
                sum += i as i32 * count[i];
                if count[i] > mode_count {
                    mode = i as i32;
                    mode_count = count[i];
                }
            }
            count_sum += count[i];
        }
        mean = sum as f64 / count_sum as f64;
        let mut count_sum = 0;
        for i in 0..count.len() {
            count_sum += count[i];
            if count_sum >= count_sum / 2 {
                median = i as f64;
                if count_sum > count_sum / 2 {
                    median += 0.5;
                }
                break;
            }
        }
        vec![min as f64, max as f64, mean, median, mode as f64]
    }
}

=======

        let mut min = 255;
        let mut max = 0;
        let mut sum = 0;
        let mut count_sum = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0.0;
        for (i, &c) in count.iter().enumerate() {
            if c > 0 {
                min = i;
                break;
            }
        }
        for (i, &c) in count.iter().enumerate().rev() {
            if c > 0 {
                max = i;
                break;
            }
        }
        for (i, &c) in count.iter().enumerate() {
            if c > 0 {
                sum += i * c as usize;
                count_sum += c as usize;
                if c > mode_count {
                    mode_count = c;
                    mode = i;
                }
            }
        }
        let mut median_count = 0;
        if count_sum % 2 == 0 {
            let mut first = 0;
            for (i, &c) in count.iter().enumerate() {
                if c > 0 {
                    median_count += c as usize;
                    if median_count >= count_sum / 2 {
                        first = i;
                        break;
                    }
                }
            }
            let mut second = 0;
            for (i, &c) in count.iter().enumerate() {
                if c > 0 {
                    median_count += c as usize;
                    if median_count >= count_sum / 2 + 1 {
                        second = i;
                        break;
                    }
                }
            }
            median = (first + second) as f64 / 2f64;
        } else {
            for (i, &c) in count.iter().enumerate() {
                if c > 0 {
                    median_count += c as usize;
                    if median_count > count_sum / 2 {
                        median = i as f64;
                        break;
                    }
                }
            }
        }
        vec![
            min as f64,
            max as f64,
            sum as f64 / count_sum as f64,
            median,
            mode as f64,
        ]
    }
}

=======

        let mut min = 0;
        let mut max = 0;
        let mut mean = 0;
        let mut median = 0;
        let mut mode = 0;
        
        let mut sum = 0;
        let mut count_sum = 0;
        let mut mode_count = 0;
        let mut count_sum_half = 0;
        let mut median1 = 0;
        let mut median2 = 0;
        
        for i in 0..count.len() {
            if count[i] > 0 {
                if min == 0 {
                    min = i as i32;
                }
                max = i as i32;
                sum += count[i] * (i as i32);
                count_sum += count[i];
                if count[i] > mode_count {
                    mode_count = count[i];
                    mode = i as i32;
                }
            }
        }
        mean = sum / count_sum;
        
        if count_sum % 2 == 0 {
            count_sum_half = count_sum / 2;
            for i in 0..count.len() {
                if count[i] > 0 {
                    if count_sum_half - count[i] >= 0 {
                        count_sum_half -= count[i];
                    } else if count_sum_half - count[i] < 0 {
                        median1 = i as i32;
                        break;
                    }
                }
            }
            for i in 0..count.len() {
                if count[i] > 0 {
                    if count_sum_half - count[i] >= 0 {
                        count_sum_half -= count[i];
                    } else if count_sum_half - count[i] < 0 {
                        median2 = i as i32;
                        break;
                    }
                }
            }
            median = (median1 + median2) / 2;
        } else {
            count_sum_half = count_sum / 2 + 1;
            for i in 0..count.len() {
                if count[i] > 0 {
                    if count_sum_half - count[i] > 0 {
                        count_sum_half -= count[i];
                    } else if count_sum_half - count[i] <= 0 {
                        median = i as i32;
                        break;
                    }
                }
            }
        }
        
        vec![min as f64, max as f64, mean as f64, median as f

=======

        let mut min = 0;
        let mut max = 0;
        let mut sum = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0.0;
        let mut median_count = 0;
        let mut count_sum = 0;
        let mut count_sum_2 = 0;
        for i in 0..256 {
            if count[i as usize] > 0 {
                min = i;
                break;
            }
        }
        for i in (0..256).rev() {
            if count[i as usize] > 0 {
                max = i;
                break;
            }
        }
        for i in 0..256 {
            sum += i * count[i as usize];
            if count[i as usize] > mode_count {
                mode = i;
                mode_count = count[i as usize];
            }
            count_sum += count[i as usize];
            if count_sum >= count_sum_2 + count_sum / 2 {
                median += i as f64;
                count_sum_2 += count_sum;
            }
        }
        median /= (count_sum_2 / 2) as f64;
        vec![
            min as f64,
            max as f64,
            sum as f64 / count_sum as f64,
            median,
            mode as f64,
        ]

=======

        let mut min = 0;
        let mut max = 0;
        let mut sum = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0.0;
        let mut median_count = 0;
        let mut median_count_max = 0;
        let mut median_count_min = 0;
        let mut median_count_min_found = false;
        let mut count_sum = 0;
        let mut count_sum_max = 0;
        let mut count_sum_min = 0;
        let mut count_sum_min_found = false;
        for (i, c) in count.iter().enumerate() {
            if *c > 0 {
                if !count_sum_min_found {
                    count_sum_min = count_sum;
                    median_count_min = median_count;
                    median_count_min_found = true;
                }
                count_sum_max = count_sum;
                median_count_max = median_count;
                min = i as i32;
                max = i as i32;
                sum += i as i32 * c;
                if *c > mode_count {
                    mode_count = *c;
                    mode = i as i32;
                }
            }
            count_sum += c;
            median_count += c;
            if count_sum == count_sum_max / 2 && !median_count_min_found {
                median_count_min = median_count;
                count_sum_min = count_sum;
                median_count_min_found = true;
            }
            if count_sum == count_sum_max / 2 + 1 {
                median_count_max = median_count;
                count_sum_max = count_sum;
            }
        }
        if count_sum_max % 2 == 1 {
            median = mode as f64;
        } else {
            median = (median_count_max + median_count_min) as f64 / 2.0;
        }
        vec![
            min as f64,
            max as f64,
            sum as f64 / count_sum as f64,
            median,
            mode as f64,
        ]
    }
}

=======

        let mut min = 0;
        let mut max = 0;
        let mut sum = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0;
        let mut median_count = 0;
        let mut total_count = 0;
        let mut odd = false;
        let mut mean = 0.0;
        for (i, &c) in count.iter().enumerate() {
            if c > 0 {
                min = i;
                break;
            }
        }
        for (i, &c) in count.iter().enumerate().rev() {
            if c > 0 {
                max = i;
                break;
            }
        }
        for (i, &c) in count.iter().enumerate() {
            if c > 0 {
                if c > mode_count {
                    mode = i;
                    mode_count = c;
                }
                sum += i * c as usize;
                total_count += c as usize;
            }
        }
        mean = sum as f64 / total_count as f64;
        if total_count % 2 == 1 {
            odd = true;
        }
        for (i, &c) in count.iter().enumerate() {
            if c > 0 {
                median_count += c as usize;
                if odd && median_count == total_count / 2 + 1 {
                    median = i as f64;
                    break;
                } else if !odd && median_count == total_count / 2 {
                    median = i as f64;
                } else if !odd && median_count == total_count / 2 + 1 {
                    median = (median + i as f64) / 2.0;
                    break;
                }
            }
        }
        vec![(min as f64), (max as f64), mean, median, (mode as f64)]
    }
}

=======

        let mut sum = 0;
        let mut total = 0;
        let mut min = 0;
        let mut max = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0;
        let mut median_count = 0;
        let mut median1 = 0;
        let mut median2 = 0;
        for i in 0..count.len() {
            let c = count[i];
            if c > 0 {
                if min == 0 {
                    min = i as i32;
                }
                max = i as i32;
                sum += c * i as i32;
                total += c;
                if c > mode_count {
                    mode = i as i32;
                    mode_count = c;
                }
                if median_count < total / 2 {
                    median1 = i as i32;
                    median_count += c;
                } else if median_count >= total / 2 && median_count < total / 2 + (total % 2) {
                    median2 = i as i32;
                    median_count += c;
                }
            }
        }
        if total % 2 == 0 {
            median = (median1 + median2) as f64 / 2.0;
        } else {
            median = median2 as f64;
        }
        vec![
            min as f64,
            max as f64,
            sum as f64 / total as f64,
            median,
            mode as f64,
        ]
    }
}

=======

        let mut min = 0;
        let mut max = 0;
        let mut sum = 0;
        let mut count = count;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0;
        let mut median_count = 0;
        let mut median_idx = 0;
        let mut median_idx2 = 0;
        let mut total = 0;
        for i in 0..count.len() {
            if count[i] > 0 {
                min = i as i32;
                break;
            }
        }
        for i in (0..count.len()).rev() {
            if count[i] > 0 {
                max = i as i32;
                break;
            }
        }
        for i in 0..count.len() {
            if count[i] > 0 {
                if count[i] > mode_count {
                    mode = i as i32;
                    mode_count = count[i];
                }
                sum += i as i32 * count[i];
                total += count[i];
            }
        }
        if total % 2 == 1 {
            median_count = total / 2 + 1;
        } else {
            median_count = total / 2;
        }
        for i in 0..count.len() {
            if count[i] > 0 {
                median_idx += count[i];
                if median_idx >= median_count {
                    median_idx2 = i as i32;
                    if median_count * 2 == total {
                        median = (median_idx2 + median) as f64 / 2.0;
                    } else {
                        median = median_idx2 as f64;
                    }
                    break;
                }
                median = i as i32;
            }
        }
        return vec![
            min as f64,
            max as f64,
            sum as f64 / total as f64,
            median,
            mode as f64,
        ];
    }
}

=======

        let mut max = 0;
        let mut min = 255;
        let mut sum = 0;
        let mut count_sum = 0;
        let mut mode = 0;
        let mut mode_count = 0;
        let mut median = 0.0;
        for i in 0..255 {
            if count[i as usize] > 0 {
                if i < min {
                    min = i;
                }
                if i > max {
                    max = i;
                }
                sum += i * count[i as usize];
                count_sum += count[i as usize];
                if count[i as usize] > mode_count {
                    mode_count = count[i as usize];
                    mode = i;
                }
            }
        }
        let mut count_sum2 = 0;
        for i in 0..255 {
            if count[i as usize] > 0 {
                count_sum2 += count[i as usize];
                if count_sum2 >= count_sum / 2 {
                    if count_sum % 2 == 0 && count_sum2 == count_sum / 2 {
                        median = (i + i + 1) as f64 / 2.0;
                    } else {
                        median = i as f64;
                    }
                    break;
                }
            }
        }
        vec![
            min as f64,
            max as f64,
            sum as f64 / count_sum as f64,
            median,
            mode as f64,
        ]
    }
}

=======

        let mut min = 255;
        let mut max = 0;
        let mut sum = 0;
        let mut sum2 = 0;
        let mut mode = 0;
        let mut mode2 = 0;
        let mut median = 0;
        let mut median2 = 0;
        let mut median3 = 0;
        let mut median4 = 0;
        let mut median5 = 0;
        let mut median6 = 0;
        let mut median7 = 0;
        let mut median8 = 0;
        let mut median9 = 0;
        let mut median10 = 0;
        let mut median11 = 0;
        let mut median12 = 0;
        let mut median13 = 0;
        let mut median14 = 0;
        let mut median15 = 0;
        let mut median16 = 0;
        let mut median17 = 0;
        let mut median18 = 0;
        let mut median19 = 0;
        let mut median20 = 0;
        let mut median21 = 0;
        let mut median22 = 0;
        let mut median23 = 0;
        let mut median24 = 0;
        let mut median25 = 0;
        let mut median26 = 0;
        let mut median27 = 0;
        let mut median28 = 0;
        let mut median29 = 0;
        let mut median30 = 0;
        let mut median31 = 0;
        let mut median32 = 0;
        let mut median33 = 0;
        let mut median34 = 0;
        let mut median35 = 0;
        let mut median36 = 0;
        let mut median37 = 0;
        let mut median38 = 0;
        let mut median39 = 0;
        let mut median40 = 0;
        let mut median41 = 0;
        let mut median42 = 0;
        let mut median43 = 0;
        let mut median44 = 0;
        let mut median45 = 0;
        let mut median46 = 0;
        let mut median47 = 0;
        let mut median48 = 0;
        let mut median49 = 0;
        let mut median50 = 0;
