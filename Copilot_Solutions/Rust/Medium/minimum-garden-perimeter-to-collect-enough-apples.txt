Synthesizing 6/10 solutions

=======

        let mut n = 0;
        let mut sum = 0;
        while sum < needed_apples {
            n += 1;
            sum += 12 * n * (n + 1) * (2 * n + 1) / 6;
        }
        8 * n

=======

        let mut apples = 0;
        let mut i = 0;
        while apples < needed_apples {
            i += 1;
            apples += 12 * i * i;
        }
        i * 8

=======

        let mut n = 1;
        while (n * n * (n + 1) * (n + 1) / 4) < needed_apples {
            n += 1;
        }
        n * 8
    }
}

=======

        let mut k = 1;
        let mut apples = 0;
        while apples < needed_apples {
            k += 1;
            apples += 12 * k * (k + 1) * (2 * k + 1) / 6;
        }
        k * 8

=======

        let mut n = 1;
        let mut apples = 0;
        while apples < needed_apples {
            n += 2;
            apples += 4 * (n - 1) * (n - 1);
        }
        n * 4

=======

        let mut n = 1;
        let mut apples = 0;
        loop {
            let cur = 2 * (n * n + n) * (n + 1);
            apples += cur;
            if apples >= needed_apples {
                return 8 * n;
            }
            n += 1;
        }
    }
}
