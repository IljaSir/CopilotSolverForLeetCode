Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut left = vec![1; nums.len()];
        let mut right = vec![1; nums.len()];
        for i in 1..nums.len() {
            left[i] = left[i-1] * nums[i-1];
            right[nums.len()-i-1] = right[nums.len()-i] * nums[nums.len()-i];
        }
        for i in 0..nums.len() {
            left[i] *= right[i];
        }
        left

=======
Suggestion 2

        let mut res = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            res[i] *= left;
            left *= nums[i];
            res[nums.len() - 1 - i] *= right;
            right *= nums[nums.len() - 1 - i];
        }
        res

=======
Suggestion 3

        let mut res = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            res[i] *= left;
            left *= nums[i];
            res[nums.len() - 1 - i] *= right;
            right *= nums[nums.len() - 1 - i];
        }
        res
    }
}

=======
Suggestion 4

        let mut ans = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            ans[i] *= left;
            left *= nums[i];
            ans[nums.len() - i - 1] *= right;
            right *= nums[nums.len() - i - 1];
        }
        ans

=======
Suggestion 5

        let mut result = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            result[i] *= left;
            result[nums.len() - i - 1] *= right;
            left *= nums[i];
            right *= nums[nums.len() - i - 1];
        }
        result

=======
Suggestion 6

        let mut result = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            result[i] *= left;
            result[nums.len() - 1 - i] *= right;
            left *= nums[i];
            right *= nums[nums.len() - 1 - i];
        }
        return result;

=======
Suggestion 7

        let mut ans = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            ans[i] *= left;
            ans[nums.len() - 1 - i] *= right;
            left *= nums[i];
            right *= nums[nums.len() - 1 - i];
        }
        ans

=======
Suggestion 8

        let mut output = vec![1; nums.len()];
        let mut left = 1;
        let mut right = 1;
        for i in 0..nums.len() {
            output[i] *= left;
            output[nums.len() - 1 - i] *= right;
            left *= nums[i];
            right *= nums[nums.len() - 1 - i];
        }
        output

=======
Suggestion 9

        let mut ret = vec![1; nums.len()];
        let mut l = 1;
        let mut r = 1;
        for i in 0..nums.len() {
            ret[i] *= l;
            l *= nums[i];
            ret[nums.len() - i - 1] *= r;
            r *= nums[nums.len() - i - 1];
        }
        ret
