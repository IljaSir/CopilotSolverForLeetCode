Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let n = nums.len();
        let k = k as usize;
        for i in 0..k {
            ans = ans * nums[i] % 1000000007;
        }
        for i in 0..k {
            ans = ans * nums[n - i - 1] % 1000000007;
        }
        ans as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 1;
        let n = nums.len();
        for i in 0..k as usize {
            res *= nums[i];
            res %= 1_000_000_007;
        }
        for i in 0..k as usize {
            res *= nums[n - 1 - i];
            res %= 1_000_000_007;
        }
        res as i32

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len() as i32;
        let k = k as usize;
        let mut res = 1;
        for i in 0..k {
            res *= nums[i];
        }
        for i in 0..k {
            res *= nums[n as usize - 1 - i];
        }
        res as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let n = nums.len();
        for i in 0..k as usize {
            ans *= nums[i];
            ans %= 1_000_000_007;
        }
        for i in 0..k as usize {
            ans *= nums[n - 1 - i];
            ans %= 1_000_000_007;
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let n = nums.len();
        let k = k as usize;
        for i in 0..k {
            ans *= nums[n - 1 - i];
            ans %= 1000000007;
        }
        for i in 0..k {
            ans *= nums[i];
            ans %= 1000000007;
        }
        ans as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let mut i = 0;
        let mut j = nums.len() - 1;
        let k = k as usize;
        while i < k {
            ans = (ans * nums[i]) % 1000000007;
            i += 1;
        }
        while k > 0 {
            ans = (ans * nums[j]) % 1000000007;
            j -= 1;
            k -= 1;
        }
        ans as i32

=======

        let mut nums = nums;
        let k = k as usize;
        nums.sort();
        let mut ans = 1;
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < k {
            ans = ans * nums[i] as i64 % 1000000007;
            i += 1;
        }
        while j >= nums.len() - k {
            ans = ans * nums[j] as i64 % 1000000007;
            j -= 1;
        }
        ans as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 1;
        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut k = k;
        while k > 0 {
            if k % 2 == 0 {
                ans = ans * nums[i] % 1000000007;
                i += 1;
                k -= 1;
            } else {
                ans = ans * nums[j] % 1000000007;
                j -= 1;
                k -= 1;
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort_unstable();
        let n = nums.len();
        let mut result = 1;
        let mut i = 0;
        let mut j = n - 1;
        let mut k = k as usize;
        while k > 0 {
            if k == 1 {
                result *= nums[j];
                break;
            }
            if k == 2 {
                result *= nums[j] * nums[j - 1];
                break;
            }
            if nums[i] * nums[i + 1] > nums[j] * nums[j - 1] {
                result *= nums[i] * nums[i + 1];
                i += 2;
            } else {
                result *= nums[j] * nums[j - 1];
                j -= 2;
            }
            k -= 2;
        }
        (result % 1_000_000_007) as i32

=======

        let mut nums = nums;
        let mut k = k;
        let mut i = 0;
        nums.sort();
        let mut min = 0;
        let mut max = 0;
        let mut min_i = 0;
        let mut max_i = nums.len() - 1;
        while k > 0 {
            if nums[min_i] < nums[max_i] {
                min += nums[min_i];
                min_i += 1;
            } else {
                max += nums[max_i];
                max_i -= 1;
            }
            k -= 1;
        }
        let mut ans = 1;
        for i in min_i..max_i+1 {
            ans *= nums[i];
            ans %= 1000000007;
        }
        ans
