Synthesizing 8/10 solutions (Duplicates hidden)

=======

        let mut ans = 0;
        let mut m1 = std::collections::HashMap::new();
        let mut m2 = std::collections::HashMap::new();
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                let k = nums1[i] * nums1[j];
                let v = m1.entry(k).or_insert(0);
                *v += 1;
            }
        }
        for i in 0..nums2.len() {
            for j in i+1..nums2.len() {
                let k = nums2[i] * nums2[j];
                let v = m2.entry(k).or_insert(0);
                *v += 1;
            }
        }
        for i in 0..nums1.len() {
            let k = nums1[i] * nums1[i];
            if let Some(v) = m2.get(&k) {
                ans += v;
            }
        }
        for i in 0..nums2.len() {
            let k = nums2[i] * nums2[i];
            if let Some(v) = m1.get(&k) {
                ans += v;
            }
        }
        ans

=======

        let mut res = 0;
        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        for i in 0..nums1.len() {
            for j in 0..nums2.len()-1 {
                for k in j+1..nums2.len() {
                    if nums1[i]*nums1[i] == nums2[j]*nums2[k] {
                        res += 1;
                    }
                }
            }
        }
        for i in 0..nums2.len() {
            for j in 0..nums1.len()-1 {
                for k in j+1..nums1.len() {
                    if nums2[i]*nums2[i] == nums1[j]*nums1[k] {
                        res += 1;
                    }
                }
            }
        }
        res
    }
}

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                let t = nums1[i] * nums1[j];
                let mut cnt = 0;
                for k in 0..nums2.len() {
                    if nums2[k] * nums2[k] == t {
                        cnt += 1;
                    }
                }
                res += cnt;
            }
        }
        for i in 0..nums2.len() {
            for j in i+1..nums2.len() {
                let t = nums2[i] * nums2[j];
                let mut cnt = 0;
                for k in 0..nums1.len() {
                    if nums1[k] * nums1[k] == t {
                        cnt += 1;
                    }
                }
                res += cnt;
            }
        }
        res
    }
}

=======

        let mut ans = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                let mut k = 0;
                while k < nums2.len() {
                    if nums1[i] * nums1[j] == nums2[k] * nums2[k] {
                        ans += 1;
                    }
                    k += 1;
                }
            }
        }
        for i in 0..nums2.len() {
            for j in i+1..nums2.len() {
                let mut k = 0;
                while k < nums1.len() {
                    if nums2[i] * nums2[j] == nums1[k] * nums1[k] {
                        ans += 1;
                    }
                    k += 1;
                }
            }
        }
        ans

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                let x = nums1[i] * nums1[j];
                let y = nums1[i] * nums1[i];
                let z = nums1[j] * nums1[j];
                res += nums2.iter().filter(|&&a| a*a == x).count() as i32;
                res += nums2.iter().filter(|&&a| a*a == y).count() as i32;
                res += nums2.iter().filter(|&&a| a*a == z).count() as i32;
            }
        }
        for i in 0..nums2.len() {
            for j in i+1..nums2.len() {
                let x = nums2[i] * nums2[j];
                let y = nums2[i] * nums2[i];
                let z = nums2[j] * nums2[j];
                res += nums1.iter().filter(|&&a| a*a == x).count() as i32;
                res += nums1.iter().filter(|&&a| a*a == y).count() as i32;
                res += nums1.iter().filter(|&&a| a*a == z).count() as i32;
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in 0..nums1.len() {
                if i != j {
                    let n = nums1[i] * nums1[j];
                    let mut k = 0;
                    while k < nums2.len() {
                        if n == nums2[k] * nums2[k] {
                            res += 1;
                        }
                        k += 1;
                    }
                }
            }
        }
        for i in 0..nums2.len() {
            for j in 0..nums2.len() {
                if i != j {
                    let n = nums2[i] * nums2[j];
                    let mut k = 0;
                    while k < nums1.len() {
                        if n == nums1[k] * nums1[k] {
                            res += 1;
                        }
                        k += 1;
                    }
                }
            }
        }
        res

=======

        let mut res = 0;
        for i in 0..nums1.len() {
            for j in i+1..nums1.len() {
                let mut v = nums1[i] * nums1[j];
                let mut cnt = 0;
                for k in 0..nums2.len() {
                    if v == nums2[k] * nums2[k] {
                        cnt += 1;
                    }
                }
                res += cnt;
            }
        }
        for i in 0..nums2.len() {
            for j in i+1..nums2.len() {
                let mut v = nums2[i] * nums2[j];
                let mut cnt = 0;
                for k in 0..nums1.len() {
                    if v == nums1[k] * nums1[k] {
                        cnt += 1;
                    }
                }
                res += cnt;
            }
        }
        res
