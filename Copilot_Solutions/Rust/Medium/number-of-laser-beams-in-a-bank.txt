Synthesizing 8/10 solutions

=======

        let mut sum = 0;
        for i in 0..bank[0].len() {
            let mut first = -1;
            for j in 0..bank.len() {
                if bank[j].chars().nth(i).unwrap() == '1' {
                    if first == -1 {
                        first = j as i32;
                    } else {
                        sum += j as i32 - first - 1;
                    }
                }
            }
        }
        sum

=======

        let mut res = 0;
        let mut prev = 0;
        for i in 0..bank.len() {
            let mut cur = 0;
            for j in 0..bank[i].len() {
                if bank[i].chars().nth(j).unwrap() == '1' {
                    cur += 1;
                }
            }
            res += cur * prev;
            prev = cur;
        }
        res

=======

        let mut ans = 0;
        let mut prev = 0;
        for i in 0..bank.len() {
            let mut cur = 0;
            for j in 0..bank[i].len() {
                if bank[i].chars().nth(j).unwrap() == '1' {
                    cur += 1;
                }
            }
            ans += prev * cur;
            prev += cur;
        }
        ans

=======

        let mut result = 0;
        let mut is_beam = false;
        for i in 0..bank[0].len() {
            for j in 0..bank.len() {
                if bank[j].chars().nth(i).unwrap() == '1' {
                    if is_beam {
                        result += 1;
                    }
                    is_beam = !is_beam;
                }
            }
        }
        return result;

=======

        let mut ans = 0;
        let mut a = vec![0; bank[0].len()];
        for i in 0..bank.len() {
            let mut b = vec![0; bank[0].len()];
            for j in 0..bank[0].len() {
                if bank[i].chars().nth(j).unwrap() == '1' {
                    for k in 0..bank[0].len() {
                        if a[k] == 1 {
                            b[k] = 1;
                        }
                    }
                    b[j] = 1;
                }
            }
            a = b;
            ans += a.iter().sum::<i32>();
        }
        ans

=======

        let mut res = 0;
        let mut prev = vec![0; bank[0].len()];
        for row in bank {
            let mut cur = vec![0; row.len()];
            for (j, c) in row.chars().enumerate() {
                if c == '1' {
                    cur[j] = 1;
                    for k in 0..j {
                        if prev[k] == 1 {
                            res += 1;
                        }
                    }
                }
            }
            prev = cur;
        }
        res

=======

        let mut count = 0;
        let mut last_row = 0;
        let mut last_col = 0;
        for (i, row) in bank.iter().enumerate() {
            if row.contains('1') {
                for (j, c) in row.chars().enumerate() {
                    if c == '1' {
                        if i != last_row {
                            count += 1;
                            last_row = i;
                            last_col = j;
                        } else if j != last_col {
                            count += 1;
                            last_row = i;
                            last_col = j;
                        }
                    }
                }
            }
        }
        count

=======

        let mut result = 0;
        let mut previous = String::new();
        for row in bank {
            if row.contains('1') {
                if !previous.is_empty() {
                    result += row.chars().filter(|&c| c == '1').count() as i32;
                }
                previous = row;
            }
        }
        result
    }
}
