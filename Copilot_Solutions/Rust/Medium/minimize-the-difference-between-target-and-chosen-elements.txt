Synthesizing 3/10 solutions

=======

        
    }
}

=======

        let mut dp = vec![vec![false; 800]; 70];
        for i in 0..70 {
            for j in 0..800 {
                dp[i][j] = false;
            }
        }
        dp[0][mat[0][0] as usize] = true;
        for i in 1..mat[0].len() {
            dp[0][mat[0][i] as usize] = true;
        }
        for i in 1..mat.len() {
            for j in 0..800 {
                if dp[i - 1][j] {
                    for k in 0..mat[i].len() {
                        dp[i][j + mat[i][k] as usize] = true;
                    }
                }
            }
        }
        let mut ans = std::i32::MAX;
        for i in 0..800 {
            if dp[mat.len() - 1][i] {
                ans = ans.min((i as i32 - target).abs());
            }
        }
        ans

=======

        let mut dp = vec![0; 71 * 70 + 1];
        dp[0] = 1;
        let mut sum = 0;
        for row in mat {
            let mut next = vec![0; 71 * 70 + 1];
            for (i, &v) in row.iter().enumerate() {
                for j in 0..=sum {
                    if dp[j] == 1 {
                        next[j + v as usize] = 1;
                    }
                }
                sum += v;
            }
            dp = next;
        }
        let mut ans = 800;
        for i in 0..=sum {
            if dp[i] == 1 {
                ans = ans.min((i as i32 - target).abs());
            }
        }
        ans
