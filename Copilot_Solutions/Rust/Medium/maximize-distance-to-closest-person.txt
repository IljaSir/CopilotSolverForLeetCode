Synthesizing 10/10 solutions

=======

        let mut max = 0;
        let mut last = -1;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                if last < 0 {
                    max = i as i32;
                } else {
                    max = max.max((i - last as usize) as i32 / 2);
                }
                last = i as i32;
            }
        }
        max.max(seats.len() as i32 - last - 1)

=======

        let mut left = -1;
        let mut right = 0;
        let mut max = 0;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                left = i as i32;
            } else {
                while right < seats.len() as i32 && (right == 0 || seats[right as usize] == 0) {
                    right += 1;
                }
                let left_dist = if left == -1 { i32::max_value() } else { i - left as usize };
                let right_dist = if right == seats.len() as i32 { i32::max_value() } else { right - i as i32 };
                max = max.max(left_dist.min(right_dist));
            }
        }
        max

=======

        let mut max = 0;
        let mut left = -1;
        let mut right = 0;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                left = i as i32;
            } else {
                while right < seats.len() as i32 && (right == -1 || seats[right as usize] == 0) {
                    right += 1;
                }
                let left_dist = if left == -1 { i32::MAX } else { i - left as usize };
                let right_dist = if right == seats.len() as i32 { i32::MAX } else { right - i as i32 };
                let dist = left_dist.min(right_dist);
                max = max.max(dist);
            }
        }
        max

=======

        let mut left = -1;
        let mut right = 0;
        let mut max = 0;
        let n = seats.len();
        for i in 0..n {
            if seats[i] == 1 {
                left = i as i32;
            } else {
                while right < n as i32 && seats[right as usize] == 0 || right < i as i32 {
                    right += 1;
                }
                let left_dist = if left == -1 { n as i32 } else { i as i32 - left };
                let right_dist = if right == n as i32 { n as i32 } else { right - i as i32 };
                max = max.max(left_dist.min(right_dist));
            }
        }
        max

=======

        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        while i < seats.len() {
            if seats[i] == 1 {
                if j == 0 {
                    max = i;
                } else {
                    max = std::cmp::max(max, (i - j) / 2);
                }
                j = i + 1;
            }
            i += 1;
        }
        if j < seats.len() {
            max = std::cmp::max(max, seats.len() - j);
        }
        max as i32
    }
}

=======

        let mut max = 0;
        let mut start = 0;
        let mut end = 0;
        let mut flag = false;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                if flag {
                    let d = (end - start + 1) / 2;
                    if d > max {
                        max = d;
                    }
                } else {
                    let d = end - start;
                    if d > max {
                        max = d;
                    }
                    flag = true;
                }
                start = i as i32;
            }
            end = i as i32;
        }
        let d = end - start;
        if d > max {
            max = d;
        }
        max as i32
    }
}

=======

        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        let mut count = 0;
        while j < seats.len() {
            if seats[j] == 1 {
                if i == 0 {
                    if max < j {
                        max = j;
                    }
                } else {
                    if max < (j - i - 1) / 2 {
                        max = (j - i - 1) / 2;
                    }
                }
                i = j;
            }
            j += 1;
        }
        if max < seats.len() - i - 1 {
            max = seats.len() - i - 1;
        }
        max as i32
    }
}

=======

        let mut l = 0;
        let mut r = 0;
        let mut max = 0;
        let mut last = 0;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                if l == 0 {
                    max = i as i32;
                } else {
                    max = std::cmp::max(max, (r - l) / 2);
                }
                l = i as i32;
            }
            r = i as i32 + 1;
        }
        max = std::cmp::max(max, seats.len() as i32 - 1 - l);
        max

=======

        let mut d = 0;
        let mut max = 0;
        let mut left = 0;
        let mut right = 0;
        for i in 0..seats.len() {
            if seats[i] == 1 {
                right = i;
                if left == 0 {
                    d = right;
                } else {
                    d = (right - left) / 2;
                }
                max = std::cmp::max(max, d);
                left = right;
            }
        }
        if seats[seats.len() - 1] == 0 {
            max = std::cmp::max(max, seats.len() - 1 - right);
        }
        max as i32
    }
}

=======

        let mut max = 0;
        let mut left = 0;
        let mut right = 0;
        let mut first = true;
        for seat in seats {
            if seat == 0 {
                right += 1;
            } else {
                if first {
                    max = right;
                    first = false;
                } else {
                    max = max.max((right - left) / 2);
                }
                left = right;
                right = 0;
            }
        }
        max = max.max(right);
        max as i32
