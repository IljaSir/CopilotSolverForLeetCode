Synthesizing 9/10 solutions

=======

        let mut map = std::collections::HashMap::new();
        let mut res = 0;
        for n in nums {
            let r = n.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
            let diff = (n - r).abs();
            let count = map.entry(diff).or_insert(0);
            *count += 1;
            res += *count - 1;
            res %= 1_000_000_007;
        }
        res

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        let mut result = 0;
        for num in nums {
            let rev = num.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
            let diff = (num - rev).abs();
            *map.entry(diff).or_insert(0) += 1;
        }
        for val in map.values() {
            result += val * (val - 1) / 2;
        }
        result as i32 % 1000000007
    }
}

=======

        let m = 1_000_000_007;
        let mut map = std::collections::HashMap::new();
        let mut res = 0;
        for n in nums {
            let n = n as i64;
            let rev = Self::reverse(n);
            let diff = (n - rev) % m;
            let count = map.entry(diff).or_insert(0);
            res = (res + *count) % m;
            *count += 1;
        }
        res as i32
    }
    
    fn reverse(mut n: i64) -> i64 {
        let mut res = 0;
        while n > 0 {
            res = res * 10 + n % 10;
            n /= 10;
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        let mut result = 0;
        let mod_num = 1000000007;
        for num in nums {
            let rev_num = num.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
            let diff = num - rev_num;
            let count = map.entry(diff).or_insert(0);
            result = (result + *count) % mod_num;
            *count += 1;
        }
        result

=======

        let mut map = std::collections::HashMap::new();
        let mut ans = 0;
        for &num in nums.iter() {
            let rev = Self::rev(num);
            let diff = num - rev;
            let count = map.entry(diff).or_insert(0);
            ans = (ans + *count) % 1000000007;
            *count += 1;
        }
        ans
    }
    pub fn rev(mut num: i32) -> i32 {
        let mut ans = 0;
        while num > 0 {
            ans = ans * 10 + num % 10;
            num /= 10;
        }
        ans

=======

        let mut map = std::collections::HashMap::new();
        let mut res = 0;
        let modu = 1_000_000_007;
        for &n in nums.iter() {
            let key = n - n.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
            res = (res + map.entry(key).or_insert(0) + 1) % modu;
            *map.get_mut(&key).unwrap() += 1;
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        let mut count = 0;
        for n in nums {
            let r = Self::rev(n);
            let d = (n - r).abs();
            if let Some(v) = map.get(&d) {
                count += v;
                map.insert(d, v + 1);
            } else {
                map.insert(d, 1);
            }
        }
        (count % 1_000_000_007) as i32
    }
    fn rev(n: i32) -> i32 {
        let mut n = n;
        let mut r = 0;
        while n != 0 {
            r = r * 10 + n % 10;
            n /= 10;
        }
        r

=======

        let mut cnt = vec![0; 100001];
        let mut res = 0;
        let mut modu = 1000000007;
        for n in nums {
            let rev = n.to_string().chars().rev().collect::<String>().parse::<i32>().unwrap();
            let diff = (n - rev).abs();
            res = (res + cnt[diff as usize]) % modu;
            cnt[diff as usize] += 1;
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        let mut ans = 0;
        for i in nums.iter() {
            let t = Self::rev(*i);
            let x = (i - t).abs();
            *map.entry(x).or_insert(0) += 1;
        }
        let modu = 1000000007;
        for (_, v) in map.iter() {
            if *v > 1 {
                ans += (v * (v - 1)) / 2;
            }
        }
        ans as i32 % modu
    }
    pub fn rev(x: i32) -> i32 {
        let mut ans = 0;
        let mut x = x;
        while x > 0 {
            ans = ans * 10 + x % 10;
            x /= 10;
        }
        ans
