Synthesizing 9/10 solutions

=======

        let mut piles = piles;
        for _ in 0..k {
            piles.sort();
            piles[piles.len() - 1] -= piles[piles.len() - 1] / 2;
        }
        piles.iter().sum()

=======

        let mut heap = std::collections::BinaryHeap::new();
        for i in 0..piles.len() {
            heap.push(piles[i]);
        }
        let mut k = k;
        while k > 0 {
            let top = heap.pop().unwrap();
            heap.push(top - (top / 2));
            k -= 1;
        }
        heap.into_iter().sum()

=======

        let mut piles = piles;
        for _ in 0..k {
            let mut max = 0;
            let mut max_idx = 0;
            for i in 0..piles.len() {
                if piles[i] > max {
                    max = piles[i];
                    max_idx = i;
                }
            }
            piles[max_idx] -= max / 2;
        }
        piles.iter().sum()

=======

        let mut piles = piles;
        let mut k = k;
        piles.sort_unstable();
        let mut i = 0;
        let mut j = piles.len() - 1;
        while k > 0 {
            let mid = piles[j] / 2;
            piles[j] -= mid;
            if piles[j] == 0 {
                j -= 1;
            }
            k -= 1;
        }
        piles.iter().sum()
    }
}

=======

        let mut piles = piles;
        piles.sort_unstable();
        let mut i = piles.len() - 1;
        let mut k = k;
        while k > 0 {
            let x = piles[i] / 2;
            piles[i] -= x;
            if i == 0 || piles[i - 1] < piles[i] {
                i = piles.len() - 1;
            } else {
                i -= 1;
            }
            k -= 1;
        }
        piles.iter().sum()

=======

        let mut piles = piles;
        let mut k = k;
        while k > 0 {
            let mut max = 0;
            let mut max_idx = 0;
            for (idx, pile) in piles.iter().enumerate() {
                if *pile > max {
                    max = *pile;
                    max_idx = idx;
                }
            }
            piles[max_idx] -= max / 2;
            k -= 1;
        }
        piles.iter().sum()

=======

        let mut piles = piles;
        piles.sort();
        let mut k = k;
        let mut i = 0;
        while k > 0 {
            let j = piles.len() - 1 - i;
            piles[j] -= piles[j] / 2;
            i += 1;
            k -= 1;
        }
        piles.iter().sum()
    }
}

=======

        let mut arr = piles;
        let mut k = k;
        let mut sum = 0;
        for i in &arr {
            sum += i;
        }
        while k > 0 {
            arr.sort();
            let len = arr.len();
            let max = arr[len - 1];
            let new_max = max / 2;
            sum -= new_max;
            arr[len - 1] = new_max;
            k -= 1;
        }
        sum

=======

        let mut piles = piles;
        piles.sort_unstable_by(|a, b| b.cmp(a));
        let mut k = k;
        while k > 0 {
            let i = 0;
            let p = piles[i];
            piles[i] = (p + 1) / 2;
            k -= 1;
        }
        piles.iter().sum()
