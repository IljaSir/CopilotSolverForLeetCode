Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        for i in 1..nums.len() {
            if nums[i] != nums[i - 1] {
                res += i as i32;
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut count = 0;
        let mut i = nums.len() - 1;
        while i > 0 {
            if nums[i] != nums[i - 1] {
                count += nums.len() - i;
            }
            i -= 1;
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        nums.dedup();
        (nums.len() - 1) as i32

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        for i in 1..nums.len() {
            if nums[i] > nums[i-1] {
                ans += (nums.len() - i) as i32;
            }
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let mut result = 0;
        let mut prev = nums[0];
        for i in 1..nums.len() {
            if nums[i] != prev {
                result += i as i32;
                prev = nums[i];
            }
        }
        result

=======

        let mut nums = nums;
        nums.sort();
        let mut ops = 0;
        let mut prev = nums[0];
        for i in 1..nums.len() {
            if nums[i] != prev {
                ops += i as i32;
                prev = nums[i];
            }
        }
        ops

=======

        let mut nums = nums;
        nums.sort();
        let mut res = 0;
        let mut prev = nums[0];
        for i in 1..nums.len() {
            if prev != nums[i] {
                res += i as i32;
                prev = nums[i];
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        nums.reverse();
        let mut res = 0;
        let mut last = nums[0];
        for i in 1..nums.len() {
            if nums[i] < last {
                res += i as i32;
                last = nums[i];
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = 1;
        let mut count = 0;
        let mut ans = 0;
        while j < nums.len() {
            if nums[i] == nums[j] {
                count += 1;
            } else {
                ans += count;
                count += 1;
                i = j;
            }
            j += 1;
        }
        ans

=======

        
    }
}
