Synthesizing 10/10 solutions

=======

        let (mut left, mut right) = (1, *nums.iter().max().unwrap());
        while left < right {
            let mid = (left + right) / 2;
            let sum = nums.iter().map(|&x| (x + mid - 1) / mid).sum::<i32>();
            if sum > threshold {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let m = l + (r - l) / 2;
            let sum: i32 = nums.iter().map(|n| (n + m - 1) / m).sum();
            if sum <= threshold {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let (mut left, mut right) = (1, 1_000_000);
        while left < right {
            let mid = (left + right) / 2;
            let sum: i32 = nums.iter().map(|&x| (x + mid - 1) / mid).sum();
            if sum > threshold {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            for &n in &nums {
                sum += (n + mid - 1) / mid;
            }
            if sum > threshold {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = 1_000_000;
        while l < r {
            let m = l + (r - l) / 2;
            let sum = nums.iter().map(|&x| (x + m - 1) / m).sum::<i32>();
            if sum > threshold {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = 1_000_000;
        while l < r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            for n in &nums {
                sum += (n + mid - 1) / mid;
            }
            if sum > threshold {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = *nums.iter().max().unwrap();
        while l < r {
            let mid = l + (r-l)/2;
            let sum: i32 = nums.iter().map(|x| (x+mid-1)/mid).sum();
            if sum > threshold {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = *nums.iter().max().unwrap();
        while l < r {
            let m = (l + r) >> 1;
            let sum = nums.iter().map(|x| (x + m - 1) / m).sum::<i32>();
            if sum <= threshold {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut left = 1;
        let mut right = 1000000;
        while left < right {
            let mid = (left + right) / 2;
            let sum = nums.iter().map(|n| (n + mid - 1) / mid).sum::<i32>();
            if sum > threshold {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left

=======

        let mut left = 1;
        let mut right = nums.iter().max().unwrap();
        while left < right {
            let mid = (left + right) / 2;
            let sum = nums.iter().map(|&x| (x as f64 / mid as f64).ceil() as i32).sum::<i32>();
            if sum > threshold {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left
