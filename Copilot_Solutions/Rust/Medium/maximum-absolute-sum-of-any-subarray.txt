Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut max = 0;
        let mut min = 0;
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if sum > max {
                max = sum;
            } else if sum < min {
                min = sum;
            }
        }
        max - min

=======

        let mut max = 0;
        let mut min = 0;
        let mut sum = 0;
        for n in nums {
            sum += n;
            max = max.max(sum);
            min = min.min(sum);
        }
        max - min
    }
}

=======

        let mut max = 0;
        let mut min = 0;
        let mut sum = 0;
        for n in nums {
            sum += n;
            max = max.max(sum);
            min = min.min(sum);
        }
        max - min

=======

        let mut max = 0;
        let mut min = 0;
        let mut sum = 0;
        for num in nums {
            sum += num;
            max = max.max(sum);
            min = min.min(sum);
        }
        max - min

=======

        let mut max = 0;
        let mut min = 0;
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            max = max.max(sum);
            min = min.min(sum);
        }
        (max - min).abs()

=======

        let mut max_sum = 0;
        let mut min_sum = 0;
        let mut max = 0;
        let mut min = 0;
        for i in 0..nums.len() {
            max_sum += nums[i];
            min_sum += nums[i];
            if max_sum < 0 {
                max_sum = 0;
            }
            if min_sum > 0 {
                min_sum = 0;
            }
            if max_sum > max {
                max = max_sum;
            }
            if min_sum < min {
                min = min_sum;
            }
        }
        if max > -min {
            max
        } else {
            -min
        }

=======

        let mut max_sum = 0;
        let mut min_sum = 0;
        let mut max = 0;
        for i in nums {
            max_sum += i;
            min_sum += i;
            max = max.max(max_sum);
            max = max.max(min_sum);
            max_sum = max_sum.max(0);
            min_sum = min_sum.min(0);
        }
        max

=======

        let mut ans = 0;
        let mut cur = 0;
        for n in nums {
            cur += n;
            ans = ans.max(cur);
            cur = cur.max(0);
        }
        let mut ans2 = 0;
        let mut cur2 = 0;
        for n in nums {
            cur2 += n;
            ans2 = ans2.min(cur2);
            cur2 = cur2.min(0);
        }
        ans.max(-ans2)

=======

        let mut max_positive = 0;
        let mut min_negative = 0;
        let mut max_absolute_sum = 0;
        for i in 0..nums.len() {
            let v = nums[i];
            max_positive = std::cmp::max(max_positive + v, v);
            min_negative = std::cmp::min(min_negative + v, v);
            max_absolute_sum = std::cmp::max(max_absolute_sum, std::cmp::max(max_positive, -min_negative));
        }
        max_absolute_sum
