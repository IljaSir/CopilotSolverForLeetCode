Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut left = 0;
        let mut right = nums.len() - 1;
        let mut i = 0;
        while i <= right {
            if nums[i] == 0 {
                nums.swap(i, left);
                left += 1;
                i += 1;
            } else if nums[i] == 2 {
                nums.swap(i, right);
                right -= 1;
            } else {
                i += 1;
            }
        }

=======
Suggestion 2

        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut k = 0;
        while k <= j {
            if nums[k] == 0 {
                nums.swap(i, k);
                i += 1;
                k += 1;
            } else if nums[k] == 1 {
                k += 1;
            } else {
                nums.swap(k, j);
                j -= 1;
            }
        }

=======
Suggestion 3

        let mut i = 0;
        let mut j = 0;
        let mut k = nums.len() - 1;
        while j <= k {
            if nums[j] == 0 {
                nums.swap(i, j);
                j += 1;
                i += 1;
            } else if nums[j] == 2 {
                nums.swap(j, k);
                k -= 1;
            } else {
                j += 1;
            }
        }
    }
}

=======
Suggestion 4

        let mut i = 0;
        let mut j = nums.len() - 1;
        let mut k = 0;
        while k <= j {
            if nums[k] == 0 {
                nums.swap(i, k);
                i += 1;
                k += 1;
            } else if nums[k] == 2 {
                nums.swap(j, k);
                j -= 1;
            } else {
                k += 1;
            }
        }

=======
Suggestion 5

        let mut low = 0;
        let mut mid = 0;
        let mut high = nums.len() - 1;
        while mid <= high {
            match nums[mid] {
                0 => {
                    nums.swap(low, mid);
                    low += 1;
                    mid += 1;
                }
                1 => {
                    mid += 1;
                }
                2 => {
                    nums.swap(mid, high);
                    high -= 1;
                }
                _ => {}
            }
        }

=======
Suggestion 6

        let mut p0 = 0;
        let mut p2 = nums.len() - 1;
        let mut i = 0;
        while i <= p2 {
            if nums[i] == 0 {
                nums.swap(i, p0);
                p0 += 1;
                i += 1;
            } else if nums[i] == 2 {
                nums.swap(i, p2);
                p2 -= 1;
            } else {
                i += 1;
            }
        }

=======
Suggestion 7

        let mut red = 0;
        let mut blue = nums.len() - 1;
        let mut i = 0;
        while i <= blue {
            if nums[i] == 0 {
                nums.swap(i, red);
                red += 1;
                i += 1;
            } else if nums[i] == 2 {
                nums.swap(i, blue);
                blue -= 1;
            } else {
                i += 1;
            }
        }

=======
Suggestion 8

        let mut red = 0;
        let mut white = 0;
        let mut blue = 0;
        for i in nums {
            match i {
                0 => red += 1,
                1 => white += 1,
                2 => blue += 1,
                _ => (),
            }
        }
        for i in 0..nums.len() {
            if i < red {
                nums[i] = 0;
            } else if i < red + white {
                nums[i] = 1;
            } else {
                nums[i] = 2;
            }
        }

=======
Suggestion 9

        let mut zero = 0;
        let mut one = 0;
        let mut two = 0;
        for i in nums.iter() {
            match i {
                0 => zero += 1,
                1 => one += 1,
                2 => two += 1,
                _ => {}
            }
        }
        let mut i = 0;
        while i < nums.len() {
            if zero > 0 {
                nums[i] = 0;
                zero -= 1;
                i += 1;
            } else if one > 0 {
                nums[i] = 1;
                one -= 1;
                i += 1;
            } else if two > 0 {
                nums[i] = 2;
                two -= 1;
                i += 1;
            } else {
                break;
            }
        }
