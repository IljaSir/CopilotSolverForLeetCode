Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut nums = nums;
        nums.sort();
        let mut prefix = vec![0; nums.len()];
        prefix[0] = nums[0];
        for i in 1..nums.len() {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        let mut res = 0;
        for i in 0..nums.len() {
            if prefix[i] > 0 {
                res += 1;
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut prefix = vec![0; nums.len()];
        prefix[0] = nums[0];
        for i in 1..nums.len() {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        prefix.into_iter().filter(|&x| x > 0).count() as i32

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut prefix = vec![0; nums.len()];
        prefix[0] = nums[0];
        for i in 1..nums.len() {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        let mut count = 0;
        for i in 0..nums.len() {
            if prefix[i] > 0 {
                count += 1;
            }
        }
        count

=======

        let mut nums = nums;
        nums.sort();
        let mut prefix = vec![0; nums.len()];
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            prefix[i] = sum;
        }
        let mut count = 0;
        for i in 0..nums.len() {
            if prefix[i] > 0 {
                count += 1;
            }
        }
        return count;

=======

        let mut nums = nums;
        nums.sort();
        let mut score = 0;
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if sum > 0 {
                score += 1;
            }
        }
        score

=======

        let mut nums = nums;
        nums.sort();
        let mut prefix = vec![0; nums.len()];
        for i in 0..nums.len() {
            prefix[i] = nums[i];
            if i > 0 {
                prefix[i] += prefix[i - 1];
            }
        }
        let mut score = 0;
        for i in 0..nums.len() {
            if prefix[i] > 0 {
                score += 1;
            }
        }
        score

=======

        let mut nums = nums;
        nums.sort_by_key(|&x| x.abs());
        let mut prefix = vec![0; nums.len()];
        prefix[0] = nums[0];
        for i in 1..nums.len() {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        let mut res = 0;
        for i in 0..nums.len() {
            if prefix[i] > 0 {
                res += 1;
            }
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        nums.iter()
            .enumerate()
            .map(|(i, &x)| x + (i as i32))
            .filter(|&x| x > 0)
            .count() as i32

=======

        
    }
}
