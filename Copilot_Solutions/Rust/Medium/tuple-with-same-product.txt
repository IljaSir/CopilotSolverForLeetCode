Synthesizing 9/10 solutions (Duplicates hidden)

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                *map.entry(nums[i] * nums[j]).or_insert(0) += 1;
            }
        }
        let mut res = 0;
        for (_, v) in map {
            res += v * (v - 1) / 2 * 8;
        }
        res

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i != j {
                    let prod = nums[i] * nums[j];
                    *map.entry(prod).or_insert(0) += 1;
                }
            }
        }
        for (_, v) in map {
            count += v * (v - 1) / 2 * 8;
        }
        count
    }
}

=======

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let sum = nums[i] * nums[j];
                *map.entry(sum).or_insert(0) += 1;
            }
        }
        let mut ans = 0;
        for (_, v) in map {
            ans += v * (v - 1);
        }
        ans * 8
    }
}

=======

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let p = nums[i] * nums[j];
                if let Some(v) = map.get_mut(&p) {
                    *v += 1;
                } else {
                    map.insert(p, 1);
                }
            }
        }
        for v in map.values() {
            count += v * (v-1) / 2 * 8;
        }
        count

=======

        let mut ans = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let product = nums[i] * nums[j];
                *map.entry(product).or_insert(0) += 1;
            }
        }
        for (_, v) in map {
            ans += v * (v-1) / 2 * 8;
        }
        ans
    }
}

=======

        let mut m: HashMap<i32, i32> = HashMap::new();
        let mut res = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                let p = nums[i] * nums[j];
                *m.entry(p).or_insert(0) += 1;
            }
        }
        for (_, v) in m.iter() {
            res += v * (v - 1);
        }
        res * 8

=======

        let mut cnt = 0;
        let mut m: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                *m.entry(nums[i] * nums[j]).or_insert(0) += 1;
            }
        }
        for (_, v) in m {
            cnt += v * (v - 1) / 2 * 8;
        }
        cnt

=======

        
    }
}
