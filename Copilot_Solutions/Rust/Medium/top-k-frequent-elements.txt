Synthesizing 10/10 solutions

=======
Suggestion 1

        use std::collections::HashMap;
        let mut map: HashMap<i32, i32> = HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut vec: Vec<(i32, i32)> = map.into_iter().collect();
        vec.sort_by(|a, b| b.1.cmp(&a.1));
        vec.iter().take(k as usize).map(|(k, _)| *k).collect()

=======
Suggestion 2

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut v = map.into_iter().map(|(k, v)| (v, k)).collect::<Vec<(i32, i32)>>();
        v.sort_unstable_by(|a, b| b.cmp(a));
        v.into_iter().map(|(_, k)| k).take(k as usize).collect()

=======
Suggestion 3

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut vec = map.into_iter().collect::<Vec<(i32, i32)>>();
        vec.sort_by(|a, b| b.1.cmp(&a.1));
        vec.iter().take(k as usize).map(|x| x.0).collect()

=======
Suggestion 4

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for i in nums {
            let count = map.entry(i).or_insert(0);
            *count += 1;
        }
        let mut vec = Vec::new();
        for (k, v) in map {
            vec.push((k, v));
        }
        vec.sort_by(|a, b| b.1.cmp(&a.1));
        let mut ans = Vec::new();
        for i in 0..k {
            ans.push(vec[i as usize].0);
        }
        ans

=======
Suggestion 5

        use std::collections::{HashMap, BinaryHeap};
        use std::cmp::Reverse;
        let mut map = HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut pq = BinaryHeap::new();
        for (num, count) in map {
            pq.push((Reverse(count), num));
        }
        let mut res = Vec::new();
        for _ in 0..k {
            let (_, num) = pq.pop().unwrap();
            res.push(num);
        }
        res

=======
Suggestion 6

        let mut freq = std::collections::HashMap::new();
        for num in nums {
            *freq.entry(num).or_insert(0) += 1;
        }
        let mut freq = freq.into_iter().collect::<Vec<_>>();
        freq.sort_by(|(_, a), (_, b)| b.cmp(a));
        freq.into_iter().map(|(k, _)| k).take(k as usize).collect()

=======
Suggestion 7

        let mut map = std::collections::HashMap::new();
        for n in nums {
            *map.entry(n).or_insert(0) += 1;
        }
        let mut v = Vec::new();
        for (k, v) in map {
            v.push((k, v));
        }
        v.sort_by(|a, b| b.1.cmp(&a.1));
        v.iter().take(k as usize).map(|x| x.0).collect()

=======
Suggestion 8

        use std::collections::HashMap;
        let mut map = HashMap::new();
        for n in nums {
            let v = map.entry(n).or_insert(0);
            *v += 1;
        }
        let mut v = map.into_iter().collect::<Vec<(i32, i32)>>();
        v.sort_by(|a, b| b.1.cmp(&a.1));
        v.into_iter().take(k as usize).map(|(k, _)| k).collect()

=======
Suggestion 9

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for n in nums {
            match map.get_mut(&n) {
                Some(v) => *v += 1,
                None => {
                    map.insert(n, 1);
                }
            }
        }
        let mut vec: Vec<(i32, i32)> = map.iter().map(|(k, v)| (*k, *v)).collect();
        vec.sort_by(|a, b| b.1.cmp(&a.1));
        vec.iter().map(|(k, _)| *k).take(k as usize).collect()
    }
}

=======
Suggestion 10

        let mut map = std::collections::HashMap::new();
        for &num in nums.iter() {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut vec = Vec::new();
        for (k, v) in map.into_iter() {
            vec.push((k, v));
        }
        vec.sort_by_key(|x| x.1);
        vec.iter().rev().take(k as usize).map(|x| x.0).collect()
    }
}
