Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        nums.sort();
        let mut i = 1;
        while i < nums.len() - 1 {
            nums.swap(i, i + 1);
            i += 2;
        }

=======
Suggestion 2

        nums.sort();
        let mut i = 1;
        while i < nums.len() - 1 {
            nums.swap(i, i + 1);
            i += 2;
        }
    }
}

=======
Suggestion 3

        nums.sort();
        let mut res = Vec::new();
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            res.push(nums[j]);
            res.push(nums[i]);
            i += 1;
            j -= 1;
        }
        if i == j {
            res.push(nums[i]);
        }
        for i in 0..nums.len() {
            nums[i] = res[i];
        }

=======
Suggestion 4

        nums.sort();
        let n = nums.len();
        let mut tmp = Vec::new();
        for i in 0..n/2 {
            tmp.push(nums[i]);
            tmp.push(nums[n/2+i]);
        }
        if n%2 == 1 {
            tmp.push(nums[n-1]);
        }
        for i in 0..n {
            nums[i] = tmp[i];
        }

=======
Suggestion 5

        let len = nums.len();
        let mut i = 0;
        while i < len - 1 {
            if (i % 2 == 0 && nums[i] > nums[i+1]) || (i % 2 == 1 && nums[i] < nums[i+1]) {
                nums.swap(i, i+1);
            }
            i += 1;
        }
    }
}

=======
Suggestion 6

        nums.sort();
        let mut tmp = nums.clone();
        let mut i = 0;
        let mut j = (nums.len() + 1) / 2 - 1;
        let mut k = nums.len() - 1;
        while i < nums.len() {
            if i % 2 == 0 {
                nums[i] = tmp[j];
                j -= 1;
            } else {
                nums[i] = tmp[k];
                k -= 1;
            }
            i += 1;
        }

=======
Suggestion 7

        nums.sort();
        let n = nums.len();
        let mut res = vec![0;n];
        let mut i = 0;
        let mut j = 1;
        let mut k = 0;
        while i < n {
            res[j] = nums[i];
            i += 1;
            j += 2;
        }
        while j < n {
            res[k] = nums[i];
            i += 1;
            k += 2;
        }
        nums.copy_from_slice(&res);
    }
}

=======
Suggestion 8

        let n = nums.len();
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        let mut j = n - 1;
        let mut res = vec![0; n];
        let mut k = 0;
        while i < j {
            res[k] = nums[i];
            res[k + 1] = nums[j];
            i += 1;
            j -= 1;
            k += 2;
        }
        if n % 2 == 1 {
            res[n - 1] = nums[i];
        }
        for i in 0..n {
            nums[i] = res[i];
        }
