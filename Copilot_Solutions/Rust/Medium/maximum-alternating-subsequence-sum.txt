Synthesizing 9/10 solutions

=======

        let mut even = 0;
        let mut odd = 0;
        for n in nums {
            even = even.max(odd + n as i64);
            odd = odd.max(even - n as i64);
        }
        even

=======

        let mut odd = 0;
        let mut even = 0;
        for i in 0..nums.len() {
            if i % 2 == 0 {
                even = even.max(odd + nums[i] as i64);
            } else {
                odd = odd.max(even - nums[i] as i64);
            }
        }
        even

=======

        let mut odd = 0;
        let mut even = 0;
        for n in nums {
            let n = n as i64;
            odd = odd.max(even + n);
            even = even.max(odd - n);
        }
        odd

=======

        let mut dp = (0, 0);
        for num in nums {
            dp = (dp.1 + num as i64, dp.0.max(dp.1));
        }
        dp.0.max(dp.1)

=======

        let mut dp = vec![0; nums.len()];
        dp[0] = nums[0];
        let mut ans = dp[0];
        for i in 1..nums.len() {
            dp[i] = nums[i];
            if i > 1 {
                dp[i] = std::cmp::max(dp[i], dp[i-2] + nums[i]);
            }
            ans = std::cmp::max(ans, dp[i]);
        }
        ans as i64

=======

        let mut max = 0;
        let mut min = 0;
        for n in nums {
            max = std::cmp::max(max + n, min);
            min = max - n;
        }
        max as i64

=======

        let mut max_odd = 0;
        let mut max_even = 0;
        for num in nums {
            let num = num as i64;
            max_odd = std::cmp::max(max_odd, max_even + num);
            max_even = std::cmp::max(max_even, max_odd - num);
        }
        max_odd

=======

        let mut a = 0;
        let mut b = 0;
        for i in 0..nums.len() {
            let c = a;
            let d = b;
            a = std::cmp::max(c, d + nums[i] as i64);
            b = std::cmp::max(d, c - nums[i] as i64);
        }
        std::cmp::max(a, b) as i64

=======

        let mut odd = 0;
        let mut even = 0;
        for i in nums {
            let mut tmp = odd;
            odd = even + i;
            even = std::cmp::max(even, tmp);
        }
        std::cmp::max(odd, even) as i64
