Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut count: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        let mut tails: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for num in nums {
            *count.entry(num).or_insert(0) += 1;
        }
        for num in nums {
            if *count.entry(num).or_insert(0) == 0 {
                continue;
            }
            if *tails.entry(num).or_insert(0) > 0 {
                *tails.entry(num).or_insert(0) -= 1;
                *tails.entry(num + 1).or_insert(0) += 1;
            } else if *count.entry(num + 1).or_insert(0) > 0 && *count.entry(num + 2).or_insert(0) > 0 {
                *count.entry(num + 1).or_insert(0) -= 1;
                *count.entry(num + 2).or_insert(0) -= 1;
                *tails.entry(num + 3).or_insert(0) += 1;
            } else {
                return false;
            }
            *count.entry(num).or_insert(0) -= 1;
        }
        true
    }
}

=======
Suggestion 2

        let mut count = std::collections::HashMap::new();
        for &num in nums.iter() {
            *count.entry(num).or_insert(0) += 1;
        }
        let mut tails = std::collections::HashMap::new();
        for &num in nums.iter() {
            if let Some(&c) = count.get(&num) {
                if c > 0 {
                    if let Some(&t) = tails.get(&(num - 1)) {
                        if t > 0 {
                            *count.get_mut(&num).unwrap() -= 1;
                            *tails.get_mut(&(num - 1)).unwrap() -= 1;
                            *tails.entry(num).or_insert(0) += 1;
                        } else {
                            if let Some(&c) = count.get(&(num + 1)) {
                                if c > 0 {
                                    if let Some(&c) = count.get(&(num + 2)) {
                                        if c > 0 {
                                            *count.get_mut(&(num + 1)).unwrap() -= 1;
                                            *count.get_mut(&(num + 2)).unwrap() -= 1;
                                            *tails.entry(num + 2).or_insert(0) += 1;
                                        } else {
                                            return false;
                                        }
                                    } else {
                                        return false;
                                    }
                                } else {
                                    return false;
                                }
                            } else {
                                return false;
                            }
                        }
                    } else {
                        if let Some(&c) = count.get(&(num + 1)) {
                            if c > 0 {
                                if let Some(&c) = count.get(&(num + 2)) {
                                    if c > 0 {
                                        *count.get_mut(&(num + 1)).unwrap() -= 1;
                                        *count.get_mut(&(num + 2)).unwrap() -= 1;
                                        *tails.entry(num + 2).or_insert(0) += 1;
                                    } else {
                                        return false;
                                    }
                                } else {
                                    return false;
                                }
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                }
            }
        }
        true
    }
}

=======
Suggestion 3

        let mut cnt = vec![0; 10001];
        let mut tails = vec![0; 10001];
        for num in nums {
            cnt[num as usize] += 1;
        }
        for num in nums {
            if cnt[num as usize] == 0 {
                continue;
            } else if tails[num as usize - 1] > 0 {
                tails[num as usize - 1] -= 1;
                tails[num as usize] += 1;
            } else if cnt[num as usize + 1] > 0 && cnt[num as usize + 2] > 0 {
                cnt[num as usize + 1] -= 1;
                cnt[num as usize + 2] -= 1;
                tails[num as usize + 2] += 1;
            } else {
                return false;
            }
            cnt[num as usize] -= 1;
        }
        true

=======
Suggestion 4

        let mut count = vec![0; 10001];
        let mut tail = vec![0; 10001];
        for i in nums {
            count[i as usize] += 1;
        }
        for i in nums {
            if count[i as usize] == 0 {
                continue;
            }
            if tail[i as usize - 1] > 0 {
                count[i as usize] -= 1;
                tail[i as usize - 1] -= 1;
                tail[i as usize] += 1;
            } else if count[i as usize + 1] > 0 && count[i as usize + 2] > 0 {
                count[i as usize] -= 1;
                count[i as usize + 1] -= 1;
                count[i as usize + 2] -= 1;
                tail[i as usize + 2] += 1;
            } else {
                return false;
            }
        }
        true
    }
}

=======
Suggestion 5

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in nums.iter() {
            *map.entry(*i).or_insert(0) += 1;
        }
        for i in nums.iter() {
            if let Some(&mut v) = map.get_mut(i) {
                if v > 0 {
                    for j in 1..=3 {
                        if let Some(&mut v1) = map.get_mut(&(i+j)) {
                            if v1 > 0 {
                                v -= 1;
                                v1 -= 1;
                            } else {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                }
            }
        }
        true
    }
}

=======
Suggestion 6

        let mut map = std::collections::HashMap::new();
        for num in nums {
            *map.entry(num).or_insert(0) += 1;
        }
        let mut map2 = std::collections::HashMap::new();
        for num in nums {
            if *map.entry(num).or_insert(0) == 0 {
                continue;
            }
            let prev = map2.entry(num - 1).or_insert(0);
            if *prev > 0 {
                *prev -= 1;
                *map2.entry(num).or_insert(0) += 1;
            } else if let Some(next) = map.get(&(num + 1)) {
                if *next > 0 {
                    *map.entry(num + 1).or_insert(0) -= 1;
                    *map.entry(num + 2).or_insert(0) += 1;
                } else {
                    return false;
                }
            } else {
                return false;
            }
            *map.entry(num).or_insert(0) -= 1;
        }
        true
    }
}

=======
Suggestion 7

        
    }
}

=======
Suggestion 8

        let mut stack = vec![];
        for n in nums {
            let mut i = 0;
            while i < stack.len() {
                if stack[i].0 == n {
                    stack[i].1 += 1;
                    break;
                } else if stack[i].0 + 1 == n {
                    if i == 0 || stack[i - 1].0 != stack[i].0 {
                        stack[i].0 += 1;
                        stack[i].1 -= 1;
                        if stack[i].1 == 0 {
                            stack.remove(i);
                        }
                        break;
                    }
                }
                i += 1;
            }
            if i == stack.len() {
                stack.push((n, 2));
            }
        }
        stack.len() == 0
    }
}

=======
Suggestion 9

        let mut v = vec![];
        for i in 0..nums.len() {
            let mut j = 0;
            while j < v.len() && v[j] != nums[i] {
                j += 1;
            }
            if j == v.len() {
                v.push(nums[i]);
            }
        }
        let mut i = 0;
        let mut j = 0;
        while i < v.len() {
            while j < nums.len() && v[i] != nums[j] {
                j += 1;
            }
            if j == nums.len() {
                return false;
            }
            let mut k = j + 1;
            while k < nums.len() && nums[k] == nums[j] {
                k += 1;
            }
            if k - j < 3 {
                return false;
            }
            j = k;
            i += 1;
        }
        true
    }
}

=======
Suggestion 10

        let mut nums = nums;
        let mut arr = vec![];
        let mut i = 0;
        while i < nums.len() {
            let mut j = i;
            while j < nums.len() && nums[i] == nums[j] {
                j += 1;
            }
            let mut k = i;
            while k < j {
                let mut l = 0;
                while l < arr.len() && (arr[l][0] != nums[i] || arr[l][1] == 0) {
                    l += 1;
                }
                if l == arr.len() {
                    arr.push(vec![nums[i], j - k]);
                } else {
                    arr[l][1] += j - k;
                }
                k += 1;
            }
            i = j;
        }
        for i in 0..arr.len() {
            if arr[i][1] < 3 {
                return false;
            }
        }
        true
    }
}
