Synthesizing 10/10 solutions

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut i = 0;
        let mut j = plants.len() - 1;
        let mut refill = 0;
        while i <= j {
            if a < plants[i] {
                a = capacity_a;
                refill += 1;
            }
            if b < plants[j] {
                b = capacity_b;
                refill += 1;
            }
            a -= plants[i];
            b -= plants[j];
            i += 1;
            j -= 1;
        }
        refill
    }
}

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut ans = 0;
        let mut i = 0;
        let mut j = plants.len() - 1;
        while i <= j {
            if a < plants[i] {
                a = capacity_a;
                ans += 1;
            }
            if b < plants[j] {
                b = capacity_b;
                ans += 1;
            }
            a -= plants[i];
            b -= plants[j];
            i += 1;
            j -= 1;
        }
        ans

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut i = 0;
        let mut j = plants.len() - 1;
        let mut count = 0;
        while i < j {
            if a < plants[i] {
                a = capacity_a;
                count += 1;
            }
            if b < plants[j] {
                b = capacity_b;
                count += 1;
            }
            a -= plants[i];
            b -= plants[j];
            i += 1;
            j -= 1;
        }
        if i == j && a + b < plants[i] {
            count += 1;
        }
        count

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut res = 0;
        let mut i = 0;
        let mut j = plants.len() - 1;
        while i < j {
            if a >= plants[i] {
                a -= plants[i];
                i += 1;
            } else {
                a = capacity_a;
                res += 1;
            }
            if b >= plants[j] {
                b -= plants[j];
                j -= 1;
            } else {
                b = capacity_b;
                res += 1;
            }
        }
        if i == j && a + b < plants[i] {
            res += 2;
        }
        res

=======

        let mut res = 0;
        let mut a = 0;
        let mut b = 0;
        let mut i = 0;
        let mut j = plants.len() - 1;
        while i <= j {
            if a < plants[i] {
                a = capacity_a;
                res += 1;
            }
            if b < plants[j] {
                b = capacity_b;
                res += 1;
            }
            a -= plants[i];
            b -= plants[j];
            i += 1;
            j -= 1;
        }
        if a >= plants[i - 1] && b >= plants[j + 1] {
            res -= 1;
        }
        res

=======

        let mut i = 0;
        let mut j = plants.len() - 1;
        let mut count = 0;
        let mut a = capacity_a;
        let mut b = capacity_b;
        while i <= j {
            if i == j {
                if a + b < plants[i] {
                    count += 2;
                } else if a + b >= plants[i] && a < plants[i] && b < plants[i] {
                    count += 1;
                }
                break;
            }
            if a >= plants[i] {
                a -= plants[i];
                i += 1;
            } else {
                a = capacity_a - plants[i];
                i += 1;
                count += 1;
            }
            if b >= plants[j] {
                b -= plants[j];
                j -= 1;
            } else {
                b = capacity_b - plants[j];
                j -= 1;
                count += 1;
            }
        }
        count

=======

        let mut a = 0;
        let mut b = plants.len() - 1;
        let mut count = 0;
        let mut a_water = 0;
        let mut b_water = 0;
        while a <= b {
            if a_water < plants[a] {
                a_water = capacity_a;
                count += 1;
            }
            if b_water < plants[b] {
                b_water = capacity_b;
                count += 1;
            }
            a_water -= plants[a];
            b_water -= plants[b];
            a += 1;
            if a <= b {
                b -= 1;
            }
        }
        count - 2

=======

        let mut a = 0;
        let mut b = plants.len() - 1;
        let mut refill = 0;
        let mut a_water = capacity_a;
        let mut b_water = capacity_b;
        while a <= b {
            if a_water < plants[a] {
                a_water = capacity_a;
                refill += 1;
            }
            if b_water < plants[b] {
                b_water = capacity_b;
                refill += 1;
            }
            if a_water >= plants[a] && b_water >= plants[b] {
                a_water -= plants[a];
                b_water -= plants[b];
                a += 1;
                if a < b {
                    b -= 1;
                }
            } else if a_water >= plants[a] {
                a_water -= plants[a];
                a += 1;
            } else if b_water >= plants[b] {
                b_water -= plants[b];
                b -= 1;
            }
        }
        refill

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut count = 0;
        for i in 0..plants.len() {
            let p = plants[i];
            if a >= p {
                a -= p;
            } else if b >= p {
                b -= p;
            } else {
                count += 1;
                if capacity_a >= p {
                    a = capacity_a - p;
                    b = 0;
                } else {
                    b = capacity_b - p;
                    a = 0;
                }
            }
        }
        count

=======

        let mut a = capacity_a;
        let mut b = capacity_b;
        let mut i = 0;
        let mut j = plants.len() - 1;
        let mut refill = 0;
        let mut refill_a = false;
        let mut refill_b = false;
        while i < j {
            if a >= plants[i] {
                a -= plants[i];
                i += 1;
                refill_a = false;
            } else {
                refill_a = true;
            }
            if b >= plants[j] {
                b -= plants[j];
                j -= 1;
                refill_b = false;
            } else {
                refill_b = true;
            }
            if refill_a && refill_b {
                a = capacity_a;
                b = capacity_b;
                refill += 1;
            }
        }
        if i == j {
            if a < plants[i] && b < plants[i] {
                refill += 1;
            }
        }
        refill
