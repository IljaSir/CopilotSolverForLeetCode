Synthesizing 10/10 solutions

=======

        let mut reserved = vec![vec![false; 10]; n as usize];
        for seat in reserved_seats {
            reserved[seat[0] as usize - 1][seat[1] as usize - 1] = true;
        }
        let mut count = 0;
        for row in reserved {
            let mut left = 0;
            let mut right = 0;
            if !row[1] && !row[2] && !row[3] && !row[4] {
                left = 1;
            }
            if !row[5] && !row[6] && !row[7] && !row[8] {
                right = 1;
            }
            if !row[3] && !row[4] && !row[5] && !row[6] {
                count += 1;
                continue;
            }
            count += left + right;
        }
        count + (n - reserved.len() as i32) * 2

=======

        let mut seats = vec![vec![0; 10]; n as usize];
        for seat in reserved_seats {
            seats[seat[0] as usize - 1][seat[1] as usize - 1] = 1;
        }
        let mut ans = 0;
        for row in seats {
            let mut flag = 0;
            for i in 0..6 {
                if row[i] == 1 {
                    flag |= 1;
                }
            }
            for i in 2..8 {
                if row[i] == 1 {
                    flag |= 2;
                }
            }
            for i in 4..10 {
                if row[i] == 1 {
                    flag |= 4;
                }
            }
            ans += match flag {
                0 => 2,
                1 => 1,
                2 => 1,
                3 => 0,
                4 => 1,
                5 => 0,
                6 => 0,
                7 => 0,
                _ => panic!("invalid flag"),
            }
        }
        ans

=======

        let mut reserved = vec![0; n as usize];
        for seat in reserved_seats {
            reserved[(seat[0] - 1) as usize] |= 1 << (seat[1] - 1);
        }
        let mut ans = (n * 2) as i32;
        for r in reserved {
            if r & 0b1111111110 == 0b1111111110 {
                ans -= 2;
            } else if r & 0b1111000000 == 0b1111000000 || r & 0b111100 == 0b111100 || r & 0b111100000000 == 0b111100000000 {
                ans -= 1;
            }
        }
        ans

=======

        let mut seats = vec![vec![true; 11]; n as usize];
        for seat in reserved_seats {
            seats[seat[0] as usize - 1][seat[1] as usize] = false;
        }
        let mut res = 0;
        for seat in seats {
            let mut i = 1;
            let mut j = 4;
            let mut k = 7;
            let mut l = 10;
            let mut flag = 0;
            while j <= 10 {
                if seat[i] && seat[j] && seat[k] && seat[l] {
                    flag = 1;
                    break;
                }
                i += 1;
                j += 1;
                k += 1;
                l += 1;
            }
            if flag == 1 {
                if i == 1 || l == 10 {
                    res += 2;
                } else {
                    res += 1;
                }
            } else {
                res += 1;
            }
        }
        res

=======

        let mut map = std::collections::HashMap::new();
        for seat in reserved_seats {
            map.entry(seat[0]).or_insert(vec![]).push(seat[1]);
        }
        let mut res = 0;
        for seat in map.values() {
            let mut flag = 0;
            for j in 2..=9 {
                if seat.contains(&j) {
                    flag = 1;
                    break;
                }
            }
            if flag == 0 {
                res += 2;
            } else {
                let mut flag = 0;
                for j in 2..=5 {
                    if seat.contains(&j) {
                        flag = 1;
                        break;
                    }
                }
                if flag == 0 {
                    res += 1;
                }
                let mut flag = 0;
                for j in 6..=9 {
                    if seat.contains(&j) {
                        flag = 1;
                        break;
                    }
                }
                if flag == 0 {
                    res += 1;
                }
            }
        }
        res + (n - map.len() as i32) * 2

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for v in reserved_seats {
            let e = map.entry(v[0]).or_insert(0);
            *e |= 1 << (10 - v[1]);
        }
        for (_, v) in map {
            if v & 0b1111111100 == 0 {
                res += 2;
            } else if v & 0b1111000000 == 0 || v & 0b0000111100 == 0 || v & 0b0000001111 == 0 {
                res += 1;
            }
        }
        res += (n - map.len() as i32) * 2;
        res

=======

        let mut ans = 0;
        let mut rows = std::collections::BTreeMap::new();
        for seat in reserved_seats {
            rows.entry(seat[0]).or_insert(vec![]).push(seat[1]);
        }
        for (_, seats) in rows {
            let mut seats = seats;
            seats.sort();
            let mut i = 0;
            while i < seats.len() {
                if seats[i] <= 2 {
                    i += 1;
                    continue;
                } else if seats[i] <= 6 {
                    ans += 1;
                    i += 1;
                    while i < seats.len() {
                        if seats[i] <= 6 {
                            i += 1;
                        } else {
                            break;
                        }
                    }
                } else if seats[i] <= 8 {
                    ans += 1;
                    i += 1;
                    while i < seats.len() {
                        if seats[i] <= 8 {
                            i += 1;
                        } else {
                            break;
                        }
                    }
                } else {
                    i += 1;
                }
            }
        }
        ans + (n - rows.len() as i32) * 2
    }
}

=======

        let mut n = n as i64;
        let mut reserved_seats = reserved_seats;
        reserved_seats.sort();
        let mut i = 0;
        let mut ans = 0;
        while i < reserved_seats.len() {
            let mut j = i;
            while j < reserved_seats.len() && reserved_seats[j][0] == reserved_seats[i][0] {
                j += 1;
            }
            ans += 2 * (j - i) as i64;
            let mut left = true;
            let mut right = true;
            for k in i..j {
                if reserved_seats[k][1] >= 2 && reserved_seats[k][1] <= 5 {
                    left = false;
                }
                if reserved_seats[k][1] >= 6 && reserved_seats[k][1] <= 9 {
                    right = false;
                }
            }
            if left {
                ans -= 1;
            }
            if right {
                ans -= 1;
            }
            i = j;
        }
        ans + 2 * n

=======

        let mut reserved_seats = reserved_seats;
        reserved_seats.sort();
        let mut result = 0;
        let mut cur = 0;
        let mut prev = 0;
        for i in 0..reserved_seats.len() {
            if prev == 0 {
                prev = reserved_seats[i][0];
                cur = 0;
            }
            if prev != reserved_seats[i][0] {
                result += cur / 4;
                cur = 0;
                prev = reserved_seats[i][0];
            }
            let seat = reserved_seats[i][1];
            if seat == 2 || seat == 3 || seat == 4 || seat == 5 {
                cur |= 1;
            }
            if seat == 6 || seat == 7 || seat == 8 || seat == 9 {
                cur |= 2;
            }
            if seat == 4 || seat == 5 || seat == 6 || seat == 7 {
                cur |= 4;
            }
        }
        result += cur / 4;
        result += (n - reserved_seats.len() as i32) * 2;
        result

=======

        let mut rsv = reserved_seats;
        rsv.sort();
        let mut ans = 0;
        let mut last = 0;
        let mut cnt = 0;
        for i in 0..rsv.len() {
            if rsv[i][0] != last {
                ans += cnt / 4;
                cnt = 0;
                last = rsv[i][0];
            }
            let mut j = i;
            while j < rsv.len() && rsv[j][0] == last {
                j += 1;
            }
            let mut state = 0;
            for k in i..j {
                if rsv[k][1] == 2 || rsv[k][1] == 3 || rsv[k][1] == 4 || rsv[k][1] == 5 {
                    state |= 1;
                } else if rsv[k][1] == 6 || rsv[k][1] == 7 || rsv[k][1] == 8 || rsv[k][1] == 9 {
                    state |= 2;
                } else {
                    state |= 3;
                }
            }
            if state == 1 {
                cnt += 2;
            } else if state == 2 {
                cnt += 2;
            } else if state == 0 {
                cnt += 4;
            }
            i = j - 1;
        }
        ans += cnt / 4;
        ans += (n - rsv.len() as i32) * 2;
        ans
