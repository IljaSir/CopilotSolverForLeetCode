Synthesizing 9/10 solutions

=======

        let mut ans = 0;
        let s = s.as_bytes();
        for i in 0..s.len() {
            let mut cnt = [0; 26];
            for j in i..s.len() {
                cnt[(s[j] - b'a') as usize] += 1;
                let mut max = 0;
                let mut min = 500;
                for &c in cnt.iter() {
                    if c > 0 {
                        max = max.max(c);
                        min = min.min(c);
                    }
                }
                ans += max - min;
            }
        }
        ans

=======

        let mut ans = 0;
        let s = s.as_bytes();
        for i in 0..s.len() {
            let mut cnt = vec![0; 26];
            for j in i..s.len() {
                cnt[(s[j] - b'a') as usize] += 1;
                let mut min = 501;
                let mut max = 0;
                for &c in &cnt {
                    if c > 0 {
                        min = min.min(c);
                        max = max.max(c);
                    }
                }
                ans += max - min;
            }
        }
        ans

=======

        let mut res = 0;
        let s = s.as_bytes();
        for i in 0..s.len() {
            let mut cnt = [0; 26];
            for j in i..s.len() {
                let idx = (s[j] - b'a') as usize;
                cnt[idx] += 1;
                res += Self::max(&cnt) - Self::min(&cnt);
            }
        }
        res
    }
    fn max(cnt: &[i32]) -> i32 {
        cnt.iter().filter(|&x| *x != 0).max().unwrap()

=======

        let mut sum = 0;
        let bytes = s.as_bytes();
        for i in 0..bytes.len() {
            let mut freq = [0; 26];
            for j in i..bytes.len() {
                freq[(bytes[j] - b'a') as usize] += 1;
                let mut min = 500;
                let mut max = 0;
                for k in 0..26 {
                    if freq[k] > 0 {
                        min = min.min(freq[k]);
                        max = max.max(freq[k]);
                    }
                }
                sum += max - min;
            }
        }
        sum

=======

        let mut ans = 0;
        let mut cnt = vec![0; 26];
        for i in 0..s.len() {
            for j in 0..26 {
                cnt[j] = 0;
            }
            for j in i..s.len() {
                cnt[(s.as_bytes()[j] - b'a') as usize] += 1;
                let mut min = 501;
                let mut max = -1;
                for k in 0..26 {
                    if cnt[k] > 0 {
                        min = min.min(cnt[k]);
                        max = max.max(cnt[k]);
                    }
                }
                ans += max - min;
            }
        }
        ans

=======

        let mut ans = 0;
        let n = s.len();
        for i in 0..n {
            let mut freq = [0; 26];
            for j in i..n {
                let c = s.as_bytes()[j] as usize - b'a' as usize;
                freq[c] += 1;
                let mut min = i32::MAX;
                let mut max = i32::MIN;
                for &x in freq.iter() {
                    if x > 0 {
                        min = min.min(x as i32);
                        max = max.max(x as i32);
                    }
                }
                ans += max - min;
            }
        }
        ans

=======

        let mut sum = 0;
        let mut chars = s.chars().collect::<Vec<char>>();
        for i in 0..chars.len() {
            let mut freq = vec![0; 26];
            for j in i..chars.len() {
                let x = chars[j] as usize - 'a' as usize;
                freq[x] += 1;
                sum += freq.iter().max().unwrap() - freq.iter().min().unwrap();
            }
        }
        sum

=======

        let mut sum = 0;
        let s = s.as_bytes();
        let mut freq = vec![0; 26];
        for i in 0..s.len() {
            freq[(s[i] - b'a') as usize] += 1;
            let mut min = i32::max_value();
            let mut max = i32::min_value();
            for j in 0..26 {
                if freq[j] != 0 {
                    min = min.min(freq[j] as i32);
                    max = max.max(freq[j] as i32);
                }
            }
            sum += max - min;
        }
        sum

=======

        let mut sum = 0;
        let mut cnt = vec![0; 26];
        let mut max = vec![0; 26];
        let mut min = vec![0; 26];
        let mut arr = s.into_bytes();
        for i in 0..arr.len() {
            for j in 0..26 {
                cnt[j] = 0;
                max[j] = 0;
                min[j] = 0;
            }
            for j in i..arr.len() {
                let idx = arr[j] as usize - 'a' as usize;
                cnt[idx] += 1;
                if max[idx] == 0 {
                    max[idx] = cnt[idx];
                    min[idx] = cnt[idx];
                } else {
                    max[idx] = std::cmp::max(max[idx], cnt[idx]);
                    min[idx] = std::cmp::min(min[idx], cnt[idx]);
                }
                let mut m = 0;
                let mut n = 0;
                for k in 0..26 {
                    if max[k] > 0 {
                        if m == 0 {
                            m = max[k];
                        } else {
                            m = std::cmp::max(m, max[k]);
                        }
                        if n == 0 {
                            n = min[k];
                        } else {
                            n = std::cmp::min(n, min[k]);
                        }
                    }
                }
                sum += m - n;
            }
        }
        sum
    }
}
