Synthesizing 10/10 solutions

=======

        let mut shifts = shifts;
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum = (sum + shifts[i]) % 26;
            shifts[i] = sum;
        }
        s.chars()
            .zip(shifts.into_iter())
            .map(|(c, s)| (((c as i32 - 97 + s) % 26) + 97) as u8 as char)
            .collect()

=======

        let mut s = s.chars().collect::<Vec<char>>();
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum = (sum + shifts[i]) % 26;
            s[i] = ((s[i] as u8 - 97 + sum as u8) % 26 + 97) as char;
        }
        s.iter().collect()

=======

        let mut s = s.into_bytes();
        let mut sum = 0;
        for i in (0..s.len()).rev() {
            sum += shifts[i];
            s[i] = ((s[i] - b'a' + (sum % 26) as u8) % 26 + b'a') as u8;
        }
        String::from_utf8(s).unwrap()

=======

        let mut s = s.into_bytes();
        let mut sum = 0;
        for i in (0..s.len()).rev() {
            sum += shifts[i];
            s[i] = ((s[i] as i32 - 97 + sum) % 26 + 97) as u8;
        }
        unsafe { String::from_utf8_unchecked(s) }

=======

        let mut s = s.into_bytes();
        let mut shifts = shifts;
        let mut sum = 0;
        for i in (0..shifts.len()).rev() {
            sum = (sum + shifts[i]) % 26;
            s[i] = ((s[i] - b'a' + sum as u8) % 26 + b'a') as u8;
        }
        String::from_utf8(s).unwrap()
    }
}

=======

        let mut shifts = shifts;
        let mut sum = 0;
        for i in shifts.iter_mut().rev() {
            *i = (*i + sum) % 26;
            sum += *i;
        }
        s.chars()
            .zip(shifts)
            .map(|(c, shift)| (((c as u8 - b'a') as i32 + shift) % 26 + b'a') as char)
            .collect()

=======

        let mut s = s.into_bytes();
        let mut sum = shifts.iter().sum::<i32>();
        for i in 0..s.len() {
            s[i] = (b'a' + ((s[i] - b'a' + sum as u8) % 26)) as u8;
            sum -= shifts[i];
        }
        unsafe { String::from_utf8_unchecked(s) }

=======

        let mut s = s.into_bytes();
        let mut sum = shifts.iter().sum::<i32>();
        for i in 0..s.len() {
            sum -= shifts[i];
            s[i] = (s[i] as i32 + sum % 26) as u8;
            if s[i] > 122 {
                s[i] -= 26;
            }
        }
        String::from_utf8(s).unwrap()

=======

        let mut result = Vec::new();
        let mut sum = 0;
        for (i, c) in s.chars().rev().enumerate() {
            sum += shifts[shifts.len() - i - 1];
            result.push(((c as u8) + (sum % 26) as u8 - 97) % 26 + 97);
        }
        result.into_iter().rev().map(|c| c as char).collect()
    }
}

=======

        let mut shifts = shifts;
        let mut sum = shifts.iter().sum::<i32>();
        let mut res = String::new();
        for i in 0..s.len() {
            let c = s.as_bytes()[i];
            let c = (c - b'a' + (sum % 26) as u8) % 26;
            res.push((c + b'a') as char);
            sum -= shifts[i];
        }
        res
