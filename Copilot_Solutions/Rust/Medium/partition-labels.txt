Synthesizing 8/10 solutions

=======

        let mut last = [0; 26];
        for (i, c) in s.bytes().enumerate() {
            last[(c - b'a') as usize] = i;
        }
        let mut ans = Vec::new();
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.bytes().enumerate() {
            end = end.max(last[(c - b'a') as usize]);
            if i == end {
                ans.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        ans

=======

        let mut last = vec![0; 26];
        let mut res = vec![];
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i;
        }
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.chars().enumerate() {
            end = end.max(last[(c as u8 - b'a') as usize]);
            if i == end {
                res.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        res

=======

        let mut last = [0; 26];
        let mut res = Vec::new();
        for (i, c) in s.chars().enumerate() {
            last[c as usize - 'a' as usize] = i;
        }
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.chars().enumerate() {
            end = end.max(last[c as usize - 'a' as usize]);
            if i == end {
                res.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        res

=======

        let mut last = [0; 26];
        let mut res = Vec::new();
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i;
        }
        for (i, c) in s.chars().enumerate() {
            end = end.max(last[(c as u8 - b'a') as usize]);
            if i == end {
                res.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        res

=======

        let mut last = [0; 26];
        let mut res = Vec::new();
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.char_indices() {
            last[(c as u8 - b'a') as usize] = i;
        }
        for (i, c) in s.char_indices() {
            end = end.max(last[(c as u8 - b'a') as usize]);
            if end == i {
                res.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        res

=======

        let mut last = vec![0; 26];
        let mut ret = vec![];
        let mut start = 0;
        let mut end = 0;
        for (i, c) in s.chars().enumerate() {
            last[(c as u8 - b'a') as usize] = i;
        }
        for (i, c) in s.chars().enumerate() {
            end = end.max(last[(c as u8 - b'a') as usize]);
            if i == end {
                ret.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        ret

=======

        let mut ans = vec![];
        let mut last = vec![0; 26];
        let mut start = 0;
        let mut end = 0;
        for (i, ch) in s.bytes().enumerate() {
            last[(ch - b'a') as usize] = i;
        }
        for (i, ch) in s.bytes().enumerate() {
            end = end.max(last[(ch - b'a') as usize]);
            if i == end {
                ans.push((end - start + 1) as i32);
                start = end + 1;
            }
        }
        ans

=======

        
    }
}
