Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut i = 0;
        let mut j = matrix[0].len() - 1;
        while i < matrix.len() && j >= 0 {
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] > target {
                j -= 1;
            } else {
                i += 1;
            }
        }
        false
    }
}

=======
Suggestion 2

        let mut i = 0;
        let mut j = matrix[0].len() - 1;
        while i < matrix.len() && j >= 0 {
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] < target {
                i += 1;
            } else {
                j -= 1;
            }
        }
        false

=======
Suggestion 3

        let mut i = 0;
        let mut j = matrix[0].len() - 1;
        while i < matrix.len() && j >= 0 {
            if matrix[i][j] == target {
                return true;
            }
            if matrix[i][j] > target {
                j -= 1;
            } else {
                i += 1;
            }
        }
        false

=======
Suggestion 4

        let mut i = 0;
        let mut j = matrix[0].len() - 1;
        while i < matrix.len() && j >= 0 {
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] > target {
                j -= 1;
            } else {
                i += 1;
            }
        }
        return false;

=======
Suggestion 5

        let m = matrix.len();
        let n = matrix[0].len();
        let mut i = 0;
        let mut j = n - 1;
        while i < m && j >= 0 {
            if matrix[i][j] == target {
                return true;
            }
            if matrix[i][j] < target {
                i += 1;
            } else {
                j -= 1;
            }
        }
        false

=======
Suggestion 6

        let mut row = 0;
        let mut col = matrix[0].len() - 1;
        while row < matrix.len() && col < matrix[0].len() {
            if matrix[row][col] == target {
                return true;
            } else if matrix[row][col] < target {
                row += 1;
            } else {
                col -= 1;
            }
        }
        false

=======
Suggestion 7

        let (m, n) = (matrix.len(), matrix[0].len());
        let (mut i, mut j) = (m - 1, 0);
        while i < m && j < n {
            if matrix[i][j] == target {
                return true;
            }
            if matrix[i][j] > target {
                i -= 1;
            } else {
                j += 1;
            }
        }
        false

=======
Suggestion 8

        let (m, n) = (matrix.len(), matrix[0].len());
        let (mut r, mut c) = (0, n - 1);
        while r < m && c < n {
            if matrix[r][c] == target {
                return true;
            } else if matrix[r][c] > target {
                c -= 1;
            } else {
                r += 1;
            }
        }
        false

=======
Suggestion 9

        let mut i = 0;
        let mut j = matrix[0].len() - 1;
        while i < matrix.len() && j < matrix[0].len() {
            let v = matrix[i][j];
            if v == target {
                return true;
            } else if v < target {
                i += 1;
            } else {
                if j == 0 {
                    break;
                }
                j -= 1;
            }
        }
        false

=======
Suggestion 10

        let mut (mut i, mut j) = (0, matrix[0].len() - 1);
        while i < matrix.len() && j >= 0 {
            if matrix[i][j] == target {
                return true;
            } else if matrix[i][j] > target {
                j -= 1;
            } else {
                i += 1;
            }
        }
        false
    }
}
