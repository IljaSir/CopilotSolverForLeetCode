Synthesizing 5/10 solutions

=======

        let n = nums.len();
        let mut dp = vec![vec![0; n]; n];
        for i in 0..n {
            for j in i..n {
                dp[i][j] = nums[i..=j].iter().max().unwrap();
            }
        }
        let mut dp = vec![vec![std::i32::MAX; n]; k as usize];
        for i in 0..n {
            dp[0][i] = dp[0][i].min(*dp[0].get(i - 1).unwrap_or(&0));
            dp[0][i] = dp[0][i].min(dp[0][i - 1]);
        }
        for i in 1..k as usize {
            for j in i..n {
                for l in i - 1..j {
                    dp[i][j] = dp[i][j].min(dp[i - 1][l].max(dp[l + 1][j]));
                }
            }
        }
        dp[k as usize - 1][n - 1]

=======

        let n = nums.len();
        let k = k as usize;
        let mut dp = vec![vec![0; n + 1]; k + 1];
        let mut sum = vec![0; n + 1];
        for i in 0..n {
            sum[i + 1] = sum[i] + nums[i];
        }
        for i in 1..=k {
            for j in i..=n {
                dp[i][j] = i32::max_value();
                for p in i - 1..j {
                    dp[i][j] = dp[i][j].min(dp[i - 1][p].max(sum[j] - sum[p]));
                }
            }
        }
        dp[k][n]

=======

        let k = k as usize;
        let n = nums.len();
        let mut dp = vec![vec![0; n]; k];
        for i in 0..n {
            dp[0][i] = nums[..i+1].iter().max().unwrap().clone();
        }
        for i in 1..k {
            for j in i..n {
                dp[i][j] = dp[i-1][j-1];
                for l in i-1..j {
                    dp[i][j] = dp[i][j].min(dp[i-1][l].max(nums[l+1..j+1].iter().max().unwrap().clone()));
                }
            }
        }
        dp[k-1][n-1]
    }
}

=======

        let n = nums.len();
        let k = k as usize;
        let mut dp = vec![vec![0; k+1]; n+1];
        for i in 0..n {
            for j in 1..=k {
                dp[i+1][j] = dp[i][j];
                if j <= i {
                    dp[i+1][j] = dp[i+1][j].max(dp[i][j-1] + nums[i]);
                }
            }
        }
        dp[n][k]

=======

        let n = nums.len();
        let k = k as usize;
        let mut dp = vec![vec![0; n - k + 1]; n];
        for i in 0..n {
            dp[i][0] = nums[i];
            if i > 0 {
                dp[i][0] = dp[i][0].max(dp[i - 1][0]);
            }
        }
        for l in 1..n - k + 1 {
            for i in l..n {
                let mut maxn = 0;
                for j in (i + 1)..n {
                    maxn = maxn.max(dp[j][l - 1]);
                }
                dp[i][l] = nums[i].max(maxn);
            }
        }
        let mut maxn = 0;
        for i in (k - 1)..n {
            maxn = maxn.max(dp[i][n - k]);
        }
        maxn
