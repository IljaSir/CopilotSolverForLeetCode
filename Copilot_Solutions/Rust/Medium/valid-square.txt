Synthesizing 4/10 solutions

=======
Suggestion 1

        let mut d = vec![p1[0] * p1[0] + p1[1] * p1[1], p2[0] * p2[0] + p2[1] * p2[1], p3[0] * p3[0] + p3[1] * p3[1], p4[0] * p4[0] + p4[1] * p4[1]];
        d.sort();
        d[0] == 0 || d[0] != d[1] || d[0] + d[1] != d[2] || d[2] != d[3] || d[2] + d[3] != d[4] || d[4] != d[5]

=======
Suggestion 2

        let mut dists = vec![0; 6];
        dists[0] = Self::dist(&p1, &p2);
        dists[1] = Self::dist(&p1, &p3);
        dists[2] = Self::dist(&p1, &p4);
        dists[3] = Self::dist(&p2, &p3);
        dists[4] = Self::dist(&p2, &p4);
        dists[5] = Self::dist(&p3, &p4);
        dists.sort();
        dists[0] > 0 && dists[0] == dists[1] && dists[1] == dists[2] && dists[2] == dists[3] && dists[4] == dists[5]

=======
Suggestion 3

        let mut sides = vec![0; 6];
        sides[0] = Self::distance(&p1, &p2);
        sides[1] = Self::distance(&p1, &p3);
        sides[2] = Self::distance(&p1, &p4);
        sides[3] = Self::distance(&p2, &p3);
        sides[4] = Self::distance(&p2, &p4);
        sides[5] = Self::distance(&p3, &p4);
        sides.sort_unstable();
        sides[0] > 0 && sides[0] == sides[1] && sides[0] == sides[2] && sides[0] == sides[3] && sides[4] == sides[5]

=======
Suggestion 4

        let mut points = vec![p1, p2, p3, p4];
        points.sort();
        let mut dist = vec![];
        for i in 0..3 {
            for j in i+1..4 {
                dist.push((points[i][0] - points[j][0]).pow(2) + (points[i][1] - points[j][1]).pow(2));
            }
        }
        dist.sort();
        dist[0] != 0 && dist[0] == dist[3] && dist[4] == dist[5]
