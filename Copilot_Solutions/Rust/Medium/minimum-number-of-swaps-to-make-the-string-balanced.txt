Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut cnt = 0;
        let mut ans = 0;
        for c in s.chars() {
            if c == '[' {
                cnt += 1;
            } else {
                if cnt > 0 {
                    cnt -= 1;
                } else {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut count = 0;
        let mut result = 0;
        for c in s.chars() {
            if c == '[' {
                count += 1;
            } else {
                if count == 0 {
                    result += 1;
                } else {
                    count -= 1;
                }
            }
        }
        result

=======

        let mut res = 0;
        let mut count = 0;
        for c in s.chars() {
            if c == '[' {
                count += 1;
            } else {
                if count == 0 {
                    res += 1;
                } else {
                    count -= 1;
                }
            }
        }
        res

=======

        let mut cnt = 0;
        for c in s.chars() {
            if c == '[' {
                cnt += 1;
            } else {
                cnt -= 1;
            }
            if cnt < 0 {
                cnt += 2;
            }
        }
        cnt / 2

=======

        let mut count = 0;
        let mut result = 0;
        for c in s.chars() {
            if c == '[' {
                count += 1;
            } else {
                count -= 1;
                if count < 0 {
                    result += 1;
                    count = 1;
                }
            }
        }
        result

=======

        let mut result = 0;
        let mut balance = 0;
        for c in s.chars() {
            if c == '[' {
                balance += 1;
            } else {
                balance -= 1;
                if balance < 0 {
                    result += 1;
                    balance += 2;
                }
            }
        }
        result

=======

        let mut count = 0;
        let mut open = 0;
        for c in s.chars() {
            if c == '[' {
                open += 1;
            } else {
                if open == 0 {
                    count += 1;
                } else {
                    open -= 1;
                }
            }
        }
        count

=======

        let mut stack = Vec::new();
        for c in s.chars() {
            if c == '[' {
                stack.push(c);
            } else {
                if stack.is_empty() {
                    stack.push(c);
                } else {
                    stack.pop();
                }
            }
        }
        let mut left = 0;
        let mut right = 0;
        for c in stack {
            if c == '[' {
                left += 1;
            } else {
                right += 1;
            }
        }
        (left + 1) / 2 + (right + 1) / 2

=======

        let mut stack = Vec::new();
        let mut ans = 0;
        for c in s.chars() {
            if c == '[' {
                stack.push(c);
            } else if stack.is_empty() {
                ans += 1;
            } else {
                stack.pop();
            }
        }
        ans / 2
