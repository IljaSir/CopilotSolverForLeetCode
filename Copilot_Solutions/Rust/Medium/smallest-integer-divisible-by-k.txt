Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut r = 0;
        for n in 1..=k {
            r = (r * 10 + 1) % k;
            if r == 0 {
                return n;
            }
        }
        -1
    }
}

=======

        if k % 2 == 0 || k % 5 == 0 {
            return -1;
        }
        let mut r = 0;
        for n in 1..k+1 {
            r = (r * 10 + 1) % k;
            if r == 0 {
                return n;
            }
        }
        -1

=======

        if k % 2 == 0 || k % 5 == 0 {
            return -1;
        }
        let mut n = 0;
        for len in 1..=k {
            n = (n * 10 + 1) % k;
            if n == 0 {
                return len;
            }
        }
        -1
    }
}

=======

        if k % 2 == 0 || k % 5 == 0 {
            return -1;
        }
        let mut n = 1;
        let mut i = 1;
        while n % k != 0 {
            n = (n * 10 + 1) % k;
            i += 1;
        }
        i
    }
}

=======

        if k % 2 == 0 || k % 5 == 0 {
            return -1;
        }
        let mut n = 0;
        for i in 1..k+1 {
            n = (n * 10 + 1) % k;
            if n == 0 {
                return i as i32;
            }
        }
        -1

=======

        if k % 2 == 0 || k % 5 == 0 {
            return -1;
        }
        let mut num = 0;
        for i in 1..k+1 {
            num = (num * 10 + 1) % k;
            if num == 0 {
                return i;
            }
        }
        -1
    }
}

=======

        let mut n = 1;
        let mut r = 1;
        while r != 0 {
            r = (r * 10 + 1) % k;
            n += 1;
        }
        n

=======

        let mut len = 1;
        let mut n = 1;
        while n % k != 0 {
            n = (n * 10 + 1) % k;
            len += 1;
        }
        if n == 0 {
            return len;
        }
        -1
    }
}

=======

        
    }
}
