Synthesizing 10/10 solutions

=======

        let mut sum = 0;
        let mut max = 0;
        for i in 0..milestones.len() {
            sum += milestones[i];
            if milestones[i] > max {
                max = milestones[i];
            }
        }
        let rest = sum - max;
        if max <= rest + 1 {
            return sum as i64;
        }
        return 2 * rest + 1;

=======

        let mut max = 0;
        let mut sum = 0;
        for i in 0..milestones.len() {
            sum += milestones[i];
            if milestones[i] > max {
                max = milestones[i];
            }
        }
        if max > sum - max + 1 {
            (sum - max) * 2 + 1
        } else {
            sum
        }

=======

        let mut max = 0;
        let mut sum = 0;
        for i in 0..milestones.len() {
            max = max.max(milestones[i]);
            sum += milestones[i];
        }
        (sum - max).min(max - 1) * 2 + 1

=======

        let mut sum = 0;
        let mut max = 0;
        for m in milestones {
            sum += m;
            if m > max {
                max = m;
            }
        }
        if max > sum - max {
            (sum - max) * 2 + 1
        } else {
            sum
        }
    }
}

=======

        let mut sum: i64 = 0;
        let mut max: i32 = 0;
        for m in milestones {
            sum += m as i64;
            max = max.max(m);
        }
        sum - max.max(1) as i64 + 1

=======

        let mut max = 0;
        let mut sum = 0;
        for i in milestones {
            if i > max {
                max = i;
            }
            sum += i;
        }
        if max > sum - max {
            return (sum - max) * 2 + 1;
        }
        return sum as i64;

=======

        let mut max = 0;
        let mut sum = 0;
        for m in milestones {
            sum += m;
            max = max.max(m);
        }
        let remain = sum - max;
        if remain >= max {
            return sum as i64;
        }
        remain * 2 + 1
    }
}

=======

        let mut max = 0;
        let mut sum = 0;
        for &m in milestones.iter() {
            sum += m;
            max = max.max(m);
        }
        sum - max + 1
    }
}

=======

        let mut sorted = milestones;
        sorted.sort();
        let mut sum = 0;
        for i in 0..sorted.len()-1 {
            sum += sorted[i] as i64;
        }
        let max = sorted[sorted.len()-1] as i64;
        if sum < max {
            return sum*2+1;
        }
        return sum+max;

=======

        let mut sum = 0;
        let mut max = 0;
        for item in milestones {
            sum += item;
            max = max.max(item);
        }
        let res = sum - max;
        if res >= max {
            sum as i64
        } else {
            res * 2 + 1
        }
    }
}
