Synthesizing 10/10 solutions

=======

        let x_center = x_center as f64;
        let y_center = y_center as f64;
        let x1 = x1 as f64;
        let y1 = y1 as f64;
        let x2 = x2 as f64;
        let y2 = y2 as f64;
        let dist_x = (x_center - x1).max(0.).min(x2 - x_center);
        let dist_y = (y_center - y1).max(0.).min(y2 - y_center);
        dist_x * dist_x + dist_y * dist_y <= (radius * radius) as f64

=======

        let x = if x_center < x1 {
            x1
        } else if x_center > x2 {
            x2
        } else {
            x_center
        };
        let y = if y_center < y1 {
            y1
        } else if y_center > y2 {
            y2
        } else {
            y_center
        };
        (x_center - x) * (x_center - x) + (y_center - y) * (y_center - y) <= radius * radius

=======

        let x1 = x1 as f64;
        let y1 = y1 as f64;
        let x2 = x2 as f64;
        let y2 = y2 as f64;
        let x_center = x_center as f64;
        let y_center = y_center as f64;
        let radius = radius as f64;
        let (x, y) = (
            x_center.max(x1).min(x2),
            y_center.max(y1).min(y2),
        );
        (x_center - x).powi(2) + (y_center - y).powi(2) <= radius.powi(2)

=======

        let x = x_center.max(x1).min(x2);
        let y = y_center.max(y1).min(y2);
        (x - x_center).pow(2) + (y - y_center).pow(2) <= radius.pow(2)

=======

        let x1 = x1 as f64;
        let x2 = x2 as f64;
        let y1 = y1 as f64;
        let y2 = y2 as f64;
        let x_center = x_center as f64;
        let y_center = y_center as f64;
        let radius = radius as f64;
        let x = if x_center < x1 {
            x1
        } else if x_center > x2 {
            x2
        } else {
            x_center
        };
        let y = if y_center < y1 {
            y1
        } else if y_center > y2 {
            y2
        } else {
            y_center
        };
        let d = (x - x_center) * (x - x_center) + (y - y_center) * (y - y_center);
        d <= radius * radius

=======

        let (x, y) = (x_center as f64, y_center as f64);
        let (x1, y1, x2, y2) = (x1 as f64, y1 as f64, x2 as f64, y2 as f64);
        let (x, y) = (x.max(x1).min(x2), y.max(y1).min(y2));
        (x - x_center as f64).powi(2) + (y - y_center as f64).powi(2) <= radius as f64 * radius as f64

=======

        let x = (x_center - x1).max(x2 - x_center).max(0);
        let y = (y_center - y1).max(y2 - y_center).max(0);
        x * x + y * y <= radius * radius

=======

        let (x, y) = (x_center as f32, y_center as f32);
        let (x1, y1, x2, y2) = (x1 as f32, y1 as f32, x2 as f32, y2 as f32);
        let (xc, yc) = if x < x1 {
            (x1, if y < y1 { y1 } else if y > y2 { y2 } else { y })
        } else if x > x2 {
            (x2, if y < y1 { y1 } else if y > y2 { y2 } else { y })
        } else {
            (x, if y < y1 { y1 } else if y > y2 { y2 } else { y })
        };
        ((x - xc) * (x - xc) + (y - yc) * (y - yc)) <= (radius * radius) as f32

=======

        let (x1, y1, x2, y2, x_center, y_center) = (x1 as f32, y1 as f32, x2 as f32, y2 as f32, x_center as f32, y_center as f32);
        let (x, y) = (x_center.max(x1).min(x2), y_center.max(y1).min(y2));
        let (x, y) = (x_center - x, y_center - y);
        (x * x + y * y) <= (radius * radius) as f32

=======

        let x = x_center - x1;
        let y = y_center - y1;
        let x = if x > 0 { x } else { -x };
        let y = if y > 0 { y } else { -y };
        if x > radius && y > radius {
            let x = x - radius;
            let y = y - radius;
            let x = x * x;
            let y = y * y;
            let r = radius * radius;
            return x + y <= r;
        }
        if x > radius {
            let x = x - radius;
            let x = x * x;
            let r = radius * radius;
            return x <= r;
        }
        if y > radius {
            let y = y - radius;
            let y = y * y;
            let r = radius * radius;
            return y <= r;
        }
        true
