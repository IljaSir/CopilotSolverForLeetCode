Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if j as i32 - i as i32 != nums[j] - nums[i] {
                    ans += 1;
                }
            }
        }
        ans
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if (j as i32 - i as i32) != (nums[j] - nums[i]) {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                if nums[j] - nums[i] == (j - i) as i32 {
                    count += 1;
                }
            }
        }
        count as i64
    }
}

=======

        let mut ans = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[i] - i as i32 != nums[j] - j as i32 {
                    ans += 1;
                }
            }
        }
        ans

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if nums[j] - nums[i] == (j as i32 - i as i32) {
                    count += 1;
                }
            }
        }
        count as i64

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in 0..nums.len() {
                if i < j && j - i != nums[j] - nums[i] {
                    count += 1;
                }
            }
        }
        count as i64
    }
}

=======

        let mut count = 0;
        for i in 0..nums.len() {
            for j in i+1..nums.len() {
                if (j as i64 - i as i64) != (nums[j] as i64 - nums[i] as i64) {
                    count += 1;
                }
            }
        }
        count

=======

        let mut r = 0;
        for i in 0..nums.len() {
            for j in (i+1)..nums.len() {
                if (j as i32 - i as i32) != nums[j] - nums[i] {
                    r += 1;
                }
            }
        }
        r as i64
    }
}

=======

        let mut sum = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() {
                if (j as i32 - i as i32) != nums[j] - nums[i] {
                    sum += 1;
                }
                j += 1;
            }
            i += 1;
        }
        sum
    }
}

=======

        let mut res = 0;
        let mut idx = vec![0; 100001];
        for (i, &x) in nums.iter().enumerate() {
            let t = x - i as i32;
            if t >= 0 {
                res += idx[t as usize];
            }
            idx[x as usize] += 1;
        }
        res
