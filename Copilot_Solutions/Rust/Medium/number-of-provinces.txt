Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let n = is_connected.len();
        let mut visited = vec![false; n];
        let mut count = 0;
        for i in 0..n {
            if !visited[i] {
                count += 1;
                Solution::dfs(&is_connected, &mut visited, i);
            }
        }
        count
    }
    fn dfs(is_connected: &Vec<Vec<i32>>, visited: &mut Vec<bool>, i: usize) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Solution::dfs(is_connected, visited, j);
            }
        }

=======
Suggestion 2

        let n = is_connected.len();
        let mut visited = vec![false; n];
        let mut count = 0;
        for i in 0..n {
            if !visited[i] {
                count += 1;
                Self::dfs(&is_connected, i, &mut visited);
            }
        }
        count
    }
    fn dfs(is_connected: &Vec<Vec<i32>>, i: usize, visited: &mut Vec<bool>) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Self::dfs(is_connected, j, visited);
            }
        }

=======
Suggestion 3

        let n = is_connected.len();
        let mut visited = vec![false; n];
        let mut count = 0;
        for i in 0..n {
            if !visited[i] {
                count += 1;
                Self::dfs(i, &is_connected, &mut visited);
            }
        }
        count
    }
    fn dfs(i: usize, is_connected: &Vec<Vec<i32>>, visited: &mut Vec<bool>) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Self::dfs(j, is_connected, visited);
            }
        }

=======
Suggestion 4

        let mut visited = vec![false; is_connected.len()];
        let mut count = 0;
        for i in 0..is_connected.len() {
            if !visited[i] {
                count += 1;
                Self::dfs(&is_connected, &mut visited, i);
            }
        }
        count
    }
    
    fn dfs(is_connected: &Vec<Vec<i32>>, visited: &mut Vec<bool>, i: usize) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Self::dfs(is_connected, visited, j);
            }
        }

=======
Suggestion 5

        let n = is_connected.len();
        let mut visited = vec![false; n];
        let mut cnt = 0;
        for i in 0..n {
            if !visited[i] {
                cnt += 1;
                Self::dfs(&is_connected, i, &mut visited);
            }
        }
        cnt
    }

    fn dfs(is_connected: &Vec<Vec<i32>>, i: usize, visited: &mut Vec<bool>) {
        let n = is_connected.len();
        for j in 0..n {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Self::dfs(is_connected, j, visited);
            }
        }

=======
Suggestion 6

        let mut visited = vec![false; is_connected.len()];
        let mut count = 0;
        for i in 0..is_connected.len() {
            if !visited[i] {
                Self::dfs(&is_connected, i, &mut visited);
                count += 1;
            }
        }
        count
    }
    fn dfs(is_connected: &Vec<Vec<i32>>, i: usize, visited: &mut Vec<bool>) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Self::dfs(is_connected, j, visited);
            }
        }

=======
Suggestion 7

        let n = is_connected.len();
        let mut visited = vec![false; n];
        let mut count = 0;

        for i in 0..n {
            if !visited[i] {
                Solution::dfs(&is_connected, i, &mut visited);
                count += 1;
            }
        }

        count
    }

    fn dfs(is_connected: &Vec<Vec<i32>>, i: usize, visited: &mut Vec<bool>) {
        for j in 0..is_connected.len() {
            if is_connected[i][j] == 1 && !visited[j] {
                visited[j] = true;
                Solution::dfs(is_connected, j, visited);
            }
        }
