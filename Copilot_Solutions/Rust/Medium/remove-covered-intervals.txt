Synthesizing 8/10 solutions

=======

        let mut intervals = intervals;
        intervals.sort_by(|a, b| {
            if a[0] == b[0] {
                b[1].cmp(&a[1])
            } else {
                a[0].cmp(&b[0])
            }
        });
        let mut ans = 0;
        let mut right = 0;
        for interval in intervals {
            if interval[1] > right {
                ans += 1;
                right = interval[1];
            }
        }
        ans

=======

        let mut intervals = intervals;
        intervals.sort_by(|a, b| {
            if a[0] == b[0] {
                b[1].cmp(&a[1])
            } else {
                a[0].cmp(&b[0])
            }
        });
        let mut ans = 0;
        let mut max = 0;
        for interval in intervals {
            if interval[1] > max {
                ans += 1;
                max = interval[1];
            }
        }
        ans

=======

        let mut intervals = intervals;
        intervals.sort_by(|a, b| {
            if a[0] == b[0] {
                b[1].cmp(&a[1])
            } else {
                a[0].cmp(&b[0])
            }
        });
        let mut res = 0;
        let mut right = 0;
        for interval in intervals {
            if right < interval[1] {
                res += 1;
                right = interval[1];
            }
        }
        res
    }
}

=======

        let mut intervals = intervals;
        intervals.sort_by(|a, b| {
            if a[0] == b[0] {
                b[1].cmp(&a[1])
            } else {
                a[0].cmp(&b[0])
            }
        });
        let mut count = 0;
        let mut end = 0;
        for interval in intervals {
            if interval[1] > end {
                count += 1;
                end = interval[1];
            }
        }
        count

=======

        let mut intervals = intervals;
        intervals.sort_unstable_by(|a, b| a[0].cmp(&b[0]).then(b[1].cmp(&a[1])));
        let mut count = 0;
        let mut prev = -1;
        for i in 0..intervals.len() {
            if intervals[i][1] > prev {
                count += 1;
                prev = intervals[i][1];
            }
        }
        count

=======

        let mut intervals = intervals;
        intervals.sort_unstable_by(|a, b| a[0].cmp(&b[0]).then(b[1].cmp(&a[1])));
        let mut res = 0;
        let mut prev = 0;
        for i in 0..intervals.len() {
            if prev < intervals[i][1] {
                prev = intervals[i][1];
                res += 1;
            }
        }
        res

=======

        let mut intervals = intervals;
        intervals.sort_by_key(|x| (x[0], -x[1]));
        let mut count = 1;
        let mut prev = &intervals[0];
        for i in 1..intervals.len() {
            if intervals[i][1] > prev[1] {
                count += 1;
                prev = &intervals[i];
            }
        }
        count

=======

        
    }
}
