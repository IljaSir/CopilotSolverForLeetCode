Synthesizing 10/10 solutions

=======

        let x = tomato_slices - 2 * cheese_slices;
        let y = 4 * cheese_slices - tomato_slices;
        if x < 0 || y < 0 || x % 2 != 0 || y % 2 != 0 {
            return vec![];
        }
        let x = x / 2;
        let y = y / 2;
        if x + y != cheese_slices {
            return vec![];
        }
        vec![x, y]

=======

        let mut result = vec![];
        let x = tomato_slices - 2 * cheese_slices;
        let y = 4 * cheese_slices - tomato_slices;
        if x >= 0 && y >= 0 && x % 2 == 0 && y % 2 == 0 {
            result.push(x / 2);
            result.push(y / 2);
        }
        result

=======

        let mut res = Vec::new();
        let jumbo = (tomato_slices - 2 * cheese_slices) / 2;
        let small = cheese_slices - jumbo;
        if jumbo < 0 || small < 0 || jumbo * 4 + small * 2 != tomato_slices {
            return res;
        }
        res.push(jumbo);
        res.push(small);
        res

=======

        let mut result = vec![];
        for jumbo in 0..=cheese_slices {
            let small = cheese_slices - jumbo;
            if jumbo * 4 + small * 2 == tomato_slices {
                result.push(jumbo);
                result.push(small);
                return result;
            }
        }
        return result;

=======

        let mut jumbo = 0;
        let mut small = 0;
        for i in 0..cheese_slices+1 {
            jumbo = i;
            small = cheese_slices - i;
            if jumbo * 4 + small * 2 == tomato_slices {
                return vec![jumbo, small];
            }
        }
        return vec![];

=======

        if tomato_slices % 2 == 1 {
            return vec![];
        }
        let mut res = vec![];
        let jumbo = tomato_slices / 2 - cheese_slices;
        let small = cheese_slices - jumbo;
        if jumbo >= 0 && small >= 0 {
            res.push(jumbo);
            res.push(small);
        }
        res

=======

        let mut res = vec![];
        let x = (tomato_slices - 2 * cheese_slices) as f32 / 2.0;
        let y = cheese_slices as f32 - x;
        if x >= 0.0 && x.fract() == 0.0 && y >= 0.0 && y.fract() == 0.0 {
            res.push(x as i32);
            res.push(y as i32);
        }
        res

=======

        let mut ans = Vec::new();
        let a = (tomato_slices - 2 * cheese_slices) as f32 / 2.0;
        let b = (4 * cheese_slices - tomato_slices) as f32 / 2.0;
        if a >= 0.0 && b >= 0.0 && (a - a.floor()).abs() < 0.000001 && (b - b.floor()).abs() < 0.000001 {
            ans.push(a as i32);
            ans.push(b as i32);
        }
        ans

=======

        let mut ans = Vec::new();
        let mut total_jumbo = 0;
        let mut total_small = 0;
        if tomato_slices % 2 == 0 {
            total_jumbo = tomato_slices / 2 - cheese_slices;
            total_small = cheese_slices - total_jumbo;
        }
        if total_jumbo >= 0 && total_small >= 0 {
            ans.push(total_jumbo);
            ans.push(total_small);
        }
        ans

=======

        let mut res = Vec::new();
        let mut x = 0;
        let mut y = 0;
        if tomato_slices % 2 == 1 {
            return res;
        }
        x = tomato_slices / 2 - cheese_slices;
        y = cheese_slices - x;
        if x >= 0 && y >= 0 && 2 * x + 4 * y == tomato_slices && x + y == cheese_slices {
            res.push(x);
            res.push(y);
        }
        res
