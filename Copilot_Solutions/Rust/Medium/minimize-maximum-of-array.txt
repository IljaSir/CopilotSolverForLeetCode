Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for i in 1..nums.len() {
            sum += nums[i] - nums[0];
        }
        sum
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut sum = 0;
        for i in 1..nums.len() {
            sum += nums[i] - nums[0];
        }
        sum

=======

        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut min = nums[0];
        for i in 1..nums.len() {
            if nums[i] < min {
                min = nums[i];
            }
        }
        sum - min * (nums.len() as i32)

=======

        let mut nums = nums;
        let n = nums.len();
        let mut sum = 0;
        let mut min = i32::MAX;
        for i in 0..n {
            sum += nums[i];
            min = min.min(nums[i]);
        }
        sum - n as i32 * min

=======

        let mut nums = nums;
        let mut max = 0;
        for i in 0..nums.len() {
            if nums[i] > max {
                max = nums[i];
            }
        }
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
        }
        let mut result = sum;
        for i in 0..nums.len() {
            let temp = sum - max + nums[i];
            sum = temp;
            if temp < result {
                result = temp;
            }
        }
        result
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut min = i32::MAX;
        let mut sum = 0;
        for i in 0..nums.len()-1 {
            sum += nums[i];
            min = min.min(nums[i+1] - sum);
        }
        nums[nums.len()-1] - sum
    }
}

=======

        let mut nums = nums;
        let mut sum: i64 = nums.iter().sum();
        let mut min = *nums.iter().min().unwrap();
        let mut max = *nums.iter().max().unwrap();
        let mut res = 0;
        while min < max {
            let mid = (min + max) / 2;
            let mut temp = 0;
            for i in 0..nums.len() {
                temp += (nums[i] - mid).max(0);
            }
            if temp <= sum / 2 {
                max = mid;
            } else {
                min = mid + 1;
            }
        }
        min
    }
}

=======

        let mut nums = nums;
        let mut n = nums.len();
        let mut sum = nums.iter().sum::<i32>();
        let mut min = nums.iter().min().unwrap();
        let mut max = nums.iter().max().unwrap();
        let mut res = *max;
        while *min < *max {
            let mid = (*min + *max) / 2;
            let mut sum = 0;
            let mut i = 0;
            while i < n {
                if nums[i] > mid {
                    sum += nums[i] - mid;
                }
                i += 1;
            }
            if sum >= mid {
                min = &mid;
                res = *min;
            } else {
                max = &mid;
            }
        }
        res

=======

        let mut nums = nums;
        let mut sum = 0;
        for n in nums.iter() {
            sum += n;
        }
        let mut min = sum;
        let mut cur = sum;
        nums.sort();
        for i in 1..nums.len() {
            cur += nums[i] - nums[i - 1];
            min = min.min(cur);
        }
        min
    }
}

=======

        let mut nums = nums;
        let mut sum = 0;
        for i in nums.iter() {
            sum += i;
        }
        let mut min = sum;
        nums.sort();
        let mut sum = 0;
        for i in 0..nums.len()-1 {
            sum += nums[i];
            if sum < min {
                min = sum;
            }
        }
        min
