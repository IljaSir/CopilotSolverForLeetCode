Synthesizing 10/10 solutions

=======

        let mut visited = vec![false; rooms.len()];
        visited[0] = true;
        let mut stack = vec![0];
        while let Some(room) = stack.pop() {
            for &key in &rooms[room] {
                if !visited[key as usize] {
                    visited[key as usize] = true;
                    stack.push(key as usize);
                }
            }
        }
        visited.iter().all(|&v| v)

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![0];
        visited[0] = true;
        while !stack.is_empty() {
            let room = stack.pop().unwrap();
            for key in rooms[room].iter() {
                if !visited[*key as usize] {
                    visited[*key as usize] = true;
                    stack.push(*key as usize);
                }
            }
        }
        visited.iter().all(|&v| v)

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![0];
        visited[0] = true;
        while !stack.is_empty() {
            let room = stack.pop().unwrap();
            for key in &rooms[room] {
                if !visited[*key as usize] {
                    visited[*key as usize] = true;
                    stack.push(*key as usize);
                }
            }
        }
        visited.iter().all(|b| *b)

=======

        let mut visited = vec![false; rooms.len()];
        visited[0] = true;
        let mut stack = vec![0];
        while let Some(i) = stack.pop() {
            for &j in &rooms[i] {
                if !visited[j as usize] {
                    visited[j as usize] = true;
                    stack.push(j as usize);
                }
            }
        }
        visited.iter().all(|&b| b)
    }
}

=======

        let mut visited: Vec<bool> = vec![false; rooms.len()];
        visited[0] = true;
        let mut stack = Vec::new();
        stack.push(0);
        while !stack.is_empty() {
            let room = stack.pop().unwrap();
            for &key in rooms[room].iter() {
                if !visited[key as usize] {
                    visited[key as usize] = true;
                    stack.push(key as usize);
                }
            }
        }
        !visited.contains(&false)
    }
}

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![];
        stack.push(0);
        while !stack.is_empty() {
            let room = stack.pop().unwrap();
            if !visited[room as usize] {
                visited[room as usize] = true;
                for &key in rooms[room as usize].iter() {
                    stack.push(key);
                }
            }
        }
        !visited.contains(&false)

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![0];
        visited[0] = true;
        while !stack.is_empty() {
            let cur = stack.pop().unwrap();
            for &i in &rooms[cur as usize] {
                if !visited[i as usize] {
                    visited[i as usize] = true;
                    stack.push(i);
                }
            }
        }
        visited.iter().all(|&x| x)

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![];
        stack.push(0);
        while !stack.is_empty() {
            let room = stack.pop().unwrap();
            if visited[room] {
                continue;
            }
            visited[room] = true;
            for &key in rooms[room].iter() {
                stack.push(key as usize);
            }
        }
        visited.iter().all(|&v| v)
    }
}

=======

        let mut visited = vec![false; rooms.len()];
        let mut stack = vec![];
        stack.push(0);
        while let Some(room) = stack.pop() {
            if visited[room] {
                continue;
            }
            visited[room] = true;
            for &key in &rooms[room] {
                stack.push(key as usize);
            }
        }
        visited.iter().all(|&v| v)

=======

        let mut visited = vec![false;rooms.len()];
        let mut stack = vec![0];
        while let Some(cur) = stack.pop() {
            if visited[cur] {
                continue;
            }
            visited[cur] = true;
            for &next in &rooms[cur] {
                if !visited[next as usize] {
                    stack.push(next as usize);
                }
            }
        }
        visited.iter().all(|&x| x)
