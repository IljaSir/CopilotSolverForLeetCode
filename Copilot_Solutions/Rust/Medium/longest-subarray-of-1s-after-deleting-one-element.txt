Synthesizing 10/10 solutions

=======

        let mut ans = 0;
        let mut l = 0;
        let mut r = 0;
        let mut k = 1;
        while r < nums.len() {
            if nums[r] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[l] == 0 {
                    k += 1;
                }
                l += 1;
            }
            ans = ans.max(r - l);
            r += 1;
        }
        ans as i32

=======

        let mut count = 0;
        let mut max = 0;
        let mut prev = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                count += 1;
            } else {
                prev = count;
                count = 0;
            }
            max = std::cmp::max(max, prev + count + 1);
        }
        std::cmp::max(max - 1, 0)

=======

        let mut ans = 0;
        let mut l = 0;
        let mut r = 0;
        let mut k = 1;
        while r < nums.len() {
            if nums[r] == 0 {
                k -= 1;
            }
            while k < 0 {
                if nums[l] == 0 {
                    k += 1;
                }
                l += 1;
            }
            ans = ans.max(r - l);
            r += 1;
        }
        ans as i32

=======

        let mut count = 0;
        let mut max = 0;
        let mut prev = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                count += 1;
            } else {
                prev = count;
                count = 0;
            }
            max = std::cmp::max(max, prev + count + 1);
        }
        std::cmp::max(max - 1, 0)

=======

        let mut mmx = 0;
        let mut count = 0;
        let mut prev = 0;
        for a in numx {
            if n == 1 {
                count += 1;
            } else {
                max = std::cmp::max(max, count + prev);
                prev = count;
                count = 0;
            }
        }
        max = std::cmp::max(max, count + prev);
        std::cmp::max(0, max - 1)

=======

        let (mut l, mut r, mut k) = (0, 0, 0);
        let mut ans = 0;
        while r < nums.len() {
            if nums[r] == 0 {
                k += 1;
            }
            while k > 1 {
                if nums[l] == 0 {
                    k -= 1;
                }
                l += 1;
            }
            ans = ans.max(r - l);
            r += 1;
        }
        ans as i32

=======

        let mut ans = 0;
        let mut prev = 0;
        let mut cur = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                cur += 1;
            } else {
                prev = cur;
                cur = 0;
            }
            max = max.max(prev + cur);
        }
        max - 1

}

=======

        let mut max = 0;
        let mut prev = 0;
        let mut cur = 0;
        let mut found = false;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                cur += 1;
            } else {
                if found {
                    max = std::cmp::max(max, cur + prev);
                } else {
                    found = true;
                }
                prev = cur;
                cur = 0;
            }
        }
        if found {
            max = std::cmp::max(max, cur + prev);
        }
        if found {
            max - 1
        } else {
            max - 1
        =======

        let mut l = 0;
        let mut r = 0;
        let mut count = 0;
        let mut max_len = 0;
        while r < nums.len() {
            if nums[r] == 0 {
                count += 1;
            }
            r += 1;
            while count > 1 {
                if nums[l] == 0 {
                    count -= 1;
                }
                l += 1;
            }
            max_len = max_len.max(r - l);
        }
        max_len as i32 - 1

=======

        let (mut l, mut r, mut k) = (0, 0, 0);
        let mut ans = 0;
        while r < nums.len() {
            if nums[r] == 0 {
                k += 1;
            }
            while k > 1 {
                if nums[l] == 0 {
                    k -= 1;
                }
                l += 1;
            }
            ans = ans.max(r - l);
            r += 1;
        }
        ans as i32

=======

        let mut ans = 0;
        let mut count = 0;
        let mut prev = 0;
        for num in nums {
            if num == 1 {
                count += 1;
                continue;
            }
            ans = ans.max(count + prev);
            prev = count;
            count = 0;
        }
        ans.max(count + prev) - 1
    }
}

=======

        let mut max = 0;
        let mut cnt = 0;
        let mut cnt1 = 0;
        for i in nums {
            if i == 1 {
                cnt1 += 1;
                cnt += 1;
            } else {
                max = max.max(cnt);
                cnt = cnt1;
                cnt1 = 0;
            }
        }
        max.max(cnt)
    }
}

=======

        let mut max = 0;
        let mut max_zero = 0;
        let mut count = 0;
        for i in 0..nums.len() {
            if nums[i] == 1 {
                count += 1;
            } else {
                max_zero = max_zero.max(count);
                count = 0;
            }
        }
        max_zero.max(count)
