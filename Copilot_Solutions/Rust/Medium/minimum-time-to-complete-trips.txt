Synthesizing 10/10 solutions

=======

        let mut left = 0;
        let mut right = total_trips as i64 * time.iter().max().unwrap() as i64;
        while left < right {
            let mid = left + (right - left) / 2;
            let mut trips = 0;
            for t in time {
                trips += mid / t as i64;
            }
            if trips < total_trips as i64 {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left
    }
}

=======

        let mut l = 0;
        let mut r = 1_000_000_000_000_000_000;
        while l < r {
            let m = (l + r) / 2;
            let mut trips = 0;
            for t in time.iter() {
                trips += m / *t as i64;
            }
            if trips >= total_trips as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut l = 0;
        let mut r = 1_000_000_000_000_000_000;
        while l < r {
            let m = (l + r) / 2;
            let mut trips = 0;
            for t in time.iter() {
                trips += m / *t as i64;
            }
            if trips >= total_trips as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l as i64

=======

        let mut left = 0;
        let mut right = 1_000_000_000i64;
        while left < right {
            let mid = (left + right) / 2;
            let mut trips = 0;
            for t in &time {
                trips += mid / (*t as i64);
            }
            if trips < total_trips as i64 {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left

=======

        let (mut left, mut right) = (0, 1_000_000_000i64);
        while left < right {
            let mid = (left + right) / 2;
            let mut trips = 0;
            for &t in &time {
                trips += mid / t as i64;
            }
            if trips >= total_trips as i64 {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        let mut l = 0;
        let mut r = 1_000_000_000i64;
        while l < r {
            let m = l + (r - l) / 2;
            let mut cnt = 0;
            for &t in &time {
                cnt += m / t as i64;
                if cnt >= total_trips as i64 {
                    break;
                }
            }
            if cnt >= total_trips as i64 {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let mut total_trips = total_trips as i64;
        let mut time = time;
        time.sort();
        let mut left = 0;
        let mut right = *time.last().unwrap() as i64 * total_trips;
        while left < right {
            let mid = left + (right - left) / 2;
            let mut count = 0;
            for t in time.iter() {
                count += mid / *t as i64;
                if count >= total_trips {
                    break;
                }
            }
            if count >= total_trips {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        let mut l = 0;
        let mut r = 1_000_000_000_i64;
        let mut ans = r;
        while l <= r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            for &v in &time {
                sum += mid / v as i64;
            }
            if sum >= total_trips as i64 {
                ans = ans.min(mid);
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        ans
    }
}

=======

        let mut lo = 0;
        let mut hi = 1_000_000_000;
        while lo < hi {
            let mid = (lo + hi) / 2;
            if Self::check(&time, mid, total_trips) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo as i64
    }
    
    fn check(time: &[i32], t: i32, total_trips: i32) -> bool {
        let mut trips = 0;
        for &t1 in time {
            trips += t / t1;
            if trips >= total_trips {
                return true;
            }
        }
        false

=======

        let n = time.len();
        let mut trips = vec![0; n];
        let mut l = 0;
        let mut r = 1_000_000_000;
        while l + 1 < r {
            let m = (l + r) / 2;
            let mut sum = 0;
            for i in 0..n {
                sum += (m / time[i] as i64) as i32;
            }
            if sum >= total_trips {
                r = m;
            } else {
                l = m;
            }
        }
        r as i64
