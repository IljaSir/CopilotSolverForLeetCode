Synthesizing 9/10 solutions

=======

        let mut nums = nums;
        let mut score = 0;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                i += 1;
                continue;
            }
            let mut min = nums[i];
            let mut min_index = i;
            for j in i..nums.len() {
                if nums[j] == 0 {
                    continue;
                }
                if nums[j] < min {
                    min = nums[j];
                    min_index = j;
                }
            }
            score += min as i64;
            nums[min_index] = 0;
            if min_index > 0 {
                nums[min_index - 1] = 0;
            }
            if min_index < nums.len() - 1 {
                nums[min_index + 1] = 0;
            }
        }
        score
    }
}

=======

        let mut nums = nums;
        let mut score = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut min = i;
            for j in i..nums.len() {
                if nums[j] < nums[min] {
                    min = j;
                }
            }
            score += nums[min] as i64;
            if min > 0 {
                nums[min - 1] = 0;
            }
            if min < nums.len() - 1 {
                nums[min + 1] = 0;
            }
            nums[min] = 0;
            i = min + 1;
        }
        score
    }
}

=======

        let mut nums = nums;
        let mut score = 0i64;
        let mut i = 0usize;
        while i < nums.len() {
            if nums[i] == -1 {
                i += 1;
                continue;
            }
            let mut min = nums[i];
            let mut min_i = i;
            let mut j = i + 1;
            while j < nums.len() {
                if nums[j] != -1 && nums[j] < min {
                    min = nums[j];
                    min_i = j;
                }
                j += 1;
            }
            score += min as i64;
            nums[min_i] = -1;
            if min_i > 0 {
                nums[min_i - 1] = -1;
            }
            if min_i < nums.len() - 1 {
                nums[min_i + 1] = -1;
            }
        }
        score
    }
}

=======

        let mut nums = nums;
        let mut score = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut min = i;
            for j in i..nums.len() {
                if nums[j] < nums[min] {
                    min = j;
                }
            }
            score += nums[min] as i64;
            nums[min] = 0;
            if min > 0 {
                nums[min - 1] = 0;
            }
            if min < nums.len() - 1 {
                nums[min + 1] = 0;
            }
            i = min + 1;
        }
        score
    }
}

=======

        let mut nums = nums;
        let mut score = 0;
        let mut marked = vec![false; nums.len()];
        loop {
            let mut min = std::i32::MAX;
            let mut index = 0;
            for i in 0..nums.len() {
                if !marked[i] && nums[i] < min {
                    min = nums[i];
                    index = i;
                }
            }
            if min == std::i32::MAX {
                break;
            }
            marked[index] = true;
            if index > 0 {
                marked[index - 1] = true;
            }
            if index + 1 < nums.len() {
                marked[index + 1] = true;
            }
            score += min as i64;
        }
        score
    }
}

=======

        let mut score = 0;
        let mut nums = nums;
        let mut i = 0;
        while i < nums.len() {
            if nums[i] > 0 {
                let mut min = nums[i];
                let mut min_index = i;
                if i > 0 && nums[i - 1] > 0 && nums[i - 1] < min {
                    min = nums[i - 1];
                    min_index = i - 1;
                }
                if i < nums.len() - 1 && nums[i + 1] > 0 && nums[i + 1] < min {
                    min = nums[i + 1];
                    min_index = i + 1;
                }
                score += min as i64;
                nums[min_index] = -1;
                if min_index > 0 {
                    nums[min_index - 1] = -1;
                }
                if min_index < nums.len() - 1 {
                    nums[min_index + 1] = -1;
                }
            }
            i += 1;
        }
        score

=======

        let mut nums = nums;
        let mut score = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut min = (i32::MAX, i32::MAX);
            for j in 0..nums.len() {
                if nums[j] < min.0 && nums[j] != -1 {
                    min = (nums[j], j as i32);
                }
            }
            if min.0 == i32::MAX {
                break;
            }
            score += min.0 as i64;
            let left = min.1 - 1;
            let right = min.1 + 1;
            if left >= 0 {
                nums[left as usize] = -1;
            }
            nums[min.1 as usize] = -1;
            if right < nums.len() as i32 {
                nums[right as usize] = -1;
            }
            i += 3;
        }
        score
    }
}

=======

        let mut nums = nums;
        let mut score = 0;
        let mut marked = vec![false; nums.len()];
        while marked.iter().any(|&x| !x) {
            let mut min = i32::max_value();
            let mut min_index = 0;
            for i in 0..nums.len() {
                if !marked[i] && nums[i] < min {
                    min = nums[i];
                    min_index = i;
                }
            }
            score += min as i64;
            marked[min_index] = true;
            if min_index > 0 {
                marked[min_index - 1] = true;
            }
            if min_index < nums.len() - 1 {
                marked[min_index + 1] = true;
            }
        }
        score

=======

        let mut nums = nums;
        let mut score = 0;
        let mut i = 0;
        while i < nums.len() {
            let mut min = (i32::max_value(), i);
            for j in i..nums.len() {
                if nums[j] < min.0 {
                    min = (nums[j], j);
                }
            }
            score += min.0 as i64;
            nums[min.1] = i32::max_value();
            if min.1 > 0 {
                nums[min.1 - 1] = i32::max_value();
            }
            if min.1 < nums.len() - 1 {
                nums[min.1 + 1] = i32::max_value();
            }
            i = min.1 + 1;
        }
        score
