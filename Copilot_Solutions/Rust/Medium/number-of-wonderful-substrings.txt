Synthesizing 10/10 solutions (Duplicates hidden)

=======

        let mut count = vec![1; 1024];
        let mut mask = 0;
        let mut ans = 0;
        for c in word.chars() {
            mask ^= 1 << (c as u8 - b'a');
            ans += count[mask];
            for i in 0..10 {
                ans += count[mask ^ (1 << i)];
            }
            count[mask] += 1;
        }
        ans
    }
}

=======

        let mut dp = vec![1; 1024];
        let mut mask = 0;
        let mut ans = 0;
        for c in word.chars() {
            mask ^= 1 << (c as u8 - b'a');
            ans += dp[mask];
            for i in 0..10 {
                ans += dp[mask ^ (1 << i)];
            }
            dp[mask] += 1;
        }
        ans

=======

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, 1);
        let mut mask = 0;
        for c in word.chars() {
            mask ^= 1 << (c as u8 - 'a' as u8);
            res += map.get(&mask).unwrap_or(&0);
            for i in 0..10 {
                res += map.get(&(mask ^ (1 << i))).unwrap_or(&0);
            }
            *map.entry(mask).or_insert(0) += 1;
        }
        res

=======

        let mut count = vec![1; 1024];
        let mut mask = 0;
        let mut res = 0;
        for c in word.chars() {
            mask ^= 1 << (c as usize - 'a' as usize);
            res += count[mask];
            for i in 0..10 {
                res += count[mask ^ (1 << i)];
            }
            count[mask] += 1;
        }
        res

=======

        let mut mask = 0;
        let mut count = vec![1; 1024];
        let mut ans = 0;
        for c in word.chars() {
            mask ^= 1 << (c as usize - 'a' as usize);
            ans += count[mask];
            for i in 0..10 {
                ans += count[mask ^ (1 << i)];
            }
            count[mask] += 1;
        }
        ans

=======

        let mut dp = vec![0; 1024];
        let mut mask = 0;
        dp[0] = 1;
        let mut res = 0;
        for ch in word.chars() {
            mask ^= 1 << (ch as u8 - b'a');
            res += dp[mask];
            for i in 0..10 {
                res += dp[mask ^ (1 << i)];
            }
            dp[mask] += 1;
        }
        res

=======

        let mut res = 0;
        let mut mask = 0;
        let mut map = [0; 1024];
        map[0] = 1;
        for c in word.chars() {
            mask ^= 1 << (c as u8 - b'a');
            res += map[mask] as i64;
            for i in 0..10 {
                res += map[mask ^ (1 << i)] as i64;
            }
            map[mask] += 1;
        }
        res

=======

        
    }
}
