Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut map = std::collections::HashMap::new();
        for &a in &nums1 {
            for &b in &nums2 {
                *map.entry(a + b).or_insert(0) += 1;
            }
        }
        let mut ans = 0;
        for &c in &nums3 {
            for &d in &nums4 {
                if let Some(v) = map.get(&-(c + d)) {
                    ans += v;
                }
            }
        }
        ans

=======
Suggestion 2

        let mut map: HashMap<i32, i32> = HashMap::new();
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                let sum = nums1[i] + nums2[j];
                let count = map.entry(sum).or_insert(0);
                *count += 1;
            }
        }
        let mut ans = 0;
        for i in 0..nums3.len() {
            for j in 0..nums4.len() {
                let sum = nums3[i] + nums4[j];
                if let Some(c) = map.get(&(-sum)) {
                    ans += c;
                }
            }
        }
        ans

=======
Suggestion 3

        let mut map: std::collections::HashMap<i32, i32> = std::collections::HashMap::new();
        for i in nums1 {
            for j in &nums2 {
                *map.entry(i + j).or_insert(0) += 1;
            }
        }
        let mut res = 0;
        for i in &nums3 {
            for j in &nums4 {
                res += map.get(&(0 - i - j)).unwrap_or(&0);
            }
        }
        res
    }
}

=======
Suggestion 4

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in nums1.iter() {
            for j in nums2.iter() {
                *map.entry(i + j).or_insert(0) += 1;
            }
        }
        for i in nums3.iter() {
            for j in nums4.iter() {
                if let Some(v) = map.get(&(-i - j)) {
                    count += v;
                }
            }
        }
        count
    }
}

=======
Suggestion 5

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        for i in nums1.iter() {
            for j in nums2.iter() {
                *map.entry(i + j).or_insert(0) += 1;
            }
        }
        for i in nums3.iter() {
            for j in nums4.iter() {
                if let Some(k) = map.get(&(0 - i - j)) {
                    count += k;
                }
            }
        }
        count

=======
Suggestion 6

        let mut res = 0;
        let mut map = std::collections::HashMap::new();
        for &n1 in &nums1 {
            for &n2 in &nums2 {
                *map.entry(n1 + n2).or_insert(0) += 1;
            }
        }
        for &n3 in &nums3 {
            for &n4 in &nums4 {
                if let Some(&v) = map.get(&(0 - n3 - n4)) {
                    res += v;
                }
            }
        }
        res

=======
Suggestion 7

        let mut m = std::collections::HashMap::new();
        let mut ans = 0;
        for &a in nums1.iter() {
            for &b in nums2.iter() {
                *m.entry(a + b).or_insert(0) += 1;
            }
        }
        for &c in nums3.iter() {
            for &d in nums4.iter() {
                if let Some(v) = m.get(&(0 - c - d)) {
                    ans += v;
                }
            }
        }
        ans

=======
Suggestion 8

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                let sum = nums1[i] + nums2[j];
                *map.entry(sum).or_insert(0) += 1;
            }
        }
        for i in 0..nums3.len() {
            for j in 0..nums4.len() {
                let sum = nums3[i] + nums4[j];
                if let Some(v) = map.get(&(-sum)) {
                    sum += v;
                }
            }
        }
        sum

=======
Suggestion 9

        let mut count = 0;
        let mut map = std::collections::HashMap::new();
        
        for i in nums1.iter() {
            for j in nums2.iter() {
                let sum = i + j;
                *map.entry(sum).or_insert(0) += 1;
            }
        }
        
        for i in nums3.iter() {
            for j in nums4.iter() {
                let sum = i + j;
                if let Some(val) = map.get(&(-sum)) {
                    count += val;
                }
            }
        }
        
        count

=======
Suggestion 10

        let mut sum = 0;
        let mut sum_map = std::collections::HashMap::new();
        for i in 0..nums1.len() {
            for j in 0..nums2.len() {
                let sum = nums1[i] + nums2[j];
                let count = sum_map.entry(sum).or_insert(0);
                *count += 1;
            }
        }
        for i in 0..nums3.len() {
            for j in 0..nums4.len() {
                let sum = -(nums3[i] + nums4[j]);
                if let Some(count) = sum_map.get(&sum) {
                    sum += count;
                }
            }
        }
        sum
