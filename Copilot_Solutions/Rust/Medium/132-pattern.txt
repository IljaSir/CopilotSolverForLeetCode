Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut stack = vec![];
        let mut k = std::i32::MIN;
        for i in (0..nums.len()).rev() {
            if nums[i] < k {
                return true;
            }
            while let Some(&top) = stack.last() {
                if nums[i] > top {
                    k = top;
                    break;
                } else {
                    stack.pop();
                }
            }
            stack.push(nums[i]);
        }
        false
    }
}

=======
Suggestion 2

        let n = nums.len();
        if n < 3 {
            return false;
        }
        let mut min = vec![0; n];
        min[0] = nums[0];
        for i in 1..n {
            min[i] = min[i - 1].min(nums[i]);
        }
        let mut stack = Vec::new();
        for i in (0..n).rev() {
            if nums[i] > min[i] {
                while !stack.is_empty() && stack[stack.len() - 1] <= min[i] {
                    stack.pop();
                }
                if !stack.is_empty() && stack[stack.len() - 1] < nums[i] {
                    return true;
                }
                stack.push(nums[i]);
            }
        }
        false

=======
Suggestion 3

        let n = nums.len();
        if n < 3 {
            return false;
        }
        let mut stack = vec![];
        let mut k = std::i32::MIN;
        for i in (0..n).rev() {
            if nums[i] < k {
                return true;
            }
            while let Some(&top) = stack.last() {
                if nums[i] > top {
                    k = top;
                    stack.pop();
                } else {
                    break;
                }
            }
            stack.push(nums[i]);
        }
        false

=======
Suggestion 4

        let mut stack = Vec::new();
        let mut min = std::i32::MAX;
        for i in (0..nums.len()).rev() {
            if nums[i] < min {
                min = nums[i];
            } else if nums[i] > min {
                while let Some(&top) = stack.last() {
                    if top < nums[i] {
                        return true;
                    }
                    stack.pop();
                }
                stack.push(min);
                stack.push(nums[i]);
            }
        }
        false

=======
Suggestion 5

        let n = nums.len();
        if n < 3 {
            return false;
        }

        let mut min = vec![0; n];
        min[0] = nums[0];
        for i in 1..n {
            min[i] = min[i - 1].min(nums[i]);
        }

        let mut stack = vec![];
        for j in (0..n).rev() {
            if nums[j] > min[j] {
                while !stack.is_empty() && stack[stack.len() - 1] <= min[j] {
                    stack.pop();
                }
                if !stack.is_empty() && stack[stack.len() - 1] < nums[j] {
                    return true;
                }
                stack.push(nums[j]);
            }
        }
        false

=======
Suggestion 6

        let mut stack = Vec::new();
        let mut third = i32::MIN;
        for i in (0..nums.len()).rev() {
            if nums[i] < third {
                return true;
            }
            while let Some(&top) = stack.last() {
                if nums[i] > top {
                    third = top;
                    break;
                }
                stack.pop();
            }
            stack.push(nums[i]);
        }
        false
    }
}

=======
Suggestion 7

        let mut stack: Vec<i32> = vec![];
        let mut min = std::i32::MAX;
        for i in (0..nums.len()).rev() {
            if nums[i] < min {
                min = nums[i];
            } else if nums[i] > min {
                while stack.len() > 0 && stack[stack.len() - 1] <= min {
                    stack.pop();
                }
                if stack.len() > 0 && stack[stack.len() - 1] < nums[i] {
                    return true;
                }
                stack.push(nums[i]);
            }
        }
        false
    }
}

=======
Suggestion 8

        let mut stack = Vec::new();
        let mut min = std::i32::MAX;
        for &num in nums.iter().rev() {
            if num < min {
                min = num;
            } else if num > min {
                while let Some(&top) = stack.last() {
                    if top < num {
                        return true;
                    }
                    stack.pop();
                }
                stack.push(num);
            }
        }
        false
    }
}

=======
Suggestion 9

        let mut min = std::i32::MAX;
        let mut stack = vec![];
        for &num in nums.iter().rev() {
            if num > min {
                while let Some(&top) = stack.last() {
                    if top < num {
                        break;
                    }
                    stack.pop();
                }
                if let Some(&top) = stack.last() {
                    if top > num {
                        return true;
                    }
                }
            }
            min = min.min(num);
            stack.push(num);
        }
        false
    }
}

=======
Suggestion 10

        let mut stack = Vec::new();
        let mut min = std::i32::MAX;
        for i in (0..nums.len()).rev() {
            let n = nums[i];
            if n < min {
                min = n;
            } else if n > min {
                while !stack.is_empty() && stack[stack.len()-1] <= min {
                    stack.pop();
                }
                if !stack.is_empty() && stack[stack.len()-1] < n {
                    return true;
                }
                stack.push(n);
            }
        }
        false
