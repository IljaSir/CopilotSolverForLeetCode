Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[0].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut res = true;
        res &= Self::dfs(grid, i + 1, j);
        res &= Self::dfs(grid, i - 1, j);
        res &= Self::dfs(grid, i, j + 1);
        res &= Self::dfs(grid, i, j - 1);
        res

=======

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || j == 0 || i == grid.len() - 1 || j == grid[0].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut res = true;
        for &(x, y) in &[(0, 1), (1, 0), (-1, 0), (0, -1)] {
            res = res && Self::dfs(grid, (i as i32 + x) as usize, (j as i32 + y) as usize);
        }
        res

=======

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[i].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut res = true;
        res &= Self::dfs(grid, i - 1, j);
        res &= Self::dfs(grid, i + 1, j);
        res &= Self::dfs(grid, i, j - 1);
        res &= Self::dfs(grid, i, j + 1);
        res

=======

        let mut grid = grid;
        let mut count = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        count += 1;
                    }
                }
            }
        }
        count
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[i].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut result = true;
        if i > 0 {
            result = result && Self::dfs(grid, i - 1, j);
        }
        if i < grid.len() - 1 {
            result = result && Self::dfs(grid, i + 1, j);
        }
        if j > 0 {
            result = result && Self::dfs(grid, i, j - 1);
        }
        if j < grid[i].len() - 1 {
            result = result && Self::dfs(grid, i, j + 1);
        }
        result

=======

        let mut grid = grid;
        let mut cnt = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        cnt += 1;
                    }
                }
            }
        }
        cnt
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[0].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut ret = true;
        if i > 0 {
            ret &= Self::dfs(grid, i - 1, j);
        }
        if i < grid.len() - 1 {
            ret &= Self::dfs(grid, i + 1, j);
        }
        if j > 0 {
            ret &= Self::dfs(grid, i, j - 1);
        }
        if j < grid[0].len() - 1 {
            ret &= Self::dfs(grid, i, j + 1);
        }
        ret

=======

        let mut grid = grid;
        let mut cnt = 0;
        for i in 0..grid.len() {
            for j in 0..grid[0].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        cnt += 1;
                    }
                }
            }
        }
        cnt
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[0].len() - 1 {
            return false;
        }
        if grid[i][j] == 1 {
            return true;
        }
        grid[i][j] = 1;
        let mut ret = true;
        if i > 0 {
            ret &= Self::dfs(grid, i - 1, j);
        }
        if i < grid.len() - 1 {
            ret &= Self::dfs(grid, i + 1, j);
        }
        if j > 0 {
            ret &= Self::dfs(grid, i, j - 1);
        }
        if j < grid[0].len() - 1 {
            ret &= Self::dfs(grid, i, j + 1);
        }
        ret
    }
}

=======

        let mut grid = grid;
        let mut ans = 0;
        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        ans += 1;
                    }
                }
            }
        }
        ans
    }
    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || j == 0 || i == grid.len() - 1 || j == grid[i].len() - 1 {
            return false;
        }
        grid[i][j] = 1;
        let mut ans = true;
        if i > 0 && grid[i - 1][j] == 0 {
            ans &= Self::dfs(grid, i - 1, j);
        }
        if j > 0 && grid[i][j - 1] == 0 {
            ans &= Self::dfs(grid, i, j - 1);
        }
        if i < grid.len() - 1 && grid[i + 1][j] == 0 {
            ans &= Self::dfs(grid, i + 1, j);
        }
        if j < grid[i].len() - 1 && grid[i][j + 1] == 0 {
            ans &= Self::dfs(grid, i, j + 1);
        }
        ans

=======

        let mut grid = grid;
        let mut count = 0;

        for i in 0..grid.len() {
            for j in 0..grid[i].len() {
                if grid[i][j] == 0 {
                    if Self::dfs(&mut grid, i, j) {
                        count += 1;
                    }
                }
            }
        }

        count
    }

    fn dfs(grid: &mut Vec<Vec<i32>>, i: usize, j: usize) -> bool {
        if i == 0 || i == grid.len() - 1 || j == 0 || j == grid[i].len() - 1 {
            return false;
        }

        if grid[i][j] == 1 {
            return true;
        }

        grid[i][j] = 1;

        let mut ret = true;

        for (x, y) in &[(1, 0), (-1, 0), (0, 1), (0, -1)] {
            let x = i as i32 + x;
            let y = j as i32 + y;

            if x < 0 || y < 0 || x >= grid.len() as i32 || y >= grid[i].len() as i32 {
                continue;
            }

            if grid[x as usize][y as usize] == 0 {
                ret &= Self::dfs(grid, x as usize, y as usize);
            }
        }

        ret

=======

        let mut count = 0;
        let mut grid = grid;
        let (n, m) = (grid.len(), grid[0].len());
        for i in 0..n {
            for j in 0..m {
                if grid[i][j] == 0 && Self::dfs(i, j, &mut grid) {
                    count += 1;
                }
            }
        }
        count
    }

    fn dfs(x: usize, y: usize, grid: &mut Vec<Vec<i32>>) -> bool {
        let (n, m) = (grid.len(), grid[0].len());
        if x < 0 || x >= n || y < 0 || y >= m {
            return false;
        }
        if grid[x][y] == 1 {
            return true;
        }
        grid[x][y] = 1;
        let mut res = true;
        for (dx, dy) in vec![(1, 0), (0, 1), (-1, 0), (0, -1)] {
            let nx = x as i32 + dx;
            let ny = y as i32 + dy;
            if nx >= 0 && nx < n as i32 && ny >= 0 && ny < m as i32 {
                res &= Self::dfs(nx as usize, ny as usize, grid);
            }
        }
        res

=======

        
    }
}
