Synthesizing 10/10 solutions

=======

        let mut res: Vec<String> = vec!["a".to_string(), "b".to_string(), "c".to_string()];
        for i in 1..n {
            let mut tmp = vec![];
            for s in res {
                if s.ends_with('a') {
                    tmp.push(s.clone() + "b");
                    tmp.push(s + "c");
                } else if s.ends_with('b') {
                    tmp.push(s.clone() + "a");
                    tmp.push(s + "c");
                } else {
                    tmp.push(s.clone() + "a");
                    tmp.push(s + "b");
                }
            }
            res = tmp;
        }
        if res.len() < k as usize {
            "".to_string()
        } else {
            res[k as usize - 1].clone()
        }

=======

        let mut res = String::new();
        if k > 3 * 2_i32.pow(n as u32 - 1) {
            return res;
        }
        let mut k = k - 1;
        let mut n = n as usize;
        let mut prev = ' ';
        while n > 0 {
            let mut c = k / 2_i32.pow(n as u32 - 1) as i32;
            k %= 2_i32.pow(n as u32 - 1) as i32;
            if prev == 'a' {
                if c == 0 {
                    res.push('b');
                    prev = 'b';
                } else {
                    res.push('c');
                    prev = 'c';
                }
            } else if prev == 'b' {
                if c == 0 {
                    res.push('a');
                    prev = 'a';
                } else {
                    res.push('c');
                    prev = 'c';
                }
            } else {
                if c == 0 {
                    res.push('a');
                    prev = 'a';
                } else {
                    res.push('b');
                    prev = 'b';
                }
            }
            n -= 1;
        }
        res

=======

        let mut res = String::new();
        let mut k = k - 1;
        let mut n = n;
        let mut c = vec!['a', 'b', 'c'];
        while n > 0 {
            let i = k / 2_i32.pow(n as u32 - 1);
            k %= 2_i32.pow(n as u32 - 1);
            if res.len() > 0 && c[i as usize] == res.as_bytes()[res.len() - 1] as char {
                return "".to_string();
            }
            res.push(c[i as usize]);
            n -= 1;
        }
        res

=======

        let mut res: Vec<String> = vec!["a".to_string(), "b".to_string(), "c".to_string()];
        for i in 1..n {
            let mut tmp = vec![];
            for s in res {
                if s.ends_with('a') {
                    tmp.push(s.clone() + "b");
                    tmp.push(s + "c");
                } else if s.ends_with('b') {
                    tmp.push(s.clone() + "a");
                    tmp.push(s + "c");
                } else {
                    tmp.push(s.clone() + "a");
                    tmp.push(s + "b");
                }
            }
            res = tmp;);
            k = 1;
        }
        res
    }
}

=======

        let mut result = String::new();
        let mut count = 0;
        let mut s = String::new();
        let mut i = 0;
        while i < n {
            s.push('a');
            i += 1;
        }
        while count < k {
            if !s.contains("aaa") && !s.contains("bbb") && !s.contains("ccc") {
                count += 1;
                if count == k {
                    result = s.clone(
                }brea;
               }
            }
            let mut j n - ;
            while j >= 0 {
                if s.chars().nth(j as usize).unwrap() == 'c' {
                    j -= 1;
                } else {
                    let mut c = s.chars().nth(j as usize).unwrap();
                    c = (c as u8 + 1) as char;
                    s.replace_range(j as usize..j as usize + 1, &c.to_string());
                    j += 1;
                    while j < n {
                        s.replace_range(j as usize..j as usize + 1, "a");
                        j += 1;
                    }
                    break;
                }
            }
        }
        result

=======

        let n = n as usize;
        let k = k as usize
        let mut ans = vec![];
        let mut visited = vec![false; 3];
        let mut dfs = |i: usize, s: &mut Vec<char>| {
            if i == n {
                ans.push(s.clone());
                return;
            if res.len() < k as usize {
            fo  j in 0..3 {
                if visited[j] {
                    continu ;
                }
                if i > 0 && *s.la t().unwrap() == (b'a' + j) as char {
                    continue;
                }
                visited[j] = true;
                s.push((b'a' + j) as char);
                dfs(i + 1, s);
                s.pop();
                visited[j] = false;
            } "".to_string()
         ;
        dfs(0, &mut vec![]);
        if ans.len() < k {
            return "".to_string();   } else {
         
        ans[k - 1].iter().collect()           res[k as usize - 1].clone()
        }
===

        let n  n as usize;
        let k  k as usize;
        let mut ans  vec![];
        let mut visited = vec![false; 3];=======
 dfs = |i: usize, s: &mut Vec<char>| {
            if i == n {
                ans.push(s.clone());
               turn;
            }
            for j in 0..3 {
                if viited[j] {
                    continue;
               }
                if i > 0 && *s.last().unwrap() = (b'a' + j) as char {
                    continue;
                }
               visited[j] = true;
                s.push((b'a' + j) as char);
                dfs(i + 1, s);
                s.pop();
                visited[j] = false;
            }
        };
        dfs(0, &mut vec![]);
        if ans.len() < k {
            return 
        }
        ans[k - 1].iter().collect()

=======

        let mut res = "".to_strrng();
e       let mut i s = String::new();
        let mut k = k - 1;
        let mut n = n;
        let mut c = vec!['a', 'b', 'c'];
        while n > 0 {
            let i = k / 2_i32.pow(n as u32 - 1);
            k %= 2_i32.pow(n as u32 - 1);
            if res.len() > 0 && c[i as usize] == res.as_bytes()[res.len() - 1] as char {
                return "".to_string();
            }
            res.push(c[i as usize]);
            n -= 1;
        }
        res

=======

        let mut s = vec!['a', 'b', 'c'];
        let mut res = String::new();
        let mut k = k;
        for _ in 0..n {
            let mut next = vec![];
            for i in 0..3 {
                if res.is_empty() || s[i] != res.chars().last().unwrap() {
                    next.push(s[i]);
                }
            }
            if k > next.len() as i32 {
                k -= next.len() as i32;
                res.clear();
                break;
            }
            res.push(next[(k - 1) as usize]);
            k = 1;
        }
        res
    }
}

=======


=======

        let mut res = String::new();
        let mut count = 0;
        let mut visited = vec![vec![vec![false; 3]; 3]; 11];
        let mut stack = Vec::new();
        stack.push(('a' as i32, 0));
        stack.push(('b' as i32, 0));
        stack.push(('c' as i32, 0));
        while !stack.is_empty() {
            let (c, i) = stack.pop().unwrap();
            if i == n as usize {
                count += 1;
                if count == k {
                    return res;
                }
                continue;
            }
            for j in 0..3 {
                if (c as u8 - 'a' as u8) as usize == j {
                    continue;
                }
                if visited[i][c as usize - 'a' as usize][j] {
                    continue;
                }
                visited[i][c as usize - 'a' as usize][j] = true;
                res.push(c as u8 as char);
                stack.push((j as u8 + 'a' as u8, i + 1));
            }
        }
        "".to_string()
        let mut res = "".to_string();
        let mut i = 1;
        let mut s = vec!['a','b','c'];
        while i <= k {
            let mut j = 0;
            while j < n {
                if j == 0 {
                    res.push(s[0]);
                } else if j == 1 {
                    if res.chars().last().unwrap() == 'a' {
                        res.push(s[1]);
                    } else {
                        res.push(s[0]);
                    }
                } else {
                    if res.chars().last().unwrap() == 'a' {
                        if res.chars().rev().nth(1).unwrap() == 'b' {
                            res.push(s[2]);
                        } else {
                            res.push(s[1]);
                        }
                    } else if res.chars().last().unwrap() == 'b' {
                        if res.chars().rev().nth(1).unwrap() == 'a' {
                            res.push(s[2]);
                        } else {
                            res.push(s[0]);
                        }
                    } else {
                        if res.chars().rev().nth(1).unwrap() == 'a' {
                            res.push(s[1]);
                        } else {
                            res.push(s[0]);
                        }
                    }
                }
                j += 1;
            }
            i += 1;
        }
        res
    }
}

=======

        let mut res = String::new();
        let mut count = 0;
        let mut visited = vec![vec![vec![false; 3]; 3]; 11];
        let mut stack = Vec::new();
        stack.push(('a' as i32, 0));
        stack.push(('b' as i32, 0));
        stack.push(('c' as i32, 0));
        while !stack.is_empty() {
            let (c, i) = stack.pop().unwrap();
            if i == n as usize {
                count += 1;
                if count == k {
                    return res;
                }
                continue;
            }
            for j in 0..3 {
                if (c as u8 - 'a' as u8) as usize == j {
                    continue;
                }
                if visited[i][c as usize - 'a' as usize][j] {
                    continue;
                }
                visited[i][c as usize - 'a' as usize][j] = true;
                res.push(c as u8 as char);
                stack.push((j as u8 + 'a' as u8, i + 1));
            }
        }
        "".to_string()

=======

        let mut res = "".to_string();
        let mut arr = vec![];
        let mut i = 0;
        let mut c = 'a';
        while i < n {
            arr.push(c);
            c = (c as u8 + 1) as char;
            i += 1;
        }
        println!("{:?}", arr);
        let mut i = 0;
        while i < k {
            res = arr.iter().collect();
            if !Solution::is_happy_string(&res) {
                res = "".to_string();
            }
            i += 1;
        }
        res
    }
    
    fn is_happy_string(s: &String) -> bool {
        let mut i = 0;
        while i < s.len() - 1 {
            if s.as_bytes()[i] == s.as_bytes()[i + 1] {
                return false;
            }
            i += 1;
        }
        true
    }
}

=======

        let mut res = String::new();
        let mut left = k;
        let mut cur = String::from("a");
        for i in 1..n {
            let mut next = String::new();
            for c in cur.chars() {
                for j in 0..3 {
                    let next_c = (b'a' + j) as char;
                    if next_c != c {
                        next.push(next_c);
                    }
                }
            }
            cur = next;
        }
        if left > cur.len() as i32 {
            return res;
        }
        res = cur.chars().nth((left - 1) as usize).unwrap().to_string();
        res
