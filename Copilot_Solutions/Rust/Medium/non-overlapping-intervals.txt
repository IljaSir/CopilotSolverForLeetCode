Synthesizing 6/10 solutions (Duplicates hidden)

=======
Suggestion 1

        let mut intervals = intervals;
        intervals.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut count = 0;
        let mut end = std::i32::MIN;
        for interval in intervals {
            if interval[0] >= end {
                count += 1;
                end = interval[1];
            }
        }
        (intervals.len() - count) as i32

=======
Suggestion 2

        let mut intervals = intervals;
        intervals.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut count = 0;
        let mut end = std::i32::MIN;
        for i in 0..intervals.len() {
            if intervals[i][0] >= end {
                count += 1;
                end = intervals[i][1];
            }
        }
        (intervals.len() - count) as i32

=======
Suggestion 3

        let mut intervals = intervals;
        intervals.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut count = 0;
        let mut last = std::i32::MIN;
        for interval in intervals {
            if interval[0] >= last {
                count += 1;
                last = interval[1];
            }
        }
        (intervals.len() - count) as i32
    }
}

=======
Suggestion 4

        let mut intervals = intervals;
        intervals.sort_by(|a, b| a[1].cmp(&b[1]));
        let mut cur = std::i32::MIN;
        let mut ans = 0;
        for i in 0..intervals.len() {
            if intervals[i][0] >= cur {
                ans += 1;
                cur = intervals[i][1];
            }
        }
        (intervals.len() - ans) as i32
    }
}

=======
Suggestion 5

        
    }
}
