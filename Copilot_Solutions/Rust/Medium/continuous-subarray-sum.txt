Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, -1);
        for i in 0..nums.len() {
            sum += nums[i];
            if k != 0 {
                sum %= k;
            }
            if let Some(&last) = map.get(&sum) {
                if i as i32 - last > 1 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false
    }
}

=======
Suggestion 2

        let mut map: HashMap<i32, i32> = HashMap::new();
        map.insert(0, -1);
        let mut sum = 0;
        for i in 0..nums.len() {
            sum += nums[i];
            if k != 0 {
                sum %= k;
            }
            if let Some(&prev) = map.get(&sum) {
                if i as i32 - prev >= 2 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false

=======
Suggestion 3

        let n = nums.len();
        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, -1);
        for i in 0..n {
            sum += nums[i];
            if k != 0 {
                sum %= k;
            }
            if let Some(&prev) = map.get(&sum) {
                if i - prev > 1 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false

=======
Suggestion 4

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, -1);
        for (i, &num) in nums.iter().enumerate() {
            sum += num;
            if k != 0 {
                sum %= k;
            }
            if let Some(&prev) = map.get(&sum) {
                if i - prev >= 2 {
                    return true;
                }
            } else {
                map.insert(sum, i);
            }
        }
        false
    }
}

=======
Suggestion 5

        let mut sum = 0;
        let mut map = std::collections::HashMap::new();
        map.insert(0, -1);
        for (idx, &num) in nums.iter().enumerate() {
            sum += num;
            if k != 0 {
                sum %= k;
            }
            if let Some(&prev) = map.get(&sum) {
                if idx - prev > 1 {
                    return true;
                }
            } else {
                map.insert(sum, idx);
            }
        }
        false
    }
}

=======
Suggestion 6

        let mut sum: i32 = 0;
        let mut map: HashMap<i32, i32> = HashMap::new();
        map.insert(0, -1);
        for (i, v) in nums.iter().enumerate() {
            sum += v;
            if k != 0 {
                sum %= k;
            }
            if let Some(&j) = map.get(&sum) {
                if i - j > 1 {
                    return true;
                }
            } else {
                map.insert(sum, i as i32);
            }
        }
        false

=======
Suggestion 7

        let mut memo = vec![0; nums.len()];
        memo[0] = nums[0];
        for i in 1..nums.len() {
            memo[i] = memo[i - 1] + nums[i];
        }
        for i in 0..nums.len() {
            for j in i + 1..nums.len() {
                let sum = memo[j] - memo[i] + nums[i];
                if sum == k || (k != 0 && sum % k == 0) {
                    return true;
                }
            }
        }
        false
    }
}

=======
Suggestion 8

        let mut sum = 0;
        let mut seen = std::collections::HashMap::new();
        for (i, &n) in nums.iter().enumerate() {
            sum += n;
            if k != 0 {
                sum %= k;
            }
            if let Some(&j) = seen.get(&sum) {
                if i - j > 1 {
                    return true;
                }
            } else {
                seen.insert(sum, i);
            }
        }
        false

=======
Suggestion 9

        if nums.len() < 2 { return false; }
        let mut sum = 0;
        let mut mod_map = std::collections::HashMap::new();
        mod_map.insert(0, -1);
        for i in 0..nums.len() {
            sum += nums[i];
            if k != 0 {
                sum %= k;
            }
            if let Some(&prev) = mod_map.get(&sum) {
                if i - prev > 1 {
                    return true;
                }
            } else {
                mod_map.insert(sum, i as i32);
            }
        }
        false
    }
}

=======
Suggestion 10

        let mut acc = 0;
        let mut rem = 0;
        let mut seen = std::collections::HashMap::new();
        for num in nums {
            acc += num;
            if k > 0 {
                rem = acc % k;
            }
            if let Some(&prev) = seen.get(&rem) {
                if prev + 1 < acc {
                    return true;
                }
            } else {
                seen.insert(rem, acc);
            }
        }
        false
    }
}
