Synthesizing 10/10 solutions

=======

        if s.len() < k as usize {
            return false;
        }
        if s.len() == k as usize {
            return true;
        }
        let mut count = vec![0; 26];
        for c in s.chars() {
            count[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut odd = 0;
        for i in 0..26 {
            if count[i] % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k

=======

        if s.len() < k as usize { return false; }
        if s.len() == k as usize { return true; }
        let mut freq = vec![0; 26];
        for c in s.chars() {
            freq[c as usize - 'a' as usize] += 1;
        }
        let mut odd_freq = 0;
        for i in 0..freq.len() {
            if freq[i] % 2 == 1 {
                odd_freq += 1;
            }
        }
        odd_freq <= k

=======

        let mut cnt = vec![0; 26];
        for c in s.chars() {
            cnt[c as usize - 'a' as usize] += 1;
        }
        let mut odd = 0;
        for i in 0..26 {
            if cnt[i] % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k && k <= s.len() as i32

=======

        let mut cnt = vec![0; 26];
        for c in s.chars() {
            cnt[c as usize - 'a' as usize] += 1;
        }
        let mut odd = 0;
        for &c in cnt.iter() {
            odd += c % 2;
        }
        odd <= k && k <= s.len() as i32

=======

        let mut map = [0; 26];
        for c in s.chars() {
            map[(c as u8 - 'a' as u8) as usize] += 1;
        }
        let mut odd = 0;
        for &v in map.iter() {
            if v % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k

=======

        if k as usize > s.len() {
            return false;
        }
        let mut count = vec![0; 26];
        for ch in s.chars() {
            count[ch as usize - 'a' as usize] += 1;
        }
        let mut odd = 0;
        for i in 0..26 {
            if count[i] % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k

=======

        let mut char_count = vec![0; 26];
        for c in s.chars() {
            char_count[c as usize - 'a' as usize] += 1;
        }
        let mut odd_count = 0;
        for i in 0..26 {
            if char_count[i] % 2 == 1 {
                odd_count += 1;
            }
        }
        odd_count <= k

=======

        let mut m: Vec<i32> = vec![0; 26];
        for c in s.chars() {
            m[c as usize - 'a' as usize] += 1;
        }
        let mut odd = 0;
        for i in 0..26 {
            if m[i] % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k && k <= s.len() as i32
    }
}

=======

        let s = s.as_bytes();
        let mut cnt = vec![0; 26];
        for &c in s {
            cnt[(c - b'a') as usize] += 1;
        }
        let mut odd = 0;
        for &c in &cnt {
            if c % 2 == 1 {
                odd += 1;
            }
        }
        odd <= k && k <= s.len() as i32

=======

        let len = s.len();
        let k = k as usize;
        if k > len {
            return false;
        }
        let mut count = [0; 26];
        for c in s.chars() {
            count[c as usize - 'a' as usize] += 1;
        }
        let odd_count = count.iter().filter(|&x| *x % 2 == 1).count();
        odd_count <= k
