Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = left + (right - left) / 2;
            if nums[mid] > nums[right] {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        nums[left]

=======
Suggestion 2

        let mut left = 0;
        let mut right = nums.len() - 1;
        while left < right {
            let mid = (left + right) / 2;
            if nums[mid] > nums[right] {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        nums[left]

=======
Suggestion 3

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let m = l + (r - l) / 2;
            if nums[m] > nums[r] {
                l = m + 1;
            } else {
                r = m;
            }
        }
        nums[l]

=======
Suggestion 4

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let m = l + (r - l) / 2;
            if nums[m] < nums[r] {
                r = m;
            } else {
                l = m + 1;
            }
        }
        nums[l]

=======
Suggestion 5

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let mid = (l + r) / 2;
            if nums[mid] > nums[r] {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        nums[l]

=======
Suggestion 6

        let mut l = 0;
        let mut r = nums.len() - 1;
        while l < r {
            let mid = l + (r - l) / 2;
            if nums[mid] > nums[r] {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        nums[l]

=======
Suggestion 7

        let (mut l, mut r) = (0, nums.len() - 1);
        while l < r {
            let m = (l + r) / 2;
            if nums[m] > nums[r] {
                l = m + 1;
            } else {
                r = m;
            }
        }
        nums[l]

=======
Suggestion 8

        let n = nums.len();
        let mut left = 0;
        let mut right = n - 1;
        while left < right {
            let mid = left + (right - left) / 2;
            if nums[mid] < nums[right] {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        nums[left]
    }
}

=======
Suggestion 9

        let mut start = 0;
        let mut end = nums.len() - 1;
        while start < end {
            let mid = start + (end - start) / 2;
            if nums[mid] < nums[end] {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        nums[start]

=======
Suggestion 10

        let n = nums.len();
        if n == 1 {
            return nums[0];
        }
        if nums[0] < nums[n - 1] {
            return nums[0];
        }
        let mut left = 0;
        let mut right = n - 1;
        while left <= right {
            let mid = left + (right - left) / 2;
            if nums[mid] > nums[mid + 1] {
                return nums[mid + 1];
            }
            if nums[mid - 1] > nums[mid] {
                return nums[mid];
            }
            if nums[mid] > nums[0] {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        0
    }
}
