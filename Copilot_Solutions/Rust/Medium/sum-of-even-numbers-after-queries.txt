Synthesizing 9/10 solutions

=======

        let mut sum = 0;
        let mut res = Vec::new();
        for num in nums.iter() {
            if num % 2 == 0 {
                sum += num;
            }
        }
        for query in queries.iter() {
            let (val, index) = (query[0], query[1] as usize);
            if nums[index] % 2 == 0 {
                sum -= nums[index];
            }
            if (nums[index] + val) % 2 == 0 {
                sum += nums[index] + val;
            }
            res.push(sum);
        }
        res
    }
}

=======

        let mut sum = 0;
        let mut result = vec![];
        for num in nums.iter() {
            if num % 2 == 0 {
                sum += num;
            }
        }
        for query in queries.iter() {
            let val = query[0];
            let index = query[1] as usize;
            if nums[index] % 2 == 0 {
                sum -= nums[index];
            }
            let new_num = nums[index] + val;
            if new_num % 2 == 0 {
                sum += new_num;
            }
            result.push(sum);
        }
        result

=======

        let mut sum = nums.iter().filter(|&x| x % 2 == 0).sum();
        let mut res = Vec::new();
        for query in queries {
            let val = query[0];
            let index = query[1] as usize;
            if nums[index] % 2 == 0 {
                sum -= nums[index];
            }
            nums[index] += val;
            if nums[index] % 2 == 0 {
                sum += nums[index];
            }
            res.push(sum);
        }
        res
    }
}

=======

        let mut res = Vec::new();
        let mut sum = nums.iter().filter(|&&x| x % 2 == 0).sum();
        for query in queries {
            let val = query[0];
            let index = query[1] as usize;
            if nums[index] % 2 == 0 {
                sum -= nums[index];
            }
            nums[index] += val;
            if nums[index] % 2 == 0 {
                sum += nums[index];
            }
            res.push(sum);
        }
        res

=======

        let mut sum = nums.iter().filter(|&&x| x % 2 == 0).sum::<i32>();
        let mut ans = Vec::new();
        for q in queries {
            let val = q[0];
            let idx = q[1] as usize;
            let old = nums[idx];
            let new = old + val;
            if old % 2 == 0 {
                sum -= old;
            }
            if new % 2 == 0 {
                sum += new;
            }
            ans.push(sum);
        }
        ans

=======

        let mut res = Vec::new();
        let mut sum = nums.iter().filter(|&x| x % 2 == 0).sum::<i32>();
        for q in queries {
            let (val, index) = (q[0], q[1] as usize);
            if nums[index] % 2 == 0 {
                sum -= nums[index];
            }
            if (nums[index] + val) % 2 == 0 {
                sum += nums[index] + val;
            }
            res.push(sum);
            nums[index] += val;
        }
        res
    }
}

=======

        let mut res = Vec::with_capacity(queries.len());
        let mut sum = nums.iter().filter(|&&x| x % 2 == 0).sum::<i32>();
        for q in queries {
            let (val, index) = (q[0], q[1] as usize);
            if nums[index] % 2 == 0 {
                if val % 2 == 0 {
                    sum += val;
                } else {
                    sum -= nums[index];
                }
            } else if val % 2 == 1 {
                sum += nums[index] + val;
            }
            res.push(sum);
            nums[index] += val;
        }
        res

=======

        let mut sum = nums.iter().fold(0, |sum, &n| sum + if n % 2 == 0 { n } else { 0 });
        let mut ans = Vec::new();
        for q in queries {
            let val = q[0];
            let idx = q[1] as usize;
            if nums[idx] % 2 == 0 {
                sum -= nums[idx];
            }
            nums[idx] += val;
            if nums[idx] % 2 == 0 {
                sum += nums[idx];
            }
            ans.push(sum);
        }
        ans
    }
}

=======

        
    }
}
