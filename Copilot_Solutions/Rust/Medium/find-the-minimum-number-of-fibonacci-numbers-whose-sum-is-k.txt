Synthesizing 10/10 solutions

=======

        let mut fib = vec![1, 1];
        while fib.last().unwrap() < &k {
            fib.push(fib[fib.len() - 1] + fib[fib.len() - 2]);
        }
        let mut ans = 0;
        let mut k = k as i64;
        for i in (0..fib.len()).rev() {
            if fib[i] <= k {
                ans += 1;
                k -= fib[i];
            }
            if k == 0 {
                break;
            }
        }
        ans

=======

        let mut fib = vec![1, 1];
        while fib.last().unwrap() < &k {
            fib.push(fib[fib.len() - 1] + fib[fib.len() - 2]);
        }
        let mut k = k;
        let mut res = 0;
        while k > 0 {
            if fib.last().unwrap() <= &k {
                k -= fib.pop().unwrap();
                res += 1;
            } else {
                fib.pop();
            }
        }
        res

=======

        let mut fib = vec![1, 1];
        while fib.last().unwrap() < &k {
            fib.push(fib[fib.len() - 1] + fib[fib.len() - 2]);
        }
        let mut k = k;
        let mut ans = 0;
        for i in (0..fib.len()).rev() {
            if k >= fib[i] {
                k -= fib[i];
                ans += 1;
            }
        }
        ans

=======

        let mut fib = vec![1, 1];
        while fib[fib.len() - 1] <= k {
            fib.push(fib[fib.len() - 1] + fib[fib.len() - 2]);
        }
        let mut k = k;
        let mut res = 0;
        while k > 0 {
            let idx = fib.binary_search(&(k as i32)).unwrap_or_else(|x| x);
            let idx = idx - 1;
            k -= fib[idx];
            res += 1;
        }
        res

=======

        let mut f = vec![1, 1];
        let mut i = 2;
        while f[i - 1] + f[i - 2] <= k {
            f.push(f[i - 1] + f[i - 2]);
            i += 1;
        }
        let mut ans = 0;
        let mut k = k;
        for i in (0..f.len()).rev() {
            if k >= f[i] {
                k -= f[i];
                ans += 1;
            }
        }
        ans

=======

        let mut fibs = vec![1, 1];
        let mut n = 1;
        while fibs[n] < k {
            n += 1;
            fibs.push(fibs[n-1] + fibs[n-2]);
        }
        let mut k = k;
        let mut result = 0;
        while k > 0 {
            while fibs[n] > k {
                n -= 1;
            }
            k -= fibs[n];
            result += 1;
        }
        result

=======

        let mut res = 0;
        let mut a = 1;
        let mut b = 1;
        while b <= k {
            res += k / b;
            let tmp = a;
            a = b;
            b = tmp + b;
        }
        res

=======

        let mut a = 1;
        let mut b = 1;
        let mut c = 2;
        let mut fib = vec![a, b];
        while c <= k {
            fib.push(c);
            a = b;
            b = c;
            c = a + b;
        }
        let mut k = k;
        let mut ans = 0;
        for i in (0..fib.len()).rev() {
            if k >= fib[i] {
                k -= fib[i];
                ans += 1;
            }
        }
        ans

=======

        let mut a = 1;
        let mut b = 1;
        let mut c = 0;
        let mut fibs = vec![1];
        while c <= k {
            c = a + b;
            fibs.push(c);
            a = b;
            b = c;
        }
        let mut count = 0;
        let mut k = k;
        for i in (0..fibs.len()).rev() {
            if fibs[i] <= k {
                count += 1;
                k -= fibs[i];
            }
        }
        count

=======

        let mut fib = vec![1,1];
        while fib.last().unwrap() <= &k {
            let l = fib.len();
            fib.push(fib[l-1] + fib[l-2]);
        }
        // println!("{:?}", fib);
        let mut k = k;
        let mut ans = 0;
        while k > 0 {
            let f = fib.iter().rev().find(|&&x| x <= k).unwrap();
            k -= f;
            ans += 1;
        }
        ans
