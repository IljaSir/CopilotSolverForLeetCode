Synthesizing 9/10 solutions

=======

        let mut odd = 0;
        let mut even = 1;
        let mut sum = 0;
        let mut ans = 0;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum % 2 == 1 {
                ans += even;
                odd += 1;
            } else {
                ans += odd;
                even += 1;
            }
            ans %= 1000000007;
        }
        ans
    }
}

=======

        let mut odd = 0;
        let mut even = 1;
        let mut sum = 0;
        let mut ans = 0;
        for num in arr {
            sum += num;
            if sum % 2 == 1 {
                ans += even;
                odd += 1;
            } else {
                ans += odd;
                even += 1;
            }
        }
        ans as i32 % 1000000007
    }
}

=======

        let mut odd = 0;
        let mut even = 1;
        let mut sum = 0;
        let mut ans = 0;
        for i in arr {
            sum += i;
            if sum % 2 == 0 {
                ans += odd;
                even += 1;
            } else {
                ans += even;
                odd += 1;
            }
        }
        (ans % (1e9 as i32 + 7)) as i32

=======

        let mut odd = 0;
        let mut even = 1;
        let mut sum = 0;
        let mut res = 0;
        for num in arr {
            sum += num;
            if sum % 2 == 0 {
                res += odd;
                even += 1;
            } else {
                res += even;
                odd += 1;
            }
        }
        (res % 1000000007) as i32
    }
}

=======

        let mut sum = 0;
        let mut odd = 0;
        let mut even = 1;
        let mut ans = 0;
        let modulo = 1_000_000_007;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum % 2 == 1 {
                odd += 1;
            } else {
                even += 1;
            }
            ans = (ans + odd) % modulo;
            std::mem::swap(&mut odd, &mut even);
        }
        ans

=======

        let mut odd = 0;
        let mut even = 1;
        let mut sum = 0;
        let mut ans = 0;
        let mod_ = 1000000007;
        for i in arr {
            sum += i;
            if sum % 2 == 0 {
                ans += odd;
                ans %= mod_;
                even += 1;
            } else {
                ans += even;
                ans %= mod_;
                odd += 1;
            }
        }
        ans
    }
}

=======

        let mut sum = 0;
        let mut odd = 0;
        let mut even = 1;
        let mut ans = 0;
        let mut modv = 1000000007;
        for i in 0..arr.len() {
            sum += arr[i];
            if sum % 2 == 0 {
                ans += odd;
                even += 1;
            } else {
                ans += even;
                odd += 1;
            }
            ans %= modv;
        }
        ans

=======

        let mut res = 0;
        let mut even = 1;
        let mut odd = 0;
        let mut sum = 0;
        let modu = 1_000_000_007;
        for &x in arr.iter() {
            sum += x;
            if sum % 2 == 0 {
                res += odd;
                even += 1;
            } else {
                res += even;
                odd += 1;
            }
            res %= modu;
        }
        res
    }
}

=======

        
    }
}
