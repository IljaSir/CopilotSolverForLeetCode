Synthesizing 10/10 solutions

=======

        let mut res = vec![];
        for i in 1..=9 {
            let mut n = i;
            for j in i+1..=9 {
                n = n * 10 + j;
                if n >= low && n <= high {
                    res.push(n);
                }
            }
        }
        res.sort();
        res

=======

        let mut res: Vec<i32> = Vec::new();
        for i in 1..=9 {
            let mut num = i;
            let mut j = i + 1;
            while j <= 9 {
                num = num * 10 + j;
                if num >= low && num <= high {
                    res.push(num);
                }
                j += 1;
            }
        }
        res.sort();
        res

=======

        let mut res = Vec::new();
        for i in 1..=9 {
            let mut num = i;
            let mut j = i + 1;
            while j <= 9 && num <= high {
                if num >= low {
                    res.push(num);
                }
                num = num * 10 + j;
                j += 1;
            }
        }
        res.sort();
        res

=======

        let mut res = vec![];
        for i in 1..9 {
            let mut n = i;
            while n <= high {
                if n >= low {
                    res.push(n);
                }
                n = n * 10 + (n % 10) + 1;
            }
        }
        res.sort();
        res

=======

        let mut result = vec![];
        for i in 1..=9 {
            let mut j = i;
            let mut num = j;
            while j < 10 && num <= high {
                if num >= low {
                    result.push(num);
                }
                j += 1;
                num = num * 10 + j;
            }
        }
        result.sort();
        result

=======

        let mut result = Vec::new();
        let mut i = 1;
        let mut j = 1;
        let mut n = 0;
        while i <= 9 {
            n = n * 10 + i;
            if n >= low && n <= high {
                result.push(n);
            }
            i += 1;
            if i > 9 - j {
                j += 1;
                i = j;
                n = 0;
            }
        }
        result.sort();
        result

=======

        let mut digits = vec![];
        let mut i = 1;
        let mut j = 1;
        let mut num = 0;
        while i <= 9 {
            num = num * 10 + i;
            j += 1;
            if j == 10 {
                j = 1;
                i += 1;
            }
            if num >= low && num <= high {
                digits.push(num);
            }
        }
        digits

=======

        let mut ans = vec![];
        let mut cur = 1;
        while cur <= 9 {
            let mut num = cur;
            let mut next = cur + 1;
            while next <= 9 {
                num = num * 10 + next;
                if num >= low && num <= high {
                    ans.push(num);
                }
                next += 1;
            }
            cur += 1;
        }
        ans.sort();
        ans

=======

        let mut low = low;
        let mut high = high;
        let mut result = Vec::new();
        while low < high {
            let mut num = low;
            let mut last_digit = num % 10;
            let mut ok = true;
            while num > 0 {
                let digit = num % 10;
                if digit != last_digit {
                    ok = false;
                    break;
                }
                last_digit = (digit + 1) % 10;
                num /= 10;
            }
            if ok {
                result.push(low);
            }
            low += 1;
        }
        result
    }
}

=======

        let mut res = vec![];
        let mut n = 1;
        let mut m = 1;
        let mut x = 0;
        let mut y = 0;
        while x < high {
            x = x * 10 + n;
            n += 1;
            if n > 9 {
                n = 1;
                m += 1;
            }
            if x >= low && x <= high {
                res.push(x);
            }
        }
        res
