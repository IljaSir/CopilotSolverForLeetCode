Synthesizing 7/10 solutions

=======

        let (n, m) = (nums1.len(), nums2.len());
        let (mut sum1, mut sum2) = (0, 0);
        for i in 0..n {
            sum1 += nums1[i] as i64;
        }
        for i in 0..m {
            sum2 += nums2[i] as i64;
        }
        if sum1 < sum2 {
            return Self::min_operations(nums2, nums1, k);
        }
        if sum1 - sum2 < k as i64 {
            return -1;
        }
        let mut nums1: Vec<i64> = nums1.into_iter().map(|x| x as i64).collect();
        let mut nums2: Vec<i64> = nums2.into_iter().map(|x| x as i64).collect();
        nums1.sort();
        nums2.sort();
        let mut diff: Vec<i64> = Vec::new();
        for i in 0..n {
            diff.push(nums1[i] - 1);
        }
        for i in 0..m {
            diff.push(6 - nums2[i]);
        }
        diff.sort();
        let mut ans = 0;
        for i in 0..(k as usize) {
            ans += diff[i];
        }
        ans as i64

=======

        let k = k as usize;
        let (n1, n2) = (nums1.len(), nums2.len());
        if n1 > n2 {
            return Self::min_operations(nums2, nums1, k as i32) as i64;
        }
        let (sum1, sum2) = (nums1.iter().sum::<i32>(), nums2.iter().sum::<i32>());
        if sum1 > sum2 {
            return Self::min_operations(nums2, nums1, k as i32) as i64;
        }
        let (diff, mut dp) = (sum2 - sum1, vec![vec![0; k + 1]; n1 + 1]);
        let (mut i, mut j) = (0, 0);
        while i < n1 {
            let mut j = 0;
            while j <= k {
                if j > 0 {
                    dp[i + 1][j] = dp[i + 1][j].max(dp[i][j - 1]);
                }
                if j < k {
                    dp[i + 1][j + 1] = dp[i + 1][j + 1].max(dp[i][j] + (nums1[i] as i32 - nums2[j] as i32).abs());
                }
                j += 1;
            }
            i += 1;
        }
        dp[n1][k] as i64

=======

        let n = nums1.len() as i64;
        let k = k as i64;
        let mut sum1 = 0;
        let mut sum2 = 0;
        for i in 0..n {
            sum1 += nums1[i as usize] as i64;
            sum2 += nums2[i as usize] as i64;
        }
        let diff = (sum1 - sum2).abs() as i64;
        if diff > k * 5 {
            return -1;
        }
        let mut cnt = vec![0; 6];
        for i in 0..n {
            cnt[(nums1[i as usize] - nums2[i as usize]).abs() as usize] += 1;
        }
        let mut ans = k;
        let mut cur = 0;
        for i in 1..6 {
            cur += cnt[i];
            if diff >= i as i64 * cur {
                ans = k - cur;
            }
        }
        ans

=======

        let n = nums1.len();
        let mut sum1 = 0;
        let mut sum2 = 0;
        let mut diff = vec![0; 6 * n + 1];
        for i in 0..n {
            sum1 += nums1[i] as i64;
            sum2 += nums2[i] as i64;
            diff[nums1[i] as usize - nums2[i] as usize] += 1;
        }
        if sum1 > sum2 {
            return Self::min_operations(nums2, nums1, k);
        }
        let target = (sum2 - sum1) as usize;
        if target > 6 * n {
            return -1;
        }
        let mut ans = n as i64 + 1;
        let mut cur = 0;
        for i in 0..=6 * n {
            while cur <= 6 * n && i + cur <= target {
                ans = ans.min(cur as i64 + diff[i + cur]);
                cur += 1;
            }
            cur -= 1;
        }
        ans = ans.min(n as i64 + 1);
        if ans > n as i64 {
            -1
        } else {
            ans
        }

=======

        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut nums1_sum = 0;
        let mut nums2_sum = 0;
        for i in 0..nums1.len() {
            nums1_sum += nums1[i];
            nums2_sum += nums2[i];
        }
        let diff = nums1_sum + nums2_sum - k;
        if diff < 0 {
            return -1;
        }
        if diff == 0 {
            return 0;
        }
        let mut i = 0;
        let mut j = nums1.len() - 1;
        let mut res = i64::MAX;
        let mut sum = 0;
        while i < nums1.len() {
            while j >= 0 && (nums1[i] - nums2[j]).abs() <= diff {
                sum += (nums1[i] - nums2[j]).abs();
                j -= 1;
            }
            if sum == diff {
                res = res.min((i + 1) as i64 + (nums1.len() - 1 - j) as i64);
            }
            sum -= nums1[i];
            i += 1;
        }
        if res == i64::MAX {
            return -1;
        }
        res

=======

        let k = k as usize;
        let mut nums1 = nums1;
        let mut nums2 = nums2;
        nums1.sort();
        nums2.sort();
        let mut diff = vec![];
        let mut i = 0;
        let mut j = 0;
        while i < nums1.len() && j < nums2.len() {
            if nums1[i] < nums2[j] {
                diff.push(nums2[j] - nums1[i]);
                i += 1;
            } else {
                diff.push(nums1[i] - nums2[j]);
                j += 1;
            }
        }
        while i < nums1.len() {
            diff.push(nums1[i]);
            i += 1;
        }
        while j < nums2.len() {
            diff.push(nums2[j]);
            j += 1;
        }
        let mut sum = 0;
        let mut min = std::i64::MAX;
        let mut left = 0;
        for right in 0..diff.len() {
            sum += diff[right] as i64;
            while sum > k as i64 {
                sum -= diff[left] as i64;
                left += 1;
            }
            if sum == k as i64 {
                min = std::cmp::min(min, diff[left..=right].iter().sum::<i32>() as i64);
            }
        }
        if min == std::i64::MAX {
            -1
        } else {
            min as i64
        }
    }
}

=======

        let n = nums1.len();
        let mut sum1 = 0;
        let mut sum2 = 0;
        let mut diff = vec![0; 6 * n + 1];
        let mut cnt = vec![0; 6 * n + 1];
        for i in 0..n {
            sum1 += nums1[i];
            sum2 += nums2[i];
            let d = (nums1[i] - nums2[i]).abs();
            diff[d as usize] += 1;
        }
        let mut res = 0;
        let mut l = 0;
        let mut r = 0;
        let mut max_cnt = 0;
        while r <= 6 * n {
            if r - l + 1 > k as usize {
                cnt[diff[l as usize]] -= 1;
                max_cnt = max_cnt.max(cnt[diff[l as usize]]);
                l += 1;
            }
            if r - l + 1 == k as usize {
                res += max_cnt + 1;
            }
            cnt[diff[r as usize]] += 1;
            max_cnt = max_cnt.max(cnt[diff[r as usize]]);
            r += 1;
        }
        if sum1 == sum2 {
            res -= 1;
        } else if sum1 > sum2 {
            res -= (sum1 - sum2) / 2;
        } else {
            res -= (sum2 - sum1) / 2;
        }
        res
