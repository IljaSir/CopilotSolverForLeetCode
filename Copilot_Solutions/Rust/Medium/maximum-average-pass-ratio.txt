Synthesizing 4/10 solutions

=======

        
    }
}

=======

        let mut classes = classes;
        let mut heap = std::collections::BinaryHeap::new();
        for c in classes.iter() {
            heap.push((c[0] as f64 / c[1] as f64, c[0], c[1]));
        }
        for _ in 0..extra_students {
            let (ratio, pass, total) = heap.pop().unwrap();
            heap.push(((pass as f64 + 1.0) / (total as f64 + 1.0), pass + 1, total + 1));
        }
        let mut sum = 0.0;
        for (_ratio, pass, total) in heap {
            sum += pass as f64 / total as f64;
        }
        sum / classes.len() as f64

=======

        let mut classes = classes;
        let mut pq = std::collections::BinaryHeap::new();
        for c in classes.iter() {
            pq.push((c[0] as f64 / c[1] as f64, c[0], c[1]));
        }
        for _ in 0..extra_students {
            let (ratio, passed, total) = pq.pop().unwrap();
            pq.push(((passed + 1.0) / (total + 1.0), passed + 1, total + 1));
        }
        let mut sum = 0.0;
        for (ratio, _, _) in pq.iter() {
            sum += ratio;
        }
        sum / classes.len() as f64

=======

        let mut classes = classes;
        let mut res = 0.0;
        let mut pq = std::collections::BinaryHeap::new();
        for c in classes {
            let p = c[0] as f64;
            let t = c[1] as f64;
            let r = (p + 1.0) / (t + 1.0) - p / t;
            pq.push((r, p, t));
        }
        for _ in 0..extra_students {
            let (r, p, t) = pq.pop().unwrap();
            res += p / t;
            pq.push((r, p + 1.0, t + 1.0));
        }
        while let Some((_, p, t)) = pq.pop() {
            res += p / t;
        }
        res / classes.len() as f64
