Synthesizing 8/10 solutions

=======

        
    }
}

=======

        let (mut l, mut h) = (nums[0], nums[0]);
        for &n in &nums[1..] {
            l = l.min(n);
            h = h.max(n);
        }
        let (mut r, mut s) = (h - l, h - l);
        for i in 1..nums.len() {
            let (a, b) = (nums[i - 1], nums[i]);
            r = r.min((a - l).abs().max((b - h).abs()))
                .min((a - h).abs().max((b - l).abs()));
            s += (a - b).abs();
        }
        s - r
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut res = nums[n-1] - nums[0];
        for i in 0..n-2 {
            res = res.min(nums[n-1] - nums[i+1] - nums[i]);
            res = res.min(nums[n-2] - nums[i] - nums[i+1]);
        }
        res

=======

        let n = nums.len();
        let mut v = nums;
        v.sort();
        let mut a = v[0];
        let mut b = v[1];
        let mut c = v[n - 2];
        let mut d = v[n - 1];
        let mut ans = (b - a).abs() + (c - d).abs();
        for i in 1..n-2 {
            a = v[i];
            b = v[i+1];
            ans = ans.min((a - c).abs() + (b - d).abs());
            ans = ans.min((a - d).abs() + (b - c).abs());
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = nums[n-1] - nums[0];
        let mut l = 0;
        let mut r = 0;
        let mut max = 0;
        for i in 1..n-1 {
            l = nums[i] - nums[0];
            r = nums[n-1] - nums[i];
            max = std::cmp::max(l, r);
            ans = std::cmp::min(ans, max);
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut ans = 0;
        let mut n = nums.len();
        for i in 1..n {
            ans += nums[i] - nums[i - 1];
        }
        let mut res = ans;
        for i in 1..n - 1 {
            let mut a = nums[i - 1];
            let mut b = nums[i];
            let mut c = nums[i + 1];
            let mut d = nums[n - 1];
            res = res.min(ans - (c - b) + (c - a));
            res = res.min(ans - (b - a) + (d - b));
        }
        res as i32
    }
}

=======

        let mut nums = nums;
        let n = nums.len();
        nums.sort();
        let mut ans = 1e18 as i64;
        for i in 0..n {
            let mut j = i + 1;
            if j < n {
                ans = ans.min((nums[j] - nums[i]) as i64);
            }
            if j + 1 < n {
                ans = ans.min((nums[j + 1] - nums[i]) as i64);
            }
            if i > 0 {
                ans = ans.min((nums[i] - nums[i - 1]) as i64);
            }
            if i > 1 {
                ans = ans.min((nums[i] - nums[i - 2]) as i64);
            }
        }
        ans as i32

=======

        let mut a = nums.clone();
        a.sort();
        let mut b = a.clone();
        let mut c = a.clone();
        let mut d = a.clone();
        let n = a.len();
        a[1] = a[0];
        b[n-2] = b[n-1];
        c[1] = c[0];
        d[n-2] = d[n-1];
        let mut ans = std::i32::MAX;
        for i in 0..n-1 {
            ans = ans.min((a[i+1]-a[i]).abs() + (b[i+1]-b[i]).abs());
            ans = ans.min((c[i+1]-c[i]).abs() + (d[i+1]-d[i]).abs());
        }
        ans
