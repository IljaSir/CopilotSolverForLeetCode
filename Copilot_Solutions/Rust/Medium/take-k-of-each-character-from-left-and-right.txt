Synthesizing 10/10 solutions (Duplicates hidden)

=======

        
    }
}

=======

        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        let k = k as usize;
        let mut i = 0;
        let mut j = s.len() - 1;
        while i < j {
            let a1 = s.as_bytes()[i] as char;
            let b1 = s.as_bytes()[j] as char;
            if a1 == b1 {
                if a1 == 'a' {
                    a += 1;
                } else if a1 == 'b' {
                    b += 1;
                } else {
                    c += 1;
                }
                i += 1;
                j -= 1;
            } else {
                break;
            }
        }
        if a >= k && b >= k && c >= k {
            return (i + s.len() - 1 - j) as i32;
        }
        -1

=======

        let mut s = s.chars().collect::<Vec<_>>();
        let n = s.len();
        let k = k as usize;
        let mut cnt = vec![0; 3];
        let mut i = 0;
        let mut j = n - 1;
        let mut res = 0;
        while i <= j {
            if i == j {
                cnt[s[i] as usize - 'a' as usize] += 1;
                break;
            }
            if s[i] == s[j] {
                cnt[s[i] as usize - 'a' as usize] += 2;
                i += 1;
                j -= 1;
            } else {
                cnt[s[i] as usize - 'a' as usize] += 1;
                cnt[s[j] as usize - 'a' as usize] += 1;
                i += 1;
                j -= 1;
            }
            res += 1;
        }
        if cnt.iter().all(|c| *c >= k) {
            res as i32
        } else {
            -1
        }
    }
}
