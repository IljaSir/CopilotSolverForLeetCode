Synthesizing 5/10 solutions

=======

        let (m, n) = (heights.len(), heights[0].len());
        let mut left = 0;
        let mut right = 1000000;
        while left < right {
            let mid = left + (right - left) / 2;
            let mut visited = vec![vec![false; n]; m];
            let mut queue = std::collections::VecDeque::new();
            queue.push_back((0, 0));
            while let Some((x, y)) = queue.pop_front() {
                if x == m - 1 && y == n - 1 {
                    break;
                }
                if visited[x][y] {
                    continue;
                }
                visited[x][y] = true;
                if x > 0 && (heights[x][y] - heights[x - 1][y]).abs() <= mid {
                    queue.push_back((x - 1, y));
                }
                if x + 1 < m && (heights[x][y] - heights[x + 1][y]).abs() <= mid {
                    queue.push_back((x + 1, y));
                }
                if y > 0 && (heights[x][y] - heights[x][y - 1]).abs() <= mid {
                    queue.push_back((x, y - 1));
                }
                if y + 1 < n && (heights[x][y] - heights[x][y + 1]).abs() <= mid {
                    queue.push_back((x, y + 1));
                }
            }
            if visited[m - 1][n - 1] {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        let rows = heights.len();
        let cols = heights[0].len();
        let mut visited = vec![vec![false; cols]; rows];
        let mut heap = std::collections::BinaryHeap::new();
        heap.push((0, (0, 0)));
        while let Some((effort, (r, c))) = heap.pop() {
            if r == rows - 1 && c == cols - 1 {
                return -effort;
            }
            if visited[r][c] { continue; }
            visited[r][c] = true;
            for (i, j) in vec![(r as i32 - 1, c as i32), (r as i32 + 1, c as i32), (r as i32, c as i32 - 1), (r as i32, c as i32 + 1)] {
                if i < 0 || i >= rows as i32 || j < 0 || j >= cols as i32 { continue; }
                let i = i as usize;
                let j = j as usize;
                let new_effort = -effort.max((heights[r][c] - heights[i][j]).abs());
                heap.push((new_effort, (i, j)));
            }
        }
        unreachable!()

=======

        
    }
}

=======

        let mut left = 0;
        let mut right = 1_000_000;
        while left < right {
            let mid = (left + right) / 2;
            if Solution::dfs(&heights, mid) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left
    }
    fn dfs(heights: &Vec<Vec<i32>>, mid: i32) -> bool {
        let m = heights.len();
        let n = heights[0].len();
        let mut visited = vec![vec![false; n]; m];
        visited[0][0] = true;
        let mut stack = vec![(0, 0)];
        while !stack.is_empty() {
            let (i, j) = stack.pop().unwrap();
            if i == m - 1 && j == n - 1 {
                return true;
            }
            for (di, dj) in &[(0, 1), (0, -1), (1, 0), (-1, 0)] {
                let ni = i as i32 + di;
                let nj = j as i32 + dj;
                if ni >= 0 && ni < m as i32 && nj >= 0 && nj < n as i32 {
                    let ni = ni as usize;
                    let nj = nj as usize;
                    if !visited[ni][nj] && (heights[i][j] - heights[ni][nj]).abs() <= mid {
                        visited[ni][nj] = true;
                        stack.push((ni, nj));
                    }
                }
            }
        }
        false

=======

        let mut left = 0;
        let mut right = 1000000;
        let mut mid = 0;
        let mut visited = vec![vec![false; heights[0].len()]; heights.len()];
        while left < right {
            mid = (left + right) / 2;
            visited = vec![vec![false; heights[0].len()]; heights.len()];
            if Solution::dfs(&heights, mid, 0, 0, &mut visited) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left
    }
    
    fn dfs(heights: &Vec<Vec<i32>>, max_diff: i32, x: usize, y: usize, visited: &mut Vec<Vec<bool>>) -> bool {
        if x == heights.len() - 1 && y == heights[0].len() - 1 {
            return true;
        }
        visited[x][y] = true;
        let mut res = false;
        if x > 0 && !visited[x - 1][y] && (heights[x][y] - heights[x - 1][y]).abs() <= max_diff {
            res = Solution::dfs(heights, max_diff, x - 1, y, visited);
        }
        if !res && y > 0 && !visited[x][y - 1] && (heights[x][y] - heights[x][y - 1]).abs() <= max_diff {
            res = Solution::dfs(heights, max_diff, x, y - 1, visited);
        }
        if !res && x < heights.len() - 1 && !visited[x + 1][y] && (heights[x][y] - heights[x + 1][y]).abs() <= max_diff {
            res = Solution::dfs(heights, max_diff, x + 1, y, visited);
        }
        if !res && y < heights[0].len() - 1 && !visited[x][y + 1] && (heights[x][y] - heights[x][y + 1]).abs() <= max_diff {
            res = Solution::dfs(heights, max_diff, x, y + 1, visited);
        }
        res
