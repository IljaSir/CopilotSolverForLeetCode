Synthesizing 9/10 solutions

=======
Suggestion 1

        if n == 0 {
            return 0;
        }
        if n <= 3 {
            return 1;
        }
        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut j = 3;
        let mut res = 1;
        while j < n {
            let c = s[i];
            let last = s[j - 1];
            if last == 1 {
                if c == 1 {
                    res += 1;
                }
                s.push(2);
            } else {
                if c == 1 {
                    res += 1;
                }
                s.push(2);
                if c == 1 {
                    res += 1;
                }
                s.push(2);
            }
            i += 1;
            j += 1;
        }
        res

=======
Suggestion 2

        let n = n as usize;
        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut res = 0;
        while s.len() < n {
            let last = s.last().unwrap();
            if last == &1 {
                let next = if s[i] == 1 { 2 } else { 1 };
                s.push(next);
                if next == 1 && s.len() <= n {
                    res += 1;
                }
            } else {
                let next = if s[i] == 1 { 2 } else { 1 };
                s.push(next);
                if next == 1 && s.len() <= n {
                    res += 1;
                }
                s.push(next);
                if next == 1 && s.len() <= n {
                    res += 1;
                }
            }
            i += 1;
        }
        res

=======
Suggestion 3

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        while s.len() < n as usize {
            s.extend(vec![s[i] ^ 3; s[i + 1] as usize]);
            i += 2;
        }
        s[0..n as usize].iter().filter(|&&x| x == 1).count() as i32

=======
Suggestion 4

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut j = 2;
        let mut c = 1;
        while s.len() < n as usize {
            s.push(c);
            if s[i] == 1 {
                if c == 1 {
                    c = 2;
                } else {
                    c = 1;
                }
                s.push(c);
            }
            i += 1;
            j += 1;
        }
        let mut ans = 0;
        for i in 0..n as usize {
            if s[i] == 1 {
                ans += 1;
            }
        }
        ans

=======
Suggestion 5

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut j = 2;
        while s.len() < n as usize {
            let x = s[i];
            let y = 3 - s[j];
            s.push(y);
            if x == 2 {
                s.push(y);
            }
            i += 1;
            j += 1;
        }
        s[..n as usize].iter().filter(|&&x| x == 1).count() as i32

=======
Suggestion 6

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut count = 1;
        while s.len() < n as usize {
            let v = s[i];
            let last = s[s.len() - 1];
            if last == 1 {
                s.push(2);
            } else {
                s.push(1);
                count += 1;
            }
            if v == 2 {
                if last == 1 {
                    s.push(2);
                } else {
                    s.push(1);
                    count += 1;
                }
            }
            i += 1;
        }
        if s.len() == n as usize {
            count
        } else {
            count - (s[s.len() - 1] - (n as usize - s.len() + 1) as i32)
        }
    }
}

=======
Suggestion 7

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut j = 3;
        let mut res = 0;
        while j < n {
            s.push((s[i] ^ 3) - 1);
            if s[i] == 1 {
                res += 1;
            }
            if s[j] == 1 {
                res += 1;
            }
            i += 1;
            j += 1;
        }
        if j == n && s[i] == 1 {
            res += 1;
        }
        res

=======
Suggestion 8

        let mut s = vec![1, 2, 2];
        let mut i = 2;
        let mut j = 0;
        while s.len() < n as usize {
            let x = s[i] ^ 3;
            if s[i] == 2 {
                s.push(x);
                s.push(x);
            } else {
                s.push(x);
            }
            i += 1;
        }
        s[0..n as usize].iter().filter(|&&x| x == 1).count() as i32

=======
Suggestion 9

        let mut s: Vec<i32> = vec![1,2,2];
        let mut i = 2;
        while s.len() < n as usize {
            let n = s[i];
            let v = if s[s.len()-1] == 1 { 2 } else { 1 };
            for _ in 0..n {
                s.push(v);
            }
            i += 1;
        }
        s[0..n as usize].iter().filter(|&&c| c == 1).count() as i32
