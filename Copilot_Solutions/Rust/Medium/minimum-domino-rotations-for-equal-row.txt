Synthesizing 10/10 solutions

=======

        let n = tops.len();
        let mut a = vec![0; 7];
        let mut b = vec![0; 7];
        let mut same = vec![0; 7];
        for i in 0..n {
            a[tops[i] as usize] += 1;
            b[bottoms[i] as usize] += 1;
            if tops[i] == bottoms[i] {
                same[tops[i] as usize] += 1;
            }
        }
        for i in 1..7 {
            if a[i] + b[i] - same[i] == n {
                return (n as i32) - i32::max(a[i], b[i]);
            }
        }
        -1

=======

        let n = tops.len();
        let mut count = vec![0; 7];
        let mut same = vec![0; 7];
        for i in 0..n {
            count[tops[i] as usize] += 1;
            count[bottoms[i] as usize] += 1;
            if tops[i] == bottoms[i] {
                same[tops[i] as usize] += 1;
            }
        }
        let mut res = n as i32;
        for i in 1..7 {
            if count[i] >= n as i32 {
                res = res.min(n as i32 - same[i]);
            }
        }
        if res == n as i32 {
            -1
        } else {
            res
        }
    }
}

=======

        let n = tops.len();
        let mut count = vec![0; 7];
        let mut same = vec![0; 7];
        for i in 0..n {
            count[tops[i] as usize] += 1;
            count[bottoms[i] as usize] += 1;
            if tops[i] == bottoms[i] {
                same[tops[i] as usize] += 1;
            }
        }
        let mut res = n as i32;
        for i in 1..7 {
            if count[i] >= n as i32 {
                res = res.min(n as i32 - same[i]);
            }
        }
        if res == n as i32 {
            -1
        } else {
            res
        }

=======

        let n = tops.len();
        let mut count = vec![0; 7];
        let mut top = vec![0; 7];
        let mut bottom = vec![0; 7];
        for i in 0..n {
            let t = tops[i];
            let b = bottoms[i];
            count[t as usize] += 1;
            count[b as usize] += 1;
            top[t as usize] += 1;
            bottom[b as usize] += 1;
        }
        for i in 1..7 {
            if count[i] == n {
                return std::cmp::min(top[i], bottom[i]) as i32;
            }
        }
        -1

=======

        let n = tops.len();
        let mut ans = n as i32;
        for x in 1..=6 {
            let mut a = 0;
            let mut b = 0;
            let mut ok = true;
            for i in 0..n {
                if tops[i] != x && bottoms[i] != x {
                    ok = false;
                    break;
                } else if tops[i] != x {
                    a += 1;
                } else if bottoms[i] != x {
                    b += 1;
                }
            }
            if ok {
                ans = ans.min(a.min(b));
            }
        }
        if ans == n as i32 {
            -1
        } else {
            ans
        }

=======

        let n = tops.len();
        let (mut a, mut b, mut c, mut d) = (0, 0, 0, 0);
        let (mut x, mut y) = (tops[0], bottoms[0]);
        for i in 0..n {
            if tops[i] != x && bottoms[i] != x {
                a = -1;
            }
            if tops[i] != y && bottoms[i] != y {
                b = -1;
            }
            if tops[i] == x {
                c += 1;
            }
            if bottoms[i] == x {
                d += 1;
            }
            if tops[i] == y {
                b += 1;
            }
            if bottoms[i] == y {
                a += 1;
            }
        }
        if a == n || b == n {
            return 0;
        }
        if a == -1 && b == -1 {
            return -1;
        }
        if a == -1 {
            return n as i32 - b;
        }
        if b == -1 {
            return n as i32 - a;
        }
        return std::cmp::min(n as i32 - a, n as i32 - b);
    }
}

=======

        let mut res = -1;
        for i in 1..7 {
            let mut cnt = 0;
            let mut ok = true;
            for j in 0..tops.len() {
                if tops[j] != i && bottoms[j] != i {
                    ok = false;
                    break;
                }
                if tops[j] != i {
                    cnt += 1;
                }
            }
            if ok {
                res = if res == -1 {cnt} else {res.min(cnt)};
            }
            let mut cnt = 0;
            let mut ok = true;
            for j in 0..tops.len() {
                if tops[j] != i && bottoms[j] != i {
                    ok = false;
                    break;
                }
                if bottoms[j] != i {
                    cnt += 1;
                }
            }
            if ok {
                res = if res == -1 {cnt} else {res.min(cnt)};
            }
        }
        res

=======

        let n = tops.len();
        let mut ans = -1;
        for i in 1..7 {
            let mut a = 0;
            let mut b = 0;
            let mut c = 0;
            let mut d = 0;
            for j in 0..n {
                if tops[j] == i {
                    a += 1;
                }
                if bottoms[j] == i {
                    b += 1;
                }
                if tops[j] == i || bottoms[j] == i {
                    c += 1;
                }
                if bottoms[j] == i || tops[j] == i {
                    d += 1;
                }
            }
            if a == n || b == n {
                ans = 0;
                break;
            }
            if c == n {
                ans = a.min(b);
                break;
            }
            if d == n {
                ans = a.min(b);
                break;
            }
        }
        ans

=======

        let n = tops.len();
        let mut ans = n as i32;
        for i in 0..n {
            let mut top = 0;
            let mut bottom = 0;
            let mut ok = true;
            for j in 0..n {
                if tops[j] != tops[i] && bottoms[j] != tops[i] {
                    ok = false;
                    break;
                }
                if tops[j] != tops[i] {
                    top += 1;
                }
                if bottoms[j] != tops[i] {
                    bottom += 1;
                }
            }
            if ok {
                ans = ans.min(top.min(bottom));
            }
        }
        for i in 0..n {
            let mut top = 0;
            let mut bottom = 0;
            let mut ok = true;
            for j in 0..n {
                if tops[j] != bottoms[i] && bottoms[j] != bottoms[i] {
                    ok = false;
                    break;
                }
                if tops[j] != bottoms[i] {
                    top += 1;
                }
                if bottoms[j] != bottoms[i] {
                    bottom += 1;
                }
            }
            if ok {
                ans = ans.min(top.min(bottom));
            }
        }
        if ans == n as i32 {
            -1
        } else {
            ans
        }

=======

        let mut dp = vec![vec![i32::max_value(); 6]; 2];
        let mut min = i32::max_value();
        for i in 0..tops.len() {
            for j in 0..6 {
                if tops[i] == j as i32 + 1 && bottoms[i] == j as i32 + 1 {
                    if i == 0 {
                        dp[0][j] = 0;
                        dp[1][j] = 0;
                    } else {
                        dp[0][j] = dp[0][j].min(dp[1][j]);
                        dp[1][j] = dp[1][j].min(dp[0][j]);
                    }
                } else if tops[i] == j as i32 + 1 {
                    if i == 0 {
                        dp[0][j] = 0;
                    } else {
                        dp[0][j] = dp[0][j].min(dp[1][j] + 1);
                    }
                } else if bottoms[i] == j as i32 + 1 {
                    if i == 0 {
                        dp[1][j] = 0;
                    } else {
                        dp[1][j] = dp[1][j].min(dp[0][j] + 1);
                    }
                } else {
                    dp[0][j] = i32::max_value();
                    dp[1][j] = i32::max_value();
                }
                min = min.min(dp[0][j]).min(dp[1][j]);
            }
        }
        if min == i32::max_value() {
            -1
        } else {
            min as i32
        }
