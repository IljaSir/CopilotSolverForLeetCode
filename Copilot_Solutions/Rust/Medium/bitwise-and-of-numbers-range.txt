Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut i = 0;
        let mut left = left;
        let mut right = right;
        while left != right {
            left >>= 1;
            right >>= 1;
            i += 1;
        }
        left << i

=======
Suggestion 2

        let mut left = left;
        let mut right = right;
        let mut count = 0;
        while left != right {
            left >>= 1;
            right >>= 1;
            count += 1;
        }
        left <<= count;
        left

=======
Suggestion 3

        let mut l = left;
        let mut r = right;
        let mut count = 0;
        while l != r {
            l >>= 1;
            r >>= 1;
            count += 1;
        }
        l << count

=======
Suggestion 4

        let mut l = left;
        let mut r = right;
        let mut i = 0;
        while l != r {
            l >>= 1;
            r >>= 1;
            i += 1;
        }
        l << i

=======
Suggestion 5

        let mut l = left;
        let mut r = right;
        let mut c = 0;
        while l != r {
            l >>= 1;
            r >>= 1;
            c += 1;
        }
        l << c
    }
}

=======
Suggestion 6

        if left == right {
            return left;
        }
        let mut l = left;
        let mut r = right;
        let mut count = 0;
        while l != r {
            l >>= 1;
            r >>= 1;
            count += 1;
        }
        l <<= count;
        l

=======
Suggestion 7

        let mut res = 0;
        for i in (0..32).rev() {
            if left & 1 << i == right & 1 << i {
                res |= left & 1 << i;
            } else {
                break;
            }
        }
        res
    }
}

=======
Suggestion 8

        let mut ans = 0;
        let mut l = left;
        let mut r = right;
        let mut i = 0;
        while l != 0 && r != 0 {
            if l == r {
                ans += (l & 1) << i;
            }
            l >>= 1;
            r >>= 1;
            i += 1;
        }
        ans
    }
}

=======
Suggestion 9

        let mut res = 0;
        for i in 0..32 {
            let mask = 1 << i;
            if (left & mask) == (right & mask) {
                res |= (left & mask);
            } else {
                break;
            }
        }
        res
    }
}

=======
Suggestion 10

        let mut n = 0;
        for i in 0..32 {
            if (left & (1 << i)) == (right & (1 << i)) {
                n |= (left & (1 << i));
            } else {
                break;
            }
        }
        n
    }
}
