Synthesizing 10/10 solutions

=======

        let mut nums = nums;
        nums.sort_unstable();
        let mut i = 1;
        while i + 1 < nums.len() {
            nums.swap(i, i + 1);
            i += 2;
        }
        nums

=======

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            res.push(nums[i]);
            res.push(nums[j]);
            i += 1;
            j -= 1;
        }
        if i == j {
            res.push(nums[i]);
        }
        res
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            res.push(nums[i]);
            res.push(nums[j]);
            i += 1;
            j -= 1;
        }
        res

=======

        let mut nums = nums;
        nums.sort();
        let mut res = vec![];
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            res.push(nums[j]);
            res.push(nums[i]);
            i += 1;
            j -= 1;
        }
        if i == j {
            res.push(nums[i]);
        }
        res

=======

        let mut nums = nums;
        nums.sort_by_key(|&x| x.abs());
        let mut i = 1;
        while i < nums.len() - 1 {
            nums.swap(i, i + 1);
            i += 2;
        }
        nums

=======

        let mut nums = nums;
        let mut i = 0;
        let mut j = 1;
        while j < nums.len() {
            if nums[i] < 0 && nums[j] > 0 {
                i += 2;
                j += 2;
            } else if nums[i] > 0 && nums[j] < 0 {
                i += 2;
                j += 2;
            } else if nums[i] < 0 && nums[j] < 0 {
                j += 1;
            } else if nums[i] > 0 && nums[j] > 0 {
                j += 1;
            } else {
                nums.swap(i + 1, j);
                i += 2;
                j += 2;
            }
        }
        nums
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let n = nums.len();
        for i in 0..n/2 {
            res.push(nums[i]);
            res.push(nums[n/2+i]);
        }
        res

=======

        let mut nums = nums;
        nums.sort_unstable_by(|a, b| a.abs().cmp(&b.abs()));
        let mut result = Vec::with_capacity(nums.len());
        let mut i = 0;
        let mut j = nums.len() / 2;
        while i < nums.len() / 2 {
            result.push(nums[i]);
            result.push(nums[j]);
            i += 1;
            j += 1;
        }
        result

=======

        let mut nums = nums;
        nums.sort();
        let mut result = Vec::new();
        let mut i = 0;
        let mut j = nums.len() - 1;
        loop {
            if i == j {
                result.push(nums[i]);
                break;
            }
            result.push(nums[i]);
            result.push(nums[j]);
            i += 1;
            j -= 1;
        }
        result

=======

        let mut nums = nums;
        nums.sort_unstable_by_key(|&x| x.abs());
        let mut result: Vec<i32> = vec![];
        let mut i = 0;
        let mut j = nums.len() - 1;
        while i < j {
            result.push(nums[j]);
            result.push(nums[i]);
            i += 1;
            j -= 1;
        }
        if i == j {
            result.push(nums[i]);
        }
        result
