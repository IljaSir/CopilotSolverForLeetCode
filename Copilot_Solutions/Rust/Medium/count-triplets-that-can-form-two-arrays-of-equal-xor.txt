Synthesizing 10/10 solutions

=======

        let n = arr.len();
        let mut xor = vec![0; n + 1];
        for i in 0..n {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        let mut ans = 0;
        for i in 0..n {
            for k in i + 1..n {
                if xor[i] == xor[k + 1] {
                    ans += k - i;
                }
            }
        }
        ans as i32

=======

        let n = arr.len();
        let mut dp = vec![0; n + 1];
        for i in 0..n {
            dp[i + 1] = dp[i] ^ arr[i];
        }
        let mut ans = 0;
        for i in 0..n {
            for j in i + 1..n {
                for k in j..n {
                    if dp[i] == dp[k + 1] {
                        ans += 1;
                    }
                }
            }
        }
        ans

=======

        let n = arr.len();
        let mut pre = vec![0; n + 1];
        for i in 0..n {
            pre[i + 1] = pre[i] ^ arr[i];
        }
        let mut ans = 0;
        for i in 0..n {
            for k in i + 1..n {
                if pre[i] == pre[k + 1] {
                    ans += k - i;
                }
            }
        }
        ans as i32

=======

        let n = arr.len();
        let mut a = vec![0; n + 1];
        for i in 0..n {
            a[i + 1] = a[i] ^ arr[i];
        }
        let mut ans = 0;
        for i in 0..n {
            for k in i + 1..n {
                if a[i] == a[k + 1] {
                    ans += k - i;
                }
            }
        }
        ans as i32

=======

        let mut res = 0;
        for i in 0..arr.len() {
            let mut xor = 0;
            for k in i..arr.len() {
                xor ^= arr[k];
                if xor == 0 && k > i {
                    res += k - i;
                }
            }
        }
        res as i32

=======

        let mut res = 0;
        for i in 0..arr.len() {
            let mut xor = arr[i];
            for j in i+1..arr.len() {
                xor ^= arr[j];
                if xor == 0 {
                    res += j - i;
                }
            }
        }
        res as i32

=======

        let mut cnt = 0;
        for i in 0..arr.len() {
            let mut x = 0;
            for k in i..arr.len() {
                x ^= arr[k];
                if x == 0 && k > i {
                    cnt += k - i;
                }
            }
        }
        cnt as i32
    }
}

=======

        let mut count = 0;
        let mut xor = vec![0; arr.len() + 1];
        for i in 0..arr.len() {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        for i in 0..arr.len() {
            for k in i + 1..arr.len() {
                if xor[i] == xor[k + 1] {
                    count += k - i;
                }
            }
        }
        count as i32

=======

        let mut res = 0;
        let mut xor = 0;
        let mut count = vec![vec![0; arr.len()]; arr.len()];
        for i in 0..arr.len() {
            xor ^= arr[i];
            for j in i + 1..arr.len() {
                if xor == (xor ^ arr[j]) {
                    res += j - i;
                }
                count[i][j] = res;
            }
            res = 0;
        }
        res = 0;
        for i in 0..arr.len() {
            for j in i + 1..arr.len() {
                for k in j..arr.len() {
                    if arr[i] == arr[k + 1] {
                        res += 1;
                    }
                }
            }
        }
        res

=======

        let mut ans = 0;
        let mut v = vec![0];
        for i in 0..arr.len() {
            v.push(v[i] ^ arr[i]);
        }
        for i in 0..arr.len() {
            for k in i + 1..arr.len() {
                if v[i] == v[k + 1] {
                    ans += k - i;
                }
            }
        }
        ans as i32
