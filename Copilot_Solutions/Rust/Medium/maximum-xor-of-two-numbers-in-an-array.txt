Synthesizing 5/10 solutions

=======
Suggestion 1

        let mut max = 0;
        let mut mask = 0;
        for i in (0..32).rev() {
            mask |= 1 << i;
            let mut set = std::collections::HashSet::new();
            for num in nums.iter() {
                set.insert(num & mask);
            }
            let tmp = max | 1 << i;
            for prefix in set.iter() {
                if set.contains(&(prefix ^ tmp)) {
                    max = tmp;
                    break;
                }
            }
        }
        max

=======
Suggestion 2

        let mut ans = 0;
        let mut mask = 0;
        for i in (0..31).rev() {
            mask |= 1 << i;
            let mut set = std::collections::HashSet::new();
            for &num in &nums {
                set.insert(num & mask);
            }
            let tmp = ans | 1 << i;
            for &pre in &set {
                if set.contains(&(pre ^ tmp)) {
                    ans = tmp;
                    break;
                }
            }
        }
        ans
    }
}

=======
Suggestion 3

        let mut ans = 0;
        let mut mask = 0;
        for i in (0..32).rev() {
            mask |= 1 << i;
            let mut set = std::collections::HashSet::new();
            for &num in &nums {
                set.insert(num & mask);
            }
            let tmp = ans | (1 << i);
            for prefix in set {
                if set.contains(&(prefix ^ tmp)) {
                    ans = tmp;
                    break;
                }
            }
        }
        ans

=======
Suggestion 4

        let mut max = 0;
        let mut mask = 0;
        for i in (0..=30).rev() {
            mask |= 1 << i;
            let mut set = std::collections::HashSet::new();
            for num in nums.iter() {
                set.insert(num & mask);
            }
            let tmp = max | (1 << i);
            for prefix in set.iter() {
                if set.contains(&(tmp ^ prefix)) {
                    max = tmp;
                    break;
                }
            }
        }
        max

=======
Suggestion 5

        let mut res = 0;
        let mut mask = 0;
        for i in (0..=30).rev() {
            mask |= 1 << i;
            let mut s = std::collections::HashSet::new();
            for &num in &nums {
                s.insert(num & mask);
            }
            let tmp = res | 1 << i;
            for &pre in &s {
                if s.contains(&(pre ^ tmp)) {
                    res = tmp;
                    break;
                }
            }
        }
        res
