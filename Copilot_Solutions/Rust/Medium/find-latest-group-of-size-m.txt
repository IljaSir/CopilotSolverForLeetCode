Synthesizing 5/10 solutions

=======

        
    }
}

=======

        let n = arr.len();
        if n == m {
            return n as i32;
        }
        let mut left = vec![0; n + 2];
        let mut right = vec![0; n + 2];
        let mut res = -1;
        for (i, &x) in arr.iter().enumerate() {
            let x = x as usize;
            left[x] = x - left[x - 1];
            right[x] = right[x + 1] + x;
            if left[x] == m as usize || right[x] == m as usize {
                res = i as i32;
            }
            left[right[x]] = left[x];
            right[left[x]] = right[x];
        }
        res

=======

        let n = arr.len();
        let mut left = vec![0; n + 2];
        let mut right = vec![0; n + 2];
        let mut ans = -1;
        for (i, &x) in arr.iter().enumerate() {
            let x = x as usize;
            let l = left[x - 1];
            let r = right[x + 1];
            if l == m || r == m {
                ans = i as i32;
            }
            left[x + r] = l + r + 1;
            right[x - l] = l + r + 1;
        }
        ans

=======

        let n = arr.len();
        let mut v = vec![0; n + 2];
        let mut ans = -1;
        for (i, &x) in arr.iter().enumerate() {
            let l = v[(x - 1) as usize];
            let r = v[(x + 1) as usize];
            if l == m || r == m {
                ans = i as i32;
            }
            v[(x - l) as usize] = l + r + 1;
            v[(x + r) as usize] = l + r + 1;
        }
        ans

=======

        let mut n = arr.len();
        let mut f = vec![0; n + 2];
        let mut ans = -1;
        for i in 0..n {
            let x = arr[i] as usize;
            let left = f[x - 1];
            let right = f[x + 1];
            if left == m || right == m {
                ans = i as i32;
            }
            f[x - left] = left + right + 1;
            f[x + right] = left + right + 1;
        }
        ans
