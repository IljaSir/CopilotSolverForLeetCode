Synthesizing 10/10 solutions

=======

        let mut prefix: Vec<i32> = vec![0; arr.len() + 1];
        for i in 0..arr.len() {
            prefix[i + 1] = prefix[i] ^ arr[i];
        }
        let mut ans = Vec::new();
        for query in queries {
            ans.push(prefix[query[0] as usize] ^ prefix[query[1] as usize + 1]);
        }
        ans

=======

        let mut xor: Vec<i32> = vec![0; arr.len() + 1];
        for i in 0..arr.len() {
            xor[i + 1] = xor[i] ^ arr[i];
        }
        let mut res: Vec<i32> = vec![];
        for q in queries {
            res.push(xor[q[0] as usize] ^ xor[q[1] as usize + 1]);
        }
        res

=======

        let mut prefix = vec![0; arr.len() + 1];
        for i in 0..arr.len() {
            prefix[i + 1] = prefix[i] ^ arr[i];
        }
        let mut result = Vec::new();
        for query in queries {
            result.push(prefix[query[0] as usize] ^ prefix[query[1] as usize + 1]);
        }
        result

=======

        let mut xors = vec![0; arr.len() + 1];
        for (i, &v) in arr.iter().enumerate() {
            xors[i + 1] = xors[i] ^ v;
        }
        queries.iter().map(|q| xors[q[0] as usize] ^ xors[q[1] as usize + 1]).collect()
    }
}

=======

        let mut res = Vec::new();
        let mut xor = Vec::new();
        xor.push(0);
        for i in 0..arr.len() {
            xor.push(xor[i] ^ arr[i]);
        }
        for q in queries {
            res.push(xor[q[0] as usize] ^ xor[(q[1] + 1) as usize]);
        }
        res

=======

        let mut res = Vec::new();
        for i in 0..queries.len() {
            let mut tmp = 0;
            for j in queries[i][0] as usize..queries[i][1] as usize + 1 {
                tmp ^= arr[j];
            }
            res.push(tmp);
        }
        res

=======

        let mut res = vec![];
        for q in queries {
            let mut r = 0;
            for i in q[0] as usize .. q[1] as usize + 1 {
                r ^= arr[i];
            }
            res.push(r);
        }
        res

=======

        let mut ans = vec![];
        for i in 0..queries.len() {
            let mut tmp = arr[queries[i][0] as usize];
            for j in queries[i][0] + 1..=queries[i][1] {
                tmp ^= arr[j as usize];
            }
            ans.push(tmp);
        }
        ans

=======

        let mut result = Vec::new();
        let mut xor_arr = Vec::new();
        let mut xor = 0;
        for i in 0..arr.len() {
            xor ^= arr[i];
            xor_arr.push(xor);
        }
        for i in 0..queries.len() {
            let left = queries[i][0] as usize;
            let right = queries[i][1] as usize;
            if left == 0 {
                result.push(xor_arr[right]);
            } else {
                result.push(xor_arr[right] ^ xor_arr[left - 1]);
            }
        }
        result

=======

        let mut ans = vec![];
        for q in &queries {
            let mut num = 0;
            for i in q[0] as usize..=q[1] as usize {
                num ^= arr[i];
            }
            ans.push(num);
        }
        ans
    }
}
