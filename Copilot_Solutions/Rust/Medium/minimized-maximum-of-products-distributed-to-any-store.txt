Synthesizing 7/10 solutions

=======

        let n = n as usize;
        let mut left = 1;
        let mut right = quantities.iter().sum::<i32>();
        while left < right {
            let mid = (left + right) / 2;
            if Solution::can_distribute(mid, n, &quantities) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left
    }
    fn can_distribute(x: i32, n: usize, quantities: &Vec<i32>) -> bool {
        let mut count = 0;
        for &quantity in quantities {
            count += (quantity - 1) / x + 1;
        }
        count <= n

=======

        let n = n as i64;
        let mut lo = 0;
        let mut hi = *quantities.iter().max().unwrap() as i64;
        while lo < hi {
            let mid = (lo + hi) / 2;
            let mut sum = 0;
            for &q in quantities.iter() {
                sum += (q as i64 + mid - 1) / mid;
            }
            if sum <= n {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo as i32

=======

        let n = n as usize;
        let mut quantities = quantities;
        quantities.sort();
        let mut left = 1;
        let mut right = quantities.iter().sum::<i32>() as usize;
        while left < right {
            let mid = (left + right) / 2;
            let mut total = 0;
            for q in quantities.iter().rev() {
                total += (q as usize + mid - 1) / mid;
                if total > n {
                    break;
                }
            }
            if total > n {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        left as i32

=======

        let n = n as usize;
        let mut quantities = quantities;
        quantities.sort();
        quantities.reverse();
        let mut l = 1;
        let mut r = quantities[0];
        let mut ans = r;
        while l <= r {
            let mid = (l + r) / 2;
            let mut sum = 0;
            for &q in quantities.iter() {
                if sum >= n {
                    break;
                }
                sum += q / mid;
            }
            if sum >= n {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        ans

=======

        let mut lo = 1;
        let mut hi = quantities.iter().sum::<i32>();
        while lo < hi {
            let mid = lo + (hi - lo) / 2;
            if Self::check(n, mid, &quantities) {
                hi = mid;
            } else {
                lo = mid + 1;
            }
        }
        lo
    }
    
    fn check(n: i32, x: i32, quantities: &[i32]) -> bool {
        let mut cnt = 0;
        for &q in quantities {
            cnt += (q + x - 1) / x;
        }
        cnt <= n

=======

        let n = n as usize;
        let mut quantities = quantities;
        quantities.sort();
        quantities.reverse();
        let mut left = 1;
        let mut right = quantities[0] as usize;
        while left <= right {
            let mid = (left + right) / 2;
            let mut sum = 0;
            for &q in quantities.iter() {
                sum += q as usize / mid;
                if sum >= n {
                    break;
                }
            }
            if sum >= n {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        left as i32

=======

        let mut quantities = quantities;
        let n = n as usize;
        let m = quantities.len();
        quantities.sort();
        let mut left = 1;
        let mut right = quantities[m - 1];
        let mut ans = right;
        while left <= right {
            let mid = (left + right) / 2;
            let mut total = 0;
            for i in 0..m {
                total += quantities[i] / mid;
                if total >= n {
                    break;
                }
            }
            if total >= n {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        ans
