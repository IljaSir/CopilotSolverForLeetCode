Synthesizing 10/10 solutions

=======

        let mut word1 = word1.chars().collect::<Vec<char>>();
        let mut word2 = word2.chars().collect::<Vec<char>>();
        let mut result = String::new();
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                result.push(word1.remove(0));
            } else {
                result.push(word2.remove(0));
            }
        }
        result

=======

        let mut word1 = word1;
        let mut word2 = word2;
        let mut result = String::new();
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                result.push(word1.chars().next().unwrap());
                word1.remove(0);
            } else {
                result.push(word2.chars().next().unwrap());
                word2.remove(0);
            }
        }
        result

=======

        let mut word1 = word1.into_bytes();
        let mut word2 = word2.into_bytes();
        let mut merge = Vec::new();
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                merge.push(word1.remove(0));
            } else {
                merge.push(word2.remove(0));
            }
        }
        String::from_utf8(merge).unwrap()
    }
}

=======

        let mut res = String::new();
        let (mut word1, mut word2) = (word1.as_bytes(), word2.as_bytes());
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                res.push(word1[0] as char);
                word1 = &word1[1..];
            } else {
                res.push(word2[0] as char);
                word2 = &word2[1..];
            }
        }
        res

=======

        let mut word1 = word1.into_bytes();
        let mut word2 = word2.into_bytes();
        let mut res = vec![];
        while !word1.is_empty() && !word2.is_empty() {
            if word1 > word2 {
                res.push(word1.remove(0));
            } else {
                res.push(word2.remove(0));
            }
        }
        res.append(&mut word1);
        res.append(&mut word2);
        String::from_utf8(res).unwrap()

=======

        let mut word1 = word1.as_bytes().to_vec();
        let mut word2 = word2.as_bytes().to_vec();
        let mut result = Vec::new();
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                result.push(word1.remove(0));
            } else {
                result.push(word2.remove(0));
            }
        }
        String::from_utf8(result).unwrap()

=======

        let (mut w1, mut w2) = (word1.into_bytes(), word2.into_bytes());
        let (mut i, mut j) = (0, 0);
        let mut res = Vec::new();
        while i < w1.len() || j < w2.len() {
            if i == w1.len() {
                res.push(w2[j]);
                j += 1;
            } else if j == w2.len() {
                res.push(w1[i]);
                i += 1;
            } else if w1[i] > w2[j] {
                res.push(w1[i]);
                i += 1;
            } else if w1[i] < w2[j] {
                res.push(w2[j]);
                j += 1;
            } else {
                if w1[i..].iter().zip(w2[j..].iter()).all(|(a, b)| a == b) {
                    res.push(w1[i]);
                    i += 1;
                } else if w1[i..].iter().zip(w2[j..].iter()).all(|(a, b)| a >= b) {
                    res.push(w1[i]);
                    i += 1;
                } else {
                    res.push(w2[j]);
                    j += 1;
                }
            }
        }
        String::from_utf8(res).unwrap()

=======

        let mut res = "".to_string();
        let mut w1 = word1;
        let mut w2 = word2;
        while !w1.is_empty() || !w2.is_empty() {
            if w1 > w2 {
                res.push(w1.remove(0));
            } else {
                res.push(w2.remove(0));
            }
        }
        res

=======

        let mut w1 = word1.as_bytes().to_vec();
        let mut w2 = word2.as_bytes().to_vec();
        let mut res = Vec::new();
        while !w1.is_empty() && !w2.is_empty() {
            if w1 > w2 {
                res.push(w1.remove(0));
            } else {
                res.push(w2.remove(0));
            }
        }
        res.append(&mut w1);
        res.append(&mut w2);
        String::from_utf8(res).unwrap()
    }
}

=======

        let mut ans = String::new();
        let (mut word1, mut word2) = (word1.chars().collect(), word2.chars().collect());
        while !word1.is_empty() || !word2.is_empty() {
            if word1 > word2 {
                ans.push(word1.remove(0));
            } else {
                ans.push(word2.remove(0));
            }
        }
        ans
