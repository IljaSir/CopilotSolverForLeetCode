Synthesizing 10/10 solutions

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] ^= 1;
                }
            }
        }
        for j in 1..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            if cnt < m - cnt {
                for i in 0..m {
                    grid[i][j] ^= 1;
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            let mut sum = 0;
            for j in 0..n {
                sum = sum * 2 + grid[i][j];
            }
            ans += sum;
        }
        ans

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for j in 1..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            if cnt < (m + 1) / 2 {
                for i in 0..m {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            let mut sum = 0;
            for j in 0..n {
                sum = sum * 2 + grid[i][j];
            }
            ans += sum;
        }
        ans

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for j in 1..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            if cnt * 2 < m {
                for i in 0..m {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            let mut tmp = 0;
            for j in 0..n {
                tmp = (tmp << 1) + grid[i][j];
            }
            ans += tmp;
        }
        ans

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for j in 1..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            if cnt < (m + 1) / 2 {
                for i in 0..m {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            for j in 0..n {
                ans += grid[i][j] * (1 << (n - j - 1));
            }
        }
        ans
    }
}

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for j in 1..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            if cnt < m - cnt {
                for i in 0..m {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        let mut ans = 0;
        for i in 0..m {
            let mut base = 1;
            for j in (0..n).rev() {
                ans += grid[i][j] * base;
                base <<= 1;
            }
        }
        ans as i32

=======

        let mut grid = grid;
        let m = grid.len();
        let n = grid[0].len();
        let mut res = m * (1 << (n - 1));
        for j in 1..n {
            let mut n_ones = 0;
            for i in 0..m {
                if grid[i][0] == 1 {
                    n_ones += grid[i][j];
                } else {
                    n_ones += 1 - grid[i][j];
                }
            }
            let k = n_ones.max(m - n_ones);
            res += k * (1 << (n - j - 1));
        }
        res as i32

=======

        let mut grid = grid;
        let mut ans = 0;
        for i in 0..grid.len() {
            if grid[i][0] == 0 {
                for j in 0..grid[i].len() {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }
        for j in 0..grid[0].len() {
            let mut cnt = 0;
            for i in 0..grid.len() {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            ans += (1 << (grid[0].len() - j - 1)) * std::cmp::max(cnt, grid.len() - cnt) as i32;
        }
        ans

=======

        let mut grid = grid;
        let (m, n) = (grid.len(), grid[0].len());
        let mut ans = 0;
        for i in 0..m {
            if grid[i][0] == 0 {
                for j in 0..n {
                    grid[i][j] = if grid[i][j] == 0 { 1 } else { 0 };
                }
            }
        }
        for j in 0..n {
            let mut cnt = 0;
            for i in 0..m {
                if grid[i][j] == 1 {
                    cnt += 1;
                }
            }
            ans += (1 << (n - j - 1)) * cmp::max(cnt, m - cnt);
        }
        ans as i32

=======

        let mut grid = grid;
        for row in &mut grid {
            if row[0] == 0 {
                for i in 0..row.len() {
                    row[i] ^= 1;
                }
            }
        }
        for i in 1..grid[0].len() {
            let mut count = 0;
            for row in &grid {
                if row[i] == 1 {
                    count += 1;
                }
            }
            if count < grid.len() - count {
                for row in &mut grid {
                    row[i] ^= 1;
                }
            }
        }
        let mut ans = 0;
        for row in grid {
            let mut sum = 0;
            for i in 0..row.len() {
                sum = sum * 2 + row[i];
            }
            ans += sum;
        }
        ans

=======

        
    }
}
