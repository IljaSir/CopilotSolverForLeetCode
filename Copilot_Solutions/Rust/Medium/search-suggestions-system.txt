Synthesizing 5/10 solutions

=======

        let mut products = products;
        products.sort();
        let mut result: Vec<Vec<String>> = Vec::new();
        let mut prefix = String::new();
        for ch in search_word.chars() {
            prefix.push(ch);
            let mut suggestions: Vec<String> = Vec::new();
            for product in &products {
                if product.starts_with(&prefix) {
                    suggestions.push(product.clone());
                    if suggestions.len() == 3 {
                        break;
                    }
                }
            }
            result.push(suggestions);
        }
        result
    }
}

=======

        let mut products = products;
        products.sort();
        let mut res = vec![];
        let mut prefix = String::new();
        for c in search_word.chars() {
            prefix.push(c);
            let mut tmp = vec![];
            for p in products.iter() {
                if p.starts_with(&prefix) {
                    tmp.push(p.clone());
                }
                if tmp.len() == 3 {
                    break;
                }
            }
            res.push(tmp);
        }
        res

=======

        let mut result: Vec<Vec<String>> = Vec::new();
        let mut products = products;
        products.sort();
        for i in 0..search_word.len() {
            let mut temp: Vec<String> = Vec::new();
            let mut count = 0;
            for j in 0..products.len() {
                if products[j].starts_with(&search_word[..i+1]) {
                    temp.push(products[j].clone());
                    count += 1;
                }
                if count == 3 {
                    break;
                }
            }
            result.push(temp.clone());
        }
        result

=======

        let mut products = products;
        products.sort();
        let mut result = vec![];
        for i in 1..=search_word.len() {
            let mut tmp = vec![];
            for product in &products {
                if product[..i] == search_word[..i] {
                    tmp.push(product.clone());
                }
                if tmp.len() == 3 {
                    break;
                }
            }
            result.push(tmp);
        }
        result

=======

        let mut res = vec![];
        let mut products = products;
        products.sort();
        let mut word = String::new();
        for c in search_word.chars() {
            word.push(c);
            let mut tmp = vec![];
            for product in products.iter() {
                if product.starts_with(&word) {
                    tmp.push(product.clone());
                    if tmp.len() == 3 {
                        break;
                    }
                }
            }
            res.push(tmp);
        }
        res
    }
}
