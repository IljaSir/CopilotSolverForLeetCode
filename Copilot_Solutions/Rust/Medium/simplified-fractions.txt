Synthesizing 10/10 solutions

=======

        let mut res = Vec::new();
        for i in 2..=n {
            for j in 1..i {
                if gcd(i, j) == 1 {
                    res.push(format!("{}/{}", j, i));
                }
            }
        }
        res
    }
}

=======

        let mut res = vec![];
        for i in 2..=n {
            for j in 1..i {
                if gcd(i, j) == 1 {
                    res.push(format!("{}/{}", j, i));
                }
            }
        }
        res
    }
}

=======

        let mut result = Vec::new();
        for i in 2..=n {
            for j in 1..i {
                if gcd(i, j) == 1 {
                    result.push(format!("{}/{}", j, i));
                }
            }
        }
        result
    }
}

=======

        let mut ans = Vec::new();
        for i in 2..=n {
            for j in 1..i {
                if Solution::gcd(i, j) == 1 {
                    ans.push(format!("{}/{}", j, i));
                }
            }
        }
        ans
    }
    fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            Solution::gcd(b, a % b)
        }

=======

        let mut res = Vec::new();
        for d in 2..=n {
            for n in 1..d {
                if Self::gcd(n, d) == 1 {
                    res.push(format!("{}/{}", n, d));
                }
            }
        }
        res
    }
    fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            Self::gcd(b, a % b)
        }
    }
}

=======

        let mut ans: Vec<String> = Vec::new();
        for i in 2..=n {
            for j in 1..i {
                if Solution::gcd(i, j) == 1 {
                    ans.push(format!("{}/{}", j, i));
                }
            }
        }
        ans
    }
    fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            Solution::gcd(b, a % b)
        }

=======

        let mut ans = vec![];
        for i in 1..=n {
            for j in 1..i {
                if gcd(i, j) == 1 {
                    ans.push(format!("{}/{}", j, i));
                }
            }
        }
        ans
    }
}

=======

        let mut res = Vec::new();
        for i in 1..n {
            for j in i+1..=n {
                if Solution::gcd(i, j) == 1 {
                    res.push(format!("{}/{}", i, j));
                }
            }
        }
        res
    }
    fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            Solution::gcd(b, a % b)
        }

=======

        let mut result = Vec::new();
        for i in 1..n+1 {
            for j in 1..i {
                if Solution::gcd(i, j) == 1 {
                    result.push(format!("{}/{}", j, i));
                }
            }
        }
        result

=======

        let mut res = vec![];
        let mut i = 1;
        while i < n {
            let mut j = i + 1;
            while j <= n {
                if Solution::gcd(i, j) == 1 {
                    res.push(format!("{}/{}", i, j));
                }
                j += 1;
            }
            i += 1;
        }
        res
    }
    pub fn gcd(a: i32, b: i32) -> i32 {
        if b == 0 {
            a
        } else {
            Solution::gcd(b, a % b)
        }
