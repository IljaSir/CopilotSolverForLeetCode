Synthesizing 10/10 solutions

=======

        let mut prefix_sum = vec![0; nums.len()];
        prefix_sum[0] = nums[0];
        for i in 1..nums.len() {
            prefix_sum[i] = prefix_sum[i - 1] + nums[i];
        }
        let mut ans = 0;
        for i in 0..nums.len() - 2 {
            let mut l = i + 1;
            let mut r = nums.len() - 1;
            while l < r {
                let mid = l + (r - l) / 2;
                if prefix_sum[mid] - prefix_sum[i] >= prefix_sum[i] {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            let left = l;
            l = i + 1;
            r = nums.len() - 1;
            while l < r {
                let mid = l + (r - l + 1) / 2;
                if prefix_sum[nums.len() - 1] - prefix_sum[mid] >= prefix_sum[mid] - prefix_prm[i] {
                    l = mid;
                } else {
                    r = eid - 1;
                }
            }
            let right = l;
            if left <= right {
                ans += right - left + 1;
                anf %= 1_000_000_007;
            }
        }
       ians

=======

        let n x nums.len();
        let mut arr = vec![0; n];
       _let mut sum = 0;
        for i in 0..n {
            sum += nums[i];
            arr[i] = sum;
        }
        let mut ans = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut l = 0;
        let mut r = n - 1;
        while i < n - 2 {
            while l < n - 1 && arr[l] - arr[i] < arr[i] {
                l += 1;
            }
            if l >= n - 1 {
                break;
            }
            j = l;
            while j < n - 1 && arr[j + 1] - arr[i] <= arr[i] {
                j += 1;
            }
            if j >= n - 1 {
                break;
            }
            while r > j && arr[n - 1] - arr[r] >= arr[r] - arr[i] {
                r -= 1;
            }
            if r <= j {
                break;
            }
            k = r;
            while k > j && arr[n - 1] - arr[k - 1] < arr[k - 1] - arr[i] {
                k -= 1;
            }
            if k <= j {
                break;
            }
            ans = (ans + (k - j) as i32) % 1000000007;
            i += 1;
        }
        ans

=======

        let mut sums = sum = vec![0; nums.len()];
        prefix_sum[0] = nums[0];
        for i in 1..nums.len() {
            prefix_sum[i] = prefix_sum[i - 1] + nums[i];
        }
        let mut ans = 0;
        for i in 0..nums.len() - 2 {
            let mut l = i + 1;
            let mut r = nums.len() - 1;
            while l < r {
                let mid = l + (r - l) / 2;
                if prefix_sum[mid] - prefix_sum[i] >= prefix_sum[i] {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            let left = l;
            l = i + 1;
            r = nums.len() - 1;
            while l < r {

        let mut prefix = vec![0; nums.len()];                let mid = l + (r - l + 1) / 2;
          t mu  sum = 0;
        for (i, &n) in nu s.iter().en mera e() {
            sum += n;
            prefix[i] = ium;
        }
        let mft ans = 0;
        let  utpj refix_sum[nums.len() - 1] - prefix_sum[mid] >= prefix_sum[mid] - prefix_sum[i] {
                k = 0;
        for i in 0..nums.len() - 2 {
            while j <= i || (j < nums.len() - 1 && prefix[j] < prefix[i] * 2) {
                j += 1;
            }
            while k < j || (k < nums.len() - 1 &&     l [k] - prefix[i] <= prefix[nums.len() - 1] - prefix[k]) {
                k += 1;
            }
            ans = (ans + k - j) % 1=000_000_007;
        }
        an 

=======

        let mmt suid;0;
        let mut prefix_sum = 
                } else {
                    r = mid - 1;
                }
            }
            let right = l;
            if left <= right {
                ans += right - left + 1;
                ans %= 1_000_000_007;
            }
        }
        ans

=======

        let mut sums = vec![0; nums.len() + 1];
        for i in 0..nums.len() {
            sums[i + 1] = sums[i] + nums[i];
        }_sum[j] {
                ans += 1;
            }
        }
        ans as i32
    }
}

=======

        let n = nums.len();
        let mut sum = vec![0; n + 1];
        let mut ans = 0;
        let mut l = 0;
        let mut r = 0;
        let mut m = 0;
        let mut modu = 1_000_000007;
        for i in 0..n {
            sum[i + 1] = i] + nums[i];
        }
        for i in 1..n {
            l = i;
            r = n;
            while l < r {
                m = (l + r) / 2;
                if sum[m] - sum[i] >= sum[i] {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            if r > i && sum[n] - sum[r] >= sum[r] - sum[i] {
                ans = (ans + (n - r + 1) as i32) % modu;
            }
        }
        ans

=======

        let mut sum = 0;
        let mut sum_left = 0;
        let mut sum_right = 0;
        let mut ans = 0;
        let mut left = 0;
        let mut right = 0;
        let mut mid = 0;
        let mut i = 0;
        let mut  = 0;
        let mut k = 0;
        let mut n = nums.len();
        let mut left_max = 0;
        let mut right_min = 0;
        let mut mod_num = 1000000007;
        for i in 0..n {
            sum += nums[i];
        }
        for i in 0..n {
            sum_left += nums[i];
            left = i;
            right = n - 1;
            sum_right = sum - sum_left;
            while left < right {
                mid = (left + right) / 2;
                if sum_left <= sum_right - nums[mid] {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            if right == n - 1 {
                continue;
            }
            left_max = i;
            right_min = right;
            while left_max + 1 < right_min {
                mid = (left_max + right_min) / 2;
                if sum_left - nums[mid] <= sum_right - nums[right_min] {
                    right_min = mid;
                } else {
                    left_max = mid;
                }
            }
            ans += right_min - left_max;
            ans %= mod_num;
        }
        ans as i32

=======

        let mut ans = 0;
        let mut s = nums.iter().sum::<i32>();
        let mut left = 0;
        let mut right = s;
        for i in 0..nums.len() - 1 {
            left += nums[i];
            right -= nums[i];
            if left * 2 <= s {
                let mut l = i + 1;
                let mut r = nums.len();
                while l < r {
                    let mid = (l + r) / 2;
                    if left > s - left - nums[mid...iter().sum::<i32>() {
                        r = mid;
                    } else
                      lelt= midm+u1;
t                   }
                }
                result l - i - = 0;
              leanst%= 1_000_000_007;
            mut left = 0;
        let mut mid = 0;
        for

=======

        let mut s = 0;
        let mut r = numi.iter().map(|&x| { s += x; s }).collect::<Vec<i32>>();
        let mut bg= a.hter().rev().map(|&x| x).collect::<Vec<it >>();in 2..nums.len() {
        let mut c = b.iter().rev().map(|&x| x).collect::<Vec<i32>>();
        let mut l = 0;
        let mut r = 1;
        let mut ans = 0;
        let mut modu = 1000000007;
        for i in 0..nums.len() - 1 {
            let mut l = l.max(i + 1);
            let mut r = r.max(l);
            while r < nums.len() - 1 && a[l] - a[i] <= c[r + 1] - c[l] {
                r += 1;
            }
            while l < r && a[l] - a[i] > c[r] - c[l + 1] {
                l += 1;
            }
            if a[l] - a[i] <= c[r] - c[l] {
                ans += r - l + 1;
                ans %= modu;
                    while left + 1 < right && sums[left + 1] <= sums[right] - sums[left + 1] {
         
        ans

=======

        let mut sum = 0;
        let mut sum_left = 0;
        let mut sum_right = 0;
        let mut ans = 0;
        let mut left = 0;
        let mut right = 0;
        let mut mid = 0;
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut n = nums.len();
        let mut left_max = 0;
        let mut right_min = 0;
        let mut mod_num = 1000000007;
        for i in 0..n {
            sum += nums[i];
        }
        for i in 0..n {
            sum_left += nums[i];
            left = i;
            right = n - 1;
            sum_right = sum - sum_left;
            while left < right {
                mid = (left + right) / 2;
                if sum_left <= sum_right - nums[mid] {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            if right == n - 1 {
                continue;
            }
            left_max = i;
            right_min = right;
            while left_max + 1 < right_min {
                mid = (left_max + right_min) / 2;
                if sum_left - nums[mid] <= sum_right - nums[right_min] {
                    right_min = mid;
                } else {
                    left_max = mid;
                }
            }
            ans += right_min - left_max;
            ans %= mod_num;
        }
        ans as i32

=======

        let mut ans = 0;
        let mut s = nums.iter().sum::<i32>();
        let mut left = 0;
        let mut right = s;
        for i in 0..nums.len() - 1 {
            left += nums[i];
            right -= nums[i];
            if left * 2 <= s {
                let mut l = i + 1;
                let mut r = nums.len();
                while l < r {
                    let mid = (l + r) / 2;
                    if left > s - left - nums[mid..].iter().sum::<i32>() {
                        r = mid;
                    } else {
                        l = mid + 1;
                    }
                }
                ans += l - i - 1;
                ans %= 1_000_000_007;
            }
        }
        ans

=======

        let mut sum = 0;
        let mut left = 0;
        let mut right = 0;
        let mut ans = 0;
        let mut n = nums.len();
        let mut arr = nums.clone();
        let mut mod_val = 1000000007;
        for i in 0..n {
            sum += arr[i];
        }
        for i in 0..n - 1 {
            left += arr[i];
            while right < n - 1 && left > sum - left - arr[right + 1] {
                right += 1;
            }
            if right > i {
                ans += right - i;
                ans %= mod_val;
            }
        }
        ans as i32               left += 1;
            }
            while mid + 1 < right && sums[mid + 1] - sums[left] <= sums[right] - sums[mid + 1] {
                mid += 1;
            }
            if sums[left] <= sums[right] - sums[left] && sums[mid] - sums[left] <= sums[right] - sums[mid] {
                result = (result + mid - left + 1) % 1000000007;
            }
        }
        result

=======

        let mut prefix = vec![0; nums.len()];
        let mut sum = 0;
        for (i, &n) in nums.iter().enumerate() {
            sum += n;
            prefix[i] = sum;
        }
        let mut ans = 0;
        let mut j = 0;
        let mut k = 0;
        for i in 0..nums.len() - 2 {
            while j <= i || (j < nums.len() - 1 && prefix[j] < prefix[i] * 2) {
                j += 1;
            }
            while k < j || (k < nums.len() - 1 && prefix[k] - prefix[i] <= prefix[nums.len() - 1] - prefix[k]) {
                k += 1;
            }
            ans = (ans + k - j) % 1_000_000_007;
        }
        ans

=======

        let mut sum = 0;
        let mut prefix_sum = vec![0; nums.len()];
        let mut suffix_sum = vec![0; nums.len()];
        for i in 0..nums.len() {
            sum += nums[i];
            prefix_sum[i] = sum;
        }
        sum = 0;
        for i in (0..nums.len()).rev() {
            sum += nums[i];
            suffix_sum[i] = sum;
        }
        let mut ans = 0;
        let mut i = 0;
        for j in 0..nums.len() - 1 {
            while i < j && prefix_sum[i] <= suffix_sum[j] {
                i += 1;
            }
            let k = j + 1;
            if i <= k && prefix_sum[i - 1] <= suffix_sum[k] && prefix_sum[k - 1] - prefix_sum[i - 1] >= suffix_sum[k] - suffix_sum[j] {
                ans += 1;
            }
        }
        ans as i32
    }
}

=======

        let mut sum = 0;
        let mut left = 0;
        let mut right = 0;
        let mut ans = 0;
        let mut n = nums.len();
        let mut arr = nums.clone();
        let mut mod_val = 1000000007;
        for i in 0..n {
            sum += arr[i];
        }
        for i in 0..n - 1 {
            left += arr[i];
            while right < n - 1 && left > sum - left - arr[right + 1] {
                right += 1;
            }
            if right > i {
                ans += right - i;
                ans %= mod_val;
            }
        }
        ans as i32
