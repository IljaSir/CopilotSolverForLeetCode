Synthesizing 10/10 solutions

=======
Suggestion 1

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let mut used = vec![false; nums.len()];
        let mut path = Vec::new();
        Self::dfs(&nums, &mut used, &mut path, &mut res);
        res
    }

    fn dfs(nums: &Vec<i32>, used: &mut Vec<bool>, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        let n = nums.len();
        if path.len() == n {
            res.push(path.clone());
            return;
        }
        for i in 0..n {
            if used[i] {
                continue;
            }
            if i > 0 && nums[i] == nums[i - 1] && !used[i - 1] {
                continue;
            }
            path.push(nums[i]);
            used[i] = true;
            Self::dfs(nums, used, path, res);
            used[i] = false;
            path.pop();
        }

=======
Suggestion 2

        let mut nums = nums;
        nums.sort();
        let mut res = Vec::new();
        let mut used = vec![false; nums.len()];
        let mut path = Vec::new();
        Self::dfs(&mut res, &mut used, &mut path, &nums);
        res
    }
    fn dfs(res: &mut Vec<Vec<i32>>, used: &mut Vec<bool>, path: &mut Vec<i32>, nums: &[i32]) {
        if path.len() == nums.len() {
            res.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if used[i] {
                continue;
            }
            if i > 0 && nums[i] == nums[i - 1] && !used[i - 1] {
                continue;
            }
            used[i] = true;
            path.push(nums[i]);
            Self::dfs(res, used, path, nums);
            path.pop();
            used[i] = false;
        }
    }
}

=======
Suggestion 3

        let mut result = vec![];
        let mut nums = nums;
        nums.sort();
        Self::backtrack(&mut result, &mut nums, 0);
        result
    }
    
    fn backtrack(result: &mut Vec<Vec<i32>>, nums: &mut Vec<i32>, start: usize) {
        if start == nums.len() {
            result.push(nums.to_vec());
        } else {
            for i in start..nums.len() {
                if i != start && nums[i] == nums[start] {
                    continue;
                }
                nums.swap(i, start);
                Self::backtrack(result, nums, start + 1);
                nums.swap(i, start);
            }
        }

=======
Suggestion 4

        let mut nums = nums;
        nums.sort();
        let mut res = vec![];
        let mut used = vec![false; nums.len()];
        let mut path = vec![];
        Self::dfs(&mut res, &mut path, &mut used, &nums);
        res
    }
    
    fn dfs(res: &mut Vec<Vec<i32>>, path: &mut Vec<i32>, used: &mut Vec<bool>, nums: &Vec<i32>) {
        if path.len() == nums.len() {
            res.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if used[i] || (i > 0 && nums[i] == nums[i-1] && !used[i-1]) {
                continue;
            }
            used[i] = true;
            path.push(nums[i]);
            Self::dfs(res, path, used, nums);
            path.pop();
            used[i] = false;
        }

=======
Suggestion 5

        let mut nums = nums;
        nums.sort_unstable();
        let mut result = Vec::new();
        let mut used = vec![false; nums.len()];
        let mut path = Vec::new();
        Self::backtrack(&mut nums, &mut used, &mut path, &mut result);
        result
    }

    fn backtrack(
        nums: &mut Vec<i32>,
        used: &mut Vec<bool>,
        path: &mut Vec<i32>,
        result: &mut Vec<Vec<i32>>,
    ) {
        if path.len() == nums.len() {
            result.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if used[i] {
                continue;
            }
            if i > 0 && nums[i] == nums[i - 1] && !used[i - 1] {
                continue;
            }
            used[i] = true;
            path.push(nums[i]);
            Self::backtrack(nums, used, path, result);
            path.pop();
            used[i] = false;
        }
    }
}

=======
Suggestion 6

        let mut res = vec![];
        let mut nums = nums;
        nums.sort();
        let mut visited = vec![false; nums.len()];
        let mut path = vec![];
        Self::backtrack(&nums, &mut visited, &mut path, &mut res);
        res
    }
    fn backtrack(nums: &Vec<i32>, visited: &mut Vec<bool>, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
        if path.len() == nums.len() {
            res.push(path.clone());
            return;
        }
        for i in 0..nums.len() {
            if visited[i] { continue; }
            if i > 0 && nums[i] == nums[i - 1] && !visited[i - 1] { continue; }
            visited[i] = true;
            path.push(nums[i]);
            Self::backtrack(nums, visited, path, res);
            path.pop();
            visited[i] = false;
        }

=======
Suggestion 7

        let mut nums = nums;
        let mut result = vec![];
        nums.sort();
        let mut visited = vec![false; nums.len()];
        let mut path = vec![];
        Self::backtrack(&mut nums, &mut path, &mut visited, &mut result);
        result
    }
    
    fn backtrack(nums: &mut Vec<i32>, path: &mut Vec<i32>, visited: &mut Vec<bool>, result: &mut Vec<Vec<i32>>) {
        if path.len() == nums.len() {
            result.push(path.clone());
            return;
        }
        
        for i in 0..nums.len() {
            if visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {
                continue;
            }
            visited[i] = true;
            path.push(nums[i]);
            Self::backtrack(nums, path, visited, result);
            path.pop();
            visited[i] = false;
        }

=======
Suggestion 8

        let mut nums = nums;
        nums.sort();
        let mut res = vec![];
        let mut visited = vec![0; nums.len()];
        fn backtrack(nums: &mut Vec<i32>, visited: &mut Vec<i32>, path: &mut Vec<i32>, res: &mut Vec<Vec<i32>>) {
            if path.len() == nums.len() {
                res.push(path.clone());
                return;
            }
            for i in 0..nums.len() {
                if visited[i] == 1 {
                    continue;
                }
                if i > 0 && nums[i] == nums[i - 1] && visited[i - 1] == 0 {
                    continue;
                }
                visited[i] = 1;
                path.push(nums[i]);
                backtrack(nums, visited, path, res);
                visited[i] = 0;
                path.pop();
            }
        }
        backtrack(&mut nums, &mut visited, &mut vec![], &mut res);
        res

=======
Suggestion 9

        let mut nums = nums;
        nums.sort();
        let mut ret = vec![vec![]];
        for &num in nums.iter() {
            let mut tmp = vec![];
            for mut v in ret {
                for i in 0..=v.len() {
                    let mut w = v.clone();
                    w.insert(i, num);
                    if !tmp.contains(&w) {
                        tmp.push(w);
                    }
                }
            }
            ret = tmp;
        }
        ret

=======
Suggestion 10

        let mut nums = nums;
        nums.sort_unstable();
        let mut ret = vec![vec![]];
        for &num in nums.iter() {
            let mut new_ret = vec![];
            for r in ret {
                for i in 0..=r.len() {
                    let mut new_r = r.clone();
                    new_r.insert(i, num);
                    if !new_ret.contains(&new_r) {
                        new_ret.push(new_r);
                    }
                }
            }
            ret = new_ret;
        }
        ret
    }
}
