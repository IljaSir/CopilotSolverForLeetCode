Synthesizing 10/10 solutions

=======

        let mut cells = cells;
        let mut n = n;
        while n > 0 {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = if cells[i - 1] == cells[i + 1] { 1 } else { 0 };
            }
            cells = next;
            n -= 1;
            if n > 0 && cells == vec![0, 1, 0, 1, 1, 0, 0, 1] {
                n %= 14;
            }
        }
        cells

=======

        let mut cells = cells;
        let mut n = n;
        let mut seen = vec![];
        while n > 0 {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = if cells[i - 1] == cells[i + 1] { 1 } else { 0 };
            }
            if seen.contains(&next) {
                n %= seen.len() as i32;
            } else {
                seen.push(next.clone());
            }
            if n > 0 {
                n -= 1;
                cells = next;
            }
        }
        cells

=======

        let mut cells = cells;
        let mut n = n as usize;
        let mut seen = vec![];
        while n > 0 {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = (cells[i-1] == cells[i+1]) as i32;
            }
            if let Some(j) = seen.iter().position(|&x| x == next) {
                n %= seen.len() - j;
                seen.truncate(j);
            }
            seen.push(next.clone());
            cells = next;
            n -= 1;
        }
        cells

=======

        let mut cells = cells;
        let n = n as usize;
        let mut seen = vec![];
        let mut is_cycle = false;
        let mut cycle_len = 0;
        for i in 0..n {
            let mut next = vec![0; 8];
            for j in 1..7 {
                next[j] = (cells[j - 1] == cells[j + 1]) as i32;
            }
            if !seen.contains(&next) {
                seen.push(next.clone());
            } else {
                is_cycle = true;
                cycle_len = seen.len();
                break;
            }
            cells = next;
        }
        if is_cycle {
            seen[n % cycle_len].clone()
        } else {
            cells
        }
    }
}

=======

        let mut cells = cells;
        let mut n = n;
        let mut seen = vec![];
        let mut cycle = 0;
        while n > 0 {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = if cells[i - 1] == cells[i + 1] { 1 } else { 0 };
            }
            if seen.contains(&next) {
                cycle = seen.len() - seen.iter().position(|x| x == &next).unwrap();
                break;
            } else {
                seen.push(next.clone());
            }
            cells = next;
            n -= 1;
        }
        while n > 0 {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = if cells[i - 1] == cells[i + 1] { 1 } else { 0 };
            }
            cells = next;
            n -= 1;
        }
        cells

=======

        let mut cells = cells;
        let mut n = n;
        let mut seen = vec![vec![0; 8]; 14];
        let mut i = 0;
        while n > 0 {
            let mut next = vec![0; 8];
            for j in 1..7 {
                next[j] = (cells[j - 1] == cells[j + 1]) as i32;
            }
            if seen[0] == next {
                n %= i;
            } else {
                seen[i] = next;
                i += 1;
            }
            cells = next;
            n -= 1;
        }
        cells
    }
}

=======

        let mut cells = cells;
        let mut seen = Vec::new();
        let mut n = n;
        while n > 0 {
            let mut cells2 = cells.clone();
            seen.push(cells);
            cells2[0] = 0;
            cells2[7] = 0;
            for i in 1..7 {
                cells2[i] = if cells[i-1] == cells[i+1] { 1 } else { 0 }
            }
            cells = cells2;
            n -= 1;
            if let Some(i) = seen.iter().position(|x| x == &cells) {
                n %= seen.len() - i;
            }
        }
        cells

=======

        let n = n as usize;
        let mut cells = cells;
        let mut visited = vec![vec![false; 8]; 2];
        let mut idx = 0;
        for i in 0..n {
            let mut next = vec![0; 8];
            for j in 1..7 {
                next[j] = (cells[j - 1] ^ cells[j + 1]) ^ 1;
            }
            cells = next;
            if visited[cells[0] as usize][cells[7] as usize] {
                idx = i;
                break;
            } else {
                visited[cells[0] as usize][cells[7] as usize] = true;
            }
        }
        if n > idx {
            cells = prison_after_n_days(cells, (n - idx - 1) as i32);
        }
        cells

=======

        let mut cells = cells;
        let mut n = n;
        let mut visited = vec![vec![0; 8]; n as usize];
        let mut i = 0;
        while i < n {
            let mut next = vec![0; 8];
            for j in 1..7 {
                next[j] = if cells[j-1] == cells[j+1] {1} else {0};
            }
            if visited[i as usize] == next {
                n %= i;
                i = 0;
            } else {
                visited[i as usize] = next.clone();
                cells = next;
                i += 1;
            }
        }
        cells

=======

        // The pattern repeats every 14 days.
        // The first day and the 15th day are the same.
        let mut cells = cells;
        let mut n = n % 14;
        if n == 0 {
            n = 14;
        }
        for _ in 0..n {
            let mut next = vec![0; 8];
            for i in 1..7 {
                next[i] = (cells[i - 1] == cells[i + 1]) as i32;
            }
            cells = next;
        }
        cells
