Synthesizing 6/10 solutions

=======

        let start: Vec<char> = start.chars().collect();
        let end: Vec<char> = end.chars().collect();
        let mut i = 0;
        let mut j = 0;
        while i < start.len() && j < end.len() {
            while i < start.len() && start[i] == 'X' {
                i += 1;
            }
            while j < end.len() && end[j] == 'X' {
                j += 1;
            }
            if i == start.len() && j == end.len() {
                return true;
            } else if i == start.len() || j == end.len() {
                return false;
            }
            if start[i] != end[j] {
                return false;
            }
            if start[i] == 'L' && i < j {
                return false;
            }
            if start[i] == 'R' && i > j {
                return false;
            }
            i += 1;
            j += 1;
        }
        true

=======

        let mut i = 0;
        let mut j = 0;
        let start: Vec<char> = start.chars().collect();
        let end: Vec<char> = end.chars().collect();
        while i < start.len() && j < end.len() {
            while i < start.len() && start[i] == 'X' {
                i += 1;
            }
            while j < end.len() && end[j] == 'X' {
                j += 1;
            }
            if i == start.len() || j == end.len() {
                break;
            }
            if start[i] != end[j] {
                return false;
            }
            if start[i] == 'L' && i < j {
                return false;
            }
            if start[i] == 'R' && i > j {
                return false;
            }
            i += 1;
            j += 1;
        }
        while i < start.len() {
            if start[i] != 'X' {
                return false;
            }
            i += 1;
        }
        while j < end.len() {
            if end[j] != 'X' {
                return false;
            }
            j += 1;
        }
        true

=======

        let mut i = 0;
        let mut j = 0;
        let start = start.as_bytes();
        let end = end.as_bytes();
        while i < start.len() && j < end.len() {
            while i < start.len() && start[i] == b'X' {
                i += 1;
            }
            while j < end.len() && end[j] == b'X' {
                j += 1;
            }
            if i == start.len() && j == end.len() {
                return true;
            }
            if i == start.len() || j == end.len() {
                return false;
            }
            if start[i] != end[j] {
                return false;
            }
            if start[i] == b'L' && i < j {
                return false;
            }
            if start[i] == b'R' && i > j {
                return false;
            }
            i += 1;
            j += 1;
        }
        true
    }
}

=======

        let mut start = start.chars().collect::<Vec<_>>();
        let mut end = end.chars().collect::<Vec<_>>();
        let mut i = 0;
        let mut j = 0;
        while i < start.len() && j < end.len() {
            while i < start.len() && start[i] == 'X' {
                i += 1;
            }
            while j < end.len() && end[j] == 'X' {
                j += 1;
            }
            if i == start.len() && j == end.len() {
                return true;
            }
            if i == start.len() || j == end.len() {
                return false;
            }
            if start[i] != end[j] {
                return false;
            }
            if start[i] == 'L' && i < j {
                return false;
            }
            if start[i] == 'R' && i > j {
                return false;
            }
            i += 1;
            j += 1;
        }
        true
    }
}

=======

        let mut start = start.into_bytes();
        let mut end = end.into_bytes();
        let mut i = 0;
        let mut j = 0;
        while i < start.len() && j < end.len() {
            while i < start.len() && start[i] == b'X' { i += 1; }
            while j < end.len() && end[j] == b'X' { j += 1; }
            if i == start.len() || j == end.len() { break; }
            if start[i] != end[j] { return false; }
            if start[i] == b'L' && i < j { return false; }
            if start[i] == b'R' && i > j { return false; }
            i += 1;
            j += 1;
        }
        while i < start.len() { if start[i] != b'X' { return false; } i += 1; }
        while j < end.len() { if end[j] != b'X' { return false; } j += 1; }
        true

=======

        let mut s = start.chars();
        let mut e = end.chars();
        let mut s_l = 0;
        let mut e_l = 0;
        let mut s_r = 0;
        let mut e_r = 0;
        loop {
            let s_c = s.next();
            let e_c = e.next();
            match (s_c, e_c) {
                (Some('L'), Some('L')) => {
                    s_l += 1;
                    e_l += 1;
                },
                (Some('R'), Some('R')) => {
                    s_r += 1;
                    e_r += 1;
                },
                (Some('X'), Some('X')) => (),
                (Some('L'), Some('X')) => {
                    s_l += 1;
                },
                (Some('X'), Some('L')) => {
                    e_l += 1;
                },
                (Some('R'), Some('X')) => {
                    s_r += 1;
                },
                (Some('X'), Some('R')) => {
                    e_r += 1;
                },
                _ => return false,
            }
            if s_l > e_l || s_r > e_r {
                return false;
            }
            if s_c.is_none() && e_c.is_none() {
                return true;
            }
        }
    }
}
