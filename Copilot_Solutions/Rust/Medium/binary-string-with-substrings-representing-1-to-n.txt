Synthesizing 10/10 solutions (Duplicates hidden)

=======

        for i in 1..=n {
            if !s.contains(&i.to_string(2)) {
                return false;
            }
        }
        true

=======

        for i in 1..=n {
            if !s.contains(&i.to_string(2)) {
                return false;
            }
        }
        true
    }
}

=======

        let mut n = n;
        while n > 0 {
            if !s.contains(&format!("{:b}", n)) {
                return false;
            }
            n -= 1;
        }
        true

=======

        let mut n = n;
        while n > 0 {
            if !s.contains(&format!("{:b}", n)) {
                return false;
            }
            n -= 1;
        }
        return true;
    }
}

=======

        let mut result = true;
        for i in 1..=n {
            let s = format!("{:b}", i);
            if !s.contains(&s) {
                result = false;
                break;
            }
        }
        result

=======

        let mut s = s;
        let mut n = n;
        while n > 0 {
            let s1 = format!("{:b}", n);
            if !s.contains(&s1) {
                return false;
            }
            n -= 1;
        }
        true

=======

        let s = s.as_bytes();
        let mut i = 1;
        while i <= n {
            let mut j = 0;
            let mut k = i;
            while k > 0 {
                j += 1;
                k >>= 1;
            }
            let mut k = i;
            let mut l = j;
            while l > 0 {
                l -= 1;
                if s[s.len() - j + l] != (k % 2 + 48) as u8 {
                    return false;
                }
                k >>= 1;
            }
            i += 1;
        }
        true

=======

        let s = s.as_bytes();
        let mut i = 1;
        while i <= n {
            let mut j = i;
            let mut k = 0;
            while j > 0 {
                if j & 1 == 1 {
                    if k >= s.len() || s[s.len() - 1 - k] != b'1' {
                        return false;
                    }
                } else {
                    if k >= s.len() || s[s.len() - 1 - k] != b'0' {
                        return false;
                    }
                }
                j >>= 1;
                k += 1;
            }
            i += 1;
        }
        true
    }
}

=======

        let n = n as usize;
        let mut v = vec![false; n + 1];
        let mut i = 0;
        let mut j = 1;
        while j <= n {
            if s.as_bytes()[i] == '1' as u8 {
                v[j] = true;
            }
            i += 1;
            j *= 2;
        }
        for i in 1..n + 1 {
            if v[i] {
                let mut j = i;
                let mut k = i;
                while k > 0 {
                    if s.as_bytes()[j] == '0' as u8 {
                        return false;
                    }
                    k /= 2;
                    j += 1;
                }
            }
        }
        true
