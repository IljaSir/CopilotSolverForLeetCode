Synthesizing 10/10 solutions

=======

        let k = k as usize;
        let mut count = 0;
        for c in s.chars().take(k) {
            if "aeiou".contains(c) {
                count += 1;
            }
        }
        let mut max = count;
        for (i, c) in s.chars().enumerate().skip(k) {
            if "aeiou".contains(c) {
                count += 1;
            }
            if "aeiou".contains(s.chars().nth(i-k).unwrap()) {
                count -= 1;
            }
            max = std::cmp::max(max, count);
        }
        max

=======

        let k = k as usize;
        let mut res = 0;
        for i in 0..k {
            if "aeiou".contains(s.chars().nth(i).unwrap()) {
                res += 1;
            }
        }
        let mut cur = res;
        for i in k..s.len() {
            if "aeiou".contains(s.chars().nth(i).unwrap()) {
                cur += 1;
            }
            if "aeiou".contains(s.chars().nth(i - k).unwrap()) {
                cur -= 1;
            }
            res = res.max(cur);
        }
        res

=======

        let s: Vec<char> = s.chars().collect();
        let mut max = 0;
        let mut count = 0;
        for i in 0..s.len() {
            if i < k as usize {
                if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {
                    count += 1;
                }
            } else {
                if s[i - k as usize] == 'a' || s[i - k as usize] == 'e' || s[i - k as usize] == 'i' || s[i - k as usize] == 'o' || s[i - k as usize] == 'u' {
                    count -= 1;
                }
                if s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' {
                    count += 1;
                }
            }
            max = max.max(count);
        }
        max

=======

        let mut count = 0;
        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        let k = k as usize;
        let s = s.as_bytes();
        while j < s.len() {
            if is_vowel(s[j]) {
                count += 1;
            }
            if j - i + 1 > k {
                if is_vowel(s[i]) {
                    count -= 1;
                }
                i += 1;
            }
            max = max.max(count);
            j += 1;
        }
        max
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        let k = k as usize;
        let s = s.as_bytes();
        while j < s.len() {
            if is_vowel(s[j]) {
                count += 1;
            }
            j += 1;
            if j - i == k {
                max = std::cmp::max(max, count);
                if is_vowel(s[i]) {
                    count -= 1;
                }
                i += 1;
            }
        }
        max
    }
}

=======

        let mut count = 0;
        let mut max = 0;
        let mut left = 0;
        let mut right = 0;
        let k = k as usize;
        let s = s.as_bytes();
        while right < s.len() {
            if is_vowel(s[right]) {
                count += 1;
            }
            if right - left + 1 == k {
                max = max.max(count);
                if is_vowel(s[left]) {
                    count -= 1;
                }
                left += 1;
            }
            right += 1;
        }
        max
    }
}

=======

        let k = k as usize;
        let mut max = 0;
        let mut count = 0;
        let mut i = 0;
        let mut j = 0;
        let mut chars = s.chars();
        while j < k {
            let c = chars.next().unwrap();
            if Self::is_vowel(c) {
                count += 1;
            }
            j += 1;
        }
        max = count;
        while let Some(c) = chars.next() {
            if Self::is_vowel(c) {
                count += 1;
            }
            if Self::is_vowel(s.chars().nth(i).unwrap()) {
                count -= 1;
            }
            i += 1;
            j += 1;
            max = max.max(count);
        }
        max as i32
    }
    fn is_vowel(c: char) -> bool {
        match c {
            'a' | 'e' | 'i' | 'o' | 'u' => true,
            _ => false,
        }

=======

        let k = k as usize;
        let mut vowels = 0;
        let mut max = 0;
        let mut i = 0;
        let mut j = 0;
        let mut chars = s.chars();
        while j < k {
            let c = chars.next().unwrap();
            if Self::is_vowel(c) {
                vowels += 1;
            }
            j += 1;
        }
        max = vowels;
        while let Some(c) = chars.next() {
            if Self::is_vowel(c) {
                vowels += 1;
            }
            if Self::is_vowel(s.chars().nth(i).unwrap()) {
                vowels -= 1;
            }
            i += 1;
            max = max.max(vowels);
        }
        max
    }
    fn is_vowel(c: char) -> bool {
        match c {
            'a' | 'e' | 'i' | 'o' | 'u' => true,
            _ => false,
        }

=======

        let mut i = 0;
        let mut j = 0;
        let mut max = 0;
        let mut cur = 0;
        let mut s = s.chars().collect::<Vec<_>>();
        while j < s.len() {
            if is_vowel(s[j]) {
                cur += 1;
            }
            if j - i + 1 == k as usize {
                max = max.max(cur);
                if is_vowel(s[i]) {
                    cur -= 1;
                }
                i += 1;
            }
            j += 1;
        }
        max
    }
}

=======

        let mut max = 0;
        let mut count = 0;
        let mut k = k as usize;
        let mut i = 0;
        let mut j = 0;
        let mut chars = s.chars();
        while j < k {
            if "aeiou".contains(chars.next().unwrap()) {
                count += 1;
            }
            j += 1;
        }
        max = count;
        while let Some(c) = chars.next() {
            if "aeiou".contains(c) {
                count += 1;
            }
            if "aeiou".contains(s.chars().nth(i).unwrap()) {
                count -= 1;
            }
            max = max.max(count);
            i += 1;
            j += 1;
        }
        max
