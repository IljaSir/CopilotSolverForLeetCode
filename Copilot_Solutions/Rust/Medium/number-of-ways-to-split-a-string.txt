Synthesizing 9/10 solutions (Duplicates hidden)

=======

        let mut ones = 0;
        for c in s.chars() {
            if c == '1' {
                ones += 1;
            }
        }
        if ones % 3 != 0 {
            return 0;
        }
        if ones == 0 {
            return ((s.len() - 1) * (s.len() - 2) / 2) as i32 % 1000000007;
        }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut l = 0;
        let mut m = 0;
        let mut n = 0;
        let mut o = 0;
        let mut p = 0;
        let mut q = 0;
        let mut r = 0;
        let mut s = 0;
        let mut t = 0;
        let mut u = 0;
        let mut v = 0;
        let mut w = 0;
        let mut x = 0;
        let mut y = 0;
        let mut z = 0;
        let mut a = 0;
        let mut b = 0;
        let mut c = 0;
        let mut d = 0;
        let mut e = 0;
        for c in s.chars() {
            if c == '1' {
                if i == 0 {
                    i = 1;
                } else if j == 0 {
                    j = 1;
                } else if k == 0 {
                    k = 1;
                } else if l == 0 {
                    l = 1;
                } else if m == 0 {
                    m = 1;
                } else if n == 0 {
                    n = 1;
                } else if o == 0 {
                    o = 1;
                } else if p == 0 {
                    p = 1;
                } else if q == 0 {
                    q = 1;
                } else if r == 0 {
                    r = 1;
                } else if s == 0 {
                    s = 1;
                } else if t == 0 {
                    t = 1;
                } else if u == 0 {
                    u = 1;
                } else if v == 0 {
                    v =

=======

        let s: Vec<char> = s.chars().collect();
        let n = s.len();
        let mut ones = 0;
        for i in 0..n {
            if s[i] == '1' {
                ones += 1;
            }
        }
        if ones % 3 != 0 {
            return 0;
        }
        if ones == 0 {
            return ((n - 1) as i64 * (n - 2) as i64 / 2 % 1000000007) as i32;
        }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut count = 0;
        while i < n {
            if s[i] == '1' {
                count += 1;
                if count == ones/3 {
                    j = i + 1;
                    break;
                }
            }
            i += 1;
        }
        while j < n {
            if s[j] == '1' {
                count += 1;
                if count == 2*ones/3 {
                    k = j + 1;
                    break;
                }
            }
            j += 1;
        }
        let mut count1 = 0;
        let mut count2 = 0;
        while i < n {
            if s[i] == '1' {
                break;
            }
            i += 1;
            count1 += 1;
        }
        while j < n {
            if s[j] == '1' {
                break;
            }
            j += 1;
            count2 += 1;
        }
        ((count1 + 1) * (count2 + 1) % 1000000007) as i32

=======

        let mut ones = 0;
        for c in s.chars() {
            ones += if c == '1' { 1 } else { 0 };
        }
        if ones % 3 != 0 {
            return 0;
        }
        if ones == 0 {
            return ((s.len() - 1) * (s.len() - 2) / 2) as i32 % 1000000007;
        }
        let mut left = 0;
        let mut right = 0;
        let mut count = 0;
        for c in s.chars() {
            left += if c == '1' { 1 } else { 0 };
            if left == ones / 3 {
                right += 1;
            }
            if left == ones * 2 / 3 {
                count += right;
            }
        }
        count as i32 % 1000000007

=======

        let n = s.len();
        let mut count = 0;
        for c in s.chars() {
            if c == '1' {
                count += 1;
            }
        }
        if count % 3 != 0 {
            return 0;
        }
        if count == 0 {
            return ((n - 1) * (n - 2) / 2) as i32 % 1000000007;
        }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut l = 0;
        let mut m = 0;
        let mut n = 0;
        let mut p = 0;
        let mut q = 0;
        let mut r = 0;
        let mut s = 0;
        let mut t = 0;
        let mut u = 0;
        for c in s.chars() {
            if c == '1' {
                p += 1;
                if p == count / 3 {
                    i = j;
                }
                if p == count / 3 * 2 {
                    k = l;
                }
                if p == count {
                    m = n;
                }
            }
            j += 1;
            l += 1;
            n += 1;
        }
        for c in s.chars() {
            if c == '1' {
                q += 1;
                if q == count / 3 + 1 {
                    r = s;
                }
                if q == count / 3 * 2 + 1 {
                    t = u;
                }
            }
            s += 1;
            u += 1;
        }
        return ((i - k + 1) * (r - t + 1)) as i32 % 1000000007;

=======

        let s = s.as_bytes();
        let ones = s.iter().filter(|&&x| x == b'1').count();
        if ones % 3 != 0 {
            return 0;
        }
        if ones == 0 {
            let n = s.len();
            return ((n - 1) * (n - 2) / 2) as i32 % 1000000007;
        }
        let ones = ones / 3;
        let mut idx = 0;
        let mut cnt = 0;
        let mut ans = 1;
        for i in 0..s.len() {
            if s[i] == b'1' {
                cnt += 1;
                if cnt == ones {
                    idx = i;
                    break;
                }
            }
        }
        let mut i = idx + 1;
        while s[i] == b'0' {
            i += 1;
        }
        ans *= (i - idx) as i32;
        ans %= 1000000007;
        for i in idx + 1..s.len() {
            if s[i] == b'1' {
                cnt += 1;
                if cnt == 2 * ones {
                    idx = i;
                    break;
                }
            }
        }
        let mut i = idx + 1;
        while s[i] == b'0' {
            i += 1;
        }
        ans *= (i - idx) as i32;
        ans %= 1000000007;
        ans

=======

        let s: Vec<char> = s.chars().collect();
        let n = s.len();
        let mut count = 0;
        for c in s.iter() {
            if *c == '1' {
                count += 1;
            }
        }
        if count % 3 != 0 {
            return 0;
        }
        if count == 0 {
            return (((n - 1) as i64) * ((n - 2) as i64) / 2) as i32 % 1000000007;
        }
        let mut i = 0;
        let mut j = 0;
        let mut k = 0;
        let mut sum = 0;
        let mut res = 1;
        while sum < count / 3 {
            if s[i] == '1' {
                sum += 1;
            }
            i += 1;
        }
        while sum < count * 2 / 3 {
            if s[j] == '1' {
                sum += 1;
            }
            j += 1;
        }
        while sum < count {
            if s[k] == '1' {
                sum += 1;
            }
            k += 1;
        }
        res = (i * (n - j) + (n - k) * j - i * (n - k)) as i32 % 1000000007;
        res

=======

        
    }
}

=======

        let one = s.chars().filter(|&c| c == '1').count();
        if one % 3 != 0 {
            return 0;
        }
        let modu = 1_000_000_007;
        let one = one / 3;
        if one == 0 {
            let n = s.len() - 1;
            return ((n as i64) * (n as i64 - 1) / 2 % modu) as i32;
        }
        let mut count = 0;
        let mut i = 0;
        let mut pos = vec![];
        for c in s.chars() {
            if c == '1' {
                count += 1;
            }
            if count == one {
                pos.push(i);
                count = 0;
            }
            i += 1;
        }
        let (l, r) = (pos[0] + 1, pos[1]);
        ((r - l + 1) * (l) % modu) as i32
