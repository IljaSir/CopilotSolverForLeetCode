Synthesizing 7/10 solutions

=======

        let mut sum = 0;
        let mut count = 0;
        while sum < num {
            sum += k;
            count += 1;
        }
        if sum == num {
            count
        } else {
            -1
        }
    }
}

=======

        
    }
}

=======

        let mut s = 0;
        let mut count = 0;
        while s < num {
            s += k;
            count += 1;
        }
        if s == num {
            count
        } else {
            -1
        }

=======

        let mut num = num;
        let mut count = 0;
        while num > 0 {
            if num % 10 <= k {
                num -= num % 10;
            } else {
                num += 10 - num % 10;
            }
            count += 1;
        }
        count

=======

        let mut sum = num;
        let mut count = 0;
        while sum > 0 {
            if sum % 10 >= k {
                count += 1;
                sum = sum / 10 + 1;
            } else {
                sum /= 10;
            }
        }
        count
    }
}

=======

        if num == 0 {
            return 0;
        }
        if num < k {
            return -1;
        }
        let mut res = 0;
        let mut remain = num;
        while remain > 0 {
            if remain < k {
                res += 1;
                break;
            }
            remain -= k;
            res += 1;
        }
        res

=======

        let mut res = 0;
        let mut n = num;
        while n > 0 {
            let d = (n % 10).min(k);
            res += 1;
            n -= d;
            n /= 10;
        }
        res
