Synthesizing 10/10 solutions

=======

        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort();
        let mut ans = std::i32::MAX;
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans

=======

        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort();
        let mut ans = i32::MAX;
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans

=======

        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort_unstable();
        let mut ans = i32::MAX;
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans
    }
}

=======

        if nums.len() <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = i32::max_value();
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut ans = i32::MAX;
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans
    }
}

=======

        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort_unstable();
        let mut diff = std::i32::MAX;
        for i in 0..4 {
            diff = diff.min(nums[n - 4 + i] - nums[i]);
        }
        diff

=======

        let n = nums.len();
        if n <= 4 {
            return 0;
        }
        let mut nums = nums;
        nums.sort();
        let mut ans = 10i32.pow(9);
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        let mut ans = nums[n - 1] - nums[0];
        for i in 0..4 {
            ans = ans.min(nums[n - 4 + i] - nums[i]);
        }
        ans

=======

        let mut nums = nums;
        nums.sort();
        let n = nums.len();
        if n <= 3 {
            return 0;
        }
        let mut res = (nums[n - 1] - nums[0]) as i64;
        for i in 0..4 {
            res = res.min((nums[n - 4 + i] - nums[i]) as i64);
        }
        res as i32
    }
}

=======

        
    }
}
