Synthesizing 10/10 solutions

=======

        if nums.len() % k as usize != 0 {
            return false;
        }
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut min = nums[i];
            while j < nums.len() {
                if nums[j] != min + 1 {
                    return false;
                }
                min = nums[j];
                j += 1;
                if (j - i) % k as usize == 0 {
                    break;
                }
            }
            nums.drain(i..j);
        }
        true

=======

        if nums.len() % k as usize != 0 {
            return false;
        }
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut count = 1;
            while j < nums.len() {
                if nums[j] == nums[i] {
                    j += 1;
                } else if nums[j] == nums[i] + 1 {
                    count += 1;
                    nums[j] = nums[i];
                    j += 1;
                } else {
                    break;
                }
                if count == k {
                    break;
                }
            }
            if count != k {
                return false;
            }
            i = j;
        }
        true

=======

        let k = k as usize;
        if nums.len() % k != 0 {
            return false;
        }
        let mut nums = nums;
        nums.sort();
        let mut map = std::collections::HashMap::new();
        for &n in nums.iter() {
            *map.entry(n).or_insert(0) += 1;
        }
        for i in 0..nums.len() {
            if nums[i] == -1 {
                continue;
            }
            let mut num = nums[i];
            for j in 0..k {
                if let Some(v) = map.get_mut(&(num + j as i32)) {
                    if *v == 0 {
                        return false;
                    }
                    *v -= 1;
                } else {
                    return false;
                }
            }
        }
        true
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            if nums[i] == 0 {
                i += 1;
                continue;
            }
            let mut j = i + 1;
            let mut n = 1;
            while j < nums.len() && n < k as usize {
                if nums[j] == 0 {
                    j += 1;
                    continue;
                }
                if nums[j] == nums[j - 1] + 1 {
                    nums[j] = 0;
                    n += 1;
                }
                j += 1;
            }
            if n == k as usize {
                nums[i] = 0;
            } else {
                return false;
            }
        }
        true

=======

        if k == 1 { return true; }
        if nums.len() % k as usize != 0 { return false; }
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut count = 1;
            let mut last = nums[i];
            while j < nums.len() {
                if nums[j] == last + 1 {
                    count += 1;
                    last = nums[j];
                    if count == k as usize {
                        nums.remove(i);
                        nums.remove(i);
                        nums.remove(i);
                        i = 0;
                        break;
                    }
                }
                j += 1;
            }
            if count != k as usize { return false; }
            i += 1;
        }
        true
    }
}

=======

        let mut v = nums;
        v.sort();
        let mut i = 0;
        while i < v.len() {
            if v[i] == 0 {
                i += 1;
                continue;
            }
            let mut j = i + 1;
            let mut count = 1;
            let mut last = v[i];
            v[i] = 0;
            while count < k as usize {
                if j >= v.len() {
                    return false;
                }
                if v[j] == 0 {
                    j += 1;
                    continue;
                }
                if v[j] == last + 1 {
                    v[j] = 0;
                    last = v[j];
                    count += 1;
                    j += 1;
                } else if v[j] > last + 1 {
                    return false;
                } else {
                    j += 1;
                }
            }
            i += 1;
        }
        true
    }
}

=======

        let k = k as usize;
        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            while j < nums.len() && nums[j] == nums[j - 1] + 1 {
                j += 1;
            }
            if j - i < k {
                return false;
            }
            let mut m = j - i;
            while m >= k {
                nums.drain(i..i + k);
                m -= k;
            }
            i += m;
        }
        nums.len() == 0

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut count = 1;
            while j < nums.len() && nums[j] == nums[i] {
                j += 1;
                count += 1;
            }
            if count % k != 0 {
                return false;
            }
            let mut k = k;
            while k > 0 {
                let mut j = i + 1;
                while j < nums.len() {
                    if nums[j] == nums[i] + k {
                        nums.remove(j);
                        break;
                    }
                    j += 1;
                }
                k -= 1;
            }
            i += count;
        }
        true

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut count = 1;
            while j < nums.len() {
                if nums[j] == nums[j - 1] + 1 {
                    count += 1;
                    if count == k {
                        break;
                    }
                } else if nums[j] == nums[j - 1] {
                    // do nothing
                } else {
                    break;
                }
                j += 1;
            }
            if count != k {
                return false;
            }
            nums.drain(i..j);
        }
        true
    }
}

=======

        let mut nums = nums;
        nums.sort();
        let mut i = 0;
        while i < nums.len() {
            let mut j = i + 1;
            let mut count = 1;
            while j < nums.len() && count < k {
                if nums[j] == nums[j-1] + 1 {
                    count += 1;
                } else if nums[j] == nums[j-1] {
                    // do nothing
                } else {
                    break;
                }
                j += 1;
            }
            if count == k {
                nums.drain(i..j);
            } else {
                return false;
            }
        }
        nums.is_empty()
