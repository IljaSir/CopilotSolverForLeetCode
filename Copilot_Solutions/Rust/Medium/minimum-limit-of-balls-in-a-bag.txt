Synthesizing 10/10 solutions

=======

        let mut left = 1;
        let mut right = *nums.iter().max().unwrap();
        while left < right {
            let mid = left + (right - left) / 2;
            let mut operations = 0;
            for &num in nums.iter() {
                operations += (num - 1) / mid;
            }
            if operations <= max_operations {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        left

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let m = l + (r - l) / 2;
            let mut ops = 0;
            for n in nums.iter() {
                if *n > m {
                    ops += (n - 1) / m;
                }
            }
            if ops <= max_operations {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let m = (l + r) / 2;
            let mut ops = 0;
            for &x in &nums {
                ops += (x - 1) / m;
            }
            if ops > max_operations {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l
    }
}

=======

        let mut l = 1;
        let mut r = *nums.iter().max().unwrap();
        while l < r {
            let mid = (l + r) / 2;
            let mut ops = 0;
            for &num in nums.iter() {
                ops += (num - 1) / mid;
            }
            if ops <= max_operations {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let m = (l + r) >> 1;
            let mut ops = 0;
            for &n in &nums {
                ops += (n - 1) / m;
            }
            if ops > max_operations {
                l = m + 1;
            } else {
                r = m;
            }
        }
        l

=======

        let (mut l, mut r) = (1, *nums.iter().max().unwrap());
        while l < r {
            let m = l + (r - l) / 2;
            if Self::check(&nums, max_operations, m) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l
    }
    fn check(nums: &[i32], max_operations: i32, m: i32) -> bool {
        let mut operations = 0;
        for &x in nums {
            operations += (x - 1) / m;
            if operations > max_operations {
                return false;
            }
        }
        true

=======

        let mut nums = nums;
        nums.sort();
        let mut l = 1;
        let mut r = nums[nums.len() - 1];
        while l < r {
            let mid = (l + r) / 2;
            let mut count = 0;
            for &num in nums.iter() {
                count += (num - 1) / mid;
            }
            if count <= max_operations {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l
    }
}

=======

        let mut l = 1;
        let mut r = 1_000_000_000;
        while l < r {
            let mid = (l + r) >> 1;
            let mut cnt = 0;
            for &x in &nums {
                cnt += (x - 1) / mid;
            }
            if cnt <= max_operations {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        l

=======

        let mut l = 1;
        let mut r = 1_000_000_000;
        while l < r {
            let m = (l + r) / 2;
            if Solution::check(nums.as_slice(), max_operations, m) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        l
    }

    fn check(nums: &[i32], max_operations: i32, m: i32) -> bool {
        let mut ops = 0;
        for &num in nums {
            ops += (num - 1) / m;
        }
        ops <= max_operations

=======

        
    }
}
