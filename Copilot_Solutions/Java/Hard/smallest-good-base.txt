Synthesizing 8/10 solutions

=======

        long num = Long.parseLong(n);
        int mMax = (int)(Math.log(num) / Math.log(2));
        for (int m = mMax; m > 1; m--) {
            int k = (int)Math.pow(num, 1.0 / m);
            long mul = 1, sum = 1;
            for (int i = 0; i < m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == num) {
                return Integer.toString(k);
            }
        }
        return Long.toString(num - 1);

=======

        long num = Long.parseLong(n);
        int mMax = (int) (Math.log(num) / Math.log(2));
        for (int m = mMax; m > 1; m--) {
            int k = (int) Math.pow(num, 1.0 / m);
            long mul = 1, sum = 1;
            for (int i = 1; i <= m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == num) {
                return Integer.toString(k);
            }
        }
        return Long.toString(num - 1);

=======

        long num = Long.parseLong(n);
        for (int m = (int)(Math.log(num + 1) / Math.log(2)); m >= 2; m--) {
            long k = (long)(Math.pow(num, 1.0 / (m - 1)));
            long mul = 1, sum = 1;
            for (int i = 0; i < m; i++, mul *= k) {
                sum += mul;
            }
            if (sum == num) {
                return String.valueOf(k);
            }
        }
        return String.valueOf(num - 1);

=======

        long num = Long.parseLong(n);
        int max = (int)(Math.log(num) / Math.log(2));
        for (int m = max; m >= 2; m--) {
            long k = (long)Math.pow(num, 1.0 / m);
            long mul = 1, sum = 1;
            for (int i = 1; i <= m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == num) {
                return Long.toString(k);
            }
        }
        return Long.toString(num - 1);

=======

        long num = Long.parseLong(n);
        for (int i = 63; i >= 2; i--) {
            long l = 2;
            long r = (long) Math.pow(num, 1.0 / (i - 1)) + 1;
            while (l < r) {
                long mid = l + (r - l) / 2;
                long sum = 0;
                for (int j = 0; j < i; j++) {
                    sum = sum * mid + 1;
                }
                if (sum == num) {
                    return String.valueOf(mid);
                } else if (sum > num) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
        }
        return String.valueOf(num - 1);

=======

        long num = Long.valueOf(n);
        int max = (int) (Math.log(num) / Math.log(2));
        for (int i = max; i >= 2; i--) {
            long left = 2, right = (long) Math.pow(num, 1.0 / (i - 1)) + 1;
            while (left < right) {
                long mid = left + (right - left) / 2;
                long sum = 0, cur = 1;
                for (int j = 0; j < i; j++) {
                    sum += cur;
                    cur *= mid;
                }
                if (sum == num) {
                    return String.valueOf(mid);
                } else if (sum < num) {
                    left = mid + 1;
                } else {
                    right = mid;
                }
            }
        }
        return String.valueOf(num - 1);

=======

        long num = Long.parseLong(n);
        long res = Long.MAX_VALUE;
        for (int m = (int) (Math.log(num + 1) / Math.log(2)); m >= 2; m--) {
            long k = (long) Math.pow(num, 1.0 / (m - 1));
            long mul = 1, sum = 1;
            for (int i = 1; i < m; i++) {
                mul *= k;
                sum += mul;
            }
            if (sum == num) {
                res = Math.min(res, k);
            }
        }
        return Long.toString(res);

=======

        long num = Long.parseLong(n);
        long max = (long) Math.pow(num, 1.0 / 2.0);
        for (long i = max; i >= 2; i--) {
            long base = (long) Math.pow(num, 1.0 / i);
            long sum = 0;
            for (int j = 0; j <= i; j++) {
                sum = sum * base + 1;
            }
            if (sum == num) {
                return String.valueOf(base);
            }
        }
        return String.valueOf(num - 1);
