Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.offer(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int r = cur[0];
            int c = cur[1];
            int curCost = cur[2];
            if (r == m - 1 && c == n - 1) {
                return curCost;
            }
            for (int i = 0; i < 4; i++) {
                int nr = r + dirs[i][0];
                int nc = c + dirs[i][1];
                int nextCost = curCost;
                if (nr >= 0 && nr < m && nc >= 0 && nc < n) {
                    if (grid[r][c] != i + 1) {
                        nextCost++;
                    }
                    if (nextCost < cost[nr][nc]) {
                        cost[nr][nc] = nextCost;
                        pq.offer(new int[]{nr, nc, nextCost});
                    }
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length, n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            int c = cost[x][y];
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int nc = c + (grid[x][y] == i + 1 ? 0 : 1);
                    if (nc < cost[nx][ny]) {
                        cost[nx][ny] = nc;
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                cost[i][j] = Integer.MAX_VALUE;
            }
        }
        cost[0][0] = 0;
        Deque<int[]> q = new ArrayDeque<>();
        q.add(new int[]{0, 0});
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0], y = cur[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + dirs[i][0];
                int ny = y + dirs[i][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) continue;
                int c = grid[x][y] == i + 1 ? 0 : 1;
                if (cost[nx][ny] > cost[x][y] + c) {
                    cost[nx][ny] = cost[x][y] + c;
                    if (c == 0) q.addFirst(new int[]{nx, ny});
                    else q.addLast(new int[]{nx, ny});
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; ++i) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {0, 0});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0];
            int y = cur[1];
            for (int i = 0; i < 4; ++i) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int ncost = cost[x][y];
                    if (grid[x][y] != i + 1) {
                        ncost++;
                    }
                    if (ncost < cost[nx][ny]) {
                        cost[nx][ny] = ncost;
                        q.offer(new int[] {nx, ny});
                    }
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dir = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.offer(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int i = cur[0];
            int j = cur[1];
            int c = cur[2];
            for (int k = 0; k < 4; k++) {
                int x = i + dir[k][0];
                int y = j + dir[k][1];
                if (x >= 0 && x < m && y >= 0 && y < n) {
                    int nextCost = c + (grid[i][j] == k + 1 ? 0 : 1);
                    if (cost[x][y] > nextCost) {
                        cost[x][y] = nextCost;
                        pq.offer(new int[]{x, y, nextCost});
                    }
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        pq.offer(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[0];
            int y = cur[1];
            int c = cur[2];
            if (x == m - 1 && y == n - 1) {
                return c;
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dirs[i][0];
                int ny = y + dirs[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int nc = c + (grid[x][y] == i + 1 ? 0 : 1);
                    if (nc < cost[nx][ny]) {
                        cost[nx][ny] = nc;
                        pq.offer(new int[]{nx, ny, nc});
                    }
                }
            }
        }
        return -1;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int cost = dist[x][y];
                    if (grid[x][y] != i + 1) {
                        cost++;
                    }
                    if (cost < dist[nx][ny]) {
                        dist[nx][ny] = cost;
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
        }
        return dist[m - 1][n - 1];

=======

        int m = grid.length, n = grid[0].length;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        boolean[][] visited = new boolean[m][n];
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {0, 0});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            visited[x][y] = true;
            for (int i = 0; i < 4; i++) {
                int nx = x + dirs[i][0], ny = y + dirs[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int newCost = cost[x][y] + (grid[x][y] == i + 1 ? 0 : 1);
                    if (newCost < cost[nx][ny]) {
                        cost[nx][ny] = newCost;
                        if (!visited[nx][ny]) {
                            queue.offer(new int[] {nx, ny});
                        }
                    }
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int[] dx = new int[]{0, 0, 1, -1};
        int[] dy = new int[]{1, -1, 0, 0};
        int m = grid.length;
        int n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(cost[i], Integer.MAX_VALUE);
        }
        cost[0][0] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        while (!queue.isEmpty()) {
            int[] p = queue.poll();
            int x = p[0];
            int y = p[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
                    continue;
                }
                int ncost = cost[x][y];
                if (grid[x][y] != i + 1) {
                    ncost++;
                }
                if (ncost < cost[nx][ny]) {
                    cost[nx][ny] = ncost;
                    queue.offer(new int[]{nx, ny});
                }
            }
        }
        return cost[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dir = {{0,1},{0,-1},{1,0},{-1,0}};
        int[][] dist = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> a[0] - b[0]);
        pq.offer(new int[]{0, 0, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int x = cur[1];
            int y = cur[2];
            if (x == m - 1 && y == n - 1) {
                return cur[0];
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dir[i][0];
                int ny = y + dir[i][1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
                    continue;
                }
                int cost = 0;
                if (grid[x][y] != i + 1) {
                    cost = 1;
                }
                if (dist[nx][ny] > cur[0] + cost) {
                    dist[nx][ny] = cur[0] + cost;
                    pq.offer(new int[]{dist[nx][ny], nx, ny});
                }
            }
        }
        return -1;
