Synthesizing 9/10 solutions

=======

        List<List<Integer>> groupGraph = new ArrayList<>();
        for (int i = 0; i < m + n; i++) {
            groupGraph.add(new ArrayList<>());
        }
        List<List<Integer>> itemGraph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            itemGraph.add(new ArrayList<>());
        }
        int[] groupInDegree = new int[m + n];
        int[] itemInDegree = new int[n];
        List<Integer> groupIds = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m + i;
            }
            if (!groupIds.contains(group[i])) {
                groupIds.add(group[i]);
            }
            for (int item : beforeItems.get(i)) {
                if (group[item] != group[i]) {
                    groupGraph.get(group[item]).add(group[i]);
                    groupInDegree[group[i]]++;
                }
                itemGraph.get(item).add(i);
                itemInDegree[i]++;
            }
        }
        List<Integer> groupOrder = topSort(groupGraph, groupInDegree, groupIds);
        if (groupOrder.size() == 0) {
            return new int[0];
        }
        int[] ans = new int[n];
        int index = 0;
        for (int curGroupId : groupOrder) {
            int curGroupSize = 0;
            List<Integer> itemId = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                if (group[i] == curGroupId) {
                    curGroupSize++;
                    itemId.add(i);
                }
            }
            List<Integer> itemOrder = topSort(itemGraph, itemInDegree, itemId);
            if (itemOrder.size() == 0) {
                return new int[0];
            }
            for (int curItemId : itemOrder) {
                ans[index++] = curItemId;
            }
        }
        return ans;
    }
    public List<Integer> topSort(List<List<Integer>> graph, int[] inDegree, List<Integer> ids) {
        Queue<Integer> queue = new LinkedList<>();
        for (int id : ids) {
            if (inDegree[id] == 0) {
                queue.offer(id);
            }
        }
        List<Integer> res = new ArrayList<>();
        while (!

=======

        List<Integer>[] groupGraph = new List[m + n];
        List<Integer>[] itemGraph = new List[n];
        for (int i = 0; i < groupGraph.length; i++) {
            groupGraph[i] = new ArrayList<>();
        }
        for (int i = 0; i < itemGraph.length; i++) {
            itemGraph[i] = new ArrayList<>();
        }
        int[] groupIndegree = new int[m + n];
        int[] itemIndegree = new int[n];
        int[] groupSize = new int[m + n];
        Arrays.fill(groupSize, 1);
        for (int i = 0; i < group.length; i++) {
            if (group[i] == -1) {
                group[i] = m + i;
            }
        }
        for (int i = 0; i < group.length; i++) {
            int curGroup = group[i];
            for (int j : beforeItems.get(i)) {
                int beforeGroup = group[j];
                if (curGroup == beforeGroup) {
                    itemIndegree[i]++;
                    itemGraph[j].add(i);
                } else {
                    groupIndegree[curGroup]++;
                    groupGraph[beforeGroup].add(curGroup);
                }
            }
        }
        List<Integer> groupOrder = topSort(groupGraph, groupIndegree, groupSize);
        if (groupOrder.size() == 0) {
            return new int[0];
        }
        int[] res = new int[n];
        int index = 0;
        for (int curGroup : groupOrder) {
            int groupItemSize = 0;
            if (curGroup < m) {
                groupItemSize = 1;
            }
            List<Integer> itemOrder = topSort(itemGraph, itemIndegree, groupSize);
            if (itemOrder.size() == 0) {
                return new int[0];
            }
            for (int item : itemOrder) {
                if (group[item] == curGroup) {
                    res[index++] = item;
                }
            }
        }
        return res;

=======

        int[] groupIds = new int[n];
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m;
                groupIds[m] = m;
                m++;
            }
        }
        for (int i = 0; i < n; i++) {
            groupIds[i] = group[i];
        }
        Map<Integer, List<Integer>> groupGraph = new HashMap<>();
        Map<Integer, List<Integer>> itemGraph = new HashMap<>();
        int[] groupInDegree = new int[m];
        int[] itemInDegree = new int[n];
        for (int i = 0; i < n; i++) {
            if (itemGraph.get(i) == null) {
                itemGraph.put(i, new ArrayList<>());
            }
            for (int j : beforeItems.get(i)) {
                itemGraph.get(j).add(i);
                itemInDegree[i]++;
            }
        }
        for (int i = 0; i < n; i++) {
            int curGroupId = group[i];
            List<Integer> curGroupItems = groupGraph.getOrDefault(curGroupId, new ArrayList<>());
            curGroupItems.add(i);
            groupGraph.put(curGroupId, curGroupItems);
            for (int j : beforeItems.get(i)) {
                int preGroupId = group[j];
                if (preGroupId != curGroupId) {
                    List<Integer> preGroupItems = groupGraph.getOrDefault(preGroupId, new ArrayList<>());
                    preGroupItems.add(curGroupId);
                    groupGraph.put(preGroupId, preGroupItems);
                    groupInDegree[curGroupId]++;
                }
            }
        }
        List<Integer> groupSorted = topSort(groupGraph, groupInDegree);
        if (groupSorted.size() == 0) {
            return new int[0];
        }
        int[] result = new int[n];
        int index = 0;
        for (int groupId : groupSorted) {
            List<Integer> groupItems = groupGraph.get(groupId);
            if (groupItems.size() == 1) {
                result[index++] = groupItems.get(0);
            } else {
                Map<Integer, List<Integer>> subItemGraph = new HashMap<>();
                int[] subItemInDegree = new int[groupItems.size()];
                for (int i = 0; i < groupItems.size(); i++) {
                    int curItem

=======

        int[] groupItem = new int[m + n];
        for (int i = 0; i < group.length; i++) {
            if (group[i] == -1) {
                group[i] = m++;
            }
            groupItem[group[i]] = i;
        }
        List<Integer>[] groupGraph = new ArrayList[m];
        int[] groupDegree = new int[m];
        for (int i = 0; i < m; i++) {
            groupGraph[i] = new ArrayList<>();
        }
        List<Integer>[] itemGraph = new ArrayList[n];
        int[] itemDegree = new int[n];
        for (int i = 0; i < n; i++) {
            itemGraph[i] = new ArrayList<>();
        }
        for (int i = 0; i < group.length; i++) {
            int curGroup = group[i];
            for (int beforeItem : beforeItems.get(i)) {
                int beforeGroup = group[beforeItem];
                if (beforeGroup == curGroup) {
                    itemDegree[i]++;
                    itemGraph[beforeItem].add(i);
                } else {
                    groupDegree[curGroup]++;
                    groupGraph[beforeGroup].add(curGroup);
                }
            }
        }
        List<Integer> groupList = topologicalSort(groupGraph, groupDegree, groupItem);
        if (groupList.size() == 0) {
            return new int[0];
        }
        int[] ans = new int[n];
        int index = 0;
        for (int curGroup : groupList) {
            int size = 0;
            for (int i = 0; i < group.length; i++) {
                if (group[i] == curGroup) {
                    size++;
                }
            }
            int[] curGroupItem = new int[size];
            int itemId = 0;
            for (int i = 0; i < group.length; i++) {
                if (group[i] == curGroup) {
                    curGroupItem[itemId++] = i;
                }
            }
            List<Integer> res = topologicalSort(itemGraph, itemDegree, curGroupItem);
            if (res.size() == 0) {
                return new int[0];
            }
            for (int item : res) {
                ans[index++] = item;
            }
        }
        return ans;

=======

        int[] res = new int[n];
        int[] groupSize = new int[m];
        int[] groupInDegree = new int[m];
        int[] itemSize = new int[n];
        int[] itemInDegree = new int[n];
        int[] groupMap = new int[n];
        List<Integer>[] groupAdj = new List[m];
        List<Integer>[] itemAdj = new List[n];
        for (int i = 0; i < m; i++) {
            groupAdj[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            itemAdj[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m++;
            }
            groupSize[group[i]]++;
            groupMap[i] = group[i];
        }
        for (int i = 0; i < n; i++) {
            for (int j : beforeItems.get(i)) {
                if (groupMap[j] == groupMap[i]) {
                    itemAdj[j].add(i);
                    itemInDegree[i]++;
                } else {
                    groupAdj[groupMap[j]].add(groupMap[i]);
                    groupInDegree[groupMap[i]]++;
                }
            }
        }
        List<Integer> groupOrder = topSort(groupAdj, groupInDegree, m);
        if (groupOrder.size() == 0) {
            return new int[0];
        }
        int[] groupIndex = new int[m];
        for (int i = 0; i < m; i++) {
            groupIndex[groupOrder.get(i)] = i;
        }
        for (int i = 0; i < n; i++) {
            group[i] = groupIndex[group[i]];
        }
        List<Integer>[] groupItems = new List[m];
        for (int i = 0; i < m; i++) {
            groupItems[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            groupItems[group[i]].add(i);
        }
        for (int i = 0; i < m; i++) {
            List<Integer> itemOrder = topSort(itemAdj, itemInDegree, groupItems[i].size());
            if (itemOrder.size() == 0) {

=======

        int[] res = new int[n];
        int[] groupCount = new int[m];
        int[] groupIn = new int[m];
        int[] itemIn = new int[n];
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m++;
            }
            groupCount[group[i]]++;
        }
        Map<Integer, List<Integer>> groupMap = new HashMap<>();
        for (int i = 0; i < m; i++) {
            groupMap.put(i, new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            groupMap.get(group[i]).add(i);
        }
        Map<Integer, List<Integer>> groupGraph = new HashMap<>();
        Map<Integer, List<Integer>> itemGraph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            groupGraph.put(i, new ArrayList<>());
            itemGraph.put(i, new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            for (int j : beforeItems.get(i)) {
                if (group[j] != group[i]) {
                    groupGraph.get(group[j]).add(group[i]);
                    groupIn[group[i]]++;
                } else {
                    itemGraph.get(j).add(i);
                    itemIn[i]++;
                }
            }
        }
        List<Integer> groups = new ArrayList<>();
        if (!topSort(groupGraph, groupIn, groups)) {
            return new int[0];
        }
        List<Integer> items = new ArrayList<>();
        int[] resIndex = new int[n];
        for (int i = 0; i < groups.size(); i++) {
            int g = groups.get(i);
            items.clear();
            if (!topSort(itemGraph, itemIn, items)) {
                return new int[0];
            }
            for (int item : items) {
                if (group[item] == g) {
                    res[resIndex[g]++] = item;
                }
            }
        }
        return res;

=======

        int[] ans = new int[n];
        int[] groupSize = new int[m];
        int[] groupInDegree = new int[m];
        int[] groupOutDegree = new int[m];
        int[] itemSize = new int[n];
        int[] itemInDegree = new int[n];
        int[] itemOutDegree = new int[n];
        List<Integer>[] groupNext = new List[m];
        List<Integer>[] itemNext = new List[n];
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m++;
            }
            groupSize[group[i]]++;
            itemSize[i]++;
        }
        for (int i = 0; i < n; i++) {
            if (groupNext[group[i]] == null) {
                groupNext[group[i]] = new ArrayList<>();
            }
            if (itemNext[i] == null) {
                itemNext[i] = new ArrayList<>();
            }
            for (int j : beforeItems.get(i)) {
                if (group[j] != group[i]) {
                    groupOutDegree[group[j]]++;
                    groupInDegree[group[i]]++;
                    groupNext[group[j]].add(group[i]);
                } else {
                    itemOutDegree[j]++;
                    itemInDegree[i]++;
                    itemNext[j].add(i);
                }
            }
        }
        int[][] groupOrder = new int[m][];
        for (int i = 0; i < m; i++) {
            if (groupInDegree[i] == 0) {
                groupOrder[i] = topologicalSort(groupNext[i], groupOutDegree);
            }
        }
        int[][] itemOrder = new int[n][];
        for (int i = 0; i < n; i++) {
            if (itemInDegree[i] == 0) {
                itemOrder[i] = topologicalSort(itemNext[i], itemOutDegree);
            }
        }
        int index = 0;
        for (int i = 0; i < m; i++) {
            if (groupOrder[i] != null) {
                for (int j : groupOrder[i]) {
                    if (itemOrder[j] != null) {
                        for (int k : itemOrder[j]) {
                            ans[index++] = k;
                        }
                    }
                }
            }
        }
        return index == n ? ans

=======

        int[] res = new int[n];
        int[] itemGroup = new int[n];
        int[] groupInDegree = new int[m];
        int[] itemInDegree = new int[n];
        int[] groupOutDegree = new int[m];
        int[] itemOutDegree = new int[n];
        int[] groupCount = new int[m];
        int[] itemCount = new int[m];
        int[] groupIndex = new int[m];
        int[] itemIndex = new int[n];
        int[] groupRes = new int[m];
        int[] itemRes = new int[n];
        int[] itemGroupCount = new int[m];
        int[] itemGroupIndex = new int[m];
        int[] itemGroupRes = new int[m];
        int groupNum = m;
        int itemNum = n;
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = groupNum++;
            }
            itemGroup[i] = group[i];
            groupCount[group[i]]++;
        }
        for (int i = 0; i < n; i++) {
            int g = group[i];
            int c = groupCount[g];
            groupIndex[g] = i - c + 1;
            itemIndex[i] = i;
        }
        for (int i = 0; i < n; i++) {
            int g = group[i];
            int c = groupCount[g];
            int index = groupIndex[g];
            groupRes[index + itemGroupCount[g]] = i;
            itemGroupRes[index + itemGroupCount[g]] = g;
            itemGroupCount[g]++;
        }
        for (int i = 0; i < n; i++) {
            int g = group[i];
            int c = groupCount[g];
            int index = groupIndex[g];
            int item = groupRes[i];
            for (int j = 0; j < beforeItems.get(item).size(); j++) {
                int beforeItem = beforeItems.get(item).get(j);
                int beforeGroup = group[beforeItem];
                if (beforeGroup == g) {
                    itemInDegree[i]++;
                    itemOutDegree[index + itemIndex[beforeItem]]++;
                } else {
                    groupInDegree[g]++;
                    groupOutDegree[groupIndex[beforeGroup] + itemGroupIndex[beforeGroup]]

=======

        int[] res = new int[n];
        int[] groupSize = new int[m];
        int[] groupIndegree = new int[m];
        int[] itemIndegree = new int[n];
        int[] groupItemIndegree = new int[n];
        int[] groupRes = new int[n];
        Map<Integer, List<Integer>> groupMap = new HashMap<>();
        Map<Integer, List<Integer>> groupItemMap = new HashMap<>();
        List<List<Integer>> groupList = new ArrayList<>();
        List<List<Integer>> groupItemList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                group[i] = m++;
            }
            groupSize[group[i]]++;
            groupMap.putIfAbsent(group[i], new ArrayList<>());
            groupMap.get(group[i]).add(i);
        }
        for (int i = 0; i < n; i++) {
            for (int j : beforeItems.get(i)) {
                if (group[j] != group[i]) {
                    groupIndegree[group[i]]++;
                    groupItemIndegree[i]++;
                } else {
                    itemIndegree[i]++;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            if (groupSize[i] > 0) {
                groupRes = topologicalSort(groupSize[i], groupIndegree[i], groupItemIndegree, groupMap.get(i), beforeItems, groupItemMap);
                if (groupRes.length == 0) {
                    return new int[0];
                }
                groupList.add(Arrays.stream(groupRes).boxed().collect(Collectors.toList()));
            }
        }
        for (int i = 0; i < groupList.size(); i++) {
            for (int j = 0; j < groupList.get(i).size(); j++) {
                res[groupList.get(i).get(j)] = i;
            }
        }
        for (int i = 0; i < n; i++) {
            groupItemList.add(new ArrayList<>());
        }
        for (int i = 0; i < n; i++) {
            groupItemList.get(res[i]).add(i);
        }
        for (int i = 0; i < groupItemList.size(); i++) {
            if (groupItemList.get(i).size() > 0) {
                groupRes = topological
