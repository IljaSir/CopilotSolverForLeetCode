Synthesizing 9/10 solutions

=======

        if (k == 1) {
            String ans = s;
            for (int i = 0; i < s.length(); ++i) {
                String t = s.substring(i) + s.substring(0, i);
                if (t.compareTo(ans) < 0) ans = t;
            }
            return ans;
        } else {
            char[] ca = s.toCharArray();
            Arrays.sort(ca);
            return new String(ca);
        }

=======

        if (k > 1) {
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            return new String(chars);
        }
        String ans = s;
        for (int i = 1; i < s.length(); ++i) {
            String t = s.substring(i) + s.substring(0, i);
            if (t.compareTo(ans) < 0) {
                ans = t;
            }
        }
        return ans;

=======

        if (k > 1) {
            char[] arr = s.toCharArray();
            Arrays.sort(arr);
            return new String(arr);
        }
        String res = s;
        for (int i = 1; i < s.length(); i++) {
            String tmp = s.substring(i) + s.substring(0, i);
            if (tmp.compareTo(res) < 0) {
                res = tmp;
            }
        }
        return res;

=======

        if (k > 1) {
            char[] c = s.toCharArray();
            Arrays.sort(c);
            return new String(c);
        }
        String ans = s;
        for (int i = 0; i < s.length(); ++i) {
            String t = s.substring(i) + s.substring(0, i);
            if (t.compareTo(ans) < 0) ans = t;
        }
        return ans;

=======

        if (k > 1) {
            char[] ch = s.toCharArray();
            Arrays.sort(ch);
            return new String(ch);
        }
        String ans = s;
        for (int i = 0; i < s.length(); i++) {
            String temp = s.substring(i) + s.substring(0, i);
            if (temp.compareTo(ans) < 0) {
                ans = temp;
            }
        }
        return ans;

=======

        if (k > 1) {
            char[] cs = s.toCharArray();
            Arrays.sort(cs);
            return new String(cs);
        } else {
            String ans = s;
            for (int i = 0; i < s.length(); ++i) {
                String t = s.substring(i) + s.substring(0, i);
                if (t.compareTo(ans) < 0) {
                    ans = t;
                }
            }
            return ans;
        }

=======

        if (k > 1) {
            char[] cs = s.toCharArray();
            Arrays.sort(cs);
            return String.valueOf(cs);
        }
        String ans = s;
        for (int i = 1; i < s.length(); i++) {
            String t = s.substring(i) + s.substring(0, i);
            if (t.compareTo(ans) < 0) {
                ans = t;
            }
        }
        return ans;

=======

        if(k > 1) {
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            return new String(chars);
        }
        String res = s;
        for(int i = 1; i < s.length(); i++) {
            String newStr = s.substring(i) + s.substring(0, i);
            if(newStr.compareTo(res) < 0) {
                res = newStr;
            }
        }
        return res;

=======

        if(k == 1) {
            String ans = s;
            for(int i = 0; i < s.length(); i++) {
                String temp = s.substring(i) + s.substring(0, i);
                if(temp.compareTo(ans) < 0) {
                    ans = temp;
                }
            }
            return ans;
        } else {
            char[] chars = s.toCharArray();
            Arrays.sort(chars);
            return new String(chars);
        }
