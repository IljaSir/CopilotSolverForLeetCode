Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0;
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && (j == nums2.length || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < nums2.length && (i == nums1.length || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = Math.max(sum1, sum2) + nums1[i];
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % MOD);

=======

        int MOD = 1000000007;
        int i = 0, j = 0, sum1 = 0, sum2 = 0;
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && (j == nums2.length || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < nums2.length && (i == nums1.length || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = Math.max(sum1, sum2) + nums1[i];
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % MOD);

=======

        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0;
        while (i < nums1.length || j < nums2.length) {
            if (i == nums1.length) {
                sum2 += nums2[j++];
            } else if (j == nums2.length) {
                sum1 += nums1[i++];
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = Math.max(sum1, sum2) + nums1[i];
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % 1000000007);

=======

        int n = nums1.length;
        int m = nums2.length;
        int i = 0;
        int j = 0;
        int sum1 = 0;
        int sum2 = 0;
        while (i < n && j < m) {
            if (nums1[i] == nums2[j]) {
                sum1 += nums1[i];
                sum2 += nums2[j];
                sum1 = sum1 > sum2 ? sum1 : sum2;
                sum2 = sum1;
                i++;
                j++;
            } else if (nums1[i] < nums2[j]) {
                sum1 += nums1[i];
                i++;
            } else {
                sum2 += nums2[j];
                j++;
            }
        }
        while (i < n) {
            sum1 += nums1[i];
            i++;
        }
        while (j < m) {
            sum2 += nums2[j];
            j++;
        }
        return Math.max(sum1, sum2) % 1000000007;

=======

        int MOD = 1000000007;
        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0, result = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                result += Math.max(sum1, sum2) + nums1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }
        while (i < nums1.length) {
            sum1 += nums1[i++];
        }
        while (j < nums2.length) {
            sum2 += nums2[j++];
        }
        result += Math.max(sum1, sum2);
        return (int) (result % MOD);

=======

        int mod = 1000000007;
        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0, result = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) {
                sum1 += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                sum2 += nums2[j++];
            } else {
                result += Math.max(sum1, sum2) + nums1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }
        while (i < nums1.length) {
            sum1 += nums1[i++];
        }
        while (j < nums2.length) {
            sum2 += nums2[j++];
        }
        result += Math.max(sum1, sum2);
        return (int) (result % mod);

=======

        int n1 = nums1.length, n2 = nums2.length;
        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0, res = 0;
        while (i < n1 || j < n2) {
            if (i < n1 && (j == n2 || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < n2 && (i == n1 || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                res += Math.max(sum1, sum2) + nums1[i];
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }
        res += Math.max(sum1, sum2);
        return (int) (res % 1000000007);

=======

        long MOD = 1000000007;
        long sum1 = 0;
        long sum2 = 0;
        int i = 0;
        int j = 0;
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && (j == nums2.length || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < nums2.length && (i == nums1.length || nums2[j] < nums1[i])) {
                sum2 += nums2[j++];
            } else {
                sum1 = sum2 = Math.max(sum1, sum2) + nums1[i];
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % MOD);

=======

        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0, ans = 0;
        int mod = 1000000007;
        while (i < nums1.length || j < nums2.length) {
            if (i < nums1.length && (j == nums2.length || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < nums2.length && (i == nums1.length || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                ans += Math.max(sum1, sum2) + nums1[i];
                sum1 = sum2 = 0;
                i++;
                j++;
            }
        }
        ans += Math.max(sum1, sum2);
        return (int) (ans % mod);

=======

        int i = 0, j = 0;
        long sum1 = 0, sum2 = 0, mod = (long)1e9 + 7;
        while(i < nums1.length || j < nums2.length) {
            if (i < nums1.length && j < nums2.length) {
                if (nums1[i] < nums2[j]) {
                    sum1 += nums1[i++];
                } else if (nums1[i] > nums2[j]) {
                    sum2 += nums2[j++];
                } else {
                    sum1 = sum2 = Math.max(sum1, sum2) + nums1[i];
                    i++;
                    j++;
                }
            } else if (i < nums1.length) {
                sum1 += nums1[i++];
            } else {
                sum2 += nums2[j++];
            }
        }
        return (int)(Math.max(sum1, sum2) % mod);
