Synthesizing 9/10 solutions

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (colors[i] == -1)
                dfs(graph, colors, i, c++);

        int[] size = new int[c];
        for (int color: colors)
            size[color]++;

        int[] malwareCount = new int[c];
        for (int node: initial)
            malwareCount[colors[node]]++;

        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int color = colors[node];
            if (malwareCount[color] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[color] > size[colors[ans]])
                    ans = node;
                else if (size[color] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int node: initial)
                ans = Math.min(ans, node);
        }

        return ans;
    }

    public void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && colors[nei] == -1)
                dfs(graph, colors, nei, color);

=======

        int n = graph.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[find(parent, i)]++;
        }
        int[] infected = new int[n];
        for (int i : initial) {
            infected[find(parent, i)]++;
        }
        int ans = initial[0];
        for (int i = 0; i < initial.length; i++) {
            int node = initial[i];
            int root = find(parent, node);
            if (infected[root] == 1) {
                if (ans == initial[0] || count[root] > count[find(parent, ans)]) {
                    ans = node;
                } else if (count[root] == count[find(parent, ans)] && node < ans) {
                    ans = node;
                }
            }
        }
        return ans;
    }
    
    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (color[i] == -1)
                dfs(graph, color, i, c++);

        int[] size = new int[c];
        for (int x: color)
            size[x]++;

        int[] malware = new int[c];
        for (int x: initial)
            malware[color[x]]++;

        int ans = Integer.MAX_VALUE;
        for (int x: initial) {
            int u = color[x];
            if (malware[u] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = x;
                else if (size[u] > size[color[ans]])
                    ans = x;
                else if (size[u] == size[color[ans]] && x < ans)
                    ans = x;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int x: initial)
                ans = Math.min(ans, x);

        return ans;

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (color[i] == -1)
                dfs(graph, color, i, c++);

        int[] size = new int[c];
        for (int x: color)
            size[x]++;

        int[] malwareCount = new int[c];
        for (int x: initial)
            malwareCount[color[x]]++;

        int ans = Integer.MAX_VALUE;
        for (int x: initial) {
            int c1 = color[x];
            if (malwareCount[c1] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = x;
                else if (size[c1] > size[color[ans]])
                    ans = x;
                else if (size[c1] == size[color[ans]] && x < ans)
                    ans = x;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int x: initial)
                ans = Math.min(ans, x);
        }

        return ans;

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        int[] size = new int[c];
        for (int x : color) {
            size[x]++;
        }
        int[] infected = new int[c];
        for (int x : initial) {
            infected[color[x]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int x : initial) {
            int cId = color[x];
            if (infected[cId] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = x;
                } else if (size[cId] > size[color[ans]]) {
                    ans = x;
                } else if (size[cId] == size[color[ans]] && x < ans) {
                    ans = x;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int x : initial) {
                ans = Math.min(ans, x);
            }
        }
        return ans;
    }
    void dfs(int[][] graph, int[] color, int node, int cId) {
        color[node] = cId;
        for (int nei = 0; nei < graph.length; nei++) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, nei, cId);
            }
        }

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);

        int c = 0;
        for (int node = 0; node < n; ++node)
            if (colors[node] == -1)
                dfs(graph, colors, node, c++);

        int[] size = new int[c];
        for (int color: colors)
            size[color]++;

        int[] colorCount = new int[c];
        for (int node: initial)
            colorCount[colors[node]]++;

        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c2 = colors[node];
            if (colorCount[c2] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c2] > size[colors[ans]])
                    ans = node;
                else if (size[c2] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int node: initial)
                ans = Math.min(ans, node);

        return ans;

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        int[] size = new int[c];
        for (int x: color) {
            size[x]++;
        }
        int[] malware = new int[c];
        for (int x: initial) {
            malware[color[x]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int x: initial) {
            int c1 = color[x];
            if (malware[c1] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = x;
                } else if (size[c1] > size[color[ans]]) {
                    ans = x;
                } else if (size[c1] == size[color[ans]] && x < ans) {
                    ans = x;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int x: initial) {
                ans = Math.min(ans, x);
            }
        }
        return ans;
    }
    public void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; ++nei) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, nei, c);
            }
        }

=======

        int n = graph.length;
        int[] parent = new int[n];
        Arrays.fill(parent, -1);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[find(parent, i)]++;
        }
        int[] infected = new int[n];
        for (int i : initial) {
            infected[find(parent, i)]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int i : initial) {
            int root = find(parent, i);
            if (infected[root] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = i;
                } else if (count[root] > count[find(parent, ans)]) {
                    ans = i;
                } else if (count[root] == count[find(parent, ans)] && i < ans) {
                    ans = i;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int i : initial) {
                ans = Math.min(ans, i);
            }
        }
        return ans;
    }
    
    private int find(int[] parent, int i) {
        if (parent[i] == -1) {
            return i;
        }
        return parent[i] = find(parent, parent[i]);
    }
    
    private void union(int[] parent, int i, int j) {
        int x = find(parent, i);
        int y = find(parent, j);
        if (x != y) {
            parent[x] = y;
        }

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int[] size = new int[n];
        int c = 0;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                dfs(graph, color, size, i, c++);
            }
        }
        int[] malware = new int[c];
        for (int node : initial) {
            malware[color[node]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int node : initial) {
            int c2 = color[node];
            if (malware[c2] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = node;
                } else if (size[c2] > size[color[ans]]) {
                    ans = node;
                } else if (size[c2] == size[color[ans]] && node < ans) {
                    ans = node;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int node : initial) {
                ans = Math.min(ans, node);
            }
        }
        return ans;
    }
    public void dfs(int[][] graph, int[] color, int[] size, int node, int c) {
        color[node] = c;
        size[c]++;
        for (int nei = 0; nei < graph.length; ++nei) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, size, nei, c);
            }
        }
