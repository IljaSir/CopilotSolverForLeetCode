Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = jobDifficulty.length;
        if (n < d) {
            return -1;
        }
        int[][] dp = new int[d][n];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[0][i] = Math.max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; i++) {
            for (int j = i; j < n; j++) {
                int max = jobDifficulty[j];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = j; k >= i; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k - 1] + max);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.length;
        if (n < d) return -1;
        int[][] dp = new int[d][n];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[0][i] = Math.max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; i++) {
            for (int j = i; j < n; j++) {
                int max = jobDifficulty[j];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = j; k >= i; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k - 1] + max);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.length;
        if (n < d) return -1;
        int[][] dp = new int[d][n];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[0][i] = Math.max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; i++) {
            for (int j = i; j < n; j++) {
                int max = 0;
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = j; k >= i; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k - 1] + max);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.length;
        if (d > n) return -1;
        int[][] dp = new int[d][n];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[0][i] = Math.max(dp[0][i - 1], jobDifficulty[i]);
        }
        for (int i = 1; i < d; i++) {
            for (int j = i; j < n; j++) {
                int max = jobDifficulty[j];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = j; k >= i; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k - 1] + max);
                }
            }
        }
        return dp[d - 1][n - 1];

=======

        int n = jobDifficulty.length;
        if (n < d) return -1;
        int[][] dp = new int[n][d];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], jobDifficulty[i]);
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < d; j++) {
                if (j > i) {
                    dp[i][j] = Integer.MAX_VALUE;
                    continue;
                }
                int max = jobDifficulty[i];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i - 1; k >= j - 1; k--) {
                    max = Math.max(max, jobDifficulty[k + 1]);
                    dp[i][j] = Math.min(dp[i][j], dp[k][j - 1] + max);
                }
            }
        }
        return dp[n - 1][d - 1];

=======

        int n = jobDifficulty.length;
        if (n < d) return -1;
        int[][] dp = new int[n][d];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], jobDifficulty[i]);
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= Math.min(i, d - 1); j++) {
                int max = jobDifficulty[i];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i; k >= j; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[k - 1][j - 1] + max);
                }
            }
        }
        return dp[n - 1][d - 1];

=======

        int n = jobDifficulty.length;
        if (d > n) return -1;
        int[][] dp = new int[n][d];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], jobDifficulty[i]);
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < Math.min(i + 1, d); j++) {
                dp[i][j] = Integer.MAX_VALUE;
                int max = jobDifficulty[i];
                for (int k = i - 1; k >= j - 1; k--) {
                    max = Math.max(max, jobDifficulty[k + 1]);
                    dp[i][j] = Math.min(dp[i][j], dp[k][j - 1] + max);
                }
            }
        }
        return dp[n - 1][d - 1];

=======

        if (d > jobDifficulty.length) {
            return -1;
        }
        int[][] dp = new int[jobDifficulty.length][d];
        dp[0][0] = jobDifficulty[0];
        for (int i = 1; i < jobDifficulty.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], jobDifficulty[i]);
        }
        for (int i = 1; i < d; i++) {
            for (int j = i; j < jobDifficulty.length; j++) {
                int max = jobDifficulty[j];
                dp[j][i] = Integer.MAX_VALUE;
                for (int k = j; k >= i; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[j][i] = Math.min(dp[j][i], dp[k - 1][i - 1] + max);
                }
            }
        }
        return dp[jobDifficulty.length - 1][d - 1];

=======

        int n = jobDifficulty.length;
        if (n < d) return -1;
        int[][] dp = new int[n][d];
        for (int i = 0; i < n; i++) {
            dp[i][0] = i == 0 ? jobDifficulty[i] : Math.max(dp[i - 1][0], jobDifficulty[i]);
        }
        for (int j = 1; j < d; j++) {
            for (int i = j; i < n; i++) {
                int max = jobDifficulty[i];
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i; k >= j; k--) {
                    max = Math.max(max, jobDifficulty[k]);
                    dp[i][j] = Math.min(dp[i][j], dp[k - 1][j - 1] + max);
                }
            }
        }
        return dp[n - 1][d - 1];
