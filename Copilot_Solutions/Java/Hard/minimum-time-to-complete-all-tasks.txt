Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int[] task : tasks) {
            max = Math.max(max, task[1]);
        }
        int[] dp = new int[max + 1];
        for (int[] task : tasks) {
            dp[task[0]] += task[2];
            dp[task[1] + 1] -= task[2];
        }
        int res = 0;
        int count = 0;
        for (int i = 0; i <= max; i++) {
            count += dp[i];
            res = Math.max(res, count);
        }
        return res;

=======

        int n = tasks.length;
        Arrays.sort(tasks, (a, b) -> a[0] - b[0]);
        int[] dp = new int[n];
        dp[0] = tasks[0][2];
        for (int i = 1; i < n; i++) {
            int[] task = tasks[i];
            int start = task[0], end = task[1], duration = task[2];
            dp[i] = dp[i - 1] + duration;
            int j = i - 1;
            while (j >= 0 && tasks[j][1] >= start) {
                dp[i] = Math.min(dp[i], dp[j] + duration + start - tasks[j][1]);
                j--;
            }
        }
        return dp[n - 1];

=======

        int n = tasks.length;
        int[] dp = new int[n];
        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);
        for (int i = 0; i < n; i++) {
            int start = tasks[i][0];
            int end = tasks[i][1];
            int duration = tasks[i][2];
            int idx = binarySearch(tasks, start);
            dp[i] = duration + (idx == -1 ? 0 : dp[idx]);
            if (i > 0) {
                dp[i] = Math.min(dp[i], dp[i - 1]);
            }
        }
        return dp[n - 1];
    }
    
    private int binarySearch(int[][] tasks, int start) {
        int l = 0;
        int r = tasks.length - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (tasks[m][1] < start) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return l == tasks.length ? -1 : l;

=======

        int n = tasks.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = tasks[i][2];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 0; j + i < n; j++) {
                dp[j][j+i] = Integer.MAX_VALUE;
                for (int k = j; k < j + i; k++) {
                    dp[j][j+i] = Math.min(dp[j][j+i], dp[j][k] + dp[k+1][j+i]);
                }
                int start = tasks[j][0];
                int end = tasks[j+i][1];
                int duration = end - start + 1;
                for (int k = j; k <= j + i; k++) {
                    if (tasks[k][0] <= start && tasks[k][1] >= end) {
                        duration -= tasks[k][2];
                    }
                }
                dp[j][j+i] = Math.min(dp[j][j+i], duration);
            }
        }
        return dp[0][n-1];

=======

        int n = tasks.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < (1 << n); i++) {
            int time = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    time = Math.max(time, tasks[j][1]);
                }
            }
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) == 0) {
                    if (time >= tasks[j][0]) {
                        dp[i | (1 << j)] = Math.min(dp[i | (1 << j)], dp[i] + tasks[j][2]);
                    } else {
                        dp[i | (1 << j)] = Math.min(dp[i | (1 << j)], dp[i] + tasks[j][2] + tasks[j][0] - time);
                    }
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = tasks.length;
        int[] dp = new int[2001];
        for (int i = 0; i < n; i++) {
            for (int j = tasks[i][0]; j <= tasks[i][1]; j++) {
                dp[j] += tasks[i][2];
            }
        }
        int res = 0;
        for (int i = 0; i < 2001; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int max = 0;
        for (int[] task : tasks) {
            max = Math.max(max, task[1]);
        }
        int[] dp = new int[max + 2];
        for (int i = 1; i <= max; i++) {
            dp[i] = dp[i - 1];
            for (int[] task : tasks) {
                if (task[0] <= i && i <= task[1]) {
                    dp[i] = Math.max(dp[i], dp[task[0] - 1] + task[2]);
                }
            }
        }
        return dp[max];

=======

        int n = tasks.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < (1 << n); i++) {
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    min = Math.min(min, tasks[j][0]);
                    max = Math.max(max, tasks[j][1]);
                }
            }
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    if (tasks[j][0] <= min && max <= tasks[j][1]) {
                        int prev = i - (1 << j);
                        dp[i] = Math.min(dp[i], dp[prev] + tasks[j][2]);
                    }
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = tasks.length;
        int[] dp = new int[2001];
        for (int i = 0; i < n; ++i) {
            for (int j = tasks[i][0]; j <= tasks[i][1]; ++j) {
                dp[j] = Math.max(dp[j], tasks[i][2]);
            }
        }
        int ans = 0;
        for (int i = 1; i <= 2000; ++i) {
            ans += dp[i];
        }
        return ans;

=======

        int n = tasks.length;
        int[][] dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            dp[i][i] = tasks[i][2];
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                for (int k = i; k < j; k++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j]);
                }
                dp[i][j] = Math.min(dp[i][j], tasks[i][2] + tasks[j][2] + Math.max(tasks[j][1] - tasks[k][0], 0));
            }
        }
        return dp[0][n - 1];
