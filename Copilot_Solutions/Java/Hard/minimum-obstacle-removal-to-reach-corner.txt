Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (i > 0) dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);
                    if (j > 0) dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);
                }
                else {
                    if (i > 0) dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);
                    if (j > 0) dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j]);
                }
                if (j > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1]);
                }
                if (grid[i][j] == 0 && dp[i][j] != Integer.MAX_VALUE) {
                    dp[i][j]++;
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (i > 0) {
                        dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j]);
                    }
                    if (j > 0) {
                        dp[i][j] = Math.min(dp[i][j - 1] + 1, dp[i][j]);
                    }
                } else {
                    if (i > 0) {
                        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j]);
                    }
                    if (j > 0) {
                        dp[i][j] = Math.min(dp[i][j - 1], dp[i][j]);
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }
                for (int[] dir : dirs) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if (x >= 0 && x < m && y >= 0 && y < n) {
                        dp[x][y] = Math.min(dp[x][y], dp[i][j]);
                    }
                }
                if (i != 0 || j != 0) {
                    dp[i][j]++;
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j] = -1;
                } else if (i == 0 && j == 0) {
                    dp[i][j] = 0;
                } else if (i == 0) {
                    dp[i][j] = dp[i][j - 1] == -1 ? -1 : 0;
                } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j] == -1 ? -1 : 0;
                } else {
                    if (dp[i - 1][j] == -1 && dp[i][j - 1] == -1) {
                        dp[i][j] = -1;
                    } else if (dp[i - 1][j] == -1) {
                        dp[i][j] = dp[i][j - 1] + 1;
                    } else if (dp[i][j - 1] == -1) {
                        dp[i][j] = dp[i - 1][j] + 1;
                    } else {
                        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = grid[0][0];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid[i][j]);
                }
                if (j > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + grid[i][j]);
                }
            }
        }
        return dp[m - 1][n - 1] - 1;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1){
                    continue;
                }
                int k = 0;
                while(i+k<m && grid[i+k][j] == 0){
                    dp[i+k][j] = Math.min(dp[i+k][j],dp[i][j]);
                    k++;
                }
                k = 0;
                while(j+k<n && grid[i][j+k] == 0){
                    dp[i][j+k] = Math.min(dp[i][j+k],dp[i][j]);
                    k++;
                }
                if(i>0 && j>0 && grid[i-1][j] == 0 && grid[i][j-1] == 0){
                    dp[i][j] = Math.min(dp[i][j],dp[i-1][j-1]+1);
                }
            }
        }
        return dp[m-1][n-1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        dp[0][0] = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    dp[i][j] = 0;
                }
                if(i > 0){
                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j]);
                }
                if(j > 0){
                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1]);
                }
                if(i > 0 && j > 0){
                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]);
                }
                if(grid[i][j] == 1 && dp[i][j] < Integer.MAX_VALUE){
                    dp[i][j]++;
                }
            }
        }
        return dp[m-1][n-1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist)
            Arrays.fill(row, Integer.MAX_VALUE);
        dist[0][0] = 0;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[]{0, 0});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int i = cur[0], j = cur[1];
            for (int[] dir : dirs) {
                int x = i + dir[0], y = j + dir[1];
                if (x < 0 || x >= m || y < 0 || y >= n)
                    continue;
                if (grid[x][y] == 1) {
                    if (dist[i][j] + 1 < dist[x][y]) {
                        dist[x][y] = dist[i][j] + 1;
                        q.offer(new int[]{x, y});
                    }
                } else {
                    if (dist[i][j] < dist[x][y]) {
                        dist[x][y] = dist[i][j];
                        q.offerFirst(new int[]{x, y});
                    }
                }
            }
        }
        return dist[m - 1][n - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] minObstacles = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(minObstacles[i], Integer.MAX_VALUE);
        }
        int[][] dirs = new int[][] {{1, 0}, {0, 1}};
        minObstacles[0][0] = 0;
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {0, 0});
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0];
            int y = cur[1];
            for (int[] dir : dirs) {
                int nx = x + dir[0];
                int ny = y + dir[1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int obstacles = minObstacles[x][y] + grid[nx][ny];
                    if (obstacles < minObstacles[nx][ny]) {
                        minObstacles[nx][ny] = obstacles;
                        q.offer(new int[] {nx, ny});
                    }
                }
            }
        }
        return minObstacles[m - 1][n - 1];
