Synthesizing 7/10 solutions

=======

        int[] nums = new int[]{1,2,3,4,5,6,7,8,9};
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        return sum;

=======

        long[] nums = new long[n];
        int count = 0;
        long num = 1;
        while (count < n) {
            if (isMirror(num, k)) {
                nums[count++] = num;
            }
            num++;
        }
        long sum = 0;
        for (long num1 : nums) {
            sum += num1;
        }
        return sum;
    }
    private boolean isMirror(long num, int k) {
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % k);
            num /= k;
        }
        String str = sb.toString();
        int len = str.length();
        for (int i = 0; i < len / 2; i++) {
            if (str.charAt(i) != str.charAt(len - 1 - i)) {
                return false;
            }
        }
        return true;

=======

        long[] dp = new long[n+1];
        dp[0] = 1;
        long res = 0;
        for (int i = 1; i <= n; i++) {
            long sum = 0;
            for (int j = 0; j < k; j++) {
                sum += dp[i - 1 - j];
            }
            dp[i] = sum;
            res += sum;
        }
        return res;

=======

        long s = 0;
        for (int i = 1; i <= n; i++) {
            s += mirror(i, k);
        }
        return s;
    }
    public long mirror(long n, int k) {
        long r = 0;
        while (n > 0) {
            r = r * k + n % k;
            n /= k;
        }
        return r;

=======

        long res = 0;
        int[] dp = new int[n];
        dp[0] = 1;
        for(int i=1; i<n; i++){
            dp[i] = dp[i-1]*k;
        }
        for(int i=0; i<n; i++){
            res += dp[i];
        }
        return res;

=======

        long res = 0;
        int[] nums = new int[n];
        int[] digits = new int[30];
        int len = 0;
        for (int i = 1; i < k; i++) {
            nums[0] = i;
            len = 1;
            while (len < n) {
                for (int j = 0; j < len; j++) {
                    nums[len + j] = nums[j];
                }
                len *= 2;
                for (int j = 0; j < len; j++) {
                    nums[j] *= k;
                }
            }
            for (int j = 0; j < len; j++) {
                res += nums[j];
            }
        }
        return res;

=======

        long res = 0;
        int[] arr = new int[32];
        int len = 0;
        int i = 0;
        while (n > 0) {
            arr[i++] = n % k;
            n /= k;
            len++;
        }
        for (int j = 0; j < n; j++) {
            res += getMirrorNum(arr, len, k);
        }
        return res;
    }
    
    private long getMirrorNum(int[] arr, int len, int k) {
        int[] res = new int[len];
        for (int i = 0; i < len; i++) {
            res[i] = arr[i];
        }
        for (int i = 0; i < len; i++) {
            res[len + i] = arr[len - i - 1];
        }
        long sum = 0;
        for (int i = 0; i < 2 * len; i++) {
            sum = sum * k + res[i];
        }
        return sum;
