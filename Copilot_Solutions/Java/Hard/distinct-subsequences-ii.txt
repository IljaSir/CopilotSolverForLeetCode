Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        int[] last = new int[26];
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); ++i) {
            int x = s.charAt(i) - 'a';
            dp[i + 1] = dp[i] * 2 % MOD;
            if (last[x] >= 0)
                dp[i + 1] -= dp[last[x]];
            dp[i + 1] %= MOD;
            last[x] = i;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) dp[s.length()] += MOD;
        return dp[s.length()];

=======

        int mod = 1000000007;
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        int[] last = new int[26];
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            dp[i + 1] = (dp[i] * 2) % mod;
            if (last[c] >= 0) {
                dp[i + 1] -= dp[last[c]];
            }
            dp[i + 1] %= mod;
            last[c] = i;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) {
            dp[s.length()] += mod;
        }
        return dp[s.length()];

=======

        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            dp[i + 1] = (dp[i] * 2) % 1000000007;
            int x = s.charAt(i) - 'a';
            if (last[x] > 0) {
                dp[i + 1] -= dp[last[x] - 1];
            }
            dp[i + 1] %= 1000000007;
            last[x] = i + 1;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) {
            dp[s.length()] += 1000000007;
        }
        return dp[s.length()];

=======

        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            dp[i + 1] = (dp[i] * 2) % 1000000007;
            if (last[c] > 0) {
                dp[i + 1] -= dp[last[c] - 1];
            }
            dp[i + 1] %= 1000000007;
            last[c] = i + 1;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) {
            dp[s.length()] += 1000000007;
        }
        return dp[s.length()];

=======

        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        int[] last = new int[26];
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); ++i) {
            dp[i + 1] = dp[i] * 2 % 1000000007;
            if (last[s.charAt(i) - 'a'] >= 0) {
                dp[i + 1] -= dp[last[s.charAt(i) - 'a']];
            }
            dp[i + 1] %= 1000000007;
            last[s.charAt(i) - 'a'] = i;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) {
            dp[s.length()] += 1000000007;
        }
        return dp[s.length()];

=======

        int[] dp = new int[s.length()+1];
        dp[0] = 1;
        int[] last = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int x = s.charAt(i)-'a';
            dp[i+1] = (2*dp[i])%1000000007;
            if (last[x] > 0) {
                dp[i+1] -= dp[last[x]-1];
            }
            dp[i+1] %= 1000000007;
            last[x] = i+1;
        }
        dp[s.length()]--;
        if (dp[s.length()] < 0) {
            dp[s.length()] += 1000000007;
        }
        return dp[s.length()];

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        int[] last = new int[26];
        int mod = 1000000007;
        Arrays.fill(last, -1);
        dp[0] = 1;
        for (int i = 0; i < n; ++i) {
            int x = s.charAt(i) - 'a';
            dp[i + 1] = dp[i] * 2 % mod;
            if (last[x] >= 0) {
                dp[i + 1] -= dp[last[x]];
            }
            dp[i + 1] %= mod;
            last[x] = i;
        }
        dp[n]--;
        if (dp[n] < 0) {
            dp[n] += mod;
        }
        return dp[n];

=======

        int n = s.length();
        int[] dp = new int[n];
        int res = 0;
        int mod = 1000000007;
        for (int i = 0; i < n; i++) {
            dp[i] = res + 1;
            for (int j = 0; j < i; j++) {
                if (s.charAt(j) != s.charAt(i)) {
                    dp[i] += dp[j];
                    dp[i] %= mod;
                }
            }
            res += dp[i];
            res %= mod;
        }
        return res;

=======

        int mod = 1000000007;
        int[] count = new int[26];
        int sum = 0;
        for (char c : s.toCharArray()) {
            int prev = sum;
            sum = (sum * 2 + 1) % mod;
            sum = (sum - count[c - 'a'] + mod) % mod;
            count[c - 'a'] = prev;
        }
        return sum;

=======

        int[] dp = new int[26];
        int mod = 1_000_000_007;
        int ans = 1;
        for (char c : s.toCharArray()) {
            int idx = c - 'a';
            int old = dp[idx];
            dp[idx] = ans;
            ans = (ans * 2 - old) % mod;
        }
        return ans - 1;
