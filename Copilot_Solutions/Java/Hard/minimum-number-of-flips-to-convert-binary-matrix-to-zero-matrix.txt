Synthesizing 10/10 solutions

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int[] visited = new int[(int)Math.pow(2, m*n)];
        Queue<Integer> queue = new LinkedList<>();
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start += mat[i][j] << (i*n + j);
            }
        }
        queue.offer(start);
        visited[start] = 1;
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == 0) {
                    return step;
                }
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0];
                            int y = k + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n) {
                                next ^= 1 << (x*n + y);
                            }
                        }
                        if (visited[next] == 0) {
                            queue.offer(next);
                            visited[next] = 1;
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int num = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                num = num * 2 + mat[i][j];
            }
        }
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(num);
        Set<Integer> visited = new HashSet<>();
        visited.add(num);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == 0) {
                    return step;
                }
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int newNum = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0];
                            int y = k + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n) {
                                int index = x * n + y;
                                newNum ^= 1 << index;
                            }
                        }
                        if (!visited.contains(newNum)) {
                            queue.offer(newNum);
                            visited.add(newNum);
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dirs = new int[][]{{0, 0}, {0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start += mat[i][j] << (i * n + j);
            }
        }
        queue.offer(start);
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == 0) {
                    return step;
                }
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0];
                            int y = k + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n) {
                                next ^= 1 << (x * n + y);
                            }
                        }
                        if (!visited.contains(next)) {
                            queue.offer(next);
                            visited.add(next);
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dirs = new int[][]{{0, 0}, {0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int target = 0;
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] == 1) {
                    target |= 1 << (i * n + j);
                }
                if ((i + j) % 2 == 0) {
                    start |= 1 << (i * n + j);
                }
            }
        }
        if (target == 0) {
            return 0;
        }
        if (start == target) {
            return 1;
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        Set<Integer> visited = new HashSet<>();
        visited.add(start);
        int step = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int current = queue.poll();
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next = current;
                        for (int[] dir : dirs) {
                            int x = j + dir[0];
                            int y = k + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n) {
                                next ^= 1 << (x * n + y);
                            }
                        }
                        if (next == target) {
                            return step + 1;
                        }
                        if (!visited.contains(next)) {
                            queue.add(next);
                            visited.add(next);
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length, n = mat[0].length;
        int[][] dirs = new int[][]{{0, 0}, {0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Queue<Integer> q = new LinkedList<>();
        Set<Integer> seen = new HashSet<>();
        int target = 0;
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start |= mat[i][j] << (i * n + j);
                target |= 0 << (i * n + j);
            }
        }
        q.offer(start);
        seen.add(start);
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int cur = q.poll();
                if (cur == target) return step;
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0], y = k + dir[1];
                            if (x < 0 || x >= m || y < 0 || y >= n) continue;
                            next ^= 1 << (x * n + y);
                        }
                        if (!seen.contains(next)) {
                            q.offer(next);
                            seen.add(next);
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        int[][] dirs = new int[][]{{0, 0}, {0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int total = 1 << (m * n);
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start = start * 2 + mat[i][j];
            }
        }
        queue.offer(start);
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == 0) {
                    return step;
                }
                for (int j = 0; j < total; j++) {
                    int next = cur;
                    for (int[] dir : dirs) {
                        int x = j / n + dir[0];
                        int y = j % n + dir[1];
                        if (x >= 0 && x < m && y >= 0 && y < n) {
                            next ^= (1 << (x * n + y));
                        }
                    }
                    if (!visited.contains(next)) {
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int M = mat.length;
        int N = mat[0].length;
        int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Set<Integer> seen = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        int start = 0;
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                start |= mat[i][j] << (i * N + j);
            }
        }
        queue.offer(start);
        seen.add(start);
        int steps = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                if (cur == 0) {
                    return steps;
                }
                for (int j = 0; j < M; j++) {
                    for (int k = 0; k < N; k++) {
                        int next = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0];
                            int y = k + dir[1];
                            if (x >= 0 && x < M && y >= 0 && y < N) {
                                next ^= 1 << (x * N + y);
                            }
                        }
                        if (!seen.contains(next)) {
                            queue.offer(next);
                            seen.add(next);
                        }
                    }
                }
            }
            steps++;
        }
        return -1;

=======

        int m = mat.length, n = mat[0].length;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Queue<Integer> q = new LinkedList<>();
        Set<Integer> seen = new HashSet<>();
        int start = 0, step = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start |= mat[i][j] << (i * n + j);
            }
        }
        if (start == 0) {
            return 0;
        }
        q.offer(start);
        seen.add(start);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int cur = q.poll();
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int tmp = cur;
                        for (int[] dir : dirs) {
                            int x = j + dir[0], y = k + dir[1];
                            if (x >= 0 && x < m && y >= 0 && y < n) {
                                tmp ^= 1 << (x * n + y);
                            }
                        }
                        if (tmp == 0) {
                            return step + 1;
                        }
                        if (!seen.contains(tmp)) {
                            q.offer(tmp);
                            seen.add(tmp);
                        }
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dir = new int[][] {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        int start = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                start = start * 2 + mat[i][j];
            }
        }
        if (start == 0) {
            return 0;
        }
        queue.offer(start);
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            step++;
            for (int i = 0; i < size; i++) {
                int cur = queue.poll();
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next = cur;
                        for (int[] d : dir) {
                            int x = j + d[0];
                            int y = k + d[1];
                            if (x < 0 || x >= m || y < 0 || y >= n) {
                                continue;
                            }
                            next ^= 1 << (m * n - (x * n + y) - 1);
                        }
                        if (next == 0) {
                            return step;
                        }
                        if (!visited.contains(next)) {
                            queue.offer(next);
                            visited.add(next);
                        }
                    }
                }
            }
        }
        return -1;

=======

        int m = mat.length;
        int n = mat[0].length;
        int[][] dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int state = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                state = (state << 1) + mat[i][j];
            }
        }
        if (state == 0) return 0;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(state);
        int step = 0;
        Set<Integer> visited = new HashSet<>();
        visited.add(state);
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int cur_state = queue.poll();
                for (int j = 0; j < m; j++) {
                    for (int k = 0; k < n; k++) {
                        int next_state = cur_state;
                        for (int[] d : dir) {
                            int x = j + d[0];
                            int y = k + d[1];
                            if (x < 0 || x >= m || y < 0 || y >= n) continue;
                            next_state ^= (1 << (x * n + y));
                        }
                        if (next_state == 0) return step;
                        if (visited.contains(next_state)) continue;
                        queue.offer(next_state);
                        visited.add(next_state);
                    }
                }
            }
        }
        return -1;
