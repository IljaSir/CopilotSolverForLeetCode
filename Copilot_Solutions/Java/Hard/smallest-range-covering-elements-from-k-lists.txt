Synthesizing 8/10 solutions

=======

        int k = nums.size();
        int[] idx = new int[k];
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < k; i++) {
            min = Math.min(min, nums.get(i).get(0));
            max = Math.max(max, nums.get(i).get(0));
        }
        int range = max - min;
        int start = min;
        int end = max;
        boolean flag = true;
        while (flag) {
            flag = false;
            min = Integer.MAX_VALUE;
            max = Integer.MIN_VALUE;
            int minIdx = 0;
            for (int i = 0; i < k; i++) {
                if (idx[i] < nums.get(i).size() && nums.get(i).get(idx[i]) < min) {
                    min = nums.get(i).get(idx[i]);
                    minIdx = i;
                }
            }
            idx[minIdx]++;
            for (int i = 0; i < k; i++) {
                if (idx[i] < nums.get(i).size()) {
                    flag = true;
                    max = Math.max(max, nums.get(i).get(idx[i]));
                }
            }
            if (max - min < range) {
                range = max - min;
                start = min;
                end = max;
            }
        }
        return new int[]{start, end};

=======

        int n = nums.size();
        int[] idx = new int[n];
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            min = Math.min(min, nums.get(i).get(0));
            max = Math.max(max, nums.get(i).get(0));
        }
        int[] ans = new int[] {min, max};
        while (true) {
            int minIdx = -1;
            min = Integer.MAX_VALUE;
            for (int i = 0; i < n; i++) {
                if (idx[i] + 1 < nums.get(i).size()) {
                    if (nums.get(i).get(idx[i] + 1) < min) {
                        min = nums.get(i).get(idx[i] + 1);
                        minIdx = i;
                    }
                }
            }
            if (minIdx == -1) {
                break;
            }
            idx[minIdx]++;
            min = Integer.MAX_VALUE;
            max = Integer.MIN_VALUE;
            for (int i = 0; i < n; i++) {
                min = Math.min(min, nums.get(i).get(idx[i]));
                max = Math.max(max, nums.get(i).get(idx[i]));
            }
            if (max - min < ans[1] - ans[0]) {
                ans = new int[] {min, max};
            }
        }
        return ans;

=======

        int k = nums.size();
        int[] idxs = new int[k];
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int i = 0; i < k; i++) {
            min = Math.min(min, nums.get(i).get(0));
            max = Math.max(max, nums.get(i).get(0));
        }
        int[] res = {min, max};
        while (true) {
            int minIdx = 0, minVal = Integer.MAX_VALUE;
            for (int i = 0; i < k; i++) {
                if (idxs[i] < nums.get(i).size() && nums.get(i).get(idxs[i]) < minVal) {
                    minVal = nums.get(i).get(idxs[i]);
                    minIdx = i;
                }
            }
            idxs[minIdx]++;
            if (idxs[minIdx] == nums.get(minIdx).size()) break;
            min = Math.min(min, nums.get(minIdx).get(idxs[minIdx]));
            max = Math.max(max, nums.get(minIdx).get(idxs[minIdx]));
            if (max - min < res[1] - res[0]) {
                res[0] = min;
                res[1] = max;
            }
        }
        return res;

=======

        int n = nums.size();
        int[] idx = new int[n];
        int[] min = new int[n];
        int[] max = new int[n];
        for (int i = 0; i < n; i++) {
            min[i] = nums.get(i).get(0);
            max[i] = nums.get(i).get(nums.get(i).size() - 1);
        }
        int[] ans = new int[2];
        int[] range = new int[] {Integer.MAX_VALUE, Integer.MIN_VALUE};
        while (true) {
            int minIdx = 0;
            for (int i = 1; i < n; i++) {
                if (min[minIdx] > min[i]) {
                    minIdx = i;
                }
            }
            if (max[minIdx] - min[minIdx] < range[1] - range[0]) {
                range[0] = min[minIdx];
                range[1] = max[minIdx];
            }
            if (idx[minIdx] == nums.get(minIdx).size() - 1) {
                break;
            }
            min[minIdx] = nums.get(minIdx).get(++idx[minIdx]);
            max[minIdx] = Math.max(max[minIdx], min[minIdx]);
        }
        return range;

=======

        int[] res = new int[2];
        int k = nums.size();
        int[] next = new int[k];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < k; i++) {
            pq.offer(new int[]{nums.get(i).get(0), i});
            max = Math.max(max, nums.get(i).get(0));
        }
        int[] cur = pq.poll();
        res[0] = cur[0];
        res[1] = max;
        while (cur[1] < nums.get(cur[1]).size() - 1) {
            cur[0] = nums.get(cur[1]).get(++next[cur[1]]);
            pq.offer(cur);
            max = Math.max(max, cur[0]);
            cur = pq.poll();
            if (max - cur[0] < res[1] - res[0]) {
                res[0] = cur[0];
                res[1] = max;
            }
        }
        return res;

=======

        int[] res = new int[2];
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        int n = nums.size();
        int[] indexes = new int[n];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < n; i++) {
            pq.offer(new int[]{nums.get(i).get(0), i});
            max = Math.max(max, nums.get(i).get(0));
        }
        while (true) {
            int[] cur = pq.poll();
            int row = cur[1];
            min = cur[0];
            if (max - min < res[1] - res[0] || (max - min == res[1] - res[0] && min < res[0])) {
                res[0] = min;
                res[1] = max;
            }
            indexes[row]++;
            if (indexes[row] == nums.get(row).size()) {
                break;
            }
            pq.offer(new int[]{nums.get(row).get(indexes[row]), row});
            max = Math.max(max, nums.get(row).get(indexes[row]));
        }
        return res;

=======

        int N = nums.size();
        int[] indexes = new int[N];
        int[] min = new int[N];
        int[] max = new int[N];
        int[] result = new int[2];
        int minMax = Integer.MAX_VALUE;
        int maxMin = Integer.MIN_VALUE;
        int minIndex = 0;
        int maxIndex = 0;
        for (int i = 0; i < N; i++) {
            min[i] = nums.get(i).get(0);
            max[i] = nums.get(i).get(nums.get(i).size() - 1);
            if (min[i] < min[minIndex]) {
                minIndex = i;
            }
            if (max[i] > max[maxIndex]) {
                maxIndex = i;
            }
        }
        minMax = max[minIndex];
        maxMin = min[maxIndex];
        while (true) {
            if (minMax - maxMin < result[1] - result[0]) {
                result[0] = maxMin;
                result[1] = minMax;
            }
            if (indexes[minIndex] == nums.get(minIndex).size() - 1) {
                break;
            }
            indexes[minIndex]++;
            if (nums.get(minIndex).get(indexes[minIndex]) > minMax) {
                minMax = nums.get(minIndex).get(indexes[minIndex]);
            }
            maxMin = Integer.MAX_VALUE;
            for (int i = 0; i < N; i++) {
                if (nums.get(i).get(indexes[i]) < maxMin) {
                    maxMin = nums.get(i).get(indexes[i]);
                    maxIndex = i;
                }
            }
        }
        return result;

=======

        // Use a heap to find the smallest range
        // The heap will store the index of the list, the index of the element in the list, and the value of the element
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.size(); i++) {
            pq.add(new int[]{i, 0, nums.get(i).get(0)});
            max = Math.max(max, nums.get(i).get(0));
        }
        int[] res = new int[]{pq.peek()[2], max};
        while (true) {
            int[] cur = pq.poll();
            if (cur[1] == nums.get(cur[0]).size() - 1) {
                break;
            }
            pq.add(new int[]{cur[0], cur[1] + 1, nums.get(cur[0]).get(cur[1] + 1)});
            max = Math.max(max, nums.get(cur[0]).get(cur[1] + 1));
            if (res[1] - res[0] > max - pq.peek()[2]) {
                res = new int[]{pq.peek()[2], max};
            }
        }
        return res;
