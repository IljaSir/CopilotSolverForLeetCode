Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, n + 2);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            int l = Math.max(i - ranges[i], 0);
            int r = Math.min(i + ranges[i], n);
            for (int j = l; j <= r; j++) {
                dp[j] = Math.min(dp[j], dp[l] + 1);
            }
        }
        return dp[n] < n + 2 ? dp[n] : -1;

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, n + 2);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            for (int j = Math.max(0, i - ranges[i]); j <= Math.min(n, i + ranges[i]); j++) {
                dp[j] = Math.min(dp[j], dp[Math.max(0, i - ranges[i])] + 1);
            }
        }
        return dp[n] < n + 2 ? dp[n] : -1;

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            for (int j = Math.max(0, i - ranges[i]); j <= Math.min(n, i + ranges[i]); j++) {
                dp[j] = Math.min(dp[j], dp[Math.max(0, i - ranges[i])] + 1);
            }
        }
        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            int left = Math.max(i - ranges[i], 0);
            int right = Math.min(i + ranges[i], n);
            for (int j = left; j <= right; j++) {
                dp[j] = Math.min(dp[j], dp[left] + 1);
            }
        }
        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            int l = Math.max(i - ranges[i], 0);
            int r = Math.min(i + ranges[i], n);
            for (int j = l; j <= r; j++) {
                dp[j] = Math.min(dp[j], dp[l] + 1);
            }
        }
        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            int l = Math.max(i - ranges[i], 0);
            int r = Math.min(i + ranges[i], n);
            for (int j = l; j < r; j++) {
                dp[j + 1] = Math.min(dp[j + 1], dp[l] + 1);
            }
        }
        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];

=======

        int[] dp = new int[n+1];
        Arrays.fill(dp, n+2);
        dp[0] = 0;
        for (int i = 0; i <= n; i++) {
            int left = Math.max(i - ranges[i], 0);
            int right = Math.min(i + ranges[i], n);
            for (int j = left; j <= right; j++) {
                dp[j] = Math.min(dp[j], dp[left] + 1);
            }
        }
        return dp[n] == n+2 ? -1 : dp[n];

=======

        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        Arrays.fill(left, Integer.MAX_VALUE);
        Arrays.fill(right, Integer.MIN_VALUE);
        for (int i = 0; i <= n; i++) {
            int l = Math.max(0, i - ranges[i]);
            int r = Math.min(n, i + ranges[i]);
            left[l] = Math.min(left[l], l);
            right[r] = Math.max(right[r], r);
        }
        int ans = 0;
        int cur = 0;
        while (cur < n) {
            int next = cur;
            for (int i = left[cur]; i <= cur; i++) {
                next = Math.max(next, right[i]);
            }
            if (next == cur) {
                return -1;
            }
            cur = next;
            ans++;
        }
        return ans;
