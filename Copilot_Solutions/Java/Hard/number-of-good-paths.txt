Synthesizing 10/10 solutions

=======

        int n = vals.length;
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return dfs(0, -1, vals, graph, new int[n][n]);
    }
    
    private int dfs(int node, int parent, int[] vals, List<List<Integer>> graph, int[][] memo) {
        if (memo[node][parent + 1] > 0) {
            return memo[node][parent + 1];
        }
        int count = 1;
        for (int next : graph.get(node)) {
            if (next != parent && vals[next] >= vals[node]) {
                count += dfs(next, node, vals, graph, memo);
            }
        }
        memo[node][parent + 1] = count;
        return count;

=======

        int n = vals.length;
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        long MOD = 1_000_000_007;
        long[][] dp = new long[n][n];
        for (long[] row : dp) {
            Arrays.fill(row, -1);
        }
        return (int) dfs(0, vals, adjList, dp, MOD);
    }
    private long dfs(int u, int[] vals, List<List<Integer>> adjList, long[][] dp, long MOD) {
        if (dp[u][u] != -1) {
            return dp[u][u];
        }
        long res = 1;
        for (int v : adjList.get(u)) {
            if (vals[v] < vals[u]) {
                res = (res + dfs(v, vals, adjList, dp, MOD)) % MOD;
            }
        }
        return dp[u][u] = res;

=======

        int n = vals.length;
        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
        }
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(vals, graph, dp, 0, n - 1);
    }
    private int dfs(int[] vals, int[][] graph, int[][] dp, int start, int end) {
        if (dp[start][end] != -1) {
            return dp[start][end];
        }
        if (vals[start] != vals[end]) {
            dp[start][end] = 0;
            return 0;
        }
        int res = 0;
        for (int i = 0; i < graph.length; i++) {
            if (graph[start][i] == 1 && vals[i] <= vals[start]) {
                res += dfs(vals, graph, dp, i, end);
                res %= 1000000007;
            }
        }
        dp[start][end] = res;
        return res;

=======

        int MOD = 1000000007;
        int n = vals.length;
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            graph[e[0]].add(e[1]);
            graph[e[1]].add(e[0]);
        }
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = (res + dfs(graph, vals, dp, i, i)) % MOD;
        }
        return res;
    }
    
    private int dfs(List<Integer>[] graph, int[] vals, int[][] dp, int start, int cur) {
        if (dp[start][cur] != -1) return dp[start][cur];
        if (vals[cur] < vals[start]) {
            dp[start][cur] = 0;
            return 0;
        }
        int res = 0;
        for (int next : graph[cur]) {
            if (next == start) {
                res = (res + 1) % 1000000007;
            } else {
                res = (res + dfs(graph, vals, dp, start, next)) % 1000000007;
            }
        }
        dp[start][cur] = res;
        return res;

=======

        int n = vals.length;
        int[][] graph = new int[n][n];
        for (int i = 0; i < edges.length; i++) {
            graph[edges[i][0]][edges[i][1]] = 1;
            graph[edges[i][1]][edges[i][0]] = 1;
        }
        int[][] dp = new int[n][n];
        return dfs(vals, graph, dp, 0, n - 1);
    }

    private int dfs(int[] vals, int[][] graph, int[][] dp, int start, int end) {
        if (dp[start][end] != 0) return dp[start][end];
        if (start == end) return 1;
        int res = 0;
        for (int i = 0; i < graph.length; i++) {
            if (graph[start][i] != 0 && vals[i] <= vals[start]) {
                res = (res + dfs(vals, graph, dp, i, end)) % 1000000007;
            }
        }
        dp[start][end] = res;
        return res;

=======

        int mod = 1000000007;
        int n = vals.length;
        List<Integer>[] g = new List[n];
        for (int i = 0; i < n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            g[e[0]].add(e[1]);
            g[e[1]].add(e[0]);
        }
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(0, vals, g, dp, mod);
    }
    private int dfs(int u, int[] vals, List<Integer>[] g, int[][] dp, int mod) {
        int n = vals.length;
        if (dp[u][u] != -1) return dp[u][u];
        int ans = 1;
        for (int v : g[u]) {
            if (vals[v] >= vals[u]) continue;
            ans += dfs(v, vals, g, dp, mod);
            ans %= mod;
        }
        return dp[u][u] = ans;

=======

        int n = vals.length;
        int mod = 1000000007;
        List<Integer>[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }
        long[][] dp = new long[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n; i++) {
            dfs(vals, adj, dp, i, i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                ans = (ans + dp[i][j]) % mod;
            }
        }
        return (int) ans;
    }

    private void dfs(int[] vals, List<Integer>[] adj, long[][] dp, int u, int p) {
        int mod = 1000000007;
        for (int v : adj[u]) {
            if (v != p && vals[v] >= vals[u]) {
                dp[u][v] = (dp[u][v] + dp[u][p]) % mod;
                dfs(vals, adj, dp, v, u);
            }
        }

=======

        int mod = 1000000007;
        int n = vals.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dfs(vals, edges, 0, i, dp);
            ans %= mod;
        }
        return ans;
    }

    public int dfs(int[] vals, int[][] edges, int start, int end, int[][] dp) {
        if (vals[start] < vals[end]) {
            return 0;
        }
        if (dp[start][end] != -1) {
            return dp[start][end];
        }
        if (start == end) {
            return 1;
        }
        int ans = 0;
        for (int[] edge : edges) {
            if (edge[0] == start) {
                ans += dfs(vals, edges, edge[1], end, dp);
                ans %= 1000000007;
            }
            if (edge[1] == start) {
                ans += dfs(vals, edges, edge[0], end, dp);
                ans %= 1000000007;
            }
        }
        dp[start][end] = ans;
        return ans;

=======

        int n = vals.length;
        int mod = 1000000007;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int[] edge : edges) {
            map.computeIfAbsent(edge[0], x -> new ArrayList<>()).add(edge[1]);
            map.computeIfAbsent(edge[1], x -> new ArrayList<>()).add(edge[0]);
        }
        return dfs(0, 0, vals, map, dp) % mod;
    }

    private int dfs(int cur, int pre, int[] vals, Map<Integer, List<Integer>> map, int[][] dp) {
        if (dp[cur][pre] != Integer.MIN_VALUE) {
            return dp[cur][pre];
        }
        int res = 0;
        if (vals[cur] >= vals[pre]) {
            res++;
        }
        for (int next : map.getOrDefault(cur, new ArrayList<>())) {
            if (next != pre) {
                res += dfs(next, cur, vals, map, dp);
            }
        }
        return dp[cur][pre] = res;

=======

        int n = vals.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] e : edges) {
            graph.computeIfAbsent(e[0], k -> new ArrayList<>()).add(e[1]);
            graph.computeIfAbsent(e[1], k -> new ArrayList<>()).add(e[0]);
        }
        int[][] memo = new int[n][n];
        for (int[] m : memo) {
            Arrays.fill(m, -1);
        }
        return dfs(graph, vals, 0, -1, dp, memo);
    }
    private int dfs(Map<Integer, List<Integer>> graph, int[] vals, int node, int parent, int[] dp, int[][] memo) {
        if (memo[node][parent + 1] != -1) {
            return memo[node][parent + 1];
        }
        int count = 0;
        if (parent == -1 || vals[node] <= vals[parent]) {
            count += dp[node];
            if (graph.containsKey(node)) {
                for (int child : graph.get(node)) {
                    if (child != parent) {
                        count += dfs(graph, vals, child, node, dp, memo);
                    }
                }
            }
        }
        return memo[node][parent + 1] = count;
