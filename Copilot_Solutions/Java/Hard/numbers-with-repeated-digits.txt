Synthesizing 9/10 solutions

=======

        List<Integer> digits = new ArrayList<>();
        for (int x = n + 1; x > 0; x /= 10) {
            digits.add(0, x % 10);
        }
        int res = 0, m = digits.size();
        for (int i = 1; i < m; ++i) {
            res += 9 * A(9, i - 1);
        }
        Set<Integer> seen = new HashSet<>();
        for (int i = 0; i < m; ++i) {
            for (int j = i > 0 ? 0 : 1; j < digits.get(i); ++j) {
                if (!seen.contains(j)) {
                    res += A(9 - i, m - i - 1);
                }
            }
            if (seen.contains(digits.get(i))) {
                break;
            }
            seen.add(digits.get(i));
        }
        return n - res;
    }

    public int A(int m, int n) {
        int res = 1;
        for (int i = 0; i < n; ++i) {
            res *= m - i;
        }
        return res;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (hasRepeatedDigit(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean hasRepeatedDigit(int n) {
        Set<Integer> set = new HashSet<>();
        while (n > 0) {
            int digit = n % 10;
            if (set.contains(digit)) {
                return true;
            } else {
                set.add(digit);
            }
            n /= 10;
        }
        return false;

=======

        int[] digits = new int[10];
        int d = 0;
        for (int i = n; i > 0; i /= 10) {
            digits[d++] = i % 10;
        }
        int ans = 0;
        for (int i = 1; i < d; i++) {
            ans += 9 * A(9, i - 1);
        }
        Set<Integer> seen = new HashSet<>();
        for (int i = d - 1; i >= 0; i--) {
            for (int j = i < d - 1 ? 0 : 1; j < digits[i]; j++) {
                if (!seen.contains(j)) {
                    ans += A(9 - i, d - i - 1);
                }
            }
            if (seen.contains(digits[i])) {
                break;
            }
            seen.add(digits[i]);
            if (i == 0) {
                ans++;
            }
        }
        return n - ans;
    }
    private int A(int m, int n) {
        int ans = 1;
        for (int i = 0; i < n; i++) {
            ans *= m - i;
        }
        return ans;

=======

        int count = 0;
        int[] nums = new int[10];
        for (int i = 0; i < 10; i++) {
            nums[i] = i;
        }
        for (int i = 1; i <= n; i++) {
            if (hasRepeatedDigit(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean hasRepeatedDigit(int n) {
        Set<Integer> set = new HashSet<>();
        while (n > 0) {
            int digit = n % 10;
            if (set.contains(digit)) {
                return true;
            } else {
                set.add(digit);
            }
            n /= 10;
        }
        return false;

=======

        int res = 0;
        for (int i = 1; i < n; i++) {
            if (hasRepeat(i)) {
                res++;
            }
        }
        return res;
    }
    
    private boolean hasRepeat(int n) {
        Set<Integer> set = new HashSet<>();
        while (n > 0) {
            int rem = n % 10;
            if (set.contains(rem)) {
                return true;
            }
            set.add(rem);
            n /= 10;
        }
        return false;

=======

        int ans = 0;
        int[] digits = new int[10];
        int len = 0;
        for (int i = n + 1; i > 0; i /= 10) {
            digits[len++] = i % 10;
        }
        for (int i = 1; i < len; i++) {
            ans += 9 * A(9, i - 1);
        }
        Set<Integer> seen = new HashSet();
        for (int i = len - 1; i >= 0; i--) {
            for (int j = i == len - 1 ? 1 : 0; j < digits[i]; j++) {
                if (!seen.contains(j)) {
                    ans += A(9 - i, len - i - 1);
                }
            }
            if (seen.contains(digits[i])) {
                break;
            }
            seen.add(digits[i]);
            if (i == 0) {
                ans++;
            }
        }
        return n - ans;
    }

    public int A(int m, int n) {
        int ans = 1;
        for (int i = 0; i < n; i++) {
            ans *= m - i;
        }
        return ans;

=======

        int count = 0;
        int len = String.valueOf(n).length();
        int[] dp = new int[len];
        dp[0] = 9;
        int base = 9;
        for (int i = 1; i < len; i++) {
            base *= (9 - i + 1);
            dp[i] = base + dp[i - 1];
        }
        for (int i = 1; i < len; i++) {
            count += dp[i - 1];
        }
        Set<Integer> set = new HashSet<>();
        for (int i = len - 1, a = n; i >= 0; i--) {
            int b = (int) Math.pow(10, i);
            int c = a / b;
            a %= b;
            for (int j = i == len - 1 ? 1 : 0; j < c; j++) {
                if (!set.contains(j)) {
                    count += dp[i];
                }
            }
            if (set.contains(c)) {
                break;
            }
            set.add(c);
            if (i == 0) {
                count++;
            }
        }
        return n - count;

=======

        char[] A = Integer.toString(n + 1).toCharArray();
        int n = A.length;

        // dp[i] = # of unique numbers with i digits
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; ++i)
            dp[i] = dp[i-1] * (9 - i + 2);

        // For each i-digit number with digits (A[0], A[1], ..., A[i-1]),
        // how many of them are less than N?

        // For example, if N = 534, and we're at i = 2,
        // the answer is 4 * 9 * 8, since the first digit can be
        // anything less than 5, and the next two digits can be anything
        // less than 3, 4, or 5.

        int ans = 0;
        Set<Integer> seen = new HashSet();
        for (int i = 0; i < n; ++i) {
            int d = A[i] - '0';
            for (int j = i > 0 ? 0 : 1; j < d; ++j)
                if (!seen.contains(j))
                    ans += dp[n - 1 - i];
            if (seen.contains(d)) break;
            seen.add(d);
        }

        return n - 1 - ans;

=======

        int res = 0;
        int len = 0;
        int[] dp = new int[10];
        int[] num = new int[10];
        int tmp = n;
        while (tmp > 0) {
            num[len++] = tmp % 10;
            tmp /= 10;
        }
        dp[0] = 1;
        for (int i = 1; i <= 9; i++) {
            dp[i] = dp[i - 1] * i;
        }
        for (int i = len - 1; i >= 0; i--) {
            int[] map = new int[10];
            for (int j = i + 1; j < len; j++) {
                map[num[j]] = 1;
            }
            int cnt = 0;
            for (int j = i == len - 1 ? 1 : 0; j < num[i]; j++) {
                if (map[j] == 0) {
                    cnt++;
                }
            }
            res += cnt * dp[9 - i];
            if (map[num[i]] == 1) {
                break;
            }
            map[num[i]] = 1;
            if (i == 0) {
                res++;
            }
        }
        return n - res;
