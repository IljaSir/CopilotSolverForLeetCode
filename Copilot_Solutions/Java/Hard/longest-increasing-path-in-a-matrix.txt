Synthesizing 10/10 solutions

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, dp));
            }
        }
        return max;
    }
    private int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int max = 1;
        if (i - 1 >= 0 && matrix[i - 1][j] > matrix[i][j]) {
            max = Math.max(max, 1 + dfs(matrix, i - 1, j, dp));
        }
        if (i + 1 < matrix.length && matrix[i + 1][j] > matrix[i][j]) {
            max = Math.max(max, 1 + dfs(matrix, i + 1, j, dp));
        }
        if (j - 1 >= 0 && matrix[i][j - 1] > matrix[i][j]) {
            max = Math.max(max, 1 + dfs(matrix, i, j - 1, dp));
        }
        if (j + 1 < matrix[0].length && matrix[i][j + 1] > matrix[i][j]) {
            max = Math.max(max, 1 + dfs(matrix, i, j + 1, dp));
        }
        dp[i][j] = max;
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, dp));
            }
        }
        return max;
    }
    
    private int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int max = 1;
        if (i > 0 && matrix[i - 1][j] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i - 1, j, dp) + 1);
        }
        if (i < matrix.length - 1 && matrix[i + 1][j] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i + 1, j, dp) + 1);
        }
        if (j > 0 && matrix[i][j - 1] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i, j - 1, dp) + 1);
        }
        if (j < matrix[0].length - 1 && matrix[i][j + 1] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i, j + 1, dp) + 1);
        }
        dp[i][j] = max;
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, m, n, dp));
            }
        }
        return max;
    }

    private int dfs(int[][] matrix, int i, int j, int m, int n, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int max = 0;
        if (i - 1 >= 0 && matrix[i - 1][j] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i - 1, j, m, n, dp));
        }
        if (i + 1 < m && matrix[i + 1][j] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i + 1, j, m, n, dp));
        }
        if (j - 1 >= 0 && matrix[i][j - 1] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i, j - 1, m, n, dp));
        }
        if (j + 1 < n && matrix[i][j + 1] > matrix[i][j]) {
            max = Math.max(max, dfs(matrix, i, j + 1, m, n, dp));
        }
        dp[i][j] = max + 1;
        return dp[i][j];

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, dp));
            }
        }
        return max;
    }

    private int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int max = 1;
        if (i > 0 && matrix[i][j] < matrix[i - 1][j]) {
            max = Math.max(max, dfs(matrix, i - 1, j, dp) + 1);
        }
        if (i < matrix.length - 1 && matrix[i][j] < matrix[i + 1][j]) {
            max = Math.max(max, dfs(matrix, i + 1, j, dp) + 1);
        }
        if (j > 0 && matrix[i][j] < matrix[i][j - 1]) {
            max = Math.max(max, dfs(matrix, i, j - 1, dp) + 1);
        }
        if (j < matrix[0].length - 1 && matrix[i][j] < matrix[i][j + 1]) {
            max = Math.max(max, dfs(matrix, i, j + 1, dp) + 1);
        }
        dp[i][j] = max;
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, dp));
            }
        }
        return max;
    }
    
    int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) return dp[i][j];
        int m = matrix.length;
        int n = matrix[0].length;
        int max = 1;
        if (i > 0 && matrix[i][j] < matrix[i - 1][j]) {
            max = Math.max(max, 1 + dfs(matrix, i - 1, j, dp));
        }
        if (i < m - 1 && matrix[i][j] < matrix[i + 1][j]) {
            max = Math.max(max, 1 + dfs(matrix, i + 1, j, dp));
        }
        if (j > 0 && matrix[i][j] < matrix[i][j - 1]) {
            max = Math.max(max, 1 + dfs(matrix, i, j - 1, dp));
        }
        if (j < n - 1 && matrix[i][j] < matrix[i][j + 1]) {
            max = Math.max(max, 1 + dfs(matrix, i, j + 1, dp));
        }
        dp[i][j] = max;
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = Math.max(ans, dfs(matrix, i, j, dp));
            }
        }
        return ans;
    }
    int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        int ans = 1;
        for (int k = 0; k < 4; k++) {
            int x = i + dx[k];
            int y = j + dy[k];
            if (x < 0 || y < 0 || x >= m || y >= n || matrix[x][y] <= matrix[i][j]) {
                continue;
            }
            ans = Math.max(ans, 1 + dfs(matrix, x, y, dp));
        }
        dp[i][j] = ans;
        return ans;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = Math.max(ans, dfs(matrix, i, j, dp));
            }
        }
        return ans;
    }

    private int dfs(int[][] matrix, int i, int j, int[][] dp) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int ans = 1;
        if (i > 0 && matrix[i][j] < matrix[i - 1][j]) {
            ans = Math.max(ans, dfs(matrix, i - 1, j, dp) + 1);
        }
        if (i < m - 1 && matrix[i][j] < matrix[i + 1][j]) {
            ans = Math.max(ans, dfs(matrix, i + 1, j, dp) + 1);
        }
        if (j > 0 && matrix[i][j] < matrix[i][j - 1]) {
            ans = Math.max(ans, dfs(matrix, i, j - 1, dp) + 1);
        }
        if (j < n - 1 && matrix[i][j] < matrix[i][j + 1]) {
            ans = Math.max(ans, dfs(matrix, i, j + 1, dp) + 1);
        }
        dp[i][j] = ans;
        return ans;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] memo = new int[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = Math.max(ans, dfs(matrix, i, j, m, n, memo));
            }
        }
        return ans;
    }
    
    private int dfs(int[][] matrix, int i, int j, int m, int n, int[][] memo) {
        if (memo[i][j] != 0) {
            return memo[i][j];
        }
        int ans = 1;
        if (i - 1 >= 0 && matrix[i - 1][j] > matrix[i][j]) {
            ans = Math.max(ans, 1 + dfs(matrix, i - 1, j, m, n, memo));
        }
        if (i + 1 < m && matrix[i + 1][j] > matrix[i][j]) {
            ans = Math.max(ans, 1 + dfs(matrix, i + 1, j, m, n, memo));
        }
        if (j - 1 >= 0 && matrix[i][j - 1] > matrix[i][j]) {
            ans = Math.max(ans, 1 + dfs(matrix, i, j - 1, m, n, memo));
        }
        if (j + 1 < n && matrix[i][j + 1] > matrix[i][j]) {
            ans = Math.max(ans, 1 + dfs(matrix, i, j + 1, m, n, memo));
        }
        memo[i][j] = ans;
        return ans;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] memo = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                max = Math.max(max, dfs(matrix, i, j, memo));
            }
        }
        return max;
    }

    private int dfs(int[][] matrix, int i, int j, int[][] memo) {
        if (memo[i][j] > 0) {
            return memo[i][j];
        }
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int max = 0;
        for (int[] dir : dirs) {
            int newI = i + dir[0];
            int newJ = j + dir[1];
            if (newI < 0 || newI >= matrix.length || newJ < 0 || newJ >= matrix[0].length || matrix[newI][newJ] <= matrix[i][j]) {
                continue;
            }
            max = Math.max(max, dfs(matrix, newI, newJ, memo));
        }
        memo[i][j] = max + 1;
        return memo[i][j];

=======

        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length, n = matrix[0].length;
        int[][] dp = new int[m][n];
        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        int max = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int len = dfs(matrix, i, j, dp, directions, m, n);
                max = Math.max(max, len);
            }
        }
        return max;
    }
    private int dfs(int[][] matrix, int i, int j, int[][] dp, int[][] directions, int m, int n) {
        if (dp[i][j] != 0) {
            return dp[i][j];
        }
        int max = 1;
        for (int[] direction : directions) {
            int x = i + direction[0], y = j + direction[1];
            if (x >= 0 && x < m && y >= 0 && y < n && matrix[x][y] > matrix[i][j]) {
                int len = 1 + dfs(matrix, x, y, dp, directions, m, n);
                max = Math.max(max, len);
            }
        }
        dp[i][j] = max;
        return max;
