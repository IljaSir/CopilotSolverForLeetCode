Synthesizing 10/10 solutions

=======

        int n = nums.length;
        List<Integer> ones = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                ones.add(i);
            }
        }
        int[] prefixSum = new int[ones.size() + 1];
        for (int i = 1; i <= ones.size(); i++) {
            prefixSum[i] = prefixSum[i - 1] + ones.get(i - 1);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i <= ones.size() - k; i++) {
            int j = i + k - 1;
            int mid = i + (j - i) / 2;
            int left = prefixSum[mid + 1] - prefixSum[i];
            int right = prefixSum[j + 1] - prefixSum[mid + 1];
            ans = Math.min(ans, (mid - i + 1) * ones.get(mid) - left + right - (j - mid) * ones.get(mid));
        }
        return ans;

=======

        int n = nums.length;
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                list.add(i);
            }
        }

        int m = list.size();
        int[] prefix = new int[m + 1];
        for (int i = 0; i < m; i++) {
            prefix[i + 1] = prefix[i] + list.get(i);
        }

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i + k <= m; i++) {
            int mid = i + k / 2;
            ans = Math.min(ans, prefix[mid + 1] - prefix[mid] - (prefix[i + k] - prefix[i + k / 2]) + (prefix[i + k / 2] - prefix[i]) - (prefix[mid] - prefix[i]));
        }
        return ans;

=======

        int[] ones = new int[k];
        int index = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                ones[index++] = i;
            }
        }
        int median = k / 2;
        int ans = 0;
        for (int i = 0; i < k / 2; i++) {
            ans += ones[median + i] - ones[i] - (median - i);
        }
        return ans;

=======

        List<Integer> index = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                index.add(i);
            }
        }
        int[] arr = new int[k];
        for (int i = 0; i < k; i++) {
            arr[i] = index.get(i);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < index.size() - k + 1; i++) {
            int mid = i + k / 2;
            int cur = 0;
            for (int j = i; j < i + k; j++) {
                cur += Math.abs(arr[j] - arr[mid]) - Math.abs(j - mid);
            }
            res = Math.min(res, cur);
        }
        return res;

=======

        int n = nums.length;
        int[] ones = new int[k];
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                ones[j++] = i;
            }
        }
        int median = ones[k / 2];
        int res = 0;
        for (int i = 0; i < k; i++) {
            res += Math.abs(ones[i] - median) - Math.abs(i - k / 2);
        }
        return res;

=======

        int[] ones = new int[k];
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                ones[j] = i;
                j++;
            }
        }
        int[] prefix = new int[k + 1];
        for (int i = 1; i <= k; i++) {
            prefix[i] = prefix[i - 1] + ones[i - 1];
        }
        int[] suffix = new int[k + 1];
        for (int i = k - 1; i >= 0; i--) {
            suffix[i] = suffix[i + 1] + nums.length - 1 - ones[i];
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i <= k; i++) {
            res = Math.min(res, prefix[i] + suffix[i + 1] - (k - i) * ones[i - 1]);
        }
        return res;

=======

        int n = nums.length;
        int[] pos = new int[k];
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                pos[j++] = i;
            }
        }
        int median = pos[k / 2];
        int ans = 0;
        for (int i = 0; i < k; i++) {
            ans += Math.abs(pos[i] - median) - Math.abs(i - k / 2);
        }
        return ans;

=======

        int n = nums.length;
        int[] a = new int[k];
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                a[j++] = i;
            }
        }
        int median = a[k / 2];
        int res = 0;
        for (int i = 0; i < k; i++) {
            res += Math.abs(a[i] - median) - Math.abs(i - k / 2);
        }
        return res;

=======

        int n = nums.length;
        int[] arr = new int[k];
        int idx = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                arr[idx++] = i;
            }
        }
        int ans = 0;
        int mid = (k - 1) / 2;
        for (int i = 0; i < k; i++) {
            ans += Math.abs(arr[i] - arr[mid]) - Math.abs(i - mid);
        }
        return ans;

=======

        int n = nums.length;
        int[] ones = new int[k];
        int i = 0;
        for (int j = 0; j < n; j++) {
            if (nums[j] == 1) {
                ones[i++] = j;
            }
        }
        int median = ones[k / 2];
        int res = 0;
        for (int one : ones) {
            res += Math.abs(one - median);
        }
        return res;
