Synthesizing 10/10 solutions

=======

        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            f[i] = f[i - 1] * i;
        }
        k--;
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            list.add(i);
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            int pos = k / f[n - i];
            sb.append(list.get(pos));
            list.remove(pos);
            k -= pos * f[n - i];
        }
        return sb.toString();

=======

        int[] factorial = new int[n];
        factorial[0] = 1;
        for (int i = 1; i < n; i++) {
            factorial[i] = i * factorial[i - 1];
        }
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        StringBuilder sb = new StringBuilder();
        k--;
        for (int i = n - 1; i >= 0; i--) {
            int index = k / factorial[i];
            sb.append(nums.get(index));
            nums.remove(index);
            k -= index * factorial[i];
        }
        return sb.toString();

=======

        int[] fac = new int[n];
        fac[0] = 1;
        for (int i = 1; i < n; i++) {
            fac[i] = fac[i - 1] * i;
        }
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        StringBuilder sb = new StringBuilder();
        k--;
        for (int i = n - 1; i >= 0; i--) {
            int index = k / fac[i];
            sb.append(nums.get(index));
            nums.remove(index);
            k -= index * fac[i];
        }
        return sb.toString();

=======

        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        int[] factorial = new int[n];
        factorial[0] = 1;
        for (int i = 1; i < n; i++) {
            factorial[i] = factorial[i - 1] * i;
        }
        k--;
        StringBuilder sb = new StringBuilder();
        for (int i = n - 1; i >= 0; i--) {
            int index = k / factorial[i];
            sb.append(nums.get(index));
            nums.remove(index);
            k -= index * factorial[i];
        }
        return sb.toString();

=======

        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        int[] factorial = new int[n + 1];
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            factorial[i] = factorial[i - 1] * i;
        }
        k--;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            int index = k / factorial[n - i];
            sb.append(nums.get(index));
            nums.remove(index);
            k -= index * factorial[n - i];
        }
        return sb.toString();

=======

        int[] factorial = new int[n + 1];
        List<Integer> numbers = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        int sum = 1;
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            sum *= i;
            factorial[i] = sum;
            numbers.add(i);
        }
        k--;
        for (int i = 1; i <= n; i++) {
            int index = k / factorial[n - i];
            sb.append(numbers.get(index));
            numbers.remove(index);
            k -= index * factorial[n - i];
        }
        return sb.toString();

=======

        int[] factorial = new int[n + 1];
        List<Integer> nums = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        
        int sum = 1;
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            sum *= i;
            factorial[i] = sum;
            nums.add(i);
        }
        
        k--;
        for (int i = 1; i <= n; i++) {
            int index = k / factorial[n - i];
            sb.append(nums.get(index));
            nums.remove(index);
            k -= index * factorial[n - i];
        }
        
        return sb.toString();

=======

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        int[] factorials = new int[n];
        factorials[0] = 1;
        for (int i = 1; i < n; i++) {
            factorials[i] = factorials[i - 1] * i;
        }
        StringBuilder sb = new StringBuilder();
        k--;
        for (int i = n; i > 0; i--) {
            int index = k / factorials[i - 1];
            k -= index * factorials[i - 1];
            sb.append(nums[index]);
            for (int j = index; j < n - 1; j++) {
                nums[j] = nums[j + 1];
            }
        }
        return sb.toString();

=======

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        return getPermutation(nums, k);
    }

    private String getPermutation(int[] nums, int k) {
        if (nums.length == 1) {
            return String.valueOf(nums[0]);
        }
        int factorial = factorial(nums.length - 1);
        int index = (k - 1) / factorial;
        int[] nextNums = new int[nums.length - 1];
        for (int i = 0; i < nextNums.length; i++) {
            if (i < index) {
                nextNums[i] = nums[i];
            } else {
                nextNums[i] = nums[i + 1];
            }
        }
        return String.valueOf(nums[index]) + getPermutation(nextNums, k - index * factorial);
    }

    private int factorial(int n) {
        int result = 1;
        for (int i = 2; i <= n; i++) {
            result *= i;
        }
        return result;

=======

        int[] factorial = new int[n + 1];
        factorial[0] = 1;
        List<Integer> num = new ArrayList<>();
        num.add(0);
        for (int i = 1; i <= n; i++) {
            factorial[i] = factorial[i - 1] * i;
            num.add(i);
        }
        k--;
        StringBuilder ans = new StringBuilder();
        for (int i = 1; i <= n; i++) {
            int index = k / factorial[n - i];
            ans.append(num.get(index + 1));
            num.remove(index + 1);
            k = k - index * factorial[n - i];
        }
        return ans.toString();
