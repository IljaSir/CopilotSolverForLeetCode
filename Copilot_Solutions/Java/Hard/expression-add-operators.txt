Synthesizing 7/10 solutions

=======

        List<String> result = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return result;
        }
        dfs(num, target, 0, 0, 0, "", result);
        return result;
    }
    
    private void dfs(String num, int target, int index, long prev, long multi, String path, List<String> result) {
        if (index == num.length()) {
            if (target == prev) {
                result.add(path);
            }
            return;
        }
        for (int i = index; i < num.length(); i++) {
            long cur = Long.parseLong(num.substring(index, i + 1));
            if (index != i && num.charAt(index) == '0') {
                break;
            }
            if (index == 0) {
                dfs(num, target, i + 1, cur, cur, path + cur, result);
            } else {
                dfs(num, target, i + 1, prev + cur, cur, path + "+" + cur, result);
                dfs(num, target, i + 1, prev - cur, -cur, path + "-" + cur, result);
                dfs(num, target, i + 1, prev - multi + multi * cur, multi * cur, path + "*" + cur, result);
            }
        }

=======

        List<String> result = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return result;
        }
        helper(result, num, target, "", 0, 0, 0);
        return result;
    }
    
    private void helper(List<String> result, String num, int target, String path, int pos, long eval, long multed) {
        if (pos == num.length()) {
            if (target == eval) {
                result.add(path);
            }
            return;
        }
        for (int i = pos; i < num.length(); i++) {
            if (i != pos && num.charAt(pos) == '0') {
                break;
            }
            long cur = Long.parseLong(num.substring(pos, i + 1));
            if (pos == 0) {
                helper(result, num, target, path + cur, i + 1, cur, cur);
            } else {
                helper(result, num, target, path + "+" + cur, i + 1, eval + cur, cur);
                helper(result, num, target, path + "-" + cur, i + 1, eval - cur, -cur);
                helper(result, num, target, path + "*" + cur, i + 1, eval - multed + multed * cur, multed * cur);
            }
        }

=======

        List<String> result = new ArrayList<>();
        if (num == null || num.length() == 0) return result;
        helper(result, "", num, target, 0, 0, 0);
        return result;
    }
    
    private void helper(List<String> result, String path, String num, int target, int pos, long eval, long multed) {
        if (pos == num.length()) {
            if (target == eval) result.add(path);
            return;
        }
        for (int i = pos; i < num.length(); i++) {
            if (i != pos && num.charAt(pos) == '0') break;
            long cur = Long.parseLong(num.substring(pos, i + 1));
            if (pos == 0) {
                helper(result, path + cur, num, target, i + 1, cur, cur);
            } else {
                helper(result, path + "+" + cur, num, target, i + 1, eval + cur, cur);
                helper(result, path + "-" + cur, num, target, i + 1, eval - cur, -cur);
                helper(result, path + "*" + cur, num, target, i + 1, eval - multed + multed * cur, multed * cur);
            }
        }

=======

        List<String> result = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return result;
        }
        dfs(result, num, target, "", 0, 0, 0);
        return result;
    }
    
    private void dfs(List<String> result, String num, int target, String path, int pos, long eval, long multed) {
        if (pos == num.length()) {
            if (target == eval) {
                result.add(path);
            }
            return;
        }
        for (int i = pos; i < num.length(); i++) {
            // 0 is not allowed unless it is the only digit
            if (i != pos && num.charAt(pos) == '0') {
                break;
            }
            long cur = Long.parseLong(num.substring(pos, i + 1));
            if (pos == 0) {
                dfs(result, num, target, path + cur, i + 1, cur, cur);
            } else {
                dfs(result, num, target, path + "+" + cur, i + 1, eval + cur, cur);
                dfs(result, num, target, path + "-" + cur, i + 1, eval - cur, -cur);
                dfs(result, num, target, path + "*" + cur, i + 1, eval - multed + multed * cur, multed * cur);
            }
        }

=======

        List<String> result = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return result;
        }
        dfs(num, target, 0, 0, 0, result, new StringBuilder());
        return result;
    }

    private void dfs(String num, int target, int index, long sum, long lastNum, List<String> result, StringBuilder path) {
        if (index == num.length()) {
            if (sum == target) {
                result.add(path.toString());
            }
            return;
        }
        for (int i = index; i < num.length(); i++) {
            if (i != index && num.charAt(index) == '0') {
                break;
            }
            long currNum = Long.parseLong(num.substring(index, i + 1));
            int len = path.length();
            if (index == 0) {
                path.append(currNum);
                dfs(num, target, i + 1, currNum, currNum, result, path);
                path.setLength(len);
            } else {
                path.append("+").append(currNum);
                dfs(num, target, i + 1, sum + currNum, currNum, result, path);
                path.setLength(len);

                path.append("-").append(currNum);
                dfs(num, target, i + 1, sum - currNum, -currNum, result, path);
                path.setLength(len);

                path.append("*").append(currNum);
                dfs(num, target, i + 1, sum - lastNum + lastNum * currNum, lastNum * currNum, result, path);
                path.setLength(len);
            }
        }

=======

        List<String> ans = new ArrayList<>();
        dfs(num, target, 0, 0, 0, "", ans);
        return ans;
    }
    
    private void dfs(String num, int target, int index, long prev, long multi, String curr, List<String> ans) {
        if (index == num.length()) {
            if (target == prev) {
                ans.add(curr);
            }
            return;
        }
        for (int i = index; i < num.length(); i++) {
            if (i != index && num.charAt(index) == '0') {
                break;
            }
            long currNum = Long.parseLong(num.substring(index, i + 1));
            if (index == 0) {
                dfs(num, target, i + 1, currNum, currNum, curr + currNum, ans);
            } else {
                dfs(num, target, i + 1, prev + currNum, currNum, curr + "+" + currNum, ans);
                dfs(num, target, i + 1, prev - currNum, -currNum, curr + "-" + currNum, ans);
                dfs(num, target, i + 1, prev - multi + multi * currNum, multi * currNum, curr + "*" + currNum, ans);
            }
        }

=======

        List<String> ans = new ArrayList<>();
        int n = num.length();
        for (int i = 0; i < n; i++) {
            String prefix = num.substring(0, i + 1);
            if (prefix.length() > 1 && prefix.charAt(0) == '0') {
                break;
            }
            long prefixVal = Long.parseLong(prefix);
            String rest = num.substring(i + 1);
            dfs(rest, target, prefixVal, prefixVal, prefix, ans);
        }
        return ans;
    }
    private void dfs(String num, int target, long curVal, long prev, String expr, List<String> ans) {
        if (num.length() == 0 && curVal == target) {
            ans.add(expr);
            return;
        }
        for (int i = 0; i < num.length(); i++) {
            String prefix = num.substring(0, i + 1);
            if (prefix.length() > 1 && prefix.charAt(0) == '0') {
                break;
            }
            long prefixVal = Long.parseLong(prefix);
            String rest = num.substring(i + 1);
            dfs(rest, target, curVal + prefixVal, prefixVal, expr + "+" + prefix, ans);
            dfs(rest, target, curVal - prefixVal, -prefixVal, expr + "-" + prefix, ans);
            dfs(rest, target, curVal - prev + prev * prefixVal, prev * prefixVal, expr + "*" + prefix, ans);
        }
