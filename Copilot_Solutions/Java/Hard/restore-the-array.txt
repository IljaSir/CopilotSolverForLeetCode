Synthesizing 10/10 solutions

=======

        int n = s.length();
        long[] dp = new long[n + 1];
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                continue;
            }
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) {
                    break;
                }
                dp[i] = (dp[i] + dp[j + 1]) % 1000000007;
            }
        }
        return (int) dp[0];

=======

        int MOD = 1000000007;
        int n = s.length();
        long[] dp = new long[n + 1];
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                continue;
            }
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) {
                    break;
                }
                dp[i] = (dp[i] + dp[j + 1]) % MOD;
            }
        }
        return (int) dp[0];

=======

        int mod = 1000000007;
        int n = s.length();
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                continue;
            }
            long temp = 0;
            for (int j = i; j < n; j++) {
                temp = temp * 10 + s.charAt(j) - '0';
                if (temp > k) {
                    break;
                }
                dp[j + 1] = (dp[j + 1] + dp[i]) % mod;
            }
        }
        return (int) dp[n];

=======

        int n = s.length();
        long[] dp = new long[n+1];
        dp[n] = 1;
        for (int i = n-1; i >= 0; i--) {
            if (s.charAt(i) == '0') continue;
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) break;
                dp[i] = (dp[i] + dp[j+1]) % 1000000007;
            }
        }
        return (int)dp[0];

=======

        int n = s.length();
        int MOD = 1000000007;
        long[] dp = new long[n + 1];
        dp[n] = 1;
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                continue;
            }
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) {
                    break;
                }
                dp[i] = (dp[i] + dp[j + 1]) % MOD;
            }
        }
        return (int) dp[0];

=======

        int n = s.length();
        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            long sum = 0;
            for (int j = i - 1; j >= 0; j--) {
                if (s.charAt(j) == '0') continue;
                sum = sum * 10 + (s.charAt(j) - '0');
                if (sum > k) break;
                dp[i] = (dp[i] + dp[j]) % mod;
            }
        }
        return (int)dp[n];

=======

        int mod = 1000000007;
        int n = s.length();
        long[] dp = new long[n+1];
        dp[n] = 1;
        for (int i = n-1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                continue;
            }
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) {
                    break;
                }
                dp[i] = (dp[i] + dp[j+1]) % mod;
            }
        }
        return (int)dp[0];

=======

        int n = s.length();
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) != '0') {
                dp[i] = dp[i - 1];
            }
            long num = 0;
            for (int j = i; j >= 1; j--) {
                num = num * 10 + (s.charAt(j - 1) - '0');
                if (num > k) {
                    break;
                }
                if (num != 0) {
                    dp[i] = (dp[i] + dp[j - 1]) % 1000000007;
                }
            }
        }
        return (int) dp[n];

=======

        int n = s.length();
        long[] dp = new long[n];
        dp[n-1] = s.charAt(n-1) == '0' ? 0 : 1;
        for (int i = n-2; i >= 0; i--) {
            if (s.charAt(i) == '0') continue;
            long num = 0;
            for (int j = i; j < n; j++) {
                num = num * 10 + s.charAt(j) - '0';
                if (num > k) break;
                dp[i] = (dp[i] + (j == n-1 ? 1 : dp[j+1])) % 1000000007;
            }
        }
        return (int)dp[0];

=======

        int n = s.length();
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (s.charAt(i) == '0') {
                    break;
                }
                long num = Long.parseLong(s.substring(i, j + 1));
                if (num > k) {
                    break;
                }
                if (i == 0) {
                    dp[j] = 1;
                } else {
                    dp[j] = (dp[j] + dp[i - 1]) % 1000000007;
                }
            }
        }
        return (int)dp[n - 1];
