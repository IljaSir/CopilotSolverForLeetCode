Synthesizing 10/10 solutions

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int res = Integer.MIN_VALUE;
        for (int l = 0; l < n; l++) {
            int[] rowSum = new int[m];
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    rowSum[i] += matrix[i][r];
                }
                res = Math.max(res, maxSumSubArray(rowSum, k));
            }
        }
        return res;
    }
    
    private int maxSumSubArray(int[] nums, int k) {
        int n = nums.length;
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += nums[j];
                if (sum > res && sum <= k) {
                    res = sum;
                }
            }
        }
        return res;

=======

        int m = matrix.length, n = matrix[0].length;
        int res = Integer.MIN_VALUE;
        for (int l = 0; l < n; l++) {
            int[] rowSum = new int[m];
            for (int r = l; r < n; r++) {
                for (int i = 0; i < m; i++) {
                    rowSum[i] += matrix[i][r];
                }
                res = Math.max(res, dpmax(rowSum, k));
                if (res == k) return k;
            }
        }
        return res;
    }
    public int dpmax(int[] rowSum, int k) {
        int res = Integer.MIN_VALUE;
        int curSum = 0;
        TreeSet<Integer> sumSet = new TreeSet<>();
        sumSet.add(0);
        for (int sum : rowSum) {
            curSum += sum;
            Integer num = sumSet.ceiling(curSum - k);
            if (num != null) {
                res = Math.max(res, curSum - num);
            }
            sumSet.add(curSum);
        }
        return res;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for (int left = 0; left < n; left++) {
            int[] rowSum = new int[m];
            for (int right = left; right < n; right++) {
                for (int i = 0; i < m; i++) {
                    rowSum[i] += matrix[i][right];
                }
                max = Math.max(max, dpmax(rowSum, k));
            }
        }
        return max;
    }
    
    private int dpmax(int[] nums, int k) {
        int max = Integer.MIN_VALUE;
        int n = nums.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            if (dp[i] <= k) {
                max = Math.max(max, dp[i]);
            }
            for (int j = 0; j < i; j++) {
                dp[j] += nums[i];
                if (dp[j] <= k) {
                    max = Math.max(max, dp[j]);
                }
            }
        }
        return max;

=======

        int rows = matrix.length;
        int cols = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for (int left = 0; left < cols; left++) {
            int[] rowSum = new int[rows];
            for (int right = left; right < cols; right++) {
                for (int i = 0; i < rows; i++) {
                    rowSum[i] += matrix[i][right];
                }
                max = Math.max(max, dpmax(rowSum, k));
                if (max == k) {
                    return k;
                }
            }
        }
        return max;
    }

    private int dpmax(int[] rowSum, int k) {
        int max = Integer.MIN_VALUE;
        int sum = 0;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        for (int i = 0; i < rowSum.length; i++) {
            sum += rowSum[i];
            Integer ceiling = set.ceiling(sum - k);
            if (ceiling != null) {
                max = Math.max(max, sum - ceiling);
            }
            set.add(sum);
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            int[] sum = new int[n];
            for (int j = i; j < m; j++) {
                for (int p = 0; p < n; p++) {
                    sum[p] += matrix[j][p];
                }
                TreeSet<Integer> set = new TreeSet<>();
                set.add(0);
                int curSum = 0;
                for (int p = 0; p < n; p++) {
                    curSum += sum[p];
                    Integer num = set.ceiling(curSum - k);
                    if (num != null) {
                        max = Math.max(max, curSum - num);
                    }
                    set.add(curSum);
                }
            }
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] preSum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                preSum[i][j] = preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 1; i <= m; i++) {
            for (int j = i; j <= m; j++) {
                TreeSet<Integer> set = new TreeSet<>();
                set.add(0);
                for (int c = 1; c <= n; c++) {
                    int sum = preSum[j][c] - preSum[i - 1][c];
                    Integer num = set.ceiling(sum - k);
                    if (num != null) {
                        max = Math.max(max, sum - num);
                    }
                    set.add(sum);
                }
            }
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int[][] preSum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                preSum[i][j] = matrix[i - 1][j - 1] + preSum[i - 1][j] + preSum[i][j - 1] - preSum[i - 1][j - 1];
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                for (int p = i; p <= m; p++) {
                    for (int q = j; q <= n; q++) {
                        int sum = preSum[p][q] - preSum[i - 1][q] - preSum[p][j - 1] + preSum[i - 1][j - 1];
                        if (sum <= k) {
                            max = Math.max(max, sum);
                        }
                    }
                }
            }
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int[] sum = new int[m];
            for (int j = i; j < n; j++) {
                for (int r = 0; r < m; r++) {
                    sum[r] += matrix[r][j];
                }
                max = Math.max(max, maxSubArray(sum, k));
            }
        }
        return max;
    }
    private int maxSubArray(int[] sum, int k) {
        int max = Integer.MIN_VALUE;
        int sumSoFar = 0;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        for (int i = 0; i < sum.length; i++) {
            sumSoFar += sum[i];
            Integer ceiling = set.ceiling(sumSoFar - k);
            if (ceiling != null) {
                max = Math.max(max, sumSoFar - ceiling);
            }
            set.add(sumSoFar);
        }
        return max;

=======

        int m = matrix.length;
        int n = matrix[0].length;
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            int[] rowSum = new int[n];
            for (int j = i; j < m; j++) {
                for (int c = 0; c < n; c++)
                    rowSum[c] += matrix[j][c];
                res = Math.max(res, maxSum(rowSum, k));
            }
        }
        return res;
    }

    private int maxSum(int[] arr, int k) {
        int res = Integer.MIN_VALUE;
        int sum = 0;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
            Integer ceiling = set.ceiling(sum - k);
            if (ceiling != null)
                res = Math.max(res, sum - ceiling);
            set.add(sum);
        }
        return res;

=======

        int r = matrix.length;
        int c = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < r; i++) {
            int[] sums = new int[c];
            for (int j = i; j < r; j++) {
                for (int l = 0; l < c; l++) {
                    sums[l] += matrix[j][l];
                }
                max = Math.max(max, maxSumSubArray(sums, k));
            }
        }
        return max;
    }

    private int maxSumSubArray(int[] nums, int k) {
        int max = Integer.MIN_VALUE;
        int sum = 0;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            Integer ceiling = set.ceiling(sum - k);
            if (ceiling != null) {
                max = Math.max(max, sum - ceiling);
            }
            set.add(sum);
        }
        return max;
