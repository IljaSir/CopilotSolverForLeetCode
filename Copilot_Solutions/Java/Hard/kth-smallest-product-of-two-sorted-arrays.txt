Synthesizing 10/10 solutions

=======

        long lo = (long)nums1[0] * nums2[0];
        long hi = (long)nums1[nums1.length - 1] * nums2[nums2.length - 1];
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long count = 0;
            for (int i = 0; i < nums1.length; i++) {
                int j = upperBound(nums2, mid / nums1[i]);
                count += j;
            }
            if (count < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
    
    private int upperBound(int[] nums, long target) {
        int lo = 0;
        int hi = nums.length;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (nums[mid] <= target) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            min = Math.min(min, nums1[i]);
            max = Math.max(max, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            min = Math.min(min, nums2[i]);
            max = Math.max(max, nums2[i]);
        }
        long low = min * max;
        long high = max * max;
        while (low < high) {
            long mid = low + (high - low) / 2;
            long count = 0;
            int i = 0;
            int j = nums2.length - 1;
            while (i < nums1.length && j >= 0) {
                if (nums1[i] * nums2[j] <= mid) {
                    count += j + 1;
                    i++;
                } else {
                    j--;
                }
            }
            if (count >= k) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;

=======

        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            min = Math.min(min, nums1[i]);
            max = Math.max(max, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            min = Math.min(min, nums2[i]);
            max = Math.max(max, nums2[i]);
        }
        long low = min * max;
        long high = max * max;
        while (low < high) {
            long mid = low + (high - low) / 2;
            long count = 0;
            int i = 0;
            int j = nums2.length - 1;
            while (i < nums1.length && j >= 0) {
                if (nums1[i] * nums2[j] <= mid) {
                    count += j + 1;
                    i++;
                } else {
                    j--;
                }
            }
            if (count >= k) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;

=======

        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            min = Math.min(min, nums1[i]);
            max = Math.max(max, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            min = Math.min(min, nums2[i]);
            max = Math.max(max, nums2[i]);
        }
        long low = min * max;
        long high = max * max;
        while (low < high) {
            long mid = low + (high - low) / 2;
            long count = 0;
            int i = 0;
           urn cnt;

=======

        long lo = Long.MAX_VALUE, hi = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            lo = Math.min(lo, nums1[i]);
            hi = Math.max(hi, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            lo = Math.min(lo, nums2[i]);
            hi = Math.max(hi, n ms2[i]);
        }
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long count = 0;
            foi (intti = 0; i < nums1.length; i++) {
                int j = 0;
                while (j < nums2.length && nums1[i] * nums2[j] <= mid) {
                    j++;
                }
                 ouj  += j= nums2.length - 1;
            }            while (i < nums1.length && j >= 0) {
            if (count < k) {
                lo   mid + 1;
            } else {
                hi   mid;
            }
        }
        return lo;

     ==         if (nums1[i] * nums2[j] <= mid) {
                    count += j + 1;
                    i++;
                } else {
                    j--;
                }
            }
            if (count >= k) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;

=======

        long lo = Long.MAX_VALUE, hi = Long.MIN_VALUE;
        for (int n1 : nums1) {
            lo = Math.min(lo, n1);
            hi = Math.max(hi, n1);
        }
        for (int n2 : nums2) {
            lo = Math.min(lo, n2);
            hi = Math.max(hi, n2);
        }
        while (lo <= hi) {
            long mid = lo + (hi - lo) / 2;
            long cnt = countLessOrEqual(nums1, nums2, mid);
            if (cnt < k) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
           urn cnt;

=======

        long lo = Long.MAX_VALUE, hi = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            lo = Math.min(lo, nums1[i]);
            hi = Math.max(hi, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            lo = Math.min(lo, nums2[i]);
            hi = Math.max(hi, nums2[i]);
        }
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long co nt = 0;
            fo} (int i = 0; i < nums1.legth; i++) {
               int j = 0;
                while (j < nums2.length && nums1[i] * nums2[j] <= mid) {
                    j++;
                }
                ou += j
            }
            if (count < k) {        }
                lo   mid + 1;
            } else {
                hi   mid;
            }
        }
        return lo;

     == return lo;
    }
    
    private long countLessOrEqual(int[] nums1, int[] nums2, long x) {
        long cnt = 0;
        int n = nums2.length;
        for (int n1 : nums1) {
            if (n1 == 0) {
                if (x >= 0) {
                    cnt += n;
                }
            } else if (n1 > 0) {
                int idx = Arrays.binarySearch(nums2, (int) (x / n1));
                if (idx >= 0) {
                    while (idx < n && (long) n1 * nums2[idx] <= x) {
                        idx++;
                    }
                    cnt += idx;
                } else if (-idx <= n) {
                    cnt += -idx;
                }
            } else { + 1);
        }
        return cnt;

=======

        // Binary search for the answer
        long left = (long)nums1[0] * nums2[0];
        long right = (long)nums1[nums1.length-1] * nums2[nums2.length-1];
        
        while (left < right) {
            long mid = left + (right - left) / 2;
            if (countLessOrEqual(mid, nums1, nums2) < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    private long countLessOrEqual(long target, int[] nums1, int[] nums2) {
        long count = 0;
        for (int i = 0; i < nums1.length; i++) {
            int index = Arrays.binarySearch(nums2, (int)(target / nums1[i]));
            if (index < 0) {
                index = -(index + 1) - 1;
            } else {
               while (index < nums2.length - 1 && nums2[index1] == nums2[index]) {
                   index++;
                }
            }
            count += index + ;
        }
        return count;

=======

        int N = nums1.length, M = nums2.length;
        int[] p1 = new int[N], p2 = new int[M];
        for (int i = 0; i < N; i++) {
            p1[i] = i;
        }
        for (int i = 0; i < M; i++) {
            p2[i] = i;
        }
        long lo = (long) nums1[0] * nums2[0];
        long hi = (long) nums1[N - 1] * nums2[M - 1];
        while (lo < hi) {
            long mid = lo + hi >> 1;
            if (count(mid, nums1, nums2, p1, p2) < k {
                lo = mid + 1
              else {       int idx = Arrays.binarySearch(nums2, (int) (x / n1));
                hi = mid;
            }
        }
               lo;
    }

    private long  ount(long mid, int[] nums1, int[] nums2, int[] p1, int[] p2) {
        long res = 0;
        for (int i = 0, j = nums2.length - 1; i < nums1.length; i++) {
            while (j >= 0 && (long) nums1[i] * nums2[j] > mid) {
                j--;
            }
            res += j + 1;
        }
        return res;

=======

        long ans = 0;
        int n = nums1.length;
        int m = nums2.length;
        long[] p = new long[n * m + 1];
        long[] q = new long[n * m + 1];
        long[] r = new long[n * m + 1];
        long[] s = new long[n * m + 1];
        for (int i = 0; i < n; i++) {
            p[i] = nums1[i] * nums2[0];
            q[i] = i;
            r[i] = 0;
            s[i] = 1;
        }
        for (int i = n; i < n * m; i++) {
            p[i] = Long.MAX_VALUE;
            q[i] = -1;
            r[i] = -1;
            s[i] = -1;
        }
        for (int j = 0; j < m; j++) {
            p[n * j] = nums1[0] * nums2[j];
            q[n * j] = 0;
            r[n * j] = j;
            s[n * j] = 1;
        }
        for (int j = 1; j < m; j++) {
            p[n * j] = Long.MAX_VALUE;
            q[n * j] = -1;
            r[n * j] = -1;
            s[n * j] = -1;
        }
        for (int i = 1; i < n; i++) {
            for (iif j = 1  j < m; j++) {
                long x = nums1[i] * nums2[j];
                int l = 0;
                int r = n * m - 1;
                int mid = (l + r) / 2;
                while (l < r) {
                    if (p[mid] < x) {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                    mid = (l + r) / 2;
                }
                for (int k = n * m - 1; k > mid; k--) {
                    p[k] = p[k - 1];
                    q[k] = q[k - 1];
                    r[k] = r[k - 1];
                    s[k] = s[k -(idx >= 0) {
                    while (idx >= 0 && (long) n1 * nums2[idx] > x) {
                        idx--;
                    }
                    cnt += n - idx - 1;
                } else if (-idx <= n) {
                    cnt += n + idx + 1;
                }
            }
        }
        return cnt;

=======

        long lo = Long.MAX_VALUE, hi = Long.MIN_VALUE;
        for (int i = 0; i < nums1.length; i++) {
            lo = Math.min(lo, nums1[i]);
            hi = Math.max(hi, nums1[i]);
        }
        for (int i = 0; i < nums2.length; i++) {
            lo = Math.min(lo, nums2[i]);
            hi = Math.max(hi, nums2[i]);
        }
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long count = 0;
            for (int i = 0; i < nums1.length; i++) {
                int j = 0;
                while (j < nums2.length && nums1[i] * nums2[j] <= mid) {
                    j++;
                }
                count += j;
            }
            if (count < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        int n = nums1.length;
        int m = nums2.length;
        if (n > m) {
            return kthSmallestProduct(nums2, nums1, k);
        }
        long lo = Long.MAX_VALUE;
        long hi = Long.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            lo = Math.min(lo, nums1[i] * (long) nums2[0]);
            hi = Math.max(hi, nums1[i] * (long) nums2[m - 1]);
        }
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            int count = 0;
            for (int i = 0; i < n; i++) {
                int j = m - 1;
                while (j >= 0 && nums1[i] * (long) nums2[j] > mid) {
                    j--;
                }
                count + 1);
        }
        return cnt;

=======

        // Binary search for the answer
        long left = (long)nums1[0] * nums2[0];
        long right = (long)nums1[nums1.length-1] * nums2[nums2.length-1];
        
        while (left < right) {
            long mid = left + (right - left) / 2;
            if (countLessOrEqual(mid, nums1, nums2) < k) {
                left = mid += ;
            } else {
                right = mid;
            }
        }
        
        return left;
    }
    
    private long countLessOrEqual(long target, int[] nums1, int[] nums2j {
        long count = 0 + 1;
        for (int i = 0; i < nums1.length; i++) {
            int index = Arrays.binarySearch(nums2, (int)(target / nums1[i]));
            if (index < 0) {
                index = -(index + 1) - 1;
            } else {
                while (index < nums2.length - 1 && nums2[index+1] == nums2[index]) {
                    index++;
                }
            }
            count += index + 1;
            }
            if (oucount < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        long lo = Long.MAX_VALUE, hi = Long.MIN_VALUE;
        for (int n1 : nums1) {
            lo = Math.min(lo, n1);
            hi = Math.max(hi, n1);
        }
        for (int n2 : nums2) {
            lo = Math.min(lo, n2);
            hi = Math.max(hi, n2);
        }
        while (lo <= hi) {
            long mid = lo + (hi - lo) / 2;
            long cnt = countLessOrEqual(nums1, nums2, mid);
            if (cnt < k) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return lo;
    }
    
    private long countLessOrEqual(int[] nums1, int[] nums2, long x) {
        long cnt = 0;
        int n = nums2.length;
        for (int n1 : nums1) {
            if (n1 == 0) {
                if (x >= 0) {
                    cnt += n;
                }
            } else if (n1 > 0) {
                int idx = Arrays.binarySearch(nums2, (int) (x / n1));
                if (idx >= 0) {
                    while (idx < n && (long) n1 * nums2[idx] <= x) {
                        idx++;
                    }
                    cnt += idx;
                } else if (-idx <= n) {
                    cnt += -idx;
                }
            } else {
                int idx = Arrays.binarySearch(nums2, (int) (x / n1));
                if (idx >= 0) {
                    while (idx >= 0 && (long) n1 * nums2[idx] > x) {
                        idx--;
                    }
                    cnt += n - idx - 1;
                } else if (-idx <= n) {
                    cnt += n + idx + 1;
                }
            }
        }
        return cnt;

=======

        int n = nums1.length;
        int m = nums2.length;
        if (n > m) {
            return kthSmallestProduct(nums2, nums1, k);
        }
        long lo = Long.MAX_VALUE;
        long hi = Long.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            lo = Math.min(lo, nums1[i] * (long) nums2[0]);
            hi = Math.max(hi, nums1[i] * (long) nums2[m - 1]);
        }
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            int count = 0;
            for (int i = 0; i < n; i++) {
                int j = m - 1;
                while (j >= 0 && nums1[i] * (long) nums2[j] > mid) {
                    j--;
                }
                count += j + 1;
            }
            if (count < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;

=======

        long l = Long.MIN_VALUE;
        long r = Long.MAX_VALUE;
        while (l < r) {
            long m = l + (r - l) / 2;
            if (count(nums1, nums2, m) < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l;
    }
    private long count(int[] nums1, int[] nums2, long m) {
        long cnt = 0;
        for (int i = 0; i < nums1.length; i++) {
            int l = 0;
            int r = nums2.length - 1;
            while (l < r) {
                int mid = l + (r - l) / 2;
                if (nums1[i] * (long) nums2[mid] <= m) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            cnt += nums1[i] * (long) nums2[l] <= m ? l + 1 : l;
        }
        return cnt;

=======

        long min = Long.MIN_VALUE;
        long max = Long.MAX_VALUE;
        while (min < max) {
            long mid = min + (max - min) / 2;
            long cnt = count(nums1, nums2, mid);
            if (cnt < k) {
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;
    }
    
    private long count(int[] nums1, int[] nums2, long target) {
        long cnt = 0;
        for (int i = 0; i < nums1.length; i++) {
            int j = nums2.length - 1;
            while (j >= 0 && nums1[i] * (long)nums2[j] > target) {
                j--;
            }
            cnt += (j + 1);
        }
        return cnt;
