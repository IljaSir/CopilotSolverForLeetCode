Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(tasks, (a, b) -> (b[1] - b[0]) - (a[1] - a[0]));
        int energy = 0;
        for (int[] task : tasks) {
            energy = Math.max(energy + task[0], task[1]);
        }
        return energy;

=======

        Arrays.sort(tasks, (a, b) -> (b[1] - b[0]) - (a[1] - a[0]));
        int res = 0;
        for (int[] task : tasks) {
            res = Math.max(res + task[0], task[1]);
        }
        return res;

=======

        Arrays.sort(tasks, (a, b) -> a[1] - a[0] - b[1] + b[0]);
        int energy = 0;
        for (int[] task : tasks) {
            energy = Math.max(energy + task[0], task[1]);
        }
        return energy;

=======

        Arrays.sort(tasks, (a, b) -> a[1] - a[0] - (b[1] - b[0]));
        int res = 0;
        for (int[] t : tasks) {
            res = Math.max(res + t[0], t[1]);
        }
        return res;

=======

        Arrays.sort(tasks, Comparator.comparingInt(a -> a[1] - a[0]));
        int energy = 0;
        for (int[] task : tasks) {
            energy = Math.max(energy + task[0], task[1]);
        }
        return energy;

=======

        Arrays.sort(tasks, (a, b) -> (a[1] - a[0]) - (b[1] - b[0]));
        int cur = 0;
        for (int[] t : tasks) {
            cur = Math.max(cur + t[0], t[1]);
        }
        return cur;

=======

        Arrays.sort(tasks, (a, b) -> a[1] - a[0] - b[1] + b[0]);
        int ans = 0, cur = 0;
        for (int[] t : tasks) {
            ans += Math.max(t[1] - cur, 0);
            cur = Math.max(cur + t[0], t[1]);
        }
        return ans;

=======

        int res = 0;
        int n = tasks.length;
        int[] diff = new int[n];
        for (int i = 0; i < n; i++) {
            res += tasks[i][0];
            diff[i] = tasks[i][1] - tasks[i][0];
        }
        Arrays.sort(diff);
        for (int i = n-1; i >= 0; i--) {
            if (diff[i] > 0) {
                res += diff[i];
            } else {
                break;
            }
        }
        return res;
