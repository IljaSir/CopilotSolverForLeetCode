Synthesizing 10/10 solutions

=======

        if (num == 0) return "Zero";
        String[] thousands = {"", "Thousand", "Million", "Billion"};
        int i = 0;
        String words = "";
        while (num > 0) {
            if (num % 1000 != 0) {
                words = helper(num % 1000) + thousands[i] + " " + words;
            }
            num /= 1000;
            i++;
        }
        return words.trim();
    }
    
    private String helper(int num) {
        String[] below20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return below20[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return below20[num / 100] + " Hundred " + helper(num % 100);
        }

=======

        if (num == 0) {
            return "Zero";
        }
        String[] thousands = {"", "Thousand", "Million", "Billion"};
        int i = 0;
        String words = "";
        while (num > 0) {
            if (num % 1000 != 0) {
                words = helper(num % 1000) + thousands[i] + " " + words;
            }
            num /= 1000;
            i++;
        }
        return words.trim();
    }
    
    private String helper(int num) {
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return lessThan20[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return lessThan20[num / 100] + " Hundred " + helper(num % 100);
        }

=======

        if (num == 0) {
            return "Zero";
        }
        String[] thousands = {"", "Thousand", "Million", "Billion"};
        int i = 0;
        String words = "";
        while (num > 0) {
            if (num % 1000 != 0) {
                words = helper(num % 1000) + thousands[i] + " " + words;
            }
            num /= 1000;
            i++;
        }
        return words.trim();
    }
    
    private String helper(int num) {
        String[] lessThan20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return lessThan20[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return lessThan20[num / 100] + " Hundred " + helper(num % 100);
        }

=======

        if (num == 0) {
            return "Zero";
        }
        String[] digits = {
            "One",
            "Two",
            "Three",
            "Four",
            "Five",
            "Six",
            "Seven",
            "Eight",
            "Nine"
        };
        String[] tens = {
            "Ten",
            "Twenty",
            "Thirty",
            "Forty",
            "Fifty",
            "Sixty",
            "Seventy",
            "Eighty",
            "Ninety"
        };
        String[] teens = {
            "Eleven",
            "Twelve",
            "Thirteen",
            "Fourteen",
            "Fifteen",
            "Sixteen",
            "Seventeen",
            "Eighteen",
            "Nineteen"
        };
        String[] thousands = {
            "Thousand",
            "Million",
            "Billion"
        };
        StringBuilder sb = new StringBuilder();
        int i = 0;
        while (num > 0) {
            if (num % 1000 > 0) {
                StringBuilder temp = new StringBuilder();
                helper(temp, num % 1000, digits, tens, teens);
                temp.append(thousands[i]).append(" ");
                sb.insert(0, temp);
            }
            num /= 1000;
            i++;
        }
        return sb.toString().trim();
    }
    private void helper(StringBuilder sb, int num, String[] digits, String[] tens, String[] teens) {
        if (num == 0) {
            return;
        } else if (num < 10) {
            sb.append(digits[num - 1]).append(" ");
        } else if (num < 20) {
            sb.append(teens[num - 11]).append(" ");
        } else if (num < 100) {
            sb.append(tens[num / 10 - 1]).append(" ");
            helper(sb, num % 10, digits, tens, teens);
        } else {
            sb.append(digits[num / 100 - 1]).append(" Hundred ");
            helper(sb, num % 100, digits, tens, teens);
        }

=======

        if (num == 0) {
            return "Zero";
        }
        String[] units = new String[]{"", "Thousand", "Million", "Billion"};
        String[] digits = new String[]{"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] tens = new String[]{"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        String res = "";
        int i = 0;
        while (num > 0) {
            int d = num % 1000;
            String dStr = "";
            if (d > 0) {
                int h = d / 100;
                if (h > 0) {
                    dStr = digits[h] + " Hundred";
                }
                int t = d % 100;
                if (t > 0) {
                    if (t < 20) {
                        dStr += " " + digits[t];
                    } else {
                        dStr += " " + tens[t / 10];
                        if (t % 10 > 0) {
                            dStr += " " + digits[t % 10];
                        }
                    }
                }
                res = dStr + " " + units[i] + " " + res;
            }
            num /= 1000;
            i++;
        }
        return res.trim();

=======

        if (num == 0) {
            return "Zero";
        }
        String[] units = {"", "Thousand", "Million", "Billion"};
        int unit = 0;
        String res = "";
        while (num > 0) {
            int n = num % 1000;
            if (n > 0) {
                res = helper(n) + units[unit] + " " + res;
            }
            unit++;
            num /= 1000;
        }
        return res.trim();
    }
    private String helper(int num) {
        String[] below20 = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        if (num == 0) {
            return "";
        } else if (num < 20) {
            return below20[num] + " ";
        } else if (num < 100) {
            return tens[num / 10] + " " + helper(num % 10);
        } else {
            return below20[num / 100] + " Hundred " + helper(num % 100);
        }

=======

        if (num == 0) {
            return "Zero";
        }
        String[] levels = {"", "Thousand", "Million", "Billion"};
        int level = 0;
        String result = "";
        while (num > 0) {
            if (num % 1000 != 0) {
                result = helper(num % 1000) + levels[level] + " " + result;
            }
            num /= 1000;
            level++;
        }
        return result.trim();
    }
    
    private String helper(int num) {
        String[] belowTen = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
        String[] belowTwenty = {"Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] belowHundred = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        if (num == 0) {
            return "";
        } else if (num < 10) {
            return belowTen[num] + " ";
        } else if (num < 20) {
            return belowTwenty[num - 10] + " ";
        } else if (num < 100) {
            return belowHundred[num / 10] + " " + helper(num % 10);
        } else {
            return belowTen[num / 100] + " Hundred " + helper(num % 100);
        }

=======

        if (num == 0) return "Zero";
        String[] units = {"", "Thousand", "Million", "Billion"};
        String[] digits = {"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
        String[] tens = {"Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] tens2 = {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < units.length; i++) {
            if (num % 1000 != 0) {
                sb.insert(0, helper(num % 1000, digits, tens, tens2) + units[i] + " ");
            }
            num /= 1000;
        }
        return sb.toString().trim();

=======

        if (num == 0) return "Zero";
        String[] thousands = new String[] {"", "Thousand", "Million", "Billion"};
        String[] singles = new String[] {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
        String[] tens = new String[] {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        String[] teens = new String[] {"", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        int i = 0;
        String result = "";
        while (num > 0) {
            String temp = "";
            int n = num % 1000;
            if (n > 99) {
                temp += singles[n / 100] + " Hundred";
            }
            if (n % 100 > 10 && n % 100 < 20) {
                temp += " " + teens[n % 100 - 10];
            } else {
                if (n % 100 > 9) {
                    temp += " " + tens[n % 100 / 10];
                }
                if (n % 10 > 0) {
                    temp += " " + singles[n % 10];
                }
            }
            if (temp.trim().length() > 0) {
                result = temp.trim() + " " + thousands[i] + " " + result;
            }
            num = num / 1000;
            i++;
        }
        return result.trim();

=======

        if (num == 0) return "Zero";
        String[] words = {"", "Thousand", "Million", "Billion"};
        String[] units = {"", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"};
        String[] tens = {"", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        String[] teens = {"", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String res = "";
        int i = 0;
        while (num > 0) {
            int n = num % 1000;
            if (n != 0) {
                res = helper(n, units[i], units, tens, teens, units) + res;
            }
            i++;
            num /= 1000;
        }
        return res.trim();
    }
    
    private String helper(int n, String unit, String[] units, String[] tens, String[] teens, String[] units) {
        int h = n / 100;
        int t = (n % 100) / 10;
        int u = n % 10;
        String res = "";
        if (h != 0) {
            res += units[h] + " Hundred ";
        }
        if (t == 1) {
            res += teens[u] + " ";
        } else {
            if (t != 0) {
                res += tens[t] + " ";
            }
            if (u != 0) {
                res += units[u] + " ";
            }
        }
        res += unit + " ";
        return res;
