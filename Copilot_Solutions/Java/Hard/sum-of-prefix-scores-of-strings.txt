Synthesizing 10/10 solutions

=======

        int[] result = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < words[i].length(); j++) {
                String prefix = words[i].substring(0, j + 1);
                for (int k = 0; k < words.length; k++) {
                    if (words[k].startsWith(prefix)) {
                        result[i]++;
                    }
                }
            }
        }
        return result;

=======

        int[] result = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < words[i].length(); j++) {
                String prefix = words[i].substring(0, j + 1);
                for (int k = 0; k < words.length; k++) {
                    if (words[k].startsWith(prefix)) {
                        result[i] += 1;
                    }
                }
            }
        }
        return result;

=======

        int[] scores = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j < word.length(); j++) {
                String prefix = word.substring(0, j + 1);
                for (int k = 0; k < words.length; k++) {
                    if (words[k].startsWith(prefix)) {
                        scores[i]++;
                    }
                }
            }
        }
        return scores;

=======

        int[] res = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < words[i].length(); j++) {
                String prefix = words[i].substring(0, j + 1);
                for (String word : words) {
                    if (word.startsWith(prefix)) {
                        res[i]++;
                    }
                }
            }
        }
        return res;

=======

        int[] result = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            int count = 0;
            for (int j = 0; j < words.length; j++) {
                if (words[j].startsWith(word)) {
                    count++;
                }
            }
            result[i] = count;
        }
        return result;

=======

        int[] ans = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            int score = 0;
            for (int j = 1; j <= words[i].length(); j++) {
                for (int k = 0; k < words.length; k++) {
                    if (words[k].startsWith(words[i].substring(0, j))) {
                        score++;
                    }
                }
            }
            ans[i] = score;
        }
        return ans;

=======

        int[] res = new int[words.length];
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < words[i].length(); j++) {
                char c = words[i].charAt(j);
                if (map.containsKey(c)) {
                    map.put(c, map.get(c) + 1);
                } else {
                    map.put(c, 1);
                }
                res[i] += map.get(c);
            }
            map.clear();
        }
        return res;

=======

        int[] result = new int[words.length];
        int[] prefixCount = new int[1001];
        for (int i = 0; i < words.length; i++) {
            for (int j = 1; j <= words[i].length(); j++) {
                result[i] += prefixCount[j];
            }
            prefixCount[words[i].length()]++;
        }
        return result;

=======

        int[] ans = new int[words.length];
        int i = 0;
        for (String word : words) {
            ans[i] = 0;
            for (int j = 1; j <= word.length(); j++) {
                ans[i] += countPrefix(words, word.substring(0, j));
            }
            i++;
        }
        return ans;
    }
    private int countPrefix(String[] words, String prefix) {
        int count = 0;
        for (String word : words) {
            if (word.length() >= prefix.length() && word.substring(0, prefix.length()).equals(prefix)) {
                count++;
            }
        }
        return count;

=======

        int[] answer = new int[words.length];
        int[] prefix = new int[26];
        for (int i = 0; i < words.length; i++) {
            int[] temp = new int[26];
            for (int j = 0; j < words[i].length(); j++) {
                temp[words[i].charAt(j) - 'a']++;
                prefix[words[i].charAt(j) - 'a']++;
                answer[i] += prefix[words[i].charAt(j) - 'a'];
            }
            prefix = temp;
        }
        return answer;
