Synthesizing 10/10 solutions

=======

        Arrays.sort(satisfaction);
        int res = 0;
        int sum = 0;
        for (int i = satisfaction.length - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > 0) {
                res += sum;
            } else {
                break;
            }
        }
        return res;

=======

        Arrays.sort(satisfaction);
        int sum = 0;
        int max = 0;
        for (int i = satisfaction.length - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > 0) {
                max += sum;
            } else {
                break;
            }
        }
        return max;

=======

        int n = satisfaction.length;
        Arrays.sort(satisfaction);
        int ans = 0;
        int sum = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > 0) {
                ans += sum;
            } else {
                break;
            }
        }
        return ans;

=======

        Arrays.sort(satisfaction);
        int n = satisfaction.length;
        int res = 0;
        int sum = 0;
        for (int i = n - 1; i >= 0 && satisfaction[i] + sum > 0; i--) {
            sum += satisfaction[i];
            res += sum;
        }
        return res;

=======

        Arrays.sort(satisfaction);
        int n = satisfaction.length;
        int sum = 0;
        int max = 0;
        for (int i = n - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > max) {
                max = sum;
            }
        }
        return max;

=======

        Arrays.sort(satisfaction);
        int sum = 0, res = 0;
        for (int i = satisfaction.length - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum <= 0) {
                break;
            }
            res += sum;
        }
        return res;

=======

        Arrays.sort(satisfaction);
        int max = 0;
        int sum = 0;
        int n = satisfaction.length;
        for (int i = n - 1; i >= 0; i--) {
            sum += satisfaction[i];
            if (sum > 0) {
                max += sum;
            } else {
                break;
            }
        }
        return max;

=======

        Arrays.sort(satisfaction);
        int n = satisfaction.length;
        int[] dp = new int[n + 1];
        int max = 0;
        for (int i = n - 1; i >= 0; i--) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += satisfaction[j];
                dp[i] = Math.max(dp[i], dp[j + 1] + sum);
            }
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        Arrays.sort(satisfaction);
        int sum = 0;
        int current = 0;
        int result = 0;
        for (int i = satisfaction.length - 1; i >= 0; i--) {
            current += satisfaction[i];
            if (current > 0) {
                sum += current;
                result = Math.max(result, sum);
            } else {
                break;
            }
        }
        return result;

=======

        int n = satisfaction.length;
        Arrays.sort(satisfaction);
        int[] sum = new int[n];
        for (int i = 0; i < n; i++) {
            sum[i] = satisfaction[i];
            if (i > 0) {
                sum[i] += sum[i - 1];
            }
        }
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (sum[i] >= 0) {
                res += sum[i];
            } else {
                break;
            }
        }
        return res;
