Synthesizing 10/10 solutions

=======

        int MOD = 1_000_000_007;
        int N = nums.length;
        Arrays.sort(nums);
        long[] pow2 = new long[N];
        pow2[0] = 1;
        for (int i = 1; i < N; ++i)
            pow2[i] = pow2[i-1] * 2 % MOD;

        long ans = 0;
        for (int i = 0; i < N; ++i)
            ans = (ans + nums[i] * (pow2[i] - pow2[N-1-i])) % MOD;
        return (int) ans;

=======

        Arrays.sort(nums);
        long[] pows = new long[nums.length];
        pows[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pows[i] = pows[i - 1] * 2 % 1000000007;
        }
        long res = 0;
        for (int i = 0; i < nums.length; i++) {
            res = (res + nums[i] * (pows[i] - pows[nums.length - i - 1])) % 1000000007;
        }
        return (int) res;

=======

        Arrays.sort(nums);
        int n = nums.length;
        long[] pow = new long[n];
        pow[0] = 1;
        for (int i = 1; i < n; i++) {
            pow[i] = pow[i - 1] * 2 % 1000000007;
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + (pow[i] - pow[n - i - 1]) * nums[i]) % 1000000007;
        }
        return (int) ans;

=======

        int MOD = 1_000_000_007;
        Arrays.sort(nums);
        int n = nums.length;
        int[] pow2 = new int[n];
        pow2[0] = 1;
        for (int i = 1; i < n; i++) {
            pow2[i] = pow2[i - 1] * 2 % MOD;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + (pow2[i] - pow2[n - 1 - i]) * nums[i]) % MOD;
        }
        return (ans + MOD) % MOD;

=======

        int mod = 1000000007;
        Arrays.sort(nums);
        long[] pow2 = new long[nums.length];
        pow2[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pow2[i] = pow2[i - 1] * 2 % mod;
        }
        long res = 0;
        for (int i = 0; i < nums.length; i++) {
            res = (res + (pow2[i] - pow2[nums.length - i - 1]) * nums[i]) % mod;
        }
        return (int)res;

=======

        Arrays.sort(nums);
        long[] dp = new long[nums.length];
        dp[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            dp[i] = (dp[i - 1] << 1) % 1000000007;
        }
        long sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = (sum + (nums[i] - nums[nums.length - i - 1]) * dp[i]) % 1000000007;
        }
        return (int) sum;

=======

        int mod = 1000000007;
        Arrays.sort(nums);
        int n = nums.length;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i] = dp[i - 1] * 2 % mod;
        }
        long res = 0;
        for (int i = 0; i < n; i++) {
            res = (res + (nums[i] - nums[n - 1 - i]) * (dp[i] - dp[n - 1 - i])) % mod;
        }
        return (int) ((res + mod) % mod);

=======

        int mod = 1000000007;
        Arrays.sort(nums);
        long sum = 0;
        long[] pow = new long[nums.length];
        pow[0] = 1;
        for (int i = 1; i < pow.length; i++) {
            pow[i] = (pow[i - 1] * 2) % mod;
        }
        for (int i = 0; i < nums.length; i++) {
            sum = (sum + (nums[i] - nums[nums.length - i - 1]) * pow[i] % mod) % mod;
        }
        return (int) sum;

=======

        Arrays.sort(nums);
        long[] pows = new long[nums.length];
        long mod = (long) 1e9 + 7;
        pows[0] = 1;
        for (int i = 1; i < nums.length; i++) {
            pows[i] = (pows[i - 1] * 2) % mod;
        }
        long ans = 0;
        for (int i = 0; i < nums.length; i++) {
            ans = (ans + (pows[i] - pows[nums.length - i - 1]) * nums[i]) % mod;
        }
        return (int) ans;

=======

        Arrays.sort(nums);
        long c = 1, result = 0, mod = 1000000007;
        for(int i = 0; i < nums.length; i++){
            result = (result + nums[i] * c - nums[nums.length - 1 - i] * c) % mod;
            c = c * 2 % mod;
        }
        return (int)((result + mod) % mod);
