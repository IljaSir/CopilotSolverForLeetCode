Synthesizing 10/10 solutions

=======

        long res = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                nums[i] /= 2;
                i--;
            } else {
                res++;
            }
        }
        return res;

=======

        long ans = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 1) {
                if (i + 1 < nums.length && nums[i + 1] % 2 == 1) {
                    i++;
                }
                ans++;
            }
        }
        return ans;

=======

        long res = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= nums[i - 1]) {
                res += nums[i - 1] - nums[i] + 1;
                nums[i] = nums[i - 1] + 1;
            }
        }
        return res;

=======

        long ans = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                nums[i] = 2;
            } else {
                nums[i] = 1;
            }
        }
        int[] dp = new int[nums.length];
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            dp[i] = nums[i];
            if (i > 0 && nums[i] == 2 && nums[i - 1] == 2) {
                dp[i] = dp[i - 1] + 2;
            }
            max = Math.max(max, dp[i]);
        }
        return (nums.length - max + 1) / 2;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            if (nums[i] % 2 == 0) {
                continue;
            }
            ++ans;
            if (i < n - 1 && nums[i + 1] % 2 == 1) {
                ++i;
            }
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n - 1; i++) {
            if (nums[i] > nums[i + 1]) {
                int diff = nums[i] - nums[i + 1];
                ans += (diff + 1) / 2;
                nums[i + 1] += ((diff + 1) / 2) * 2;
            }
        }
        return ans;

=======

        long ans = 0;
        int len = nums.length;
        for (int i = 0; i < len; i++) {
            if (nums[i] % 2 == 0) {
                continue;
            }
            if (i == len - 1 || nums[i + 1] % 2 == 0) {
                ans++;
            } else {
                ans += 2;
                i++;
            }
        }
        return ans;

=======

        int n = nums.length;
        long[] dp = new long[n];
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            dp[i] = Math.min(dp[i - 1] + 1, dp[i]);
            if (nums[i] > nums[i - 1]) {
                dp[i] = Math.min(dp[i - 1], dp[i]);
            }
            if (i > 1 && nums[i] > nums[i - 2]) {
                dp[i] = Math.min(dp[i - 2] + 1, dp[i]);
            }
        }
        return dp[n - 1];

=======

        long res = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 0){
                res++;
            }else{
                if(i < nums.length - 1 && nums[i + 1] % 2 == 0){
                    res++;
                    i++;
                }else{
                    res += 2;
                }
            }
        }
        return res;

=======

        long total = 0;
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            if (x % 2 == 0) {
                continue;
            }
            total++;
            if (i + 1 < n && nums[i + 1] % 2 == 1) {
                i++;
            }
        }
        return total;
