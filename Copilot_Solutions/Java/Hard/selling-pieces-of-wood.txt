Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[][] dp = new int[m + 1][n + 1];
        for (int[] price : prices) {
            for (int i = m; i >= price[0]; i--) {
                for (int j = n; j >= price[1]; j--) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - price[0]][j - price[1]] + price[2]);
                }
            }
        }
        return dp[m][n];

=======

        int[][] dp = new int[m + 1][n + 1];
        for (int[] p : prices) {
            for (int i = m; i >= p[0]; i--) {
                for (int j = n; j >= p[1]; j--) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - p[0]][j - p[1]] + p[2]);
                }
            }
        }
        return dp[m][n];

=======

        int[][] dp = new int[m + 1][n + 1];
        for (int[] price : prices) {
            for (int i = price[0]; i <= m; i++) {
                for (int j = price[1]; j <= n; j++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - price[0]][j - price[1]] + price[2]);
                }
            }
        }
        return dp[m][n];

=======

        int[][] dp = new int[m + 1][n + 1];
        for (int[] p : prices) {
            int h = p[0], w = p[1], price = p[2];
            for (int i = h; i <= m; ++i) {
                for (int j = w; j <= n; ++j) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - h][j - w] + price);
                }
            }
        }
        return dp[m][n];

=======

        long[][] dp = new long[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int[] price : prices) {
                    if (price[0] <= i + 1 && price[1] <= j + 1) {
                        dp[i][j] = Math.max(dp[i][j], price[2] + (i + 1 - price[0] >= 0 ? dp[i + 1 - price[0]][j] : 0) + (j + 1 - price[1] >= 0 ? dp[i][j + 1 - price[1]] : 0));
                    }
                }
            }
        }
        return dp[m - 1][n - 1];

=======

        int len = prices.length;
        long[][] dp = new long[m + 1][n + 1];
        for (int i = 0; i < len; i++) {
            int hi = prices[i][0];
            int wi = prices[i][1];
            int pricei = prices[i][2];
            for (int j = m; j >= hi; j--) {
                for (int k = n; k >= wi; k--) {
                    dp[j][k] = Math.max(dp[j][k], dp[j - hi][k - wi] + pricei);
                }
            }
        }
        return dp[m][n];

=======

        int[] dp = new int[m * n + 1];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = i;
        }
        for (int[] price : prices) {
            int h = price[0], w = price[1], p = price[2];
            for (int i = h; i <= m; i++) {
                for (int j = w; j <= n; j++) {
                    dp[i * j] = Math.max(dp[i * j], dp[i * j - h * w] + p);
                }
            }
        }
        return dp[m * n];

=======

        long ans = 0;
        int[] dp = new int[m*n+1];
        for(int[] p : prices){
            for(int i = m; i >= p[0]; i--){
                for(int j = n; j >= p[1]; j--){
                    dp[i*n+j] = Math.max(dp[i*n+j], dp[(i-p[0])*n+j-p[1]]+p[2]);
                }
            }
        }
        for(int i = 0; i <= m*n; i++){
            ans = Math.max(ans, dp[i]);
        }
        return ans;
