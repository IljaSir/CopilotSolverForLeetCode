Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int[][] grid = new int[m][n];
        int[][][] memo = new int[m][n][1 << (m * n)];
        return dfs(grid, 0, 0, introvertsCount, extrovertsCount, memo);
    }
    
    private int dfs(int[][] grid, int i, int j, int introvertsCount, int extrovertsCount, int[][][] memo) {
        int m = grid.length;
        int n = grid[0].length;
        int max = 0;
        if (introvertsCount == 0 && extrovertsCount == 0) {
            return 0;
        }
        if (memo[i][j][introvertsCount | (extrovertsCount << 6)] != 0) {
            return memo[i][j][introvertsCount | (extrovertsCount << 6)];
        }
        if (i == m) {
            return dfs(grid, 0, j + 1, introvertsCount, extrovertsCount, memo);
        }
        if (grid[i][j] == 0) {
            if (introvertsCount > 0) {
                grid[i][j] = 1;
                max = Math.max(max, dfs(grid, i + 1, j, introvertsCount - 1, extrovertsCount, memo) + getHappiness(grid, i, j));
                grid[i][j] = 0;
            }
            if (extrovertsCount > 0) {
                grid[i][j] = 2;
                max = Math.max(max, dfs(grid, i + 1, j, introvertsCount, extrovertsCount - 1, memo) + getHappiness(grid, i, j));
                grid[i][j] = 0;
            }
        }
        return memo[i][j][introvertsCount | (extrovertsCount << 6)] = Math.max(max, dfs(grid, i + 1, j, introvertsCount, extrovertsCount, memo));

=======

        int[][] dp = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int[] count = new int[2];
                count[0] = introvertsCount;
                count[1] = extrovertsCount;
                int[][] map = new int[m][n];
                int[] cur = new int[2];
                cur[0] = i;
                cur[1] = j;
                int num = 0;
                while (cur[0] != -1) {
                    int[] next = getNext(cur, m, n);
                    if (count[0] > 0) {
                        int[] countCopy = count.clone();
                        int[][] mapCopy = new int[m][n];
                        for (int k = 0; k < m; k++) {
                            mapCopy[k] = map[k].clone();
                        }
                        countCopy[0]--;
                        mapCopy[cur[0]][cur[1]] = 1;
                        mapCopy[next[0]][next[1]] = 1;
                        int score = dp[cur[0]][cur[1]] + 120 - getNeighbor(cur, mapCopy) * 30;
                        if (next[0] != -1) {
                            score += dp[next[0]][next[1]];
                        }
                        dp[i][j] = Math.max(dp[i][j], score);
                        count = countCopy;
                        map = mapCopy;
                    }
                    if (count[1] > 0) {
                        int[] countCopy = count.clone();
                        int[][] mapCopy = new int[m][n];
                        for (int k = 0; k < m; k++) {
                            mapCopy[k] = map[k].clone();
                        }
                        countCopy[1]--;
                        mapCopy[cur[0]][cur[1]] = 2;
                        mapCopy[next[0]][next[1]] = 2;
                        int score = dp[cur[0]][cur[1]] + 40 + getNeighbor(cur, mapCopy) * 20;
                        if (next[0] != -1) {
                            score += dp[next[0]][next[1]];
                        }
                        dp[i][j] = Math.max(dp[i][j], score);

=======

        int[][] grid = new int[m][n];
        int[] max = new int[1];
        backtracking(grid, 0, 0, introvertsCount, extrovertsCount, max);
        return max[0];
    }
    
    private void backtracking(int[][] grid, int row, int col, int introvertsCount, int extrovertsCount, int[] max) {
        int m = grid.length;
        int n = grid[0].length;
        if (row == m) {
            max[0] = Math.max(max[0], getHappiness(grid));
            return;
        }
        int nextRow = row;
        int nextCol = col + 1;
        if (nextCol == n) {
            nextRow++;
            nextCol = 0;
        }
        if (introvertsCount > 0) {
            grid[row][col] = 1;
            backtracking(grid, nextRow, nextCol, introvertsCount - 1, extrovertsCount, max);
            grid[row][col] = 0;
        }
        if (extrovertsCount > 0) {
            grid[row][col] = 2;
            backtracking(grid, nextRow, nextCol, introvertsCount, extrovertsCount - 1, max);
            grid[row][col] = 0;
        }
        backtracking(grid, nextRow, nextCol, introvertsCount, extrovertsCount, max);
    }
    
    private int getHappiness(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    res += 120;
                    if (i > 0) {
                        if (grid[i - 1][j] == 1) {
                            res -= 30;
                        } else if (grid[i - 1][j] == 2) {
                            res += 20;
                        }
                    }
                    if (j > 0) {
                        if (grid[i][j - 1] == 1) {
                            res -= 30;
                        } else if (grid[i][j - 1

=======

        return 0;

=======

        int[][][] dp = new int[m][n][1 << n];
        int max = 0;
        for (int i = 0; i < 1 << n; i++) {
            if (Integer.bitCount(i) == introvertsCount) {
                dp[0][0][i] = happiness(i, 0, n);
                max = Math.max(max, dp[0][0][i]);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    continue;
                }
                for (int k = 0; k < 1 << n; k++) {
                    if (Integer.bitCount(k) != extrovertsCount) {
                        continue;
                    }
                    for (int l = 0; l < 1 << n; l++) {
                        if (Integer.bitCount(l) != introvertsCount) {
                            continue;
                        }
                        if (i > 0) {
                            dp[i][j][k] = Math.max(dp[i][j][k], dp[i - 1][n - 1][l] + happiness(k, l, n));
                        } else {
                            dp[i][j][k] = Math.max(dp[i][j][k], dp[i][j - 1][l] + happiness(k, l, n));
                        }
                    }
                    if (i == m - 1 && j == n - 1) {
                        max = Math.max(max, dp[i][j][k]);
                    }
                }
            }
        }
        return max;
    }

    private int happiness(int extroverts, int introverts, int n) {
        int h = 0;
        for (int i = 0; i < n; i++) {
            if ((extroverts & (1 << i)) > 0) {
                h += 40;
                if (i > 0 && (extroverts & (1 << (i - 1))) > 0) {
                    h += 20;
                }
                if (i < n - 1 && (extroverts & (1 << (i + 1))) > 0) {
                    h += 20;
                }
                if (i >

=======

        int[][][] dp = new int[m][n][1 << n];
        int[][] neighbors = new int[][]{
            {0, 1},
            {0, -1},
            {1, 0},
            {-1, 0}
        };
        int[][][] happiness = new int[m][n][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < (1 << n); k++) {
                    int cur = 0;
                    for (int l = 0; l < neighbors.length; l++) {
                        int x = i + neighbors[l][0];
                        int y = j + neighbors[l][1];
                        if (x >= 0 && y >= 0 && x < m && y < n && (k & (1 << y)) > 0) {
                            cur += 20;
                        }
                    }
                    happiness[i][j][k] = cur;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < (1 << n); k++) {
                    if ((k & (1 << j)) > 0) {
                        int cur = 120;
                        if (introvertsCount > 0) {
                            cur -= happiness[i][j][k];
                            if (i > 0) {
                                cur += dp[i - 1][j][k ^ (1 << j)];
                            }
                            if (j > 0) {
                                cur += dp[i][j - 1][k ^ (1 << j)];
                            }
                        }
                        dp[i][j][k] = cur;
                    } else {
                        int cur = 40;
                        if (extrovertsCount > 0) {
                            cur += happiness[i][j][k];
                            if (i > 0) {
                                cur += dp[i - 1][j][k ^ (1 << j)];
                            }
                            if (j > 0) {
                                cur += dp[i][j - 1][k ^ (1 << j)];
                            }
                        }
                        dp[i][j

=======

        int[][] dp = new int[m][1 << n];
        int[] mask = new int[1 << n];
        for (int i = 0; i < 1 << n; i++) {
            int[] row = new int[n];
            for (int j = 0; j < n; j++) {
                row[j] = (i >> j) & 1;
            }
            for (int j = 0; j < n; j++) {
                if (row[j] == 1) {
                    if (j - 1 >= 0 && row[j - 1] == 1) {
                        mask[i] += 60;
                    }
                    if (j + 1 < n && row[j + 1] == 1) {
                        mask[i] += 60;
                    }
                    if (row[j] == 1) {
                        mask[i] += 40;
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 1 << n; j++) {
                for (int k = 0; k < 1 << n; k++) {
                    if ((j & k) != 0) {
                        continue;
                    }
                    int[] row = new int[n];
                    for (int l = 0; l < n; l++) {
                        row[l] = (k >> l) & 1;
                    }
                    int cnt = 0;
                    for (int l = 0; l < n; l++) {
                        if (row[l] == 1) {
                            cnt++;
                        }
                    }
                    if (cnt > introvertsCount) {
                        continue;
                    }
                    int cnt2 = 0;
                    for (int l = 0; l < n; l++) {
                        if (row[l] == 0) {
                            cnt2++;
                        }
                    }
                    if (cnt2 > extrovertsCount) {
                        continue;
                    }
                    int val = mask[k];
                    for (int l = 0; l < n; l++) {
                        if (row[l] == 1) {
                            if (l - 1 >= 0 && row[l - 1] == 1) {
                                val -= 30;
                            }
                            if (l +
