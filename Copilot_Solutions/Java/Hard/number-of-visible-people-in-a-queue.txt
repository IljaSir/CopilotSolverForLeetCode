Synthesizing 10/10 solutions

=======

        int n = heights.length;
        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] < heights[i]) {
                res[i]++;
                res[stack.pop()]++;
            }
            if (!stack.isEmpty()) res[i]++;
            stack.push(i);
        }
        return res;

=======

        int n = heights.length;
        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[i] >= heights[stack.peek()]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                res[i] = stack.size();
            }
            stack.push(i);
        }
        return res;

=======

        int n = heights.length;
        int[] ans = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[i] > heights[stack.peek()]) {
                ans[i]++;
                ans[stack.pop()]++;
            }
            stack.push(i);
        }
        return ans;

=======

        int n = heights.length;
        int[] ans = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] < heights[i]) {
                ans[stack.pop()]++;
            }
            if (!stack.isEmpty()) {
                ans[stack.peek()]++;
            }
            stack.push(i);
        }
        return ans;

=======

        int[] result = new int[heights.length];
        Stack<Integer> stack = new Stack<>();
        for (int i = heights.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[i] > heights[stack.peek()]) {
                result[i]++;
                result[stack.pop()]++;
            }
            if (!stack.isEmpty()) {
                result[i]++;
            }
            stack.push(i);
        }
        return result;

=======

        int[] result = new int[heights.length];
        Stack<Integer> stack = new Stack<>();
        for (int i = heights.length - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] < heights[i]) {
                result[i]++;
                result[stack.pop()]++;
            }
            stack.push(i);
        }
        return result;

=======

        int[] res = new int[heights.length];
        for (int i = 0; i < heights.length; i++) {
            int count = 0;
            for (int j = i + 1; j < heights.length; j++) {
                if (heights[j] >= heights[i]) {
                    count++;
                    break;
                }
                count++;
            }
            res[i] = count;
        }
        return res;

=======

        int n = heights.length;
        int[] res = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.empty() && heights[i] > heights[stack.peek()]) {
                stack.pop();
            }
            res[i] = stack.empty() ? 0 : stack.size();
            stack.push(i);
        }
        return res;

=======

        int n = heights.length;
        int[] res = new int[n];
        Stack<Integer> st = new Stack<>();
        for (int i = 0; i < n; ++i) {
            while (!st.isEmpty() && heights[i] > heights[st.peek()]) {
                int j = st.pop();
                res[j] += 1;
                res[i] += res[j];
            }
            st.push(i);
        }
        return res;

=======

        int n = heights.length;
        int[] ans = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            int h = heights[i];
            for (int j = i + 1; j < n; j += ans[j] + 1) {
                if (h < heights[j]) {
                    ans[i]++;
                } else if (h == heights[j]) {
                    ans[i] += ans[j];
                    break;
                }
            }
        }
        return ans;
