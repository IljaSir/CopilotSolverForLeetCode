Synthesizing 9/10 solutions

=======

        long res = 1;
        for (int i = 1; i <= n; i++) {
            res = res * i * (2 * i - 1) % 1000000007;
        }
        return (int) res;

=======

        long ans = 1;
        for (int i = 1; i <= n; i++) {
            ans = ans * i * (2 * i - 1) % 1000000007;
        }
        return (int) ans;

=======

        long res = 1;
        for (int i = 1; i <= n; i++) {
            res = (res * i * (2 * i - 1)) % 1000000007;
        }
        return (int) res;

=======

        long result = 1;
        for (int i = 2; i <= n; i++) {
            result = (result * i * (2 * i - 1)) % 1000000007;
        }
        return (int) result;

=======

        int mod = 1000000007;
        long res = 1;
        for (int i = 2; i <= n; i++) {
            res = res * i * (2 * i - 1) % mod;
        }
        return (int) res;

=======

        int mod = 1000000007;
        long ans = 1;
        for (int i = 1; i <= n; ++i) {
            ans = ans * i * (2 * i - 1) % mod;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res = (res * i) % mod;
            res = (res * (2 * i - 1)) % mod;
        }
        return (int) res;

=======

        int mod = 1000000007;
        long[] dp = new long[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i-1] * (2*i-1) * (2*i)) % mod;
        }
        return (int) dp[n];

=======

        int mod = 1000000007;
        int ans = 1;
        for (int i = 1; i <= n; i++) {
            ans = (int) (((long) ans * i * (2 * i - 1)) % mod);
        }
        return ans;
