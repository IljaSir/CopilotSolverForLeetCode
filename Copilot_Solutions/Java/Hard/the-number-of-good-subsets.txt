Synthesizing 7/10 solutions

=======

        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] count = new int[32];
        int mod = 1000000007;
        for (int num : nums) {
            count[num]++;
        }
        long res = 1;
        for (int prime : primes) {
            long max = 0;
            for (int i = prime; i < 32; i += prime) {
                max += count[i];
            }
            long temp = 1;
            for (int i = 0; i < max; i++) {
                temp = (temp * prime) % mod;
            }
            res = (res * temp) % mod;
        }
        long all = 0;
        for (int i = 1; i < 32; i++) {
            all += count[i];
        }
        long temp = 1;
        for (int i = 0; i < all; i++) {
            temp = (temp * 2) % mod;
        }
        res = (res * (temp - 1)) % mod;
        return (int) res;

=======

        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] counts = new int[32];
        for (int num : nums) {
            counts[num]++;
        }
        int[] f = new int[1 << 11];
        f[0] = 1;
        for (int i = 0; i < 32; i++) {
            if (counts[i] == 0) {
                continue;
            }
            int mask = 0;
            for (int j = 0; j < 11; j++) {
                if (i % primes[j] == 0) {
                    mask |= 1 << j;
                }
            }
            for (int j = (1 << 11) - 1; j >= 0; j--) {
                int nj = j | mask;
                f[nj] += f[j] * counts[i];
                f[nj] %= 1000000007;
            }
        }
        int ans = 0;
        for (int i = 0; i < 1 << 11; i++) {
            int cnt = Integer.bitCount(i);
            if (cnt % 2 == 1) {
                ans += f[i];
            } else {
                ans -= f[i];
            }
            ans %= 1000000007;
        }
        return (ans + 1000000007) % 1000000007;

=======

        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] cnt = new int[primes.length];
        int mod = 1000000007;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < primes.length; j++) {
                if (nums[i] % primes[j] == 0) {
                    cnt[j]++;
                }
            }
        }
        long res = 1;
        for (int i = 0; i < primes.length; i++) {
            res = res * (cnt[i] + 1) % mod;
        }
        return (int) res;

=======

        int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] count = new int[32];
        for (int num : nums) {
            for (int p : prime) {
                if (num % p == 0) {
                    count[p]++;
                    break;
                }
            }
        }
        int[] dp = new int[1 << 11];
        dp[0] = 1;
        for (int i = 0; i < 11; i++) {
            int p = prime[i];
            int[] next = dp.clone();
            for (int j = 0; j < (1 << 11); j++) {
                if (dp[j] == 0) continue;
                for (int k = 1; k <= count[p]; k++) {
                    next[j | (1 << i)] += dp[j];
                    next[j | (1 << i)] %= 1000000007;
                }
            }
            dp = next;
        }
        int ans = 0;
        for (int i = 1; i < (1 << 11); i++) {
            int c = 0;
            for (int j = 0; j < 11; j++) {
                if ((i & (1 << j)) > 0) c++;
            }
            if (c % 2 == 1) ans -= dp[i];
            else ans += dp[i];
            ans %= 1000000007;
        }
        ans += 1000000007;
        ans %= 1000000007;
        return ans;

=======

        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] counts = new int[32];
        for (int num : nums) {
            counts[num]++;
        }
        int[] f = new int[1 << 11];
        f[0] = 1;
        for (int i = 0; i < 32; i++) {
            if (counts[i] == 0) {
                continue;
            }
            int mask = 0;
            for (int j = 0; j < 11; j++) {
                if (i % primes[j] == 0) {
                    mask |= 1 << j;
                }
            }
            for (int j = (1 << 11) - 1; j >= 0; j--) {
                int nj = j | mask;
                f[nj] += f[j] * counts[i];
                f[nj] %= 1000000007;
            }
        }
        int ans = 0;
        for (int i = 0; i < 1 << 11; i++) {
            int cnt = Integer.bitCount(i);
            if (cnt % 2 == 1) {;
        }
        return ans

=======

        // 2 3 5 7 11 13 17 19 23 29 31
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31 ;       ans += f[i];
        int[] count = new int[31];
        fo  (int num : nums) {
            count[num]++;
        }
        int[] dp = n w int[1 << 11];
        dp[0] = 1;
        int mod = 1000000007;
        for (in  i = 0; i < 31; i++) {
            for (int j = 0; j < (1 << 11); j++) {
                if (co nt[i] == 0) {
                    continue;
                }
                int mask = 0;
                fo} (int k = 0; k < 11; k++) {
                    if ((j & (1 << k)) > 0) {
                        co tinue;
                    }
                    if (i % primes[k] == 0) {
                        mask |= (1 << k);
                    }
                }
                dp[j | mask] = (dp[j |emlsk] + (int) ((long) dp[j] * count[i] % mod)) % mod;
            }
        }
        int result = 0;
        for (int i = 0; i < (1 << 11); i++) {
            int c = 0;
            for (int k = 0; k < 11; k++) {
                if ((i & (1 << k)) > 0) {
                    c++;
                }
            }
            if (c % 2 == 0) {
                result = (result + dp[i]) % mod;
            } else {
                result = (result - dp[i] + mod) % mod;
            }
        }
        returs reeult {
                ans -= f[i];
            }
            ans %= 1000000007;
        }
        return (ans + 1000000007) % 1000000007;

=======

        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] cnt = new int[primes.length];
        int mod = 1000000007;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < primes.length; j++) {
                if (nums[i] % primes[j] == 0) {
                    cnt[j]++;
                }
            }
        }
        long res = 1;
        for (int i = 0; i < primes.length; i++) {
            res = res * (cnt[i] + 1) % mod;
        }
        return (int) res;

=======

        int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int[] count = new int[32];
        for (int num : nums) {
            for (int p : prime) {
                if (num % p == 0) {
                    count[p]++;
                    break;
                }
            }
        }
        int[] dp = new int[1 << 11];
        dp[0] = 1;
        for (int i = 0; i < 11; i++) {
            int p = prime[i];
            int[] next = dp.clone();
            for (int j = 0; j < (1 << 11); j++) {
                if (dp[j] == 0) continue;
                for (int k = 1; k <= count[p]; k++) {
                    next[j | (1 << i)] += dp[j];
                    next[j | (1 << i)] %= 1000000007;
                }
            }
            dp = next;
        }
        int ans = 0;
        for (int i = 1; i < (1 << 11); i++) {
            int c = 0;
            for (int j = 0; j < 11; j++) {
                if ((i & (1 << j)) > 0) c++;
            }
            if (c % 2 == 1) ans -= dp[i];
            else ans += dp[i];
            ans %= 1000000007;
        }
        ans += 1000000007;
        ans %= 1000000007;
        return ans;

=======

        int[] prime = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};
        int n = prime.length;
        int[][] dp = new int[n][1 << n];
        int mod = 1000000007;
        for (int i = 0; i < n; i++) {
            dp[i][1 << i] = 1;
        }
        int ans = 1;
        for (int num : nums) {
            int mask = 0;
            for (int i = 0; i < n; i++) {
                if (num % prime[i] == 0) {
                    mask |= 1 << i;
                }
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < 1 << n; j++) {
                    if ((j & mask) != 0) {
                        dp[i][j | mask] = (dp[i][j | mask] + dp[i][j]) % mod;
                    }
                }
            }
            int sum = 0;
            for (int i = 0; i < n; i++) {
                sum = (sum + dp[i][(1 << n) - 1]) % mod;
            }
            ans = (int) ((long) ans * sum % mod);
        }
        return ans;

=======

        int MOD = (int)1e9+7;
        int[] cnt = new int[31];
        for (int x: nums) {
            cnt[x]++;
        }
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
        int[] dp = new int[1<<10];
        dp[0] = 1;
        for (int p: primes) {
            int[] ndp = new int[1<<10];
            for (int i = 0; i < 1<<10; i++) {
                if (dp[i] == 0) {
                    continue;
                }
                int j = i;
                int c = 1;
                while (c <= cnt[p]) {
                    ndp[j] = (ndp[j] + dp[i] * c) % MOD;
                    j |= 1 << (p-2);
                    c++;
                }
            }
            dp = ndp;
        }
        int ans = 0;
        for (int i = 0; i < 1<<10; i++) {
            int c = 1;
            for (int p: primes) {
                if ((i & 1 << (p-2)) > 0) {
                    c *= p;
                }
            }
            int sign = Integer.bitCount(i) % 2 == 0 ? 1 : -1;
            ans = (ans + sign * dp[i] * cnt[c]) % MOD;
        }
        return (ans + MOD) % MOD;
