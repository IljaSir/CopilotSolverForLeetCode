Synthesizing 9/10 solutions

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        boolean[][] dp = new boolean[n + 1][sum + 1];
        dp[0][0] = true;
        for (int i = 0; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                for (int k = sum; k >= nums[i]; k--) {
                    dp[j + 1][k] |= dp[j][k - nums[i]];
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[i][sum * i / n]) {
                return true;
            }
        }
        return false;

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int n = nums.length;
        boolean[][] dp = new boolean[n + 1][sum + 1];
        dp[0][0] = true;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= nums[i - 1]) {
                    dp[i][j] |= dp[i - 1][j - nums[i - 1]];
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[i][sum * i / n]) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = -1;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = sum; j >= nums[i]; j--) {
                for (int k = 1; k <= n / 2; k++) {
                    if (dp[k - 1][j - nums[i]] >= 0) {
                        dp[k][j] = Math.max(dp[k][j], dp[k - 1][j - nums[i]] + nums[i]);
                    }
                }
            }
        }
        for (int i = 1; i <= n / 2; i++) {
            if (sum * i % n == 0 && dp[i][sum * i / n] > 0) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (j >= nums[i - 1]) {
                    dp[i][j] = dp[i - 1][j] | dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[i][sum * i / n] == 1) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= sum; j++) {
                if (j - nums[i - 1] >= 0) {
                    dp[i][j] = dp[i - 1][j] | dp[i - 1][j - nums[i - 1]];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[i][sum * i / n] == 1) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        boolean[][][] dp = new boolean[n][n][sum + 1];
        for (int i = 0; i < n; i++) {
            dp[i][0][nums[i]] = true;
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < i; j++) {
                for (int k = 1; k <= sum; k++) {
                    if (k >= nums[i] && dp[i - 1][j - 1][k - nums[i]]) {
                        dp[i][j][k] = true;
                    } else if (dp[i - 1][j][k]) {
                        dp[i][j][k] = true;
                    }
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[n - 1][i][sum * i / n]) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        boolean[][][] dp = new boolean[n][n + 1][sum + 1];
        dp[0][1][nums[0]] = true;
        for (int i = 1; i < n; i++) {
            for (int j = 1; j <= i + 1; j++) {
                for (int k = 0; k <= sum; k++) {
                    dp[i][j][k] = dp[i - 1][j][k];
                    if (k >= nums[i]) {
                        dp[i][j][k] |= dp[i - 1][j - 1][k - nums[i]];
                    }
                }
            }
        }
        for (int i = 1; i < n; i++) {
            if (sum * i % n == 0 && dp[n - 1][i][sum * i / n]) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int sum = 0;
        for (int x : nums) sum += x;
        for (int i = 1; i <= n / 2; i++) {
            if ((sum * i) % n == 0) {
                if (backtrack(nums, i, 0, 0, (sum * i) / n)) return true;
            }
        }
        return false;

=======

        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int len = nums.length;
        int half = len / 2;
        int[][] dp = new int[half + 1][sum + 1];
        for (int i = 0; i < len; i++) {
            for (int j = half; j > 0; j--) {
                for (int k = sum; k > 0; k--) {
                    if (k >= nums[i]) {
                        dp[j][k] = Math.max(dp[j][k], dp[j - 1][k - nums[i]] + nums[i]);
                    }
                }
            }
        }
        for (int i = 1; i <= half; i++) {
            if (sum * i % len == 0 && dp[i][sum * i / len] * len == sum * i) {
                return true;
            }
        }
        return false;
