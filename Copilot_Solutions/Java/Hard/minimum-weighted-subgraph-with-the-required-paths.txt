Synthesizing 10/10 solutions

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(new int[] {edge[1], edge[2]});
        }
        long[] dist1 = dijkstra(graph, src1, n);
        long[] dist2 = dijkstra(graph, src2, n);
        long[] dist3 = dijkstra(graph, dest, n);
        long min = Long.MAX_VALUE;
        for (int[] edge : edges) {
            long d1 = dist1[edge[0]];
            long d2 = dist2[edge[0]];
            long d3 = dist3[edge[1]];
            if (d1 != Long.MAX_VALUE && d2 != Long.MAX_VALUE && d3 != Long.MAX_VALUE) {
                min = Math.min(min, d1 + d2 + d3 + edge[2]);
            }
        }
        return min == Long.MAX_VALUE ? -1 : min;
    }
    private long[] dijkstra(Map<Integer, List<int[]>> graph, int src, int n) {
        long[] dist = new long[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        dist[src] = 0;
        pq.add(new int[] {src, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0];
            for (int[] next : graph.get(u)) {
                int v = next[0];
                int w = next[1];
                if (dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.add(new int[] {v, (int) dist[v]});
                }
            }
        }
        return dist;

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.putIfAbsent(edge[0], new ArrayList<>());
            graph.get(edge[0]).add(new int[]{edge[1], edge[2]});
        }
        long[][] dist = new long[3][n];
        for (int i = 0; i < 3; i++) {
            Arrays.fill(dist[i], Long.MAX_VALUE);
        }
        dist[0][src1] = 0;
        dist[1][src2] = 0;
        dist[2][dest] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Long.compare(a[1], b[1]));
        pq.offer(new int[]{src1, 0});
        pq.offer(new int[]{src2, 0});
        pq.offer(new int[]{dest, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0];
            long d = cur[1];
            if (d > dist[0][u] || d > dist[1][u] || d > dist[2][u]) {
                continue;
            }
            if (graph.containsKey(u)) {
                for (int[] edge : graph.get(u)) {
                    int v = edge[0];
                    long w = edge[1];
                    if (d + w < dist[0][v]) {
                        dist[0][v] = d + w;
                        pq.offer(new int[]{v, dist[0][v]});
                    }
                    if (d + w < dist[1][v]) {
                        dist[1][v] = d + w;
                        pq.offer(new int[]{v, dist[1][v]});
                    }
                    if (d + w < dist[2][v]) {
                        dist[2][v] = d + w;
                        pq.offer(new int[]{v, dist[2][v]});
                    }
                }
            }
        }
        long res = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (dist[0][i] != Long.MAX_VALUE && dist[1][i] != Long.MAX_VALUE && dist[2][i] != Long.MAX_VALUE) {
                res = Math.min(res, dist[0][

=======

        List<int[]>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(new int[]{edge[1], edge[2]});
        }
        long[] dist1 = dijkstra(graph, src1);
        long[] dist2 = dijkstra(graph, src2);
        long[] dist3 = dijkstra(graph, dest);
        long min = Long.MAX_VALUE;
        for (int[] edge : edges) {
            long sum = dist1[edge[0]] + dist2[edge[0]] + dist3[edge[1]] + edge[2];
            if (sum < min) {
                min = sum;
            }
        }
        return min < Long.MAX_VALUE ? min : -1;
    }
    private long[] dijkstra(List<int[]>[] graph, int src) {
        long[] dist = new long[graph.length];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Long.compare(a[1], b[1]));
        pq.offer(new int[]{src, 0});
        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            if (curr[1] > dist[curr[0]]) {
                continue;
            }
            for (int[] nei : graph[curr[0]]) {
                if (curr[1] + nei[1] < dist[nei[0]]) {
                    dist[nei[0]] = curr[1] + nei[1];
                    pq.offer(new int[]{nei[0], (int)dist[nei[0]]});
                }
            }
        }
        return dist;

=======

        long[][] dist = new long[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Long.MAX_VALUE);
            dist[i][i] = 0;
        }
        for (int[] e : edges) {
            dist[e[0]][e[1]] = Math.min(dist[e[0]][e[1]], e[2]);
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] < Long.MAX_VALUE && dist[k][j] < Long.MAX_VALUE) {
                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }
        long ans = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (dist[src1][i] < Long.MAX_VALUE && dist[src2][i] < Long.MAX_VALUE && dist[i][dest] < Long.MAX_VALUE) {
                ans = Math.min(ans, dist[src1][i] + dist[src2][i] + dist[i][dest]);
            }
        }
        return ans == Long.MAX_VALUE ? -1 : ans;

=======

        long[][] dist = new long[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Long.MAX_VALUE);
            dist[i][i] = 0;
        }
        for (int[] edge : edges) {
            dist[edge[0]][edge[1]] = edge[2];
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
        long[] dist1 = dist[src1];
        long[] dist2 = dist[src2];
        long[] dist3 = dist[dest];
        long ans = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (dist1[i] != Long.MAX_VALUE && dist2[i] != Long.MAX_VALUE && dist3[i] != Long.MAX_VALUE) {
                ans = Math.min(ans, dist1[i] + dist2[i] + dist3[i]);
            }
        }
        return ans == Long.MAX_VALUE ? -1 : ans;

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(new int[]{edge[1], edge[2]});
        }
        long[] dist1 = dijkstra(graph, src1);
        long[] dist2 = dijkstra(graph, src2);
        long[] dist3 = dijkstra(graph, dest);
        long res = Long.MAX_VALUE;
        for (int[] edge : edges) {
            if (dist1[edge[0]] != Long.MAX_VALUE && dist2[edge[0]] != Long.MAX_VALUE && dist3[edge[1]] != Long.MAX_VALUE) {
                res = Math.min(res, dist1[edge[0]] + dist2[edge[0]] + dist3[edge[1]] + edge[2]);
            }
            if (dist1[edge[1]] != Long.MAX_VALUE && dist2[edge[1]] != Long.MAX_VALUE && dist3[edge[0]] != Long.MAX_VALUE) {
                res = Math.min(res, dist1[edge[1]] + dist2[edge[1]] + dist3[edge[0]] + edge[2]);
            }
        }
        return res == Long.MAX_VALUE ? -1 : res;
    }
    
    private long[] dijkstra(Map<Integer, List<int[]>> graph, int src) {
        long[] dist = new long[graph.size()];
        Arrays.fill(dist, Long.MAX_VALUE);
        dist[src] = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Long.compare(a[1], b[1]));
        pq.offer(new int[]{src, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            if (dist[cur[0]] < cur[1]) {
                continue;
            }
            for (int[] next : graph.getOrDefault(cur[0], new ArrayList<>())) {
                if (dist[next[0]] > cur[1] + next[1]) {
                    dist[next[0]] = cur[1] + next[1];
                    pq.offer(new int[]{next[0], (int)dist[next[0]]});
                }
            }
        }
        return dist;

=======

        Map<Integer, List<int[]>> graph = new HashMap<>();
        for (int[] edge : edges) {
            graph.computeIfAbsent(edge[0], k -> new ArrayList<>()).add(new int[]{edge[1], edge[2]});
        }
        long[][][] dp = new long[n][n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    dp[i][j][k] = Long.MAX_VALUE;
                }
            }
        }
        dp[src1][src2][dest] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{src1, src2, dest});
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int i = cur[0], j = cur[1], k = cur[2];
            if (graph.containsKey(i)) {
                for (int[] next : graph.get(i)) {
                    int x = next[0], w = next[1];
                    if (dp[x][j][k] > dp[i][j][k] + w) {
                        dp[x][j][k] = dp[i][j][k] + w;
                        queue.offer(new int[]{x, j, k});
                    }
                }
            }
            if (graph.containsKey(j)) {
                for (int[] next : graph.get(j)) {
                    int x = next[0], w = next[1];
                    if (dp[i][x][k] > dp[i][j][k] + w) {
                        dp[i][x][k] = dp[i][j][k] + w;
                        queue.offer(new int[]{i, x, k});
                    }
                }
            }
            if (graph.containsKey(k)) {
                for (int[] next : graph.get(k)) {
                    int x = next[0], w = next[1];
                    if (dp[i][j][x] > dp[i][j][k] + w) {
                        dp[i][j][x] = dp[i][j][k] + w;
                        queue.offer(new int[]{i, j, x});
                    }
                }
            }
        }
        long res = Long.MAX_VALUE;
        for (int i

=======

        Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
        for (int[] edge : edges) {
            int from = edge[0];
            int to = edge[1];
            int weight = edge[2];
            graph.computeIfAbsent(from, k -> new HashMap<>()).put(to, weight);
        }
        // [node, weight]
        Map<Integer, Integer> dist1 = dijkstra(graph, src1);
        Map<Integer, Integer> dist2 = dijkstra(graph, src2);
        Map<Integer, Integer> dist3 = dijkstra(graph, dest);
        long result = Long.MAX_VALUE;
        for (int node : dist1.keySet()) {
            if (dist2.containsKey(node) && dist3.containsKey(node)) {
                result = Math.min(result, (long) dist1.get(node) + dist2.get(node) + dist3.get(node));
            }
        }
        return result == Long.MAX_VALUE ? -1 : result;
    }

    private Map<Integer, Integer> dijkstra(Map<Integer, Map<Integer, Integer>> graph, int src) {
        Map<Integer, Integer> dist = new HashMap<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[] {src, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int node = cur[0];
            int weight = cur[1];
            if (dist.containsKey(node)) continue;
            dist.put(node, weight);
            if (!graph.containsKey(node)) continue;
            for (int next : graph.get(node).keySet()) {
                pq.offer(new int[] {next, weight + graph.get(node).get(next)});
            }
        }
        return dist;

=======

        long[][] dist = new long[n][n];
        for (long[] d : dist) {
            Arrays.fill(d, Long.MAX_VALUE);
        }
        for (int[] e : edges) {
            dist[e[0]][e[1]] = e[2];
        }
        for (int i = 0; i < n; i++) {
            dist[i][i] = 0;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] != Long.MAX_VALUE && dist[k][j] != Long.MAX_VALUE) {
                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }
        if (dist[src1][dest] == Long.MAX_VALUE || dist[src2][dest] == Long.MAX_VALUE) {
            return -1;
        }
        long min = dist[src1][dest] + dist[src2][dest];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[src1][i] != Long.MAX_VALUE && dist[i][j] != Long.MAX_VALUE && dist[j][dest] != Long.MAX_VALUE
                        && dist[src2][i] != Long.MAX_VALUE && dist[j][src2] != Long.MAX_VALUE) {
                    min = Math.min(min, dist[src1][i] + dist[i][j] + dist[j][dest] + dist[src2][i] + dist[j][src2]);
                }
            }
        }
        return min;

=======

        int m = edges.length;
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        int[] dist3 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);
        Arrays.fill(dist3, Integer.MAX_VALUE);
        dist1[src1] = 0;
        dist2[src2] = 0;
        dist3[dest] = 0;
        Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new HashMap<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).put(edge[1], edge[2]);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        pq.offer(new int[]{src1, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0], d = cur[1];
            if (d > dist1[u]) {
                continue;
            }
            for (int v : graph.get(u).keySet()) {
                if (dist1[v] > dist1[u] + graph.get(u).get(v)) {
                    dist1[v] = dist1[u] + graph.get(u).get(v);
                    pq.offer(new int[]{v, dist1[v]});
                }
            }
        }
        pq.offer(new int[]{src2, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0], d = cur[1];
            if (d > dist2[u]) {
                continue;
            }
            for (int v : graph.get(u).keySet()) {
                if (dist2[v] > dist2[u] + graph.get(u).get(v)) {
                    dist2[v] = dist2[u] + graph.get(u).get(v);
                    pq.offer(new int[]{v, dist2[v]});
                }
            }
        }
        pq.offer(new int[]{dest, 0});
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[0], d = cur[1];
            if (d > dist3[u]) {
                continue;
            }
