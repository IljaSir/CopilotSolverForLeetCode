Synthesizing 10/10 solutions

=======

        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                union(parent, i, j);
            }
        }
        List<Boolean> ans = new ArrayList<>();
        for (int[] query : queries) {
            ans.add(find(parent, query[0]) == find(parent, query[1]));
        }
        return ans;
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        UnionFind uf = new UnionFind(n + 1);
        for (int i = threshold + 1; i <= n; ++i) {
            for (int j = 2 * i; j <= n; j += i) {
                uf.union(i, j);
            }
        }
        List<Boolean> ans = new ArrayList<>();
        for (int[] q : queries) {
            ans.add(uf.find(q[0]) == uf.find(q[1]));
        }
        return ans;
    }
}

=======

        List<Boolean> res = new ArrayList<>();
        if (threshold == 0) {
            for (int i = 0; i < queries.length; i++) {
                res.add(true);
            }
            return res;
        }
        int[] parents = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            parents[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = 2; j * i <= n; j++) {
                int p1 = find(parents, i);
                int p2 = find(parents, j * i);
                if (p1 != p2) {
                    parents[p1] = p2;
                }
            }
        }
        for (int[] query : queries) {
            int p1 = find(parents, query[0]);
            int p2 = find(parents, query[1]);
            res.add(p1 == p2);
        }
        return res;
    }
    private int find(int[] parents, int i) {
        if (parents[i] == i) {
            return i;
        }
        return parents[i] = find(parents, parents[i]);

=======

        List<Boolean> result = new ArrayList<>();
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = 2 * i; j <= n; j += i) {
                union(parent, i, j);
            }
        }
        for (int i = 0; i < queries.length; i++) {
            int a = queries[i][0];
            int b = queries[i][1];
            if (find(parent, a) == find(parent, b)) {
                result.add(true);
            } else {
                result.add(false);
            }
        }
        return result;
    }
    private int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        return parent[i] = find(parent, parent[i]);
    }
    private void union(int[] parent, int i, int j) {
        int rootI = find(parent, i);
        int rootJ = find(parent, j);
        if (rootI != rootJ) {
            parent[rootI] = rootJ;
        }

=======

        List<Boolean> res = new ArrayList<>();
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = 2; i * j <= n; j++) {
                union(parent, i, i * j);
            }
        }
        for (int[] q : queries) {
            res.add(find(parent, q[0]) == find(parent, q[1]));
        }
        return res;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }
    private void union(int[] parent, int i, int j) {
        int pi = find(parent, i);
        int pj = find(parent, j);
        if (pi == pj) {
            return;
        }
        parent[pi] = pj;

=======

        List<Boolean> result = new ArrayList<>();
        int[] parent = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = i * 2; j <= n; j += i) {
                union(parent, i, j);
            }
        }
        for (int[] query : queries) {
            result.add(find(parent, query[0]) == find(parent, query[1]));
        }
        return result;
    }
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int[] parents = new int[n+1];
        for (int i = 0; i <= n; i++) {
            parents[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = i + i; j <= n; j += i) {
                union(parents, i, j);
            }
        }
        List<Boolean> res = new ArrayList<>();
        for (int[] query : queries) {
            res.add(find(parents, query[0]) == find(parents, query[1]));
        }
        return res;
    }
    private int find(int[] parents, int i) {
        if (parents[i] != i) {
            parents[i] = find(parents, parents[i]);
        }
        return parents[i];
    }
    private void union(int[] parents, int i, int j) {
        int p1 = find(parents, i);
        int p2 = find(parents, j);
        if (p1 != p2) {
            parents[p1] = p2;
        }

=======

        List<Boolean> result = new ArrayList<>(queries.length);
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = i + i; j <= n; j += i) {
                union(parent, i, j);
            }
        }
        for (int[] q : queries) {
            result.add(find(parent, q[0]) == find(parent, q[1]));
        }
        return result;
    }
    
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    
    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }

=======

        List<Boolean> res = new ArrayList<>();
        int[] parent = new int[n+1];
        for(int i = 1; i <= n; i++){
            parent[i] = i;
        }
        for(int i = threshold + 1; i <= n; i++){
            for(int j = i + i; j <= n; j += i){
                union(parent, i, j);
            }
        }
        for(int[] q: queries){
            res.add(find(parent, q[0]) == find(parent, q[1]));
        }
        return res;
    }
    private int find(int[] parent, int x){
        if(parent[x] != x){
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int x, int y){
        int rootx = find(parent, x);
        int rooty = find(parent, y);
        if(rootx != rooty){
            parent[rootx] = rooty;
        }

=======

        List<Boolean> result = new ArrayList<>();
        if (n < 2) {
            return result;
        }
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        for (int i = threshold + 1; i <= n; i++) {
            for (int j = i * 2; j <= n; j += i) {
                union(parent, i, j);
            }
        }
        for (int[] query : queries) {
            result.add(find(parent, query[0]) == find(parent, query[1]));
        }
        return result;
    }
    
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    
    private void union(int[] parent, int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);
        if (xRoot != yRoot) {
            parent[xRoot] = yRoot;
        }
