Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += Math.abs(nums[i] - nums[i + 1]);
        }
        int maxGain = 0;
        for (int i = 0; i < n - 1; i++) {
            maxGain = Math.max(maxGain, Math.abs(nums[0] - nums[i + 1]) - Math.abs(nums[i] - nums[i + 1]));
            maxGain = Math.max(maxGain, Math.abs(nums[n - 1] - nums[i]) - Math.abs(nums[i] - nums[i + 1]));
        }
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        for (int i = 0; i < n; i++) {
            int j = Arrays.binarySearch(sorted, nums[i]);
            if (j > 0) {
                maxGain = Math.max(maxGain, Math.abs(sorted[j - 1] - nums[i]) - Math.abs(nums[i] - sorted[j]));
            }
            if (j + 1 < n) {
                maxGain = Math.max(maxGain, Math.abs(sorted[j + 1] - nums[i]) - Math.abs(nums[i] - sorted[j]));
            }
        }
        return sum + maxGain;

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += Math.abs(nums[i] - nums[i + 1]);
        }
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            max = Math.max(max, Math.max(nums[i], nums[i + 1]));
            min = Math.min(min, Math.min(nums[i], nums[i + 1]));
        }
        int ans = sum;
        for (int i = 0; i < n - 1; i++) {
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i] - max));
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i + 1] - max));
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i] - min));
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i + 1] - min));
        }
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; i++) {
            left[i] = Math.max(left[i - 1], nums[i] - nums[i - 1]);
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = Math.max(right[i + 1], nums[i + 1] - nums[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + left[i]);
            ans = Math.max(ans, sum - Math.abs(nums[i] - nums[i + 1]) + right[i + 1]);
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 0; i < n - 1; i++) {
            ans += Math.abs(nums[i] - nums[i + 1]);
        }
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int max2 = Integer.MIN_VALUE;
        int min2 = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            max = Math.max(max, Math.min(nums[i], nums[i + 1]));
            min = Math.min(min, Math.max(nums[i], nums[i + 1]));
            max2 = Math.max(max2, Math.abs(nums[i] - nums[i + 1]) - Math.abs(nums[0] - nums[n - 1]));
            min2 = Math.min(min2, Math.abs(nums[i] - nums[i + 1]) - Math.abs(nums[0] - nums[n - 1]));
        }
        return ans + Math.max(0, Math.max(max - min, max2 - min2));

=======

        int n = nums.length;
        int ans = 0;
        for (int i = 1; i < n; i++) {
            ans += Math.abs(nums[i] - nums[i - 1]);
        }
        int max1 = Integer.MIN_VALUE, max2 = Integer.MIN_VALUE;
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
        for (int i = 1; i < n; i++) {
            max1 = Math.max(max1, Math.abs(nums[i] - nums[0]) - Math.abs(nums[i] - nums[i - 1]));
            max2 = Math.max(max2, Math.abs(nums[i - 1] - nums[n - 1]) - Math.abs(nums[i] - nums[i - 1]));
            min1 = Math.min(min1, Math.abs(nums[i] - nums[0]) - Math.abs(nums[i] - nums[i - 1]));
            min2 = Math.min(min2, Math.abs(nums[i - 1] - nums[n - 1]) - Math.abs(nums[i] - nums[i - 1]));
        }
        max1 = Math.max(max1, Math.abs(nums[0] - nums[n - 1]));
        max2 = Math.max(max2, Math.abs(nums[0] - nums[n - 1]));
        return ans + Math.max(Math.max(max1, max2), Math.max(min1, min2));

=======

        int n = nums.length;
        int sum = 0;
        for (int i = 1; i < n; i++) {
            sum += Math.abs(nums[i] - nums[i - 1]);
        }
        int maxDiff = 0;
        for (int i = 1; i < n; i++) {
            maxDiff = Math.max(maxDiff, Math.abs(nums[0] - nums[i]) - Math.abs(nums[i] - nums[i - 1]));
        }
        for (int i = 1; i < n; i++) {
            maxDiff = Math.max(maxDiff, Math.abs(nums[n - 1] - nums[i - 1]) - Math.abs(nums[i] - nums[i - 1]));
        }
        for (int i = 1; i < n - 1; i++) {
            maxDiff = Math.max(maxDiff, Math.abs(nums[i + 1] - nums[0]) - Math.abs(nums[i] - nums[i - 1]));
            maxDiff = Math.max(maxDiff, Math.abs(nums[n - 1] - nums[i - 1]) - Math.abs(nums[i + 1] - nums[i]));
            int min = Math.min(nums[i], nums[i - 1]);
            int max = Math.max(nums[i], nums[i - 1]);
            for (int j = i + 1; j < n; j++) {
                maxDiff = Math.max(maxDiff, Math.abs(nums[j] - min) - Math.abs(nums[j] - nums[j - 1]));
                maxDiff = Math.max(maxDiff, Math.abs(nums[j] - max) - Math.abs(nums[j] - nums[j - 1]));
                min = Math.min(min, nums[j]);
                max = Math.max(max, nums[j]);
            }
        }
        return sum + maxDiff;

=======

        int n = nums.length;
        int sum = 0;
        int maxDiff = 0;
        for (int i = 0; i < n - 1; i++) {
            sum += Math.abs(nums[i] - nums[i + 1]);
            maxDiff = Math.max(maxDiff, Math.abs(nums[0] - nums[i + 1]) - Math.abs(nums[i] - nums[i + 1]));
            maxDiff = Math.max(maxDiff, Math.abs(nums[n - 1] - nums[i]) - Math.abs(nums[i] - nums[i + 1]));
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 2; j < n; j++) {
                maxDiff = Math.max(maxDiff, Math.abs(nums[i] - nums[j]) - Math.abs(nums[i] - nums[i + 1]) - Math.abs(nums[j - 1] - nums[j]));
            }
        }
        return sum + maxDiff;

=======

        int n = nums.length;
        int sum = 0;
        int maxDiff = 0;
        for (int i = 1; i < n; i++) {
            int diff = Math.abs(nums[i] - nums[i - 1]);
            sum += diff;
            maxDiff = Math.max(maxDiff, Math.abs(nums[0] - nums[i]) - diff);
            maxDiff = Math.max(maxDiff, Math.abs(nums[n - 1] - nums[i - 1]) - diff);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 2; j < n && j < i + 4; j++) {
                maxDiff = Math.max(maxDiff, Math.abs(nums[i] - nums[j]) - Math.abs(nums[i + 1] - nums[j - 1]));
            }
        }
        return sum + maxDiff;

=======

        int n = nums.length;
        int ans = 0;
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            ans += Math.abs(nums[i] - nums[i + 1]);
            max = Math.max(max, Math.max(nums[i], nums[i + 1]));
            min = Math.min(min, Math.min(nums[i], nums[i + 1]));
        }
        int ans1 = ans;
        int ans2 = ans;
        int ans3 = ans;
        int ans4 = ans;
        for (int i = 0; i < n - 1; i++) {
            ans1 = Math.max(ans1, ans - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i] - min));
            ans2 = Math.max(ans2, ans - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i + 1] - min));
            ans3 = Math.max(ans3, ans - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i] - max));
            ans4 = Math.max(ans4, ans - Math.abs(nums[i] - nums[i + 1]) + Math.abs(nums[i + 1] - max));
        }
        int ans5 = ans;
        for (int i = 0; i < n - 1; i++) {
            ans5 = Math.max(ans5, ans - Math.abs(nums[i] - nums[i + 1]) + Math.abs(max - min));
        }
        return Math.max(ans1, Math.max(ans2, Math.max(ans3, Math.max(ans4, ans5))));

=======

        int n = nums.length;
        int sum = 0;
        int maxDiff = 0;
        for (int i = 0; i < n - 1; i++) {
            int diff = Math.abs(nums[i] - nums[i + 1]);
            sum += diff;
            maxDiff = Math.max(maxDiff, Math.max(Math.abs(nums[i] - nums[0]) - diff, Math.abs(nums[i + 1] - nums[n - 1]) - diff));
        }
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                int diff = Math.abs(nums[i] - nums[j + 1]) - Math.abs(nums[i] - nums[i + 1]) - Math.abs(nums[j] - nums[j + 1]);
                maxDiff = Math.max(maxDiff, diff);
            }
        }
        return sum + maxDiff;

=======

        int n = nums.length;
        int sum = 0;
        int maxDiff = Integer.MIN_VALUE;
        for (int i = 1; i < n; i++) {
            int diff = Math.abs(nums[i] - nums[i - 1]);
            sum += diff;
            maxDiff = Math.max(maxDiff, Math.max(Math.abs(nums[n - 1] - nums[i - 1]) - diff, Math.abs(nums[0] - nums[i]) - diff));
        }
        int maxDiff2 = Integer.MIN_VALUE;
        for (int i = 1; i < n; i++) {
            maxDiff2 = Math.max(maxDiff2, Math.abs(nums[i - 1] - nums[0]) - Math.abs(nums[i] - nums[i - 1]));
            maxDiff2 = Math.max(maxDiff2, Math.abs(nums[n - 1] - nums[i]) - Math.abs(nums[i] - nums[i - 1]));
        }
        return sum + Math.max(maxDiff, maxDiff2);
