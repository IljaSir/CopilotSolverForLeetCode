Synthesizing 10/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int xor = nums[i] ^ nums[j];
                if (low <= xor && xor <= high) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int xor = nums[i] ^ nums[j];
                if (xor >= low && xor <= high) {
                    count++;
                }
            }
        }
        return count;

=======

        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int xor = nums[i] ^ nums[j];
                if (xor >= low && xor <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int xor = nums[i] ^ nums[j];
                if (xor >= low && xor <= high) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int xor = nums[i] ^ nums[j];
                if (xor >= low && xor <= high) {
                    res++;
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int[] cnt = new int[1 << 17];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = low; j <= high; j++) {
                ans += cnt[nums[i] ^ j];
            }
            cnt[nums[i]]++;
        }
        return ans;

=======

        int n = nums.length, res = 0;
        int[] cnt = new int[1 << 17];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int xor = nums[i] ^ nums[j];
                if (xor >= low && xor <= high) {
                    res++;
                }
            }
            cnt[nums[i]]++;
        }
        for (int i = 0; i < 1 << 17; i++) {
            for (int j = i + 1; j < 1 << 17; j++) {
                if (i ^ j >= low && i ^ j <= high) {
                    res += cnt[i] * cnt[j];
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int[] cnt = new int[1 << 17];
        for (int num : nums) {
            cnt[num]++;
        }
        for (int i = 0; i < 17; i++) {
            for (int mask = 0; mask < (1 << 17); mask++) {
                if (((mask >> i) & 1) == 1) {
                    cnt[mask ^ (1 << i)] += cnt[mask];
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int mask = 0; mask < (1 << 17); mask++) {
                if (low <= (nums[i] ^ mask) && (nums[i] ^ mask) <= high) {
                    res += cnt[mask];
                }
            }
            res -= cnt[nums[i]];
        }
        return res / 2;

=======

        int n = nums.length;
        int[] freq = new int[1 << 16];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = low; j <= high; j++) {
                ans += freq[nums[i] ^ j];
            }
            freq[nums[i]]++;
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[1 << 17];
        int[] cnt2 = new int[1 << 17];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x = nums[i] ^ nums[j];
                if (x >= low && x <= high) {
                    cnt2[x]++;
                }
            }
            cnt[nums[i]]++;
        }
        int ans = 0;
        for (int i = 0; i < (1 << 17); i++) {
            if (cnt2[i] > 0) {
                ans += cnt2[i] * cnt[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] >= low && nums[i] <= high) {
                ans += cnt[nums[i]] - 1;
            }
        }
        return ans / 2;
