Synthesizing 10/10 solutions

=======

        int n = pairs.length;
        int[] start = new int[n];
        int[] end = new int[n];
        for (int i = 0; i < n; i++) {
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        int[][] ans = new int[n][2];
        Arrays.sort(start);
        Arrays.sort(end);
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (start[i] == end[j]) {
                ans[i][0] = start[i];
                ans[i][1] = end[j];
                j++;
            } else {
                ans[i][0] = end[j];
                ans[i][1] = start[i];
            }
        }
        return ans;

=======

        int n = pairs.length;
        int[] start = new int[n];
        int[] end = new int[n];
        for(int i = 0; i < n; i++){
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        int[][] res = new int[n][2];
        for(int i = 0; i < n; i++){
            res[i][0] = start[i];
            res[i][1] = end[i];
        }
        return res;

=======

        int n = pairs.length;
        int[][] res = new int[n][2];
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        res[0] = pairs[0];
        int j = 0;
        for (int i = 1; i < n; i++) {
            if (pairs[i][0] == res[j][1]) {
                res[++j] = pairs[i];
            } else {
                res[j + 1] = res[j];
                res[j--] = pairs[i];
            }
        }
        return res;

=======

        for(int i = 0; i < pairs.length; i++) {
            for(int j = i + 1; j < pairs.length; j++) {
                if(pairs[i][1] == pairs[j][0]) {
                    swap(pairs, i + 1, j);
                }
            }
        }
        return pairs;

=======

        int[][] result = new int[pairs.length][2];
        int[] start = new int[pairs.length];
        int[] end = new int[pairs.length];
        for (int i = 0; i < pairs.length; i++) {
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        int i = 0, j = 0;
        for (int k = 0; k < pairs.length; k++) {
            if (i < pairs.length && start[i] == end[j]) {
                result[k][0] = start[i];
                result[k][1] = end[j];
                i++;
                j++;
            } else if (i < pairs.length && start[i] < end[j]) {
                result[k][0] = start[i];
                i++;
            } else {
                result[k][0] = end[j];
                j++;
            }
        }
        return result;

=======

        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        int[][] res = new int[pairs.length][2];
        int i = 0;
        for (int[] pair : pairs) {
            if (i == 0) {
                res[i] = pair;
            } else {
                int[] last = res[i - 1];
                if (last[1] == pair[0]) {
                    res[i] = pair;
                } else {
                    res[i] = new int[]{pair[1], pair[0]};
                }
            }
            i++;
        }
        return res;

=======

        int[][] res = new int[pairs.length][2];
        Arrays.sort(pairs, (a, b) -> a[0] - b[0]);
        int l = 0, r = pairs.length - 1;
        for (int i = 0; i < pairs.length; i++) {
            if (i % 2 == 0) {
                res[i] = pairs[l++];
            } else {
                res[i] = pairs[r--];
            }
        }
        return res;

=======

        int[][] ret = new int[pairs.length][2];
        int[] start = new int[pairs.length];
        int[] end = new int[pairs.length];
        for (int i = 0; i < pairs.length; i++) {
            start[i] = pairs[i][0];
            end[i] = pairs[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        for (int i = 0; i < pairs.length; i++) {
            ret[i][0] = end[i];
            ret[i][1] = start[i];
        }
        return ret;

=======

        int[][] ans = new int[pairs.length][2];
        int i = 0;
        for(int[] p: pairs){
            if(p[0] < p[1]){
                ans[i][0] = p[0];
                ans[i][1] = p[1];
            } else {
                ans[i][0] = p[1];
                ans[i][1] = p[0];
            }
            i++;
        }
        Arrays.sort(ans, (a, b) -> {
            if(a[0] == b[0]) return a[1] - b[1];
            return a[0] - b[0];
        });
        return ans;

=======

        return null;
