Synthesizing 10/10 solutions

=======

        long sum = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == s.charAt(n - 1)) {
                sum += n - i;
            }
        }
        return sum;

=======

        int n = s.length();
        int[] dp = new int[n];
        int i = 0, j = 1;
        while (j < n) {
            if (s.charAt(i) == s.charAt(j)) {
                dp[j] = i + 1;
                i++;
                j++;
            } else if (i > 0) {
                i = dp[i - 1];
            } else {
                j++;
            }
        }
        long sum = 0;
        for (int k = 0; k < n; k++) {
            sum += dp[k];
        }
        return sum;

=======

        long sum = 0;
        long score = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i > 0 && s.charAt(i-1) == s.charAt(s.length() - 1 - i)) {
                score++;
            } else {
                score = 1;
            }
            sum += score;
        }
        return sum;

=======

        long sum = 0;
        int n = s.length();
        int[] dp = new int[n];
        dp[n-1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = s.charAt(i) == s.charAt(i + dp[i + 1]) ? 1 + dp[i + 1] : 1;
        }
        for (int i = 0; i < n; i++) {
            sum += dp[i];
        }
        return sum;
    }
}

=======

        int n = s.length();
        long ans = 0;
        int[] dp = new int[n];
        for (int i = 0, j = n - 1; i < n; i++, j--) {
            if (s.charAt(i) == s.charAt(j)) {
                dp[j] = i > 0 ? dp[j + 1] + 1 : 1;
            }
            ans += dp[j];
        }
        return ans;

=======

        long score = 0;
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
            int max = 0;
            for (int j = 0; j < 26; j++) {
                max = Math.max(max, count[j]);
            }
            score += max;
        }
        return score;

=======

        long sum = 0;
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int c = s.charAt(i) - 'a';
            sum += count[c] * (s.length() - i);
            count[c] += 1;
        }
        return sum;

=======

        long score = 0;
        int n = s.length();
        int[] prefix = new int[n];
        prefix[0] = 1;
        int maxPrefix = 1;
        for (int i = 1; i < n; i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                prefix[i] = prefix[i - 1] + 1;
            } else {
                prefix[i] = 1;
            }
            maxPrefix = Math.max(maxPrefix, prefix[i]);
        }
        for (int i = 0; i < n; i++) {
            score += Math.min(prefix[i], maxPrefix);
            maxPrefix = Math.max(maxPrefix - 1, 0);
        }
        return score;

=======

        int n = s.length();
        long[] pows = new long[n];
        long[] hashes = new long[n];
        long[] invs = new long[n];
        long[] invpows = new long[n];
        long[] prefix = new long[n];
        long[] suffix = new long[n];
        long[] invprefix = new long[n];
        long[] invsuffix = new long[n];
        long mod = 1000000007;
        long base = 31;
        pows[0] = 1;
        invpows[0] = 1;
        for (int i = 1; i < n; i++) {
            pows[i] = pows[i - 1] * base % mod;
            invpows[i] = invpows[i - 1] * inv(base, mod) % mod;
        }
        hashes[0] = s.charAt(0) - 'a' + 1;
        invs[0] = s.charAt(0) - 'a' + 1;
        for (int i = 1; i < n; i++) {
            hashes[i] = (hashes[i - 1] * base + s.charAt(i) - 'a' + 1) % mod;
            invs[i] = (invs[i - 1] * base + s.charAt(n - i - 1) - 'a' + 1) % mod;
        }
        prefix[0] = hashes[0];
        invprefix[0] = invs[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = (prefix[i - 1] + hashes[i] * pows[i]) % mod;
            invprefix[i] = (invprefix[i - 1] + invs[i] * pows[i]) % mod;
        }
        suffix[0] = hashes[n - 1];
        invsuffix[0] = invs[n - 1];
        for (int i = 1; i < n; i++) {
            suffix[i] = (suffix[i - 1] + hashes[n - i - 1] * pows[i]) % mod;
            invsuffix[i] = (invsuffix[i - 1] + invs[n - i - 1] * pows[i

=======

        int[] sum = new int[s.length()];
        sum[0] = 1;
        int[] next = new int[s.length()];
        next[0] = -1;
        int j = -1;
        for (int i = 1; i < s.length(); i++) {
            while (j > -1 && s.charAt(j + 1) != s.charAt(i)) {
                j = next[j];
            }
            if (s.charAt(j + 1) == s.charAt(i)) {
                j++;
            }
            next[i] = j;
            sum[i] = sum[j] + 1;
        }
        long res = 0;
        for (int i = 0; i < s.length(); i++) {
            res += sum[i];
        }
        return res;
