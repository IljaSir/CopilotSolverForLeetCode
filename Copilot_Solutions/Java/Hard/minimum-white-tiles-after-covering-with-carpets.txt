Synthesizing 9/10 solutions

=======

        int n = floor.length();
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + (floor.charAt(i) == '1' ? 1 : 0);
        }
        int[][] dp = new int[n + 1][numCarpets + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= numCarpets; j++) {
                int sum = prefix[i + 1] - prefix[i + 1 - carpetLen];
                dp[i + 1][j] = Math.min(dp[i + 1][j], dp[i][j] + carpetLen - sum);
                if (j < numCarpets) {
                    dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j] + sum);
                }
            }
        }
        return dp[n][numCarpets];

=======

        int n = floor.length();
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = floor.charAt(i) - '0';
        }
        int[] s = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            s[i] = s[i - 1] + a[i - 1];
        }
        int[] f = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            f[i] = f[i - 1] + a[i - 1] * i;
        }
        int[] g = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            g[i] = g[i - 1] + a[i - 1];
        }
        int[][] dp = new int[numCarpets + 1][n + 1];
        for (int i = 0; i <= numCarpets; ++i) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        dp[0][0] = 0;
        for (int i = 1; i <= numCarpets; ++i) {
            for (int j = 0; j <= n; ++j) {
                for (int k = 0; k < j; ++k) {
                    int l = j - k;
                    if (l > carpetLen) {
                        break;
                    }
                    int sum = s[j] - s[k];
                    int cost = f[j] - f[k] - g[k] * k;
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][k] + cost + l * sum);
                }
            }
        }
        return dp[numCarpets][n];

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] sum = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (floor.charAt(i) == '1') {
                ans++;
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (i - carpetLen >= 0) {
                max = Math.max(max, dp[i - carpetLen]);
            }
            if (floor.charAt(i) == '0') {
                dp[i] = max + 1;
            }
            sum[i] = dp[i];
            if (i > 0) {
                sum[i] += sum[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (floor.charAt(i) == '0') {
                int l = i, r = n - 1;
                int pos = -1;
                while (l <= r) {
                    int mid = (l + r) / 2;
                    int cnt = sum[mid] - sum[i] + dp[i];
                    if (cnt > numCarpets) {
                        r = mid - 1;
                    } else {
                        pos = mid;
                        l = mid + 1;
                    }
                }
                if (pos != -1) {
                    ans = Math.min(ans, pos - i + 1 - (sum[pos] - sum[i] + dp[i]));
                }
            }
        }
        return ans;

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] sum = new int[n];
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            if (i >= carpetLen) {
                dp[i] = dp[i - carpetLen];
                sum[i] = sum[i - carpetLen];
                count[i] = count[i - carpetLen];
            }
            if (floor.charAt(i) == '1') {
                dp[i] += 1;
                sum[i] += i;
                count[i] += 1;
            }
            if (i >= carpetLen) {
                int j = i - carpetLen;
                if (dp[j] > dp[i]) {
                    dp[i] = dp[j];
                    sum[i] = sum[j];
                    count[i] = count[j];
                } else if (dp[j] == dp[i]) {
                    int sum1 = sum[j] + j * count[j];
                    int sum2 = sum[i] + i * count[i];
                    if (sum1 < sum2) {
                        sum[i] = sum[j];
                        count[i] = count[j];
                    }
                }
            }
        }
        return n - dp[n - 1];

=======

        int n = floor.length();
        int[] dp = new int[n + 1];
        int[] dp2 = new int[n + 1];
        int[] sum = new int[n + 1];
        int[] sum2 = new int[n + 1];
        int[] sum3 = new int[n + 1];
        int[] sum4 = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + (floor.charAt(i) == '1' ? 1 : 0);
            sum2[i + 1] = sum2[i] + (floor.charAt(i) == '1' ? 0 : 1);
            sum3[i + 1] = sum3[i] + (floor.charAt(i) == '1' ? 1 : 0);
            sum4[i + 1] = sum4[i] + (floor.charAt(i) == '1' ? 0 : 1);
        }
        for (int i = 0; i <= n; i++) {
            dp[i] = sum[n] - sum[i];
        }
        for (int i = n - 1; i >= 0; i--) {
            dp2[i] = sum2[n] - sum2[i];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int t = sum3[i] + sum4[n] - sum4[i];
            int l = i + carpetLen;
            int r = n - carpetLen;
            if (l > r) continue;
            int left = sum3[l] + sum4[n] - sum4[l];
            int right = sum3[r] + sum4[n] - sum4[r];
            if (left < right) {
                int cur = t + left;
                if (numCarpets > 1) {
                    cur += dp[l + carpetLen];
                }
                ans = Math.min(ans, cur);
            } else {
                int cur = t + right;
                if (numCarpets > 1) {
                    cur += dp2[r - carpetLen];
                }
                ans = Math.min(ans, cur);
            }
        }
        return ans;

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] sum = new int[n];
        int[] left = new int[n];
        int[] right = new int[n];
        int[] count = new int[n];
        int[] pre = new int[n];
        int[] suf = new int[n];
        for (int i = 0; i < n; i++) {
            if (floor.charAt(i) == '0') {
                dp[i] = 0;
            } else {
                dp[i] = i > 0 ? dp[i - 1] + 1 : 1;
            }
            sum[i] = dp[i] + (i > 0 ? sum[i - 1] : 0);
        }
        int l = 0;
        int r = 0;
        while (r < carpetLen - 1) {
            if (floor.charAt(r) == '1') {
                left[r] = r - l + 1;
            } else {
                l = r + 1;
            }
            r++;
        }
        for (int i = carpetLen - 1; i < n; i++) {
            if (floor.charAt(i) == '1') {
                left[i] = i - l + 1;
            } else {
                l = i + 1;
            }
        }
        l = n - 1;
        r = n - 1;
        while (l > n - carpetLen) {
            if (floor.charAt(l) == '1') {
                right[l] = r - l + 1;
            } else {
                r = l - 1;
            }
            l--;
        }
        for (int i = n - carpetLen - 1; i >= 0; i--) {
            if (floor.charAt(i) == '1') {
                right[i] = r - i + 1;
            } else {
                r = i - 1;
            }
        }
        for (int i = 0; i < n; i++) {
            count[i] = (i > 0 ? count[i - 1] : 0) + (floor.charAt(i) == '1' ? 1 : 0);
        }
        for (int i = 0; i < n; i++) {
            int l1 =

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] sum = new int[n];
        int[] prefixSum = new int[n];
        int[] prefixMax = new int[n];
        int[] prefixMax2 = new int[n];
        int[] prefixSum2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                dp[i] = floor.charAt(i) == '1' ? 1 : 0;
                sum[i] = dp[i];
            } else {
                dp[i] = dp[i - 1] + (floor.charAt(i) == '1' ? 1 : 0);
                sum[i] = dp[i] + sum[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                prefixSum[i] = sum[i];
                prefixMax[i] = dp[i];
            } else {
                prefixSum[i] = prefixSum[i - 1] + sum[i];
                prefixMax[i] = Math.max(prefixMax[i - 1], dp[i]);
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (i == n - 1) {
                prefixSum2[i] = sum[i];
                prefixMax2[i] = dp[i];
            } else {
                prefixSum2[i] = prefixSum2[i + 1] + sum[i];
                prefixMax2[i] = Math.max(prefixMax2[i + 1], dp[i]);
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int l = i;
            int r = i + carpetLen - 1;
            int l2 = i + carpetLen;
            int r2 = i + carpetLen * 2 - 1;
            int l3 = i + carpetLen * 2;
            int r3 = i + carpetLen * 3 - 1;
            int l4 = i + carpetLen * 3;
            int r4 = i + carpetLen * 4 - 1;
            if (r < n) {
                int val = 0;
                if (l

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] pre = new int[n];
        int[] suf = new int[n];
        int[] sum = new int[n];
        int[] ones = new int[n];
        for (int i = 0; i < n; i++) {
            ones[i] = floor.charAt(i) - '0';
            if (i > 0) {
                ones[i] += ones[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            if (floor.charAt(i) == '1') {
                dp[i] = 1;
            }
            if (i > 0) {
                dp[i] += dp[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            int start = Math.max(0, i - carpetLen + 1);
            int end = i;
            pre[i] = dp[end] - (start > 0 ? dp[start - 1] : 0);
        }
        for (int i = n - 1; i >= 0; i--) {
            int start = i;
            int end = Math.min(n - 1, i + carpetLen - 1);
            suf[i] = dp[end] - (start > 0 ? dp[start - 1] : 0);
        }
        for (int i = 0; i < n; i++) {
            int start = i;
            int end = Math.min(n - 1, i + carpetLen - 1);
            sum[i] = ones[end] - (start > 0 ? ones[start - 1] : 0);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n - carpetLen + 1; i++) {
            int left = Math.max(0, i - carpetLen);
            int right = Math.min(n - carpetLen, i + carpetLen - 1);
            int cur = sum[i] + ones[n - 1] - ones[i + carpetLen - 1] - (left > 0 ? ones[left - 1] : 0);
            if (left > 0) {
                cur += pre[left - 1];
            }
            if (

=======

        int n = floor.length();
        int[] dp = new int[n];
        int[] presum = new int[n];
        int[] sum = new int[n];
        int[] last = new int[n];
        int[] next = new int[n];
        int[] count = new int[n];
        Arrays.fill(last, -1);
        Arrays.fill(next, n);
        int c = 0;
        for(int i = 0; i < n; i++){
            if(floor.charAt(i) == '1'){
                c++;
                presum[i] = 1;
            }
            if(i > 0){
                presum[i] += presum[i - 1];
            }
        }
        for(int i = n - 1; i >= 0; i--){
            if(floor.charAt(i) == '1'){
                count[i] = 1;
            }
            if(i < n - 1){
                count[i] += count[i + 1];
            }
        }
        for(int i = 0; i < n; i++){
            if(floor.charAt(i) == '0'){
                if(i > 0){
                    last[i] = last[i - 1];
                }
                last[i] = i;
            }
        }
        for(int i = n - 1; i >= 0; i--){
            if(floor.charAt(i) == '0'){
                if(i < n - 1){
                    next[i] = next[i + 1];
                }
                next[i] = i;
            }
        }
        for(int i = 0; i < n; i++){
            int l = last[i];
            int r = next[i];
            if(l == -1){
                l = i;
            }
            if(r == n){
                r = i;
            }
            sum[i] = presum[r] - (l > 0 ? presum[l - 1] : 0);
        }
        for(int i = 0; i < n; i++){
            dp[i] = count[i];
        }
        for(int i = 1; i < numCarpets; i++){
            int[] cur = new int[n];
            int[] left = new int[n];
            int[] right = new int[n];
            for(int j = 0; j < n; j++){
                left[j] = j;
                if(j > 0 && floor.charAt(j
