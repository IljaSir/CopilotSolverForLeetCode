Synthesizing 10/10 solutions

=======

        int n = intervals.length;
        int m = queries.length;
        int[][] qs = new int[m][2];
        for (int i = 0; i < m; i++) {
            qs[i][0] = queries[i];
            qs[i][1] = i;
        }
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        Arrays.sort(qs, (a, b) -> a[0] - b[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        int[] res = new int[m];
        int j = 0;
        for (int i = 0; i < m; i++) {
            while (j < n && intervals[j][0] <= qs[i][0]) {
                pq.offer(intervals[j]);
                j++;
            }
            while (!pq.isEmpty() && pq.peek()[1] < qs[i][0]) {
                pq.poll();
            }
            if (pq.isEmpty()) {
                res[qs[i][1]] = -1;
            } else {
                res[qs[i][1]] = pq.peek()[1] - pq.peek()[0] + 1;
            }
        }
        return res;

=======

        int n = intervals.length;
        int m = queries.length;
        int[][] qs = new int[m][2];
        for (int i = 0; i < m; i++) {
            qs[i][0] = queries[i];
            qs[i][1] = i;
        }
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        Arrays.sort(qs, (a, b) -> a[0] - b[0]);
        int[] ans = new int[m];
        Arrays.fill(ans, -1);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int j = 0;
        for (int i = 0; i < m; i++) {
            while (j < n && intervals[j][1] <= qs[i][0]) {
                map.put(intervals[j][0], map.getOrDefault(intervals[j][0], 0) + 1);
                j++;
            }
            if (!map.isEmpty()) {
                if (map.firstKey() <= qs[i][0]) {
                    ans[qs[i][1]] = map.firstEntry().getValue();
                }
                if (ans[qs[i][1]] != -1) {
                    int key = map.firstKey();
                    map.put(key, map.get(key) - 1);
                    if (map.get(key) == 0) {
                        map.remove(key);
                    }
                }
            }
        }
        return ans;

=======

        int[][] q = new int[queries.length][2];
        for(int i = 0; i < queries.length; i++){
            q[i][0] = queries[i];
            q[i][1] = i;
        }
        Arrays.sort(q, (a, b) -> a[0] - b[0]);
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int[] res = new int[queries.length];
        int i = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        for(int[] query : q){
            while(i < intervals.length && intervals[i][0] <= query[0]){
                pq.offer(intervals[i++]);
            }
            while(!pq.isEmpty() && pq.peek()[1] < query[0]){
                pq.poll();
            }
            res[query[1]] = pq.isEmpty() ? -1 : pq.peek()[1] - pq.peek()[0] + 1;
        }
        return res;

=======

        int n = intervals.length;
        int m = queries.length;
        int[][] qs = new int[m][2];
        for (int i = 0; i < m; ++i) {
            qs[i] = new int[] {queries[i], i};
        }
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[1] - b[1];
            }
        });
        Arrays.sort(qs, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[0] - b[0];
            }
        });
        int[] ans = new int[m];
        Arrays.fill(ans, -1);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int j = 0;
        for (int i = 0; i < m; ++i) {
            while (j < n && intervals[j][1] <= qs[i][0]) {
                int l = intervals[j][0];
                int r = intervals[j][1];
                map.put(r - l + 1, map.getOrDefault(r - l + 1, 0) + 1);
                ++j;
            }
            if (map.isEmpty()) {
                continue;
            }
            Map.Entry<Integer, Integer> e = map.ceilingEntry(qs[i][0]);
            if (e != null) {
                ans[qs[i][1]] = e.getKey();
                if (e.getValue() == 1) {
                    map.remove(e.getKey());
                } else {
                    map.put(e.getKey(), e.getValue() - 1);
                }
            }
        }
        return ans;

=======

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int n = intervals.length;
        int[][] q = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            q[i][0] = queries[i];
            q[i][1] = i;
        }
        Arrays.sort(q, (a, b) -> a[0] - b[0]);
        int[] ans = new int[queries.length];
        Arrays.fill(ans, -1);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int j = 0;
        for (int i = 0; i < q.length; i++) {
            while (j < n && intervals[j][0] <= q[i][0]) {
                map.put(intervals[j][1] - intervals[j][0] + 1, map.getOrDefault(intervals[j][1] - intervals[j][0] + 1, 0) + 1);
                j++;
            }
            while (!map.isEmpty() && map.firstKey() <= q[i][0]) {
                int val = map.get(map.firstKey());
                if (val == 1) {
                    map.remove(map.firstKey());
                } else {
                    map.put(map.firstKey(), val - 1);
                }
            }
            if (!map.isEmpty()) {
                ans[q[i][1]] = map.firstKey();
            }
        }
        return ans;

=======

        int m = intervals.length;
        int n = queries.length;
        int[][] q = new int[n][2];
        for(int i = 0; i < n; i++){
            q[i][0] = queries[i];
            q[i][1] = i;
        }
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        Arrays.sort(q, (a, b) -> a[0] - b[0]);
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int idx = 0;
        for(int i = 0; i < n; i++){
            while(idx < m && intervals[idx][1] <= q[i][0]){
                pq.offer(intervals[idx++]);
            }
            while(!pq.isEmpty() && pq.peek()[0] < q[i][0]){
                pq.poll();
            }
            if(!pq.isEmpty()){
                ans[q[i][1]] = pq.peek()[1] - pq.peek()[0] + 1;
            }
        }
        return ans;

=======

        int[] res = new int[queries.length];
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < queries.length; i++) {
            map.put(queries[i], i);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int index = 0;
        for (int i = 0; i < queries.length; i++) {
            while (index < intervals.length && intervals[index][1] <= queries[i]) {
                pq.offer(intervals[index]);
                index++;
            }
            while (!pq.isEmpty() && pq.peek()[1] < queries[i]) {
                pq.poll();
            }
            res[i] = pq.isEmpty() ? -1 : pq.peek()[0];
        }
        return res;

=======

        int[] result = new int[queries.length];
        Arrays.fill(result, -1);
        int[][] query = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            query[i][0] = queries[i];
            query[i][1] = i;
        }
        Arrays.sort(intervals, (i1, i2) -> {
            return i1[1] - i2[1];
        });
        Arrays.sort(query, (i1, i2) -> {
            return i1[0] - i2[0];
        });
        PriorityQueue<int[]> pq = new PriorityQueue<>((i1, i2) -> {
            return i1[0] - i2[0];
        });
        int j = 0;
        for (int i = 0; i < query.length; i++) {
            while (j < intervals.length && intervals[j][1] <= query[i][0]) {
                pq.add(intervals[j++]);
            }
            while (!pq.isEmpty() && pq.peek()[0] < query[i][0]) {
                pq.poll();
            }
            if (!pq.isEmpty()) {
                result[query[i][1]] = pq.peek()[1] - pq.peek()[0] + 1;
            }
        }
        return result;

=======

        int[] result = new int[queries.length];
        Arrays.fill(result, -1);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i = 0; i < queries.length; i++) {
            map.put(queries[i], i);
        }
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int[] interval : intervals) {
            while (!pq.isEmpty() && pq.peek()[1] < interval[0]) {
                pq.poll();
            }
            pq.offer(interval);
            Integer key = map.ceilingKey(interval[0]);
            while (key != null && key <= interval[1]) {
                result[map.get(key)] = pq.peek()[1] - pq.peek()[0] + 1;
                map.remove(key);
                key = map.ceilingKey(interval[0]);
            }
        }
        return result;

=======

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int n = intervals.length;
        int m = queries.length;
        int[] ans = new int[m];
        int[] index = new int[m];
        for (int i = 0; i < m; i++) {
            index[i] = i;
        }
        Arrays.sort(index, (a, b) -> queries[a] - queries[b]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);
        int j = 0;
        for (int i = 0; i < m; i++) {
            while (j < n && intervals[j][0] <= queries[index[i]]) {
                pq.add(intervals[j]);
                j++;
            }
            while (!pq.isEmpty() && pq.peek()[1] < queries[index[i]]) {
                pq.poll();
            }
            if (pq.isEmpty()) {
                ans[index[i]] = -1;
            } else {
                ans[index[i]] = pq.peek()[1] - pq.peek()[0] + 1;
            }
        }
        return ans;
