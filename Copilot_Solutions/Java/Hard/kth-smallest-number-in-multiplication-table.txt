Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int low = 1;
        int high = m * n;
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0;
            for (int i = 1; i <= m; i++) {
                count += Math.min(mid / i, n);
            }
            if (count < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;

=======

        int l = 1, r = m * n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (count(mid, m, n) < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }

    private int count(int x, int m, int n) {
        int count = 0;
        for (int i = 1; i <= m; i++) {
            count += Math.min(x / i, n);
        }
        return count;

=======

        int l = 1, r = m * n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (count(mid, m, n) < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
    
    private int count(int mid, int m, int n) {
        int count = 0;
        for (int i = 1; i <= m; i++) {
            count += Math.min(mid / i, n);
        }
        return count;

=======

        int low = 1;
        int high = m * n;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (count(m, n, mid) < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }

    private int count(int m, int n, int mid) {
        int res = 0;
        for (int i = 1; i <= m; i++) {
            res += Math.min(mid / i, n);
        }
        return res;

=======

        int left = 1;
        int right = m * n + 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            int count = 0;
            for (int i = 1; i <= m; i++) {
                count += Math.min(mid / i, n);
            }
            if (count < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        int left = 1;
        int right = m * n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (count(m, n, mid) < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }

    private int count(int m, int n, int mid) {
        int count = 0;
        for (int i = 1; i <= m; i++) {
            count += Math.min(mid / i, n);
        }
        return count;

=======

        int left = 1, right = m * n;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (count(mid, m, n) >= k) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
    
    private int count(int x, int m, int n) {
        int count = 0;
        for (int i = 1; i <= m; i++) {
            count += Math.min(x / i, n);
        }
        return count;

=======

        int l = 1, r = m * n;
        while (l < r) {
            int mid = l + r >> 1;
            if (count(mid, m, n) < k) l = mid + 1;
            else r = mid;
        }
        return l;
    }
    int count(int x, int m, int n) {
        int res = 0;
        for (int i = 1; i <= m; i++) {
            res += Math.min(x / i, n);
        }
        return res;

=======

        int l = 1;
        int r = m * n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int count = count(mid, m, n);
            if (count < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }

    private int count(int mid, int m, int n) {
        int i = 1;
        int j = n;
        int count = 0;
        while (i <= m && j >= 1) {
            if (i * j <= mid) {
                count += j;
                i++;
            } else {
                j--;
            }
        }
        return count;
