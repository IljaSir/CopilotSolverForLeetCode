Synthesizing 10/10 solutions

=======

        int[] start = new int[meetings.length];
        int[] end = new int[meetings.length];
        for (int i = 0; i < meetings.length; i++) {
            start[i] = meetings[i][0];
            end[i] = meetings[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        int max = 0;
        int temp = 0;
        int i = 0, j = 0;
        while (i < start.length && j < end.length) {
            if (start[i] < end[j]) {
                temp++;
                i++;
            } else {
                temp--;
                j++;
            }
            max = Math.max(max, temp);
        }
        return max;

=======

        int[] start = new int[meetings.length];
        int[] end = new int[meetings.length];
        for (int i = 0; i < meetings.length; i++) {
            start[i] = meetings[i][0];
            end[i] = meetings[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        int i = 0, j = 0;
        int max = 0, count = 0;
        int room = 0;
        while (i < start.length && j < end.length) {
            if (start[i] < end[j]) {
                count++;
                if (count > max) {
                    max = count;
                    room = i;
                }
                i++;
            } else {
                count--;
                j++;
            }
        }
        return room;

=======

        int[] start = new int[meetings.length];
        int[] end = new int[meetings.length];
        for(int i = 0; i < meetings.length; i++) {
            start[i] = meetings[i][0];
            end[i] = meetings[i][1];
        }
        Arrays.sort(start);
        Arrays.sort(end);
        int max = 0;
        int count = 0;
        int room = 0;
        int i = 0;
        int j = 0;
        while(i < start.length && j < end.length) {
            if(start[i] < end[j]) {
                count++;
                if(count > max) {
                    max = count;
                    room = i;
                }
                i++;
            } else {
                count--;
                j++;
            }
        }
        return room;

=======

        int[] rooms = new int[n];
        for (int[] meeting : meetings) {
            int start = meeting[0];
            int end = meeting[1];
            for (int i = 0; i < n; i++) {
                if (rooms[i] <= start) {
                    rooms[i] = end;
                    break;
                }
            }
        }
        int max = 0;
        int index = -1;
        for (int i = 0; i < n; i++) {
            int count = 0;
            for (int[] meeting : meetings) {
                if (meeting[0] >= rooms[i]) {
                    count++;
                }
            }
            if (count > max) {
                max = count;
                index = i;
            }
        }
        return index;

=======

        int[] rooms = new int[n];
        for (int[] meeting: meetings) {
            for (int i = meeting[0]; i < meeting[1]; i++) {
                rooms[i]++;
            }
        }
        int max = 0;
        int maxIndex = 0;
        for (int i = 0; i < n; i++) {
            if (rooms[i] > max) {
                max = rooms[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] rooms = new int[n];
        for (int[] meeting : meetings) {
            rooms[meeting[0]]++;
            rooms[meeting[1]]--;
        }
        int max = 0;
        int maxIndex = 0;
        for (int i = 1; i < rooms.length; i++) {
            rooms[i] += rooms[i - 1];
            if (rooms[i] > max) {
                max = rooms[i];
                maxIndex = i;
            }
        }
        return maxIndex;

=======

        int[] times = new int[500001];
        for (int[] meeting : meetings) {
            times[meeting[0]]++;
            times[meeting[1]]--;
        }
        int max = 0;
        int ans = 0;
        int count = 0;
        for (int i = 0; i < times.length; i++) {
            count += times[i];
            if (max < count) {
                max = count;
                ans = i;
            }
        }
        return ans;

=======

        int[] rooms = new int[n];
        int max = 0;
        for(int[] meeting : meetings){
            for(int i = meeting[0]; i < meeting[1]; i++){
                rooms[i]++;
                max = Math.max(max, rooms[i]);
            }
        }
        for(int i = 0; i < n; i++){
            if(rooms[i] == max){
                return i;
            }
        }
        return -1;

=======

        int[] count = new int[n];
        for (int[] meeting : meetings) {
            count[meeting[0]]++;
            count[meeting[1]]--;
        }
        int max = 0, maxIdx = 0, cur = 0;
        for (int i = 0; i < n; i++) {
            cur += count[i];
            if (cur > max) {
                max = cur;
                maxIdx = i;
            }
        }
        return maxIdx;

=======

        int[] schedule = new int[500001];
        for (int[] meeting : meetings) {
            schedule[meeting[0]]++;
            schedule[meeting[1]]--;
        }
        int max = 0;
        int res = 0;
        int count = 0;
        for (int i = 0; i < schedule.length; i++) {
            count += schedule[i];
            if (count > max) {
                max = count;
                res = i;
            }
        }
        return res;
