Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, 1);
        Arrays.fill(right, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    left[i] = Math.max(left[i], left[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    right[i] = Math.max(right[i], right[j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (left[i] > 1 && right[i] > 1) {
                res = Math.max(res, left[i] + right[i] - 1);
            }
        }
        return n - res;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, 1);
        Arrays.fill(right, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    left[i] = Math.max(left[i], left[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    right[i] = Math.max(right[i], right[j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 1; i < n - 1; i++) {
            if (left[i] > 1 && right[i] > 1) {
                res = Math.max(res, left[i] + right[i] - 1);
            }
        }
        return n - res;

=======

        int n = nums.length;
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        Arrays.fill(dp1, 1);
        Arrays.fill(dp2, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp1[i] = Math.max(dp1[i], dp1[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    dp2[i] = Math.max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (dp1[i] > 1 && dp2[i] > 1) {
                ans = Math.max(ans, dp1[i] + dp2[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.length;
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        Arrays.fill(dp1, 1);
        Arrays.fill(dp2, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp1[i] = Math.max(dp1[i], dp1[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[i] > nums[j]) {
                    dp2[i] = Math.max(dp2[i], dp2[j] + 1);
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (dp1[i] > 1 && dp2[i] > 1) {
                res = Math.max(res, dp1[i] + dp2[i] - 1);
            }
        }
        return n - res;

=======

        int n = nums.length;
        int[] lis = new int[n];
        int[] lds = new int[n];
        int max = 0;
        for (int i = 0; i < n; i++) {
            lis[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    lis[i] = Math.max(lis[i], lis[j] + 1);
                }
            }
            max = Math.max(max, lis[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            lds[i] = 1;
            for (int j = n - 1; j > i; j--) {
                if (nums[j] < nums[i]) {
                    lds[i] = Math.max(lds[i], lds[j] + 1);
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i < n - 1; i++) {
            if (lis[i] > 1 && lds[i] > 1) {
                min = Math.min(min, n - lis[i] - lds[i] + 1);
            }
        }
        return min;

=======

        int n = nums.length;
        int[] l = new int[n];
        int[] r = new int[n];
        for(int i = 0; i < n; i++) {
            l[i] = 1;
            for(int j = 0; j < i; j++) {
                if(nums[i] > nums[j]) {
                    l[i] = Math.max(l[i], l[j] + 1);
                }
            }
        }
        for(int i = n - 1; i >= 0; i--) {
            r[i] = 1;
            for(int j = n - 1; j > i; j--) {
                if(nums[i] > nums[j]) {
                    r[i] = Math.max(r[i], r[j] + 1);
                }
            }
        }
        int ans = 0;
        for(int i = 1; i < n - 1; i++) {
            if(l[i] > 1 && r[i] > 1) {
                ans = Math.max(ans, l[i] + r[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] dp = new int[n];
        Arrays.fill(left, 1);
        Arrays.fill(right, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    left[i] = Math.max(left[i], left[j] + 1);
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            for (int j = n - 1; j > i; j--) {
                if (nums[j] < nums[i]) {
                    right[i] = Math.max(right[i], right[j] + 1);
                }
            }
        }
        int max = 0;
        for (int i = 1; i < n - 1; i++) {
            if (left[i] > 1 && right[i] > 1) {
                dp[i] = left[i] + right[i] - 1;
                max = Math.max(max, dp[i]);
            }
        }
        return n - max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            dp2[i] = 1;
            for (int j = n - 1; j > i; j--) {
                if (nums[j] < nums[i]) {
                    dp2[i] = Math.max(dp2[i], dp2[j] + 1);
                }
            }
            ans = Math.max(ans, dp2[i]);
        }
        for (int i = 1; i < n - 1; i++) {
            if (dp[i] > 1 && dp2[i] > 1) {
                ans = Math.max(ans, dp[i] + dp2[i] - 1);
            }
        }
        return n - ans;

=======

        int n = nums.length;
        int[] lis = new int[n];
        int[] lds = new int[n];
        int res = n;
        for(int i = 0; i < n; i++) {
            lis[i] = 1;
            for(int j = 0; j < i; j++) {
                if(nums[i] > nums[j]) {
                    lis[i] = Math.max(lis[i], lis[j] + 1);
                }
            }
        }
        for(int i = n - 1; i >= 0; i--) {
            lds[i] = 1;
            for(int j = n - 1; j > i; j--) {
                if(nums[i] > nums[j]) {
                    lds[i] = Math.max(lds[i], lds[j] + 1);
                }
            }
        }
        for(int i = 1; i < n - 1; i++) {
            if(lis[i] > 1 && lds[i] > 1) {
                res = Math.min(res, n - lis[i] - lds[i] + 1);
            }
        }
        return res;
