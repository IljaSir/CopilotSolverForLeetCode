Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> freq = new HashMap<>();
        Map<Integer, Integer> count = new HashMap<>();
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int f = freq.getOrDefault(num, 0);
            freq.put(num, f + 1);
            count.put(f, count.getOrDefault(f, 0) - 1);
            count.put(f + 1, count.getOrDefault(f + 1, 0) + 1);
            if (count.get(1) == i + 1) {
                res = i + 1;
            } else if (count.get(f) == 0) {
                res = i + 1;
            } else if (count.get(f) == -1 && count.get(1) == 1) {
                res = i + 1;
            } else if (count.get(f + 1) == 1 && f + 1 == i + 1) {
                res = i + 1;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        int[] freq = new int[n + 1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            freq[count[x]]--;
            count[x]++;
            freq[count[x]]++;
            if (freq[count[x]] * count[x] == i + 1) {
                ans = i + 1;
            }
            if (freq[1] == i + 1) {
                ans = i + 1;
            }
            if (freq[i + 1] == 1) {
                ans = i + 1;
            }
        }
        return ans;

=======

        Map<Integer, Integer> count = new HashMap<>();
        Map<Integer, Integer> freq = new HashMap<>();
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int n = nums[i];
            int c = count.getOrDefault(n, 0);
            count.put(n, c + 1);
            freq.put(c, freq.getOrDefault(c, 0) - 1);
            freq.put(c + 1, freq.getOrDefault(c + 1, 0) + 1);
            if (freq.get(c) == 0) {
                freq.remove(c);
            }
            if (freq.size() == 2) {
                int a = freq.keySet().iterator().next();
                int b = freq.keySet().iterator().next();
                if (freq.get(a) == 1 && a == 1 || freq.get(b) == 1 && b == 1) {
                    max = i + 1;
                } else if (freq.get(a) == 1 && a == c + 1 || freq.get(b) == 1 && b == c + 1) {
                    max = i + 1;
                }
            } else if (freq.size() == 1) {
                int a = freq.keySet().iterator().next();
                if (freq.get(a) == 1 || a == 1) {
                    max = i + 1;
                }
            }
        }
        return max;

=======

        int[] count = new int[100001];
        int[] freq = new int[100001];
        int max = 0;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int c = count[num];
            if (c > 0) {
                freq[c]--;
            }
            count[num]++;
            freq[c + 1]++;
            if (freq[c + 1] * (c + 1) == i + 1) {
                max = i + 1;
            }
            if (c > 0 && freq[c] * c == i) {
                res = i;
            }
            if (freq[1] == i + 1) {
                res = i + 1;
            }
        }
        return Math.max(max, res);

=======

        int[] count = new int[100001];
        int[] freq = new int[100001];
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int c = count[num];
            count[num]++;
            freq[c]--;
            freq[c + 1]++;
            if (freq[c] == 0 && c + 1 != max) {
                if (c == max - 1 && freq[c + 1] == 1) {
                    max = c + 1;
                } else if (c == 1) {
                    max = c;
                }
            }
        }
        return max;

=======

        int[] count = new int[100001];
        int[] freq = new int[100001];
        int res = 0, max = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            max = Math.max(max, ++count[num]);
            freq[count[num]]++;
            if (freq[max] * max == i + 1 && i < nums.length - 1) res = i + 2;
            else if (freq[max] * max == i && freq[max - 1] == 1) res = i + 1;
        }
        return res;

=======

        int[] count = new int[100001];
        int[] freq = new int[100001];
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (count[num] > 0) {
                freq[count[num]]--;
            }
            count[num]++;
            freq[count[num]]++;
            if (freq[count[num]] * count[num] == i + 1 && i < nums.length - 1) {
                res = i + 2;
            }
            if (freq[1] == i + 1) {
                res = i + 1;
            }
            if (freq[count[num]] * count[num] == i && freq[1] == 1) {
                res = i + 1;
            }
        }
        return res;

=======

        int[] freq = new int[100001];
        int[] count = new int[100001];
        int max = 0;
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            count[freq[num]]--;
            freq[num]++;
            count[freq[num]]++;
            if (freq[num] * count[freq[num]] == i + 1) {
                max = freq[num];
            }
            if (count[max] == 1 && max * count[max] == i + 1) {
                res = i + 1;
            } else if (count[1] == i + 1) {
                res = i + 1;
            }
        }
        return res;

=======

        int[] count = new int[100001];
        int[] freq = new int[100001];
        int result = 0;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            int c = count[num];
            if (c > 0) {
                freq[c]--;
                if (freq[c] == 0 && c == max) {
                    max--;
                }
            }
            count[num]++;
            freq[count[num]]++;
            if (freq[count[num]] == count[num]) {
                max = Math.max(max, count[num]);
            }
            if (max * freq[max] == i) {
                result = i + 1;
            } else if ((max - 1) * freq[max - 1] == i) {
                result = i + 1;
            }
        }
        return result;

=======

        int n = nums.length;
        int[] freq = new int[100001];
        int[] count = new int[100001];
        int maxFreq = 0;
        int maxCount = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int f = freq[num];
            freq[num]++;
            maxFreq = Math.max(maxFreq, freq[num]);
            count[f]--;
            count[freq[num]]++;
            maxCount = Math.max(maxCount, count[freq[num]]);
            if (maxCount * maxFreq == i + 1) {
                res = i + 1;
            } else if (maxCount * maxFreq == i + 2 && count[maxFreq] == 1) {
                res = i + 1;
            }
        }
        return res;
