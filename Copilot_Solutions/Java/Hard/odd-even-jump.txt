Synthesizing 10/10 solutions

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int ans = 1;
        for (int i = n - 2; i >= 0; i--) {
            int v = arr[i];
            if (map.containsKey(v)) {
                odd[i] = even[map.get(v)];
                even[i] = odd[map.get(v)];
            } else {
                Integer hi = map.ceilingKey(v);
                Integer lo = map.floorKey(v);
                if (hi != null) {
                    even[i] = odd[map.get(hi)];
                }
                if (lo != null) {
                    odd[i] = even[map.get(lo)];
                }
            }
            if (odd[i]) {
                ans++;
            }
            map.put(v, i);
        }
        return ans;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int ans = 1;
        for (int i = n - 2; i >= 0; i--) {
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if (hi != null) {
                odd[i] = even[hi.getValue()];
            }
            if (lo != null) {
                even[i] = odd[lo.getValue()];
            }
            if (odd[i]) {
                ans++;
            }
            map.put(arr[i], i);
        }
        return ans;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int res = 1;
        for (int i = n - 2; i >= 0; i--) {
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if (hi != null) {
                odd[i] = even[hi.getValue()];
            }
            if (lo != null) {
                even[i] = odd[lo.getValue()];
            }
            if (odd[i]) {
                res++;
            }
            map.put(arr[i], i);
        }
        return res;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        for (int i = n - 2; i >= 0; i--) {
            Map.Entry<Integer, Integer> low = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> high = map.floorEntry(arr[i]);
            if (low != null) {
                odd[i] = even[low.getValue()];
            }
            if (high != null) {
                even[i] = odd[high.getValue()];
            }
            map.put(arr[i], i);
        }
        int res = 0;
        for (boolean b : odd) {
            if (b) {
                res++;
            }
        }
        return res;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int count = 1;
        for (int i = n - 2; i >= 0; i--) {
            Integer next = map.ceilingKey(arr[i]);
            if (next != null) {
                odd[i] = even[map.get(next)];
            }
            next = map.floorKey(arr[i]);
            if (next != null) {
                even[i] = odd[map.get(next)];
            }
            if (odd[i]) {
                count++;
            }
            map.put(arr[i], i);
        }
        return count;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n-1] = even[n-1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n-1], n-1);
        for(int i = n-2; i >= 0; i--){
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if(hi != null) odd[i] = even[hi.getValue()];
            if(lo != null) even[i] = odd[lo.getValue()];
            map.put(arr[i], i);
        }
        int res = 0;
        for(boolean b : odd) if(b) res++;
        return res;

=======

        int n = arr.length;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n-1] = even[n-1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n-1], n-1);
        for (int i = n-2; i >= 0; --i) {
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if (hi != null) odd[i] = even[hi.getValue()];
            if (lo != null) even[i] = odd[lo.getValue()];
            map.put(arr[i], i);
        }
        int ans = 0;
        for (boolean b: odd) if (b) ans++;
        return ans;

=======

        int n = arr.length;
        if (n <= 1) {
            return n;
        }
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int res = 1;
        for (int i = n - 2; i >= 0; i--) {
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if (hi != null) {
                odd[i] = even[hi.getValue()];
            }
            if (lo != null) {
                even[i] = odd[lo.getValue()];
            }
            if (odd[i]) {
                res++;
            }
            map.put(arr[i], i);
        }
        return res;

=======

        int n = arr.length;
        if (n <= 1) return n;
        boolean[] higher = new boolean[n];
        boolean[] lower = new boolean[n];
        higher[n - 1] = true;
        lower[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int ans = 1;
        for (int i = n - 2; i >= 0; --i) {
            Map.Entry<Integer, Integer> hi = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lo = map.floorEntry(arr[i]);
            if (hi != null) higher[i] = lower[hi.getValue()];
            if (lo != null) lower[i] = higher[lo.getValue()];
            if (higher[i]) ans++;
            map.put(arr[i], i);
        }
        return ans;

=======

        int n = arr.length;
        if (n == 1) return 1;
        boolean[] odd = new boolean[n];
        boolean[] even = new boolean[n];
        odd[n - 1] = true;
        even[n - 1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(arr[n - 1], n - 1);
        int res = 1;
        for (int i = n - 2; i >= 0; i--) {
            Map.Entry<Integer, Integer> higher = map.ceilingEntry(arr[i]);
            Map.Entry<Integer, Integer> lower = map.floorEntry(arr[i]);
            if (higher != null) {
                odd[i] = even[higher.getValue()];
            }
            if (lower != null) {
                even[i] = odd[lower.getValue()];
            }
            if (odd[i]) res++;
            map.put(arr[i], i);
        }
        return res;
