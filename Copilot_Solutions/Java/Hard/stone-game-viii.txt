Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = stones.length;
        int[] sum = new int[n];
        sum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + stones[i];
        }
        int[] dp = new int[n];
        dp[n - 1] = sum[n - 1];
        for (int i = n - 2; i >= 1; i--) {
            dp[i] = Math.max(dp[i + 1], sum[i] - dp[i + 1]);
        }
        return dp[1];

=======

        int n = stones.length;
        int[] preSum = new int[n];
        preSum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + stones[i];
        }
        int[] dp = new int[n];
        dp[n - 1] = preSum[n - 1];
        for (int i = n - 2; i > 0; i--) {
            dp[i] = Math.max(dp[i + 1], preSum[i] - dp[i + 1]);
        }
        return dp[1];

=======

        int n = stones.length;
        int[] prefix = new int[n];
        prefix[0] = stones[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + stones[i];
        }
        int[] dp = new int[n];
        dp[n - 1] = prefix[n - 1];
        for (int i = n - 2; i >= 1; i--) {
            dp[i] = Math.max(dp[i + 1], prefix[i] - dp[i + 1]);
        }
        return dp[1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        dp[n - 1] = stones[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + stones[i];
        }
        int[] dp2 = new int[n];
        dp2[0] = dp[0];
        for (int i = 1; i < n; i++) {
            dp2[i] = Math.max(dp2[i - 1], dp[i]);
        }
        int res = dp2[0];
        for (int i = 1; i < n - 1; i++) {
            res = Math.max(res, dp2[i] - dp2[i - 1]);
        }
        return res;

=======

        int n = stones.length;
        int[] dp = new int[n];
        dp[n - 1] = stones[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + stones[i];
        }
        int res = dp[0];
        for (int i = 1; i < n - 1; i++) {
            res = Math.max(res, dp[i] - res);
        }
        return res;

=======

        int n = stones.length;
        int[] sums = new int[n];
        sums[0] = stones[0];
        for (int i = 1; i < n; i++) {
            sums[i] = sums[i-1] + stones[i];
        }
        int[] dp = new int[n];
        dp[n-1] = sums[n-1];
        for (int i = n-2; i > 0; i--) {
            dp[i] = Math.max(dp[i+1], sums[i]-dp[i+1]);
        }
        return dp[1];

=======

        int n = stones.length;
        int[] presum = new int[n];
        presum[0] = stones[0];
        for (int i = 1; i < n; i++) {
            presum[i] = presum[i - 1] + stones[i];
        }
        int[] dp = new int[n];
        dp[n - 1] = presum[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp[i] = Math.max(dp[i + 1], presum[i] - dp[i + 1]);
        }
        return dp[1];

=======

        int n = stones.length;
        int[] dp = new int[n];
        dp[n-1] = stones[n-1];
        for (int i = n-2; i >= 0; i--) {
            dp[i] = dp[i+1] + stones[i];
        }
        int max = dp[0];
        for (int i = 1; i < n-1; i++) {
            max = Math.max(max, dp[i] - max);
        }
        return max;

=======

        int n = stones.length;
        int[] pre = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            pre[i] = pre[i - 1] + stones[i - 1];
        }
        int[] dp = new int[n];
        dp[n - 1] = pre[n];
        for (int i = n - 2; i >= 1; i--) {
            dp[i] = Math.max(dp[i + 1], pre[i + 1] - dp[i + 1]);
        }
        return dp[1];
