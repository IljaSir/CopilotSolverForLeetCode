Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = profits.length;
        int[][] projects = new int[n][2];
        for (int i = 0; i < n; i++) {
            projects[i][0] = capital[i];
            projects[i][1] = profits[i];
        }
        Arrays.sort(projects, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        while (k-- > 0) {
            while (i < n && projects[i][0] <= w) {
                pq.offer(projects[i++][1]);
            }
            if (!pq.isEmpty()) {
                w += pq.poll();
            } else {
                break;
            }
        }
        return w;

=======

        int n = profits.length;
        int[][] projects = new int[n][2];
        for (int i = 0; i < n; i++) {
            projects[i][0] = capital[i];
            projects[i][1] = profits[i];
        }
        Arrays.sort(projects, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        while (k > 0) {
            while (i < n && projects[i][0] <= w) {
                pq.add(projects[i][1]);
                i++;
            }
            if (!pq.isEmpty()) {
                w += pq.poll();
            }
            k--;
        }
        return w;

=======

        int n = profits.length;
        int[][] projects = new int[n][2];
        for (int i = 0; i < n; i++) {
            projects[i][0] = capital[i];
            projects[i][1] = profits[i];
        }
        
        Arrays.sort(projects, (a, b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        while (k > 0) {
            while (i < n && projects[i][0] <= w) {
                pq.offer(projects[i][1]);
                i++;
            }
            if (pq.isEmpty()) {
                break;
            }
            w += pq.poll();
            k--;
        }
        return w;

=======

        int n = profits.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = capital[i];
            arr[i][1] = profits[i];
        }
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        while (k > 0) {
            while (i < n && arr[i][0] <= w) {
                pq.add(arr[i][1]);
                i++;
            }
            if (!pq.isEmpty()) {
                w += pq.poll();
            }
            k--;
        }
        return w;

=======

        int n = profits.length;
        int[][] projects = new int[n][2];
        for (int i = 0; i < n; i++) {
            projects[i] = new int[] {capital[i], profits[i]};
        }
        Arrays.sort(projects, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        while (k > 0) {
            while (i < n && projects[i][0] <= w) {
                pq.offer(projects[i][1]);
                i++;
            }
            if (!pq.isEmpty()) {
                w += pq.poll();
            }
            k--;
        }
        return w;

=======

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < profits.length; i++) {
            pq.add(new int[]{capital[i], profits[i]});
        }
        PriorityQueue<Integer> pq2 = new PriorityQueue<>((a, b) -> b - a);
        for (int i = 0; i < k; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= w) {
                pq2.add(pq.poll()[1]);
            }
            if (pq2.isEmpty()) {
                break;
            }
            w += pq2.poll();
        }
        return w;

=======

        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Comparator.reverseOrder());
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int i = 0; i < profits.length; i++) {
            minHeap.add(i);
        }
        while (k > 0) {
            while (!minHeap.isEmpty() && capital[minHeap.peek()] <= w) {
                maxHeap.add(profits[minHeap.poll()]);
            }
            if (!maxHeap.isEmpty()) {
                w += maxHeap.poll();
            }
            k--;
        }
        return w;

=======

        // use a priority queue to store the available profits
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        // use a priority queue to store the capital
        PriorityQueue<int[]> cpq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < profits.length; i++) {
            cpq.add(new int[]{capital[i], profits[i]});
        }
        for (int i = 0; i < k; i++) {
            while (!cpq.isEmpty() && cpq.peek()[0] <= w) {
                pq.add(cpq.poll());
            }
            if (pq.isEmpty()) break;
            w += pq.poll()[1];
        }
        return w;
