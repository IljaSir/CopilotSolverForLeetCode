Synthesizing 10/10 solutions

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 1 << n; j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(seats, 0, 0, dp);
    }
    
    private int dfs(char[][] seats, int i, int j, int[][] dp) {
        if (i == seats.length) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        int max = 0;
        int m = seats.length;
        int n = seats[0].length;
        for (int k = 0; k < 1 << n; k++) {
            boolean valid = true;
            for (int l = 0; l < n; l++) {
                if (((j >> l) & 1) == 1 && ((k >> l) & 1) == 1) {
                    valid = false;
                    break;
                }
                if (l > 0 && ((j >> (l - 1)) & 1) == 1 && ((k >> l) & 1) == 1) {
                    valid = false;
                    break;
                }
                if (l < n - 1 && ((j >> (l + 1)) & 1) == 1 && ((k >> l) & 1) == 1) {
                    valid = false;
                    break;
                }
                if (seats[i][l] == '#' && ((k >> l) & 1) == 1) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                max = Math.max(max, Integer.bitCount(k) + dfs(seats, i + 1, k, dp));
            }
        }
        dp[i][j] = max;
        return max;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 1 << n; j++) {
                if (check(i, j, seats)) {
                    dp[i][j] = count(j);
                    if (i > 0) {
                        for (int k = 0; k < 1 << n; k++) {
                            if (check(i - 1, k, seats) && (k & j) == 0) {
                                dp[i][j] = Math.max(dp[i][j], dp[i - 1][k] + count(j));
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 1 << n; i++) {
            ans = Math.max(ans, dp[m - 1][i]);
        }
        return ans;
    }
    
    private boolean check(int i, int j, char[][] seats) {
        for (int k = 0; k < seats[0].length; k++) {
            if ((j & 1) == 1 && seats[i][k] == '#') {
                return false;
            }
            j >>= 1;
        }
        return true;
    }
    
    private int count(int j) {
        int ans = 0;
        while (j > 0) {
            ans += j & 1;
            j >>= 1;
        }
        return ans;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(seats, 0, 0, dp);
    }
    
    private int dfs(char[][] seats, int row, int prev, int[][] dp) {
        if (row == seats.length) {
            return 0;
        }
        if (dp[row][prev] != -1) {
            return dp[row][prev];
        }
        int max = 0;
        for (int mask = 0; mask < (1 << seats[0].length); mask++) {
            if (isValid(mask, prev, seats[row])) {
                max = Math.max(max, Integer.bitCount(mask) + dfs(seats, row + 1, mask, dp));
            }
        }
        dp[row][prev] = max;
        return max;
    }
    
    private boolean isValid(int mask, int prev, char[] row) {
        for (int i = 0; i < row.length; i++) {
            if (row[i] == '#') {
                if (((mask >> i) & 1) == 1) {
                    return false;
                }
            } else {
                if (i > 0) {
                    if (((mask >> (i - 1)) & 1) == 1 && ((prev >> (i - 1)) & 1) == 1) {
                        return false;
                    }
                }
                if (((mask >> i) & 1) == 1 && ((prev >> i) & 1) == 1) {
                    return false;
                }
                if (i < row.length - 1) {
                    if (((mask >> (i + 1)) & 1) == 1 && ((prev >> (i + 1)) & 1) == 1) {
                        return false;
                    }
                }
            }
        }
        return true;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(seats, 0, 0, dp);
    }
    private int dfs(char[][] seats, int i, int state, int[][] dp) {
        int m = seats.length;
        int n = seats[0].length;
        if (i == m) {
            return 0;
        }
        if (dp[i][state] != -1) {
            return dp[i][state];
        }
        int res = 0;
        for (int j = 0; j < (1 << n); j++) {
            if (isValid(seats, i, j)) {
                res = Math.max(res, Integer.bitCount(j) + dfs(seats, i + 1, j, dp));
            }
        }
        dp[i][state] = res;
        return res;
    }
    private boolean isValid(char[][] seats, int i, int state) {
        int n = seats[0].length;
        for (int j = 0; j < n; j++) {
            if (seats[i][j] == '#' && ((state >> j) & 1) == 1) {
                return false;
            }
            if (j > 0 && ((state >> j) & 1) == 1 && ((state >> (j - 1)) & 1) == 1) {
                return false;
            }
            if (j < n - 1 && ((state >> j) & 1) == 1 && ((state >> (j + 1)) & 1) == 1) {
                return false;
            }
        }
        return true;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m+1][1 << n];
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                if (valid(seats, i-1, j)) {
                    for (int k = 0; k < (1 << n); k++) {
                        if (valid(seats, i-2, k)) {
                            dp[i][j] = Math.max(dp[i][j], dp[i-1][k] + count(j));
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            res = Math.max(res, dp[m][i]);
        }
        return res;
    }
    public boolean valid(char[][] seats, int i, int j) {
        int n = seats[0].length;
        for (int k = 0; k < n; k++) {
            if ((j & (1 << k)) != 0) {
                if (i >= 0 && seats[i][k] == '#') {
                    return false;
                }
                if (k > 0 && (j & (1 << (k-1))) != 0) {
                    return false;
                }
                if (k < n-1 && (j & (1 << (k+1))) != 0) {
                    return false;
                }
            }
        }
        return true;
    }
    public int count(int j) {
        int res = 0;
        while (j > 0) {
            res += j & 1;
            j >>= 1;
        }
        return res;

=======

        int m = seats.length, n = seats[0].length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < m; i++) {
            int[] ndp = new int[1 << n];
            for (int j = 0; j < (1 << n); j++) {
                if (isValid(seats, i, j, n)) {
                    for (int k = 0; k < (1 << n); k++) {
                        if ((k & j) == 0) {
                            ndp[j] = Math.max(ndp[j], dp[k] + Integer.bitCount(j));
                        }
                    }
                }
            }
            dp = ndp;
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            res = Math.max(res, dp[i]);
        }
        return res;
    }
    private boolean isValid(char[][] seats, int i, int j, int n) {
        for (int k = 0; k < n; k++) {
            if ((j & (1 << k)) > 0) {
                if (seats[i][k] == '#') {
                    return false;
                }
                if (k > 0 && (j & (1 << (k - 1))) > 0) {
                    return false;
                }
                if (k < n - 1 && (j & (1 << (k + 1))) > 0) {
                    return false;
                }
            }
        }
        return true;

=======

        int m = seats.length, n = seats[0].length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < m; i++) {
            int[] ndp = new int[1 << n];
            for (int j = 0; j < (1 << n); j++) {
                if (check(j, seats[i])) {
                    for (int k = 0; k < (1 << n); k++) {
                        if ((j & k) == 0) {
                            ndp[j] = Math.max(ndp[j], dp[k] + Integer.bitCount(j));
                        }
                    }
                }
            }
            dp = ndp;
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            res = Math.max(res, dp[i]);
        }
        return res;
    }
    private boolean check(int state, char[] row) {
        for (int i = 0; i < row.length; i++) {
            if (row[i] == '#' && ((state >> i) & 1) == 1) {
                return false;
            }
        }
        return true;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < m; i++) {
            int[] next = new int[1 << n];
            for (int j = 0; j < (1 << n); j++) {
                if (valid(j, seats, i, n)) {
                    for (int k = 0; k < (1 << n); k++) {
                        if ((j & k) == 0) {
                            next[j] = Math.max(next[j], dp[k] + Integer.bitCount(j));
                        }
                    }
                }
            }
            dp = next;
        }
        return dp[0];
    }
    
    private boolean valid(int state, char[][] seats, int row, int n) {
        for (int i = 0; i < n; i++) {
            if (seats[row][i] == '#' && ((state >> i) & 1) == 1) {
                return false;
            }
            if (i > 0 && seats[row][i - 1] == '.' && seats[row][i] == '.' && ((state >> i) & 1) == 1 && ((state >> (i - 1)) & 1) == 1) {
                return false;
            }
        }
        return true;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[2][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < (1 << n); k++) {
                    if (((k >> j) & 1) == 1) {
                        if (seats[i][j] == '#' || (j > 0 && ((k >> (j - 1)) & 1) == 1) || (j < n - 1 && ((k >> (j + 1)) & 1) == 1)) {
                            dp[i % 2][k] = 0;
                        } else {
                            dp[i % 2][k] = Integer.bitCount(k);
                            if (i > 0) {
                                dp[i % 2][k] += Math.max(dp[(i - 1) % 2][k], Math.max(dp[(i - 1) % 2][k & ~(1 << j)], j > 0 ? dp[(i - 1) % 2][k & ~(1 << (j - 1))] : 0));
                            }
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < (1 << n); i++) {
            res = Math.max(res, dp[(m - 1) % 2][i]);
        }
        return res;

=======

        int m = seats.length;
        int n = seats[0].length;
        int[][] dp = new int[m+1][1<<n];
        int[] valid = new int[1<<n];
        for (int i = 0; i < (1<<n); i++) {
            if ((i & (i << 1)) == 0) {
                valid[i] = 1;
                for (int j = 0; j < n; j++) {
                    if ((i & (1 << j)) != 0 && seats[0][j] == '#') {
                        valid[i] = 0;
                        break;
                    }
                }
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < (1<<n); j++) {
                if ((j & (j << 1)) == 0) {
                    valid[j] = 1;
                    for (int k = 0; k < n; k++) {
                        if ((j & (1 << k)) != 0 && seats[i-1][k] == '#') {
                            valid[j] = 0;
                            break;
                        }
                    }
                }
                if (valid[j] == 1) {
                    for (int k = 0; k < (1<<n); k++) {
                        if ((k & j) == 0) {
                            dp[i][j] = Math.max(dp[i][j], dp[i-1][k] + Integer.bitCount(j));
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < (1<<n); i++) {
            res = Math.max(res, dp[m][i]);
        }
        return res;
