Synthesizing 10/10 solutions

=======

        int n = edges.length;
        int[] parent = new int[n + 1];
        int[] candA = null, candB = null;
        for (int[] edge : edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = new int[] { parent[edge[1]], edge[1] };
                candB = new int[] { edge[0], edge[1] };
                edge[1] = 0;
            }
        }
        for (int i = 0; i <= n; ++i) parent[i] = i;
        for (int[] edge : edges) {
            if (edge[1] == 0) continue;
            int u = edge[0], v = edge[1], pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA == null) return edge;
                return candA;
            }
            parent[pv] = pu;
        }
        return candB;

=======

        int n = edges.length;
        int[] parent = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        int[] conflict = new int[]{-1, -1};
        int[] cycle = new int[]{-1, -1};
        for (int i = 0; i < n; i++) {
            int[] edge = edges[i];
            int node1 = edge[0], node2 = edge[1];
            if (parent[node2] != node2) {
                conflict = new int[]{node1, node2};
            } else {
                parent[node2] = node1;
                if (find(parent, node1) == node2) {
                    cycle = new int[]{node1, node2};
                }
            }
        }
        if (conflict[0] == -1) {
            return cycle;
        } else {
            if (cycle[0] == -1) {
                return conflict;
            } else {
                for (int i = n - 1; i >= 0; i--) {
                    if (edges[i][1] == conflict[1]) {
                        return edges[i];
                    }
                }
            }
        }
        return new int[0];
    }

    public int find(int[] parent, int index) {
        if (parent[index] != index) {
            parent[index] = find(parent, parent[index]);
        }
        return parent[index];

=======

        int[] parent = new int[edges.length + 1];
        int[] candA = null, candB = null;
        for (int[] edge : edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = new int[] {parent[edge[1]], edge[1]};
                candB = new int[] {edge[0], edge[1]};
                edge[1] = 0;
            }
        }
        for (int i = 1; i <= edges.length; i++) {
            parent[i] = i;
        }
        for (int[] edge : edges) {
            if (edge[1] == 0) continue;
            int rootx = find(parent, edge[0]);
            int rooty = find(parent, edge[1]);
            if (rootx == rooty) {
                if (candA == null) return edge;
                return candA;
            }
            parent[rooty] = rootx;
        }
        return candB;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int[] parent = new int[edges.length + 1];
        int[] candA = null, candB = null;
        for (int[] edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = new int[] {parent[edge[1]], edge[1]};
                candB = new int[] {edge[0], edge[1]};
                edge[1] = 0;
            }
        }
        
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        
        for (int[] edge: edges) {
            if (edge[1] == 0) continue;
            int u = edge[0], v = edge[1], pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA == null) return edge;
                return candA;
            }
            parent[pv] = pu;
        }
        
        return candB;

=======

        int[] parent = new int[edges.length+1];
        int[] candA = null, candB = null;
        for (int[] edge: edges) {
            if (parent[edge[1]] == 0) {
                parent[edge[1]] = edge[0];
            } else {
                candA = new int[]{parent[edge[1]], edge[1]};
                candB = new int[]{edge[0], edge[1]};
                edge[1] = 0;
            }
        }
        for (int i = 1; i <= edges.length; i++) {
            parent[i] = i;
        }
        for (int[] edge: edges) {
            if (edge[1] == 0) {
                continue;
            }
            int u = edge[0], v = edge[1], pu = find(parent, u), pv = find(parent, v);
            if (pu == pv) {
                if (candA == null) {
                    return edge;
                }
                return candA;
            }
            parent[pv] = pu;
        }
        return candB;
    }
    public int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int[] parents = new int[edges.length + 1];
        int[] cand1 = null;
        int[] cand2 = null;
        for (int[] edge : edges) {
            if (parents[edge[1]] == 0) {
                parents[edge[1]] = edge[0];
            } else {
                cand1 = new int[] {parents[edge[1]], edge[1]};
                cand2 = new int[] {edge[0], edge[1]};
                edge[1] = 0;
            }
        }
        for (int i = 0; i < parents.length; i++) {
            parents[i] = i;
        }
        for (int[] edge : edges) {
            if (edge[1] == 0) {
                continue;
            }
            int root1 = find(edge[0], parents);
            int root2 = find(edge[1], parents);
            if (root1 == root2) {
                if (cand1 == null) {
                    return edge;
                }
                return cand1;
            }
            parents[root2] = root1;
        }
        return cand2;
    }
    private int find(int x, int[] parents) {
        if (x != parents[x]) {
            parents[x] = find(parents[x], parents);
        }
        return parents[x];

=======

        int n = edges.length;
        int[] parent = new int[n+1];
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
        int[] conflict = null;
        int[] cycle = null;
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            if (parent[v] != v) {
                conflict = edge;
            } else {
                parent[v] = u;
                if (find(parent, u) == v) {
                    cycle = edge;
                }
            }
        }
        if (conflict == null) {
            return cycle;
        } else if (cycle == null) {
            return conflict;
        } else {
            return new int[]{parent[conflict[1]], conflict[1]};
        }
    }
    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int[] parent = new int[edges.length + 1];
        for (int i = 0; i < parent.length; i++)
            parent[i] = i;
        int[] conflict = new int[]{-1, -1};
        int[] cycle = new int[]{-1, -1};
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            if (parent[v] != v) {
                conflict = new int[]{u, v};
            } else {
                parent[v] = u;
                int pu = find(parent, u);
                if (pu == v)
                    cycle = new int[]{u, v};
            }
        }
        if (conflict[0] == -1)
            return cycle;
        else {
            if (cycle[0] == -1)
                return conflict;
            else {
                for (int[] edge : edges) {
                    if (edge[1] == conflict[1])
                        return edge;
                }
                return new int[]{};
            }
        }

=======

        int[] p = new int[edges.length + 1];
        int[] cand1 = null, cand2 = null;
        for (int[] e : edges) {
            if (p[e[1]] == 0) {
                p[e[1]] = e[0];
            } else {
                cand1 = new int[]{p[e[1]], e[1]};
                cand2 = new int[]{e[0], e[1]};
                e[1] = 0;
            }
        }
        for (int i = 0; i < p.length; i++) p[i] = i;
        for (int[] e : edges) {
            if (e[1] == 0) continue;
            int root1 = find(p, e[0]);
            int root2 = find(p, e[1]);
            if (root1 == root2) {
                if (cand1 == null) {
                    return e;
                } else {
                    return cand1;
                }
            }
            p[root2] = root1;
        }
        return cand2;

=======

        int n = edges.length;
        int[] ans = new int[2];
        int[] parent = new int[n+1];
        int[] size = new int[n+1];
        for (int i = 1; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        for (int[] edge: edges) {
            int u = edge[0];
            int v = edge[1];
            if (parent[v] != v) {
                ans[0] = u;
                ans[1] = v;
            } else {
                parent[v] = u;
            }
        }
        for (int[] edge: edges) {
            int u = edge[0];
            int v = edge[1];
            if (u == ans[0] && v == ans[1]) {
                continue;
            }
            if (!union(u, v, parent, size)) {
                return edge;
            }
        }
        return ans;
    }
    
    private boolean union(int u, int v, int[] parent, int[] size) {
        int pu = find(u, parent);
        int pv = find(v, parent);
        if (pu == pv) {
            return false;
        }
        if (size[pu] < size[pv]) {
            parent[pu] = pv;
            size[pv] += size[pu];
        } else {
            parent[pv] = pu;
            size[pu] += size[pv];
        }
        return true;
    }
    
    private int find(int u, int[] parent) {
        while (u != parent[u]) {
            u = parent[u];
        }
        return u;
