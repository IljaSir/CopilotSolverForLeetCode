Synthesizing 10/10 solutions

=======

        long miss = 1;
        int added = 0, i = 0;
        while (miss <= n) {
            if (i < nums.length && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                added++;
            }
        }
        return added;

=======

        int count = 0;
        long miss = 1;
        int i = 0;
        while (miss <= n) {
            if (i < nums.length && nums[i] <= miss) {
                miss += nums[i];
                i++;
            } else {
                miss += miss;
                count++;
            }
        }
        return count;

=======

        int patches = 0;
        long max = 0;
        int i = 0;
        while (max < n) {
            if (i < nums.length && nums[i] <= max + 1) {
                max += nums[i];
                i++;
            } else {
                patches++;
                max += max + 1;
            }
        }
        return patches;

=======

        int patch = 0, i = 0;
        long miss = 1;
        while (miss <= n) {
            if (i < nums.length && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                patch++;
            }
        }
        return patch;

=======

        int patch = 0;
        long max = 0;
        int i = 0;
        while (max < n) {
            if (i < nums.length && nums[i] <= max + 1) {
                max += nums[i++];
            } else {
                max += max + 1;
                patch++;
            }
        }
        return patch;

=======

        int i = 0;
        int patch = 0;
        long miss = 1;
        while (miss <= n) {
            if (i < nums.length && nums[i] <= miss) {
                miss += nums[i++];
            } else {
                miss += miss;
                patch++;
            }
        }
        return patch;

=======

        int count = 0;
        int i = 0;
        long max = 0;
        while (max < n) {
            if (i < nums.length && nums[i] <= max + 1) {
                max += nums[i];
                i++;
            } else {
                max += max + 1;
                count++;
            }
        }
        return count;

=======

        int patches = 0;
        long maxReachable = 0;
        int i = 0;
        while (maxReachable < n) {
            if (i < nums.length && nums[i] <= maxReachable + 1) {
                maxReachable += nums[i];
                i++;
            } else {
                maxReachable += maxReachable + 1;
                patches++;
            }
        }
        return patches;

=======

        int i = 0;
        int patches = 0;
        long max = 0;
        while (max < n) {
            if (i < nums.length && nums[i] <= max + 1) {
                max += nums[i];
                i++;
            } else {
                max += max + 1;
                patches++;
            }
        }
        return patches;

=======

        int patches = 0;
        long max = 0;
        for (int i = 0; max < n; i++) {
            if (i < nums.length && nums[i] <= max + 1) {
                max += nums[i];
            } else {
                max += max + 1;
                patches++;
            }
        }
        return patches;
