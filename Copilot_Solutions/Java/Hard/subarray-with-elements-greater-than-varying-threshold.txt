Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] sum = new int[n];
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int l = 1, r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (check(m, sum, threshold)) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return check(l, sum, threshold) ? l : -1;
    }
    
    private boolean check(int m, int[] sum, int threshold) {
        for (int i = 0; i + m <= sum.length; i++) {
            int s = sum[i + m - 1] - (i == 0 ? 0 : sum[i - 1]);
            if (s >= threshold) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        int l = 0, r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (canFind(prefix, threshold, m)) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l == n + 1 ? -1 : l;
    }
    private boolean canFind(int[] prefix, int threshold, int k) {
        for (int i = k; i < prefix.length; i++) {
            if (prefix[i] - prefix[i - k] > threshold) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        int left = 1;
        int right = n;
        int res = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (check(prefix, mid, threshold)) {
                res = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return res;
    }
    
    private boolean check(int[] prefix, int k, int threshold) {
        for (int i = k; i < prefix.length; i++) {
            if (prefix[i] - prefix[i - k] >= threshold) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int left = 1;
        int right = n;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isValid(nums, threshold, mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }
    
    private boolean isValid(int[] nums, int threshold, int size) {
        long sum = 0;
        for (int i = 0; i < size; i++) {
            sum += nums[i];
        }
        if (sum > threshold * size) {
            return true;
        }
        for (int i = size; i < nums.length; i++) {
            sum = sum - nums[i - size] + nums[i];
            if (sum > threshold * size) {
                return true;
            }
        }
        return false;

=======

        int left = 1, right = nums.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (check(nums, mid, threshold)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return check(nums, left, threshold) ? left : -1;
    }
    public boolean check(int[] nums, int k, int threshold) {
        double sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > threshold * k) {
            return true;
        }
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            if (sum > threshold * k) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int[] sum = new int[n+1];
        for(int i = 1; i <= n; i++){
            sum[i] = sum[i-1] + nums[i-1];
        }
        int l = 1, r = n;
        while(l <= r){
            int m = l + (r-l)/2;
            if(check(m, sum, threshold)){
                l = m+1;
            }else{
                r = m-1;
            }
        }
        return r;
    }
    private boolean check(int m, int[] sum, int threshold){
        for(int i = m; i < sum.length; i++){
            if(sum[i] - sum[i-m] > threshold){
                return true;
            }
        }
        return false;

=======

        int l = 1;
        int r = nums.length;
        int res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (isValid(nums, threshold, mid)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
    
    private boolean isValid(int[] nums, int threshold, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > threshold * k) {
            return true;
        }
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            if (sum > threshold * k) {
                return true;
            }
        }
        return false;

=======

        int left = 1;
        int right = nums.length;
        int result = -1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (validSubarraySize(nums, threshold, mid)) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return result;
    }
    
    private boolean validSubarraySize(int[] nums, int threshold, int size) {
        long sum = 0;
        for (int i = 0; i < size; i++) {
            sum += nums[i];
        }
        if (sum > threshold * size) {
            return true;
        }
        for (int i = size; i < nums.length; i++) {
            sum += nums[i] - nums[i - size];
            if (sum > threshold * size) {
                return true;
            }
        }
        return false;

=======

        int l = 1, r = nums.length;
        while (l <= r) {
            int m = (l + r) / 2;
            if (valid(nums, m, threshold)) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return r;
    }
    
    private boolean valid(int[] nums, int k, int threshold) {
        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > (long) threshold * k) {
            return true;
        }
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            if (sum > (long) threshold * k) {
                return true;
            }
        }
        return false;

=======

        int n = nums.length;
        int l = 1, r = n;
        while (l < r) {
            int m = l + (r - l) / 2;
            if (check(nums, threshold, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return check(nums, threshold, l) ? l : -1;
    }
    private boolean check(int[] nums, int threshold, int k) {
        long sum = 0;
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        if (sum > threshold * k) {
            return true;
        }
        for (int i = k; i < nums.length; i++) {
            sum += nums[i] - nums[i - k];
            if (sum > threshold * k) {
                return true;
            }
        }
        return false;
