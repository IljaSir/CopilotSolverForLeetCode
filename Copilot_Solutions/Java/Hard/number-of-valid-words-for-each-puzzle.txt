Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> freq = new HashMap<>();
        for (String word: words) {
            int mask = 0;
            for (char ch: word.toCharArray()) {
                mask |= (1 << (ch - 'a'));
            }
            if (Integer.bitCount(mask) <= 7) {
                freq.put(mask, freq.getOrDefault(mask, 0) + 1);
            }
        }

        List<Integer> ans = new ArrayList<>();
        for (String puzzle: puzzles) {
            int total = 0;

            // 枚举子集方法一
            for (int choose = 0; choose < 1 << 6; choose++) {
                int mask = 0;
                for (int i = 0; i < 6; ++i) {
                    if ((choose & (1 << i)) != 0) {
                        mask |= (1 << (puzzle.charAt(i + 1) - 'a'));
                    }
                }
                mask |= (1 << (puzzle.charAt(0) - 'a'));
                if (freq.containsKey(mask)) {
                    total += freq.get(mask);
                }
            }

            // 枚举子集方法二
            // int mask = 0;
            // for (char ch: puzzle.toCharArray()) {
            //     mask |= (1 << (ch - 'a'));
            // }
            // int subset = mask;
            // while (subset != 0) {
            //     subset = (subset - 1) & mask;
            //     int s = subset | (1 << (puzzle.charAt(0) - 'a'));
            //     if (freq.containsKey(s)) {
            //         total += freq.get(s);
            //     }
            // }
            // if (freq.containsKey(1 << (puzzle.charAt(0) - 'a'))) {
            //     total += freq.get(1 << (puzzle.charAt(0) - 'a'));
            // }

            ans.add(total);
        }
        return ans;

=======

        Map<Integer, Integer> freq = new HashMap<>();
        for (String word: words) {
            int mask = 0;
            for (char ch: word.toCharArray())
                mask |= (1 << (ch - 'a'));
            if (Integer.bitCount(mask) <= 7)
                freq.put(mask, freq.getOrDefault(mask, 0) + 1);
        }

        List<Integer> ans = new ArrayList<>();
        for (String puzzle: puzzles) {
            int total = 0;

            // enumerate through all the subsets of the first seven letters
            // of the puzzle
            int mask = 0;
            for (int i = 1; i < 7; ++i)
                mask |= (1 << (puzzle.charAt(i) - 'a'));
            int subset = mask;
            do {
                int s = subset | (1 << (puzzle.charAt(0) - 'a'));
                if (freq.containsKey(s))
                    total += freq.get(s);
                subset = (subset - 1) & mask;
            } while (subset != mask);

            // take the case when none of the first seven letters are in the word
            int s = 1 << (puzzle.charAt(0) - 'a');
            if (freq.containsKey(s))
                total += freq.get(s);

            ans.add(total);
        }

        return ans;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= (1 << (c - 'a'));
            }
            map.put(mask, map.getOrDefault(mask, 0) + 1);
        }
        List<Integer> ans = new ArrayList<>();
        for (String puzzle : puzzles) {
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= (1 << (c - 'a'));
            }
            int count = 0;
            int subMask = mask;
            while (subMask != 0) {
                int first = subMask & (-subMask);
                if ((first & (1 << (puzzle.charAt(0) - 'a'))) != 0) {
                    count += map.getOrDefault(subMask, 0);
                }
                subMask = (subMask - 1) & mask;
            }
            ans.add(count);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        Map<Integer, Integer> frequency = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char ch : word.toCharArray()) {
                mask |= (1 << (ch - 'a'));
            }
            if (Integer.bitCount(mask) <= 7) {
                frequency.put(mask, frequency.getOrDefault(mask, 0) + 1);
            }
        }
        for (String puzzle : puzzles) {
            int total = 0;
            for (int choose = 0; choose < (1 << 6); choose++) {
                int mask = 0;
                for (int i = 0; i < 6; i++) {
                    if ((choose & (1 << i)) != 0) {
                        mask |= (1 << (puzzle.charAt(i + 1) - 'a'));
                    }
                }
                mask |= (1 << (puzzle.charAt(0) - 'a'));
                if (frequency.containsKey(mask)) {
                    total += frequency.get(mask);
                }
            }
            result.add(total);
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        Map<Integer, Integer> freq = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= (1 << (c - 'a'));
            }
            if (Integer.bitCount(mask) <= 7) {
                freq.put(mask, freq.getOrDefault(mask, 0) + 1);
            }
        }
        for (String puzzle : puzzles) {
            int total = 0;
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= (1 << (c - 'a'));
            }
            int subset = mask;
            int first = 1 << (puzzle.charAt(0) - 'a');
            while (subset != 0) {
                if ((subset & first) != 0) {
                    total += freq.getOrDefault(subset, 0);
                }
                subset = (subset - 1) & mask;
            }
            res.add(total);
        }
        return res;
    }
}

=======

        List<Integer> ans = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            map.put(mask, map.getOrDefault(mask, 0) + 1);
        }
        for (String puzzle : puzzles) {
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int sub = mask;
            int count = 0;
            do {
                int s = sub | (1 << (puzzle.charAt(0) - 'a'));
                if (map.containsKey(s)) {
                    count += map.get(s);
                }
                sub = (sub - 1) & mask;
            } while (sub != mask);
            ans.add(count);
        }
        return ans;

=======

        List<Integer> ans = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            map.put(mask, map.getOrDefault(mask, 0) + 1);
        }
        for (String puzzle : puzzles) {
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int sub = mask;
            int count = 0;
            do {
                int s = sub | (1 << (puzzle.charAt(0) - 'a'));
                if (map.containsKey(s)) {
                    count += map.get(s);
                }
                sub = (sub - 1) & mask;
            } while (sub != mask);
            ans.add(count);
        }
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        Map<Integer, Integer> wordMap = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            wordMap.put(mask, wordMap.getOrDefault(mask, 0) + 1);
        }
        for (String puzzle : puzzles) {
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int count = 0;
            int sub = mask;
            do {
                int s = sub | 1 << (puzzle.charAt(0) - 'a');
                if (wordMap.containsKey(s)) {
                    count += wordMap.get(s);
                }
                sub = (sub - 1) & mask;
            } while (sub != mask);
            result.add(count);
        }
        return result;

=======

        int[] count = new int[26];
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            if (Integer.bitCount(mask) <= 7) {
                count[Integer.numberOfTrailingZeros(mask)]++;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (String puzzle : puzzles) {
            int total = 0;
            int mask = 0;
            for (char c : puzzle.substring(1).toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int subset = mask;
            do {
                int s = subset | (1 << (puzzle.charAt(0) - 'a'));
                total += count[Integer.numberOfTrailingZeros(s)];
                subset = (subset - 1) & mask;
            } while (subset != mask);
            res.add(total);
        }
        return res;

=======

        int[] count = new int[26];
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            if (Integer.bitCount(mask) <= 7) {
                count[Integer.numberOfTrailingZeros(mask)]++;
            }
        }
        List<Integer> res = new ArrayList<>();
        for (String puzzle : puzzles) {
            int total = 0;
            int mask = 0;
            for (char c : puzzle.substring(1).toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int subset = mask;
            do {
                int s = subset | (1 << (puzzle.charAt(0) - 'a'));
                total += count[Integer.numberOfTrailingZeros(s)];
                subset = (subset - 1) & mask;
            } while (subset != mask);
            res.add(total);
        }
        return res;
 res;

=======

        List<Integer> result = new ArrayList<>();
       fo (String puzzl : puzzle) {
            int count = 0;
            for (String word : words) {
                if (word.length() <= puzzle.length()) {
                    if (isValidWord(word, puzzle)) {
                        count++;
                    }
                }
            }
            result.add(count);
        }
        return result;
    }
    
    private boolean isValidWord(String word, String puzzle) {
        int i = 0;
        int j = 0;
        while (i < word.length() && j < puzzle.length()) {
            if (word.charAt(i) == puzzle.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i == word.length()
=======

        List<Integer> res = new ArrayList<>();
        if (words.length == 0 || puzzles.length == 0) return res;
        Map<Integer, Integer> map = new HashMap<>();
        for (String word : words) {
            int mask = 0;
            for (char c : word.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            map.put(mask, map.getOrDefault(mask, 0) + 1);
        }
        for (String puzzle : puzzles) {
            int total = 0;
            int mask = 0;
            for (char c : puzzle.toCharArray()) {
                mask |= 1 << (c - 'a');
            }
            int subset = mask;
            int first = 1 << (puzzle.charAt(0) - 'a');
            while (subset != 0) {
                if ((subset & first) != 0) {
                    total += map.getOrDefault(subset, 0);
                }
                subset = (subset - 1) & mask;
            }
            res.add(total);
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        for (String puzzle : puzzles) {
            int count = 0;
            for (String word : words) {
                if (word.length() <= puzzle.length()) {
                    if (isValidWord(word, puzzle)) {
                        count++;
                    }
                }
            }
            result.add(count);
        }
        return result;
    }
    
    private boolean isValidWord(String word, String puzzle) {
        int i = 0;
        int j = 0;
        while (i < word.length() && j < puzzle.length()) {
            if (word.charAt(i) == puzzle.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i == word.length();
