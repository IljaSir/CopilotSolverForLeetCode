Synthesizing 7/10 solutions

=======

        int[][] dirs = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        String target = "123450";
        StringBuilder sb = new StringBuilder();
        for (int[] row : board) {
            for (int v : row) {
                sb.append(v);
            }
        }
        String start = sb.toString();
        Queue<String> q = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        q.add(start);
        visited.add(start);
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                String cur = q.poll();
                if (cur.equals(target)) {
                    return step;
                }
                int zero = cur.indexOf('0');
                for (int dir : dirs[zero]) {
                    String next = swap(cur, zero, dir);
                    if (!visited.contains(next)) {
                        q.add(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int[][] dirs = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        String target = "123450";
        String start = "";
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                start += board[i][j];
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        Set<String> visited = new HashSet<>();
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(target)) {
                    return step;
                }
                int zeroIndex = cur.indexOf('0');
                for (int dir : dirs[zeroIndex]) {
                    String next = swap(cur, zeroIndex, dir);
                    if (!visited.contains(next)) {
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int[][] moves = new int[][]{{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        String target = "123450";
        String start = "";
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                start += board[i][j];
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        Set<String> visited = new HashSet<>();
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(target)) {
                    return step;
                }
                int index = cur.indexOf("0");
                for (int move : moves[index]) {
                    String next = swap(cur, index, move);
                    if (!visited.contains(next)) {
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int[][] dirs = new int[][] {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        String target = "123450";
        StringBuilder sb = new StringBuilder();
        for (int[] row : board) {
            for (int num : row) {
                sb.append(num);
            }
        }
        String start = sb.toString();
        if (start.equals(target)) {
            return 0;
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        Set<String> visited = new HashSet<>();
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            step++;
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                int idx = cur.indexOf('0');
                for (int dir : dirs[idx]) {
                    String next = swap(cur, idx, dir);
                    if (visited.contains(next)) {
                        continue;
                    }
                    if (next.equals(target)) {
                        return step;
                    }
                    queue.offer(next);
                    visited.add(next);
                }
            }
        }
        return -1;

=======

        int[][] moves = {{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};
        String target = "123450";
        String start = "";
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                start += board[i][j];
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        Set<String> visited = new HashSet<>();
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(target)) {
                    return step;
                }
                int zeroIndex = cur.indexOf('0');
                for (int move : moves[zeroIndex]) {
                    String next = swap(cur, zeroIndex, move);
                    if (!visited.contains(next)) {
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int[][] moves = new int[][]{{1,3},{0,2,4},{1,5},{0,4},{1,3,5},{2,4}};
        String target = "123450";
        String start = "";
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                start += board[i][j];
            }
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(start);
        Set<String> visited = new HashSet<>();
        visited.add(start);
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String cur = queue.poll();
                if (cur.equals(target)) {
                    return step;
                }
                int idx = cur.indexOf('0');
                for (int move : moves[idx]) {
                    String next = swap(cur, idx, move);
                    if (!visited.contains(next)) {
                        queue.offer(next);
                        visited.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[] start = new int[6];
        int[] end = {1, 2, 3, 4, 5, 0};
        int idx = 0;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                start[idx++] = board[i][j];
            }
        }
        Queue<int[]> q = new LinkedList<int[]>();
        q.offer(start);
        Set<String> visited = new HashSet<String>();
        visited.add(Arrays.toString(start));
        int steps = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int[] cur = q.poll();
                if (Arrays.equals(cur, end)) {
                    return steps;
                }
                int zeroIdx = 0;
                for (int j = 0; j < 6; j++) {
                    if (cur[j] == 0) {
                        zeroIdx = j;
                        break;
                    }
                }
                int row = zeroIdx / 3;
                int col = zeroIdx % 3;
                for (int[] dir : dirs) {
                    int newRow = row + dir[0];
                    int newCol = col + dir[1];
                    if (newRow < 0 || newRow >= 2 || newCol < 0 || newCol >= 3) {
                        continue;
                    }
                    int swapIdx = newRow * 3 + newCol;
                    swap(cur, zeroIdx, swapIdx);
                    if (!visited.contains(Arrays.toString(cur))) {
                        q.offer(Arrays.copyOf(cur, cur.length));
                        visited.add(Arrays.toString(cur));
                    }
                    swap(cur, zeroIdx, swapIdx);
                }
            }
            steps++;
        }
        return -1;
    }
    
    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
