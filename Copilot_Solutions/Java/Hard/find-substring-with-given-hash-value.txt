Synthesizing 9/10 solutions

=======

        int n = s.length();
        int[] pows = new int[n];
        pows[0] = 1;
        for (int i = 1; i < n; i++) {
            pows[i] = (int) ((1L * pows[i - 1] * power) % modulo);
        }
        int[] hash = new int[n];
        hash[0] = s.charAt(0) - 'a' + 1;
        for (int i = 1; i < n; i++) {
            hash[i] = (int) ((1L * hash[i - 1] * power + s.charAt(i) - 'a' + 1) % modulo);
        }
        for (int i = 0; i < n - k + 1; i++) {
            int h = hash[i + k - 1];
            if (i > 0) {
                h = (int) ((1L * h - hash[i - 1] * 1L * pows[k]) % modulo);
                if (h < 0) {
                    h += modulo;
                }
            }
            if (h == hashValue) {
                return s.substring(i, i + k);
            }
        }
        return "";

=======

        int p = 1;
        for (int i = 0; i < k; i++) {
            p = (p * power) % modulo;
        }
        int h = 0;
        for (int i = 0; i < k; i++) {
            h = (h * power + s.charAt(i) - 'a' + 1) % modulo;
        }
        if (h == hashValue) {
            return s.substring(0, k);
        }
        for (int i = k; i < s.length(); i++) {
            h = (h * power + s.charAt(i) - 'a' + 1 - (s.charAt(i - k) - 'a' + 1) * p) % modulo;
            if (h < 0) {
                h += modulo;
            }
            if (h == hashValue) {
                return s.substring(i - k + 1, i + 1);
            }
        }
        return "";

=======

        int n = s.length();
        int[] p = new int[n + 1];
        p[0] = 1;
        for (int i = 1; i <= n; i++) {
            p[i] = p[i - 1] * power % modulo;
        }
        int[] h = new int[n + 1];
        for (int i = 0; i < n; i++) {
            h[i + 1] = (h[i] + (s.charAt(i) - 'a' + 1) * p[i]) % modulo;
        }
        for (int i = 0; i + k <= n; i++) {
            int cur = (h[i + k] - h[i] + modulo) % modulo;
            if (cur == hashValue * p[i] % modulo) {
                return s.substring(i, i + k);
            }
        }
        return "";

=======

        int n = s.length();
        int[] p = new int[n];
        p[0] = 1;
        for (int i = 1; i < n; i++) {
            p[i] = (p[i - 1] * power) % modulo;
        }
        int[] h = new int[n];
        h[0] = s.charAt(0) - 'a' + 1;
        for (int i = 1; i < n; i++) {
            h[i] = (h[i - 1] + (s.charAt(i) - 'a' + 1) * p[i]) % modulo;
        }
        for (int i = 0; i + k <= n; i++) {
            int hash = h[i + k - 1];
            if (i > 0) {
                hash = (hash - h[i - 1] + modulo) % modulo;
            }
            if (hash == (hashValue * p[i]) % modulo) {
                return s.substring(i, i + k);
            }
        }
        return "";

=======

        int powerK = 1;
        for (int i = 0; i < k; i++) {
            powerK = (powerK * power) % modulo;
        }
        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
        }
        if (hash == hashValue) {
            return s.substring(0, k);
        }
        for (int i = k; i < s.length(); i++) {
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
            hash = (hash - (s.charAt(i - k) - 'a' + 1) * powerK) % modulo;
            if (hash < 0) {
                hash += modulo;
            }
            if (hash == hashValue) {
                return s.substring(i - k + 1, i + 1);
            }
        }
        return "";

=======

        int hash = 0;
        for (int i = 0; i < k; i++) {
            hash = (hash + (s.charAt(i) - 'a' + 1) * power(i, power, modulo)) % modulo;
        }
        if (hash == hashValue) {
            return s.substring(0, k);
        }
        for (int i = k; i < s.length(); i++) {
            hash = (hash - (s.charAt(i - k) - 'a' + 1) * power(i - k, power, modulo) + modulo) % modulo;
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
            if (hash == hashValue) {
                return s.substring(i - k + 1, i + 1);
            }
        }
        return "";
    }

    public int power(int exp, int power, int modulo) {
        int res = 1;
        while (exp > 0) {
            if ((exp & 1) == 1) {
                res = (res * power) % modulo;
            }
            exp >>= 1;
            power = (power * power) % modulo;
        }
        return res;

=======

        int p = 1;
        for(int i = 0; i < k; i++){
            p = (p * power) % modulo;
        }
        int hash = 0;
        for(int i = 0; i < k; i++){
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
        }
        if(hash == hashValue){
            return s.substring(0, k);
        }
        for(int i = k; i < s.length(); i++){
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
            hash = (hash + modulo - (s.charAt(i - k) - 'a' + 1) * p % modulo) % modulo;
            if(hash == hashValue){
                return s.substring(i - k + 1, i + 1);
            }
        }
        return "";

=======

        long p = 1;
        for(int i = 0; i < k; i++){
            p = (p * power) % modulo;
        }
        long hash = 0;
        for(int i = 0; i < k; i++){
            hash = (hash * power + s.charAt(i) - 'a' + 1) % modulo;
        }
        if(hash == hashValue){
            return s.substring(0, k);
        }
        for(int i = k; i < s.length(); i++){
            hash = (hash * power + s.charAt(i) - 'a' + 1 - (s.charAt(i - k) - 'a' + 1) * p % modulo) % modulo;
            if(hash < 0){
                hash += modulo;
            }
            if(hash == hashValue){
                return s.substring(i - k + 1, i + 1);
            }
        }
        return "";

=======

        int n = s.length();
        long[] p = new long[n];
        p[0] = 1;
        for(int i = 1; i < n; i++) {
            p[i] = (p[i - 1] * power) % modulo;
        }
        long[] h = new long[n + 1];
        for(int i = 0; i < n; i++) {
            h[i + 1] = (h[i] + (s.charAt(i) - 'a' + 1) * p[i]) % modulo;
        }
        for(int i = 0; i + k <= n; i++) {
            long curHash = (h[i + k] - h[i] + modulo) % modulo;
            if(curHash == hashValue * p[i] % modulo) {
                return s.substring(i, i + k);
            }
        }
        return "";
