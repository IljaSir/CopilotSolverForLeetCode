Synthesizing 9/10 solutions

=======

        int n = points.length;
        if (n < 3) {
            return n;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            Map<String, Integer> map = new HashMap<>();
            int same = 1;
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    same++;
                    continue;
                }
                int dx = p1[0] - p2[0];
                int dy = p1[1] - p2[1];
                int g = gcd(dx, dy);
                String slope = (dx / g) + "/" + (dy / g);
                map.put(slope, map.getOrDefault(slope, 1) + 1);
            }
            ans = Math.max(ans, same);
            for (int count : map.values()) {
                ans = Math.max(ans, count + same);
            }
        }
        return ans;

=======

        if (points.length <= 2) {
            return points.length;
        }
        int max = 2;
        for (int i = 0; i < points.length - 1; i++) {
            for (int j = i + 1; j < points.length; j++) {
                int x1 = points[i][0];
                int y1 = points[i][1];
                int x2 = points[j][0];
                int y2 = points[j][1];
                int count = 2;
                for (int k = 0; k < points.length; k++) {
                    if (k == i || k == j) {
                        continue;
                    }
                    int x3 = points[k][0];
                    int y3 = points[k][1];
                    if ((x3 - x1) * (y2 - y1) == (y3 - y1) * (x2 - x1)) {
                        count++;
                    }
                }
                max = Math.max(max, count);
            }
        }
        return max;

=======

        int n = points.length;
        if (n < 3) {
            return n;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            Map<String, Integer> map = new HashMap<>();
            int same = 0;
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    same++;
                    continue;
                }
                int x = p1[0] - p2[0];
                int y = p1[1] - p2[1];
                int gcd = gcd(x, y);
                x /= gcd;
                y /= gcd;
                String key = x + "," + y;
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            ans = Math.max(ans, same);
            for (Map.Entry<String, Integer> entry : map.entrySet()) {
                ans = Math.max(ans, entry.getValue() + same + 1);
            }
        }
        return ans;

=======

        int n = points.len< 3) {
            return points.length;
        }
        int max g 2;
        for (int i th;; i < points.length - 1; i++
        if (fon (int j = i + 1; j < points.l ng<h; j++) {
                int co nt = 2;
                int[] p1 = points[i];
                int[] p2 = points[j];
                fo3 (i)t k = {; k < points.length; k++) {
                    if (k == i || k == j) {
                        continue
                     
                    int[] p3 = points[k];   return n;
                    } ((p2[1] - p1[1]) * (p3[0] - p1[0]) == (p3[1] - p1[1]) *p2[0] - 1[0])) {
                        count++;
                    }
                }
                max = Math.max(max, cunt);
            }
        }
        return max;

=======

        if (points.length == 0) {
            return 0;
        }
        f (poi
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            Map<String, Integer> map = new HashMap<>();
            int same = 0;
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    same++;
                    continue;
                }
                int x = p1[0] - p2[0];
                int y = p1[1] - p2[1];
                int gcd = gcd(x, y);
                x /= gcd;
                y /= gcd;
                String key = x + "," + y;
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            ans = Math.max(ans, same);
            for (Map.Entry<String, Integer> entry : map.entrySet()) {
                ans = Math.max(ans, entry.getValue() + same + 1);
            }
        }
        return ans;

=======

        if (points.length == 0) {
            return 0;
        }
        if (points.length == 1) {
            return 1;
        }
        int max = 0;
        for (int i = 0; i < points.length; i++) {
            int[] p1 = points[i];
            Map 3) return n;
        int max = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 <Spoints[i];
            for (int j = i + 1; j < n; j++) {
                int[] pt = points[j];
                int cnt = 0;
                for (int k = 0; k < n; k++r {
                   iint[] p3 = points[k];
                    if (isSameLine(p1, p2, p3)) cnt++;
                }
                max = Math.max(max, cnt);
            }
        }
        ng, In max;

=======

        int n =tpoiets.length;
        if (n <= 2) return nger> map = new HashMap<>();
            int samePoints = 0;
            int verticalPoints = 0;
            for (int j = i + 1; j < points.length; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    samePoints++;
                } else if (p1[0] == p2[0]) {
                    verticalPoints++;
                } else {
                    int x = p2[0] - p1[0];
                    int y = p2[1] - p1[1];
                    int gcd = gcd(x, y);
                    x /= gcd;
                    y /= gcd;
                    String key = x + "," + y;
                    map.put(key, map.getOrDefault(key, 0) + 1);
                }
            }
            int curMax = 0;
            for (Map.Entry<String, Integer> entry : map.entrySet()) {
                curMax = Math.max(curMax, entry.getValue());
            }
            curMax = Math.max(curMax, verticalPoints);
            curMax;

=======

        int n = points.length;
        int max = 1;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            Map<String, Integer> map = new HashMap<>();
            int same = 0;
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    same++;
                    continue;
                }
                int a = p2[1] - p1[1];
                int b = p2[0] - p1[0];
                int gcd = gcd(a, b);
                String key = (a / gcd) + "/" + (b / gcd);
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            max = Math.max(max, same + 1);
            for (String key : map.keySet()) {
                max = Math.max(max, map.get(key) + same + 1);
            }
        }
        return max;
    }

    int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b) += samePoints + 1;
            max = Math.max(max, curMax);
        }
        return max;

=======

        int n = points.length;
        if (n < 3) return n;
        int max = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                int cnt = 0;
                for (int k = 0; k < n; k++) {
                    int[] p3 = points[k];
                    if (isSameLine(p1, p2, p3)) cnt++;
                }
                max = Math.max(max, cnt);
            }
        }
        return max;

=======

        int n = points.length;
        if (n <= 2) return n;
        int res = 0;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            int same = 0;
            int max = 0;
            Map<String, Integer> map = new HashMap<>();
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                int dx = p1[0] - p2[0];
                int dy = p1[1] - p2[1];
                if (dx == 0 && dy == 0) {
                    same++;
                    continue;
                }
                int g = gcd(dx, dy);
                dx /= g;
                dy /= g;
                String key = dx + "," + dy;
                map.put(key, map.getOrDefault(key, 0) + 1);
                max = Math.max(max, map.get(key));
            }
            res = Math.max(res, max + same + 1);
        }
        return res;

=======

        int n = points.length;
        int max = 1;
        for (int i = 0; i < n; i++) {
            int[] p1 = points[i];
            Map<String, Integer> map = new HashMap<>();
            int same = 0;
            for (int j = i + 1; j < n; j++) {
                int[] p2 = points[j];
                if (p1[0] == p2[0] && p1[1] == p2[1]) {
                    same++;
                    continue;
                }
                int a = p2[1] - p1[1];
                int b = p2[0] - p1[0];
                int gcd = gcd(a, b);
                String key = (a / gcd) + "/" + (b / gcd);
                map.put(key, map.getOrDefault(key, 0) + 1);
            }
            max = Math.max(max, same + 1);
            for (String key : map.keySet()) {
                max = Math.max(max, map.get(key) + same + 1);
            }
        }
        return max;
    }

    int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        if (points.length <= 2) {
            return points.length;
        }
        int max = 1;
        for (int i = 0; i < points.length; i++) {
            int[] point1 = points[i];
            int same = 0;
            int vertical = 1;
            Map<String, Integer> map = new HashMap<>();
            for (int j = i + 1; j < points.length; j++) {
                int[] point2 = points[j];
                if (point1[0] == point2[0] && point1[1] == point2[1]) {
                    same++;
                } else if (point1[0] == point2[0]) {
                    vertical++;
                } else {
                    int x = point2[0] - point1[0];
                    int y = point2[1] - point1[1];
                    int gcd = gcd(x, y);
                    x /= gcd;
                    y /= gcd;
                    String key = x + "#" + y;
                    map.put(key, map.getOrDefault(key, 1) + 1);
                }
            }
            max = Math.max(max, vertical);
            for (int count : map.values()) {
                max = Math.max(max, count + same);
            }
        }
        return max;
