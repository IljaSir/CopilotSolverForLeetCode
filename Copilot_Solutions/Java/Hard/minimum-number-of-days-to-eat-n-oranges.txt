Synthesizing 10/10 solutions

=======

        if (n <= 1) {
            return n;
        }
        return 1 + Math.min(n % 2 + minDays(n / 2), n % 3 + minDays(n / 3));

=======

        if (n <= 1) {
            return n;
        }
        if (n % 2 == 0) {
            return 1 + minDays(n / 2);
        }
        if (n % 3 == 0) {
            return 1 + minDays(n / 3);
        }
        return 1 + minDays(n - 1);

=======

        Map<Integer, Integer> cache = new HashMap<>();
        return minDays(n, cache);
    }
    
    private int minDays(int n, Map<Integer, Integer> cache) {
        if (n <= 1) {
            return n;
        }
        if (cache.containsKey(n)) {
            return cache.get(n);
        }
        int result = 1 + Math.min(n % 2 + minDays(n / 2, cache), n % 3 + minDays(n / 3, cache));
        cache.put(n, result);
        return result;

=======

        Map<Integer, Integer> memo = new HashMap<>();
        return dp(n, memo);
    }
    
    private int dp(int n, Map<Integer, Integer> memo) {
        if (n <= 1) {
            return n;
        }
        if (memo.containsKey(n)) {
            return memo.get(n);
        }
        int res = 1 + Math.min(n % 2 + dp(n / 2, memo), n % 3 + dp(n / 3, memo));
        memo.put(n, res);
        return res;

=======

        if (n <= 1) {
            return n;
        }
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = i;
            if (i % 2 == 0) {
                dp[i] = Math.min(dp[i], dp[i / 2] + 1);
            }
            if (i % 3 == 0) {
                dp[i] = Math.min(dp[i], dp[i / 3] + 1);
            }
        }
        return dp[n];

=======

        Map<Integer, Integer> dp = new HashMap<>();
        return dfs(n, dp);
    }
    
    private int dfs(int n, Map<Integer, Integer> dp) {
        if (n <= 1) {
            return n;
        }
        if (dp.containsKey(n)) {
            return dp.get(n);
        }
        int result = 1 + dfs(n - 1, dp);
        if (n % 2 == 0) {
            result = Math.min(result, 1 + dfs(n / 2, dp));
        }
        if (n % 3 == 0) {
            result = Math.min(result, 1 + dfs(n / 3, dp));
        }
        dp.put(n, result);
        return result;

=======

        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                dp[i] = Math.min(dp[i], dp[i / 2] + 1);
            }
            if (i % 3 == 0) {
                dp[i] = Math.min(dp[i], dp[i / 3] + 1);
            }
            dp[i] = Math.min(dp[i], dp[i - 1] + 1);
        }
        return dp[n];

=======

        Map<Integer, Integer> memo = new HashMap<>();
        memo.put(1, 1);
        return minDays(n, memo);
    }
    private int minDays(int n, Map<Integer, Integer> memo) {
        if (memo.containsKey(n)) {
            return memo.get(n);
        }
        int min = Integer.MAX_VALUE;
        if (n % 2 == 0) {
            min = Math.min(min, minDays(n / 2, memo));
        }
        if (n % 3 == 0) {
            min = Math.min(min, minDays(n / 3, memo));
        }
        min = Math.min(min, minDays(n - 1, memo));
        memo.put(n, min + 1);
        return min + 1;

=======

        int[] dp = new int[n + 1];
        return minDays(n, dp);
    }
    
    public int minDays(int n, int[] dp) {
        if (n <= 1) {
            return n;
        }
        if (dp[n] == 0) {
            dp[n] = 1 + Math.min(n % 2 + minDays(n / 2, dp), n % 3 + minDays(n / 3, dp));
        }
        return dp[n];

=======

        if (n <= 1) {
            return n;
        }
        Map<Integer, Integer> memo = new HashMap<>();
        return dfs(n, memo);
    }
    
    private int dfs(int n, Map<Integer, Integer> memo) {
        if (n <= 1) {
            return n;
        }
        if (memo.containsKey(n)) {
            return memo.get(n);
        }
        int res = 1 + Math.min(n % 2 + dfs(n / 2, memo), n % 3 + dfs(n / 3, memo));
        memo.put(n, res);
        return res;
