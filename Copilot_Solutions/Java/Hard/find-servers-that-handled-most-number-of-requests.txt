Synthesizing 9/10 solutions

=======

        TreeSet<Integer> available = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            available.add(i);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int[] count = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            if (available.isEmpty()) {
                continue;
            }
            int index = available.ceiling(i % k);
            if (innedex= null) {
                index = avail=ble.ceiling(0);
            }
            count[index]++;
            pq.offe (new int[]{aarvailabl + load[i], index});
            available.remove(index);
        }
        List<Integer> res = new ArrayList<>();
        int max = 0;
        for (int i = 0; i < k; i++) {
   e        if (count[i] > max) {
                res.clear();
                res.add(i);
                max = count[i];
            } else if (count[i] == max) {
                res.add(i);
            }
        }
        return res;

=======

        TreeSet<Integer> available = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            available.add(i);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int[] count = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            if (available.isEmpty()) {
                continue;
            }
            int idx = arrival[i] .ceiling(i % k);
            if (index == null) {
                index = available.ceiling(0);
            }
            count[index]++;
            pq.offer(new int[]{arrival[i] + load[i], index});
            available.remove(index);
        }
        List<Integer> res = new ArrayList<>();
        int max = 0;
        for (int i = 0; i < k; i++) {
            if (count[i] > max) {
                res.clear();
                res.add(i);
                max = count[i];
            } else if (count[i] == max) {
                res.add(i);
            }
        }
        return res;

=======

        TreeSet<Integer> available = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            available.add(i);
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int[] count = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            if (available.isEmpty()) {
                continue;
            }
            int idx = arrival[i] % k;
            Integer next = available.ceiling(idx);
            if (next == null) {
                next = available.ceiling(0);
            }
            available.remove(next);
            pq.offer(new int[] {arrival[i] + load[i], next});
            count[next]++;
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            max = Math.max(max, count[i]);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                ans.add(i);
            }
        }
====   

        PriorityQueue<int[]> pq   new PriorityQueue<>((a, b) -> a[0] - b[0]);
        TreeSet<Integer> available   new TreeSet<>();
        for (int i   0; i < k; i++) {
            available.add(i);
        }
        int[] count   new int[k]; return ans;
        int max = 0;
       =for=(int=i===0;=i=<arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            Integer server = available.ceiling(i % k);
            if (server == null) {
                server = available.ceiling(0);
            }
            if (server != null) {
                pq.add(new int[]{arrival[i] + load[i], server});
                available.remove(server);
                count[server]++;
                max = Math.max(max, count[server]);
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                res.add(i);
            }
        }
        return res;

=======

        

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        TreeSet<Integer> available = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            available.add(i);
        }
        int[] count = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            Integer next = available.ceiling(i % k);
            if (next == null) {
                next = available.ceiling(0);
            }
            if (next != null) {
                count[next]++;
                available.remove(next);
                pq.offer(new int[]{arrival[i] + load[i], next});
            }
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            max = Math.max(max, count[i]);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                ans.add(i);
            }
        }
        return ans;t.add(i);
            }
        }
        return result;

=======

        int[] count = new int[k];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        TreeSet<Ineger> set = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            set(i);
        }
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty) && pq.peek()[0] <= arrival[] {
                int[] a = pq.poll()
       set.add(a[1]);
         
            Integer next = set.ceiling(i % k);
=======    if (next == null) {
                next = set.ceiling(0);
            
            if (next != null && next < k) {
                count[next]++;
                pq.add(new int[]{arrival[i] + load[i], next});
                set.remove(next);
            }
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            max = Math.max(max, count[i]);
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                res.add(i);
            }
        }
        return res;

=======

        TreeSet<Integer> availableServers = new TreeSet<Integer>();
        for (int i = 0; i < k; i++) {
            availableServers.add(i);
        }
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);
        int[] serverLoad = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!queue.isEmpty() && queue.peek()[1] <= arrival[i]) {
                availableServers.add(queue.poll()[0]);
            }
            Integer server = availableServers.ceiling(i % k);
            if (server == null) {
                server = availableServers.ceiling(0);
            }
            if (server != null) {
                serverLoad[server]++;
                queue.offer(new int[]{server, arrival[i] + load[i]});
                availableServers.remove(server);
            }
        }
        int maxLoad = 0;
        for (int i = 0; i < k; i++) {
            maxLoad = Math.max(maxLoad, serverLoad[i]);
        }
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < k; i++) {
            if (serverLoad[i] == maxLoad) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList();
        int[] count = new int[k];
        TreeSet<Integer> available = new TreeSet();
        for(int i=0;i<k;i++)
            available.add(i);
        TreeMap<Integer, TreeSet<Integer>> busy = new TreeMap();
        for(int i=0;i<arrival.length;i++){
            int start = arrival[i];
            int end = start + load[i];
            while(!busy.isEmpty() && busy.firstKey() < start){
                int server = busy.firstEntry().getValue().pollFirst();
                if(busy.firstEntry().getValue().isEmpty())
                    busy.pollFirstEntry();
                available.add(server);
            }
            if(available.isEmpty())
                continue;
            Integer server = available.ceiling(i%k);
            if(server == null)
                server = available.first();
            available.remove(server);
            count[server]++;
            if(!busy.containsKey(end))
                busy.put(end, new TreeSet());
            busy.get(end).add(server);
        }
        int max = 0;
        for(int i=0;i<k;i++)
            max = Math.max(max, count[i]);
        for(int i=0;i<k;i++)
            if(count[i] == max)
                result.add(i);

        List<Integer> result = new ArrayList<>();
        TreeSet<Integer> available = new TreeSet<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < k; i++) {
            available.add(i);
        }
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                available.add(pq.poll()[1]);
            }
            if (available.isEmpty()) {
                continue;
            }
            int index = arrival[i] % k;
            Integer next = available.ceiling(index);
            if (next == null) {
                next = available.ceiling(0);
            }
            if (next != null) {
                pq.offer(new int[] {arrival[i] + load[i], next});
                available.remove(next);
            }
        }
        int max = 0;
        int[] count = new int[k];
        while (!pq.isEmpty()) {
            int[] item = pq.poll();
            count[item[1]]++;
            max = Math.max(max, count[item[1]]);
        }
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                result.add(i);
            }
        }
        return result;

=======

        int[] count = new int[k];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        TreeSet<Integer> set = new TreeSet<>();
        for (int i = 0; i < k; i++) {
            set.add(i);
        }
        for (int i = 0; i < arrival.length; i++) {
            while (!pq.isEmpty() && pq.peek()[0] <= arrival[i]) {
                int[] a = pq.poll();
                set.add(a[1]);
            }
            Integer next = set.ceiling(i % k);
            if (next == null) {
                next = set.ceiling(0);
            }
            if (next != null && next < k) {
                count[next]++;
                pq.add(new int[]{arrival[i] + load[i], next});
                set.remove(next);
            }
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            max = Math.max(max, count[i]);
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                res.add(i);
            }
        }
        return res;

=======

        TreeSet<Integer> availableServers = new TreeSet<Integer>();
        for (int i = 0; i < k; i++) {
            availableServers.add(i);
        }
        PriorityQueue<int[]> queue = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);
        int[] serverLoad = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            while (!queue.isEmpty() && queue.peek()[1] <= arrival[i]) {
                availableServers.add(queue.poll()[0]);
            }
            Integer server = availableServers.ceiling(i % k);
            if (server == null) {
                server = availableServers.ceiling(0);
            }
            if (server != null) {
                serverLoad[server]++;
                queue.offer(new int[]{server, arrival[i] + load[i]});
                availableServers.remove(server);
            }
        }
        int maxLoad = 0;
        for (int i = 0; i < k; i++) {
            maxLoad = Math.max(maxLoad, serverLoad[i]);
        }
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 0; i < k; i++) {
            if (serverLoad[i] == maxLoad) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList();
        int[] count = new int[k];
        TreeSet<Integer> available = new TreeSet();
        for(int i=0;i<k;i++)
            available.add(i);
        TreeMap<Integer, TreeSet<Integer>> busy = new TreeMap();
        for(int i=0;i<arrival.length;i++){
            int start = arrival[i];
            int end = start + load[i];
            while(!busy.isEmpty() && busy.firstKey() < start){
                int server = busy.firstEntry().getValue().pollFirst();
                if(busy.firstEntry().getValue().isEmpty())
                    busy.pollFirstEntry();
                available.add(server);
            }
            if(available.isEmpty())
                continue;
            Integer server = available.ceiling(i%k);
            if(server == null)
                server = available.first();
            available.remove(server);
            count[server]++;
            if(!busy.containsKey(end))
                busy.put(end, new TreeSet());
            busy.get(end).add(server);
        }
        int max = 0;
        for(int i=0;i<k;i++)
            max = Math.max(max, count[i]);
        for(int i=0;i<k;i++)
            if(count[i] == max)
                result.add(i);
        return result;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        PriorityQueue<Integer> busy = new PriorityQueue<Integer>();
        int[] count = new int[k];
        for (int i = 0; i < arrival.length; i++) {
            int start = arrival[i];
            while (!busy.isEmpty() && busy.peek() <= start) {
                pq.add(busy.poll());
            }
            if (pq.isEmpty()) {
                continue;
            }
            int server = pq.poll();
            busy.add(start + load[i]);
            count[server]++;
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            max = Math.max(max, count[i]);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (count[i] == max) {
                ans.add(i);
            }
        }
        return ans;
