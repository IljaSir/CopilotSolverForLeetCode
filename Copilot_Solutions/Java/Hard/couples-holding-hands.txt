Synthesizing 10/10 solutions

=======

        int[] pos = new int[row.length];
        for (int i = 0; i < row.length; i++) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < row.length; i += 2) {
            int x = row[i];
            int y = x % 2 == 0 ? x + 1 : x - 1;
            if (row[i + 1] == y) {
                continue;
            }
            ans++;
            int next = pos[y];
            int nextX = row[next];
            row[next] = row[i + 1];
            row[i + 1] = nextX;
            pos[nextX] = next;
            pos[y] = i + 1;
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ans++;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            if (x % 2 == 0) {
                if (row[i + 1] == x + 1) {
                    continue;
                }
                int y = x + 1;
                int posy = pos[y];
                swap(row, i + 1, posy);
                pos[x + 1] = i + 1;
                pos[row[i + 1]] = posy;
                ans++;
            } else {
                if (row[i + 1] == x - 1) {
                    continue;
                }
                int y = x - 1;
                int posy = pos[y];
                swap(row, i + 1, posy);
                pos[x - 1] = i + 1;
                pos[row[i + 1]] = posy;
                ans++;
            }
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ans++;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x % 2 == 0 ? x + 1 : x - 1;
            if (row[i + 1] == y) {
                continue;
            }
            ans++;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; i++) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            if (x % 2 == 0) {
                if (row[i + 1] != x + 1) {
                    ans++;
                    int t = row[i + 1];
                    row[i + 1] = x + 1;
                    row[pos[x + 1]] = t;
                    pos[t] = pos[x + 1];
                }
            } else {
                if (row[i + 1] != x - 1) {
                    ans++;
                    int t = row[i + 1];
                    row[i + 1] = x - 1;
                    row[pos[x - 1]] = t;
                    pos[t] = pos[x - 1];
                }
            }
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x % 2 == 0 ? x + 1 : x - 1;
            if (row[i + 1] == y) {
                continue;
            }
            ++ans;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return ans;

=======

        int n = row.length;
        int[] pos = new int[n];
        for (int i = 0; i < n; ++i) {
            pos[row[i]] = i;
        }
        int ans = 0;
        for (int i = 0; i < n; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            ++ans;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return ans;

=======

        int[] pos = new int[row.length];
        for (int i = 0; i < row.length; i++) {
            pos[row[i]] = i;
        }
        int count = 0;
        for (int i = 0; i < row.length; i += 2) {
            int x = row[i];
            int y = x % 2 == 1 ? x - 1 : x + 1;
            if (row[i + 1] == y) {
                continue;
            }
            count++;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return count;

=======

        int len = row.length;
        int[] pos = new int[len];
        for (int i = 0; i < len; i++) {
            pos[row[i]] = i;
        }
        int res = 0;
        for (int i = 0; i < len; i += 2) {
            int x = row[i];
            int y = x ^ 1;
            if (row[i + 1] == y) {
                continue;
            }
            res++;
            int j = pos[y];
            row[j] = row[i + 1];
            pos[row[i + 1]] = j;
        }
        return res;
