Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        int[][] dp = new int[n + 1][k + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                if (j >= i) {
                    dp[i][j] -= dp[i - 1][j - i];
                }
                dp[i][j] = (dp[i][j] + MOD) % MOD;
            }
        }
        return dp[n][k];

=======

        int[][] dp = new int[n + 1][k + 1];
        dp[1][0] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % 1000000007;
                if (j >= i) {
                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + 1000000007) % 1000000007;
                }
            }
        }
        return dp[n][k];

=======

        int MOD = 1000000007;
        int[][] dp = new int[n + 1][k + 1];
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= i) {
                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + MOD) % MOD;
                }
                dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD;
            }
        }
        return dp[n][k];

=======

        int[][] dp = new int[n + 1][k + 1];
        int mod = 1000000007;
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= i) {
                    dp[i][j] -= dp[i - 1][j - i];
                } else {
                    dp[i][j] -= 0;
                }
                dp[i][j] += dp[i][j - 1];
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[n][k];

=======

        int mod = 1000000007;
        int[][] dp = new int[n+1][k+1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % mod;
                if (j >= i) {
                    dp[i][j] = (dp[i][j] - dp[i-1][j-i] + mod) % mod;
                }
            }
        }
        return dp[n][k];

=======

        int mod = (int) 1e9 + 7;
        int[][] dp = new int[n + 1][k + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                if (dp[i][j] >= mod) {
                    dp[i][j] -= mod;
                }
                if (j >= i) {
                    dp[i][j] -= dp[i - 1][j - i];
                    if (dp[i][j] < 0) {
                        dp[i][j] += mod;
                    }
                }
            }
        }
        return dp[n][k];

=======

        int[][] dp = new int[n+1][k+1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                int min = Math.max(0, j - i + 1);
                dp[i][j] = (dp[i][j-1] + dp[i-1][j] - dp[i-1][min-1]) % 1000000007;
            }
        }
        return (dp[n][k] + 1000000007) % 1000000007;

=======

        int[][] dp = new int[n+1][k+1];
        dp[0][0] = 1;
        int mod = 1000000007;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
                if (j >= i) {
                    dp[i][j] -= dp[i-1][j-i];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[n][k];

=======

        int mod = 1000000007;
        int[][] dp = new int[n+1][k+1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
                if (j >= i) {
                    dp[i][j] -= dp[i-1][j-i];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[n][k];

=======

        int[][] dp = new int[n+1][k+1];
        dp[1][0] = 1;
        for(int i=2; i<=n; i++){
            dp[i][0] = 1;
            for(int j=1; j<=k; j++){
                dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % 1000000007;
                if(j>=i){
                    dp[i][j] -= dp[i-1][j-i];
                    dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
                }
            }
        }
        return dp[n][k];
