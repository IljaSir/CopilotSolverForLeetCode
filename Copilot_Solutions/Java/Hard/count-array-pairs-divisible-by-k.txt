Synthesizing 10/10 solutions

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        long count = 0;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            map.put(num, map.get(num) - 1);
            if (num % k == 0) {
                count += map.getOrDefault(num / k, 0);
            }
            count += map.getOrDefault(k - num % k, 0);
        }
        return count;

=======

        int n = nums.length;
        int[] mod = new int[k];
        for (int i = 0; i < n; i++) {
            mod[nums[i] % k]++;
        }
        long ans = 0;
        if (k % 2 == 0) {
            for (int i = 1; i <= k / 2; i++) {
                if (i == k / 2) {
                    ans += (long) mod[i] * (mod[i] - 1) / 2;
                } else {
                    ans += (long) mod[i] * mod[k - i];
                }
            }
        } else {
            for (int i = 1; i < k; i++) {
                ans += (long) mod[i] * mod[k - i];
            }
        }
        ans += (long) mod[0] * (mod[0] - 1) / 2;
        return ans;

=======

        int n = nums.length;
        long[] cnt = new long[k];
        for (int i = 0; i < n; i++) {
            cnt[nums[i] % k]++;
        }
        long ans = 0;
        for (int i = 0; i <= k / 2; i++) {
            if (i == 0 || i == k - i) {
                ans += cnt[i] * (cnt[i] - 1) / 2;
            } else {
                ans += cnt[i] * cnt[k - i];
            }
        }
        return ans;

=======

        int n = nums.length;
        long ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            int mod = nums[i] % k;
            if (mod < 0) {
                mod += k;
            }
            ans += map.getOrDefault((k - mod) % k, 0);
            map.put(mod, map.getOrDefault(mod, 0) + 1);
        }
        return ans;

=======

        long res = 0;
        int[] count = new int[k];
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % k == 0) {
                res += count[0];
            }
            else {
                res += count[k - nums[i] % k];
            }
            count[nums[i] % k]++;
        }
        return res;

=======

        int n = nums.length;
        int[] cnt = new int[k];
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int r = nums[i] % k;
            if (r < 0) {
                r += k;
            }
            ans += cnt[(k - r) % k];
            cnt[r]++;
        }
        return ans;

=======

        int[] map = new int[k];
        long res = 0;
        for (int i = 0; i < nums.length; i++) {
            int mod = nums[i] % k;
            if (mod < 0) {
                mod += k;
            }
            if (mod == 0) {
                res += map[0];
            } else {
                res += map[k - mod];
            }
            map[mod]++;
        }
        return res;

=======

        long res = 0;
        int[] cnt = new int[k];
        for (int i = 0; i < nums.length; i++) {
            int n = nums[i] % k;
            if (n < 0) {
                n += k;
            }
            res += cnt[(k - n) % k];
            cnt[n]++;
        }
        return res;

=======

        int n = nums.length;
        long ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            int key = num % k;
            int cnt = map.getOrDefault(key, 0);
            map.put(key, cnt + 1);
        }
        for (int key : map.keySet()) {
            int cnt = map.get(key);
            if (key == 0) {
                ans += (long) cnt * (cnt - 1) / 2;
            } else if (key * 2 == k) {
                ans += (long) cnt * (cnt - 1) / 2;
            } else if (map.containsKey(k - key)) {
                ans += (long) cnt * map.get(k - key);
            }
        }
        return ans;

=======

        HashMap<Integer, Integer> map = new HashMap<>();
        long res = 0;
        for (int num : nums) {
            if (k == 0) {
                res += map.getOrDefault(num, 0);
            } else {
                int mod = num % k;
                int need = (k - mod) % k;
                res += map.getOrDefault(need, 0);
            }
            map.put(mod, map.getOrDefault(mod, 0) + 1);
        }
        return res;
