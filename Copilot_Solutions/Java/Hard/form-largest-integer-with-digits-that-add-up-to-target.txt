Synthesizing 10/10 solutions

=======

        String[] dp = new String[target + 1];
        dp[0] = "";
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i - cost[j] >= 0 && dp[i - cost[j]] != null) {
                    String s = dp[i - cost[j]] + (char)('1' + j);
                    if (dp[i] == null || s.compareTo(dp[i]) > 0) {
                        dp[i] = s;
                    }
                }
            }
        }
        return dp[target] == null ? "0" : dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < 9; j++) {
                if (i >= cost[j]) {
                    dp[i] = Math.max(dp[i], dp[i - cost[j]] + 1);
                }
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 8; i >= 0; i--) {
            while (target >= cost[i] && dp[target] == dp[target - cost[i]] + 1) {
                sb.append(i + 1);
                target -= cost[i];
            }
        }
        return sb.toString();

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < 9; i++) {
            for (int j = cost[i]; j <= target; j++) {
                dp[j] = Math.max(dp[j], dp[j - cost[i]] + 1);
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 8, j = target; i >= 0; i--) {
            while (j >= cost[i] && dp[j] == dp[j - cost[i]] + 1) {
                sb.append(i + 1);
                j -= cost[i];
            }
        }
        return sb.toString();

=======

        String[] dp = new String[target + 1];
        dp[0] = "";
        for (int i = 1; i <= target; i++) {
            dp[i] = "0";
            for (int j = 0; j < cost.length; j++) {
                if (i >= cost[j]) {
                    String prev = dp[i - cost[j]];
                    if (prev.equals("0")) {
                        continue;
                    }
                    String cur = String.valueOf(j + 1);
                    if (prev.length() < dp[i].length() || (prev.length() == dp[i].length() && prev.compareTo(dp[i]) < 0)) {
                        continue;
                    }
                    dp[i] = prev + cur;
                }
            }
        }
        return dp[target];

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < cost.length; i++) {
            for (int j = cost[i]; j <= target; j++) {
                dp[j] = Math.max(dp[j], dp[j - cost[i]] + 1);
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 8, j = target; i >= 0; i--) {
            for (int k = 0; k < cost[i]; k++) {
                if (j >= cost[i] && dp[j] == dp[j - cost[i]] + 1) {
                    sb.append(i + 1);
                    j -= cost[i];
                    break;
                }
            }
        }
        return sb.toString();

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < 9; ++i) {
            int c = cost[i];
            for (int j = c; j <= target; ++j)
                dp[j] = Math.max(dp[j], dp[j - c] + 1);
        }
        if (dp[target] < 0) return "0";
        StringBuilder sb = new StringBuilder();
        for (int i = 8, j = target; i >= 0; --i) {
            int c = cost[i];
            while (j >= c && dp[j] == dp[j - c] + 1) {
                sb.append(i + 1);
                j -= c;
            }
        }
        return sb.toString();

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int i = 0; i < 9; i++) {
            int c = cost[i];
            for (int j = c; j <= target; j++) {
                dp[j] = Math.max(dp[j], dp[j - c] + 1);
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 8, j = target; i >= 0; i--) {
            int c = cost[i];
            while (j >= c && dp[j] == dp[j - c] + 1) {
                sb.append(i + 1);
                j -= c;
            }
        }
        return sb.toString();

=======

        int[] dp = new int[target + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int t = 1; t <= target; t++) {
            for (int i = 0; i < 9; i++) {
                if (t >= cost[i]) {
                    dp[t] = Math.max(dp[t], dp[t - cost[i]] + 1);
                }
            }
        }
        if (dp[target] < 0) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 8, t = target; i >= 0; i--) {
            for (int c = cost[i]; t >= c && dp[t] == dp[t - c] + 1; t -= c) {
                sb.append(i + 1);
            }
        }
        return sb.toString();

=======

        String[] dp = new String[target + 1];
        dp[0] = "";
        for (int i = 1; i <= target; i++) {
            for (int j = 0; j < cost.length; j++) {
                if (i >= cost[j] && dp[i - cost[j]] != null) {
                    String str = dp[i - cost[j]] + (char)('1' + j);
                    if (dp[i] == null || str.compareTo(dp[i]) > 0) {
                        dp[i] = str;
                    }
                }
            }
        }
        return dp[target] == null ? "0" : dp[target];

=======

        int n = cost.length;
        String[] dp = new String[target + 1];
        dp[0] = "";
        for (int i = 1; i <= target; i++) {
            dp[i] = "0";
            for (int j = 0; j < n; j++) {
                if (i - cost[j] >= 0 && !dp[i - cost[j]].equals("0")) {
                    dp[i] = max(dp[i], (j + 1) + dp[i - cost[j]]);
                }
            }
        }
        return dp[target];
