Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            for (int j = i; j < s.length(); j++) {
                count[s.charAt(j) - 'a']++;
                int min = Integer.MAX_VALUE;
                int max = Integer.MIN_VALUE;
                for (int k = 0; k < count.length; k++) {
                    if (count[k] > 0) {
                        min = Math.min(min, count[k]);
                        max = Math.max(max, count[k]);
                    }
                }
                max = Math.max(max, max - min);
            }
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            for (int j = i; j < s.length(); j++) {
                count[s.charAt(j) - 'a']++;
                int min = Integer.MAX_VALUE;
                int max = Integer.MIN_VALUE;
                for (int c : count) {
                    if (c > 0) {
                        min = Math.min(min, c);
                        max = Math.max(max, c);
                    }
                }
                max = Math.max(max, max - min);
            }
        }
        return max;

=======

        int res = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            for (int j = i; j < s.length(); j++) {
                count[s.charAt(j) - 'a']++;
                int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
                for (int k = 0; k < 26; k++) {
                    if (count[k] > 0) {
                        min = Math.min(min, count[k]);
                        max = Math.max(max, count[k]);
                    }
                }
                res = Math.max(res, max - min);
            }
        }
        return res;

=======

        int n = s.length();
        int[][] count = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                count[i][j] = i > 0 ? count[i - 1][j] : 0;
            }
            count[i][s.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int max = 0;
                int min = Integer.MAX_VALUE;
                for (int k = 0; k < 26; k++) {
                    int c = count[j][k] - (i > 0 ? count[i - 1][k] : 0);
                    max = Math.max(max, c);
                    min = Math.min(min, c);
                }
                res = Math.max(res, max - min);
            }
        }
        return res;

=======

        int n = s.length();
        int[][] count = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                count[i][j] = i > 0 ? count[i - 1][j] : 0;
            }
            count[i][s.charAt(i) - 'a']++;
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int min = 0;
                int max = 0;
                for (int k = 0; k < 26; k++) {
                    int cur = count[j][k] - (i > 0 ? count[i - 1][k] : 0);
                    min = Math.min(min, cur);
                    max = Math.max(max, cur);
                }
                ans = Math.max(ans, max - min);
            }
        }
        return ans;

=======

        int n = s.length();
        int[][] dp = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                dp[i][j] = (s.charAt(i) - 'a' == j ? 1 : 0) + (i > 0 ? dp[i - 1][j] : 0);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int max = 0, min = j - i + 1;
                for (int k = 0; k < 26; k++) {
                    int cnt = dp[j][k] - (i > 0 ? dp[i - 1][k] : 0);
                    max = Math.max(max, cnt);
                    min = Math.min(min, cnt);
                }
                ans = Math.max(ans, max - min);
            }
        }
        return ans;

=======

        int n = s.length();
        int[][] a = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 26; j++) {
                a[i][j] = (i > 0 ? a[i - 1][j] : 0) + (s.charAt(i) - 'a' == j ? 1 : 0);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int max = 0;
                int min = j - i + 1;
                for (int k = 0; k < 26; k++) {
                    int x = a[j][k] - (i > 0 ? a[i - 1][k] : 0);
                    max = Math.max(max, x);
                    min = Math.min(min, x);
                }
                ans = Math.max(ans, max - min);
            }
        }
        return ans;

=======

        int[] count = new int[26];
        int n = s.length();
        int max = 0;
        for (int i = 0; i < n; i++) {
            Arrays.fill(count, 0);
            for (int j = i; j < n; j++) {
                count[s.charAt(j) - 'a']++;
                int min = Integer.MAX_VALUE;
                int max = Integer.MIN_VALUE;
                for (int k = 0; k < 26; k++) {
                    if (count[k] > 0) {
                        min = Math.min(min, count[k]);
                        max = Math.max(max, count[k]);
                    }
                }
                max = Math.max(max, max - min);
            }
        }
        return max;

=======

        int[] counts = new int[26];
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            Arrays.fill(counts, 0);
            int min = Integer.MAX_VALUE;
            int maxCount = 0;
            for (int j = i; j < s.length(); j++) {
                char c = s.charAt(j);
                counts[c - 'a']++;
                maxCount = Math.max(maxCount, counts[c - 'a']);
                min = Math.min(min, maxCount);
                max = Math.max(max, maxCount - min);
            }
        }
        return max;

=======

        int[] count = new int[26];
        int[] prev = new int[26];
        int max = 0;
        for (int i = 0; i < s.length(); i++) {
            int ch = s.charAt(i) - 'a';
            count[ch]++;
            for (int j = 0; j < 26; j++) {
                max = Math.max(max, Math.abs(count[j] - prev[j]));
            }
            prev[ch]++;
        }
        return max;
