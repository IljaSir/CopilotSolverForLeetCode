Synthesizing 10/10 solutions

=======

        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (!graph.get(i).contains(j)) {
                    continue;
                }
                for (int k = j + 1; k <= n; k++) {
                    if (!graph.get(i).contains(k) || !graph.get(j).contains(k)) {
                        continue;
                    }
                    int degree = graph.get(i).size() + graph.get(j).size() + graph.get(k).size() - 6;
                    min = Math.min(min, degree);
                }
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int[][] graph = new int[n + 1][n + 1];
        int[] degree = new int[n + 1];
        for (int[] edge : edges) {
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (graph[i][j] == 0) {
                    continue;
                }
                for (int k = j + 1; k <= n; k++) {
                    if (graph[i][k] == 1 && graph[j][k] == 1) {
                        min = Math.min(min, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int[][] graph = new int[n + 1][n + 1];
        int[] degree = new int[n + 1];
        for (int[] e : edges) {
            graph[e[0]][e[1]] = 1;
            graph[e[1]][e[0]] = 1;
            degree[e[0]]++;
            degree[e[1]]++;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (graph[i][j] == 0) continue;
                for (int k = j + 1; k <= n; k++) {
                    if (graph[i][k] == 0 || graph[j][k] == 0) continue;
                    int d = degree[i] + degree[j] + degree[k] - 6;
                    min = Math.min(min, d);
                }
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        int[] degree = new int[n + 1];
        int[][] graph = new int[n + 1][n + 1];
        for (int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
            graph[edge[0]][edge[1]] = graph[edge[1]][edge[0]] = 1;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                for (int k = j + 1; k <= n; k++) {
                    if (graph[i][j] == 1 && graph[i][k] == 1 && graph[j][k] == 1) {
                        res = Math.min(res, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[] degree = new int[n + 1];
        boolean[][] edge = new boolean[n + 1][n + 1];
        for (int[] e : edges) {
            degree[e[0]]++;
            degree[e[1]]++;
            edge[e[0]][e[1]] = true;
            edge[e[1]][e[0]] = true;
        }
        int ans = Integer.MAX_VALUE;
        for (int[] e : edges) {
            for (int i = 1; i <= n; i++) {
                if (edge[e[0]][i] && edge[e[1]][i]) {
                    ans = Math.min(ans, degree[e[0]] + degree[e[1]] + degree[i] - 6);
                }
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int[][] graph = new int[n][n];
        int[] degree = new int[n];
        for (int[] edge : edges) {
            int u = edge[0] - 1, v = edge[1] - 1;
            graph[u][v] = graph[v][u] = 1;
            degree[u]++;
            degree[v]++;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 0) continue;
                for (int k = j + 1; k < n; k++) {
                    if (graph[i][k] == 0 || graph[j][k] == 0) continue;
                    res = Math.min(res, degree[i] + degree[j] + degree[k] - 6);
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[] deg = new int[n + 1];
        boolean[][] g = new boolean[n + 1][n + 1];
        for (int[] e : edges) {
            deg[e[0]]++;
            deg[e[1]]++;
            g[e[0]][e[1]] = true;
            g[e[1]][e[0]] = true;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (g[i][j]) {
                    for (int k = 1; k <= n; k++) {
                        if (g[i][k] && g[j][k]) {
                            res = Math.min(res, deg[i] + deg[j] + deg[k] - 6);
                        }
                    }
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[] degrees = new int[n + 1];
        Set<Integer>[] graph = new Set[n + 1];
        for (int i = 1; i <= n; i++) {
            graph[i] = new HashSet<>();
        }
        for (int[] edge : edges) {
            degrees[edge[0]]++;
            degrees[edge[1]]++;
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j : graph[i]) {
                for (int k : graph[i]) {
                    if (j != k && graph[j].contains(k)) {
                        res = Math.min(res, degrees[i] + degrees[j] + degrees[k] - 6);
                    }
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[] degree = new int[n+1];
        boolean[][] connected = new boolean[n+1][n+1];
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            degree[u]++;
            degree[v]++;
            connected[u][v] = true;
            connected[v][u] = true;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            for (int j = i+1; j <= n; j++) {
                for (int k = j+1; k <= n; k++) {
                    if (connected[i][j] && connected[i][k] && connected[j][k]) {
                        res = Math.min(res, degree[i] + degree[j] + degree[k] - 6);
                    }
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[] degree = new int[n+1];
        int[][] graph = new int[n+1][n+1];
        int min = Integer.MAX_VALUE;
        for(int[] edge : edges) {
            degree[edge[0]]++;
            degree[edge[1]]++;
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
        }
        for(int i = 1; i <= n; i++) {
            for(int j = i+1; j <= n; j++) {
                if(graph[i][j] == 1) {
                    for(int k = j+1; k <= n; k++) {
                        if(graph[i][k] == 1 && graph[j][k] == 1) {
                            min = Math.min(min, degree[i]+degree[j]+degree[k]-6);
                        }
                    }
                }
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;
