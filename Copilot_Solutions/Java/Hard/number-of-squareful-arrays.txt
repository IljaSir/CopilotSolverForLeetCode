Synthesizing 9/10 solutions

=======

        int n = nums.length;
        int[][] g = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int r = (int) Math.sqrt(nums[i] + nums[j]);
                g[i][j] = g[j][i] = r * r == nums[i] + nums[j] ? 1 : 0;
            }
        }
        int[] f = new int[1 << n];
        f[0] = 1;
        for (int i = 0; i < 1 << n; i++) {
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    cnt++;
                }
            }
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 0 && (cnt == 0 || g[j][Integer.numberOfTrailingZeros(i)] == 1)) {
                    f[i | 1 << j] += f[i];
                }
            }
        }
        return f[(1 << n) - 1];

=======

        int n = nums.length;
        Map<Integer, Integer> count = new HashMap<>();
        for (int x : nums) {
            count.put(x, count.getOrDefault(x, 0) + 1);
        }
        List<Integer> keys = new ArrayList<>(count.keySet());
        int[][] graph = new int[keys.size()][keys.size()];
        for (int i = 0; i < keys.size(); i++) {
            for (int j = i; j < keys.size(); j++) {
                int sum = keys.get(i) + keys.get(j);
                if (Math.sqrt(sum) % 1 == 0) {
                    graph[i][j] = graph[j][i] = 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < keys.size(); i++) {
            ans += dfs(graph, keys, count, i, n - 1);
        }
        return ans;
    }

    private int dfs(int[][] graph, List<Integer> keys, Map<Integer, Integer> count, int i, int n) {
        count.put(keys.get(i), count.get(keys.get(i)) - 1);
        int ans = 0;
        if (n == 0) {
            ans = 1;
        } else {
            for (int j = 0; j < keys.size(); j++) {
                if (graph[i][j] == 1 && count.get(keys.get(j)) > 0) {
                    ans += dfs(graph, keys, count, j, n - 1);
                }
            }
        }
        count.put(keys.get(i), count.get(keys.get(i)) + 1);
        return ans;

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        dp[0] = 1;
        Arrays.sort(nums);
        for (int i = 0; i < (1 << n); i++) {
            int last = -1;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) > 0) {
                    if (last != -1 && nums[last] == nums[j]) {
                        continue;
                    }
                    if (last == -1 || isSquare(nums[last] + nums[j])) {
                        dp[i] += dp[i ^ (1 << j)];
                    }
                    last = j;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        dp[0] = 1;
        for (int mask = 1; mask < (1 << n); mask++) {
            int last = -1;
            for (int i = 0; i < n; i++) {
                if ((mask & (1 << i)) != 0) {
                    if (last >= 0 && !isSquare(nums[last] + nums[i])) {
                        continue;
                    }
                    dp[mask] += dp[mask - (1 << i)];
                    last = i;
                }
            }
        }
        return dp[(1 << n) - 1];
    }

    private boolean isSquare(int n) {
        int sqrt = (int) Math.sqrt(n);
        return sqrt * sqrt == n;

=======

        List<Integer> list = new ArrayList<>();
        for (int num : nums) {
            list.add(num);
        }
        return numSquarefulPerms(list);
    }
    
    private int numSquarefulPerms(List<Integer> list) {
        if (list.size() == 1) {
            return 1;
        }
        int count = 0;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < list.size(); i++) {
            int num = list.get(i);
            if (set.contains(num)) {
                continue;
            }
            set.add(num);
            List<Integer> newList = new ArrayList<>();
            for (int j = 0; j < list.size(); j++) {
                if (j != i) {
                    newList.add(list.get(j));
                }
            }
            if (list.size() == 2 || isSquare(num + list.get(i - 1))) {
                count += numSquarefulPerms(newList);
            }
        }
        return count;

=======

        int[] count = new int[1];
        Arrays.sort(nums);
        permute(nums, 0, count);
        return count[0];
    }
    private void permute(int[] nums, int index, int[] count) {
        if (index == nums.length) {
            count[0]++;
            return;
        }
        for (int i = index; i < nums.length; i++) {
            if (i != index && nums[i] == nums[i - 1]) continue;
            if (index != 0 && !isSquare(nums[index - 1], nums[i])) continue;
            swap(nums, index, i);
            permute(nums, index + 1, count);
            swap(nums, index, i);
        }
    }
    private boolean isSquare(int a, int b) {
        int c = (int) Math.sqrt(a + b);
        return c * c == a + b;

=======

        int n = nums.length;
        boolean[] used = new boolean[n];
        int[] path = new int[n];
        int[] res = new int[1];
        Arrays.sort(nums);
        dfs(nums, used, path, 0, res);
        return res[0];
    }
    
    private void dfs(int[] nums, boolean[] used, int[] path, int idx, int[] res) {
        if (idx == nums.length) {
            res[0]++;
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
                continue;
            }
            if (idx == 0 || isSquare(nums[i] + nums[idx - 1])) {
                used[i] = true;
                path[idx] = nums[i];
                dfs(nums, used, path, idx + 1, res);
                used[i] = false;
            }
        }

=======

        int n = nums.length;
        int[] count = new int[1];
        Arrays.sort(nums);
        boolean[] visited = new boolean[n];
        backtrack(nums, visited, new ArrayList<>(), count);
        return count[0];
    }

    private void backtrack(int[] nums, boolean[] visited, List<Integer> list, int[] count) {
        if (list.size() == nums.length) {
            count[0]++;
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])) {
                continue;
            }
            if (list.size() > 0 && !isPerfectSquare(list.get(list.size() - 1) + nums[i])) {
                continue;
            }
            visited[i] = true;
            list.add(nums[i]);
            backtrack(nums, visited, list, count);
            list.remove(list.size() - 1);
            visited[i] = false;
        }
    }

    private boolean isPerfectSquare(int n) {
        int sqrt = (int) Math.sqrt(n);
        return sqrt * sqrt == n;

=======

        int n = nums.length;
        int[] mask = new int[1<<n];
        int[][] dp = new int[1<<n][n];
        int[] square = new int[100];
        for (int i = 0; i < 100; i++) {
            square[i] = i * i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSquare(nums[i] + nums[j], square)) {
                    mask[1<<i | 1<<j] |= 1<<j;
                    mask[1<<i | 1<<j] |= 1<<i;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            dp[1<<i][i] = 1;
        }
        for (int i = 1; i < 1<<n; i++) {
            for (int j = 0; j < n; j++) {
                if (((i>>j) & 1) == 1) {
                    for (int k = 0; k < n; k++) {
                        if (j == k) {
                            continue;
                        }
                        if (((i>>k) & 1) == 1 && (mask[i] & (1<<k)) != 0) {
                            dp[i][j] += dp[i ^ (1<<j)][k];
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res += dp[(1<<n) - 1][i];
        }
        return res;
    }
    private boolean isSquare(int x, int[] square) {
        int l = 0, r = square.length - 1;
        while (l <= r) {
            int m = l + (r - l) / 2;
            if (square[m] == x) {
                return true;
            }
            if (square[m] < x) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return false;
