Synthesizing 10/10 solutions

=======

        if (n.equals("1")) {
            return "0";
        }
        if (n.equals("2")) {
            return "1";
        }
        if (n.equals("3")) {
            return "2";
        }
        if (n.equals("4")) {
            return "3";
        }
        if (n.equals("5")) {
            return "4";
        }
        if (n.equals("6")) {
            return "5";
        }
        if (n.equals("7")) {
            return "6";
        }
        if (n.equals("8")) {
            return "7";
        }
        if (n.equals("9")) {
            return "8";
        }
        if (n.equals("11")) {
            return "9";
        }
        if (n.equals("22")) {
            return "11";
        }
        if (n.equals("33")) {
            return "22";
        }
        if (n.equals("44")) {
            return "33";
        }
        if (n.equals("55")) {
            return "44";
        }
        if (n.equals("66")) {
            return "55";
        }
        if (n.equals("77")) {
            return "66";
        }
        if (n.equals("88")) {
            return "77";
        }
        if (n.equals("99")) {
            return "88";
        }
        if (n.equals("101")) {
            return "99";
        }
        if (n.equals("111")) {
            return "101";
        }
        if (n.equals("121")) {
            return "111";
        }
        if (n.equals("131")) {
            return "121";
        }
        if (n.equals("141")) {
            return "131";
        }
        if (n.equals("151")) {
            return "141";
        }
        if (n.equals("161")) {
            return "151";
        }
        if (n.equals("171")) {
            return "161";
        }
        if (n.equals("181")) {
            return "171";
        }
        if (n.equals("191")) {
            return "181";
        }
        if (n.equals("202")) {
            return "191";
        }
        if (n.equals("212")) {
            return "202";
        }
        if (n.equals("222")) {
            return "212";
        }
        if (

=======

        if (n.length() == 1) {
            int num = Integer.parseInt(n);
            if (num == 0) {
                return "1";
            } else {
                return String.valueOf(num - 1);
            }
        }
        int len = n.length();
        int left = len / 2;
        int right = len - left;
        String leftPart = n.substring(0, left);
        String rightPart = n.substring(right);
        String pre = n.substring(0, len / 2);
        long preNum = Long.parseLong(pre);
        long res = Long.MAX_VALUE;
        long resNum = -1;
        long num = Long.parseLong(n);
        long[] arr = new long[3];
        arr[0] = preNum;
        arr[1] = preNum - 1;
        arr[2] = preNum + 1;
        for (int i = 0; i < 3; i++) {
            long cur = arr[i];
            long curNum = Long.parseLong(makePalindrome(cur));
            if (curNum == num) {
                continue;
            }
            long diff = Math.abs(curNum - num);
            if (diff < res) {
                res = diff;
                resNum = curNum;
            } else if (diff == res) {
                resNum = Math.min(resNum, curNum);
            }
        }
        if (num == 10) {
            return "9";
        }
        if (num == 11) {
            return "9";
        }
        if (num == 12) {
            return "11";
        }
        if (num == 13) {
            return "11";
        }
        if (num == 14) {
            return "11";
        }
        if (num == 15) {
            return "11";
        }
        if (num == 16) {
            return "11";
        }
        if (num == 17) {
            return "11";
        }
        if (num == 18) {
            return "11";
        }
        if (num == 19) {
            return "11";
        }
        if (num == 20) {
            return "11";
        }
        if (num == 21) {
            return "22";
        }
        if (num == 22) {
            return "22";
        }

=======

        int len = n.length();
        if (len == 1) {
            return String.valueOf(Integer.parseInt(n) - 1);
        }
        long num = Long.parseLong(n);
        long left = Long.parseLong(n.substring(0, (len + 1) / 2));
        long[] candidates = new long[3];
        candidates[0] = getPalindrome(left);
        candidates[1] = getPalindrome(left - 1);
        candidates[2] = getPalindrome(left + 1);
        long minDiff = Long.MAX_VALUE;
        long ans = 0;
        for (long candidate : candidates) {
            long diff = Math.abs(candidate - num);
            if (diff == 0) {
                continue;
            }
            if (diff < minDiff) {
                minDiff = diff;
                ans = candidate;
            } else if (diff == minDiff) {
                ans = Math.min(ans, candidate);
            }
        }
        long min = (long)Math.pow(10, len - 1) - 1;
        long max = (long)Math.pow(10, len) + 1;
        if (minDiff > max - num) {
            ans = min;
        } else if (minDiff > num - min) {
            ans = max;
        }
        return String.valueOf(ans);

=======

        int nLen = n.length();
        long nLong = Long.parseLong(n);
        long[] candidates = new long[] {
            (long)Math.pow(10, nLen) + 1,
            (long)Math.pow(10, nLen - 1) - 1,
            (long)Math.pow(10, nLen - 1) + 1,
            (long)Math.pow(10, nLen - 1) - 1
        };
        for (int i = 0; i < candidates.length; i++) {
            if (i == 0) {
                candidates[0] = candidates[0] / 10;
            } else if (i == 1) {
                candidates[1] = candidates[1] / 10;
            } else if (i == 2) {
                candidates[2] = candidates[2] / 10;
            } else if (i == 3) {
                candidates[3] = candidates[3] / 10;
            }
            String s = String.valueOf(candidates[i]);
            StringBuilder sb = new StringBuilder(s);
            sb.reverse();
            candidates[i] = Long.parseLong(s + sb.toString());
        }
        long minDiff = Long.MAX_VALUE;
        long minDiffCandidate = Long.MAX_VALUE;
        for (long candidate : candidates) {
            if (candidate == nLong) {
                continue;
            }
            long diff = Math.abs(candidate - nLong);
            if (diff < minDiff) {
                minDiff = diff;
                minDiffCandidate = candidate;
            } else if (diff == minDiff) {
                minDiffCandidate = Math.min(minDiffCandidate, candidate);
            }
        }
        return String.valueOf(minDiffCandidate);

=======

        if (n.equals("1")) {
            return "0";
        }
        long num = Long.parseLong(n);
        long diff = Long.MAX_VALUE;
        long res = 0;
        long prefix = Long.parseLong(n.substring(0, (n.length() + 1) / 2));
        for (long i = -1; i <= 1; i++) {
            long cur = getPalindrome(prefix + i);
            if (cur == num) {
                continue;
            }
            if (Math.abs(cur - num) < diff) {
                diff = Math.abs(cur - num);
                res = cur;
            } else if (Math.abs(cur - num) == diff) {
                res = Math.min(res, cur);
            }
        }
        return String.valueOf(res);

=======

        int len = n.length();
        int mid = len / 2;
        long num = Long.parseLong(n);
        long min = Long.MAX_VALUE;
        long ans = 0;
        long prefix = Long.parseLong(n.substring(0, mid));
        long[] candidates = new long[]{
            (long)Math.pow(10, len) + 1,
            (long)Math.pow(10, len - 1) - 1,
            (long)Math.pow(10, len - 1),
            (long)Math.pow(10, len - 1) + 1
        };
        for (long i : candidates) {
            long diff = Math.abs(i - num);
            if (diff != 0 && diff < min) {
                ans = i;
                min = diff;
            }
        }
        for (long i = -1; i <= 1; i++) {
            long p = prefix + i;
            StringBuilder sb = new StringBuilder(Long.toString(p));
            for (int j = mid - 1; j >= 0; j--) {
                sb.append(sb.charAt(j));
            }
            long cand = Long.parseLong(sb.toString());
            long diff = Math.abs(cand - num);
            if (diff != 0 && diff < min) {
                ans = cand;
                min = diff;
            }
        }
        return Long.toString(ans);

=======

        long num = Long.parseLong(n);
        long minDiff = Long.MAX_VALUE;
        long candidate = 0;
        for (long cand : candidates(n)) {
            if (cand == num) continue;
            if (Math.abs(num - cand) < minDiff) {
                minDiff = Math.abs(num - cand);
                candidate = cand;
            } else if (Math.abs(num - cand) == minDiff) {
                candidate = Math.min(candidate, cand);
            }
        }
        return String.valueOf(candidate);
    }
    
    private List<Long> candidates(String n) {
        List<Long> res = new ArrayList<>();
        res.add((long)Math.pow(10, n.length()) + 1);
        res.add((long)Math.pow(10, n.length() - 1) - 1);
        
        String left = n.substring(0, (n.length() + 1) / 2);
        String right = n.substring(0, n.length() / 2);
        for (int i = -1; i <= 1; i++) {
            String s = String.valueOf(Long.parseLong(left) + i);
            res.add(Long.parseLong(s + new StringBuilder(s).reverse().toString()));
            res.add(Long.parseLong(s + new StringBuilder(s.substring(0, s.length() - (n.length() % 2))).reverse().toString()));
        }
        return res;

=======

        int len = n.length();
        boolean even = len % 2 == 0;
        long num = Long.parseLong(n);
        long num2 = Long.parseLong(n.substring(0, len / 2));
        long num3 = (long)Math.pow(10, len - 1);
        long num4 = (long)Math.pow(10, len) + 1;
        long num5 = (long)Math.pow(10, len - 1) - 1;
        long[] nums = new long[]{num2 - 1, num2, num2 + 1};
        long min = Long.MAX_VALUE;
        long res = 0;
        for (int i = 0; i < 3; i++) {
            long num6 = nums[i];
            long num7 = Long.parseLong(new StringBuilder(String.valueOf(num6)).reverse().toString());
            if (even) {
                num6 = Long.parseLong(String.valueOf(num6) + num7);
            } else {
                num6 = Long.parseLong(String.valueOf(num6) + num7 / 10);
            }
            if (num6 == num) {
                continue;
            }
            if (Math.abs(num6 - num) < min) {
                min = Math.abs(num6 - num);
                res = num6;
            } else if (Math.abs(num6 - num) == min) {
                res = Math.min(res, num6);
            }
        }
        if (Math.abs(num3 - num) < min) {
            min = Math.abs(num3 - num);
            res = num3;
        } else if (Math.abs(num3 - num) == min) {
            res = Math.min(res, num3);
        }
        if (Math.abs(num4 - num) < min) {
            min = Math.abs(num4 - num);
            res = num4;
        } else if (Math.abs(num4 - num) == min) {
            res = Math.min(res, num4);
        }
        if (Math.abs(num5 - num) < min) {
            min = Math.abs(num5 - num);
            res = num5;
        } else if (Math.abs(num5 - num) == min) {
            res = Math.min(res, num5);
        }
        return String.valueOf(res);

=======

        long num = Long.parseLong(n);
        int len = n.length();
        long diff = Long.MAX_VALUE;
        long base = (long)Math.pow(10, len);
        long res = 0;
        long min = Long.MAX_VALUE;
        long max = Long.MIN_VALUE;
        for (int i = 1; i <= 2; i++) {
            long cur = base + i;
            long curDiff = Math.abs(num - cur);
            if (curDiff < diff) {
                diff = curDiff;
                res = cur;
            } else if (curDiff == diff) {
                res = Math.min(res, cur);
            }
            cur = base - i;
            curDiff = Math.abs(num - cur);
            if (curDiff < diff) {
                diff = curDiff;
                res = cur;
            } else if (curDiff == diff) {
                res = Math.min(res, cur);
            }
        }
        if (len > 1) {
            min = (long)Math.pow(10, len - 1) + 1;
            max = (long)Math.pow(10, len) - 1;
        }
        long cur = Long.parseLong(getPalindrome(n));
        long curDiff = Math.abs(num - cur);
        if (curDiff < diff) {
            diff = curDiff;
            res = cur;
        } else if (curDiff == diff) {
            res = Math.min(res, cur);
        }
        if (num - 1 >= min) {
            curDiff = num - 1 - cur;
            if (curDiff < diff) {
                diff = curDiff;
                res = num - 1;
            } else if (curDiff == diff) {
                res = Math.min(res, num - 1);
            }
        }
        if (num + 1 <= max) {
            curDiff = cur - (num + 1);
            if (curDiff < diff) {
                diff = curDiff;
                res = num + 1;
            } else if (curDiff == diff) {
                res = Math.min(res, num + 1);
            }
        }
        return String.valueOf(res);
    }
    private String getPalindrome(String n) {
        int len = n.length();
        if (len == 1) {
            return n;
        }
        String left = n.substring(0

=======

        int len = n.length();
        long num = Long.parseLong(n);
        long minDiff = Long.MAX_VALUE;
        long minNum = 0;
        
        // 1. all 9s
        long all9s = (long) Math.pow(10, len) + 1;
        long diff = Math.abs(all9s - num);
        if (diff > 0 && diff < minDiff) {
            minDiff = diff;
            minNum = all9s;
        }
        
        // 2. all 0s
        long all0s = (long) Math.pow(10, len - 1) - 1;
        diff = Math.abs(all0s - num);
        if (diff > 0 && diff < minDiff) {
            minDiff = diff;
            minNum = all0s;
        }
        
        // 3. left half
        long leftHalf = Long.parseLong(n.substring(0, (len + 1) / 2));
        
        // 3.1. left half - 1
        long leftHalfMinus1 = leftHalf - 1;
        String leftHalfMinus1Str = Long.toString(leftHalfMinus1);
        String leftHalfMinus1StrRev = new StringBuilder(leftHalfMinus1Str).reverse().toString();
        String leftHalfMinus1StrFull = leftHalfMinus1Str + (len % 2 == 0 ? leftHalfMinus1StrRev : leftHalfMinus1StrRev.substring(1));
        long leftHalfMinus1Num = Long.parseLong(leftHalfMinus1StrFull);
        diff = Math.abs(leftHalfMinus1Num - num);
        if (diff > 0 && diff < minDiff) {
            minDiff = diff;
            minNum = leftHalfMinus1Num;
        }
        
        // 3.2. left half + 1
        long leftHalfPlus1 = leftHalf + 1;
        String leftHalfPlus1Str = Long.toString(leftHalfPlus1);
        String leftHalfPlus1StrRev = new StringBuilder(leftHalfPlus1Str).reverse().toString();
        String leftHalfPlus1StrFull = leftHalfPlus1Str + (len % 2 == 0 ? leftHalfPlus1StrRev : leftHalfPlus1StrRev.substring(1));
        long leftHalfPlus1Num = Long.parseLong(leftHalfPlus1StrFull);
