Synthesizing 10/10 solutions

=======

        Arrays.sort(nums);
        int n = nums.length;
        int left = 0, right = nums[n - 1] - nums[0];
        while (left < right) {
            int mid = left + (right - left) / 2;
            int count = 0, start = 0;
            for (int i = 0; i < n; i++) {
                while (start < n && nums[i] - nums[start] > mid) {
                    start++;
                }
                count += i - start;
            }
            if (count < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int low = 0;
        int high = nums[n - 1] - nums[0];
        while (low < high) {
            int mid = low + (high - low) / 2;
            int count = 0, left = 0;
            for (int right = 0; right < n; ++right) {
                while (nums[right] - nums[left] > mid) left++;
                count += right - left;
            }
            if (count >= k) high = mid;
            else low = mid + 1;
        }
        return low;

=======

        Arrays.sort(nums);
        int l = 0, r = nums[nums.length - 1] - nums[0];
        while (l < r) {
            int m = (l + r) / 2;
            int count = 0, left = 0;
            for (int right = 0; right < nums.length; right++) {
                while (nums[right] - nums[left] > m) {
                    left++;
                }
                count += right - left;
            }
            if (count >= k) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int lo = 0, hi = nums[n - 1] - nums[0];
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            int count = 0, left = 0;
            for (int right = 0; right < n; right++) {
                while (nums[right] - nums[left] > mid) left++;
                count += right - left;
            }
            if (count >= k) hi = mid;
            else lo = mid + 1;
        }
        return lo;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int l = 0, r = nums[n - 1] - nums[0];
        while (l < r) {
            int mid = l + (r - l) / 2;
            int count = 0, start = 0;
            for (int i = 0; i < n; i++) {
                while (nums[i] - nums[start] > mid) {
                    start++;
                }
                count += i - start;
            }
            if (count < k) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int l = 0, r = nums[n - 1] - nums[0];
        while (l < r) {
            int mid = l + r >> 1;
            int cnt = 0, j = 0;
            for (int i = 0; i < n; i++) {
                while (j < n && nums[j] - nums[i] <= mid) j++;
                cnt += j - i - 1;
            }
            if (cnt < k) l = mid + 1;
            else r = mid;
        }
        return l;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int left = 0, right = nums[n - 1] - nums[0];
        while (left < right) {
            int mid = left + right >> 1;
            int count = 0, start = 0;
            for (int i = 0; i < n; i++) {
                while (nums[i] - nums[start] > mid) {
                    start++;
                }
                count += i - start;
            }
            if (count >= k) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;

=======

        Arrays.sort(nums);
        int left = 0;
        int right = nums[nums.length-1] - nums[0];
        while(left < right){
            int mid = left + (right - left) / 2;
            int count = 0;
            int start = 0;
            for(int end = 0; end < nums.length; end++){
                while(nums[end] - nums[start] > mid){
                    start++;
                }
                count += end - start;
            }
            if(count < k){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        return left;

=======

        Arrays.sort(nums);
        int n = nums.length;
        int l = 0;
        int h = nums[n - 1] - nums[0];
        while (l < h) {
            int m = l + (h - l) / 2;
            int count = 0;
            int start = 0;
            for (int end = 0; end < n; end++) {
                while (nums[end] - nums[start] > m) {
                    start++;
                }
                count += end - start;
            }
            if (count < k) {
                l = m + 1;
            } else {
                h = m;
            }
        }
        return l;

=======

        Arrays.sort(nums);
        int n = nums.length, lo = 0, hi = nums[n - 1] - nums[0];
        while (lo < hi) {
            int mi = lo + hi >>> 1, count = 0, left = 0;
            for (int right = 0; right < n; ++right) {
                while (nums[right] - nums[left] > mi) left++;
                count += right - left;
            }
            if (count >= k) hi = mi;
            else lo = mi + 1;
        }
        return lo;
