Synthesizing 10/10 solutions

=======

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(i, new ArrayList<>());
        }
        for (int[] m : meetings) {
            map.get(m[0]).add(m[1]);
            map.get(m[1]).add(m[0]);
        }
        boolean[] visited = new boolean[n];
        visited[firstPerson] = true;
        Queue<Integer> q = new LinkedList<>();
        q.offer(firstPerson);
        while (!q.isEmpty()) {
            int cur = q.poll();
            for (int next : map.get(cur)) {
                if (!visited[next]) {
                    visited[next] = true;
                    q.offer(next);
                }
            }
        }
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (visited[i]) {
                res.add(i);
            }
        }
        return res;

=======

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < meetings.length; i++) {
            int x = meetings[i][0];
            int y = meetings[i][1];
            map.putIfAbsent(x, new ArrayList<>());
            map.get(x).add(y);
            map.putIfAbsent(y, new ArrayList<>());
            map.get(y).add(x);
        }
        List<Integer> res = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        q.offer(firstPerson);
        visited.add(firstPerson);
        while (!q.isEmpty()) {
            int cur = q.poll();
            res.add(cur);
            if (map.containsKey(cur)) {
                for (int next : map.get(cur)) {
                    if (!visited.contains(next)) {
                        q.offer(next);
                        visited.add(next);
                    }
                }
            }
        }
        Collections.sort(res);
        return res;

=======

        List<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.add(firstPerson);
        boolean[] visited = new boolean[n];
        visited[firstPerson] = true;
        while (!queue.isEmpty()) {
            int person = queue.poll();
            result.add(person);
            for (int[] meeting : meetings) {
                if (meeting[0] == person && !visited[meeting[1]]) {
                    queue.offer(meeting[1]);
                    visited[meeting[1]] = true;
                }
                if (meeting[1] == person && !visited[meeting[0]]) {
                    queue.offer(meeting[0]);
                    visited[meeting[0]] = true;
                }
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<>();
        res.add(firstPerson);
        for (int i = 0; i < meetings.length; i++) {
            if (res.contains(meetings[i][0]) && !res.contains(meetings[i][1])) {
                res.add(meetings[i][1]);
            }
            if (res.contains(meetings[i][1]) && !res.contains(meetings[i][0])) {
                res.add(meetings[i][0]);
            }
        }
        return res;

=======

        List<Integer> result = new ArrayList<>();
        result.add(firstPerson);
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<Integer>());
        }
        for (int[] meeting : meetings) {
            graph.get(meeting[0]).add(meeting[1]);
            graph.get(meeting[1]).add(meeting[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.add(firstPerson);
        Set<Integer> visited = new HashSet<>();
        visited.add(firstPerson);
        while (!queue.isEmpty()) {
            int current = queue.poll();
            for (int neighbor : graph.get(current)) {
                if (!visited.contains(neighbor)) {
                    visited.add(neighbor);
                    queue.add(neighbor);
                    result.add(neighbor);
                }
            }
        }
        Collections.sort(result);
        return result;

=======

        int[] secret = new int[n];
        Arrays.fill(secret, -1);
        secret[firstPerson] = 0;
        for (int[] meeting : meetings) {
            int x = meeting[0];
            int y = meeting[1];
            int time = meeting[2];
            if (secret[x] == -1 && secret[y] == -1) {
                continue;
            }
            if (secret[x] != -1) {
                secret[y] = time;
            }
            if (secret[y] != -1) {
                secret[x] = time;
            }
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (secret[i] != -1) {
                result.add(i);
            }
        }
        return result;

=======

        List<Integer> result = new ArrayList<>();
        result.add(firstPerson);
        Set<Integer> set = new HashSet<>();
        set.add(firstPerson);
        for (int i = 0; i < meetings.length; i++) {
            if (set.contains(meetings[i][0])) {
                result.add(meetings[i][1]);
                set.add(meetings[i][1]);
            }
            if (set.contains(meetings[i][1])) {
                result.add(meetings[i][0]);
                set.add(meetings[i][0]);
            }
        }
        return result;
    }
}

=======

        List<Integer> ans = new ArrayList<>();
        ans.add(firstPerson);
        for (int[] meeting : meetings) {
            if (ans.contains(meeting[0])) {
                ans.add(meeting[1]);
            }
            if (ans.contains(meeting[1])) {
                ans.add(meeting[0]);
            }
        }
        Collections.sort(ans);
        return ans;

=======

        List<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[n];
        visited[firstPerson] = true;
        result.add(firstPerson);
        for (int[] meeting : meetings) {
            if (visited[meeting[0]] && !visited[meeting[1]]) {
                result.add(meeting[1]);
                visited[meeting[1]] = true;
            } else if (visited[meeting[1]] && !visited[meeting[0]]) {
                result.add(meeting[0]);
                visited[meeting[0]] = true;
            }
        }
        return result;

=======

        List<Integer> res = new ArrayList<Integer>();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
            arr[i] = i;
        }
        for(int[] m : meetings) {
            int x = m[0];
            int y = m[1];
            int time = m[2];
            int fx = find(arr, x);
            int fy = find(arr, y);
            if(fx == fy) {
                continue;
            }
            int fxp = find(arr, firstPerson);
            if(fx == fxp) {
                arr[fx] = fy;
            } else if(fy == fxp) {
                arr[fy] = fx;
            }
        }
        int fp = find(arr, firstPerson);
        for(int i = 0; i < n; i++) {
            if(find(arr, i) == fp) {
                res.add(i);
            }
        }
        return res;
    }
    
    private int find(int[] arr, int x) {
        if(arr[x] == x) {
            return x;
        }
        return arr[x] = find(arr, arr[x]);
