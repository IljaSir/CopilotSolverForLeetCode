Synthesizing 10/10 solutions

=======

        int n = nums.length;
        long[] sums = new long[n + 1];
        for (int i = 0; i < n; i++) {
            sums[i + 1] = sums[i] + nums[i];
        }
        int ans = n + 1;
        Deque<Integer> deque = new LinkedList<>();
        for (int i = 0; i < sums.length; i++) {
            while (!deque.isEmpty() && sums[i] <= sums[deque.getLast()]) {
                deque.removeLast();
            }
            while (!deque.isEmpty() && sums[i] - sums[deque.getFirst()] >= k) {
                ans = Math.min(ans, i - deque.removeFirst());
            }
            deque.addLast(i);
        }
        return ans < n + 1 ? ans : -1;

=======

        int N = nums.length;
        int[] P = new int[N+1];
        for (int i = 0; i < N; ++i)
            P[i+1] = P[i] + nums[i];

        // Want smallest y-x with Py - Px >= K
        int ans = N+1; // N+1 is impossible
        Deque<Integer> monoq = new LinkedList(); //opt(y) candidates, represented as indices of P

        for (int y = 0; y < P.length; ++y) {
            // Want opt(y) = largest x with P[x] <= P[y] - K;
            while (!monoq.isEmpty() && P[y] <= P[monoq.getLast()])
                monoq.removeLast();
            while (!monoq.isEmpty() && P[y] >= P[monoq.getFirst()] + k)
                ans = Math.min(ans, y - monoq.removeFirst());

            monoq.addLast(y);
        }

        return ans < N+1 ? ans : -1;

=======

        int n = nums.length;
        long[] p = new long[n+1];
        for (int i = 0; i < n; ++i)
            p[i+1] = p[i] + (long) nums[i];

        // Want smallest y-x with Py - Px >= k
        int ans = n+1; // n+1 is impossible
        Deque<Integer> monoq = new ArrayDeque(); //opt(y) candidates, represented as indices of P
        for (int y = 0; y < p.length; ++y) {
            // Want opt(y) = largest x with Px <= Py - k;
            while (!monoq.isEmpty() && p[y] <= p[monoq.getLast()])
                monoq.removeLast();

            while (!monoq.isEmpty() && p[y] >= p[monoq.getFirst()] + k)
                ans = Math.min(ans, y - monoq.removeFirst());

            monoq.addLast(y);
        }

        return ans < n+1 ? ans : -1;

=======

        int n = nums.length;
        long[] sum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        Deque<Integer> deque = new ArrayDeque<>();
        int res = n + 1;
        for (int i = 0; i < sum.length; i++) {
            while (!deque.isEmpty() && sum[i] <= sum[deque.getLast()]) {
                deque.removeLast();
            }
            while (!deque.isEmpty() && sum[i] >= sum[deque.getFirst()] + k) {
                res = Math.min(res, i - deque.removeFirst());
            }
            deque.addLast(i);
        }
        return res <= n ? res : -1;

=======

        int n = nums.length;
        long[] preSum = new long[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        Deque<Integer> deque = new ArrayDeque<>();
        int res = n + 1;
        for (int i = 0; i <= n; i++) {
            while (!deque.isEmpty() && preSum[i] - preSum[deque.getFirst()] >= k) {
                res = Math.min(res, i - deque.pollFirst());
            }
            while (!deque.isEmpty() && preSum[i] <= preSum[deque.getLast()]) {
                deque.pollLast();
            }
            deque.addLast(i);
        }
        return res == n + 1 ? -1 : res;

=======

        int n = nums.length;
        int[] p = new int[n+1];
        for (int i = 0; i < n; ++i)
            p[i+1] = p[i] + nums[i];

        // Want smallest y-x with Py - Px >= k
        int ans = n+1; // n+1 is impossible
        Deque<Integer> monoq = new LinkedList(); //opt(y) candidates, represented as indices of P
        for (int y = 0; y < p.length; ++y) {
            // Want opt(y) = largest x with Px <= Py - k;
            while (monoq.size() > 0 && p[y] <= p[monoq.getLast()])
                monoq.removeLast();
            while (monoq.size() > 0 && p[y] >= p[monoq.getFirst()] + k)
                ans = Math.min(ans, y - monoq.removeFirst());

            monoq.addLast(y);
        }

        return ans < n+1 ? ans : -1;

=======

        int n = nums.length;
        int[] prefix = new int[n+1];
        for (int i = 0; i < n; i++) {
            prefix[i+1] = prefix[i] + nums[i];
        }
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        int ans = n + 1;
        for (int i = 0; i <= n; i++) {
            while (!queue.isEmpty() && prefix[i] - prefix[queue.peekFirst()] >= k) {
                ans = Math.min(ans, i - queue.pollFirst());
            }
            while (!queue.isEmpty() && prefix[i] <= prefix[queue.peekLast()]) {
                queue.pollLast();
            }
            queue.offerLast(i);
        }
        return ans == n + 1 ? -1 : ans;

=======

        int n = nums.length;
        int[] prefix = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        int ans = n + 1;
        Deque<Integer> deque = new LinkedList<>();
        for (int i = 0; i <= n; ++i) {
            while (!deque.isEmpty() && prefix[i] <= prefix[deque.getLast()]) {
                deque.removeLast();
            }
            while (!deque.isEmpty() && prefix[i] >= prefix[deque.getFirst()] + k) {
                ans = Math.min(ans, i - deque.removeFirst());
            }
            deque.addLast(i);
        }
        return ans == n + 1 ? -1 : ans;

=======

        int n = nums.length;
        int[] prefixSum = new int[n+1];
        for (int i=0; i<n; i++) {
            prefixSum[i+1] = prefixSum[i] + nums[i];
        }
        int minLen = n+1;
        Deque<Integer> q = new ArrayDeque<>();
        for (int i=0; i<prefixSum.length; i++) {
            while (!q.isEmpty() && prefixSum[i] - prefixSum[q.peekFirst()] >= k) {
                minLen = Math.min(minLen, i - q.pollFirst());
            }
            while (!q.isEmpty() && prefixSum[i] <= prefixSum[q.peekLast()]) {
                q.pollLast();
            }
            q.offerLast(i);
        }
        return minLen == n+1 ? -1 : minLen;

=======

        if (nums.length == 0) return -1;
        int[] sum = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        Deque<Integer> deque = new LinkedList<>();
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < sum.length; i++) {
            while (!deque.isEmpty() && sum[i] - sum[deque.peekFirst()] >= k) {
                res = Math.min(res, i - deque.pollFirst());
            }
            while (!deque.isEmpty() && sum[i] <= sum[deque.peekLast()]) {
                deque.pollLast();
            }
            deque.offerLast(i);
        }
        return res == Integer.MAX_VALUE ? -1 : res;
