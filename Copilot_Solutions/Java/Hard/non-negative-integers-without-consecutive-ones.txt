Synthesizing 10/10 solutions

=======

        int[] dp = new int[32];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 32; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int res = 0;
        int k = 30;
        int pre = 0;
        while (k >= 0) {
            if (((n >> k) & 1) == 1) {
                res += dp[k];
                if (pre == 1) {
                    res--;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            k--;
        }
        return res + 1;

=======

        int[] dp = new int[31];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 31; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int prevBit = 0;
        int ans = 0;
        for (int i = 29; i >= 0; i--) {
            int val = 1 << i;
            if ((n & val) != 0) {
                n -= val;
                ans += dp[i + 1];
                if (prevBit == 1) {
                    ans--;
                    break;
                }
                prevBit = 1;
            } else {
                prevBit = 0;
            }
            if (i == 0) {
                ans++;
            }
        }
        return ans;

=======

        int[] dp = new int[31];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < 31; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int pre = 0;
        int res = 0;
        for (int i = 29; i >= 0; i--) {
            int val = 1 << i;
            if ((n & val) != 0) {
                n -= val;
                res += dp[i + 1];
                if (pre == 1) {
                    res--;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            if (i == 0) {
                res++;
            }
        }
        return res;

=======

        int[] f = new int[32];
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; i++) {
            f[i] = f[i - 1] + f[i - 2];
        }
        int res = 0, k = 30, pre_bit = 0;
        while (k >= 0) {
            if (((n >> k) & 1) > 0) {
                res += f[k];
                if (pre_bit > 0) {
                    res--;
                    break;
                }
                pre_bit = 1;
            } else {
                pre_bit = 0;
            }
            k--;
        }
        return res + 1;

=======

        int[] f = new int[32];
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; i++) {
            f[i] = f[i - 1] + f[i - 2];
        }
        int ans = 0;
        int k = 30;
        int preBit = 0;
        while (k >= 0) {
            if (((n >> k) & 1) == 1) {
                ans += f[k];
                if (preBit == 1) {
                    ans--;
                    break;
                }
                preBit = 1;
            } else {
                preBit = 0;
            }
            k--;
        }
        return ans + 1;

=======

        int[] dp = new int[32];
        dp[0] = dp[1] = 1;
        for (int i = 2; i < 32; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int pre = 0, res = 0;
        for (int i = 30; i >= 0; i--) {
            int val = 1 << i;
            if ((n & val) != 0) {
                n -= val;
                res += dp[i + 1];
                if (pre == 1) {
                    res -= 1;
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            if (i == 0) {
                res += 1;
            }
        }
        return res;

=======

        int[] f = new int[32];
        f[0] = 1;
        f[1] = 2;
        for (int i = 2; i < 32; ++i) {
            f[i] = f[i - 1] + f[i - 2];
        }
        int ans = 0, k = 30, pre_bit = 0;
        while (k >= 0) {
            if (((n >> k) & 1) != 0) {
                ans += f[k];
                if (pre_bit == 1) {
                    --ans;
                    break;
                }
                pre_bit = 1;
            } else {
                pre_bit = 0;
            }
            --k;
        }
        return ans + 1;

=======

        int[][] dp = new int[32][2];
        dp[0][0] = 1;
        dp[0][1] = 1;
        for (int i = 1; i < 32; i++) {
            dp[i][0] = dp[i - 1][0] + dp[i - 1][1];
            dp[i][1] = dp[i - 1][0];
        }
        int i = 30, pre = 0, res = 0;
        while (i >= 0) {
            if (((n >> i) & 1) == 1) {
                res += dp[i][0] + dp[i][1];
                if (pre == 1) {
                    res -= dp[i][1];
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }
            i--;
        }
        return res + 1;

=======

        String s = Integer.toBinaryString(n);
        int len = s.length();
        int[] a = new int[len];
        int[] b = new int[len];
        a[0] = b[0] = 1;
        for (int i = 1; i < len; ++i) {
            a[i] = a[i - 1] + b[i - 1];
            b[i] = a[i - 1];
        }
        int ans = a[len - 1] + b[len - 1];
        for (int i = 1; i < len; ++i) {
            if (s.charAt(i - 1) == '1' && s.charAt(i) == '1') {
                break;
            } else if (s.charAt(i - 1) == '0' && s.charAt(i) == '0') {
                ans -= b[len - i - 1];
            }
        }
        return ans;

=======

        String s = Integer.toBinaryString(n);
        int l = s.length();
        int[] dp = new int[l];
        dp[0] = 1;
        dp[1] = 2;
        for (int i = 2; i < l; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        int res = 0;
        int pre = 0;
        for (int i = l - 1; i >= 0; i--) {
            if (s.charAt(i) == '1') {
                res += dp[i];
                if (pre == 1) {
                    return res;
                }
                pre = 1;
            } else {
                pre = 0;
            }
        }
        return res + 1;
