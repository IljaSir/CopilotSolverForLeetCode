Synthesizing 10/10 solutions

=======

        int[] bit = new int[100001];
        int cost = 0;
        for (int i = 0; i < instructions.length; i++) {
            cost += Math.min(get(bit, instructions[i] - 1), i - get(bit, instructions[i]));
            cost %= 1000000007;
            update(bit, instructions[i], 1);
        }
        return cost;
    }
    
    private void update(int[] bit, int i, int val) {
        while (i < bit.length) {
            bit[i] += val;
            i += i & -i;
        }
    }
    
    private int get(int[] bit, int i) {
        int sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= i & -i;
        }
        return sum;

=======

        int n = instructions.length;
        int mod = 1000000007;
        int[] tree = new int[100001];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int left = query(tree, instructions[i] - 1);
            int right = i - query(tree, instructions[i]);
            ans = (ans + Math.min(left, right)) % mod;
            update(tree, instructions[i]);
        }
        return ans;
    }

    private int query(int[] tree, int i) {
        int ans = 0;
        while (i > 0) {
            ans += tree[i];
            i -= i & -i;
        }
        return ans;
    }

    private void update(int[] tree, int i) {
        while (i < tree.length) {
            tree[i]++;
            i += i & -i;
        }

=======

        int mod = 1000000007;
        int max = 100001;
        int[] tree = new int[max];
        int res = 0;
        for (int i = 0; i < instructions.length; i++) {
            int left = query(tree, instructions[i] - 1);
            int right = i - query(tree, instructions[i]);
            res = (res + Math.min(left, right)) % mod;
            update(tree, instructions[i]);
        }
        return res;
    }
    
    public int query(int[] tree, int i) {
        int sum = 0;
        while (i > 0) {
            sum += tree[i];
            i -= i & (-i);
        }
        return sum;
    }
    
    public void update(int[] tree, int i) {
        while (i < tree.length) {
            tree[i]++;
            i += i & (-i);
        }

=======

        int res = 0;
        int mod = 1000000007;
        int[] tree = new int[100001];
        for (int i = 0; i < instructions.length; i++) {
            int left = query(tree, instructions[i] - 1);
            int right = i - query(tree, instructions[i]);
            res = (res + Math.min(left, right)) % mod;
            update(tree, instructions[i]);
        }
        return res;
    }
    
    public void update(int[] tree, int index) {
        while (index < tree.length) {
            tree[index]++;
            index += index & -index;
        }
    }
    
    public int query(int[] tree, int index) {
        int res = 0;
        while (index > 0) {
            res += tree[index];
            index -= index & -index;
        }
        return res;

=======

        int mod = 1000000007;
        int[] tree = new int[100001];
        int cost = 0;
        for (int i = 0; i < instructions.length; i++) {
            int val = instructions[i];
            int left = query(tree, val - 1);
            int right = i - query(tree, val);
            cost = (cost + Math.min(left, right)) % mod;
            update(tree, val);
        }
        return cost;
    }
    public int query(int[] tree, int index) {
        int sum = 0;
        while (index > 0) {
            sum += tree[index];
            index -= index & -index;
        }
        return sum;
    }
    public void update(int[] tree, int index) {
        while (index < tree.length) {
            tree[index] += 1;
            index += index & -index;
        }

=======

        int mod = (int)1e9+7;
        int n = instructions.length;
        int[] bit = new int[100001];
        int res = 0;
        for (int i = 0; i < n; i++) {
            int cost = Math.min(get(bit, instructions[i] - 1), i - get(bit, instructions[i]));
            res = (res + cost) % mod;
            update(bit, instructions[i], 1);
        }
        return res;
    }
    private void update(int[] bit, int x, int val) {
        for (int i = x; i < bit.length; i += i & -i) {
            bit[i] += val;
        }
    }
    private int get(int[] bit, int x) {
        int res = 0;
        for (int i = x; i > 0; i -= i & -i) {
            res += bit[i];
        }
        return res;

=======

        int[] nums = new int[100001];
        int cost = 0;
        for (int i = 0; i < instructions.length; i++) {
            int num = instructions[i];
            cost += Math.min(nums[num - 1], i - nums[num]);
            cost %= 1000000007;
            int j = num;
            while (j < 100001) {
                nums[j]++;
                j += j & -j;
            }
        }
        return cost;

=======

        int[] bit = new int[100001];
        int MOD = 1000000007;
        int res = 0;
        for (int i = 0; i < instructions.length; i++) {
            int cost = Math.min(get(bit, instructions[i] - 1), i - get(bit, instructions[i]));
            res = (res + cost) % MOD;
            update(bit, instructions[i]);
        }
        return res;
    }
    
    private int get(int[] bit, int i) {
        int sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= lowbit(i);
        }
        return sum;
    }
    
    private void update(int[] bit, int i) {
        while (i < bit.length) {
            bit[i] += 1;
            i += lowbit(i);
        }

=======

        int n = instructions.length;
        int[] bit = new int[100001];
        int cost = 0;
        for (int i = 0; i < n; i++) {
            int smaller = query(bit, instructions[i] - 1);
            int larger = i - query(bit, instructions[i]);
            cost += Math.min(smaller, larger);
            cost %= 1000000007;
            update(bit, instructions[i]);
        }
        return cost;
    }
    private void update(int[] bit, int i) {
        while (i < bit.length) {
            bit[i]++;
            i += i & -i;
        }
    }
    private int query(int[] bit, int i) {
        int sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= i & -i;
        }
        return sum;

=======

        int[] nums = new int[100001];
        int res = 0;
        int mod = 1000000007;
        for (int i = 0; i < instructions.length; ++i) {
            int l = 0;
            for (int j = 1; j < instructions[i]; ++j) {
                l += nums[j];
            }
            int r = i - l - nums[instructions[i]];
            res = (res + Math.min(l, r)) % mod;
            nums[instructions[i]] += 1;
        }
        return res;
