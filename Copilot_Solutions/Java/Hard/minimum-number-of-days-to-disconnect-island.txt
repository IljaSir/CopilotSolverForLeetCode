Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        if(count == 0 || count > 1){
            return 0;
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                    if(!check(grid)){
                        return 1;
                    }
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
    private void dfs(int[][] grid, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0){
            return;
        }
        grid[i][j] = 0;
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
    private boolean check(int[][] grid){
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        if(count == 0 || count > 1){
            return false;
        }
        return true;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int islands = 0;
        int[] parent = new int[m * n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    islands++;
                    parent[i * n + j] = i * n + j;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    for (int[] d : dir) {
                        int x = i + d[0];
                        int y = j + d[1];
                        if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                            union(parent, i * n + j, x * n + y);
                        }
                    }
                }
            }
        }
        if (islands == 0) {
            return 0;
        }
        if (islands == 1) {
            return 1;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    int newIslands = 0;
                    for (int k = 0; k < m * n; k++) {
                        parent[k] = k;
                    }
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            if (grid[k][l] == 1) {
                                newIslands++;
                                parent[k * n + l] = k * n + l;
                            }
                        }
                    }
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            if (grid[k

=======

        int m = grid.length, n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    dfs(grid, visited, i, j);
                    count++;
                }
            }
        }
        if (count > 1) return 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    visited = new boolean[m][n];
                    count = 0;
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            if (grid[k][l] == 1 && !visited[k][l]) {
                                dfs(grid, visited, k, l);
                                count++;
                            }
                        }
                    }
                    if (count > 1) return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    count++;
                    dfs(grid, i, j, dirs);
                }
            }
        }
        if (count == 0) {
            return 0;
        }
        if (count > 1) {
            return 1;
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    for (int[] dir : dirs) {
                        int x = i + dir[0];
                        int y = j + dir[1];
                        if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                            grid[i][j] = 1;
                            count = 0;
                            for (int a = 0; a < m; a++) {
                                for (int b = 0; b < n; b++) {
                                    if (grid[a][b] == 1) {
                                        count++;
                                        dfs(grid, a, b, dirs);
                                    }
                                }
                            }
                            if (count > 1) {
                                return 2;
                            }
                            grid[i][j] = 0;
                        }
                    }
                }
            }
        }
        return 2;
    }

    private void dfs(int[][] grid, int i, int j, int[][] dirs) {
        int m = grid.length;
        int n = grid[0].length;
        grid[i][j] = 0;
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                dfs(grid, x, y, dirs);
            }
        }

=======

        int n = grid.length;
        int m = grid[0].length;
        int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[][] visited = new int[n][m];
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && visited[i][j] == 0) {
                    count++;
                    if (count > 1) {
                        return 0;
                    }
                    dfs(grid, i, j, visited, dir);
                }
            }
        }
        if (count == 0) {
            return 0;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    visited = new int[n][m];
                    count = 0;
                    for (int k = 0; k < n; k++) {
                        for (int l = 0; l < m; l++) {
                            if (grid[k][l] == 1 && visited[k][l] == 0) {
                                count++;
                                if (count > 1) {
                                    return 1;
                                }
                                dfs(grid, k, l, visited, dir);
                            }
                        }
                    }
                    grid[i][j] = 1;
                }
            }
        }
        return 2;

=======

        int m = grid.length, n = grid[0].length;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    cnt++;
                    if (cnt > 1) return 0;
                    dfs(grid, i, j, dirs);
                }
            }
        }
        if (cnt == 0) return 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    grid[i][j] = 0;
                    cnt = 0;
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            if (grid[k][l] == 1) {
                                cnt++;
                                if (cnt > 1) return 1;
                                dfs(grid, k, l, dirs);
                            }
                        }
                    }
                    return 2;
                }
            }
        }
        return -1;
    }
    private void dfs(int[][] grid, int i, int j, int[][] dirs) {
        int m = grid.length, n = grid[0].length;
        grid[i][j] = 0;
        for (int[] dir : dirs) {
            int x = i + dir[0], y = j + dir[1];
            if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0) continue;
            dfs(grid, x, y, dirs);
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dirs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};
        boolean[][] visited = new boolean[m][n];
        int islandNum = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    islandNum++;
                    dfs(grid, visited, i, j, dirs);
                }
            }
        }
        if (islandNum > 1) return 0;
        if (islandNum == 0) return 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    for (int[] dir : dirs) {
                        int x = i + dir[0];
                        int y = j + dir[1];
                        if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0) {
                            return 1;
                        }
                    }
                }
            }
        }
        return 2;
    }
    
    private void dfs(int[][] grid, boolean[][] visited, int i, int j, int[][] dirs) {
        visited[i][j] = true;
        for (int[] dir : dirs) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (x < 0 || x >= grid.length || y < 0 || y >= grid[0].length || visited[x][y] || grid[x][y] == 0) continue;
            dfs(grid, visited, x, y, dirs);
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[] id = new int[m * n];
        int[] size = new int[m * n];
        for (int i = 0; i < m * n; i++) {
            id[i] = i;
            size[i] = 1;
        }
        int count = 0;
        int land = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    land++;
                    for (int[] d : dir) {
                        int x = i + d[0];
                        int y = j + d[1];
                        if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                            union(id, size, i * n + j, x * n + y);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    count++;
                    if (count == 1) {
                        grid[i][j] = 0;
                        int[] id2 = new int[m * n];
                        int[] size2 = new int[m * n];
                        for (int k = 0; k < m * n; k++) {
                            id2[k] = k;
                            size2[k] = 1;
                        }
                        int count2 = 0;
                        int land2 = 0;
                        for (int k = 0; k < m; k++) {
                            for (int l = 0; l < n; l++) {
                                if (grid[k][l] == 1) {
                                    land2++;
                                    for (int[] d : dir) {
                                        int x = k + d[0];
                                        int y = l + d[1];
                                        if (x >= 0 && x < m && y >= 0 && y < n && grid

=======

        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        int[][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    count++;
                    if(count > 1) return 0;
                    dfs(grid, i, j, dirs);
                }
            }
        }
        if(count == 0) return 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    grid[i][j] = 0;
                    count = 0;
                    for(int k=0; k<m; k++){
                        for(int l=0; l<n; l++){
                            if(grid[k][l] == 1){
                                count++;
                                if(count > 1) return 1;
                                dfs(grid, k, l, dirs);
                            }
                        }
                    }
                    return 2;
                }
            }
        }
        return 0;
    }
    private void dfs(int[][] grid, int i, int j, int[][] dirs){
        int m = grid.length;
        int n = grid[0].length;
        grid[i][j] = 0;
        for(int[] dir: dirs){
            int x = i + dir[0];
            int y = j + dir[1];
            if(x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0) continue;
            dfs(grid, x, y, dirs);
        }

=======

        int m = grid.length, n = grid[0].length;
        if (m == 0 || n == 0) return 0;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        int[][] d = new int[m][n];
        int[][] g = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                d[i][j] = grid[i][j];
                g[i][j] = grid[i][j];
            }
        }
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (g[i][j] == 1) {
                    dfs(g, i, j, dirs);
                    cnt++;
                }
            }
        }
        if (cnt > 1) return 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (d[i][j] == 1) {
                    d[i][j] = 0;
                    cnt = 0;
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            g[k][l] = d[k][l];
                        }
                    }
                    for (int k = 0; k < m; k++) {
                        for (int l = 0; l < n; l++) {
                            if (g[k][l] == 1) {
                                dfs(g, k, l, dirs);
                                cnt++;
                            }
                        }
                    }
                    if (cnt > 1) return 1;
                    d[i][j] = 1;
                }
            }
        }
        return 2;
