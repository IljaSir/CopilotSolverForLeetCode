Synthesizing 10/10 solutions

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < ideas.length; i++) {
            for (int j = 0; j < ideas.length; j++) {
                if (i != j) {
                    String s1 = ideas[i];
                    String s2 = ideas[j];
                    String s = (s2.charAt(0) + s1.substring(1)) + " " + (s1.charAt(0) + s2.substring(1));
                    set.add(s);
                }
            }
        }
        return set.size();

=======

        int n = ideas.length;
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                String s1 = ideas[i];
                String s2 = ideas[j];
                if (s1.charAt(0) != s2.charAt(0)) {
                    String newS1 = s2.charAt(0) + s1.substring(1);
                    String newS2 = s1.charAt(0) + s2.substring(1);
                    if (!set.contains(newS1) && !set.contains(newS2)) {
                        set.add(newS1);
                        set.add(newS2);
                    }
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>(Arrays.asList(ideas));
        long result = 0;
        for (int i = 0; i < ideas.length; i++) {
            for (int j = i + 1; j < ideas.length; j++) {
                char[] chars = ideas[i].toCharArray();
                char temp = chars[0];
                chars[0] = ideas[j].charAt(0);
                String newString = new String(chars);
                if (!set.contains(newString)) {
                    result++;
                }
                chars[0] = temp;
                chars = ideas[j].toCharArray();
                chars[0] = ideas[i].charAt(0);
                newString = new String(chars);
                if (!set.contains(newString)) {
                    result++;
                }
            }
        }
        return result;

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < ideas.length; i++) {
            for (int j = i + 1; j < ideas.length; j++) {
                String name = ideas[i].charAt(0) + ideas[j].substring(1) + " " + ideas[j].charAt(0) + ideas[i].substring(1);
                set.add(name);
            }
        }
        return set.size();

=======

        int n = ideas.length;
        HashSet<String> set = new HashSet<String>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                String str1 = ideas[i];
                String str2 = ideas[j];
                char c1 = str1.charAt(0);
                char c2 = str2.charAt(0);
                str1 = c2 + str1.substring(1);
                str2 = c1 + str2.substring(1);
                if (!set.contains(str1) && !set.contains(str2)) {
                    set.add(str1);
                    set.add(str2);
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for(int i = 0; i < ideas.length; i++){
            for(int j = 0; j < ideas.length; j++){
                if(i == j) continue;
                String s1 = ideas[i].substring(0, 1) + ideas[j].substring(1);
                String s2 = ideas[j].substring(0, 1) + ideas[i].substring(1);
                if(!set.contains(s1) && !set.contains(s2)) set.add(s1 + " " + s2);
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<String>();
        for(int i=0;i<ideas.length;i++){
            for(int j=i+1;j<ideas.length;j++){
                String s1 = ideas[i];
                String s2 = ideas[j];
                String s3 = s2.charAt(0)+s1.substring(1);
                String s4 = s1.charAt(0)+s2.substring(1);
                if(!set.contains(s3) && !set.contains(s4)){
                    set.add(s3);
                    set.add(s4);
                }
            }
        }
        return set.size();

=======

        int n = ideas.length;
        long ans = 0;
        int[] count = new int[26];
        for (String idea : ideas) {
            count[idea.charAt(0) - 'a']++;
        }
        for (String idea : ideas) {
            ans += count[idea.charAt(0) - 'a'] - 1;
        }
        return ans;

=======

        Set<String> set = new HashSet<>();
        for (String idea : ideas) {
            for (String other : ideas) {
                if (idea.equals(other)) {
                    continue;
                }
                String newName = other.substring(0, 1) + idea.substring(1) + " " + idea.substring(0, 1) + other.substring(1);
                set.add(newName);
            }
        }
        return set.size();

=======

        if (ideas.length == 0) {
            return 0;
        }
        int len = ideas.length;
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            int val = 0;
            for (int j = 0; j < ideas[i].length(); j++) {
                val += ideas[i].charAt(j) - 'a' + 1;
            }
            arr[i] = val;
        }
        Arrays.sort(arr);
        long res = 0;
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                int val = arr[i] + arr[j];
                int left = j + 1;
                int right = len - 1;
                while (left <= right) {
                    int mid = (left + right) / 2;
                    if (arr[mid] == val) {
                        res++;
                        break;
                    } else if (arr[mid] > val) {
                        right = mid - 1;
                    } else {
                        left = mid + 1;
                    }
                }
            }
        }
        return res;
