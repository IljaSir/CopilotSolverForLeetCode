Synthesizing 9/10 solutions (Duplicates hidden)

=======

        if (n1 == 0) {
            return 0;
        }
        int s1Count = 0, index = 0, s2Count = 0;
        int[] nextIndex = new int[s2.length() + 1];
        int[] repeatCount = new int[s2.length() + 1];
        while (true) {
            s1Count++;
            for (int i = 0; i < s1.length(); i++) {
                if (s1.charAt(i) == s2.charAt(index)) {
                    index++;
                    if (index == s2.length()) {
                        index = 0;
                        s2Count++;
                    }
                }
            }
            if (s1Count == n1) {
                return s2Count / n2;
            }
            if (nextIndex[index] != 0) {
                int s1CountDiff = s1Count - nextIndex[index];
                int s2CountDiff = s2Count - repeatCount[index];
                int patternCount = (n1 - s1Count) / s1CountDiff;
                s1Count += s1CountDiff * patternCount;
                s2Count += s2CountDiff * patternCount;
            } else {
                nextIndex[index] = s1Count;
                repeatCount[index] = s2Count;
            }
        }

=======

        int[] count = new int[s2.length() + 1];
        int[] next = new int[s2.length() + 1];
        int j = 0, cnt = 0;
        for (int k = 1; k <= n1; ++k) {
            for (int i = 0; i < s1.length(); ++i) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    ++j;
                    if (j == s2.length()) {
                        j = 0;
                        ++cnt;
                    }
                }
            }
            count[k] = cnt;
            next[k] = j;
            for (int start = 0; start < k; ++start) {
                if (next[start] == j) {
                    int prefixCount = count[start];
                    int patternCount = (count[k] - count[start]) * ((n1 - start) / (k - start));
                    int suffixCount = count[start + (n1 - start) % (k - start)] - count[start];
                    return (prefixCount + patternCount + suffixCount) / n2;
                }
            }
        }
        return count[n1] / n2;

=======

        int[] rep = new int[s2.length() + 1];
        int[] next = new int[s2.length() + 1];
        int j = 0, count = 0;
        for (int k = 1; k <= n1; k++) {
            for (int i = 0; i < s1.length(); i++) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    j++;
                    if (j == s2.length()) {
                        j = 0;
                        count++;
                    }
                }
            }
            rep[k] = count;
            next[k] = j;
            for (int start = 0; start < k; start++) {
                if (next[start] == j) {
                    int prefixCount = rep[start];
                    int patternCount = (rep[k] - rep[start]) * ((n1 - start) / (k - start));
                    int suffixCount = rep[start + (n1 - start) % (k - start)] - rep[start];
                    return (prefixCount + patternCount + suffixCount) / n2;
                }
            }
        }
        return rep[n1] / n2;

=======

        int i = 0, j = 0;
        int count = 0;
        while (i < n1) {
            if (s1.charAt(j) == s2.charAt(count)) {
                count++;
                if (count == s2.length()) {
                    count = 0;
                }
            }
            j++;
            if (j == s1.length()) {
                j = 0;
                i++;
            }
        }
        return count / n2;

=======

        int[] count = new int[s2.length()];
        int[] next = new int[s2.length()];
        int j = 0;
        int c = 0;
        for (int k = 1; k <= n1; k++) {
            for (int i = 0; i < s1.length(); i++) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    j++;
                    if (j == s2.length()) {
                        j = 0;
                        c++;
                    }
                }
            }
            count[k] = c;
            next[k] = j;
            for (int start = 0; start < k; start++) {
                if (next[start] == j) {
                    int prefixCount = count[start];
                    int patternCount = (count[k] - count[start]) * ((n1 - start) / (k - start));
                    int suffixCount = count[start + (n1 - start) % (k - start)] - count[start];
                    return (prefixCount + patternCount + suffixCount) / n2;
                }
            }
        }
        return count[n1] / n2;

=======

        int p1 = 0, p2 = 0;
        int[] count = new int[s2.length()];
        int[] next = new int[s2.length()];
        while (p1 < s1.length() * n1) {
            for (int i = 0; i < s1.length(); ++i) {
                if (s1.charAt(i) == s2.charAt(p2)) {
                    p2++;
                    if (p2 == s2.length()) {
                        p2 = 0;
                        count[p1 % s2.length()]++;
                    }
                }
            }
            p1++;
            next[p1 % s2.length()] = p2;
            if (p1 % s2.length() == p2) {
                int cycle = (s1.length() * n1 - p1) / (p1 - next[p1 % s2.length()]);
                p1 += cycle * (p1 - next[p1 % s2.length()]);
                p2 += cycle * (p2 - count[p1 % s2.length()]);
            }
        }
        return count[(s1.length() * n1 - 1) % s2.length()] / n2;

=======

        int i = 0, j = 0, cnt = 0;
        int[] next = new int[s2.length()];
        int[] repeat = new int[s2.length()];
        while (i < n1) {
            if (s1.charAt(j) == s2.charAt(cnt)) {
                ++cnt;
                if (cnt == s2.length()) {
                    cnt = 0;
                    ++repeat[i];
                }
            }
            ++j;
            if (j == s1.length()) {
                j = 0;
                ++i;
                next[i] = cnt;
            }
        }
        int ans = repeat[n1] / n2;
        int rest = repeat[n1] % n2;
        int start = 0, end = 0;
        for (int k = 0; k < n1; ++k) {
            if (next[k] == rest) {
                start = k;
                break;
            }
        }
        for (int k = n1 - 1; k >= 0; --k) {
            if (next[k] == rest) {
                end = k;
                break;
            }
        }
        ans += (repeat[end] - repeat[start]) / n2;
        return ans;

=======

        int i = 0;
        int j = 0;
        int count = 0;
        int[] countArr = new int[s1.length() + 1];
        int[] nextIndexArr = new int[s1.length() + 1];
        while (i < n1) {
            for (int k = 0; k < s1.length(); k++) {
                if (s1.charAt(k) == s2.charAt(j)) {
                    j++;
                    if (j == s2.length()) {
                        j = 0;
                        count++;
                    }
                }
            }
            i++;
            countArr[i] = count;
            nextIndexArr[i] = j;
            for (int k = 0; k < i; k++) {
                if (nextIndexArr[k] == j) {
                    int prefixCount = countArr[k];
                    int patternCount = (countArr[i] - countArr[k]) * ((n1 - k) / (i - k));
                    int suffixCount = countArr[k + (n1 - k) % (i - k)] - countArr[k];
                    return (prefixCount + patternCount + suffixCount) / n2;
                }
            }
        }
        return count / n2;
