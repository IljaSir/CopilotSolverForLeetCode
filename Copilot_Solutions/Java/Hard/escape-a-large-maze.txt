Synthesizing 8/10 solutions

=======

        int[][] grid = new int[1000000][1000000];
        for (int i = 0; i < blocked.length; i++) {
            grid[blocked[i][0]][blocked[i][1]] = -1;
        }
        return bfs(grid, source, target) && bfs(grid, target, source);
    }

    private boolean bfs(int[][] grid, int[] source, int[] target) {
        int[][] dirs = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        Queue<int[]> q = new LinkedList<>();
        q.offer(source);
        grid[source[0]][source[1]] = 1;
        int count = 0;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            count++;
            if (count > 20000) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                if (x >= 0 && x < 1000000 && y >= 0 && y < 1000000 && grid[x][y] == 0) {
                    if (x == target[0] && y == target[1]) {
                        return true;
                    }
                    grid[x][y] = 1;
                    q.offer(new int[]{x, y});
                }
            }
        }
        return false;

=======

        Set<String> block = new HashSet<>();
        for (int[] b : blocked) {
            block.add(b[0] + "," + b[1]);
        }
        return bfs(block, source[0], source[1], target[0], target[1]) && bfs(block, target[0], target[1], source[0], source[1]);
    }
    private boolean bfs(Set<String> block, int sx, int sy, int tx, int ty) {
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{sx, sy});
        Set<String> visited = new HashSet<>();
        visited.add(sx + "," + sy);
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            if (cur[0] == tx && cur[1] == ty) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                if (x < 0 || x >= 1e6 || y < 0 || y >= 1e6 || visited.contains(x + "," + y) || block.contains(x + "," + y)) {
                    continue;
                }
                q.offer(new int[]{x, y});
                visited.add(x + "," + y);
            }
        }
        return false;

=======

        if (blocked == null || blocked.length == 0) {
            return true;
        }
        Set<String> blockSet = new HashSet<>();
        for (int[] block : blocked) {
            blockSet.add(block[0] + "," + block[1]);
        }
        return bfs(blockSet, source, target) && bfs(blockSet, target, source);
    }

    private boolean bfs(Set<String> blockSet, int[] source, int[] target) {
        int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(source);
        Set<String> visited = new HashSet<>();
        visited.add(source[0] + "," + source[1]);
        int count = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == target[0] && cur[1] == target[1]) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                if (x < 0 || x >= 1000000 || y < 0 || y >= 1000000 || blockSet.contains(x + "," + y) || visited.contains(x + "," + y)) {
                    continue;
                }
                queue.offer(new int[]{x, y});
                visited.add(x + "," + y);
                count++;
                if (count >= 20000) {
                    return true;
                }
            }
        }
        return false;

=======

        if (blocked.length == 0) {
            return true;
        }
        Set<String> blockSet = new HashSet<>();
        for (int[] block : blocked) {
            blockSet.add(block[0] + "," + block[1]);
        }
        return bfs(blockSet, source, target) && bfs(blockSet, target, source);
    }
    private boolean bfs(Set<String> blockSet, int[] source, int[] target) {
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(source);
        Set<String> visited = new HashSet<>();
        visited.add(source[0] + "," + source[1]);
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == target[0] && cur[1] == target[1]) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                String key = x + "," + y;
                if (x < 0 || x >= 1000000 || y < 0 || y >= 1000000 || blockSet.contains(key) || visited.contains(key)) {
                    continue;
                }
                queue.offer(new int[]{x, y});
                visited.add(key);
            }
        }
        return false;

=======

        if (blocked.length == 0) return true;
        Set<String> blockSet = new HashSet<>();
        for (int[] block : blocked) {
            blockSet.add(block[0] + "," + block[1]);
        }
        return bfs(blockSet, source, target) && bfs(blockSet, target, source);
    }
    
    private boolean bfs(Set<String> blockSet, int[] source, int[] target) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(source);
        int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Set<String> visited = new HashSet<>();
        visited.add(source[0] + "," + source[1]);
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            for (int[] dir : dirs) {
                int nx = cur[0] + dir[0];
                int ny = cur[1] + dir[1];
                if (nx >= 0 && nx < 1e6 && ny >= 0 && ny < 1e6 && !visited.contains(nx + "," + ny) && !blockSet.contains(nx + "," + ny)) {
                    if (nx == target[0] && ny == target[1]) return true;
                    queue.offer(new int[]{nx, ny});
                    visited.add(nx + "," + ny);
                    if (visited.size() > 20000) return true;
                }
            }
        }
        return false;

=======

        Set<Long> blockedSet = new HashSet<>();
        for (int[] b : blocked) {
            blockedSet.add((long)b[0] << 32 | b[1]);
        }
        return bfs(blockedSet, source[0], source[1], target[0], target[1]) && bfs(blockedSet, target[0], target[1], source[0], source[1]);
    }
    
    private boolean bfs(Set<Long> blockedSet, int sx, int sy, int tx, int ty) {
        int[][] dirs = {{0,1}, {1,0}, {0,-1}, {-1,0}};
        Queue<int[]> queue = new LinkedList<>();
        Set<Long> visited = new HashSet<>();
        queue.offer(new int[]{sx, sy});
        visited.add((long)sx << 32 | sy);
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == tx && cur[1] == ty) {
                return true;
            }
            for (int[] dir : dirs) {
                int nx = cur[0] + dir[0];
                int ny = cur[1] + dir[1];
                long key = (long)nx << 32 | ny;
                if (nx < 0 || nx >= 1_000_000 || ny < 0 || ny >= 1_000_000 || blockedSet.contains(key) || visited.contains(key)) {
                    continue;
                }
                queue.offer(new int[]{nx, ny});
                visited.add(key);
                if (visited.size() > 20000) {
                    return true;
                }
            }
        }
        return false;

=======

        if (blocked.length == 0) {
            return true;
        }
        Set<String> blockedSet = new HashSet<>();
        for (int[] block: blocked) {
            blockedSet.add(block[0] + "-" + block[1]);
        }
        return bfs(blockedSet, source, target) && bfs(blockedSet, target, source);
    }
    private boolean bfs(Set<String> blockedSet, int[] source, int[] target) {
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(source);
        Set<String> visited = new HashSet<>();
        visited.add(source[0] + "-" + source[1]);
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == target[0] && cur[1] == target[1]) {
                return true;
            }
            for (int[] dir: dirs) {
                int x = cur[0] + dir[0];
                int y = cur[1] + dir[1];
                if (x < 0 || x >= 1_000_000 || y < 0 || y >= 1_000_000 || visited.contains(x + "-" + y) || blockedSet.contains(x + "-" + y)) {
                    continue;
                }
                visited.add(x + "-" + y);
                queue.offer(new int[]{x, y});
                if (visited.size() >= 20000) {
                    return true;
                }
            }
        }
        return false;

=======

        if (blocked.length == 0) {
            return true;
        }
        int[][] graph = new int[1000000][1000000];
        for (int[] b : blocked) {
            graph[b[0]][b[1]] = -1;
        }
        return bfs(graph, source, target) && bfs(graph, target, source);
    }

    public boolean bfs(int[][] graph, int[] source, int[] target) {
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(source);
        Set<String> visited = new HashSet<>();
        visited.add(source[0] + "," + source[1]);
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            if (curr[0] == target[0] && curr[1] == target[1]) {
                return true;
            }
            for (int[] dir : dirs) {
                int x = curr[0] + dir[0];
                int y = curr[1] + dir[1];
                if (x >= 0 && x < 1000000 && y >= 0 && y < 1000000 && graph[x][y] != -1 && !visited.contains(x + "," + y)) {
                    queue.offer(new int[]{x, y});
                    visited.add(x + "," + y);
                }
            }
        }
        return false;
