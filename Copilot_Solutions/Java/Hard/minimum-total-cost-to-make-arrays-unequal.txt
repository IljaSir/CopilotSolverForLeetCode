Synthesizing 10/10 solutions

=======

        int n = nums1.length;
        long[][] dp = new long[n][3];
        for (int i = 0; i < n; i++) {
            dp[i][0] = dp[i][1] = dp[i][2] = 1000000000;
        }
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = 0;
        for (int i = 1; i < n; i++) {
            if (nums1[i] != nums1[i - 1] && nums1[i] != nums2[i - 1]) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][0]);
            }
            if (nums1[i] != nums1[i - 1] && nums1[i] != nums2[i - 1]) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][1]);
            }
            if (nums1[i] != nums1[i - 1] && nums1[i] != nums2[i - 1]) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][2]);
            }
            if (nums2[i] != nums1[i - 1] && nums2[i] != nums2[i - 1]) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][0] + i);
            }
            if (nums2[i] != nums1[i - 1] && nums2[i] != nums2[i - 1]) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][1] + i);
            }
            if (nums2[i] != nums1[i - 1] && nums2[i] != nums2[i - 1]) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][2] + i);
            }
            if (nums1[i] != nums1[i - 1] && nums2[i] != nums2[i - 1]) {
                dp[i][2] = Math.min(dp[i][2], dp[i - 1][0] + i);
            }
            if (nums1

=======

        int n = nums1.length;
        List<Integer> l1 = new ArrayList<>();
        List<Integer> l2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (nums1[i] != nums2[i]) {
                l1.add(nums1[i]);
                l2.add(nums2[i]);
            }
        }
        n = l1.size();
        if (n == 0) {
            return 0;
        }
        long[][] dp = new long[n][3];
        dp[0][0] = Math.min(l1.get(0), l2.get(0));
        dp[0][1] = Math.min(l1.get(0), l2.get(0)) + 1;
        dp[0][2] = Math.min(l1.get(0), l2.get(0)) + 1;
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.min(dp[i - 1][0], Math.min(dp[i - 1][1], dp[i - 1][2])) + Math.min(l1.get(i), l2.get(i));
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][1]) + Math.min(l1.get(i), l2.get(i)) + 1;
            dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][2]) + Math.min(l1.get(i), l2.get(i)) + 1;
        }
        return Math.min(dp[n - 1][0], Math.min(dp[n - 1][1], dp[n - 1][2]));
    }
}

=======

        int n = nums1.length;
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nums1[i] - 1;
            b[i] = nums2[i] - 1;
            c[i] = Math.min(a[i], b[i]);
            d[i] = Math.max(a[i], b[i]);
        }
        Arrays.sort(c);
        Arrays.sort(d);
        long ans = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long cur = 0;
            for (int j = 0; j < n; j++) {
                if (j < i) {
                    cur += c[j];
                } else {
                    cur += d[j] - i;
                }
            }
            ans = Math.min(ans, cur);
        }
        return ans;

=======

        int n = nums1.length;
        int[][] dp = new int[n][3];
        for (int i = 0; i < n; i++) {
            dp[i][0] = dp[i][1] = dp[i][2] = Integer.MAX_VALUE;
        }
        dp[0][0] = 0;
        dp[0][1] = 1;
        dp[0][2] = 1;
        for (int i = 1; i < n; i++) {
            if (nums1[i] != nums1[i - 1]) {
                dp[i][0] = dp[i - 1][0];
            }
            if (nums1[i] != nums2[i - 1]) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][1]);
            }
            if (nums1[i] != nums1[i - 1]) {
                dp[i][0] = Math.min(dp[i][0], dp[i - 1][2]);
            }
            if (nums2[i] != nums1[i - 1]) {
                dp[i][1] = dp[i - 1][0] + 1;
            }
            if (nums2[i] != nums2[i - 1]) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][1] + 1);
            }
            if (nums2[i] != nums1[i - 1]) {
                dp[i][1] = Math.min(dp[i][1], dp[i - 1][2] + 1);
            }
            if (nums1[i] != nums2[i - 1]) {
                dp[i][2] = dp[i - 1][0] + 1;
            }
            if (nums1[i] != nums1[i - 1]) {
                dp[i][2] = Math.min(dp[i][2], dp[i - 1][1] + 1);
            }
            if (nums1[i] != nums2[i - 1]) {
                dp[i][2] = Math.min(dp[i][2], dp[i - 1][2] + 1);
            }
        }
        long result = Long.MAX_VALUE;
        for (int i = 0; i < 3; i++) {

=======

        int n = nums1.length;
        int[] cnt = new int[n+1];
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                cnt[nums1[i]]++;
            } else {
                cnt[nums1[i]]++;
                cnt[nums2[i]]++;
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            if (cnt[i] == 0) {
                ans += 2;
            } else if (cnt[i] == 1) {
                ans += 1;
            }
        }
        return ans;

=======

        int n = nums1.length;
        long ans = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                ++map.getOrDefault(nums1[i], 0);
            } else {
                ++map.getOrDefault(nums1[i], 0);
                ++map.getOrDefault(nums2[i], 0);
            }
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int key : map.keySet()) {
            if (map.get(key) > 1) {
                pq.offer(map.get(key) - 1);
            }
        }
        int id = 1;
        while (!pq.isEmpty()) {
            int k = pq.poll();
            ans += (long) k * id;
            ++id;
        }
        return ans;

=======

        int n = nums1.length;
        long ans = 0;
        int[][] freq = new int[n + 1][2];
        for (int i = 0; i < n; i++) {
            if (nums1[i] == nums2[i]) {
                freq[nums1[i]][0]++;
                freq[nums1[i]][1]++;
            } else {
                freq[nums1[i]][0]++;
                freq[nums2[i]][1]++;
            }
        }
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            if (freq[i][0] == n && freq[i][1] == n) return -1;
            dp[i] = Math.min(freq[i][0], freq[i][1]);
        }
        for (int i = 1; i <= n; i++) {
            if (dp[i] == 0) {
                int min = Integer.MAX_VALUE;
                for (int j = 1; j <= n; j++) {
                    if (j != i) {
                        min = Math.min(min, dp[j]);
                    }
                }
                ans += min + i;
            } else {
                ans += i;
            }
        }
        return ans;

=======

        int n = nums1.length;
        long ans = 0;
        int[] a = new int[2 * n + 1];
        int[] b = new int[2 * n + 1];
        int[] c = new int[2 * n + 1];
        int[] d = new int[2 * n + 1];
        int[] e = new int[2 * n + 1];
        for (int i = 0; i < n; i++) {
            a[nums1[i]]++;
            b[nums2[i]]++;
            c[nums1[i] + nums2[i]]++;
            d[nums1[i] + nums2[i] + 1]++;
            e[nums1[i] + nums2[i] - 1]++;
        }
        int[] f = new int[2 * n + 1];
        for (int i = 1; i <= 2 * n; i++) {
            f[i] = f[i - 1] + c[i] + d[i] + e[i];
        }
        int[] g = new int[2 * n + 1];
        for (int i = 2 * n; i >= 1; i--) {
            g[i] = g[i + 1] + c[i] + d[i] + e[i];
        }
        int[] h = new int[2 * n + 1];
        for (int i = 1; i <= 2 * n; i++) {
            h[i] = h[i - 1] + a[i] + b[i];
        }
        int[] j = new int[2 * n + 1];
        for (int i = 2 * n; i >= 1; i--) {
            j[i] = j[i + 1] + a[i] + b[i];
        }
        for (int i = 1; i <= 2 * n; i++) {
            if (c[i] == 0) {
                continue;
            }
            int m = Math.min(Math.min(f[i - 1], g[i + 1]), Math.min(h[i - 1], j[i + 1]));
            if (m == f[i - 1] || m == g[i + 1]) {
                ans += m * (i - 1);

=======

        int n = nums1.length;
        int[] dp = new int[6];
        for (int i = 0; i < n; i++) {
            int[] ndp = new int[6];
            for (int j = 0; j < 6; j++) {
                ndp[j] = Integer.MAX_VALUE;
            }
            for (int j = 0; j < 6; j++) {
                for (int k = 0; k < 6; k++) {
                    if (nums1[i] != nums2[i]) {
                        if (nums1[i] != j && nums2[i] != k) {
                            ndp[k] = Math.min(ndp[k], dp[j] + k);
                        }
                    } else {
                        if (nums1[i] != j) {
                            ndp[k] = Math.min(ndp[k], dp[j] + k);
                        }
                    }
                }
            }
            dp = ndp;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < 6; i++) {
            res = Math.min(res, dp[i]);
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int n = nums1.length;
        long res = 0;
        int[] cnt = new int[n + 1];
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            if (nums1[i] != nums2[i]) {
                set.add(nums1[i]);
                set.add(nums2[i]);
                if (nums1[i] > nums2[i]) {
                    int tmp = nums1[i];
                    nums1[i] = nums2[i];
                    nums2[i] = tmp;
                }
            }
        }
        List<Integer> list = new ArrayList<>(set);
        Collections.sort(list);
        int m = list.size();
        int[] arr = new int[m];
        for (int i = 0; i < m; i++) {
            arr[i] = list.get(i);
        }
        for (int i = 0; i < n; i++) {
            if (nums1[i] == nums2[i]) {
                int idx = Arrays.binarySearch(arr, nums1[i]);
                if (idx > 0 && cnt[arr[idx - 1]] > 0) {
                    cnt[arr[idx - 1]]--;
                    res += nums1[i] - arr[idx - 1];
                } else if (idx + 1 < m && cnt[arr[idx + 1]] > 0) {
                    cnt[arr[idx + 1]]--;
                    res += nums1[i] - arr[idx + 1];
                } else {
                    cnt[nums1[i]]++;
                }
            } else {
                res += nums2[i] - nums1[i];
            }
        }
        return res;
