Synthesizing 10/10 solutions

=======

        int mod = 1000000007;
        int n = binary.length();
        long[] dp = new long[n];
        dp[0] = binary.charAt(0) == '0' ? 1 : 2;
        for (int i = 1; i < n; i++) {
            if (binary.charAt(i) == '0') {
                dp[i] = (dp[i - 1] * 2) % mod;
            } else {
                dp[i] = (dp[i - 1] * 2 + 1) % mod;
            }
        }
        return (int) dp[n - 1];

=======

        int mod = 1000000007;
        int n = binary.length();
        long[] dp = new long[n];
        dp[0] = binary.charAt(0) == '0' ? 1 : 2;
        int last = binary.charAt(0) == '0' ? 0 : -1;
        for (int i = 1; i < n; i++) {
            if (binary.charAt(i) == '0') {
                dp[i] = (dp[i - 1] * 2) % mod;
                last = i;
            } else {
                if (last < 0) {
                    dp[i] = (dp[i - 1] * 2 + 1) % mod;
                } else {
                    dp[i] = (dp[i - 1] * 2 - dp[last - 1] + mod) % mod;
                }
            }
        }
        return (int) dp[n - 1];

=======

        int mod = 1000000007;
        int n = binary.length();
        int[] dp = new int[n];
        dp[0] = binary.charAt(0) == '0' ? 1 : 2;
        int[] last = new int[2];
        last[0] = 0;
        last[1] = binary.charAt(0) == '0' ? 0 : 1;
        for (int i = 1; i < n; i++) {
            if (binary.charAt(i) == '0') {
                dp[i] = (dp[i - 1] + 1) % mod;
            } else {
                dp[i] = (dp[i - 1] * 2 - dp[last[0]] + 2) % mod;
            }
            last[binary.charAt(i) - '0'] = i;
        }
        return (dp[n - 1] + mod) % mod;

=======

        int mod = 1_000_000_007;
        int end0 = 0, end1 = 0;
        for (char c : binary.toCharArray()) {
            if (c == '0') {
                end0 = (end0 + end1) % mod;
            } else {
                end1 = (end0 + end1 + 1) % mod;
            }
        }
        return (end0 + end1 + (binary.indexOf('0') == -1 ? 1 : 0)) % mod;

=======

        int n = binary.length();
        int mod = 1000000007;
        int[] dp = new int[n];
        dp[0] = binary.charAt(0) == '0' ? 1 : 2;
        int one = binary.charAt(0) == '1' ? 1 : 0;
        for (int i = 1; i < n; i++) {
            if (binary.charAt(i) == '0') {
                dp[i] = dp[i - 1] * 2 % mod;
            } else {
                dp[i] = (dp[i - 1] * 2 - dp[i - 1] + 1 + mod) % mod;
                one++;
            }
        }
        return (dp[n - 1] + one) % mod;

=======

        int mod = 1000000007;
        long[] dp = new long[2];
        for (char c : binary.toCharArray()) {
            if (c == '1') {
                dp[1] = (dp[0] + dp[1] + 1) % mod;
            } else {
                dp[0] = (dp[0] + dp[1]) % mod;
            }
        }
        return (int) ((dp[0] + dp[1] + (binary.indexOf('0') == -1 ? 0 : 1)) % mod);

=======

        int[] dp = new int[2];
        dp[0] = 1;
        int mod = 1000000007;
        for (char c : binary.toCharArray()) {
            if (c == '1') {
                dp[1] = (dp[0] + dp[1]) % mod;
            } else {
                dp[0] = (dp[0] + dp[1]) % mod;
            }
        }
        return (dp[0] + dp[1] - 1 + mod) % mod;

=======

        int MOD = 1000000007;
        int[] dp = new int[2];
        int one = 0;
        for (char c : binary.toCharArray()) {
            if (c == '0') {
                dp[0] = (dp[0] + dp[1]) % MOD;
            } else {
                dp[1] = (dp[0] + dp[1] + 1) % MOD;
                one++;
            }
        }
        if (one == 0) {
            return 1;
        }
        return (dp[0] + dp[1] + 1) % MOD;

=======

        int n = binary.length();
        int mod = 1000000007;
        int dp[] = new int[n];
        int zero = 0;
        int one = 0;
        for (int i = 0; i < n; i++) {
            if (binary.charAt(i) == '0') {
                dp[i] = (one + 1) % mod;
                zero = (zero + dp[i]) % mod;
            } else {
                dp[i] = (zero + 1) % mod;
                one = (one + dp[i]) % mod;
            }
        }
        return (zero + one + (binary.charAt(n - 1) == '0' ? 1 : 0)) % mod;

=======

        int n = binary.length();
        int[] dp = new int[n];
        int[] last = new int[2];
        int MOD = 1000000007;
        Arrays.fill(last, -1);
        dp[0] = 1;
        last[binary.charAt(0) - '0'] = 0;
        for (int i = 1; i < n; i++) {
            int x = binary.charAt(i) - '0';
            if (x == 0) {
                dp[i] = dp[i - 1] * 2 % MOD;
            } else {
                dp[i] = dp[i - 1] * 2 % MOD;
                if (last[0] >= 0) {
                    dp[i] = (dp[i] + dp[last[0]] - 1) % MOD;
                }
            }
            last[x] = i;
        }
        if (last[0] >= 0) {
            dp[n - 1] = (dp[n - 1] + dp[last[0]] - 1) % MOD;
        }
        return dp[n - 1];
