Synthesizing 9/10 solutions

=======

        int n = positions.length;
        int[] xs = new int[n];
        int[] ys = new int[n];
        for (int i = 0; i < n; i++) {
            xs[i] = positions[i][0];
            ys[i] = positions[i][1];
        }
        return dfs(pieces, xs, ys, 0);
    }
    private int dfs(String[] pieces, int[] xs, int[] ys, int i) {
        if (i == pieces.length) {
            return 1;
        }
        int sum = 0;
        for (int j = 1; j <= 8; j++) {
            for (int k = 1; k <= 8; k++) {
                if (valid(pieces[i], xs, ys, i, j, k)) {
                    xs[i] = j;
                    ys[i] = k;
                    sum += dfs(pieces, xs, ys, i + 1);
                    xs[i] = 0;
                    ys[i] = 0;
                }
            }
        }
        return sum;
    }
    private boolean valid(String piece, int[] xs, int[] ys, int i, int x, int y) {
        if (piece.equals("rook")) {
            for (int j = 0; j < i; j++) {
                if (xs[j] == x || ys[j] == y) {
                    return false;
                }
            }
        } else if (piece.equals("queen")) {
            for (int j = 0; j < i; j++) {
                if (xs[j] == x || ys[j] == y || Math.abs(xs[j] - x) == Math.abs(ys[j] - y)) {
                    return false;
                }
            }
        } else {
            for (int j = 0; j < i; j++) {
                if (Math.abs(xs[j] - x) == Math.abs(ys[j] - y)) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = pieces.length;
        int[] p = new int[n];
        for (int i = 0; i < n; ++i) {
            if (pieces[i].equals("rook")) {
                p[i] = 0;
            } else if (pieces[i].equals("bishop")) {
                p[i] = 1;
            } else {
                p[i] = 2;
            }
        }
        int[][] pos = new int[n][2];
        for (int i = 0; i < n; ++i) {
            pos[i][0] = positions[i][0];
            pos[i][1] = positions[i][1];
        }
        int[][][] dp = new int[n][9][9];
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j <= 8; ++j) {
                for (int k = 1; k <= 8; ++k) {
                    if (i == 0) {
                        dp[i][j][k] = 1;
                    } else {
                        if (p[i] == 0) {
                            if (j == pos[i][0] || k == pos[i][1]) {
                                dp[i][j][k] = dp[i - 1][j][k];
                            } else {
                                dp[i][j][k] = dp[i - 1][j][k] + dp[i][j][k - 1];
                            }
                        } else if (p[i] == 1) {
                            if (j + k == pos[i][0] + pos[i][1] || j - k == pos[i][0] - pos[i][1]) {
                                dp[i][j][k] = dp[i - 1][j][k];
                            } else {
                                dp[i][j][k] = dp[i - 1][j][k] + dp[i][j][k - 1];
                            }
                        } else {
                            if (j + k == pos[i][0] + pos[i][1] || j - k == pos[i][0] - pos[i][1] || j == pos[i][0] || k == pos[i][1]) {
                                dp[i][j][k] = dp[i - 1][j][k];

=======

        int n = pieces.length;
        int[][] dirs = new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
        int[] pieceTypes = new int[n];
        for (int i = 0; i < n; i++) {
            pieceTypes[i] = pieces[i].equals("rook") ? 0 : pieces[i].equals("queen") ? 1 : 2;
        }
        int[] dx = new int[n];
        int[] dy = new int[n];
        int[] max = new int[n];
        int[] min = new int[n];
        int[] max2 = new int[n];
        int[] min2 = new int[n];
        int[] max3 = new int[n];
        int[] min3 = new int[n];
        for (int i = 0; i < n; i++) {
            dx[i] = positions[i][0];
            dy[i] = positions[i][1];
            max[i] = 8 - dx[i];
            min[i] = dx[i] - 1;
            max2[i] = 8 - dy[i];
            min2[i] = dy[i] - 1;
            max3[i] = Math.min(max[i], max2[i]);
            min3[i] = Math.min(min[i], min2[i]);
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int x = dx[i];
            int y = dy[i];
            int type = pieceTypes[i];
            int max1 = max[i];
            int min1 = min[i];
            int max21 = max2[i];
            int min21 = min2[i];
            int max31 = max3[i];
            int min31 = min3[i];
            if (type == 0 || type == 1) {
                res += max1 + min1 + max21 + min21;
            }
            if (type == 2 || type == 1) {
                res += max31 + min31;
            }
            for (int j = i + 1; j < n; j++) {
                int x2 = dx[j];
                int y2 =

=======

        int n = pieces.length;
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = pieces[i].equals("rook") ? 0 : pieces[i].equals("bishop") ? 1 : 2;
        }
        int[][][] dp = new int[n][8][8];
        dp[0][positions[0][0] - 1][positions[0][1] - 1] = 1;
        for (int i = 1; i < n; i++) {
            int x = positions[i][0] - 1, y = positions[i][1] - 1;
            if (p[i] == 0) {
                for (int j = 0; j < 8; j++) {
                    for (int k = 0; k < 8; k++) {
                        if (j == x || k == y) {
                            dp[i][j][k] = dp[i - 1][j][k];
                        }
                    }
                }
            } else if (p[i] == 1) {
                for (int j = 0; j < 8; j++) {
                    for (int k = 0; k < 8; k++) {
                        if (Math.abs(j - x) == Math.abs(k - y)) {
                            dp[i][j][k] = dp[i - 1][j][k];
                        }
                    }
                }
            } else {
                for (int j = 0; j < 8; j++) {
                    for (int k = 0; k < 8; k++) {
                        if (j == x || k == y || Math.abs(j - x) == Math.abs(k - y)) {
                            dp[i][j][k] = dp[i - 1][j][k];
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                res += dp[n - 1][i][j];
            }
        }
        return res;

=======

        int n = pieces.length;
        int[][][] dp = new int[n][8][8];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return countCombinations(pieces, positions, 0, dp);
    }
    
    private int countCombinations(String[] pieces, int[][] positions, int idx, int[][][] dp) {
        if (idx == pieces.length) {
            return 1;
        }
        int x = positions[idx][0] - 1;
        int y = positions[idx][1] - 1;
        if (dp[idx][x][y] != -1) {
            return dp[idx][x][y];
        }
        int res = 0;
        if (pieces[idx].equals("rook")) {
            for (int i = 0; i < 8; i++) {
                if (i == x) {
                    continue;
                }
                res += countCombinations(pieces, positions, idx + 1, dp);
            }
            for (int i = 0; i < 8; i++) {
                if (i == y) {
                    continue;
                }
                res += countCombinations(pieces, positions, idx + 1, dp);
            }
        } else if (pieces[idx].equals("bishop")) {
            for (int i = 0; i < 8; i++) {
                int j = x + y - i;
                if (j < 0 || j >= 8) {
                    continue;
                }
                res += countCombinations(pieces, positions, idx + 1, dp);
            }
            for (int i = 0; i < 8; i++) {
                int j = x - y + i;
                if (j < 0 || j >= 8) {
                    continue;
                }
                res += countCombinations(pieces, positions, idx + 1, dp);
            }
        } else {
            for (int i = 0; i < 8; i++) {
                if (i == x) {
                    continue;
                }
                res +=

=======

        int n = pieces.length;
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[][] dirs2 = new int[][]{{1, 1}, {1, -1}, {-1, 1}, {-1, -1}};
        int[][][] dp = new int[n][8][8];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 8; j++) {
                for (int k = 0; k < 8; k++) {
                    dp[i][j][k] = 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            int x = positions[i][0] - 1;
            int y = positions[i][1] - 1;
            if (pieces[i].equals("rook")) {
                for (int j = 0; j < 4; j++) {
                    int dx = dirs[j][0];
                    int dy = dirs[j][1];
                    int nx = x + dx;
                    int ny = y + dy;
                    while (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                        dp[i][nx][ny] = 0;
                        nx += dx;
                        ny += dy;
                    }
                }
            }
            if (pieces[i].equals("bishop")) {
                for (int j = 0; j < 4; j++) {
                    int dx = dirs2[j][0];
                    int dy = dirs2[j][1];
                    int nx = x + dx;
                    int ny = y + dy;
                    while (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                        dp[i][nx][ny] = 0;
                        nx += dx;
                        ny += dy;
                    }
                }
            }
            if (pieces[i].equals("queen")) {
                for (int j = 0; j < 8; j++) {
                    int dx = dirs[j][0];
                    int dy = dirs[j][1];
                    int nx = x + dx;
                    int ny = y + dy;
                    while (nx >= 0 && nx <

=======

        int n = pieces.length;
        int[][] dir = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}, {1, 1}, {-1, 1}, {1, -1}, {-1, -1}};
        int[] dx = {1, 1, -1, -1};
        int[] dy = {1, -1, 1, -1};
        int ans = 0;
        int[] row = new int[8];
        int[] col = new int[8];
        int[] diag = new int[15];
        int[] anti = new int[15];
        for (int i = 0; i < n; i++) {
            int x = positions[i][0] - 1;
            int y = positions[i][1] - 1;
            if (pieces[i].equals("rook")) {
                for (int[] d : dir) {
                    int nx = x + d[0];
                    int ny = y + d[1];
                    while (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                        ans++;
                        nx += d[0];
                        ny += d[1];
                    }
                }
            } else if (pieces[i].equals("bishop")) {
                for (int j = 0; j < 4; j++) {
                    int nx = x + dx[j];
                    int ny = y + dy[j];
                    while (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                        ans++;
                        nx += dx[j];
                        ny += dy[j];
                    }
                }
            } else {
                for (int j = 0; j < 8; j++) {
                    int nx = x + dir[j][0];
                    int ny = y + dir[j][1];
                    if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                        ans++;
                    }
                }
            }
            ans -= row[x] + col[y] + diag[x + y] + anti[x - y + 7];
            row[x]++;
            col[y]++;
            diag[x + y]++;
            anti[x - y + 7]++;
        }
        return ans;

=======

        int[] move = new int[]{0, 0, 0, 0};
        for (int i = 0; i < pieces.length; i++) {
            int x = positions[i][0];
            int y = positions[i][1];
            if (pieces[i].equals("rook")) {
                move[0] = Math.max(move[0], x - 1);
                move[1] = Math.max(move[1], 8 - x);
                move[2] = Math.max(move[2], y - 1);
                move[3] = Math.max(move[3], 8 - y);
            } else if (pieces[i].equals("queen")) {
                move[0] = Math.max(move[0], x - 1);
                move[1] = Math.max(move[1], 8 - x);
                move[2] = Math.max(move[2], y - 1);
                move[3] = Math.max(move[3], 8 - y);
                move[0] = Math.max(move[0], y - 1);
                move[1] = Math.max(move[1], 8 - y);
                move[2] = Math.max(move[2], x - 1);
                move[3] = Math.max(move[3], 8 - x);
            } else if (pieces[i].equals("bishop")) {
                move[0] = Math.max(move[0], Math.min(x - 1, y - 1));
                move[1] = Math.max(move[1], Math.min(8 - x, 8 - y));
                move[2] = Math.max(move[2], Math.min(x - 1, 8 - y));
                move[3] = Math.max(move[3], Math.min(8 - x, y - 1));
            }
        }
        int result = 0;
        for (int i = 0; i <= move[0]; i++) {
            for (int j = 0; j <= move[1]; j++) {
                for (int k = 0; k <= move[2]; k++) {
                    for (int l = 0; l <= move[3]; l++) {
                        if (i + j + k + l == pieces.length - 1) {
                            result += 2 *

=======

        int n = pieces.length;
        int mod = 1_000_000_007;
        int[] dir = new int[]{-1, 0, 1, 0, -1};
        int[][][][] dp = new int[n + 1][8][8][8];
        dp[0][0][0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int x = 0; x < 8; x++) {
                for (int y = 0; y < 8; y++) {
                    for (int k = 0; k < 8; k++) {
                        if (dp[i][x][y][k] == 0) {
                            continue;
                        }
                        int[] p = positions[i];
                        if (pieces[i].equals("rook")) {
                            for (int d = 0; d < 4; d++) {
                                int nx = p[0] + dir[d];
                                int ny = p[1] + dir[d + 1];
                                if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                                    dp[i + 1][nx][ny][k] = (dp[i + 1][nx][ny][k] + dp[i][x][y][k]) % mod;
                                }
                            }
                        } else if (pieces[i].equals("bishop")) {
                            for (int d = 0; d < 4; d++) {
                                int nx = p[0] + dir[d];
                                int ny = p[1] + dir[d + 1];
                                if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                                    dp[i + 1][nx][ny][k] = (dp[i + 1][nx][ny][k] + dp[i][x][y][k]) % mod;
                                }
                            }
                        } else {
                            for (int d = 0; d < 4; d++) {
                                int nx = p[0] + dir[d];
                                int ny = p[1] + dir[d + 1];
                                if (nx >= 0 && nx < 8 && ny >= 0 && ny < 8) {
                                    dp[i +
