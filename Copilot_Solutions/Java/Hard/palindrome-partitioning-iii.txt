Synthesizing 9/10 solutions

=======

        int n = s.length();
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                for (int l = i, r = j; l < r; ++l, --r) {
                    cost[i][j] += s.charAt(l) != s.charAt(r) ? 1 : 0;
                }
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; ++i) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; ++i) {
            f[i][1] = cost[0][i];
        }
        for (int j = 2; j <= k; ++j) {
            for (int i = j - 1; i < n; ++i) {
                for (int p = j - 2; p < i; ++p) {
                    f[i][j] = Math.min(f[i][j], f[p][j - 1] + cost[p + 1][i]);
                }
            }
        }
        return f[n - 1][k];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 0 : 1;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = dp[i + 1][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            f[i][1] = dp[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l < i; l++) {
                    f[i][j] = Math.min(f[i][j], f[l][j - 1] + dp[l + 1][i]);
                }
            }
        }
        return f[n - 1][k];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 0 : 1;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = dp[i + 1][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            f[i][1] = dp[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 0; p < i; p++) {
                    f[i][j] = Math.min(f[i][j], f[p][j - 1] + dp[p + 1][i]);
                }
            }
        }
        return f[n - 1][k];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 0;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 0 : 1;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1];
                } else {
                    dp[i][j] = dp[i + 1][j - 1] + 1;
                }
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            f[i][1] = dp[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l < i; l++) {
                    f[i][j] = Math.min(f[i][j], f[l][j - 1] + dp[l + 1][i]);
                }
            }
        }
        return f[n - 1][k];

=======

        int n = s.length();
        int[][] dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            dp[i][1] = getMinCost(s.substring(0, i + 1));
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int m = 0; m < i; m++) {
                    dp[i][j] = Math.min(dp[i][j], dp[m][j - 1] + getMinCost(s.substring(m + 1, i + 1)));
                }
            }
        }
        return dp[n - 1][k];
    }

    private int getMinCost(String s) {
        int n = s.length();
        int cost = 0;
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                cost++;
            }
        }
        return cost;

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                dp[i][j] = getCost(s, i, j);
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            f[i][1] = dp[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l < i; l++) {
                    if (f[l][j - 1] != Integer.MAX_VALUE) {
                        f[i][j] = Math.min(f[i][j], f[l][j - 1] + dp[l + 1][i]);
                    }
                }
            }
        }
        return f[n - 1][k];
    }

    public int getCost(String s, int i, int j) {
        int cost = 0;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                cost++;
            }
            i++;
            j--;
        }
        return cost;

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = dp[i + 1][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);
            }
        }
        int[][] f = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            f[i][1] = dp[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int l = 0; l < i; l++) {
                    f[i][j] = Math.min(f[i][j], f[l][j - 1] + dp[l + 1][i]);
                }
            }
        }
        return f[n - 1][k];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i + l <= n; i++) {
                int j = i + l - 1;
                dp[i][j] = s.charAt(i) == s.charAt(j) ? dp[i + 1][j - 1] : dp[i + 1][j - 1] + 1;
            }
        }
        int[][] f = new int[n][k];
        for (int i = 0; i < n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            f[i][0] = dp[0][i];
        }
        for (int j = 1; j < k; j++) {
            for (int i = 0; i < n; i++) {
                for (int i0 = 0; i0 < i; i0++) {
                    f[i][j] = Math.min(f[i][j], f[i0][j - 1] + dp[i0 + 1][i]);
                }
            }
        }
        return f[n - 1][k - 1];

=======

        int n = s.length();
        int[][] f = new int[n + 1][n + 1];
        int[][] g = new int[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(f[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i <= n; i++) {
            Arrays.fill(g[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i <= n; i++) {
            f[i][i] = 0;
        }
        for (int i = 0; i < n; i++) {
            f[i][i + 1] = 0;
        }
        for (int i = 0; i < n - 1; i++) {
            f[i][i + 2] = s.charAt(i) == s.charAt(i + 1) ? 0 : 1;
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    f[i][j] = f[i + 1][j - 1];
                } else {
                    f[i][j] = f[i + 1][j - 1] + 1;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            g[i][1] = f[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 0; p < i; p++) {
                    g[i][j] = Math.min(g[i][j], g[p][j - 1] + f[p + 1][i]);
                }
            }
        }
        return g[n - 1][k];
