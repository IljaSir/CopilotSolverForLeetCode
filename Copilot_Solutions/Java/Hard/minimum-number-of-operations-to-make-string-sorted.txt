Synthesizing 10/10 solutions

=======

        int mod = 1000000007;
        int n = s.length();
        int[] fact = new int[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (int) ((long) fact[i - 1] * i % mod);
        }
        int[] count = new int[26];
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            int c = s.charAt(i) - 'a';
            count[c]++;
            int less = 0;
            for (int j = 0; j < c; j++) {
                less += count[j];
            }
            res = (res + (int) ((long) less * fact[n - i - 1] % mod)) % mod;
            for (int j = c + 1; j < 26; j++) {
                res = (res + (int) ((long) count[j] * fact[n - i - 1] % mod)) % mod;
            }
        }
        return res;

=======

        int n = s.length();
        int MOD = 1000000007;
        int[] fact = new int[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (int) ((long) fact[i - 1] * i % MOD);
        }
        int[] count = new int[26];
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            int c = s.charAt(i) - 'a';
            int less = 0;
            for (int j = 0; j < c; j++) {
                less += count[j];
            }
            ans = (ans + (int) ((long) less * fact[n - i - 1] % MOD)) % MOD;
            count[c]++;
        }
        return ans;

=======

        int n = s.length(), mod = (int)1e9 + 7;
        int[] fact = new int[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (int)((long)fact[i - 1] * i % mod);
        }
        int[] count = new int[26];
        int res = 0;
        for (int i = n - 1; i >= 0; i--) {
            int c = s.charAt(i) - 'a';
            count[c]++;
            int sum = 0;
            for (int j = 0; j < c; j++) {
                sum += count[j];
            }
            res = (res + (int)((long)sum * fact[n - 1 - i] % mod)) % mod;
            for (int j = c + 1; j < 26; j++) {
                res = (res + (int)((long)count[j] * fact[n - 1 - i] % mod)) % mod;
            }
        }
        return res;

=======

        int MOD = 1000000007;
        int[] fact = new int[s.length() + 1];
        fact[0] = 1;
        for (int i = 1; i <= s.length(); ++i) {
            fact[i] = (int) ((long) fact[i - 1] * i % MOD);
        }
        int[] count = new int[26];
        int ans = 0;
        for (int i = 0; i < s.length(); ++i) {
            int less = 0;
            for (int j = s.charAt(i) - 'a' + 1; j < 26; ++j) {
                less += count[j];
            }
            ans = (ans + (int) ((long) less * fact[s.length() - 1 - i] % MOD)) % MOD;
            ++count[s.charAt(i) - 'a'];
        }
        return ans;

=======

        int n = s.length();
        int[] f = new int[26];
        for (int i = 0; i < n; i++) {
            f[s.charAt(i) - 'a']++;
        }
        long res = 0;
        long mod = 1000000007;
        long[] fact = new long[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i % mod;
        }
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < s.charAt(i) - 'a'; j++) {
                if (f[j] > 0) {
                    f[j]--;
                    res = (res + fact[n - 1 - i]) % mod;
                    f[j]++;
                }
            }
            f[s.charAt(i) - 'a']--;
        }
        return (int) res;

=======

        int n = s.length();
        int MOD = 1000000007;
        long[] factorial = new long[n + 1];
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            factorial[i] = factorial[i - 1] * i % MOD;
        }
        long[] count = new long[26];
        long ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            int ch = s.charAt(i) - 'a';
            long less = 0;
            for (int j = 0; j < ch; j++) {
                less += count[j];
            }
            ans += less * factorial[n - 1 - i] % MOD;
            ans %= MOD;
            count[ch]++;
        }
        return (int) ans;

=======

        int N = s.length();
        int MOD = 1000000007;
        long[] fact = new long[N + 1];
        fact[0] = 1;
        for (int i = 1; i <= N; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }
        int[] count = new int[26];
        long ans = 0;
        for (int i = N - 1; i >= 0; i--) {
            int c = s.charAt(i) - 'a';
            count[c]++;
            long smaller = 0;
            for (int j = 0; j < c; j++) {
                smaller += count[j];
            }
            ans += (smaller * fact[N - i - 1]) % MOD;
            ans %= MOD;
        }
        return (int) ans;

=======

        int MOD = (int)1e9 + 7;
        int n = s.length();
        int[] f = new int[26];
        for (int i = 0; i < n; i++) {
            f[s.charAt(i) - 'a']++;
        }
        long res = 0;
        long fact = 1;
        for (int i = 1; i < n; i++) {
            fact = fact * i % MOD;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < s.charAt(i) - 'a'; j++) {
                if (f[j] > 0) {
                    f[j]--;
                    res = (res + fact) % MOD;
                    f[j]++;
                }
            }
            fact = fact * inv(n - i, MOD) % MOD;
            f[s.charAt(i) - 'a']--;
        }
        return (int)res;
    }

    public long inv(long x, int MOD) {
        return pow(x, MOD - 2, MOD);
    }

    public long pow(long a, long n, int MOD) {
        // return a ^ n % MOD
        long ret = 1;
        int x = 63 - Long.numberOfLeadingZeros(n);
        for (; x >= 0; x--) {
            ret = ret * ret % MOD;
            if (n << 63 - x < 0) {
                ret = ret * a % MOD;
            }
        }
        return ret;

=======

        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        long fact = 1;
        long mod = 1000000007;
        long result = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < s.charAt(i) - 'a'; j++) {
                if (count[j] == 0) {
                    continue;
                }
                long a = fact;
                count[j]--;
                for (int k = 0; k < 26; k++) {
                    a = a * modInverse(count[k], mod) % mod;
                }
                result = (result + a) % mod;
                count[j]++;
            }
            fact = fact * (s.length() - i) % mod;
            count[s.charAt(i) - 'a']--;
        }
        return (int) result;
    }

    private long modInverse(long a, long m) {
        long m0 = m;
        long y = 0;
        long x = 1;
        if (m == 1) {
            return 0;
        }
        while (a > 1) {
            long q = a / m;
            long t = m;
            m = a % m;
            a = t;
            t = y;
            y = x - q * y;
            x = t;
        }
        if (x < 0) {
            x += m0;
        }
        return x;

=======

        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        int ans = 0;
        int mod = 1000000007;
        int n = s.length();
        for (int i = 0; i < n - 1; i++) {
            int smaller = 0;
            for (int j = s.charAt(i) - 'a' + 1; j < 26; j++) {
                smaller += freq[j];
            }
            int fact = factorial[n - i - 1];
            ans = (ans + ((long) smaller * fact) % mod) % mod;
            for (int j = s.charAt(i) - 'a'; j < 26; j++) {
                freq[j]--;
            }
        }
        return ans;
    }

    int[] factorial = new int[3001];

    {
        factorial[0] = 1;
        for (int i = 1; i <= 3000; i++) {
            factorial[i] = (int) ((long) factorial[i - 1] * i % 1000000007);
        }
