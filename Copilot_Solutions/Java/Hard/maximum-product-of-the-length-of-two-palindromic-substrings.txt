Synthesizing 10/10 solutions

=======

        int n = s.length();
        boolean[][] dp = new boolean[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1);
        }
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                dp[i][j] = dp[i + 1][j - 1] && s.charAt(i) == s.charAt(j);
            }
        }
        long result = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (dp[0][i] && dp[j][n - 1]) {
                    result = Math.max(result, (long) (j - i - 1) * (i + 1));
                }
                if (dp[0][j] && dp[i][n - 1]) {
                    result = Math.max(result, (long) (i - j - 1) * (j + 1));
                }
            }
        }
        return result;

=======

        int n = s.length();
        int[] dp = new int[1 << n];
        for (int i = 0; i < 1 << n; i++) {
            for (int j = 0; j < n; j++) {
                if ((i >> j & 1) == 1) {
                    dp[i] = j;
                }
            }
        }
        long ans = 0;
        for (int i = 0; i < 1 << n; i++) {
            if (s.charAt(dp[i]) == s.charAt(dp[i] - Integer.bitCount(i) + 1)) {
                for (int j = 0; j < i; j++) {
                    if ((i & j) == 0 && s.charAt(dp[j]) == s.charAt(dp[j] - Integer.bitCount(j) + 1)) {
                        ans = Math.max(ans, (long) Integer.bitCount(i) * Integer.bitCount(j));
                    }
                }
            }
        }
        return ans;

=======

        int n = s.length();
        long ans = 0;
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 0; i < n; i++) {
            int l = i, r = i;
            while (l >= 0 && r < n && s.charAt(l) == s.charAt(r)) {
                left[i] = r - l + 1;
                l--;
                r++;
            }
        }
        for (int i = 0; i < n; i++) {
            int l = i, r = i + 1;
            while (l >= 0 && r < n && s.charAt(l) == s.charAt(r)) {
                right[i] = r - l + 1;
                l--;
                r++;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (left[i] > 0 && right[j] > 0) {
                    ans = Math.max(ans, left[i] * right[j]);
                }
                if (right[i] > 0 && left[j] > 0) {
                    ans = Math.max(ans, right[i] * left[j]);
                }
            }
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[1 << n];
        for (int i = 1; i < 1 << n; i++) {
            String t = "";
            for (int j = 0; j < n; j++) {
                if ((i >> j & 1) > 0) {
                    t += s.charAt(j);
                }
            }
            if (isPalindrome(t)) {
                dp[i] = t.length();
            }
        }
        long ans = 0;
        for (int i = 1; i < 1 << n; i++) {
            for (int j = i; j > 0; j = (j - 1) & i) {
                ans = Math.max(ans, (long) dp[j] * dp[i ^ j]);
            }
        }
        return ans;
    }
    public boolean isPalindrome(String s) {
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        long[] dp = new long[1 << n];
        for (int i = 0; i < 1 << n; i++) {
            int left = 0, right = n - 1;
            while (left < right) {
                if (((i >> left) & 1) == 1 && ((i >> right) & 1) == 1) {
                    if (s.charAt(left) != s.charAt(right)) {
                        break;
                    }
                }
                if (((i >> left) & 1) == 0) {
                    left++;
                }
                if (((i >> right) & 1) == 0) {
                    right--;
                }
            }
            if (left >= right) {
                dp[i] = Long.bitCount(i);
            }
        }
        long res = 0;
        for (int i = 0; i < 1 << n; i++) {
            res = Math.max(res, dp[i] * dp[(1 << n) - 1 - i]);
        }
        return res;

=======

        int n = s.length();
        long[] dp = new long[1 << n];
        for (int i = 1; i < (1 << n); i++) {
            String sub = "";
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    sub += s.charAt(j);
                }
            }
            if (isPalindrome(sub)) {
                dp[i] = sub.length();
            }
        }
        long res = 0;
        for (int i = 1; i < (1 << n); i++) {
            for (int j = i; j > 0; j = (j - 1) & i) {
                if (dp[j] > 0 && dp[i ^ j] > 0) {
                    res = Math.max(res, dp[j] * dp[i ^ j]);
                }
            }
        }
        return res;
    }

    private boolean isPalindrome(String s) {
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - 1 - i)) {
                return false;
            }
        }
        return true;

=======

        int n = s.length();
        long[] dp = new long[n];
        long res = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = 1 << (s.charAt(i) - 'a');
            for (int j = i - 1; j >= 0; j--) {
                if ((dp[j] & dp[i]) == 0) {
                    dp[j] |= dp[i];
                    res = Math.max(res, (long) (i - j + 1) * (i - j + 1) / 4);
                }
            }
        }
        return res;

=======

        int n = s.length();
        long ans = 0;
        for (int i = 0; i < 1 << n; i++) {
            List<Integer> left = new ArrayList<>();
            List<Integer> right = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    left.add(j);
                } else {
                    right.add(j);
                }
            }
            if (left.size() != right.size()) {
                continue;
            }
            int m = left.size();
            boolean valid = true;
            for (int j = 0; j < m / 2; j++) {
                if (s.charAt(left.get(j)) != s.charAt(left.get(m - j - 1))) {
                    valid = false;
                    break;
                }
            }
            for (int j = 0; j < m / 2; j++) {
                if (s.charAt(right.get(j)) != s.charAt(right.get(m - j - 1))) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                ans = Math.max(ans, (long) left.size() * right.size());
            }
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    count++;
                }
            }
            if (count % 2 == 1) {
                int left = 0, right = count - 1;
                boolean isPalindrome = true;
                while (left < right) {
                    if (s.charAt(left) != s.charAt(right)) {
                        isPalindrome = false;
                        break;
                    }
                    left++;
                    right--;
                }
                if (isPalindrome) {
                    dp[i] = count;
                }
            }
        }
        long res = 0;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < (1 << n); j++) {
                if ((i & j) == 0) {
                    res = Math.max(res, (long) dp[i] * dp[j]);
                }
            }
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[1<<n];
        for(int i=0; i<1<<n; i++){
            int left = 0;
            int right = n-1;
            while(left<right){
                if(((i>>left)&1)==1 && ((i>>right)&1)==1){
                    if(s.charAt(left)!=s.charAt(right)) break;
                }
                left++;
                right--;
            }
            if(left>=right) dp[i] = Integer.bitCount(i);
        }
        long ans = 0;
        for(int i=0; i<1<<n; i++){
            ans = Math.max(ans, (long)dp[i]*dp[(1<<n)-1-i]);
        }
        return ans;
