Synthesizing 7/10 solutions (Duplicates hidden)

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i][j - 1];
                } else {
                    int min = Integer.MAX_VALUE;
                    for (int k = i; k < j; k++) {
                        min = Math.min(min, dp[i][k] + dp[k + 1][j]);
                    }
                    dp[i][j] = min;
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i][j - 1];
                } else {
                    int minn = Integer.MAX_VALUE;
                    for (int k = i; k < j; k++) {
                        minn = Math.min(minn, dp[i][k] + dp[k + 1][j]);
                    }
                    dp[i][j] = minn;
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        return dfs(s, 0, n - 1, dp);
    }
    private int dfs(String s, int i, int j, int[][] dp) {
        if (i > j) {
            return 0;
        }
        if (dp[i][j] == 0) {
            dp[i][j] = dfs(s, i + 1, j, dp) + 1;
            for (int k = i + 1; k <= j; k++) {
                if (s.charAt(k) == s.charAt(i)) {
                    dp[i][j] = Math.min(dp[i][j], dfs(s, i, k - 1, dp) + dfs(s, k + 1, j, dp));
                }
            }
        }
        return dp[i][j];
