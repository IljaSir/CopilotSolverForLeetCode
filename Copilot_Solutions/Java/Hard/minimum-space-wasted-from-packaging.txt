Synthesizing 9/10 solutions

=======

        int n = packages.length;
        int m = boxes.length;
        Arrays.sort(packages);
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += packages[i];
        }
        long ans = Long.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            Arrays.sort(boxes[i]);
            if (boxes[i][boxes[i].length - 1] < packages[n - 1]) {
                continue;
            }
            int j = 0;
            long res = 0;
            for (j = 0; j < boxes[i].length; j++) {
                int index = find(boxes[i][j], packages);
                if (index == -1) {
                    break;
                }
                res += (long) boxes[i][j] * (index - j);
            }
            if (j == boxes[i].length) {
                ans = Math.min(ans, res - sum);
            }
        }
        return ans == Long.MAX_VALUE ? -1 : (int) (ans % 1000000007);
    }
    public int find(int target, int[] packages) {
        int left = 0;
        int right = packages.length - 1;
        while (left < right) {
            int mid = (left + right) / 2;
            if (packages[mid] > target) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return packages[left] <= target ? left : left - 1;

=======

        int MOD = 1_000_000_007;
        Arrays.sort(packages);
        int n = packages.length;
        long[] preSum = new long[n];
        preSum[0] = packages[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + packages[i];
        }
        long ans = Long.MAX_VALUE;
        for (int[] box : boxes) {
            Arrays.sort(box);
            if (box[box.length - 1] < packages[n - 1]) {
                continue;
            }
            long cur = 0;
            int i = 0;
            for (int size : box) {
                int j = upperBound(packages, size);
                cur += (long) size * (j - i) - (preSum[j - 1] - (i > 0 ? preSum[i - 1] : 0));
                i = j;
                if (i == n) {
                    break;
                }
            }
            ans = Math.min(ans, cur);
        }
        return ans == Long.MAX_VALUE ? -1 : (int) (ans % MOD);
    }

    public int upperBound(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        if (nums[high] <= target) {
            return high + 1;
        }
        while (low < high) {
            int mid = low + high >> 1;
            if (nums[mid] > target) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;

=======

        Arrays.sort(packages);
        int n = packages.length;
        int mod = 1000000007;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += packages[i];
        }
        long res = Long.MAX_VALUE;
        for (int[] box : boxes) {
            Arrays.sort(box);
            if (box[box.length - 1] < packages[n - 1]) {
                continue;
            }
            long cur = 0;
            int j = 0;
            for (int k = 0; k < box.length; k++) {
                while (j < n && packages[j] <= box[k]) {
                    cur += box[k] - packages[j];
                    j++;
                }
            }
            res = Math.min(res, cur);
        }
        return res == Long.MAX_VALUE ? -1 : (int) ((res - sum) % mod);

=======

        Arrays.sort(packages);
        int n = packages.length;
        int m = boxes.length;
        long[] prefix = new long[n];
        prefix[0] = packages[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + packages[i];
        }
        long res = Long.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            Arrays.sort(boxes[i]);
            if (boxes[i][boxes[i].length - 1] < packages[n - 1]) {
                continue;
            }
            long wasted = 0;
            int j = 0;
            for (int k = 0; k < boxes[i].length; k++) {
                while (j < n && packages[j] <= boxes[i][k]) {
                    j++;
                }
                if (j > 0) {
                    wasted += (long) boxes[i][k] * j - prefix[j - 1];
                }
            }
            res = Math.min(res, wasted);
        }
        return res == Long.MAX_VALUE ? -1 : (int) (res % ((long) 1e9 + 7));

=======

        int mod = 1000000007;
        int n = packages.length;
        int m = boxes.length;
        Arrays.sort(packages);
        int[][] sortedBoxes = new int[m][];
        for (int i = 0; i < m; i++) {
            sortedBoxes[i] = boxes[i];
            Arrays.sort(sortedBoxes[i]);
        }
        long total = 0;
        for (int i = 0; i < n; i++) {
            total += packages[i];
        }
        long minWasted = Long.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            long wasted = 0;
            int j = 0;
            int k = 0;
            while (j < n && k < sortedBoxes[i].length) {
                if (sortedBoxes[i][k] >= packages[j]) {
                    wasted += (long) (sortedBoxes[i][k] - packages[j]);
                    j++;
                } else {
                    k++;
                }
            }
            if (j < n) {
                wasted = Long.MAX_VALUE;
            }
            minWasted = Math.min(minWasted, wasted);
        }
        if (minWasted == Long.MAX_VALUE) {
            return -1;
        }
        return (int) ((minWasted - total) % mod);

=======

        int n = packages.length;
        int m = boxes.length;
        int MOD = 1000000007;
        Arrays.sort(packages);
        int[] preSum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            preSum[i] = preSum[i - 1] + packages[i - 1];
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            Arrays.sort(boxes[i]);
            if (boxes[i][boxes[i].length - 1] < packages[n - 1]) {
                continue;
            }
            int waste = 0;
            int l = 0;
            for (int j = 0; j < boxes[i].length; j++) {
                int r = search(packages, boxes[i][j]);
                waste = (int) ((waste + 1L * boxes[i][j] * (r - l) - (preSum[r] - preSum[l])) % MOD);
                l = r;
            }
            ans = Math.min(ans, waste);
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }

    public int search(int[] packages, int target) {
        int l = 0;
        int r = packages.length - 1;
        int ans = packages.length;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (packages[mid] > target) {
                r = mid - 1;
                ans = mid;
            } else {
                l = mid + 1;
            }
        }
        return ans;

=======

        int n = packages.length;
        int m = boxes.length;
        long ans = Long.MAX_VALUE;
        long sum = 0;
        long mod = (long)1e9 + 7;
        Arrays.sort(packages);
        for (int i = 0; i < n; i++) {
            sum += packages[i];
        }
        for (int i = 0; i < m; i++) {
            Arrays.sort(boxes[i]);
            if (boxes[i][boxes[i].length - 1] < packages[n - 1]) {
                continue;
            }
            int j = 0;
            long cur = 0;
            for (int k = 0; k < boxes[i].length; k++) {
                while (j < n && packages[j] <= boxes[i][k]) {
                    cur += boxes[i][k] - packages[j];
                    j++;
                }
            }
            ans = Math.min(ans, cur);
        }
        return ans == Long.MAX_VALUE ? -1 : (int)(ans % mod);

=======

        Arrays.sort(packages);
        for (int[] box : boxes) {
            Arrays.sort(box);
        }
        long minWasted = Long.MAX_VALUE;
        long total = 0;
        for (int packageSize : packages) {
            total += packageSize;
        }
        for (int[] box : boxes) {
            if (box[box.length - 1] < packages[packages.length - 1]) {
                continue;
            }
            int i = 0;
            long wasted = 0;
            for (int boxSize : box) {
                while (i < packages.length && packages[i] <= boxSize) {
                    i++;
                }
                wasted += (long) (i) * boxSize;
            }
            minWasted = Math.min(minWasted, wasted - total);
        }
        return minWasted == Long.MAX_VALUE ? -1 : (int) (minWasted % (1000000007));

=======

        Arrays.sort(packages);
        int n = packages.length;
        int m = boxes.length;
        int max = packages[n - 1];
        long[] preSum = new long[n];
        preSum[0] = packages[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + packages[i];
        }
        long ans = Long.MAX_VALUE;
        for (int[] box : boxes) {
            Arrays.sort(box);
            if (box[box.length - 1] < max) {
                continue;
            }
            long cur = 0;
            int j = 0;
            for (int i = 0; i < box.length; i++) {
                while (j < n && packages[j] <= box[i]) {
                    j++;
                }
                if (j == 0) {
                    continue;
                }
                cur += (long) box[i] * j - preSum[j - 1];
            }
            ans = Math.min(ans, cur);
        }
        return ans == Long.MAX_VALUE ? -1 : (int) (ans % (1e9 + 7));
