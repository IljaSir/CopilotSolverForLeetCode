Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= i; j++) {
                if (s.charAt(i - 1) == 'D') {
                    for (int k = j; k < i; k++) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                } else {
                    for (int k = 0; k < j; k++) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                }
            }
        }
        int ans = 0;
        for (int j = 0; j <= n; j++) {
            ans = (ans + dp[n][j]) % 1000000007;
        }
        return ans;

=======

        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= i; j++) {
                if (s.charAt(i - 1) == 'I') {
                    for (int k = j; k < i; k++) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                } else {
                    for (int k = 0; k < j; k++) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % 1000000007;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            ans = (ans + dp[n][i]) % 1000000007;
        }
        return ans;

=======

        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) == 'I') {
                int sum = 0;
                for (int j = 0; j <= n - i; j++) {
                    sum = (sum + dp[i - 1][j]) % 1000000007;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = n - i; j >= 0; j--) {
                    sum = (sum + dp[i - 1][j + 1]) % 1000000007;
                    dp[i][j] = sum;
                }
            }
        }
        int sum = 0;
        for (int i = 0; i <= n; i++) {
            sum = (sum + dp[n][i]) % 1000000007;
        }
        return sum;

=======

        int mod = 1_000_000_007;
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s.charAt(i - 1) == 'I') {
                int sum = 0;
                for (int j = 0; j <= i; ++j) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = i; j >= 0; --j) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            }
        }
        int res = 0;
        for (int i = 0; i <= n; ++i) {
            res = (res + dp[n][i]) % mod;
        }
        return res;

=======

        int mod = 1000000007;
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) == 'I') {
                int sum = 0;
                for (int j = 0; j < i; j++) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = i; j >= 0; j--) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        return ans;

=======

        int n = s.length();
        int mod = 1000000007;
        int[][] dp = new int[n + 1][n + 1];
        Arrays.fill(dp[0], 1);
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) == 'D') {
                int sum = 0;
                for (int j = 0; j <= n - i; j++) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = n - i; j >= 0; j--) {
                    sum = (sum + dp[i - 1][j + 1]) % mod;
                    dp[i][j] = sum;
                }
            }
        }
        int ans = 0;
        for (int j = 0; j <= n; j++) {
            ans = (ans + dp[n][j]) % mod;
        }
        return ans;

=======

        int mod = 1_000_000_007;
        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) == 'D') {
                int sum = 0;
                for (int j = n - 1; j >= 0; j--) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = 0; j <= n; j++) {
                    sum = (sum + dp[i - 1][j]) % mod;
                    dp[i][j] = sum;
                }
            }
        }
        int sum = 0;
        for (int i = 0; i <= n; i++) {
            sum = (sum + dp[n][i]) % mod;
        }
        return sum;

=======

        int n = s.length(), M = 1000000007;
        int[][] dp = new int[n + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (s.charAt(i - 1) == 'I') {
                int sum = 0;
                for (int j = 0; j <= i; ++j) {
                    sum = (sum + dp[i - 1][j]) % M;
                    dp[i][j] = sum;
                }
            } else {
                int sum = 0;
                for (int j = i; j >= 0; --j) {
                    sum = (sum + dp[i - 1][j]) % M;
                    dp[i][j] = sum;
                }
            }
        }
        return dp[n][0];

=======

        int n = s.length();
        int MOD = 1000000007;
        int[][] dp = new int[n+1][n+1];
        for (int i = 0; i <= n; ++i)
            dp[0][i] = 1;

        for (int i = 0; i < n; ++i) {
            if (s.charAt(i) == 'D') {
                int tot = 0;
                for (int j = i; j >= 0; --j) {
                    tot = (tot + dp[i][j]) % MOD;
                    dp[i+1][j] = tot;
                }
            } else {
                int tot = 0;
                for (int j = 0; j <= i; ++j) {
                    tot = (tot + dp[i][j]) % MOD;
                    dp[i+1][j+1] = tot;
                }
            }
        }

        int ans = 0;
        for (int x: dp[n])
            ans = (ans + x) % MOD;
        return ans;

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i] = 1;
        }
        for (char c : s.toCharArray()) {
            int[] dp2 = new int[n + 1];
            if (c == 'D') {
                for (int i = 0; i < n; i++) {
                    dp2[i] = dp[i + 1];
                }
            } else {
                for (int i = 1; i <= n; i++) {
                    dp2[i] = dp[i - 1];
                }
            }
            for (int i = 1; i <= n; i++) {
                dp2[i] = (dp2[i] + dp2[i - 1]) % 1_000_000_007;
            }
            dp = dp2;
        }
        return dp[n];
