Synthesizing 10/10 solutions

=======

        int n = text.length();
        for (int i = 1; i <= n / 2; i++) {
            if (text.substring(0, i).equals(text.substring(n - i, n))) {
                return 2 + longestDecomposition(text.substring(i, n - i));
            }
        }
        return n > 0 ? 1 : 0;

=======

        int n = text.length();
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            if (text.substring(0, i + 1).equals(text.substring(n - i - 1, n))) {
                res += 2;
                text = text.substring(i + 1, n - i - 1);
                n = text.length();
                i = -1;
            }
        }
        if (n > 0) res++;
        return res;

=======

        int n = text.length();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (text.substring(0, i + 1).equals(text.substring(n - i - 1))) {
                ans += 2;
                n -= i + 1;
                i = -1;
            }
        }
        return ans + (n > 0 ? 1 : 0);

=======

        return decompose(text, 0, text.length() - 1);
    }
    
    private int decompose(String text, int start, int end) {
        if (start > end) {
            return 0;
        }
        if (start == end) {
            return 1;
        }
        int mid = (start + end) / 2;
        int left = start, right = mid;
        while (left < right && text.charAt(left) == text.charAt(right)) {
            left++;
            right--;
        }
        if (left >= right) {
            return 2 + decompose(text, mid + 1, end);
        }
        left = mid + 1;
        right = end;
        while (left < right && text.charAt(left) == text.charAt(right)) {
            left++;
            right--;
        }
        if (left >= right) {
            return 2 + decompose(text, start, mid);
        }
        return 1;

=======

        int n = text.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (text.substring(0, i + 1).equals(text.substring(n - i - 1, n))) {
                count += 2;
                n -= i + 1;
                i = -1;
            }
        }
        return count == 0 ? 1 : count;

=======

        int n = text.length();
        int i = 0, j = n - 1;
        int res = 0;
        while (i <= j) {
            if (text.charAt(i) == text.charAt(j)) {
                int k = 0;
                while (i + k <= j - k && text.charAt(i + k) == text.charAt(j - k)) {
                    k++;
                }
                if (i + k > j - k) {
                    res += i == j ? 1 : 2;
                }
                i += k;
                j -= k;
            } else {
                i++;
                j--;
                res++;
            }
        }
        return res;

=======

        int res = 0;
        int i = 0, j = text.length() - 1;
        while (i <= j) {
            int k = 0;
            while (text.charAt(i + k) == text.charAt(j - k)) {
                k++;
            }
            if (k == 0) {
                i++;
                j--;
                res += 2;
            } else {
                i += k;
                j -= k;
            }
        }
        return i == j ? res + 1 : res;

=======

        int result = 0;
        int i = 0;
        int j = text.length() - 1;
        while (i <= j) {
            int k = 1;
            while (!text.substring(i, i + k).equals(text.substring(j - k + 1, j + 1))) {
                k++;
            }
            result += 2;
            i += k;
            j -= k;
        }
        if (i == j + 1) {
            result--;
        }
        return result;

=======

        int n = text.length();
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                if (text.substring(0, j + 1).equals(text.substring(i - j, i + 1))) {
                    if (j == 0) {
                        dp[i] = 1;
                    } else {
                        dp[i] = Math.max(dp[i], 2 + dp[i - j - 1]);
                    }
                }
            }
        }
        return dp[n - 1];

=======

        int n = text.length();
        if (n == 0) {
            return 0;
        }
        int mid = n / 2;
        String s1 = text.substring(0, mid);
        String s2 = text.substring(n - mid, n);
        if (s1.equals(s2)) {
            return 2 + longestDecomposition(text.substring(mid, n - mid));
        } else {
            return 1;
        }
