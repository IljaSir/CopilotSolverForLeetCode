Synthesizing 10/10 solutions

=======

        long res = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    res += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    res += cost[i - 1];
                }
            }
        }
        return res;

=======

        long sum = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    sum += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    sum += cost[i - 1];
                }
            }
        }
        return sum;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] == nums[i - 1]) {
                ans += Math.min(cost[i], cost[i - 1]);
                if (cost[i] < cost[i - 1]) {
                    nums[i] = nums[i - 1] + 1;
                }
            }
        }
        return ans;

=======

        long totalCost = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] == nums[i + 1]) {
                if (cost[i] < cost[i + 1]) {
                    totalCost += cost[i];
                } else {
                    totalCost += cost[i + 1];
                    cost[i + 1] = cost[i];
                }
            }
        }
        return totalCost;

=======

        long res = 0;
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                res += Math.min(cost[i], cost[i - 1]);
                if (cost[i] < cost[i - 1]) {
                    nums[i] = nums[i] + 1;
                } else {
                    nums[i - 1] = nums[i - 1] + 1;
                }
            }
        }
        return res;

=======

        long result = 0;
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                if (cost[i] < cost[i - 1]) {
                    result += cost[i];
                    nums[i] = nums[i - 1] + 1;
                } else {
                    result += cost[i - 1];
                    nums[i - 1] = nums[i] + 1;
                }
            }
        }
        return result;

=======

        long result = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] == nums[i - 1]) {
                if(cost[i] < cost[i - 1]) {
                    result += cost[i];
                    cost[i] = cost[i - 1];
                } else {
                    result += cost[i - 1];
                }
            }
        }
        return result;

=======

        long totalCost = 0;
        int i = 0;
        while (i < nums.length - 1) {
            int j = i + 1;
            while (j < nums.length && nums[j] == nums[i]) {
                totalCost += cost[j];
                j++;
            }
            if (j < nums.length) {
                long minCost = cost[i];
                long maxCost = cost[i];
                for (int k = i + 1; k < j; k++) {
                    minCost = Math.min(minCost, cost[k]);
                    maxCost = Math.max(maxCost, cost[k]);
                }
                totalCost -= maxCost;
                totalCost += minCost;
            }
            i = j;
        }
        return totalCost;

=======

        long sum = 0;
        int max = nums[0];
        int maxCost = cost[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == max) {
                sum += Math.min(maxCost, cost[i]);
                maxCost = Math.max(maxCost, cost[i]);
            } else if (nums[i] > max) {
                max = nums[i];
                maxCost = cost[i];
            }
        }
        return sum;

=======

        long costSum = 0;
        int prevNum = nums[0];
        long prevCost = cost[0];
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == prevNum) {
                costSum += Math.min(prevCost, cost[i]);
                prevCost = Math.max(prevCost, cost[i]);
            } else {
                prevNum = nums[i];
                prevCost = cost[i];
            }
        }
        return costSum;
