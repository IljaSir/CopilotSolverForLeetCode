Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] c : courses) {
            time += c[0];
            pq.offer(c[0]);
            if (time > c[1]) {
                time -= pq.poll();
            }
        }
        return pq.size();

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] c : courses) {
            time += c[0];
            pq.add(c[0]);
            if (time > c[1]) {
                time -= pq.poll();
            }
        }
        return pq.size();

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] course : courses) {
            time += course[0];
            pq.offer(course[0]);
            if (time > course[1]) {
                time -= pq.poll();
            }
        }
        return pq.size();

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] c : courses) {
            pq.offer(c[0]);
            time += c[0];
            if (time > c[1]) {
                time -= pq.poll();
            }
        }
        return pq.size();

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> queue = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] c : courses) {
            time += c[0];
            queue.offer(c[0]);
            if (time > c[1]) {
                time -= queue.poll();
            }
        }
        return queue.size();

=======

        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);
        int time = 0;
        for (int[] c : courses) {
            time += c[0];
            pq.offer(c[0]);
            if (time > c[1]) {
                time -= pq.poll();
            }
        }
        return pq.size();

=======

        // sort by lastDay
        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int[] course : courses) {
            int duration = course[0];
            int lastDay = course[1];
            if (time + duration <= lastDay) {
                pq.offer(duration);
                time += duration;
            } else if (!pq.isEmpty() && pq.peek() > duration) {
                time += duration - pq.poll();
                pq.offer(duration);
            }
        }
        return pq.size();

=======

        int n = courses.length;
        // sort by end time
        Arrays.sort(courses, (a, b) -> a[1] - b[1]);
        // max heap
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int time = 0;
        for (int i = 0; i < n; i++) {
            time += courses[i][0];
            pq.offer(courses[i][0]);
            if (time > courses[i][1]) {
                time -= pq.poll();
            }
        }
        return pq.size();
