Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] sum = new int[n];
        sum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            sum[i] = sum[i - 1] + nums[i];
        }
        int[] dp = new int[n];
        int[] last = new int[n];
        Arrays.fill(last, -1);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (sum[i] >= k) {
                ans++;
            }
            for (int j = 0; j < i; j++) {
                if (sum[i] - sum[j] >= k) {
                    int lastIdx = last[j];
                    if (lastIdx == -1) {
                        dp[i] = (dp[i] + 1) % 1000000007;
                    } else {
                        dp[i] = (dp[i] + dp[lastIdx]) % 1000000007;
                    }
                    last[j] = i;
                }
            }
            ans = (ans + dp[i]) % 1000000007;
        }
        return ans;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] preSum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        int[] dp = new int[n + 1];
        Arrays.fill(dp, 1);
        int mod = (int) 1e9 + 7;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (preSum[j + 1] - preSum[i + 1] >= k) {
                    dp[j + 1] = (dp[j + 1] + dp[i + 1]) % mod;
                }
            }
            ans = (ans + dp[i + 1]) % mod;
        }
        return ans;

=======

        int n = nums.length;
        int[][] dp = new int[n + 1][k];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < k; j++) {
                dp[i][j] = dp[i - 1][j];
                if (nums[i - 1] <= j) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - nums[i - 1]]) % 1000000007;
                }
            }
        }
        return dp[n][k - 1];

=======

        int n = nums.length;
        int[] dp = new int[n + 1];
        int[] sum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum[i] = sum[i - 1] + nums[i - 1];
        }
        for (int i = 1; i <= n; i++) {
            for (int j = i; j > 0; j--) {
                if (sum[i] - sum[j - 1] >= k) {
                    dp[i] = (dp[i] + dp[j - 1] + 1) % 1000000007;
                }
            }
        }
        return dp[n];

=======

        int n = nums.length;
        long mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        long sum = 0;
        for (int i = 0; i < n; i++) {
            sum += nums[i];
            for (int j = i; j >= 0; j--) {
                if (sum - nums[j] >= k) {
                    dp[j + 1] = (dp[j + 1] + dp[j]) % mod;
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = (ans + dp[i]) % mod;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        int n = nums.length;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j <= n; j++) {
                if (sum[j] - sum[i] >= k) dp[j] = (dp[j] + dp[i]) % mod;
            }
        }
        return dp[n];

=======

        int n = nums.length;
        int[] dp = new int[n + 1];
        dp[0] = 1;
        int mod = 1000000007;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j >= 0; j--) {
                sum += nums[j];
                if (sum >= k) {
                    dp[i + 1] += dp[j];
                    dp[i + 1] %= mod;
                }
            }
        }
        return dp[n];

=======

        int n = nums.length;
        int[] dp = new int[n+1];
        int[] sum = new int[n+1];
        dp[0] = 1;
        for(int i=0; i<n; i++){
            sum[i+1] = sum[i] + nums[i];
            for(int j=i; j>=0; j--){
                if(sum[i+1] - sum[j] >= k){
                    dp[i+1] = (dp[i+1] + dp[j]) % 1000000007;
                }
            }
        }
        return dp[n];

=======

        int n = nums.length;
        Arrays.sort(nums);
        int[] dp = new int[n];
        int[] preSum = new int[n];
        preSum[0] = nums[0];
        for (int i = 1; i < n; i++) {
            preSum[i] = preSum[i - 1] + nums[i];
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            dp[i] = preSum[i] < k ? 0 : 1;
            for (int j = 0; j < i; j++) {
                if (preSum[i] - preSum[j] >= k) {
                    dp[i] += dp[j];
                    dp[i] %= 1000000007;
                }
            }
            ans += dp[i];
            ans %= 1000000007;
        }
        return ans;

=======

        int[] count = new int[1001];
        int n = nums.length;
        for(int i = 0; i < n; i++) {
            count[nums[i]]++;
        }
        int[] dp = new int[1001];
        dp[0] = 1;
        int sum = 0;
        for(int i = 1; i <= 1000; i++) {
            sum += count[i - 1];
            for(int j = sum; j >= count[i]; j--) {
                dp[j] = (dp[j] + dp[j - count[i]]) % 1000000007;
            }
        }
        int ans = 0;
        for(int i = k; i <= sum; i++) {
            ans = (ans + dp[i]) % 1000000007;
        }
        return ans;
