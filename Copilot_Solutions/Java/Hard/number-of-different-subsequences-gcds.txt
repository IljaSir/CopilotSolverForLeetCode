Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        boolean[] seen = new boolean[max + 1];
        for (int num : nums) {
            seen[num] = true;
        }
        int ans = 0;
        for (int i = 1; i <= max; i++) {
            int gcd = 0;
            for (int j = i; j <= max; j += i) {
                if (seen[j]) {
                    gcd = gcd(gcd, j);
                }
            }
            if (gcd == i) {
                ans++;
            }
        }
        return ans;

=======

        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] count = new int[max + 1];
        for (int num : nums) {
            count[num]++;
        }
        int res = 0;
        for (int i = 1; i <= max; i++) {
            if (count[i] == 0) {
                continue;
            }
            int gcd = i;
            for (int j = 2 * i; j <= max; j += i) {
                gcd = gcd(gcd, j);
            }
            if (gcd == i) {
                res++;
            }
        }
        return res;
    }
    
    private int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;

=======

        int max = 0;
        for (int n : nums) {
            max = Math.max(max, n);
        }
        int[] count = new int[max + 1];
        for (int n : nums) {
            count[n]++;
        }
        int[] dp = new int[max + 1];
        for (int i = 1; i <= max; i++) {
            for (int j = i; j <= max; j += i) {
                dp[i] += count[j];
            }
        }
        int res = 0;
        for (int i = 1; i <= max; i++) {
            if (dp[i] > 0) {
                int g = 0;
                for (int j = i; j <= max; j += i) {
                    g = gcd(g, j);
                }
                if (g == i) {
                    res++;
                }
            }
        }
        return res;

=======

        int max = 0;
        for (int n : nums) {
            max = Math.max(max, n);
        }
        int[] freq = new int[max + 1];
        for (int n : nums) {
            freq[n]++;
        }
        int ans = 0;
        for (int i = 1; i <= max; i++) {
            if (freq[i] > 0) {
                ans++;
            }
            for (int j = 2 * i; j <= max; j += i) {
                freq[i] += freq[j];
            }
        }
        return ans;

=======

        int n = nums.length;
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] cnt = new int[max + 1];
        for (int num : nums) {
            cnt[num]++;
        }
        int[] dp = new int[max + 1];
        for (int i = 1; i <= max; i++) {
            for (int j = i; j <= max; j += i) {
                dp[i] += cnt[j];
            }
        }
        int res = 0;
        for (int i = 1; i <= max; i++) {
            if (dp[i] > 0) {
                int j = i;
                while (j <= max) {
                    if (dp[j] > 0 && gcd(i, j) == i) {
                        res++;
                        break;
                    }
                    j += i;
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int max = 0;
        for (int num : nums) {
            max = Math.max(max, num);
        }
        int[] cnt = new int[max + 1];
        for (int num : nums) {
            cnt[num]++;
        }
        int[] sum = new int[max + 1];
        for (int i = 1; i <= max; i++) {
            for (int j = i; j <= max; j += i) {
                sum[i] += cnt[j];
            }
        }
        int ans = 0;
        for (int i = 1; i <= max; i++) {
            if (sum[i] > 0) {
                int gcd = i;
                for (int j = i + i; j <= max; j += i) {
                    if (sum[j] > 0) {
                        gcd = gcd(gcd, j);
                    }
                }
                if (gcd == i) {
                    ans++;
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, nums[i]);
        }
        int[] cnt = new int[max + 1];
        for (int i = 0; i < n; i++) {
            cnt[nums[i]]++;
        }
        boolean[] vis = new boolean[max + 1];
        int ans = 0;
        for (int i = 1; i <= max; i++) {
            if (cnt[i] > 0) {
                ans++;
            }
            if (cnt[i] == 0) {
                continue;
            }
            for (int j = 2 * i; j <= max; j += i) {
                if (vis[j]) {
                    continue;
                }
                if (cnt[j] > 0) {
                    ans++;
                    vis[j] = true;
                }
            }
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
        }
        boolean[] isPresent = new boolean[max + 1];
        for (int i = 0; i < nums.length; i++) {
            isPresent[nums[i]] = true;
        }
        int count = 0;
        for (int i = 1; i <= max; i++) {
            int gcd = 0;
            for (int j = i; j <= max; j += i) {
                if (isPresent[j]) {
                    gcd = gcd(gcd, j);
                }
            }
            if (gcd == i) {
                count++;
            }
        }
        return count;

=======

        int[] count = new int[200001];
        for (int i : nums) {
            count[i]++;
        }
        int ans = 0;
        for (int i = 1; i <= 200000; i++) {
            if (count[i] > 0) {
                ans++;
                for (int j = i + i; j <= 200000; j += i) {
                    count[j] = 0;
                }
            }
        }
        return ans;

=======

        int n = 200000;
        boolean[] seen = new boolean[n + 1];
        for (int num : nums) {
            seen[num] = true;
        }

        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                if (seen[j]) {
                    dp[i] = gcd(dp[i], j);
                }
            }
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (dp[i] == i) {
                ans++;
            }
        }
        return ans;
