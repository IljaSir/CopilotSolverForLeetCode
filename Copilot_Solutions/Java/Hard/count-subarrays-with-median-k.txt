Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + (nums[i] < k ? -1 : 1);
        }
        Map<Integer, Integer> cnt = new HashMap<>();
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            ans += cnt.getOrDefault(pre[i], 0);
            cnt.put(pre[i], cnt.getOrDefault(pre[i], 0) + 1);
        }
        return ans;

=======

        int[] prefix = new int[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            prefix[i + 1] = prefix[i] + (nums[i] < k ? -1 : 1);
        }
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < prefix.length; i++) {
            res += map.getOrDefault(prefix[i], 0);
            map.put(prefix[i] + 1, map.getOrDefault(prefix[i] + 1, 0) + 1);
        }
        return res;

=======

        int n = nums.length;
        int[] pos = new int[n+1];
        for (int i = 0; i < n; i++) {
            pos[nums[i]] = i;
        }
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && pos[stack.peek()] < pos[nums[i]]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                left[i] = i + 1;
            } else {
                left[i] = i - pos[stack.peek()];
            }
            stack.push(nums[i]);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && pos[stack.peek()] < pos[nums[i]]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                right[i] = n - i;
            } else {
                right[i] = pos[stack.peek()] - i;
            }
            stack.push(nums[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == k) {
                ans += left[i] * right[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] left = new int[n], right = new int[n];
        left[0] = 1;
        right[n - 1] = 1;
        for (int i = 1; i < n; i++) {
            left[i] = 1;
            if (nums[i] < nums[i - 1]) {
                left[i] += left[i - 1];
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            right[i] = 1;
            if (nums[i] < nums[i + 1]) {
                right[i] += right[i + 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == k) {
                ans += left[i] * right[i];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        int[] prefix = new int[n + 1];
        int res = 0;
        for (int i = 0; i < n; i++) {
            count[nums[i]]++;
            prefix[nums[i]] += nums[i];
            if (nums[i] > k) {
                count[nums[i]] += count[nums[i] - 1];
                prefix[nums[i]] += prefix[nums[i] - 1];
            }
            if (nums[i] < k) {
                int left = nums[i] - 1;
                int right = k - 1;
                int sum = prefix[right] - prefix[left];
                int cnt = count[right] - count[left];
                res += cnt * k - sum;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] a = new int[n + 2];
        int[] b = new int[n + 2];
        int[] c = new int[n + 2];
        for (int i = 0; i < n; i++) {
            if (nums[i] < k) {
                a[i + 1] = 1;
            } else if (nums[i] > k) {
                b[i + 1] = 1;
            } else {
                c[i + 1] = 1;
            }
        }
        for (int i = 1; i <= n; i++) {
            a[i] += a[i - 1];
            b[i] += b[i - 1];
            c[i] += c[i - 1];
        }
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            int l = i + 1;
            int r = n;
            while (l < r) {
                int m = (l + r) / 2;
                if (a[m + 1] - a[i] > c[m + 1] - c[i]) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            if (a[l] - a[i] == c[l] - c[i]) {
                ans += l - i;
            }
            l = i + 1;
            r = n;
            while (l < r) {
                int m = (l + r) / 2;
                if (b[m + 1] - b[i] > c[m + 1] - c[i]) {
                    r = m;
                } else {
                    l = m + 1;
                }
            }
            if (b[l] - b[i] == c[l] - c[i]) {
                ans += l - i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        count[0] = 1;
        int res = 0;
        int sum = 0;
        for (int num : nums) {
            sum += num < k ? -1 : 1;
            res += count[sum];
            count[sum]++;
        }
        return res;

=======

        int[] count = new int[nums.length + 1];
        count[0] = 1;
        int res = 0, preSum = 0;
        for (int num : nums) {
            preSum += num < k ? -1 : 1;
            res += count[preSum];
            count[preSum]++;
        }
        return res;

=======

        int[] cnt = new int[nums.length + 1];
        int[] pre = new int[nums.length + 1];
        int res = 0;
        for (int i = 0; i < nums.length; i++) {
            cnt[nums[i]]++;
            pre[i + 1] = pre[i] + cnt[nums[i]];
        }
        int med = 0;
        for (int i = 0; i < nums.length; i++) {
            if (cnt[k] == 0) {
                break;
            }
            med = k;
            int l = i;
            int r = nums.length - 1;
            while (l < r) {
                int m = (l + r + 1) / 2;
                int cntl = pre[m + 1] - pre[i];
                int cntr = pre[nums.length] - pre[m + 1];
                if (cntl == cntr) {
                    l = r = m;
                } else if (cntl < cntr) {
                    l = m;
                } else {
                    r = m - 1;
                }
            }
            res += cnt[l + 1];
            cnt[nums[i]]--;
        }
        return res;

=======

        int[] count = new int[nums.length + 1];
        int[] prefixSum = new int[nums.length + 1];
        count[0] = 1;
        int sum = 0;
        for (int num : nums) {
            sum += num < k ? -1 : 1;
            prefixSum[sum + nums.length]++;
        }
        int total = 0;
        for (int i = 0; i <= nums.length; i++) {
            total += prefixSum[i] * count[i];
            count[i] += prefixSum[i];
        }
        return total;
