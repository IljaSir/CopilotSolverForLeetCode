Synthesizing 9/10 solutions

=======

        Arrays.sort(restrictions, (a, b) -> a[0] - b[0]);
        int m = restrictions.length;
        for (int i = 0; i < m; i++) {
            restrictions[i][0]--;
        }
        for (int i = m - 1; i >= 0; i--) {
            int[] r = restrictions[i];
            if (i < m - 1) {
                r[1] = Math.min(r[1], restrictions[i + 1][1] + restrictions[i + 1][0] - r[0]);
            }
            r[1] = Math.min(r[1], r[0] + r[1]);
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            int[] r = restrictions[i];
            if (i > 0) {
                int[] r2 = restrictions[i - 1];
                ans = Math.max(ans, (r[1] - r2[1] + r[0] - r2[0]) / 2);
            }
            ans = Math.max(ans, r[1]);
        }
        if (m == 0 || restrictions[m - 1][0] < n - 1) {
            int[] r = m == 0 ? new int[] {0, 0} : restrictions[m - 1];
            ans = Math.max(ans, r[1] + n - 1 - r[0]);
        }
        return ans;

=======

        Arrays.sort(restrictions, (a, b) -> Integer.compare(a[0], b[0]));
        int m = restrictions.length;
        if (m == 0 || restrictions[m - 1][0] != n) {
            restrictions = Arrays.copyOf(restrictions, m + 1);
            restrictions[m++] = new int[] {n, n - 1};
        }
        if (restrictions[0][0] != 1) {
            restrictions = Arrays.copyOf(restrictions, m + 1);
            restrictions[m++] = new int[] {1, 0};
            for (int i = m - 1; i > 0; i--) {
                restrictions[i] = restrictions[i - 1];
            }
            restrictions[0] = new int[] {1, 0};
        }
        for (int i = 1; i < m; i++) {
            restrictions[i][1] = Math.min(restrictions[i][1], restrictions[i - 1][1] + restrictions[i][0] - restrictions[i - 1][0]);
        }
        for (int i = m - 2; i >= 0; i--) {
            restrictions[i][1] = Math.min(restrictions[i][1], restrictions[i + 1][1] + restrictions[i + 1][0] - restrictions[i][0]);
        }
        int ans = 0;
        for (int i = 1; i < m; i++) {
            int h = restrictions[i][1];
            int d = restrictions[i][0] - restrictions[i - 1][0];
            int h0 = restrictions[i - 1][1];
            ans = Math.max(ans, Math.max(h0 + d, h + d / 2));
        }
        return ans;

=======

        Arrays.sort(restrictions, (a, b) -> a[0] - b[0]);
        int m = restrictions.length;
        if (restrictions.length == 0 || restrictions[m - 1][0] != n) {
            restrictions = Arrays.copyOf(restrictions, m + 1);
            restrictions[m] = new int[] {n, n - 1};
        }
        if (restrictions[0][0] != 1) {
            restrictions = Arrays.copyOf(restrictions, m + 1);
            for (int i = m; i > 0; i--) {
                restrictions[i] = restrictions[i - 1];
            }
            restrictions[0] = new int[] {1, 0};
        }
        for (int i = 1; i < restrictions.length; i++) {
            restrictions[i][1] = Math.min(restrictions[i][1], restrictions[i - 1][1] + restrictions[i][0] - restrictions[i - 1][0]);
        }
        for (int i = restrictions.length - 2; i >= 0; i--) {
            restrictions[i][1] = Math.min(restrictions[i][1], restrictions[i + 1][1] + restrictions[i + 1][0] - restrictions[i][0]);
        }
        int res = 0;
        for (int i = 1; i < restrictions.length; i++) {
            int d = restrictions[i][0] - restrictions[i - 1][0];
            int h = Math.abs(restrictions[i][1] - restrictions[i - 1][1]);
            res = Math.max(res, Math.min(restrictions[i][1], restrictions[i - 1][1]) + (d - h) / 2);
        }
        return res;

=======

        int m = restrictions.length;
        int[][] r = new int[m + 2][2];
        r[0][0] = 1;
        r[0][1] = 0;
        r[m + 1][0] = n;
        r[m + 1][1] = n - 1;
        for (int i = 0; i < m; i++) {
            r[i + 1][0] = restrictions[i][0];
            r[i + 1][1] = restrictions[i][1];
        }
        Arrays.sort(r, (a, b) -> a[0] - b[0]);
        for (int i = 1; i < m + 2; i++) {
            r[i][1] = Math.min(r[i][1], r[i - 1][1] + r[i][0] - r[i - 1][0]);
        }
        for (int i = m + 1; i > 0; i--) {
            r[i - 1][1] = Math.min(r[i - 1][1], r[i][1] + r[i][0] - r[i - 1][0]);
        }
        int ans = 0;
        for (int i = 1; i < m + 2; i++) {
            ans = Math.max(ans, Math.min(r[i - 1][1], r[i][1]) + (r[i][0] - r[i - 1][0] - Math.abs(r[i][1] - r[i - 1][1])) / 2);
        }
        return ans;

=======

        int m = restrictions.length;
        int[][] rs = new int[m+2][2];
        for (int i = 0; i < m; i++) {
            rs[i] = restrictions[i];
        }
        rs[m][0] = 1;
        rs[m][1] = 0;
        rs[m+1][0] = n;
        rs[m+1][1] = n - 1;
        Arrays.sort(rs, (a, b) -> a[0] - b[0]);
        for (int i = 1; i < m+2; i++) {
            rs[i][1] = Math.min(rs[i][1], rs[i-1][1] + (rs[i][0] - rs[i-1][0]));
        }
        for (int i = m+1; i > 0; i--) {
            rs[i-1][1] = Math.min(rs[i-1][1], rs[i][1] + (rs[i][0] - rs[i-1][0]));
        }
        int res = 0;
        for (int i = 1; i < m+2; i++) {
            res = Math.max(res, (rs[i][1] + rs[i][0] + rs[i-1][1] - rs[i-1][0]) / 2);
        }
        return res;

=======

        int m = restrictions.length;
        int[][] r = new int[m + 2][2];
        r[0][0] = 1;
        r[0][1] = 0;
        for (int i = 0; i < m; i++) {
            r[i + 1][0] = restrictions[i][0];
            r[i + 1][1] = restrictions[i][1];
        }
        r[m + 1][0] = n;
        r[m + 1][1] = n - 1;
        Arrays.sort(r, (a, b) -> a[0] - b[0]);
        for (int i = 1; i < r.length; i++) {
            r[i][1] = Math.min(r[i][1], r[i - 1][1] + r[i][0] - r[i - 1][0]);
        }
        for (int i = r.length - 2; i >= 0; i--) {
            r[i][1] = Math.min(r[i][1], r[i + 1][1] + r[i + 1][0] - r[i][0]);
        }
        int ans = 0;
        for (int i = 1; i < r.length; i++) {
            ans = Math.max(ans, Math.abs(r[i][0] - r[i - 1][0]) + Math.min(r[i][1], r[i - 1][1]));
        }
        return ans;

=======

        int len = restrictions.length;
        int[][] res = new int[len+2][2];
        res[0][0] = 1;
        res[0][1] = 0;
        res[len+1][0] = n;
        res[len+1][1] = n-1;
        for(int i=0;i<len;i++){
            res[i+1][0] = restrictions[i][0];
            res[i+1][1] = restrictions[i][1];
        }
        Arrays.sort(res, (a,b)->a[0]-b[0]);
        for(int i=1;i<len+2;i++){
            res[i][1] = Math.min(res[i][1], res[i-1][1]+res[i][0]-res[i-1][0]);
        }
        for(int i=len;i>=0;i--){
            res[i][1] = Math.min(res[i][1], res[i+1][1]+res[i+1][0]-res[i][0]);
        }
        int ans = 0;
        for(int i=1;i<len+2;i++){
            int h = Math.min(res[i][1], res[i-1][1]+(res[i][0]-res[i-1][0]));
            ans = Math.max(ans, h);
        }
        return ans;

=======

        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        for (int[] r : restrictions)
            dp[r[0]] = r[1];
        for (int i = 1; i <= n; i++) {
            if (dp[i] == -1) continue;
            dp[i] = Math.min(dp[i], i-1);
        }
        for (int i = 1; i <= n; i++) {
            if (dp[i] == -1) continue;
            dp[i] = Math.min(dp[i], dp[i-1]+1);
        }
        for (int i = n-1; i >= 1; i--) {
            if (dp[i] == -1) continue;
            dp[i] = Math.min(dp[i], dp[i+1]+1);
        }
        int ans = 0;
        for (int i = 2; i <= n; i++) {
            if (dp[i] == -1) continue;
            ans = Math.max(ans, (dp[i-1]+dp[i]+i-i)/2);
        }
        return ans;

=======

        Arrays.sort(restrictions, (a, b) -> {
            return a[0] - b[0];
        });
        
        int len = restrictions.length;
        int[][] dp = new int[len][2];
        dp[0][0] = restrictions[0][1];
        dp[0][1] = restrictions[0][1];
        for (int i = 1; i < len; i++) {
            int x = restrictions[i][0];
            int y = restrictions[i][1];
            dp[i][0] = Math.min(y, Math.max(dp[i - 1][0], dp[i - 1][1] + (x - restrictions[i - 1][0])));
            dp[i][1] = Math.min(y, Math.max(dp[i - 1][1], dp[i - 1][0] + (x - restrictions[i - 1][0])));
        }
        
        int ans = dp[len - 1][0];
        for (int i = len - 2; i >= 0; i--) {
            int x = restrictions[i][0];
            int y = restrictions[i][1];
            int h = Math.min(y, Math.max(dp[i + 1][0], dp[i + 1][1] + (restrictions[i + 1][0] - x)));
            ans = Math.max(ans, h);
        }
        
        int[] last = restrictions[len - 1];
        ans = Math.max(ans, n - last[0] + last[1]);
        return ans;
