Synthesizing 10/10 solutions

=======

        double x = 0, y = 0;
        for (int[] p : positions) {
            x += p[0];
            y += p[1];
        }
        x /= positions.length;
        y /= positions.length;
        double step = 100, eps = 1e-6;
        while (step > eps) {
            double min = getDistSum(positions, x, y);
            double nx = x, ny = y;
            if (getDistSum(positions, x + step, y) < min) {
                min = getDistSum(positions, nx = x + step, y);
            }
            if (getDistSum(positions, x - step, y) < min) {
                min = getDistSum(positions, nx = x - step, y);
            }
            if (getDistSum(positions, x, y + step) < min) {
                min = getDistSum(positions, x, ny = y + step);
            }
            if (getDistSum(positions, x, y - step) < min) {
                min = getDistSum(positions, x, ny = y - step);
            }
            x = nx;
            y = ny;
            step /= 2;
        }
        return getDistSum(positions, x, y);
    }

    public double getDistSum(int[][] positions, double x, double y) {
        double dist = 0;
        for (int[] p : positions) {
            dist += Math.sqrt((p[0] - x) * (p[0] - x) + (p[1] - y) * (p[1] - y));
        }
        return dist;

=======

        double x = 0, y = 0;
        for (int[] p : positions) {
            x += p[0];
            y += p[1];
        }
        x /= positions.length;
        y /= positions.length;
        double step = 100, eps = 1e-6;
        while (step > eps) {
            double[] d = new double[4];
            for (int[] p : positions) {
                double dx = p[0] - x, dy = p[1] - y;
                d[0] += dx;
                d[1] += dy;
                d[2] += dx * dx + dy * dy;
            }
            if (d[0] > 0) x += step;
            if (d[0] < 0) x -= step;
            if (d[1] > 0) y += step;
            if (d[1] < 0) y -= step;
            step *= 0.999;
        }
        return Math.sqrt(d[2]);

=======

        int n = positions.length;
        double x = 0, y = 0;
        for (int[] p : positions) {
            x += p[0];
            y += p[1];
        }
        x /= n;
        y /= n;

        double step = 100;
        double eps = 1e-6;
        while (step > eps) {
            int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
            for (int[] dir : dirs) {
                double nx = x + step * dir[0];
                double ny = y + step * dir[1];
                if (getDistSum(nx, ny, positions) < getDistSum(x, y, positions)) {
                    x = nx;
                    y = ny;
                }
            }
            step /= 2;
        }
        return getDistSum(x, y, positions);
    }

    private double getDistSum(double x, double y, int[][] positions) {
        double sum = 0;
        for (int[] p : positions) {
            sum += Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]));
        }
        return sum;

=======

        double x = 0, y = 0, step = 100;
        for (int i = 0; i < 100; ++i, step /= 2) {
            double min = Double.MAX_VALUE;
            for (int j = 0; j < 4; ++j) {
                double nx = x + (j % 2 == 0 ? step : -step);
                double ny = y + (j / 2 == 0 ? step : -step);
                double sum = 0;
                for (int[] p : positions) {
                    sum += Math.sqrt(Math.pow(nx - p[0], 2) + Math.pow(ny - p[1], 2));
                }
                if (sum < min) {
                    min = sum;
                    x = nx;
                    y = ny;
                }
            }
        }
        return min;

=======

        double res = Double.MAX_VALUE;
        double x = 0, y = 0;
        for (int i = 0; i < positions.length; i++) {
            x += positions[i][0];
            y += positions[i][1];
        }
        x /= positions.length;
        y /= positions.length;
        double step = 100;
        while (step > 1e-6) {
            double min = res;
            for (int i = 0; i < 4; i++) {
                double nx = x + step * (i % 2 == 0 ? 1 : -1);
                double ny = y + step * (i / 2 == 0 ? 1 : -1);
                double nres = 0;
                for (int j = 0; j < positions.length; j++) {
                    nres += Math.sqrt((nx - positions[j][0]) * (nx - positions[j][0]) + (ny - positions[j][1]) * (ny - positions[j][1]));
                }
                if (nres < min) {
                    res = nres;
                    x = nx;
                    y = ny;
                }
            }
            step /= 2;
        }
        return res;

=======

        double x = 0, y = 0, step = 100;
        for (int i = 0; i < 100; ++i) {
            int[] best = null;
            for (int[] p : positions) {
                if (best == null || dist(x, y, p) < dist(x, y, best))
                    best = p;
            }
            x += step * (best[0] - x);
            y += step * (best[1] - y);
            step *= 0.99;
        }
        return dist(x, y, positions);
    }

    public double dist(double x, double y, int[][] positions) {
        double sum = 0;
        for (int[] p : positions)
            sum += dist(x, y, p);
        return sum;

=======

        int n = positions.length;
        double x = 0, y = 0, step = 100;
        for (int i = 0; i < 100; i++) {
            double[] best = new double[] {x, y};
            for (int j = 0; j < 4; j++) {
                double nx = x + step * (j % 2 == 0 ? 1 : -1);
                double ny = y + step * (j < 2 ? 1 : -1);
                if (getDistSum(positions, nx, ny) < getDistSum(positions, best[0], best[1])) {
                    best[0] = nx;
                    best[1] = ny;
                }
            }
            x = best[0];
            y = best[1];
            step /= 2;
        }
        return getDistSum(positions, x, y);
    }

    private double getDistSum(int[][] positions, double x, double y) {
        double sum = 0;
        for (int[] p : positions) {
            sum += Math.sqrt((x - p[0]) * (x - p[0]) + (y - p[1]) * (y - p[1]));
        }
        return sum;

=======

        double x = 0, y = 0, step = 100;
        for (int i = 0; i < 100; ++i, step /= 2) {
            double[] d = new double[]{0, 0, 0, 0};
            for (int[] p : positions) {
                double dx = p[0] - x, dy = p[1] - y;
                d[0] += Math.abs(dx);
                d[1] += Math.abs(dy);
                d[2] += Math.abs(dx);
                d[3] += Math.abs(dy);
            }
            int k = 0;
            for (int j = 1; j < 4; ++j) {
                if (d[j] < d[k]) {
                    k = j;
                }
            }
            x += (k == 0 || k == 2) ? step : -step;
            y += (k == 1 || k == 2) ? step : -step;
        }
        double ans = 0;
        for (int[] p : positions) {
            ans += Math.sqrt(Math.pow(p[0] - x, 2) + Math.pow(p[1] - y, 2));
        }
        return ans;

=======

        double x = 0, y = 0, step = 100;
        for (int i = 0; i < 100; i++) {
            double[][] sums = {{x - step, y}, {x + step, y}, {x, y - step}, {x, y + step}};
            double min = Double.MAX_VALUE;
            for (double[] sum : sums) {
                double sumDist = 0;
                for (int[] position : positions) {
                    sumDist += getDistance(sum, position);
                }
                if (sumDist < min) {
                    min = sumDist;
                    x = sum[0];
                    y = sum[1];
                }
            }
            step /= 2;
        }
        return min;

=======

        double res = 0;
        double x = 50, y = 50;
        double step = 100;
        int n = positions.length;
        while (step > 1e-6) {
            double[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
            int idx = -1;
            double min = Double.MAX_VALUE;
            for (int i = 0; i < 4; i++) {
                double nx = x + dirs[i][0] * step;
                double ny = y + dirs[i][1] * step;
                double sum = 0;
                for (int j = 0; j < n; j++) {
                    sum += getDist(nx, ny, positions[j][0], positions[j][1]);
                }
                if (sum < min) {
                    min = sum;
                    idx = i;
                }
            }
            x += dirs[idx][0] * step;
            y += dirs[idx][1] * step;
            step *= 0.999;
        }
        return min;
