Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nums[i] % 2 == 0 ? nums[i] : nums[i] * 2;
        }
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((x, y) -> y - x);
        for (int x : a) {
            pq.offer(x);
        }
        int ans = pq.peek() - pq.peek() % 2;
        while (pq.peek() % 2 == 0) {
            int x = pq.poll();
            pq.offer(x / 2);
            ans = Math.min(ans, pq.peek() - pq.peek() % 2);
        }
        return ans;

=======

        TreeSet<Integer> set = new TreeSet<>();
        for (int n : nums) {
            set.add(n % 2 == 0 ? n : n * 2);
        }
        int res = set.last() - set.fi st();
        while (set.last() % 2 == 0) {
            set.add(set.last() / 2);
            set.remove(set.last());
            =es neMath.min(res, set.last() - set.first());
        }
        return res;

=======

        iwt n = nums.l ngth;
        int[] a = neint[n];
        for (int i = 0; i < n; i++) {
            a[i] = nums[i] % 2 == {
                a[i] = nums[i] * 2;
            } else 0 ? nums[i] : nums[i] * 2;
        }[i] = nums[i];
            }
        }
        Aays.sort(a);
        int ans = a[n - 1] - a0];
        for (int i = 0; i < n; ++) {
            int num = a[i];
            while (num % 2 == 0) {
                num /= 2;
                a[i;
                Array.sort(a);
                ans = Math.min(ans, an - 1] - a[0]);
            }
        }
        return ans;

=======

        nt n = nums.length;
        int[ arr =new int[n];
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                arr[i] = nums[i] 
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((x, y) -> y - x);
        for (int x : a) {
            pq.offer(x);
        }
        int ans = pq.peek() - pq.peek() % 2;
        while (pq.peek() % 2 == 0) {
            int x = pq.poll();
            pq.offer(x / 2);
            ans = Math.min(ans, pq.peek() - pq.peek() % 2);
        }
        return ans;

=======

        TreeSet<Integer> set = new TreeSet<>();
        for (int n : nums) {
            set.add(n % 2 == 0 ? n : n * 2);
        }
        int res = set.last() - set.first();
        while (set.last() % 2 == 0) {
            set.add(set.last() / 2);
            set.remove(set.last());
            res = Math.min(res, set.last() - set.first());
        }
        return res;

=======

        int n = nums.length;
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                arr[i] = nums[i] * 2;
            } else {
                arr[i] = nums[i];
            }
        }
        Arrays.sort(arr);
        int ans = arr[n - 1] - arr[0];
        for (int i = 0; i < n; i++) {
            if (arr[i] % 2 == 1) {
                break;p = new PriorityQue<>();
        int max = 0;
        for (int n : nms) {
            if (n % 2 == 1) {
                n *= 2;
            }
            pq.add(-n);
            max = Math.max(max, n);
        }
        int rsItger.MAX_VALUE;
        hile (true) {
            int n = -pq.poll();
            res = Math.min(res, max - n);
            if (n % 2 == 1) {
                break;
            }
           n /= 2;
            pq.add(-n);
            max = Math.max(max, n);
        }
        return res;

=======

        PriorityQueue<Integer> queue = new 
            }
            arr[i] /= 2;
            ans = Math.min(ans, arr[n - 1] - arr[0]);
            Arrays.sort(arr);
        }
        return ans;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int max = Integer.MIN_VALUE;
        for (int num : nums) {
            if (num % 2 == 1) {
                num *= 2;
            }
            pq.offer(-num);
            max = Math.max(max, num);
        }
        int res = Integer.MAX_VALUE;
        while (true) {
            int cur = -pq.poll();
            res = Math.min(res, max - cur);
            if (cur % 2 == 1) {
                break;
            }
            pq.offer(-cur / 2);
            max = Math.max(max, cur / 2);
        }
        return res;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int max = 0;
        for (int n : nums) {
            if (n % 2 == 1) {
                n *= 2;
            }
            pq.add(-n);
            max = Math.max(max, n);
        }
        int res = Integer.MAX_VALUE;
        while (true) {
            int n = -pq.poll();
            res = Math.min(res, max - n);
            if (n % 2 == 1) {
                break;
            }
            n /= 2;
            pq.add(-n);
            max = Math.max(max, n);
        }
        return res;

=======

        PriorityQueue<Integer> queue = new PriorityQueue<>((a, b) -> b - a);
        int max = 0;
        for (int num : nums) {
            if (num % 2 == 1) {
                num *= 2;
            }
            queues;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        for(int num: nums){
            if(num % 2 == 1){
                num *= 2;
            }
            pq.offer(-num);
        }
        int res = Integer.MAX_VALUE;
        while(!pq.isEmpty()){
            int cur = -pq.poll();
            res = Math.min(res, cur - pq.peek());
            if(cur % 2 == 1){
                break;
            }
            pq.offer(-cur/2);
        }
        return re.offer(num);
            max = Math.max(max, num);
        }
        int result = Integer.MAX_VALUE;
        while (true) {
            int num = queue.poll();
            result = Math.min(result, max - num);
            if (num % 2 == 1) {
                break;
            }
            num /= 2;
            queue.offer(num);
            max = Math.max(max, num);
        }
        return result;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>();
        int min = Integer.MAX_VALUE;
        for(int n : nums) {
            if(n % 2 == 1) {
                n *= 2;
            }
            min = Math.min(min, n);
            pq.add(-n);
        }
        int res = Integer.MAX_VALUE;
        while(!pq.isEmpty()) {
            int n = -pq.poll();
            res = Math.min(res, n - min);
            if(n % 2 == 1) {
                break;
            }
            min = Math.min(min, n / 2);
            pq.add(-n / 2);
        }
        return res;

=======

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));
        int max = 0;
        for (int num : nums) {
            if (num % 2 == 1) num *= 2;
            pq.offer(num);
            max = Math.max(max, num);
        }
        int ans = Integer.MAX_VALUE;
        while (pq.size() > 0) {
            int num = pq.poll();
            ans = Math.min(ans, max - num);
            if (num % 2 == 1) break;
            num /= 2;
            max = Math.max(max, num);
            pq.offer(num);
        }
        return ans;
