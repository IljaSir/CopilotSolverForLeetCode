Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < dp.length; i++) {
            if (dp[i] == -1) {
                continue;
            }
            for (String sticker : stickers) {
                int next = i;
                for (char c : sticker.toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((next >> j) & 1) == 0 && c == target.charAt(j)) {
                            next |= 1 << j;
                            break;
                        }
                    }
                }
                if (dp[next] == -1 || dp[next] > dp[i] + 1) {
                    dp[next] = dp[i] + 1;
                }
            }
        }
        return dp[dp.length - 1];

=======

        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int state = 0; state < dp.length; state++) {
            if (dp[state] == -1) continue;
            for (String sticker : stickers) {
                int now = state;
                for (char letter : sticker.toCharArray()) {
                    for (int i = 0; i < target.length(); i++) {
                        if (((now >> i) & 1) == 1) continue;
                        if (target.charAt(i) == letter) {
                            now |= 1 << i;
                            break;
                        }
                    }
                }
                if (dp[now] == -1 || dp[now] > dp[state] + 1) {
                    dp[now] = dp[state] + 1;
                }
            }
        }
        return dp[dp.length - 1];

=======

        int[][] count = new int[stickers.length][26];
        for (int i = 0; i < stickers.length; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int state = 0; state < dp.length; state++) {
            if (dp[state] == Integer.MAX_VALUE) {
                continue;
            }
            for (int i = 0; i < stickers.length; i++) {
                int now = state;
                for (char c : stickers[i].toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((now >> j) & 1) == 1) {
                            continue;
                        }
                        if (c == target.charAt(j)) {
                            now |= 1 << j;
                            break;
                        }
                    }
                }
                dp[now] = Math.min(dp[now], dp[state] + 1);
            }
        }
        return dp[dp.length - 1] == Integer.MAX_VALUE ? -1 : dp[dp.length - 1];

=======

        int n = stickers.length;
        int[][] count = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        Map<String, Integer> dp = new HashMap<>();
        dp.put("", 0);
        return helper(dp, count, target);
    }
    
    private int helper(Map<String, Integer> dp, int[][] count, String target) {
        if (dp.containsKey(target)) {
            return dp.get(target);
        }
        int ans = Integer.MAX_VALUE, n = count.length;
        int[] tar = new int[26];
        for (char c : target.toCharArray()) {
            tar[c - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            if (count[i][target.charAt(0) - 'a'] == 0) {
                continue;
            }
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < 26; j++) {
                if (tar[j] > 0) {
                    for (int k = 0; k < Math.max(0, tar[j] - count[i][j]); k++) {
                        sb.append((char)(j + 'a'));
                    }
                }
            }
            String s = sb.toString();
            int tmp = helper(dp, count, s);
            if (tmp != -1) {
                ans = Math.min(ans, 1 + tmp);
            }
        }
        dp.put(target, ans == Integer.MAX_VALUE ? -1 : ans);
        return dp.get(target);

=======

        int n = stickers.length;
        int[][] map = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (char c: stickers[i].toCharArray()) {
                map[i][c - 'a']++;
            }
        }
        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int state = 0; state < (1 << target.length()); state++) {
            if (dp[state] == Integer.MAX_VALUE) {
                continue;
            }
            for (int i = 0; i < n; i++) {
                int now = state;
                for (char c: stickers[i].toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((now >> j) & 1) == 0 && c == target.charAt(j)) {
                            now |= (1 << j);
                            break;
                        }
                    }
                }
                dp[now] = Math.min(dp[now], dp[state] + 1);
            }
        }
        return dp[(1 << target.length()) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << target.length()) - 1];

=======

        int n = target.length();
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == Integer.MAX_VALUE) {
                continue;
            }
            for (String sticker : stickers) {
                int next = mask;
                for (char letter : sticker.toCharArray()) {
                    for (int i = 0; i < n; i++) {
                        if (((next >> i) & 1) == 0 && target.charAt(i) == letter) {
                            next |= 1 << i;
                            break;
                        }
                    }
                }
                dp[next] = Math.min(dp[next], dp[mask] + 1);
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = target.length();
        int[] dp = new int[1 << n];
        for (int i = 1; i < (1 << n); i++) {
            dp[i] = -1;
        }
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i] == -1) {
                continue;
            }
            for (String sticker : stickers) {
                int j = i;
                for (char c : sticker.toCharArray()) {
                    for (int k = 0; k < n; k++) {
                        if (((j >> k) & 1) == 0 && target.charAt(k) == c) {
                            j |= 1 << k;
                            break;
                        }
                    }
                }
                if (dp[j] == -1 || dp[j] > dp[i] + 1) {
                    dp[j] = dp[i] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = stickers.length;
        int[][] dp = new int[1 << target.length()][target.length()];
        for (int[] d : dp)
            Arrays.fill(d, Integer.MAX_VALUE / 2);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < target.length(); j++) {
                if (stickers[i].indexOf(target.charAt(j)) != -1) {
                    dp[1 << j][j] = 1;
                }
            }
        }
        for (int state = 0; state < (1 << target.length()); state++) {
            int[] f = new int[target.length()];
            for (int i = 0; i < target.length(); i++) {
                f[i] = dp[state][i];
                for (int s = state; s != 0; s = (s - 1) & state) {
                    f[i] = Math.min(f[i], dp[s][i] + dp[state - s][i]);
                }
            }
            for (int i = 0; i < target.length(); i++) {
                dp[state][i] = f[i];
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < target.length(); i++) {
            ans = Math.min(ans, dp[(1 << target.length()) - 1][i]);
        }
        return ans == Integer.MAX_VALUE / 2 ? -1 : ans;

=======

        int[][] count = new int[stickers.length][26];
        for (int i = 0; i < stickers.length; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int state = 0; state < dp.length; state++) {
            if (dp[state] == Integer.MAX_VALUE) {
                continue;
            }
            for (int i = 0; i < stickers.length; i++) {
                int now = state;
                for (char c : stickers[i].toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((now >> j) & 1) == 1) {
                            continue;
                        }
                        if (c == target.charAt(j)) {
                            now |= 1 << j;
                            break;
                        }
                    }
                }
                dp[now] = Math.min(dp[now], dp[state] + 1);
            }
        }
        return dp[dp.length - 1] == Integer.MAX_VALUE ? -1 : dp[dp.length - 1];

=======

        int n = stickers.length;
        int[][] count = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        Map<String, Integer> dp = new HashMap<>();
        dp.put("", 0);
        return helper(dp, count, target);
    }
    
    private int helper(Map<String, Integer> dp, int[][] count, String target) {
        if (dp.containsKey(target)) {
            return dp.get(target);
        }
        int ans = Integer.MAX_VALUE, n = count.length;
        int[] tar = new int[26];
        for (char c : target.toCharArray()) {
            tar[c - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            if (count[i][target.charAt(0) - 'a'] == 0) {
                continue;
            }
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < 26; j++) {
                if (tar[j] > 0) {
                    for (int k = 0; k < Math.max(0, tar[j] - count[i][j]); k++) {
                        sb.append((char)(j + 'a'));
                    }
                }
            }
            String s = sb.toString();
            int tmp = helper(dp, count, s);
            if (tmp != -1) {
                ans = Math.min(ans, 1 + tmp);
            }
        }
        dp.put(target, ans == Integer.MAX_VALUE ? -1 : ans);
        return dp.get(target);

=======

        int n = stickers.length;
        int[][] map = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (char c: stickers[i].toCharArray()) {
                map[i][c - 'a']++;
            }
        }
        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int state = 0; state < (1 << target.length()); state++) {
            if (dp[state] == Integer.MAX_VALUE) {
                continue;
            }
            for (int i = 0; i < n; i++) {
                int now = state;
                for (char c: stickers[i].toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((now >> j) & 1) == 0 && c == target.charAt(j)) {
                            now |= (1 << j);
                            break;
                        }
                    }
                }
                dp[now] = Math.min(dp[now], dp[state] + 1);
            }
        }
        return dp[(1 << target.length()) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << target.length()) - 1];

=======

        int n = target.length();
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == Integer.MAX_VALUE) {
                continue;
            }
            for (String sticker : stickers) {
                int next = mask;
                for (char letter : sticker.toCharArray()) {
                    for (int i = 0; i < n; i++) {
                        if (((next >> i) & 1) == 0 && target.charAt(i) == letter) {
                            next |= 1 << i;
                            break;
                        }
                    }
                }
                dp[next] = Math.min(dp[next], dp[mask] + 1);
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = target.length();
        int[] dp = new int[1 << n];
        for (int i = 1; i < (1 << n); i++) {
            dp[i] = -1;
        }
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i] == -1) {
                continue;
            }
            for (String sticker : stickers) {
                int j = i;
                for (char c : sticker.toCharArray()) {
                    for (int k = 0; k < n; k++) {
                        if (((j >> k) & 1) == 0 && target.charAt(k) == c) {
                            j |= 1 << k;
                            break;
                        }
                    }
                }
                if (dp[j] == -1 || dp[j] > dp[i] + 1) {
                    dp[j] = dp[i] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int[][] count = new int[stickers.length][26];
        for (int i = 0; i < stickers.length; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        int[] dp = new int[1 << target.length()];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int state = 0; state < dp.length; state++) {
            if (dp[state] == Integer.MAX_VALUE) {
                continue;
            }
            for (int i = 0; i < stickers.length; i++) {
                int now = state;
                for (char c : stickers[i].toCharArray()) {
                    for (int j = 0; j < target.length(); j++) {
                        if (((now >> j) & 1) == 1) {
                            continue;
                        }
                        if (c == target.charAt(j)) {
                            now |= 1 << j;
                            break;
                        }
                    }
                }
                dp[now] = Math.min(dp[now], dp[state] + 1);
            }
        }
        return dp[dp.length - 1] == Integer.MAX_VALUE ? -1 : dp[dp.length - 1];

=======

        int n = stickers.length;
        int[][] count = new int[n][26];
        for (int i = 0; i < n; i++) {
            for (char c : stickers[i].toCharArray()) {
                count[i][c - 'a']++;
            }
        }
        Map<String, Integer> dp = new HashMap<>();
        dp.put("", 0);
        return helper(dp, count, target);
    }
    
    private int helper(Map<String, Integer> dp, int[][] count, String target) {
        if (dp.containsKey(target)) {
            return dp.get(target);
        }
        int ans = Integer.MAX_VALUE, n = count.length;
        int[] tar = new int[26];
        for (char c : target.toCharArray()) {
            tar[c - 'a']++;
        }
        for (int i = 0; i < n; i++) {
            if (count[i][target.charAt(0) - 'a'] == 0) {
                continue;
            }
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < 26; j++) {
                if (tar[j] > 0) {
                    for (int k = 0; k < Math.max(0, tar[j] - count[i][j]); k++) {
                        sb.append((char)(j + 'a'));
                    }
                }
            }
            String s = sb.toString();
            int tmp = helper(dp, count, s);
            if (tmp != -1) {
                ans = Math.min(ans, 1 + tmp);
            }
        }
        dp.put(target, ans == Integer.MAX_VALUE ? -1 : ans);
        return dp.get(target);

=======

        int n = target.length();
        int[] dp = new int[1 << n];
        for (int i = 1; i < (1 << n); i++) {
            dp[i] = -1;
        }
        for (int i = 0; i < (1 << n); i++) {
            if (dp[i] == -1) {
                continue;
            }
            for (String sticker : stickers) {
                int j = i;
                for (char c : sticker.toCharArray()) {
                    for (int k = 0; k < n; k++) {
                        if (((j >> k) & 1) == 0 && target.charAt(k) == c) {
                            j |= 1 << k;
                            break;
                        }
                    }
                }
                if (dp[j] == -1 || dp[j] > dp[i] + 1) {
                    dp[j] = dp[i] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];
