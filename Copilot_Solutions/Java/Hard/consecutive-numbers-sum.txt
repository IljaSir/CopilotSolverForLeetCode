Synthesizing 10/17 solutions (Duplicates hidden)

=======

        int ans = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            if ((n - i * (i - 1) / 2) % i == 0) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 1; i * (i + 1) / 2 <= n; i++) {
            if ((n - i * (i + 1) / 2) % (i + 1) == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += j;
                if (sum == n) {
                    count++;
                }
                if (sum > n) {
                    break;
                }
            }
        }
        return count + 1;

=======

        int count = 0;
        for(int i = 1; i * (i - 1) / 2 < n; i++) {
            if((n - i * (i - 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i * (i + 1) / 2 <= n; i++) {
            if ((n - i * (i - 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for(int i = 1; i * (i + 1) / 2 <= n; i++) {
            if((n - i * (i + 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            int target = n - i * (i - 1) / 2;
            if (target % i == 0) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            int t = (n - i * (i - 1) / 2);
            if (t % i == 0) ans++;
        }
        return ans;

=======

        int count = 0;
        for (int i = 1; i <= (int) Math.sqrt(2 * n); i++) {
            if ((2 * n) % i == 0) {
                if (i % 2 == 1 && (2 * n) / i % 2 == 1) {
                    count++;
                } else if (i % 2 == 0 && (2 * n) / i % 2 == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i <= (int) Math.sqrt(2 * n); i++) {
            if ((2 * n) % i == 0) {
                if (i % 2 == 1 && (2 * n) / i % 2 == 1) {
                    count++;
                } else if (i % 2 == 0 && (2 * n) / i % 2 == 0) {
                    count++;
                }
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            if ((n - i * (i - 1) / 2) % i == 0) {
                ans++;
            }
        }
        return ans;

=======

        int count = 0;
        for (int i = 1; i * (i + 1) / 2 <= n; i++) {
            if ((n - i * (i + 1) / 2) % (i + 1) == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += j;
                if (sum == n) {
                    count++;
                }
                if (sum > n) {
                    break;
                }
            }
        }
        return count + 1;

=======

        int count = 0;
        for(int i = 1; i * (i - 1) / 2 < n; i++) {
            if((n - i * (i - 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 1; i * (i + 1) / 2 <= n; i++) {
            if ((n - i * (i - 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int count = 0;
        for(int i = 1; i * (i + 1) / 2 <= n; i++) {
            if((n - i * (i + 1) / 2) % i == 0) {
                count++;
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 1; i * (i - 1) / 2 < n; i++) {
            int t = (n - i * (i - 1) / 2);
            if (t % i == 0) ans++;
        }
        return ans;
