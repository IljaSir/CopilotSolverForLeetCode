Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 0; i < n; i++) {
            newNums[i + 1] = nums[i];
        }
        newNums[0] = 1;
        newNums[n + 1] = 1;
        n += 2;
        int[][] dp = new int[n][n];
        for (int i = n - 3; i >= 0; i--) {
            for (int j = i + 2; j < n; j++) {
                for (int k = i + 1; k < j; k++) {
                    dp[i][j] = Math.max(dp[i][j], newNums[i] * newNums[k] * newNums[j] + dp[i][k] + dp[k][j]);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 0; i < n; i++) {
            newNums[i + 1] = nums[i];
        }
        newNums[0] = newNums[n + 1] = 1;
        int[][] memo = new int[n + 2][n + 2];
        return burst(memo, newNums, 0, n + 1);
    }

    public int burst(int[][] memo, int[] nums, int left, int right) {
        if (left + 1 == right) {
            return 0;
        }
        if (memo[left][right] > 0) {
            return memo[left][right];
        }
        int ans = 0;
        for (int i = left + 1; i < right; i++) {
            int temp = nums[left] * nums[i] * nums[right];
            temp += burst(memo, nums, left, i);
            temp += burst(memo, nums, i, right);
            ans = Math.max(ans, temp);
        }
        memo[left][right] = ans;
        return ans;

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 0; i < n; i++) {
            newNums[i + 1] = nums[i];
        }
        newNums[0] = newNums[n + 1] = 1;

        int[][] dp = new int[n + 2][n + 2];
        for (int len = 1; len <= n; len++) {
            for (int left = 1; left <= n - len + 1; left++) {
                int right = left + len - 1;
                for (int i = left; i <= right; i++) {
                    int coins = newNums[left - 1] * newNums[i] * newNums[right + 1];
                    coins += dp[left][i - 1] + dp[i + 1][right];
                    dp[left][right] = Math.max(dp[left][right], coins);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 0; i < n; ++i) {
            newNums[i + 1] = nums[i];
        }
        newNums[0] = newNums[n + 1] = 1;
        n += 2;

        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = i + 1; k < j; ++k) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + newNums[i] * newNums[k] * newNums[j]);
                }
            }
        }

        return dp[0][n - 1];

=======

        int n = nums.length;
        int[] arr = new int[n + 2];
        arr[0] = arr[n + 1] = 1;
        for (int i = 0; i < n; i++) {
            arr[i + 1] = nums[i];
        }
        int[][] dp = new int[n + 2][n + 2];
        for (int len = 1; len <= n; len++) {
            for (int i = 1; i <= n - len + 1; i++) {
                int j = i + len - 1;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + arr[i - 1] * arr[k] * arr[j + 1] + dp[k + 1][j]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 1; i <= n; i++) {
            newNums[i] = nums[i - 1];
        }
        newNums[0] = newNums[n + 1] = 1;
        int[][] memo = new int[n + 2][n + 2];
        return burst(memo, newNums, 0, n + 1);
    }
    private int burst(int[][] memo, int[] nums, int left, int right) {
        if (left + 1 == right) {
            return 0;
        }
        if (memo[left][right] > 0) {
            return memo[left][right];
        }
        int ans = 0;
        for (int i = left + 1; i < right; i++) {
            int temp = nums[left] * nums[i] * nums[right];
            temp += burst(memo, nums, left, i);
            temp += burst(memo, nums, i, right);
            ans = Math.max(ans, temp);
        }
        memo[left][right] = ans;
        return ans;

=======

        int n = nums.length;
        int[] arr = new int[n + 2];
        arr[0] = arr[n + 1] = 1;
        for (int i = 1; i <= n; i++) {
            arr[i] = nums[i - 1];
        }
        int[][] dp = new int[n + 2][n + 2];
        for (int len = 1; len <= n; len++) {
            for (int i = 1; i <= n - len + 1; i++) {
                int j = i + len - 1;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j + 1]);
                }
            }
        }
        return dp[1][n];

=======

        int n = nums.length;
        int[] newNums = new int[n + 2];
        for (int i = 0; i < n; i++) newNums[i + 1] = nums[i];
        newNums[0] = newNums[n + 1] = 1;
        int[][] dp = new int[n + 2][n + 2];
        for (int i = n; i >= 0; i--) {
            for (int j = i + 1; j < n + 2; j++) {
                for (int k = i + 1; k < j; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + newNums[i] * newNums[k] * newNums[j]);
                }
            }
        }
        return dp[0][n + 1];

=======

        int n = nums.length;
        int[] val = new int[n+2];
        val[0] = 1;
        val[n+1] = 1;
        for(int i = 0; i < n; i++){
            val[i+1] = nums[i];
        }
        int[][] dp = new int[n+2][n+2];
        for(int i = n; i >= 0; i--){
            for(int j = i+1; j < n+2; j++){
                for(int k = i+1; k < j; k++){
                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + val[i]*val[j]*val[k]);
                }
            }
        }
        return dp[0][n+1];

=======

        int n = nums.length;
        int[] a = new int[n+2];
        a[0] = a[n+1] = 1;
        for (int i = 0; i < n; i++) {
            a[i+1] = nums[i];
        }
        int[][] dp = new int[n+2][n+2];
        for (int len = 1; len <= n; len++) {
            for (int i = 1; i <= n-len+1; i++) {
                int j = i+len-1;
                for (int k = i; k <= j; k++) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][k-1] + dp[k+1][j] + a[i-1]*a[k]*a[j+1]);
                }
            }
        }
        return dp[1][n];
