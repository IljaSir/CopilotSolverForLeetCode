Synthesizing 10/10 solutions

=======

        return toDouble(s) == toDouble(t);
    }
    private double toDouble(String s) {
        int i = s.indexOf('(');
        if (i > 0) {
            String base = s.substring(0, i);
            String rep = s.substring(i + 1, s.length() - 1);
            for (int j = 0; j < 20; ++j)
                base += rep;
            s = base;
        }
        return Double.valueOf(s);

=======

        return getNumber(s) == getNumber(t);
    }
    private double getNumber(String s) {
        int i = s.indexOf('(');
        int j = s.indexOf(')');
        if (i > 0) {
            String base = s.substring(0, i);
            String rep = s.substring(i + 1, j);
            for (int k = 0; k < 20; k++) {
                base += rep;
            }
            return Double.parseDouble(base);
        }
        return Double.parseDouble(s);

=======

        int i = s.indexOf("(");
        int j = t.indexOf("(");
        String s1 = s.substring(0, i);
        String s2 = s.substring(i+1, s.length()-1);
        String t1 = t.substring(0, j);
        String t2 = t.substring(j+1, t.length()-1);
        String s3 = s1 + s2;
        String t3 = t1 + t2;
        String s4 = s1 + s2 + s2 + s2 + s2 + s2 + s2 + s2 + s2 + s2;
        String t4 = t1 + t2 + t2 + t2 + t2 + t2 + t2 + t2 + t2 + t2;
        if (s1.equals(t1) && s2.equals(t2)) {
            return true;
        } else if (s3.equals(t3)) {
            return true;
        } else if (s4.equals(t4)) {
            return true;
        } else {
            return false;
        }

=======

        int i = s.indexOf("(");
        int j = t.indexOf("(");
        if (i == -1 && j == -1) return s.equals(t);
        if (i == -1) return s.equals(t.substring(0, j) + t.substring(j + 1, t.length() - 1) + t.substring(j + 1, t.length() - 1));
        if (j == -1) return t.equals(s.substring(0, i) + s.substring(i + 1, s.length() - 1) + s.substring(i + 1, s.length() - 1));
        String s1 = s.substring(0, i);
        String s2 = s.substring(i + 1, s.length() - 1);
        String t1 = t.substring(0, j);
        String t2 = t.substring(j + 1, t.length() - 1);
        return s1.equals(t1) && s2.equals(t2);

=======

        String[] s1 = s.split("\\(");
        String[] s2 = t.split("\\(");
        String s1Int = s1[0].split("\\.")[0];
        String s1Dec = s1[0].split("\\.")[1];
        String s2Int = s2[0].split("\\.")[0];
        String s2Dec = s2[0].split("\\.")[1];
        String s1Rep = s1.length > 1 ? s1[1].substring(0, s1[1].length() - 1) : "";
        String s2Rep = s2.length > 1 ? s2[1].substring(0, s2[1].length() - 1) : "";
        int len1 = s1Rep.length();
        int len2 = s2Rep.length();
        int len = Math.max(len1, len2);
        if (len1 < len) s1Rep = s1Rep + s1Rep.substring(0, len - len1);
        if (len2 < len) s2Rep = s2Rep + s2Rep.substring(0, len - len2);
        System.out.println(s1Int + " " + s1Dec + " " + s1Rep);
        System.out.println(s2Int + " " + s2Dec + " " + s2Rep);
        return s1Int.equals(s2Int) && s1Dec.equals(s2Dec) && s1Rep.equals(s2Rep);

=======

        return helper(s) == helper(t);
    }
    public double helper(String s) {
        if (s.indexOf('.') == -1 && s.indexOf('(') == -1) {
            return Integer.parseInt(s);
        }
        int i = s.indexOf('.');
        int j = s.indexOf('(');
        if (j == -1) {
            j = s.length();
        }
        int a = Integer.parseInt(s.substring(0, i));
        String b = s.substring(i + 1, j);
        String c = j == s.length() ? "" : s.substring(j + 1, s.length() - 1);
        return a + (b + c).length() == 0 ? 0 : (double) (Integer.parseInt(b + c)) / Math.pow(10, b.length()) / Math.pow(10, c.length()) + a;

=======

        return solve(s) == solve(t);
    }
    private double solve(String s) {
        int i = s.indexOf("(");
        if (i == -1) {
            return Double.parseDouble(s);
        }
        String base = s.substring(0, i);
        String rep = s.substring(i + 1, s.length() - 1);
        for (int j = 0; j < 20; ++j) {
            base += rep;
        }
        return Double.parseDouble(base);

=======

        double s1 = getDouble(s);
        double s2 = getDouble(t);
        return Math.abs(s1 - s2) < 1e-9;
    }
    private double getDouble(String s) {
        int idx = s.indexOf("(");
        if (idx == -1) {
            return Double.parseDouble(s);
        }
        String s1 = s.substring(0, idx);
        String s2 = s.substring(idx + 1, s.length() - 1);
        StringBuilder sb = new StringBuilder();
        sb.append(s1);
        sb.append(s2);
        for (int i = 0; i < 15; i++) {
            sb.append(s2);
        }
        return Double.parseDouble(sb.toString());

=======

        return getDecimal(s).equals(getDecimal(t));
    }
    
    private String getDecimal(String s) {
        int i = s.indexOf('(');
        if (i < 0) {
            return s;
        }
        String s1 = s.substring(0, i);
        String s2 = s.substring(i + 1, s.length() - 1);
        for (int j = 0; j < 20; j++) {
            s1 += s2;
        }
        return s1;

=======

        String[] ss = s.split("\\.");
        String[] ts = t.split("\\.");
        String[] sr = ss[1].split("\\(");
        String[] tr = ts[1].split("\\(");
        String[] srr = sr.length > 1 ? sr[1].split("\\)") : new String[] {""};
        String[] trr = tr.length > 1 ? tr[1].split("\\)") : new String[] {""};
        int srrLen = srr[0].length();
        int trrLen = trr[0].length();
        int srrCnt = sr.length > 1 ? Integer.parseInt(srr[0]) : 0;
        int trrCnt = tr.length > 1 ? Integer.parseInt(trr[0]) : 0;
        int srrMax = sr.length > 1 ? Integer.parseInt(srr[1]) : 0;
        int trrMax = tr.length > 1 ? Integer.parseInt(trr[1]) : 0;
        int srrMin = sr.length > 1 ? Math.min(srrCnt, srrMax) : 0;
        int trrMin = tr.length > 1 ? Math.min(trrCnt, trrMax) : 0;
        int srrDiff = srrCnt - srrMin;
        int trrDiff = trrCnt - trrMin;
        int srrDiffCnt = srr.length > 1 ? srr[1].length() : 0;
        int trrDiffCnt = trr.length > 1 ? trr[1].length() : 0;
        int srrDiffMax = sr.length > 1 ? Integer.parseInt(srr[1]) : 0;
        int trrDiffMax = tr.length > 1 ? Integer.parseInt(trr[1]) : 0;
        int srrDiffMin = sr.length > 1 ? Math.min(srrDiffCnt, srrDiffMax) : 0;
        int trrDiffMin = tr.length > 1 ? Math.min(trrDiffCnt, trrDiffMax) : 0;
        int srrDiffDiff = srrDiffCnt - srrDiffMin;
        int trrDiffDiff = trrDiffCnt - trrDiffMin;
        int srrDiffDiffMax = sr.length > 1 ? Integer
