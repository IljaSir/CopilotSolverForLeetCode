Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int g = nums[0];
        for (int i = 1; i < nums.length; i++) {
            g = gcd(g, nums[i]);
        }
        return g == 1;

=======

        int gcd = nums[0];
        for (int i = 1; i < nums.length; i++) {
            gcd = gcd(gcd, nums[i]);
        }
        return gcd == 1;
    }
    private int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int gcd = nums[0];
        for (int i = 0; i < nums.length; i++) {
            gcd = gcd(gcd, nums[i]);
        }
        return gcd == 1;

=======

        int gcd = nums[0];
        for(int i = 1; i < nums.length; i++) {
            gcd = gcd(gcd, nums[i]);
        }
        return gcd == 1;

=======

        int g = nums[0];
        for (int i = 1; i < nums.length; i++) {
            g = gcd(nums[i], g);
        }
        return g == 1;
    }
    public int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int g = nums[0];
        for (int n : nums) {
            g = gcd(g, n);
        }
        return g == 1;
    }
    
    int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int g = 0;
        for (int i = 0; i < nums.length; i++) {
            g = gcd(nums[i], g);
            if (g == 1) return true;
        }
        return false;
