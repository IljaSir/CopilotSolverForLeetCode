Synthesizing 9/10 solutions

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] > nums[j] * 2L) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] > 2L * nums[j]) {
                    count++;
                }
            }
        }
        return count;

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] > 2 * (long)nums[j]) {
                    count++;
                }
            }
        }
        return count;

=======

        return mergeSort(nums, 0, nums.length - 1);
    }
    private int mergeSort(int[] nums, int left, int right) {
        if (left >= right) {
            return 0;
        }
        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);
        int i = left;
        int j = mid + 1;
        int t = 0;
        int[] temp = new int[right - left + 1];
        while (i <= mid) {
            while (j <= right && (long) nums[i] > 2 * (long) nums[j]) {
                j++;
            }
            count += j - (mid + 1);
            i++;
        }
        i = left;
        j = mid + 1;
        while (i <= mid && j <= right) {
            temp[t++] = nums[i] <= nums[j] ? nums[i++] : nums[j++];
        }
        while (i <= mid) {
            temp[t++] = nums[i++];
        }
        while (j <= right) {
            temp[t++] = nums[j++];
        }
        System.arraycopy(temp, 0, nums, left, temp.length);
        return count;

=======

        return mergeSort(nums, 0, nums.length - 1);
    }
    private int mergeSort(int[] nums, int start, int end) {
        if (start >= end) {
            return 0;
        }
        int mid = start + (end - start) / 2;
        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);
        for (int i = start, j = mid + 1; i <= mid; i++) {
            while (j <= end && nums[i] / 2.0 > nums[j]) j++;
            count += j - mid - 1;
        }
        Arrays.sort(nums, start, end + 1);
        return count;

=======

        return mergeSort(nums, 0, nums.length - 1);
    }
    
    private int mergeSort(int[] nums, int l, int r) {
        if (l >= r) {
            return 0;
        }
        int mid = l + (r - l) / 2;
        int cnt = mergeSort(nums, l, mid) + mergeSort(nums, mid + 1, r);
        int i = l, j = mid + 1, k = 0;
        int[] cache = new int[r - l + 1];
        while (i <= mid) {
            while (j <= r && (long)nums[i] > 2 * (long)nums[j]) {
                j++;
            }
            cnt += j - mid - 1;
            while (j <= r && nums[i] >= nums[j]) {
                cache[k++] = nums[j++];
            }
            cache[k++] = nums[i++];
        }
        while (j <= r) {
            cache[k++] = nums[j++];
        }
        System.arraycopy(cache, 0, nums, l, cache.length);
        return cnt;

=======

        return mergeSort(nums, 0, nums.length - 1);
    }
    public int mergeSort(int[] nums, int start, int end) {
        if (start >= end) {
            return 0;
        }
        int mid = start + (end - start) / 2;
        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);
        for (int i = start, j = mid + 1; i <= mid; i++) {
            while (j <= end && nums[i] / 2.0 > nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }
        Arrays.sort(nums, start, end + 1);
        return count;

=======

        int[] cache = new int[nums.length];
        return mergeSort(nums, cache, 0, nums.length - 1);
    }
    private int mergeSort(int[] nums, int[] cache, int left, int right) {
        if (left >= right) {
            return 0;
        }
        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, cache, left, mid) + mergeSort(nums, cache, mid + 1, right);
        int i = left, j = mid + 1, pos = left;
        while (i <= mid) {
            while (j <= right && nums[i] > 2L * nums[j]) {
                j++;
            }
            count += j - mid - 1;
            i++;
        }
        i = left;
        j = mid + 1;
        while (i <= mid && j <= right) {
            cache[pos++] = nums[i] <= nums[j] ? nums[i++] : nums[j++];
        }
        while (i <= mid) {
            cache[pos++] = nums[i++];
        }
        while (j <= right) {
            cache[pos++] = nums[j++];
        }
        System.arraycopy(cache, left, nums, left, right - left + 1);
        return count;

=======

        int len = nums.length;
        if (len == 0) return 0;
        int[] temp = new int[len];
        return reversePairs(nums, 0, len - 1, temp);
    }

    private int reversePairs(int[] nums, int left, int right, int[] temp) {
        if (left == right) return 0;
        int mid = left + (right - left) / 2;
        int leftPairs = reversePairs(nums, left, mid, temp);
        int rightPairs = reversePairs(nums, mid + 1, right, temp);
        if (nums[mid] <= nums[mid + 1]) return leftPairs + rightPairs;
        int crossPairs = mergeAndCount(nums, left, mid, right, temp);
        return leftPairs + rightPairs + crossPairs;
    }

    private int mergeAndCount(int[] nums, int left, int mid, int right, int[] temp) {
        for (int i = left; i <= right; i++) {
            temp[i] = nums[i];
        }
        int i = left, j = mid + 1;
        int count = 0;
        for (int k = left; k <= right; k++) {
            if (i == mid + 1) {
                nums[k] = temp[j];
                j++;
            } else if (j == right + 1) {
                nums[k] = temp[i];
                i++;
            } else if (temp[i] <= temp[j]) {
                nums[k] = temp[i];
                i++;
            } else {
                nums[k] = temp[j];
                j++;
                count += (mid - i + 1);
            }
        }
        return count;
