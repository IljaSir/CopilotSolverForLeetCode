Synthesizing 10/10 solutions

=======

        int mod = 1000000007;
        long[][] dp = new long[n + 1][5];
        for (int i = 0; i < 5; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % mod;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % mod;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % mod;
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long[][] dp = new long[n][5];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dfs(n - 1, i, dp)) % mod;
        }
        return (int) ans;
    }

    private long dfs(int n, int i, long[][] dp) {
        if (n == 0) {
            return 1;
        }
        if (dp[n][i] != -1) {
            return dp[n][i];
        }
        long ans = 0;
        int mod = 1000000007;
        if (i == 0) {
            ans = (ans + dfs(n - 1, 1, dp)) % mod;
        } else if (i == 1) {
            ans = (ans + dfs(n - 1, 0, dp)) % mod;
            ans = (ans + dfs(n - 1, 2, dp)) % mod;
        } else if (i == 2) {
            ans = (ans + dfs(n - 1, 0, dp)) % mod;
            ans = (ans + dfs(n - 1, 1, dp)) % mod;
            ans = (ans + dfs(n - 1, 3, dp)) % mod;
            ans = (ans + dfs(n - 1, 4, dp)) % mod;
        } else if (i == 3) {
            ans = (ans + dfs(n - 1, 2, dp)) % mod;
            ans = (ans + dfs(n - 1, 4, dp)) % mod;
        } else {
            ans = (ans + dfs(n - 1, 0, dp)) % mod;
        }
        dp[n][i] = ans;
        return ans;

=======

        long[][] dp = new long[n + 1][5];
        for (int i = 0; i < 5; i++) {
            dp[1][i] = 1;
        }

        for (int i = 2; i <= n; i++) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % 1000000007;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % 1000000007;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % 1000000007;
            dp[i][3] = (dp[i - 1][2]) % 1000000007;
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % 1000000007;
        }

        long ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dp[n][i]) % 1000000007;
        }
        return (int) ans;

=======

        int mod = (int) 1e9 + 7;
        long[][] dp = new long[n][5];
        for (int i = 0; i < 5; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % mod;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % mod;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % mod;
        }
        long res = 0;
        for (int i = 0; i < 5; i++) {
            res = (res + dp[n - 1][i]) % mod;
        }
        return (int) res;

=======

        int[][] dp = new int[n][5];
        int mod = 1000000007;
        for (int i = 0; i < 5; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            dp[i][0] = (int)(((long)dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % mod);
            dp[i][1] = (int)(((long)dp[i - 1][0] + dp[i - 1][2]) % mod);
            dp[i][2] = (int)(((long)dp[i - 1][1] + dp[i - 1][3]) % mod);
            dp[i][3] = (int)(dp[i - 1][2] % mod);
            dp[i][4] = (int)(((long)dp[i - 1][2] + dp[i - 1][3]) % mod);
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dp[n - 1][i]) % mod;
        }
        return ans;

=======

        int[][] dp = new int[n][5];
        int mod = 1000000007;
        for (int i = 0; i < 5; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            dp[i][0] = ((dp[i - 1][1] + dp[i - 1][2]) % mod + dp[i - 1][4]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % mod;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % mod;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % mod;
        }
        int res = 0;
        for (int i = 0; i < 5; i++) {
            res = (res + dp[n - 1][i]) % mod;
        }
        return res;

=======

        int mod = 1000000007;
        long[][] dp = new long[n][5];
        for(int i = 0; i < 5; i++) {
            dp[0][i] = 1;
        }
        for(int i = 1; i < n; i++) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % mod;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % mod;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % mod;
        }
        long ans = 0;
        for(int i = 0; i < 5; i++) {
            ans = (ans + dp[n - 1][i]) % mod;
        }
        return (int)ans;

=======

        final int MOD = 1000000007;
        long[] dp = new long[]{1, 1, 1, 1, 1};
        for (int i = 2; i <= n; i++) {
            long[] ndp = new long[5];
            ndp[0] = (dp[1] + dp[2] + dp[4]) % MOD;
            ndp[1] = (dp[0] + dp[2]) % MOD;
            ndp[2] = (dp[1] + dp[3]) % MOD;
            ndp[3] = dp[2];
            ndp[4] = (dp[2] + dp[3]) % MOD;
            dp = ndp;
        }
        long c = 0;
        for (long x: dp) {
            c = (c + x) % MOD;
        }
        return (int) c;

=======

        long[] dp = new long[5];
        Arrays.fill(dp, 1);
        int mod = 1000000007;
        for (int i = 1; i < n; i++) {
            long[] next = new long[5];
            next[0] = (dp[1] + dp[2] + dp[4]) % mod;
            next[1] = (dp[0] + dp[2]) % mod;
            next[2] = (dp[1] + dp[3]) % mod;
            next[3] = dp[2];
            next[4] = (dp[2] + dp[3]) % mod;
            dp = next;
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dp[i]) % mod;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        // a, e, i, o, u
        long[][] dp = new long[n + 1][5];
        Arrays.fill(dp[1], 1);
        for (int i = 2; i <= n; i++) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % mod;
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % mod;
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % mod;
            dp[i][3] = dp[i - 1][2];
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % mod;
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        return (int) ans;
