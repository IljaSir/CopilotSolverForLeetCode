Synthesizing 10/10 solutions

=======

        int n = darts.length;
        int res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x1 = darts[i][0], y1 = darts[i][1], x2 = darts[j][0], y2 = darts[j][1];
                if ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) > 4 * r * r) {
                    continue;
                }
                int x0 = (x1 + x2) / 2, y0 = (y1 + y2) / 2;
                double d = Math.sqrt(r * r - ((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0)));
                double x3 = x0 + d * (y1 - y0) / Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
                double y3 = y0 - d * (x1 - x0) / Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
                double x4 = x0 - d * (y1 - y0) / Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
                double y4 = y0 + d * (x1 - x0) / Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
                int cnt = 0;
                for (int k = 0; k < n; k++) {
                    int x = darts[k][0], y = darts[k][1];
                    if ((x - x3) * (x - x3) + (y - y3) * (y - y3) <= r * r) {
                        cnt++;
                    }
                    if ((x - x4) *

=======

        int n = darts.length;
        int res = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int[] p1 = darts[i], p2 = darts[j];
                double d = Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));
                if (d > 2 * r) continue;
                double[] center = getCenter(p1, p2, r);
                int cnt = 0;
                for (int k = 0; k < n; k++) {
                    int[] p = darts[k];
                    if (Math.sqrt((p[0] - center[0]) * (p[0] - center[0]) + (p[1] - center[1]) * (p[1] - center[1])) <= r + 1e-6) cnt++;
                }
                res = Math.max(res, cnt);
            }
        }
        return res;

=======

        int n = darts.length;
        int ans = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int[] p1 = darts[i];
                int[] p2 = darts[j];
                double[] center = getCenter(p1, p2, r);
                if (center == null) {
                    continue;
                }
                int cnt = 0;
                for (int k = 0; k < n; k++) {
                    if (getDistance(center, darts[k]) <= r) {
                        cnt++;
                    }
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;
    }

    private double[] getCenter(int[] p1, int[] p2, int r) {
        double x1 = p1[0];
        double y1 = p1[1];
        double x2 = p2[0];
        double y2 = p2[1];
        double d = getDistance(p1, p2);
        if (d > 2 * r) {
            return null;
        }
        double midX = (x1 + x2) / 2;
        double midY = (y1 + y2) / 2;
        double offsetX = Math.sqrt(r * r - d * d / 4) * (y2 - y1) / d;
        double offsetY = Math.sqrt(r * r - d * d / 4) * (x1 - x2) / d;
        return new double[]{midX + offsetX, midY + offsetY};
    }

    private double getDistance(int[] p1, int[] p2) {
        return Math.sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));

=======

        int n = darts.length;
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int[] a = darts[i], b = darts[j];
                if (dist(a, b) > 4 * r * r) continue;
                int[] c = circumcenter(a, b, r);
                int cnt = 0;
                for (int k = 0; k < n; ++k) {
                    if (dist(c, darts[k]) <= r * r) ++cnt;
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;
    }
    
    private int dist(int[] a, int[] b) {
        return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]);

=======

        int n = darts.length;
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int[] p1 = darts[i];
                int[] p2 = darts[j];
                int[] center = getCenter(p1, p2, r);
                if (center == null) {
                    continue;
                }
                int cnt = 0;
                for (int[] p : darts) {
                    if (dist(p, center) <= r * r) {
                        ++cnt;
                    }
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;
    }

    private int[] getCenter(int[] p1, int[] p2, int r) {
        int d2 = (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
        int d = (int) Math.sqrt(d2);
        if (d > 2 * r) {
            return null;
        }
        double midx = (p1[0] + p2[0]) / 2.0;
        double midy = (p1[1] + p2[1]) / 2.0;
        double a = Math.sqrt(r * r - d * d / 4.0);
        double dx = (p1[1] - p2[1]) * a / d;
        double dy = (p2[0] - p1[0]) * a / d;
        return new int[]{(int) (midx + dx), (int) (midy + dy)};

=======

        int ans = 1;
        int n = darts.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double[] center = getCenter(darts[i], darts[j], r);
                if (center == null) {
                    continue;
                }
                int cnt = 0;
                for (int k = 0; k < n; k++) {
                    if (isInCircle(darts[k], center, r)) {
                        cnt++;
                    }
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;
    }

    private boolean isInCircle(int[] dart, double[] center, int r) {
        return Math.pow(dart[0] - center[0], 2) + Math.pow(dart[1] - center[1], 2) <= r * r;
    }

    private double[] getCenter(int[] dart1, int[] dart2, int r) {
        double dis = Math.sqrt(Math.pow(dart1[0] - dart2[0], 2) + Math.pow(dart1[1] - dart2[1], 2));
        if (dis > 2 * r) {
            return null;
        }
        double[] center = new double[2];
        center[0] = (dart1[0] + dart2[0]) / 2.0;
        center[1] = (dart1[1] + dart2[1]) / 2.0;
        double angle = Math.atan2(dart2[1] - dart1[1], dart2[0] - dart1[0]);
        double offset = Math.acos(dis / 2 / r);
        double[] res = new double[2];
        res[0] = center[0] + r * Math.cos(angle + offset);
        res[1] = center[1] + r * Math.sin(angle + offset);
        if (isInCircle(dart1, res, r) && isInCircle(dart2, res, r)) {
            return res;
        }
        res[0] = center[0] + r * Math.cos(angle - offset);
        res[1] = center[1] + r * Math.sin(angle - offset);

=======

        int n = darts.length, ans = 1;
        double[][] dis = new double[n][n];
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                dis[i][j] = dis[j][i] = Math.sqrt(Math.pow(darts[i][0] - darts[j][0], 2) + Math.pow(darts[i][1] - darts[j][1], 2));
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (dis[i][j] > 2 * r) continue;
                double x1 = darts[i][0], x2 = darts[j][0], y1 = darts[i][1], y2 = darts[j][1];
                double x0 = (x1 + x2) / 2 + (y1 - y2) * Math.sqrt(4 * r * r - dis[i][j] * dis[i][j]) / (2 * dis[i][j]);
                double y0 = (y1 + y2) / 2 + (x2 - x1) * Math.sqrt(4 * r * r - dis[i][j] * dis[i][j]) / (2 * dis[i][j]);
                int cnt = 0;
                for (int k = 0; k < n; ++k) {
                    if (Math.pow(darts[k][0] - x0, 2) + Math.pow(darts[k][1] - y0, 2) <= r * r + 1e-6) cnt++;
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;

=======

        int n = darts.length;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int[] p1 = darts[i];
                int[] p2 = darts[j];
                int[] center = getCenter(p1, p2, r);
                if (center == null) continue;
                for (int k = 0; k < n; k++) {
                    if (getDist(center, darts[k]) <= r * r) {
                        res[i]++;
                        res[j]++;
                        res[k]++;
                    }
                }
            }
        }
        int ans = 1;
        for (int i = 0; i < n; i++) ans = Math.max(ans, res[i]);
        return ans;
    }
    private int[] getCenter(int[] p1, int[] p2, int r) {
        double d = getDist(p1, p2);
        if (d > 4 * r * r) return null;
        double midx = (p1[0] + p2[0]) / 2.0;
        double midy = (p1[1] + p2[1]) / 2.0;
        double dx = (p2[1] - p1[1]) * Math.sqrt((4 * r * r - d) / d);
        double dy = (p2[0] - p1[0]) * Math.sqrt((4 * r * r - d) / d);
        return new int[]{(int) (midx + dx), (int) (midy - dy)};

=======

        int n = darts.length;
        int ans = 1;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int[] p1 = darts[i];
                int[] p2 = darts[j];
                double dis = distance(p1,p2);
                if(dis>2*r) continue;
                double[] center = getCenter(p1,p2,r);
                int cnt = 0;
                for(int[] p:darts){
                    if(distance(p,center)<=r) cnt++;
                }
                ans = Math.max(ans,cnt);
            }
        }
        return ans;
    }
    
    private double distance(int[] p1, int[] p2){
        return Math.sqrt(Math.pow(p1[0]-p2[0],2)+Math.pow(p1[1]-p2[1],2));

=======

        int n = darts.length;
        int[][][] c = new int[n][n][2];
        int max = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int x1 = darts[i][0], y1 = darts[i][1];
                int x2 = darts[j][0], y2 = darts[j][1];
                int dx = x2 - x1, dy = y2 - y1;
                int d2 = dx * dx + dy * dy;
                if (d2 > 4 * r * r) continue;
                double d = Math.sqrt(d2);
                double xm = (x1 + x2) / 2.0, ym = (y1 + y2) / 2.0;
                double k = Math.sqrt(r * r - d * d / 4) / d;
                int x = (int) (xm + dy * k + 0.5);
                int y = (int) (ym - dx * k + 0.5);
                c[i][j] = new int[]{x, y};
                c[j][i] = new int[]{x, y};
                int cnt = 0;
                for (int k1 = 0; k1 < n; k1++) {
                    int xk = darts[k1][0], yk = darts[k1][1];
                    int dxk = xk - x, dyk = yk - y;
                    if (dxk * dxk + dyk * dyk <= r * r) cnt++;
                }
                max = Math.max(max, cnt);
            }
        }
        return max;
