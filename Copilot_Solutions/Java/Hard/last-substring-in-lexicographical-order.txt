Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = s.length();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s.charAt(i + k) == s.charAt(j + k)) {
                k++;
            } else if (s.charAt(i + k) < s.charAt(j + k)) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substring(i);

=======

        int n = s.length();
        int i = 0, j = 1, k = 0;
        while (j + k < n) {
            if (s.charAt(i + k) == s.charAt(j + k)) {
                k++;
            } else if (s.charAt(i + k) < s.charAt(j + k)) {
                i = j++;
                k = 0;
            } else {
                j = j + k + 1;
                k = 0;
            }
        }
        return s.substring(i);

=======

        int n = s.length();
        int i = 0, j = 1, k = 0;
        while (i + k < n && j + k < n) {
            if (s.charAt(i + k) == s.charAt(j + k)) {
                k++;
            } else if (s.charAt(i + k) < s.charAt(j + k)) {
                i = j++;
                k = 0;
            } else {
                j += k + 1;
                k = 0;
            }
        }
        return s.substring(i);

=======

        int n = s.length();
        int i = 0, j = 1, k = 0;
        while (i + k < n && j + k < n) {
            if (s.charAt(i + k) == s.charAt(j + k)) {
                k++;
            } else {
                if (s.charAt(i + k) < s.charAt(j + k)) {
                    i = j;
                } else {
                    j = i + 1;
                }
                if (i == j) {
                    j++;
                }
                k = 0;
            }
        }
        return s.substring(i);

=======

        int n = s.length();
        int i = 0;
        int j = 1;
        int k = 0;
        while (j + k < n) {
            if (s.charAt(i + k) == s.charAt(j + k)) {
                k++;
            } else {
                if (s.charAt(i + k) < s.charAt(j + k)) {
                    i = j;
                }
                j = i + 1;
                k = 0;
            }
        }
        return s.substring(i);

=======

        int n = s.length();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = s.charAt(i) - 'a';
        }
        int i = 0, j = 1, k = 0;
        while (i < n && j < n && k < n) {
            int t = arr[(i + k) % n] - arr[(j + k) % n];
            if (t == 0) {
                k++;
            } else {
                if (t > 0) {
                    j += k + 1;
                } else {
                    i += k + 1;
                }
                if (i == j) {
                    j++;
                }
                k = 0;
            }
        }
        return s.substring(Math.min(i, j));

=======

        int n = s.length();
        int[] indices = new int[n];
        for (int i = 0; i < n; i++) {
            indices[i] = i;
        }
        Arrays.sort(indices, (a, b) -> s.charAt(a) - s.charAt(b));
        int i = 0;
        int j = 1;
        while (j < n) {
            while (j < n && s.charAt(indices[i] + j - i) == s.charAt(indices[j] + j - i)) {
                j++;
            }
            if (j < n) {
                if (s.charAt(indices[i] + j - i) < s.charAt(indices[j] + j - i)) {
                    i = j;
                }
                j++;
            }
        }
        return s.substring(indices[i]);

=======

        int start = 0;
        int end = 1;
        int n = s.length();
        int i = 0;
        while (end < n) {
            i = 0;
            while (end + i < n && s.charAt(start + i) == s.charAt(end + i)) {
                i++;
            }
            if (end + i >= n) {
                break;
            }
            if (s.charAt(start + i) < s.charAt(end + i)) {
                start = end;
            } else {
                start += (i + 1);
            }
            end = Math.max(end + 1, start + 1);
        }
        return s.substring(start);
