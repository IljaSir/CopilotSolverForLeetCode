Synthesizing 10/10 solutions

=======

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] % 2 == 1) {
                odd++;
            }
        }
        return odd == 0 ? 0 : odd - 1;

=======

        int[] count = new int[26];
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            count[s.charAt(i) - 'a']++;
            count[s.charAt(n - i - 1) - 'a']--;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] % 2 == 1) {
                odd++;
            }
        }
        return (odd + 1) / 2;

=======

        int n = s.length();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = s.charAt(i) - 'a';
        }
        int ans = 0;
        for (int i = 0; i < n / 2; i++) {
            int[] cnt = new int[26];
            cnt[a[i]]++;
            cnt[a[n - i - 1]]++;
            int max = 0;
            for (int x : cnt) {
                max = Math.max(max, x);
            }
            ans += 2 - max;
        }
        return ans / 2;

=======

        int n = s.length();
        int[] cnt = new int[26];
        for (int i = 0; i < n; i++) {
            cnt[s.charAt(i) - 'a']++;
        }
        int odd = 0;
        for (int c : cnt) {
            if (c % 2 == 1) {
                odd++;
            }
        }
        if (odd == 0) {
            return 0;
        }
        int ans = 0;
        for (int i = 0; i < n / 2; i++) {
            char c1 = s.charAt(i);
            char c2 = s.charAt(n - i - 1);
            if (c1 == c2) {
                continue;
            }
            int d1 = c1 - 'a';
            int d2 = c2 - 'a';
            if (cnt[d1] > cnt[d2]) {
                ans += cnt[d2];
                cnt[d1] -= cnt[d2];
                cnt[d2] = 0;
            } else {
                ans += cnt[d1];
                cnt[d2] -= cnt[d1];
                cnt[d1] = 0;
            }
        }
        if (n % 2 == 1) {
            ans += odd / 2;
        }
        return ans;

=======

        int n = s.length();
        int[] count = new int[26];
        for (int i = 0; i < n; ++i) {
            count[s.charAt(i) - 'a']++;
        }
        int odd = 0;
        for (int c : count) {
            odd += c % 2;
        }
        int res = 0;
        for (int i = 0; i < n / 2; ++i) {
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                res++;
            }
        }
        if (n % 2 == 1 && odd > 0) {
            res++;
        }
        return res;

=======

        int n = s.length();
        int[] c = new int[26];
        for (int i = 0; i < n; i++) {
            c[s.charAt(i) - 'a']++;
        }
        int odd = 0;
        for (int i = 0; i < 26; i++) {
            if (c[i] % 2 == 1) {
                odd++;
            }
        }
        if (odd <= 1) {
            return 0;
        }
        int mid = (n - 1) / 2;
        int i = 0;
        int j = n - 1;
        int ans = 0;
        while (i < j) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
            } else {
                if (s.charAt(i) == s.charAt(mid)) {
                    ans++;
                    for (int k = j; k > mid; k--) {
                        s = s.substring(0, k) + s.charAt(k - 1) + s.substring(k);
                    }
                    j--;
                    mid--;
                } else if (s.charAt(j) == s.charAt(mid)) {
                    ans++;
                    for (int k = i; k < mid; k++) {
                        s = s.substring(0, k) + s.charAt(k + 1) + s.substring(k + 1);
                    }
                    i++;
                    mid--;
                } else {
                    ans += 2;
                    for (int k = j; k > mid; k--) {
                        s = s.substring(0, k) + s.charAt(k - 1) + s.substring(k);
                    }
                    j--;
                    mid--;
                    for (int k = i; k < mid; k++) {
                        s = s.substring(0, k) + s.charAt(k + 1) + s.substring(k + 1);
                    }
                    i++;
                    mid--;
                }
            }
        }
        return ans;

=======

        int[] arr = new int[26];
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            arr[s.charAt(i) - 'a']++;
            arr[s.charAt(n - 1 - i) - 'a']--;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += Math.abs(arr[i]);
        }
        return res / 2;

=======

        int n = s.length();
        int mid = n / 2;
        int count = 0;
        for (int i = 0; i < mid; i++) {
            int j = n - i - 1;
            int k = i;
            int l = j;
            int min = Integer.MAX_VALUE;
            while (k < l) {
                if (s.charAt(k) == s.charAt(l)) {
                    min = Math.min(min, k - i);
                    break;
                }
                k++;
                l--;
            }
            if (k >= l) {
                count += (j - i);
            } else {
                count += min;
            }
        }
        return count;

=======

        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            cnt[c - 'a']++;
        }
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            sum += cnt[i] / 2;
        }
        int res = 0;
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                res++;
            }
            i++;
            j--;
        }
        return s.length() - 2 * sum + res;

=======

        char[] chars = s.toCharArray();
        int n = chars.length;
        int[] count = new int[26];
        for (char c : chars) {
            count[c - 'a']++;
        }
        int odd = 0;
        for (int i : count) {
            if (i % 2 == 1) {
                odd++;
            }
        }
        if (odd == 0 || odd == 1) {
            return 0;
        }
        int res = 0;
        for (int i = 0; i < n / 2; i++) {
            if (chars[i] != chars[n - i - 1]) {
                res++;
            }
        }
        return res;
