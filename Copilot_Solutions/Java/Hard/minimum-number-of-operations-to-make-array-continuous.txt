Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        Arrays.sort(nums);
        int res = n;
        for (int i = 0, j = 0; i < n; i++) {
            while (j < n && nums[j] - nums[i] < n) {
                j++;
            }
            if (j - i == n - 1 && nums[j - 1] - nums[i] == n - 1) {
                res = Math.min(res, n - j + i);
            }
        }
        return res;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int ans = n;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < n && nums[j] - nums[i] <= n - 1) {
                ++j;
            }
            ans = Math.min(ans, n - (j - i));
        }
        return ans;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int res = n;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < n && nums[j] - nums[i] < n) {
                ++j;
            }
            if (j - i == n - 1 && nums[j - 1] - nums[i] == n - 1) {
                res = Math.min(res, n - j + i);
            }
        }
        return res;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int ans = n;
        int i = 0;
        for (int j = 0; j < n; j++) {
            while (nums[j] - nums[i] >= n) {
                i++;
            }
            ans = Math.min(ans, n - (j - i + 1));
        }
        return ans;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int min = nums[0];
        int max = nums[n - 1];
        if (max - min + 1 == n) {
            return 0;
        }
        int i = 0;
        int j = 0;
        int maxCount = 0;
        while (j < n) {
            while (j < n && nums[j] <= min + j) {
                j++;
            }
            maxCount = Math.max(maxCount, j - i);
            i++;
        }
        return n - maxCount;

=======

        int n = nums.length;
        Arrays.sort(nums);
        int ans = n;
        for (int i = 0; i < n; ++i) {
            int j = i + 1;
            while (j < n && nums[j] - nums[i] < n) {
                ++j;
            }
            ans = Math.min(ans, n - (j - i));
        }
        return ans;

=======

        if (nums.length < 3) {
            return 0;
        }
        Arrays.sort(nums);
        int n = nums.length;
        int max = nums[n - 1];
        int min = nums[0];
        int res = n - 1;
        for (int i = 0; i < n; i++) {
            int j = Math.min(n - 1, i + res);
            if (nums[j] - nums[i] < n) {
                res = Math.min(res, n - (j - i + 1));
            }
        }
        return res;

=======

        int n = nums.length;
        if (n <= 1) return 0;
        Arrays.sort(nums);
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                left[i] = left[i - 1];
            } else {
                left[i] = left[i - 1] + 1;
            }
        }
        right[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] == nums[i + 1]) {
                right[i] = right[i + 1];
            } else {
                right[i] = right[i + 1] + 1;
            }
        }
        int res = n;
        for (int i = 0; i < n; i++) {
            int l = i - left[i] + 1;
            int r = i + right[i] - 1;
            if (l < 0 || r >= n) continue;
            if (nums[r] - nums[l] + 1 == right[i] + left[i] - 1) {
                res = Math.min(res, n - (right[i] + left[i] - 1));
            }
        }
        return res;

=======

        Arrays.sort(nums);
        int minOp = nums.length;
        int i = 0;
        int j = 0;
        int n = nums.length;
        while (j < n) {
            while (j < n && nums[j] - nums[i] < n) {
                j++;
            }
            if (j - i == n - 1 && nums[j - 1] - nums[i] == n - 1) {
                return 0;
            }
            minOp = Math.min(minOp, n - (j - i));
            i++;
        }
        return minOp;
