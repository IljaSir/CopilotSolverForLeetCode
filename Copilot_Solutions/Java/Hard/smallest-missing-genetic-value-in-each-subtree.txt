Synthesizing 9/10 solutions

=======

        int n = parents.length;
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 1; i < n; i++) {
            graph[parents[i]].add(i);
        }
        int[] res = new int[n];
        boolean[] seen = new boolean[100001];
        for (int i = 0; i < n; i++) {
            seen[nums[i]] = true;
        }
        dfs(graph, 0, nums, seen, res);
        return res;
    }
    
    private int dfs(List<Integer>[] graph, int node, int[] nums, boolean[] seen, int[] res) {
        if (res[node] != 0) {
            return res[node];
        }
        int min = 1;
        for (int i = 1; i <= nums[node]; i++) {
            if (!seen[i]) {
                min = i;
                break;
            }
        }
        res[node] = min;
        seen[nums[node]] = false;
        for (int child : graph[node]) {
            res[child] = dfs(graph, child, nums, seen, res);
        }
        seen[nums[node]] = true;
        return res[node];

=======

        int n = parents.length;
        List<Integer>[] children = new List[n];
        for (int i = 0; i < n; i++) {
            children[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            if (parents[i] != -1) {
                children[parents[i]].add(i);
            }
        }
        int[] ans = new int[n];
        boolean[] seen = new boolean[100001];
        for (int num : nums) {
            seen[num] = true;
        }
        for (int i = 0; i < n; i++) {
            if (seen[nums[i]]) {
                ans[i] = findNext(seen, nums[i]);
            } else {
                ans[i] = nums[i];
            }
        }
        return ans;
    }
    
    private int findNext(boolean[] seen, int num) {
        for (int i = num + 1; i < seen.length; i++) {
            if (!seen[i]) {
                return i;
            }
        }
        return 1;

=======

        int n = parents.length;
        List<Integer>[] tree = new List[n];
        for (int i = 0; i < n; i++) {
            tree[i] = new ArrayList<>();
        }
        for (int i = 1; i < n; i++) {
            tree[parents[i]].add(i);
        }
        int[] res = new int[n];
        boolean[] seen = new boolean[100001];
        for (int i = 0; i < n; i++) {
            seen[nums[i]] = true;
        }
        dfs(0, tree, nums, seen, res);
        return res;
    }
    
    private int dfs(int cur, List<Integer>[] tree, int[] nums, boolean[] seen, int[] res) {
        int min = 100001;
        for (int nei : tree[cur]) {
            min = Math.min(min, dfs(nei, tree, nums, seen, res));
        }
        while (seen[min]) {
            min++;
        }
        res[cur] = min;
        seen[nums[cur]] = true;
        return min;

=======

        int n = parents.length;
        int[] ans = new int[n];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.putIfAbsent(parents[i], new ArrayList<>());
            map.get(parents[i]).add(i);
        }
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        for (int i = 0; i < n; i++) {
            if (dp[i] == -1) {
                dfs(i, nums, map, dp);
            }
        }
        for (int i = 0; i < n; i++) {
            ans[i] = dp[i];
        }
        return ans;
    }
    
    private void dfs(int root, int[] nums, Map<Integer, List<Integer>> map, int[] dp) {
        if (map.get(root) == null) {
            dp[root] = 1;
            return;
        }
        int min = Integer.MAX_VALUE;
        for (int i : map.get(root)) {
            if (dp[i] == -1) {
                dfs(i, nums, map, dp);
            }
            min = Math.min(min, dp[i]);
        }
        if (min == 1) {
            dp[root] = 1;
            return;
        }
        for (int i : map.get(root)) {
            if (nums[i] == min - 1) {
                dp[root] = min;
                return;
            }
        }
        dp[root] = min - 1;

=======

        int n = parents.length;
        int[] ans = new int[n];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.putIfAbsent(parents[i], new HashSet<>());
            map.get(parents[i]).add(i);
        }
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }
        int[] missing = new int[n];
        for (int i = 1; i <= 100000; i++) {
            if (!set.contains(i)) {
                missing[i - 1] = i;
            }
        }
        dfs(map, ans, missing, 0, new HashSet<>());
        return ans;
    }
    
    private int dfs(Map<Integer, Set<Integer>> map, int[] ans, int[] missing, int node, Set<Integer> set) {
        int min = 100000;
        for (int child : map.getOrDefault(node, new HashSet<>())) {
            min = Math.min(min, dfs(map, ans, missing, child, set));
        }
        if (missing[nums[node] - 1] == nums[node]) {
            ans[node] = missing[min - 1];
            set.add(nums[node]);
            while (set.contains(min)) {
                min++;
            }
        } else {
            ans[node] = missing[nums[node] - 1];
        }
        return min;

=======

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < parents.length; i++) {
            if (parents[i] == -1) continue;
            map.computeIfAbsent(parents[i], k -> new ArrayList<>()).add(i);
        }
        int[] ans = new int[parents.length];
        boolean[] seen = new boolean[100001];
        for (int i = 0; i < nums.length; i++) {
            seen[nums[i]] = true;
        }
        dfs(map, 0, seen, ans);
        return ans;
    }
    
    private int dfs(Map<Integer, List<Integer>> map, int i, boolean[] seen, int[] ans) {
        int min = 100001;
        for (int j = 1; j < seen.length; j++) {
            if (!seen[j]) {
                min = j;
                break;
            }
        }
        ans[i] = min;
        seen[min] = true;
        if (map.containsKey(i)) {
            for (int j : map.get(i)) {
                min = Math.min(min, dfs(map, j, seen, ans));
            }
        }
        seen[min] = false;
        return min;

=======

        int n = parents.length;
        int[] ans = new int[n];
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0;i<n;i++){
            if(!map.containsKey(parents[i])){
                map.put(parents[i], new ArrayList<>());
            }
            map.get(parents[i]).add(i);
        }
        int[] visited = new int[n];
        dfs(map, visited, 0, nums);
        for(int i=0;i<n;i++){
            ans[i] = visited[i];
        }
        return ans;
    }
    
    public int dfs(Map<Integer, List<Integer>> map, int[] visited, int node, int[] nums){
        if(visited[node] != 0)
            return visited[node];
        int min = 1;
        if(map.containsKey(node)){
            for(int child: map.get(node)){
                int curr = dfs(map, visited, child, nums);
                if(curr == min)
                    min = curr+1;
                else if(curr < min)
                    min = curr;
            }
        }
        if(nums[node] == min)
            min = min+1;
        visited[node] = min;
        return min;

=======

        int n = parents.length;
        int[] ans = new int[n];
        int[] children = new int[n];
        int[][] dp = new int[n][100001];
        for (int i = 0; i < n; i++) {
            dp[i][nums[i]] = 1;
        }
        for (int i = n - 1; i > 0; i--) {
            for (int j = 1; j <= 100000; j++) {
                dp[parents[i]][j] += dp[i][j];
            }
            children[parents[i]]++;
        }
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (children[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int node = queue.poll();
            for (int i = 1; i <= 100000; i++) {
                if (dp[node][i] == 0) {
                    ans[node] = i;
                    break;
                }
            }
            if (node != 0) {
                children[parents[node]]--;
                if (children[parents[node]] == 0) {
                    queue.offer(parents[node]);
                }
            }
        }
        return ans;

=======

        int n = parents.length;
        int[] ans = new int[n];
        int[] cnt = new int[100001];
        for (int x : nums) {
            cnt[x]++;
        }
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 1; i < n; i++) {
            adj.get(parents[i]).add(i);
        }
        dfs(adj, 0, cnt, ans);
        return ans;
    }

    private void dfs(List<List<Integer>> adj, int u, int[] cnt, int[] ans) {
        int min = 1;
        while (cnt[min] > 0) {
            min++;
        }
        ans[u] = min;
        cnt[nums[u]]--;
        for (int v : adj.get(u)) {
            dfs(adj, v, cnt, ans);
        }
        cnt[nums[u]]++;
