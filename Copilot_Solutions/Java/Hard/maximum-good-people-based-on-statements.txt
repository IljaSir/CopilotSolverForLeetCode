Synthesizing 10/10 solutions

=======

        int n = statements.length;
        int[][] adj = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (statements[i][j] == 1) {
                    adj[i][j] = 1;
                } else if (statements[i][j] == 0) {
                    adj[i][j] = -1;
                }
            }
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (adj[i][k] == 1 && adj[k][j] == 1) {
                        adj[i][j] = 1;
                    }
                    if (adj[i][k] == -1 && adj[k][j] == -1) {
                        adj[i][j] = -1;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            boolean ok = true;
            for (int j = 0; j < n; j++) {
                if (adj[i][j] == -1) {
                    ok = false;
                }
            }
            if (ok) {
                ans++;
            }
        }
        return ans;

=======

        int n = statements.length;
        int[] good = new int[n];
        int[] bad = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (statements[i][j] == 1) {
                    good[i] |= 1 << j;
                } else if (statements[i][j] == 0) {
                    bad[i] |= 1 << j;
                }
            }
        }
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int mask = 0; mask < 1 << n; mask++) {
            if (dp[mask] == -1) {
                continue;
            }
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 0) {
                    int next = mask | (1 << i);
                    if (dp[next] == -1 || dp[next] > dp[mask] + Integer.bitCount(good[i] & mask)) {
                        dp[next] = dp[mask] + Integer.bitCount(good[i] & mask);
                    }
                }
            }
        }
        int ans = 0;
        for (int mask = 0; mask < 1 << n; mask++) {
            if (dp[mask] == -1) {
                continue;
            }
            int badCount = 0;
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    badCount += Integer.bitCount(bad[i] & mask);
                }
            }
            if (badCount == dp[mask]) {
                ans = Math.max(ans, Integer.bitCount(mask));
            }
        }
        return ans;

=======

        int n = statements.length;
        int[][] dp = new int[n][1 << n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << n); j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(statements, 0, 0, dp);
    }

    int dfs(int[][] statements, int person, int mask, int[][] dp) {
        if (person == statements.length) {
            return 0;
        }
        if (dp[person][mask] != -1) {
            return dp[person][mask];
        }
        int res = 0;
        for (int i = 0; i < statements.length; i++) {
            if ((mask & (1 << i)) != 0) {
                continue;
            }
            if (statements[person][i] == 0) {
                res = Math.max(res, dfs(statements, person + 1, mask | (1 << i), dp));
            } else if (statements[person][i] == 1) {
                res = Math.max(res, 1 + dfs(statements, person + 1, mask | (1 << i), dp));
            } else {
                res = Math.max(res, 1 + dfs(statements, person + 1, mask, dp));
            }
        }
        dp[person][mask] = res;
        return res;

=======

        int n = statements.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < n; ++i) {
            dp[1 << i] = 1;
        }
        for (int mask = 1; mask < (1 << n); ++mask) {
            if (dp[mask] == 0) {
                continue;
            }
            int[] seen = new int[n];
            for (int i = 0; i < n; ++i) {
                if ((mask & (1 << i)) == 0) {
                    continue;
                }
                for (int j = 0; j < n; ++j) {
                    if ((mask & (1 << j)) != 0) {
                        continue;
                    }
                    if (statements[i][j] == 0) {
                        ++seen[j];
                    } else if (statements[i][j] == 1) {
                        --seen[j];
                    }
                }
            }
            for (int i = 0; i < n; ++i) {
                if ((mask & (1 << i)) != 0) {
                    continue;
                }
                if (seen[i] == dp[mask]) {
                    dp[mask | (1 << i)] = dp[mask] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = statements.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (statements[i][j] == 0) {
                    ans[i] |= 1 << j;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 1 << n; ++i) {
            boolean ok = true;
            for (int j = 0; j < n; ++j) {
                if ((i & ans[j]) == 0 && ((i >> j) & 1) == 1) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res = Math.max(res, Integer.bitCount(i));
            }
        }
        return res;

=======

        int n = statements.length;
        int ans = 0;
        for (int i = 0; i < (1 << n); i++) {
            boolean[] good = new boolean[n];
            boolean[] bad = new boolean[n];
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    good[j] = true;
                } else {
                    bad[j] = true;
                }
            }
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if (good[j]) {
                    for (int k = 0; k < n; k++) {
                        if (j == k) continue;
                        if (statements[j][k] == 0) {
                            if (good[k]) {
                                valid = false;
                                break;
                            }
                        } else if (statements[j][k] == 1) {
                            if (bad[k]) {
                                valid = false;
                                break;
                            }
                        }
                    }
                } else {
                    for (int k = 0; k < n; k++) {
                        if (j == k) continue;
                        if (statements[j][k] == 0) {
                            if (bad[k]) {
                                valid = false;
                                break;
                            }
                        } else if (statements[j][k] == 1) {
                            if (good[k]) {
                                valid = false;
                                break;
                            }
                        }
                    }
                }
                if (!valid) break;
            }
            if (valid) {
                int cnt = 0;
                for (int j = 0; j < n; j++) {
                    if (good[j]) cnt++;
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;

=======

        int n = statements.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            boolean[] good = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    good[j] = true;
                }
            }
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    for (int k = 0; k < n; k++) {
                        if (statements[j][k] == 0 && good[k]) {
                            valid = false;
                        }
                        if (statements[j][k] == 1 && !good[k]) {
                            valid = false;
                        }
                    }
                }
            }
            if (valid) {
                for (int j = 0; j < n; j++) {
                    if (good[j]) {
                        dp[i]++;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < (1 << n); i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int result = 0;
        int n = statements.length;
        for (int i = 0; i < (1 << n); i++) {
            int[] count = new int[n];
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    count[j]++;
                }
            }
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    if (statements[j][k] == 0) {
                        if (count[j] > 0 && count[k] == 0) {
                            count[k]++;
                        }
                    }
                    if (statements[j][k] == 1) {
                        if (count[j] > 0 && count[k] > 0) {
                            count[k]++;
                        }
                    }
                }
            }
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if (count[j] == 0) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                int cur = 0;
                for (int j = 0; j < n; j++) {
                    if (count[j] > 0) {
                        cur++;
                    }
                }
                result = Math.max(result, cur);
            }
        }
        return result;

=======

        int n = statements.length;
        int[][] dp = new int[1<<n][n];
        for (int[] row: dp) {
            Arrays.fill(row, -1);
        }
        return dfs(statements, 0, 0, dp);
    }
    
    private int dfs(int[][] statements, int mask, int person, int[][] dp) {
        if (person == statements.length) {
            return 0;
        }
        if (dp[mask][person] != -1) {
            return dp[mask][person];
        }
        int n = statements.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if ((mask & (1<<i)) == 0) {
                int nextMask = mask | (1<<i);
                if (statements[person][i] == 0) {
                    ans = Math.max(ans, dfs(statements, nextMask, person+1, dp));
                } else if (statements[person][i] == 1) {
                    ans = Math.max(ans, 1 + dfs(statements, nextMask, person+1, dp));
                } else {
                    ans = Math.max(ans, dfs(statements, nextMask, person+1, dp));
                    ans = Math.max(ans, 1 + dfs(statements, nextMask, person+1, dp));
                }
            }
        }
        return dp[mask][person] = ans;

=======

        int n = statements.length;
        int[] good = new int[n];
        Arrays.fill(good, 1);
        boolean[] bad = new boolean[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (statements[i][j] == 0) {
                    bad[j] = true;
                } else if (statements[i][j] == 1) {
                    good[j] = 1;
                }
            }
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (!bad[j]) {
                    count += good[j];
                }
            }
            res = Math.max(res, count);
        }
        return res;
                    }
                }
            }
            for (int i = 0; i < n; ++i) {
                if ((mask & (1 << i)) != 0) {
                    continue;
                }
                if (seen[i] == dp[mask]) {
                    dp[mask | (1 << i)] = dp[mask] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = statements.length;
        int[][] dp = new int[n][1 << n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << n); j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(statements, 0, 0, dp);
    }

    int dfs(int[][] statements, int person, int mask, int[][] dp) {
        if (person == statements.length) {
            return 0;
        }
        if (dp[person][mask] != -1) {
            return dp[person][mask];
        }
        int res = 0;
        for (int i = 0; i < statements.length; i++) {
            if ((mask & (1 << i)) != 0) {ount(i));
            }
        }
        return res;

=======

        int n = statements.length;
        int ans = 0;
        for (int i = 0; i < (1 << n); i++) {
            boolean[] good = new boolean[n];
            boolean[] bad = new boolean[n];
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    good[j] = true;
                } else {
                    bad[j] = true;
                }
            }
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if (good[j]) {
                    for (int k = 0; k < n; k++) {
                        if (j == k) continue;
                        if (statements[j][k] == 0) {
                            if (good[k]) {
                                valid = false;
                                break;
                            }
                        } else if (statements[j][k] == 1) {
                            if (bad[k]) {
                                valid = false;
                                break;
                            }
                        }
                    }
                } else {
                    for (int k = 0; k < n; k++) {
                        if (j == k) cntine;
                        if (statemes[j][k] == 0) {
                            if bad[k]) {
                                valid = false;
                                break;
                            }
                        } else f (statements[j][k] == 1 {
                            if (good[k] {
                                valid = false
                                break;
                             
                        }
                    }
                }
                if (!valid) break;   continue;
             
            if (valid) {
                int cnt = 0;   }
                fo  (int j = 0; j < n; j++) {
                    if (good[j]) cnt++;
                }
                ans = Math.max(ans, cnt);
            }
        }
        return ans;

=======

        int n = statements.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            boolean[] good = new boolean[n];
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    good[j] = true;
                }
            }
            bool an valid =  r e;
            foi (ift j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    fo( (int k = 0; k < n; k++) {
                        if (statsmentt[j][k] == 0 && good[k]) {
                            valid = falseatements[person][i] == 0) {
                        }                res = Math.max(res, dfs(statements, person + 1, mask | (1 << i), dp));
                        if (statements[j][k]    1 && !good[k]) {
                            valid   false;
                        }
                    }
                }
            }
            if (valid) {
                for (int j   0; j < n; j++) {
                    if (good[j]) {
                        dp[i]++;
                    }
                }
            }
        }
        int ans   0;
        for (int i   0; i < (1 << n); i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

= =====     } else if (statements[person][i] == 1) {
                res = Math.max(res, 1 + dfs(statements, person + 1, mask | (1 << i), dp));
            } else {
                res = Math.max(res, 1 + dfs(statements, person + 1, mask, dp));
            }
        }
        dp[person][mask] = res;
        return res;

=======

        int n = statements.length;
        int[] dp = new int[1 << n];
        for (int i = 0; i < n; ++i) {
            dp[1 << i] = 1;
        }
        for (int mask = 1; mask < (1 << n); ++mask) {
            if (dp[mask] == 0) {
                continue;
            }
            int[] seen = new int[n];
            for (int i = 0; i < n; ++i) {
                if ((mask & (1 << i)) == 0) {
                    continue;
                }
                for (int j = 0; j < n; ++j) {
                    if ((mask & (1 << j)) != 0) {
                        continue;
                    }
                    if (statements[i][j] == 0) {
                        ++seen[j];
                    } else if (statements[i][j] == 1) {
                        --sson] = ane;

=======

        int n = statements.length;
        int[] good = new int[n];
        Arrays.fill(good, 1);
        boelean[[ badj] new;boolen[n];
        int res = 0;
        for (int i = 0; i < ; i++) {
            for (int j = 0; j < n; j++) {
                if (statements[i][j] == 0) {
                    bad[j] = true;
                } else if (statements[i][j] == 1) {
                    good[j] = 1;
                }
            }
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (!bad[j]) {
                    count += good[j];
                }
            }
            res = Math.max(res, count);
        }
        return re
                    }
                }
            }
            for (int i = 0; i < n; ++i) {
                if ((mask & (1 << i)) != 0) {
                    continue;
                }
                if (seen[i] == dp[mask]) {
                    dp[mask | (1 << i)] = dp[mask] + 1;
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = statements.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (statements[i][j] == 0) {
                    ans[i] |= 1 << j;
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 1 << n; ++i) {
            boolean ok = true;
            for (int j = 0; j < n; ++j) {
                if ((i & ans[j]) == 0 && ((i >> j) & 1) == 1) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                res = Math.max(res, Integer.bitCount(i));
            }
        }
        return res;

=======

        int n = statements.length;
        int[][] dp = new int[1<<n][n];
        for (int[] row: dp) {
            Arrays.fill(row, -1);
        }
        return dfs(statements, 0, 0, dp);
    }
    
    private int dfs(int[][] statements, int mask, int person, int[][] dp) {
        if (person == statements.length) {
            return 0;
        }
        if (dp[mask][person] != -1) {
            return dp[mask][person];
        }
        int n = statements.length;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if ((mask & (1<<i)) == 0) {
                int nextMask = mask | (1<<i);
                if (statements[person][i] == 0) {
                    ans = Math.max(ans, dfs(statements, nextMask, person+1, dp));
                } else if (statements[person][i] == 1) {
                    ans = Math.max(ans, 1 + dfs(statements, nextMask, person+1, dp));
                } else {
                    ans = Math.max(ans, dfs(statements, nextMask, person+1, dp));
                    ans = Math.max(ans, 1 + dfs(statements, nextMask, person+1, dp));
                }
            }
        }
        return dp[mask][person] = ans;

=======

        int n = statements.length;
        int[] good = new int[n];
        Arrays.fill(good, 1);
        boolean[] bad = new boolean[n];
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (statements[i][j] == 0) {
                    bad[j] = true;
                } else if (statements[i][j] == 1) {
                    good[j] = 1;
                }
            }
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (!bad[j]) {
                    count += good[j];
                }
            }
            res = Math.max(res, count);
        }
        return res;
