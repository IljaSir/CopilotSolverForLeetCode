Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = plantTime.length;
        int[] bloomTime = new int[n];
        for (int i = 0; i < n; i++) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        Arrays.sort(bloomTime);
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, plantTime[i]) + growTime[i];
            if (max < bloomTime[i]) {
                max = bloomTime[i];
            }
        }
        return max;

=======

        int n = plantTime.length;
        int[] bloomTime = new int[n];
        for (int i = 0; i < n; i++) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        Arrays.sort(bloomTime);
        int maxTime = 0;
        for (int i = 0; i < n; i++) {
            maxTime = Math.max(maxTime, bloomTime[i] + i);
        }
        return maxTime;

=======

        int n = plantTime.length;
        int[] bloomTime = new int[n];
        for (int i = 0; i < n; i++) {
            bloomTime[i] = plantTime[i] + growTime[i];
        }
        Arrays.sort(bloomTime);
        int max = 0;
        for (int i = 0; i < n; i++) {
            int t = bloomTime[i] + i;
            if (t > max) {
                max = t;
            }
        }
        return max;

=======

        int n = plantTime.length;
        int[][] times = new int[n][2];
        for (int i = 0; i < n; i++) {
            times[i][0] = plantTime[i];
            times[i][1] = growTime[i];
        }
        Arrays.sort(times, (a, b) -> a[0] - b[0]);
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, times[i][0] + times[i][1]);
            if (i < n - 1) {
                times[i + 1][0] = Math.max(times[i + 1][0], max);
            }
        }
        return max;

=======

        int n = plantTime.length;
        int[][] flowers = new int[n][2];
        for (int i = 0; i < n; i++) {
            flowers[i][0] = plantTime[i];
            flowers[i][1] = growTime[i];
        }
        Arrays.sort(flowers, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans + flowers[i][0], flowers[i][1]) + 1;
        }
        return ans;

=======

        int n = plantTime.length;
        int[][] flowers = new int[n][2];
        for (int i = 0; i < n; i++) {
            flowers[i][0] = plantTime[i];
            flowers[i][1] = growTime[i];
        }
        Arrays.sort(flowers, Comparator.comparingInt(a -> a[0]));
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, flowers[i][0]);
            max += flowers[i][1];
        }
        return max;

=======

        int n = plantTime.length;
        int[][] seeds = new int[n][2];
        for (int i = 0; i < n; i++) {
            seeds[i][0] = plantTime[i];
            seeds[i][1] = growTime[i];
        }
        Arrays.sort(seeds, (a, b) -> a[0] - b[0]);
        int[] bloom = new int[n];
        bloom[0] = seeds[0][0] + seeds[0][1];
        for (int i = 1; i < n; i++) {
            bloom[i] = Math.max(bloom[i - 1], seeds[i][0]) + seeds[i][1];
        }
        return bloom[n - 1];

=======

        int n = plantTime.length;
        int[][] flowers = new int[n][2];
        for(int i = 0; i < n; i++) {
            flowers[i][0] = plantTime[i];
            flowers[i][1] = plantTime[i] + growTime[i];
        }
        Arrays.sort(flowers, (a, b) -> a[0] - b[0]);
        int max = 0;
        for(int i = 0; i < n; i++) {
            max = Math.max(max, flowers[i][0]);
            max += flowers[i][1];
        }
        return max;

=======

        int n = plantTime.length;
        int[][] events = new int[n][2];
        for (int i = 0; i < n; i++) {
            events[i][0] = plantTime[i];
            events[i][1] = growTime[i];
        }
        Arrays.sort(events, (a, b) -> a[0] - b[0]);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans + events[i][0], events[i][1] + 1);
        }
        return ans;
