Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = distance.length;
        if (n <= 3) {
            return false;
        }
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                return true;
            }
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] <= distance[i - 3] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) {
                return true;
            }
        }
        return false;

=======

        int n = distance.length;
        if (n <= 3) {
            return false;
        }
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
            if (i >= 4) {
                if (distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                    return true;
                }
            }
            if (i >= 5) {
                if (distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3] && distance[i - 1] <= distance[i - 3]) {
                    return true;
                }
            }
        }
        return false;

=======

        for (int i = 3; i < distance.length; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) return true;
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) return true;
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] <= distance[i - 3] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) return true;
        }
        return false;

=======

        int n = distance.length;
        if (n <= 3) return false;
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                return true;
            }
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] <= distance[i - 3] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) {
                return true;
            }
        }
        return false;

=======

        int n = distance.length;
        if (n < 4) {
            return false;
        }
        for (int i = 3; i < n; i++) {
            if (distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
            if (i >= 4 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                return true;
            }
            if (i >= 5 && distance[i - 2] >= distance[i - 4] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3] && distance[i - 1] <= distance[i - 3]) {
                return true;
            }
        }
        return false;

=======

        if (distance.length < 4) return false;
        int x = 0, y = 0;
        int x1 = 0, y1 = 0;
        int x2 = 0, y2 = 0;
        for (int i = 0; i < distance.length; i++) {
            int d = distance[i];
            int x0 = x, y0 = y;
            if (i % 4 == 0) {
                x += d;
                if (i > 3 && x >= x2 && x0 <= x2 && y >= y2 && y0 <= y2) return true;
            } else if (i % 4 == 1) {
                y -= d;
                if (i > 3 && y <= y2 && y0 >= y2 && x >= x2 && x0 <= x2) return true;
            } else if (i % 4 == 2) {
                x -= d;
                if (i > 3 && x <= x2 && x0 >= x2 && y <= y2 && y0 >= y2) return true;
            } else {
                y += d;
                if (i > 3 && y >= y2 && y0 <= y2 && x <= x2 && x0 >= x2) return true;
            }
            x2 = x1;
            y2 = y1;
            x1 = x0;
            y1 = y0;
        }
        return false;

=======

        if (distance.length < 4) {
            return false;
        }
        int a = 0, b = 1, c = 2, d = 3;
        while (d < distance.length) {
            if (distance[a] >= distance[c] && distance[b] <= distance[d]) {
                return true;
            }
            if (d >= 4 && distance[d] + distance[b] >= distance[c] && distance[d - 1] <= distance[c - 1] && distance[d - 1] + distance[b] >= distance[c]) {
                return true;
            }
            a++;
            b++;
            c++;
            d++;
        }
        return false;

=======

        if (distance.length < 4) {
            return false;
        }
        boolean up = true;
        boolean right = false;
        boolean down = false;
        boolean left = false;
        int x = 0;
        int y = 0;
        int i = 0;
        int prev = 0;
        while (i < distance.length) {
            if (up) {
                y += distance[i];
                if (i > 2 && distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                    return true;
                }
                if (i > 3 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                    return true;
                }
                if (i > 4 && distance[i - 2] - distance[i - 4] >= 0 && distance[i - 1] <= distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) {
                    return true;
                }
            }
            if (right) {
                x += distance[i];
                if (i > 2 && distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                    return true;
                }
                if (i > 3 && distance[i - 1] == distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2]) {
                    return true;
                }
                if (i > 4 && distance[i - 2] - distance[i - 4] >= 0 && distance[i - 1] <= distance[i - 3] && distance[i] + distance[i - 4] >= distance[i - 2] && distance[i - 1] + distance[i - 5] >= distance[i - 3]) {
                    return true;
                }
            }
            if (down) {
                y -= distance[i];
                if (i > 2 && distance[i] >= distance[i - 2] && distance[i - 1] <= distance[i - 3]) {
                    return true;
                }
                if (i >

=======

        int[] x = new int[4];
        int[] y = new int[4];
        int dx = 0;
        int dy = 1;
        int i = 0;
        for (int d : distance) {
            x[i] = x[(i + 3) % 4] + dx * d;
            y[i] = y[(i + 3) % 4] + dy * d;
            if (i >= 3 && x[i] >= x[(i + 2) % 4] && x[i - 1] <= x[(i + 1) % 4] && y[i] <= y[(i + 1) % 4] && y[i - 1] >= y[(i + 2) % 4]) {
                return true;
            }
            if (i >= 2 && x[i] == x[(i + 2) % 4] && y[i] == y[(i + 2) % 4]) {
                return true;
            }
            if (i >= 1 && x[i] == x[(i + 1) % 4] && y[i] == y[(i + 1) % 4]) {
                return true;
            }
            int tmp = dx;
            dx = dy;
            dy = -tmp;
            i = (i + 1) % 4;
        }
        return false;
