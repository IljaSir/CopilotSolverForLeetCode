Synthesizing 9/10 solutions

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1, right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = dp[i][j] < 0 ? dp[i][j] + 1000000007 : dp[i][j] % 1000000007;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int mod = 1000000007;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = 3;
            } else {
                dp[i][i + 1] = 2;
            }
        }
        for (int l = 3; l <= n; l++) {
            for (int i = 0; i < n - l + 1; i++) {
                int j = i + l - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1;
                    int right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int mod = 1000000007;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n - 1; i++) {
            dp[i][i + 1] = 2;
        }
        for (int l = 3; l <= n; l++) {
            for (int i = 0; i + l - 1 < n; i++) {
                int j = i + l - 1;
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1;
                    int right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int mod = 1000000007;
        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1;
                    int right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][][] dp = new int[n][n][4];
        for (int i = 0; i < n; i++) {
            dp[i][i][s.charAt(i) - 'a'] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                for (int k = 0; k < 4; k++) {
                    if (s.charAt(i) == s.charAt(j) && s.charAt(i) - 'a' == k) {
                        dp[i][j][k] = dp[i + 1][j - 1][k] * 2;
                        for (int l = 0; l < 4; l++) {
                            dp[i][j][k] += dp[i + 1][j - 1][l];
                            dp[i][j][k] %= (1e9 + 7);
                        }
                    } else {
                        dp[i][j][k] = dp[i + 1][j][k] + dp[i][j - 1][k] - dp[i + 1][j - 1][k];
                        dp[i][j][k] %= (1e9 + 7);
                    }
                }
            }
        }
        int ans = 0;
        for (int k = 0; k < 4; k++) {
            ans += dp[0][n - 1][k];
            ans %= (1e9 + 7);
        }
        return ans;

=======

        int N = s.length();
        int MOD = 1000000007;
        int[][] dp = new int[N][N];
        for (int i = 0; i < N; i++) {
            dp[i][i] = 1;
        }
        for (int i = N - 1; i >= 0; i--) {
            for (int j = i + 1; j < N; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1;
                    int right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + MOD) % MOD;
            }
        }
        return dp[0][N - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int[][] next = new int[n][4];
        int[][] prev = new int[n][4];
        int mod = (int)1e9 + 7;
        for (int i = 0; i < n; i++) {
            Arrays.fill(next[i], n);
            Arrays.fill(prev[i], -1);
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j < 4; j++) {
                if (i < n - 1) {
                    next[i][j] = next[i + 1][j];
                }
            }
            next[i][s.charAt(i) - 'a'] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                if (i > 0) {
                    prev[i][j] = prev[i - 1][j];
                }
            }
            prev[i][s.charAt(i) - 'a'] = i;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                for (int k = 0; k < 4; k++) {
                    char c = (char)('a' + k);
                    if (i == j) {
                        if (s.charAt(i) == c) {
                            dp[i][j] = 1;
                        }
                        else {
                            dp[i][j] = 0;
                        }
                    }
                    else if (s.charAt(i) != c) {
                        dp[i][j] = dp[i + 1][j];
                    }
                    else if (s.charAt(j) != c) {
                        dp[i][j] = dp[i][j - 1];
                    }
                    else {
                        int ni = next[i][k];
                        int pj = prev[j][k];
                        if (ni + 1 < pj) {
                            dp[i][j] = dp[ni + 1][pj - 1] * 2 % mod;
                        }
                        else if (ni + 1 == pj) {
                            dp[i][j] =

=======

        int N = s.length();
        int[][] dp = new int[N][N];
        for (int i = 0; i < N; ++i)
            dp[i][i] = 1;

        for (int i = 0; i < N-1; ++i)
            if (s.charAt(i) == s.charAt(i+1)) {
                dp[i][i+1] = 3;
            } else {
                dp[i][i+1] = 2;
            }

        for (int len = 3; len <= N; ++len)
            for (int i = 0; i+len-1 < N; ++i) {
                int j = i+len-1;
                if (s.charAt(i) == s.charAt(j)) {
                    int low = i+1, high = j-1;
                    while (low <= high && s.charAt(low) != s.charAt(i))
                        low++;
                    while (low <= high && s.charAt(high) != s.charAt(i))
                        high--;

                    if (low > high)
                        dp[i][j] = dp[i+1][j-1]*2 + 2;
                    else if (low == high)
                        dp[i][j] = dp[i+1][j-1]*2 + 1;
                    else
                        dp[i][j] = dp[i+1][j-1]*2 - dp[low+1][high-1];
                } else {
                    dp[i][j] = dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1];
                }
                dp[i][j] = (dp[i][j] + 1000000007) % 1000000007;
            }

        return dp[0][N-1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        int mod = (int)1e9+7;
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    int left = i + 1;
                    int right = j - 1;
                    while (left <= right && s.charAt(left) != s.charAt(i)) {
                        left++;
                    }
                    while (left <= right && s.charAt(right) != s.charAt(i)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i + 1][j - 1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i + 1][j - 1] * 2 - dp[left + 1][right - 1];
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                dp[i][j] = (dp[i][j] + mod) % mod;
            }
        }
        return dp[0][n - 1];
