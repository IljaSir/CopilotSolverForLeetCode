Synthesizing 9/10 solutions

=======

        int mod = 1000000007;
        int n = corridor.length();
        int[] dp = new int[n];
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'P') {
                dp[i] = dp[i - 1];
            } else {
                dp[i] = (dp[i - 1] + (i > 1 ? dp[i - 2] : 1)) % mod;
            }
        }
        return dp[n - 1];

=======

        final int MOD = 1000000007;
        int n = corridor.length();
        int[] s = new int[n + 1];
        for (int i = 0; i < n; i++) {
            s[i + 1] = s[i] + (corridor.charAt(i) == 'S' ? 1 : 0);
        }
        int[] f = new int[n + 1];
        f[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (corridor.charAt(i - 1) == 'P') {
                f[i] = f[i - 1];
            } else {
                f[i] = (int) ((f[i - 1] * 1L * (s[i] - 1)) % MOD);
            }
        }
        return f[n];

=======

        int n = corridor.length();
        int m = 1000000007;
        int[][] dp = new int[n][2];
        dp[0][0] = 1;
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                dp[i][0] = dp[i - 1][0] * 2 % m;
                dp[i][1] = dp[i - 1][0] + dp[i - 1][1] * 2 % m;
            } else {
                dp[i][0] = dp[i - 1][0];
                dp[i][1] = dp[i - 1][1];
            }
        }
        return dp[n - 1][1];

=======

        int n = corridor.length();
        int mod = 1000000007;
        int[] dp = new int[n];
        int[] sum = new int[n];
        dp[0] = 1;
        sum[0] = 1;
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'P') {
                dp[i] = 0;
            } else {
                dp[i] = sum[i - 1];
            }
            sum[i] = (sum[i - 1] + dp[i]) % mod;
        }
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (corridor.charAt(i) == 'P') {
                break;
            }
            ans = (ans + dp[i]) % mod;
        }
        return ans;

=======

        int MOD = 1_000_000_007;
        int n = corridor.length();
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        if (corridor.charAt(0) == 'S') {
            dp[0] = 1;
        }
        if (corridor.charAt(n - 1) == 'S') {
            dp2[n - 1] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                dp[i] = dp[i - 1];
                if (corridor.charAt(i - 1) == 'P') {
                    dp[i] = (dp[i] + 1) % MOD;
                }
            }
        }
        for (int i = n - 2; i >= 0; i--) {
            if (corridor.charAt(i) == 'S') {
                dp2[i] = dp2[i + 1];
                if (corridor.charAt(i + 1) == 'P') {
                    dp2[i] = (dp2[i] + 1) % MOD;
                }
            }
        }
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                if (corridor.charAt(i - 1) == 'S') {
                    ans = (ans + (int)(((long)dp[i - 1] * dp2[i]) % MOD)) % MOD;
                }
                if (corridor.charAt(i - 1) == 'P') {
                    ans = (ans + dp2[i]) % MOD;
                }
            }
        }
        return ans;

=======

        int mod = 1000000007;
        int n = corridor.length();
        int[] dp = new int[n];
        int[] ps = new int[n];
        int[] pp = new int[n];
        int s = 0;
        int p = 0;
        for (int i = 0; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                s++;
            } else {
                p++;
            }
            ps[i] = s;
            pp[i] = p;
        }
        if (s < 2) {
            return 0;
        }
        dp[0] = 1;
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                dp[i] = (dp[i - 1] * 2) % mod;
                if (i > 1 && corridor.charAt(i - 1) == 'P') {
                    int j = i - 2;
                    while (j >= 0 && corridor.charAt(j) == 'P') {
                        j--;
                    }
                    if (j >= 0) {
                        int k = i - j - 1;
                        dp[i] = (dp[i] + mod - ((dp[j] * (long) pp[i - 1] % mod * powMod(pp[j], mod - 2, mod) % mod * powMod(pp[i - 1] - pp[j], mod - 2, mod) % mod) % mod)) % mod;
                    }
                }
            } else {
                dp[i] = dp[i - 1];
            }
        }
        return dp[n - 1];
    }

    public int powMod(int a, int b, int mod) {
        int res = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                res = (res * (long) a) % mod;
            }
            a = (a * (long) a) % mod;
            b >>= 1;
        }
        return res;

=======

        int n = corridor.length();
        int[] dp = new int[n];
        int[] sum = new int[n];
        int mod = 1000000007;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (corridor.charAt(i) == 'P') {
                continue;
            }
            if (i == 0) {
                dp[i] = 1;
            } else {
                dp[i] = sum[i - 1];
            }
            sum[i] = (sum[i] + dp[i]) % mod;
            if (i > 0) {
                sum[i] = (sum[i] + sum[i - 1]) % mod;
            }
            ans = (ans + dp[i]) % mod;
        }
        return ans;

=======

        int mod = 1000000007;
        int n = corridor.length();
        int[] dp = new int[n];
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        if (corridor.charAt(0) == 'S') {
            dp[0] = 1;
            prefix[0] = 1;
        }
        for (int i = 1; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                dp[i] = prefix[i - 1];
                prefix[i] = (prefix[i - 1] + dp[i]) % mod;
            } else {
                prefix[i] = prefix[i - 1];
            }
        }
        if (corridor.charAt(n - 1) == 'S') {
            suffix[n - 1] = 1;
        }
        for (int i = n - 2; i >= 0; i--) {
            if (corridor.charAt(i) == 'S') {
                suffix[i] = suffix[i + 1];
            } else {
                suffix[i] = (suffix[i + 1] + dp[i + 1]) % mod;
            }
        }
        int ways = 0;
        for (int i = 0; i < n; i++) {
            if (corridor.charAt(i) == 'S') {
                ways = (ways + (int)((long)dp[i] * suffix[i] % mod)) % mod;
            }
        }
        return ways;

=======

        // 1. count number of plants
        int plants = 0;
        for (char c : corridor.toCharArray()) {
            if (c == 'P') {
                plants++;
            }
        }
        // 2. check if number of plants is even
        if (plants % 2 == 1) {
            return 0;
        }
        // 3. find the number of ways to divide the corridor
        int ans = 1;
        int plantsPerSection = plants / 2;
        int plantCount = 0;
        for (char c : corridor.toCharArray()) {
            if (c == 'P') {
                plantCount++;
            }
            if (plantCount == plantsPerSection) {
                ans = (ans * 2) % 1000000007;
                plantCount = 0;
            }
        }
        return ans;
