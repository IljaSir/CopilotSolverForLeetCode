Synthesizing 10/10 solutions

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; ++i)
            workers[i] = new double[]{(double)(wage[i]) / quality[i], (double)quality[i]};
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double ans = 1e9, qsum = 0;
        PriorityQueue<Double> pool = new PriorityQueue();
        for (double[] worker: workers) {
            qsum += worker[1];
            pool.offer(-worker[1]);
            if (pool.size() > k)
                qsum += pool.poll();
            if (pool.size() == k)
                ans = Math.min(ans, qsum * worker[0]);
        }
        return ans;

=======

        int n = quality.length;
        int[][] workers = new int[n][2];
        for (int i = 0; i < n; ++i)
            workers[i] = new int[]{wage[i], quality[i]};
        Arrays.sort(workers, (w1, w2) -> Double.compare(w1[0] * 1.0 / w1[1], w2[0] * 1.0 / w2[1]));
        double res = Double.MAX_VALUE, qsum = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>((i1, i2) -> Integer.compare(i2, i1));
        for (int[] worker: workers) {
            pq.offer(worker[1]);
            qsum += worker[1];
            if (pq.size() > k)
                qsum -= pq.poll();
            if (pq.size() == k)
                res = Math.min(res, qsum * worker[0] * 1.0 / worker[1]);
        }
        return res;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; ++i)
            workers[i] = new double[]{(double) (wage[i]) / quality[i], (double) quality[i]};
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        PriorityQueue<Integer> pool = new PriorityQueue<Integer>((a, b) -> Integer.compare(b, a));
        int sumq = 0;
        double ans = 1e9;
        for (double[] worker: workers) {
            sumq += worker[1];
            pool.add((int) worker[1]);
            if (pool.size() > k)
                sumq -= pool.poll();
            if (pool.size() == k)
                ans = Math.min(ans, sumq * worker[0]);
        }
        return ans;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; i++) {
            workers[i][0] = (double) wage[i] / quality[i];
            workers[i][1] = quality[i];
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        PriorityQueue<Double> pq = new PriorityQueue<>(Collections.reverseOrder());
        double res = Double.MAX_VALUE, qSum = 0;
        for (double[] worker : workers) {
            pq.offer(worker[1]);
            qSum += worker[1];
            if (pq.size() > k) {
                qSum -= pq.poll();
            }
            if (pq.size() == k) {
                res = Math.min(res, qSum * worker[0]);
            }
        }
        return res;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; i++) {
            workers[i][0] = (double) wage[i] / quality[i];
            workers[i][1] = quality[i];
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double ans = Double.MAX_VALUE, qsum = 0;
        PriorityQueue<Double> pq = new PriorityQueue<>();
        for (double[] worker: workers) {
            qsum += worker[1];
            pq.offer(-worker[1]);
            if (pq.size() > k) {
                qsum += pq.poll();
            }
            if (pq.size() == k) {
                ans = Math.min(ans, qsum * worker[0]);
            }
        }
        return ans;

=======

        int n = quality.length;
        int[][] workers = new int[n][2];
        for (int i = 0; i < n; i++) {
            workers[i][0] = quality[i];
            workers[i][1] = wage[i];
        }
        Arrays.sort(workers, (a, b) -> (a[1] * b[0] - a[0] * b[1]));
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int sumq = 0;
        double res = Double.MAX_VALUE;
        for (int[] worker : workers) {
            pq.add(worker[0]);
            sumq += worker[0];
            if (pq.size() > k) {
                sumq -= pq.poll();
            }
            if (pq.size() == k) {
                res = Math.min(res, sumq * worker[1] * 1.0 / worker[0]);
            }
        }
        return res;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; i++) {
            workers[i][0] = (double)wage[i] / quality[i];
            workers[i][1] = quality[i];
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double ans = Double.MAX_VALUE, qualitySum = 0;
        PriorityQueue<Double> pq = new PriorityQueue<>();
        for (double[] worker: workers) {
            qualitySum += worker[1];
            pq.offer(-worker[1]);
            if (pq.size() > k) {
                qualitySum += pq.poll();
            }
            if (pq.size() == k) {
                ans = Math.min(ans, qualitySum * worker[0]);
            }
        }
        return ans;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; ++i) {
            workers[i] = new double[]{(double) (wage[i]) / quality[i], (double) quality[i]};
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double ans = Double.MAX_VALUE, qsum = 0;
        PriorityQueue<Double> pool = new PriorityQueue<>();
        for (double[] worker: workers) {
            qsum += worker[1];
            pool.offer(-worker[1]);
            if (pool.size() > k) {
                qsum += pool.poll();
            }
            if (pool.size() == k) {
                ans = Math.min(ans, qsum * worker[0]);
            }
        }
        return ans;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; ++i) {
            workers[i] = new double[]{(double)(wage[i]) / quality[i], (double)quality[i]};
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double res = Double.MAX_VALUE, qsum = 0;
        PriorityQueue<Double> pool = new PriorityQueue();
        for (double[] worker: workers) {
            qsum += worker[1];
            pool.offer(-worker[1]);
            if (pool.size() > k)
                qsum += pool.poll();
            if (pool.size() == k)
                res = Math.min(res, qsum * worker[0]);
        }
        return res;

=======

        int n = quality.length;
        double[][] workers = new double[n][2];
        for (int i = 0; i < n; ++i) {
            workers[i][0] = (double) (wage[i]) / quality[i];
            workers[i][1] = quality[i];
        }
        Arrays.sort(workers, (a, b) -> Double.compare(a[0], b[0]));
        double ans = 1e9;
        int sumq = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (double[] worker : workers) {
            pq.offer((int) worker[1]);
            sumq += worker[1];
            if (pq.size() > k) {
                sumq -= pq.poll();
            }
            if (pq.size() == k) {
                ans = Math.min(ans, sumq * worker[0]);
            }
        }
        return ans;
