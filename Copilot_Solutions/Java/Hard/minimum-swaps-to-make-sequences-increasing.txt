Synthesizing 10/10 solutions

=======

        int n = nums1.length;
        int[] keep = new int[n];
        int[] swap = new int[n];
        Arrays.fill(keep, Integer.MAX_VALUE);
        Arrays.fill(swap, Integer.MAX_VALUE);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums1[i - 1] < nums1[i] && nums2[i - 1] < nums2[i]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i - 1] < nums2[i] && nums2[i - 1] < nums1[i]) {
                keep[i] = Math.min(keep[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], keep[i - 1] + 1);
            }
        }
        return Math.min(keep[n - 1], swap[n - 1]);

=======

        int n = nums1.length;
        int[] keep = new int[n];
        int[] swap = new int[n];
        Arrays.fill(keep, n);
        Arrays.fill(swap, n);
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                keep[i] = Math.min(keep[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], keep[i - 1] + 1);
            }
        }
        return Math.min(keep[n - 1], swap[n - 1]);

=======

        int n = nums1.length;
        int[] swap = new int[n];
        int[] noSwap = new int[n];
        Arrays.fill(swap, Integer.MAX_VALUE);
        Arrays.fill(noSwap, Integer.MAX_VALUE);
        swap[0] = 1;
        noSwap[0] = 0;
        for (int i = 1; i < n; i++) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                swap[i] = swap[i - 1] + 1;
                noSwap[i] = noSwap[i - 1];
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                swap[i] = Math.min(swap[i], noSwap[i - 1] + 1);
                noSwap[i] = Math.min(noSwap[i], swap[i - 1]);
            }
        }
        return Math.min(swap[n - 1], noSwap[n - 1]);

=======

        int n = nums1.length;
        int[] swap = new int[n];
        int[] noSwap = new int[n];
        Arrays.fill(swap, Integer.MAX_VALUE);
        Arrays.fill(noSwap, Integer.MAX_VALUE);
        swap[0] = 1;
        noSwap[0] = 0;
        for (int i = 1; i < n; i++) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                noSwap[i] = noSwap[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                noSwap[i] = Math.min(noSwap[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], noSwap[i - 1] + 1);
            }
        }
        return Math.min(swap[n - 1], noSwap[n - 1]);

=======

        int n = nums1.length;
        int[] swap = new int[n];
        int[] noSwap = new int[n];
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            swap[i] = n;
            noSwap[i] = n;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                swap[i] = swap[i - 1] + 1;
                noSwap[i] = noSwap[i - 1];
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                swap[i] = Math.min(swap[i], noSwap[i - 1] + 1);
                noSwap[i] = Math.min(noSwap[i], swap[i - 1]);
            }
        }
        return Math.min(swap[n - 1], noSwap[n - 1]);

=======

        int n = nums1.length;
        int[] swap = new int[n];
        int[] noSwap = new int[n];
        swap[0] = 1;
        for (int i = 1; i < n; i++) {
            swap[i] = n;
            noSwap[i] = n;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                noSwap[i] = noSwap[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                noSwap[i] = Math.min(noSwap[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], noSwap[i - 1] + 1);
            }
        }
        return Math.min(swap[n - 1], noSwap[n - 1]);

=======

        int n = nums1.length;
        int[] swap = new int[n];
        int[] noSwap = new int[n];
        Arrays.fill(swap, n);
        Arrays.fill(noSwap, n);
        swap[0] = 1;
        noSwap[0] = 0;
        for (int i = 1; i < n; i++) {
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                noSwap[i] = noSwap[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                noSwap[i] = Math.min(noSwap[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], noSwap[i - 1] + 1);
            }
        }
        return Math.min(swap[n - 1], noSwap[n - 1]);

=======

        int len = nums1.length;
        int[] keep = new int[len];
        int[] swap = new int[len];
        keep[0] = 0;
        swap[0] = 1;
        for (int i = 1; i < len; i++) {
            keep[i] = swap[i] = len;
            if (nums1[i] > nums1[i - 1] && nums2[i] > nums2[i - 1]) {
                keep[i] = keep[i - 1];
                swap[i] = swap[i - 1] + 1;
            }
            if (nums1[i] > nums2[i - 1] && nums2[i] > nums1[i - 1]) {
                keep[i] = Math.min(keep[i], swap[i - 1]);
                swap[i] = Math.min(swap[i], keep[i - 1] + 1);
            }
        }
        return Math.min(keep[len - 1], swap[len - 1]);

=======

        int n=nums1.length;
        int[] swap=new int[n];
        int[] noswap=new int[n];
        swap[0]=1;
        noswap[0]=0;
        for(int i=1;i<n;i++){
            swap[i]=Integer.MAX_VALUE;
            noswap[i]=Integer.MAX_VALUE;
            if(nums1[i-1]<nums1[i] && nums2[i-1]<nums2[i]){
                swap[i]=swap[i-1]+1;
                noswap[i]=noswap[i-1];
            }
            if(nums1[i-1]<nums2[i] && nums2[i-1]<nums1[i]){
                swap[i]=Math.min(swap[i],noswap[i-1]+1);
                noswap[i]=Math.min(noswap[i],swap[i-1]);
            }
        }
        return Math.min(swap[n-1],noswap[n-1]);

=======

        int n = nums1.length;
        int swap = 1, notSwap = 0;
        for (int i = 1; i < n; i++) {
            int nswap = Integer.MAX_VALUE, nnotSwap = Integer.MAX_VALUE;
            if (nums1[i - 1] < nums1[i] && nums2[i - 1] < nums2[i]) {
                nswap = swap + 1;
                nnotSwap = notSwap;
            }
            if (nums1[i - 1] < nums2[i] && nums2[i - 1] < nums1[i]) {
                nswap = Math.min(nswap, notSwap + 1);
                nnotSwap = Math.min(nnotSwap, swap);
            }
            swap = nswap;
            notSwap = nnotSwap;
        }
        return Math.min(swap, notSwap);
