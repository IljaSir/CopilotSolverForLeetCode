Synthesizing 10/10 solutions

=======

        int left = 0;
        int right = s.length() - 1;
        while (left < s.length() && s.charAt(left) == '0') {
            left++;
        }
        while (right >= 0 && s.charAt(right) == '0') {
            right--;
        }
        if (left > right) {
            return 0;
        }
        int count = 0;
        for (int i = left; i <= right; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        return count * 2 - 1;

=======

        int l = 0, r = s.length() - 1;
        while (l < s.length() && s.charAt(l) == '0') {
            l++;
        }
        while (r >= 0 && s.charAt(r) == '0') {
            r--;
        }
        int res = r - l + 1;
        for (int i = l; i <= r; i++) {
            if (s.charAt(i) == '1') {
                res += 2;
            }
        }
        return res;

=======

        int n = s.length();
        int count = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') {
                count++;
            }
        }
        if (count == 0) {
            return 0;
        }
        if (s.charAt(0) == '1') {
            ans += 2;
        }
        if (s.charAt(n - 1) == '1') {
            ans += 2;
        }
        if (s.charAt(0) == '1' && s.charAt(n - 1) == '1') {
            return ans + 2 * (count - 1);
        }
        return ans + 2 * count - 1;

=======

        int n = s.length();
        int left = 0;
        int right = n - 1;
        int res = 0;
        while (left < n && s.charAt(left) == '0') {
            left++;
        }
        while (right >= 0 && s.charAt(right) == '0') {
            right--;
        }
        while (left <= right) {
            int count = 0;
            while (left <= right && s.charAt(left) == '0') {
                left++;
                count++;
            }
            res += count == 0 ? 2 : 1;
            left++;
        }
        return res;

=======

        int res = 0;
        int l = 0;
        int r = s.length() - 1;
        while (l <= r) {
            if (s.charAt(l) == '1' && s.charAt(r) == '1') {
                res += 2;
                l++;
                r--;
            } else if (s.charAt(l) == '0' && s.charAt(r) == '1') {
                l++;
            } else if (s.charAt(l) == '1' && s.charAt(r) == '0') {
                r--;
            } else {
                l++;
                r--;
            }
        }
        return res;

=======

        int n = s.length();
        int i = 0;
        int j = n - 1;
        int ans = 0;
        while (i <= j) {
            if (s.charAt(i) == '1') {
                ans += 2;
                if (s.charAt(j) == '1') {
                    j--;
                }
            } else {
                ans += 1;
            }
            i++;
        }
        return ans - (j == n - 1 ? 1 : 0);

=======

        int result = 0;
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count++;
            } else {
                if (count > 0) {
                    result++;
                    count = 0;
                }
            }
        }
        if (count > 0) {
            result += 2;
        }
        return result;

=======

        int n = s.length();
        int count = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '1') count++;
            else {
                if (count > 0) {
                    if (i == n - 1 || s.charAt(i + 1) == '0') {
                        res += 2;
                        count = 0;
                    }
                }
            }
        }
        return res + count;

=======

        int n = s.length();
        int i = 0;
        int j = n - 1;
        int res = 0;
        while(i < j){
            while(i < j && s.charAt(i) == '0') i++;
            while(i < j && s.charAt(j) == '0') j--;
            if(i < j){
                res += 2;
                i++;
                j--;
            }
        }
        if(i == j && s.charAt(i) == '1') res++;
        return res;

=======

        int n = s.length();
        int[] dp = new int[n];
        int[] dp2 = new int[n];
        int[] dp3 = new int[n];
        int[] dp4 = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.fill(dp2, Integer.MAX_VALUE);
        Arrays.fill(dp3, Integer.MAX_VALUE);
        Arrays.fill(dp4, Integer.MAX_VALUE);
        int ans = Integer.MAX_VALUE;
        if(s.charAt(0) == '1') {
            dp[0] = 1;
            dp2[0] = 1;
        }
        if(s.charAt(n - 1) == '1') {
            dp3[n - 1] = 1;
            dp4[n - 1] = 1;
        }
        for(int i = 1; i < n; i++) {
            dp[i] = Math.min(dp[i - 1], dp2[i - 1]) + 1;
            dp2[i] = Math.min(dp[i - 1], dp2[i - 1]);
            if(s.charAt(i) == '1') {
                dp2[i]++;
            }
        }
        for(int i = n - 2; i >= 0; i--) {
            dp3[i] = Math.min(dp3[i + 1], dp4[i + 1]) + 1;
            dp4[i] = Math.min(dp3[i + 1], dp4[i + 1]);
            if(s.charAt(i) == '1') {
                dp4[i]++;
            }
        }
        for(int i = 0; i < n; i++) {
            if(s.charAt(i) == '1') {
                ans = Math.min(ans, Math.min(dp[i], dp3[i]));
            }
        }
        return ans;
