Synthesizing 10/10 solutions

=======

        int[][][] dp = new int[m + 1][n + 1][target + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE / 2);
            }
        }
        for (int i = 0; i <= m; i++) {
            dp[i][0][0] = 0;
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= target; k++) {
                    if (houses[i - 1] != 0) {
                        if (houses[i - 1] == j) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k]);
                            if (k > 1) {
                                for (int l = 1; l <= n; l++) {
                                    if (l != j) {
                                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k - 1]);
                                    }
                                }
                            }
                        }
                    } else {
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k] + cost[i - 1][j - 1]);
                        if (k > 1) {
                            for (int l = 1; l <= n; l++) {
                                if (l != j) {
                                    dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k - 1] + cost[i - 1][j - 1]);
                                }
                            }
                        }
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            ans = Math.min(ans, dp[m][i][target]);
        }
        return ans == Integer.MAX_VALUE / 2 ? -1 : ans;

=======

        int[][][] dp = new int[m + 1][n + 1][target + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                for (int k = 0; k <= target; k++) {
                    dp[i][j][k] = Integer.MAX_VALUE / 2;
                }
            }
        }
        if (houses[0] == 0) {
            for (int i = 1; i <= n; i++) {
                dp[1][i][1] = cost[0][i - 1];
            }
        } else {
            dp[1][houses[0]][1] = 0;
        }
        for (int i = 2; i <= m; i++) {
            if (houses[i - 1] == 0) {
                for (int j = 1; j <= n; j++) {
                    for (int k = 1; k <= target; k++) {
                        for (int l = 1; l <= n; l++) {
                            if (j == l) {
                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k] + cost[i - 1][j - 1]);
                            } else {
                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k - 1] + cost[i - 1][j - 1]);
                            }
                        }
                    }
                }
            } else {
                int j = houses[i - 1];
                for (int k = 1; k <= target; k++) {
                    for (int l = 1; l <= n; l++) {
                        if (j == l) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k]);
                        } else {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][l][k - 1]);
                        }
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i <= n; i++) {
            ans = Math

=======

        int[][][] dp = new int[m + 1][n + 1][target + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE / 2);
            }
        }
        dp[0][0][0] = 0;
        for (int i = 1; i <= m; i++) {
            int color = houses[i - 1];
            for (int j = 1; j <= n; j++) {
                for (int k = 1; k <= target; k++) {
                    if (color != 0) {
                        if (j == color) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k]);
                        }
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k - 1]);
                    } else {
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k] + cost[i - 1][j - 1]);
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k - 1]);
                    }
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int j = 1; j <= n; j++) {
            res = Math.min(res, dp[m][j][target]);
        }
        return res == Integer.MAX_VALUE / 2 ? -1 : res;

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < target; k++) {
                    if (houses[i] != 0 && houses[i] - 1 != j) {
                        continue;
                    }
                    int costHouse = houses[i] == 0 ? cost[i][j] : 0;
                    if (i == 0) {
                        if (k == 0) {
                            dp[i][j][k] = costHouse;
                        }
                    } else {
                        for (int j0 = 0; j0 < n; j0++) {
                            for (int k0 = 0; k0 < target; k0++) {
                                if (j == j0 && k == k0) {
                                    dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j0][k0] + costHouse);
                                } else if (j != j0 && k == k0 + 1) {
                                    dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j0][k0] + costHouse);
                                }
                            }
                        }
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            ans = Math.min(ans, dp[m - 1][j][target - 1]);
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        int ans = dfs(houses, cost, m, n, target, 0, 0, 0, dp);
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }

    private int dfs(int[] houses, int[][] cost, int m, int n, int target, int cur, int preColor, int preGroup, int[][][] dp) {
        if (cur == m) {
            return preGroup == target ? 0 : Integer.MAX_VALUE;
        }
        if (dp[cur][preColor][preGroup] != -1) {
            return dp[cur][preColor][preGroup];
        }
        int ans = Integer.MAX_VALUE;
        if (houses[cur] != 0) {
            if (houses[cur] - 1 == preColor) {
                ans = dfs(houses, cost, m, n, target, cur + 1, preColor, preGroup, dp);
            } else {
                ans = dfs(houses, cost, m, n, target, cur + 1, houses[cur] - 1, preGroup + 1, dp);
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (i == preColor) {
                    ans = Math.min(ans, dfs(houses, cost, m, n, target, cur + 1, preColor, preGroup, dp) + cost[cur][i]);
                } else {
                    ans = Math.min(ans, dfs(houses, cost, m, n, target, cur + 1, i, preGroup + 1, dp) + cost[cur][i]);
                }
            }
        }
        dp[cur][preColor][preGroup] = ans;
        return ans;

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        if (houses[0] == 0) {
            for (int i = 0; i < n; i++) {
                dp[0][i][0] = cost[0][i];
            }
        } else {
            dp[0][houses[0] - 1][0] = 0;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int preColor = houses[i - 1] == 0 ? j : houses[i - 1] - 1;
                for (int k = 0; k < target; k++) {
                    if (dp[i - 1][preColor][k] == Integer.MAX_VALUE) {
                        continue;
                    }
                    if (houses[i] == 0) {
                        for (int j2 = 0; j2 < n; j2++) {
                            if (j2 == j) {
                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][preColor][k] + cost[i][j2]);
                            } else {
                                dp[i][j][k + 1] = Math.min(dp[i][j][k + 1], dp[i - 1][preColor][k] + cost[i][j2]);
                            }
                        }
                    } else {
                        int curColor = houses[i] - 1;
                        if (curColor == j) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][preColor][k]);
                        } else {
                            dp[i][curColor][k + 1] = Math.min(dp[i][curColor][k + 1], dp[i - 1][preColor][k]);
                        }
                    }
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            res = Math.min(res, dp[m - 1

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        if (houses[0] == 0) {
            for (int j = 0; j < n; j++) {
                dp[0][j][0] = cost[0][j];
            }
        } else {
            dp[0][houses[0] - 1][0] = 0;
        }
        for (int i = 1; i < m; i++) {
            if (houses[i] == 0) {
                for (int j = 0; j < n; j++) {
                    for (int k = 0; k < target; k++) {
                        if (dp[i - 1][j][k] != Integer.MAX_VALUE) {
                            dp[i][j][k] = Math.min(dp[i - 1][j][k] + cost[i][j], dp[i][j][k]);
                        }
                        for (int j2 = 0; j2 < n; j2++) {
                            if (j != j2 && dp[i - 1][j2][k - 1] != Integer.MAX_VALUE) {
                                dp[i][j][k] = Math.min(dp[i - 1][j2][k - 1] + cost[i][j], dp[i][j][k]);
                            }
                        }
                    }
                }
            } else {
                for (int k = 0; k < target; k++) {
                    if (dp[i - 1][houses[i] - 1][k] != Integer.MAX_VALUE) {
                        dp[i][houses[i] - 1][k] = Math.min(dp[i - 1][houses[i] - 1][k], dp[i][houses[i] - 1][k]);
                    }
                    for (int j2 = 0; j2 < n; j2++) {
                        if (houses[i] - 1 != j2 && dp[i - 1][j2][k - 1] != Integer.MAX_VALUE) {
                            dp[i][houses[i] - 1][k] = Math.min(dp[i

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < target; k++) {
                    dp[i][j][k] = Integer.MAX_VALUE;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < target; k++) {
                    if (houses[i] != 0 && houses[i] != j + 1) {
                        continue;
                    }
                    if (i == 0) {
                        if (k == 0) {
                            dp[i][j][k] = houses[i] == 0 ? cost[i][j] : 0;
                        }
                    } else {
                        for (int p = 0; p < n; p++) {
                            if (p == j) {
                                if (k < target - 1) {
                                    dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][p][k + 1] + (houses[i] == 0 ? cost[i][j] : 0));
                                }
                            } else {
                                dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][p][k] + (houses[i] == 0 ? cost[i][j] : 0));
                            }
                        }
                    }
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            res = Math.min(res, dp[m - 1][i][0]);
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < target; k++) {
                    dp[i][j][k] = Integer.MAX_VALUE;
                }
            }
        }
        dp[0][houses[0] - 1][0] = 0;
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < target; k++) {
                    if (dp[i - 1][j][k] == Integer.MAX_VALUE) {
                        continue;
                    }
                    if (houses[i] == 0) {
                        for (int j1 = 0; j1 < n; j1++) {
                            if (j1 != j) {
                                dp[i][j1][k] = Math.min(dp[i][j1][k], dp[i - 1][j][k] + cost[i][j1]);
                            } else {
                                dp[i][j1][k] = Math.min(dp[i][j1][k], dp[i - 1][j][k]);
                            }
                        }
                        if (k + 1 < target) {
                            for (int j1 = 0; j1 < n; j1++) {
                                if (j1 != j) {
                                    dp[i][j1][k + 1] = Math.min(dp[i][j1][k + 1], dp[i - 1][j][k] + cost[i][j1]);
                                }
                            }
                        }
                    } else {
                        if (j == houses[i] - 1) {
                            for (int j1 = 0; j1 < n; j1++) {
                                if (j1 != j) {
                                    dp[i][j1][k + 1] = Math.min(dp[i][j1][k + 1], dp[i - 1][j][k]);
                                } else {
                                    dp[i][j1][k] = Math.min(dp[i][j1][k], dp[i - 1][j][k]);
                                }
                            }
                        }
                    }
                }

=======

        if (houses.length == 0) return 0;
        int[][][] dp = new int[m][n][target];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], Integer.MAX_VALUE);
            }
        }
        if (houses[0] == 0) {
            for (int j = 0; j < n; j++) {
                dp[0][j][0] = cost[0][j];
            }
        } else {
            dp[0][houses[0] - 1][0] = 0;
        }
        for (int i = 1; i < m; i++) {
            if (houses[i] == 0) {
                for (int j = 0; j < n; j++) {
                    for (int k = 0; k < target; k++) {
                        if (dp[i - 1][j][k] != Integer.MAX_VALUE) {
                            dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k] + cost[i][j]);
                            for (int l = 0; l < n; l++) {
                                if (l != j) {
                                    dp[i][j][k + 1] = Math.min(dp[i][j][k + 1], dp[i - 1][l][k] + cost[i][j]);
                                }
                            }
                        }
                    }
                }
            } else {
                int j = houses[i] - 1;
                for (int k = 0; k < target; k++) {
                    if (dp[i - 1][j][k] != Integer.MAX_VALUE) {
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k]);
                        for (int l = 0; l < n; l++) {
                            if (l != j) {
                                dp[i][j][k + 1] = Math.min(dp[i][j][k + 1], dp[i - 1][l][k]);
                            }
                        }
                    }
                }
            }
        int res = Integer.MAX_VALUE;
        for (int j = 0; j < n;
