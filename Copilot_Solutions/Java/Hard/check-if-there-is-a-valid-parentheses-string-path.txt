Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0});
        visited[0][0] = true;
        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            int x = node[0];
            int y = node[1];
            if (x == m - 1 && y == n - 1) {
                return true;
            }
            if (grid[x][y] == '(') {
                if (y + 1 < n && !visited[x][y + 1] && (grid[x][y + 1] == '(' || grid[x][y + 1] == '*')) {
                    queue.add(new int[]{x, y + 1});
                    visited[x][y + 1] = true;
                }
                if (x + 1 < m && !visited[x + 1][y] && (grid[x + 1][y] == '/' || grid[x + 1][y] == '*')) {
                    queue.add(new int[]{x + 1, y});
                    visited[x + 1][y] = true;
                }
            } else if (grid[x][y] == ')') {
                if (y - 1 >= 0 && !visited[x][y - 1] && (grid[x][y - 1] == ')' || grid[x][y - 1] == '*')) {
                    queue.add(new int[]{x, y - 1});
                    visited[x][y - 1] = true;
                }
                if (x - 1 >= 0 && !visited[x - 1][y] && (grid[x - 1][y] == '/' || grid[x - 1][y] == '*')) {
                    queue.add(new int[]{x - 1, y});
                    visited[x - 1][y] = true;
                }
            } else if (grid[x][y] == '*') {
                if (y + 1 < n && !visited[x][y + 1] && (grid[x][y + 1] == '(' || grid[x][y + 1] == '*')) {
                    queue.add(new int[]{x, y + 1});
                    visited[x

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, 0, 0, visited);
    }
    
    private boolean dfs(char[][] grid, int i, int j, boolean[][] visited) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j]) {
            return false;
        }
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            return true;
        }
        visited[i][j] = true;
        if (grid[i][j] == '(') {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == ')') {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else if (grid[i][j] == '[') {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == ']') {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i - 1, j, visited);
        } else if (grid[i][j] == '{') {
            return dfs(grid, i, j - 1, visited) || dfs(grid, i + 1, j, visited);
        } else {
            return dfs(grid, i, j + 1, visited) || dfs(grid, i - 1, j, visited);
        }

=======

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        return dfs(grid, visited, 0, 0);
    }
    public boolean dfs(char[][] grid, boolean[][] visited, int i, int j) {
        int m = grid.length;
        int n = grid[0].length;
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        if (i == m - 1 && j == n - 1) {
            return true;
        }
        int[] x = {0, 0, -1, 1};
        int[] y = {-1, 1, 0, 0};
        for (int k = 0; k < 4; k++) {
            if (grid[i][j] == '(') {
                if (k == 0 || k == 2) {
                    continue;
                }
            } else if (grid[i][j] == ')') {
                if (k == 1 || k == 3) {
                    continue;
                }
            } else if (grid[i][j] == '[') {
                if (k == 0 || k == 3) {
                    continue;
                }
            } else if (grid[i][j] == ']') {
                if (k == 1 || k == 2) {
                    continue;
                }
            } else if (grid[i][j] == '{') {
                if (k == 2 || k == 3) {
                    continue;
                }
            } else if (grid[i][j] == '}') {
                if (k == 0 || k == 1) {
                    continue;
                }
            }
            if (dfs(grid, visited, i + x[k], j + y[k])) {
                return true;
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dir = new int[][][]{
            {{0, -1}, {0, 1}},
            {{-1, 0}, {1, 0}},
            {{-1, 0}, {0, 1}},
            {{-1, 0}, {0, -1}},
            {{0, -1}, {1, 0}},
            {{0, 1}, {1, 0}}
        };
        int[][][] dir2 = new int[][][]{
            {{0, -1}, {0, 1}},
            {{-1, 0}, {1, 0}},
            {{-1, 0}, {0, 1}},
            {{-1, 0}, {0, -1}},
            {{0, -1}, {1, 0}},
            {{0, 1}, {1, 0}}
        };
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int i = cur[0];
            int j = cur[1];
            if (i == m - 1 && j == n - 1) {
                return true;
            }
            int[][] d = dir[grid[i][j] - '1'];
            for (int k = 0; k < d.length; k++) {
                int x = i + d[k][0];
                int y = j + d[k][1];
                if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) {
                    continue;
                }
                int[][] d2 = dir2[grid[x][y] - '1'];
                for (int l = 0; l < d2.length; l++) {
                    if (d2[l][0] == -d[k][0] && d2[l][1] == -d[k][1]) {
                        q.offer(new int[]{x, y});
                        visited[x][y] = true;
                        break;
                    }
                }
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dir = new int[][][] {
            {{0, -1}, {0, 1}},
            {{-1, 0}, {1, 0}},
            {{0, -1}, {1, 0}},
            {{0, 1}, {1, 0}},
            {{0, -1}, {-1, 0}},
            {{0, 1}, {-1, 0}}
        };
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == m - 1 && cur[1] == n - 1) {
                return true;
            }
            int[][] d = dir[grid[cur[0]][cur[1]] - '1'];
            for (int[] dd : d) {
                int x = cur[0] + dd[0];
                int y = cur[1] + dd[1];
                if (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y]) {
                    int[][] dd2 = dir[grid[x][y] - '1'];
                    for (int[] dd3 : dd2) {
                        if (dd3[0] + dd[0] == 0 && dd3[1] + dd[1] == 0) {
                            queue.offer(new int[]{x, y});
                            visited[x][y] = true;
                        }
                    }
                }
            }
        }
        return false;

=======

        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int n = grid.length, m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int r = cur[0], c = cur[1];
            int dir = -1;
            if (grid[r][c] == '/') {
                dir = (r + c) % 2 == 0 ? 3 : 1;
            } else if (grid[r][c] == '\\') {
                dir = (r + c) % 2 == 0 ? 1 : 3;
            } else {
                dir = 0;
            }
            for (int i = dir; i <= dir + 1; i++) {
                int nr = r + dirs[i % 4][0], nc = c + dirs[i % 4][1];
                if (nr >= 0 && nr < n && nc >= 0 && nc < m && !visited[nr][nc]) {
                    if (grid[nr][nc] == '/' && (i % 4 == 1 || i % 4 == 2)) {
                        continue;
                    }
                    if (grid[nr][nc] == '\\' && (i % 4 == 0 || i % 4 == 3)) {
                        continue;
                    }
                    if (grid[nr][nc] == '(' && (i % 4 == 3 || i % 4 == 2)) {
                        continue;
                    }
                    if (grid[nr][nc] == ')' && (i % 4 == 1 || i % 4 == 0)) {
                        continue;
                    }
                    visited[nr][nc] = true;
                    q.offer(new int[]{nr, nc});
                }
            }
        }
        return visited[n - 1][m - 1];

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dir = new int[][][]{ {{0, 1}, {0, -1}}, {{1, 0}, {-1, 0}}, {{0, 1}, {1, 0}}, {{0, -1}, {1, 0}}, {{0, 1}, {-1, 0}}, {{0, -1}, {-1, 0}} };
        int[][][] dir2 = new int[][][]{ {{0, 1}, {0, -1}}, {{1, 0}, {-1, 0}} };
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0];
            int y = cur[1];
            if (x == m - 1 && y == n - 1) {
                return true;
            }
            int[][] d = dir[grid[x][y] - '1'];
            for (int[] d1 : d) {
                int nx = x + d1[0];
                int ny = y + d1[1];
                if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny] || !isValid(grid[x][y], grid[nx][ny], d1)) {
                    continue;
                }
                queue.offer(new int[]{nx, ny});
                visited[nx][ny] = true;
            }
        }
        return false;

=======

        int[][][] moves = new int[][][] {
            {{0, -1}, {0, 1}}, // horizontal
            {{-1, 0}, {1, 0}}, // vertical
            {{0, -1}, {1, 0}}, // top left
            {{0, 1}, {1, 0}}, // top right
            {{0, -1}, {-1, 0}}, // bottom left
            {{0, 1}, {-1, 0}}, // bottom right
        };
        int m = grid.length;
        int n = grid[0].length;
        int[][] visited = new int[m][n];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {0, 0});
        while (!q.isEmpty()) {
            int[] p = q.poll();
            int x = p[0];
            int y = p[1];
            if (x == m - 1 && y == n - 1) return true;
            int type = grid[x][y] - '1';
            for (int[] move : moves[type]) {
                int nx = x + move[0];
                int ny = y + move[1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && visited[nx][ny] == 0) {
                    int ntype = grid[nx][ny] - '1';
                    for (int[] nmove : moves[ntype]) {
                        if (nx + nmove[0] == x && ny + nmove[1] == y) {
                            visited[nx][ny] = 1;
                            q.offer(new int[] {nx, ny});
                            break;
                        }
                    }
                }
            }
        }
        return false;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dir = new int[][][] {{{0,1},{0,-1}},{{1,0},{-1,0}},{{0,1},{1,0}},{{0,-1},{1,0}},{{0,1},{-1,0}},{{0,-1},{-1,0}}};
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {0,0});
        visited[0][0] = true;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == m - 1 && cur[1] == n - 1) {
                return true;
            }
            int type = grid[cur[0]][cur[1]] - '0' - 1;
            for (int[] d : dir[type]) {
                int x = cur[0] + d[0];
                int y = cur[1] + d[1];
                if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) {
                    continue;
                }
                int type2 = grid[x][y] - '0' - 1;
                for (int[] d2 : dir[type2]) {
                    if (d2[0] == -d[0] && d2[1] == -d[1]) {
                        queue.add(new int[] {x, y});
                        visited[x][y] = true;
                        break;
                    }
                }
            }
        }
        return false;

=======

        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        int[][][] dir = {
            {{1, 0}, {1, 1}, {1, -1}},
            {{-1, 0}, {-1, 1}, {-1, -1}},
            {{0, 1}, {1, 1}, {-1, 1}},
            {{0, -1}, {1, -1}, {-1, -1}}
        };
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});
        visited[0][0] = true;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            if (cur[0] == m - 1 && cur[1] == n - 1) {
                return true;
            }
            int[][] d = dir[grid[cur[0]][cur[1]] - '1'];
            for (int i = 0; i < d.length; i++) {
                int x = cur[0] + d[i][0];
                int y = cur[1] + d[i][1];
                if (x >= 0 && x < m && y >= 0 && y < n && !visited[x][y]) {
                    for (int j = 0; j < dir[grid[x][y] - '1'].length; j++) {
                        int nx = x + dir[grid[x][y] - '1'][j][0];
                        int ny = y + dir[grid[x][y] - '1'][j][1];
                        if (nx == cur[0] && ny == cur[1]) {
                            q.offer(new int[]{x, y});
                            visited[x][y] = true;
                            break;
                        }
                    }
                }
            }
        }
        return false;
