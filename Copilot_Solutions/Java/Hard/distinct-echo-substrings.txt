Synthesizing 10/10 solutions

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < text.length(); i++) {
            for (int j = i + 2; j <= text.length(); j += 2) {
                String s = text.substring(i, j);
                if (s.substring(0, s.length() / 2).equals(s.substring(s.length() / 2, s.length()))) {
                    set.add(s);
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < text.length(); i++) {
            for (int j = i + 1; j < text.length(); j++) {
                if ((j - i) % 2 == 0) {
                    String s1 = text.substring(i, i + (j - i) / 2);
                    String s2 = text.substring(i + (j - i) / 2, j + 1);
                    if (s1.equals(s2)) {
                        set.add(s1);
                    }
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < text.length(); i++) {
            for (int j = i + 1; j < text.length(); j++) {
                if ((j - i) % 2 == 0) {
                    if (text.substring(i, (j - i) / 2 + i).equals(text.substring((j - i) / 2 + i, j))) {
                        set.add(text.substring(i, j));
                    }
                }
            }
        }
        return set.size();

=======

        int n = text.length();
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((j - i) % 2 == 0 && text.substring(i, (i + j) / 2).equals(text.substring((i + j) / 2, j))) {
                    set.add(text.substring(i, j));
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        int n = text.length();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int len = j - i;
                if (i + len + len <= n && text.substring(i, i + len).equals(text.substring(i + len, i + len + len))) {
                    set.add(text.substring(i, i + len));
                }
            }
        }
        return set.size();

=======

        int n = text.length();
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((j - i) % 2 == 0 && text.substring(i, j).equals(text.substring(j, j + (j - i) / 2))) {
                    set.add(text.substring(i, j));
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < text.length(); i++) {
            for (int j = 1; j <= (text.length() - i) / 2; j++) {
                String sub = text.substring(i, i + j);
                if (text.substring(i + j).startsWith(sub)) {
                    set.add(sub);
                }
            }
        }
        return set.size();

=======

        Set<String> set = new HashSet<>();
        for (int i = 0; i < text.length(); i++) {
            for (int j = 1; j <= (text.length() - i) / 2; j++) {
                String s = text.substring(i, i + j);
                if (text.substring(i + j).startsWith(s)) {
                    set.add(s);
                }
            }
        }
        return set.size();

=======

        int n = text.length();
        int[][] dp = new int[n][n];
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (i == j) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = dp[i][j - 1] * 31 + (text.charAt(j) - 'a');
                }
                if (j - i + 1 > 0 && (j - i + 1) % 2 == 0) {
                    int len = (j - i + 1) / 2;
                    if (dp[i][i + len - 1] == dp[i + len][j]) {
                        set.add(text.substring(i, j + 1));
                    }
                }
            }
        }
        return set.size();

=======

        int ans = 0;
        for (int i = 0; i < text.length(); i++) {
            for (int j = i + 1; j < text.length(); j++) {
                if ((j - i) % 2 == 0 && text.charAt(i) == text.charAt(j) && text.substring(i, (i + j) / 2 + 1).equals(text.substring((i + j) / 2 + 1, j + 1))) {
                    ans++;
                }
            }
        }
        return ans;
