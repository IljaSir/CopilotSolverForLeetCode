Synthesizing 10/10 solutions

=======

        Map<String, List<String>> map = new HashMap<>();
        for (String word : words) {
            String key = getKey(word);
            List<String> list = map.getOrDefault(key, new ArrayList<>());
            list.add(word);
            map.put(key, list);
        }

        int maxGroup = 0, maxGroupSize = 0;
        for (List<String> list : map.values()) {
            maxGroup++;
            maxGroupSize = Math.max(maxGroupSize, list.size());
        }

        return new int[] {maxGroup, maxGroupSize};
    }

    private String getKey(String word) {
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < word.length(); i++) {
            int diff = word.charAt(i) - word.charAt(i - 1);
            if (diff < 0) {
                diff += 26;
            }
            sb.append(diff);
        }
        return sb.toString();

=======

        Map<String, List<String>> map = new HashMap<>();
        for (String word : words) {
            StringBuilder sb = new StringBuilder();
            for (int i = 1; i < word.length(); i++) {
                int diff = word.charAt(i) - word.charAt(i - 1);
                if (diff < 0) {
                    diff += 26;
                }
                sb.append(diff);
            }
            String key = sb.toString();
            List<String> list = map.getOrDefault(key, new ArrayList<>());
            list.add(word);
            map.put(key, list);
        }
        int maxGroup = 0;
        int maxGroupSize = 0;
        for (List<String> list : map.values()) {
            maxGroup++;
            maxGroupSize = Math.max(maxGroupSize, list.size());
        }
        return new int[]{maxGroup, maxGroupSize};

=======

        int[] ans = new int[2];
        int n = words.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isConnected(words[i], words[j])) {
                    union(parent, i, j);
                }
            }
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            map.put(p, map.getOrDefault(p, 0) + 1);
        }
        int max = 0;
        for (int key : map.keySet()) {
            max = Math.max(max, map.get(key));
        }
        ans[0] = map.size();
        ans[1] = max;
        return ans;
    }
    private boolean isConnected(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int n = s1.length();
        int diff = s2.charAt(0) - s1.charAt(0);
        for (int i = 1; i < n; i++) {
            if ((s2.charAt(i) - s1.charAt(i) + 26) % 26 != diff) {
                return false;
            }
        }
        return true;
    }
    private void union(int[] parent, int i, int j) {
        int p1 = find(parent, i);
        int p2 = find(parent, j);
        if (p1 != p2) {
            parent[p1] = p2;
        }
    }
    private int find(int[] parent, int i) {
        if (i != parent[i]) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int[] result = new int[2];
        if (words.length == 0) return result;
        if (words.length == 1) {
            result[0] = 1;
            result[1] = 1;
            return result;
        }
        Map<String, List<String>> map = new HashMap<>();
        for (String word : words) {
            String key = getKey(word);
            List<String> list = map.getOrDefault(key, new ArrayList<>());
            list.add(word);
            map.put(key, list);
        }
        int max = 0;
        int maxLen = 0;
        for (String key : map.keySet()) {
            int size = map.get(key).size();
            if (size > maxLen) {
                maxLen = size;
            }
            max++;
        }
        result[0] = max;
        result[1] = maxLen;
        return result;
    }
    
    private String getKey(String word) {
        if (word.length() == 1) return "0";
        int diff = word.charAt(1) - word.charAt(0);
        if (diff < 0) diff += 26;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < word.length(); i++) {
            int d = word.charAt(i) - word.charAt(i - 1);
            if (d < 0) d += 26;
            sb.append(d - diff);
        }
        return sb.toString();

=======

        int len = words.length;
        int[] ans = new int[2];
        Map<String, List<String>> map = new HashMap<>();
        for (int i = 0; i < len; i++) {
            String word = words[i];
            int diff = word.charAt(0) - 'a';
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < word.length(); j++) {
                char c = (char) (word.charAt(j) - diff);
                if (c < 'a') {
                    c += 26;
                }
                sb.append(c);
            }
            List<String> list = map.getOrDefault(sb.toString(), new ArrayList<>());
            list.add(word);
            map.put(sb.toString(), list);
        }
        int max = 0;
        for (List<String> list : map.values()) {
            max = Math.max(max, list.size());
        }
        ans[0] = map.size();
        ans[1] = max;
        return ans;

=======

        int[] ans = new int[2];
        HashMap<String, List<String>> map = new HashMap<>();
        for(String word : words){
            String key = getKey(word);
            if(!map.containsKey(key)){
                map.put(key, new ArrayList<>());
            }
            map.get(key).add(word);
        }
        for(List<String> list : map.values()){
            ans[0]++;
            ans[1] = Math.max(ans[1], list.size());
        }
        return ans;
    }
    private String getKey(String word){
        char[] chars = word.toCharArray();
        int diff = chars[0] - 'a';
        for(int i = 0; i < chars.length; i++){
            chars[i] = (char)(chars[i] - diff);
            if(chars[i] < 'a'){
                chars[i] = (char)(chars[i] + 26);
            }
        }
        return new String(chars);

=======

        int n = words.length;
        int[] ans = new int[]{0, 0};
        int[] parent = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isConnected(words[i], words[j])) {
                    union(parent, size, i, j);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            ans[0] = Math.max(ans[0], size[i]);
            ans[1] = Math.max(ans[1], size[find(parent, i)]);
        }
        return ans;
    }
    private boolean isConnected(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }
        int n = s1.length();
        int offset = s2.charAt(0) - s1.charAt(0);
        for (int i = 1; i < n; i++) {
            if (s2.charAt(i) - s1.charAt(i) != offset) {
                return false;
            }
        }
        return true;
    }
    private int find(int[] parent, int x) {
        if (x != parent[x]) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int[] size, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            if (size[px] < size[py]) {
                int tmp = px;
                px = py;
                py = tmp;
            }
            parent[py] = px;
            size[px] += size[py];
        }

=======

        int maxGroup = 0;
        int maxGroupSize = 0;
        Map<String, List<String>> map = new HashMap<>();
        for (String word : words) {
            String key = getKey(word);
            map.putIfAbsent(key, new ArrayList<>());
            map.get(key).add(word);
        }
        for (String key : map.keySet()) {
            maxGroup++;
            maxGroupSize = Math.max(maxGroupSize, map.get(key).size());
        }
        return new int[]{maxGroup, maxGroupSize};
    }
    private String getKey(String word) {
        StringBuilder sb = new StringBuilder();
        int offset = word.charAt(0) - 'a';
        for (char c : word.toCharArray()) {
            sb.append((char) ((c - offset + 26) % 26 + 'a'));
        }
        return sb.toString();

=======

        int[] ans = new int[2];
        int maxGroup = 0;
        int maxGroupSize = 0;
        List<List<String>> groups = new ArrayList<List<String>>();
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            if (word.length() == 0) {
                continue;
            }
            int groupIndex = -1;
            for (int j = 0; j < groups.size(); j++) {
                List<String> group = groups.get(j);
                String groupWord = group.get(0);
                if (word.length() == groupWord.length()) {
                    int diff = word.charAt(0) - groupWord.charAt(0);
                    if (diff < 0) {
                        diff += 26;
                    }
                    boolean isGroup = true;
                    for (int k = 0; k < word.length(); k++) {
                        int groupChar = groupWord.charAt(k) + diff;
                        if (groupChar > 'z') {
                            groupChar -= 26;
                        }
                        if (word.charAt(k) != groupChar) {
                            isGroup = false;
                            break;
                        }
                    }
                    if (isGroup) {
                        groupIndex = j;
                        break;
                    }
                }
            }
            if (groupIndex == -1) {
                List<String> group = new ArrayList<String>();
                group.add(word);
                groups.add(group);
            } else {
                List<String> group = groups.get(groupIndex);
                group.add(word);
            }
        }
        for (int i = 0; i < groups.size(); i++) {
            List<String> group = groups.get(i);
            if (group.size() > maxGroupSize) {
                maxGroupSize = group.size();
            }
        }
        ans[0] = groups.size();
        ans[1] = maxGroupSize;
        return ans;

=======

        int[] ans = new int[2];
        int max = 0;
        int maxGroup = 0;
        for (int i = 0; i < words.length; i++) {
            int count = 0;
            boolean[] visited = new boolean[words.length];
            visited[i] = true;
            int group = 1;
            for (int j = 0; j < words.length; j++) {
                if (i == j) continue;
                if (visited[j]) continue;
                if (isConnected(words[i], words[j])) {
                    visited[j] = true;
                    group++;
                }
            }
            if (group > maxGroup) {
                maxGroup = group;
                max = 1;
            } else if (group == maxGroup) {
                max++;
            }
        }
        ans[0] = max;
        ans[1] = maxGroup;
        return ans;
    }
    
    private boolean isConnected(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.equals(s2)) return true;
        int[] count = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        for (int i = 0; i < count.length; i++) {
            if (count[i] != 0) return false;
        }
        return true;
