Synthesizing 10/10 solutions

=======

        long L = Long.parseLong(left);
        long R = Long.parseLong(right);
        int MAGIC = 100000;
        int ans = 0;

        // count odd length;
        for (int k = 1; k < MAGIC; ++k) {
            String s = Integer.toString(k);
            for (int i = s.length() - 2; i >= 0; --i)
                s += s.charAt(i);
            long v = Long.parseLong(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                ans++;
        }

        // count even length;
        for (int k = 1; k < MAGIC; ++k) {
            String s = Integer.toString(k);
            for (int i = s.length() - 1; i >= 0; --i)
                s += s.charAt(i);
            long v = Long.parseLong(s);
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v))
                ans++;
        }

        return ans;
    }

    public boolean isPalindrome(long x) {
        String s = Long.toString(x);
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int ans = 0;
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            for (int k = s.length() - 2; k >= 0; k--) {
                s += s.charAt(k);
            }
            long v = Long.parseLong(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindromic(v)) {
                ans++;
            }
        }
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            for (int k = s.length() - 1; k >= 0; k--) {
                s += s.charAt(k);
            }
            long v = Long.parseLong(s);
            v *= v;
            if (v > r) {
                break;
            }
            if (v >= l && isPalindromic(v)) {
                ans++;
            }
        }
        return ans;
    }

    public boolean isPalindromic(long x) {
        String s = Long.toString(x);
        int n = s.length();
        for (int i = 0; i < n / 2; i++) {
            if (s.charAt(i) != s.charAt(n - i - 1)) {
                return false;
            }
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int ans = 0;
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            String t = new StringBuilder(s).reverse().toString();
            long v = Long.parseLong(s + t);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ans++;
        }
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            String t = new StringBuilder(s).reverse().toString().substring(1);
            long v = Long.parseLong(s + t);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) ans++;
        }
        return ans;
    }
    boolean isPalindrome(long x) {
        String s = Long.toString(x);
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) return false;
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int res = 0;
        for (long i = 1; i < 100000; i++) {
            String s = Long.toString(i);
            for (int j = s.length() - 2; j >= 0; j--)
                s += s.charAt(j);
            long v = Long.parseLong(s);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) res++;
        }
        for (long i = 1; i < 100000; i++) {
            String s = Long.toString(i);
            for (int j = s.length() - 1; j >= 0; j--)
                s += s.charAt(j);
            long v = Long.parseLong(s);
            v *= v;
            if (v > r) break;
            if (v >= l && isPalindrome(v)) res++;
        }
        return res;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int res = 0;
        for (long i = 1; i < 100000; i++) {
            String s = String.valueOf(i);
            for (int j = s.length() - 2; j >= 0; j--) {
                s += s.charAt(j);
            }
            long t = Long.parseLong(s);
            t *= t;
            if (t > r) {
                break;
            }
            if (t >= l && isPalindrome(t)) {
                res++;
            }
        }
        for (long i = 1; i < 100000; i++) {
            String s = String.valueOf(i);
            for (int j = s.length() - 1; j >= 0; j--) {
                s += s.charAt(j);
            }
            long t = Long.parseLong(s);
            t *= t;
            if (t > r) {
                break;
            }
            if (t >= l && isPalindrome(t)) {
                res++;
            }
        }
        return res;
    }

    public boolean isPalindrome(long x) {
        String s = String.valueOf(x);
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int ans = 0;
        for (int i = 1; i <= 100000; i++) {
            String s = String.valueOf(i);
            String t = new StringBuilder(s).reverse().toString();
            long v = Long.parseLong(s + t);
            long vv = v * v;
            if (vv > r) break;
            if (vv >= l && isPalindrome(vv)) ans++;
        }
        for (int i = 1; i <= 100000; i++) {
            String s = String.valueOf(i);
            String t = new StringBuilder(s).deleteCharAt(s.length() - 1).reverse().toString();
            long v = Long.parseLong(s + t);
            long vv = v * v;
            if (vv > r) break;
            if (vv >= l && isPalindrome(vv)) ans++;
        }
        return ans;
    }
    private boolean isPalindrome(long x) {
        String s = String.valueOf(x);
        for (int i = 0, j = s.length() - 1; i < j; i++, j--) {
            if (s.charAt(i) != s.charAt(j)) return false;
        }
        return true;

=======

        long leftLong = Long.parseLong(left);
        long rightLong = Long.parseLong(right);
        int count = 0;
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            String sRev = new StringBuilder(s).reverse().toString();
            long p1 = Long.parseLong(s + sRev);
            long p2 = Long.parseLong(s + sRev.substring(1));
            if (p1 * p1 >= leftLong && p1 * p1 <= rightLong) {
                if (isPalindrome(p1 * p1)) {
                    count++;
                }
            }
            if (p2 * p2 >= leftLong && p2 * p2 <= rightLong) {
                if (isPalindrome(p2 * p2)) {
                    count++;
                }
            }
        }
        return count;
    }
    
    private boolean isPalindrome(long n) {
        String s = Long.toString(n);
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                return false;
            }
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        long ans = 0;
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            for (int j = s.length() - 2; j >= 0; j--) {
                s += s.charAt(j);
            }
            long n = Long.parseLong(s);
            long square = n * n;
            if (square > r) {
                break;
            }
            if (square >= l && isPalindrome(square)) {
                ans++;
            }
        }
        for (long i = 1; i <= 100000; i++) {
            String s = Long.toString(i);
            for (int j = s.length() - 1; j >= 0; j--) {
                s += s.charAt(j);
            }
            long n = Long.parseLong(s);
            long square = n * n;
            if (square > r) {
                break;
            }
            if (square >= l && isPalindrome(square)) {
                ans++;
            }
        }
        return (int) ans;
    }

    public boolean isPalindrome(long n) {
        String s = Long.toString(n);
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                return false;
            }
        }
        return true;

=======

        int count = 0;
        long start = Long.parseLong(left);
        long end = Long.parseLong(right);
        long max = (long) Math.sqrt(end);
        for (long i = 1; i <= max; i++) {
            String s = String.valueOf(i);
            String s2 = new StringBuilder(s).reverse().toString();
            long num = Long.parseLong(s + s2);
            long square = num * num;
            if (square > end) {
                break;
            }
            if (square >= start && isPalindrome(String.valueOf(square))) {
                count++;
            }
        }
        for (long i = 1; i <= max; i++) {
            String s = String.valueOf(i);
            String s2 = new StringBuilder(s.substring(0, s.length() - 1)).reverse().toString();
            long num = Long.parseLong(s + s2);
            long square = num * num;
            if (square > end) {
                break;
            }
            if (square >= start && isPalindrome(String.valueOf(square))) {
                count++;
            }
        }
        return count;
    }

    private boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;

=======

        long l = Long.parseLong(left);
        long r = Long.parseLong(right);
        int res = 0;
        for (long i = (long) Math.sqrt(l); i <= Math.sqrt(r); i++) {
            long p = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            if (p * p > r) continue;
            if (isPalindrome(p * p)) res++;
        }
        for (long i = (long) Math.sqrt(l); i <= Math.sqrt(r); i++) {
            long p = Long.parseLong(i + new StringBuilder().append(i).reverse().deleteCharAt(0).toString());
            if (p * p > r) continue;
            if (isPalindrome(p * p)) res++;
        }
        return res;
    }

    boolean isPalindrome(long x) {
        String s = String.valueOf(x);
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) return false;
        }
        return true;
