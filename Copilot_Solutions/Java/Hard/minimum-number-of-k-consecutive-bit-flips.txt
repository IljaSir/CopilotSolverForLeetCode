Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int[] diff = new int[n + 1];
        int ans = 0, revCnt = 0;
        for (int i = 0; i < n; ++i) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) {
                    return -1;
                }
                ++ans;
                ++revCnt;
                --diff[i + k];
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] diff = new int[n + 1];
        int res = 0, revCnt = 0;
        for (int i = 0; i < n; i++) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) return -1;
                res++;
                revCnt++;
                diff[i + k]--;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] diff = new int[n + 1];
        int res = 0, revCnt = 0;
        for (int i = 0; i < n; i++) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) {
                    return -1;
                }
                res++;
                revCnt++;
                diff[i + k]--;
            }
        }
        return res;

=======

        int res = 0;
        int n = nums.length;
        int[] diff = new int[n + 1];
        int revCnt = 0;
        for (int i = 0; i < n; i++) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) {
                    return -1;
                }
                res++;
                revCnt++;
                diff[i + k]--;
            }
        }
        return res;

=======

        int res = 0;
        int n = nums.length;
        int[] diff = new int[n];
        int revCnt = 0;
        for (int i = 0; i < n; i++) {
            revCnt += diff[i];
            if ((nums[i] + revCnt) % 2 == 0) {
                if (i + k > n) {
                    return -1;
                }
                res++;
                revCnt++;
                diff[i + k]--;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] flip = new int[n + 1];
        int res = 0;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur ^= flip[i];
            if (cur == nums[i]) {
                if (i + k > n) {
                    return -1;
                }
                res++;
                cur ^= 1;
                flip[i + k] ^= 1;
            }
        }
        return res;

=======

        int result = 0;
        int[] flip = new int[nums.length];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += flip[i];
            if ((sum + nums[i]) % 2 == 0) {
                if (i + k > nums.length) {
                    return -1;
                }
                result++;
                sum++;
                if (i + k < nums.length) {
                    flip[i + k]--;
                }
            }
        }
        return result;

=======

        int n = nums.length;
        int[] flips = new int[n];
        int flip = 0;
        int res = 0;
        for (int i = 0; i < n; ++i) {
            if (i >= k) flip ^= flips[i - k];
            if (flip == nums[i]) {
                if (i + k > n) return -1;
                ++res;
                flip ^= 1;
                flips[i] = 1;
            }
        }
        return res;

=======

        int count = 0;
        int n = nums.length;
        boolean[] flip = new boolean[n];
        for (int i = 0; i < n; i++) {
            if (i >= k) {
                flip[i] ^= flip[i - k];
            }
            if (flip[i] == true) {
                nums[i] ^= 1;
            }
            if (nums[i] == 0) {
                if (i + k > n) {
                    return -1;
                }
                count++;
                flip[i] ^= true;
            }
        }
        return count;
