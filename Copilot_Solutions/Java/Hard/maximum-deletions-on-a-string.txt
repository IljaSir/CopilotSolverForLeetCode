Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int l = 2; l <= n; l++) {
            for (int i = 0; i + l - 1 < n; i++) {
                int j = i + l - 1;
                dp[i][j] = 1 + dp[i + 1][j];
                for (int k = i + 1; k <= j; k++) {
                    if (s.charAt(i) == s.charAt(k)) {
                        dp[i][j] = Math.min(dp[i][j], dp[i + 1][k - 1] + dp[k][j]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                for (int k = i + 1; k <= j; k++) {
                    if (s.charAt(i) == s.charAt(k)) {
                        dp[i][j] = Math.max(dp[i][j], 1 + dp[i + 1][k - 1] + dp[k + 1][j]);
                    }
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int len = 1; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                dp[i][j] = 1 + dp[i + 1][j];
                for (int k = i + 1; k <= j; k++) {
                    if (s.charAt(i) == s.charAt(k)) {
                        dp[i][j] = Math.min(dp[i][j], dp[i + 1][k - 1] + dp[k][j]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return n - dp[0][n - 1];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j + i < n; j++) {
                if (s.charAt(j) == s.charAt(j + i)) {
                    dp[j][j + i] = dp[j + 1][j + i - 1];
                } else {
                    dp[j][j + i] = Math.min(dp[j + 1][j + i], dp[j][j + i - 1]) + 1;
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            dp[i] = 1 + dp[i - 1];
            for (int j = 0; j <= i - j - 1; j++) {
                if (s.substring(0, j + 1).equals(s.substring(i - j, i))) {
                    dp[i] = Math.min(dp[i], dp[i - j - 1] + dp[j + 1] - 1);
                }
            }
        }
        return dp[n];

=======

        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < n - i; j++) {
                dp[j][j + i] = Math.max(dp[j + 1][j + i], dp[j][j + i - 1]);
                if (s.charAt(j) == s.charAt(j + i)) {
                    dp[j][j + i] = Math.max(dp[j][j + i], dp[j + 1][j + i - 1] + 2);
                }
            }
        }
        return dp[0][n - 1];

=======

        int n = s.length();
        if (n == 1) return 0;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(s, 0, n-1, dp);
    }
    
    private int dfs(String s, int l, int r, int[][] dp) {
        if (l > r) return 0;
        if (dp[l][r] != -1) return dp[l][r];
        int res = 1 + dfs(s, l+1, r, dp);
        for (int i = l+1; i <= r; i++) {
            if (s.charAt(l) == s.charAt(i)) {
                res = Math.min(res, dfs(s, l+1, i-1, dp) + dfs(s, i, r, dp));
            }
        }
        dp[l][r] = res;
        return res;

=======

        int n = s.length();
        if (n <= 1) {
            return n;
        }
        int[][] dp = new int[n][n];
        for (int k = 1; k < n; k++) {
            for (int i = 0; i < n - k; i++) {
                int j = i + k;
                dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;
                for (int t = i + 1; t <= j; t++) {
                    if (s.charAt(i) == s.charAt(t)) {
                        dp[i][j] = Math.min(dp[i][j], dp[i + 1][t - 1] + dp[t][j]);
                    }
                }
            }
        }
        return dp[0][n - 1];

=======

        int[] counts = new int[26];
        for (char c : s.toCharArray()) {
            counts[c - 'a']++;
        }
        int max = 0;
        for (int count : counts) {
            if (count == 0) {
                continue;
            }
            max = Math.max(max, count);
        }
        return max;
