Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            left[i] = gcd(left[i - 1], nums[i]);
            right[n - 1 - i] = gcd(right[n - i], nums[n - 1 - i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (gcd(left[i], right[i + 1]) == 1) {
                return i + 1;
            }
        }
        return -1;
    }

    private int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i=1;i<n;i++){
            left[i] = gcd(left[i-1],nums[i]);
        }
        for(int i=n-2;i>=0;i--){
            right[i] = gcd(right[i+1],nums[i]);
        }
        for(int i=1;i<n-1;i++){
            if(gcd(left[i-1],right[i+1])==1){
                return i;
            }
        }
        return -1;
    }
    int gcd(int a, int b){
        if(a==0){
            return b;
        }
        return gcd(b%a,a);

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for(int i=1; i<n; i++) {
            left[i] = gcd(left[i-1], nums[i]);
        }
        for(int i=n-2; i>=0; i--) {
            right[i] = gcd(right[i+1], nums[i]);
        }
        for(int i=0; i<n-1; i++) {
            if(gcd(left[i], right[i+1]) == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        right[n-1] = nums[n-1];
        for (int i = 1; i < n; i++) {
            left[i] = gcd(left[i-1], nums[i]);
            right[n-i-1] = gcd(right[n-i], nums[n-i-1]);
        }
        for (int i = 0; i < n; i++) {
            int l = i > 0 ? left[i-1] : 1;
            int r = i < n - 1 ? right[i+1] : 1;
            if (gcd(l, r) == 1) return i;
        }
        return -1;

=======

        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        prefix[0] = nums[0];
        suffix[n - 1] = nums[n - 1];
        for (int i = 1; i < n; i++) {
            prefix[i] = gcd(prefix[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = gcd(suffix[i + 1], nums[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (gcd(prefix[i], suffix[i + 1]) == 1) {
                return i + 1;
            }
        }
        return -1;
    }
    private int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = gcd(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = gcd(right[i + 1], nums[i]);
        }
        for (int i = 0; i < n; i++) {
            int l = i == 0 ? 0 : left[i - 1];
            int r = i == n - 1 ? 0 : right[i + 1];
            if (gcd(l, r) == 1) {
                return i;
            }
        }
        return -1;
    }

    private int gcd(int a, int b) {
        if (a < b) {
            return gcd(b, a);
        }
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        int n = nums.length;
        int[] g = new int[n];
        g[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            g[i] = gcd(g[i + 1], nums[i]);
        }
        int l = 1;
        for (int i = 0; i < n - 1; i++) {
            l = lcm(l, nums[i]);
            if (l > 1000000) {
                return -1;
            }
            if (g[i + 1] == 1) {
                return i;
            }
        }
        return -1;
    }

    private int gcd(int a, int b) {
        while (b > 0) {
            int t = b;
            b = a % b;
            a = t;
        }
        return a;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        left[0] = nums[0];
        for (int i = 1; i < n; ++i) {
            left[i] = gcd(left[i - 1], nums[i]);
        }
        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; --i) {
            right[i] = gcd(right[i + 1], nums[i]);
        }
        for (int i = 0; i < n - 1; ++i) {
            int leftVal = i > 0 ? left[i - 1] : 1;
            int rightVal = i < n - 2 ? right[i + 1] : 1;
            if (gcd(leftVal, rightVal) == 1) {
                return i;
            }
        }
        return -1;

=======

        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];

        left[0] = nums[0];
        for (int i = 1; i < n; i++) {
            left[i] = gcd(left[i - 1], nums[i]);
        }

        right[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right[i] = gcd(right[i + 1], nums[i]);
        }

        for (int i = 0; i < n - 1; i++) {
            if (gcd(left[i], right[i + 1]) == 1) {
                return i;
            }
        }

        return -1;
    }

    private int gcd(int a, int b) {
        while (b != 0) {
            int tmp = a;
            a = b;
            b = tmp % b;
        }

        return a;

=======

        int n = nums.length;
        int[] gcd = new int[n];
        int[] gcd2 = new int[n];
        gcd[n - 1] = nums[n - 1];
        gcd2[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            gcd[i] = gcd(gcd[i + 1], nums[i]);
            gcd2[i] = gcd(gcd2[i + 1], gcd[i]);
        }
        int[] gcd3 = new int[n];
        gcd3[0] = nums[0];
        for (int i = 1; i < n; i++) {
            gcd3[i] = gcd(gcd3[i - 1], nums[i]);
        }
        int[] gcd4 = new int[n];
        gcd4[0] = nums[0];
        for (int i = 1; i < n; i++) {
            gcd4[i] = gcd(gcd4[i - 1], gcd3[i]);
        }
        if (gcd3[n - 1] == 1) {
            return n - 2;
        }
        for (int i = 1; i < n - 1; i++) {
            if (gcd4[i - 1] == 1 && gcd2[i + 1] == 1) {
                return i - 1;
            }
        }
        if (gcd4[n - 2] == 1) {
            return n - 2;
        }
        return -1;
    }
    
    private int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);
