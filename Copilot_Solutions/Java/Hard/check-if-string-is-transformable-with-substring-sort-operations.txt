Synthesizing 10/10 solutions

=======

        int n = s.length();
        List<Integer>[] pos = new List[10];
        for (int i = 0; i < 10; i++) {
            pos[i] = new ArrayList<>();
        }
        for (int i = 0; i < n; i++) {
            pos[s.charAt(i) - '0'].add(i);
        }
        for (int i = 0; i < n; i++) {
            int d = t.charAt(i) - '0';
            if (pos[d].isEmpty()) {
                return false;
            }
            for (int j = 0; j < d; j++) {
                if (!pos[j].isEmpty() && pos[j].get(0) < pos[d].get(0)) {
                    return false;
                }
            }
            pos[d].remove(0);
        }
        return true;

=======

        int n = s.length();
        int[] pos = new int[10];
        for (int i = 0; i < n; i++) {
            pos[s.charAt(i) - '0'] = i;
        }
        for (int i = 0; i < n; i++) {
            int d = t.charAt(i) - '0';
            for (int j = 0; j < d; j++) {
                if (pos[j] < pos[d]) {
                    return false;
                }
            }
            pos[d]++;
        }
        return true;

=======

        int[][] pos = new int[10][s.length()];
        for (int i = 0; i < s.length(); i++) {
            pos[s.charAt(i) - '0'][i] = 1;
        }
        for (int i = 1; i < 10; i++) {
            for (int j = 0; j < s.length(); j++) {
                pos[i][j] += pos[i - 1][j];
            }
        }
        for (int i = 0; i < t.length(); i++) {
            int d = t.charAt(i) - '0';
            if (pos[d][i] == 0) {
                return false;
            }
            for (int j = 0; j < d; j++) {
                if (pos[j][i] < pos[j][s.length() - 1]) {
                    return false;
                }
            }
        }
        return true;

=======

        int[] pos = new int[10];
        Arrays.fill(pos, -1);
        for (int i = 0; i < s.length(); i++) {
            pos[s.charAt(i) - '0'] = i;
        }
        for (int i = 0; i < t.length(); i++) {
            int num = t.charAt(i) - '0';
            if (pos[num] == -1) {
                return false;
            }
            for (int j = 0; j < num; j++) {
                if (pos[j] != -1 && pos[j] < pos[num]) {
                    return false;
                }
            }
            pos[num] = -1;
        }
        return true;

=======

        int n = s.length();
        List<Integer>[] pos = new List[10];
        for (int i = 0; i < 10; ++i) {
            pos[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < n; ++i) {
            pos[s.charAt(i) - '0'].add(i);
        }
        for (int i = 0; i < n; ++i) {
            int d = t.charAt(i) - '0';
            if (pos[d].isEmpty()) {
                return false;
            }
            int idx = pos[d].get(0);
            for (int j = 0; j < d; ++j) {
                if (!pos[j].isEmpty() && pos[j].get(0) < idx) {
                    return false;
                }
            }
            pos[d].remove(0);
        }
        return true;

=======

        int n = s.length();
        List<Deque<Integer>> pos = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            pos.add(new LinkedList<>());
        }
        for (int i = 0; i < n; i++) {
            pos.get(s.charAt(i) - '0').add(i);
        }
        for (int i = 0; i < n; i++) {
            int d = t.charAt(i) - '0';
            if (pos.get(d).isEmpty()) {
                return false;
            }
            for (int j = 0; j < d; j++) {
                if (!pos.get(j).isEmpty() && pos.get(j).peekFirst() < pos.get(d).peekFirst()) {
                    return false;
                }
            }
            pos.get(d).pollFirst();
        }
        return true;

=======

        int n = s.length();
        List<Deque<Integer>> pos = new ArrayList<>();
        for (int i = 0; i < 10; ++i)
            pos.add(new LinkedList<Integer>());
        for (int i = 0; i < n; ++i)
            pos.get(s.charAt(i) - '0').offer(i);
        for (char c: t.toCharArray()) {
            int d = c - '0';
            if (pos.get(d).isEmpty())
                return false;
            for (int i = 0; i < d; ++i) {
                if (!pos.get(i).isEmpty() && pos.get(i).peek() < pos.get(d).peek())
                    return false;
            }
            pos.get(d).poll();
        }
        return true;

=======

        if (s.length() != t.length()) return false;
        int[] pos = new int[10];
        Arrays.fill(pos, -1);
        for (int i = 0; i < s.length(); i++) {
            pos[s.charAt(i) - '0'] = i;
        }
        for (int i = 0; i < t.length(); i++) {
            int c = t.charAt(i) - '0';
            if (pos[c] == -1) return false;
            for (int j = 0; j < c; j++) {
                if (pos[j] > pos[c]) return false;
            }
            pos[c] = -1;
        }
        return true;

=======

        int[] nums = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            nums[i] = s.charAt(i) - '0';
        }
        int[] pos = new int[10];
        for (int i = 0; i < s.length(); i++) {
            pos[nums[i]] = i;
        }
        for (int i = 0; i < t.length(); i++) {
            int num = t.charAt(i) - '0';
            if (pos[num] == s.length()) {
                return false;
            }
            for (int j = 0; j < num; j++) {
                if (pos[j] < pos[num]) {
                    return false;
                }
            }
            pos[num]++;
        }
        return true;

=======

        if (s == null || t == null || s.length() != t.length()) {
            return false;
        }
        List<Deque<Integer>> indexList = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            indexList.add(new LinkedList<>());
        }
        for (int i = 0; i < s.length(); i++) {
            indexList.get(s.charAt(i) - '0').add(i);
        }
        for (int i = 0; i < t.length(); i++) {
            int digit = t.charAt(i) - '0';
            if (indexList.get(digit).isEmpty()) {
                return false;
            }
            for (int j = 0; j < digit; j++) {
                if (!indexList.get(j).isEmpty() && indexList.get(j).peek() < indexList.get(digit).peek()) {
                    return false;
                }
            }
            indexList.get(digit).poll();
        }
        return true;
