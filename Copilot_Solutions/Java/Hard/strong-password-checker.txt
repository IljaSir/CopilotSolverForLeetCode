Synthesizing 10/10 solutions

=======

        int missingType = 3;
        if (password.matches(".*[a-z].*")) missingType--;
        if (password.matches(".*[A-Z].*")) missingType--;
        if (password.matches(".*[0-9].*")) missingType--;
        
        int res = 0;
        if (password.length() < 6) {
            res = missingType + Math.max(0, 6 - password.length() - missingType);
        } else {
            int overLen = Math.max(password.length() - 20, 0), leftOver = 0;
            res += overLen;
            
            // one pass to delete all repeating characters
            for (int i = 0, j = 0; i < password.length(); i = j) {
                while (j < password.length() && password.charAt(i) == password.charAt(j)) j++;
                int len = j - i;
                if (len >= 3) {
                    res += len / 3;
                    if (len % 3 == 0) leftOver++; // can be used to replace one missing type
                }
            }
            
            // if we still have overLen, then we must replace some characters
            if (overLen > 0) {
                int needReplace = overLen;
                // try to use leftOver first
                if (leftOver > 0) {
                    int replaceByLeftOver = Math.min(needReplace, leftOver);
                    needReplace -= replaceByLeftOver;
                    res -= replaceByLeftOver;
                }
                // then replace the rest
                res += needReplace;
            }
            
            // if we still don't have enough types
            if (missingType > 0) {
                res += Math.max(missingType, overLen);
            }
        }
        
        return res;

=======

        int n = password.length();
        int missingType = 3;
        if (password.matches(".*[a-z].*")) missingType--;
        if (password.matches(".*[A-Z].*")) missingType--;
        if (password.matches(".*[0-9].*")) missingType--;
        
        int one = 0, two = 0;
        for (int i = 2, j = 0; i < n; i++, j++) {
            if (password.charAt(i) == password.charAt(i-1) && password.charAt(i-1) == password.charAt(i-2)) {
                int len = 2;
                while (i < n && password.charAt(i) == password.charAt(i-1)) {
                    i++;
                    len++;
                }
                if (len % 3 == 0) one++;
                if (len % 3 == 1) two++;
            }
        }
        
        if (n < 6) {
            return Math.max(missingType, 6 - n);
        } else if (n <= 20) {
            return Math.max(missingType, one);
        } else {
            int delete = n - 20;
            one -= Math.min(delete, one);
            two -= Math.min(Math.max(delete - one, 0), two * 2) / 2;
            three -= Math.max(delete - one - two * 2, 0) / 3;
            return delete + Math.max(missingType, one + two + three);
        }

=======

        int n = password.length();
        int missingType = 3;
        if (password.matches(".*[a-z].*")) missingType--;
        if (password.matches(".*[A-Z].*")) missingType--;
        if (password.matches(".*[0-9].*")) missingType--;
        
        int totalReplace = 0, oneReplace = 0, twoReplace = 0;
        for (int i = 2, length = 2, start = 0; i < n; i++) {
            if (password.charAt(i) == password.charAt(i - 1) && password.charAt(i - 1) == password.charAt(i - 2)) {
                if (length == 2) start = i - 2;
                length++;
            } else {
                if (length >= 3) {
                    totalReplace += length / 3;
                    if (length % 3 == 0) oneReplace++;
                    else if (length % 3 == 1) twoReplace++;
                }
                length = 2;
            }
        }
        
        if (length >= 3) {
            totalReplace += length / 3;
            if (length % 3 == 0) oneReplace++;
            else if (length % 3 == 1) twoReplace++;
        }
        
        if (n < 6) {
            return Math.max(missingType, 6 - n);
        } else if (n <= 20) {
            return Math.max(missingType, totalReplace);
        } else {
            int delete = n - 20;
            totalReplace -= Math.min(delete, oneReplace);
            totalReplace -= Math.min(Math.max(delete - oneReplace, 0), twoReplace * 2) / 2;
            totalReplace -= Math.max(delete - oneReplace - 2 * twoReplace, 0) / 3;
            return delete + Math.max(missingType, totalReplace);
        }

=======

        int n = password.length();
        int missingType = 3;
        if (password.matches(".*[a-z].*")) missingType--;
        if (password.matches(".*[A-Z].*")) missingType--;
        if (password.matches(".*[0-9].*")) missingType--;
        int res = 0;
        int one = 0, two = 0;
        for (int i = 2, len = 2; i < n; i++, len++) {
            if (password.charAt(i) == password.charAt(i - 1) && password.charAt(i - 1) == password.charAt(i - 2)) {
                if (len % 3 == 0) {
                    one++;
                    len = 0;
                }
            } else {
                len = 0;
            }
        }
        int totalReplace = 0;
        for (int i = 0, len = 0; i < n; i++, len++) {
            if (i < n - 1 && password.charAt(i) == password.charAt(i + 1)) {
                len++;
                if (len % 3 == 0) {
                    two++;
                    totalReplace++;
                    len = 0;
                }
            } else {
                len = 0;
            }
        }
        if (n < 6) {
            res = Math.max(missingType, 6 - n);
        } else if (n <= 20) {
            res = Math.max(missingType, one);
        } else {
            int delete = n - 20;
            res += delete;
            res += Math.max(missingType, one - delete);
            res += Math.max(0, two - delete);
        }
        return res;

=======

        int n = password.length();
        int missingType = 3;
        if (password.matches(".*[a-z].*")) {
            missingType--;
        }
        if (password.matches(".*[A-Z].*")) {
            missingType--;
        }
        if (password.matches(".*[0-9].*")) {
            missingType--;
        }
        int change = 0;
        int one = 0;
        int two = 0;
        for (int i = 2, length = 0; i < n; i++) {
            if (password.charAt(i) == password.charAt(i - 1) && password.charAt(i - 1) == password.charAt(i - 2)) {
                length++;
            } else {
                if (length > 0) {
                    change += length / 3;
                    if (length % 3 == 0) {
                        one++;
                    } else if (length % 3 == 1) {
                        two++;
                    }
                }
                length = 0;
            }
        }
        if (n < 6) {
            return Math.max(missingType, 6 - n);
        } else if (n <= 20) {
            return Math.max(missingType, change);
        } else {
            int delete = n - 20;
            change -= Math.min(delete, one);
            change -= Math.min(Math.max(delete - one, 0), two * 2) / 2;
            change -= Math.max(delete - one - 2 * two, 0) / 3;
            return delete + Math.max(missingType, change);
        }

=======

        int len = password.length();
        int ans = 0;
        int lower = 1;
        int upper = 1;
        int digit = 1;
        int[] arr = new int[len];
        for (int i = 0; i < len; i++) {
            char c = password.charAt(i);
            if (Character.isLowerCase(c)) {
                lower = 0;
            } else if (Character.isUpperCase(c)) {
                upper = 0;
            } else if (Character.isDigit(c)) {
                digit = 0;
            }
            if (i < len - 2 && password.charAt(i) == password.charAt(i + 1) && password.charAt(i) == password.charAt(i + 2)) {
                int j = i + 2;
                while (j < len && password.charAt(i) == password.charAt(j)) {
                    j++;
                }
                arr[i] = j - i;
                i = j - 1;
            }
        }
        int missing = lower + upper + digit;
        if (len < 6) {
            ans += missing + Math.max(0, 6 - (len + missing));
        } else {
            int over = Math.max(len - 20, 0);
            int left = 0;
            ans += over;
            for (int k = 1; k < 3; k++) {
                for (int i = 0; i < len && over > 0; i++) {
                    if (arr[i] < 3 || arr[i] % 3 != (k - 1)) {
                        continue;
                    }
                    arr[i] -= Math.min(over, k);
                    over -= k;
                }
            }
            for (int i = 0; i < len; i++) {
                if (arr[i] >= 3 && over > 0) {
                    int need = arr[i] - 2;
                    arr[i] -= over;
                    over -= need;
                }
                if (arr[i] >= 3) {
                    left += arr[i] / 3;
                }
            }
            ans += Math.max(missing, left);
        }
        return ans;

=======

        int n = password.length();
        int[] arr = new int[n];
        int l = 0, u = 0, d = 0;
        for (int i = 0; i < n; i++) {
            char c = password.charAt(i);
            if (Character.isLowerCase(c)) {
                l = 1;
            } else if (Character.isUpperCase(c)) {
                u = 1;
            } else if (Character.isDigit(c)) {
                d = 1;
            }
        }
        int missing = 3 - (l + u + d);
        if (n < 6) {
            return Math.max(missing, 6 - n);
        }
        int change = 0;
        int one = 0, two = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            while (j < n && password.charAt(j) == password.charAt(i)) {
                j++;
            }
            int len = j - i;
            if (len >= 3) {
                arr[i] = len;
                change += len / 3;
                if (len % 3 == 0) {
                    one++;
                } else if (len % 3 == 1) {
                    two++;
                }
            }
            i = j - 1;
        }
        if (n <= 20) {
            return Math.max(missing, change);
        }
        int del = n - 20;
        change -= Math.min(del, one);
        change -= Math.min(Math.max(del - one, 0), two * 2) / 2;
        change -= Math.max(del - one - 2 * two, 0) / 3;
        return del + Math.max(missing, change);

=======

        int n = password.length();
        int[] lower = new int[1];
        int[] upper = new int[1];
        int[] digit = new int[1];
        int missingType = 3;
        for (char c : password.toCharArray()) {
            if (Character.isLowerCase(c)) {
                lower[0] = 1;
            }
            if (Character.isUpperCase(c)) {
                upper[0] = 1;
            }
            if (Character.isDigit(c)) {
                digit[0] = 1;
            }
            missingType -= lower[0] + upper[0] + digit[0];
        }
        if (n < 6) {
            return Math.max(6 - n, missingType);
        }
        int overLen = Math.max(n - 20, 0);
        int leftOver = 0;
        int[] one = new int[1];
        int[] two = new int[1];
        for (int i = 0, j = 0; j < n; j++) {
            if (password.charAt(i) == password.charAt(j)) {
                if (j - i == 2) {
                    one[0]++;
                }
                if (j - i == 3) {
                    two[0]++;
                }
            } else {
                i = j;
            }
        }
        int needDelete = overLen;
        needDelete -= Math.min(one[0], overLen);
        needDelete -= Math.min(two[0] * 2, overLen - needDelete) / 2;
        needDelete -= Math.min((overLen - needDelete) / 3, one[0] + two[0]);
        int needReplace = Math.max(overLen - needDelete, 0);
        return overLen + Math.max(missingType, needReplace);

=======

        int n = password.length();
        boolean hasUpper = false;
        boolean hasLower = false;
        boolean hasDigit = false;
        int[] count = new int[3];
        int total = 0;
        int i = 0;
        while (i < n) {
            char c = password.charAt(i);
            if (Character.isUpperCase(c)) {
                hasUpper = true;
            } else if (Character.isLowerCase(c)) {
                hasLower = true;
            } else if (Character.isDigit(c)) {
                hasDigit = true;
            }
            int j = i;
            while (i < n && password.charAt(i) == c) {
                i++;
            }
            int len = i - j;
            if (len > 2) {
                int k = len / 3;
                total += k;
                count[k - 1]++;
            }
        }
        int missing = (hasUpper ? 0 : 1) + (hasLower ? 0 : 1) + (hasDigit ? 0 : 1);
        if (n < 6) {
            return Math.max(missing, 6 - n);
        } else if (n <= 20) {
            return Math.max(missing, total);
        }
        int delete = n - 20;
        total -= Math.min(delete, count[0]);
        total -= Math.min(Math.max(delete - count[0], 0), count[1] * 2) / 2;
        total -= Math.min(Math.max(delete - count[0] - 2 * count[1], 0), count[2] * 3) / 3;
        return delete + Math.max(missing, total);

=======

        int len = password.length();
        int ans = 0;
        int[] arr = new int[3];
        int[] rep = new int[len];
        int i = 0;
        int cnt = 0;
        while (i < len) {
            char c = password.charAt(i);
            if (Character.isLowerCase(c)) {
                arr[0] = 1;
            } else if (Character.isUpperCase(c)) {
                arr[1] = 1;
            } else if (Character.isDigit(c)) {
                arr[2] = 1;
            }
            cnt++;
            if (i == len - 1 || password.charAt(i + 1) != c) {
                ans += cnt / 3;
                rep[i] = cnt;
                cnt = 0;
            }
            i++;
        }
        int missing = 3 - (arr[0] + arr[1] + arr[2]);
        if (len < 6) {
            return Math.max(missing, 6 - len);
        } else if (len <= 20) {
            return Math.max(missing, ans);
        } else {
            int del = len - 20;
            ans -= Math.min(del, ans);
            for (int j = 0; j < len && del > 0; j++) {
                if (rep[j] >= 3 && rep[j] % 3 == 0) {
                    rep[j] -= Math.min(del, 2);
                    del -= 2;
                }
            }
            for (int j = 0; j < len && del > 0; j++) {
                if (rep[j] >= 3 && rep[j] % 3 == 1) {
                    rep[j] -= Math.min(del, 1);
                    del -= 1;
                }
            }
            for (int j = 0; j < len && del > 0; j++) {
                if (rep[j] >= 3 && rep[j] % 3 == 2) {
                    rep[j] -= Math.min(del, 1);
                    del -= 1;
                }
            }
            ans += del;
            return del + Math.max(missing, ans);
        }
