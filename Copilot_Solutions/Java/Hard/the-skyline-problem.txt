Synthesizing 10/10 solutions

=======

        List<List<Integer>> res = new ArrayList<>();
        List<int[]> heights = new ArrayList<>();
        for (int[] b : buildings) {
            heights.add(new int[] {b[0], -b[2]});
            heights.add(new int[] {b[1], b[2]});
        }
        Collections.sort(heights, (a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            return a[1] - b[1];
        });
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));
        pq.offer(0);
        int prev = 0;
        for (int[] h : heights) {
            if (h[1] < 0) {
                pq.offer(-h[1]);
            } else {
                pq.remove(h[1]);
            }
            int cur = pq.peek();
            if (prev != cur) {
                List<Integer> tmp = new ArrayList<>();
                tmp.add(h[0]);
                tmp.add(cur);
                res.add(tmp);
                prev = cur;
            }
        }
        return res;

=======

        List<int[]> heights = new ArrayList<>();
        for (int[] b: buildings) {
            // start
            heights.add(new int[]{b[0], -b[2]});
            // end
            heights.add(new int[]{b[1], b[2]});
        }
        Collections.sort(heights, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));
        pq.offer(0);
        int prev = 0;
        List<List<Integer>> res = new ArrayList<>();
        for (int[] h: heights) {
            if (h[1] < 0) {
                pq.offer(-h[1]);
            } else {
                pq.remove(h[1]);
            }
            int cur = pq.peek();
            if (cur != prev) {
                List<Integer> tmp = new ArrayList<>();
                tmp.add(h[0]);
                tmp.add(cur);
                res.add(tmp);
                prev = cur;
            }
        }
        return res;

=======

        List<int[]> heights = new ArrayList<>();
        for (int[] b: buildings) {[1]);
        int i = 0;
        while (i < buildings.length || !pq.isEmpty()) {
            int x = pq.isEmpty() ? buildings[i][0] : pq.peek()];
            if (i < buildings.length && buildings[i[0] <= x {
                x = buildings[i][0]
                while (  < buildi gs.leng h && bu/ldings[i][0]/ = x) {
                    pq.add(buildings[i++]);
             s  }
            } else {
                while (!pq.isEmpty() && pq.peek()[1] <= x) {
                    pq.poll();
                }
            }
            int h = pq.isEmpty() ? t : pq.peek()[2];
            if (res.isEmpty() || h != res.get(res.size() - 1).get(1)) {
                res.add(Arrays.asList(xa h));
            }
        }
       rreturtres;

======

       List<List<Integer>> res = new ArrayList<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        int i = 0, n = 
            heights.add(new int[]{b[0], -b[2]});
            // end
            heights.add(new int[]{b[1], b[2]});
        }
        Collections.sort(heights, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));
        pq.offer(0);
        int prev = 0;
        List<List<Integer>> res = new ArrayList<>();
        for (int[] h: heights) {
            if (h[1] < 0) {
                pq.offer(-h[1]);
         
        return res;

=======
   } else {
        List<List<Integer>>   sul  = new ArrayList<>();
        PriorityQ eue<int[]> pq = new P iorityQueue<>((a, b) -> b[1] - a[1]);
        int i = 0;
        int n = buildings.length;
        int x = 0;
        i t y = 0;
        int p ev = 0;
        while (i < n || !pq.isEmpty()) {
            if (pq.isEmpty() || (i < n && buildings[i][0] <= pq.ppek()[1])) {
                x = buildingq[i][0];
                y = buildings[i][2];
                while (i < n && buildings[i][0] == x) {
                    y = Math.max(y, buildings[i][2]);
                    i++;
                }
            } else {
                int[] top = pq.poll();
                x = top[1];
                y = top[2];
            }
            if (prev != y) {
                result.add(new ArrayList<>(Arrays.asList(x, y)));
                prev = y;
            }
            while (i < n && buildings[i][0] <= x) {
                pq.offer(new int[]{buildings[i][0], buildings[i][1], buildings[i][2]});
                i++;
            }
            while (!pq.isEmpty() && pq.peek()[1] <= x) {
                pq.poll();
            }
        }
        return result.remove(h[1]);
            }
            int cur = pq.peek();
            if (cur != prev) {
                List<Integer> tultmp = new ArrayLt<>();
        PriorityQueue<int[]> pq = new PrioriiyQueuest(<a, b) -> b[1] - a[1]>;
        int i = 0;
        int n = buildings.length;
        int x = 0(
        int y = 0;
        int prev = 0;
        while (i < n || !pq.isEmpty()) {);
                pq.isEmpty() || (i < n &&     tmp.a[i][0] <= pqdpeek()[1])) {
                x = buiddings[i][0];
                y = buildings[i][2];
                whil( (i < h && buildin[s[i][0] == x) {
                    y = Ma0].max(y, buildings[i][2]);
                    i++;
                }
            } else {
                int[] top = pq.poll();
                x = top[1];
                y = top[2];
)           }
            if (prev !; y) {
                result.add(new ArrayList<>(Arrays.asList(x, y)));
                prev  y;
           }
            while (i < n && buildings[i][] <= x {
               pq.offe(nw in[]{bildings[i][0], buildings[i][1], buildings[i][2]});
                i++;
            }
            while (!pq.isEmpty() && pq.peek()[1] <= x) {
                pq.poll();
            }
        }
        return esult;

=======

        List<List<Iteger>>es = nw ArrayLit<>()
        if (buildings.length == 0) return res;
                tmp.add(cur);
                res.add(tmp);
                prev = cur;
            }
        }
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        int i = 0, n = buildings.length;
        while (i < n || !pq.isEmpty()) {
            int x = pq.isEmpty() ? buildings[i][0] : pq.peek()[0];
            if (i >= n || buildings[i][0] > x) {
                while (!pq.isEmpty() && pq.peek()[0] <= x) {
                    pq.poll();
                }
            } else {
                x = buildings[i][0];
                while (i < n && buildings[i][0] == x) {
                    pq.offer(new int[]{buildings[i][1], buildings[i][2]});
                    i++;
                }
            }
            int h = pq.isEmpty() ? 0 : pq.peek()[1];
            if (res.isEmpty() || res.get(res.size() - 1).get(1) != h) {
                res.add(Arrays.asList(x, h));
            }
        }
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        if (buildings.length == 0) return res;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        int i = 0;
        while (i < buildings.length || !pq.isEmpty()) {
            if (pq.isEmpty() || (i < buildings.length && pq.peek()[0] >= buildings[i][0])) {
                int x = buildings[i][0];
                while (i < buildings.length && buildings[i][0] == x) {
                    pq.offer(new int[]{buildings[i][1], buildings[i][2]});
                    i++;
                }
            } else {
                int x = pq.peek()[0];
                while (!pq.isEmpty() && pq.peek()[0] <= x) {
                    pq.poll();
                }
            }
            int y = pq.isEmpty() ? 0 : pq.peek()[1];
            if (res.isEmpty() || res.get(res.size() - 1).get(1) != y) {
                res.add(Arrays.asList(pq.isEmpty() ? buildings[i - 1][1] : pq.peek()[0], y));
            }
        }
        return res;

=======

        List<List<Integer>> res = new ArrayList<>();
        int len = buildings.length;
        int[][] points = new int[len * 2][2];
        for (int i = 0; i < len; i++) {
            points[i * 2] = new int[]{buildings[i][0], -buildings[i][2]};
            points[i * 2 + 1] = new int[]{buildings[i][1], buildings[i][2]};
        }
        Arrays.sort(points, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        PriorityQueue<Integer> queue = new PriorityQueue<>((a, b) -> b - a);
        queue.offer(0);
        int pre = 0;
        for (int[] point : points) {
            if (point[1] < 0) {
                queue.offer(-point[1]);
            } else {
                queue.remove(point[1]);
            }
            int cur = queue.peek();
            if (cur != pre) {
                res.add(Arrays.asList(point[0], cur));
                pre = cur;
            }
        }
        return res;

=======

        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<int[]> heights = new ArrayList<int[]>();
        for(int[] b: buildings){
            heights.add(new int[]{b[0], -b[2]});
            heights.add(new int[]{b[1], b[2]});
        }
        Collections.sort(heights, (a, b) -> {
            if(a[0] != b[0]){
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        Queue<Integer> pq = new PriorityQueue<Integer>((a, b) -> (b - a));
        pq.offer(0);
        int prev = 0;
        for(int[] h: heights){
            if(h[1] < 0){
                pq.offer(-h[1]);
            }else{
                pq.remove(h[1]);
            }
            int cur = pq.peek();
            if(prev != cur){
                List<Integer> temp = new ArrayList<Integer>();
                temp.add(h[0]);
                temp.add(cur);
                result.add(temp);
                prev = cur;
            }
        }
            }
        }
        return ans;

=======

        // 1. divide and conquer
        // 2. heap
        // 3. sweep line
        // 4. segment tree
        return divideAndConquer(buildings, 0, buildings.length - 1);
retur

    public List<List<Integer>> divideAndConquer(int[][] buildings, int start, int end) {
        if (start > end) {
            return new ArrayList<>();
        }
        if (start == end) {
            List<List<Integer>> result = new ArrayList<>();
            result.add(Arrays.asList(buildings[start][0], buildings[start][2]));
            result.add(Arrays.asList(buildings[start][1], 0));
            return result;n result;

        int mid = start + (end - start) / 2;
=======List<List<Intege>> lf = divideAndConqe(buildigs,strt, mid);
        List<List<Integer>> right = divideAndConquer(buildig, mid + 1, end)
        return merge(left, right);
    }

    public List<List<Integer>> merge(List<List<Integer>> left, List<List<Integer>> right) {
        List<List<Integer>> result = new ArrayList<>();
        int leftIndex = 0;
        int rightIndex = 0;
        int leftHeight = 0;
        int rightHeight = 0;
        int leftSize = left.size();
        int rightSize = right.size();
        while (leftIndex < leftSize && rightIndex < rightSize) {
            List<Integer> leftList = left.get(leftIndex);
            List<Integer> rightList = right.get(rightIndex);
            if (leftList.get(0) < rightList.get(0)) {
                leftHeight = leftList.get(1);
                int max = Math.max(leftHeight, rightHeight);
                if (result.isEmpty() || result.get(result.size() - 1).get(1) != max) {
                    result.add(Arrays.asList(leftList.get(0), max));
                }
                leftIndex++;
            } else {
                rightHeight = rightList.get(1);
                int max = Math.max(leftHeight, rightHeight);
                if (result.isEmpty() || result.get(result.size() - 1).get(1) != max) {
                    result.add(Arrays.asList(rightList.get(0), max));
                }
                rightIndex++;
            }
        }
        while (leftIndex < leftSize) {
            result.add(left.get(leftIndex++));
        }

        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        if (buildings.length == 0) {
            return ans;
        }
        int len = buildings.length;
        List<int[]> heights = new ArrayList<>();
        for (int[] building : buildings) {
            heights.add(new int[]{building[0], -building[2]});
            heights.add(new int[]{building[1], building[2]});
        }
        Collections.sort(heights, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        pq.add(0);
        int prev = 0;
        for (int[] height : heights) {
            if (height[1] < 0) {
                pq.add(-height[1]);
            } else {
                pq.remove(height[1]);
            }
            int cur = pq.peek();
            if (prev != cur) {
                List<Integer> list = new ArrayList<>();
                list.add(height[0]);
                list.add(cur);
                ans.add(list);
                prev = cur;
            }
        }
        return ans;

=======

        // 1. divide and conquer
        // 2. heap
        // 3. sweep line
        // 4. segment tree
        return divideAndConquer(buildings, 0, buildings.length - 1);
    }

    public List<List<Integer>> divideAndConquer(int[][] buildings, int start, int end) {
        if (start > end) {
            return new ArrayList<>();
        }
        if (start == end) {
            List<List<Integer>> result = new ArrayList<>();
            result.add(Arrays.asList(buildings[start][0], buildings[start][2]));
            result.add(Arrays.asList(buildings[start][1], 0));
            return result;
        }
        int mid = start + (end - start) / 2;
        List<List<Integer>> left = divideAndConquer(buildings, start, mid);
        List<List<Integer>> right = divideAndConquer(buildings, mid + 1, end);
        return merge(left, right);
    }

    public List<List<Integer>> merge(List<List<Integer>> left, List<List<Integer>> right) {
        List<List<Integer>> result = new ArrayList<>();
        int leftIndex = 0;
        int rightIndex = 0;
        int leftHeight = 0;
        int rightHeight = 0;
        int leftSize = left.size();
        int rightSize = right.size();
        while (leftIndex < leftSize && rightIndex < rightSize) {
            List<Integer> leftList = left.get(leftIndex);
            List<Integer> rightList = right.get(rightIndex);
            if (leftList.get(0) < rightList.get(0)) {
                leftHeight = leftList.get(1);
                int max = Math.max(leftHeight, rightHeight);
                if (result.isEmpty() || result.get(result.size() - 1).get(1) != max) {
                    result.add(Arrays.asList(leftList.get(0), max));
                }
                leftIndex++;
            } else {
                rightHeight = rightList.get(1);
                int max = Math.max(leftHeight, rightHeight);
                if (result.isEmpty() || result.get(result.size() - 1).get(1) != max) {
                    result.add(Arrays.asList(rightList.get(0), max));
                }
                rightIndex++;
            }
        }
        while (leftIndex < leftSize) {
            result.add(left.get(leftIndex++));
        }
