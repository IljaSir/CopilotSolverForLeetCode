Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            if (i > 0) {
                dp[i] += Math.max(0, max);
            }
            max = Math.max(max, dp[i]);
            if (i >= k) {
                max = Math.max(max, dp[i - k]);
            }
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = nums[0];
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i];
            int j = i - 1;
            while (j >= 0 && i - j <= k) {
                dp[i] = Math.max(dp[i], dp[j] + nums[i]);
                j--;
            }
            max = Math.max(dp[i], max);
        }
        return max;

=======

        int max = nums[0];
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[i] = nums[i];
            for (int j = Math.max(0, i - k); j < i; j++) {
                dp[i] = Math.max(dp[i], dp[j] + nums[i]);
            }
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int res = Integer.MIN_VALUE;
        Deque<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            if (!q.isEmpty()) {
                dp[i] = Math.max(dp[i], dp[q.peekFirst()] + nums[i]);
            }
            res = Math.max(res, dp[i]);
            while (!q.isEmpty() && dp[q.peekLast()] <= dp[i]) {
                q.pollLast();
            }
            q.offerLast(i);
            if (q.peekFirst() == i - k) {
                q.pollFirst();
            }
        }
        return res;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = Integer.MIN_VALUE;
        Deque<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            if (!q.isEmpty()) {
                dp[i] = Math.max(dp[i], nums[i] + q.peek());
            }
            max = Math.max(max, dp[i]);
            while (!q.isEmpty() && q.peekLast() < dp[i]) {
                q.pollLast();
            }
            q.offer(dp[i]);
            if (i >= k && q.peek() == dp[i - k]) {
                q.poll();
            }
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = Integer.MIN_VALUE;
        Deque<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i];
            if (!q.isEmpty()) {
                dp[i] += q.peekFirst();
            }
            max = Math.max(max, dp[i]);
            while (!q.isEmpty() && q.peekLast() < dp[i]) {
                q.pollLast();
            }
            q.offerLast(dp[i]);
            if (i >= k && q.peekFirst() == dp[i - k]) {
                q.pollFirst();
            }
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = Integer.MIN_VALUE;
        Deque<Integer> dq = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            dp[i] = nums[i] + (dq.isEmpty() ? 0 : dq.peekFirst());
            max = Math.max(max, dp[i]);
            while (!dq.isEmpty() && dq.peekLast() < dp[i]) {
                dq.pollLast();
            }
            dq.offerLast(dp[i]);
            if (i >= k && dq.peekFirst() == dp[i - k]) {
                dq.pollFirst();
            }
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        int max = dp[0];
        Deque<Integer> deque = new LinkedList<>();
        deque.addLast(0);
        for (int i = 1; i < n; i++) {
            dp[i] = nums[i] + (deque.isEmpty() ? 0 : dp[deque.peekFirst()]);
            max = Math.max(max, dp[i]);
            while (!deque.isEmpty() && dp[i] > dp[deque.peekLast()]) {
                deque.pollLast();
            }
            deque.addLast(i);
            if (i - deque.peekFirst() >= k) {
                deque.pollFirst();
            }
        }
        return max;

=======

        int n = nums.length;
        int[] dp = new int[n];
        int max = nums[0];
        dp[0] = nums[0];
        Deque<Integer> q = new ArrayDeque<>();
        q.add(0);
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i], nums[i]);
            if (q.size() > 0) {
                dp[i] = Math.max(dp[i], dp[q.getFirst()] + nums[i]);
            }
            while (q.size() > 0 && dp[q.getLast()] <= dp[i]) {
                q.removeLast();
            }
            q.add(i);
            if (i - q.getFirst() >= k) {
                q.removeFirst();
            }
            max = Math.max(max, dp[i]);
        }
        return max;

=======

        int max = nums[0];
        Deque<Integer> deque = new ArrayDeque<>();
        for (int i = 0; i < nums.length; i++) {
            if (!deque.isEmpty() && i - deque.peekFirst() > k) {
                deque.pollFirst();
            }
            if (!deque.isEmpty()) {
                nums[i] += nums[deque.peekFirst()];
            }
            max = Math.max(max, nums[i]);
            while (!deque.isEmpty() && nums[i] > nums[deque.peekLast()]) {
                deque.pollLast();
            }
            deque.offerLast(i);
        }
        return max;
