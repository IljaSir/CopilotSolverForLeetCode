Synthesizing 9/10 solutions

=======

        int n = balls.length;
        long total = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= balls[i]; j++) {
                total *= j;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += balls[i];
        }
        int half = sum / 2;
        int[] dp = new int[half + 1];
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = half; j >= 0; j--) {
                for (int k = 1; k <= balls[i] && k + j <= half; k++) {
                    dp[j + k] += dp[j];
                }
            }
        }
        long cnt = 0;
        for (int i = 0; i <= half; i++) {
            cnt += (long) dp[i] * dp[half - i];
        }
        return (double) cnt / total;

=======

        int n = balls.length;
        int total = 0;
        for (int i = 0; i < n; i++) {
            total += balls[i];
        }
        int[] a = new int[n];
        int[] b = new int[n];
        double[] dp = new double[1 << n];
        dp[0] = 1;
        for (int i = 0; i < (1 << n); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    sum += balls[j];
                }
            }
            if (sum == total / 2) {
                for (int j = 0; j < n; j++) {
                    if ((i & (1 << j)) == 0) {
                        a[j] = balls[j] - Integer.bitCount(i & ((1 << j) - 1));
                    }
                }
            }
            if (sum == total) {
                for (int j = 0; j < n; j++) {
                    if ((i & (1 << j)) == 0) {
                        b[j] = balls[j] - Integer.bitCount(i & ((1 << j) - 1));
                    }
                }
            }
        }
        int[] count = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    sum += a[j];
                }
            }
            count[i] = sum;
        }
        double[] dp2 = new double[1 << n];
        dp2[0] = 1;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) == 0) {
                    dp2[i | (1 << j)] += dp2[i] * a[j] / (total / 2 - count[i]);
                }
            }
        }
        double ans = 0;
        for (int i = 0; i <

=======

        int n = balls.length;
        int m = balls.length / 2;
        int[] a = new int[m];
        int[] b = new int[m];
        for (int i = 0; i < m; ++i) {
            a[i] = balls[i];
            b[i] = balls[i + m];
        }
        int[] c = new int[m];
        int[] d = new int[m];
        int[] e = new int[m];
        int[] f = new int[m];
        int[] g = new int[m];
        int[] h = new int[m];
        int[] i = new int[m];
        int[] j = new int[m];
        int[] k = new int[m];
        int[] l = new int[m];
        int[] p = new int[m];
        int[] q = new int[m];
        int[] r = new int[m];
        int[] s = new int[m];
        int[] t = new int[m];
        int[] u = new int[m];
        int[] v = new int[m];
        int[] w = new int[m];
        int[] x = new int[m];
        int[] y = new int[m];
        int[] z = new int[m];
        int[] aa = new int[m];
        int[] ab = new int[m];
        int[] ac = new int[m];
        int[] ad = new int[m];
        int[] ae = new int[m];
        int[] af = new int[m];
        int[] ag = new int[m];
        int[] ah = new int[m];
        int[] ai = new int[m];
        int[] aj = new int[m];
        int[] ak = new int[m];
        int[] al = new int[m];
        int[] am = new int[m];
        int[] an = new int[m];
        int[] ao = new int[m];
        int[] ap = new int[m];
        int[] aq = new int[m];
        int[] ar = new int[m];
        int[] as = new int[m];
        int[] at = new int[m];
        int[] au = new int[m];
        int[] av = new int[m];
        int[] aw = new int[m];
        int[] ax = new int[m];
        int[] ay = new int[m];
        int[] az = new int[m];
        int[]

=======

        int n = balls.length;
        int m = balls[0];
        for (int i = 1; i < n; i++) {
            m = Math.max(m, balls[i]);
        }
        long[] fac = new long[n * m + 1];
        fac[0] = 1;
        for (int i = 1; i < fac.length; i++) {
            fac[i] = fac[i - 1] * i;
        }
        long[] inv = new long[n * m + 1];
        inv[n * m] = pow(fac[n * m], mod - 2);
        for (int i = n * m - 1; i >= 0; i--) {
            inv[i] = inv[i + 1] * (i + 1) % mod;
        }
        long[] ways = new long[n * m + 1];
        ways[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = n * m; j >= balls[i]; j--) {
                ways[j] = (ways[j] + ways[j - balls[i]]) % mod;
            }
        }
        long[] cnt = new long[n * m + 1];
        for (int i = 0; i <= n * m; i++) {
            cnt[i] = fac[n * m] * inv[i] % mod * inv[n * m - i] % mod * ways[i] % mod;
        }
        long[][] dp = new long[n + 1][n * m + 1];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= n * m; j++) {
                for (int k = 0; k <= balls[i] && k <= j; k++) {
                    dp[i + 1][j] = (dp[i + 1][j] + dp[i][j - k] * cnt[k]) % mod;
                }
            }
        }
        long total = 0;
        for (int i = 0; i <= n * m; i++) {
            total = (total + dp[n][i]) % mod;
        }
        long ans = dp[n][n *

=======

        int n = balls.length;
        int m = 0;
        for (int ball : balls) {
            m += ball;
        }
        int[][] dp = new int[m + 1][m + 1];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = m; j >= 0; j--) {
                for (int k = m; k >= 0; k--) {
                    for (int l = 1; l <= balls[i]; l++) {
                        if (j + l <= m && k + balls[i] - l <= m) {
                            dp[j + l][k + balls[i] - l] += dp[j][k];
                        }
                    }
                }
            }
        }
        int total = 1;
        for (int i = 2; i <= m; i++) {
            total *= i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= balls[i]; j++) {
                total /= j;
            }
        }
        int same = 0;
        for (int i = 0; i <= m / 2; i++) {
            same += dp[i][i];
        }
        return (double) same / total;

=======

        int n = balls.length;
        int total = 0;
        for (int ball : balls) total += ball;
        int[] dp = new int[total + 1];
        dp[0] = 1;
        for (int ball : balls) {
            for (int i = total; i >= ball; i--) {
                dp[i] += dp[i - ball];
            }
        }
        int half = total / 2;
        double totalWays = dp[half];
        int[] dp2 = new int[half + 1];
        dp2[0] = 1;
        for (int ball : balls) {
            for (int i = half; i >= ball; i--) {
                dp2[i] += dp2[i - ball];
            }
        }
        double sameWays = 0;
        for (int i = 0; i <= half; i++) {
            sameWays += dp2[i] * dp[half - i];
        }
        return sameWays / totalWays;

=======

        int n = balls.length;
        int m = balls.length / 2;
        int[] cnt = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    cnt[i] += balls[j];
                }
            }
        }
        int[][] dp = new int[1 << n][m + 1];
        dp[0][0] = 1;
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j <= m; j++) {
                for (int k = 0; k < n; k++) {
                    if (((i >> k) & 1) == 0) {
                        dp[i | (1 << k)][j + 1] += dp[i][j];
                    }
                }
            }
        }
        int[] s = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 0) {
                    s[i | (1 << j)] = s[i] + 1;
                }
            }
        }
        int[] f = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    f[i] = f[i ^ (1 << j)] + balls[j];
                }
            }
        }
        int[] g = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    g[i] = g[i ^ (1 << j)] + 1;
                }
            }
        }
        int[] all = new int[1 << n];
        for (int i = 0; i < (

=======

        int n = balls.length;
        int m = balls.length / 2;
        long[][] dp = new long[1 << n][m + 1];
        dp[0][0] = 1;
        long total = 1;
        for (int i = 0; i < n; i++) {
            total *= C(1 + i, balls[i]);
            for (int j = (1 << i) - 1; j >= 0; j--) {
                for (int k = 0; k <= m; k++) {
                    for (int l = 1; l <= balls[i]; l++) {
                        if (k + l > m) {
                            break;
                        }
                        dp[j | (1 << i)][k + l] += dp[j][k];
                    }
                }
            }
        }
        long res = 0;
        for (int i = 0; i < (1 << n); i++) {
            if (Integer.bitCount(i) != n / 2) {
                continue;
            }
            int j = ((1 << n) - 1) ^ i;
            int[] a = new int[n];
            int[] b = new int[n];
            for (int k = 0; k < n; k++) {
                if ((i & (1 << k)) != 0) {
                    a[k] = balls[k];
                } else {
                    b[k] = balls[k];
                }
            }
            if (check(a) && check(b)) {
                res += dp[i][m] * dp[j][m];
            }
        }
        return (double) res / total;
    }

    public boolean check(int[] a) {
        int[] cnt = new int[7];
        for (int i = 0; i < a.length; i++) {
            cnt[a[i]]++;
        }
        int res = 0;
        for (int i = 0; i < cnt.length; i++) {
            if (cnt[i] > 0) {
                res++;
            }
        }
        return res <= a.length / 2;

=======

        int n = balls.length;
        int m = balls.length / 2;
        int sum = 0;
        for (int x : balls) {
            sum += x;
        }
        long[] f = new long[sum + 1];
        f[0] = 1;
        for (int i = 1; i <= sum; i++) {
            f[i] = f[i - 1] * i;
        }
        long[][] c = new long[sum + 1][sum + 1];
        for (int i = 0; i <= sum; i++) {
            for (int j = 0; j <= sum; j++) {
                if (j == 0 || j == i) {
                    c[i][j] = 1;
                } else {
                    c[i][j] = c[i - 1][j - 1] + c[i - 1][j];
                }
            }
        }
        int[] cnt = new int[1 << n];
        for (int i = 0; i < (1 << n); i++) {
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    cnt[i] += balls[j];
                }
            }
        }
        long[][][] dp = new long[m + 1][m + 1][1 << n];
        dp[0][0][0] = 1;
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                for (int k = 0; k < (1 << n); k++) {
                    if (dp[i][j][k] == 0) {
                        continue;
                    }
                    for (int p = 0; p < n; p++) {
                        if ((k & (1 << p)) != 0) {
                            continue;
                        }
                        if (balls[p] > 0) {
                            if (i < m) {
                                dp[i + 1][j][k | (1 << p)] += dp[i][j][k] * c[cnt[k]][balls[p]] * c[sum - cnt[k]][balls[p] - 1];
                            }
                            if (j < m) {
