Synthesizing 10/10 solutions

=======

        int[][] grid = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                grid[i][j] = 1;
            }
        }
        int[][] directions = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int days = cells.length;
        for (int i = days - 1; i >= 0; i--) {
            int r = cells[i][0] - 1;
            int c = cells[i][1] - 1;
            grid[r][c] = 0;
            if (r == 0) {
                if (dfs(r, c, grid, directions)) {
                    return i;
                }
            }
        }
        return 0;
    }
    
    private boolean dfs(int r, int c, int[][] grid, int[][] directions) {
        int row = grid.length;
        int col = grid[0].length;
        if (r == row - 1) {
            return true;
        }
        for (int[] d : directions) {
            int nr = r + d[0];
            int nc = c + d[1];
            if (nr >= 0 && nr < row && nc >= 0 && nc < col && grid[nr][nc] == 0) {
                if (dfs(nr, nc, grid, directions)) {
                    return true;
                }
            }
        }
        return false;

=======

        int[][] grid = new int[row][col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                grid[i][j] = 0;
            }
        }
        int[] dx = {0, 1, 0, -1};
        int[] dy = {1, 0, -1, 0};
        int ans = 0;
        for (int i = 0; i < cells.length; i++) {
            int x = cells[i][0] - 1;
            int y = cells[i][1] - 1;
            grid[x][y] = 1;
            if (x == 0) {
                grid[x][y] = 2;
            }
            for (int j = 0; j < 4; j++) {
                int tx = x + dx[j];
                int ty = y + dy[j];
                if (tx < 0 || tx >= row || ty < 0 || ty >= col) {
                    continue;
                }
                if (grid[tx][ty] == 2) {
                    grid[x][y] = 2;
                }
            }
            if (grid[x][y] == 2) {
                for (int j = 0; j < 4; j++) {
                    int tx = x + dx[j];
                    int ty = y + dy[j];
                    if (tx < 0 || tx >= row || ty < 0 || ty >= col) {
                        continue;
                    }
                    if (grid[tx][ty] == 2) {
                        continue;
                    }
                    if (grid[tx][ty] == 1) {
                        grid[tx][ty] = 2;
                    }
                }
            }
            boolean flag = true;
            for (int j = 0; j < col; j++) {
                if (grid[row - 1][j] != 2) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                ans = i + 1;
            }
        }
        return ans;

=======

        int[][] grid = new int[row][col];
        for (int i = 0; i < cells.length; i++) {
            grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            if (isConnected(grid)) {
                return cells.length - i - 1;
            }
        }
        return 0;
    }
    private boolean isConnected(int[][] grid) {
        int row = grid.length;
        int col = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[row][col];
        for (int i = 0; i < row; i++) {
            if (grid[i][0] == 0) {
                queue.offer(new int[]{i, 0});
                visited[i][0] = true;
            }
        }
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[1] == col - 1) {
                return true;
            }
            for (int[] dir: new int[][]{{-1, 0}, {1, 0}, {0, 1}, {0, -1}}) {
                int nextX = cur[0] + dir[0];
                int nextY = cur[1] + dir[1];
                if (nextX >= 0 && nextX < row && nextY >= 0 && nextY < col && !visited[nextX][nextY] && grid[nextX][nextY] == 0) {
                    queue.offer(new int[]{nextX, nextY});
                    visited[nextX][nextY] = true;
                }
            }
        }
        return false;

=======

        int[] parent = new int[row * col];
        int[] size = new int[row * col];
        for (int i = 0; i < row * col; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        int[][] mat = new int[row][col];
        int[][] dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int ans = 0;
        for (int i = cells.length - 1; i >= 0; i--) {
            int r = cells[i][0] - 1;
            int c = cells[i][1] - 1;
            mat[r][c] = 1;
            for (int[] d : dir) {
                int nr = r + d[0];
                int nc = c + d[1];
                if (nr >= 0 && nr < row && nc >= 0 && nc < col && mat[nr][nc] == 1) {
                    int p1 = find(r * col + c, parent);
                    int p2 = find(nr * col + nc, parent);
                    if (p1 != p2) {
                        parent[p1] = p2;
                        size[p2] += size[p1];
                    }
                }
            }
            if (size[find(0, parent)] == row * col) {
                ans = i;
                break;
            }
        }
        return ans;
    }
    private int find(int x, int[] parent) {
        if (parent[x] == x) {
            return x;
        }
        return parent[x] = find(parent[x], parent);

=======

        int[][] grid = new int[row][col];
        int[] dr = new int[]{0, 0, 1, -1};
        int[] dc = new int[]{1, -1, 0, 0};
        int left = 0, right = cells.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            for (int i = 0; i <= mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            }
            if (dfs(grid, 0, 0)) {
                left = mid + 1;
            } else {
                right = mid;
            }
            for (int i = 0; i <= mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 0;
            }
        }
        return left;
    }
    public boolean dfs(int[][] grid, int r, int c) {
        if (r == grid.length - 1) {
            return true;
        }
        grid[r][c] = 2;
        int[] dr = new int[]{0, 0, 1, -1};
        int[] dc = new int[]{1, -1, 0, 0};
        for (int i = 0; i < 4; i++) {
            int nr = r + dr[i];
            int nc = c + dc[i];
            if (nr < 0 || nr >= grid.length || nc < 0 || nc >= grid[0].length || grid[nr][nc] != 0) {
                continue;
            }
            if (dfs(grid, nr, nc)) {
                return true;
            }
        }
        return false;

=======

        int n = cells.length;
        int l = 1, r = n;
        while (l < r) {
            int m = (l + r + 1) / 2;
            if (check(row, col, cells, m)) l = m;
            else r = m - 1;
        }
        return l;
    }
    int[][] d = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    boolean check(int row, int col, int[][] cells, int m) {
        boolean[][] vis = new boolean[row + 1][col + 1];
        for (int i = 0; i < m; i++) {
            vis[cells[i][0]][cells[i][1]] = true;
        }
        Queue<int[]> q = new LinkedList<>();
        for (int i = 1; i <= col; i++) {
            if (!vis[1][i]) {
                q.offer(new int[]{1, i});
                vis[1][i] = true;
            }
        }
        while (!q.isEmpty()) {
            int[] t = q.poll();
            if (t[0] == row) return true;
            for (int[] dd : d) {
                int x = t[0] + dd[0], y = t[1] + dd[1];
                if (x >= 1 && x <= row && y >= 1 && y <= col && !vis[x][y]) {
                    q.offer(new int[]{x, y});
                    vis[x][y] = true;
                }
            }
        }
        return false;

=======

        int left = 1, right = cells.length;
        int[][] grid = new int[row][col];
        while (left < right) {
            int mid = (left + right + 1) / 2;
            for (int i = 0; i < row; i++) {
                Arrays.fill(grid[i], 0);
            }
            for (int i = 0; i < mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            }
            if (dfs(grid, 0, 0)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean dfs(int[][] grid, int i, int j) {
        int row = grid.length, col = grid[0].length;
        if (i == row - 1) {
            return true;
        }
        if (i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == 1) {
            return false;
        }
        grid[i][j] = 1;
        boolean res = dfs(grid, i + 1, j) || dfs(grid, i - 1, j) || dfs(grid, i, j + 1) || dfs(grid, i, j - 1);
        grid[i][j] = 0;
        return res;

=======

        int[][] grid = new int[row][col];
        int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int l = 0, r = cells.length, mid = l + (r - l) / 2, res = 0;
        while (l <= r) {
            mid = l + (r - l) / 2;
            for (int i = 0; i < row; i++) {
                for (int j = 0; j < col; j++) {
                    grid[i][j] = 0;
                }
            }
            for (int i = 0; i < mid; i++) {
                grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            }
            boolean[][] visited = new boolean[row][col];
            Queue<int[]> queue = new LinkedList<>();
            for (int i = 0; i < row; i++) {
                if (grid[i][0] == 0) {
                    queue.add(new int[]{i, 0});
                    visited[i][0] = true;
                }
            }
            while (!queue.isEmpty()) {
                int[] cur = queue.poll();
                for (int[] d : dir) {
                    int x = cur[0] + d[0], y = cur[1] + d[1];
                    if (x >= 0 && x < row && y >= 0 && y < col && !visited[x][y] && grid[x][y] == 0) {
                        queue.add(new int[]{x, y});
                        visited[x][y] = true;
                    }
                }
            }
            boolean canCross = false;
            for (int i = 0; i < row; i++) {
                if (visited[i][col - 1]) {
                    canCross = true;
                    break;
                }
            }
            if (canCross) {
                res = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return res;

=======

        int[][] grid = new int[row][col];
        int[][] dir = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int res = 0;
        for (int i = 0; i < cells.length; i++) {
            grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
            if (cells[i][0] == 1) {
                dfs(grid, cells[i][0] - 1, cells[i][1] - 1, dir);
            }
            if (grid[row - 1][col - 1] == 2) {
                res = i + 1;
            }
        }
        return res;
    }
    
    public void dfs(int[][] grid, int r, int c, int[][] dir) {
        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length || grid[r][c] != 0) {
            return;
        }
        grid[r][c] = 2;
        for (int i = 0; i < 4; i++) {
            dfs(grid, r + dir[i][0], c + dir[i][1], dir);
        }

=======

        // union find
        int n = row * col;
        UnionFind uf = new UnionFind(n + 2);
        int[] dx = new int[] {1, -1, 0, 0};
        int[] dy = new int[] {0, 0, 1, -1};
        int top = n;
        int bottom = n + 1;
        for (int i = 0; i < col; i++) {
            uf.union(top, i);
            uf.union(bottom, n - col + i);
        }
        for (int i = cells.length - 1; i >= 0; i--) {
            int x = cells[i][0] - 1;
            int y = cells[i][1] - 1;
            int pos = x * col + y;
            for (int j = 0; j < 4; j++) {
                int nx = x + dx[j];
                int ny = y + dy[j];
                int npos = nx * col + ny;
                if (nx < 0 || nx >= row || ny < 0 || ny >= col) {
                    continue;
                }
                if (uf.find(npos) == uf.find(bottom)) {
                    uf.union(pos, bottom);
                }
            }
            if (uf.find(top) == uf.find(bottom)) {
                return i;
            }
        }
        return -1;
    }
}
