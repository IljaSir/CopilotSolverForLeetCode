Synthesizing 10/10 solutions

=======

        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
        }
        int min = Integer.MAX_VALUE;
        for (int[] edge : edges) {
            int i = edge[0], j = edge[1];
            graph[i][j] = 0;
            graph[j][i] = 0;
            min = Math.min(min, dfs(graph, i, j, 1, new boolean[n]));
            graph[i][j] = 1;
            graph[j][i] = 1;
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }
    private int dfs(int[][] graph, int i, int j, int len, boolean[] visited) {
        if (i == j) {
            return len;
        }
        visited[i] = true;
        int min = Integer.MAX_VALUE;
        for (int k = 0; k < graph.length; k++) {
            if (graph[i][k] == 1 && !visited[k]) {
                min = Math.min(min, dfs(graph, k, j, len + 1, visited));
            }
        }
        visited[i] = false;
        return min;

=======

        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            graph[edge[0]][edge[1]] = 1;
            graph[edge[1]][edge[0]] = 1;
        }
        int minCycle = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int[] dist = new int[n];
            Arrays.fill(dist, Integer.MAX_VALUE);
            dist[i] = 0;
            Queue<Integer> queue = new LinkedList<>();
            queue.offer(i);
            while (!queue.isEmpty()) {
                int cur = queue.poll();
                for (int j = 0; j < n; j++) {
                    if (graph[cur][j] == 1) {
                        if (dist[j] == Integer.MAX_VALUE) {
                            queue.offer(j);
                            dist[j] = dist[cur] + 1;
                        } else if (dist[j] >= dist[cur]) {
                            minCycle = Math.min(minCycle, dist[j] + dist[cur] + 1);
                        }
                    }
                }
            }
        }
        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;

=======

        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            Set<Integer> visited = new HashSet<>();
            Queue<Integer> queue = new LinkedList<>();
            queue.add(i);
            int level = 0;
            while (!queue.isEmpty()) {
                int size = queue.size();
                for (int j = 0; j < size; j++) {
                    int node = queue.poll();
                    if (visited.contains(node)) {
                        min = Math.min(min, level);
                        break;
                    }
                    visited.add(node);
                    for (int neighbor : graph.get(node)) {
                        queue.add(neighbor);
                    }
                }
                level++;
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            Queue<Integer> queue = new LinkedList<>();
            queue.offer(i);
            int[] dist = new int[n];
            Arrays.fill(dist, -1);
            dist[i] = 0;
            while (!queue.isEmpty()) {
                int cur = queue.poll();
                for (int nei : graph.get(cur)) {
                    if (dist[nei] == -1) {
                        dist[nei] = dist[cur] + 1;
                        queue.offer(nei);
                    } else if (dist[nei] >= dist[cur]) {
                        res = Math.min(res, dist[nei] + dist[cur] + 1);
                    }
                }
            }
        }
        return res == Integer.MAX_VALUE ? -1 : res;

=======

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        int minCycle = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            minCycle = Math.min(minCycle, bfs(graph, i, n));
        }
        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;
    }

    private int bfs(Map<Integer, List<Integer>> graph, int start, int n) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        int[] path = new int[n];
        Arrays.fill(path, -1);
        path[start] = 0;
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            for (int next : graph.get(cur)) {
                if (path[next] == -1) {
                    path[next] = path[cur] + 1;
                    queue.offer(next);
                } else if (next != start && path[next] >= path[cur]) {
                    return path[cur] + path[next] + 1;
                }
            }
        }
        return Integer.MAX_VALUE;

=======

        int[][] graph = new int[n][n];
        for (int i = 0; i < edges.length; i++) {
            graph[edges[i][0]][edges[i][1]] = 1;
            graph[edges[i][1]][edges[i][0]] = 1;
        }
        int res = n + 1;
        for (int i = 0; i < n; i++) {
            res = Math.min(res, dfs(i, i, graph, 0, new boolean[n]));
        }
        return res == n + 1 ? -1 : res;
    }
    private int dfs(int start, int cur, int[][] graph, int len, boolean[] visited) {
        if (cur == start && len > 1) {
            return len;
        }
        visited[cur] = true;
        int res = graph.length + 1;
        for (int i = 0; i < graph.length; i++) {
            if (!visited[i] && graph[cur][i] == 1) {
                res = Math.min(res, dfs(start, i, graph, len + 1, visited));
            }
        }
        visited[cur] = false;
        return res;

=======

        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        int[] dist = new int[n];
        int[] parent = new int[n];
        Arrays.fill(parent, -1);
        int minCycle = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (parent[i] == -1) {
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                parent[i] = i;
                dist[i] = 0;
                while (!queue.isEmpty()) {
                    int curr = queue.poll();
                    for (int next : graph[curr]) {
                        if (parent[next] == -1) {
                            parent[next] = curr;
                            dist[next] = dist[curr] + 1;
                            queue.offer(next);
                        } else if (parent[curr] != next) {
                            minCycle = Math.min(minCycle, dist[curr] + dist[next] + 1);
                        }
                    }
                }
            }
        }
        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;

=======

        int[][] adj = new int[n][n];
        for (int[] edge : edges) {
            adj[edge[0]][edge[1]] = 1;
            adj[edge[1]][edge[0]] = 1;
        }
        int minCycle = Integer.MAX_VALUE;
        for (int[] edge : edges) {
            int[] visited = new int[n];
            int start = edge[0];
            int end = edge[1];
            Queue<int[]> queue = new LinkedList<>();
            queue.add(new int[]{start, 0});
            while (!queue.isEmpty()) {
                int[] node = queue.poll();
                if (node[0] == end) {
                    minCycle = Math.min(minCycle, node[1]);
                    break;
                }
                visited[node[0]] = 1;
                for (int i = 0; i < n; i++) {
                    if (adj[node[0]][i] == 1 && visited[i] == 0) {
                        queue.add(new int[]{i, node[1] + 1});
                    }
                }
            }
        }
        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;

=======

        int[] dist = new int[n];
        int[] parent = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(parent, -1);
        dist[0] = 0;
        for (int i = 0; i < n; i++) {
            for (int[] edge : edges) {
                int u = edge[0];
                int v = edge[1];
                if (dist[u] != Integer.MAX_VALUE && dist[u] + 1 < dist[v]) {
                    dist[v] = dist[u] + 1;
                    parent[v] = u;
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            if (dist[u] != Integer.MAX_VALUE && dist[u] + 1 < dist[v]) {
                int cycleLength = dist[u] + 1 + dist[v];
                min = Math.min(cycleLength, min);
            }
        }
        return min == Integer.MAX_VALUE ? -1 : min;

=======

        List<Integer>[] graph = new List[n];
        int[] path = new int[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        int minCycle = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            minCycle = Math.min(minCycle, dfs(i, i, graph, path, new HashSet<>()));
        }
        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;
    }
    
    private int dfs(int start, int end, List<Integer>[] graph, int[] path, Set<Integer> visited) {
        if (visited.contains(end)) {
            if (end == start) {
                int min = Integer.MAX_VALUE;
                for (int i = 0; i < path[end]; i++) {
                    min = Math.min(min, graph[path[i]].size());
                }
                return path[end] + min;
            }
            return Integer.MAX_VALUE;
        }
        visited.add(end);
        path[end] = start;
        int min = Integer.MAX_VALUE;
        for (int nei : graph[end]) {
            min = Math.min(min, dfs(start, nei, graph, path, visited));
        }
        visited.remove(end);
        return min;
