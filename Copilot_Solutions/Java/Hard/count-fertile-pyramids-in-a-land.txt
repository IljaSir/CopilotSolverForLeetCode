Synthesizing 10/10 solutions

=======

        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    count += countPyramid(i, j, grid);
                    count += countInversePyramid(i, j, grid);
                }
            }
        }
        return count;
    }

    private int countPyramid(int i, int j, int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;
        for (int h = 1; i + h < m && j - h >= 0 && j + h < n; h++) {
            if (grid[i + h][j - h] == 1 && grid[i + h][j + h] == 1) {
                count++;
            } else {
                break;
            }
        }
        return count;
    }

    private int countInversePyramid(int i, int j, int[][] grid) {
        int count = 0;
        for (int h = 1; i - h >= 0 && j - h >= 0 && j + h < grid[0].length; h++) {
            if (grid[i - h][j - h] == 1 && grid[i - h][j + h] == 1) {
                count++;
            } else {
                break;
            }
        }
        return count;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] left = new int[m][n];
        int[][] right = new int[m][n];
        int[][] up = new int[m][n];
        int[][] down = new int[m][n];
        int[][] leftUp = new int[m][n];
        int[][] rightUp = new int[m][n];
        int[][] leftDown = new int[m][n];
        int[][] rightDown = new int[m][n];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                if (j == 0) {
                    left[i][j] = 1;
                } else {
                    left[i][j] = left[i][j - 1] + 1;
                }
                if (i == 0) {
                    up[i][j] = 1;
                } else {
                    up[i][j] = up[i - 1][j] + 1;
                }
                if (i == 0 || j == 0) {
                    leftUp[i][j] = 1;
                } else {
                    leftUp[i][j] = leftUp[i - 1][j - 1] + 1;
                }
                if (i == 0 || j == n - 1) {
                    rightUp[i][j] = 1;
                } else {
                    rightUp[i][j] = rightUp[i - 1][j + 1] + 1;
                }
            }
        }
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 0) {
                    continue;
                }
                if (j == n - 1) {
                    right[i][j] = 1;
                } else {
                    right[i][j] = right[i][j + 1] + 1;
                }
                if (i == m - 1) {
                    down[i][j] = 1;
                } else {
                    down

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    dp[i][j] = 0;
                } else {
                    if (i == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = dp[i - 1][j] + 1;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int h = dp[i][j];
                    int l = j;
                    int r = j;
                    while (l > 0 && grid[i][l - 1] == 1 && dp[i][l - 1] >= h) {
                        l--;
                    }
                    while (r < n - 1 && grid[i][r + 1] == 1 && dp[i][r + 1] >= h) {
                        r++;
                    }
                    ans += (r - l + 1) * h;
                }
            }
        }
        return ans;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    continue;
                }
                if (i == 0 || j == 0 || j == n - 1) {
                    dp[i][j] = 1;
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i - 1][j + 1])) + 1;
                }
            }
        }
        int cnt = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (dp[i][j] == 0) {
                    continue;
                }
                for (int k = 1; k <= dp[i][j]; k++) {
                    int row = i - k;
                    int col = j - k;
                    if (row < 0 || grid[row][col] == 0) {
                        break;
                    }
                    cnt++;
                }
                for (int k = 1; k <= dp[i][j]; k++) {
                    int row = i + k;
                    int col = j - k;
                    if (row >= m || grid[row][col] == 0) {
                        break;
                    }
                    cnt++;
                }
            }
        }
        return cnt;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) continue;
                if (i > 0) {
                    dp[i][j][0] = dp[i - 1][j][0] + 1;
                    dp[i][j][1] = dp[i - 1][j][1] + 1;
                }
                if (j > 0) {
                    dp[i][j][0] = Math.max(dp[i][j][0], dp[i][j - 1][0] + 1);
                    dp[i][j][1] = Math.max(dp[i][j][1], dp[i][j - 1][1] + 1);
                }
                if (i > 0 && j > 0) {
                    dp[i][j][0] = Math.max(dp[i][j][0], dp[i - 1][j - 1][0] + 1);
                    dp[i][j][1] = Math.max(dp[i][j][1], dp[i - 1][j - 1][1] + 1);
                }
                res += dp[i][j][0] + dp[i][j][1] - 1;
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j][0] = (i > 0 && j > 0 ? dp[i - 1][j - 1][0] : 0) + 1;
                    dp[i][j][1] = (i > 0 && j < n - 1 ? dp[i - 1][j + 1][1] : 0) + 1;
                    int min = Math.min(dp[i][j][0], dp[i][j][1]);
                    for (int k = 1; k <= min; k++) {
                        if (dp[i - k + 1][j - (i - k + 1)][0] >= k && dp[i - k + 1][j + (i - k + 1)][1] >= k) {
                            res++;
                        }
                    }
                }
            }
        }
        return res;

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][2];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j][0] = j > 0 ? dp[i][j - 1][0] + 1 : 1;
                    dp[i][j][1] = i > 0 ? dp[i - 1][j][1] + 1 : 1;
                    int h = Math.min(dp[i][j][0], dp[i][j][1]);
                    for (int k = 1; k <= h; k++) {
                        if (dp[i][j - k][1] >= k) {
                            ans++;
                        }
                        if (dp[i - k][j][0] >= k) {
                            ans++;
                        }
                    }
                }
            }
        }
        return ans;

=======

        int m = grid.length, n = grid[0].length;
        int[][] up = new int[m][n];
        int[][] left = new int[m][n];
        int[][] down = new int[m][n];
        int[][] right = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    up[i][j] = (i == 0 ? 0 : up[i - 1][j]) + 1;
                    left[i][j] = (j == 0 ? 0 : left[i][j - 1]) + 1;
                }
            }
        }
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (grid[i][j] == 1) {
                    down[i][j] = (i == m - 1 ? 0 : down[i + 1][j]) + 1;
                    right[i][j] = (j == n - 1 ? 0 : right[i][j + 1]) + 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    for (int h = 1; i + h < m && j - h >= 0 && j + h < n; h++) {
                        if (grid[i + h][j - h] == 1 && grid[i + h][j + h] == 1) {
                            if (up[i + h][j - h] >= h + 1 && up[i + h][j + h] >= h + 1 && right[i + h][j + h] >= h + 1 && left[i + h][j - h] >= h + 1) {
                                ans++;
                            }
                        }
                    }
                    for (int h = 1; i - h >= 0 && j - h >= 0 && j + h < n; h

=======

        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m+1][n+1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = grid[i-1][j-1] + dp[i][j-1];
            }
        }
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                int h = 1;
                while (i+h-1 <= m && j-h >= 0 && j+h-1 < n) {
                    int x = dp[i+h-1][j+h-1] - dp[i+h-1][j-h] - dp[i-1][j+h-1] + dp[i-1][j-h];
                    if (x == h*h) {
                        ans++;
                    }
                    h++;
                }
            }
        }
        return ans;

=======

        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        int[][] dp2 = new int[m][n];
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    if (i > 0) {
                        dp[i][j] = dp[i - 1][j] + 1;
                    } else {
                        dp[i][j] = 1;
                    }
                    if (j > 0) {
                        dp2[i][j] = dp2[i][j - 1] + 1;
                    } else {
                        dp2[i][j] = 1;
                    }
                    int minHeight = dp[i][j];
                    int minHeight2 = dp2[i][j];
                    for (int k = j; k >= 0; k--) {
                        minHeight = Math.min(minHeight, dp[i][k]);
                        minHeight2 = Math.min(minHeight2, dp2[i][k]);
                        if (minHeight >= 2 && minHeight2 >= 2) {
                            count++;
                        } else {
                            break;
                        }
                    }
                }
            }
        }
        return count;
