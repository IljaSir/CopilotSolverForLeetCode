Synthesizing 10/10 solutions

=======

        int n = s.length();
        int i = 0;
        for (int j = n - 1; j >= 0; j--) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }
        if (i == n) {
            return s;
        }
        String remain = s.substring(i, n);
        String remain_reverse = new StringBuilder(remain).reverse().toString();
        String prefix = s.substring(0, i);
        return remain_reverse + shortestPalindrome(prefix) + remain;

=======

        int n = s.length();
        int i = 0;
        for (int j = n - 1; j >= 0; j--) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }
        if (i == n) {
            return s;
        }
        String remain = s.substring(i);
        String remainReverse = new StringBuilder(remain).reverse().toString();
        String prefix = remainReverse + shortestPalindrome(s.substring(0, i)) + remain;
        return prefix;

=======

        int n = s.length();
        int i = 0;
        for (int j = n - 1; j >= 0; j--) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }
        if (i == n) {
            return s;
        }
        String remain = s.substring(i, n);
        return new StringBuilder(remain).reverse().toString() + shortestPalindrome(s.substring(0, i)) + remain;

=======

        int n = s.length();
        int i = 0;
        for (int j = n - 1; j >= 0; j--) {
            if (s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }
        if (i == n) {
            return s;
        }
        String suffix = s.substring(i);
        return new StringBuilder(suffix).reverse().toString() + shortestPalindrome(s.substring(0, i)) + suffix;

=======

        int i = 0, end = s.length() - 1, j = end; char chs[] = s.toCharArray();
        while (i < j) {
            if (chs[i] == chs[j]) {
                i++;
                j--;
            } else {
                i = 0;
                end--;
                j = end;
            }
        }
        return new StringBuilder(s.substring(end + 1)).reverse().append(s).toString();

=======

        int n = s.length();
        String rev = new StringBuilder(s).reverse().toString();
        for (int i = 0; i < n; i++) {
            if (s.substring(0, n - i).equals(rev.substring(i))) {
                return rev.substring(0, i) + s;
            }
        }
        return "";

=======

        int n = s.length();
        String rev = new StringBuilder(s).reverse().toString();
        for (int i = 0; i < n; ++i) {
            if (s.substring(0, n - i).equals(rev.substring(i))) {
                return rev.substring(0, i) + s;
            }
        }
        return "";

=======

        int n = s.length();
        int[] f = new int[n];
        for (int i = 1; i < n; i++) {
            int t = f[i - 1];
            while (t > 0 && s.charAt(i) != s.charAt(t)) {
                t = f[t - 1];
            }
            if (s.charAt(i) == s.charAt(t)) {
                t++;
            }
            f[i] = t;
        }
        int best = 0;
        for (int i = n - 1; i >= 0; i--) {
            while (best > 0 && s.charAt(i) != s.charAt(best)) {
                best = f[best - 1];
            }
            if (s.charAt(i) == s.charAt(best)) {
                best++;
            }
        }
        StringBuilder sb = new StringBuilder(s.substring(best));
        return sb.reverse().toString() + s;

=======

        int n = s.length();
        int[] p = new int[n];
        for (int i = 0, j = 0; i < n; i++) {
            while (j > 0 && s.charAt(i) != s.charAt(j)) j = p[j - 1];
            if (s.charAt(i) == s.charAt(j)) j++;
            p[i] = j;
        }
        int j = p[n - 1];
        for (int i = n - 1; i >= 0; i--) {
            if (s.charAt(i) == s.charAt(j)) j++;
        }
        if (j == n) return s;
        String suffix = s.substring(j);
        return new StringBuilder(suffix).reverse().toString() + shortestPalindrome(s.substring(0, j)) + suffix;

=======

        if (s == null || s.length() == 0) return s;
        String reverse = new StringBuilder(s).reverse().toString();
        int len = s.length();
        for (int i = 0; i < len; i++) {
            if (s.substring(0, len - i).equals(reverse.substring(i))) {
                return reverse.substring(0, i) + s;
            }
        }
        return "";
