Synthesizing 10/10 solutions

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, n);
        dp[0] = -1;
        int ans = 0, mask = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= 1 << (s.charAt(i) - '0');
            ans = Math.max(ans, i - dp[mask]);
            for (int j = 0; j < 10; ++j) {
                ans = Math.max(ans, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, n);
        dp[0] = -1;
        int res = 0;
        int mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= (1 << (s.charAt(i) - '0'));
            res = Math.max(res, i - dp[mask]);
            for (int j = 0; j < 10; j++) {
                res = Math.max(res, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return res;

=======

        int[] dp = new int[1 << 10];
        Arrays.fill(dp, s.length());
        dp[0] = -1;
        int ans = 0;
        int mask = 0;
        for (int i = 0; i < s.length(); ++i) {
            mask ^= 1 << (s.charAt(i) - '0');
            ans = Math.max(ans, i - dp[mask]);
            for (int j = 0; j < 10; ++j) {
                ans = Math.max(ans, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[1<<10];
        Arrays.fill(dp, n);
        dp[0] = -1;
        int mask = 0;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            mask ^= (1 << (s.charAt(i) - '0'));
            ans = Math.max(ans, i - dp[mask]);
            for (int j = 0; j < 10; j++) {
                ans = Math.max(ans, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return ans;

=======

        int[] dp = new int[1024];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        int mask = 0;
        int res = 0;
        for (int i = 1; i <= s.length(); i++) {
            mask ^= 1 << (s.charAt(i - 1) - '0');
            if (dp[mask] != -1) {
                res = Math.max(res, i - dp[mask]);
            } else {
                dp[mask] = i;
            }
            for (int j = 0; j < 10; j++) {
                int nmask = mask ^ (1 << j);
                if (dp[nmask] != -1) {
                    res = Math.max(res, i - dp[nmask]);
                }
            }
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        int mask = 0;
        int res = 0;
        Arrays.fill(dp, n);
        dp[0] = -1;
        for (int i = 0; i < n; i++) {
            int c = s.charAt(i) - '0';
            mask ^= 1 << c;
            res = Math.max(res, i - dp[mask]);
            for (int j = 0; j < 10; j++) {
                res = Math.max(res, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, n);
        int mask = 0;
        int ans = 0;
        dp[0] = -1;
        for (int i = 0; i < n; i++) {
            mask ^= 1 << (s.charAt(i) - '0');
            ans = Math.max(ans, i - dp[mask]);
            for (int j = 0; j < 10; j++) {
                ans = Math.max(ans, i - dp[mask ^ (1 << j)]);
            }
            dp[mask] = Math.min(dp[mask], i);
        }
        return ans;

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        int res = 0, mask = 0;
        for (int i = 0; i < n; i++) {
            mask ^= 1 << (s.charAt(i) - '0');
            if (dp[mask] >= 0) {
                res = Math.max(res, i + 1 - dp[mask]);
            } else {
                dp[mask] = i + 1;
            }
            for (int j = 0; j < 10; j++) {
                int t = mask ^ (1 << j);
                if (dp[t] >= 0) {
                    res = Math.max(res, i + 1 - dp[t]);
                }
            }
        }
        return res;

=======

        int n = s.length();
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, -1);
        int mask = 0;
        int ans = 0;
        dp[0] = 0;
        for (int i = 0; i < n; ++i) {
            mask ^= 1 << (s.charAt(i) - '0');
            if (dp[mask] >= 0) {
                ans = Math.max(ans, i + 1 - dp[mask]);
            } else {
                dp[mask] = i + 1;
            }
            for (int j = 0; j < 10; ++j) {
                int mask2 = mask ^ (1 << j);
                if (dp[mask2] >= 0) {
                    ans = Math.max(ans, i + 1 - dp[mask2]);
                }
            }
        }
        return ans;

=======

        int n = s.length(), res = 0;
        int[] a = new int[n + 1];
        for (int i = 0; i < n; i++) {
            a[i + 1] = a[i] ^ (1 << (s.charAt(i) - '0'));
        }
        int[] dp = new int[1 << 10];
        Arrays.fill(dp, n);
        dp[0] = -1;
        for (int i = 0; i <= n; i++) {
            int cur = a[i];
            res = Math.max(res, i - dp[cur]);
            for (int j = 0; j < 10; j++) {
                res = Math.max(res, i - dp[cur ^ (1 << j)]);
            }
            dp[cur] = Math.min(dp[cur], i);
        }
        return res;
