Synthesizing 10/10 solutions

=======

        if (source == target) return 0;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < routes.length; i++) {
            for (int j = 0; j < routes[i].length; j++) {
                map.computeIfAbsent(routes[i][j], x -> new ArrayList<>()).add(i);
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        Set<Integer> visited = new HashSet<>();
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int stop = queue.poll();
                for (int bus : map.get(stop)) {
                    if (visited.contains(bus)) continue;
                    visited.add(bus);
                    for (int next : routes[bus]) {
                        if (next == target) return step + 1;
                        queue.offer(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        if (source == target) return 0;
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < routes.length; i++) {
            for (int j = 0; j < routes[i].length; j++) {
                map.computeIfAbsent(routes[i][j], x -> new ArrayList<>()).add(i);
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        Set<Integer> visited = new HashSet<>();
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int stop = queue.poll();
                for (int bus : map.get(stop)) {
                    if (visited.contains(bus)) continue;
                    visited.add(bus);
                    for (int next : routes[bus]) {
                        if (next == target) return step + 1;
                        queue.offer(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        if (source == target) {
            return 0;
        }
        int n = routes.length;
        Map<Integer, List<Integer>> rec = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int site : routes[i]) {
                List<Integer> list = rec.getOrDefault(site, new ArrayList<>());
                list.add(i);
                rec.put(site, list);
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        boolean[] vis = new boolean[n];
        int step = 0;
        while (!queue.isEmpty()) {
            int sz = queue.size();
            while (sz-- > 0) {
                int site = queue.poll();
                for (int bus : rec.get(site)) {
                    if (vis[bus]) {
                        continue;
                    }
                    vis[bus] = true;
                    for (int s : routes[bus]) {
                        if (s == target) {
                            return step + 1;
                        }
                        queue.offer(s);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        if (source == target) return 0;
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < routes.length; i++) {
            for (int j = 0; j < routes[i].length; j++) {
                graph.computeIfAbsent(routes[i][j], x -> new ArrayList<>()).add(i);
            }
        }
        Queue<Integer> q = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        q.add(source);
        visited.add(source);
        int step = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int cur = q.poll();
                for (int bus : graph.get(cur)) {
                    for (int next : routes[bus]) {
                        if (next == target) return step + 1;
                        if (visited.add(next)) q.add(next);
                    }
                }
            }
            step++;
        }
        return -1;

=======

        if (source == target) {
            return 0;
        }
        int n = routes.length;
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        Map<Integer, List<Integer>> rec = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int site : routes[i]) {
                List<Integer> list = rec.getOrDefault(site, new ArrayList<>());
                for (int j : list) {
                    graph.get(i).add(j);
                    graph.get(j).add(i);
                }
                list.add(i);
                rec.put(site, list);
            }
        }
        Queue<Integer> queue = new LinkedList<>();
        boolean[] vis = new boolean[n];
        for (int bus : rec.getOrDefault(source, new ArrayList<>())) {
            queue.offer(bus);
            vis[bus] = true;
        }
        int res = 0;
        while (!queue.isEmpty()) {
            res++;
            for (int i = queue.size(); i > 0; i--) {
                int x = queue.poll();
                for (int y : graph.get(x)) {
                    if (vis[y]) {
                        continue;
                    }
                    if (rec.containsKey(target) && rec.get(target).contains(y)) {
                        return res;
                    }
                    queue.offer(y);
                    vis[y] = true;
                }
            }
        }
        return -1;

=======

        if (source == target) {
            return 0;
        }
        int n = routes.length;
        List<List<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            edges.add(new ArrayList<>());
        }
        Map<Integer, List<Integer>> rec = new HashMap<>();
        for (int i = 0; i < n; i++) {
            for (int site : routes[i]) {
                List<Integer> list = rec.getOrDefault(site, new ArrayList<>());
                for (int j : list) {
                    edges.get(i).add(j);
                    edges.get(j).add(i);
                }
                list.add(i);
                rec.put(site, list);
            }
        }r ounnv0;is = new boolean[n];
       tMus<ult(sourcSenew ArrayList<>())) {
        f            queue.oroutes.lefgthfer(bus);
            vis[bus] = true;
        }f (!map.conaisKey(rous[i][j])) {
                 pHhSe
        int ret }
        while (!queugeisEmpty()) {).add(
            ret++;
            int sz = queue.size();
        Queue<Intege > queue = new LorkedLis <>();
(n =0 < queue.add(source);++) {
        Set<Integer> visited = new HashSet<>i);
        nt xres= que
u.o     wh(!queue.isEmpty()
            ont gizes.gqu).ze(
            res++;
                if (!iis[it]i {i
                int cur = queue. oli  s[it]) {
                for (int next : map.get(cur)) {
                    if (visit d.co  ains(n xt))ecoutfeu(
                    visited.add  ex );
    i[]r                    bus:nx]
                        }btagtreturn res;
        }      ueuebus
        return -1;}
}
=======

        re urn -1;(source == target) 

=======

   int eMf<(Iourctwe=rearg+t) {) {mapHhMap
        o   re0utn 0;es.lejgth < route       list.add(i);
]it     }
    }s  i].lnj=lngth
        Li}i<S!t<Integer>>cedgeo=nnewtArrayLa)<St<Integer>>()
         (int;){mapponi
       for tedge.add(new HashSet<Integer>());
;ju}es[i}
].len   Map<It eger, L+)<Itge>>rec new HashMa<Integer, List<Integer>>
        routt [i]i;]sii
}for(intsite:routes[i]){
        }List<Integer>listrec.getOrDefault(,newArrayList<Integer>();
        Queue<In=or nnks (:li) {
        qu(n ;tddi].edgeget(i).
        S t<Intigou>ahge.get(<).add(i)
        istconsi}
n 0u        whwllist.add(i);
eil!        no trec.put(site, list);si s zep iqu ue.s ze()
             srcrgD++ite,  ew<Ar ayLiit<>())) {e; i++) {
        }            insizeft(vis[bus]) continue;ur = q.poll();

        Queue<In  ger> quf =  ew LexkedLcs{<Ier>(;
           [] d s  inew vna[n]n) continuej], target)) return step;
        A  ays.fill(dvs,e-1 
        for (int site :  ec.g  O}De  u t( ourc , ne uArrayLt<Ineger>)
      returndis[sit-] = 1
 }offer(t
   priva}

te lcna(whiler(!que.rsEmpty()int target) {
    for (int i = 0; i arr.length; i++) {
    riauiae-1;y
dy == -1
=dy=d[x]+1;
suce ==targe)returnque.off(y)
n;
e (!Lqss<Ltt}
<Intege>>
+graph;=newArryList<>
int sz fintoretr==Integer.MAX_VALUE;
(enu ie(for)(int0site :irec.getOrDifanlt(targ;t, n)w ArtayList<Inaeger>())p {.add(n w Arr=yList<>())0   for (int it : edges.get(x)) {
if (!vis[it]if)(d{se! -1){
er,        for (ret = Math.min(ret, dis[site]);    0  i < n; i  ) {         }
                    t :routes[]
                         =r:;list
               ret   cI.i.MAX_VALUE ? : ret

=====r

        1;
nt n = routes.legh;
       Lt<Lst<Inegr>> graphArrayLs<>()
 Queue<Iforn(teg i = 0; i < n; i++)ueue=n.add(inkeArrayLdsi<>());

=======boolean[]vis=newboola[n]rec
        fof ((n=);us: re.geOrDeful(souceewArayLis<>())
        (c =queueeof;site:
        int[v]sebus = ewirecsi
         int[][]for (rnpj: {
        intt        g aph.get (o.add(j);es[i].length; j++) {
              itnee graphzie)(.add(i);
                }
            }rapaddi
        }continuec.ut(ste, 
    for (int i =vis[it] =0true;
                i < n; i++) {
   for (int j =j < routes[i].lengthreturn step; j++) {
                List<Intueuefore(intgbuse:rstc.ge O Default(site, mewaAprayLisg<>())) {t(routes[i][j]);
        bo lea []fvosr knew=boolean[i]fus]) continue;
              gr busu:cgOrDeal(e, nw ArrayList<>())
}ueueofferbus
       Queuer> nbusw Lit0u; < n; i++) {
        (int j = 0; j < routes[i].length; j++) {
   if (routes[i][j] == source) {
                    visited[i] = 1;
                 ueue   break;
            ++
        Se0In > vitedszHhSqueue.p++;()sz > 0; --sz
            for (intx= 0;ueue i < size; =
                for (int it : graph.get(x)) {
                    if (vis[it]) continue;
                    vis[it] = true;
                    for (int site : routes[it]) {
                        if (site == target) return step;
                        for (int bus :qrecagetOrDefault(site, new ArrdyList<>))) {
                            if (vis[bus]) continue;
                  }         queue.offer(bus);
                                   ifvisted.coains(j))contine;
                   d}
         }l=;<.}
            }
          }routs[j][l]
               -1;        }

                        }
    private boolean contain(int[] arr, int target) {
        fo (int i = 0; i < arr.length; i++) {
         aree
        SeeIn> vited=HhSe
Map<Integer, List<Integer>> graph = new HashMap<>();
        if (n == 0) for (in-1        graph.computeIfAbsent(routes[i][j], x -> new ArrayList<>()).add(i);
         f (source=tage) rtur 0
        n[] vidn[n]
       u<In[]]<Integ = isitn [n][n]e.add(source);
        visited.add(source);map
        int ste = 0;
        while (!q.is j = 0;Ej(<) {.length; j++
            int siz(int j = 0; j < n; j++){
                   eif vis=ted.co qains(j)).continie;
                    for(int k = 0; ke<)moutes[j]olenueh; k++){
                        if[routes[j][k] == ][j{
                           visited.add(j);
                    for  < s ); l = 0;l<j.length; l++
                        mntbpu : o routis[j][l]][j]visited.add(next)) .dd(next);
                          }routs[j][l]
                            }
                        }
                }
        fo( i = 0; i < e;+++){
          }j=0; j < oe[i].lgh; j++
        retuL<Intger>=lsmap.gsturoet a[i][j]{;
                k0; k < listk++
        int n = tsl raph [i][list= newkA]r= 1;yList<>();
        for (int}
 i =;i      }
      gr}
aph.add(Qntengr>rounes.len=Ah;LrakLdList<>()ist<>());
        iff(no==r0)}(inti=0-1i<n;i++){
        ff (sourcein=ttaige() riiurn 0[j] == source) {site : routes[i]) {
         n [] v  iLgdt.getOrtns[n] new ArrayList<>());
           [][]f      = t kntn>[n][n]
 la[       } true;map
        }
        int res = 0;j=0; j < .length; j++
        while  (!queue.isEmp ty()) {maprous[i][j]
            res+i
            for mi  pueu of eg[r][j][ ][j]n=u1&&visid ==0 
                    } (contain,taget) return step;
                if (rec.qsKey(target) && rec.get(target).contains(y)) {
        fort( i = 0; i < o;e(++){
                  }j=0; j < oe[i].lgh; j++
    vis[y] =    L<Intger> lsmap.goterocton[i][j]a;inttarget){
        for  reti]==targek)re0; k < listuk++
=======f[i][listk]= 1;
        if(sourc}
e ==at      }
  int n }
= routesQueue<Integer>.ql= gew Lh;kdList<>()
        forS(inteit=<0;Iin<tn;ei++)g{visited = new HashSet<>();
        Queufore(int<jI=n0;gje<  wu;s[i]lgh; j++
 q.add(source);if(ou[i][j]d==dsource)({ource);
        int step = 0;addi
        while(!q.isEmptitedyi)){1or(int i = 0; i < size; i++){
                    b   kdd(j);
               (} == target) return step+1;
            }      }
        }
                    }
                 } 
            };
            step++
            ste p++; 
        }
        return -1;  
 grph[][j]=1&&visid ==0  (contain,taget)returnstep;
qvd}}
}
return-1;
privatebooleancontain(int[]arr,inttarget){ for(inti=0;i<arr.length;i++){if(arr[i]==target)returnrufalse