Synthesizing 10/10 solutions

=======

        int MOD = 1_000_000_007;
        int n = strength.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && strength[stack.peek()] > strength[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + (long) strength[i] * (i - left[i]) * (right[i] - i)) % MOD;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        int n = strength.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && strength[stack.peek()] > strength[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            long sum = (long) strength[i] * (right[i] - left[i] - 1);
            ans = (ans + sum * strength[i]) % mod;
        }
        return (int) ans;

=======

        int n = strength.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();
        for(int i=0; i<n; i++){
            while(!stack.isEmpty() && strength[stack.peek()] > strength[i]){
                right[stack.pop()] = i;
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        while(!stack.isEmpty()){
            right[stack.pop()] = n;
        }
        long mod = 1000000007;
        long sum = 0;
        for(int i=0; i<n; i++){
            long leftCount = i - left[i];
            long rightCount = right[i] - i;
            sum += strength[i] * leftCount * rightCount;
            sum %= mod;
        }
        return (int)sum;

=======

        int mod = (int)1e9 + 7;
        int n = strength.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && strength[stack.peek()] > strength[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + (long)strength[i] * (i - left[i]) * (right[i] - i)) % mod;
        }
        return (int)ans;

=======

        int sum = 0, mod = 1000000007;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < strength.length; i++) {
            int cnt = 1;
            while (!stack.isEmpty() && stack.peek() >= strength[i]) {
                if (stack.peek() == strength[i]) cnt++;
                sum = (sum + (long) stack.peek() * cnt) % mod;
                stack.pop();
            }
            stack.push(strength[i]);
            sum = (sum + (long) strength[i] * cnt) % mod;
        }
        return sum;

=======

        int n = strength.length;
        int mod = (int) 1e9 + 7;
        int[] next = new int[n];
        int[] prev = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            prev[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            next[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int left = i - prev[i];
            int right = next[i] - i;
            ans += (long) strength[i] * left * right;
        }
        return (int) (ans % mod);

=======

        int n = strength.length;
        long mod = 1000000007;
        long[] left = new long[n];
        long[] right = new long[n];
        long[] sum = new long[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && strength[stack.peek()] > strength[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        for (int i = 0; i < n; i++) {
            sum[i] = strength[i] * (i - left[i]) * (right[i] - i);
        }
        long ans = 0;
        for (long v : sum) {
            ans += v;
            ans %= mod;
        }
        return (int) ans;

=======

        int len = strength.length;
        int mod = 1000000007;
        long[] left = new long[len];
        long[] right = new long[len];
        left[0] = 1;
        for(int i=1;i<len;i++){
            left[i] = (left[i-1] * strength[i-1]) % mod;
        }
        right[len-1] = 1;
        for(int i=len-2;i>=0;i--){
            right[i] = (right[i+1] * strength[i+1]) % mod;
        }
        long sum = 0;
        for(int i=0;i<len;i++){
            sum = (sum + (strength[i] * left[i] * right[i])) % mod;
        }
        return (int)sum;

=======

        int mod = 1000000007;
        long ans = 0;
        int len = strength.length;
        int[] minLeft = new int[len];
        int[] minRight = new int[len];
        int[] sumLeft = new int[len];
        int[] sumRight = new int[len];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < len; i++) {
            int sum = 0;
            while (!stack.isEmpty() && strength[stack.peek()] >= strength[i]) {
                sum += strength[stack.pop()];
            }
            minLeft[i] = stack.isEmpty() ? strength[i] : Math.min(strength[i], strength[stack.peek()]);
            sumLeft[i] = sum + strength[i];
            stack.push(i);
        }
        stack.clear();
        for (int i = len - 1; i >= 0; i--) {
            int sum = 0;
            while (!stack.isEmpty() && strength[stack.peek()] > strength[i]) {
                sum += strength[stack.pop()];
            }
            minRight[i] = stack.isEmpty() ? strength[i] : Math.min(strength[i], strength[stack.peek()]);
            sumRight[i] = sum + strength[i];
            stack.push(i);
        }
        for (int i = 0; i < len; i++) {
            ans = (ans + (long) minLeft[i] * sumRight[i] + (long) minRight[i] * sumLeft[i] - (long) strength[i] * strength[i]) % mod;
        }
        return (int) ans;

=======

        int n = strength.length;
        int MOD = 1_000_000_000 + 7;
        long sum = 0;
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            dp[i] = strength[i];
            sum += strength[i];
        }
        for (int i = 1; i < n; i++) {
            dp[i] = Math.min(dp[i], dp[i - 1]);
        }
        long res = 0;
        for (int i = n - 1; i >= 0; i--) {
            res += dp[i] * sum;
            res %= MOD;
            sum -= strength[i];
        }
        return (int) res;
