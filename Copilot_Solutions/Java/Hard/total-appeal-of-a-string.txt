Synthesizing 8/10 solutions

=======

        long ans = 0;
        for (int i = 0; i < s.length(); i++) {
            Set<Character> set = new HashSet<>();
            for (int j = i; j < s.length(); j++) {
                set.add(s.charAt(j));
                ans += set.size();
            }
        }
        return ans;

=======

        long result = 0;
        for (int i = 0; i < s.length(); i++) {
            int[] count = new int[26];
            for (int j = i; j < s.length(); j++) {
                count[s.charAt(j) - 'a']++;
                int appeal = 0;
                for (int k = 0; k < 26; k++) {
                    if (count[k] > 0) appeal++;
                }
                result += appeal;
            }
        }
        return result;

=======

        int n = s.length();
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int[] count = new int[26];
            for (int j = i; j < n; j++) {
                if (count[s.charAt(j) - 'a']++ == 0) {
                    ans += j - i + 1;
                }
            }
        }
        return ans;

=======

        long res = 0;
        int n = s.length();
        for (int i = 0; i < n; i++) {
            int[] count = new int[26];
            for (int j = i; j < n; j++) {
                int idx = s.charAt(j) - 'a';
                if (count[idx] == 0) {
                    res += 1;
                }
                count[idx]++;
            }
        }
        return res;

=======

        long sum = 0;
        for (int i = 0; i < s.length(); i++) {
            boolean[] seen = new boolean[26];
            int count = 0;
            for (int j = i; j < s.length(); j++) {
                if (!seen[s.charAt(j) - 'a']) {
                    seen[s.charAt(j) - 'a'] = true;
                    count++;
                }
                sum += count;
            }
        }
        return sum;

=======

        long ans = 0;
        int n = s.length();
        int[] count = new int[26];
        for (int i = 0; i < n; i++) {
            int[] temp = new int[26];
            for (int j = i; j < n; j++) {
                temp[s.charAt(j) - 'a']++;
                if (temp[s.charAt(j) - 'a'] == 1) {
                    count[s.charAt(j) - 'a']++;
                }
                ans += count[s.charAt(j) - 'a'];
            }
        }
        return ans;

=======

        long totalAppeal = 0;
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            int distinct = 0;
            Arrays.fill(count, 0);
            for (int j = i; j < s.length(); j++) {
                if (count[s.charAt(j) - 'a'] == 0) {
                    distinct++;
                    count[s.charAt(j) - 'a'] = 1;
                }
                totalAppeal += distinct;
            }
        }
        return totalAppeal;

=======

        long result = 0;
        int[] last = new int[26];
        Arrays.fill(last, -1);
        for (int i = 0; i < s.length(); i++) {
            int count = 0;
            int[] seen = new int[26];
            for (int j = i; j < s.length(); j++) {
                int index = s.charAt(j) - 'a';
                if (seen[index] == 0) {
                    count++;
                }
                seen[index]++;
                if (last[index] < i) {
                    result += count;
                    last[index] = j;
                }
            }
        }
        return result;
