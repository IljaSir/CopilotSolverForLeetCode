Synthesizing 4/10 solutions

=======

        List<String> ans = new ArrayList<>();
        ans.add("");
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '{') {
                int j = i, count = 0;
                for (; j < expression.length(); j++) {
                    if (expression.charAt(j) == '{') count++;
                    if (expression.charAt(j) == '}') count--;
                    if (count == 0) break;
                }
                List<String> list = braceExpansionII(expression.substring(i + 1, j));
                ans = merge(ans, list);
                i = j;
            } else if (c == ',') {
                ans.add("");
            } else {
                for (int j = 0; j < ans.size(); j++) {
                    ans.set(j, ans.get(j) + c);
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }
    
    private List<String> merge(List<String> list1, List<String> list2) {
        List<String> ans = new ArrayList<>();
        for (String s1 : list1) {
            for (String s2 : list2) {
                ans.add(s1 + s2);
            }
        }
        Collections.sort(ans);
        return ans;

=======

        List<String> result = new ArrayList<>();
        Stack<List<String>> stack = new Stack<>();
        stack.push(new ArrayList<>());
        int i = 0;
        while (i < expression.length()) {
            char c = expression.charAt(i);
            if (c == '{') {
                int j = i;
                int count = 0;
                while (j < expression.length()) {
                    if (expression.charAt(j) == '{') {
                        count++;
                    } else if (expression.charAt(j) == '}') {
                        count--;
                    }
                    if (count == 0) {
                        break;
                    }
                    j++;
                }
                List<String> temp = braceExpansionII(expression.substring(i + 1, j));
                List<String> curr = stack.pop();
                stack.push(merge(curr, temp));
                i = j + 1;
            } else if (c == ',') {
                stack.push(new ArrayList<>());
                i++;
            } else {
                List<String> curr = stack.pop();
                curr.add(String.valueOf(c));
                stack.push(curr);
                i++;
            }
        }
        while (!stack.isEmpty()) {
            result.addAll(stack.pop());
        }
        Collections.sort(result);
        return result;
    }
    private List<String> merge(List<String> list1, List<String> list2) {
        List<String> result = new ArrayList<>();
        for (String s1 : list1) {
            for (String s2 : list2) {
                result.add(s1 + s2);
            }
        }
        return result;

=======

        List<String> result = new ArrayList<>();
        Stack<List<String>> stack = new Stack<>();
        stack.push(new ArrayList<>());
        stack.peek().add("");
        for (char c : expression.toCharArray()) {
            if (c == '{') {
                stack.push(new ArrayList<>());
            } else if (c == ',') {
                stack.peek().add("");
            } else if (c == '}') {
                List<String> list = stack.pop();
                Collections.sort(list);
                stack.peek().add(String.join("", list));
            } else {
                stack.peek().set(stack.peek().size() - 1, stack.peek().get(stack.peek().size() - 1) + c);
            }
        }
        List<String> list = stack.pop();
        Collections.sort(list);
        for (String s : list) {
            if (!result.contains(s)) {
                result.add(s);
            }
        }
        return result;

=======

        return null;
