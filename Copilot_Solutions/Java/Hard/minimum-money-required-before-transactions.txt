Synthesizing 10/10 solutions

=======

        long[] cost = new long[transactions.length];
        long[] cashback = new long[transactions.length];
        for (int i = 0; i < transactions.length; i++) {
            cost[i] = transactions[i][0];
            cashback[i] = transactions[i][1];
        }
        Arrays.sort(cost);
        Arrays.sort(cashback);
        long min = 0, max = 0;
        for (int i = 0; i < transactions.length; i++) {
            min += cost[i];
            max += cashback[i];
        }
        long res = max;
        for (int i = 0; i < transactions.length; i++) {
            res = Math.min(res, max - cashback[i] + cost[i]);
        }
        return Math.max(res, min);

=======

        long[] diff = new long[transactions.length];
        long sum = 0;
        for (int i = 0; i < transactions.length; i++) {
            diff[i] = transactions[i][0] - transactions[i][1];
            sum += transactions[i][0];
        }
        Arrays.sort(diff);
        long min = 0;
        for (int i = 0; i < diff.length; i++) {
            if (sum < min) {
                return min;
            }
            min += diff[i];
            sum -= diff[i];
        }
        return min;

=======

        long money = 0;
        Arrays.sort(transactions, (a, b) -> a[0] - a[1] - (b[0] - b[1]));
        for (int[] t : transactions) {
            money = Math.max(money + t[1], t[0]);
        }
        return money;

=======

        long[] dp = new long[transactions.length];
        for (int i = 0; i < transactions.length; i++) {
            dp[i] = transactions[i][0] + transactions[i][1];
        }
        Arrays.sort(dp);
        long ans = 0;
        for (int i = 0; i < transactions.length; i++) {
            ans += dp[i];
            if (ans < transactions[i][0]) {
                ans = transactions[i][0];
            }
        }
        return ans;

=======

        long sum = 0;
        long min = 0;
        for (int i = 0; i < transactions.length; i++) {
            sum += transactions[i][0];
            min = Math.min(min, sum);
        }
        return Math.abs(min);

=======

        long ans = 0;
        int n = transactions.length;
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = transactions[i][0] - transactions[i][1];
        }
        Arrays.sort(a);
        long sum = 0;
        for (int i = 0; i < n; i++) {
            if (sum + a[i] < 0) {
                ans += -sum - a[i];
                sum = 0;
            } else {
                sum += a[i];
            }
        }
        return ans;

=======

        long min = 0;
        long sum = 0;
        for (int[] t : transactions) {
            sum += t[0];
            min = Math.min(min, sum - t[1]);
        }
        return Math.max(0, -min);

=======

        long res = 0, sum = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int[] t : transactions) {
            pq.offer(t[0] - t[1]);
            sum += t[0];
            while (sum < 0) {
                sum += pq.poll();
            }
            res = Math.max(res, sum);
        }
        return res;

=======

        Arrays.sort(transactions, (a, b) -> a[0] - b[0]);
        long min = 0;
        long money = 0;
        for (int[] t : transactions) {
            long cost = t[0];
            long cashback = t[1];
            if (money < cost) {
                min += cost - money;
                money = cost;
            }
            money += cashback;
        }
        return min;

=======

        long res = 0;
        long total = 0;
        for (int[] t : transactions) {
            total += t[0] - t[1];
            res = Math.max(res, total);
        }
        return res;
