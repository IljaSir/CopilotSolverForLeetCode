Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isSpecial(int num) {
        Set<Integer> digits = new HashSet<>();
        while (num > 0) {
            int digit = num % 10;
            if (digits.contains(digit)) {
                return false;
            }
            digits.add(digit);
            num /= 10;
        }
        return true;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }

    private boolean isSpecial(int x) {
        boolean[] digits = new boolean[10];
        while (x > 0) {
            int digit = x % 10;
            if (digits[digit]) {
                return false;
            }
            digits[digit] = true;
            x /= 10;
        }
        return true;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isSpecial(int n) {
        boolean[] seen = new boolean[10];
        while (n > 0) {
            int d = n % 10;
            if (seen[d]) {
                return false;
            }
            seen[d] = true;
            n /= 10;
        }
        return true;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isSpecial(int n) {
        Set<Integer> set = new HashSet<>();
        while (n > 0) {
            int digit = n % 10;
            if (set.contains(digit)) {
                return false;
            }
            set.add(digit);
            n /= 10;
        }
        return true;

=======

        int count = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                count++;
            }
        }
        return count;
    }
    private boolean isSpecial(int n) {
        boolean[] digits = new boolean[10];
        while (n > 0) {
            int digit = n % 10;
            if (digits[digit]) {
                return false;
            }
            digits[digit] = true;
            n /= 10;
        }
        return true;

=======

        int result = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                result++;
            }
        }
        return result;
    }

    private boolean isSpecial(int num) {
        Set<Integer> set = new HashSet<>();
        while (num > 0) {
            int digit = num % 10;
            if (set.contains(digit)) {
                return false;
            }
            set.add(digit);
            num /= 10;
        }
        return true;

=======

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (isSpecial(i)) {
                ans++;
            }
        }
        return ans;
    }
    
    private boolean isSpecial(int n) {
        int[] digits = new int[10];
        while (n > 0) {
            int digit = n % 10;
            if (digits[digit] == 1) {
                return false;
            }
            digits[digit] = 1;
            n /= 10;
        }
        return true;

=======

        int count = 0;
        for(int i = 1; i <= n; i++) {
            if(isSpecial(i)) count++;
        }
        return count;
    }
    
    public boolean isSpecial(int n) {
        boolean[] seen = new boolean[10];
        while(n > 0) {
            int digit = n % 10;
            if(seen[digit]) return false;
            seen[digit] = true;
            n /= 10;
        }
        return true;

=======

        int result = 0;
        for (int i = 0; i <= n; i++) {
            if (isSpecial(i)) {
                result++;
            }
        }
        return result;
    }
    
    private boolean isSpecial(int n) {
        if (n < 10) {
            return true;
        }
        int[] digits = new int[10];
        while (n > 0) {
            int digit = n % 10;
            if (digits[digit] == 1) {
                return false;
            }
            digits[digit] = 1;
            n /= 10;
        }
        return true;
