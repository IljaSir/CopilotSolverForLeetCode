Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] change = new int[n];
        for (int i = 0; i < n; i++) {
            change[(i - nums[i] + 1 + n) % n]--;
        }
        for (int i = 1; i < n; i++) {
            change[i] += change[i - 1] + 1;
        }
        int max = change[0], ans = 0;
        for (int i = 1; i < n; i++) {
            if (change[i] > max) {
                max = change[i];
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] change = new int[n];
        for (int i = 0; i < n; i++) {
            change[(i - nums[i] + 1 + n) % n]--;
        }
        int best = -n;
        int ans = 0, now = 0;
        for (int i = 0; i < n; i++) {
            now += change[i];
            if (now > best) {
                best = now;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] change = new int[n];
        for (int i = 0; i < n; i++) {
            change[(i - nums[i] + 1 + n) % n]--;
        }
        for (int i = 1; i < n; i++) {
            change[i] += change[i - 1] + 1;
        }
        int best = 0;
        for (int i = 1; i < n; i++) {
            if (change[i] > change[best]) {
                best = i;
            }
        }
        return best;

=======

        int n = nums.length;
        int[] change = new int[n];
        for (int i = 0; i < n; i++) {
            change[(i - nums[i] + 1 + n) % n]--;
        }
        for (int i = 1; i < n; i++) {
            change[i] += change[i - 1] + 1;
        }
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (change[i] > change[ans]) {
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] change = new int[n];
        for (int i = 0; i < n; ++i) {
            change[(i - nums[i] + 1 + n) % n]--;
        }
        for (int i = 1; i < n; ++i) {
            change[i] += change[i - 1] + 1;
        }
        int best = 0;
        for (int i = 1; i < n; ++i) {
            if (change[i] > change[best]) {
                best = i;
            }
        }
        return best;

=======

        int n = nums.length;
        int[] bad = new int[n];
        for (int i = 0; i < n; i++) {
            int left = (i - nums[i] + 1 + n) % n;
            int right = (i + 1) % n;
            bad[left]--;
            bad[right]++;
            if (left > right) {
                bad[0]--;
            }
        }
        int best = -n;
        int ans = 0;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += bad[i];
            if (cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] score = new int[n];
        for (int i = 0; i < n; i++) {
            int left = (i - nums[i] + 1 + n) % n;
            int right = (i + 1) % n;
            score[left]--;
            score[right]++;
            if (left > right) {
                score[0]--;
            }
        }
        int best = -n;
        int ans = 0;
        int cur = 0;
        for (int i = 0; i < n; i++) {
            cur += score[i];
            if (cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] score = new int[n];
        for (int i = 0; i < n; i++) {
            score[(i - nums[i] + 1 + n) % n]--;
        }
        for (int i = 1; i < n; i++) {
            score[i] += score[i - 1] + 1;
        }
        int maxScore = score[0];
        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (score[i] > maxScore) {
                maxScore = score[i];
                ans = i;
            }
        }
        return ans;

=======

        int[] count = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            int left = (i - nums[i] + 1 + nums.length) % nums.length;
            int right = (i + 1) % nums.length;
            count[left]--;
            count[right]++;
            if (left > right) {
                count[0]--;
            }
        }
        int max = 0;
        int res = 0;
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += count[i];
            if (sum > max) {
                max = sum;
                res = i;
            }
        }
        return res;

=======

        int n = nums.length;
        int[] bad = new int[n];
        for (int i = 0; i < n; ++i) {
            // nums[i] <= i
            bad[(i - nums[i] + 1 + n) % n]--;
            // nums[i] <= i + 1
            bad[(i - nums[i] + 1 + n) % n]--;
            // nums[i] <= i + 2
            bad[(i - nums[i] + 2 + n) % n]++;
        }
        int best = -n, ans = 0, cur = 0;
        for (int i = 0; i < n; ++i) {
            cur += bad[i];
            if (cur > best) {
                best = cur;
                ans = i;
            }
        }
        return ans;
