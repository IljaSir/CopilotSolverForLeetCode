Synthesizing 10/10 solutions

=======

        int MOD = 1000000007;
        long[][][] dp = new long[n + 1][2][3];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i - 1][j][k]) % MOD;
                }
            }
            for (int k = 0; k < 3; k++) {
                dp[i][1][0] = (dp[i][1][0] + dp[i - 1][0][k]) % MOD;
            }
            for (int j = 0; j < 2; j++) {
                for (int k = 1; k < 3; k++) {
                    dp[i][j][k] = dp[i - 1][j][k - 1];
                }
            }
        }
        long ans = 0;
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                ans = (ans + dp[n][j][k]) % MOD;
            }
        }
        return (int) ans;

=======

        int mod = 1000000007;
        int[][][] dp = new int[n + 1][2][3];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int a = 0; a < 2; ++a) {
                for (int l = 0; l < 3; ++l) {
                    dp[i][a][0] = (dp[i][a][0] + dp[i - 1][a][l]) % mod;
                    if (a > 0) {
                        dp[i][a][0] = (dp[i][a][0] + dp[i - 1][a - 1][l]) % mod;
                    }
                    if (l > 0) {
                        dp[i][a][l] = (dp[i][a][l] + dp[i - 1][a][l - 1]) % mod;
                    }
                }
            }
        }
        int ans = 0;
        for (int a = 0; a < 2; ++a) {
            for (int l = 0; l < 3; ++l) {
                ans = (ans + dp[n][a][l]) % mod;
            }
        }
        return ans;

=======

        int mod = 1000000007;
        long[][][] dp = new long[n][2][3];
        dp[0][0][0] = 1;
        dp[0][1][0] = 1;
        dp[0][0][1] = 1;
        for (int i = 1; i < n; i++) {
            dp[i][0][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2]) % mod;
            dp[i][1][0] = (dp[i - 1][0][0] + dp[i - 1][0][1] + dp[i - 1][0][2] + dp[i - 1][1][0] + dp[i - 1][1][1] + dp[i - 1][1][2]) % mod;
            dp[i][0][1] = dp[i - 1][0][0];
            dp[i][0][2] = dp[i - 1][0][1];
            dp[i][1][1] = dp[i - 1][1][0];
            dp[i][1][2] = dp[i - 1][1][1];
        }
        long ans = 0;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                ans = (ans + dp[n - 1][i][j]) % mod;
            }
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = 1;
        dp[1] = 2;
        dp[2] = 4;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % mod;
        }
        long result = dp[n];
        for (int i = 1; i <= n; i++) {
            result = (result + dp[i - 1] * dp[n - i]) % mod;
        }
        return (int)result;

=======

        int mod = 1000000007;
        int[][][] dp = new int[n+1][2][3];
        dp[0][0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][0] = (dp[i][j][0] + dp[i-1][j][k]) % mod;
                    if (j > 0) {
                        dp[i][j][0] = (dp[i][j][0] + dp[i-1][j-1][k]) % mod;
                    }
                    if (k > 0) {
                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k-1]) % mod;
                    }
                }
            }
        }
        int ans = 0;
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                ans = (ans + dp[n][j][k]) % mod;
            }
        }
        return ans;

=======

        long[][][] dp = new long[n + 1][2][3];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    dp[i][j][k] = -1;
                }
            }
        }
        return (int) (cal(n, 0, 0, dp) % 1000000007);
    }
    public long cal(int n, int a, int l, long[][][] dp) {
        if (a > 1 || l > 2) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }
        if (dp[n][a][l] != -1) {
            return dp[n][a][l];
        }
        long ans = 0;
        ans += cal(n - 1, a, 0, dp);
        ans += cal(n - 1, a + 1, 0, dp);
        ans += cal(n - 1, a, l + 1, dp);
        dp[n][a][l] = ans;
        return ans;

=======

        int mod = 1000000007;
        long[] A = new long[n];
        long[] P = new long[n];
        long[] L = new long[n];
        P[0] = 1;
        L[0] = 1;
        A[0] = 1;
        A[1] = 2;
        P[1] = 2;
        L[1] = 3;
        for (int i = 2; i < n; i++) {
            P[i] = ((P[i - 1] + L[i - 1]) % mod + A[i - 1]) % mod;
            L[i] = ((P[i - 1] + P[i - 2]) % mod + A[i - 1]) % mod;
            A[i] = ((P[i - 1] + L[i - 1]) % mod + A[i - 1]) % mod;
        }
        return (int) ((P[n - 1] + L[n - 1]) % mod + A[n - 1]) % mod;

=======

        int mod = 1000000007;
        long[] a = new long[n+1];
        long[] p = new long[n+1];
        long[] l = new long[n+1];
        a[0] = 1;
        p[0] = 1;
        l[0] = 1;
        for (int i = 1; i <= n; i++) {
            a[i] = (a[i-1] + p[i-1] + l[i-1]) % mod;
            p[i] = (a[i-1] + p[i-1] + l[i-1]) % mod;
            l[i] = (p[i-1] + a[i-1]) % mod;
        }
        long res = (a[n] + p[n] + l[n]) % mod;
        for (int i = 1; i <= n; i++) {
            long tmp = (a[i-1] * a[n-i]) % mod;
            tmp = (tmp * p[n-i]) % mod;
            res = (res + tmp) % mod;
        }
        return (int)res;

=======

        int mod = 1000000000 + 7;
        long[] dp = new long[6];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 0;
        dp[3] = 1;
        dp[4] = 0;
        dp[5] = 0;
        for (int i = 1; i <= n; i++) {
            long[] next = new long[6];
            next[0] = (dp[0] + dp[1] + dp[2]) % mod;
            next[1] = dp[0];
            next[2] = dp[1];
            next[3] = (dp[0] + dp[1] + dp[2] + dp[3] + dp[4] + dp[5]) % mod;
            next[4] = dp[3];
            next[5] = dp[4];
            dp = next;
        }
        return (int) ((dp[0] + dp[1] + dp[2] + dp[3] + dp[4] + dp[5]) % mod);

=======

        int mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[0] = dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2] + dp[i - 3]) % mod;
        }
        long res = dp[n];
        for (int i = 0; i < n; i++) {
            res = (res + dp[i] * dp[n - i - 1]) % mod;
        }
        return (int) res;
