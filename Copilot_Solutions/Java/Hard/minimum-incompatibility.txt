Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == -1) {
                continue;
            }
            int[] cnt = new int[17];
            int max = 0, min = 17, unique = 0;
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    continue;
                }
                if (cnt[nums[i]] == 0) {
                    unique++;
                }
                cnt[nums[i]]++;
                max = Math.max(max, nums[i]);
                min = Math.min(min, nums[i]);
                int next = mask | (1 << i);
                if (unique == n / k) {
                    dp[next] = dp[next] == -1 ? dp[mask] + max - min : Math.min(dp[next], dp[mask] + max - min);
                } else {
                    dp[next] = dp[next] == -1 ? dp[mask] : Math.min(dp[next], dp[mask]);
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            int[] cnt = new int[n + 1];
            int max = 0, min = n + 1, total = 0;
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    total++;
                    cnt[nums[i]]++;
                    max = Math.max(max, nums[i]);
                    min = Math.min(min, nums[i]);
                }
            }
            if (total % k != 0) {
                continue;
            }
            boolean flag = true;
            for (int i = 1; i <= n; i++) {
                if (cnt[i] > 1) {
                    flag = false;
                    break;
                }
            }
            if (!flag) {
                continue;
            }
            int submask = mask;
            do {
                if (dp[submask] != -1 && dp[mask ^ submask] != -1) {
                    if (dp[mask] == -1) {
                        dp[mask] = dp[submask] + dp[mask ^ submask] + max - min;
                    } else {
                        dp[mask] = Math.min(dp[mask], dp[submask] + dp[mask ^ submask] + max - min);
                    }
                }
                submask = (submask - 1) & mask;
            } while (submask != mask);
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.length;
        int m = n / k;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < (1 << n); i++) {
            int[] cnt = new int[17];
            int max = 0;
            int min = 17;
            int c = 0;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    cnt[nums[j]]++;
                    if (cnt[nums[j]] > 1) {
                        c = 1;
                        break;
                    }
                    max = Math.max(max, nums[j]);
                    min = Math.min(min, nums[j]);
                }
            }
            if (c == 1) {
                continue;
            }
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {
                    dp[i] = Math.min(dp[i], dp[i ^ (1 << j)] + max - min);
                }
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = nums.length;
        int m = n / k;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < 1 << n; i++) {
            int[] cnt = new int[17];
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    cnt[nums[j]]++;
                    if (cnt[nums[j]] > 1) {
                        valid = false;
                        break;
                    }
                    min = Math.min(min, nums[j]);
                    max = Math.max(max, nums[j]);
                }
            }
            if (!valid) {
                continue;
            }
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 1) {
                    dp[i] = Math.min(dp[i], dp[i - (1 << j)] + max - min);
                }
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = nums.length;
        int m = n / k;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == Integer.MAX_VALUE) {
                continue;
            }
            int[] count = new int[17];
            int[] min = new int[17];
            int[] max = new int[17];
            Arrays.fill(min, Integer.MAX_VALUE);
            Arrays.fill(max, -1);
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    count[nums[i]]++;
                    min[nums[i]] = Math.min(min[nums[i]], nums[i]);
                    max[nums[i]] = Math.max(max[nums[i]], nums[i]);
                }
            }
            for (int i = 1; i <= n; i++) {
                if (count[i] == m) {
                    int newMask = mask;
                    for (int j = 0; j < n; j++) {
                        if (nums[j] == i) {
                            newMask |= (1 << j);
                        }
                    }
                    dp[newMask] = Math.min(dp[newMask], dp[mask] + max[i] - min[i]);
                }
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = nums.length;
        int m = n / k;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int mask = 0; mask < (1 << n); mask++) {
            if (dp[mask] == Integer.MAX_VALUE) {
                continue;
            }
            int[] count = new int[17];
            int[] min = new int[17];
            int[] max = new int[17];
            Arrays.fill(min, Integer.MAX_VALUE);
            Arrays.fill(max, -1);
            for (int i = 0; i < n; i++) {
                if (((mask >> i) & 1) == 1) {
                    count[nums[i]]++;
                    min[nums[i]] = Math.min(min[nums[i]], nums[i]);
                    max[nums[i]] = Math.max(max[nums[i]], nums[i]);
                }
            }
            for (int i = 1; i <= n; i++) { 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
       for (int i = ; i <= k; i++) {
            int[ next = new int[1 << n];
            Arrays.fill(next, Integer.MAX_VALUE);
            int start = (1 << n) / k * (i - 1);
            int end = (1 << n) / k * i;
            for (int j = start; j < end; j++) {
                if (dp[j] == Integer.MAX_VALUE) continue;
                int[] used = new int[17];
                for (int l = 0; l < n; l++) {
                    if ((j & (1 << l)) == 0) continue;
                    used[nums[l]]++;
                }
                for (int l = 0; l < n; l++) {
                    if ((j & (1 << l)) != 0) continue;
                    if (used[nums[l]] > 0) continue;
                    used[nums[l]]++;
                    next[j | (1 << l)] = Math.min(next[j | (1 << l)], dp[j] + getDiff(j, nums, l));
                }
            }
            dp = next;
        }
        return dp[(1 << n) - 1];
    }
    private int getDiff(int j, int[] nums, int l) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if ((j & (1 << i)) == 0) continue;
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        return max - min
                if (count[i] == m) {
                    int newMask = mask;
                    for (int j = 0; j < n; j++) {
                        if (nums[j] == i) {
                            newMask |= (1 << j);
                        }
                    }
                    dp[newMask] = Math.min(dp[newMask], dp[mask] + max[i] - min[i]);
                }
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 0; i < 1 << n; i++) {
            if (dp[i] == Integer.MAX_VALUE) continue;
            int[] seen = new int[17];
            for (int j = 0; j < n; j++) {
                if (((i >> j) & 1) == 0) {
                    if (++seen[nums[j]] > 1) break;
                    int max = nums[j], min = nums[j];
                    for (int l = 0; l < n; l++) {
                        if (((i >> l) & 1) == 1) {
                            max = Math.max(max, nums[l]);
                            min = Math.min(min, nums[l]);
                        }
                    }
                    dp[i | (1 << j)] = Math.min(dp[i | (1 << j)], dp[i] + max - min);
                }
            }
        }
        return dp[(1 << n) - 1] == Integer.MAX_VALUE ? -1 : dp[(1 << n) - 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i <= k; i++) {
            int[] next = new int[1 << n];
            Arrays.fill(next, Integer.MAX_VALUE);
            int start = (1 << n) / k * (i - 1);
            int end = (1 << n) / k * i;
            for (int j = start; j < end; j++) {
                if (dp[j] == Integer.MAX_VALUE) continue;
                int[] used = new int[17];
                for (int l = 0; l < n; l++) {
                    if ((j & (1 << l)) == 0) continue;
                    used[nums[l]]++;
                }
                for (int l = 0; l < n; l++) {
                    if ((j & (1 << l)) != 0) continue;
                    if (used[nums[l]] > 0) continue;
                    used[nums[l]]++;
                    next[j | (1 << l)] = Math.min(next[j | (1 << l)], dp[j] + getDiff(j, nums, l));
                }
            }
            dp = next;
        }
        return dp[(1 << n) - 1];
    }
    private int getDiff(int j, int[] nums, int l) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if ((j & (1 << i)) == 0) continue;
            min = Math.min(min, nums[i]);
            max = Math.max(max, nums[i]);
        }
        return max - min;

=======

        int n = nums.length;
        int[] dp = new int[1<<n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int mask = 0; mask < (1<<n); mask++) {
            if (dp[mask] == -1) continue;
            int[] cnt = new int[17];
            int max = 0, min = 17;
            for (int i = 0; i < n; i++) {
                if ((mask & (1<<i)) != 0) {
                    cnt[nums[i]]++;
                    max = Math.max(max, nums[i]);
                    min = Math.min(min, nums[i]);
                }
            }
            if (max == min) continue;
            if (max - min > 1) {
                for (int i = 0; i < n; i++) {
                    if ((mask & (1<<i)) == 0) {
                        dp[mask | (1<<i)] = -1;
                    }
                }
                continue;
            }
            int rem = n - Integer.bitCount(mask);
            int size = rem / k;
            for (int i = 0; i < n; i++) {
                if ((mask & (1<<i)) == 0) {
                    if (cnt[nums[i]] < size) {
                        dp[mask | (1<<i)] = dp[mask] + max - min;
                    }
                }
            }
        }
        return dp[(1<<n) - 1];

=======

        int n = nums.length;
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        int[] mask = new int[1 << n];
        for (int i = 0; i < 1 << n; i++) {
            int[] count = new int[17];
            boolean valid = true;
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    count[nums[j]]++;
                    if (count[nums[j]] > 1) {
                        valid = false;
                        break;
                    }
                }
            }
            if (valid) {
                mask[i] = i;
                for (int j = 0; j < n; j++) {
                    if ((i & (1 << j)) > 0) {
                        mask[i] = mask[i] & ~(1 << j);
                    }
                }
            }
        }
        for (int i = 0; i < 1 << n; i++) {
            if (dp[i] < 0) {
                continue;
            }
            for (int j = mask[i]; j > 0; j = (j - 1) & mask[i]) {
                if (Integer.bitCount(j) % (n / k) == 0) {
                    int next = i | j;
                    int min = Integer.MAX_VALUE;
                    int max = Integer.MIN_VALUE;
                    for (int l = 0; l < n; l++) {
                        if ((j & (1 << l)) > 0) {
                            min = Math.min(min, nums[l]);
                            max = Math.max(max, nums[l]);
                        }
                    }
                    if (dp[next] < 0) {
                        dp[next] = dp[i] + max - min;
                    } else {
                        dp[next] = Math.min(dp[next], dp[i] + max - min);
                    }
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int n = nums.length;
        int m = n / k;
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        int[] d = new int[n];
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nums[i];
            b[i] = nums[i];
            c[i] = nums[i];
            d[i] = nums[i];
            e[i] = nums[i];
        }
        Arrays.sort(a);
        Arrays.sort(b);
        Arrays.sort(c);
        Arrays.sort(d);
        Arrays.sort(e);
        int[][] f = new int[n][n];
        int[][] g = new int[n][n];
        int[][] h = new int[n][n];
        int[][] i = new int[n][n];
        int[][] j = new int[n][n];
        for (int l = 0; l < n; l++) {
            f[l][l] = a[l];
            g[l][l] = b[l];
            h[l][l] = c[l];
            i[l][l] = d[l];
            j[l][l] = e[l];
        }
        for (int l = 1; l < n; l++) {
            for (int o = 0; o < n - l; o++) {
                f[o][o + l] = f[o][o + l - 1] + a[o + l];
                g[o][o + l] = g[o][o + l - 1] + b[o + l];
                h[o][o + l] = h[o][o + l - 1] + c[o + l];
                i[o][o + l] = i[o][o + l - 1] + d[o + l];
                j[o][o + l] = j[o][o + l - 1] + e[o + l];
            }
        }
        int[][] dp = new int[k][1 << n];
        for (int l = 0; l < k; l++) {
            Arrays.fill(dp[l], Integer.MAX_VALUE);
        }
        for (int l = 0; l < (1 << n); l++) {
            if (Integer.bitCount(l) == m
