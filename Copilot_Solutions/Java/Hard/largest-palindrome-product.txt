Synthesizing 10/10 solutions (Duplicates hidden)

=======

        if (n == 1) {
            return 9;
        }
        int upper = (int) Math.pow(10, n) - 1;
        int lower = upper / 10;
        for (int i = upper; i > lower; i--) {
            long palindrome = createPalindrome(i);
            for (long j = upper; j * j >= palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int) (palindrome % 1337);
                }
            }
        }
        return -1;

=======

        if (n == 1) {
            return 9;
        }
        int upper = (int) Math.pow(10, n) - 1;
        int lower = upper / 10;
        for (int i = upper; i > lower; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = upper; j * j > palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int) (palindrome % 1337);
                }
            }
        }
        return -1;

=======

        if (n == 1) return 9;
        int upper = (int) Math.pow(10, n) - 1;
        int lower = upper / 10;
        for (int i = upper; i > lower; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = upper; j * j >= palindrome; j--) {
                if (palindrome % j == 0) return (int) (palindrome % 1337);
            }
        }
        return -1;

=======

        if (n == 1) {
            return 9;
        }
        int upper = (int)Math.pow(10, n) - 1;
        int lower = upper / 10;
        for (int i = upper; i > lower; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = upper; j * j >= palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int)(palindrome % 1337);
                }
            }
        }
        return -1;

=======

        if (n == 1) {
            return 9;
        }
        int max = (int) Math.pow(10, n) - 1;
        int min = max / 10;
        for (int i = max; i > min; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = max; j * j >= palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int) (palindrome % 1337);
                }
            }
        }
        return 0;

=======

        if (n == 1) {
            return 9;
        }
        int max = (int) Math.pow(10, n) - 1;
        int min = max / 10;
        for (int i = max; i > min; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = max; j * j >= palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int) (palindrome % 1337);
                }
            }
        }
        return -1;

=======

        if (n == 1) {
            return 9;
        }
        int max = (int) Math.pow(10, n) - 1;
        int min = max / 10;
        for (int i = max; i > min; i--) {
            long palindrome = Long.parseLong(i + new StringBuilder().append(i).reverse().toString());
            for (long j = max; j * j > palindrome; j--) {
                if (palindrome % j == 0) {
                    return (int) (palindrome % 1337);
                }
            }
        }
        return 9;

=======

        if (n == 1) return 9;
        int upper = (int) Math.pow(10, n) - 1;
        int lower = (int) Math.pow(10, n - 1);
        for (int i = upper; i >= lower; i--) {
            long pal = getPalindrome(i);
            for (long j = upper; j * j >= pal; j--) {
                if (pal % j == 0) return (int) (pal % 1337);
            }
        }
        return -1;
