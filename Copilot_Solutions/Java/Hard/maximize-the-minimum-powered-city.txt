Synthesizing 10/10 solutions

=======

        int n = stations.length;
        int[] gaps = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            gaps[i] = stations[i + 1] - stations[i];
        }
        long left = 1;
        long right = 1_000_000_000;
        while (left < right) {
            long mid = (left + right + 1) / 2;
            if (check(gaps, r, k, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int[] gaps, int r, int k, long mid) {
        long count = 0;
        for (int gap : gaps) {
            if (gap > 2 * r) {
                count += (gap - 2 * r + 2 * r - 1) / (2 * r + 1);
            }
            if (count > k) {
                return false;
            }
        }
        return true;

=======

        int n = stations.length;
        int[] d = new int[n - 1];
        for (int i = 0; i < n - 1; i++) {
            d[i] = stations[i + 1] - stations[i] - 1;
        }
        Arrays.sort(d);
        long sum = 0;
        for (int i = 0; i < n - 1 - r; i++) {
            sum += d[i];
        }
        long ans = stations[n - 1] - stations[0] + 1;
        for (int i = 0; i < n - 1; i++) {
            int len = stations[i + 1] - stations[i] - 1;
            if (len <= 2 * r) {
                long need = (long) (len + 1) * (len + 2) / 2 - (long) (len - r + 1) * (len - r + 2) / 2;
                if (need <= k) {
                    ans = Math.max(ans, stations[n - 1] - stations[0] + 1 + need);
                    k -= need;
                } else {
                    ans = Math.max(ans, stations[n - 1] - stations[0] + 1 + k);
                    break;
                }
            } else {
                long need = (long) (r + 1) * (r + 2) / 2;
                if (need <= k) {
                    ans = Math.max(ans, stations[n - 1] - stations[0] + 1 + need);
                    k -= need;
                } else {
                    ans = Math.max(ans, stations[n - 1] - stations[0] + 1 + k);
                    break;
                }
            }
        }
        return ans;

=======

        int n = stations.length;
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = stations[i];
        }
        long l = 0, h = 1_000_000_000_000_000_000L;
        while (l < h) {
            long m = (l + h + 1) / 2;
            if (possible(a, r, k, m)) {
                l = m;
            } else {
                h = m - 1;
            }
        }
        return l;
    }
    
    private boolean possible(long[] a, int r, int k, long m) {
        int n = a.length;
        long[] b = new long[n];
        for (int i = 0; i < n; i++) {
            b[i] = a[i] + r * m;
        }
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (b[i] < a[i]) {
                return false;
            }
            while (j < n && b[j] < a[i]) {
                j++;
            }
            k -= j - i;
        }
        return k >= 0;

=======

        int n = stations.length;
        long[] gaps = new long[n-1];
        for (int i = 0; i < n-1; i++) {
            gaps[i] = stations[i+1] - stations[i] - 1;
        }
        long lo = 0;
        long hi = (long) 1e9;
        while (lo < hi) {
            long mid = (lo + hi + 1) / 2;
            if (check(gaps, r, k, mid)) {
                lo = mid;
            } else {
                hi = mid - 1;
            }
        }
        return lo;
    }

    public boolean check(long[] gaps, int r, int k, long mid) {
        int n = gaps.length;
        long cnt = 0;
        for (int i = 0; i < n; i++) {
            long gap = gaps[i];
            if (gap <= 2 * r) {
                long add = gap / (r + 1);
                if (gap % (r + 1) != 0) {
                    add++;
                }
                cnt += add;
            } else {
                cnt += (gap - 2 * r + r) / (r + 1);
            }
        }
        return cnt <= k;

=======

        int n = stations.length;
        long[] p = new long[n];
        p[0] = 1;
        for (int i = 1; i < n; i++) {
            p[i] = p[i - 1] * 2;
            if (p[i] >= k) {
                p[i] = k;
            }
        }
        long[] dp = new long[n];
        Arrays.fill(dp, Long.MAX_VALUE);
        dp[0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (stations[j] - stations[i] > 2 * r) {
                    break;
                }
                if (dp[j] > dp[i] + p[j - i - 1]) {
                    dp[j] = dp[i] + p[j - i - 1];
                }
            }
        }
        return dp[n - 1];

=======

        int n = stations.length;
        long left = 0, right = 0;
        for (int i = 0; i < n - 1; i++) {
            right = Math.max(right, (long) (stations[i + 1] - stations[i]) / (r * 2 + 1));
        }
        while (left < right) {
            long mid = (left + right + 1) / 2;
            if (check(stations, r, k, mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int[] stations, int r, int k, long mid) {
        long cnt = 0;
        int n = stations.length;
        for (int i = 0; i < n - 1; i++) {
            long l = stations[i] + mid * (r * 2 + 1);
            long r1 = stations[i + 1] - mid * (r * 2 + 1);
            if (l < r1) {
                cnt += (r1 - l) / (r * 2 + 1);
                if ((r1 - l) % (r * 2 + 1) != 0) {
                    cnt++;
                }
            }
        }
        return cnt <= k;

=======

        long l = 0;
        long r = 1000000000;
        long ans = 0;
        while (l <= r) {
            long mid = l + (r - l) / 2;
            if (check(stations, r, mid)) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }

    private boolean check(int[] stations, int r, long mid) {
        long cnt = 0;
        for (int i = 0; i < stations.length; i++) {
            int start = stations[i] - r;
            int end = stations[i] + r;
            long left = Math.max(0, start);
            long right = Math.min(mid, end);
            cnt += (right - left) / (r + 1);
        }
        return cnt >= k;

=======

        long l = 1, r = (long) 1e18;
        while (l < r) {
            long mid = (l + r + 1) >> 1;
            if (check(stations, r, k, mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(int[] stations, int r, int k, long mid) {
        int cnt = 0;
        for (int i = 0; i < stations.length; i++) {
            int l = stations[i], r = stations[i];
            while (i + 1 < stations.length && stations[i + 1] <= r + r) {
                l = stations[i + 1];
                i++;
            }
            cnt += (l - r + r) / (r + r + 1);
        }
        return cnt <= k;

=======

        int n = stations.length;
        long[] dp = new long[n];
        for (int i = 0; i < n; i++) {
            int l = Math.max(0, i - r);
            int h = Math.min(n - 1, i + r);
            dp[i] = (long) (h - l + 1);
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (stations[j] - stations[i] > 2 * r) {
                    break;
                }
                dp[j] = Math.max(dp[j], dp[i] + (long) (j - i + 1 + 2 * r));
            }
        }
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, dp[i] + (long) (k * (2 * r + 1)));
        }
        return ans;

=======

        int n = stations.length;
        long[] dp = new long[n];
        Arrays.fill(dp, Long.MAX_VALUE);
        for (int i = 0; i < k; i++) {
            long[] next = new long[n];
            Arrays.fill(next, Long.MAX_VALUE);
            for (int j = 0; j < n; j++) {
                int l = Math.max(0, j - r);
                int m = Math.min(n - 1, j + r);
                for (int a = l; a <= m; a++) {
                    next[a] = Math.min(next[a], dp[j] + Math.abs(stations[j] - stations[a]));
                }
            }
            dp = next;
        }
        long ans = Long.MAX_VALUE;
        for (long x : dp) {
            ans = Math.min(ans, x);
        }
        return ans;
