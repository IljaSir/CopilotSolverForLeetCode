Synthesizing 10/10 solutions

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1);
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            int p = cars[i][0], s = cars[i][1];
            while (!stack.isEmpty()) {
                int j = stack.peek();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s <= s2 || (res[j] > 0 && (p2 - p) / (s - s2) >= res[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek();
                res[i] = (cars[j][0] - cars[i][0]) * 1.0 / (cars[i][1] - cars[j][1]);
            }
            stack.push(i);
        }
        return res;

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1.0);
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && (res[stack.peek()] < 0 || (double) (cars[stack.peek()][1] - cars[i][1]) / (cars[i][0] - cars[stack.peek()][0]) >= res[stack.peek()])) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                res[i] = (double) (cars[stack.peek()][0] - cars[i][0]) / (cars[i][1] - cars[stack.peek()][1]);
            }
            stack.push(i);
        }
        return res;

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1.0);
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i][0], s = cars[i][1];
            while (!stack.isEmpty()) {
                int j = stack.peek(), p2 = cars[j][0], s2 = cars[j][1];
                if (s <= s2 || (res[j] > 0 && (p2 - p) / (s - s2) >= res[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek();
                res[i] = (cars[j][0] - p) / (s - cars[j][1]);
            }
            stack.push(i);
        }
        return res;

=======

        int n = cars.length;
        double[] ans = new double[n];
        Arrays.fill(ans, -1.0);
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i][0], s = cars[i][1];
            while (!stack.empty()) {
                int j = stack.peek();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s <= s2 || (ans[j] > 0 && (p2 - p) / (s - s2) >= ans[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.empty()) {
                int j = stack.peek();
                ans[i] = (cars[j][0] - cars[i][0]) / (cars[i][1] - cars[j][1]);
            }
            stack.push(i);
        }
        return ans;

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1);
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = n - 1; i >= 0; --i) {
            int p = cars[i][0], s = cars[i][1];
            while (!stack.isEmpty()) {
                int j = stack.peek(), pj = cars[j][0], sj = cars[j][1];
                if (s <= sj || (res[j] > 0 && (pj - p) / (s - sj) >= res[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek(), pj = cars[j][0], sj = cars[j][1];
                res[i] = (pj - p) / (s - sj);
            }
            stack.push(i);
        }
        return res;

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1);
        Stack<int[]> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            int[] car = cars[i];
            while (!stack.isEmpty()) {
                int[] top = stack.peek();
                double t = (double)(top[0] - car[0]) / (car[1] - top[1]);
                if (t <= 0 || t >= res[top[2]] && res[top[2]] > 0) {
                    stack.pop();
                } else {
                    res[i] = t;
                    break;
                }
            }
            stack.push(new int[]{car[0], car[1], i});
        }
        return res;

=======

        int n = cars.length;
        double[] ans = new double[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; --i) {
            ans[i] = -1.0;
            int[] car = cars[i];
            while (!stack.isEmpty()) {
                int j = stack.peek();
                int[] car2 = cars[j];
                if (car[1] <= car2[1] || (ans[j] > 0 && (double) (car2[0] - car[0]) / (car[1] - car2[1]) >= ans[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek();
                ans[i] = (double) (car[0] - cars[j][0]) / (cars[j][1] - car[1]);
            }
            stack.push(i);
        }
        return ans;

=======

        int n = cars.length;
        double[] res = new double[n];
        Arrays.fill(res, -1.0);
        Stack<Integer> st = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            int pos = cars[i][0], speed = cars[i][1];
            while (!st.isEmpty()) {
                int j = st.peek();
                int pos2 = cars[j][0], speed2 = cars[j][1];
                if (speed <= speed2 || (res[j] > 0 && (pos2 - pos) / (double) (speed - speed2) >= res[j])) {
                    st.pop();
                } else {
                    break;
                }
            }
            if (!st.isEmpty()) {
                int j = st.peek();
                int pos2 = cars[j][0], speed2 = cars[j][1];
                res[i] = (pos2 - pos) / (double) (speed - speed2);
            }
            st.push(i);
        }
        return res;

=======

        int n = cars.length;
        double[] ans = new double[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; i--) {
            ans[i] = -1.0;
            int pos = cars[i][0], speed = cars[i][1];
            while (!stack.isEmpty()) {
                int j = stack.peek();
                int pos2 = cars[j][0], speed2 = cars[j][1];
                if (speed <= speed2 || (ans[j] > 0 && (pos2 - pos) / (double) (speed - speed2) >= ans[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek();
                ans[i] = (cars[j][0] - cars[i][0]) / (double) (cars[i][1] - cars[j][1]);
            }
            stack.push(i);
        }
        return ans;

=======

        int n = cars.length;
        double[] ans = new double[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = n - 1; i >= 0; --i) {
            ans[i] = -1.0;
            int p = cars[i][0], s = cars[i][1];
            while (!stack.isEmpty()) {
                int j = stack.peek();
                int p2 = cars[j][0], s2 = cars[j][1];
                if (s <= s2 || (ans[j] > 0 && (p2 - p) / (s - s2) >= ans[j])) {
                    stack.pop();
                } else {
                    break;
                }
            }
            if (!stack.isEmpty()) {
                int j = stack.peek();
                ans[i] = (cars[j][0] - cars[i][0]) / (cars[i][1] - cars[j][1]);
            }
            stack.push(i);
        }
        return ans;
