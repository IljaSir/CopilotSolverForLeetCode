Synthesizing 10/10 solutions

=======

        int total = (int) Math.pow(k, n);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append('0');
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        dfs(sb, total, visited, n, k);
        return sb.toString();
    }
    private boolean dfs(StringBuilder sb, int total, Set<String> visited, int n, int k) {
        if (visited.size() == total) {
            return true;
        }
        String prev = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String next = prev + i;
            if (!visited.contains(next)) {
                visited.add(next);
                sb.append(i);
                if (dfs(sb, total, visited, n, k)) {
                    return true;
                }
                visited.remove(next);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return false;

=======

        int total = (int) Math.pow(k, n);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append("0");
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        dfs(sb, visited, total, n, k);
        return sb.toString();
    }

    private boolean dfs(StringBuilder sb, Set<String> visited, int total, int n, int k) {
        if (visited.size() == total) {
            return true;
        }
        String prev = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String next = prev + i;
            if (!visited.contains(next)) {
                visited.add(next);
                sb.append(i);
                if (dfs(sb, visited, total, n, k)) {
                    return true;
                }
                visited.remove(next);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return false;

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append('0');
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        int total = (int) Math.pow(k, n);
        dfs(sb, visited, total, n, k);
        return sb.toString();
    }
    
    private boolean dfs(StringBuilder sb, Set<String> visited, int total, int n, int k) {
        if (visited.size() == total) {
            return true;
        }
        String pre = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String cur = pre + i;
            if (!visited.contains(cur)) {
                visited.add(cur);
                sb.append(i);
                if (dfs(sb, visited, total, n, k)) {
                    return true;
                }
                visited.remove(cur);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return false;

=======

        if (n == 1 && k == 1) {
            return "0";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n-1; i++) {
            sb.append("0");
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        dfs(sb, visited, n, k);
        return sb.toString();
    }
    
    private void dfs(StringBuilder sb, Set<String> visited, int n, int k) {
        if (visited.size() == Math.pow(k, n)) {
            return;
        }
        String prev = sb.substring(sb.length()-n+1);
        for (char c = '0'; c < '0'+k; c++) {
            String next = prev + c;
            if (!visited.contains(next)) {
                visited.add(next);
                sb.append(c);
                dfs(sb, visited, n, k);
            }
        }

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append("0");
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        int total = (int) Math.pow(k, n);
        dfs(sb, visited, total, n, k);
        return sb.toString();
    }
    private boolean dfs(StringBuilder sb, Set<String> visited, int total, int n, int k) {
        if (visited.size() == total) {
            return true;
        }
        String last = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String next = last + i;
            if (!visited.contains(next)) {
                visited.add(next);
                sb.append(i);
                if (dfs(sb, visited, total, n, k)) {
                    return true;
                }
                sb.deleteCharAt(sb.length() - 1);
                visited.remove(next);
            }
        }
        return false;

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append("0");
        }
        Set<String> visited = new HashSet<>();
        visited.add(sb.toString());
        dfs(sb, visited, n, k);
        return sb.toString();
    }
    
    private boolean dfs(StringBuilder sb, Set<String> visited, int n, int k) {
        if (visited.size() == Math.pow(k, n)) {
            return true;
        }
        String prev = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String next = prev + i;
            if (!visited.contains(next)) {
                visited.add(next);
                sb.append(i);
                if (dfs(sb, visited, n, k)) {
                    return true;
                }
                visited.remove(next);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return false;

=======

        HashSet<String> visited = new HashSet<>();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append("0");
        }
        String start = sb.toString();
        visited.add(start);
        dfs(start, visited, n, k);
        return sb.toString();
    }
    private boolean dfs(String node, HashSet<String> visited, int n, int k) {
        if (visited.size() == Math.pow(k, n)) {
            return true;
        }
        for (int i = 0; i < k; i++) {
            String next = node.substring(1) + i;
            if (!visited.contains(next)) {
                visited.add(next);
                if (dfs(next, visited, n, k)) {
                    return true;
                }
                visited.remove(next);
            }
        }
        return false;

=======

        StringBuilder sb = new StringBuilder();
        int total = (int) Math.pow(k, n);
        Set<String> visited = new HashSet<>();
        for (int i = 0; i < n; i++) {
            sb.append('0');
        }
        visited.add(sb.toString());
        dfs(sb, visited, total, n, k);
        return sb.toString();
    }

    private boolean dfs(StringBuilder sb, Set<String> visited, int total, int n, int k) {
        if (visited.size() == total) {
            return true;
        }
        String last = sb.substring(sb.length() - n + 1);
        for (int i = 0; i < k; i++) {
            String next = last + i;
            if (visited.contains(next)) {
                continue;
            }
            visited.add(next);
            sb.append(i);
            if (dfs(sb, visited, total, n, k)) {
                return true;
            }
            sb.deleteCharAt(sb.length() - 1);
            visited.remove(next);
        }
        return false;

=======

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append('0');
        }
        Set<String> set = new HashSet<>();
        set.add(sb.toString());
        int total = (int) Math.pow(k, n);
        dfs(sb, set, total, k);
        return sb.toString();
    }
    
    private boolean dfs(StringBuilder sb, Set<String> set, int total, int k) {
        if (set.size() == total) {
            return true;
        }
        String prev = sb.substring(sb.length() - (sb.length() - sb.length() / k * k));
        for (int i = 0; i < k; i++) {
            String next = prev + i;
            if (!set.contains(next)) {
                set.add(next);
                sb.append(i);
                if (dfs(sb, set, total, k)) {
                    return true;
                }
                set.remove(next);
                sb.deleteCharAt(sb.length() - 1);
            }
        }
        return false;

=======

        String start = new String(new char[n]).replace("\0", "0");
        Set<String> seen = new HashSet();
        StringBuilder ans = new StringBuilder();
        dfs(start, k, seen, ans);
        ans.append(start);
        return new String(ans);
    }

    public void dfs(String node, int k, Set<String> seen, StringBuilder ans) {
        for (int x = 0; x < k; ++x) {
            String nei = node + x;
            if (!seen.contains(nei)) {
                seen.add(nei);
                dfs(nei.substring(1), k, seen, ans);
                ans.append(x);
            }
        }
