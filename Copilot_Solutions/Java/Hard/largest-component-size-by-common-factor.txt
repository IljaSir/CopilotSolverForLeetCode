Synthesizing 10/10 solutions

=======

        int n = nums.length;
        UnionFind uf = new UnionFind(n);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = 2; j * j <= x; j++) {
                if (x % j == 0) {
                    if (!map.containsKey(j)) {
                        map.put(j, i);
                    } else {
                        uf.union(map.get(j), i);
                    }
                    if (!map.containsKey(x / j)) {
                        map.put(x / j, i);
                    } else {
                        uf.union(map.get(x / j), i);
                    }
                }
            }
            if (!map.containsKey(x)) {
                map.put(x, i);
            } else {
                uf.union(map.get(x), i);
            }
        }
        return uf.maxSize;
    }
}

=======

        int n = nums.length;
        UnionFind uf = new UnionFind(n);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = nums[i];
            for (int j = 2; j * j <= x; j++) {
                if (x % j == 0) {
                    if (!map.containsKey(j)) {
                        map.put(j, i);
                    } else {
                        uf.union(i, map.get(j));
                    }
                    if (!map.containsKey(x / j)) {
                        map.put(x / j, i);
                    } else {
                        uf.union(i, map.get(x / j));
                    }
                }
            }
            if (!map.containsKey(x)) {
                map.put(x, i);
            } else {
                uf.union(i, map.get(x));
            }
        }
        return uf.maxSize;
    }
}

=======

        int n = nums.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (gcd(nums[i], nums[j]) > 1) {
                    union(parent, i, j);
                }
            }
        }
        int[] cnt = new int[n];
        int res = 1;
        for (int i = 0; i < n; i++) {
            int p = find(parent, i);
            cnt[p]++;
            res = Math.max(res, cnt[p]);
        }
        return res;
    }
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }

=======

        int n = nums.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            for (int j = 2; j * j <= num; j++) {
                if (num % j == 0) {
                    if (!map.containsKey(j)) {
                        map.put(j, i);
                    } else {
                        union(parent, i, map.get(j));
                    }
                    if (!map.containsKey(num / j)) {
                        map.put(num / j, i);
                    } else {
                        union(parent, i, map.get(num / j));
                    }
                }
            }
            if (!map.containsKey(num)) {
                map.put(num, i);
            } else {
                union(parent, i, map.get(num));
            }
        }
        int ans = 0;
        int[] count = new int[n];
        for (int i = 0; i < n; i++) {
            count[find(parent, i)]++;
            ans = Math.max(ans, count[find(parent, i)]);
        }
        return ans;
    }

    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }

    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }

=======

        int n = nums.length;
        int[] parent = new int[n];
        int[] size = new int[n];
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int sqrt = (int) Math.sqrt(num);
            for (int j = 2; j <= sqrt; j++) {
                if (num % j == 0) {
                    int p = find(parent, map.getOrDefault(j, i));
                    int q = find(parent, map.getOrDefault(num / j, i));
                    if (p != q) {
                        parent[p] = q;
                        size[q] += size[p];
                    }
                }
            }
            map.put(num, i);
        }
        int ans = 1;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, size[find(parent, i)]);
        }
        return ans;
    }

    private int find(int[] parent, int i) {
        if (i != parent[i]) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = nums.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
        int[] size = new int[n];
        Arrays.fill(size, 1);
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            for (int j = 2; j * j <= num; ++j) {
                if (num % j == 0) {
                    int p = find(parent, i);
                    int q = find(parent, findIndex(nums, j));
                    if (p != q) {
                        parent[p] = q;
                        size[q] += size[p];
                    }
                    while (num % j == 0) {
                        num /= j;
                    }
                }
            }
            if (num > 1) {
                int p = find(parent, i);
                int q = find(parent, findIndex(nums, num));
                if (p != q) {
                    parent[p] = q;
                    size[q] += size[p];
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = Math.max(ans, size[find(parent, i)]);
        }
        return ans;
    }

    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }

    private int findIndex(int[] nums, int num) {
        int i = 0;
        while (nums[i] != num) {
            ++i;
        }
        return i;

=======

        int[] uf = new int[100001];
        for (int i = 0; i < uf.length; i++) {
            uf[i] = i;
        }
        for (int num : nums) {
            for (int i = 2; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    union(uf, num, i);
                    union(uf, num, num / i);
                }
            }
        }
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (int num : nums) {
            int root = find(uf, num);
            map.put(root, map.getOrDefault(root, 0) + 1);
            max = Math.max(max, map.get(root));
        }
        return max;
    }
    private int find(int[] uf, int i) {
        if (uf[i] != i) {
            uf[i] = find(uf, uf[i]);
        }
        return uf[i];
    }
    private void union(int[] uf, int i, int j) {
        int rootI = find(uf, i);
        int rootJ = find(uf, j);
        if (rootI != rootJ) {
            uf[rootI] = rootJ;
        }

=======

        int N = nums.length;
        int[] uf = new int[N];
        for (int i = 0; i < N; i++) {
            uf[i] = i;
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < N; i++) {
            int num = nums[i];
            for (int j = 2; j * j <= num; j++) {
                if (num % j == 0) {
                    union(i, map.getOrDefault(j, i), uf);
                    union(i, map.getOrDefault(num / j, i), uf);
                    map.put(j, i);
                    map.put(num / j, i);
                }
            }
        }
        int[] count = new int[N];
        int max = 0;
        for (int i = 0; i < N; i++) {
            max = Math.max(max, ++count[find(i, uf)]);
        }
        return max;
    }

    private void union(int i, int j, int[] uf) {
        int fi = find(i, uf);
        int fj = find(j, uf);
        if (fi != fj) {
            uf[fi] = fj;
        }
    }

    private int find(int i, int[] uf) {
        if (uf[i] != i) {
            uf[i] = find(uf[i], uf);
        }
        return uf[i];

=======

        int N = nums.length;
        int[] parent = new int[N];
        for (int i = 0; i < N; ++i) {
            parent[i] = i;
        }
        Map<Integer, Integer> map = new HashMap();
        for (int i = 0; i < N; ++i) {
            int num = nums[i];
            for (int j = 2; j * j <= num; ++j) {
                if (num % j == 0) {
                    if (!map.containsKey(j)) {
                        map.put(j, i);
                    } else {
                        union(parent, i, map.get(j));
                    }
                    if (!map.containsKey(num / j)) {
                        map.put(num / j, i);
                    } else {
                        union(parent, i, map.get(num / j));
                    }
                }
            }
            if (!map.containsKey(num)) {
                map.put(num, i);
            } else {
                union(parent, i, map.get(num));
            }
        }

        int[] count = new int[N];
        int ans = 0;
        for (int i = 0; i < N; ++i) {
            int root = find(parent, i);
            count[root]++;
            ans = Math.max(ans, count[root]);
        }
        return ans;
    }

    public void union(int[] parent, int index1, int index2) {
        parent[find(parent, index1)] = find(parent, index2);
    }

    public int find(int[] parent, int index) {
        if (parent[index] != index) {
            parent[index] = find(parent, parent[index]);
        }
        return parent[index];

=======

        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int[] size = new int[n];
        int max = 1;
        for (int i = 0; i < n; i++) {
            int num = nums[i];
            int root1 = i;
            for (int j = 2; j <= Math.sqrt(num); j++) {
                if (num % j == 0) {
                    int root2 = map.getOrDefault(j, j);
                    while (root2 != size[root2]) {
                        root2 = size[root2];
                    }
                    size[root1] = root2;
                    root1 = root2;
                    
                    int root3 = map.getOrDefault(num / j, num / j);
                    while (root3 != size[root3]) {
                        root3 = size[root3];
                    }
                    size[root1] = root3;
                    root1 = root3;
                }
            }
            map.put(num, root1);
            size[root1]++;
            max = Math.max(max, size[root1]);
        }
        return max;
