Synthesizing 10/10 solutions

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    
    private int atMostK(int[] nums, int k) {
        int i = 0, res = 0;
        Map<Integer, Integer> count = new HashMap<>();
        for (int j = 0; j < nums.length; j++) {
            if (count.getOrDefault(nums[j], 0) == 0) {
                k--;
            }
            count.put(nums[j], count.getOrDefault(nums[j], 0) + 1);
            while (k < 0) {
                count.put(nums[i], count.get(nums[i]) - 1);
                if (count.get(nums[i]) == 0) {
                    k++;
                }
                i++;
            }
            res += j - i + 1;
        }
        return res;

=======

        return atMostKDistinct(nums, k) - atMostKDistinct(nums, k - 1);
    }
    private int atMostKDistinct(int[] nums, int k) {
        int n = nums.length;
        int[] freq = new int[n + 1];
        int left = 0;
        int right = 0;
        int ans = 0;
        int count = 0;
        while (right < n) {
            if (freq[nums[right]] == 0) {
                count++;
            }
            freq[nums[right]]++;
            right++;
            while (count > k) {
                freq[nums[left]]--;
                if (freq[nums[left]] == 0) {
                    count--;
                }
                left++;
            }
            ans += right - left;
        }
        return ans;

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    
    private int atMostK(int[] nums, int k) {
        int n = nums.length;
        int[] count = new int[n + 1];
        int i = 0, res = 0;
        for (int j = 0; j < n; ++j) {
            if (count[nums[j]] == 0) {
                --k;
            }
            ++count[nums[j]];
            while (k < 0) {
                --count[nums[i]];
                if (count[nums[i]] == 0) {
                    ++k;
                }
                ++i;
            }
            res += j - i + 1;
        }
        return res;

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    private int atMostK(int[] nums, int k) {
        int res = 0, i = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int j = 0; j < nums.length; j++) {
            map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
            while (map.size() > k) {
                map.put(nums[i], map.get(nums[i]) - 1);
                if (map.get(nums[i]) == 0) map.remove(nums[i]);
                i++;
            }
            res += j - i + 1;
        }
        return res;

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    private int atMostK(int[] nums, int k) {
        int n = nums.length;
        int[] count = new int[n + 1];
        int left = 0;
        int right = 0;
        int res = 0;
        int distinct = 0;
        while (right < n) {
            if (count[nums[right]] == 0) {
                distinct++;
            }
            count[nums[right]]++;
            right++;
            while (distinct > k) {
                count[nums[left]]--;
                if (count[nums[left]] == 0) {
                    distinct--;
                }
                left++;
            }
            res += right - left;
        }
        return res;

=======

        return atMostKDistinct(nums, k) - atMostKDistinct(nums, k - 1);
    }
    
    public int atMostKDistinct(int[] nums, int k) {
        int res = 0, i = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int j = 0; j < nums.length; j++) {
            if (map.getOrDefault(nums[j], 0) == 0) k--;
            map.put(nums[j], map.getOrDefault(nums[j], 0) + 1);
            while (k < 0) {
                map.put(nums[i], map.get(nums[i]) - 1);
                if (map.get(nums[i]) == 0) k++;
                i++;
            }
            res += j - i + 1;
        }
        return res;

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }
    
    public int atMostK(int[] nums, int k) {
        int count = 0;
        int left = 0;
        int right = 0;
        int[] freq = new int[nums.length + 1];
        while (right < nums.length) {
            if (freq[nums[right]] == 0) {
                k--;
            }
            freq[nums[right]]++;
            right++;
            while (k < 0) {
                freq[nums[left]]--;
                if (freq[nums[left]] == 0) {
                    k++;
                }
                left++;
            }
            count += right - left;
        }
        return count;

=======

        return atMostK(nums, k) - atMostK(nums, k - 1);
    }

    private int atMostK(int[] nums, int k) {
        int left = 0, right = 0, count = 0, res = 0;
        int[] freq = new int[nums.length + 1];
        while (right < nums.length) {
            if (freq[nums[right]] == 0) count++;
            freq[nums[right]]++;
            right++;
            while (count > k) {
                freq[nums[left]]--;
                if (freq[nums[left]] == 0) count--;
                left++;
            }
            res += right - left;
        }
        return res;

=======

        int n = nums.length;
        int[] freq = new int[n + 1];
        int left = 0, right = 0;
        int res = 0;
        int cnt = 0;
        while (right < n) {
            if (freq[nums[right]] == 0) {
                cnt++;
            }
            freq[nums[right]]++;
            right++;
            while (cnt > k) {
                freq[nums[left]]--;
                if (freq[nums[left]] == 0) {
                    cnt--;
                }
                left++;
            }
            int tempLeft = left;
            while (freq[nums[tempLeft]] > 1) {
                freq[nums[tempLeft]]--;
                tempLeft++;
            }
            res += tempLeft - left + 1;
        }
        return res;

=======

        int n = nums.length;
        int[] count = new int[n + 1];
        int res = 0;
        int num = 0;
        int left = 0;
        int right = 0;
        while (right < n) {
            if (count[nums[right]] == 0) {
                num++;
            }
            count[nums[right]]++;
            right++;
            while (num > k) {
                count[nums[left]]--;
                if (count[nums[left]] == 0) {
                    num--;
                }
                left++;
            }
            int temp = right;
            while (num == k) {
                count[nums[left]]--;
                if (count[nums[left]] == 0) {
                    num--;
                }
                left++;
                res++;
            }
            while (left < temp) {
                count[nums[--temp]]++;
            }
        }
        return res;
