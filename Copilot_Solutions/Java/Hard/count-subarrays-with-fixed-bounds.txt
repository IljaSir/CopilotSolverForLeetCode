Synthesizing 10/10 solutions

=======

        int n = nums.length;
        long[] prefix = new long[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        long[] count = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            count[i] = count[i - 1];
            if (prefix[i] >= minK && prefix[i] <= maxK) {
                count[i]++;
            }
        }
        long result = 0;
        for (int i = 1; i <= n; i++) {
            int l = i, r = n;
            while (l < r) {
                int mid = (l + r + 1) / 2;
                if (prefix[mid] - prefix[i - 1] > maxK) {
                    r = mid - 1;
                } else {
                    l = mid;
                }
            }
            int right = l;
            l = i;
            r = n;
            while (l < r) {
                int mid = (l + r) / 2;
                if (prefix[mid] - prefix[i - 1] < minK) {
                    l = mid + 1;
                } else {
                    r = mid;
                }
            }
            int left = l;
            result += count[right] - count[left - 1];
        }
        return result;

=======

        int n = nums.length;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            int min = nums[i];
            int max = nums[i];
            for (int j = i; j < n; j++) {
                min = Math.min(min, nums[j]);
                max = Math.max(max, nums[j]);
                if (min >= minK && max <= maxK) {
                    ans++;
                }
            }
        }
        return ans;

=======

        return atMost(nums, maxK) - atMost(nums, minK - 1);
    }
    
    private long atMost(int[] nums, int k) {
        int i = 0, j = 0, n = nums.length;
        long res = 0;
        while (j < n) {
            k -= nums[j++];
            while (k < 0) k += nums[i++];
            res += j - i;
        }
        return res;

=======

        return countSubarrays(nums, maxK) - countSubarrays(nums, minK - 1);
    }
    
    private long countSubarrays(int[] nums, int bound) {
        int count = 0;
        long res = 0;
        int left = 0, right = 0;
        while (right < nums.length) {
            if (nums[right] <= bound) {
                count++;
            } else {
                count = 0;
            }
            res += count;
            right++;
        }
        return res;

=======

        return countSubarrays(nums, maxK) - countSubarrays(nums, minK - 1);
    }
    
    private long countSubarrays(int[] nums, int bound) {
        long result = 0;
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] <= bound) {
                count++;
            } else {
                count = 0;
            }
            result += count;
        }
        return result;

=======

        return countSubarrays(nums, maxK) - countSubarrays(nums, minK - 1);
    }

    private long countSubarrays(int[] nums, int k) {
        int count = 0;
        long res = 0;
        int left = 0, right = 0;
        while (right < nums.length) {
            if (nums[right] <= k) {
                count++;
            } else {
                count = 0;
            }
            res += count;
            right++;
        }
        return res;

=======

        long result = 0;
        int[] prefix = new int[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        for (int i = 0; i < nums.length; i++) {
            for (int j = i; j < nums.length; j++) {
                int sum = prefix[j + 1] - prefix[i];
                if (sum >= minK && sum <= maxK) {
                    result++;
                }
            }
        }
        return result;

=======

        long count = 0;
        int left = 0, right = 0;
        int min = nums[0], max = nums[0];
        while (right < nums.length) {
            min = Math.min(min, nums[right]);
            max = Math.max(max, nums[right]);
            while (min < minK) {
                min = Math.min(min, nums[++left]);
            }
            while (max > maxK) {
                max = Math.max(max, nums[++left]);
            }
            count += right - left + 1;
            right++;
        }
        return count;

=======

        long res = 0;
        int left = 0;
        int right = 0;
        int min = 0;
        int max = 0;
        while (right < nums.length) {
            while (right < nums.length && min <= maxK && max >= minK) {
                if (nums[right] < minK) {
                    min++;
                }
                if (nums[right] > maxK) {
                    max++;
                }
                right++;
            }
            res += (right - left) * (right - left + 1) / 2;
            if (nums[left] < minK) {
                min--;
            }
            if (nums[left] > maxK) {
                max--;
            }
            left++;
        }
        return res;

=======

        int[] count = new int[1000001];
        int left = 0;
        int right = 0;
        long res = 0;
        while (right < nums.length) {
            count[nums[right]]++;
            while (count[nums[left]] > maxK) {
                count[nums[left]]--;
                left++;
            }
            int j = left;
            while (count[nums[j]] >= minK) {
                res += j - left + 1;
                j++;
            }
            right++;
        }
        return res;
