Synthesizing 10/10 solutions

=======

        int n = message.length();
        int parts = (n + limit - 1) / limit;
        String[] ans = new String[parts];
        for (int i = 0; i < parts; ++i) {
            int len = Math.min(limit, n - i * limit);
            ans[i] = message.substring(i * limit, i * limit + len);
            ans[i] += String.format("<%d/%d>", i + 1, parts);
        }
        return ans;

=======

        int n = message.length();
        int parts = (n + limit - 1) / limit;
        if (parts > limit) {
            return new String[0];
        }
        String[] res = new String[parts];
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < n) {
            j = i;
            while (j < n && j - i < limit) {
                j++;
            }
            res[k++] = message.substring(i, j) + "<" + k + "/" + parts + ">";
            i = j;
        }
        return res;

=======

        int n = message.length();
        int parts = (n + limit - 1)/limit;
        String[] result = new String[parts];
        int start = 0;
        for (int i = 0; i < parts; i++) {
            int end = Math.min(start + limit, n);
            result[i] = message.substring(start, end) + "<" + (i + 1) + "/" + parts + ">";
            start = end;
        }
        return result;

=======

        int n = message.length();
        int p = (n + limit - 1) / limit;
        String[] ans = new String[p];
        int i = 0;
        for (int j = 0; j < p; ++j) {
            ans[j] = message.substring(i, Math.min(i + limit, n));
            ans[j] += String.format("<%d/%d>", j + 1, p);
            i += limit;
        }
        return ans;

=======

        int n = message.length();
        int num = n / limit;
        if (n % limit != 0) {
            num++;
        }
        String[] res = new String[num];
        int i = 0;
        int j = 0;
        while (i < n) {
            int len = Math.min(limit, n - i);
            res[j] = message.substring(i, i + len) + "<" + (j + 1) + "/" + num + ">";
            i += len;
            j++;
        }
        return res;

=======

        int len = message.length();
        int part = (len + limit - 1) / limit;
        String[] res = new String[part];
        int i = 0;
        for (int j = 0; j < part; j++) {
            int k = Math.min(limit, len - i);
            String s = message.substring(i, i + k);
            res[j] = s + "<" + (j + 1) + "/" + part + ">";
            i += k;
        }
        return res;

=======

        int n = message.length();
        int c = n / limit;
        int r = n % limit;
        int p = 0;
        String[] res = new String[c + (r == 0 ? 0 : 1)];
        for (int i = 0; i < c; i++) {
            res[i] = message.substring(p, p + limit) + "<" + (i + 1) + "/" + (c + (r == 0 ? 0 : 1)) + ">";
            p += limit;
        }
        if (r != 0) {
            res[c] = message.substring(p) + "<" + (c + 1) + "/" + (c + (r == 0 ? 0 : 1)) + ">";
        }
        return res;

=======

        int len = message.length();
        int part = (len + limit - 1) / limit;
        int last = len - limit * (part - 1);
        String[] res = new String[part];
        int i = 0, j = 0;
        while (i < part) {
            res[i] = message.substring(j, j + (i == part - 1 ? last : limit)) + "<" + (i + 1) + "/" + part + ">";
            j += limit;
            i++;
        }
        return res;

=======

        List<String> res = new ArrayList<>();
        int i = 0;
        int len = message.length();
        int part = 1;
        while(i < len) {
            int j = i + limit - 1;
            if(j >= len) {
                j = len - 1;
            }
            while(j > i && message.charAt(j) != ' ') {
                j--;
            }
            if(j == i) {
                return new String[0];
            }
            res.add(message.substring(i, j) + "<" + part + "/" + (len / limit + 1) + ">");
            part++;
            i = j + 1;
        }
        return res.toArray(new String[0]);

=======

        int len = message.length();
        int part = 1;
        int start = 0;
        int end = 0;
        List<String> result = new ArrayList<>();
        while (end < len) {
            end = Math.min(len, start + limit);
            result.add(message.substring(start, end) + "<" + part + "/" + (len / limit + 1) + ">");
            start = end;
            part++;
        }
        return result.toArray(new String[0]);
