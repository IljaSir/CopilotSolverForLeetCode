Synthesizing 10/10 solutions

=======

        int n = stones.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(stones[i], i);
        }
        boolean[][] dp = new boolean[n][n];
        dp[0][0] = true;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                int k = stones[i] - stones[j];
                if (k > j + 1) {
                    continue;
                }
                dp[i][k] = dp[j][k] || dp[j][k - 1] || dp[j][k + 1];
                if (i == n - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        return false;

=======

        if (stones[1] != 1) {
            return false;
        }
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < stones.length; i++) {
            map.put(stones[i], new HashSet<>());
        }
        map.get(1).add(1);
        for (int i = 0; i < stones.length; i++) {
            int stone = stones[i];
            for (int step : map.get(stone)) {
                int reach = stone + step;
                if (reach == stones[stones.length - 1]) {
                    return true;
                }
                Set<Integer> set = map.get(reach);
                if (set != null) {
                    set.add(step);
                    if (step - 1 > 0) {
                        set.add(step - 1);
                    }
                    set.add(step + 1);
                }
            }
        }
        return false;

=======

        int n = stones.length;
        Set<Integer>[] dp = new HashSet[n];
        for (int i = 0; i < n; i++) {
            dp[i] = new HashSet<>();
        }
        dp[0].add(0);
        for (int i = 0; i < n; i++) {
            for (int k : dp[i]) {
                for (int step = k - 1; step <= k + 1; step++) {
                    if (step > 0) {
                        int pos = stones[i] + step;
                        int next = Arrays.binarySearch(stones, i + 1, n, pos);
                        if (next >= 0) {
                            dp[next].add(step);
                        }
                    }
                }
            }
        }
        return !dp[n - 1].isEmpty();

=======

        if (stones == null || stones.length == 0) {
            return false;
        }
        int n = stones.length;
        boolean[][] dp = new boolean[n][n];
        dp[0][0] = true;
        for (int i = 1; i < n; i++) {
            if (stones[i] - stones[i - 1] > i) {
                return false;
            }
        }
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                int k = stones[i] - stones[j];
                if (k > j + 1) {
                    break;
                }
                dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1];
                if (i == n - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = stones.length;
        if (n == 0) {
            return true;
        }
        if (n == 1) {
            return stones[0] == 0;
        }
        if (stones[1] != 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(stones[i], new HashSet<>());
        }
        map.get(1).add(1);
        for (int i = 1; i < n; i++) {
            int pos = stones[i];
            for (int k : map.get(pos)) {
                for (int step = k - 1; step <= k + 1; step++) {
                    if (step > 0 && map.containsKey(pos + step)) {
                        map.get(pos + step).add(step);
                    }
                }
            }
        }
        return map.get(stones[n - 1]).size() > 0;

=======

        int n = stones.length;
        if (n == 0 || stones[0] != 0) {
            return false;
        }
        if (n == 1) {
            return true;
        }
        if (stones[1] != 1) {
            return false;
        }
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(stones[i], new HashSet<>());
        }
        map.get(1).add(1);
        for (int i = 0; i < n; i++) {
            for (int k : map.get(stones[i])) {
                for (int step = k - 1; step <= k + 1; step++) {
                    if (step > 0 && map.containsKey(stones[i] + step)) {
                        map.get(stones[i] + step).add(step);
                    }
                }
            }
        }
        return !map.get(stones[n - 1]).isEmpty();

=======

        int n = stones.length;
        HashMap<Integer, Integer> stoneMap = new HashMap<>();
        for (int i = 0; i < n; i++) {
            stoneMap.put(stones[i], i);
        }
        boolean[][] dp = new boolean[n][n];
        dp[0][0] = true;
        for (int i = 0; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                int k = stones[i] - stones[j];
                if (k > j + 1) {
                    break;
                }
                dp[i][k] = dp[j][k] || dp[j][k - 1] || dp[j][k + 1];
                if (i == n - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = stones.length;
        if (n == 0) {
            return true;
        }
        if (stones[1] != 1) {
            return false;
        }
        boolean[][] dp = new boolean[n][n];
        dp[0][0] = true;
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                int k = stones[i] - stones[j];
                if (k > j + 1) {
                    break;
                }
                dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1];
                if (i == n - 1 && dp[i][k]) {
                    return true;
                }
            }
        }
        return false;

=======

        int n = stones.length;
        if (stones[1] != 1) return false;
        if (n == 2) return true;
        if (stones[2] != 2) return false;
        if (n == 3) return true;
        int[] dp = new int[n];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i < n; i++) {
            int last = stones[i] - stones[i - 1];
            int last2 = stones[i - 1] - stones[i - 2];
            if (last > last2 + 1) return false;
            if (last < last2 - 1) return false;
            dp[i] = last;
        }
        for (int i = 3; i < n; i++) {
            int last = stones[i] - stones[i - 1];
            int last2 = stones[i - 1] - stones[i - 2];
            if (last > last2 + 1) return false;
            if (last < last2 - 1) return false;
            dp[i] = last;
        }
        return true;

=======

        int n = stones.length;
        if (n == 0) {
            return true;
        }
        
        if (stones[1] != 1) {
            return false;
        }
        
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(stones[i], new HashSet<>());
        }
        map.get(1).add(1);
        
        for (int i = 1; i < n; i++) {
            if (map.get(stones[i]).isEmpty()) {
                continue;
            }
            
            for (int k : map.get(stones[i])) {
                for (int step = k - 1; step <= k + 1; step++) {
                    if (step > 0 && map.containsKey(stones[i] + step)) {
                        map.get(stones[i] + step).add(step);
                    }
                }
            }
        }
        
        return !map.get(stones[n - 1]).isEmpty();
