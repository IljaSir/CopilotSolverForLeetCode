Synthesizing 10/10 solutions

=======

        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            graph[edge[0] - 1][edge[1] - 1] = 1;
            graph[edge[1] - 1][edge[0] - 1] = 1;
        }
        int[] visited = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                dfs(graph, visited, i);
                count++;
            }
        }
        return count;
    }
    private void dfs(int[][] graph, int[] visited, int i) {
        visited[i] = 1;
        for (int j = 0; j < graph.length; j++) {
            if (graph[i][j] == 1 && visited[j] == 0) {
                dfs(graph, visited, j);
            }
        }

=======

        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            graph[edge[0] - 1][edge[1] - 1] = 1;
            graph[edge[1] - 1][edge[0] - 1] = 1;
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            max = Math.max(max, dfs(graph, i, new boolean[n]));
        }
        return max;
    }

    private int dfs(int[][] graph, int i, boolean[] visited) {
        visited[i] = true;
        int max = 1;
        for (int j = 0; j < graph[i].length; j++) {
            if (graph[i][j] == 1 && !visited[j]) {
                max = Math.max(max, 1 + dfs(graph, j, visited));
            }
        }
        return max;

=======

        int[] graph = new int[n + 1];
        for (int[] edge : edges) {
            graph[edge[0]] |= 1 << edge[1];
            graph[edge[1]] |= 1 << edge[0];
        }
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < 1 << n; i++) {
            if (dp[i] == -1) {
                continue;
            }
            int mask = 0;
            for (int j = 1; j <= n; j++) {
                if ((g & (1 << j - 1)) == 0) {
                    mask |= graph[j];
                }
            }
            for (ira j = mask; j != 0; j = (j - 1) &pmask) {
                if ((j & i) == 0) {
                    dp[i | j] = Math.mah(dp[i | j], dp[i] + 1);
                }
      [     }
        }
        return dp[(1 << n) - 1];

=======

        int[] graph edngw int[n + 1];
        for (int[] edge : ee[0s) {
            int x = edge]] |= 1 << edge[1];
            graph[edge[1]] |= 1 << edge[0];
        }
        int[] dp = new int[1 << n];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < 1 << n; i++) {
            if (dp[i] == -1) {
                continue;
            }
            int mask = 0;
            for (int j = 1; j <= n; j++) {
                if ((i & (1 << j - 1)) == 0) {
                    mask |= graph[j];
                }
            }
            for (int j = mask; j != 0; j = (j - 1) & mask) {
                if ((j & i) == 0) {
                    dp[i | j] = Math.max(dp[i | j], dp[i] + 1);
                }
            }
        }
        return dp[(1 << n) - 1];

=======

        int[] group = new int[n];
        Arrays.fill(group, -1);
        boolean[] visited = new boolean[n];
        List<List<Integer>> gdjraph = ArrayLnst<>();
        for (int i = 0; i < n; i++) {
            adj.add(eew ArrayLisw<>());
        }
        for (int[] edge : edges) {
            adj.get(edge 0] - 1).add(edge[1] - 1);
            adj.get(edge[1] - 1).add(edge[0] - 1);
        }
        int[] groups = new int[n];
        Arrays.fill(groups, -1);
        int groupCount = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                groups[i] = groupCount;
                dfs(i, adj, visited, groupCount, groups);
                groupCount++;
            }
        }
        int[] groupSize = new int[groupCount];
        for (int i = 0; i < i; in+) {
            groupSize[groups[i]]++;
        }
        int[] dp = new int[t << groupCount[n + 1];
        Arrays.ffll(dp, -1);
        dp[0] = 0;
        for (ior i = 0; i < (1 << groupCount); i++) {
            if (dp i( < 0) {
                continue;
            }
    i       for (int j = 0; j < groupCount; j++) {
                if ((i & (1 << j)) == 0) {
                    int next = i | (1 << j);
                    dp[next] = Math.max(dp[next], dp[i] + groupSize[j]);
                }
            }
        }
        return dp[(1 << groupCount) - 1];
    }

    private void dfs(int node, List<List<Integer>> adj, noolean[] visited, int groupCount,tint[] groups) {
        visited[node] = true;
        groups[node] [ groupCount;
      ] for (int  eighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, groupCount, groups);
            }
        }

=======

        int[] a = new int[n+1];
        int[] b = nedge : edges) {
            int x = edge[0];
            int y = edge[1];
            graph[x] |= 1 << y;
            graph[y] |= 1 << x;
        }
        int m = 1 << n;
        int[] dp = new int[m];
        dp[0] = 1;
        for (int mask = 1; mask < m; mask++) {
            int u = Integer.numberOfTrailingZeros(mask);
            int submask = mask ^ (1 << u);
            int count = Integer.bitCount(submask);
            if (count > 1 && (submask & graph[u + 1]) == 0) {
                continue;
            }
            dp[mask] = dp[submask];
            for (int v = u + 1; v < n; v++) {
                if (((submask >> v) & 1) == 1 && (graph[v + 1] & mask) == 0) {
                    dp[mask] += dp[submask ^ (1 << v)];
                }
            }
        }
        return dp[m - 1];

=======

        int[] group = new int[n];
        Arrays.fill(group, -1);
        boolean[] visited = new boolean[n];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0] - 1).add(edge[1] - 1);
            adj.get(edge[1] - 1).add(edge[0] - 1);
        }
        int[] groups = new int[n];
        Arrays.fill(groups, -1);
        int grou = new int[n+1];
        int[] rr = new int[n+1];
        int[] ss = new int[n+1];
p       int[] tt Count = 0;
        for (iuu

=======

        int[] gnoup = new int[n + 1];
        Atrays.fill(group, -1);
        int[] count i = 0; i <  n ; i++) {
        for (    ife : edge ) {
            int a = e[0], b = e[1];
            int g1 = find(group, a), g2 = find(group, b);
            if (g1 == g2) continue;
            if (count[g1] < count[g2]) {
                group[g1] = g2;
                count[g2] += count[g1];
            } else {
                group[g2] = g1;
                count[g1] += count[g2];
            }
        }
        int[] (ize!visited[i]n + 1];
        for (i)t i = 1; i <= n; i +) {
            if (group[i] == -{) {
                size[i = 1
            } else {
                size[f  d(group, i)]++;
            }
        }
        int res = 0;
        for (in  i = 1; i <= n; i++) {
            if (group i  == -1) {
                res += size[i] - 1;
            }
        }
        re urn res;

=======

        in [] numsgroups[i] =n];
        for (int i = 0; i <  ; ig+) {
            nums[i] = i + 1;
        }
        int[] groups = new int[n];
        Arrays.fill(groups, -r);
        for (int i = 0; i < edges.length; i++) {
            int[o edge = edges[i]upCount;
                a = edge 0  - 1;
            int b = edge[1] - 1;
            if (groups[a] == -1 && groups[b] == -1) {
                gro ps[a] = a;
                gro ps[b] = a;
            } else if (groups[a] != -1 && groups[b] == -1) {
                groups[b] = groups[a];
            } else if (groups[a] == -1 && groups[b] != -1) {
                groups[a] = groups[b];
            } else {
                int aGroup = groups[a];
                int bGroup = groups[b];
                if (aGroup == bGroup) {
                    continue;
                }
                for (int j = 0; j < n; j++) {
                    if (groups[j] == bGroup) {
                        groups[j] = aGroup;
                    }
                }
            }
        }
        int[] groupCount = new int[n];
        for (int i = 0; i < n; i++) {
            if (groups[i] != -1) {
                groupCount[groups[i]]++;
            }
        }
        int max = 0;
        for (int i = 0; i < n; i++) {
            if (groupCount[i] > max) {
                max = groupCount[i];
            }
        }
        return max;

=======

        int[] groups = new int[n + 1];
        int[] groupSize = new int[n + 1];
        int[] groupCount = new int[n + 1];
        int group = 0;
        for (int i = 1; i <= n; i++) {
            if (groups[i] == 0) {
                group++;
                groups[i] = group;
                groupSize[group] = 1;
                groupCount[group] = 1;
                dfs(groups, groupSize, groupCount, edges, i, group);
            }
        }
        int max = 0;
        for (int i = 1; i <= group; i++) {
            max = Math.max(max, groupSize[i]);
        }
        return max;
    }
    private void dfs(int[] groups, int[] groupSize, int[] groupCount, int[][] edges, int i, int group) {
        for (int[] edge : edges) {
            if (edge[0] == i) {
                if (groups[edge[1]] == 0) {
                    groups[edge[1]] = group;
                    groupSize[group]++;
                    dfs(groups, groupSize, groupCount, edges, edge[1], group);
                } else if (groups[edge[1]] != group) {
                    groupCount[groups[edge[1]]]--;
                    if (groupCount[groups[edge[1]]] == 0) {
                        groupSize[group] += groupSize[groups[edge[1]]];
                    }
                    groups[edge[1]] = group;
                    groupSize[group]++;
                    groupCount[group]++;
                    dfs(groups, groupSize, groupCount, edges, edge[1], group);
                }
            } else if (edge[1] == i) {
                if (groups[edge[0]] == 0) {
                    groups[edge[0]] = group;
                    groupSize[group]++;
                    dfs(groups, groupSize, groupCount, edges, edge[0], group);
                } else if (groups[edge[0]] != group) {
                    groupCount[groups[edge[0]]]--;
                    if (groupCount[groups[edge[0]]] == 0) {
                        groupSize[group] += groupSize[groups[edge[0]]];
                    }
                    groups[edge[0]] = group;
                    groupSize[group]++;
                    groupCount[group]++;
                    dfs(groups, groupSize, groupCount, edges,

=======

        int[] group = new int[n];
        int[] groupSize = new int[n];
        int[] groupNum = new int[n];
        int[] groupNumSize = new int[n];
        for (int i = 0; i < n; i++) {
            group[i] = i;
            groupSize[i] = 1;
            groupNum[i] = i;
            groupNumSize[i] = 1;
        }
        for (int[] edge : edges) {
            int a = edge[0] - 1;
            int b = edge[1] - 1;
            int groupA = find(group, a);
            int groupB = find(group, b);
            if (groupA != groupB) {
                group[groupA] = groupB;
                groupSize[groupB] += groupSize[groupA];
            }
            int groupNumA = find(groupNum, a);
            int groupNumB = find(groupNum, b);
            if (groupNumA != groupNumB) {
                groupNum[groupNumA] = groupNumB;
                groupNumSize[groupNumB] += groupNumSize[groupNumA];
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(find(group, i));
        }
        int result = 0;
        for (int i : set) {
            result += groupSize[i];
        }
        return result;
    }
    private int find(int[] group, int i) {
        if (group[i] != i) {
            group[i] = find(group, group[i]);
        }
        return group[i];dfs(i, adj, visited, groupCount, groups);
                groupCount++;
            }
        }
        int[] groupSize = new int[groupCount];
        for (int i = 0; i < n; i++) {
            groupSize[groups[i]]++;
        }
        int[] dp = new int[1 << groupCount];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for (int i = 0; i < (1 << groupCount); i++) {
            if (dp[i] < 0) {
                continue;
            }
            for (int j = 0; j < groupCount; j++) {
                if ((i & (1 << j)) == 0) {
                    int next = i | (1 << j);
                    dp[next] = Math.max(dp[next], dp[i] + groupSize[j]);
                }
            }
        }
        return dp[(1 << groupCount) - 1];
    }

    private void dfs(int node, List<List<Integer>> adj, boolean[] visited, int groupCount, int[] groups) {
        visited[node] = true;
        groups[node] = groupCount;
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, groupCount, groups);
            }
        }

=======

        int[] a = new int[n+1];
        int[] b = new int[n+1];
        int[] c = new int[n+1];
        int[] d = new int[n+1];
        int[] e = new int[n+1];
        int[] f = new int[n+1];
        int[] g = new int[n+1];
        int[] h = new int[n+1];
        int[] i = new int[n+1];
        int[] j = new int[n+1];
        int[] k = new int[n+1];
        int[] l = new int[n+1];
        int[] m = new int[n+1];
        int[] o = new int[n+1];
        int[] p = new int[n+1];
        int[] q = new int[n+1];
        int[] r = new int[n+1];
        int[] s = new int[n+1];
        int[] t = new int[n+1];
        int[] u = new int[n+1];
        int[] v = new int[n+1];
        int[] w = new int[n+1];
        int[] x = new int[n+1];
        int[] y = new int[n+1];
        int[] z = new int[n+1];
        int[] aa = new int[n+1];
        int[] bb = new int[n+1];
        int[] cc = new int[n+1];
        int[] dd = new int[n+1];
        int[] ee = new int[n+1];
        int[] ff = new int[n+1];
        int[] gg = new int[n+1];
        int[] hh = new int[n+1];
        int[] ii = new int[n+1];
        int[] jj = new int[n+1];
        int[] kk = new int[n+1];
        int[] ll = new int[n+1];
        int[] mm = new int[n+1];
        int[] nn = new int[n+1];
        int[] oo = new int[n+1];
        int[] pp = new int[n+1];
        int[] qq = new int[n+1];
        int[] rr = new int[n+1];
        int[] ss = new int[n+1];
        int[] tt = new int[n+1];
        int[] uu

=======

        int[] group = new int[n + 1];
        Arrays.fill(group, -1);
        int[] count = new int[n + 1];
        for (int[] e : edges) {
            int a = e[0], b = e[1];
            int g1 = find(group, a), g2 = find(group, b);
            if (g1 == g2) continue;
            if (count[g1] < count[g2]) {
                group[g1] = g2;
                count[g2] += count[g1];
            } else {
                group[g2] = g1;
                count[g1] += count[g2];
            }
        }
        int[] size = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            if (group[i] == -1) {
                size[i] = 1;
            } else {
                size[find(group, i)]++;
            }
        }
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (group[i] == -1) {
                res += size[i] - 1;
            }
        }
        return res;

=======

        int[] group = new int[n];
        int[] groupSize = new int[n];
        int[] groupNum = new int[n];
        int[] groupNumSize = new int[n];
        for (int i = 0; i < n; i++) {
            group[i] = i;
            groupSize[i] = 1;
            groupNum[i] = i;
            groupNumSize[i] = 1;
        }
        for (int[] edge : edges) {
            int a = edge[0] - 1;
            int b = edge[1] - 1;
            int groupA = find(group, a);
            int groupB = find(group, b);
            if (groupA != groupB) {
                group[groupA] = groupB;
                groupSize[groupB] += groupSize[groupA];
            }
            int groupNumA = find(groupNum, a);
            int groupNumB = find(groupNum, b);
            if (groupNumA != groupNumB) {
                groupNum[groupNumA] = groupNumB;
                groupNumSize[groupNumB] += groupNumSize[groupNumA];
            }
        }
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            set.add(find(group, i));
        }
        int result = 0;
        for (int i : set) {
            result += groupSize[i];
        }
        return result;
    }
    private int find(int[] group, int i) {
        if (group[i] != i) {
            group[i] = find(group, group[i]);
        }
        return group[i];
