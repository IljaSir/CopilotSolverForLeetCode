Synthesizing 9/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        long[][] dp = new long[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= i; j++) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) * j % 1000000007;
            }
        }
        return (int) (dfs(nums, 0, n - 1, dp) - 1);
    }

    private long dfs(int[] nums, int l, int r, long[][] dp) {
        if (l >= r) {
            return 1;
        }
        int m = l + 1;
        while (m <= r && nums[m] < nums[l]) {
            m++;
        }
        return dp[r - l][m - l - 1] * dfs(nums, l + 1, m - 1, dp) % 1000000007 * dfs(nums, m, r, dp) % 1000000007;

=======

        return (int) (helper(nums, 0, nums.length - 1) - 1);
    }

    private long helper(int[] nums, int start, int end) {
        if (start >= end) return 1;

        int root = nums[start];
        int left = start + 1;
        int right = end;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < root) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        int leftSize = left - start - 1;
        int rightSize = end - left + 1;

        return (helper(nums, start + 1, left - 1) * helper(nums, left, end) * (leftSize + rightSize + 1)) % 1_000_000_007;

=======

        int mod = 1000000007;
        int n = nums.length;
        int[][] dp = new int[n + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= i; j++) {
                dp[i][j] = (int) ((long) dp[i - 1][j - 1] * j % mod + (long) dp[i - 1][j] * (i - j) % mod);
                if (dp[i][j] >= mod) {
                    dp[i][j] -= mod;
                }
            }
        }
        return dfs(nums, 0, n - 1, dp) - 1;
    }

    public int dfs(int[] nums, int l, int r, int[][] dp) {
        if (l >= r) {
            return 1;
        }
        int mod = 1000000007;
        int x = l + 1;
        while (x <= r && nums[x] < nums[l]) {
            x++;
        }
        int y = x;
        while (y <= r && nums[y] > nums[l]) {
            y++;
        }
        if (y != r + 1) {
            return 0;
        }
        int leftSize = x - l - 1;
        int rightSize = r - x + 1;
        return (int) ((long) dfs(nums, l + 1, x - 1, dp) * dfs(nums, x, r, dp) % mod * dp[leftSize + rightSize][leftSize] % mod);

=======

        int n = nums.length;
        int mod = 1000000007;
        long[][] dp = new long[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                for (int k = i + 1; k <= j; k++) {
                    if (nums[k] > nums[i] && nums[k] < nums[j]) {
                        dp[i][j] = (dp[i][j] + dp[i + 1][k - 1] * dp[k][j]) % mod;
                    }
                }
                dp[i][j] = (dp[i][j] + dp[i + 1][j] + dp[i][j - 1]) % mod;
            }
        }
        return (int) (dp[0][n - 1] - 1);

=======

        int mod = 1_000_000_007;
        int n = nums.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            dp[i][i][0] = dp[i][i][1] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                int left = j, right = i;
                while (left < right) {
                    int mid = left + right + 1 >> 1;
                    if (nums[mid] < nums[j]) {
                        left = mid;
                    } else {
                        right = mid - 1;
                    }
                }
                int l = 0, r = 0;
                if (left == j) {
                    l = 1;
                } else {
                    l = (int)(((long)dp[j + 1][left][0] * dp[left + 1][i][0] + (long)dp[j + 1][left][1] * dp[left + 1][i][1]) % mod);
                }
                left = j;
                right = i;
                while (left < right) {
                    int mid = left + right >> 1;
                    if (nums[mid] > nums[i]) {
                        right = mid;
                    } else {
                        left = mid + 1;
                    }
                }
                if (left == i) {
                    r = 1;
                } else {
                    r = (int)(((long)dp[j][left - 1][0] * dp[left][i - 1][0] + (long)dp[j][left - 1][1] * dp[left][i - 1][1]) % mod);
                }
                dp[j][i][0] = (int)((long)l * r % mod);
                dp[j][i][1] = (int)(((long)dp[j + 1][i][0] + dp[j][i - 1][0] - l + mod) % mod);
            }
        }
        return (dp[0][n - 1][0] + dp[0][n - 1][1] - 1 + mod) % mod

=======

        int n = nums.length;
        long[][] dp = new long[2][n];
        dp[0][0] = 1;
        dp[1][0] = 1;
        for (int i = 1; i < n; i++) {
            int left = 0;
            int right = 0;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    left++;
                } else {
                    right++;
                }
            }
            long[] dp2 = new long[2];
            for (int j = 0; j < 2; j++) {
                dp2[0] += dp[j][left];
                dp2[1] += dp[j][right];
            }
            for (int j = 0; j < 2; j++) {
                dp[j][i] = dp2[j] % 1000000007;
            }
        }
        return (int) ((dp[0][n - 1] + dp[1][n - 1] - 1) % 1000000007);

=======

        int n = nums.length;
        int MOD = 1000000007;
        return (int) (dfs(nums) - 1) % MOD;
    }
    
    private long dfs(int[] nums) {
        if (nums.length <= 1) {
            return 1;
        }
        
        int n = nums.length;
        int root = nums[0];
        int left = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < root) {
                ++left;
            }
        }
        
        int right = n - 1 - left;
        int[] numsLeft = new int[left];
        int[] numsRight = new int[right];
        int l = 0;
        int r = 0;
        for (int i = 1; i < n; ++i) {
            if (nums[i] < root) {
                numsLeft[l++] = nums[i];
            } else {
                numsRight[r++] = nums[i];
            }
        }
        
        long c1 = dfs(numsLeft);
        long c2 = dfs(numsRight);
        long c3 = c1 * c2;
        long c4 = c3 * comb(left + right, left);
        return c4;
    }
    
    private long comb(int n, int k) {
        long res = 1;
        for (int i = 1; i <= k; ++i) {
            res = res * (n - i + 1) / i;
        }
        return res;

=======

        return 0;
