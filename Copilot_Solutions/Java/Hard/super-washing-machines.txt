Synthesizing 10/10 solutions

=======

        int sum = 0;
        for (int i = 0; i < machines.length; i++) {
            sum += machines[i];
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int[] diff = new int[machines.length];
        for (int i = 0; i < machines.length; i++) {
            diff[i] = machines[i] - avg;
        }
        int max = 0, sum1 = 0;
        for (int i = 0; i < machines.length; i++) {
            sum1 += diff[i];
            max = Math.max(max, Math.max(Math.abs(sum1), diff[i]));
        }
        return max;

=======

        int sum = 0;
        for (int i = 0; i < machines.length; i++) {
            sum += machines[i];
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int max = 0;
        int count = 0;
        for (int i = 0; i < machines.length; i++) {
            count += machines[i] - avg;
            max = Math.max(max, Math.max(Math.abs(count), machines[i] - avg));
        }
        return max;

=======

        int n = machines.length;
        int sum = 0;
        for (int machine : machines) {
            sum += machine;
        }
        if (sum % n != 0) {
            return -1;
        }
        int avg = sum / n;
        int ans = 0, cnt = 0;
        for (int i = 0; i < n; i++) {
            cnt += machines[i] - avg;
            ans = Math.max(ans, Math.max(Math.abs(cnt), machines[i] - avg));
        }
        return ans;

=======

        int n = machines.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += machines[i];
        }
        if (sum % n != 0) {
            return -1;
        }
        int avg = sum / n;
        int ans = 0, cnt = 0;
        for (int num : machines) {
            num -= avg;
            cnt += num;
            ans = Math.max(ans, Math.max(Math.abs(cnt), num));
        }
        return ans;

=======

        int sum = 0;
        for (int machine : machines) {
            sum += machine;
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int ans = 0;
        int cur = 0;
        for (int machine : machines) {
            machine -= avg;
            cur += machine;
            ans = Math.max(ans, Math.max(Math.abs(cur), machine));
        }
        return ans;

=======

        int sum = 0;
        for (int machine : machines) {
            sum += machine;
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int count = 0;
        int max = 0;
        for (int machine : machines) {
            count += machine - avg;
            max = Math.max(max, Math.max(Math.abs(count), machine - avg));
        }
        return max;

=======

        int sum = 0;
        for (int machine : machines) {
            sum += machine;
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int res = 0;
        int total = 0;
        for (int machine : machines) {
            total += machine - avg;
            res = Math.max(Math.abs(total), Math.max(res, machine - avg));
        }
        return res;

=======

        int sum = 0;
        for (int i : machines) {
            sum += i;
        }
        if (sum % machines.length != 0) {
            return -1;
        }
        int avg = sum / machines.length;
        int cnt = 0;
        int max = 0;
        for (int load : machines) {
            cnt += load - avg;
            max = Math.max(Math.max(Math.abs(cnt), load - avg), max);
        }
        return max;

=======

        int n = machines.length;
        int sum = 0;
        for (int m : machines) {
            sum += m;
        }
        if (sum % n != 0) {
            return -1;
        }
        int avg = sum / n;
        int ans = 0;
        int cnt = 0;
        for (int m : machines) {
            cnt += m - avg;
            ans = Math.max(ans, Math.max(Math.abs(cnt), m - avg));
        }
        return ans;

=======

        int sum = 0;
        for(int i = 0; i < machines.length; i++){
            sum += machines[i];
        }
        if(sum % machines.length != 0){
            return -1;
        }
        int avg = sum / machines.length;
        int count = 0, max = 0;
        for(int i = 0; i < machines.length; i++){
            count += machines[i] - avg;
            max = Math.max(Math.max(Math.abs(count), max), machines[i] - avg);
        }
        return max;
