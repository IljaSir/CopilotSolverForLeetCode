Synthesizing 10/10 solutions

=======

        int max = 0;
        for (int i = 0; i < (1 << requests.length); i++) {
            int[] count = new int[n];
            for (int j = 0; j < requests.length; j++) {
                if (((1 << j) & i) != 0) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                }
            }
            boolean flag = true;
            for (int j = 0; j < n; j++) {
                if (count[j] != 0) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                max = Math.max(max, Integer.bitCount(i));
            }
        }
        return max;

=======

        int m = requests.length;
        int ans = 0;
        for (int i = 1; i < (1 << m); i++) {
            int[] cnt = new int[n];
            for (int j = 0; j < m; j++) {
                if (((1 << j) & i) != 0) {
                    cnt[requests[j][0]]--;
                    cnt[requests[j][1]]++;
                }
            }
            if (Arrays.stream(cnt).allMatch(x -> x == 0)) {
                ans = Math.max(ans, Integer.bitCount(i));
            }
        }
        return ans;

=======

        int m = requests.length;
        int ans = 0;
        for (int i = 0; i < (1 << m); i++) {
            int[] cnt = new int[n];
            int res = 0;
            for (int j = 0; j < m; j++) {
                if (((i >> j) & 1) == 1) {
                    cnt[requests[j][0]]--;
                    cnt[requests[j][1]]++;
                    res++;
                }
            }
            boolean ok = true;
            for (int j = 0; j < n; j++) {
                if (cnt[j] != 0) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                ans = Math.max(ans, res);
            }
        }
        return ans;

=======

        int max = 0;
        for (int i = 0; i < (1 << requests.length); i++) {
            int[] count = new int[n];
            int c = 0;
            for (int j = 0; j < requests.length; j++) {
                if (((i >> j) & 1) == 1) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                    c++;
                }
            }
            boolean flag = true;
            for (int j = 0; j < n; j++) {
                if (count[j] != 0) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                max = Math.max(max, c);
            }
        }
        return max;

=======

        int max = 0;
        int[] in = new int[n];
        int[] out = new int[n];
        for (int i = 0; i < requests.length; i++) {
            out[requests[i][0]]++;
            in[requests[i][1]]++;
        }
        for (int i = 0; i < n; i++) {
            max += Math.min(in[i], out[i]);
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < 1 << requests.length; i++) {
            int[] count = new int[n];
            int res = 0;
            for (int j = 0; j < requests.length; j++) {
                if ((i & (1 << j)) != 0) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                    res++;
                }
            }
            boolean ok = true;
            for (int c : count) {
                if (c != 0) {
                    ok = false;
                    break;
                }
            }
            if (ok) {
                max = Math.max(max, res);
            }
        }
        return max;

=======

        int m = requests.length;
        int max = 0;
        for (int i = 0; i < 1 << m; i++) {
            int[] count = new int[n];
            int res = 0;
            for (int j = 0; j < m; j++) {
                if (((i >> j) & 1) == 1) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                }
            }
            for (int j = 0; j < n; j++) {
                if (count[j] == 0) {
                    res++;
                }
            }
            max = Math.max(max, res);
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < 1 << requests.length; i++) {
            int[] count = new int[n];
            int k = 0;
            for (int j = 0; j < requests.length; j++) {
                if ((i & (1 << j)) > 0) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                    k++;
                }
            }
            if (Arrays.stream(count).allMatch(x -> x == 0)) {
                max = Math.max(max, k);
            }
        }
        return max;

=======

        int max = 0;
        for (int i = 0; i < (1 << requests.length); i++) {
            int[] count = new int[n];
            int j = 0;
            for (int k = i; k > 0; k >>= 1) {
                if ((k & 1) == 1) {
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                }
                j++;
            }
            if (IntStream.of(count).allMatch(x -> x == 0)) {
                max = Math.max(max, Integer.bitCount(i));
            }
        }
        return max;

=======

        int[] count = new int[n];
        int max = 0;
        for (int i = 0; i < 1 << requests.length; i++) {
            Arrays.fill(count, 0);
            int total = 0;
            for (int j = 0; j < requests.length; j++) {
                if ((i & (1 << j)) > 0) {
                    total++;
                    count[requests[j][0]]--;
                    count[requests[j][1]]++;
                }
            }
            if (Arrays.stream(count).allMatch(x -> x == 0)) {
                max = Math.max(max, total);
            }
        }
        return max;
