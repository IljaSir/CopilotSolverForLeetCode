Synthesizing 9/10 solutions (Duplicates hidden)

=======

        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1)) % 1000000007;
                if (j > k) {
                    dp[i][j] += (dp[i - 1][j] * (j - k)) % 1000000007;
                }
                dp[i][j] %= 1000000007;
            }
        }
        return (int) dp[goal][n];

=======

        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1)) % 1000000007;
                if (j > k) {
                    dp[i][j] = (dp[i][j] + (dp[i - 1][j] * (j - k)) % 1000000007) % 1000000007;
                }
            }
        }
        return (int) dp[goal][n];

=======

        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1) + dp[i - 1][j] * Math.max(j - k, 0)) % 1000000007;
            }
        }
        return (int) dp[goal][n];

=======

        int MOD = 1_000_000_007;
        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1);
                dp[i][j] += dp[i - 1][j] * Math.max(j - k, 0);
                dp[i][j] %= MOD;
            }
        }
        return (int) dp[goal][n];

=======

        int mod = 1000000007;
        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1);
                dp[i][j] %= mod;
                if (j > k) {
                    dp[i][j] += dp[i - 1][j] * (j - k);
                    dp[i][j] %= mod;
                }
            }
        }
        return (int)dp[goal][n];

=======

        int mod = 1000000007;
        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j - 1] * (n - j + 1)) % mod;
                if (j > k) {
                    dp[i][j] = (dp[i][j] + (dp[i - 1][j] * (j - k)) % mod) % mod;
                }
            }
        }
        return (int) dp[goal][n];

=======

        int M = 1000000007;
        int[][] dp = new int[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (int) ((dp[i - 1][j - 1] * (long) (n - j + 1) + dp[i - 1][j] * (long) Math.max(j - k, 0)) % M);
            }
        }
        return dp[goal][n];

=======

        if (n == 0 || goal == 0) return 0;
        if (k == 0) {
            return fact(n) == goal ? 1 : 0;
        }
        int mod = 1000000007;
        long[][] dp = new long[goal + 1][n + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= goal; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j - 1] * (n - j + 1) + dp[i - 1][j] * Math.max(j - k, 0);
                dp[i][j] %= mod;
            }
        }
        return (int) dp[goal][n];
    }
    private long fact(int n) {
        long res = 1;
        for (int i = 1; i <= n; i++) {
            res *= i;
        }
        return res;
