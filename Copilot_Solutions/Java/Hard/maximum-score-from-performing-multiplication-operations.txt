Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int m = multipliers.length;
        int[][] dp = new int[m + 1][m + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                if (i + j == 0) {
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + nums[i - 1] * multipliers[i + j - 1]);
                }
                if (j > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + nums[n - j] * multipliers[i + j - 1]);
                }
            }
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[i][m - i]);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[][] dp = new int[m + 1][m + 1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                if (i + j > m) {
                    continue;
                }
                if (i > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j] + nums[i - 1] * multipliers[i + j - 1]);
                }
                if (j > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i][j - 1] + nums[n - j] * multipliers[i + j - 1]);
                }
            }
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[i][m - i]);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[][] dp = new int[m + 1][m + 1];
        for (int i = 0; i <= m; i++) {
            Arrays.fill(dp[i], Integer.MIN_VALUE);
        }
        dp[0][0] = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j <= i; j++) {
                int k = i - j;
                if (j > 0) {
                    dp[j][k] = Math.max(dp[j][k], dp[j - 1][k] + nums[j - 1] * multipliers[i - 1]);
                }
                if (k > 0) {
                    dp[j][k] = Math.max(dp[j][k], dp[j][k - 1] + nums[n - k] * multipliers[i - 1]);
                }
            }
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[i][m - i]);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[] dp = new int[m + 1];
        Arrays.fill(dp, Integer.MIN_VALUE);
        dp[0] = 0;
        for (int k = 1; k <= m; k++) {
            int[] ndp = new int[m + 1];
            Arrays.fill(ndp, Integer.MIN_VALUE);
            for (int i = 0; i <= k; i++) {
                int j = k - i;
                if (i > 0) {
                    ndp[i] = Math.max(ndp[i], dp[i - 1] + nums[i - 1] * multipliers[k - 1]);
                }
                if (j > 0) {
                    ndp[i] = Math.max(ndp[i], dp[i] + nums[n - j] * multipliers[k - 1]);
                }
            }
            dp = ndp;
        }
        int ans = Integer.MIN_VALUE;
        for (int x : dp) {
            ans = Math.max(ans, x);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[][] dp = new int[m+1][m+1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j <= i; j++) {
                if (j > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + nums[j-1] * multipliers[i-1]);
                }
                if (j < i) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j] + nums[n-i+j] * multipliers[i-1]);
                }
            }
        }
        int res = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            res = Math.max(res, dp[m][i]);
        }
        return res;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[][] dp = new int[m+1][m+1];
        for (int i = 0; i <= m; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = Integer.MIN_VALUE;
            }
        }
        dp[0][0] = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j <= i; j++) {
                int k = i - j;
                if (j > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + nums[j-1] * multipliers[i-1]);
                }
                if (k > 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i-1][j] + nums[n-k] * multipliers[i-1]);
                }
            }
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[m][i]);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[] dp = new int[m + 1];
        for (int i = 1; i <= m; i++) {
            int[] ndp = new int[i + 1];
            for (int j = 0; j <= i; j++) {
                int k = i - j;
                ndp[j] = Integer.MIN_VALUE;
                if (j > 0) {
                    ndp[j] = Math.max(ndp[j], dp[j - 1] + multipliers[i - 1] * nums[j - 1]);
                }
                if (k > 0) {
                    ndp[j] = Math.max(ndp[j], dp[j] + multipliers[i - 1] * nums[n - k]);
                }
            }
            dp = ndp;
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            ans = Math.max(ans, dp[i]);
        }
        return ans;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[] dp = new int[m + 1];
        for (int i = 1; i <= m; i++) {
            int[] ndp = new int[i + 1];
            for (int j = 0; j <= i; j++) {
                int l = j - 1 >= 0 ? dp[j - 1] : Integer.MIN_VALUE;
                int r = j < i ? dp[j] : Integer.MIN_VALUE;
                ndp[j] = Math.max(l + nums[j] * multipliers[i - 1], r + nums[n + j - i] * multipliers[i - 1]);
            }
            dp = ndp;
        }
        int res = Integer.MIN_VALUE;
        for (int i = 0; i <= m; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = nums.length;
        int m = multipliers.length;
        int[] dp = new int[m];
        for (int i = 0; i < m; i++) {
            for (int j = i; j >= 0; j--) {
                if (j > 0) {
                    dp[j] = Math.max(dp[j], dp[j - 1]);
                }
                dp[j] += nums[i - j] * multipliers[i];
            }
        }
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < m; i++) {
            if (i >= n - m) {
                res = Math.max(res, dp[i]);
            }
        }
        return res;

=======

        int n = nums.length, m = multipliers.length;
        int[] dp = new int[m + 1];
        for (int i = 0; i < m; i++) {
            int[] dp2 = new int[m + 1];
            for (int j = 0; j <= i; j++) {
                dp2[j] = Math.max(dp2[j], dp[j] + nums[j] * multipliers[i]);
                dp2[j + 1] = Math.max(dp2[j + 1], dp[j] + nums[n - i + j - 1] * multipliers[i]);
            }
            dp = dp2;
        }
        return Arrays.stream(dp).max().getAsInt();
