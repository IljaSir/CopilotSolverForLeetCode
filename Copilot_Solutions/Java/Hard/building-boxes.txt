Synthesizing 10/10 solutions

=======

        int i = 1;
        int sum = 0;
        while (sum + i * (i + 1) / 2 <= n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        i--;
        int j = 1;
        while (sum + j <= n) {
            sum += j;
            j++;
        }
        return i * i + j - 1;

=======

        int i = 1;
        int sum = 0;
        while (sum + i * (i + 1) / 2 <= n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        int j = i - 1;
        while (sum < n) {
            sum += j;
            j--;
        }
        return sum;

=======

        int level = 0, sum = 0;
        while (sum < n) {
            level++;
            sum += level * (level + 1) / 2;
        }
        while (sum > n) {
            sum -= level;
            level--;
        }
        return sum;

=======

        int i = 1;
        int sum = 0;
        while (sum < n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        i--;
        sum -= i * (i + 1) / 2;
        int j = 1;
        while (sum < n) {
            sum += j;
            j++;
        }
        return i * (i + 1) / 2 + j - 1;

=======

        int sum = 0;
        int level = 1;
        while (sum < n) {
            sum += level * (level + 1) / 2;
            level++;
        }
        level--;
        sum -= level * (level + 1) / 2;
        int boxes = level * (level + 1) / 2;
        while (sum < n) {
            sum += level;
            boxes++;
            level--;
        }
        return boxes;

=======

        int sum = 0, level = 0;
        while (sum < n) {
            level++;
            sum += level * (level + 1) / 2;
        }
        if (sum == n) return sum;
        int boxes = level * (level + 1) / 2;
        for (int i = level; i > 0; i--) {
            boxes -= i;
            if (boxes == n) return sum;
            if (boxes < n) return sum - 1;
        }
        return 0;

=======

        long sum = 0, i = 1;
        while (sum < n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        i--;
        sum -= i * (i + 1) / 2;
        while (sum + i <= n) {
            sum += i;
            i--;
        }
        return (int) (i * (i + 1) / 2 + n - sum);

=======

        int level = 0;
        int sum = 0;
        while(sum + (level + 1) * (level + 2) / 2 <= n) {
            sum += (level + 1) * (level + 2) / 2;
            level++;
        }
        int i = 1;
        while(sum + i * (i + 1) / 2 <= n) {
            sum += i * (i + 1) / 2;
            i++;
        }
        return level * level + i - 1;

=======

        int i = 1;
        int sum = 0;
        while (sum + i <= n) {
            sum += i;
            i++;
        }
        int j = i - 1;
        while (sum + j > n) {
            j--;
        }
        return i * (i - 1) / 2 + j;

=======

        int i = 1;
        int sum = 0;
        while(sum < n) {
            sum += i;
            i++;
        }
        i--;
        int j = 1;
        while(sum > n) {
            sum -= i;
            i--;
            j++;
        }
        return (i * (i + 1) / 2) + j;
