Synthesizing 10/10 solutions

=======

        int row = destination[0];
        int col = destination[1];
        int[][] dp = new int[row + 1][col + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= row; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= col; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        StringBuilder sb = new StringBuilder();
        while (row > 0 || col > 0) {
            if (row == 0) {
                sb.append('H');
                col--;
            } else if (col == 0) {
                sb.append('V');
                row--;
            } else {
                if (k <= dp[row - 1][col]) {
                    sb.append('V');
                    row--;
                } else {
                    sb.append('H');
                    k -= dp[row - 1][col];
                    col--;
                }
            }
        }
        return sb.toString();

=======

        int row = destination[0];
        int col = destination[1];
        int[][] dp = new int[row + 1][col + 1];
        dp[0][0] = 1;
        for (int i = 0; i <= row; i++) {
            for (int j = 0; j <= col; j++) {
                if (i > 0) {
                    dp[i][j] += dp[i - 1][j];
                }
                if (j > 0) {
                    dp[i][j] += dp[i][j - 1];
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        while (row > 0 || col > 0) {
            if (row == 0) {
                sb.append('H');
                col--;
            } else if (col == 0) {
                sb.append('V');
                row--;
            } else {
                if (dp[row][col - 1] >= k) {
                    sb.append('H');
                    col--;
                } else {
                    sb.append('V');
                    k -= dp[row][col - 1];
                    row--;
                }
            }
        }
        return sb.toString();

=======

        int row = destination[0], col = destination[1];
        int[][] dp = new int[row + 1][col + 1];
        dp[0][0] = 1;
        for (int i = 0; i <= row; i++) {
            for (int j = 0; j <= col; j++) {
                if (i == 0 && j == 0) continue;
                dp[i][j] = i > 0 ? dp[i - 1][j] : 0;
                dp[i][j] += j > 0 ? dp[i][j - 1] : 0;
            }
        }
        StringBuilder sb = new StringBuilder();
        while (row > 0 || col > 0) {
            if (row > 0 && k > dp[row - 1][col]) {
                k -= dp[row - 1][col];
                row--;
                sb.append('V');
            } else {
                col--;
                sb.append('H');
            }
        }
        return sb.toString();

=======

        int row = destination[0], col = destination[1];
        int[][] dp = new int[row + 1][col + 1];
        dp[0][0] = 1;
        for (int i = 0; i <= row; i++) {
            for (int j = 0; j <= col; j++) {
                if (i == 0 && j == 0) {
                    continue;
                }
                dp[i][j] = (i > 0 ? dp[i - 1][j] : 0) + (j > 0 ? dp[i][j - 1] : 0);
            }
        }
        StringBuilder ans = new StringBuilder();
        while (row > 0 || col > 0) {
            if (row > 0 && dp[row - 1][col] >= k) {
                ans.append("H");
                row--;
            } else {
                ans.append("V");
                k -= dp[row][col - 1];
                col--;
            }
        }
        return ans.toString();

=======

        int row = destination[0];
        int col = destination[1];
        int[][] dp = new int[row+1][col+1];
        dp[0][0] = 1;
        for (int i = 1; i <= row; i++) {
            dp[i][0] = 1;
        }
        for (int j = 1; j <= col; j++) {
            dp[0][j] = 1;
        }
        for (int i = 1; i <= row; i++) {
            for (int j = 1; j <= col; j++) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        StringBuilder sb = new StringBuilder();
        while (row > 0 || col > 0) {
            if (row == 0) {
                sb.append("H");
                col--;
            } else if (col == 0) {
                sb.append("V");
                row--;
            } else {
                if (dp[row-1][col] >= k) {
                    sb.append("V");
                    row--;
                } else {
                    k -= dp[row-1][col];
                    sb.append("H");
                    col--;
                }
            }
        }
        return sb.toString();

=======

        int row = destination[0];
        int col = destination[1];
        int[][] dp = new int[row+1][col+1];
        dp[0][0] = 1;
        for (int i = 0; i <= row; i++) {
            for (int j = 0; j <= col; j++) {
                if (i > 0) {
                    dp[i][j] += dp[i-1][j];
                }
                if (j > 0) {
                    dp[i][j] += dp[i][j-1];
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int j = 0;
        while (i != row || j != col) {
            if (i == row) {
                sb.append("H");
                j++;
            } else if (j == col) {
                sb.append("V");
                i++;
            } else {
                if (dp[i][j+1] >= k) {
                    sb.append("H");
                    j++;
                } else {
                    sb.append("V");
                    k -= dp[i][j+1];
                    i++;
                }
            }
        }
        return sb.toString();

=======

        int n = destination[0];
        int m = destination[1];
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                } else if (i == 0) {
                    dp[i][j] = dp[i][j - 1];
                } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        int p = n;
        int q = m;
        StringBuilder sb = new StringBuilder();
        while (p > 0 || q > 0) {
            if (p > 0 && dp[p - 1][q] >= k) {
                sb.append("H");
                p--;
            } else {
                k -= dp[p][q - 1];
                sb.append("V");
                q--;
            }
        }
        return sb.toString();

=======

        int row = destination[0], col = destination[1];
        int[][] dp = new int[row + col + 1][col + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= row + col; i++) {
            dp[i][0] = 1;
            for (int j = 1; j <= i && j <= col; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
            }
        }
        StringBuilder sb = new StringBuilder();
        while (row > 0 && col > 0) {
            if (dp[row + col - 1][col] >= k) {
                sb.append('H');
                col--;
            } else {
                sb.append('V');
                k -= dp[row + col - 1][col];
                row--;
            }
        }
        while (row > 0) {
            sb.append('V');
            row--;
        }
        while (col > 0) {
            sb.append('H');
            col--;
        }
        return sb.toString();

=======

        int row = destination[0], col = destination[1];
        char[] res = new char[row + col];
        int index = 0;
        while (row > 0 || col > 0) {
            if (row == 0) {
                res[index++] = 'H';
                col--;
            } else if (col == 0) {
                res[index++] = 'V';
                row--;
            } else {
                int r = row - 1, c = col;
                int cnt = 0;
                while (r >= 0 && c >= 0) {
                    cnt += C(r + c, r);
                    r--;
                }
                if (cnt >= k) {
                    res[index++] = 'V';
                    row--;
                } else {
                    res[index++] = 'H';
                    col--;
                    k -= cnt;
                }
            }
        }
        return new String(res);
    }

    private int C(int n, int r) {
        long res = 1;
        for (int i = 1; i <= r; i++) {
            res = res * (n - i + 1) / i;
        }
        return (int)res;

=======

        int row = destination[0];
        int col = destination[1];
        
        // create a 2d array to store the number of paths to reach a certain point
        int[][] dp = new int[row + 1][col + 1];
        
        // base case - there is only 1 path to reach a point in the first column
        for (int i = 0; i <= row; i++) {
            dp[i][0] = 1;
        }
        
        // base case - there is only 1 path to reach a point in the first row
        for (int i = 0; i <= col; i++) {
            dp[0][i] = 1;
        }
        
        // fill the dp array
        for (int i = 1; i <= row; i++) {
            for (int j = 1; j <= col; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        // create a string builder to store the path
        StringBuilder sb = new StringBuilder();
        
        // start at the beginning
        int i = 0;
        int j = 0;
        
        // loop until we reach the destination
        while (i < row || j < col) {
            
            // if we are at the bottom, we can only go right
            if (i == row) {
                sb.append('H');
                j++;
            }
            
            // if we are at the right, we can only go down
            else if (j == col) {
                sb.append('V');
                i++;
            }
            
            // otherwise, we can go either right or down
            else {
                
                // if there are more paths to reach the destination if we go right, we go right
                if (dp[i][j + 1] >= k) {
                    sb.append('H');
                    j++;
                }
                
                // otherwise, we go down
                else {
                    sb.append('V');
                    i++;
                    k -= dp[i][j];
                }
            }
        }
        
        return sb.toString();
