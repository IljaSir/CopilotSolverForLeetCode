Synthesizing 10/10 solutions

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (colors[i] == -1)
                dfs(graph, colors, i, c++);

        int[] size = new int[c];
        for (int color: colors)
            size[color]++;

        int[] malwareCount = new int[c];
        for (int node: initial) {
            malwareCount[colors[node]]++;
        }

        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int color = colors[node];
            if (malwareCount[color] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[color] > size[colors[ans]])
                    ans = node;
                else if (size[color] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int node: initial)
                ans = Math.min(ans, node);
        }

        return ans;

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; ++i)
            if (colors[i] == -1)
                dfs(graph, colors, i, c++);

        int[] colorSize = new int[c];
        for (int color: colors)
            colorSize[color]++;

        int[] infected = new int[c];
        for (int node: initial) {
            int color = colors[node];
            infected[color]++;
        }

        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int color = colors[node];
            if (infected[color] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (colorSize[color] > colorSize[colors[ans]])
                    ans = node;
                else if (colorSize[color] == colorSize[colors[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int node: initial)
                ans = Math.min(ans, node);
        }

        return ans;

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                dfs(i, c++, graph, colors);
            }
        }
        int[] colorSize = new int[c];
        for (int color: colors) {
            colorSize[color]++;
        }
        int[] malwareCount = new int[c];
        for (int node: initial) {
            malwareCount[colors[node]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int color = colors[node];
            if (malwareCount[color] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = node;
                } else if (colorSize[color] > colorSize[colors[ans]]) {
                    ans = node;
                } else if (colorSize[color] == colorSize[colors[ans]] && node < ans) {
                    ans = node;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int node: initial) {
                ans = Math.min(ans, node);
            }
        }
        return ans;
    }
    public void dfs(int node, int color, int[][] graph, int[] colors) {
        colors[node] = color;
        for (int nei = 0; nei < graph.length; nei++) {
            if (graph[node][nei] == 1 && colors[nei] == -1) {
                dfs(nei, color, graph, colors);
            }
        }

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        for (int c = 0, i = 0; i < n; ++i)
            if (color[i] == -1)
                dfs(graph, color, i, c++);

        int[] size = new int[n];
        for (int c: color)
            size[c]++;

        int[] malwareCount = new int[n];
        for (int i: initial)
            malwareCount[color[i]]++;

        int ans = Integer.MAX_VALUE;
        for (int i: initial) {
            int c = color[i];
            if (malwareCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = i;
                else if (size[c] > size[color[ans]])
                    ans = i;
                else if (size[c] == size[color[ans]] && i < ans)
                    ans = i;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int i: initial)
                ans = Math.min(ans, i);

        return ans;

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        
        int[] colorSize = new int[c];
        for (int i = 0; i < n; i++) {
            colorSize[color[i]]++;
        }
        
        int[] infected = new int[c];
        for (int i : initial) {
            infected[color[i]]++;
        }
        
        int ans = Integer.MAX_VALUE;
        for (int i : initial) {
            int nodeColor = color[i];
            if (infected[nodeColor] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = i;
                } else if (colorSize[nodeColor] > colorSize[color[ans]]) {
                    ans = i;
                } else if (colorSize[nodeColor] == colorSize[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        
        if (ans == Integer.MAX_VALUE) {
            for (int i : initial) {
                ans = Math.min(ans, i);
            }
        }
        
        return ans;
    }
    
    private void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; nei++) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, nei, c);
            }
        }

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);

        int c = 0;
        for (int i = 0; i < n; ++i)
            if (color[i] == -1)
                dfs(graph, color, i, c++);

        int[] size = new int[c];
        for (int x: color)
            size[x]++;

        int[] malware = new int[c];
        for (int x: initial)
            malware[color[x]]++;

        int ans = Integer.MAX_VALUE;
        for (int x: initial) {
            int c2 = color[x];
            if (malware[c2] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = x;
                else if (size[c2] > size[color[ans]])
                    ans = x;
                else if (size[c2] == size[color[ans]] && x < ans)
                    ans = x;
            }
        }

        if (ans == Integer.MAX_VALUE) {
            for (int x: initial)
                ans = Math.min(ans, x);
        }

        return ans;
    }

    public void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && color[nei] == -1)
                dfs(graph, color, nei, c);

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        int[] size = new int[c];
        for (int x : color) {
            size[x]++;
        }
        int[] malware = new int[c];
        for (int x : initial) {
            malware[color[x]]++;
        }
        int ans = Integer.MAX_VALUE;
        for (int x : initial) {
            int c1 = color[x];
            if (malware[c1] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = x;
                } else if (size[c1] > size[color[ans]]) {
                    ans = x;
                } else if (size[c1] == size[color[ans]] && x < ans) {
                    ans = x;
                }
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int x : initial) {
                ans = Math.min(ans, x);
            }
        }
        return ans;
    }
    private void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; nei++) {
            if (graph[node][nei] == 1 && color[nei] == -1) {
                dfs(graph, color, nei, c);
            }
        }

=======

        int n = graph.length;
        int[] color = new int[n];
        Arrays.fill(color, -1);
        
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (color[i] == -1) {
                dfs(graph, color, i, c++);
            }
        }
        
        int[] size = new int[c];
        for (int i = 0; i < n; i++) {
            size[color[i]]++;
        }
        
        int[] malware = new int[c];
        for (int i : initial) {
            malware[color[i]]++;
        }
        
        int ans = Integer.MAX_VALUE;
        for (int i : initial) {
            int node = color[i];
            if (malware[node] == 1) {
                if (ans == Integer.MAX_VALUE) {
                    ans = i;
                } else if (size[node] > size[color[ans]]) {
                    ans = i;
                } else if (size[node] == size[color[ans]] && i < ans) {
                    ans = i;
                }
            }
        }
        
        if (ans == Integer.MAX_VALUE) {
            for (int i : initial) {
                ans = Math.min(ans, i);
            }
        }
        
        return ans;
    }
    
    private void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int i = 0; i < graph.length; i++) {
            if (graph[node][i] == 1 && color[i] == -1) {
                dfs(graph, color, i, c);
            }
        }

=======

        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for (int i = 0; i < n; ++i) if (colors[i] == -1) dfs(graph, colors, i, c++);
        int[] size = new int[c];
        for (int color: colors) size[color]++;
        int[] colorCount = new int[c];
        for (int node: initial) colorCount[colors[node]]++;
        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c1 = colors[node];
            if (colorCount[c1] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c1] > size[colors[ans]])
                    ans = node;
                else if (size[c1] == size[colors[ans]] && node < ans)
                    ans = node;
            }
        }
        if (ans == Integer.MAX_VALUE) {
            for (int node: initial)
                ans = Math.min(ans, node);
        }
        return ans;

=======

        int N = graph.length;
        int[] color = new int[N];
        Arrays.fill(color, -1);
        int[] size = new int[N];
        int C = 0;
        for (int node = 0; node < N; ++node)
            if (color[node] == -1) {
                dfs(graph, color, node, C);
                size[C] = count(color, C);
                C++;
            }

        // Find unique colors
        int[] colorCount = new int[N];
        for (int node: initial)
            colorCount[color[node]]++;

        // Answer
        int ans = Integer.MAX_VALUE;
        for (int node: initial) {
            int c = color[node];
            if (colorCount[c] == 1) {
                if (ans == Integer.MAX_VALUE)
                    ans = node;
                else if (size[c] > size[color[ans]])
                    ans = node;
                else if (size[c] == size[color[ans]] && node < ans)
                    ans = node;
            }
        }

        if (ans == Integer.MAX_VALUE)
            for (int node: initial)
                ans = Math.min(ans, node);

        return ans;
    }

    public void dfs(int[][] graph, int[] color, int node, int c) {
        color[node] = c;
        for (int nei = 0; nei < graph.length; ++nei)
            if (graph[node][nei] == 1 && color[nei] == -1)
                dfs(graph, color, nei, c);
