Synthesizing 10/10 solutions

=======

        int n = rods.length;
        int sum = 0;
        for (int rod : rods) {
            sum += rod;
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j - rods[i - 1] >= 0) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1]);
                }
                if (j + rods[i - 1] <= sum) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + rods[i - 1]]);
                }
            }
        }
        return dp[n][0] / 2;

=======

        int n = rods.length;
        int sum = 0;
        for (int rod : rods) {
            sum += rod;
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 1; i <= n; i++) {
            int rod = rods[i - 1];
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= rod) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - rod]);
                }
                if (j + rod <= sum) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + rod] + rod);
                }
            }
        }
        return dp[n][0] / 2;

=======

        int n = rods.length;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += rods[i];
        }
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = -1;
            }
        }
        dp[0][0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= rods[i - 1] && dp[i - 1][j - rods[i - 1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1]);
                }
                if (j + rods[i - 1] <= sum && dp[i - 1][j + rods[i - 1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + rods[i - 1]]);
                }
            }
        }
        return dp[n][0] / 2;

=======

        int sum = 0;
        for (int rod : rods) {
            sum += rod;
        }
        int target = sum / 2;
        int[][] dp = new int[rods.length + 1][target + 1];
        for (int i = 1; i <= rods.length; i++) {
            for (int j = 1; j <= target; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= rods[i - 1]) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1]);
                }
            }
        }
        return dp[rods.length][target];

=======

        int sum = 0;
        for (int rod : rods) {
            sum += rod;
        }
        int[][] dp = new int[rods.length][sum + 1];
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                dp[i][j] = -1;
            }
        }
        return dfs(rods, 0, 0, 0, dp);
    }
    
    public int dfs(int[] rods, int index, int sum1, int sum2, int[][] dp) {
        if (index == rods.length) {
            if (sum1 == sum2) {
                return sum1;
            }
            return 0;
        }
        if (dp[index][sum1] != -1) {
            return dp[index][sum1];
        }
        int result = 0;
        if (sum1 >= sum2) {
            result = Math.max(result, dfs(rods, index + 1, sum1, sum2 + rods[index], dp));
            result = Math.max(result, dfs(rods, index + 1, sum1 + rods[index], sum2, dp));
            result = Math.max(result, dfs(rods, index + 1, sum1, sum2, dp));
        } else {
            result = Math.max(result, dfs(rods, index + 1, sum1, sum2 + rods[index], dp));
            result = Math.max(result, dfs(rods, index + 1, sum1, sum2, dp));
        }
        dp[index][sum1] = result;
        return result;

=======

        int n = rods.length;
        int[][] dp = new int[n + 1][5001];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        dp[0][0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= 5000; j++) {
                if (dp[i - 1][j] != -1) {
                    dp[i][j] = dp[i - 1][j];
                }
                if (j >= rods[i - 1] && dp[i - 1][j - rods[i - 1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1]);
                }
                if (j + rods[i - 1] <= 5000 && dp[i - 1][j + rods[i - 1]] != -1) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + rods[i - 1]]);
                }
            }
        }
        return dp[n][0];

=======

        int n = rods.length;
        int[][] dp = new int[n + 1][5001];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= 5000; j++) {
                if (dp[i][j] >= 0) {
                    dp[i + 1][j] = Math.max(dp[i + 1][j], dp[i][j]);
                    dp[i + 1][j + rods[i]] = Math.max(dp[i + 1][j + rods[i]], dp[i][j] + rods[i]);
                    dp[i + 1][Math.abs(j - rods[i])] = Math.max(dp[i + 1][Math.abs(j - rods[i])], dp[i][j]);
                }
            }
        }
        return dp[n][0];

=======

        int n = rods.length;
        int sum = 0;
        for (int rod : rods) {
            sum += rod;
        }
        int m = sum / 2;
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 1; i <= n; i++) {
            int x = rods[i - 1];
            for (int j = 0; j <= m; j++) {
                dp[i][j] = dp[i - 1][j];
                if (j >= x) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - x] + x);
                }
                if (j + x <= m) {
                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j + x]);
                }
            }
        }
        return dp[n][0];

=======

        int N = rods.length;
        int[][] dp = new int[N + 1][5001];
        for (int i = 0; i <= N; i++) {
            Arrays.fill(dp[i], -1);
        }
        dp[0][2500] = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j <= 5000; j++) {
                if (dp[i][j] >= 0) {
                    dp[i + 1][j] = Math.max(dp[i + 1][j], dp[i][j]);
                    dp[i + 1][j + rods[i]] = Math.max(dp[i + 1][j + rods[i]], dp[i][j]);
                    dp[i + 1][Math.abs(j - rods[i])] = Math.max(dp[i + 1][Math.abs(j - rods[i])], dp[i][j] + Math.min(j, rods[i]));
                }
            }
        }
        return dp[N][2500];

=======

        int sum = 0;
        for (int rod: rods) {
            sum += rod;
        }
        int[][] dp = new int[rods.length][sum+1];
        for (int i = 0; i < rods.length; i++) {
            for (int j = 0; j < sum+1; j++) {
                dp[i][j] = -1;
            }
        }
        return helper(rods, 0, 0, 0, dp);
    }
    private int helper(int[] rods, int i, int sum1, int sum2, int[][] dp) {
        if (i == rods.length) {
            if (sum1 == sum2) {
                return sum1;
            }
            return -1;
        }
        if (dp[i][sum1] != -1) {
            return dp[i][sum1];
        }
        int result = -1;
        // put in sum1
        int r1 = helper(rods, i+1, sum1+rods[i], sum2, dp);
        if (r1 != -1) {
            result = Math.max(result, r1);
        }
        // put in sum2
        int r2 = helper(rods, i+1, sum1, sum2+rods[i], dp);
        if (r2 != -1) {
            result = Math.max(result, r2);
        }
        // put in both
        int r3 = helper(rods, i+1, sum1+rods[i], sum2+rods[i], dp);
        if (r3 != -1) {
            result = Math.max(result, r3);
        }
        // put in none
        int r4 = helper(rods, i+1, sum1, sum2, dp);
        if (r4 != -1) {
            result = Math.max(result, r4);
        }
        dp[i][sum1] = result;
        return result;
