Synthesizing 10/10 solutions

=======

        int n = strs.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    uf.union(i, j);
                }
            }
        }
        return uf.getCount();
    }
    
    private boolean isSimilar(String a, String b) {
        int m = a.length();
        int diff = 0;
        for (int i = 0; i < m; i++) {
            if (a.charAt(i) != b.charAt(i)) {
                diff++;
            }
        }
        return diff == 2 || diff == 0;
    }
}

=======

        int n = strs.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    uf.union(i, j);
                }
            }
        }
        return uf.count;
    }
    
    private boolean isSimilar(String s1, String s2) {
        int count = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
            if (count > 2) {
                return false;
            }
        }
        return true;
    }
    
    class UnionFind {
        int[] parent;
        int[] rank;
        int count;
        
        public UnionFind(int n) {
            parent = new int[n];
            rank = new int[n];
            count = n;
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }
        
        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }
            parent[x] = find(parent[x]);
            return parent[x];
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) {
                return;
            }
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
            count--;
        }

=======

        int n = strs.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (uf.find(i) == uf.find(j)) continue;
                if (isSimilar(strs[i], strs[j])) uf.union(i, j);
            }
        }
        return uf.count;
    }

    private boolean isSimilar(String s1, String s2) {
        int diff = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                diff++;
                if (diff > 2) return false;
            }
        }
        return true;
    }

    class UnionFind {
        int[] parent;
        int[] size;
        int count;

        public UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            count = n;
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        public int find(int i) {
            if (parent[i] == i) return i;
            return parent[i] = find(parent[i]);
        }

        public void union(int i, int j) {
            int pi = find(i);
            int pj = find(j);
            if (pi == pj) return;
            if (size[pi] > size[pj]) {
                parent[pj] = pi;
                size[pi] += size[pj];
            } else {
                parent[pi] = pj;
                size[pj] += size[pi];
            }
            count--;
        }

=======

        int n = strs.length;
        int[] p = new int[n];
        for (int i = 0; i < n; i++) p[i] = i;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    int pi = find(p, i);
                    int pj = find(p, j);
                    if (pi != pj) {
                        p[pi] = pj;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (p[i] == i) res++;
        }
        return res;
    }
    
    private int find(int[] p, int x) {
        if (p[x] != x) p[x] = find(p, p[x]);
        return p[x];
    }
    
    private boolean isSimilar(String s1, String s2) {
        int n = s1.length();
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) cnt++;
            if (cnt > 2) return false;
        }
        return true;

=======

        int n = strs.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) union(parent, i, j);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) res++;
        }
        return res;
    }
    private void union(int[] parent, int i, int j) {
        int x = find(parent, i);
        int y = find(parent, j);
        if (x == y) return;
        parent[x] = y;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) parent[i] = find(parent, parent[i]);
        return parent[i];
    }
    private boolean isSimilar(String a, String b) {
        int diff = 0;
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) != b.charAt(i)) diff++;
            if (diff > 2) return false;
        }
        return true;

=======

        int n = strs.length;
        int[] parent = new int[n];
        int[] rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    union(parent, rank, i, j);
                }
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) {
                count++;
            }
        }
        return count;
    }
    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }
    private void union(int[] parent, int[] rank, int i, int j) {
        int pi = find(parent, i);
        int pj = find(parent, j);
        if (pi == pj) {
            return;
        }
        if (rank[pi] < rank[pj]) {
            parent[pi] = pj;
        } else if (rank[pi] > rank[pj]) {
            parent[pj] = pi;
        } else {
            parent[pj] = pi;
            rank[pi]++;
        }
    }
    private boolean isSimilar(String s1, String s2) {
        int n = s1.length();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
            if (count > 2) {
                return false;
            }
        }
        return true;

=======

        int n = strs.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; ++i) parent[i] = i;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (isSimilar(strs[i], strs[j])) {
                    int x = find(parent, i);
                    int y = find(parent, j);
                    if (x != y) {
                        parent[x] = y;
                        --n;
                    }
                }
            }
        }
        return n;
    }

    private boolean isSimilar(String s1, String s2) {
        int n = s1.length();
        int diff = 0;
        for (int i = 0; i < n; ++i) {
            if (s1.charAt(i) != s2.charAt(i)) {
                ++diff;
                if (diff > 2) return false;
            }
        }
        return true;
    }

    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];

=======

        int n = strs.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        int[] rank = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    union(parent, rank, i, j);
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (parent[i] == i) {
                ans++;
            }
        }
        return ans;
    }

    private int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }

    private void union(int[] parent, int[] rank, int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);
        if (xRoot == yRoot) {
            return;
        }
        if (rank[xRoot] < rank[yRoot]) {
            parent[xRoot] = yRoot;
        } else if (rank[xRoot] > rank[yRoot]) {
            parent[yRoot] = xRoot;
        } else {
            parent[yRoot] = xRoot;
            rank[xRoot]++;
        }
    }

    private boolean isSimilar(String s, String t) {
        int n = s.length();
        int diff = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) != t.charAt(i)) {
                diff++;
            }
        }
        return diff == 2 || diff == 0;

=======

        int n = strs.length;
        int[] parent = new int[n];
        for(int i=0; i<n; i++) {
            parent[i] = i;
        }
        for(int i=0; i<n; i++) {
            for(int j=i+1; j<n; j++) {
                if(isSimilar(strs[i], strs[j])) {
                    union(parent, i, j);
                }
            }
        }
        int count = 0;
        for(int i=0; i<n; i++) {
            if(parent[i] == i) {
                count++;
            }
        }
        return count;
    }
    
    private boolean isSimilar(String str1, String str2) {
        int count = 0;
        for(int i=0; i<str1.length(); i++) {
            if(str1.charAt(i) != str2.charAt(i)) {
                count++;
            }
        }
        return count == 2 || count == 0;
    }
    
    private int find(int[] parent, int i) {
        if(parent[i] == i) {
            return i;
        }
        return find(parent, parent[i]);
    }
    
    private void union(int[] parent, int i, int j) {
        int x = find(parent, i);
        int y = find(parent, j);
        if(x != y) {
            parent[x] = y;
        }

=======

        if (strs == null || strs.length == 0) {
            return 0;
        }
        int len = strs.length;
        int[] group = new int[len];
        for (int i = 0; i < len; i++) {
            group[i] = i;
        }
        for (int i = 0; i < len; i++) {
            for (int j = i + 1; j < len; j++) {
                if (isSimilar(strs[i], strs[j])) {
                    union(group, i, j);
                }
            }
        }
        int count = 0;
        for (int i = 0; i < len; i++) {
            if (group[i] == i) {
                count++;
            }
        }
        return count;
    }
    
    private int find(int[] group, int i) {
        if (group[i] == i) {
            return i;
        }
        return find(group, group[i]);
    }
    
    private void union(int[] group, int i, int j) {
        int pi = find(group, i);
        int pj = find(group, j);
        if (pi != pj) {
            group[pi] = pj;
        }
    }
    
    private boolean isSimilar(String s1, String s2) {
        int len = s1.length();
        int count = 0;
        for (int i = 0; i < len; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                count++;
            }
        }
        return count == 2 || count == 0;
