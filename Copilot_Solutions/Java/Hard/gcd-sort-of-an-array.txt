Synthesizing 10/10 solutions

=======

        int n = nums.length;
        int[] parent = new int[100001];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int i = 2; i < parent.length; i++) {
            for (int j = i + i; j < parent.length; j += i) {
                union(parent, i, j);
            }
        }
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(sorted[i], i);
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, nums[i]) != find(parent, sorted[i])) {
                return false;
            }
        }
        return true;
    }
    
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = nums.length;
        int[] roots = new int[100001];
        for (int i = 0; i < roots.length; i++) {
            roots[i] = i;
        }
        for (int i = 2; i < roots.length; i++) {
            if (roots[i] == i) {
                for (int j = i + i; j < roots.length; j += i) {
                    if (roots[j] == j) {
                        roots[j] = i;
                    }
                }
            }
        }
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(sorted[i], i);
        }
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            int p = map.get(nums[i]);
            int q = i;
            int rootP = roots[nums[p]];
            int rootQ = roots[nums[q]];
            if (rootP != rootQ) {
                uf.union(p, q);
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != sorted[i] && uf.find(i) != uf.find(map.get(sorted[i]))) {
                return false;
            }
        }
        return true;
    }
}

=======

        int n = nums.length;
        int[] p = new int[100001];
        for (int i = 2; i < 100001; ++i) {
            if (p[i] == 0) {
                for (int j = i; j < 100001; j += i) {
                    p[j] = i;
                }
            }
        }
        UnionFind uf = new UnionFind(100001);
        for (int x: nums) {
            int t = x;
            while (t > 1) {
                int prime = p[t];
                uf.union(x, prime);
                while (t % prime == 0) {
                    t /= prime;
                }
            }
        }
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        for (int i = 0; i < n; ++i) {
            if (uf.find(nums[i]) != uf.find(sorted[i])) {
                return false;
            }
        }
        return true;
    }
}

=======

        int[] sorted = Arrays.copyOf(nums, nums.length);
        Arrays.sort(sorted);
        int n = nums.length;
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (gcd(nums[i], nums[j]) > 1) {
                    union(parent, i, j);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, i) != find(parent, sorted[i])) {
                return false;
            }
        }
        return true;
    }

    private int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        parent[i] = find(parent, parent[i]);
        return parent[i];
    }

    private void union(int[] parent, int i, int j) {
        int pi = find(parent, i);
        int pj = find(parent, j);
        parent[pi] = pj;
    }

    private int gcd(int a, int b) {
        if (a > b) {
            return gcd(b, a);
        }
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int n = nums.length;
        int[] root = new int[n];
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        int[] size = new int[n];
        Arrays.fill(size, 1);
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (gcd(nums[i], nums[j]) > 1) {
                    int x = find(root, i);
                    int y = find(root, j);
                    if (x != y) {
                        if (size[x] > size[y]) {
                            root[y] = x;
                            size[x] += size[y];
                        } else {
                            root[x] = y;
                            size[y] += size[x];
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != sorted[i]) {
                if (find(root, i) != find(root, Arrays.binarySearch(sorted, nums[i]))) {
                    return false;
                }
            }
        }
        return true;
    }
    
    private int find(int[] root, int i) {
        if (root[i] != i) {
            root[i] = find(root, root[i]);
        }
        return root[i];

=======

        int n = nums.length;
        int[] parent = new int[100001];
        for (int i = 0; i < 100001; i++) {
            parent[i] = i;
        }
        int[] size = new int[100001];
        Arrays.fill(size, 1);
        for (int i = 2; i < 100001; i++) {
            for (int j = i * 2; j < 100001; j += i) {
                union(parent, size, i, j);
            }
        }
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int[] pos = new int[100001];
        for (int i = 0; i < n; i++) {
            pos[sorted[i]] = i;
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, nums[i]) != find(parent, sorted[i])) {
                return false;
            }
            if (pos[nums[i]] != i) {
                return false;
            }
        }
        return true;
    }
    private int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int[] size, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px == py) {
            return;
        }
        if (size[px] < size[py]) {
            parent[px] = py;
            size[py] += size[px];
        } else {
            parent[py] = px;
            size[px] += size[py];
        }

=======

        int n = nums.length;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int[] parent = new int[100001];
        for (int i = 1; i <= 100000; i++) {
            parent[i] = i;
        }
        for (int i = 2; i <= 100000; i++) {
            for (int j = 2 * i; j <= 100000; j += i) {
                union(parent, i, j);
            }
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, nums[i]) != find(parent, sorted[i])) {
                return false;
            }
        }
        return true;
    }

    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }

    public void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }

=======

        int n = nums.length;
        int[] sorted = Arrays.copyOf(nums, n);
        Arrays.sort(sorted);
        int[] parent = new int[100001];
        for (int i = 1; i < parent.length; i++) {
            parent[i] = i;
        }
        for (int i = 2; i < parent.length; i++) {
            for (int j = 2 * i; j < parent.length; j += i) {
                union(parent, i, j);
            }
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, nums[i]) != find(parent, sorted[i])) {
                return false;
            }
        }
        return true;
    }
    
    public int find(int[] parent, int x) {
        if (parent[x] != x) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];

=======

        int n = nums.length;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int[] p = new int[100001];
        for (int i = 2; i < p.length; i++) {
            if (p[i] == 0) {
                for (int j = i; j < p.length; j += i) {
                    p[j] = i;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] != sorted[i]) {
                int a = nums[i];
                int b = sorted[i];
                while (a > 1) {
                    int d = p[a];
                    while (a % d == 0) {
                        a /= d;
                    }
                    while (b % d == 0) {
                        b /= d;
                    }
                }
                if (b > 1) {
                    return false;
                }
            }
        }
        return true;

=======

        int n = nums.length;
        int[] sorted = nums.clone();
        Arrays.sort(sorted);
        int[] parent = new int[100001];
        for (int i = 0; i < parent.length; i++) parent[i] = i;
        for (int i = 2; i < parent.length; i++) {
            for (int j = i + i; j < parent.length; j += i) {
                union(parent, i, j);
            }
        }
        for (int i = 0; i < n; i++) {
            if (find(parent, nums[i]) != find(parent, sorted[i])) {
                return false;
            }
        }
        return true;
    }
    private int find(int[] parent, int x) {
        if (x != parent[x]) {
            parent[x] = find(parent, parent[x]);
        }
        return parent[x];
    }
    private void union(int[] parent, int x, int y) {
        int px = find(parent, x);
        int py = find(parent, y);
        if (px != py) {
            parent[px] = py;
        }
