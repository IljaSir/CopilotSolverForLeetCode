Synthesizing 10/10 solutions

=======

        int n = formula.length();
        Stack<Map<String, Integer>> stack = new Stack<>();
        stack.push(new TreeMap<>());
        for (int i = 0; i < n; ) {
            char ch = formula.charAt(i);
            if (ch == '(') {
                stack.push(new TreeMap<>());
                i++;
            } else if (ch == ')') {
                Map<String, Integer> popMap = stack.pop();
                i++;
                int val = 0;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    val = val * 10 + formula.charAt(i) - '0';
                    i++;
                }
                if (val == 0) val = 1;
                Map<String, Integer> topMap = stack.peek();
                for (Map.Entry<String, Integer> entry : popMap.entrySet()) {
                    topMap.put(entry.getKey(), topMap.getOrDefault(entry.getKey(), 0) + entry.getValue() * val);
                }
            } else {
                int start = i++;
                while (i < n && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String atom = formula.substring(start, i);
                int val = 0;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    val = val * 10 + formula.charAt(i) - '0';
                    i++;
                }
                if (val == 0) val = 1;
                Map<String, Integer> topMap = stack.peek();
                topMap.put(atom, topMap.getOrDefault(atom, 0) + val);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : stack.peek().entrySet()) {
            sb.append(entry.getKey());
            if (entry.getValue() > 1) {
                sb.append(entry.getValue());
            }
        }
        return sb.toString();

=======

        Stack<Map<String, Integer>> stack = new Stack<>();
        Map<String, Integer> map = new HashMap<>();
        int n = formula.length();
        int i = 0;
        while (i < n) {
            char c = formula.charAt(i);
            if (c == '(') {
                stack.push(map);
                map = new HashMap<>();
                i++;
            } else if (c == ')') {
                int start = ++i;
                while (i < n && Character.isDigit(formula.charAt(i))) i++;
                int mul = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                Map<String, Integer> prev = stack.pop();
                for (String s : map.keySet()) {
                    prev.put(s, prev.getOrDefault(s, 0) + map.get(s) * mul);
                }
                map = prev;
            } else {
                int start = i++;
                while (i < n && Character.isLowerCase(formula.charAt(i))) i++;
                String s = formula.substring(start, i);
                start = i;
                while (i < n && Character.isDigit(formula.charAt(i))) i++;
                int mul = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                map.put(s, map.getOrDefault(s, 0) + mul);
            }
        }
        StringBuilder sb = new StringBuilder();
        List<String> list = new ArrayList<>(map.keySet());
        Collections.sort(list);
        for (String s : list) {
            sb.append(s);
            int count = map.get(s);
            if (count > 1) sb.append(count);
        }
        return sb.toString();

=======

        Map<String, Integer> map = new TreeMap<>();
        Stack<Map<String, Integer>> stack = new Stack<>();
        int i = 0;
        while (i < formula.length()) {
            char c = formula.charAt(i);
            if (c == '(') {
                stack.push(map);
                map = new TreeMap<>();
                i++;
            } else if (c == ')') {
                int start = ++i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                Map<String, Integer> top = stack.pop();
                for (Map.Entry<String, Integer> entry : map.entrySet()) {
                    top.put(entry.getKey(), top.getOrDefault(entry.getKey(), 0) + entry.getValue() * count);
                }
                map = top;
            } else {
                int start = i++;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String key = formula.substring(start, i);
                start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                map.put(key, map.getOrDefault(key, 0) + count);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            sb.append(entry.getKey());
            if (entry.getValue() > 1) {
                sb.append(entry.getValue());
            }
        }
        return sb.toString();

=======

        int n = formula.length();
        Stack<Map<String, Integer>> st = new Stack<>();
        st.push(new HashMap<>());
        for (int i = 0; i < n; i++) {
            char c = formula.charAt(i);
            if (c == '(') {
                st.push(new HashMap<>());
            } else if (c == ')') {
                Map<String, Integer> top = st.pop();
                int iStart = ++i;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int mul = iStart < i ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                for (String k : top.keySet()) {
                    int v = top.get(k);
                    st.peek().put(k, st.peek().getOrDefault(k, 0) + v * mul);
                }
                i--;
            } else {
                int iStart = i++;
                while (i < n && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String name = formula.substring(iStart, i);
                iStart = i;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int mul = iStart < i ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                st.peek().put(name, st.peek().getOrDefault(name, 0) + mul);
                i--;
            }
        }
        Map<String, Integer> map = st.pop();
        StringBuilder sb = new StringBuilder();
        List<String> list = new ArrayList<>(map.keySet());
        Collections.sort(list);
        for (String k : list) {
            sb.append(k);
            int v = map.get(k);
            if (v > 1) {
                sb.append(v);
            }
        }
        return sb.toString();

=======

        Map<String, Integer> map = new TreeMap<>();
        Stack<Map<String, Integer>> stack = new Stack<>();
        int i = 0;
        while (i < formula.length()) {
            char c = formula.charAt(i);
            i++;
            if (c == '(') {
                stack.push(map);
                map = new TreeMap<>();
            } else if (c == ')') {
                int start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start == i ? 1 : Integer.parseInt(formula.substring(start, i));
                Map<String, Integer> map2 = map;
                map = stack.pop();
                for (Map.Entry<String, Integer> entry : map2.entrySet()) {
                    map.put(entry.getKey(), map.getOrDefault(entry.getKey(), 0) + entry.getValue() * count);
                }
            } else {
                int start = i - 1;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String s = formula.substring(start, i);
                start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start == i ? 1 : Integer.parseInt(formula.substring(start, i));
                map.put(s, map.getOrDefault(s, 0) + count);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            sb.append(entry.getKey());
            if (entry.getValue() > 1) {
                sb.append(entry.getValue());
            }
        }
        return sb.toString();

=======

        Map<String, Integer> map = new TreeMap<>();
        int i = 0;
        while (i < formula.length()) {
            if (formula.charAt(i) == '(') {
                i++;
            } else if (formula.charAt(i) == ')') {
                int start = ++i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int n = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                for (String s : map.keySet()) {
                    if (s.charAt(0) == ')') {
                        map.put(s, map.get(s) * n);
                        map.put(s.substring(1), map.getOrDefault(s.substring(1), 0) + map.get(s));
                        map.remove(s);
                    }
                }
            } else {
                int start = i++;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String s = formula.substring(start, i);
                start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int n = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                map.put(s, map.getOrDefault(s, 0) + n);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (String s : map.keySet()) {
            sb.append(s);
            if (map.get(s) > 1) {
                sb.append(map.get(s));
            }
        }
        return sb.toString();

=======

        Map<String, Integer> counts = countOfAtoms(formula, 0, formula.length());
        StringBuilder sb = new StringBuilder();
        for (String name : counts.keySet().stream().sorted().collect(Collectors.toList())) {
            sb.append(name);
            int multiplicity = counts.get(name);
            if (multiplicity > 1) {
                sb.append(multiplicity);
            }
        }
        return sb.toString();
    }
    private Map<String, Integer> countOfAtoms(String formula, int start, int end) {
        Map<String, Integer> counts = new TreeMap<>();
        for (int i = start; i < end; ) {
            if (formula.charAt(i) == '(') {
                int j = i, balance = 0;
                do {
                    if (formula.charAt(j) == '(') {
                        balance++;
                    } else if (formula.charAt(j) == ')') {
                        balance--;
                    }
                    j++;
                } while (balance > 0);
                Map<String, Integer> inside = countOfAtoms(formula, i + 1, j - 1);
                int multiplicity = parseMultiplicity(formula, j, end);
                for (String name : inside.keySet()) {
                    counts.put(name, counts.getOrDefault(name, 0) + multiplicity * inside.get(name));
                }
                i = j + String.valueOf(multiplicity).length();
            } else {
                int j = i + 1;
                while (j < end && Character.isLowerCase(formula.charAt(j))) {
                    j++;
                }
                String name = formula.substring(i, j);
                int multiplicity = parseMultiplicity(formula, j, end);
                counts.put(name, counts.getOrDefault(name, 0) + multiplicity);
                i = j + String.valueOf(multiplicity).length();
            }
        }
        return counts;
    }
    private int parseMultiplicity(String formula, int start, int end) {
        int i = start;
        while (i < end && Character.isDigit(formula.charAt(i))) {
            i++;
        }
        return i > start ? Integer.parseInt(formula.substring(start, i)) : 1;

=======

        int i = 0;
        Stack<Map<String, Integer>> st = new Stack<>();
        Map<String, Integer> map = new TreeMap<>();
        while (i < formula.length()) {
            char c = formula.charAt(i);
            if (c == '(') {
                st.push(map);
                map = new TreeMap<>();
                i++;
            } else if (c == ')') {
                int count = 0;
                i++;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    count = count * 10 + (formula.charAt(i) - '0');
                    i++;
                }
                if (count == 0) {
                    count = 1;
                }
                Map<String, Integer> temp = map;
                map = st.pop();
                for (String key : temp.keySet()) {
                    map.put(key, map.getOrDefault(key, 0) + temp.get(key) * count);
                }
            } else {
                int start = i++;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String name = formula.substring(start, i);
                int count = 0;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    count = count * 10 + (formula.charAt(i) - '0');
                    i++;
                }
                if (count == 0) {
                    count = 1;
                }
                map.put(name, map.getOrDefault(name, 0) + count);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (String key : map.keySet()) {
            sb.append(key);
            if (map.get(key) > 1) {
                sb.append(map.get(key));
            }
        }
        return sb.toString();

=======

        int[] index = new int[1];
        Map<String, Integer> map = parse(formula, index);
        StringBuilder sb = new StringBuilder();
        for (String key : map.keySet()) {
            sb.append(key);
            if (map.get(key) > 1) {
                sb.append(map.get(key));
            }
        }
        return sb.toString();
    }
    public Map<String, Integer> parse(String formula, int[] index) {
        Map<String, Integer> map = new TreeMap<>();
        int n = formula.length();
        while (index[0] < n) {
            char c = formula.charAt(index[0]);
            if (c == '(') {
                index[0]++;
                Map<String, Integer> sub = parse(formula, index);
                index[0]++;
                int num = getNum(formula, index);
                for (String key : sub.keySet()) {
                    map.put(key, map.getOrDefault(key, 0) + sub.get(key) * num);
                }
            } else if (c == ')') {
                return map;
            } else {
                String key = getKey(formula, index);
                int num = getNum(formula, index);
                map.put(key, map.getOrDefault(key, 0) + num);
            }
        }
        return map;
    }
    public String getKey(String formula, int[] index) {
        int n = formula.length();
        StringBuilder sb = new StringBuilder();
        sb.append(formula.charAt(index[0]++));
        while (index[0] < n && Character.isLowerCase(formula.charAt(index[0]))) {
            sb.append(formula.charAt(index[0]++));
        }
        return sb.toString();
    }
    public int getNum(String formula, int[] index) {
        int n = formula.length();
        if (index[0] == n || !Character.isDigit(formula.charAt(index[0]))) {
            return 1;
        }
        int num = 0;
        while (index[0] < n && Character.isDigit(formula.charAt(index[0]))) {
            num = num * 10 + formula.charAt(index[0]++) - '0';
        }
        return num;

=======

        return null;
            if (c == '(') {
                st.push(new HashMap<>());
            } else if (c == ')') {
                Map<String, Integer> top = st.pop();
                int iStart = ++i;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int mul = iStart < i ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                for (String k : top.keySet()) {
                    int v = top.get(k);
                    st.peek().put(k, st.peek().getOrDefault(k, 0) + v * mul);
                }
                i--;
            } else {
                int iStart = i++;
                while (i < n && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String name = formula.substring(iStart, i);
                iStart = i;
                while (i < n && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int mul = iStart < i ? Integer.parseInt(formula.substring(iStart, i)) : 1;
                st.peek().put(name, st.peek().getOrDefault(name, 0) + mul);
                i--;
            }
        }
        Map<String, Integer> map = st.pop();
        StringBuilder sb = new StringBuilder();
        List<String> list = new ArrayList<>(map.keySet());
        Collections.sort(list);
        for (String k : list) {
            sb.append(k);
            int v = map.get(k);
            if (v > 1) {
                sb.append(v);
            }
        }
        return sb.toString();

=======

        Map<String, Integer> map = new TreeMap<>();
        Stack<Map<String, Integer>> stack = new Stack<>();
        int i = 0;
        while (i < formula.length()) {
            char c = formula.charAt(i);
            i++;
            if (c == '(') {
                stack.push(map);
                map = new TreeMap<>();
            } else if (c == ')') {
                int start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start == i ? 1 : Integer.parseInt(formula.substring(start, i));
                Map<String, Integer> map2 = map;
                map = stack.pop();
                for (Map.Entry<String, Integer> entry : map2.entrySet()) {
                    map.put(entry.getKey(), map.getOrDefault(entry.getKey(), 0) + entry.getValue() * count);
                }
            } else {
                int start = i - 1;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String s = formula.substring(start, i);
                start = i;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    i++;
                }
                int count = start == i ? 1 : Integer.parseInt(formula.substring(start, i));
                map.put(s, map.getOrDefault(s, 0) + count);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            sb.append(entry.getKey());
            if (entry.getValue() > 1) {
                sb.append(entry.getValue());
            }
        }
        return sb.toString();

=======

        Map<String, Integer> counts = countOfAtoms(formula, 0, formula.length());
        StringBuilder sb = new StringBuilder();
        for (String name : counts.keySet().stream().sorted().collect(Collectors.toList())) {
            sb.append(name);
            int multiplicity = counts.get(name);
            if (multiplicity > 1) {
                sb.append(multiplicity);
            }
        }
        return sb.toString();
    }
    private Map<String, Integer> countOfAtoms(String formula, int start, int end) {
        Map<String, Integer> counts = new TreeMap<>();
        for (int i = start; i < end; ) {
            if (formula.charAt(i) == '(') {
                int j = i, balance = 0;
                do {
                    if (formula.charAt(j) == '(') {
                        balance++;
                    } else if (formula.charAt(j) == ')') {
                        balance--;
                    }
                    j++;
                } while (balance > 0);
                Map<String, Integer> inside = countOfAtoms(formula, i + 1, j - 1);
                int multiplicity = parseMultiplicity(formula, j, end);
                for (String name : inside.keySet()) {
                    counts.put(name, counts.getOrDefault(name, 0) + multiplicity * inside.get(name));
                }
                i = j + String.valueOf(multiplicity).length();
            } else {
                int j = i + 1;
                while (j < end && Character.isLowerCase(formula.charAt(j))) {
                    j++;
                }
                String name = formula.substring(i, j);
                int multiplicity = parseMultiplicity(formula, j, end);
                counts.put(name, counts.getOrDefault(name, 0) + multiplicity);
                i = j + String.valueOf(multiplicity).length();
            }
        }
        return counts;
    }
    private int parseMultiplicity(String formula, int start, int end) {
        int i = start;
        while (i < end && Character.isDigit(formula.charAt(i))) {
            i++;
        }
        return i > start ? Integer.parseInt(formula.substring(start, i)) : 1;

=======

        int i = 0;
        Stack<Map<String, Integer>> st = new Stack<>();
        Map<String, Integer> map = new TreeMap<>();
        while (i < formula.length()) {
            char c = formula.charAt(i);
            if (c == '(') {
                st.push(map);
                map = new TreeMap<>();
                i++;
            } else if (c == ')') {
                int count = 0;
                i++;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    count = count * 10 + (formula.charAt(i) - '0');
                    i++;
                }
                if (count == 0) {
                    count = 1;
                }
                Map<String, Integer> temp = map;
                map = st.pop();
                for (String key : temp.keySet()) {
                    map.put(key, map.getOrDefault(key, 0) + temp.get(key) * count);
                }
            } else {
                int start = i++;
                while (i < formula.length() && Character.isLowerCase(formula.charAt(i))) {
                    i++;
                }
                String name = formula.substring(start, i);
                int count = 0;
                while (i < formula.length() && Character.isDigit(formula.charAt(i))) {
                    count = count * 10 + (formula.charAt(i) - '0');
                    i++;
                }
                if (count == 0) {
                    count = 1;
                }
                map.put(name, map.getOrDefault(name, 0) + count);
            }
        }
        StringBuilder sb = new StringBuilder();
        for (String key : map.keySet()) {
            sb.append(key);
            if (map.get(key) > 1) {
                sb.append(map.get(key));
            }
        }
        return sb.toString();

=======

        return null;
