Synthesizing 10/10 solutions

=======

        Arrays.sort(houses);
        int n = houses.length;
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int h = i; h <= j; h++) {
                    cost[i][j] += Math.abs(houses[h] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[n][k];
        for (int i = 0; i < n; i++) {
            dp[i][0] = cost[0][i];
        }
        for (int j = 1; j < k; j++) {
            for (int i = j; i < n; i++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int h = j - 1; h < i; h++) {
                    dp[i][j] = Math.min(dp[i][j], dp[h][j - 1] + cost[h + 1][i]);
                }
            }
        }
        return dp[n - 1][k - 1];

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = i + (j - i) / 2;
                for (int t = i; t <= j; t++) {
                    cost[i][j] += Math.abs(houses[t] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            dp[i][1] = cost[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int t = 0; t < i; t++) {
                    dp[i][j] = Math.min(dp[i][j], dp[t][j - 1] + cost[t + 1][i]);
                }
            }
        }
        return dp[n - 1][k];

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int m = i; m <= j; m++) {
                    cost[i][j] += Math.abs(houses[m] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[n][k];
        for (int i = 0; i < n; i++) {
            dp[i][0] = cost[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < k; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int m = 0; m < i; m++) {
                    dp[i][j] = Math.min(dp[i][j], dp[m][j - 1] + cost[m + 1][i]);
                }
            }
        }
        return dp[n - 1][k - 1];

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int k = i; k <= j; k++) {
                    cost[i][j] += Math.abs(houses[k] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[k][n];
        for (int i = 0; i < n; i++) {
            dp[0][i] = cost[0][i];
        }
        for (int i = 1; i < k; i++) {
            for (int j = i; j < n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int m = i - 1; m < j; m++) {
                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][m] + cost[m + 1][j]);
                }
            }
        }
        return dp[k - 1][n - 1];

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[][] cost = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int k = i; k <= j; k++) {
                    cost[i][j] += Math.abs(houses[k] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[n][k];
        for (int i = 0; i < n; i++) {
            dp[i][0] = cost[0][i];
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < k; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int m = 0; m < i; m++) {
                    dp[i][j] = Math.min(dp[i][j], dp[m][j - 1] + cost[m + 1][i]);
                }
            }
        }
        return dp[n - 1][k - 1];

=======

        Arrays.sort(houses);
        int n = houses.length;
        int[][] dist = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int mid = (i + j) / 2;
                for (int x = i; x <= j; x++) {
                    dist[i][j] += Math.abs(houses[x] - houses[mid]);
                }
            }
        }
        int[][] dp = new int[n][k];
        for (int i = 0; i < n; i++) {
            dp[i][0] = dist[0][i];
        }
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < k && j <= i; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                for (int x = 0; x < i; x++) {
                    dp[i][j] = Math.min(dp[i][j], dp[x][j - 1] + dist[x + 1][i]);
                }
            }
        }
        return dp[n - 1][k - 1];

=======

        Arrays.sort(houses);
        int n = houses.length;
        int[][] dp = new int[n][k + 1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return dfs(houses, 0, k, dp);
    }

    private int dfs(int[] houses, int index, int k, int[][] dp) {
        if (k == 0 && index == houses.length) {
            return 0;
        }
        if (k == 0 || index == houses.length) {
            return Integer.MAX_VALUE;
        }
        if (dp[index][k] != -1) {
            return dp[index][k];
        }
        int min = Integer.MAX_VALUE;
        int sum = 0;
        int median = 0;
        for (int i = index; i < houses.length; i++) {
            sum += houses[i];
            median = sum / (i - index + 1);
            int left = houses[i] * (i - index + 1) - sum;
            int right = sum - houses[index] * (i - index + 1);
            int cost = left + right;
            int next = dfs(houses, i + 1, k - 1, dp);
            if (next != Integer.MAX_VALUE) {
                min = Math.min(min, cost + next);
            }
        }
        dp[index][k] = min;
        return min;

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[] sum = new int[n + 1];
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + houses[i];
        }
        int[][] dp = new int[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = 0;
        for (int i = 0; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                for (int l = 0; l < i; l++) {
                    dp[i][j] = Math.min(dp[i][j], dp[l][j - 1] + cost(sum, l, i));
                }
            }
        }
        return dp[n][k];
    }
    private int cost(int[] sum, int i, int j) {
        int m = (i + j) / 2;
        return (sum[j] - sum[m]) - (sum[m] - sum[i]);

=======

        int n = houses.length;
        Arrays.sort(houses);
        int[][] dp = new int[n][k+1];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < n; i++) {
            dp[i][1] = cost(houses, 0, i);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 2; j <= k; j++) {
                for (int p = 0; p < i; p++) {
                    dp[i][j] = Math.min(dp[i][j], dp[p][j-1] + cost(houses, p+1, i));
                }
            }
        }
        return dp[n-1][k];
    }
    private int cost(int[] houses, int l, int r) {
        int median = houses[(l+r)/2];
        int cost = 0;
        for (int i = l; i <= r; i++) {
            cost += Math.abs(houses[i] - median);
        }
        return cost;

=======

        Arrays.sort(houses);
        int n = houses.length;
        int[][] dp = new int[n][k];
        for (int[] row : dp) Arrays.fill(row, Integer.MAX_VALUE);
        for (int i = 0; i < n; i++) {
            for (int j = i; j >= 0; j--) {
                int median = houses[(i + j) / 2];
                int cost = 0;
                for (int m = j; m <= i; m++) cost += Math.abs(houses[m] - median);
                if (j == 0) {
                    dp[i][0] = cost;
                } else {
                    for (int m = 1; m < k; m++) {
                        dp[i][m] = Math.min(dp[i][m], dp[j - 1][m - 1] + cost);
                    }
                }
            }
        }
        return dp[n - 1][k - 1];
