Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int n = nums.length;
        int ans = 0;
        Map<Long, Integer>[] f = new Map[n];
        for (int i = 0; i < n; ++i) {
            f[i] = new HashMap<Long, Integer>();
            for (int j = 0; j < i; ++j) {
                long d = (long)nums[i] - nums[j];
                int cnt = f[j].getOrDefault(d, 0);
                ans += cnt;
                f[i].put(d, f[i].getOrDefault(d, 0) + cnt + 1);
            }
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        Map<Integer, Integer>[] f = new Map[n];
        for (int i = 0; i < n; ++i) {
            f[i] = new HashMap<Integer, Integer>();
            for (int j = 0; j < i; ++j) {
                long diff = (long) nums[i] - nums[j];
                if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) {
                    continue;
                }
                int d = (int) diff;
                int cnt = f[j].getOrDefault(d, 0);
                ans += cnt;
                f[i].put(d, f[i].getOrDefault(d, 0) + cnt + 1);
            }
        }
        return ans;

=======

        int n = nums.length;
        int ans = 0;
        Map<Integer, Integer>[] f = new Map[n];
        for (int i = 0; i < n; ++i) {
            f[i] = new HashMap<Integer, Integer>();
            for (int j = 0; j < i; ++j) {
                long diff = (long) nums[i] - nums[j];
                if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) {
                    continue;
                }
                int d = (int) diff;
                int cnt1 = f[j].getOrDefault(d, 0);
                int cnt2 = f[i].getOrDefault(d, 0);
                ans += cnt1;
                f[i].put(d, cnt1 + cnt2 + 1);
            }
        }
        return ans;

=======

        int n = nums.length;
        int res = 0;
        Map<Long, Integer>[] dp = new Map[n];
        for (int i = 0; i < n; i++) {
            dp[i] = new HashMap<>();
            for (int j = 0; j < i; j++) {
                long diff = (long) nums[i] - nums[j];
                int cnt = dp[j].getOrDefault(diff, 0);
                res += cnt;
                dp[i].put(diff, dp[i].getOrDefault(diff, 0) + cnt + 1);
            }
        }
        return res;

=======

        int n = nums.length;
        int res = 0;
        Map<Integer, Integer>[] maps = new Map[n];
        for (int i = 0; i < n; i++) {
            maps[i] = new HashMap<>();
            for (int j = 0; j < i; j++) {
                long diff = (long) nums[i] - nums[j];
                if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) {
                    continue;
                }
                int d = (int) diff;
                int c1 = maps[i].getOrDefault(d, 0);
                int c2 = maps[j].getOrDefault(d, 0);
                res += c2;
                maps[i].put(d, c1 + c2 + 1);
            }
        }
        return res;

=======

        int n = nums.length;
        int res = 0;
        Map<Long, Integer>[] f = new Map[n];
        for (int i = 0; i < n; i++) {
            f[i] = new HashMap<>();
            for (int j = 0; j < i; j++) {
                long d = (long) nums[i] - nums[j];
                int cnt = f[j].getOrDefault(d, 0);
                res += cnt;
                f[i].put(d, f[i].getOrDefault(d, 0) + cnt + 1);
            }
        }
        return res;

=======

        int n = nums.length;
        int res = 0;
        Map<Long, Integer>[] map = new HashMap[n];
        for (int i = 0; i < n; i++) {
            map[i] = new HashMap<>();
            for (int j = 0; j < i; j++) {
                long diff = (long)nums[i] - nums[j];
                int cnt = map[j].getOrDefault(diff, 0);
                res += cnt;
                map[i].put(diff, map[i].getOrDefault(diff, 0) + cnt + 1);
            }
        }
        return res;

=======

        int n = nums.length;
        int result = 0;
        Map<Integer, Integer>[] dp = new Map[n];
        for (int i = 0; i < n; i++) {
            dp[i] = new HashMap<>();
            for (int j = 0; j < i; j++) {
                long diff = (long) nums[i] - nums[j];
                if (diff <= Integer.MIN_VALUE || diff > Integer.MAX_VALUE) {
                    continue;
                }
                int d = (int) diff;
                int c1 = dp[i].getOrDefault(d, 0);
                int c2 = dp[j].getOrDefault(d, 0);
                result += c2;
                dp[i].put(d, c1 + c2 + 1);
            }
        }
        return result;

=======

        int n = nums.length;
        if (n < 3) return 0;
        int ans = 0;
        Map<Integer, Integer>[] f = new Map[n];
        for (int i = 0; i < n; ++i) {
            f[i] = new HashMap<Integer, Integer>();
            for (int j = 0; j < i; ++j) {
                long diff = (long)nums[i] - nums[j];
                if (diff < Integer.MIN_VALUE || diff > Integer.MAX_VALUE) continue;
                int d = (int)diff;
                int cnt1 = f[j].getOrDefault(d, 0);
                int cnt2 = f[i].getOrDefault(d, 0);
                f[i].put(d, cnt2 + cnt1 + 1);
                ans += cnt1;
            }
        }
        return ans;
