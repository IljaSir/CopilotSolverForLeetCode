Synthesizing 10/10 solutions

=======

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int cur = arr[i];
            for (int j = i; j < arr.length; j++) {
                cur &= arr[j];
                ans = Math.min(ans, Math.abs(cur - target));
            }
        }
        return ans;

=======

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int val = arr[i];
            for (int j = i; j < arr.length; j++) {
                val &= arr[j];
                ans = Math.min(ans, Math.abs(val - target));
            }
        }
        return ans;

=======

        int min = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int val = arr[i];
            for (int j = i; j < arr.length; j++) {
                val &= arr[j];
                min = Math.min(min, Math.abs(val - target));
            }
        }
        return min;

=======

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int tmp = arr[i];
            for (int j = i; j < arr.length; j++) {
                tmp &= arr[j];
                ans = Math.min(ans, Math.abs(tmp - target));
            }
        }
        return ans;

=======

        int res = Integer.MAX_VALUE;
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < arr.length; i++) {
            Set<Integer> temp = new HashSet<>();
            temp.add(arr[i]);
            for (int s : set) {
                temp.add(s & arr[i]);
            }
            for (int t : temp) {
                res = Math.min(res, Math.abs(t - target));
            }
            set = temp;
        }
        return res;

=======

        int res = Integer.MAX_VALUE;
        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = arr[i];
            res = Math.min(res, Math.abs(dp[i] - target));
            for (int j = i - 1; j >= 0; j--) {
                dp[j] &= arr[i];
                res = Math.min(res, Math.abs(dp[j] - target));
            }
        }
        return res;

=======

        int res = Integer.MAX_VALUE;
        int n = arr.length;
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = arr[i];
            for (int j = i - 1; j >= 0; j--) {
                dp[j] = dp[j] & arr[i];
                res = Math.min(res, Math.abs(dp[j] - target));
            }
            res = Math.min(res, Math.abs(dp[i] - target));
        }
        return res;

=======

        int result = Integer.MAX_VALUE;
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int xor = arr[i];
            for (int j = i; j < n; j++) {
                xor &= arr[j];
                result = Math.min(result, Math.abs(xor - target));
            }
        }
        return result;

=======

        TreeSet<Integer> set = new TreeSet<>();
        int ans = Integer.MAX_VALUE;
        for(int i = 0; i < arr.length; i++) {
            TreeSet<Integer> set2 = new TreeSet<>();
            set2.add(arr[i]);
            for(int x : set) {
                set2.add(x & arr[i]);
            }
            for(int x : set2) {
                ans = Math.min(ans, Math.abs(x - target));
            }
            set = set2;
        }
        return ans;

=======

        int ans = Integer.MAX_VALUE;
        for (int i = 0, cur = 0; i < arr.length; ++i, cur = 0) {
            for (int j = i; j < arr.length; ++j) {
                cur &= arr[j];
                ans = Math.min(ans, Math.abs(cur - target));
            }
        }
        return ans;
