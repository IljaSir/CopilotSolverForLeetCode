Synthesizing 9/10 solutions

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return dfs(boxes, 0, n - 1, 0, dp);
    }

    private int dfs(int[] boxes, int l, int r, int k, int[][][] dp) {
        if (l > r) {
            return 0;
        }
        if (dp[l][r][k] != 0) {
            return dp[l][r][k];
        }
        while (l < r && boxes[r] == boxes[r - 1]) {
            r--;
            k++;
        }
        dp[l][r][k] = dfs(boxes, l, r - 1, 0, dp) + (k + 1) * (k + 1);
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k], dfs(boxes, l, i, k + 1, dp) + dfs(boxes, i + 1, r - 1, 0, dp));
            }
        }
        return dp[l][r][k];

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return dfs(boxes, dp, 0, n - 1, 0);
    }

    private int dfs(int[] boxes, int[][][] dp, int l, int r, int k) {
        if (l > r) return 0;
        if (dp[l][r][k] != 0) return dp[l][r][k];
        while (r > l && boxes[r] == boxes[r - 1]) {
            r--;
            k++;
        }
        dp[l][r][k] = dfs(boxes, dp, l, r - 1, 0) + (k + 1) * (k + 1);
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k], dfs(boxes, dp, l, i, k + 1) + dfs(boxes, dp, i + 1, r - 1, 0));
            }
        }
        return dp[l][r][k];

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return dfs(boxes, 0, n - 1, 0, dp);
    }
    private int dfs(int[] boxes, int l, int r, int k, int[][][] dp) {
        if (l > r) return 0;
        if (dp[l][r][k] > 0) return dp[l][r][k];
        while (l < r && boxes[r] == boxes[r - 1]) {
            r--;
            k++;
        }
        dp[l][r][k] = dfs(boxes, l, r - 1, 0, dp) + (k + 1) * (k + 1);
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k], dfs(boxes, l, i, k + 1, dp) + dfs(boxes, i + 1, r - 1, 0, dp));
            }
        }
        return dp[l][r][k];

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return helper(boxes, 0, n - 1, 0, dp);
    }
    private int helper(int[] boxes, int i, int j, int k, int[][][] dp) {
        if (i > j) return 0;
        if (dp[i][j][k] > 0) return dp[i][j][k];
        int result = (k + 1) * (k + 1) + helper(boxes, i + 1, j, 0, dp);
        for (int m = i + 1; m <= j; m++) {
            if (boxes[m] == boxes[i]) {
                result = Math.max(result, helper(boxes, i + 1, m - 1, 0, dp) + helper(boxes, m, j, k + 1, dp));
            }
        }
        dp[i][j][k] = result;
        return result;

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return removeBoxes(boxes, dp, 0, n - 1, 0);
    }

    private int removeBoxes(int[] boxes, int[][][] dp, int i, int j, int k) {
        if (i > j) return 0;
        if (dp[i][j][k] > 0) return dp[i][j][k];
        while (i < j && boxes[i] == boxes[i + 1]) {
            i++;
            k++;
        }
        int res = (k + 1) * (k + 1) + removeBoxes(boxes, dp, i + 1, j, 0);
        for (int m = i + 1; m <= j; m++) {
            if (boxes[m] == boxes[i]) {
                res = Math.max(res, removeBoxes(boxes, dp, i + 1, m - 1, 0) + removeBoxes(boxes, dp, m, j, k + 1));
            }
        }
        dp[i][j][k] = res;
        return res;

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return removeBoxes(boxes, 0, n - 1, 0, dp);
    }

    public int removeBoxes(int[] boxes, int i, int j, int k, int[][][] dp) {
        if (i > j) {
            return 0;
        }
        if (dp[i][j][k] != 0) {
            return dp[i][j][k];
        }
        while (i < j && boxes[j] == boxes[j - 1]) {
            j--;
            k++;
        }
        int res = (k + 1) * (k + 1) + removeBoxes(boxes, i, j - 1, 0, dp);
        for (int m = i; m < j; m++) {
            if (boxes[m] == boxes[j]) {
                res = Math.max(res, removeBoxes(boxes, i, m, k + 1, dp) + removeBoxes(boxes, m + 1, j - 1, 0, dp));
            }
        }
        dp[i][j][k] = res;
        return res;

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return removeBoxes(boxes, 0, n - 1, 0, dp);
    }
    
    private int removeBoxes(int[] boxes, int i, int j, int k, int[][][] dp) {
        if (i > j) {
            return 0;
        }
        if (dp[i][j][k] != 0) {
            return dp[i][j][k];
        }
        while (i < j && boxes[j - 1] == boxes[j]) {
            j--;
            k++;
        }
        dp[i][j][k] = removeBoxes(boxes, i, j - 1, 0, dp) + (k + 1) * (k + 1);
        for (int m = i; m < j; m++) {
            if (boxes[m] == boxes[j]) {
                dp[i][j][k] = Math.max(dp[i][j][k], removeBoxes(boxes, i, m, k + 1, dp) + removeBoxes(boxes, m + 1, j - 1, 0, dp));
            }
        }
        return dp[i][j][k];

=======

        int N = boxes.length;
        int[][][] dp = new int[N][N][N];
        return dfs(boxes, dp, 0, N - 1, 0);
    }

    private int dfs(int[] boxes, int[][][] dp, int i, int j, int k) {
        if (i > j) return 0;
        if (dp[i][j][k] > 0) return dp[i][j][k];
        while (i < j && boxes[i] == boxes[i + 1]) {
            i++;
            k++;
        }
        int res = (k + 1) * (k + 1) + dfs(boxes, dp, i + 1, j, 0);
        for (int m = i + 1; m <= j; m++) {
            if (boxes[i] == boxes[m]) {
                res = Math.max(res, dfs(boxes, dp, i + 1, m - 1, 0) + dfs(boxes, dp, m, j, k + 1));
            }
        }
        dp[i][j][k] = res;
        return res;

=======

        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
        return removeBoxesSub(boxes, dp, 0, n - 1, 0);
    }
    
    private int removeBoxesSub(int[] boxes, int[][][] dp, int l, int r, int k) {
        if (l > r) return 0;
        if (dp[l][r][k] > 0) return dp[l][r][k];
        while (l < r && boxes[r] == boxes[r - 1]) {
            r--;
            k++;
        }
        dp[l][r][k] = removeBoxesSub(boxes, dp, l, r - 1, 0) + (k + 1) * (k + 1);
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k], removeBoxesSub(boxes, dp, l, i, k + 1) + removeBoxesSub(boxes, dp, i + 1, r - 1, 0));
            }
        }
        return dp[l][r][k];
