Synthesizing 8/10 solutions

=======

        int m = sums.length;
        Arrays.sort(sums);
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = sums[0];
        for (int i = 1; i < m; i++) {
            dp[i][0] = sums[i];
            for (int j = 0; j < (1 << n); j++) {
                if (dp[i - 1][j] != Integer.MAX_VALUE) {
                    dp[i][j] = dp[i - 1][j];
                }
                if (j > 0 && dp[i - 1][j - 1] != Integer.MAX_VALUE) {
                    dp[i][j] = Math.min(dp[i][j], sums[i] - dp[i - 1][j - 1]);
                }
            }
        }
        int[] ans = new int[n];
        int j = (1 << n) - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (j > 0 && dp[i][j] != dp[i][j - 1]) {
                ans[Integer.bitCount(j - 1)] = sums[i];
                j--;
            }
        }
        return ans;

=======

        int[] ans = new int[n];
        Arrays.sort(sums);
        for(int i=0; i<n; i++) {
            ans[i] = sums[sums.length-1] - sums[sums.length-2];
            for(int j=0; j<sums.length-2; j++) {
                sums[j] -= ans[i];
            }
            Arrays.sort(sums);
        }
        return ans;

=======

        int[] ans = new int[n];
        Arrays.sort(sums);
        int[] sums2 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums2[i] = sums[i];
        }
        int[] sums3 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums3[i] = sums[i];
        }
        for (int i = 1; i < sums.length; i++) {
            sums[i] += sums[i - 1];
        }
        for (int i = 1; i < sums.length; i++) {
            sums2[i] += sums2[i - 1];
        }
        for (int i = 1; i < sums.length; i++) {
            sums3[i] += sums3[i - 1];
        }
        int[] sums4 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums4[i] = sums[i];
        }
        int[] sums5 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums5[i] = sums[i];
        }
        int[] sums6 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums6[i] = sums[i];
        }
        int[] sums7 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums7[i] = sums[i];
        }
        int[] sums8 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums8[i] = sums[i];
        }
        for (int i = 0; i < sums.length; i++) {
            for (int j = 0; j < sums.length; j++) {
                if (i != j) {
                    sums4[i] -= sums[j];
                }
            }
        }
        for (int i = 0; i < sums.length; i++) {
            for (int j = 0; j < sums.length; j++) {
                if (i != j) {
                    sums5[i

=======

        int[] res = new int[n];
        int[] arr = new int[1 << n];
        for (int i = 0; i < sums.length; i++) {
            arr[sums[i] + 10000]++;
        }
        int[] dp = new int[1 << n];
        for (int i = 0; i < dp.length; i++) {
            dp[i] = -1;
        }
        dp[0] = 0;
        int max = 0;
        for (int i = 0; i < dp.length; i++) {
            if (dp[i] >= 0) {
                for (int j = 0; j < arr.length; j++) {
                    if (arr[j] > 0) {
                        dp[i ^ j] = j - 10000;
                        max = Math.max(max, i ^ j);
                    }
                }
            }
        }
        int index = n - 1;
        while (max > 0) {
            res[index--] = dp[max];
            max ^= dp[max] + 10000;
        }
        return res;

=======

        int[] ans = new int[n];
        int[] sums1 = new int[sums.length];
        int[] sums2 = new int[sums.length];
        int[] sums3 = new int[sums.length];
        for (int i = 0; i < sums.length; i++) {
            sums1[i] = sums[i];
            sums2[i] = sums[i];
            sums3[i] = sums[i];
        }
        Arrays.sort(sums1);
        Arrays.sort(sums2);
        Arrays.sort(sums3);
        int sum = 0;
        for (int i = 1; i < sums1.length; i++) {
            sum = sums1[i] - sums1[i - 1];
            if (sum != 0) {
                break;
            }
        }
        ans[0] = sum;
        for (int i = 1; i < sums2.length; i++) {
            if (sums2[i] - sums2[i - 1] != 0) {
                ans[1] = sums2[i] - sums2[i - 1];
                break;
            }
        }
        for (int i = 2; i < n; i++) {
            ans[i] = sums3[i] - sums3[i - 1];
        }
        return ans;

=======

        int[] ans = new int[n];
        int[] sum = new int[1 << n];
        int[] cnt = new int[1 << n];
        for (int i = 0; i < sums.length; i++) {
            sum[sums[i] + 10000]++;
        }
        int[] a = new int[1 << n];
        int[] b = new int[1 << n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << n); j++) {
                if ((j & (1 << i)) > 0) {
                    a[j] = a[j ^ (1 << i)] + sum[j];
                }
            }
            for (int j = 0; j < (1 << n); j++) {
                if ((j & (1 << i)) > 0) {
                    b[j] = b[j ^ (1 << i)] + a[j];
                }
            }
            for (int j = 0; j < (1 << n); j++) {
                if ((j & (1 << i)) > 0) {
                    cnt[j] = b[j ^ (1 << i)];
                }
            }
        }
        for (int i = 0; i < (1 << n); i++) {
            if (cnt[i] > 0) {
                ans[Integer.bitCount(i)] = i - 10000;
            }
        }
        return ans;

=======

        int[] arr = new int[n];
        int[] nums = new int[1<<n];
        Arrays.sort(sums);
        for(int i = 0; i < sums.length; i++){
            nums[i] = sums[i];
        }
        int[] temp = new int[1<<n];
        for(int i = 0; i < n; i++){
            int j = 0;
            for(int k = 0; k < (1<<n); k++){
                if((k&(1<<i)) == 0){
                    temp[j] = nums[k];
                    j++;
                }
            }
            int[] t = new int[1<<n];
            for(int k = 0; k < (1<<n); k++){
                t[k] = temp[k];
            }
            temp = t;
            int x = 0;
            for(int k = 0; k < (1<<n); k++){
                if(temp[k] == nums[k]){
                    x++;
                }
            }
            if(x == (1<<n)){
                arr[i] = 0;
            }
            else{
                arr[i] = temp[0] - nums[0];
            }
        }
        return arr;

=======

        int[] ans = new int[n];
        int[] sorted = Arrays.stream(sums).sorted().toArray();
        int[] freq = new int[20001];
        for (int i = 0; i < sums.length; i++) {
            freq[sums[i] + 10000]++;
        }
        int[] nums = new int[n];
        int[] freq2 = new int[20001];
        for (int i = 0; i < sums.length; i++) {
            for (int j = i + 1; j < sums.length; j++) {
                freq2[sums[i] + sums[j] + 10000]++;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 20001; j++) {
                if (freq[j] > 0 && freq2[j] > 0) {
                    nums[i] = j - 10000;
                    freq[j]--;
                    freq2[j]--;
                    break;
                }
            }
        }
        Arrays.sort(nums);
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sorted[0] - nums[i];
        }
        for (int i = 0; i < n; i++) {
            ans[i] = nums[i] + d[i];
        }
        return ans;
