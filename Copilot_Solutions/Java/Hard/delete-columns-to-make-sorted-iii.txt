Synthesizing 10/10 solutions

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                boolean isSorted = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        isSorted = false;
                        break;
                    }
                }
                if (isSorted) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                boolean isSorted = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        isSorted = false;
                        break;
                    }
                }
                if (isSorted) dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int j = 0; j < m; ++j) {
            for (int i = 0; i < j; ++i) {
                int ok = 1;
                for (int k = 0; k < n; ++k) {
                    if (strs[k].charAt(i) > strs[k].charAt(j)) {
                        ok = 0;
                        break;
                    }
                }
                if (ok == 1) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        for (int j = 1; j < m; j++) {
            for (int i = 0; i < j; i++) {
                boolean sorted = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(i) > strs[k].charAt(j)) {
                        sorted = false;
                        break;
                    }
                }
                if (sorted) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
        }
        return m - Arrays.stream(dp).max().getAsInt();

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int res = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                int k = 0;
                for (; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        break;
                    }
                }
                if (k == n) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return m - res;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int ans = m - 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < i; j++) {
                boolean ok = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        ok = false;
                        break;
                    }
                }
                if (ok) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            ans = Math.min(ans, m - dp[i]);
        }
        return ans;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int res = 0;
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < j; i++) {
                if (isSorted(strs, i, j)) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
            res = Math.max(res, dp[j]);
        }
        return m - res;
    }
    private boolean isSorted(String[] strs, int i, int j) {
        for (String str : strs) {
            if (str.charAt(i) > str.charAt(j)) {
                return false;
            }
        }
        return true;

=======

        int n = strs.length, m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < i; ++j) {
                boolean isSorted = true;
                for (int k = 0; k < n; ++k) {
                    if (strs[k].charAt(j) > strs[k].charAt(i)) {
                        isSorted = false;
                        break;
                    }
                }
                if (isSorted) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            ans = Math.max(ans, dp[i]);
        }
        return m - ans;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        Arrays.fill(dp, 1);
        int max = 1;
        for (int j = 1; j < m; j++) {
            for (int i = 0; i < j; i++) {
                boolean allSorted = true;
                for (int k = 0; k < n; k++) {
                    if (strs[k].charAt(i) > strs[k].charAt(j)) {
                        allSorted = false;
                        break;
                    }
                }
                if (allSorted) {
                    dp[j] = Math.max(dp[j], dp[i] + 1);
                }
            }
            max = Math.max(max, dp[j]);
        }
        return m - max;

=======

        int n = strs.length;
        int m = strs[0].length();
        int[] dp = new int[m];
        int ans = 0;
        for (int j = 0; j < m; ++j) {
            dp[j] = 1;
            for (int i = 0; i < j; ++i)
                if (isSorted(strs, i, j))
                    dp[j] = Math.max(dp[j], dp[i] + 1);
            ans = Math.max(ans, dp[j]);
        }
        return m - ans;
