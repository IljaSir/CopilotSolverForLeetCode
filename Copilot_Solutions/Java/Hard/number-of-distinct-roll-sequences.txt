Synthesizing 10/10 solutions

=======

        long[][] dp = new long[n + 1][7];
        int mod = 1000000007;
        for (int i = 1; i <= 6; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (j != k && gcd(j, k) == 1) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][k]) % mod;
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= 6; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        return (int) ans;
    }

    private int gcd(int a, int b) {
        while (b > 0) {
            int t = a % b;
            a = b;
            b = t;
        }
        return a;

=======

        int mod = 1000000007;
        int[][][] dp = new int[n + 1][6][6];
        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 6; j++) {
                if (gcd(i, j) == 1) {
                    dp[2][i - 1][j - 1] = 1;
                }
            }
        }
        for (int i = 3; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    for (int l = 1; l <= 6; l++) {
                        if (gcd(j, k) == 1 && gcd(k, l) == 1) {
                            dp[i][k - 1][l - 1] = (dp[i][k - 1][l - 1] + dp[i - 1][j - 1][k - 1]) % mod;
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 6; j++) {
                res = (res + dp[n][i - 1][j - 1]) % mod;
            }
        }
        return res;
    }

    public int gcd(int a, int b) {
        if (a == 0) {
            return b;
        }
        return gcd(b % a, a);

=======

        int MOD = 1000000007;
        long[][] dp = new long[n + 1][7];
        for (int i = 1; i <= 6; i++) dp[1][i] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (gcd(j, k) == 1) {
                        dp[i][j] += dp[i - 1][k];
                        dp[i][j] %= MOD;
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= 6; i++) {
            ans += dp[n][i];
            ans %= MOD;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        int[][][] dp = new int[n + 1][7][7];
        for (int i = 1; i <= 6; ++i) {
            for (int j = 1; j <= 6; ++j) {
                dp[2][i][j] = 1;
            }
        }
        for (int k = 3; k <= n; ++k) {
            for (int i = 1; i <= 6; ++i) {
                for (int j = 1; j <= 6; ++j) {
                    for (int p = 1; p <= 6; ++p) {
                        if (i != j && Math.abs(i - j) != 1) {
                            dp[k][i][j] = (dp[k][i][j] + dp[k - 1][j][p]) % mod;
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= 6; ++i) {
            for (int j = 1; j <= 6; ++j) {
                res = (res + dp[n][i][j]) % mod;
            }
        }
        return res;

=======

        int MOD = 1000000007;
        int[][][] dp = new int[n][7][7];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (i == 0) {
                        dp[i][j][k] = 1;
                    } else {
                        for (int x = 1; x <= 6; x++) {
                            if (gcd(x, j) == 1 && gcd(x, k) == 1) {
                                dp[i][j][k] = (dp[i][j][k] + dp[i - 1][x][j]) % MOD;
                            }
                        }
                    }
                }
            }
        }
        int res = 0;
        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 6; j++) {
                res = (res + dp[n - 1][i][j]) % MOD;
            }
        }
        return res;
    }

    public int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);

=======

        final int MOD = 1000000007;
        int[][][] dp = new int[n + 1][7][7];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (i == 1) {
                        dp[i][j][k] = 1;
                    } else {
                        for (int l = 1; l <= 6; l++) {
                            if (l != k && Math.abs(l - j) > 1) {
                                dp[i][j][k] = (dp[i][j][k] + dp[i - 1][l][j]) % MOD;
                            }
                        }
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= 6; i++) {
            for (int j = 1; j <= 6; j++) {
                ans = (ans + dp[n][i][j]) % MOD;
            }
        }
        return ans;

=======

        int MOD = (int) 1e9 + 7;
        long[][] dp = new long[n + 1][7];
        for (int i = 1; i <= 6; i++) {
            dp[1][i] = 1;
        }
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= 6; j++) {
                for (int k = 1; k <= 6; k++) {
                    if (j == k || j + k == 7) {
                        continue;
                    }
                    dp[i][j] += dp[i - 1][k];
                    dp[i][j] %= MOD;
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= 6; i++) {
            ans += dp[n][i];
            ans %= MOD;
        }
        return (int) ans;

=======

        int mod = 1000000007;
        long[][] dp = new long[n+1][7];
        for(int i = 1; i <= 6; i++) dp[1][i] = 1;
        for(int i = 2; i <= n; i++) {
            for(int j = 1; j <= 6; j++) {
                for(int k = 1; k <= 6; k++) {
                    if(j == k) continue;
                    if(gcd(j, k) > 1) continue;
                    dp[i][j] += dp[i-1][k];
                    dp[i][j] %= mod;
                }
            }
        }
        long ans = 0;
        for(int i = 1; i <= 6; i++) {
            ans += dp[n][i];
            ans %= mod;
        }
        return (int)ans;

=======

        int MOD = 1_000_000_007;
        int[][] dp = new int[6][n];
        Arrays.fill(dp[0], 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < 6; j++) {
                for (int k = 0; k < 6; k++) {
                    if (gcd(j + 1, k + 1) == 1) {
                        dp[j][i] = (dp[j][i] + dp[k][i - 1]) % MOD;
                    }
                }
            }
        }
        int res = 0;
        for (int i = 0; i < 6; i++) {
            res = (res + dp[i][n - 1]) % MOD;
        }
        return res;

=======

        if (n == 1) return 6;
        int mod = (int)1e9 + 7;
        long[][] dp = new long[n + 1][6];
        for (int i = 1; i <= 6; i++) dp[1][i - 1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 0; j < 6; j++) {
                for (int k = 0; k < 6; k++) {
                    if (j == k) continue;
                    if (gcd(j + 1, k + 1) == 1) {
                        dp[i][k] = (dp[i][k] + dp[i - 1][j]) % mod;
                    }
                }
            }
        }
        long res = 0;
        for (int i = 0; i < 6; i++) res = (res + dp[n][i]) % mod;
        return (int)res;
