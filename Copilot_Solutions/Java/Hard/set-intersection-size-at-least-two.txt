Synthesizing 8/10 solutions

=======

        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> a[1] == b[1] ? b[0] - a[0] : a[1] - b[1]);
        int res = 0;
        int[] last = {-1, -1};
        for (int i = n - 1; i >= 0; i--) {
            int[] it = intervals[i];
            if (it[1] <= last[1]) continue;
            if (it[1] == last[0] + 1) {
                res++;
                last[1] = last[0];
                last[0] = it[1];
                continue;
            }
            res += 2;
            last[1] = it[1] - 1;
            last[0] = it[1];
        }
        return res;

=======

        Arrays.sort(intervals, (a, b) -> a[1] == b[1] ? b[0] - a[0] : a[1] - b[1]);
        int n = intervals.length;
        int[] dp = new int[n];
        dp[0] = 2;
        for (int i = 1; i < n; i++) {
            dp[i] = 2;
            for (int j = i - 1; j >= 0; j--) {
                if (intervals[j][1] >= intervals[i][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return dp[n - 1];

=======

        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> {
            if (a[1] == b[1]) {
                return b[0] - a[0];
            }
            return a[1] - b[1];
        });
        int ans = 0;
        int[] last = new int[2];
        for (int i = n - 1; i >= 0; i--) {
            int l = intervals[i][0], r = intervals[i][1];
            if (last[0] < l || last[1] < l) {
                ans += 2;
                last[0] = r - 1;
                last[1] = r;
            } else if (last[1] < r) {
                ans++;
                last[0] = last[1];
                last[1] = r;
            }
        }
        return ans;

=======

        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> {
            if (a[1] != b[1]) {
                return a[1] - b[1];
            }
            return b[0] - a[0];
        });
        int ans = 0;
        int[] max = new int[n];
        for (int i = 0; i < n; i++) {
            int l = intervals[i][0];
            int r = intervals[i][1];
            int j = i - 1;
            while (j >= 0 && intervals[j][1] == r) {
                l = Math.max(l, max[j]);
                j--;
            }
            if (l == r) {
                ans++;
                max[i] = r - 1;
            } else if (l == r - 1) {
                ans += 2;
                max[i] = r;
            } else {
                ans += 2;
                max[i] = r - 1;
            }
        }
        return ans;

=======

        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        int n = intervals.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 2);
        for (int i = n - 2; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                if (intervals[j][0] > intervals[i][1]) {
                    break;
                }
                dp[i] = Math.max(dp[i], dp[j] + (intervals[j][1] - intervals[i][1] == 1 ? 1 : 0));
            }
        }
        return Arrays.stream(dp).max().getAsInt();

=======

        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        int n = intervals.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 2);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (intervals[j][1] >= intervals[i][0]) {
                    dp[i] = Math.max(dp[i], dp[j] + (intervals[i][1] <= intervals[j][1] ? 0 : 1));
                }
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;

=======

        int n = intervals.length;
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        int[] dp = new int[n];
        Arrays.fill(dp, 2);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (intervals[i][0] <= intervals[j][1]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }
        return Arrays.stream(dp).max().getAsInt();

=======

        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);
        int res = 0;
        int[] last = new int[2];
        for (int[] i : intervals) {
            if (i[0] > last[1]) {
                res += 2;
                last[0] = i[1] - 1;
                last[1] = i[1];
            } else if (i[0] > last[0]) {
                res += 1;
                last[0] = last[1];
                last[1] = i[1];
            }
        }
        return res;
