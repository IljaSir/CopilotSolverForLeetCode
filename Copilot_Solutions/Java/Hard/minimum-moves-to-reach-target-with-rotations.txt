Synthesizing 10/10 solutions

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 || grid[i][j + 1] == 1) {
                    dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
                }
                if (i > 0) {
                    dp[i][j][0] = Math.min(dp[i][j][0], dp[i - 1][j][0] + 1);
                    dp[i][j][1] = Math.min(dp[i][j][1], dp[i - 1][j][1] + 1);
                }
                if (j > 0) {
                    dp[i][j][0] = Math.min(dp[i][j][0], dp[i][j - 1][0] + 1);
                    dp[i][j][1] = Math.min(dp[i][j][1], dp[i][j - 1][1] + 1);
                }
                if (i > 0 && j > 0 && grid[i - 1][j] == 0 && grid[i][j - 1] == 0) {
                    dp[i][j][0] = Math.min(dp[i][j][0], dp[i - 1][j - 1][1] + 1);
                    dp[i][j][1] = Math.min(dp[i][j][1], dp[i - 1][j - 1][0] + 1);
                }
            }
        }
        return Math.min(dp[n - 1][n - 2][0], dp[n - 2][n - 1][1]);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    // horizontal
                    if (j + 1 < n && grid[i][j + 1] == 0) {
                        if (i + 1 < n && grid[i + 1][j] == 0 && grid[i + 1][j + 1] == 0) {
                            dp[i][j + 1][1] = Math.min(dp[i][j + 1][1], dp[i][j][0] + 1);
                            dp[i + 1][j][0] = Math.min(dp[i + 1][j][0], dp[i][j][0] + 1);
                        }
                        dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][0] + 1);
                    }
                    // vertical
                    if (i + 1 < n && grid[i + 1][j] == 0) {
                        dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][0] + 1);
                    }
                }
                if (grid[i][j] == 0 && i + 1 < n && grid[i + 1][j] == 0) {
                    // horizontal
                    if (j + 1 < n && grid[i][j + 1] == 0 && grid[i + 1][j + 1] == 0) {
                        dp[i + 1][j + 1][1] = Math.min(dp[i + 1][j + 1][1], dp[i][j][1] + 1);
                    }
                    // vertical
                    if

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }
                if (j + 1 < n && grid[i][j + 1] == 0) {
                    dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][0] + 1);
                    if (i + 1 < n && grid[i + 1][j] == 0 && grid[i + 1][j + 1] == 0) {
                        dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][0] + 1);
                    }
                }
                if (i + 1 < n && grid[i + 1][j] == 0) {
                    dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][1] + 1);
                    if (j + 1 < n && grid[i][j + 1] == 0 && grid[i + 1][j + 1] == 0) {
                        dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][1] + 1);
                    }
                }
            }
        }
        int ans = Math.min(dp[n - 1][n - 1][0], dp[n - 1][n - 1][1]);
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }
                if (i < n - 1 && grid[i + 1][j] == 0) {
                    dp[i + 1][j][0] = Math.min(dp[i + 1][j][0], dp[i][j][0] + 1);
                    dp[i + 1][j][0] = Math.min(dp[i + 1][j][0], dp[i][j][1] + 1);
                }
                if (j < n - 1 && grid[i][j + 1] == 0) {
                    dp[i][j + 1][1] = Math.min(dp[i][j + 1][1], dp[i][j][0] + 1);
                    dp[i][j + 1][1] = Math.min(dp[i][j + 1][1], dp[i][j][1] + 1);
                }
                if (i < n - 1 && j < n - 1 && grid[i + 1][j] == 0 && grid[i][j + 1] == 0 && grid[i + 1][j + 1] == 0) {
                    dp[i + 1][j + 1][0] = Math.min(dp[i + 1][j + 1][0], dp[i][j][0] + 1);
                    dp[i + 1][j + 1][1] = Math.min(dp[i + 1][j + 1][1], dp[i][j][1] + 1);
                }
            }
        }
        int res = Math.min(dp[n - 1][n - 2][0], dp[n -

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    if (j + 1 < n && grid[i][j + 1] == 0) {
                        if (i + 1 < n && grid[i + 1][j] == 0 && grid[i + 1][j + 1] == 0) {
                            dp[i + 1][j][0] = Math.min(dp[i + 1][j][0], dp[i][j][0] + 1);
                            dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][0] + 1);
                            dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][0] + 1);
                        }
                        dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][1] + 1);
                    }
                    if (i + 1 < n && grid[i + 1][j] == 0) {
                        if (j + 1 < n && grid[i][j + 1] == 0 && grid[i + 1][j + 1] == 0) {
                            dp[i][j + 1][1] = Math.min(dp[i][j + 1][1], dp[i][j][1] + 1);
                            dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][1] + 1);
                            dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][

=======

        int n = grid.length;
        int[][][] visited = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                visited[i][j][0] = visited[i][j][1] = Integer.MAX_VALUE;
            }
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0});
        visited[0][0][0] = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int r = cur[0], c = cur[1], d = cur[2];
            if (r == n - 1 && c == n - 2 && d == 0) {
                return visited[r][c][d];
            }
            if (d == 0) {
                if (c + 1 < n && grid[r][c + 1] == 0) {
                    if (visited[r][c + 1][0] > visited[r][c][0] + 1) {
                        visited[r][c + 1][0] = visited[r][c][0] + 1;
                        queue.offer(new int[]{r, c + 1, 0});
                    }
                }
                if (r + 1 < n && grid[r + 1][c] == 0 && grid[r + 1][c + 1] == 0) {
                    if (visited[r + 1][c][1] > visited[r][c][0] + 1) {
                        visited[r + 1][c][1] = visited[r][c][0] + 1;
                        queue.offer(new int[]{r + 1, c, 1});
                    }
                }
            } else {
                if (r + 1 < n && grid[r + 1][c] == 0) {
                    if (visited[r + 1][c][1] > visited[r][c][1] + 1) {
                        visited[r + 1][c][1] = visited[r][c][1] + 1;
                        queue.offer(new int[]{r + 1, c, 1});
                    }
                }
                if (c + 1 < n && grid[r

=======

        int n = grid.length;
        int[][][] dist = new int[n][n][2];
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                Arrays.fill(dist[i][j], Integer.MAX_VALUE);

        Queue<int[]> queue = new LinkedList();
        queue.offer(new int[]{0, 0, 0});
        dist[0][0][0] = 0;

        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            int r1 = node[0], c1 = node[1], k = node[2];
            int r2 = r1 + (k == 0 ? 0 : 1);
            int c2 = c1 + (k == 0 ? 1 : 0);
            int d = dist[r1][c1][k];
            if (r1 == n-1 && c1 == n-2 && k == 0) return d;
            if (r1 == n-2 && c1 == n-1 && k == 1) return d;

            // move right
            if (c2+1 < n && grid[r1][c2+1] == 0) {
                int nc1 = c1 + 1, nc2 = c2 + 1;
                int nk = k;
                if (dist[r1][nc1][nk] > d) {
                    dist[r1][nc1][nk] = d;
                    queue.offer(new int[]{r1, nc1, nk});
                }
            }

            // move down
            if (r2+1 < n && grid[r2+1][c1] == 0) {
                int nr1 = r1 + 1, nr2 = r2 + 1;
                int nk = k;
                if (dist[nr1][c1][nk] > d) {
                    dist[nr1][c1][nk] = d;
                    queue.offer(new int[]{nr1, c1, nk});
                }
            }

            // rotate clockwise
            if (k == 0 && r2+1 < n && grid[r2+1][c1] == 0 && grid[r2+1][c2] == 0) {
                int nr1 =

=======

        int N = grid.length;
        int[][][] visited = new int[N][N][2];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                visited[i][j][0] = visited[i][j][1] = Integer.MAX_VALUE;
            }
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0, 0, 0});
        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            int x = curr[0];
            int y = curr[1];
            int d = curr[2];
            int step = curr[3];
            if (x == N - 1 && y == N - 2 && d == 0) {
                return step;
            }
            if (visited[x][y][d] <= step) {
                continue;
            }
            visited[x][y][d] = step;
            if (d == 0) {
                if (y + 1 < N && grid[x][y + 1] == 0) {
                    queue.offer(new int[]{x, y + 1, 0, step + 1});
                }
                if (x + 1 < N && grid[x + 1][y] == 0 && grid[x + 1][y + 1] == 0) {
                    queue.offer(new int[]{x, y, 1, step + 1});
                }
            } else {
                if (x + 1 < N && grid[x + 1][y] == 0) {
                    queue.offer(new int[]{x + 1, y, 1, step + 1});
                }
                if (y + 1 < N && grid[x][y + 1] == 0 && grid[x + 1][y + 1] == 0) {
                    queue.offer(new int[]{x, y, 0, step + 1});
                }
            }
        }
        return -1;

=======

        int n = grid.length;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 1, 0});
        boolean[][][] visited = new boolean[n][n][2];
        visited[0][1][0] = true;
        int res = 0;
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cur = queue.poll();
                int x1 = cur[0], y1 = cur[1], d = cur[2];
                if (x1 == n - 1 && y1 == n - 2 && d == 0) {
                    return res;
                }
                for (int j = 0; j < 4; j++) {
                    int x2 = x1 + dirs[j][0], y2 = y1 + dirs[j][1];
                    if (x2 < 0 || x2 >= n || y2 < 0 || y2 >= n || grid[x2][y2] == 1) {
                        continue;
                    }
                    if (d == 0 && x2 + 1 < n && grid[x2 + 1][y2] == 0) {
                        if (!visited[x2][y2][d]) {
                            queue.offer(new int[]{x2, y2, d});
                            visited[x2][y2][d] = true;
                        }
                    }
                    if (d == 1 && y2 + 1 < n && grid[x2][y2 + 1] == 0) {
                        if (!visited[x2][y2][d]) {
                            queue.offer(new int[]{x2, y2, d});
                            visited[x2][y2][d] = true;
                        }
                    }
                }
                int x2 = x1, y2 = y1, d2 = d ^ 1;
                if (d2 == 0 && x2 + 1 < n && grid[x2 + 1][y2] == 0 && grid[x2 + 1][y2 + 1] == 0) {
                    if (!visited[x2][y2][

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][2];
        // 0 is horizontal, 1 is vertical
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][j][0] = dp[i][j][1] = Integer.MAX_VALUE;
            }
        }
        dp[0][0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }
                if (j + 1 < n && grid[i][j + 1] == 0) {
                    // horizontal
                    dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][0] + 1);
                    // vertical
                    if (i + 1 < n && grid[i + 1][j] == 0 && grid[i + 1][j + 1] == 0) {
                        dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][0] + 1);
                    }
                }
                if (i + 1 < n && grid[i + 1][j] == 0) {
                    // vertical
                    dp[i + 1][j][1] = Math.min(dp[i + 1][j][1], dp[i][j][1] + 1);
                    // horizontal
                    if (j + 1 < n && grid[i][j + 1] == 0 && grid[i + 1][j + 1] == 0) {
                        dp[i][j + 1][0] = Math.min(dp[i][j + 1][0], dp[i][j][1] + 1);
                    }
                }
            }
        }
        return Math.min(dp[n - 1][n - 2][0], dp[n - 1][n - 2][1]) == Integer.MAX_VALUE ? -1 : Math.min(dp[n - 1][n - 2][0], dp[n -
