Synthesizing 10/10 solutions

=======

        List<List<Integer>> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String s1 = word.substring(0, j);
                String s2 = word.substring(j);
                if (isPalindrome(s1)) {
                    String s2rvs = new StringBuilder(s2).reverse().toString();
                    if (map.containsKey(s2rvs) && map.get(s2rvs) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(s2rvs));
                        list.add(i);
                        res.add(list);
                    }
                }
                if (isPalindrome(s2)) {
                    String s1rvs = new StringBuilder(s1).reverse().toString();
                    if (map.containsKey(s1rvs) && map.get(s1rvs) != i && s2.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(s1rvs));
                        res.add(list);
                    }
                }
            }
        }
        return res;
    }
    private boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;

=======

        List<List<Integer>> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String s1 = word.substring(0, j);
                String s2 = word.substring(j);
                if (isPalindrome(s1)) {
                    String s2rvs = new StringBuilder(s2).reverse().toString();
                    if (map.containsKey(s2rvs) && map.get(s2rvs) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(s2rvs));
                        list.add(i);
                        res.add(list);
                    }
                }
                if (isPalindrome(s2)) {
                    String s1rvs = new StringBuilder(s1).reverse().toString();
                    if (map.containsKey(s1rvs) && map.get(s1rvs) != i && s2.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(s1rvs));
                        res.add(list);
                    }
                }
            }
        }
        return res;
    }
    public boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;

=======

        List<List<Integer>> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j <= words[i].length(); j++) {
                String left = words[i].substring(0, j);
                String right = words[i].substring(j);
                if (isPalindrome(left)) {
                    String rightReverse = new StringBuilder(right).reverse().toString();
                    if (map.containsKey(rightReverse) && map.get(rightReverse) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(rightReverse));
                        list.add(i);
                        res.add(list);
                    }
                }
                if (isPalindrome(right)) {
                    String leftReverse = new StringBuilder(left).reverse().toString();
                    if (map.containsKey(leftReverse) && map.get(leftReverse) != i && right.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(leftReverse));
                        res.add(list);
                    }
                }
            }
        }
        return res;
    }
    
    private boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        return true;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String left = word.substring(0, j);
                String right = word.substring(j);
                if (isPalindrome(left)) {
                    String reversedRight = new StringBuilder(right).reverse().toString();
                    if (map.containsKey(reversedRight) && map.get(reversedRight) != i) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(map.get(reversedRight));
                        pair.add(i);
                        result.add(pair);
                    }
                }
                if (isPalindrome(right)) {
                    String reversedLeft = new StringBuilder(left).reverse().toString();
                    if (map.containsKey(reversedLeft) && map.get(reversedLeft) != i && right.length() != 0) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(i);
                        pair.add(map.get(reversedLeft));
                        result.add(pair);
                    }
                }
            }
        }
        return result;
    }
    
    private boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        return true;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String left = word.substring(0, j);
                String right = word.substring(j);
                if (isPalindrome(left)) {
                    String reversedRight = new StringBuilder(right).reverse().toString();
                    if (map.containsKey(reversedRight) && map.get(reversedRight) != i) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(map.get(reversedRight));
                        pair.add(i);
                        result.add(pair);
                    }
                }
                if (isPalindrome(right) && right.length() != 0) {
                    String reversedLeft = new StringBuilder(left).reverse().toString();
                    if (map.containsKey(reversedLeft) && map.get(reversedLeft) != i) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(i);
                        pair.add(map.get(reversedLeft));
                        result.add(pair);
                    }
                }
            }
        }
        return result;
    }
    
    private boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;

=======

        List<List<Integer>> ans = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String s1 = word.substring(0, j);
                String s2 = word.substring(j);
                if (isPalindrome(s1)) {
                    String s2rvs = new StringBuilder(s2).reverse().toString();
                    if (map.containsKey(s2rvs) && map.get(s2rvs) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(s2rvs));
                        list.add(i);
                        ans.add(list);
                    }
                }
                if (isPalindrome(s2)) {
                    String s1rvs = new StringBuilder(s1).reverse().toString();
                    if (map.containsKey(s1rvs) && map.get(s1rvs) != i && s2.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(s1rvs));
                        ans.add(list);
                    }
                }
            }
        }
        return ans;
    }
    private boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) {
                return false;
            }
        }
        return true;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<String, Integer> wordMap = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            wordMap.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String left = word.substring(0, j);
                String right = word.substring(j);
                if (isPalindrome(left)) {
                    String rightReverse = new StringBuilder(right).reverse().toString();
                    if (wordMap.containsKey(rightReverse) && wordMap.get(rightReverse) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(wordMap.get(rightReverse));
                        list.add(i);
                        result.add(list);
                    }
                }
                if (isPalindrome(right)) {
                    String leftReverse = new StringBuilder(left).reverse().toString();
                    if (wordMap.containsKey(leftReverse) && wordMap.get(leftReverse) != i && right.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(wordMap.get(leftReverse));
                        result.add(list);
                    }
                }
            }
        }
        return result;
    }
    private boolean isPalindrome(String word) {
        int left = 0;
        int right = word.length() - 1;
        while (left < right) {
            if (word.charAt(left) != word.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;

=======

        List<List<Integer>> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }

        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            for (int j = 0; j <= word.length(); j++) {
                String left = word.substring(0, j);
                String right = word.substring(j);

                if (isPalindrome(left)) {
                    String reversedRight = new StringBuilder(right).reverse().toString();
                    if (map.containsKey(reversedRight) && map.get(reversedRight) != i) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(map.get(reversedRight));
                        pair.add(i);
                        result.add(pair);
                    }
                }

                if (isPalindrome(right)) {
                    String reversedLeft = new StringBuilder(left).reverse().toString();
                    if (map.containsKey(reversedLeft) && map.get(reversedLeft) != i && right.length() != 0) {
                        List<Integer> pair = new ArrayList<>();
                        pair.add(i);
                        pair.add(map.get(reversedLeft));
                        result.add(pair);
                    }
                }
            }
        }

        return result;
    }

    private boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;

=======

        List<List<Integer>> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for(int i = 0; i < words.length; i++) {
            for(int j = 0; j <= words[i].length(); j++) {
                String s1 = words[i].substring(0, j);
                String s2 = words[i].substring(j);
                if(isPalindrome(s1)) {
                    String s2rvs = new StringBuilder(s2).reverse().toString();
                    if(map.containsKey(s2rvs) && map.get(s2rvs) != i) {
                        List<Integer> list = new ArrayList<>();
                        list.add(map.get(s2rvs));
                        list.add(i);
                        res.add(list);
                    }
                }
                if(isPalindrome(s2)) {
                    String s1rvs = new StringBuilder(s1).reverse().toString();
                    if(map.containsKey(s1rvs) && map.get(s1rvs) != i && s2.length() != 0) {
                        List<Integer> list = new ArrayList<>();
                        list.add(i);
                        list.add(map.get(s1rvs));
                        res.add(list);
                    }
                }
            }
        }
        return res;
    }
    
    private boolean isPalindrome(String str) {
        int i = 0; 
        int j = str.length() - 1;
        while(i < j) {
            if(str.charAt(i++) != str.charAt(j--)) return false;
        }
        return true;

=======

        // Build a map of word to index
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        List<List<Integer>> res = new ArrayList<>();
        for (int i = 0; i < words.length; i++) {
            // check the empty string
            if (words[i].length() == 0) {
                for (int j = 0; j < words.length; j++) {
                    if (i == j) {
                        continue;
                    }
                    if (isPalindrome(words[j])) {
                        res.add(Arrays.asList(i, j));
                        res.add(Arrays.asList(j, i));
                    }
                }
                continue;
            }
            // check the reversed string
            String reversed = new StringBuilder(words[i]).reverse().toString();
            if (map.containsKey(reversed) && map.get(reversed) != i) {
                res.add(Arrays.asList(i, map.get(reversed)));
            }
            // check the prefix
            for (int k = 1; k < words[i].length(); k++) {
                if (isPalindrome(words[i].substring(0, k))) {
                    String suffix = new StringBuilder(words[i].substring(k)).reverse().toString();
                    if (map.containsKey(suffix)) {
                        res.add(Arrays.asList(map.get(suffix), i));
                    }
                }
            }
            // check the suffix
            for (int k = words[i].length() - 1; k >= 0; k--) {
                if (isPalindrome(words[i].substring(k))) {
                    String prefix = new StringBuilder(words[i].substring(0, k)).reverse().toString();
                    if (map.containsKey(prefix)) {
                        res.add(Arrays.asList(i, map.get(prefix)));
                    }
                }
            }
        }
        return res;
    }
    
    private boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i) != s.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
