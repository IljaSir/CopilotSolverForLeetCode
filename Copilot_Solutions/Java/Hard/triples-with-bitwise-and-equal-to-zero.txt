Synthesizing 9/10 solutions (Duplicates hidden) (Duplicates hidden)

=======

        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                for (int k = 0; k < nums.length; k++) {
                    if ((nums[i] & nums[j] & nums[k]) == 0) {
                        count++;
                    }
                }
            }
        }
        return count;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                for (int k = 0; k < nums.length; k++) {
                    if ((nums[i] & nums[j] & nums[k]) == 0) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[1 << 16];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cnt[nums[i] & nums[j]]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = 0; k < (1 << 16); k++) {
                if ((nums[i] & k) == 0) {
                    ans += cnt[k];
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[1<<16];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[nums[i] & nums[j]]++;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 1<<16; j++) {
                if ((nums[i] & j) == 0) {
                    res += count[j];
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int ans = 0;
        int[] count = new int[1 << 16];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[nums[i] & nums[j]]++;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int k = 0; k < (1 << 16); k++) {
                if ((k & nums[i]) == 0) {
                    ans += count[k];
                }
            }
        }
        return ans;

=======

        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                for (int k = 0; k < nums.length; k++) {
                    if ((nums[i] & nums[j] & nums[k]) == 0) {
                        ans++;
                    }
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] cnt = new int[1 << 16];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cnt[nums[i] & nums[j]]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int k = 0; k < (1 << 16); k++) {
                if ((nums[i] & k) == 0) {
                    ans += cnt[k];
                }
            }
        }
        return ans;

=======

        int n = nums.length;
        int[] count = new int[1<<16];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[nums[i] & nums[j]]++;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 1<<16; j++) {
                if ((nums[i] & j) == 0) {
                    res += count[j];
                }
            }
        }
        return res;

=======

        int result = 0;
        int[] count = new int[1 << 16];
        for (int num : nums) {
            for (int num2 : nums) {
                count[num & num2]++;
            }
        }
        for (int num : nums) {
            for (int i = 0; i < count.length; i++) {
                if ((num & i) == 0) {
                    result += count[i];
                }
            }
        }
        return result;

=======

        int[] bitCount = new int[1 << 16];
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                bitCount[nums[i] & nums[j]]++;
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << 16); j++) {
                if ((nums[i] & j) == 0) {
                    res += bitCount[j];
                }
            }
        }
        return res;

=======

        int n = nums.length;
        int[] cnt = new int[1<<16];
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){
                cnt[nums[i]&nums[j]]++;
            }
        }
        int ans = 0;
        for(int i=0; i<n; ++i){
            for(int k=0; k<(1<<16); ++k){
                if((nums[i]&k)==0){
                    ans += cnt[k];
                }
            }
        }
        return ans;
