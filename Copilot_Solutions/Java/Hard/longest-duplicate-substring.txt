Synthesizing 9/10 solutions

=======

        int n = s.length();
        int[] nums = new int[n];
        for (int i = 0; i < n; ++i)
            nums[i] = (int)s.charAt(i) - (int)'a';
        int a = 26;
        long modulus = (long)Math.pow(2, 32);
        
        // binary search, L = repeating string length
        int left = 1, right = n;
        int L;
        while (left != right) {
            L = left + (right - left) / 2;
            if (search(L, a, modulus, n, nums) != -1)
                left = L + 1;
            else
                right = L;
        }

        int start = search(left - 1, a, modulus, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }

    public int search(int L, int a, long modulus, int n, int[] nums) {
        // compute the hash of string S[:L]
        long h = 0;
        for(int i = 0; i < L; ++i)
            h = (h * a + nums[i]) % modulus;
        
        // already seen hashes of strings of length L
        HashSet<Long> seen = new HashSet();
        seen.add(h);
        // const value to be used often : a**L % modulus
        long aL = 1;
        for (int i = 1; i <= L; ++i) aL = (aL * a) % modulus;

        for(int start = 1; start < n - L + 1; ++start) {
            // compute rolling hash in O(1) time
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + L - 1]) % modulus;
            if (seen.contains(h)) return start;
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; ++i) nums[i] = (int)s.charAt(i) - (int)'a';
        int a = 26;
        long mod = (long)Math.pow(2, 32);
        
        // binary search, L = repeating string length
        int left = 1, right = n;
        int L;
        while(left != right) {
            L = left + (right - left) / 2;
            if(search(L, a, mod, n, nums) != -1) left = L + 1;
            else right = L;
        }
        
        int start = search(left - 1, a, mod, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }
    
    public int search(int L, int a, long mod, int n, int[] nums) {
        // compute the hash of string S[:L]
        long h = 0;
        for(int i = 0; i < L; ++i) h = (h * a + nums[i]) % mod;
        
        // already seen hashes of strings of length L
        HashSet<Long> seen = new HashSet();
        seen.add(h);
        // const value to be used often : a**L % mod
        long aL = 1;
        for(int i = 1; i <= L; ++i) aL = (aL * a) % mod;
        
        for(int start = 1; start < n - L + 1; ++start) {
            // compute rolling hash in O(1) time
            h = (h * a - nums[start - 1] * aL % mod + mod) % mod;
            h = (h + nums[start + L - 1]) % mod;
            if(seen.contains(h)) return start;
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; ++i) nums[i] = (int)s.charAt(i) - (int)'a';
        int a = 26;
        long modulus = (long)Math.pow(2, 32);

        int left = 1, right = n;
        int L;
        while (left != right) {
            L = left + (right - left) / 2;
            if (search(L, a, modulus, n, nums) != -1) left = L + 1;
            else right = L;
        }

        int start = search(left - 1, a, modulus, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }

    public int search(int L, int a, long modulus, int n, int[] nums) {
        long h = 0;
        for(int i = 0; i < L; ++i) h = (h * a + nums[i]) % modulus;

        HashSet<Long> seen = new HashSet();
        seen.add(h);
        long aL = 1;
        for (int i = 1; i <= L; ++i) aL = (aL * a) % modulus;

        for(int start = 1; start < n - L + 1; ++start) {
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + L - 1]) % modulus;
            if (seen.contains(h)) return start;
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; i++) {
            nums[i] = (int)s.charAt(i) - (int)'a';
        }
        int a = 26;
        long modulus = (long)Math.pow(2, 32);
        int left = 1;
        int right = n;
        int l = 0;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if (search(mid, a, modulus, n, nums) != -1) {
                l = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        int start = search(l, a, modulus, n, nums);
        return s.substring(start, start + l);
    }
    public int search(int l, int a, long modulus, int n, int[] nums) {
        long h = 0;
        for(int i = 0; i < l; i++) {
            h = (h * a + nums[i]) % modulus;
        }
        HashSet<Long> seen = new HashSet<>();
        seen.add(h);
        long aL = 1;
        for(int i = 1; i <= l; i++) {
            aL = (aL * a) % modulus;
        }
        for(int start = 1; start < n - l + 1; start++) {
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + l - 1]) % modulus;
            if (seen.contains(h)) {
                return start;
            }
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; i++) {
            nums[i] = (int)s.charAt(i) - (int)'a';
        }
        int a = 26;
        long modulus = (long)Math.pow(2, 32);
        int left = 1, right = n;
        int l = 0;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(search(mid, a, modulus, n, nums) != -1) {
                l = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        int start = search(l, a, modulus, n, nums);
        return s.substring(start, start + l);
    }
    
    private int search(int l, int a, long modulus, int n, int[] nums) {
        long h = 0;
        for(int i = 0; i < l; i++) {
            h = (h * a + nums[i]) % modulus;
        }
        HashSet<Long> seen = new HashSet();
        seen.add(h);
        long aL = 1;
        for(int i = 1; i <= l; i++) {
            aL = (aL * a) % modulus;
        }
        for(int start = 1; start < n - l + 1; start++) {
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + l - 1]) % modulus;
            if(seen.contains(h)) {
                return start;
            }
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; i++) {
            nums[i] = (int)s.charAt(i) - (int)'a';
        }
        int a = 26;
        long modulus = (long)Math.pow(2, 32);
        
        int left = 1, right = n;
        int L;
        while(left != right) {
            L = left + (right - left) / 2;
            if(search(L, a, modulus, n, nums) != -1) {
                left = L + 1;
            } else {
                right = L;
            }
        }
        
        int start = search(left - 1, a, modulus, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }
    
    public int search(int L, int a, long modulus, int n, int[] nums) {
        long h = 0;
        for(int i = 0; i < L; i++) {
            h = (h * a + nums[i]) % modulus;
        }
        HashSet<Long> seen = new HashSet<>();
        seen.add(h);
        long aL = 1;
        for(int i = 1; i <= L; i++) {
            aL = (aL * a) % modulus;
        }
        
        for(int start = 1; start < n - L + 1; start++) {
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + L - 1]) % modulus;
            if(seen.contains(h)) {
                return start;
            }
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for(int i = 0; i < n; i++) {
            nums[i] = (int)s.charAt(i) - (int)'a';
        }
        int a = 26;
        long modulus = (long)Math.pow(2, 32);
        
        int left = 1;
        int right = n;
        int L;
        while(left != right) {
            L = left + (right - left) / 2;
            if(search(L, a, modulus, n, nums) != -1) {
                left = L + 1;
            } else {
                right = L;
            }
        }
        
        int start = search(left - 1, a, modulus, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }
    
    private int search(int L, int a, long modulus, int n, int[] nums) {
        long h = 0;
        for(int i = 0; i < L; i++) {
            h = (h * a + nums[i]) % modulus;
        }
        
        HashSet<Long> seen = new HashSet<>();
        seen.add(h);
        long aL = 1;
        for(int i = 1; i <= L; i++) {
            aL = (aL * a) % modulus;
        }
        
        for(int start = 1; start < n - L + 1; start++) {
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + L - 1]) % modulus;
            if(seen.contains(h)) {
                return start;
            }
            seen.add(h);
        }
        return -1;

=======

        int n = s.length();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = (int) s.charAt(i) - (int) 'a';
        }
        int a = 26;
        long modulus = (long) Math.pow(2, 32);

        // binary search, L = repeating string length
        int left = 1, right = n;
        int L;
        while (left != right) {
            L = left + (right - left) / 2;
            if (search(L, a, modulus, n, nums) != -1) {
                left = L + 1;
            } else {
                right = L;
            }
        }

        int start = search(left - 1, a, modulus, n, nums);
        return start != -1 ? s.substring(start, start + left - 1) : "";
    }

    public int search(int L, int a, long modulus, int n, int[] nums) {
        // compute the hash of string S[:L]
        long h = 0;
        for (int i = 0; i < L; ++i) {
            h = (h * a + nums[i]) % modulus;
        }

        // already seen hashes of strings of length L
        HashSet<Long> seen = new HashSet();
        seen.add(h);
        // const value to be used often : a**L % modulus
        long aL = 1;
        for (int i = 1; i <= L; ++i) {
            aL = (aL * a) % modulus;
        }

        for (int start = 1; start < n - L + 1; ++start) {
            // compute rolling hash in O(1) time
            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
            h = (h + nums[start + L - 1]) % modulus;
            if (seen.contains(h)) {
                return start;
            }
            seen.add(h);
        }
        return -1;

=======

        int l = 0, r = s.length() - 1;
        while (l < r) {
            int m = l + (r - l + 1) / 2;
            if (search(s, m) != -1) {
                l = m;
            } else {
                r = m - 1;
            }
        }
        int start = search(s, l);
        return start != -1 ? s.substring(start, start + l) : "";
    }
    private int search(String s, int len) {
        long h = 0, base = 1;
        Set<Long> seen = new HashSet();
        for (int i = 0; i < len; i++) {
            h = h * 26 + (s.charAt(i) - 'a');
            base *= 26;
        }
        seen.add(h);
        for (int i = len; i < s.length(); i++) {
            h = h * 26 + (s.charAt(i) - 'a') - (s.charAt(i - len) - 'a') * base;
            if (seen.contains(h)) {
                return i - len + 1;
            }
            seen.add(h);
        }
        return -1;
