Synthesizing 10/10 solutions

=======

        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceiling = set.ceiling((long) nums[i] - valueDiff);
            if (ceiling != null && ceiling <= (long) nums[i] + valueDiff) {
                return true;
            }
            set.add((long) nums[i]);
            if (i >= indexDiff) {
                set.remove((long) nums[i - indexDiff]);
            }
        }
        return false;

=======

        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceiling = set.ceiling((long) nums[i] - (long) valueDiff);
            if (ceiling != null && ceiling <= (long) nums[i] + (long) valueDiff) return true;
            set.add((long) nums[i]);
            if (i >= indexDiff) set.remove((long) nums[i - indexDiff]);
        }
        return false;

=======

        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long floor = set.floor((long) nums[i] + valueDiff);
            Long ceil = set.ceiling((long) nums[i] - valueDiff);
            if ((floor != null && floor >= nums[i]) || (ceil != null && ceil <= nums[i])) {
                return true;
            }
            set.add((long) nums[i]);
            if (i >= indexDiff) {
                set.remove((long) nums[i - indexDiff]);
            }
        }
        return false;

=======

        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceil = set.ceiling((long) nums[i] - valueDiff);
            if (ceil != null && ceil <= (long) nums[i] + valueDiff) {
                return true;
            }
            set.add((long) nums[i]);
            if (set.size() > indexDiff) {
                set.remove((long) nums[i - indexDiff]);
            }
        }
        return false;

=======

        TreeSet<Integer> set = new TreeSet<Integer>();
        for (int i = 0; i < nums.length; i++) {
            Integer ceiling = set.ceiling(nums[i]);
            if (ceiling != null && ceiling <= nums[i] + valueDiff) {
                return true;
            }
            Integer floor = set.floor(nums[i]);
            if (floor != null && nums[i] <= floor + valueDiff) {
                return true;
            }
            set.add(nums[i]);
            if (i >= indexDiff) {
                set.remove(nums[i - indexDiff]);
            }
        }
        return false;

=======

        TreeSet<Integer> set = new TreeSet<>();
        for (int i = 0; i < nums.length; ++i) {
            int n = nums[i];
            if ((set.floor(n) != null && n <= set.floor(n) + valueDiff)
                    || (set.ceiling(n) != null && set.ceiling(n) <= n + valueDiff)) {
                return true;
            }
            set.add(n);
            if (i >= indexDiff) {
                set.remove(nums[i - indexDiff]);
            }
        }
        return false;

=======

        if (nums.length < 2) {
            return false;
        }
        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceiling = set.ceiling((long)nums[i] - (long)valueDiff);
            if (ceiling != null && ceiling <= (long)nums[i] + (long)valueDiff) {
                return true;
            }
            set.add((long)nums[i]);
            if (set.size() > indexDiff) {
                set.remove((long)nums[i - indexDiff]);
            }
        }
        return false;

=======

        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            long num = nums[i];
            long min = num - valueDiff;
            long max = num + valueDiff;
            Long lower = set.ceiling(min);
            Long upper = set.floor(max);
            if (lower != null && lower <= max) {
                return true;
            }
            if (upper != null && upper >= min) {
                return true;
            }
            set.add(num);
            if (i >= indexDiff) {
                set.remove((long) nums[i - indexDiff]);
            }
        }
        return false;

=======

        if (nums == null || nums.length < 2) {
            return false;
        }
        if (valueDiff < 0) {
            return false;
        }
        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceiling = set.ceiling((long) nums[i] - (long) valueDiff);
            if (ceiling != null && ceiling <= (long) nums[i] + (long) valueDiff) {
                return true;
            }
            set.add((long) nums[i]);
            if (i >= indexDiff) {
                set.remove((long) nums[i - indexDiff]);
            }
        }
        return false;

=======

        if (nums == null || nums.length == 0) {
            return false;
        }
        if (indexDiff == 0) {
            return false;
        }
        TreeSet<Long> set = new TreeSet<>();
        for (int i = 0; i < nums.length; i++) {
            Long ceil = set.ceiling((long)nums[i] - (long)valueDiff);
            if (ceil != null && ceil <= (long)nums[i] + (long)valueDiff) {
                return true;
            }
            set.add((long)nums[i]);
            if (i >= indexDiff) {
                set.remove((long)nums[i - indexDiff]);
            }
        }
        return false;
