Synthesizing 10/10 solutions

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    dp[i][j][k] = Integer.MIN_VALUE;
                }
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            for (int i = Math.max(0, t - n + 1); i <= Math.min(n - 1, t); i++) {
                for (int j = Math.max(0, t - n + 1); j <= Math.min(n - 1, t); j++) {
                    if (grid[i][t - i] < 0 || grid[j][t - j] < 0) {
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; pi++) {
                        for (int pj = j - 1; pj <= j; pj++) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return Math.max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    dp[i][j][k] = Integer.MIN_VALUE;
                }
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            for (int i = Math.max(0, t - (n - 1)); i <= Math.min(n - 1, t); i++) {
                for (int j = Math.max(0, t - (n - 1)); j <= Math.min(n - 1, t); j++) {
                    int pi = t - j;
                    int pj = t - i;
                    if (grid[i][pi] == -1 || grid[j][pj] == -1) {
                        continue;
                    }
                    int val = grid[i][pi];
                    if (i != j) {
                        val += grid[j][pj];
                    }
                    for (int p = i - 1; p <= i; p++) {
                        for (int q = j - 1; q <= j; q++) {
                            if (p >= 0 && q >= 0) {
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[p][q][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return Math.max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MIN_VALUE);
        }
        dp[0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            int[][] dp2 = new int[n][n];
            for (int i = 0; i < n; i++) {
                Arrays.fill(dp2[i], Integer.MIN_VALUE);
            }
            for (int i = Math.max(0, t - (n - 1)); i <= Math.min(n - 1, t); i++) {
                for (int p = Math.max(0, t - (n - 1)); p <= Math.min(n - 1, t); p++) {
                    if (grid[i][t - i] == -1 || grid[p][t - p] == -1) {
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != p) {
                        val += grid[p][t - p];
                    }
                    for (int pi = i - 1; pi <= i; pi++) {
                        for (int pj = p - 1; pj <= p; pj++) {
                            if (pi >= 0 && pj >= 0) {
                                dp2[i][p] = Math.max(dp2[i][p], dp[pi][pj] + val);
                            }
                        }
                    }
                }
            }
            dp = dp2;
        }
        return Math.max(0, dp[n - 1][n - 1]);

=======

        int n = grid.length;
        int[][] dp = new int[n][n];
        dp[0][0] = grid[0][0];
        for (int t = 1; t < 2 * n - 1; ++t) {
            int[][] dp2 = new int[n][n];
            for (int i = 0; i < n; ++i) {
                for (int p = 0; p < n; ++p) {
                    int j = t - i, q = t - p;
                    if (j < 0 || j >= n || q < 0 || q >= n || grid[i][j] < 0 || grid[p][q] < 0) {
                        dp2[i][p] = -1;
                        continue;
                    }
                    if (i > 0) {
                        dp2[i][p] = Math.max(dp2[i][p], dp[i - 1][p]);
                    }
                    if (p > 0) {
                        dp2[i][p] = Math.max(dp2[i][p], dp[i][p - 1]);
                    }
                    if (i > 0 && p > 0) {
                        dp2[i][p] = Math.max(dp2[i][p], dp[i - 1][p - 1]);
                    }
                    if (dp2[i][p] >= 0) {
                        dp2[i][p] += grid[i][j];
                        if (i != p) {
                            dp2[i][p] += grid[p][q];
                        }
                    }
                }
            }
            dp = dp2;
        }
        return Math.max(dp[n - 1][n - 1], 0);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int[][] a : dp) {
            for (int[] b : a) {
                Arrays.fill(b, Integer.MIN_VALUE);
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            for (int i = Math.min(n - 1, t); i >= 0; i--) {
                for (int j = Math.min(n - 1, t); j >= 0; j--) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        dp[i][j][t] = -1;
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; pi++) {
                        for (int pj = j - 1; pj <= j; pj++) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return Math.max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int[][] d : dp) {
            for (int[] d1 : d) {
                Arrays.fill(d1, Integer.MIN_VALUE);
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            for (int i = Math.min(n - 1, t); i >= 0; --i) {
                for (int p = Math.min(n - 1, t); p >= 0; --p) {
                    int j = t - i, q = t - p;
                    if (j < 0 || j >= n || q < 0 || q >= n || grid[i][j] == -1 || grid[p][q] == -1) {
                        dp[i][p][t] = -1;
                        continue;
                    }
                    if (i > 0) dp[i][p][t] = Math.max(dp[i][p][t], dp[i - 1][p][t - 1]);
                    if (p > 0) dp[i][p][t] = Math.max(dp[i][p][t], dp[i][p - 1][t - 1]);
                    if (i > 0 && p > 0) dp[i][p][t] = Math.max(dp[i][p][t], dp[i - 1][p - 1][t - 1]);
                    if (dp[i][p][t] >= 0) dp[i][p][t] += grid[i][j] + (i != p ? grid[p][q] : 0);
                }
            }
        }
        return Math.max(dp[n - 1][n - 1][2 * n - 2], 0);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int[][] d : dp) {
            for (int[] dd : d) {
                Arrays.fill(dd, Integer.MIN_VALUE);
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; t++) {
            for (int i = Math.min(n - 1, t); i >= 0; i--) {
                for (int j = Math.min(n - 1, t); j >= 0; j--) {
                    if (grid[i][t - i] == -1 || grid[j][t - j] == -1) {
                        dp[i][j][t] = -1;
                        continue;
                    }
                    int val = grid[i][t - i];
                    if (i != j) {
                        val += grid[j][t - j];
                    }
                    for (int pi = i - 1; pi <= i; pi++) {
                        for (int pj = j - 1; pj <= j; pj++) {
                            if (pi >= 0 && pj >= 0) {
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[pi][pj][t - 1] + val);
                            }
                        }
                    }
                }
            }
        }
        return Math.max(0, dp[n - 1][n - 1][2 * n - 2]);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int[][] row: dp)
            for (int[] col: row)
                Arrays.fill(col, Integer.MIN_VALUE);
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2*n-2; ++t) {
            for (int i = Math.min(n-1, t); i >= 0; --i) {
                for (int j = Math.min(n-1, t); j >= 0; --j) {
                    if (grid[i][t-i] == -1 || grid[j][t-j] == -1) {
                        dp[i][j][t] = -1;
                        continue;
                    }
                    int val = t > 0 ? grid[i][t-i] : 0;
                    if (i != j) val += grid[j][t-j];
                    for (int pi = i-1; pi <= i; ++pi)
                        for (int pj = j-1; pj <= j; ++pj)
                            if (pi >= 0 && pj >= 0)
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[pi][pj][t-1]);
                    dp[i][j][t] += val;
                }
            }
        }
        return Math.max(0, dp[n-1][n-1][2*n-2]);

=======

        int n = grid.length;
        int[][][] dp = new int[n + 1][n + 1][n + 1];
        for (int[][] d : dp) {
            for (int[] dd : d) {
                Arrays.fill(dd, Integer.MIN_VALUE);
            }
        }
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2 * n - 2; ++t) {
            for (int i1 = Math.max(0, t - n + 1); i1 <= Math.min(n - 1, t); ++i1) {
                for (int i2 = Math.max(0, t - n + 1); i2 <= Math.min(n - 1, t); ++i2) {
                    if (grid[i1][t - i1] == -1 || grid[i2][t - i2] == -1) {
                        dp[i1 + 1][i2 + 1][t] = -1;
                        continue;
                    }
                    int val = grid[i1][t - i1];
                    if (i1 != i2) {
                        val += grid[i2][t - i2];
                    }
                    for (int p1 = i1; p1 <= i1 + 1; ++p1) {
                        for (int p2 = i2; p2 <= i2 + 1; ++p2) {
                            dp[i1 + 1][i2 + 1][t] = Math.max(dp[i1 + 1][i2 + 1][t], dp[p1][p2][t - 1] + val);
                        }
                    }
                }
            }
        }
        return Math.max(0, dp[n][n][2 * n - 2]);

=======

        int n = grid.length;
        int[][][] dp = new int[n][n][n];
        for (int[][] row: dp)
            for (int[] layer: row)
                Arrays.fill(layer, Integer.MIN_VALUE);
        dp[0][0][0] = grid[0][0];
        for (int t = 1; t <= 2*n-2; ++t) {
            for (int i = Math.max(0, t-(n-1)); i <= Math.min(n-1, t); ++i) {
                for (int j = Math.max(0, t-(n-1)); j <= Math.min(n-1, t); ++j) {
                    if (grid[i][t-i] == -1 || grid[j][t-j] == -1) {
                        dp[i][j][t] = -9999999;
                        continue;
                    }
                    int val = grid[i][t-i];
                    if (i != j) val += grid[j][t-j];
                    for (int pi = i-1; pi <= i; ++pi)
                        for (int pj = j-1; pj <= j; ++pj)
                            if (pi >= 0 && pj >= 0)
                                dp[i][j][t] = Math.max(dp[i][j][t], dp[pi][pj][t-1] + val);
                }
            }
        }
        return Math.max(0, dp[n-1][n-1][2*n-2]);
