Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int res = target[0];
        for (int i = 1; i < target.length; i++) {
            if (target[i] > target[i - 1]) {
                res += target[i] - target[i - 1];
            }
        }
        return res;

=======

        int result = target[0];
        for (int i = 1; i < target.length; i++) {
            if (target[i] > target[i - 1]) {
                result += target[i] - target[i - 1];
            }
        }
        return result;

=======

        int res = target[0];
        for (int i = 1; i < target.length; i++) {
            res += Math.max(target[i] - target[i - 1], 0);
        }
        return res;

=======

        int ans = target[0];
        for (int i = 1; i < target.length; i++) {
            ans += Math.max(target[i] - target[i-1], 0);
        }
        return ans;

=======

        int n = target.length;
        int ans = target[0];
        for (int i = 1; i < n; i++) {
            ans += Math.max(target[i] - target[i - 1], 0);
        }
        return ans;

=======

        int res = 0;
        int prev = 0;
        for (int i = 0; i < target.length; i++) {
            if (target[i] > prev) {
                res += target[i] - prev;
            }
            prev = target[i];
        }
        return res;

=======

        int sum = 0;
        for (int i = 0; i < target.length; i++) {
            if (i == 0) {
                sum += target[i];
            } else {
                sum += Math.max(target[i] - target[i - 1], 0);
            }
        }
        return sum;

=======

        // 1, 2, 3, 2, 1
        // 0, 1, 2, 1, 0
        // 1, 3, 5, 4, 3
        // 1, 2, 3, 2, 1
        int res = 0;
        int prev = 0;
        for (int i = 0; i < target.length; i++) {
            res += Math.max(0, target[i] - prev);
            prev = target[i];
        }
        return res;
