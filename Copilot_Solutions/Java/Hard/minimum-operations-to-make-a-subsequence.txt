Synthesizing 10/10 solutions (Duplicates hidden)

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int num : arr) {
            if (map.containsKey(num)) {
                list.add(map.get(num));
            }
        }
        int[] dp = new int[list.size()];
        int len = 0;
        for (int num : list) {
            int i = Arrays.binarySearch(dp, 0, len, num);
            if (i < 0) {
                i = -(i + 1);
            }
            dp[i] = num;
            if (i == len) {
                len++;
            }
        }
        return target.length - len;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            if (map.containsKey(arr[i])) {
                list.add(map.get(arr[i]));
            }
        }
        int[] dp = new int[list.size()];
        int len = 0;
        for (int num : list) {
            int i = Arrays.binarySearch(dp, 0, len, num);
            if (i < 0) {
                i = -(i + 1);
            }
            dp[i] = num;
            if (i == len) {
                len++;
            }
        }
        return target.length - len;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int n : arr) {
            if (map.containsKey(n)) {
                list.add(map.get(n));
            }
        }
        int[] dp = new int[list.size()];
        int len = 0;
        for (int n : list) {
            int i = Arrays.binarySearch(dp, 0, len, n);
            if (i < 0) {
                i = -(i + 1);
            }
            dp[i] = n;
            if (i == len) {
                len++;
            }
        }
        return target.length - len;

=======

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            if (map.containsKey(arr[i])) {
                list.add(map.get(arr[i]));
            }
        }
        return target.length - lengthOfLIS(list);
    }
    private int lengthOfLIS(List<Integer> nums) {
        int[] tails = new int[nums.size()];
        int size = 0;
        for (int x: nums) {
            int i = 0, j = size;
            while (i != j) {
                int m = (i + j) / 2;
                if (tails[m] < x) {
                    i = m + 1;
                } else {
                    j = m;
                }
            }
            tails[i] = x;
            if (i == size) {
                ++size;
            }
        }
        return size;

=======

        int n = target.length;
        Map<Integer, Integer> pos = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            pos.put(target[i], i);
        }
        List<Integer> d = new ArrayList<>();
        for (int val: arr) {
            if (pos.containsKey(val)) {
                int idx = pos.get(val);
                int it = Collections.binarySearch(d, idx);
                if (it < 0) {
                    it = -it - 1;
                }
                if (it == d.size()) {
                    d.add(idx);
                } else {
                    d.set(it, idx);
                }
            }
        }
        return n - d.size();

=======

        int n = target.length;
        int m = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            if (map.containsKey(arr[i])) {
                list.add(map.get(arr[i]));
            }
        }
        int[] dp = new int[list.size()];
        int len = 0;
        for (int i = 0; i < list.size(); i++) {
            int index = Arrays.binarySearch(dp, 0, len, list.get(i));
            if (index < 0) {
                index = -(index + 1);
            }
            dp[index] = list.get(i);
            if (index == len) {
                len++;
            }
        }
        return n - len;

=======

        int n = target.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for (int num : arr) {
            if (map.containsKey(num)) {
                list.add(map.get(num));
            }
        }
        int len = list.size();
        int[] d = new int[len];
        int size = 0;
        for (int num : list) {
            int i = Arrays.binarySearch(d, 0, size, num);
            if (i < 0) {
                i = -(i + 1);
            }
            d[i] = num;
            if (i == size) {
                size++;
            }
        }
        return n - size;

=======

        int n = target.length;
        int m = arr.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(target[i], i);
        }
        int[] dp = new int[n];
        int len = 0;
        for (int i = 0; i < m; i++) {
            if (map.containsKey(arr[i])) {
                int index = map.get(arr[i]);
                int pos = Arrays.binarySearch(dp, 0, len, index);
                if (pos < 0) {
                    pos = -(pos + 1);
                }
                dp[pos] = index;
                if (pos == len) {
                    len++;
                }
            }
        }
        return n - len;

=======

        Map<Integer, Integer> map = new HashMap<>();
        int n = target.length;
        for(int i = 0; i < n; i++) {
            map.put(target[i], i);
        }
        List<Integer> list = new ArrayList<>();
        for(int i = 0; i < arr.length; i++) {
            if(map.containsKey(arr[i])) {
                list.add(map.get(arr[i]));
            }
        }
        int[] dp = new int[list.size()];
        int len = 0;
        for(int i = 0; i < list.size(); i++) {
            int index = Arrays.binarySearch(dp, 0, len, list.get(i));
            if(index < 0) {
                index = -(index + 1);
            }
            dp[index] = list.get(i);
            if(index == len) {
                len++;
            }
        }
        return n - len;
