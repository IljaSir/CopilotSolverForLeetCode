Synthesizing 10/10 solutions (Duplicates hidden)

=======

        int[][] dp = new int[k + 1][n + 1];
        int m = 0;
        while (dp[k][m] < n) {
            m++;
            for (int i = 1; i <= k; i++) {
                dp[i][m] = dp[i][m - 1] + dp[i - 1][m - 1] + 1;
            }
        }
        return m;

=======

        int[][] dp = new int[n + 1][k + 1];
        int m = 0;
        while (dp[m][k] < n) {
            ++m;
            for (int j = 1; j <= k; ++j) {
                dp[m][j] = dp[m - 1][j - 1] + dp[m - 1][j] + 1;
            }
        }
        return m;

=======

        int[] dp = new int[k + 1];
        int m = 0;
        while (dp[k] < n) {
            for (int i = k; i > 0; --i) {
                dp[i] += dp[i - 1] + 1;
            }
            ++m;
        }
        return m;

=======

        int[][] dp = new int[k+1][n+1];
        for (int i = 0; i <= n; i++) {
            dp[1][i] = i;
        }
        for (int i = 1; i <= k; i++) {
            dp[i][1] = 1;
        }
        for (int i = 2; i <= k; i++) {
            for (int j = 2; j <= n; j++) {
                dp[i][j] = Integer.MAX_VALUE;
                int left = 1, right = j;
                while (left <= right) {
                    int mid = left + (right - left) / 2;
                    int broken = dp[i - 1][mid - 1];
                    int notBroken = dp[i][j - mid];
                    if (broken > notBroken) {
                        dp[i][j] = Math.min(dp[i][j], broken + 1);
                        right = mid - 1;
                    } else {
                        dp[i][j] = Math.min(dp[i][j], notBroken + 1);
                        left = mid + 1;
                    }
                }
            }
        }
        return dp[k][n];

=======

        int[][] dp = new int[k+1][n+1];
        for(int i=1; i<=n; i++){
            dp[1][i] = i;
        }
        for(int i=1; i<=k; i++){
            dp[i][1] = 1;
        }
        for(int i=2; i<=k; i++){
            for(int j=2; j<=n; j++){
                int min = Integer.MAX_VALUE;
                int low = 1;
                int high = j;
                while(low <= high){
                    int mid = (low + high) / 2;
                    int left = dp[i-1][mid-1];
                    int right = dp[i][j-mid];
                    min = Math.min(min, 1 + Math.max(left, right));
                    if(left < right){
                        low = mid + 1;
                    }
                    else{
                        high = mid - 1;
                    }
                }
                dp[i][j] = min;
            }
        }
        return dp[k][n];
