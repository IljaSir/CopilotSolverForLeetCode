Synthesizing 10/10 solutions

=======

        long left = 0;
        long right = Long.MAX_VALUE;
        while (left < right) {
            long mid = left + (right - left) / 2;
            long count = trailingZeros(mid);
            if (count < k) {
                left = mid + 1;
            } else if (count > k) {
                right = mid;
            } else {
                return 5;
            }
        }
        return 0;
    }

    private long trailingZeros(long n) {
        long count = 0;
        long base = 5;
        while (n >= base) {
            count += n / base;
            base *= 5;
        }
        return count;

=======

        long l = 0, r = Long.MAX_VALUE;
        while (l < r) {
            long m = l + (r - l) / 2;
            long z = zeta(m);
            if (z == k) {
                return 5;
            } else if (z < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return 0;
    }
    
    private long zeta(long x) {
        long ans = 0;
        while (x > 0) {
            ans += x / 5;
            x /= 5;
        }
        return ans;

=======

        long l = 0, r = Long.MAX_VALUE;
        while (l < r) {
            long m = l + (r - l) / 2;
            long z = zeta(m);
            if (z < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return zeta(l) == k ? 5 : 0;
    }
    
    long zeta(long x) {
        long res = 0;
        while (x > 0) {
            res += x / 5;
            x /= 5;
        }
        return res;

=======

        long left = 0;
        long right = 5L * (k + 1);
        while (left < right) {
            long mid = left + (right - left) / 2;
            long count = trailingZeros(mid);
            if (count == k) {
                return 5;
            } else if (count < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return 0;
    }
    
    private long trailingZeros(long x) {
        long res = 0;
        while (x > 0) {
            res += x / 5;
            x /= 5;
        }
        return res;

=======

        long l = 0, r = Long.MAX_VALUE;
        while (l < r) {
            long m = l + (r - l) / 2;
            long c = trailingZeroes(m);
            if (c == k) {
                return 5;
            } else if (c < k) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return 0;
    }
    
    private long trailingZeroes(long n) {
        long c = 0;
        while (n > 0) {
            n /= 5;
            c += n;
        }
        return c;

=======

        long l = 0, h = 5L * (k + 1);
        while (l < h) {
            long m = l + (h - l) / 2;
            long z = zeta(m);
            if (z == k) {
                return 5;
            } else if (z < k) {
                l = m + 1;
            } else {
                h = m;
            }
        }
        return 0;
    }

    private long zeta(long n) {
        long ans = 0;
        while (n > 0) {
            ans += n / 5;
            n /= 5;
        }
        return ans;

=======

        long lo = 0, hi = Long.MAX_VALUE;
        while (lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long cnt = count(mid);
            if (cnt < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return count(lo) == k ? 5 : 0;
    }
    
    private long count(long x) {
        long cnt = 0;
        while (x > 0) {
            cnt += x / 5;
            x /= 5;
        }
        return cnt;

=======

        long left = 0, right = 5L * (k + 1);
        while (left < right) {
            long mid = left + (right - left) / 2;
            long count = countZeros(mid);
            if (count == k) {
                return 5;
            } else if (count < k) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return 0;
    }
    
    private long countZeros(long n) {
        long count = 0;
        while (n > 0) {
            n /= 5;
            count += n;
        }
        return count;

=======

        long lo = 0, hi = Long.MAX_VALUE;
        while(lo < hi) {
            long mid = lo + (hi - lo) / 2;
            long count = trailingZeroes(mid);
            if(count == k) return 5;
            else if(count > k) hi = mid;
            else lo = mid + 1;
        }
        return 0;
    }
    private long trailingZeroes(long n) {
        long count = 0;
        for(long i = 5; i <= n; i *= 5) {
            count += n / i;
        }
        return count;

=======

        long start = 1;
        long end = Long.MAX_VALUE;
        long mid;
        long count;
        while (start <= end) {
            mid = (start + end) / 2;
            count = count(mid);
            if (count == k) {
                return 5;
            } else if (count < k) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return 0;
    }
    
    private long count(long x) {
        long count = 0;
        while (x > 0) {
            count += x / 5;
            x /= 5;
        }
        return count;
