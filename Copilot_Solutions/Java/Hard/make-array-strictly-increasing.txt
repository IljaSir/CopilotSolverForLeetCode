Synthesizing 6/10 solutions

=======

        int n = arr1.length;
        int m = arr2.length;
        Arrays.sort(arr2);
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = arr1[0];
        for (int i = 1; i < n; i++) {
            dp[i][i] = arr1[i];
            for (int j = 0; j < i; j++) {
                dp[i][j] = dp[i - 1][j];
                if (dp[i - 1][j] < arr1[i] && arr1[i] < arr1[i - 1]) {
                    dp[i][j] = arr1[i];
                }
                if (dp[i - 1][j] < arr1[i]) {
                    int index = Arrays.binarySearch(arr2, dp[i - 1][j]);
                    if (index < 0) {
                        index = -index - 1;
                    }
                    if (index < m) {
                        dp[i][j] = arr2[index];
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            if (dp[n - 1][j] != Integer.MAX_VALUE) {
                ans = Math.min(ans, j);
            }
        }
        return ans == Integer.MAX_VALUE ? -1 : ans;

=======

        Arrays.sort(arr2);
        int n = arr1.length;
        int m = arr2.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                if (arr1[j] < arr1[i]) {
                    dp[i] = Math.min(dp[i], dp[j]);
                }
                if (arr1[j] < arr2[i]) {
                    int index = Arrays.binarySearch(arr2, arr1[j]);
                    if (index < 0) {
                        index = -index - 1;
                    }
                    if (index < m) {
                        dp[i] = Math.min(dp[i], dp[j] + 1);
                    }
                }
            }
            if (dp[i] == Integer.MAX_VALUE) {
                int index = Arrays.binarySearch(arr2, arr1[i]);
                if (index < 0) {
                    index = -index - 1;
                }
                if (index < m) {
                    dp[i] = Math.min(dp[i], 1);
                }
            }
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int n = arr1.length;
        int m = arr2.length;
        Arrays.sort(arr2);
        int[] dp = new int[n];
        dp[0] = 0;
        for (int i = 1; i < n; ++i) {
            dp[i] = Integer.MAX_VALUE;
        }
        for (int i = 1; i < n; ++i) {
            if (arr1[i] > arr1[i - 1]) {
                dp[i] = dp[i - 1];
            }
            int index = Arrays.binarySearch(arr2, arr1[i - 1] + 1);
            if (index < 0) {
                index = -index - 1;
            }
            if (index < m) {
                dp[i] = Math.min(dp[i], dp[i - 1] + 1);
            }
            for (int j = 0; j < i; ++j) {
                if (arr1[i] > arr1[j] && dp[j] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[j] + i - j - 1);
                }
            }
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int n = arr1.length;
        int m = arr2.length;
        Arrays.sort(arr2);
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = Integer.MAX_VALUE;
        }
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            if (arr1[i] > arr1[i - 1]) {
                dp[i] = dp[i - 1];
            }
            int index = Arrays.binarySearch(arr2, arr1[i - 1]);
            if (index < 0) {
                index = -index - 1;
            }
            if (index < m) {
                dp[i] = Math.min(dp[i], dp[i - 1] + 1);
            }
            if (index > 0) {
                index--;
                if (arr2[index] < arr1[i]) {
                    if (i == 1) {
                        dp[i] = Math.min(dp[i], 1);
                    } else {
                        dp[i] = Math.min(dp[i], dp[i - 2] + 1);
                    }
                }
            }
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int n = arr1.length;
        Arrays.sort(arr2);
        int[] dp = new int[n];
        int[] next = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        Arrays.fill(next, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (arr1[i] > arr1[j]) {
                    dp[i] = Math.min(dp[i], dp[j]);
                }
                if (arr1[i] > arr1[j]) {
                    int idx = Arrays.binarySearch(arr2, arr1[j] + 1);
                    if (idx < 0) {
                        idx = -idx - 1;
                    }
                    if (idx < arr2.length) {
                        next[i] = Math.min(next[i], dp[j] + 1);
                    }
                }
            }
            dp[i] = Math.min(dp[i], next[i]);
        }
        return dp[n - 1] == Integer.MAX_VALUE ? -1 : dp[n - 1];

=======

        int n = arr1.length;
        int m = arr2.length;
        Arrays.sort(arr2);
        int[] dp = new int[n];
        int[] tmp = new int[n];
        int[] tmp2 = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i = 1; i < n; i++) {
            if (arr1[i] <= arr1[i - 1]) {
                int j = Arrays.binarySearch(arr2, arr1[i - 1] + 1);
                if (j < 0) {
                    j = -j - 1;
                }
                if (j < m) {
                    dp[i] = dp[i - 1] + 1;
                }
            } else {
                dp[i] = dp[i - 1];
            }
        }
        for (int i = 1; i < n; i++) {
            if (arr1[i] <= arr1[i - 1]) {
                int j = Arrays.binarySearch(arr2, arr1[i - 1] + 1);
                if (j < 0) {
                    j = -j - 1;
                }
                if (j < m) {
                    tmp[i] = tmp[i - 1] + 1;
                }
            } else {
                tmp[i] = tmp[i - 1];
            }
        }
        for (int k = 1; k < n; k++) {
            for (int i = 0; i < n; i++) {
                tmp2[i] = Integer.MAX_VALUE;
            }
            for (int i = 0; i < n; i++) {
                if (dp[i] != Integer.MAX_VALUE) {
                    if (arr1[i] < arr2[k]) {
                        tmp2[i] = Math.min(tmp2[i], dp[i]);
                    }
                    if (i > 0 && arr1[i - 1] < arr2[k]) {
                        tmp2[i] = Math.min(tmp2[i], dp[i - 1]);
                    }
                }
            }
            int[] t = dp;
            dp = tmp2;
            tmp2 = t;
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            ans = Math.min
