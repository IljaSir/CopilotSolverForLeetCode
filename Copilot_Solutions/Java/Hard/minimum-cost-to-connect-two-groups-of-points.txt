Synthesizing 7/10 solutions

=======

        int m = cost.size();
        int n = cost.get(0).size();
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                int sum = 0;
                for (int k = 0; k < n; k++) {
                    if ((j & (1 << k)) != 0) {
                        sum += cost.get(i).get(k);
                    }
                }
                dp[i][j] = sum;
            }
        }
        int[][] min = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(min[i], Integer.MAX_VALUE);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                for (int k = 0; k < n; k++) {
                    if ((j & (1 << k)) != 0) {
                        if (i == 0) {
                            min[i][j] = Math.min(min[i][j], dp[i][j]);
                        } else {
                            min[i][j] = Math.min(min[i][j], min[i - 1][j ^ (1 << k)] + dp[i][j]);
                        }
                    }
                }
            }
        }
        return min[m - 1][(1 << n) - 1];

=======

        int n = cost.size();
        int m = cost.get(0).size();
        int[][] dp = new int[n][1 << m];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << m); j++) {
                for (int k = 0; k < m; k++) {
                    if ((j & (1 << k)) != 0) {
                        if (i == 0) {
                            dp[i][j] = cost.get(i).get(k);
                        } else {
                            dp[i][j] = Math.min(dp[i][j], dp[i - 1][j ^ (1 << k)] + cost.get(i).get(k));
                        }
                    }
                }
            }
        }
        int min = dp[n - 1][(1 << m) - 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                min = Math.min(min, dp[i][(1 << m) - 1] + cost.get(i).get(j));
            }
        }
        return min;

=======

        int m = cost.size();
        int n = cost.get(0).size();
        int[][] dp = new int[m][1 << n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                dp[i][j] = Integer.MAX_VALUE;
            }
        }
        for (int j = 0; j < (1 << n); j++) {
            int sum = 0;
            for (int k = 0; k < n; k++) {
                if ((j & (1 << k)) > 0) {
                    sum += cost.get(0).get(k);
                }
            }
            dp[0][j] = sum;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < (1 << n); j++) {
                for (int k = 0; k < n; k++) {
                    if ((j & (1 << k)) > 0) {
                        dp[i][j] = Math.min(dp[i][j], dp[i - 1][j ^ (1 << k)] + cost.get(i).get(k));
                    }
                }
            }
        }
        return dp[m - 1][(1 << n) - 1];

=======

        int size1 = cost.size();
        int size2 = cost.get(0).size();
        int[][] dp = new int[size1 + 1][1 << size2];
        for (int i = 0; i <= size1; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        dp[0][0] = 0;
        for (int i = 1; i <= size1; i++) {
            for (int j = 0; j < (1 << size2); j++) {
                for (int k = 0; k < size2; k++) {
                    dp[i][j | (1 << k)] = Math.min(dp[i][j | (1 << k)], dp[i - 1][j] + cost.get(i - 1).get(k));
                }
            }
        }
        int ans = dp[size1][(1 << size2) - 1];
        for (int j = 0; j < (1 << size2); j++) {
            int sum = 0;
            for (int k = 0; k < size2; k++) {
                if (((j >> k) & 1) == 1) {
                    int min = Integer.MAX_VALUE;
                    for (int i = 0; i < size1; i++) {
                        min = Math.min(min, cost.get(i).get(k));
                    }
                    sum += min;
                }
            }
            ans = Math.min(ans, sum + dp[size1][j]);
        }
        return ans;

=======

        int n = cost.size();
        int m = cost.get(0).size();
        int[][] dp = new int[1 << n][m + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE / 2);
        }
        dp[0][0] = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < (1 << n); j++) {
                if ((j & (1 << i)) > 0) {
                    for (int k = 0; k < m; k++) {
                        dp[j][k + 1] = Math.min(dp[j][k + 1], dp[j ^ (1 << i)][k] + cost.get(i).get(k));
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < (1 << n); i++) {
            int tmp = 0;
            for (int j = 0; j < m; j++) {
                tmp = Math.max(tmp, cost.get(Integer.numberOfTrailingZeros(i)).get(j));
            }
            ans = Math.min(ans, dp[i][m] + tmp * (n - Integer.bitCount(i)));
        }
        return ans;

=======

        int m = cost.size();
        int n = cost.get(0).size();
        int[][] dp = new int[m][1 << n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MAX_VALUE / 2);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i][1 << j] = cost.get(i).get(j);
            }
        }
        for (int i = 0; i < m; i++) {
            for (int mask = 0; mask < (1 << n); mask++) {
                for (int j = 0; j < n; j++) {
                    if ((mask & (1 << j)) != 0) {
                        continue;
                    }
                    dp[i][mask | (1 << j)] = Math.min(dp[i][mask | (1 << j)], dp[i][mask] + cost.get(i).get(j));
                }
            }
        }
        int[][] dp2 = new int[1 << n][1 << n];
        for (int[] row : dp2) {
            Arrays.fill(row, Integer.MAX_VALUE / 2);
        }
        dp2[0][0] = 0;
        for (int i = 0; i < m; i++) {
            for (int mask1 = 0; mask1 < (1 << n); mask1++) {
                for (int mask2 = 0; mask2 < (1 << n); mask2++) {
                    if (dp2[mask1][mask2] == Integer.MAX_VALUE / 2) {
                        continue;
                    }
                    for (int j = 0; j < n; j++) {
                        if ((mask2 & (1 << j)) != 0) {
                            continue;
                        }
                        dp2[mask1 | (1 << j)][mask2 | (1 << j)] = Math.min(dp2[mask1 | (1 << j)][mask2 | (1 << j)], dp2[mask1][mask2] + cost.get(i).get(j));
                    }
                }
            }
        }
        int res = Integer.MAX_VALUE;
        for (int mask = 0; mask < (1 << n); mask++) {
            res = Math.min(res, dp2[(1

=======

        int m = cost.size();
        int n = cost.get(0).size();
        int[][] dp = new int[m+1][1<<n];
        for(int i = 0; i <= m; i++){
            Arrays.fill(dp[i], Integer.MAX_VALUE/2);
        }
        dp[0][0] = 0;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < (1<<n); j++){
                for(int k = 0; k < n; k++){
                    dp[i+1][j|(1<<k)] = Math.min(dp[i+1][j|(1<<k)], dp[i][j] + cost.get(i).get(k));
                }
            }
        }
        int ans = dp[m][(1<<n)-1];
        for(int i = 1; i < (1<<n); i++){
            int sum = 0;
            for(int j = 0; j < m; j++){
                int min = Integer.MAX_VALUE;
                for(int k = 0; k < n; k++){
                    if(((i>>k)&1) == 1){
                        min = Math.min(min, cost.get(j).get(k));
                    }
                }
                sum += min;
            }
            ans = Math.min(ans, sum + dp[m][i]);
        }
        return ans;
